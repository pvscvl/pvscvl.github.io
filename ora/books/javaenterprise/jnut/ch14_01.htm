<html>
<head>
<title>The java.lang.reflect Package (Java in a Nutshell)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="David Flanagan">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-487-8E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="The java.lang.reflect Package">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm" alt="Java Enterprise in a Nutshell"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch13_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch13_01.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="part2.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/part2.htm">Part 2: API Quick Reference</a></td><td align="right" valign="top" width="172"><a href="ch15_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch15_01.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY --><h1 class="chapter">Chapter 14.  The java.lang.reflect Package</h1>

<p>
<a name="INDEX-2085"></a>
The <tt class="literal">java.lang.reflect</tt> package contains the classes
and interfaces that, along with <tt class="literal">java.lang.Class</tt>,
comprise the Java Reflection API. This package is new as of
Java 1.1. <a href="#javanut3-java.lang.reflect-1">Figure 14-1</a>
shows the class hierarchy. </p>
<p>
<a name="INDEX-2086"></a><a name="INDEX-2087"></a><a name="INDEX-2088"></a><a name="INDEX-2089"></a><a name="INDEX-2090"></a>
The <tt class="literal">Constructor</tt>, <tt class="literal">Field</tt>, and <tt class="literal">Method</tt>
classes represent the constructors, fields, and methods of a
class. Because these types all represent members of a
class, they each implement the <tt class="literal">Member</tt> interface,
which defines a simple set of methods that can be invoked
for any class member. These classes allow information about
the class members to be obtained, methods and
constructors to be invoked, and fields to be queried and set. </p>
<p>
<a name="INDEX-2091"></a><a name="INDEX-2092"></a>
Class member modifiers are represented as integers
that specify a number of bit flags. The <tt class="literal">Modifer</tt> class
defines static methods that help interpret the meanings of
these flags. The <tt class="literal">Array</tt> class defines static methods
for creating arrays, and reading and writing array elements. </p>
<p>
<a name="INDEX-2093"></a><a name="INDEX-2094"></a>
In Java 1.3, the <tt class="literal">Proxy</tt> class allows the dynamic
creation of new Java classes that implement a specified set of
interfaces. When an interface method is invoked on an instance of
such a proxy class, the invocation is delegated to an
<tt class="literal">InvocationHandler</tt> object. </p>

<a name="javanut3-java.lang.reflect-1"></a>
<div class="figure">
<img alt="figure" src="figs/JN3_1401.gif" webstripperlinkwas="figs/JN3_1401.gif"></div>
<h4 class="objtitle">Figure 14-1. The java.lang.reflect package</h4>


<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>AccessibleObject</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.lang.reflect</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2095"></a><a name="INDEX-2096"></a><a name="INDEX-2097"></a>
  This class is the superclass of the <tt class="literal">Method</tt>,
  <tt class="literal">Constructor</tt>, and <tt class="literal">Field</tt> classes;
  its methods provide a mechanism for trusted applications to work with
  <tt class="literal">private</tt>, <tt class="literal">protected</tt>, and default
  visibility members that would otherwise not be accessible through the
  Reflection API. This class is new as of Java 1.2; in Java 1.1, the
  <tt class="literal">Method</tt>, <tt class="literal">Constructor</tt>, and
  <tt class="literal">Field</tt> classes extended <tt class="literal">Object</tt>
  directly. </p>
<p>
<a name="INDEX-2098"></a>
  To use the <tt class="literal">java.lang.reflect</tt> package to access a
  member to which your code would not normally have access, pass
  <tt class="literal">true</tt> to the <tt class="literal">setAccessible()</tt>
  method. If your code has an appropriate
  <tt class="literal">ReflectPermission</tt> ("suppressAccessChecks"), this
  allows access to the member as if it were declared
  <tt class="literal">public</tt>. The static version of
  <tt class="literal">setAccessible()</tt> is a convenience method that sets
  the accessible flag for an array of members, but performs only a
  single security check. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">AccessibleObject</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected <b class="function">AccessibleObject</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Class Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static void <b class="function">setAccessible</b> (AccessibleObject[ ] <i class="parameter">array</i>, boolean <i class="parameter">flag</i>) throws SecurityException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">isAccessible</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setAccessible</b> (boolean <i class="parameter">flag</i>) throws SecurityException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Subclasses: </span><tt class="literal">Constructor, Field, Method</tt>
</p>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">AccessibleObject.setAccessible()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>Array</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.lang.reflect</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-2099"></a>
This class contains methods that allow you to set and query
the values of array elements, to determine the length of an
array, and to create new instances of arrays. Note that the
<tt class="literal">Array</tt> class can manipulate only array values,
not array types; Java data types, including array types, are
represented by <tt class="literal">java.lang.Class</tt>. Since the
<tt class="literal">Array</tt> class represents a Java value, unlike the
<tt class="literal">Field</tt>, <tt class="literal">Method</tt>, and <tt class="literal">Constructor</tt>
classes, which represent class members, the <tt class="literal">Array</tt> class
is significantly different (despite some surface
similarities) from those other classes in this package. Most notably, all the methods of <tt class="literal">Array</tt> are static
and apply to all array values, not just
a specific field, method, or constructor. </p>
<p>
<a name="INDEX-2100"></a><a name="INDEX-2101"></a>
The <tt class="literal">get()</tt> method returns the value of the specified
element of the specified array as an <tt class="literal">Object</tt>. If the
array elements are of a primitive type, the value is
converted to a wrapper object before being returned. You
can also use <tt class="literal">getInt()</tt> and related methods to
query array elements and return them as specific primitive
<a name="INDEX-2102"></a><a name="INDEX-2103"></a>
types. The <tt class="literal">set()</tt> method and its primitive type
variants perform the opposite operation. Also, the
<tt class="literal">getLength()</tt> method returns the length of the array. </p>
<p>
<a name="INDEX-2104"></a>
The <tt class="literal">newInstance()</tt> methods create new arrays. One
version of this method is passed the number of elements in
the array and the type of those elements. The other version
of this method creates multidimensional arrays. Besides
specifying the component type of the array, it is passed an
array of numbers. The length of this array specifies the
number of dimensions for the array to be created, and the
values of each of the array elements specify the size of each
dimension of the created array. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public final class <b class="classname">Array</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">No Constructor</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Class Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static Object <b class="function">get</b> (Object <i class="parameter">array</i>, int <i class="parameter">index</i>) throws IllegalArgumentExceptionArrayIndexOutOfBoundsException;</td><td align="right"><i> native</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static boolean <b class="function">getBoolean</b> (Object <i class="parameter">array</i>, int <i class="parameter">index</i>) throws IllegalArgumentExceptionArrayIndexOutOfBoundsException;</td><td align="right"><i> native</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static byte <b class="function">getByte</b> (Object <i class="parameter">array</i>, int <i class="parameter">index</i>) throws IllegalArgumentExceptionArrayIndexOutOfBoundsException;</td><td align="right"><i> native</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static char <b class="function">getChar</b> (Object <i class="parameter">array</i>, int <i class="parameter">index</i>) throws IllegalArgumentExceptionArrayIndexOutOfBoundsException;</td><td align="right"><i> native</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static double <b class="function">getDouble</b> (Object <i class="parameter">array</i>, int <i class="parameter">index</i>) throws IllegalArgumentExceptionArrayIndexOutOfBoundsException;</td><td align="right"><i> native</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static float <b class="function">getFloat</b> (Object <i class="parameter">array</i>, int <i class="parameter">index</i>) throws IllegalArgumentExceptionArrayIndexOutOfBoundsException;</td><td align="right"><i> native</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static int <b class="function">getInt</b> (Object <i class="parameter">array</i>, int <i class="parameter">index</i>) throws IllegalArgumentExceptionArrayIndexOutOfBoundsException;</td><td align="right"><i> native</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static int <b class="function">getLength</b> (Object <i class="parameter">array</i>) throws IllegalArgumentException;</td><td align="right"><i> native</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static long <b class="function">getLong</b> (Object <i class="parameter">array</i>, int <i class="parameter">index</i>) throws IllegalArgumentExceptionArrayIndexOutOfBoundsException;</td><td align="right"><i> native</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static short <b class="function">getShort</b> (Object <i class="parameter">array</i>, int <i class="parameter">index</i>) throws IllegalArgumentExceptionArrayIndexOutOfBoundsException;</td><td align="right"><i> native</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static Object <b class="function">newInstance</b> (Class <i class="parameter">componentType</i>, int <i class="parameter">length</i>) throws NegativeArraySizeException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static Object <b class="function">newInstance</b> (Class <i class="parameter">componentType</i>, int[ ] <i class="parameter">dimensions</i>) throws IllegalArgumentExceptionNegativeArraySizeException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static void <b class="function">set</b> (Object <i class="parameter">array</i>, int <i class="parameter">index</i>, Object <i class="parameter">value</i>) throws IllegalArgumentExceptionArrayIndexOutOfBoundsException;</td><td align="right"><i> native</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static void <b class="function">setBoolean</b> (Object <i class="parameter">array</i>, int <i class="parameter">index</i>, boolean <i class="parameter">z</i>) throws IllegalArgumentExceptionArrayIndexOutOfBoundsException;</td><td align="right"><i> native</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static void <b class="function">setByte</b> (Object <i class="parameter">array</i>, int <i class="parameter">index</i>, byte <i class="parameter">b</i>) throws IllegalArgumentExceptionArrayIndexOutOfBoundsException;</td><td align="right"><i> native</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static void <b class="function">setChar</b> (Object <i class="parameter">array</i>, int <i class="parameter">index</i>, char <i class="parameter">c</i>) throws IllegalArgumentExceptionArrayIndexOutOfBoundsException;</td><td align="right"><i> native</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static void <b class="function">setDouble</b> (Object <i class="parameter">array</i>, int <i class="parameter">index</i>, double <i class="parameter">d</i>) throws IllegalArgumentExceptionArrayIndexOutOfBoundsException;</td><td align="right"><i> native</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static void <b class="function">setFloat</b> (Object <i class="parameter">array</i>, int <i class="parameter">index</i>, float <i class="parameter">f</i>) throws IllegalArgumentExceptionArrayIndexOutOfBoundsException;</td><td align="right"><i> native</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static void <b class="function">setInt</b> (Object <i class="parameter">array</i>, int <i class="parameter">index</i>, int <i class="parameter">i</i>) throws IllegalArgumentExceptionArrayIndexOutOfBoundsException;</td><td align="right"><i> native</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static void <b class="function">setLong</b> (Object <i class="parameter">array</i>, int <i class="parameter">index</i>, long <i class="parameter">l</i>) throws IllegalArgumentExceptionArrayIndexOutOfBoundsException;</td><td align="right"><i> native</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static void <b class="function">setShort</b> (Object <i class="parameter">array</i>, int <i class="parameter">index</i>, short <i class="parameter">s</i>) throws IllegalArgumentExceptionArrayIndexOutOfBoundsException;</td><td align="right"><i> native</i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>Constructor</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.lang.reflect</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-2105"></a><a name="INDEX-2106"></a>
This class represents a constructor method of a class. Instances of <tt class="literal">Constructor</tt> are obtained by calling
<tt class="literal">getConstructor()</tt> and related methods of
<tt class="literal">java.lang.Class</tt>. <tt class="literal">Constructor</tt> implements the
<tt class="literal">Member</tt> interface, so you can use the methods of that
interface to obtain the constructor name, modifiers, and
declaring class. In addition, <tt class="literal">getParameterTypes()</tt><a name="INDEX-2107"></a><a name="INDEX-2108"></a>
and <tt class="literal">getExceptionTypes()</tt> also return important
information about the represented constructor. </p>
<p>
<a name="INDEX-2109"></a>
In addition to these methods that return information about
the constructor, the <tt class="literal">newInstance()</tt> method allows the
constructor to be invoked with an array of arguments in
order to create a new instance of the class that declares
the constructor. If any of the arguments to the constructor
are of primitive types, they must be converted to their
corresponding wrapper object types to be passed to
<tt class="literal">newInstance()</tt>. If the constructor causes an
exception, the <tt class="literal">Throwable</tt> object it throws is
wrapped within the <tt class="literal">InvocationTargetException</tt> that
is thrown by <tt class="literal">newInstance()</tt>. Note that
<tt class="literal">newInstance()</tt> is much more useful than the
<tt class="literal">newInstance()</tt> method of <tt class="literal">java.lang.Class</tt>
because it can pass arguments to the constructor. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public final class <b class="classname">Constructor</b> extends AccessibleObject implements Member {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">No Constructor</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Class[ ] <b class="function">getExceptionTypes</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Class[ ] <b class="function">getParameterTypes</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Object <b class="function">newInstance</b> (Object[ ] <i class="parameter">initargs</i>) throws InstantiationExceptionIllegalAccessExceptionIllegalArgumentExceptionInvocationTargetException;</td><td align="right"><i> native</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Methods Implementing Member</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Class <b class="function">getDeclaringClass</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getModifiers</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">getName</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Object</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">equals</b> (Object <i class="parameter">obj</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">hashCode</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">toString</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->AccessibleObject-->Constructor(Member)</tt>
</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">Class.{getConstructor(), getConstructors(), getDeclaredConstructor(), getDeclaredConstructors()}</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>Field</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.lang.reflect</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-2110"></a>
This class represents a field of a class. Instances of
<tt class="literal">Field</tt> are obtained by calling the <tt class="literal">getField()</tt>
and related methods of <tt class="literal">java.lang.Class</tt>. <tt class="literal">Field</tt> implements the <tt class="literal">Member</tt> interface, so
once you have obtained a <tt class="literal">Field</tt> object, you can use
<a name="INDEX-2111"></a><a name="INDEX-2112"></a><a name="INDEX-2113"></a><a name="INDEX-2114"></a><tt class="literal">getName()</tt>, <tt class="literal">getModifiers()</tt>, and
<tt class="literal">getDeclaringClass()</tt> to determine the name,
modifiers, and class of the field. Additionally,
<tt class="literal">getType()</tt> returns the type of the field. </p>
<p>
<a name="INDEX-2115"></a>
The <tt class="literal">set()</tt> method sets the value of the represented
field for a specified object. (If the represented field is <tt class="literal">static</tt>, no object
need be specified, of course.)  If the
field is of a primitive type, its value can be specified
using a wrapper object of type <tt class="literal">Boolean</tt>,
<tt class="literal">Integer</tt>, and so on, or it can be set using the
<tt class="literal">setBoolean()</tt>, <tt class="literal">setInt()</tt>, and related
methods. <a name="INDEX-2116"></a>
Similarly, the <tt class="literal">get()</tt> method queries the value of the
represented field for a specified object and returns the
field value as an <tt class="literal">Object</tt>. Various other methods
query the field value and return it as various primitive types. </p>

<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public final class <b class="classname">Field</b> extends AccessibleObject implements Member {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">No Constructor</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Object <b class="function">get</b> (Object <i class="parameter">obj</i>) throws IllegalArgumentExceptionIllegalAccessException;</td><td align="right"><i> native</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">getBoolean</b> (Object <i class="parameter">obj</i>) throws IllegalArgumentExceptionIllegalAccessException;</td><td align="right"><i> native</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public byte <b class="function">getByte</b> (Object <i class="parameter">obj</i>) throws IllegalArgumentExceptionIllegalAccessException;</td><td align="right"><i> native</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public char <b class="function">getChar</b> (Object <i class="parameter">obj</i>) throws IllegalArgumentExceptionIllegalAccessException;</td><td align="right"><i> native</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public double <b class="function">getDouble</b> (Object <i class="parameter">obj</i>) throws IllegalArgumentExceptionIllegalAccessException;</td><td align="right"><i> native</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public float <b class="function">getFloat</b> (Object <i class="parameter">obj</i>) throws IllegalArgumentExceptionIllegalAccessException;</td><td align="right"><i> native</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getInt</b> (Object <i class="parameter">obj</i>) throws IllegalArgumentExceptionIllegalAccessException;</td><td align="right"><i> native</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public long <b class="function">getLong</b> (Object <i class="parameter">obj</i>) throws IllegalArgumentExceptionIllegalAccessException;</td><td align="right"><i> native</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public short <b class="function">getShort</b> (Object <i class="parameter">obj</i>) throws IllegalArgumentExceptionIllegalAccessException;</td><td align="right"><i> native</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Class <b class="function">getType</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">set</b> (Object <i class="parameter">obj</i>, Object <i class="parameter">value</i>) throws IllegalArgumentExceptionIllegalAccessException;</td><td align="right"><i> native</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setBoolean</b> (Object <i class="parameter">obj</i>, boolean <i class="parameter">z</i>) throws IllegalArgumentExceptionIllegalAccessException;</td><td align="right"><i> native</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setByte</b> (Object <i class="parameter">obj</i>, byte <i class="parameter">b</i>) throws IllegalArgumentExceptionIllegalAccessException;</td><td align="right"><i> native</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setChar</b> (Object <i class="parameter">obj</i>, char <i class="parameter">c</i>) throws IllegalArgumentExceptionIllegalAccessException;</td><td align="right"><i> native</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setDouble</b> (Object <i class="parameter">obj</i>, double <i class="parameter">d</i>) throws IllegalArgumentExceptionIllegalAccessException;</td><td align="right"><i> native</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setFloat</b> (Object <i class="parameter">obj</i>, float <i class="parameter">f</i>) throws IllegalArgumentExceptionIllegalAccessException;</td><td align="right"><i> native</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setInt</b> (Object <i class="parameter">obj</i>, int <i class="parameter">i</i>) throws IllegalArgumentExceptionIllegalAccessException;</td><td align="right"><i> native</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setLong</b> (Object <i class="parameter">obj</i>, long <i class="parameter">l</i>) throws IllegalArgumentExceptionIllegalAccessException;</td><td align="right"><i> native</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setShort</b> (Object <i class="parameter">obj</i>, short <i class="parameter">s</i>) throws IllegalArgumentExceptionIllegalAccessException;</td><td align="right"><i> native</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Methods Implementing Member</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Class <b class="function">getDeclaringClass</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getModifiers</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">getName</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Object</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">equals</b> (Object <i class="parameter">obj</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">hashCode</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">toString</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->AccessibleObject-->Field(Member)</tt>
</p>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">javax.ejb.deployment.EntityDescriptor.setContainerManagedFields()</tt>
</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">Class.{getDeclaredField(), getDeclaredFields(), getField(), getFields()}, javax.ejb.deployment.EntityDescriptor.getContainerManagedFields()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>InvocationHandler</b></font></td><td align="right"><font size="+1"><b>Java 1.3 Beta</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.lang.reflect</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2117"></a><a name="INDEX-2118"></a>
  This interface defines a single <tt class="literal">invoke()</tt> method
  that is called whenever a method is invoked on a dynamically created
  <tt class="literal">Proxy</tt> object. Every <tt class="literal">Proxy</tt> object
  has an associated <tt class="literal">InvocationHandler</tt> object that
  is specified when the <tt class="literal">Proxy</tt> is instantiated. All
  method invocations on the proxy object are translated into calls to
  the <tt class="literal">invoke()</tt> method of the
  <tt class="literal">InvocationHandler</tt>. </p>
<p>
<a name="INDEX-2119"></a>
  The first argument to <tt class="literal">invoke()</tt> is the
  <tt class="literal">Proxy</tt> object through which the method was invoked. The second argument is a <tt class="literal">Method</tt> object that
  represents the method that was invoked. Call the
  <tt class="literal">getDeclaringClass()</tt> method of this
  <tt class="literal">Method</tt> object to determine the interface in 
  which the method was declared. This may be a superinterface of one of the
  specified interfaces or even 
  <tt class="literal">java.lang.Object</tt> when the method invoked is
  <tt class="literal">toString()</tt>, <tt class="literal">hashCode()</tt>, or one of
  the other <tt class="literal">Object</tt> methods. The third argument to
  <tt class="literal">invoke()</tt> is the array of method arguments. Any
  primitive type arguments are wrapped in their corresponding object
  wrappers (e.g., <tt class="literal">Boolean</tt>, <tt class="literal">Integer</tt>, 
  <tt class="literal">Double</tt>). </p>
<p>
<a name="INDEX-2120"></a>
  The value returned by <tt class="literal">invoke()</tt> becomes the return
  value of the proxy object method invocation and must be of an
  appropriate type. If the proxy object method returns a primitive
  type, <tt class="literal">invoke()</tt> should return an instance of
  the corresponding wrapper class. <tt class="literal">invoke()</tt> can
  throw any unchecked (i.e., runtime) exceptions or any checked
  exceptions declared by the proxy object method. If
  <tt class="literal">invoke()</tt> throws a checked exception that is not
  declared by the proxy object, that exception is wrapped within an
  unchecked <tt class="literal">UndeclaredThrowableException</tt> that is
  thrown in its place. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public interface <b class="classname">InvocationHandler</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract Object <b class="function">invoke</b> (Object <i class="parameter">proxy</i>, Method <i class="parameter">method</i>, Object[ ] <i class="parameter">args</i>) throws Throwable;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">Proxy.{newProxyInstance(), Proxy()}</tt>
</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">Proxy.getInvocationHandler()</tt>
</p>
<p>
<span class="refsect1">Type Of: </span><tt class="literal">Proxy.h</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>InvocationTargetException</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.lang.reflect</b></font></td><td align="right"><font size="+1"><b><i>serializable checked PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-2121"></a><a name="INDEX-2122"></a>
An object of this class is thrown by <tt class="literal">Method.invoke()</tt>
and <tt class="literal">Constructor.newInstance()</tt> when an exception is
thrown by the method or constructor invoked through those
methods. The <tt class="literal">InvocationTargetException</tt> class serves
as a wrapper around the object that was thrown; that object
can be retrieved with the <tt class="literal">getTargetException()</tt>
method. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">InvocationTargetException</b> extends Exception {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">InvocationTargetException</b> (Throwable <i class="parameter">target</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">InvocationTargetException</b> (Throwable <i class="parameter">target</i>, String <i class="parameter">s</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected <b class="function">InvocationTargetException</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Throwable <b class="function">getTargetException</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Throwable</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public void <b class="function">printStackTrace</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public void <b class="function">printStackTrace</b> (java.io.PrintWriter <i class="parameter">pw</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public void <b class="function">printStackTrace</b> (java.io.PrintStream <i class="parameter">ps</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Exception-->InvocationTargetException</tt>
</p>
<p>
<span class="refsect1">Thrown By: </span><tt class="literal">java.awt.EventQueue.invokeAndWait(), Constructor.newInstance(), Method.invoke(), javax.swing.SwingUtilities.invokeAndWait()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>Member</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.lang.reflect</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-2123"></a>
This interface defines the methods shared by all members
(fields, methods, and constructors) of a class. <a name="INDEX-2124"></a><a name="INDEX-2125"></a><a name="INDEX-2126"></a><a name="INDEX-2127"></a><tt class="literal">getName()</tt> returns the name of the member,
<tt class="literal">getModifiers()</tt> returns its modifiers, and
<tt class="literal">getDeclaringClass()</tt> returns the <tt class="literal">Class</tt> object
that represents the class of which the member is a part. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public interface <b class="classname">Member</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constants</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">DECLARED</b> ;</td><td align="right"><i> =1</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">PUBLIC</b> ;</td><td align="right"><i> =0</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract Class <b class="function">getDeclaringClass</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract int <b class="function">getModifiers</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract String <b class="function">getName</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Implementations: </span><tt class="literal">Constructor, Field, Method</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>Method</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.lang.reflect</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-2128"></a><a name="INDEX-2129"></a>
This class represents a method. Instances of <tt class="literal">Method</tt>
are obtained by calling the <tt class="literal">getMethod()</tt> and related
methods of <tt class="literal">java.lang.Class</tt>. <tt class="literal">Method</tt>
implements the <tt class="literal">Member</tt> interface, so you can use the
methods of that interface to obtain the method name,
modifiers, and declaring class. In addition,
<a name="INDEX-2130"></a><a name="INDEX-2131"></a><a name="INDEX-2132"></a><tt class="literal">getReturnType()</tt>, <tt class="literal">getParameterTypes()</tt>, and
<tt class="literal">getExceptionTypes()</tt> also return important
information about the represented method. </p>
<p>
<a name="INDEX-2133"></a>
Perhaps most importantly, the <tt class="literal">invoke()</tt> method allows
the method represented by the <tt class="literal">Method</tt> object to be
invoked with a specified array of argument values. If any
of the arguments are of primitive types, they must be
converted to their corresponding wrapper object types in
order to be passed to <tt class="literal">invoke()</tt>. If the represented
method is an instance method (i.e., if it is not
<tt class="literal">static</tt>), the instance on which it should be invoked
must also be passed to <tt class="literal">invoke()</tt>. The return value
of the represented method is returned by <tt class="literal">invoke()</tt>. If the return value is a primitive value, it is first
converted to the corresponding wrapper type. If the invoked
method causes an exception, the <tt class="literal">Throwable</tt> object it
throws is wrapped within the
<tt class="literal">InvocationTargetException</tt> that is thrown by
<tt class="literal">invoke()</tt>. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public final class <b class="classname">Method</b> extends AccessibleObject implements Member {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">No Constructor</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Property Accessor Methods (by property name)</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Class <b class="function">getDeclaringClass</b> ();</td><td align="right"><i> Implements:Member</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Class[ ] <b class="function">getExceptionTypes</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getModifiers</b> ();</td><td align="right"><i> Implements:Member</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">getName</b> ();</td><td align="right"><i> Implements:Member</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Class[ ] <b class="function">getParameterTypes</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Class <b class="function">getReturnType</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Object <b class="function">invoke</b> (Object <i class="parameter">obj</i>, Object[ ] <i class="parameter">args</i>) throws IllegalAccessExceptionIllegalArgumentExceptionInvocationTargetException;</td><td align="right"><i> native</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Methods Implementing Member</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Class <b class="function">getDeclaringClass</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getModifiers</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">getName</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Object</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">equals</b> (Object <i class="parameter">obj</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">hashCode</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">toString</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->AccessibleObject-->Method(Member)</tt>
</p>
<p>
<span class="refsect1">Passed To: </span>Too many methods to list. </p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">java.beans.EventSetDescriptor.{getAddListenerMethod(), getListenerMethods(), getRemoveListenerMethod()}, java.beans.IndexedPropertyDescriptor.{getIndexedReadMethod(), getIndexedWriteMethod()}, java.beans.MethodDescriptor.getMethod(), java.beans.PropertyDescriptor.{getReadMethod(), getWriteMethod()}, Class.{getDeclaredMethod(), getDeclaredMethods(), getMethod(), getMethods()}, javax.ejb.deployment.AccessControlEntry.getMethod(), javax.ejb.deployment.ControlDescriptor.getMethod()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>Modifier</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.lang.reflect</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-2134"></a><a name="INDEX-2135"></a>
This class defines a number of constants and static methods
that can interpret the integer values returned by
the <tt class="literal">getModifiers()</tt> methods of the <tt class="literal">Field</tt>,
<tt class="literal">Method</tt>, and <tt class="literal">Constructor</tt> classes. The
<a name="INDEX-2136"></a><a name="INDEX-2137"></a><tt class="literal">isPublic()</tt>, <tt class="literal">isAbstract()</tt>, and related methods
return <tt class="literal">true</tt> if the modifier value includes the
specified modifier; otherwise, they return <tt class="literal">false</tt>. The constants defined by this class specify the various bit
flags used in the modifiers value. You can use these
constants to test for modifiers if you want to perform your
own boolean algebra. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">Modifier</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">Modifier</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constants</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">ABSTRACT</b> ;</td><td align="right"><i> =1024</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">FINAL</b> ;</td><td align="right"><i> =16</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">INTERFACE</b> ;</td><td align="right"><i> =512</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">NATIVE</b> ;</td><td align="right"><i> =256</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">PRIVATE</b> ;</td><td align="right"><i> =2</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">PROTECTED</b> ;</td><td align="right"><i> =4</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">PUBLIC</b> ;</td><td align="right"><i> =1</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">STATIC</b> ;</td><td align="right"><i> =8</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public static final int <b class="function">STRICT</b> ;</td><td align="right"><i> =2048</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">SYNCHRONIZED</b> ;</td><td align="right"><i> =32</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">TRANSIENT</b> ;</td><td align="right"><i> =128</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">VOLATILE</b> ;</td><td align="right"><i> =64</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Class Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static boolean <b class="function">isAbstract</b> (int <i class="parameter">mod</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static boolean <b class="function">isFinal</b> (int <i class="parameter">mod</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static boolean <b class="function">isInterface</b> (int <i class="parameter">mod</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static boolean <b class="function">isNative</b> (int <i class="parameter">mod</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static boolean <b class="function">isPrivate</b> (int <i class="parameter">mod</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static boolean <b class="function">isProtected</b> (int <i class="parameter">mod</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static boolean <b class="function">isPublic</b> (int <i class="parameter">mod</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static boolean <b class="function">isStatic</b> (int <i class="parameter">mod</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public static boolean <b class="function">isStrict</b> (int <i class="parameter">mod</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static boolean <b class="function">isSynchronized</b> (int <i class="parameter">mod</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static boolean <b class="function">isTransient</b> (int <i class="parameter">mod</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static boolean <b class="function">isVolatile</b> (int <i class="parameter">mod</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static String <b class="function">toString</b> (int <i class="parameter">mod</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>Proxy</b></font></td><td align="right"><font size="+1"><b>Java 1.3 Beta</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.lang.reflect</b></font></td><td align="right"><font size="+1"><b><i>serializable</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2138"></a>
  This class defines a simple but powerful API for dynamically
  generating a <em class="emphasis">proxy class</em>. A proxy class
  implements a specified list of interfaces and delegates invocations of
  the methods defined by those interfaces to a separate invocation
  handler object. </p>
<p>
<a name="INDEX-2139"></a>
  The static <tt class="literal">getProxyClass()</tt> method dynamically
  creates a new <tt class="literal">Class</tt> object that implements each of
  the interfaces specified in the supplied <tt class="literal">Class[]</tt>
  array. The newly created class is defined in the context of the
  specified <tt class="literal">ClassLoader</tt>. The
  <tt class="literal">Class</tt> returned by
  <tt class="literal">getProxyClass()</tt> is a subclass of
  <tt class="literal">Proxy</tt>. Every class that is dynamically generated by
  <tt class="literal">getProxyClass()</tt> has a single public constructor,
  which expects a single argument of type
  <tt class="literal">InvocationHandler</tt>. You can create an instance of
  the dynamic proxy class by using the <tt class="literal">Constructor</tt>
  class to invoke this constructor. Or, more simply, you can combine
  the call to <tt class="literal">getProxyClass()</tt> with the constructor


  call by calling the static <tt class="literal">newProxyInstance()</tt>
  method, which both defines and instantiates a proxy class.
<a name="INDEX-2140"></a><a name="INDEX-2141"></a>
</p>
<p>  Every instance of a dynamic proxy class has an associated
  <tt class="literal">InvocationHandler</tt> object. All method calls made on
  a proxy class are translated into calls to the
  <tt class="literal">invoke()</tt> method of this
  <tt class="literal">InvocationHandler</tt> object, which can handle the call
  in any way it sees fit. The static
  <tt class="literal">getInvocationHandler()</tt> method returns the
  <tt class="literal">InvocationHandler</tt> object for a given proxy object. The static <tt class="literal">isProxyClass()</tt> method returns
  <tt class="literal">true</tt> if a specified <tt class="literal">Class</tt> object
  is a dynamically generated proxy class. 
<a name="INDEX-2142"></a>
</p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">Proxy</b> implements Serializable {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected <b class="function">Proxy</b> (InvocationHandler <i class="parameter">h</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Class Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static InvocationHandler <b class="function">getInvocationHandler</b> (Object <i class="parameter">proxy</i>) throws IllegalArgumentException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static Class <b class="function">getProxyClass</b> (ClassLoader <i class="parameter">loader</i>, Class[ ] <i class="parameter">interfaces</i>) throws IllegalArgumentException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static boolean <b class="function">isProxyClass</b> (Class <i class="parameter">cl</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static Object <b class="function">newProxyInstance</b> (ClassLoader <i class="parameter">loader</i>, Class[ ] <i class="parameter">interfaces</i>, InvocationHandler <i class="parameter">h</i>) throws IllegalArgumentException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Instance Fields</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected InvocationHandler <b class="function">h</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Proxy(Serializable)</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>ReflectPermission</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.lang.reflect</b></font></td><td align="right"><font size="+1"><b><i>serializable permission</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2143"></a><a name="INDEX-2144"></a><a name="INDEX-2145"></a>
  This class is a <tt class="literal">java.security.Permission</tt> that
  governs access to <tt class="literal">private</tt>,
  <tt class="literal">protected</tt>, and default-visibility methods,
  constructors, and fields through the Java Reflection
  API. In Java 1.2, the only defined
  name, or target, for <tt class="literal">ReflectPermission</tt> is
  "suppressAccessChecks". This permission is required to call the
  <tt class="literal">setAccessible()</tt> method of
  <tt class="literal">AccessibleObject</tt>. Unlike some
  <tt class="literal">Permission</tt> subclasses,
  <tt class="literal">ReflectPermission</tt> does not use a list of actions. See also <tt class="literal">AccessibleObject</tt>. </p>
<p>
<a name="INDEX-2146"></a>
  System administrators
  configuring security policies should be familiar with this class, but
  application programmers should never need to use it directly. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public final class <b class="classname">ReflectPermission</b> extends java.security.BasicPermission {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">ReflectPermission</b> (String <i class="parameter">name</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">ReflectPermission</b> (String <i class="parameter">name</i>, String <i class="parameter">actions</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->java.security.Permission(java.security.Guard,Serializable)-->java.security.BasicPermission(Serializable)-->ReflectPermission</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>UndeclaredThrowableException</b></font></td><td align="right"><font size="+1"><b>Java 1.3 Beta</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.lang.reflect</b></font></td><td align="right"><font size="+1"><b><i>serializable unchecked</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2147"></a><a name="INDEX-2148"></a><a name="INDEX-2149"></a>
  Thrown by a method of a <tt class="literal">Proxy</tt>
  object if the <tt class="literal">invoke()</tt> method of the proxy's
  <tt class="literal">InvocationHandler</tt> throws a checked exception
  not declared by the original method. This class serves as an
  unchecked exception wrapper around the checked exception. Use
  <tt class="literal">getUndeclaredThrowable()</tt> to obtain the 
  checked exception thrown by <tt class="literal">invoke()</tt>. </p>

<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">UndeclaredThrowableException</b> extends RuntimeException {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">UndeclaredThrowableException</b> (Throwable <i class="parameter">undeclaredThrowable</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">UndeclaredThrowableException</b> (Throwable <i class="parameter">undeclaredThrowable</i>, String <i class="parameter">s</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Throwable <b class="function">getUndeclaredThrowable</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Throwable</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">printStackTrace</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">printStackTrace</b> (java.io.PrintStream <i class="parameter">ps</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">printStackTrace</b> (java.io.PrintWriter <i class="parameter">pw</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Exception-->RuntimeException-->UndeclaredThrowableException</tt>
</p>
</div>
<a name="INDEX-2150"></a>


<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch13_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch13_01.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch15_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch15_01.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">13.1. The java.lang.ref Package</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">15. The java.math Package</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
