<html>
<head>
<title>Local Classes (Java in a Nutshell)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="David Flanagan">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-487-8E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Local Classes">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm" alt="Java Enterprise in a Nutshell"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch03_10.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch03_10.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch03_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch03_01.htm">Chapter 3: Object-Oriented Programming in Java</a></td><td align="right" valign="top" width="172"><a href="ch03_12.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch03_12.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY --><h2 class="sect1">3.11. Local Classes</h2>
<p>
<a name="INDEX-550"></a>

      A <em class="emphasis">local class</em> 
      is declared locally within a block of Java code,
      rather than as a member of a class. Typically, a local class is defined
      within a method, but it can also be defined within a
      static initializer or instance initializer of a class. Because
      all blocks of Java code appear within class definitions, all local
      classes are nested within containing classes. For this reason,
      local classes share many of the features of member classes. It is
      usually more appropriate, however, to think of them as an entirely
      separate kind of inner class. A local class has approximately the
      same relationship to a member class as a local variable has to an
      instance variable of a class. </p>
<p>      The defining characteristic of a local class is that it
      is local to a block of code. Like a local variable, a local class
      is valid only within the scope defined by its enclosing block. If a member class is used only within a single
      method of its containing class, for example, 
      there is usually no reason it
      cannot be coded as a local class, rather than a member class. <a href="#javanut3-ch-3-ex-localcl">Example 3-10</a> shows how we can modify
      the <tt class="literal">enumerate()</tt> method of the
      <tt class="literal">LinkedStack</tt> class 
      so it defines <tt class="literal">Enumerator</tt> as a local class
      instead of a member class. By doing this, we move the
      definition of the class even closer to where it is
      used and hopefully improve the clarity of the code even further. For brevity, <a href="#javanut3-ch-3-ex-localcl">Example 3-10</a>
      shows only the <tt class="literal">enumerate()</tt> method, not the entire
      <tt class="literal">LinkedStack</tt> class that contains it. </p>
<a name="javanut3-ch-3-ex-localcl"></a>
<div class="example">
<h4 class="objtitle">Example 3-10. Defining and Using a Local Class</h4>
<blockquote>
<pre class="programlisting">// This method creates and returns an Enumeration object
public java.util.Enumeration enumerate() {

  // Here's the definition of Enumerator as a local class
  class Enumerator implements java.util.Enumeration {
    Linkable current;
    public Enumerator() { current = head; }
    public boolean hasMoreElements() {  return (current != null); }
    public Object nextElement() {
      if (current == null) throw new java.util.NoSuchElementException();
      Object value = current;
      current = current.getNext();
      return value;
    }
  }

  // Now return an instance of the Enumerator class defined directly above
  return new Enumerator();
}</pre>
</blockquote>
</div>
<h3 class="sect2">3.11.1. Features of Local Classes</h3>
<p>	Local classes have the following interesting features:
      </p>
<ul>
<li>
<p>	    Like member classes, local classes are associated with a
	    containing instance, and can access any members, including
	    <tt class="literal">private</tt> members, of the containing class. </p>
</li>
<li>
<p>	    In addition to accessing fields defined by the containing
	    class, local classes can access any local variables, method
	    parameters, or exception parameters that are in the scope of
	    the local method definition and declared
	    <tt class="literal">final</tt>. </p>
</li>
</ul>
<h3 class="sect2">3.11.2. Restrictions on Local Classes</h3>
<p>
<a name="INDEX-551"></a><a name="INDEX-552"></a>

	Local classes are subject to the following restrictions:
      </p>
<ul>
<li>
<p>	    A local class is visible only within the block that
	    defines it; it can never be used outside that block. </p>
</li>
<li>
<p>	    Local classes cannot be declared <tt class="literal">public</tt>,
	    <tt class="literal">protected</tt>, <tt class="literal">private</tt>, or
	    <tt class="literal">static</tt>. These modifiers are for
	    members of classes; they are not allowed with local variable
	    declarations or local class declarations. </p>
</li>
<li>
<p>	    Like member classes, and for the same reasons, local classes
	    cannot contain <tt class="literal">static</tt> 
	    fields, methods, or classes. The only
	    exception is for constants that are declared both
	    <tt class="literal">static</tt> and <tt class="literal">final</tt>. </p>
</li>
<li>
<p>	  Interfaces cannot be defined locally. </p>
</li>
<li>
<p>	    A local class, like a member class, cannot have
	    the same name as any of its enclosing classes. </p>
</li>
<li>
<p>	    As noted earlier, a local class can use the local variables,
	    method parameters, and even exception parameters that are in
	    its scope, but only if those variables or parameters are
	    declared <tt class="literal">final</tt>. This is because the
	    lifetime of an instance of a local class can be much longer
	    than the execution of the method in which the class is
	    defined. For this reason, a local class must have a private
	    internal copy of all local variables it uses (these copies
	    are automatically generated by the compiler). The only way to
	    ensure that the local variable and the private copy are
	    always the same is to insist that the local variable is
	    <tt class="literal">final</tt>. </p>
</li>
</ul>
<h3 class="sect2">3.11.3. New Syntax for Local Classes</h3>
<p>	In Java 1.0, only fields, methods, and classes can be declared
	<tt class="literal">final</tt>. The addition of local classes in Java
	1.1 has required a liberalization in the use of the
	<tt class="literal">final</tt> modifier. It can now be applied to
	local variables, method parameters, and even the exception
	parameter of a <tt class="literal">catch</tt> statement. The meaning
	of the <tt class="literal">final</tt> modifier remains the same in
	these new uses: once the local variable or parameter has been
	assigned a value, that value cannot be changed. </p>
<p>	Instances of local classes, like instances of member classes,
	have an enclosing instance that is implicitly passed to all
	constructors of the local class. Local classes can use the same
	<tt class="literal">this</tt> syntax as member classes, to
	refer explicitly to members of enclosing classes. Because local
	classes are never visible outside the blocks that define them,
	however,
	there is never a need to use the <tt class="literal">new</tt> and
	<tt class="literal">super</tt> syntax used by member classes to
	specify the enclosing instance explicitly. </p>
<h3 class="sect2">3.11.4. Scope of a Local Class</h3>
<p>
<a name="INDEX-553"></a><a name="INDEX-554"></a>

	In discussing member classes, we saw that a member class can
	access any members inherited from superclasses and any
	members defined by its containing classes. The same is true for
	local classes, but local classes can also access
	<tt class="literal">final</tt> local variables and parameters. The following code illustrates the many
	fields and variables that may be accessible to a local class:
      </p>
<blockquote>
<pre class="programlisting">class A { protected char a = 'a'; }
class B { protected char b = 'b'; }

public class C extends A {
  private char c = 'c';         // Private fields visible to local class
  public static char d = 'd';
  public void createLocalObject(final char e)
  {
    final char f = 'f';
    int i = 0;                  // i not final; not usable by local class
    class Local extends B
    {
      char g = 'g';
      public void printVars()
      {
        // All of these fields and variables are accessible to this class
        System.out.println(g);  // (this.g) g is a field of this class
        System.out.println(f);  // f is a final local variable
        System.out.println(e);  // e is a final local parameter
        System.out.println(d);  // (C.this.d) d -- field of containing class
        System.out.println(c);  // (C.this.c) c -- field of containing class
        System.out.println(b);  // b is inherited by this class
        System.out.println(a);  // a is inherited by the containing class
      }
    }
    Local l = new Local();      // Create an instance of the local class
    l.printVars();              // and call its printVars() method. 
  }
}</pre>
</blockquote>
<h3 class="sect2">3.11.5. Local Classes and Local Variable Scope</h3>
<p>
<a name="INDEX-555"></a><a name="INDEX-556"></a><a name="INDEX-557"></a><a name="INDEX-558"></a>

	A local variable is defined within a block of code, which
	defines its scope. A local variable ceases to exist outside
	of its scope. Java is a <em class="emphasis">lexically scoped</em> 
	language, which means
	that its concept of scope has to do with
	the way the source code is written. Any code within the curly
	braces that define the boundaries of a block can use local
	variables defined in that block.<a href="#FOOTNOTE-9">[9]</a>
</p>
<blockquote class="footnote">
<a name="FOOTNOTE-9"></a>
<p>[9]	    This section covers advanced material; first-time readers
	    may want to skip it for now and return to it later. </p>
</blockquote>
<p>	Lexical scoping simply defines a segment of source code within
	which a variable can be used. It is common, however, to think of
	a scope as a temporal scope--to think of a local variable as
	existing from the time the Java interpreter begins executing
	the block until the time the interpreter exits the block. This is usually a reasonable way to think about local variables
	and their scope. </p>
<p>	The introduction of local classes confuses the picture, however,
	because local classes can use local variables, and instances of
	a local class can have a lifetime much longer than the time it
	takes the interpreter to execute the block of code. In other
	words, if
	you create an instance of a local class, the instance does not
	automatically go away when the interpreter finishes executing
	the block that defines the class, as shown in the following code:
      </p>
<blockquote>
<pre class="programlisting">public class Weird {
  // A static member interface used below
  public static interface IntHolder { public int getValue(); }

  public static void main(String[] args) {     
    IntHolder[] holders = new IntHolder[10];   // An array to hold 10 objects
    for(int i = 0; i &lt; 10; i++) {              // Loop to fill the array up
      final int fi = i;                        // A final local variable
      class MyIntHolder implements IntHolder { // A local class
	public int getValue() { return fi; }  // It uses the final variable
      }
      holders[i] = new MyIntHolder();          // Instantiate the local class
    }

    // The local class is now out of scope, so we can't use it. But
    // we've got ten valid instances of that class in our array. The local
    // variable fi is not in our scope here, but it is still in scope for
    // the getValue() method of each of those ten objects. So call getValue()
    // for each object and print it out. This prints the digits 0 to 9. 
    for(int i = 0; i &lt; 10; i++) System.out.println(holders[i].getValue());
  }
}</pre>
</blockquote>
<p>	The behavior of the previous program is pretty surprising. To make
	sense of it, remember that the lexical scope of the methods of a
	local class has nothing to do with when the
	interpreter enters and exits the block of code that defines the
	local class. Here's another way to think about it:
	each instance of a local class has an automatically created
	private copy of each of the final local variables it uses, so, in
	effect, it has its own private copy of the scope that existed
	when it was created.
<a name="INDEX-559"></a>
</p>

<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch03_10.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch03_10.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch03_12.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch03_12.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">3.10. Member Classes</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">3.12. Anonymous Classes</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
