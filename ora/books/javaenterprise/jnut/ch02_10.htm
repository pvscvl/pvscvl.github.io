<html>
<head>
<title>Reference Types (Java in a Nutshell)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="David Flanagan">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-487-8E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Reference Types">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm" alt="Java Enterprise in a Nutshell"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch02_09.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch02_09.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch02_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch02_01.htm">Chapter 2: Java Syntax

from the Ground Up</a></td><td align="right" valign="top" width="172"><a href="ch02_11.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch02_11.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY --><h2 class="sect1">2.10. Reference Types</h2>
<p>
<a name="INDEX-376"></a><a name="INDEX-377"></a>

      Now that we have discussed the syntax for working
      with objects and arrays, we can return to the issue of why classes and
      array types are known as reference types. As we saw in <a href="ch02_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch02_04.htm">Table 2-2</a>, all the Java primitive types have
      well-defined standard sizes, so all primitive values can be
      stored in a fixed amount of memory (between one and eight bytes,
      depending on the type). But classes and
      array types are composite types; objects and arrays contain other
      values, so they do not have a standard size, and they often
      require quite a bit more memory than eight bytes. For this reason,
      Java does not manipulate objects and arrays directly. Instead, it
      manipulates <em class="emphasis">references</em> to objects and arrays. Because Java handles objects and arrays by reference, classes
      and array types are known as reference types. In contrast,
      Java handles values
      of the primitive types directly, or by value. </p>
<p>      A reference to an object or an array is simply some
      fixed-size value that refers to the object or array in some
      way.<a href="#FOOTNOTE-4">[4]</a> When you assign an
      object or array to a variable, you are actually
      setting the variable to hold a reference to that object or array. Similarly, when you pass an object or array to a method, what
      really happens is that the method is given a reference to the
      object or array through which it can manipulate the object or
      array. </p>
<blockquote class="footnote">
<a name="FOOTNOTE-4"></a>
<p>[4] Typically, a reference is the memory address
      at which the object or array is stored. However, since Java
      references are opaque and cannot be manipulated in any way, this
      is an implementation detail.</p>
</blockquote>
<p>      C and C++ programmers should note that Java does not support the
      <tt class="literal">&amp;</tt> address-of operator or the
      <tt class="literal">*</tt> and <tt class="literal">&minus;&gt;</tt> dereference
      operators. In Java, primitive types are always handled exclusively
      by value, and objects and arrays are always handled exclusively by
      reference. Furthermore, unlike pointers in C and C++, references
      in Java are entirely opaque: they cannot be converted to or from
      integers, and
      they cannot be incremented or decremented. </p>
<p>      Although references are an important part of how Java works,
      Java programs cannot manipulate references in any way. Despite
      this, there are significant differences between the behavior of
      primitive types and reference types in two important areas: the
      way values are copied and the way they are compared for equality. </p>
<h3 class="sect2">2.10.1. Copying Objects and Arrays</h3>
<p>
<a name="INDEX-378"></a><a name="INDEX-379"></a>

	Consider the following code that manipulate a primitive
	<tt class="literal">int</tt> value:
</p>
<blockquote>
<pre class="programlisting">int x = 42;
int y = x;</pre>
</blockquote>
<p>
	After these lines execute, the variable <tt class="literal">y</tt>
	contains a copy of the value held in the variable
	<tt class="literal">x</tt>. Inside the Java VM, there are two
	independent copies of the 32-bit integer 42. </p>
<p>	Now think about what happens if we run the same basic code
	but use a reference type instead of a primitive type:
</p>
<blockquote>
<pre class="programlisting">Point p = new Point(1.0, 2.0);
Point q = p;</pre>
</blockquote>
<p>
	After this code runs, the variable <tt class="literal">q</tt> holds
	a copy of the reference held in the variable
	<tt class="literal">p</tt>. There is still only one copy of the 
	<tt class="literal">Point</tt> object in the VM, but there are now two
	copies of the reference to that object. This has
	some important implications. Suppose the two previous lines of code
	are followed by this code:
</p>
<blockquote>
<pre class="programlisting">System.out.println(p.x);  // Print out the X coordinate of p: 1.0
q.x = 13.0;               // Now change the X coordinate of q
System.out.println(p.x);  // Print out p.x again; this time it is 13.0</pre>
</blockquote>
<p>
	Since the variables <tt class="literal">p</tt> and
	<tt class="literal">q</tt> hold references to the same object,
	either variable can be used to make changes to the object, and
	those changes are visible through the other variable as
	well. </p>
<p>	This behavior is not specific to objects; the same thing
	happens with arrays, as illustrated by the
	following code:
</p>
<blockquote>
<pre class="programlisting">char[] greet = { 'h','e','l','l','o' };  // greet holds an array reference
char[] cuss = greet;                     // cuss holds the same reference
cuss[4] = '!';                           // Use reference to change an element
System.out.println(greet);               // Prints "hell!"</pre>
</blockquote>
<p>
</p>
<p>	A similar difference in behavior between primitive types and
	reference types occurs when arguments are passed to methods. Consider the following method:
</p>
<blockquote>
<pre class="programlisting">void changePrimitive(int x) {
  while(x &gt; 0)
    System.out.println(x--);
}</pre>
</blockquote>
<p>
	When this method is invoked, the method is given a copy of 
	the argument used to invoke the method in the parameter
	<tt class="literal">x</tt>. The code in the
	method uses <tt class="literal">x</tt> as a loop counter and
	decrements it to zero. Since <tt class="literal">x</tt> is a primitive
	type, the method has its own private copy of this value, so 
	this is a perfectly reasonable thing to do. </p>
<p>	On the other hand, consider what happens if we modify the
	method so that the parameter is a reference type:
</p>
<blockquote>
<pre class="programlisting">void changeReference(Point p) {
  while(p.x &gt; 0)
    System.out.println(p.x--);
}</pre>
</blockquote>
<p>
	When this method is invoked, it is passed a private copy of a
	reference to a <tt class="literal">Point</tt> object and can use
	this reference to change the <tt class="literal">Point</tt> object. Consider the following:
</p>
<blockquote>
<pre class="programlisting">Point q = new Point(3.0, 4.5);  // A point with an X coordinate of 3
changeReference(q);             // Prints 3,2,1 and modifies the Point
System.out.println(q.x);        // The X coordinate of q is now 0!</pre>
</blockquote>
<p>
	When the <tt class="literal">changeReference()</tt> method is
	invoked, it is passed a copy of the reference held in variable
	<tt class="literal">q</tt>. Now both the variable <tt class="literal">q</tt>
	and the method parameter <tt class="literal">p</tt> hold references
	to the same object. The method can use its reference to
	change the contents of the object. Note, however, that it
	cannot change the contents of the variable
	<tt class="literal">q</tt>. In other words, the method can change
	the <tt class="literal">Point</tt> object beyond recognition, but it
	cannot change the fact that the variable <tt class="literal">q</tt>
	refers to that object. </p>
<p>	The title of this section is "Copying Objects and Arrays," but, 
	so far, we've only seen copies of references to objects
	and arrays, not copies of the objects and arrays themselves. To make an actual copy of an object or an array, you must use the
	special <tt class="literal">clone()</tt> method (inherited by all
	objects from <tt class="literal">java.lang.Object</tt>):
</p>
<blockquote>
<pre class="programlisting">Point p = new Point(1,2);    // p refers to one object
Point q = (Point) p.clone(); // q refers to a copy of that object
q.y = 42;                    // Modify the copied object, but not the original

int[] data = {1,2,3,4,5};           // An array
int[] copy = (int[]) data.clone();  // A copy of the array</pre>
</blockquote>
<p>
	Note that a cast is necessary to coerce the return value of the
	<tt class="literal">clone()</tt> method to the correct type. The
	reason for this will become clear later in this chapter. There are a couple of points you should be aware of when using
	<tt class="literal">clone()</tt>. First, not all objects can be
	cloned. Java only allows an object to be cloned if the object's
	class has explicitly declared itself to be cloneable by
	implementing the <tt class="literal">Cloneable</tt> interface. (We
	haven't discussed interfaces or how they are implemented yet;
	that is covered in <a href="ch03_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch03_01.htm">Chapter 3, "Object-Oriented Programming in Java"</a>.)  The
	definition of <tt class="literal">Point</tt> that we showed earlier
	does not actually implement this
	interface, so our <tt class="literal">Point</tt> type, as implemented,
	is not cloneable. Note, however, that arrays
	are always cloneable. If you call the
	<tt class="literal">clone()</tt> method for a non-cloneable object, it
	throws a <tt class="literal">CloneNotSupportedException</tt>, so when
	you use the <tt class="literal">clone()</tt> method, you may want to
	use it within a <tt class="literal">try</tt> block to catch this
	exception. </p>
<p>	The second thing you need to understand about
	<tt class="literal">clone()</tt> is that, by default, it is
	implemented to create a shallow copy of an object or array. The copied object or array contains copies of all the
	primitive values and references in the original object or array. In other words, any references in the object or array are
	copied, not cloned; <tt class="literal">clone()</tt> does not
	recursively make copies of the objects or arrays referred to
	by those references. A class may need to override this
	shallow copy behavior by defining its own version of the
	<tt class="literal">clone()</tt> method that explicitly performs a
	deeper copy where needed. To understand the shallow copy
	behavior of <tt class="literal">clone()</tt>, consider cloning a
	two-dimensional array of arrays:
</p>
<blockquote>
<pre class="programlisting">int[][] data = {{1,2,3}, {4,5}};       // An array of 2 references
int[][] copy = (int[][]) data.clone(); // Copy the 2 refs to a new array
copy[0][0] = 99;                       // This changes data[0][0] too!
copy[1] = new int[] {7,8,9};           // This does not change data[1]</pre>
</blockquote>
<p>
        If you want to make a deep copy of this multidimensional
        array, you have to copy each dimension explicitly:
</p>
<blockquote>
<pre class="programlisting">int[][] data = {{1,2,3}, {4,5}};       // An array of 2 references
int[][] copy = new int[data.length][]; // A new array to hold copied arrays
for(int i = 0; i &lt; data.length; i++)
  copy[i] = (int[]) data[i].clone();</pre>
</blockquote>
<h3 class="sect2">2.10.2. Comparing Objects and Arrays</h3>
<p>
<a name="INDEX-380"></a><a name="INDEX-381"></a><a name="INDEX-382"></a><a name="INDEX-383"></a>

	We've seen that primitive types and reference types differ
	significantly in the way they are assigned to variables,
	passed to methods, and copied. The types also 
	differ in the way they are compared for equality. When used with
	primitive values, the equality 
	operator (<tt class="literal">= =</tt>) 
	simply tests whether two values are identical (i.e., whether 
	they have exactly the same bits). With reference
	types, however, <tt class="literal">= =</tt> compares references, not
	actual objects or arrays. In other words, 
	<tt class="literal">= =</tt>
	tests whether two references refer to the same object or
	array; it does not test whether two objects or arrays have the
	same content. For example:
</p>
<blockquote>
<pre class="programlisting">String letter = "o";
String s = "hello";                      // These two String objects
String t = "hell" + letter;              // contain exactly the same text. 
if (s == t) System.out.println("equal"); // But they are not equal!

byte[] a = { 1, 2, 3 };                  // An array. 
byte[] b = (byte[]) a.clone();           // A copy with identical content. 
if (a == b) System.out.println("equal"); // But they are not equal!</pre>
</blockquote>
<p>	When working with reference types, there are two kinds of
	equality: equality of reference and equality of object. It
	is important to distinguish between these two kinds of
	equality. One way to do this is to use the word "equals" when
	talking about equality of references and the word
	"equivalent" when talking about two distinct object or arrays
	that have the same contents. Unfortunately, the designers of
	Java didn't use this nomenclature, as the method for
	testing whether one object is equivalent to another 
	is named <tt class="literal">equals()</tt>. To test two objects for
	equivalence, pass one of them to the
	<tt class="literal">equals()</tt> method of the other:
</p>
<blockquote>
<pre class="programlisting">String letter = "o";
String s = "hello";                      // These two String objects
String t = "hell" + letter;              // contain exactly the same text. 
if (s.equals(t))                         // And the equals() method 
  System.out.println("equivalent");      // tells us so. </pre>
</blockquote>
<p>	All objects inherit an <tt class="literal">equals()</tt> method
	(from <tt class="literal">Object</tt>, but
	the default implementation simply uses <tt class="literal">= =</tt>
	to test for equality of references, not equivalence of
	content. A class that wants to allow objects to be compared
	for equivalence can define its own version of the
	<tt class="literal">equals()</tt> method. Our
	<tt class="literal">Point</tt> class does not do this, but the
	<tt class="literal">String</tt> class does, as indicated by the code
	above. You can call the <tt class="literal">equals()</tt> method on
	an array, but it is the same as using the
	<tt class="literal">= =</tt> operator, because arrays always
	inherit the 
	default <tt class="literal">equals()</tt> method that compares
	references rather than array content. Starting in Java 1.2,
	you can compare arrays for equivalence with the convenience
	method <tt class="literal">java.util.Arrays.equals()</tt>. Prior to
	Java 1.2, however, you must loop through the elements of the
	arrays and compare them yourself. </p>
<h3 class="sect2">2.10.3. The null Reference</h3>
<p>
<a name="INDEX-384"></a><a name="INDEX-385"></a>

	We've seen the <tt class="literal">null</tt> keyword in our
	discussions of objects and arrays. Now that we have described
	references, it is worth revisiting <tt class="literal">null</tt> to
	point out that it is a special value that is a reference to
	nothing, or an absence of a reference. The default value for
	all reference types is <tt class="literal">null</tt>. The
	<tt class="literal">null</tt> value is unique in that it can be
	assigned to a variable of any reference type whatsoever. </p>
<h3 class="sect2">2.10.4. Terminology: Pass by Value</h3>
<p>
<a name="INDEX-386"></a><a name="INDEX-387"></a><a name="INDEX-388"></a><a name="INDEX-389"></a>

	I've said that Java handles arrays and objects "by reference."
	Don't confuse this with the phrase "pass by
	reference."<a href="#FOOTNOTE-5">[5]</a>  "Pass by reference" is a term used
	to describe the method-calling conventions of some programming
	languages. In a pass-by-reference language, values--even
	primitive values--are not passed directly to methods. Instead,
	methods are always passed references to values. Thus, if the method modifies its
	parameters, those modifications are visible when the method
	returns, even for primitive types. </p>
<blockquote class="footnote">
<a name="FOOTNOTE-5"></a>
<p>[5]Unfortunately, previous editions of
	this book may have contributed to the
	confusion!</p>
</blockquote>
<p>	Java does <em class="emphasis">not</em> do this; it is 
	a "pass by value" language. However, when a reference type is involved, the value that is
	passed is a reference. But this is not the same as
	pass-by-reference. If Java were a pass-by-reference language,
	when a reference type was passed to a method, it would be passed
	as a reference to the reference. </p>
<h3 class="sect2">2.10.5. Memory Allocation and Garbage Collection</h3>
<p>
<a name="INDEX-390"></a><a name="INDEX-391"></a>

	As we've already noted, objects and arrays are 
	composite values that can
	contain a number of other values and may require a
	substantial amount of memory. When you use the
	<tt class="literal">new</tt> keyword to create a new object or array
	or use an object or array literal in your program, Java
	automatically creates the object for you, allocating whatever
	amount of memory is necessary. You don't need to do anything to
	make this happen. </p>
<p>	In addition, Java also automatically reclaims
	that memory for reuse when it is no longer needed. It does this
	through a process called <em class="emphasis">garbage
	  collection</em>. An object is considered garbage when
	there are no longer any references to it stored in any
	variables, the fields of any objects, or the elements of
	any arrays. For example:
</p>
<blockquote>
<pre class="programlisting">Point p = new Point(1,2);           // Create an object
double d = p.distanceFromOrigin();  // Use it for something
p = new Point(2,3);                 // Create a new object</pre>
</blockquote>
<p>
	After the Java interpreter executes the third line, a
	reference to the new <tt class="literal">Point</tt> object has
	replaced the reference to the first one. There are now no
	remaining references to the first object, so it is garbage. At
	some point, the garbage collector will discover this and
	reclaim the memory used by the object. </p>
<p>	C programmers, who are used to using <tt class="literal">malloc()</tt>
	and <tt class="literal">free()</tt> to manage memory, and C++
	programmers, who are used to explicitly deleting their objects
	with <tt class="literal">delete</tt>, may find it a little hard to
	relinquish control and trust the garbage collector. Even
	though it seems like magic, it really works!  There is a slight
	performance penalty due to the use of garbage collection,
	and Java programs may sometimes slow down noticeably while
	the garbage collector is actively reclaiming memory. However,
	having garbage collection built into the language dramatically
	reduces the occurrence of memory leaks and related bugs and
	almost always improves programmer productivity. </p>
<h3 class="sect2">2.10.6. Reference Type Conversions</h3>
<p>
<a name="INDEX-392"></a>

	When we discussed primitive types earlier in this chapter, we
	saw that values of certain types can be converted to values of
	other types. Widening
	conversions are performed automatically by the Java
	interpreter, as necessary. Narrowing conversions, however, can
	result in lost data, so the interpreter does not perform
	them unless explicitly directed to do so with a cast. </p>
<p>	Java does not allow any kind of conversion from primitive types
	to reference types or vice versa. Java does allow widening and narrowing conversions among
	certain reference types, however. As we've seen, there are an infinite
	number of potential reference types. In order to understand the
	conversions that can be performed among these types, you need to
	understand that the types form a hierarchy, usually called the
	<em class="emphasis">class hierarchy</em>. </p>
<p>	Every Java class <em class="emphasis">extends</em> some other
	class, known as its <em class="emphasis">superclass</em>. A class
	inherits the fields and methods of its superclass and then
	defines its own additional fields and methods. There is a
	special class named <tt class="literal">Object</tt> that serves as
	the root of the class hierarchy in Java. It does not extend any class,
	but all other Java classes extend <tt class="literal">Object</tt>
	or some other class that has <tt class="literal">Object</tt>
	as one of its ancestors. The <tt class="literal">Object</tt> class
	defines a number of special methods that are inherited (or
	overridden) by all classes. These include the
	<tt class="literal">toString()</tt>,
	<tt class="literal">clone()</tt>, and <tt class="literal">equals()</tt>
	methods described earlier. </p>
<p>	The predefined <tt class="literal">String</tt> class and the
	<tt class="literal">Point</tt> class we defined earlier in this
	chapter both extend <tt class="literal">Object</tt>. Thus, we can say
	that all <tt class="literal">String</tt> objects are also
	<tt class="literal">Object</tt> objects. We can also say that all
	<tt class="literal">Point</tt> objects are <tt class="literal">Object</tt>
	objects. The opposite is not true, however. We cannot
	say that every <tt class="literal">Object</tt> is a 
	<tt class="literal">String</tt> because, as we've just seen, some
	<tt class="literal">Object</tt> objects are <tt class="literal">Point</tt>
	objects. </p>
<p>	With this simple understanding of the class hierarchy, we can
	return to the rules of reference type conversion:
	</p>
<ul>
<li>
<p>	      An object cannot be converted to an unrelated type. The
	      Java compiler does not allow you to convert a
	      <tt class="literal">String</tt> to a <tt class="literal">Point</tt>,
	      for example, even if you use a cast operator. </p>
</li>
<li>
<p>	      An object can be converted to the type of a superclass. This is a widening conversion, so no cast is required. For example, a <tt class="literal">String</tt> value can be
	      assigned to a variable of type
	      <tt class="literal">Object</tt> or passed to a method
	      where an <tt class="literal">Object</tt> parameter is expected. Note that no conversion is actually performed; the
	      object is simply treated as if it were an instance of
	      the superclass. </p>
</li>
<li>
<p>	      An object can be converted to the type of a subclass,
	      but this is a narrowing conversion and requires a
	      cast. The Java compiler provisionally allows this
	      kind of conversion, but the Java interpreter checks
	      at runtime to make sure it is valid. Only cast an
	      object to the type of a subclass if you are sure, based
	      on the logic of your program, that the object is
	      actually an instance of the subclass. If it is not, the
	      interpreter throws a
	      <tt class="literal">ClassCastException</tt>. For example, if
	      we assign a <tt class="literal">String</tt> object to a
	      variable of type <tt class="literal">Object</tt>, we can
	      later cast the value of that variable back to type
	      <tt class="literal">String</tt>:
</p>
<blockquote>
<pre class="programlisting">Object o = "string";    // Widening conversion from String to Object
// Later in the program... 
String s = (String) o;  // Narrowing conversion from Object to String</pre>
</blockquote>
<p>
</p>
</li>
<li>
<p>	      All array types are distinct, so an array of one type cannot
	      be converted to an array of another type, even if the
	      individual elements could be converted. For example,
	      although a <tt class="literal">byte</tt> can be widened to an
	      <tt class="literal">int</tt>, a <tt class="literal">byte[]</tt> cannot
	      be converted to an <tt class="literal">int[]</tt>, even with an
	      explicit cast. </p>
</li>
<li>
<p>
<a name="INDEX-393"></a>

	      Arrays do not have a type hierarchy, but all arrays are
	      considered instances of <tt class="literal">Object</tt>,
	      so any array can be converted to an
	      <tt class="literal">Object</tt> value through a widening
	      conversion. A narrowing conversion with a cast can
	      convert such an object value back to an array. For example:
</p>
<blockquote>
<pre class="programlisting">Object o = new int[] {1,2,3};  // Widening conversion from array to Object
// Later in the program... 
int[] a = (int[]) o;           // Narrowing conversion back to array type</pre>
</blockquote>
<p>
</p>
</li>
</ul>

<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch02_09.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch02_09.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch02_11.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch02_11.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">2.9. Array Types</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">2.11. Packages and the Java Namespace</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
