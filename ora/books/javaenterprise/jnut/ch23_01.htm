<html>
<head>
<title>The java.util Package (Java in a Nutshell)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="David Flanagan">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-487-8E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="The java.util Package">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm" alt="Java Enterprise in a Nutshell"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch22_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch22_01.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="part2.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/part2.htm">Part 2: API Quick Reference</a></td><td align="right" valign="top" width="172"><a href="ch24_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch24_01.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY --><h1 class="chapter">Chapter 23.  The java.util Package</h1>

<p>
<a name="INDEX-2772"></a><a name="INDEX-2773"></a>

  The <tt class="literal">java.util</tt> package defines a number of useful classes,
  primarily collections classes that are useful for working with groups
  of objects. This package should not be considered merely a utility
  package that is separate from the rest of the language; in fact, Java depends
  directly on several of the classes in this package. <a href="#javanut3-java.util-1">Figure 23-1</a> shows the collection classes of this
  package, while <a href="#javanut3-java.util-2">Figure 23-2</a> shows the
  other classes. </p>
<a name="javanut3-java.util-1"></a>
<div class="figure">
<img alt="figure" src="figs/JN3_2301.gif" webstripperlinkwas="figs/JN3_2301.gif"></div>
<h4 class="objtitle">Figure 23-1. The collection classes of the java.util package</h4>
<a name="javanut3-java.util-2"></a>
<div class="figure">
<img alt="figure" src="figs/JN3_2302.gif" webstripperlinkwas="figs/JN3_2302.gif"></div>
<h4 class="objtitle">Figure 23-2. Other classes of the java.util package</h4>
<p>
<a name="INDEX-2774"></a><a name="INDEX-2775"></a><a name="INDEX-2776"></a><a name="INDEX-2777"></a><a name="INDEX-2778"></a><a name="INDEX-2779"></a><a name="INDEX-2780"></a><a name="INDEX-2781"></a><a name="INDEX-2782"></a><a name="INDEX-2783"></a>

  The most important classes in <tt class="literal">java.util</tt> are the
  collections classes. Prior to Java 1.2, these were
  <tt class="literal">Vector</tt>, a growable list of objects, and
  <tt class="literal">Hashtable</tt>, a mapping between arbitrary key and
  value objects. Java 1.2 adds an entire collections framework
  consisting of the <tt class="literal">Collection</tt>,
  <tt class="literal">Map</tt>, <tt class="literal">Set</tt>,
  <tt class="literal">List</tt>, <tt class="literal">SortedMap</tt>, and
  <tt class="literal">SortedSet</tt> interfaces and the classes that
  implement them. Other important classes and interfaces of the
  collections framework are <tt class="literal">Comparator</tt>,
  <tt class="literal">Collections</tt>, <tt class="literal">Arrays</tt>,
  <tt class="literal">Iterator</tt>, and
  <tt class="literal">ListIterator</tt>. </p>
<p>
<a name="INDEX-2784"></a><a name="INDEX-2785"></a><a name="INDEX-2786"></a>
  The other classes of the package are also useful. <tt class="literal">Date</tt>,
  <tt class="literal">Calendar</tt>, and <tt class="literal">TimeZone</tt> work with dates and times. <a name="INDEX-2787"></a><tt class="literal">ResourceBundle</tt> and its subclasses represent a bundle of
  localized resources that are read in by an internationalized program
  at runtime. <a name="INDEX-2788"></a><a name="INDEX-2789"></a><tt class="literal">BitSet</tt> implements an arbitrary-size array of
  bits. <tt class="literal">Random</tt> generates and returns pseudo-random numbers
  in a variety of forms. <tt class="literal">StringTokenizer</tt> parses a string
  into tokens. <a name="INDEX-2790"></a><a name="INDEX-2791"></a><a name="INDEX-2792"></a>
  Finally, in Java 1.3, <tt class="literal">Timer</tt> and
  <tt class="literal">TimerTask</tt> provide a powerful API for scheduling
  code to be run by a background thread, once or repetitively, at a
  specified time in the future. </p>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>AbstractCollection</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.util</b></font></td><td align="right"><font size="+1"><b><i>collection</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2793"></a><a name="INDEX-2794"></a><a name="INDEX-2795"></a><a name="INDEX-2796"></a><a name="INDEX-2797"></a><a name="INDEX-2798"></a><a name="INDEX-2799"></a>

  This abstract class is a partial implementation of
  <tt class="literal">Collection</tt> that makes it easy to define custom
  <tt class="literal">Collection</tt> implementations. To create an
  unmodifiable collection, simply override <tt class="literal">size()</tt> and
  <tt class="literal">iterator()</tt>. The <tt class="literal">Iterator</tt> object
  returned by <tt class="literal">iterator()</tt> has to support only the
  <tt class="literal">hasNext()</tt> and <tt class="literal">next()</tt> methods. To define a modifiable collection, you must additionally override the
  <tt class="literal">add()</tt> method of <tt class="literal">AbstractCollection</tt> 
  and make sure the <tt class="literal">Iterator</tt> returned by
  <tt class="literal">iterator()</tt> supports the <tt class="literal">remove()</tt>
  method. Some subclasses may choose to
  override other methods to tune performance. In addition, it is conventional that all subclasses
  provide two constructors: one that takes no arguments and one that
  accepts a <tt class="literal">Collection</tt> argument that specifies the
  initial contents of the collection. </p>

<p> Note that if you subclass <tt class="literal">AbstractCollection</tt>
  directly, you are implementing a <em class="emphasis">bag</em>--an
  unordered collection that allows duplicate elements. If your
  <tt class="literal">add()</tt> method rejects duplicate elements, you
  should subclass <tt class="literal">AbstractSet</tt> instead. See also
  <tt class="literal">AbstractList</tt>. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public abstract class <b class="classname">AbstractCollection</b> implements Collection {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected <b class="function">AbstractCollection</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Methods Implementing Collection</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">add</b> (Object <i class="parameter">o</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">addAll</b> (Collection <i class="parameter">c</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">clear</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">contains</b> (Object <i class="parameter">o</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">containsAll</b> (Collection <i class="parameter">c</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">isEmpty</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract Iterator <b class="function">iterator</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">remove</b> (Object <i class="parameter">o</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">removeAll</b> (Collection <i class="parameter">c</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">retainAll</b> (Collection <i class="parameter">c</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract int <b class="function">size</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Object[ ] <b class="function">toArray</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Object[ ] <b class="function">toArray</b> (Object[ ] <i class="parameter">a</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Object</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">toString</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>

<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->AbstractCollection(Collection)</tt>
</p>
<p>
<span class="refsect1">Subclasses: </span><tt class="literal">AbstractList, AbstractSet</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>AbstractList</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.util</b></font></td><td align="right"><font size="+1"><b><i>collection</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2800"></a>
  This abstract class is a partial implementation of the
  <tt class="literal">List</tt> interface that makes it easy to
  define custom <tt class="literal">List</tt> implementations based
  on random-access list elements (such as objects stored in an array). If you want to base a <tt class="literal">List</tt> implementation on a
  sequential-access data model (such as a linked list), subclass
  <tt class="literal">AbstractSequentialList</tt> instead. </p>
<p>
<a name="INDEX-2801"></a><a name="INDEX-2802"></a><a name="INDEX-2803"></a><a name="INDEX-2804"></a><a name="INDEX-2805"></a>
  To create an unmodifiable <tt class="literal">List</tt>, simply subclass
  <tt class="literal">AbstractList</tt> and override the (inherited)
  <tt class="literal">size()</tt> and <tt class="literal">get()</tt>
  methods. To create a modifiable list, you must also override
  <tt class="literal">set()</tt> and, optionally,
  <tt class="literal">add()</tt> and <tt class="literal">remove()</tt>. These three
  methods are optional, so unless you override them, they simply throw
  an <tt class="literal">UnsupportedOperationException</tt>. All other
  methods of the <tt class="literal">List</tt> interface are implemented in
  terms of <tt class="literal">size()</tt>, <tt class="literal">get()</tt>,
  <tt class="literal">set()</tt>, <tt class="literal">add()</tt>, and
  <tt class="literal">remove()</tt>. In some cases, you may want to override
  these other methods to improve performance. By convention, all <tt class="literal">List</tt> implementations should
  define two constructors: one that accepts no arguments and another
  that accepts a <tt class="literal">Collection</tt> of initial elements for
  the list. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public abstract class <b class="classname">AbstractList</b> extends AbstractCollection implements java.util.List {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected <b class="function">AbstractList</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Methods Implementing List</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">add</b> (Object <i class="parameter">o</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">add</b> (int <i class="parameter">index</i>, Object <i class="parameter">element</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">addAll</b> (int <i class="parameter">index</i>, Collection <i class="parameter">c</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">clear</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">equals</b> (Object <i class="parameter">o</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract Object <b class="function">get</b> (int <i class="parameter">index</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">hashCode</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">indexOf</b> (Object <i class="parameter">o</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Iterator <b class="function">iterator</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">lastIndexOf</b> (Object <i class="parameter">o</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public ListIterator <b class="function">listIterator</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public ListIterator <b class="function">listIterator</b> (int <i class="parameter">index</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Object <b class="function">remove</b> (int <i class="parameter">index</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Object <b class="function">set</b> (int <i class="parameter">index</i>, Object <i class="parameter">element</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public java.util.List <b class="function">subList</b> (int <i class="parameter">fromIndex</i>, int <i class="parameter">toIndex</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected void <b class="function">removeRange</b> (int <i class="parameter">fromIndex</i>, int <i class="parameter">toIndex</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Instance Fields</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected transient int <b class="function">modCount</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->AbstractCollection(Collection)-->AbstractList(java.util.List(Collection))</tt>
</p>
<p>
<span class="refsect1">Subclasses: </span><tt class="literal">AbstractSequentialList, ArrayList, Vector</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>AbstractMap</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.util</b></font></td><td align="right"><font size="+1"><b><i>collection</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2806"></a><a name="INDEX-2807"></a><a name="INDEX-2808"></a><a name="INDEX-2809"></a>

  This abstract class is a partial implementation of the
  <tt class="literal">Map</tt> interface that makes it easy to
  define simple custom <tt class="literal">Map</tt> implementations. To
  define an unmodifiable map, subclass <tt class="literal">AbstractMap</tt>
  and override the <tt class="literal">entrySet()</tt> method so that it
  returns a set of <tt class="literal">Map.Entry</tt> objects. (Note that you
  must also implement <tt class="literal">Map.Entry</tt>, of course.)  The
  returned set should not support <tt class="literal">add()</tt> or
  <tt class="literal">remove()</tt>, and its iterator should not support
  <tt class="literal">remove()</tt>. In order to define a modifiable
  <tt class="literal">Map</tt>, you must additionally override the
  <tt class="literal">put()</tt> method and provide support for the
  <tt class="literal">remove()</tt> method of the iterator returned by
  <tt class="literal">entrySet().iterator()</tt>. In addition, it is conventional that all
  <tt class="literal">Map</tt> implementations define two constructors:
  one that accepts no arguments and another that accepts a
  <tt class="literal">Map</tt> of initial mappings. </p>
<p>
<tt class="literal">AbstractMap</tt> defines all <tt class="literal">Map</tt>
  methods in terms of its <tt class="literal">entrySet()</tt> and
  <tt class="literal">put()</tt> methods and the <tt class="literal">remove()</tt>
  method of the entry set iterator. Note, however, that the
  implementation is based on a linear search of the
  <tt class="literal">Set</tt> returned by <tt class="literal">entrySet()</tt> and
  is not efficient when the <tt class="literal">Map</tt> contains more
  than a handful of entries. Some subclasses may want to override
  additional <tt class="literal">AbstractMap</tt> methods to improve
  performance. <tt class="literal">HashMap</tt> and
  <tt class="literal">TreeMap</tt> use different algorithms are are
  substantially more efficient. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public abstract class <b class="classname">AbstractMap</b> implements Map {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected <b class="function">AbstractMap</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Methods Implementing Map</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">clear</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">containsKey</b> (Object <i class="parameter">key</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">containsValue</b> (Object <i class="parameter">value</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract Set <b class="function">entrySet</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">equals</b> (Object <i class="parameter">o</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Object <b class="function">get</b> (Object <i class="parameter">key</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">hashCode</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">isEmpty</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Set <b class="function">keySet</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Object <b class="function">put</b> (Object <i class="parameter">key</i>, Object <i class="parameter">value</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">putAll</b> (Map <i class="parameter">t</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Object <b class="function">remove</b> (Object <i class="parameter">key</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">size</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Collection <b class="function">values</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Object</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">toString</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->AbstractMap(Map)</tt>
</p>
<p>
<span class="refsect1">Subclasses: </span><tt class="literal">HashMap, TreeMap, WeakHashMap</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>AbstractSequentialList</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.util</b></font></td><td align="right"><font size="+1"><b><i>collection</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2810"></a><a name="INDEX-2811"></a>
  This abstract class is a partial implementation of the
  <tt class="literal">List</tt> interface that makes it easy to
  define <tt class="literal">List</tt> implementations based on a
  sequential-access data model, as is the case with the
  <tt class="literal">LinkedList</tt> subclass. To implement a
  <tt class="literal">List</tt> based on an array or other random-access
  model, subclass <tt class="literal">AbstractList</tt> instead. </p>
<p>
<a name="INDEX-2812"></a><a name="INDEX-2813"></a><a name="INDEX-2814"></a><a name="INDEX-2815"></a><a name="INDEX-2816"></a><a name="INDEX-2817"></a><a name="INDEX-2818"></a><a name="INDEX-2819"></a>
  To implement an unmodifiable list, subclass this class and override
  the <tt class="literal">size()</tt> and <tt class="literal">listIterator()</tt>
  methods. <tt class="literal">listIterator()</tt> must return a
  <tt class="literal">ListIterator</tt> that defines the
  <tt class="literal">hasNext()</tt>, <tt class="literal">hasPrevious()</tt>,
  <tt class="literal">next()</tt>, <tt class="literal">previous()</tt>, and
  <tt class="literal">index()</tt> methods. If you want to allow the list to
  be modified, the <tt class="literal">ListIterator</tt> should also support
  the <tt class="literal">set()</tt> method and, optionally, the
  <tt class="literal">add()</tt> and <tt class="literal">remove()</tt> methods. <tt class="literal">AbstractSequentialList</tt> implements all other
  <tt class="literal">List</tt> methods in terms of these methods. Some
  subclasses may want to override additional methods to improve
  performance. In addition, it is conventional that all
  <tt class="literal">List</tt> implementations 
  define two constructors: one that accepts no arguments and another
  that accepts a <tt class="literal">Collection</tt> of initial elements for
  the list. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public abstract class <b class="classname">AbstractSequentialList</b> extends AbstractList {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected <b class="function">AbstractSequentialList</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding AbstractList</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">add</b> (int <i class="parameter">index</i>, Object <i class="parameter">element</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">addAll</b> (int <i class="parameter">index</i>, Collection <i class="parameter">c</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Object <b class="function">get</b> (int <i class="parameter">index</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Iterator <b class="function">iterator</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract ListIterator <b class="function">listIterator</b> (int <i class="parameter">index</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Object <b class="function">remove</b> (int <i class="parameter">index</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Object <b class="function">set</b> (int <i class="parameter">index</i>, Object <i class="parameter">element</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->AbstractCollection(Collection)-->AbstractList(java.util.List(Collection))-->AbstractSequentialList</tt>
</p>
<p>
<span class="refsect1">Subclasses: </span><tt class="literal">LinkedList</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>AbstractSet</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.util</b></font></td><td align="right"><font size="+1"><b><i>collection</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2820"></a><a name="INDEX-2821"></a><a name="INDEX-2822"></a>
  This abstract class is a partial implementation of the
  <tt class="literal">Set</tt> interface that makes it easy to
  create custom <tt class="literal">Set</tt> implementations. Since
  <tt class="literal">Set</tt> defines the same methods as
  <tt class="literal">Collection</tt>, you can subclass
  <tt class="literal">AbstractSet</tt> exactly as you would subclass
  <tt class="literal">AbstractCollection</tt>. See
  <tt class="literal">AbstractCollection</tt> for details. Note, however,
  that when subclassing <tt class="literal">AbstractSet</tt>, you should be
  sure that your <tt class="literal">add()</tt> method and your constructors
  do not allow duplicate elements to be added to the set. See also
  <tt class="literal">AbstractList</tt>. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public abstract class <b class="classname">AbstractSet</b> extends AbstractCollection implements Set {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected <b class="function">AbstractSet</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Methods Implementing Set</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">equals</b> (Object <i class="parameter">o</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">hashCode</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->AbstractCollection(Collection)-->AbstractSet(Set(Collection))</tt>
</p>
<p>
<span class="refsect1">Subclasses: </span><tt class="literal">HashSet, TreeSet</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>ArrayList</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.util</b></font></td><td align="right"><font size="+1"><b><i>cloneable serializable collection</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2823"></a><a name="INDEX-2824"></a><a name="INDEX-2825"></a><a name="INDEX-2826"></a><a name="INDEX-2827"></a>
  This class is a <tt class="literal">List</tt> implementation based on
  an array (that is recreated as necessary as the list grows or
  shrinks). <tt class="literal">ArrayList</tt> implements all optional
  <tt class="literal">List</tt> and <tt class="literal">Collection</tt> methods and
  allows list elements of any type (including <tt class="literal">null</tt>). Because
  <tt class="literal">ArrayList</tt> is based on an array, the
  <tt class="literal">get()</tt> and <tt class="literal">set()</tt> methods are very
  efficient. (This is not the case for the <tt class="literal">LinkedList</tt>
  implementation, for example.)  <tt class="literal">ArrayList</tt> is a
  general-purpose implementation of <tt class="literal">List</tt> and is quite
  commonly used. <tt class="literal">ArrayList</tt> is very much like the
  <tt class="literal">Vector</tt> class, except that its methods are not
  synchronized. If you are using an <tt class="literal">ArrayList</tt> in
  a multithreaded environment, you should explicitly synchronize any
  modifications to the list, or wrap the list with
  <tt class="literal">Collections.synchronizedList()</tt>. See <tt class="literal">List</tt> and <tt class="literal">Collection</tt> for
  details on the methods of <tt class="literal">ArrayList</tt>. See also
  <tt class="literal">LinkedList</tt>. </p>
<p>
<a name="INDEX-2828"></a><a name="INDEX-2829"></a>
  An <tt class="literal">ArrayList</tt> has a <em class="emphasis">capacity</em>,
  which is the number of elements in the internal array that contains
  the elements of the list. When the number of elements exceeds the
  capacity, a new array, with a larger capacity, must be created. In
  addition to the <tt class="literal">List</tt> and
  <tt class="literal">Collection</tt> methods, <tt class="literal">ArrayList</tt>
  defines a couple of methods that help you manage this capacity. If
  you know in advance how many elements an <tt class="literal">ArrayList</tt>
  will contain, you can call <tt class="literal">ensureCapacity()</tt>, which
  can increase efficiency by avoiding incremental reallocation of the
  internal array. You can also pass an initial capacity value to the
  <tt class="literal">ArrayList()</tt> constructor. Finally, if an
  <tt class="literal">ArrayList</tt> has reached its final size and will not
  change in the future, you can call <tt class="literal">trimToSize()</tt> to
  reallocate the internal array with a capacity that matches the list
  size exactly. When the <tt class="literal">ArrayList</tt> will have a long
  lifetime, this can be a useful technique to reduce memory usage. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">ArrayList</b> extends AbstractList implements Cloneable, java.util.ListSerializable {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">ArrayList</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">ArrayList</b> (int <i class="parameter">initialCapacity</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">ArrayList</b> (Collection <i class="parameter">c</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">ensureCapacity</b> (int <i class="parameter">minCapacity</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">trimToSize</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Methods Implementing List</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">add</b> (Object <i class="parameter">o</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">add</b> (int <i class="parameter">index</i>, Object <i class="parameter">element</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">addAll</b> (Collection <i class="parameter">c</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">addAll</b> (int <i class="parameter">index</i>, Collection <i class="parameter">c</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">clear</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">contains</b> (Object <i class="parameter">elem</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Object <b class="function">get</b> (int <i class="parameter">index</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">indexOf</b> (Object <i class="parameter">elem</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">isEmpty</b> ();</td><td align="right"><i> default:true</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">lastIndexOf</b> (Object <i class="parameter">elem</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Object <b class="function">remove</b> (int <i class="parameter">index</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Object <b class="function">set</b> (int <i class="parameter">index</i>, Object <i class="parameter">element</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">size</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Object[ ] <b class="function">toArray</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Object[ ] <b class="function">toArray</b> (Object[ ] <i class="parameter">a</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Methods Overriding AbstractList</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected void <b class="function">removeRange</b> (int <i class="parameter">fromIndex</i>, int <i class="parameter">toIndex</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Object</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Object <b class="function">clone</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->AbstractCollection(Collection)-->AbstractList(java.util.List(Collection))-->ArrayList(Cloneable,java.util.List(Collection),Serializable)</tt>
</p>
<p>
<span class="refsect1">Type Of: </span><tt class="literal">java.awt.dnd.DragGestureRecognizer.events, java.beans.beancontext.BeanContextServicesSupport.bcsListeners, java.beans.beancontext.BeanContextSupport.bcmListeners</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>Arrays</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.util</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2830"></a><a name="INDEX-2831"></a>

  This class defines static methods for sorting, searching, and
  performing other useful operations on arrays. It also defines the
  <tt class="literal">asList()</tt> method, which returns a
  <tt class="literal">List</tt> wrapper around a specified array of objects. Any changes made to the <tt class="literal">List</tt> are also made to
  the underlying array. This is a powerful method that allows any array
  of objects to be manipulated in any of the ways a
  <tt class="literal">List</tt> can be manipulated. It provides a link between arrays and
  the Java collections framework. </p>
<p>
<a name="INDEX-2832"></a>
  The various <tt class="literal">sort()</tt> methods sort an array (or a
  specified portion of an array) in place. Variants of the method are
  defined for arrays of each primitive type and for arrays of
  <tt class="literal">Object</tt>. For arrays of primitive types, the sorting
  is done according to the natural ordering of the type. For arrays of
  objects, the sorting is done according to the specified
  <tt class="literal">Comparator</tt>, or, if the array contains only
  <tt class="literal">java.lang.Comparable</tt> objects, according to the
  ordering defined by that interface. When sorting an array of objects,
  a stable sorting algorithm is used so that the relative ordering of
  equal objects is not disturbed. (This allows repeated sorts to order objects
  by key and subkey, for example.)</p>
<p>
<a name="INDEX-2833"></a>
  The <tt class="literal">binarySearch()</tt> methods perform 
  an efficient search (in logarithmic
  time) of a sorted array for a specified value. If a match is found in the array, <tt class="literal">binarySearch()</tt>
  returns the index of the match. If no match is found, the method
  returns a negative number. For a negative return value
  <tt class="literal">r</tt>, the index <tt class="literal">-(r+1)</tt> specifies
  the array index at which the specified value can be inserted to
  maintain the sorted order of the array. When the array to be searched
  is an array of objects, the elements of the array must all implement
  <tt class="literal">java.lang.Comparable</tt>, or you must provide a
  <tt class="literal">Comparator</tt> object to compare them. </p>
<p>
<a name="INDEX-2834"></a><a name="INDEX-2835"></a>
  The <tt class="literal">equals()</tt> methods test whether two arrays are
  equal. Two arrays of primitive type are equal if they
  contain the same number of elements and if corresponding pairs of
  elements are equal according to the
  <tt class="literal">==</tt> operator. Two arrays of objects are
  equal if they contain the same number of elements and if
  corresponding pairs of elements are equal according to
  the <tt class="literal">equals()</tt> method defined by those objects. The <tt class="literal">fill()</tt> methods fill an array or a specified
  range of an array with the specified value. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">Arrays</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">No Constructor</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Class Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static java.util.List <b class="function">asList</b> (Object[ ] <i class="parameter">a</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static int <b class="function">binarySearch</b> (short[ ] <i class="parameter">a</i>, short <i class="parameter">key</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static int <b class="function">binarySearch</b> (Object[ ] <i class="parameter">a</i>, Object <i class="parameter">key</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static int <b class="function">binarySearch</b> (long[ ] <i class="parameter">a</i>, long <i class="parameter">key</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static int <b class="function">binarySearch</b> (int[ ] <i class="parameter">a</i>, int <i class="parameter">key</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static int <b class="function">binarySearch</b> (double[ ] <i class="parameter">a</i>, double <i class="parameter">key</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static int <b class="function">binarySearch</b> (byte[ ] <i class="parameter">a</i>, byte <i class="parameter">key</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static int <b class="function">binarySearch</b> (char[ ] <i class="parameter">a</i>, char <i class="parameter">key</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static int <b class="function">binarySearch</b> (float[ ] <i class="parameter">a</i>, float <i class="parameter">key</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static int <b class="function">binarySearch</b> (Object[ ] <i class="parameter">a</i>, Object <i class="parameter">key</i>, Comparator <i class="parameter">c</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static boolean <b class="function">equals</b> (boolean[ ] <i class="parameter">a</i>, boolean[ ] <i class="parameter">a2</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static boolean <b class="function">equals</b> (byte[ ] <i class="parameter">a</i>, byte[ ] <i class="parameter">a2</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static boolean <b class="function">equals</b> (float[ ] <i class="parameter">a</i>, float[ ] <i class="parameter">a2</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static boolean <b class="function">equals</b> (double[ ] <i class="parameter">a</i>, double[ ] <i class="parameter">a2</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static boolean <b class="function">equals</b> (int[ ] <i class="parameter">a</i>, int[ ] <i class="parameter">a2</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static boolean <b class="function">equals</b> (long[ ] <i class="parameter">a</i>, long[ ] <i class="parameter">a2</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static boolean <b class="function">equals</b> (char[ ] <i class="parameter">a</i>, char[ ] <i class="parameter">a2</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static boolean <b class="function">equals</b> (short[ ] <i class="parameter">a</i>, short[ ] <i class="parameter">a2</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static boolean <b class="function">equals</b> (Object[ ] <i class="parameter">a</i>, Object[ ] <i class="parameter">a2</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static void <b class="function">fill</b> (double[ ] <i class="parameter">a</i>, double <i class="parameter">val</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static void <b class="function">fill</b> (char[ ] <i class="parameter">a</i>, char <i class="parameter">val</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static void <b class="function">fill</b> (short[ ] <i class="parameter">a</i>, short <i class="parameter">val</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static void <b class="function">fill</b> (Object[ ] <i class="parameter">a</i>, Object <i class="parameter">val</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static void <b class="function">fill</b> (float[ ] <i class="parameter">a</i>, float <i class="parameter">val</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static void <b class="function">fill</b> (byte[ ] <i class="parameter">a</i>, byte <i class="parameter">val</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static void <b class="function">fill</b> (int[ ] <i class="parameter">a</i>, int <i class="parameter">val</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static void <b class="function">fill</b> (long[ ] <i class="parameter">a</i>, long <i class="parameter">val</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static void <b class="function">fill</b> (boolean[ ] <i class="parameter">a</i>, boolean <i class="parameter">val</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static void <b class="function">fill</b> (Object[ ] <i class="parameter">a</i>, int <i class="parameter">fromIndex</i>, int <i class="parameter">toIndex</i>, Object <i class="parameter">val</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static void <b class="function">fill</b> (boolean[ ] <i class="parameter">a</i>, int <i class="parameter">fromIndex</i>, int <i class="parameter">toIndex</i>, boolean <i class="parameter">val</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static void <b class="function">fill</b> (byte[ ] <i class="parameter">a</i>, int <i class="parameter">fromIndex</i>, int <i class="parameter">toIndex</i>, byte <i class="parameter">val</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static void <b class="function">fill</b> (float[ ] <i class="parameter">a</i>, int <i class="parameter">fromIndex</i>, int <i class="parameter">toIndex</i>, float <i class="parameter">val</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static void <b class="function">fill</b> (short[ ] <i class="parameter">a</i>, int <i class="parameter">fromIndex</i>, int <i class="parameter">toIndex</i>, short <i class="parameter">val</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static void <b class="function">fill</b> (int[ ] <i class="parameter">a</i>, int <i class="parameter">fromIndex</i>, int <i class="parameter">toIndex</i>, int <i class="parameter">val</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static void <b class="function">fill</b> (long[ ] <i class="parameter">a</i>, int <i class="parameter">fromIndex</i>, int <i class="parameter">toIndex</i>, long <i class="parameter">val</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static void <b class="function">fill</b> (double[ ] <i class="parameter">a</i>, int <i class="parameter">fromIndex</i>, int <i class="parameter">toIndex</i>, double <i class="parameter">val</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static void <b class="function">fill</b> (char[ ] <i class="parameter">a</i>, int <i class="parameter">fromIndex</i>, int <i class="parameter">toIndex</i>, char <i class="parameter">val</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static void <b class="function">sort</b> (char[ ] <i class="parameter">a</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static void <b class="function">sort</b> (short[ ] <i class="parameter">a</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static void <b class="function">sort</b> (int[ ] <i class="parameter">a</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static void <b class="function">sort</b> (byte[ ] <i class="parameter">a</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static void <b class="function">sort</b> (double[ ] <i class="parameter">a</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static void <b class="function">sort</b> (float[ ] <i class="parameter">a</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static void <b class="function">sort</b> (long[ ] <i class="parameter">a</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static void <b class="function">sort</b> (Object[ ] <i class="parameter">a</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static void <b class="function">sort</b> (Object[ ] <i class="parameter">a</i>, Comparator <i class="parameter">c</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static void <b class="function">sort</b> (short[ ] <i class="parameter">a</i>, int <i class="parameter">fromIndex</i>, int <i class="parameter">toIndex</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static void <b class="function">sort</b> (Object[ ] <i class="parameter">a</i>, int <i class="parameter">fromIndex</i>, int <i class="parameter">toIndex</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static void <b class="function">sort</b> (byte[ ] <i class="parameter">a</i>, int <i class="parameter">fromIndex</i>, int <i class="parameter">toIndex</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static void <b class="function">sort</b> (char[ ] <i class="parameter">a</i>, int <i class="parameter">fromIndex</i>, int <i class="parameter">toIndex</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static void <b class="function">sort</b> (float[ ] <i class="parameter">a</i>, int <i class="parameter">fromIndex</i>, int <i class="parameter">toIndex</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static void <b class="function">sort</b> (double[ ] <i class="parameter">a</i>, int <i class="parameter">fromIndex</i>, int <i class="parameter">toIndex</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static void <b class="function">sort</b> (int[ ] <i class="parameter">a</i>, int <i class="parameter">fromIndex</i>, int <i class="parameter">toIndex</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static void <b class="function">sort</b> (long[ ] <i class="parameter">a</i>, int <i class="parameter">fromIndex</i>, int <i class="parameter">toIndex</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static void <b class="function">sort</b> (Object[ ] <i class="parameter">a</i>, int <i class="parameter">fromIndex</i>, int <i class="parameter">toIndex</i>, Comparator <i class="parameter">c</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>BitSet</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.util</b></font></td><td align="right"><font size="+1"><b><i>cloneable serializable PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-2836"></a>

This class defines an arbitrarily large set of bits. Instance methods allow you to set, clear, and query
individual bits in the set. You can also perform bitwise
boolean arithmetic on the bits in <tt class="literal">BitSet</tt> objects. This class can be used as an extremely compact array of
boolean values, although reading and writing those values is
slower than normal array access. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">BitSet</b> implements Cloneable, Serializable {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">BitSet</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">BitSet</b> (int <i class="parameter">nbits</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">and</b> (BitSet <i class="parameter">set</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public void <b class="function">andNot</b> (BitSet <i class="parameter">set</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">clear</b> (int <i class="parameter">bitIndex</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">get</b> (int <i class="parameter">bitIndex</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public int <b class="function">length</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">or</b> (BitSet <i class="parameter">set</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">set</b> (int <i class="parameter">bitIndex</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">size</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">xor</b> (BitSet <i class="parameter">set</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Object</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Object <b class="function">clone</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">equals</b> (Object <i class="parameter">obj</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">hashCode</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">toString</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->BitSet(Cloneable,Serializable)</tt>
</p>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">BitSet.{and(), andNot(), or(), xor()}, javax.swing.text.html.parser.DTD.defineElement()</tt>
</p>
<p>
<span class="refsect1">Type Of: </span><tt class="literal">javax.swing.text.html.parser.Element.{exclusions, inclusions}</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>Calendar</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.util</b></font></td><td align="right"><font size="+1"><b><i>cloneable serializable PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-2837"></a>
This abstract class defines methods that perform date and
time arithmetic. It also includes methods that
convert dates and times to and from
the machine-usable millisecond format used by the
<tt class="literal">Date</tt> class and units such as minutes, hours, days,
weeks, months, and years that are more useful to humans.
<a name="INDEX-2838"></a>
As an abstract class, <tt class="literal">Calendar</tt> cannot be directly
instantiated. Instead, it provides static
<tt class="literal">getInstance()</tt> methods that return instances of a
<tt class="literal">Calendar</tt> subclass suitable for use in a specified or default
locale with a specified or default time zone. See also <tt class="literal">Date</tt>, <tt class="literal">DateFormat</tt>, and <tt class="literal">TimeZone</tt>. </p>
<p>
<tt class="literal">Calendar</tt> defines a number of useful constants. Some
of these are values that represent days of the week and
months of the year. Other constants, such as
<tt class="literal">HOUR</tt> and <tt class="literal">DAY_OF_WEEK</tt>, represent various
fields of date and time information. These field constants
are passed to a number of <tt class="literal">Calendar</tt> methods, such as
<tt class="literal">get()</tt> and <tt class="literal">set()</tt>, in order to indicate what
particular date or time field is desired. 
<a name="INDEX-2839"></a><a name="INDEX-2840"></a>
</p>
<p>
<a name="INDEX-2841"></a><tt class="literal">setTime()</tt> and the various <tt class="literal">set()</tt> methods set
the date represented by a <tt class="literal">Calendar</tt> object. <a name="INDEX-2842"></a><a name="INDEX-2843"></a><a name="INDEX-2844"></a><a name="INDEX-2845"></a>
The <tt class="literal">add()</tt> method adds (or subtracts) values to a
calendar field, incrementing the next larger field when the
field being set rolls over. <tt class="literal">roll()</tt> does the same, without
modifying anything but the specified field. <tt class="literal">before()</tt> and
<tt class="literal">after()</tt> compare two <tt class="literal">Calendar</tt> objects. Many of the methods of the <tt class="literal">Calendar</tt> class are
replacements for methods of <tt class="literal">Date</tt> that have been deprecated
as of Java 1.1. While the <tt class="literal">Calendar</tt> class converts a time value to its various hour, day, month, and
other fields, it is not intended to present those fields
in a form suitable for display to the end user. That
function is performed by the <tt class="literal">java.text.DateFormat</tt> class, 
which handles internationalization issues. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public abstract class <b class="classname">Calendar</b> implements Cloneable, Serializable {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected <b class="function">Calendar</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected <b class="function">Calendar</b> (TimeZone <i class="parameter">zone</i>, Locale <i class="parameter">aLocale</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constants</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">AM</b> ;</td><td align="right"><i> =0</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">AM_PM</b> ;</td><td align="right"><i> =9</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">APRIL</b> ;</td><td align="right"><i> =3</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">AUGUST</b> ;</td><td align="right"><i> =7</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">DATE</b> ;</td><td align="right"><i> =5</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">DAY_OF_MONTH</b> ;</td><td align="right"><i> =5</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">DAY_OF_WEEK</b> ;</td><td align="right"><i> =7</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">DAY_OF_WEEK_IN_MONTH</b> ;</td><td align="right"><i> =8</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">DAY_OF_YEAR</b> ;</td><td align="right"><i> =6</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">DECEMBER</b> ;</td><td align="right"><i> =11</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">DST_OFFSET</b> ;</td><td align="right"><i> =16</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">ERA</b> ;</td><td align="right"><i> =0</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">FEBRUARY</b> ;</td><td align="right"><i> =1</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">FIELD_COUNT</b> ;</td><td align="right"><i> =17</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">FRIDAY</b> ;</td><td align="right"><i> =6</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">HOUR</b> ;</td><td align="right"><i> =10</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">HOUR_OF_DAY</b> ;</td><td align="right"><i> =11</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">JANUARY</b> ;</td><td align="right"><i> =0</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">JULY</b> ;</td><td align="right"><i> =6</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">JUNE</b> ;</td><td align="right"><i> =5</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">MARCH</b> ;</td><td align="right"><i> =2</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">MAY</b> ;</td><td align="right"><i> =4</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">MILLISECOND</b> ;</td><td align="right"><i> =14</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">MINUTE</b> ;</td><td align="right"><i> =12</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">MONDAY</b> ;</td><td align="right"><i> =2</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">MONTH</b> ;</td><td align="right"><i> =2</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">NOVEMBER</b> ;</td><td align="right"><i> =10</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">OCTOBER</b> ;</td><td align="right"><i> =9</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">PM</b> ;</td><td align="right"><i> =1</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">SATURDAY</b> ;</td><td align="right"><i> =7</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">SECOND</b> ;</td><td align="right"><i> =13</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">SEPTEMBER</b> ;</td><td align="right"><i> =8</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">SUNDAY</b> ;</td><td align="right"><i> =1</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">THURSDAY</b> ;</td><td align="right"><i> =5</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">TUESDAY</b> ;</td><td align="right"><i> =3</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">UNDECIMBER</b> ;</td><td align="right"><i> =12</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">WEDNESDAY</b> ;</td><td align="right"><i> =4</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">WEEK_OF_MONTH</b> ;</td><td align="right"><i> =4</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">WEEK_OF_YEAR</b> ;</td><td align="right"><i> =3</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">YEAR</b> ;</td><td align="right"><i> =1</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">ZONE_OFFSET</b> ;</td><td align="right"><i> =15</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Class Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static Locale[ ] <b class="function">getAvailableLocales</b> ();</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static Calendar <b class="function">getInstance</b> ();</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static Calendar <b class="function">getInstance</b> (Locale <i class="parameter">aLocale</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static Calendar <b class="function">getInstance</b> (TimeZone <i class="parameter">zone</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static Calendar <b class="function">getInstance</b> (TimeZone <i class="parameter">zone</i>, Locale <i class="parameter">aLocale</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Property Accessor Methods (by property name)</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getFirstDayOfWeek</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setFirstDayOfWeek</b> (int <i class="parameter">value</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">isLenient</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setLenient</b> (boolean <i class="parameter">lenient</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getMinimalDaysInFirstWeek</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setMinimalDaysInFirstWeek</b> (int <i class="parameter">value</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final java.util.Date <b class="function">getTime</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final void <b class="function">setTime</b> (java.util.Date <i class="parameter">date</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public TimeZone <b class="function">getTimeZone</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setTimeZone</b> (TimeZone <i class="parameter">value</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">add</b> (int <i class="parameter">field</i>, int <i class="parameter">amount</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">after</b> (Object <i class="parameter">when</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">before</b> (Object <i class="parameter">when</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final void <b class="function">clear</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final void <b class="function">clear</b> (int <i class="parameter">field</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final int <b class="function">get</b> (int <i class="parameter">field</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public int <b class="function">getActualMaximum</b> (int <i class="parameter">field</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public int <b class="function">getActualMinimum</b> (int <i class="parameter">field</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract int <b class="function">getGreatestMinimum</b> (int <i class="parameter">field</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract int <b class="function">getLeastMaximum</b> (int <i class="parameter">field</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract int <b class="function">getMaximum</b> (int <i class="parameter">field</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract int <b class="function">getMinimum</b> (int <i class="parameter">field</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final boolean <b class="function">isSet</b> (int <i class="parameter">field</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public void <b class="function">roll</b> (int <i class="parameter">field</i>, int <i class="parameter">amount</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">roll</b> (int <i class="parameter">field</i>, boolean <i class="parameter">up</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final void <b class="function">set</b> (int <i class="parameter">field</i>, int <i class="parameter">value</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final void <b class="function">set</b> (int <i class="parameter">year</i>, int <i class="parameter">month</i>, int <i class="parameter">date</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final void <b class="function">set</b> (int <i class="parameter">year</i>, int <i class="parameter">month</i>, int <i class="parameter">date</i>, int <i class="parameter">hour</i>, int <i class="parameter">minute</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final void <b class="function">set</b> (int <i class="parameter">year</i>, int <i class="parameter">month</i>, int <i class="parameter">date</i>, int <i class="parameter">hour</i>, int <i class="parameter">minute</i>, int <i class="parameter">second</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Object</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Object <b class="function">clone</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">equals</b> (Object <i class="parameter">obj</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public int <b class="function">hashCode</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">toString</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected void <b class="function">complete</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected abstract void <b class="function">computeFields</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected abstract void <b class="function">computeTime</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected long <b class="function">getTimeInMillis</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected final int <b class="function">internalGet</b> (int <i class="parameter">field</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected void <b class="function">setTimeInMillis</b> (long <i class="parameter">millis</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Instance Fields</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected boolean <b class="function">areFieldsSet</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected int[ ] <b class="function">fields</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected boolean[ ] <b class="function">isSet</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected boolean <b class="function">isTimeSet</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected long <b class="function">time</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Calendar(Cloneable,Serializable)</tt>
</p>
<p>
<span class="refsect1">Subclasses: </span><tt class="literal">GregorianCalendar</tt>
</p>
<p>
<span class="refsect1">Passed To: </span>Too many methods to list. </p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">java.text.DateFormat.getCalendar(), Calendar.getInstance()</tt>
</p>
<p>
<span class="refsect1">Type Of: </span><tt class="literal">java.text.DateFormat.calendar</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>Collection</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.util</b></font></td><td align="right"><font size="+1"><b><i>collection</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2846"></a>
  This interface represents a group, or collection, of objects. The
  objects may or may not be ordered, and the collection may or may not
  contain duplicate objects. <tt class="literal">Collection</tt> is not often
  implemented directly. Instead, most collection classes implement one
  of the more specific subinterfaces: <tt class="literal">Set</tt>, an
  unordered collection that does not allow duplicates, or
  <tt class="literal">List</tt>, an ordered collection that does allow
  duplicates. </p>

<p>
<a name="INDEX-2847"></a><a name="INDEX-2848"></a><a name="INDEX-2849"></a><a name="INDEX-2850"></a>

  The <tt class="literal">Collection</tt> type provides a general way to
  refer to any set, list, or other collection of objects; it defines
  generic methods that work with any collection. <tt class="literal">contains()</tt> and
  <tt class="literal">containsAll()</tt> test whether the
  <tt class="literal">Collection</tt> contains a specified object or
  all the objects in a given collection. <tt class="literal">isEmpty()</tt> returns <tt class="literal">true</tt> if the
  <tt class="literal">Collection</tt> has no elements, or
  <tt class="literal">false</tt> otherwise. <tt class="literal">size()</tt> returns
  the number of elements in the <tt class="literal">Collection</tt>. <tt class="literal">iterator()</tt> returns an <tt class="literal">Iterator</tt>
  object that allows you to iterate through the objects in the
  collection. <tt class="literal">toArray()</tt> returns the objects in the
  <tt class="literal">Collection</tt> in a new array of type
  <tt class="literal">Object</tt>. Another version of <tt class="literal">toArray()</tt> takes an array as an
  argument and stores all elements of the <tt class="literal">Collection</tt>
  (which must all be compatible with the array) into that
  array. If the array is not big enough, the method allocates a new, larger
  array of the same type. If the array is too big, the method
  stores <tt class="literal">null</tt> into the first empty element of the
  array. This version of <tt class="literal">toArray()</tt> returns the array
  that was passed in or the new array, if one was allocated. </p>
<p>
<a name="INDEX-2851"></a><a name="INDEX-2852"></a><a name="INDEX-2853"></a><a name="INDEX-2854"></a><a name="INDEX-2855"></a><a name="INDEX-2856"></a>
  The previous methods all query or extract the contents of a
  collection. The <tt class="literal">Collection</tt> interface also defines
  methods for modifying the contents of the collection. <tt class="literal">add()</tt> and <tt class="literal">addAll()</tt> add an object
  or a collection of objects to a <tt class="literal">Collection</tt>. <tt class="literal">remove()</tt> and <tt class="literal">removeAll()</tt> remove
  an object or collection. <tt class="literal">retainAll()</tt> is a variant
  that removes all objects except those in a specified
  <tt class="literal">Collection</tt>. <tt class="literal">clear()</tt> removes all
  objects from the collection. All these modification methods except
  <tt class="literal">clear()</tt> return <tt class="literal">true</tt> if the
  collection was modified as a result of the call. An interface cannot
  specify constructors, but it is conventional that all implementations
  of <tt class="literal">Collection</tt> provide at least two standard
  constructors: one that takes no arguments and creates an empty


  collection, and a copy constructor that accepts a
  <tt class="literal">Collection</tt> object that specifies the initial
  contents of the new <tt class="literal">Collection</tt>. </p>
<p>
<a name="INDEX-2857"></a>
  Implementations of <tt class="literal">Collection</tt> and its
  subinterfaces are not required to support all operations
  defined by the <tt class="literal">Collection</tt> interface. All
  modification methods listed above are optional; an implementation
  (such as an immutable <tt class="literal">Set</tt> implementation) that does
  not support them simply throws
  <tt class="literal">java.lang.UnsupportedOperationException</tt> for these
  methods. Furthermore, implementations are free to impose restrictions on the
  types of objects that can be members of a collection. Some
  implementations might require elements to be of a particular type, for
  example, and others might not allow <tt class="literal">null</tt> as an
  element. </p>
<p>  See also <tt class="literal">Set</tt>, <tt class="literal">List</tt>,
  <tt class="literal">Map</tt>, and <tt class="literal">Collections</tt>. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public interface <b class="classname">Collection</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract boolean <b class="function">add</b> (Object <i class="parameter">o</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract boolean <b class="function">addAll</b> (Collection <i class="parameter">c</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">clear</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract boolean <b class="function">contains</b> (Object <i class="parameter">o</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract boolean <b class="function">containsAll</b> (Collection <i class="parameter">c</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract boolean <b class="function">equals</b> (Object <i class="parameter">o</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract int <b class="function">hashCode</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract boolean <b class="function">isEmpty</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract Iterator <b class="function">iterator</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract boolean <b class="function">remove</b> (Object <i class="parameter">o</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract boolean <b class="function">removeAll</b> (Collection <i class="parameter">c</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract boolean <b class="function">retainAll</b> (Collection <i class="parameter">c</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract int <b class="function">size</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract Object[ ] <b class="function">toArray</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract Object[ ] <b class="function">toArray</b> (Object[ ] <i class="parameter">a</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Implementations: </span><tt class="literal">java.beans.beancontext.BeanContext, AbstractCollection, java.util.List, Set</tt>
</p>
<p>
<span class="refsect1">Passed To: </span>Too many methods to list. </p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">java.awt.RenderingHints.values(), java.security.Provider.values(), java.security.cert.CertificateFactory.{generateCertificates(), generateCRLs()}, java.security.cert.CertificateFactorySpi.{engineGenerateCertificates(), engineGenerateCRLs()}, AbstractMap.values(), Collections.{synchronizedCollection(), unmodifiableCollection()}, HashMap.values(), Hashtable.values(), Map.values(), TreeMap.values(), java.util.jar.Attributes.values()</tt>
</p>
<p>
<span class="refsect1">Type Of: </span><tt class="literal">java.beans.beancontext.BeanContextMembershipEvent.children</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>Collections</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.util</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2858"></a><a name="INDEX-2859"></a>
  This class defines static methods and constants that are useful for
  working with collections and maps. One of the most commonly used
  methods is <tt class="literal">sort()</tt>, which sorts a
  <tt class="literal">List</tt> in place (the list cannot be immutable, of
  course). The sorting algorithm is stable, which means that equal
  elements retain the same relative order. One version of
  <tt class="literal">sort()</tt> uses a specified
  <tt class="literal">Comparator</tt> to perform the sort; the other relies on
  the natural ordering of the list elements and requires all the
  elements to implement <tt class="literal">java.lang.Comparable</tt>. </p>
<p>
<a name="INDEX-2860"></a>
  A related method is <tt class="literal">binarySearch()</tt>. It efficiently
  (in logarithmic time) searches a sorted <tt class="literal">List</tt> for a
  specified object and returns the index at which a matching object is
  found. If no match is found, it returns a negative number. For a
  negative return value <tt class="literal">r</tt>, the value
  <tt class="literal">-(r+1)</tt> specifies the index at which the specified
  object can be inserted into the list to maintain the sorted order of
  the list. As with <tt class="literal">sort()</tt>,
  <tt class="literal">binarySearch()</tt> can be passed a
  <tt class="literal">Comparator</tt> that defines the order of the sorted
  list. If no <tt class="literal">Comparator</tt> is specified, the list
  elements must all implement <tt class="literal">Comparable</tt>, and the
  list is assumed to be sorted according to the natural ordering defined by
  this interface. </p>
<p>
<a name="INDEX-2861"></a><a name="INDEX-2862"></a>
  The various methods whose names begin with <tt class="literal">synchronized</tt> 
  return a
  thread-safe collection object wrapped around the specified
  collection. <tt class="literal">Vector</tt> and
  <tt class="literal">Hashtable</tt> are the only two collection objects thread-safe by default. Use these methods to obtain a
  <tt class="literal">synchronized</tt> wrapper object if you are using any
  other type of <tt class="literal">Collection</tt> or
  <tt class="literal">Map</tt> in a multithreaded environment where 
  more than one thread can
  modify it. </p>
<p>
<a name="INDEX-2863"></a><a name="INDEX-2864"></a>
  The various methods whose names begin with <tt class="literal">unmodifiable</tt> 
   function like
  <tt class="literal">synchronized</tt> 
  methods. They return a <tt class="literal">Collection</tt> or 
  <tt class="literal">Map</tt> object wrapped around the specified
  collection. The returned object is unmodifiable, however,
  so its <tt class="literal">add()</tt>,
  <tt class="literal">remove()</tt>, <tt class="literal">set()</tt>, 
  <tt class="literal">put()</tt>, etc., methods all throw
  <tt class="literal">java.lang.UnsupportedOperationException</tt>. </p>
<p>
<a name="INDEX-2865"></a><a name="INDEX-2866"></a><a name="INDEX-2867"></a><a name="INDEX-2868"></a><a name="INDEX-2869"></a><a name="INDEX-2870"></a><a name="INDEX-2871"></a><a name="INDEX-2872"></a><a name="INDEX-2873"></a><a name="INDEX-2874"></a>

  The <tt class="literal">Collections</tt> class also defines a number of
  miscellanous methods. <tt class="literal">copy()</tt> copies elements of a
  source list into a destination list. <tt class="literal">enumeration()</tt>
  returns an <tt class="literal">Enumeration</tt> for a
  <tt class="literal">Collection</tt>, which is useful when working with code
  that uses the old <tt class="literal">Enumeration</tt> interface instead of
  the newer <tt class="literal">Iterator</tt> interface. <tt class="literal">fill()</tt> replaces all elements of the specified list
  with the specified object. The <tt class="literal">min()</tt> and
  <tt class="literal">max()</tt> methods search an unordered
  <tt class="literal">Collection</tt> for the minimum and maximum elements,
  according either to a specified <tt class="literal">Comparator</tt> or to the
  natural order defined by the <tt class="literal">Comparable</tt> elements
  themselves. <tt class="literal">nCopies()</tt> creates a new immutable
  <tt class="literal">List</tt> that contains a specified number of copies of a
  specified object. <tt class="literal">reverse()</tt> reverses the order of
  the elements in a list. This method operates in place and therefore
  does not work for immutable lists. <tt class="literal">reverseOrder()</tt>
  returns a convenient predefined <tt class="literal">Comparator</tt> object
  that can order <tt class="literal">Comparable</tt> objects into the reverse
  of their natural ordering. <tt class="literal">shuffle()</tt> randomizes
  the order of elements in a list, using either an internal source of
  randomness or the <tt class="literal">Random</tt> pseudo-random
  number generator you provide. <tt class="literal">singleton()</tt> returns
  an unmodifiable set that contains only the specified object. The
  <tt class="literal">Collections</tt> class also defines two related
  constants, <tt class="literal">EMPTY_LIST</tt> and
  <tt class="literal">EMPTY_SET</tt>, which are immutable
  <tt class="literal">List</tt> and <tt class="literal">Set</tt> objects that
  contain no elements. In Java 1.3, <tt class="literal">singletonList()</tt> and
  <tt class="literal">singletonMap()</tt> return an immutable list and an
  immutable map, respectively, each of which contains only a single entry. The <tt class="literal">Collections</tt> class also defines related
  constants, <tt class="literal">EMPTY_LIST</tt>, 
  <tt class="literal">EMPTY_SET</tt>, and <tt class="literal">EMPTY_MAP</tt>
  (in Java 1.3), which are immutable
  <tt class="literal">List</tt>, <tt class="literal">Set</tt>, and
  <tt class="literal">Map</tt> objects that contain no elements. 
<a name="INDEX-2875"></a><a name="INDEX-2876"></a>
</p>
<p>  See <tt class="literal">Arrays</tt> for methods that perform sorting and
  searching operations on arrays instead of collections. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">Collections</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">No Constructor</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constants</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final java.util.List <b class="function">EMPTY_LIST</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.3</span></td><td align="left">public static final Map <b class="function">EMPTY_MAP</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final Set <b class="function">EMPTY_SET</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Class Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static int <b class="function">binarySearch</b> (java.util.List <i class="parameter">list</i>, Object <i class="parameter">key</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static int <b class="function">binarySearch</b> (java.util.List <i class="parameter">list</i>, Object <i class="parameter">key</i>, Comparator <i class="parameter">c</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static void <b class="function">copy</b> (java.util.List <i class="parameter">dest</i>, java.util.List <i class="parameter">src</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static Enumeration <b class="function">enumeration</b> (Collection <i class="parameter">c</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static void <b class="function">fill</b> (java.util.List <i class="parameter">list</i>, Object <i class="parameter">o</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static Object <b class="function">max</b> (Collection <i class="parameter">coll</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static Object <b class="function">max</b> (Collection <i class="parameter">coll</i>, Comparator <i class="parameter">comp</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static Object <b class="function">min</b> (Collection <i class="parameter">coll</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static Object <b class="function">min</b> (Collection <i class="parameter">coll</i>, Comparator <i class="parameter">comp</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static java.util.List <b class="function">nCopies</b> (int <i class="parameter">n</i>, Object <i class="parameter">o</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static void <b class="function">reverse</b> (java.util.List <i class="parameter">l</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static Comparator <b class="function">reverseOrder</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static void <b class="function">shuffle</b> (java.util.List <i class="parameter">list</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static void <b class="function">shuffle</b> (java.util.List <i class="parameter">list</i>, Random <i class="parameter">rnd</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static Set <b class="function">singleton</b> (Object <i class="parameter">o</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.3</span></td><td align="left">public static java.util.List <b class="function">singletonList</b> (Object <i class="parameter">o</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.3</span></td><td align="left">public static Map <b class="function">singletonMap</b> (Object <i class="parameter">key</i>, Object <i class="parameter">value</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static void <b class="function">sort</b> (java.util.List <i class="parameter">list</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static void <b class="function">sort</b> (java.util.List <i class="parameter">list</i>, Comparator <i class="parameter">c</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static Collection <b class="function">synchronizedCollection</b> (Collection <i class="parameter">c</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static java.util.List <b class="function">synchronizedList</b> (java.util.List <i class="parameter">list</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static Map <b class="function">synchronizedMap</b> (Map <i class="parameter">m</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static Set <b class="function">synchronizedSet</b> (Set <i class="parameter">s</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static SortedMap <b class="function">synchronizedSortedMap</b> (SortedMap <i class="parameter">m</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static SortedSet <b class="function">synchronizedSortedSet</b> (SortedSet <i class="parameter">s</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static Collection <b class="function">unmodifiableCollection</b> (Collection <i class="parameter">c</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static java.util.List <b class="function">unmodifiableList</b> (java.util.List <i class="parameter">list</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static Map <b class="function">unmodifiableMap</b> (Map <i class="parameter">m</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static Set <b class="function">unmodifiableSet</b> (Set <i class="parameter">s</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static SortedMap <b class="function">unmodifiableSortedMap</b> (SortedMap <i class="parameter">m</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static SortedSet <b class="function">unmodifiableSortedSet</b> (SortedSet <i class="parameter">s</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>Comparator</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.util</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2877"></a><a name="INDEX-2878"></a>
  This interface defines a <tt class="literal">compare()</tt> method that specifies a total ordering for a set of objects, allowing
  those objects to be sorted. The <tt class="literal">Comparator</tt> is used
  when the objects to be ordered do not have a natural ordering
  defined by the <tt class="literal">Comparable</tt> interface, or when you
  want to order them using something other than their natural ordering. </p>
<p>
<a name="INDEX-2879"></a>
  The <tt class="literal">compare()</tt> method is passed two objects. If the
  first argument is less than the second argument or should be placed
  before the second argument in a sorted list, 
  <tt class="literal">compare()</tt> should return a negative integer. If the
  first argument is greater than the second argument or should be
  placed after the second argument in a sorted list,
  <tt class="literal">compare()</tt> should return a positive integer. If the
  two objects are equivalent or if their relative position in a sorted
  list does not matter, <tt class="literal">compare()</tt> should return
  <tt class="literal">0</tt>. <tt class="literal">Comparator</tt> implementations may assume that both
  <tt class="literal">Object</tt> arguments are of appropriate types and cast them as desired. If either argument is not of the expected type,
  the <tt class="literal">compare()</tt> method throws a
  <tt class="literal">ClassCastException</tt>. </p>
<p>
<a name="INDEX-2880"></a>
  Note that the magnitude of the numbers returned by
  <tt class="literal">compare()</tt> does not matter, only whether they are less
  than, equal to, or greater than zero. In most cases, you should
  implement a <tt class="literal">Comparator</tt> so that 
  <tt class="literal">compare(o1,o2)</tt> returns <tt class="literal">0</tt> 
  if and only if
  <tt class="literal">o1.equals(o2)</tt> returns <tt class="literal">true</tt>. This is particularly important when using a
  <tt class="literal">Comparator</tt> to impose an ordering on a
  <tt class="literal">TreeSet</tt> or a <tt class="literal">TreeMap</tt>. </p>
<p>  See <tt class="literal">Collections</tt> and <tt class="literal">Arrays</tt> for
  various methods that use <tt class="literal">Comparator</tt> objects for
  sorting and searching. See also the related
  <tt class="literal">java.lang.Comparable</tt> interface. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public interface <b class="classname">Comparator</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract int <b class="function">compare</b> (Object <i class="parameter">o1</i>, Object <i class="parameter">o2</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract boolean <b class="function">equals</b> (Object <i class="parameter">obj</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Implementations: </span><tt class="literal">java.text.Collator</tt>
</p>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">Arrays.{binarySearch(), sort()}, Collections.{binarySearch(), max(), min(), sort()}, TreeMap.TreeMap(), TreeSet.TreeSet()</tt>
</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">Collections.reverseOrder(), SortedMap.comparator(), SortedSet.comparator(), TreeMap.comparator(), TreeSet.comparator()</tt>
</p>
<p>
<span class="refsect1">Type Of: </span><tt class="literal">String.CASE_INSENSITIVE_ORDER</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>ConcurrentModificationException</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.util</b></font></td><td align="right"><font size="+1"><b><i>serializable unchecked</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2881"></a>
  Signals that a 
  modification has been made to a data structure at the same time
  some other operation is in progress and that, as a result, the
  correctness of the ongoing operation cannot be guaranteed. It is
  typically thrown by an <tt class="literal">Iterator</tt> or
  <tt class="literal">ListIterator</tt> object to stop an iteration if it
  detects that the underlying collection has been modified while the
  iteration is in progress. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">ConcurrentModificationException</b> extends RuntimeException {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">ConcurrentModificationException</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">ConcurrentModificationException</b> (String <i class="parameter">message</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Exception-->RuntimeException-->ConcurrentModificationException</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>Date</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.util</b></font></td><td align="right"><font size="+1"><b><i>cloneable serializable comparable PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-2882"></a><a name="INDEX-2883"></a>
This class represents dates and times and lets you work
with them in a system-independent way. You can create a
<tt class="literal">Date</tt> by specifying the number of milliseconds from
the epoch (midnight GMT, January 1st, 1970) or 
the year, month, date, and, optionally, the hour,
minute, and second. Years are specified as the number of
years since 1900. If you call the <tt class="literal">Date</tt> constructor
with no arguments, the <tt class="literal">Date</tt> is initialized to
the current time and date. The instance methods of the
class allow you to get and set the various date and time
fields, to compare dates and times, and to convert dates to
and from string representations. As of Java 1.1, many of the date methods have been deprecated
in favor of the methods of the <tt class="literal">Calendar</tt> class. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">Date</b> implements Cloneable, Comparable, Serializable {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">Date</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">#</span></td><td align="left">public <b class="function">Date</b> (String <i class="parameter">s</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">Date</b> (long <i class="parameter">date</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">#</span></td><td align="left">public <b class="function">Date</b> (int <i class="parameter">year</i>, int <i class="parameter">month</i>, int <i class="parameter">date</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">#</span></td><td align="left">public <b class="function">Date</b> (int <i class="parameter">year</i>, int <i class="parameter">month</i>, int <i class="parameter">date</i>, int <i class="parameter">hrs</i>, int <i class="parameter">min</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">#</span></td><td align="left">public <b class="function">Date</b> (int <i class="parameter">year</i>, int <i class="parameter">month</i>, int <i class="parameter">date</i>, int <i class="parameter">hrs</i>, int <i class="parameter">min</i>, int <i class="parameter">sec</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Property Accessor Methods (by property name)</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public long <b class="function">getTime</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setTime</b> (long <i class="parameter">time</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">after</b> (java.util.Date <i class="parameter">when</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">before</b> (java.util.Date <i class="parameter">when</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public int <b class="function">compareTo</b> (java.util.Date <i class="parameter">anotherDate</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Methods Implementing Comparable</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public int <b class="function">compareTo</b> (Object <i class="parameter">o</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Object</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public Object <b class="function">clone</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">equals</b> (Object <i class="parameter">obj</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">hashCode</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">toString</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Deprecated Public Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">#</span></td><td align="left">public int <b class="function">getDate</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">#</span></td><td align="left">public int <b class="function">getDay</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">#</span></td><td align="left">public int <b class="function">getHours</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">#</span></td><td align="left">public int <b class="function">getMinutes</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">#</span></td><td align="left">public int <b class="function">getMonth</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">#</span></td><td align="left">public int <b class="function">getSeconds</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">#</span></td><td align="left">public int <b class="function">getTimezoneOffset</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">#</span></td><td align="left">public int <b class="function">getYear</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">#</span></td><td align="left">public static long <b class="function">parse</b> (String <i class="parameter">s</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">#</span></td><td align="left">public void <b class="function">setDate</b> (int <i class="parameter">date</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">#</span></td><td align="left">public void <b class="function">setHours</b> (int <i class="parameter">hours</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">#</span></td><td align="left">public void <b class="function">setMinutes</b> (int <i class="parameter">minutes</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">#</span></td><td align="left">public void <b class="function">setMonth</b> (int <i class="parameter">month</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">#</span></td><td align="left">public void <b class="function">setSeconds</b> (int <i class="parameter">seconds</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">#</span></td><td align="left">public void <b class="function">setYear</b> (int <i class="parameter">year</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">#</span></td><td align="left">public String <b class="function">toGMTString</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">#</span></td><td align="left">public String <b class="function">toLocaleString</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">#</span></td><td align="left">public static long <b class="function">UTC</b> (int <i class="parameter">year</i>, int <i class="parameter">month</i>, int <i class="parameter">date</i>, int <i class="parameter">hrs</i>, int <i class="parameter">min</i>, int <i class="parameter">sec</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->java.util.Date(Cloneable,Comparable,Serializable)</tt>
</p>
<p>
<span class="refsect1">Subclasses: </span><tt class="literal">java.sql.Date, java.sql.Time, java.sql.Timestamp</tt>
</p>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">java.security.cert.X509Certificate.checkValidity(), java.text.DateFormat.format(), java.text.SimpleDateFormat.{format(), set2DigitYearStart()}, Calendar.setTime(), java.util.Date.{after(), before(), compareTo()}, GregorianCalendar.setGregorianChange(), SimpleTimeZone.inDaylightTime(), java.util.Timer.{schedule(), scheduleAtFixedRate()}, TimeZone.inDaylightTime()</tt>
</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">java.security.KeyStore.getCreationDate(), java.security.KeyStoreSpi.engineGetCreationDate(), java.security.cert.X509Certificate.{getNotAfter(), getNotBefore()}, java.security.cert.X509CRL.{getNextUpdate(), getThisUpdate()}, java.security.cert.X509CRLEntry.getRevocationDate(), java.text.DateFormat.parse(), java.text.SimpleDateFormat.{get2DigitYearStart(), parse()}, Calendar.getTime(), GregorianCalendar.getGregorianChange()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>Dictionary</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.util</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-2884"></a>

This abstract class is the superclass of <tt class="literal">Hashtable</tt>. Other hashtable-like data structures might also extend this
class. See <tt class="literal">Hashtable</tt> for more information. In Java
1.2, the <tt class="literal">Map</tt> interface replaces the functionality
of this class. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public abstract class <b class="classname">Dictionary</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">Dictionary</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract Enumeration <b class="function">elements</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract Object <b class="function">get</b> (Object <i class="parameter">key</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract boolean <b class="function">isEmpty</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract Enumeration <b class="function">keys</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract Object <b class="function">put</b> (Object <i class="parameter">key</i>, Object <i class="parameter">value</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract Object <b class="function">remove</b> (Object <i class="parameter">key</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract int <b class="function">size</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Subclasses: </span><tt class="literal">Hashtable</tt>
</p>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">javax.swing.JSlider.setLabelTable(), javax.swing.text.AbstractDocument.setDocumentProperties()</tt>
</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">javax.swing.JSlider.getLabelTable(), javax.swing.text.AbstractDocument.getDocumentProperties()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>EmptyStackException</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.util</b></font></td><td align="right"><font size="+1"><b><i>serializable unchecked PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-2885"></a><a name="INDEX-2886"></a>

Signals that a <tt class="literal">Stack</tt> object is empty. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">EmptyStackException</b> extends RuntimeException {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">EmptyStackException</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Exception-->RuntimeException-->EmptyStackException</tt>
</p>
<p>
<span class="refsect1">Thrown By: </span><tt class="literal">java.awt.EventQueue.pop()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>Enumeration</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.util</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-2887"></a><a name="INDEX-2888"></a>

This interface defines the methods necessary to enumerate,
or iterate, through a set of values, such as the set of
values contained in a hashtable or binary tree. It is
particularly useful for data structures, like hashtables,
for which elements cannot simply be looked up by index, as
they can in arrays. An <tt class="literal">Enumeration</tt> is usually not
instantiated directly, but instead is created by the object
that is to have its values enumerated. A number of classes,
such as <tt class="literal">Vector</tt> and <tt class="literal">Hashtable</tt>, have methods
that return <tt class="literal">Enumeration</tt> objects. In Java 1.2, the new <tt class="literal">Iterator</tt> interface is
preferred over <tt class="literal">Enumeration</tt>. </p>
<p>
<a name="INDEX-2889"></a><a name="INDEX-2890"></a>
To use an <tt class="literal">Enumeration</tt> object, you use its two
methods in a loop. <tt class="literal">hasMoreElements()</tt> returns
<tt class="literal">true</tt> if there are more values to be enumerated and
can determine whether a loop should continue. Within a loop, a call to <tt class="literal">nextElement()</tt> returns a
value from the enumeration. An <tt class="literal">Enumeration</tt> makes no
guarantees about the order in which the values are returned. The values in an <tt class="literal">Enumeration</tt> can be iterated through
only once; there is no way to reset it to the beginning. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public interface <b class="classname">Enumeration</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract boolean <b class="function">hasMoreElements</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract Object <b class="function">nextElement</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Implementations: </span><tt class="literal">StringTokenizer, javax.naming.NamingEnumeration</tt>
</p>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">java.io.SequenceInputStream.SequenceInputStream(), javax.naming.CompositeName.CompositeName(), javax.naming.CompoundName.CompoundName(), javax.swing.JTree.removeDescendantToggledPaths(), javax.swing.text.AbstractDocument.AbstractElement.removeAttributes(), javax.swing.text.AbstractDocument.AttributeContext.removeAttributes(), javax.swing.text.MutableAttributeSet.removeAttributes(), javax.swing.text.SimpleAttributeSet.removeAttributes(), javax.swing.text.StyleContext.removeAttributes(), javax.swing.text.StyleContext.NamedStyle.removeAttributes(), javax.swing.text.html.StyleSheet.removeAttributes()</tt>
</p>
<p>
<span class="refsect1">Returned By: </span>Too many methods to list. </p>
<p>
<span class="refsect1">Type Of: </span><tt class="literal">javax.swing.tree.DefaultMutableTreeNode.EMPTY_ENUMERATION</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>EventListener</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.util</b></font></td><td align="right"><font size="+1"><b><i>event listener PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-2891"></a><a name="INDEX-2892"></a><tt class="literal">EventListener</tt> is a base interface for the 
event model that is used by AWT and Swing in Java 1.1 and later. This interface defines no methods or constants; it 
serves simply as a tag that identifies objects that act as event
listeners. The event listener interfaces in the
<tt class="literal">java.awt.event</tt>, <tt class="literal">java.beans</tt>, and
<tt class="literal">javax.swing.event</tt> packages
extend this interface. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public interface <b class="classname">EventListener</b>  {</td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Implementations: </span>Too many classes to list. </p>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">java.awt.AWTEventMulticaster.{addInternal(), AWTEventMulticaster(), remove(), removeInternal(), save()}, javax.swing.event.EventListenerList.{add(), remove()}</tt>
</p>
<p>
<span class="refsect1">Returned By: </span>Too many methods to list. </p>
<p>
<span class="refsect1">Type Of: </span><tt class="literal">java.awt.AWTEventMulticaster.{a, b}</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>EventObject</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.util</b></font></td><td align="right"><font size="+1"><b><i>serializable event PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-2893"></a><a name="INDEX-2894"></a><tt class="literal">EventObject</tt> serves as the superclass for all event
objects used by the event model introduced in Java 1.1 for AWT and 
JavaBeans and also used by Swing in Java 1.2. This class defines a generic type of
event; it is extended by the more specific event classes in
the <tt class="literal">java.awt</tt>, <tt class="literal">java.awt.event</tt>,
<tt class="literal">java.beans</tt>, and <tt class="literal">javax.swing.event</tt> packages. The only common feature shared by all events is a source
object, which is the object that, in some way, generated the
event. The source object is passed to the
<tt class="literal">EventObject()</tt> constructor and is returned by the
<tt class="literal">getSource()</tt> method. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">EventObject</b> implements Serializable {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">EventObject</b> (Object <i class="parameter">source</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Object <b class="function">getSource</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Object</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">toString</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Instance Fields</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected transient Object <b class="function">source</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->EventObject(Serializable)</tt>
</p>
<p>
<span class="refsect1">Subclasses: </span>Too many classes to list. </p>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">javax.swing.AbstractCellEditor.{isCellEditable(), shouldSelectCell()}, javax.swing.CellEditor.{isCellEditable(), shouldSelectCell()}, javax.swing.DefaultCellEditor.{isCellEditable(), shouldSelectCell()}, javax.swing.DefaultCellEditor.EditorDelegate.{isCellEditable(), shouldSelectCell(), startCellEditing()}, javax.swing.JTable.editCellAt(), javax.swing.tree.DefaultTreeCellEditor.{canEditImmediately(), isCellEditable(), shouldSelectCell(), shouldStartEditingTimer()}</tt>
</p>
</div>

<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>GregorianCalendar</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.util</b></font></td><td align="right"><font size="+1"><b><i>cloneable serializable PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-2895"></a><a name="INDEX-2896"></a><a name="INDEX-2897"></a>
This concrete subclass of <tt class="literal">Calendar</tt> implements the
standard solar calendar with years numbered from the birth
of Christ that is used is most locales throughout the world. You do not typically use this class directly, but
instead obtain a <tt class="literal">Calendar</tt> object suitable for the
default locale by calling <tt class="literal">Calendar.getInstance()</tt>. See <tt class="literal">Calendar</tt> for details on working with
<tt class="literal">Calendar</tt> objects. There is a discontinuity in the Gregorian calendar that
represents the historical switch from the Julian calendar to
the Gregorian calendar. By default,
<tt class="literal">GregorianCalendar</tt> assumes that this switch occurs on
October 15, 1582. Most programs need not be concerned with the switch. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">GregorianCalendar</b> extends Calendar {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">GregorianCalendar</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">GregorianCalendar</b> (TimeZone <i class="parameter">zone</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">GregorianCalendar</b> (Locale <i class="parameter">aLocale</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">GregorianCalendar</b> (TimeZone <i class="parameter">zone</i>, Locale <i class="parameter">aLocale</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">GregorianCalendar</b> (int <i class="parameter">year</i>, int <i class="parameter">month</i>, int <i class="parameter">date</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">GregorianCalendar</b> (int <i class="parameter">year</i>, int <i class="parameter">month</i>, int <i class="parameter">date</i>, int <i class="parameter">hour</i>, int <i class="parameter">minute</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">GregorianCalendar</b> (int <i class="parameter">year</i>, int <i class="parameter">month</i>, int <i class="parameter">date</i>, int <i class="parameter">hour</i>, int <i class="parameter">minute</i>, int <i class="parameter">second</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constants</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">AD</b> ;</td><td align="right"><i> =1</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">BC</b> ;</td><td align="right"><i> =0</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final java.util.Date <b class="function">getGregorianChange</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">isLeapYear</b> (int <i class="parameter">year</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setGregorianChange</b> (java.util.Date <i class="parameter">date</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Calendar</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">add</b> (int <i class="parameter">field</i>, int <i class="parameter">amount</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">equals</b> (Object <i class="parameter">obj</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public int <b class="function">getActualMaximum</b> (int <i class="parameter">field</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public int <b class="function">getActualMinimum</b> (int <i class="parameter">field</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getGreatestMinimum</b> (int <i class="parameter">field</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getLeastMaximum</b> (int <i class="parameter">field</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getMaximum</b> (int <i class="parameter">field</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getMinimum</b> (int <i class="parameter">field</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">hashCode</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">roll</b> (int <i class="parameter">field</i>, boolean <i class="parameter">up</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">roll</b> (int <i class="parameter">field</i>, int <i class="parameter">amount</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Methods Overriding Calendar</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected void <b class="function">computeFields</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected void <b class="function">computeTime</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Calendar(Cloneable,Serializable)-->GregorianCalendar</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>HashMap</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.util</b></font></td><td align="right"><font size="+1"><b><i>cloneable serializable collection</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2898"></a><a name="INDEX-2899"></a><a name="INDEX-2900"></a>
  This class implements the <tt class="literal">Map</tt> interface using
  an internal hashtable. It supports all optional
  <tt class="literal">Map</tt> methods, allows key and value objects of any
  types, and allows <tt class="literal">null</tt> to be used as a key or a
  value. Because <tt class="literal">HashMap</tt> 
  is based on a hashtable data structure, the
  <tt class="literal">get()</tt> and <tt class="literal">put()</tt> methods
  are very efficient. <tt class="literal">HashMap</tt> is much like the
  <tt class="literal">Hashtable</tt> class, except that the
  <tt class="literal">HashMap</tt> methods are not
  <tt class="literal">synchronized</tt> (and are therefore faster), and
  <tt class="literal">HashMap</tt> allows <tt class="literal">null</tt> to be used
  as a key or a value. If you are working in a multithreaded


  environment, or if compatibility with previous versions of Java is a
  concern, use <tt class="literal">Hashtable</tt>. Otherwise, use
  <tt class="literal">HashMap</tt>. </p>
<p>  If you know in advance approximately how many mappings a
  <tt class="literal">HashMap</tt> will contain, you can improve efficiency by
  specifying <em class="replaceable">initialCapacity</em> when you call
  the <tt class="literal">HashMap()</tt> 
  constructor. The <em class="replaceable">initialCapacity</em> argument
  times the <em class="replaceable">loadFactor</em> argument should be
  greater than the number of mappings the <tt class="literal">HashMap</tt>
  will contain. A good value for
  <em class="replaceable">loadFactor</em> is 0.75; this is also the
  default value. See <tt class="literal">Map</tt> for details on the methods of
  <tt class="literal">HashMap</tt>. See also <tt class="literal">TreeMap</tt> and
  <tt class="literal">HashSet</tt>. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">HashMap</b> extends AbstractMap implements Cloneable, Map, Serializable {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">HashMap</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">HashMap</b> (int <i class="parameter">initialCapacity</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">HashMap</b> (Map <i class="parameter">t</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">HashMap</b> (int <i class="parameter">initialCapacity</i>, float <i class="parameter">loadFactor</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Methods Implementing Map</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">clear</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">containsKey</b> (Object <i class="parameter">key</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">containsValue</b> (Object <i class="parameter">value</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Set <b class="function">entrySet</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Object <b class="function">get</b> (Object <i class="parameter">key</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">isEmpty</b> ();</td><td align="right"><i> default:true</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Set <b class="function">keySet</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Object <b class="function">put</b> (Object <i class="parameter">key</i>, Object <i class="parameter">value</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">putAll</b> (Map <i class="parameter">t</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Object <b class="function">remove</b> (Object <i class="parameter">key</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">size</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Collection <b class="function">values</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Object</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Object <b class="function">clone</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->AbstractMap(Map)-->HashMap(Cloneable,Map,Serializable)</tt>
</p>
<p>
<span class="refsect1">Type Of: </span><tt class="literal">java.beans.beancontext.BeanContextServicesSupport.services, java.beans.beancontext.BeanContextSupport.children</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>HashSet</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.util</b></font></td><td align="right"><font size="+1"><b><i>cloneable serializable collection</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2901"></a><a name="INDEX-2902"></a><a name="INDEX-2903"></a><a name="INDEX-2904"></a><a name="INDEX-2905"></a>
  This class implements <tt class="literal">Set</tt> using an internal hashtable. It supports all optional <tt class="literal">Set</tt> and
  <tt class="literal">Collection</tt> methods and allows any type of object
  or <tt class="literal">null</tt> to be a member of the set. Because 
  <tt class="literal">HashSet</tt> is
  based on a hashtable, the basic <tt class="literal">add()</tt>,
  <tt class="literal">remove()</tt>, and <tt class="literal">contains()</tt> methods
  are all quite efficient. <tt class="literal">HashSet</tt> 
  makes no guarantee about the order in
  which the set elements are enumerated by the
  <tt class="literal">Iterator</tt> returned by
  <tt class="literal">iterator()</tt>. The methods of <tt class="literal">HashSet</tt> are not
  <tt class="literal">synchronized</tt>. If you are using it in a
  multithreaded environment, you must explicitly synchronize all code
  that modifies the set or obtain a synchronized wrapper for it by
  calling <tt class="literal">Collections.synchronizedSet()</tt>. </p>
<p>  If you know in advance approximately how many mappings a
  <tt class="literal">HashSet</tt> will contain, you can improve efficiency by
  specifying <em class="replaceable">initialCapacity</em> when you call
  the <tt class="literal">HashSet()</tt> 
  constructor. The <em class="replaceable">initialCapacity</em> argument
  times the <em class="replaceable">loadFactor</em> argument should be
  greater than the number of mappings the <tt class="literal">HashSet</tt>
  will contain. A good value for
  <em class="replaceable">loadFactor</em> is 0.75; this is also the
  default value. See <tt class="literal">Set</tt> and <tt class="literal">Collection</tt> for
  details on the methods of <tt class="literal">HashSet</tt>. See also
  <tt class="literal">TreeSet</tt> and <tt class="literal">HashMap</tt>. </p>

<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">HashSet</b> extends AbstractSet implements Cloneable, Serializable, Set {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">HashSet</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">HashSet</b> (int <i class="parameter">initialCapacity</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">HashSet</b> (Collection <i class="parameter">c</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">HashSet</b> (int <i class="parameter">initialCapacity</i>, float <i class="parameter">loadFactor</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Methods Implementing Set</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">add</b> (Object <i class="parameter">o</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">clear</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">contains</b> (Object <i class="parameter">o</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">isEmpty</b> ();</td><td align="right"><i> default:true</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Iterator <b class="function">iterator</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">remove</b> (Object <i class="parameter">o</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">size</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Object</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Object <b class="function">clone</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->AbstractCollection(Collection)-->AbstractSet(Set(Collection))-->HashSet(Cloneable,Serializable,Set(Collection))</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>Hashtable</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.util</b></font></td><td align="right"><font size="+1"><b><i>cloneable serializable collection PJ1.1</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2906"></a><a name="INDEX-2907"></a><a name="INDEX-2908"></a><a name="INDEX-2909"></a><a name="INDEX-2910"></a><a name="INDEX-2911"></a><a name="INDEX-2912"></a><a name="INDEX-2913"></a>
  This class implements a hashtable data structure, which maps key
  objects to value objects and allows the efficient lookup of the value
  associated with a given key. <tt class="literal">put()</tt> associates a value
  with a key in a <tt class="literal">Hashtable</tt>. <tt class="literal">get()</tt> retrieves a
  value for a specified key. <tt class="literal">remove()</tt> deletes a key/value
  association. <tt class="literal">keys()</tt> and <tt class="literal">elements()</tt> return
  <tt class="literal">Enumeration</tt> objects that allow you to iterate through the
  complete set of keys and values stored in the table. Objects used as keys in a <tt class="literal">Hashtable</tt> must have valid
  <tt class="literal">equals()</tt> and <tt class="literal">hashCode()</tt> methods
  (the versions inherited from <tt class="literal">Object</tt> are okay). <tt class="literal">null</tt> is not legal as a key or value in a
  <tt class="literal">Hashtable</tt>. </p>
<p>
<a name="INDEX-2914"></a><tt class="literal">Hashtable</tt> is a commonly used class and has been a
  part of the Java API since Java 1.0. In Java 1.2, it has been
  enhanced to implement the <tt class="literal">Map</tt> interface, which
  defines some functionality in addition to the Java 1.0
  <tt class="literal">Hashtable</tt> methods. <tt class="literal">Hashtable</tt> is
  very similar to the <tt class="literal">HashMap</tt> class, but has
  <tt class="literal">synchronized</tt> methods, which make it thread-safe
  but increase the overhead associated with it. If you need
  thread safety or require compatibility with Java 1.0 or Java 1.1, use
  <tt class="literal">Hashtable</tt>. Otherwise, use
  <tt class="literal">HashMap</tt>. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">Hashtable</b> extends Dictionary implements Cloneable, Map,Serializable {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">Hashtable</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public <b class="function">Hashtable</b> (Map <i class="parameter">t</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">Hashtable</b> (int <i class="parameter">initialCapacity</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">Hashtable</b> (int <i class="parameter">initialCapacity</i>, float <i class="parameter">loadFactor</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">contains</b> (Object <i class="parameter">value</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Methods Implementing Map</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">clear</b> ();</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">containsKey</b> (Object <i class="parameter">key</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public boolean <b class="function">containsValue</b> (Object <i class="parameter">value</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public Set <b class="function">entrySet</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public boolean <b class="function">equals</b> (Object <i class="parameter">o</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Object <b class="function">get</b> (Object <i class="parameter">key</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public int <b class="function">hashCode</b> ();</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">isEmpty</b> ();</td><td align="right"><i> default:true</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public Set <b class="function">keySet</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Object <b class="function">put</b> (Object <i class="parameter">key</i>, Object <i class="parameter">value</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public void <b class="function">putAll</b> (Map <i class="parameter">t</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Object <b class="function">remove</b> (Object <i class="parameter">key</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">size</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public Collection <b class="function">values</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Dictionary</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Enumeration <b class="function">elements</b> ();</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Enumeration <b class="function">keys</b> ();</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Object</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Object <b class="function">clone</b> ();</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">toString</b> ();</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected void <b class="function">rehash</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Dictionary-->Hashtable(Cloneable,Map,Serializable)</tt>
</p>
<p>
<span class="refsect1">Subclasses: </span><tt class="literal">Properties, javax.swing.UIDefaults</tt>
</p>
<p>
<span class="refsect1">Passed To: </span>Too many methods to list. </p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">javax.naming.CannotProceedException.getEnvironment(), javax.naming.Context.getEnvironment(), javax.naming.InitialContext.getEnvironment(), javax.servlet.http.HttpUtils.{parsePostData(), parseQueryString()}, javax.swing.JLayeredPane.getComponentToLayer(), javax.swing.JSlider.createStandardLabels()</tt>
</p>
<p>
<span class="refsect1">Type Of: </span><tt class="literal">java.awt.GridBagLayout.comptable, javax.naming.CannotProceedException.environment, javax.naming.InitialContext.myProps, javax.swing.JTable.{defaultEditorsByColumnClass, defaultRenderersByColumnClass}, javax.swing.text.html.parser.DTD.{elementHash, entityHash}, javax.swing.undo.StateEdit.{postState, preState}</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>Iterator</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.util</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2915"></a><a name="INDEX-2916"></a><a name="INDEX-2917"></a>
  This interface defines methods for iterating, or enumerating, the
  elements of a collection. The <tt class="literal">hasNext()</tt> method
  returns <tt class="literal">true</tt> if there are more elements to be
  enumerated or <tt class="literal">false</tt> if all elements have already
  been returned. The <tt class="literal">next()</tt> method returns the next
  element. These two methods make it easy to loop through an
  iterator with code such as the following:</p>

<blockquote>
<pre class="programlisting">for(Iterator i = c.iterator(); i.hasNext(); )
    processObject(i.next());</pre>
</blockquote>

<p>
<a name="INDEX-2918"></a><a name="INDEX-2919"></a><a name="INDEX-2920"></a><a name="INDEX-2921"></a>
  The <tt class="literal">Iterator</tt> interface is much like the
  <tt class="literal">Enumeration</tt> interface. In Java 1.2,
  <tt class="literal">Iterator</tt> is preferred over
  <tt class="literal">Enumeration</tt> because it provides a well-defined way
  to safely remove elements from a collection while the iteration is in
  progress. The <tt class="literal">remove()</tt> method removes the object
  most recently returned by <tt class="literal">next()</tt> from the
  collection that is being iterated through. Note, however, that
  support for <tt class="literal">remove()</tt> is optional; if an
  <tt class="literal">Iterator</tt> does not support
  <tt class="literal">remove()</tt>, it throws a
  <tt class="literal">java.lang.UnsupportedOperationException</tt> when you
  call it. While you are iterating through a collection, you are
  allowed to modify the collection only by calling the
  <tt class="literal">remove()</tt> method of the <tt class="literal">Iterator</tt>. If the collection is modified in any other way while an iteration is
  ongoing, the <tt class="literal">Iterator</tt> may fail to operate
  correctly,x or it may throw a
  <tt class="literal">ConcurrentModificationException</tt>. </p>

<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public interface <b class="classname">Iterator</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract boolean <b class="function">hasNext</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract Object <b class="function">next</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">remove</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Implementations: </span><tt class="literal">java.beans.beancontext.BeanContextSupport.BCSIterator, ListIterator</tt>
</p>
<p>
<span class="refsect1">Returned By: </span>Too many methods to list. </p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>LinkedList</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.util</b></font></td><td align="right"><font size="+1"><b><i>cloneable serializable collection</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2922"></a><a name="INDEX-2923"></a><a name="INDEX-2924"></a><a name="INDEX-2925"></a><a name="INDEX-2926"></a><a name="INDEX-2927"></a><a name="INDEX-2928"></a><a name="INDEX-2929"></a>
  This class implements the <tt class="literal">List</tt> interface in terms
  of a doubly linked list. It supports all optional methods of
  <tt class="literal">List</tt> and <tt class="literal">Collection</tt> and allows
  list elements of any type, including <tt class="literal">null</tt>. Because
  <tt class="literal">LinkedList</tt> is implemented with a linked list data
  structure, the <tt class="literal">get()</tt> and <tt class="literal">set()</tt>
  methods are substantially less efficient than the same methods for an
  <tt class="literal">ArrayList</tt>. However, a
  <tt class="literal">LinkedList</tt> may be more efficient when the
  <tt class="literal">add()</tt> and <tt class="literal">remove()</tt> methods are
  used frequently. The methods of
  <tt class="literal">LinkedList</tt> are not
  <tt class="literal">synchronized</tt>. If you are using a
  <tt class="literal">LinkedList</tt> in a multithreaded environment, you
  must explicitly synchronize any code that modifies the list or
  obtain a synchronized wrapper object with
  <tt class="literal">Collections.synchronizedList()</tt>. </p>
<p>
<a name="INDEX-2930"></a>
  In addition to the methods defined by the <tt class="literal">List</tt>
  interface, <tt class="literal">LinkedList</tt> defines methods to get the
  first and last elements of the list, to add an element to the
  beginning or end of the list, and to remove the first or last element
  of the list. These convenient and efficient methods make 
  <tt class="literal">LinkedList</tt> well-suited for use as a stack or queue. See <tt class="literal">List</tt> and <tt class="literal">Collection</tt> for
  details on the methods of <tt class="literal">LinkedList</tt>. See also
  <tt class="literal">ArrayList</tt>. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">LinkedList</b> extends AbstractSequentialList implements Cloneable, java.util.List, Serializable {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">LinkedList</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">LinkedList</b> (Collection <i class="parameter">c</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">addFirst</b> (Object <i class="parameter">o</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">addLast</b> (Object <i class="parameter">o</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Object <b class="function">getFirst</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Object <b class="function">getLast</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Object <b class="function">removeFirst</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Object <b class="function">removeLast</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Methods Implementing List</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">add</b> (Object <i class="parameter">o</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">add</b> (int <i class="parameter">index</i>, Object <i class="parameter">element</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">addAll</b> (Collection <i class="parameter">c</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">addAll</b> (int <i class="parameter">index</i>, Collection <i class="parameter">c</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">clear</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">contains</b> (Object <i class="parameter">o</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Object <b class="function">get</b> (int <i class="parameter">index</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">indexOf</b> (Object <i class="parameter">o</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">lastIndexOf</b> (Object <i class="parameter">o</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public ListIterator <b class="function">listIterator</b> (int <i class="parameter">index</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">remove</b> (Object <i class="parameter">o</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Object <b class="function">remove</b> (int <i class="parameter">index</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Object <b class="function">set</b> (int <i class="parameter">index</i>, Object <i class="parameter">element</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">size</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Object[ ] <b class="function">toArray</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Object[ ] <b class="function">toArray</b> (Object[ ] <i class="parameter">a</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Object</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Object <b class="function">clone</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->AbstractCollection(Collection)-->AbstractList(java.util.List(Collection))-->AbstractSequentialList-->LinkedList(Cloneable,java.util.List(Collection),Serializable)</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>List</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.util</b></font></td><td align="right"><font size="+1"><b><i>collection</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2931"></a>
  This interface represents an ordered collection of objects. Each
  element in a <tt class="literal">List</tt> has an
  index, or position, in the list, and elements
  can be inserted, queried, and removed by index. The first element of
  a <tt class="literal">List</tt> has an index of <tt class="literal">0</tt>. The last element in a
  list has index <tt class="literal">size()-1</tt>. </p>
<p>
<a name="INDEX-2932"></a><a name="INDEX-2933"></a><a name="INDEX-2934"></a><a name="INDEX-2935"></a><a name="INDEX-2936"></a>
  In addition to the methods defined by the superinterface,
  <tt class="literal">Collection</tt>, <tt class="literal">List</tt> defines a
  number of methods for working with its indexed elements. <tt class="literal">get()</tt> and <tt class="literal">set()</tt> query and set
  the object at a particular index, respectively. Versions of
  <tt class="literal">add()</tt> and <tt class="literal">addAll()</tt> that take an
  <em class="replaceable">index</em> argument insert an object 
  or <tt class="literal">Collection</tt> of
  objects at a specified index. The versions of
  <tt class="literal">add()</tt> and <tt class="literal">addAll()</tt> that do not
  take an <em class="replaceable">index</em> 
  argument insert an object or collection of objects at
  the end of the list. <tt class="literal">List</tt> defines a version of
  <tt class="literal">remove()</tt> that removes the object at a specified
  index. </p>
<p>
<a name="INDEX-2937"></a><a name="INDEX-2938"></a>

  The <tt class="literal">iterator()</tt> method is just like the
  <tt class="literal">iterator()</tt> method of <tt class="literal">Collection</tt>,
  except that the <tt class="literal">Iterator</tt> it returns is guaranteed
  to enumerate the elements of the <tt class="literal">List</tt> in order. <tt class="literal">listIterator()</tt> returns a
  <tt class="literal">ListIterator</tt> object, which is more powerful than a
  regular <tt class="literal">Iterator</tt> and allows the list to be modified
  while iteration proceeds. <tt class="literal">listIterator()</tt> can take
  an index argument to specify where in the list iteration should
  begin. </p>
<p>
<a name="INDEX-2939"></a><a name="INDEX-2940"></a><a name="INDEX-2941"></a><a name="INDEX-2942"></a><tt class="literal">indexOf()</tt> and
  <tt class="literal">lastIndexOf()</tt> perform linear searches from the
  beginning and end, respectively, of the list, searching for a
  specified object. Each method returns the index of the first matching object
  it finds, or -1 if it does not find a match. Finally,
  <tt class="literal">subList()</tt> returns a <tt class="literal">List</tt> that
  contains only a specified contiguous range of list elements. The
  returned list is simply a view into the original list, so changes in
  the original <tt class="literal">List</tt> are visible in the returned
  <tt class="literal">List</tt>. This <tt class="literal">subList()</tt> method is
  particularly useful if you want to sort, search, 
  <tt class="literal">clear()</tt>, or otherwise manipulate only a partial
  range of a larger list. </p>
<p>  An interface cannot specify constructors, but it is conventional that
  all implementations of <tt class="literal">List</tt> provide at least
  two standard constructors: one that takes no arguments and creates an
  empty list, and a copy constructor that accepts an arbitrary
  <tt class="literal">Collection</tt> object that specifies the initial
  contents of the new <tt class="literal">List</tt>. </p>
<p>  As with <tt class="literal">Collection</tt>, all <tt class="literal">List</tt>
  methods that change the contents of the list are optional, and
  implementations that do not support them simply throw
  <tt class="literal">java.lang.UnsupportedOperationException</tt>. Different
  implementations of <tt class="literal">List</tt> may have significantly
  different efficiency characteristics. For example, the
  <tt class="literal">get()</tt> and <tt class="literal">set()</tt> methods of an
  <tt class="literal">ArrayList</tt> are much more efficient than those of a
  <tt class="literal">LinkedList</tt>. On the other hand, the
  <tt class="literal">add()</tt> and <tt class="literal">remove()</tt> methods of a
  <tt class="literal">LinkedList</tt> can be more efficient than those of an
  <tt class="literal">ArrayList</tt>. See also <tt class="literal">Collection</tt>, <tt class="literal">Set</tt>,
  <tt class="literal">Map</tt>, <tt class="literal">ArrayList</tt>, and
  <tt class="literal">LinkedList</tt>.</p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public interface <b class="classname">List</b> extends Collection {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract boolean <b class="function">add</b> (Object <i class="parameter">o</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">add</b> (int <i class="parameter">index</i>, Object <i class="parameter">element</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract boolean <b class="function">addAll</b> (Collection <i class="parameter">c</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract boolean <b class="function">addAll</b> (int <i class="parameter">index</i>, Collection <i class="parameter">c</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">clear</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract boolean <b class="function">contains</b> (Object <i class="parameter">o</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract boolean <b class="function">containsAll</b> (Collection <i class="parameter">c</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract boolean <b class="function">equals</b> (Object <i class="parameter">o</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract Object <b class="function">get</b> (int <i class="parameter">index</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract int <b class="function">hashCode</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract int <b class="function">indexOf</b> (Object <i class="parameter">o</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract boolean <b class="function">isEmpty</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract Iterator <b class="function">iterator</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract int <b class="function">lastIndexOf</b> (Object <i class="parameter">o</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract ListIterator <b class="function">listIterator</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract ListIterator <b class="function">listIterator</b> (int <i class="parameter">index</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract boolean <b class="function">remove</b> (Object <i class="parameter">o</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract Object <b class="function">remove</b> (int <i class="parameter">index</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract boolean <b class="function">removeAll</b> (Collection <i class="parameter">c</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract boolean <b class="function">retainAll</b> (Collection <i class="parameter">c</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract Object <b class="function">set</b> (int <i class="parameter">index</i>, Object <i class="parameter">element</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract int <b class="function">size</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract java.util.List <b class="function">subList</b> (int <i class="parameter">fromIndex</i>, int <i class="parameter">toIndex</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract Object[ ] <b class="function">toArray</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract Object[ ] <b class="function">toArray</b> (Object[ ] <i class="parameter">a</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">(java.util.List(Collection))</tt>
</p>
<p>
<span class="refsect1">Implementations: </span><tt class="literal">AbstractList, ArrayList, LinkedList, Vector</tt>
</p>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">java.awt.dnd.DragGestureEvent.DragGestureEvent(), Collections.{binarySearch(), copy(), fill(), reverse(), shuffle(), sort(), synchronizedList(), unmodifiableList()}</tt>
</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">java.awt.dnd.DropTargetContext.getCurrentDataFlavorsAsList(), java.awt.dnd.DropTargetDragEvent.getCurrentDataFlavorsAsList(), java.awt.dnd.DropTargetDropEvent.getCurrentDataFlavorsAsList(), AbstractList.subList(), Arrays.asList(), Collections.{nCopies(), singletonList(), synchronizedList(), unmodifiableList()}, java.util.List.subList(), Vector.subList()</tt>
</p>
<p>
<span class="refsect1">Type Of: </span><tt class="literal">Collections.EMPTY_LIST</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>ListIterator</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.util</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2943"></a>
  This interface is an extension of <tt class="literal">Iterator</tt> for use
  with ordered collections, or lists. It defines methods to iterate
  forward and backward through a list, to determine the list index of
  the elements being iterated, and, for mutable lists, to safely insert,
  delete, and edit elements in the list while the iteration is in
  progress. For some lists, notably 
  <tt class="literal">LinkedList</tt>, using an iterator to enumerate the
  list's elements may be substantially more efficient than 
  looping through the list by index and calling
  <tt class="literal">get()</tt> repeatedly. </p>
<p>
<a name="INDEX-2944"></a><a name="INDEX-2945"></a><a name="INDEX-2946"></a><a name="INDEX-2947"></a><a name="INDEX-2948"></a><a name="INDEX-2949"></a><a name="INDEX-2950"></a><tt class="literal">hasNext()</tt> and <tt class="literal">next()</tt> are the
  most commonly used methods of <tt class="literal">ListIterator</tt>; they
  iterate forward through the list. See
  <tt class="literal">Iterator</tt> for details. In addition to these two
  methods, however, <tt class="literal">ListIterator</tt> also defines
  <tt class="literal">hasPrevious()</tt> and <tt class="literal">previous()</tt>
  that allow you to iterate backward through the list. <tt class="literal">previous()</tt> returns the previous element on the
  list or throws a <tt class="literal">NoSuchElementException</tt> if there
  is no previous element. <tt class="literal">hasPrevious()</tt> returns
  <tt class="literal">true</tt> if a subsequent call to
  <tt class="literal">previous()</tt> returns an object. <tt class="literal">nextIndex()</tt> and <tt class="literal">previousIndex()</tt>
  return the index of the object that would be returned by a subsequent
  call to <tt class="literal">next()</tt> or <tt class="literal">previous()</tt>. If <tt class="literal">next()</tt> or <tt class="literal">previous()</tt>
  throw a <tt class="literal">NoSuchElementException</tt>,
  <tt class="literal">nextIndex()</tt> returns the size of the list, and
  <tt class="literal">previousIndex()</tt> returns -1. </p>
<p>
<a name="INDEX-2951"></a><a name="INDEX-2952"></a><a name="INDEX-2953"></a><a name="INDEX-2954"></a><a name="INDEX-2955"></a><a name="INDEX-2956"></a><tt class="literal">ListIterator</tt> defines three optionally
  supported methods that provide a safe way to modify the contents of
  the underlying list while the iteration is in
  progress. <tt class="literal">add()</tt> inserts a new object into the
  list, immediately before the object that would be returned by a
  subsequent call to <tt class="literal">next()</tt>. Calling
  <tt class="literal">add()</tt> does not affect the value that is
  returned by <tt class="literal">next()</tt>, however. If you call
  <tt class="literal">previous()</tt> immediately after calling
  <tt class="literal">add()</tt>, the method returns the object you just added. <tt class="literal">remove()</tt> deletes from the list the object most
  recently returned by <tt class="literal">next()</tt> or
  <tt class="literal">previous()</tt>. You can only call
  <tt class="literal">remove()</tt> once per call to <tt class="literal">next()</tt>
  or <tt class="literal">previous()</tt>. If you have called
  <tt class="literal">add()</tt>, you must call <tt class="literal">next()</tt> or
  <tt class="literal">previous()</tt> again before calling
  <tt class="literal">remove()</tt>. <tt class="literal">set()</tt> replaces the
  object most recently returned by <tt class="literal">next()</tt> or
  <tt class="literal">previous()</tt> with the specified object. If you have
  called <tt class="literal">add()</tt> or <tt class="literal">remove()</tt>, you
  must call <tt class="literal">next()</tt> or <tt class="literal">previous()</tt>
  again before calling <tt class="literal">set()</tt>. Remember that support for the <tt class="literal">add()</tt>,
  <tt class="literal">remove()</tt>, and <tt class="literal">set()</tt> methods is
  optional. Iterators for immutable lists never support them,
  of course. An unsupported method throws a
  <tt class="literal">java.lang.UnsupportedOperationException</tt> 
  when called. Also,
  when an iterator is in use, all modifications should be made
  through the iterator rather than to the list itself. If the
  underlying list is modified while an iteration is ongoing, the
  <tt class="literal">ListIterator</tt> may fail to operate correctly or may
  throw a <tt class="literal">ConcurrentModificationException</tt>. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public interface <b class="classname">ListIterator</b> extends Iterator {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">add</b> (Object <i class="parameter">o</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract boolean <b class="function">hasNext</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract boolean <b class="function">hasPrevious</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract Object <b class="function">next</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract int <b class="function">nextIndex</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract Object <b class="function">previous</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract int <b class="function">previousIndex</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">remove</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">set</b> (Object <i class="parameter">o</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">(ListIterator(Iterator))</tt>
</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">AbstractList.listIterator(), AbstractSequentialList.listIterator(), LinkedList.listIterator(), java.util.List.listIterator()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>ListResourceBundle</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.util</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-2957"></a>
This abstract class provides a simple way to define a
<tt class="literal">ResourceBundle</tt>. You may find it easier to subclass
<tt class="literal">ListResourceBundle</tt> than to subclass
<tt class="literal">ResourceBundle</tt> directly. <a name="INDEX-2958"></a><a name="INDEX-2959"></a><a name="INDEX-2960"></a><tt class="literal">ListResourceBundle</tt> provides implementations for the
abstract <tt class="literal">handleGetObject()</tt> and <tt class="literal">getKeys()</tt>
methods defined by <tt class="literal">ResourceBundle</tt> and adds its
own abstract <tt class="literal">getContents()</tt> method a 
subclass must override. <tt class="literal">getContents()</tt> returns an
<tt class="literal">Object[][]</tt>--an array of arrays of objects. This
array can have any number of elements. Each element of this
array must itself be an array with two elements: the first
element of each subarray should be a <tt class="literal">String</tt> that specifies
the name of a resource, and the corresponding second element
should be the value of that resource; this value can be an
<tt class="literal">Object</tt> of any desired type. See also <tt class="literal">ResourceBundle</tt> and <tt class="literal">PropertyResourceBundle</tt>. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public abstract class <b class="classname">ListResourceBundle</b> extends ResourceBundle {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">ListResourceBundle</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding ResourceBundle</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Enumeration <b class="function">getKeys</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final Object <b class="function">handleGetObject</b> (String <i class="parameter">key</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected abstract Object[ ][ ] <b class="function">getContents</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->ResourceBundle-->ListResourceBundle</tt>
</p>
<p>
<span class="refsect1">Subclasses: </span><tt class="literal">java.text.resources.DateFormatZoneData, java.text.resources.DateFormatZoneData_en, java.text.resources.LocaleElements, java.text.resources.LocaleElements_en, java.text.resources.LocaleElements_en_US, javax.accessibility.AccessibleResourceBundle</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>Locale</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.util</b></font></td><td align="right"><font size="+1"><b><i>cloneable serializable PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-2961"></a>
The <tt class="literal">Locale</tt> class represents a locale: a political,
geographical, or cultural region that typically has a
distinct language and distinct customs and conventions for
such things as formatting dates, times, and numbers. <a name="INDEX-2962"></a><a name="INDEX-2963"></a>
The <tt class="literal">Locale</tt> class defines a number of constants that
represent commonly used locales. <tt class="literal">Locale</tt> also
defines a static <tt class="literal">getDefault()</tt> method that returns
the default <tt class="literal">Locale</tt> object, which represents a locale
value inherited from the host system. <tt class="literal">getAvailableLocales()</tt> returns the list of all
locales supported by the underlying system. If none of these
methods for obtaining a <tt class="literal">Locale</tt> object are suitable,
you can explicitly create your own <tt class="literal">Locale</tt>
object. To do this, you must specify a language code, a
country code, and an optional variant string. <tt class="literal">getISOCountries()</tt> and
<tt class="literal">getISOLanguages()</tt> return the list of supported
country codes and language codes. 
<a name="INDEX-2964"></a><a name="INDEX-2965"></a>
</p>
<p>
<a name="INDEX-2966"></a>
The <tt class="literal">Locale</tt> class does not implement any
internationalization behavior itself; it merely serves as a
locale identifier for those classes that can localize their
behavior. Given a <tt class="literal">Locale</tt> object, you can invoke the
various <tt class="literal">getDisplay</tt> methods to obtain a
description of the locale suitable for display to a user. These methods may themselves take a <tt class="literal">Locale</tt>
argument, so the names of languages and countries can be
localized as appropriate. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public final class <b class="classname">Locale</b> implements Cloneable, Serializable {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">Locale</b> (String <i class="parameter">language</i>, String <i class="parameter">country</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">Locale</b> (String <i class="parameter">language</i>, String <i class="parameter">country</i>, String <i class="parameter">variant</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constants</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final Locale <b class="function">CANADA</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final Locale <b class="function">CANADA_FRENCH</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final Locale <b class="function">CHINA</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final Locale <b class="function">CHINESE</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final Locale <b class="function">ENGLISH</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final Locale <b class="function">FRANCE</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final Locale <b class="function">FRENCH</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final Locale <b class="function">GERMAN</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final Locale <b class="function">GERMANY</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final Locale <b class="function">ITALIAN</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final Locale <b class="function">ITALY</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final Locale <b class="function">JAPAN</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final Locale <b class="function">JAPANESE</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final Locale <b class="function">KOREA</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final Locale <b class="function">KOREAN</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final Locale <b class="function">PRC</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final Locale <b class="function">SIMPLIFIED_CHINESE</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final Locale <b class="function">TAIWAN</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final Locale <b class="function">TRADITIONAL_CHINESE</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final Locale <b class="function">UK</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final Locale <b class="function">US</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Class Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public static Locale[ ] <b class="function">getAvailableLocales</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static Locale <b class="function">getDefault</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public static String[ ] <b class="function">getISOCountries</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public static String[ ] <b class="function">getISOLanguages</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static void <b class="function">setDefault</b> (Locale <i class="parameter">newLocale</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Property Accessor Methods (by property name)</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">getCountry</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final String <b class="function">getDisplayCountry</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">getDisplayCountry</b> (Locale <i class="parameter">inLocale</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final String <b class="function">getDisplayLanguage</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">getDisplayLanguage</b> (Locale <i class="parameter">inLocale</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final String <b class="function">getDisplayName</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">getDisplayName</b> (Locale <i class="parameter">inLocale</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final String <b class="function">getDisplayVariant</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">getDisplayVariant</b> (Locale <i class="parameter">inLocale</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">getISO3Country</b> () throws MissingResourceException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">getISO3Language</b> () throws MissingResourceException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">getLanguage</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">getVariant</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Object</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Object <b class="function">clone</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">equals</b> (Object <i class="parameter">obj</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">hashCode</b> ();</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final String <b class="function">toString</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Locale(Cloneable,Serializable)</tt>
</p>
<p>
<span class="refsect1">Passed To: </span>Too many methods to list. </p>
<p>
<span class="refsect1">Returned By: </span>Too many methods to list. </p>
<p>
<span class="refsect1">Type Of: </span>Too many fields to list. </p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>Map</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.util</b></font></td><td align="right"><font size="+1"><b><i>collection</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2967"></a>
 
  This interface represents a collection of mappings, or associations,
  between key objects and value objects. Hashtables and associative
  arrays are examples of maps. The set of key objects in a
  <tt class="literal">Map</tt> must not have any duplicates; the collection of
  value objects is under no such constraint. The key objects should
  usually be immutable objects, or, if they are not, care should be
  taken that they do not change while in use in a
  <tt class="literal">Map</tt>. As of Java 1.2, the 
  <tt class="literal">Map</tt> interface replaces
  the abstract <tt class="literal">Dictionary</tt> class. Although a
  <tt class="literal">Map</tt> is not a <tt class="literal">Collection</tt>, the
  <tt class="literal">Map</tt> interface is still considered an integral part,
  along with <tt class="literal">Set</tt>, <tt class="literal">List</tt>, and
  others, of the Java collections framework. </p>
<p>
<a name="INDEX-2968"></a><a name="INDEX-2969"></a><a name="INDEX-2970"></a><a name="INDEX-2971"></a><a name="INDEX-2972"></a><a name="INDEX-2973"></a><a name="INDEX-2974"></a><a name="INDEX-2975"></a><a name="INDEX-2976"></a><a name="INDEX-2977"></a><a name="INDEX-2978"></a><a name="INDEX-2979"></a>
  You can add a key/value association to a <tt class="literal">Map</tt> with the
  <tt class="literal">put()</tt> method. Use <tt class="literal">putAll()</tt> to
  copy all mappings from one <tt class="literal">Map</tt> to another. Call <tt class="literal">get()</tt> to look up the value object associated
  with a specified key object. Use <tt class="literal">remove()</tt> to
  delete the mapping between a specified key and its value, or use
  <tt class="literal">clear()</tt> to delete all mappings from a
  <tt class="literal">Map</tt>. <tt class="literal">size()</tt> returns the number
  of mappings in a <tt class="literal">Map</tt>, and
  <tt class="literal">isEmpty()</tt> tests whether the <tt class="literal">Map</tt>
  contains no mappings. <tt class="literal">containsKey()</tt> tests whether
  a <tt class="literal">Map</tt> contains the specified key object, and
  <tt class="literal">containsValue()</tt> tests whether it contains the
  specified value. (For most implementations,
  <tt class="literal">containsValue()</tt> is a much more expensive operation
  than <tt class="literal">containsKey()</tt>, however.)
  <tt class="literal">keySet()</tt> returns a
  <tt class="literal">Set</tt> of all key objects in the
  <tt class="literal">Map</tt>. <tt class="literal">values()</tt> returns a
  <tt class="literal">Collection</tt> (not a <tt class="literal">Set</tt>, since it
  may contain duplicates) of all value objects in the map. <tt class="literal">entrySet()</tt> returns a <tt class="literal">Set</tt> of all
  mappings in a <tt class="literal">Map</tt>. The elements of this returned
  <tt class="literal">Set</tt> are <tt class="literal">Map.Entry</tt> objects. The
  collections returned by <tt class="literal">values()</tt>,
  <tt class="literal">keySet()</tt>, and <tt class="literal">entrySet()</tt> are 
  based on the <tt class="literal">Map</tt> itself,
  so changes to the <tt class="literal">Map</tt> are reflected in the
  collections. </p>
<p>  An interface cannot specify constructors, but it is conventional that
  all implementations of <tt class="literal">Map</tt> provide at least two
  standard constructors: one that takes no arguments and creates an
  empty map, and a copy constructor that accepts a
  <tt class="literal">Map</tt> object that specifies the initial contents of
  the new <tt class="literal">Map</tt>. </p>
<p>  Implementations are required to support all methods that query the
  contents of a <tt class="literal">Map</tt>, but support for methods that
  modify the contents of a <tt class="literal">Map</tt> is optional. If an
  implementation does not support a particular method, the
  implementation of that method simply throws a
  <tt class="literal">java.lang.UnsupportedOperationException</tt>. See also
  <tt class="literal">Collection</tt>, <tt class="literal">Set</tt>,
  <tt class="literal">List</tt>, <tt class="literal">HashMap</tt>,
  <tt class="literal">Hashtable</tt>, <tt class="literal">WeakHashMap</tt>,
  <tt class="literal">SortedMap</tt>, and <tt class="literal">TreeMap</tt>. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public interface <b class="classname">Map</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Inner Classes</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">clear</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract boolean <b class="function">containsKey</b> (Object <i class="parameter">key</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract boolean <b class="function">containsValue</b> (Object <i class="parameter">value</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract Set <b class="function">entrySet</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract boolean <b class="function">equals</b> (Object <i class="parameter">o</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract Object <b class="function">get</b> (Object <i class="parameter">key</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract int <b class="function">hashCode</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract boolean <b class="function">isEmpty</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract Set <b class="function">keySet</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract Object <b class="function">put</b> (Object <i class="parameter">key</i>, Object <i class="parameter">value</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">putAll</b> (Map <i class="parameter">t</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract Object <b class="function">remove</b> (Object <i class="parameter">key</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract int <b class="function">size</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract Collection <b class="function">values</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Implementations: </span><tt class="literal">java.awt.RenderingHints, AbstractMap, HashMap, Hashtable, SortedMap, WeakHashMap, java.util.jar.Attributes</tt>
</p>
<p>
<span class="refsect1">Passed To: </span>Too many methods to list. </p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">java.awt.Font.getAttributes(), java.awt.Toolkit.mapInputMethodHighlight(), java.awt.datatransfer.FlavorMap.{getFlavorsForNatives(), getNativesForFlavors()}, java.awt.datatransfer.SystemFlavorMap.{getFlavorsForNatives(), getNativesForFlavors()}, java.awt.im.InputMethodHighlight.getStyle(), java.sql.Connection.getTypeMap(), java.text.AttributedCharacterIterator.getAttributes(), Collections.{singletonMap(), synchronizedMap(), unmodifiableMap()}, java.util.jar.Manifest.getEntries(), javax.sql.RowSet.getTypeMap()</tt>
</p>
<p>
<span class="refsect1">Type Of: </span><tt class="literal">java.awt.Toolkit.desktopProperties, Collections.EMPTY_MAP, java.util.jar.Attributes.map</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>Map.Entry</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.util</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2980"></a><a name="INDEX-2981"></a><a name="INDEX-2982"></a><a name="INDEX-2983"></a><a name="INDEX-2984"></a><a name="INDEX-2985"></a><a name="INDEX-2986"></a>
  This interface represents a single mapping, or association, between a
  key object and a value object in a <tt class="literal">Map</tt>. The
  <tt class="literal">entrySet()</tt> method of a <tt class="literal">Map</tt>
  returns a <tt class="literal">Set</tt> of <tt class="literal">Map.Entry</tt>
  objects that represent the set of mappings in the map. Use the
  <tt class="literal">iterator()</tt> method of that <tt class="literal">Set</tt> to
  enumerate these <tt class="literal">Map.Entry</tt> objects. Use
  <tt class="literal">getKey()</tt> and <tt class="literal">getValue()</tt> to
  obtain the key and value objects for the entry. Use the optionally
  supported <tt class="literal">setValue()</tt> method to change the value
  of an entry. This method throws a
  <tt class="literal">java.lang.UnsupportedOperationException</tt> if it is not
  supported by the implementation. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public static interface <b class="classname">Map.Entry</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract boolean <b class="function">equals</b> (Object <i class="parameter">o</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract Object <b class="function">getKey</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract Object <b class="function">getValue</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract int <b class="function">hashCode</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract Object <b class="function">setValue</b> (Object <i class="parameter">value</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>MissingResourceException</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.util</b></font></td><td align="right"><font size="+1"><b><i>serializable unchecked PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-2987"></a>
Signals that no <tt class="literal">ResourceBundle</tt> can
be located for the desired locale or that a named resource
cannot be found within a given <tt class="literal">ResourceBundle</tt>. <a name="INDEX-2988"></a><a name="INDEX-2989"></a><tt class="literal">getClassName()</tt> returns the name of the
<tt class="literal">ResourceBundle</tt> class in question, and
<tt class="literal">getKey()</tt> returns the name of the resource that cannot be located. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">MissingResourceException</b> extends RuntimeException {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">MissingResourceException</b> (String <i class="parameter">s</i>, String <i class="parameter">className</i>, String <i class="parameter">key</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">getClassName</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">getKey</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Exception-->RuntimeException-->MissingResourceException</tt>
</p>
<p>
<span class="refsect1">Thrown By: </span><tt class="literal">Locale.{getISO3Country(), getISO3Language()}, ResourceBundle.{getBundle(), getObject(), getString(), getStringArray(), handleGetObject()}</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>NoSuchElementException</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.util</b></font></td><td align="right"><font size="+1"><b><i>serializable unchecked PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-2990"></a>

Signals that there are no elements in an object (such as a
<tt class="literal">Vector</tt>) or that there are no more elements in
an object (such as an <tt class="literal">Enumeration</tt>). </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">NoSuchElementException</b> extends RuntimeException {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">NoSuchElementException</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">NoSuchElementException</b> (String <i class="parameter">s</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Exception-->RuntimeException-->NoSuchElementException</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>Observable</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.util</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-2991"></a><a name="INDEX-2992"></a><a name="INDEX-2993"></a><a name="INDEX-2994"></a>
This class is the superclass of all observable objects to
be used in an object-oriented model/view paradigm. The
class methods allow you to add and delete <tt class="literal">Observer</tt>
objects on the list maintained by an <tt class="literal">Observable</tt> object and to
notify all of the <tt class="literal">Observer</tt> objects on the list. <tt class="literal">Observer</tt> objects are notified by invoking their
<tt class="literal">update()</tt> methods. <tt class="literal">Observable</tt> also maintains
an internal changed flag that can be set and cleared by
the <tt class="literal">Observable</tt> itself and queried with
<tt class="literal">hasChanged()</tt> by any interested observer. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">Observable</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">Observable</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">addObserver</b> (Observer <i class="parameter">o</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">countObservers</b> ();</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">deleteObserver</b> (Observer <i class="parameter">o</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">deleteObservers</b> ();</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">hasChanged</b> ();</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">notifyObservers</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">notifyObservers</b> (Object <i class="parameter">arg</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected void <b class="function">clearChanged</b> ();</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected void <b class="function">setChanged</b> ();</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">Observer.update()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>Observer</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.util</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-2995"></a><a name="INDEX-2996"></a><a name="INDEX-2997"></a>
This interface defines the <tt class="literal">update()</tt> method required
for an object to observe subclasses of <tt class="literal">Observable</tt>. An <tt class="literal">Observer</tt> registers interest in an
<tt class="literal">Observable</tt> object by calling the
<tt class="literal">addObserver()</tt> method of <tt class="literal">Observable</tt>. <tt class="literal">Observer</tt>
objects that have been registered in this way have
their <tt class="literal">update()</tt> methods invoked by the
<tt class="literal">Observable</tt> when that object has changed. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public interface <b class="classname">Observer</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">update</b> (Observable <i class="parameter">o</i>, Object <i class="parameter">arg</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">Observable.{addObserver(), deleteObserver()}</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>Properties</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.util</b></font></td><td align="right"><font size="+1"><b><i>cloneable serializable collection PJ1.1</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2998"></a><a name="INDEX-2999"></a><a name="INDEX-3000"></a>
  This class is an extension of <tt class="literal">Hashtable</tt> that allows
  key/value pairs to be read from and written to a stream. The
  <tt class="literal">Properties</tt> class implements the system
  properties list, which supports user customization by allowing
  programs to look up the values of named resources. Because the
  <tt class="literal">load()</tt> and <tt class="literal">store()</tt> methods
  provide an easy way to read and write properties from and to a text
  stream, this class provides a convenient way to implement an application
  configuration file. </p>
<p>  When you create a <tt class="literal">Properties</tt> object, you may specify
  another <tt class="literal">Properties</tt> object that contains default
  values. Keys (property names) and values are associated in a
  <tt class="literal">Properties</tt> object with the <tt class="literal">Hashtable</tt> method
  <tt class="literal">put()</tt>. Values are looked up with
  <tt class="literal">getProperty()</tt>; if this method does not find the key
<a name="INDEX-3001"></a><a name="INDEX-3002"></a><a name="INDEX-3003"></a>
  in the current <tt class="literal">Properties</tt> object, it looks in the default
  <tt class="literal">Properties</tt> object that was passed to the constructor
  method. A default value can also be specified, in case the key is not
  found at all. Use <tt class="literal">setProperty()</tt> to add a property name/value pair
  to the <tt class="literal">Properties</tt> object. This Java 1.2 method is
  preferred over the inherited <tt class="literal">put()</tt> method because
  it enforces the constraint that property names and values be strings. </p>
<p>
<a name="INDEX-3004"></a><tt class="literal">propertyNames()</tt> returns an enumeration of all property
  names (keys) stored in the <tt class="literal">Properties</tt> object and
  (recursively) all property names stored in the default
  <tt class="literal">Properties</tt> object associated with it. <a name="INDEX-3005"></a><a name="INDEX-3006"></a><a name="INDEX-3007"></a><tt class="literal">list()</tt> prints the properties stored in a
  <tt class="literal">Properties</tt> object, which can be useful for debugging. <tt class="literal">store()</tt> writes a <tt class="literal">Properties</tt> object to a
  stream, writing one property per line, in name=value format. As of
  Java 1.2, <tt class="literal">store()</tt> is preferred over the deprecated
  <tt class="literal">save()</tt> method, which writes properties in the same
  way but suppresses any I/O exceptions that may be thrown in the process. The second argument to both <tt class="literal">store()</tt> and
  <tt class="literal">save()</tt> is a comment that is written out at the beginning
  of the property file. Finally, <tt class="literal">load()</tt> reads key/value
  pairs from a stream and stores them in a <tt class="literal">Properties</tt>
  object. It is suitable for reading both properties written with
  <tt class="literal">store()</tt> and hand-edited properties files. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">Properties</b> extends Hashtable {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">Properties</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">Properties</b> (Properties <i class="parameter">defaults</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">getProperty</b> (String <i class="parameter">key</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">getProperty</b> (String <i class="parameter">key</i>, String <i class="parameter">defaultValue</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">list</b> (java.io.PrintStream <i class="parameter">out</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public void <b class="function">list</b> (java.io.PrintWriter <i class="parameter">out</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">load</b> (java.io.InputStream <i class="parameter">inStream</i>) throws java.io.IOException;</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Enumeration <b class="function">propertyNames</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public Object <b class="function">setProperty</b> (String <i class="parameter">key</i>, String <i class="parameter">value</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public void <b class="function">store</b> (java.io.OutputStream <i class="parameter">out</i>, String <i class="parameter">header</i>) throws java.io.IOException;</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Instance Fields</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected Properties <b class="function">defaults</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Deprecated Public Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">#</span></td><td align="left">public void <b class="function">save</b> (java.io.OutputStream <i class="parameter">out</i>, String <i class="parameter">header</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Dictionary-->Hashtable(Cloneable,Map,Serializable)-->Properties</tt>
</p>
<p>
<span class="refsect1">Subclasses: </span><tt class="literal">java.security.Provider</tt>
</p>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">java.awt.Toolkit.getPrintJob(), System.setProperties(), java.rmi.activation.ActivationGroupDesc.ActivationGroupDesc(), java.sql.Driver.{connect(), getPropertyInfo()}, java.sql.DriverManager.getConnection(), Properties.Properties(), javax.ejb.deployment.DeploymentDescriptor.setEnvironmentProperties(), javax.naming.CompoundName.CompoundName(), org.omg.CORBA.ORB.{init(), set_parameters()}</tt>
</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">System.getProperties(), java.rmi.activation.ActivationGroupDesc.getPropertyOverrides(), javax.ejb.EJBContext.getEnvironment(), javax.ejb.deployment.DeploymentDescriptor.getEnvironmentProperties()</tt>
</p>
<p>
<span class="refsect1">Type Of: </span><tt class="literal">Properties.defaults, javax.naming.CompoundName.mySyntax</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>PropertyPermission</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.util</b></font></td><td align="right"><font size="+1"><b><i>serializable permission</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-3008"></a><a name="INDEX-3009"></a><a name="INDEX-3010"></a><a name="INDEX-3011"></a><a name="INDEX-3012"></a>
  This class is a <tt class="literal">java.security.Permission</tt> that
  governs read and write access to system properties with
  <tt class="literal">System.getProperty()</tt> and
  <tt class="literal">System.setProperty()</tt>. A
  <tt class="literal">PropertyPermission</tt> object has a name, or target,
  and a comma-separated list of actions. The name of the permission is
  the name of the property of interest. The action string can be
  "read" for <tt class="literal">getProperty()</tt> access, "write" for
  <tt class="literal">setProperty()</tt> access, or "read,write" for both
  types of access. <tt class="literal">PropertyPermission</tt> extends
  <tt class="literal">java.security.BasicPermission</tt>, so the name of
  the property supports simple wildcards. The name "*" represents any
  property name. If a name ends with ".*", it represents any
  property names that share the specified 
  prefix. For example, the name "java.*"
  represents "java.version", "java.vendor", "java.vendor.url", and all
  other properties that begin with "java". </p>
<p>
<a name="INDEX-3013"></a>
  Granting access to system properties is not overtly dangerous, but
  caution is still necessary. Some properties, such as "user.home",
  reveal details about the host system that malicious code can use to
  mount an attack. Programmers writing system-level code and
  system administrators configuring security policies may need to use
  this class, but applications never need to use it. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public final class <b class="classname">PropertyPermission</b> extends java.security.BasicPermission {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">PropertyPermission</b> (String <i class="parameter">name</i>, String <i class="parameter">actions</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding BasicPermission</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">equals</b> (Object <i class="parameter">obj</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">getActions</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">hashCode</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">implies</b> (java.security.Permission <i class="parameter">p</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public java.security.PermissionCollection <b class="function">newPermissionCollection</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->java.security.Permission(java.security.Guard,Serializable)-->java.security.BasicPermission(Serializable)-->PropertyPermission</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>PropertyResourceBundle</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.util</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-3014"></a>
This class is a concrete subclass of <tt class="literal">ResourceBundle</tt>. It reads a <tt class="literal">Properties</tt> file from a specified
<tt class="literal">InputStream</tt> and implements the
<tt class="literal">ResourceBundle</tt> API for looking up named resources
from the resulting <tt class="literal">Properties</tt> object. A <tt class="literal">Properties</tt> file contains lines of the form:</p>

<blockquote>
<pre class="programlisting">
<em class="replaceable">name</em>=<em class="replaceable">value</em>
</pre>
</blockquote>

<p>Each such line defines a named property with the specified
<tt class="literal">String</tt> value. Although you can instantiate a
<tt class="literal">PropertyResourceBundle</tt> yourself, it is more common
to simply define a <tt class="literal">Properties</tt> file and then allow
<tt class="literal">ResourceBundle.getBundle()</tt> to look up that file and
return the necessary <tt class="literal">PropertyResourceBundle</tt> object. See also <tt class="literal">Properties</tt> and <tt class="literal">ResourceBundle</tt>. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">PropertyResourceBundle</b> extends ResourceBundle {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">PropertyResourceBundle</b> (java.io.InputStream <i class="parameter">stream</i>) throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding ResourceBundle</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Enumeration <b class="function">getKeys</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Object <b class="function">handleGetObject</b> (String <i class="parameter">key</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->ResourceBundle-->PropertyResourceBundle</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>Random</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.util</b></font></td><td align="right"><font size="+1"><b><i>serializable PJ1.1</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-3015"></a><a name="INDEX-3016"></a><a name="INDEX-3017"></a><a name="INDEX-3018"></a><a name="INDEX-3019"></a><a name="INDEX-3020"></a><a name="INDEX-3021"></a>
  This class implements a pseudo-random number generator suitable for
  games and similar applications. If you need a cryptographic-strength
  source of pseudo-randomness, see
  <tt class="literal">java.security.SecureRandom</tt>. <tt class="literal">nextDouble()</tt> and <tt class="literal">nextFloat()</tt> return a value
  between 0.0 and 1.0. <tt class="literal">nextLong()</tt> and the no-argument
  version of <tt class="literal">nextInt()</tt>
  return <tt class="literal">long</tt> and <tt class="literal">int</tt> values distributed across
  the range of those data types. In Java 1.2, if you pass an argument to
  <tt class="literal">nextInt()</tt>, it returns a value between zero
  (inclusive) and the specified number (exclusive). <tt class="literal">nextGaussian()</tt> returns pseudo-random floating-point
<a name="INDEX-3022"></a><a name="INDEX-3023"></a><a name="INDEX-3024"></a>

  values with a Gaussian distribution; the mean of the values
  is 0.0 and the standard deviation is 1.0. <tt class="literal">nextBoolean()</tt> returns a pseudo-random
  <tt class="literal">boolean</tt> value, and <tt class="literal">nextBytes()</tt>
  fills in the specified <tt class="literal">byte</tt> array with
  pseudo-random bytes. You can use the
<a name="INDEX-3025"></a><tt class="literal">setSeed()</tt> method or the optional constructor argument to
  initialize the pseudo-random number generator with some variable seed
  value other than the current time (the default) or with a constant to
  ensure a repeatable sequence of pseudo-randomness. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">Random</b> implements Serializable {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">Random</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">Random</b> (long <i class="parameter">seed</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public boolean <b class="function">nextBoolean</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public void <b class="function">nextBytes</b> (byte[ ] <i class="parameter">bytes</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public double <b class="function">nextDouble</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public float <b class="function">nextFloat</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public double <b class="function">nextGaussian</b> ();</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">nextInt</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public int <b class="function">nextInt</b> (int <i class="parameter">n</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public long <b class="function">nextLong</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setSeed</b> (long <i class="parameter">seed</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected int <b class="function">next</b> (int <i class="parameter">bits</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Random(Serializable)</tt>
</p>
<p>
<span class="refsect1">Subclasses: </span><tt class="literal">java.security.SecureRandom</tt>
</p>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">java.math.BigInteger.BigInteger(), Collections.shuffle()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>ResourceBundle</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.util</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-3026"></a>
This abstract class allows subclasses to define sets of
localized resources that can then be dynamically loaded as
needed by internationalized programs. Such resources may
include user-visible text and images that appear in an
application, as well as more complex things such as <tt class="literal">Menu</tt> objects. <a name="INDEX-3027"></a><a name="INDEX-3028"></a><a name="INDEX-3029"></a><a name="INDEX-3030"></a><a name="INDEX-3031"></a><a name="INDEX-3032"></a>
Use <tt class="literal">getBundle()</tt> to load a <tt class="literal">ResourceBundle</tt>
subclass that is appropriate for the default or 
specified locale. Use <tt class="literal">getObject()</tt>,
<tt class="literal">getString()</tt>, and <tt class="literal">getStringArray()</tt>
to look up a named
resource in a bundle. To define a bundle, provide
implementations of <tt class="literal">handleGetObject()</tt> and
<tt class="literal">getKeys()</tt>. It is often easier, however, to subclass
<tt class="literal">ListResourceBundle</tt> or provide a <tt class="literal">Properties</tt> file
that is used by <tt class="literal">PropertyResourceBundle</tt>. The
name of any localized <tt class="literal">ResourceBundle</tt> class you
define should include the locale language code, and,
optionally, the locale country code. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public abstract class <b class="classname">ResourceBundle</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">ResourceBundle</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Class Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final ResourceBundle <b class="function">getBundle</b> (String <i class="parameter">baseName</i>) throws MissingResourceException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final ResourceBundle <b class="function">getBundle</b> (String <i class="parameter">baseName</i>, Locale <i class="parameter">locale</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static ResourceBundle <b class="function">getBundle</b> (String <i class="parameter">baseName</i>, Locale <i class="parameter">locale</i>, ClassLoader <i class="parameter">loader</i>) throws MissingResourceException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract Enumeration <b class="function">getKeys</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public Locale <b class="function">getLocale</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final Object <b class="function">getObject</b> (String <i class="parameter">key</i>) throws MissingResourceException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final String <b class="function">getString</b> (String <i class="parameter">key</i>) throws MissingResourceException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final String[ ] <b class="function">getStringArray</b> (String <i class="parameter">key</i>) throws MissingResourceException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected abstract Object <b class="function">handleGetObject</b> (String <i class="parameter">key</i>) throws MissingResourceException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected void <b class="function">setParent</b> (ResourceBundle <i class="parameter">parent</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Instance Fields</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected ResourceBundle <b class="function">parent</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Subclasses: </span><tt class="literal">ListResourceBundle, PropertyResourceBundle</tt>
</p>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">java.awt.ComponentOrientation.getOrientation(), java.awt.Window.applyResourceBundle(), ResourceBundle.setParent()</tt>
</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">ResourceBundle.getBundle()</tt>
</p>
<p>
<span class="refsect1">Type Of: </span><tt class="literal">ResourceBundle.parent</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>Set</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.util</b></font></td><td align="right"><font size="+1"><b><i>collection</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-3033"></a><a name="INDEX-3034"></a><a name="INDEX-3035"></a>
  This interface represents an unordered <tt class="literal">Collection</tt>
  of objects that contains no duplicate elements. That is, a
  <tt class="literal">Set</tt> cannot contain two elements
  <tt class="literal">e1</tt> and <tt class="literal">e2</tt> where
  <tt class="literal">e1.equals(e2)</tt>, and it can contain at most one
  <tt class="literal">null</tt> element. The <tt class="literal">Set</tt> interface
  defines the same methods as its superinterface,
  <tt class="literal">Collection</tt>. It constrains
  the <tt class="literal">add()</tt> and <tt class="literal">allAll()</tt>
  methods from adding duplicate elements to the
  <tt class="literal">Set</tt>. </p>
<p>  An interface cannot specify constructors, but it is conventional that
  all implementations of <tt class="literal">Set</tt> provide at least two
  standard constructors: one that takes no arguments and creates an
  empty set, and a copy constructor that accepts a
  <tt class="literal">Collection</tt> object that specifies the initial
  contents of the new <tt class="literal">Set</tt>. This copy constructor
  must ensure that duplicate elements are not added to the
  <tt class="literal">Set</tt>, of course. </p>
<p>  As with <tt class="literal">Collection</tt>, the <tt class="literal">Set</tt>
  methods that modify the contents of the set are optional, and
  implementations that do not support these methods simply throw
  <tt class="literal">java.lang.UnsupportedOperationException</tt>. See also <tt class="literal">Collection</tt>, <tt class="literal">List</tt>,
  <tt class="literal">Map</tt>, <tt class="literal">SortedSet</tt>,
  <tt class="literal">HashSet</tt>, and <tt class="literal">TreeSet</tt>. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public interface <b class="classname">Set</b> extends Collection {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract boolean <b class="function">add</b> (Object <i class="parameter">o</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract boolean <b class="function">addAll</b> (Collection <i class="parameter">c</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">clear</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract boolean <b class="function">contains</b> (Object <i class="parameter">o</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract boolean <b class="function">containsAll</b> (Collection <i class="parameter">c</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract boolean <b class="function">equals</b> (Object <i class="parameter">o</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract int <b class="function">hashCode</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract boolean <b class="function">isEmpty</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract Iterator <b class="function">iterator</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract boolean <b class="function">remove</b> (Object <i class="parameter">o</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract boolean <b class="function">removeAll</b> (Collection <i class="parameter">c</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract boolean <b class="function">retainAll</b> (Collection <i class="parameter">c</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract int <b class="function">size</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract Object[ ] <b class="function">toArray</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract Object[ ] <b class="function">toArray</b> (Object[ ] <i class="parameter">a</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">(Set(Collection))</tt>
</p>
<p>
<span class="refsect1">Implementations: </span><tt class="literal">AbstractSet, HashSet, SortedSet</tt>
</p>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">java.text.AttributedCharacterIterator.{getRunLimit(), getRunStart()}, Collections.{synchronizedSet(), unmodifiableSet()}</tt>
</p>
<p>
<span class="refsect1">Returned By: </span>Too many methods to list. </p>
<p>
<span class="refsect1">Type Of: </span><tt class="literal">Collections.EMPTY_SET</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>SimpleTimeZone</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.util</b></font></td><td align="right"><font size="+1"><b><i>cloneable serializable PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-3036"></a><a name="INDEX-3037"></a><a name="INDEX-3038"></a><a name="INDEX-3039"></a>

This concrete subclass of <tt class="literal">TimeZone</tt> is a simple
implementation of that abstract class that is suitable for
use in locales that use the Gregorian calendar. Programs do
not normally need to instantiate this class directly;
instead, they use one of the static factory methods of
<tt class="literal">TimeZone</tt> to obtain a suitable <tt class="literal">TimeZone</tt>
subclass. The only reason to instantiate this class directly is if you need
to support a time zone with non-standard-daylight-savings-time rules. In that case, you can call
<tt class="literal">setStartRule()</tt> and <tt class="literal">setEndRule()</tt> to specify
the starting and ending dates of daylight-savings time for
the time zone. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">SimpleTimeZone</b> extends TimeZone {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">SimpleTimeZone</b> (int <i class="parameter">rawOffset</i>, String <i class="parameter">ID</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">SimpleTimeZone</b> (int <i class="parameter">rawOffset</i>, String <i class="parameter">ID</i>, int <i class="parameter">startMonth</i>, int <i class="parameter">startDay</i>, int <i class="parameter">startDayOfWeek</i>, int <i class="parameter">startTime</i>, int <i class="parameter">endMonth</i>, int <i class="parameter">endDay</i>, int <i class="parameter">endDayOfWeek</i>, int <i class="parameter">endTime</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">SimpleTimeZone</b> (int <i class="parameter">rawOffset</i>, String <i class="parameter">ID</i>, int <i class="parameter">startMonth</i>, int <i class="parameter">startDay</i>, int <i class="parameter">startDayOfWeek</i>, int <i class="parameter">startTime</i>, int <i class="parameter">endMonth</i>, int <i class="parameter">endDay</i>, int <i class="parameter">endDayOfWeek</i>, int <i class="parameter">endTime</i>, int <i class="parameter">dstSavings</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public int <b class="function">getDSTSavings</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public void <b class="function">setDSTSavings</b> (int <i class="parameter">millisSavedDuringDST</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public void <b class="function">setEndRule</b> (int <i class="parameter">month</i>, int <i class="parameter">dayOfMonth</i>, int <i class="parameter">time</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setEndRule</b> (int <i class="parameter">month</i>, int <i class="parameter">dayOfWeekInMonth</i>, int <i class="parameter">dayOfWeek</i>, int <i class="parameter">time</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public void <b class="function">setEndRule</b> (int <i class="parameter">month</i>, int <i class="parameter">dayOfMonth</i>, int <i class="parameter">dayOfWeek</i>, int <i class="parameter">time</i>, boolean <i class="parameter">after</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public void <b class="function">setStartRule</b> (int <i class="parameter">month</i>, int <i class="parameter">dayOfMonth</i>, int <i class="parameter">time</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setStartRule</b> (int <i class="parameter">month</i>, int <i class="parameter">dayOfWeekInMonth</i>, int <i class="parameter">dayOfWeek</i>, int <i class="parameter">time</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public void <b class="function">setStartRule</b> (int <i class="parameter">month</i>, int <i class="parameter">dayOfMonth</i>, int <i class="parameter">dayOfWeek</i>, int <i class="parameter">time</i>, boolean <i class="parameter">after</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setStartYear</b> (int <i class="parameter">year</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding TimeZone</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Object <b class="function">clone</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getOffset</b> (int <i class="parameter">era</i>, int <i class="parameter">year</i>, int <i class="parameter">month</i>, int <i class="parameter">day</i>, int <i class="parameter">dayOfWeek</i>, int <i class="parameter">millis</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getRawOffset</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public boolean <b class="function">hasSameRules</b> (TimeZone <i class="parameter">other</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">inDaylightTime</b> (java.util.Date <i class="parameter">date</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setRawOffset</b> (int <i class="parameter">offsetMillis</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">useDaylightTime</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Object</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">equals</b> (Object <i class="parameter">obj</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">hashCode</b> ();</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">toString</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->TimeZone(Cloneable,Serializable)-->SimpleTimeZone</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>SortedMap</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.util</b></font></td><td align="right"><font size="+1"><b><i>collection</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-3040"></a><a name="INDEX-3041"></a>

  This interface represents a <tt class="literal">Map</tt> object that keeps
  its set of key objects in sorted order. As with
  <tt class="literal">Map</tt>, it is conventional that all implementations of
  this interface define a no-argument constructor to create an empty
  map and a copy constructor that accepts a <tt class="literal">Map</tt>
  object that specifies the initial contents of the
  <tt class="literal">SortedMap</tt>. Furthermore, when creating a
  <tt class="literal">SortedMap</tt>, there should be a way to specify a
  <tt class="literal">Comparator</tt> object to sort the key
  objects of the map. If no <tt class="literal">Comparator</tt> is specified,
  all key objects must implement the
  <tt class="literal">java.lang.Comparable</tt> interface so they can be
  sorted in their natural order. See also <tt class="literal">Map</tt>, <tt class="literal">TreeMap</tt>, and
  <tt class="literal">SortedSet</tt>. </p>
<p>
<a name="INDEX-3042"></a><a name="INDEX-3043"></a><a name="INDEX-3044"></a><a name="INDEX-3045"></a><a name="INDEX-3046"></a><a name="INDEX-3047"></a><a name="INDEX-3048"></a>
  The inherited <tt class="literal">keySet()</tt>,
  <tt class="literal">values()</tt>, and <tt class="literal">entrySet()</tt> methods
  return collections that can be iterated in the sorted order. <tt class="literal">firstKey()</tt> and <tt class="literal">lastKey()</tt> return
  the lowest and highest key values in the <tt class="literal">SortedMap</tt>. <tt class="literal">subMap()</tt> returns a <tt class="literal">SortedMap</tt>
  that contains only mappings for keys from (and including) the first
  specified key up to (but not including) the second specified key. <tt class="literal">headMap()</tt> returns a <tt class="literal">SortedMap</tt>
  that contains mappings whose keys are less than (but not equal to) the
  specified key. <tt class="literal">tailMap()</tt> returns a
  <tt class="literal">SortedMap</tt> that contains mappings whose keys are
  greater than or equal to the specified key. <tt class="literal">subMap()</tt>, <tt class="literal">headMap()</tt>, and
  <tt class="literal">tailMap()</tt> return <tt class="literal">SortedMap</tt>
  objects that are simply views of the original
  <tt class="literal">SortedMap</tt>; any changes in the original map are
  reflected in the returned map and vice versa. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public interface <b class="classname">SortedMap</b> extends Map {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract Comparator <b class="function">comparator</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract Object <b class="function">firstKey</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract SortedMap <b class="function">headMap</b> (Object <i class="parameter">toKey</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract Object <b class="function">lastKey</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract SortedMap <b class="function">subMap</b> (Object <i class="parameter">fromKey</i>, Object <i class="parameter">toKey</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract SortedMap <b class="function">tailMap</b> (Object <i class="parameter">fromKey</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">(SortedMap(Map))</tt>
</p>
<p>
<span class="refsect1">Implementations: </span><tt class="literal">TreeMap</tt>
</p>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">Collections.{synchronizedSortedMap(), unmodifiableSortedMap()}, TreeMap.TreeMap()</tt>
</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">Collections.{synchronizedSortedMap(), unmodifiableSortedMap()}, SortedMap.{headMap(), subMap(), tailMap()}, TreeMap.{headMap(), subMap(), tailMap()}</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>SortedSet</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.util</b></font></td><td align="right"><font size="+1"><b><i>collection</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-3049"></a><a name="INDEX-3050"></a><a name="INDEX-3051"></a>
  This interface is a <tt class="literal">Set</tt> that sorts its elements
  and guarantees that its <tt class="literal">iterator()</tt> method returns
  an <tt class="literal">Iterator</tt> that enumerates the elements of the set
  in sorted order. As with the <tt class="literal">Set</tt> interface, it is
  conventional for all implementations of <tt class="literal">SortedSet</tt>
  to provide a no-argument constructor that creates an empty set and a
  copy constructor that expects a <tt class="literal">Collection</tt> object
  specifying the initial (unsorted) contents of the set. Furthermore, when creating a <tt class="literal">SortedSet</tt>, there
  should be a way to specify a <tt class="literal">Comparator</tt> object
  that compares and sorts the elements of the set. If no
  <tt class="literal">Comparator</tt> is specified, the elements of the
  set must all implement <tt class="literal">java.lang.Comparable</tt> so
  they can be sorted in their natural order. See also <tt class="literal">Set</tt>, <tt class="literal">TreeSet</tt>, and
  <tt class="literal">SortedMap</tt>. </p>
<p>
<a name="INDEX-3052"></a><a name="INDEX-3053"></a><a name="INDEX-3054"></a><a name="INDEX-3055"></a><a name="INDEX-3056"></a><tt class="literal">SortedSet</tt> defines a few methods in addition to
  those it inherits from the <tt class="literal">Set</tt> interface. <tt class="literal">first()</tt> and <tt class="literal">last()</tt> return the
  lowest and highest objects in the set. <tt class="literal">headSet()</tt>
  returns all elements from the beginning of the set up to (but not
  including) the specified element. <tt class="literal">tailSet()</tt> returns
  all elements between (and including) the specified element and the end
  of the set. <tt class="literal">subSet()</tt> returns all elements of the
  set from (and including) the first specified element up to (but
  excluding) the second specified element. Note that all three methods return a <tt class="literal">SortedSet</tt> that is
  implemented as a view onto the original <tt class="literal">SortedSet</tt>. Changes in the original set are visible through the returned set and
  vice versa. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public interface <b class="classname">SortedSet</b> extends Set {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract Comparator <b class="function">comparator</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract Object <b class="function">first</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract SortedSet <b class="function">headSet</b> (Object <i class="parameter">toElement</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract Object <b class="function">last</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract SortedSet <b class="function">subSet</b> (Object <i class="parameter">fromElement</i>, Object <i class="parameter">toElement</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract SortedSet <b class="function">tailSet</b> (Object <i class="parameter">fromElement</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">(SortedSet(Set(Collection)))</tt>
</p>
<p>
<span class="refsect1">Implementations: </span><tt class="literal">TreeSet</tt>
</p>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">Collections.{synchronizedSortedSet(), unmodifiableSortedSet()}, TreeSet.TreeSet()</tt>
</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">Collections.{synchronizedSortedSet(), unmodifiableSortedSet()}, SortedSet.{headSet(), subSet(), tailSet()}, TreeSet.{headSet(), subSet(), tailSet()}</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>Stack</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.util</b></font></td><td align="right"><font size="+1"><b><i>cloneable serializable collection PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-3057"></a><a name="INDEX-3058"></a><a name="INDEX-3059"></a><a name="INDEX-3060"></a><a name="INDEX-3061"></a><a name="INDEX-3062"></a>

This class implements a last-in-first-out (LIFO) stack of objects. <tt class="literal">push()</tt> puts an object on the top of the stack. <tt class="literal">pop()</tt> removes and returns the top object from the
stack. <tt class="literal">peek()</tt> returns the top object without
removing it. In Java 1.2, you can instead use a <tt class="literal">LinkedList</tt>
as a stack. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">Stack</b> extends Vector {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">Stack</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">empty</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Object <b class="function">peek</b> ();</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Object <b class="function">pop</b> ();</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Object <b class="function">push</b> (Object <i class="parameter">item</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">search</b> (Object <i class="parameter">o</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->AbstractCollection(Collection)-->AbstractList(java.util.List(Collection))-->Vector(Cloneable,java.util.List(Collection),Serializable)-->Stack</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>StringTokenizer</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.util</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>



<p>
<a name="INDEX-3063"></a>

When a <tt class="literal">StringTokenizer</tt> is instantiated with a <tt class="literal">String</tt>,
it breaks the string up into tokens separated by any of the
characters in the specified string of delimiters. (For
example, words separated by space and tab characters are tokens.)
<a name="INDEX-3064"></a><a name="INDEX-3065"></a>
The <tt class="literal">hasMoreTokens()</tt> and <tt class="literal">nextToken()</tt> methods
obtain the tokens in order. <a name="INDEX-3066"></a><tt class="literal">countTokens()</tt> returns the number of tokens in the
string. <tt class="literal">StringTokenizer</tt> implements the
<tt class="literal">Enumeration</tt> interface, so you may also access the
tokens with the familiar <tt class="literal">hasMoreElements()</tt> and
<tt class="literal">nextElement()</tt> methods. <a name="INDEX-3067"></a><a name="INDEX-3068"></a>
When you create a <tt class="literal">StringTokenizer</tt>, you can specify a
string of delimiter characters to use for the entire string,
or you can rely on the default whitespace delimiters. You
can also specify whether the delimiters themselves should be
returned as tokens. Finally, you can optionally specify a new string
of delimiter characters when you call <tt class="literal">nextToken()</tt>. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">StringTokenizer</b> implements Enumeration {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">StringTokenizer</b> (String <i class="parameter">str</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">StringTokenizer</b> (String <i class="parameter">str</i>, String <i class="parameter">delim</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">StringTokenizer</b> (String <i class="parameter">str</i>, String <i class="parameter">delim</i>, boolean <i class="parameter">returnDelims</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">countTokens</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">hasMoreTokens</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">nextToken</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">nextToken</b> (String <i class="parameter">delim</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Methods Implementing Enumeration</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">hasMoreElements</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Object <b class="function">nextElement</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->StringTokenizer(Enumeration)</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>Timer</b></font></td><td align="right"><font size="+1"><b>Java 1.3 Beta</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.util</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-3069"></a>
  This class implements a timer: its methods allow you to schedule one
  or more runnable <tt class="literal">TimerTask</tt> objects to be executed
  (once or repetitively) by a background thread at a specified time in
  the future. You can create a timer with the <tt class="literal">Timer()</tt>
  constructor. The no-argument version of this constructor creates a
  regular non-daemon background thread, which means that the Java VM
  will not terminate while the timer thread is running. Pass
  <tt class="literal">true</tt> to the constructor if you want the background
  thread to be a daemon thread. </p>
<p>
<a name="INDEX-3070"></a><a name="INDEX-3071"></a>
  Once you have created a <tt class="literal">Timer</tt>, you can schedule
  <tt class="literal">TimerTask</tt> objects to be run in the future with the
  various <tt class="literal">schedule()</tt> and
  <tt class="literal">scheduleAtFixedRate()</tt> methods. To schedule a task
  for a single execution, use one of the two-argument 
  <tt class="literal">schedule()</tt> methods 
  and specify the desired execution time
  either as a number of milliseconds in the future or as an absolute
  <tt class="literal">Date</tt>. If the number of milliseconds is 
  <tt class="literal">0</tt>, or if
  the <tt class="literal">Date</tt> object represents a time already
  passed, the task is scheduled for immediate execution. </p>
<p>  To schedule a repeating task, use one of the three-argument versions
  of <tt class="literal">schedule()</tt> or
  <tt class="literal">scheduleAtFixedRate()</tt>. These methods are passed an
  argument that specifies the time (either as a number of milliseconds
  or as a <tt class="literal">Date</tt> object) of the first execution of the
  task and another argument, <em class="replaceable">period</em>, that
  specifies the number of milliseconds between repeated executions of
  the task. The <tt class="literal">schedule()</tt> methods schedule the task
  for <em class="emphasis">fixed-interval</em> execution. That is, each
  execution is scheduled for <em class="replaceable">period</em>
  milliseconds after the previous execution <em class="emphasis">ends</em>. Use
  <tt class="literal">schedule()</tt> for tasks such as animation, where it is
  important to have a relatively constant interval between executions. The <tt class="literal">scheduleAtFixedRate()</tt> methods, on the other
  hand, schedule tasks for <em class="emphasis">fixed-rate</em> execution. That is, each repetition of the task is scheduled for
  <em class="replaceable">period</em> milliseconds after the previous
  execution <em class="emphasis">begins</em>. Use <tt class="literal">scheduleAtFixedRate()</tt> for
  tasks, such as updating a clock display, that must occur at specific
  absolute times rather than at fixed intervals. </p>
<p>  A single <tt class="literal">Timer</tt> object can comfortably schedule many
  <tt class="literal">TimerTask</tt> objects. Note, however, that all
  tasks scheduled by a single <tt class="literal">Timer</tt> share a single
  thread. If you are scheduling many rapidly repeating tasks, or if some tasks
  take a long time to execute, other tasks may have their scheduled
  executions delayed. </p>
<p>
<a name="INDEX-3072"></a>
  When you are done with a <tt class="literal">Timer</tt>, call
  <tt class="literal">cancel()</tt> to stop its associated thread from
  running. This is particularly important when you are using a timer whose
  associated thread is not a daemon thread, because otherwise the timer
  thread can prevent the Java VM from exiting. To cancel the
  execution of a particular task, use the <tt class="literal">cancel()</tt>
  method of <tt class="literal">TimerTask</tt>. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">Timer</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">Timer</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">Timer</b> (boolean <i class="parameter">isDaemon</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">cancel</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">schedule</b> (TimerTask <i class="parameter">task</i>, long <i class="parameter">delay</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">schedule</b> (TimerTask <i class="parameter">task</i>, java.util.Date <i class="parameter">time</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">schedule</b> (TimerTask <i class="parameter">task</i>, java.util.Date <i class="parameter">firstTime</i>, long <i class="parameter">period</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">schedule</b> (TimerTask <i class="parameter">task</i>, long <i class="parameter">delay</i>, long <i class="parameter">period</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">scheduleAtFixedRate</b> (TimerTask <i class="parameter">task</i>, long <i class="parameter">delay</i>, long <i class="parameter">period</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">scheduleAtFixedRate</b> (TimerTask <i class="parameter">task</i>, java.util.Date <i class="parameter">firstTime</i>, long <i class="parameter">period</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
</div>

<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>TimerTask</b></font></td><td align="right"><font size="+1"><b>Java 1.3 Beta</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.util</b></font></td><td align="right"><font size="+1"><b><i>runnable</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-3073"></a><a name="INDEX-3074"></a>
This abstract <tt class="literal">Runnable</tt> class represents a task
  that is scheduled with a <tt class="literal">Timer</tt> object for
  one-time or repeated execution in the future. You can define a task
  by subclassing <tt class="literal">TimerTask</tt> and implementing the
  abstract <tt class="literal">run()</tt> method. Schedule the task for
  future execution by passing an instance of your subclass to one of
  the <tt class="literal">schedule()</tt> or
  <tt class="literal">scheduleAtFixedRate()</tt> methods of
  <tt class="literal">Timer</tt>. The <tt class="literal">Timer</tt> object will
  then invoke the <tt class="literal">run()</tt> method at the scheduled
  time or times. </p>
<p>
<a name="INDEX-3075"></a><a name="INDEX-3076"></a>
  Call <tt class="literal">cancel()</tt> to cancel the one-time or repeated
  execution of a <tt class="literal">TimerTask()</tt>. This method returns
  <tt class="literal">true</tt> if a pending execution was actually
  canceled. It returns <tt class="literal">false</tt> if the task has
  already been canceled, was never scheduled, or was scheduled for
  one-time execution and has already been
  executed. <tt class="literal">scheduledExecutionTime()</tt> returns the
  time in milliseconds at which the most recent execution of the
  <tt class="literal">TimerTask</tt> was scheduled to occur. When the host
  system is heavily loaded, the <tt class="literal">run()</tt> method may
  not be invoked exactly when scheduled. Some tasks may choose to do
  nothing if they are not invoked on time. The
  <tt class="literal">run()</tt> method can compare the return values of
  <tt class="literal">scheduledExecutionTime()</tt> and
  <tt class="literal">System.currentTimeMillis()</tt> to determine whether
  the current invocation is sufficiently timely. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public abstract class <b class="classname">TimerTask</b> implements Runnable {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">TimerTask</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">cancel</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public long <b class="function">scheduledExecutionTime</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Methods Implementing Runnable</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">run</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->TimerTask(Runnable)</tt>
</p>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">java.util.Timer.{schedule(), scheduleAtFixedRate()}</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>TimeZone</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.util</b></font></td><td align="right"><font size="+1"><b><i>cloneable serializable PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-3077"></a>
The <tt class="literal">TimeZone</tt> class represents a time zone; it is
used with the <tt class="literal">Calendar</tt> and <tt class="literal">DateFormat</tt>
classes. <a name="INDEX-3078"></a><a name="INDEX-3079"></a>

As an abstract class, <tt class="literal">TimeZone</tt> cannot be directly
instantiated. Instead, you should call the static
<tt class="literal">getDefault()</tt> method to obtain a <tt class="literal">TimeZone</tt>
object that represents the time zone inherited from the host
operating system. Or you can call the static <tt class="literal">getTimeZone()</tt>
method with the name of the desired zone. You
can obtain a list of the supported time-zone names by calling
the static <tt class="literal">getAvailableIDs()</tt> method. <a name="INDEX-3080"></a>
</p>
<p>
<a name="INDEX-3081"></a><a name="INDEX-3082"></a><a name="INDEX-3083"></a>
Once you have a <tt class="literal">TimeZone</tt> object, you can call
<tt class="literal">inDaylightTime()</tt> to determine whether, for a given
<tt class="literal">Date</tt>, daylight-savings time is in effect for that
time zone. Call <tt class="literal">getID()</tt> to obtain the name of the
time zone. Call <tt class="literal">getOffset()</tt> for a given date to
determine the number of milliseconds to add to GMT to
convert to the time zone. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public abstract class <b class="classname">TimeZone</b> implements Cloneable, Serializable {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">TimeZone</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constants</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public static final int <b class="function">LONG</b> ;</td><td align="right"><i> =1</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public static final int <b class="function">SHORT</b> ;</td><td align="right"><i> =0</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Class Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static String[ ] <b class="function">getAvailableIDs</b> ();</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static String[ ] <b class="function">getAvailableIDs</b> (int <i class="parameter">rawOffset</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static TimeZone <b class="function">getDefault</b> ();</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static TimeZone <b class="function">getTimeZone</b> (String <i class="parameter">ID</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static void <b class="function">setDefault</b> (TimeZone <i class="parameter">zone</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Property Accessor Methods (by property name)</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public final String <b class="function">getDisplayName</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public final String <b class="function">getDisplayName</b> (Locale <i class="parameter">locale</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public final String <b class="function">getDisplayName</b> (boolean <i class="parameter">daylight</i>, int <i class="parameter">style</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public String <b class="function">getDisplayName</b> (boolean <i class="parameter">daylight</i>, int <i class="parameter">style</i>, Locale <i class="parameter">locale</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">getID</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setID</b> (String <i class="parameter">ID</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract int <b class="function">getRawOffset</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">setRawOffset</b> (int <i class="parameter">offsetMillis</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract int <b class="function">getOffset</b> (int <i class="parameter">era</i>, int <i class="parameter">year</i>, int <i class="parameter">month</i>, int <i class="parameter">day</i>, int <i class="parameter">dayOfWeek</i>, int <i class="parameter">milliseconds</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public boolean <b class="function">hasSameRules</b> (TimeZone <i class="parameter">other</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract boolean <b class="function">inDaylightTime</b> (java.util.Date <i class="parameter">date</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract boolean <b class="function">useDaylightTime</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Object</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Object <b class="function">clone</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->TimeZone(Cloneable,Serializable)</tt>
</p>
<p>
<span class="refsect1">Subclasses: </span><tt class="literal">SimpleTimeZone</tt>
</p>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">java.text.DateFormat.setTimeZone(), Calendar.{Calendar(), getInstance(), setTimeZone()}, GregorianCalendar.GregorianCalendar(), SimpleTimeZone.hasSameRules(), TimeZone.{hasSameRules(), setDefault()}</tt>
</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">java.text.DateFormat.getTimeZone(), Calendar.getTimeZone(), TimeZone.{getDefault(), getTimeZone()}</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>TooManyListenersException</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.util</b></font></td><td align="right"><font size="+1"><b><i>serializable checked PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-3084"></a><a name="INDEX-3085"></a>
Signals that an AWT component, JavaBeans component, or Swing component can
have only one <tt class="literal">EventListener</tt> object
registered for some specific type of event. That is, it
signals that a particular event is a unicast event rather
than a multicast event. This exception type serves a formal purpose in the Java 
event model; its presence in the <tt class="literal">throws</tt>
clause of an <tt class="literal">EventListener</tt> registration method (even
if the method never actually throws the exception) signals
that an event is a unicast event. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">TooManyListenersException</b> extends Exception {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">TooManyListenersException</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">TooManyListenersException</b> (String <i class="parameter">s</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Exception-->TooManyListenersException</tt>
</p>
<p>
<span class="refsect1">Thrown By: </span><tt class="literal">java.awt.dnd.DragGestureRecognizer.addDragGestureListener(), java.awt.dnd.DragSourceContext.addDragSourceListener(), java.awt.dnd.DropTarget.addDropTargetListener(), java.beans.beancontext.BeanContextServices.getService(), java.beans.beancontext.BeanContextServicesSupport.getService()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>TreeMap</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.util</b></font></td><td align="right"><font size="+1"><b><i>cloneable serializable collection</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-3086"></a><a name="INDEX-3087"></a><a name="INDEX-3088"></a><a name="INDEX-3089"></a><a name="INDEX-3090"></a><a name="INDEX-3091"></a>
  This class implements the <tt class="literal">SortedMap</tt> interface using
  an internal Red-Black tree data structure and guarantees that the
  keys and values of the mapping can be enumerated in ascending order of
  keys. <tt class="literal">TreeMap</tt> supports all optional
  <tt class="literal">Map</tt> methods. The objects used as keys in a
  <tt class="literal">TreeMap</tt> must all be mutually
  <tt class="literal">Comparable</tt>, or an appropriate
  <tt class="literal">Comparator</tt> must be provided when the
  <tt class="literal">TreeMap</tt> is created. Because
  <tt class="literal">TreeMap</tt> is based on a binary tree data structure,
  the <tt class="literal">get()</tt>,
  <tt class="literal">put()</tt>, <tt class="literal">remove()</tt>, and
  <tt class="literal">containsKey()</tt> methods operate in relatively
  efficient logarithmic time. If you do not need the sorting capability
  of <tt class="literal">TreeMap</tt>, however, 
  use <tt class="literal">HashMap</tt> instead, as it 
  is even more efficient. See <tt class="literal">Map</tt> and <tt class="literal">SortedMap</tt> for
  details on the methods of <tt class="literal">TreeMap</tt>. See also the
  related <tt class="literal">TreeSet</tt> class. </p>
<p>
<a name="INDEX-3092"></a>
  In order for a <tt class="literal">TreeMap</tt> to work correctly, the
  comparison method from the <tt class="literal">Comparable</tt> or
  <tt class="literal">Comparator</tt> interface must be consistent with the
  <tt class="literal">equals()</tt> method. That is, the
  <tt class="literal">equals()</tt> method must compare two objects as equal
  if and only if the comparison method also indicates those two
  objects are equal. </p>
<p>  The methods of <tt class="literal">TreeMap</tt> are not
  <tt class="literal">synchronized</tt>. If you are working in a
  multithreaded environment, you must explicitly synchronize all code
  that modifies the <tt class="literal">TreeMap</tt>, or obtain a
  synchronized wrapper with
  <tt class="literal">Collections.synchronizedMap()</tt>. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">TreeMap</b> extends AbstractMap implements Cloneable, Serializable, SortedMap {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">TreeMap</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">TreeMap</b> (Map <i class="parameter">m</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">TreeMap</b> (SortedMap <i class="parameter">m</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">TreeMap</b> (Comparator <i class="parameter">c</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Methods Implementing Map</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">clear</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">containsKey</b> (Object <i class="parameter">key</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">containsValue</b> (Object <i class="parameter">value</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Set <b class="function">entrySet</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Object <b class="function">get</b> (Object <i class="parameter">key</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Set <b class="function">keySet</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Object <b class="function">put</b> (Object <i class="parameter">key</i>, Object <i class="parameter">value</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">putAll</b> (Map <i class="parameter">map</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Object <b class="function">remove</b> (Object <i class="parameter">key</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">size</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Collection <b class="function">values</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Methods Implementing SortedMap</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Comparator <b class="function">comparator</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Object <b class="function">firstKey</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public SortedMap <b class="function">headMap</b> (Object <i class="parameter">toKey</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Object <b class="function">lastKey</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public SortedMap <b class="function">subMap</b> (Object <i class="parameter">fromKey</i>, Object <i class="parameter">toKey</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public SortedMap <b class="function">tailMap</b> (Object <i class="parameter">fromKey</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Object</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Object <b class="function">clone</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->AbstractMap(Map)-->TreeMap(Cloneable,Serializable,SortedMap(Map))</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>TreeSet</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.util</b></font></td><td align="right"><font size="+1"><b><i>cloneable serializable collection</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-3093"></a><a name="INDEX-3094"></a><a name="INDEX-3095"></a><a name="INDEX-3096"></a>
  This class implements <tt class="literal">SortedSet</tt>, provides support
  for all optional methods, and guarantees that the elements of the set
  can be enumerated in ascending order. In order to be sorted, the
  elements of the set must all be mutually <tt class="literal">Comparable</tt>
  objects, or they must all be compatible with a
  <tt class="literal">Comparator</tt> object that is specified when the
  <tt class="literal">TreeSet</tt> is created. <tt class="literal">TreeSet</tt> is
  implemented on top of a <tt class="literal">TreeMap</tt>, so its
  <tt class="literal">add()</tt>, <tt class="literal">remove()</tt>, and
  <tt class="literal">contains()</tt> methods all operate in relatively
  efficient logarithmic time. If you do not need the sorting capability
  of <tt class="literal">TreeSet</tt>, however, 
  use <tt class="literal">HashSet</tt> instead, as it
  is significantly more efficient. See <tt class="literal">Set</tt>, <tt class="literal">SortedSet</tt>, and
  <tt class="literal">Collection</tt> for details on the methods of
  <tt class="literal">TreeSet</tt>. </p>
<p>
<a name="INDEX-3097"></a>
  In order for a
  <tt class="literal">TreeSet</tt> to operate correctly, the 
  <tt class="literal">Comparable</tt> or <tt class="literal">Comparator</tt>
  comparison method must be consistent with the
  <tt class="literal">equals()</tt> method. That is, the
  <tt class="literal">equals()</tt> method must compare two objects as equal
  if and only if the comparison method also indicates those two
  objects are equal. </p>
<p>
<a name="INDEX-3098"></a>
  The methods of <tt class="literal">TreeSet</tt> are not
  <tt class="literal">synchronized</tt>. If you are working in a
  multithreaded environment, you must explicitly synchronize code that
  modifies the contents of the set,x or obtain a synchronized
  wrapper with <tt class="literal">Collections.synchronizedSet()</tt>. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">TreeSet</b> extends AbstractSet implements Cloneable, Serializable, SortedSet {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">TreeSet</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">TreeSet</b> (SortedSet <i class="parameter">s</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">TreeSet</b> (Comparator <i class="parameter">c</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">TreeSet</b> (Collection <i class="parameter">c</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Methods Implementing Set</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">add</b> (Object <i class="parameter">o</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">addAll</b> (Collection <i class="parameter">c</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">clear</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">contains</b> (Object <i class="parameter">o</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">isEmpty</b> ();</td><td align="right"><i> default:true</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Iterator <b class="function">iterator</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">remove</b> (Object <i class="parameter">o</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">size</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Methods Implementing SortedSet</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Comparator <b class="function">comparator</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Object <b class="function">first</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public SortedSet <b class="function">headSet</b> (Object <i class="parameter">toElement</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Object <b class="function">last</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public SortedSet <b class="function">subSet</b> (Object <i class="parameter">fromElement</i>, Object <i class="parameter">toElement</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public SortedSet <b class="function">tailSet</b> (Object <i class="parameter">fromElement</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Object</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Object <b class="function">clone</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->AbstractCollection(Collection)-->AbstractSet(Set(Collection))-->TreeSet(Cloneable,Serializable,SortedSet(Set(Collection)))</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>Vector</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.util</b></font></td><td align="right"><font size="+1"><b><i>cloneable serializable collection PJ1.1</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-3099"></a><a name="INDEX-3100"></a><a name="INDEX-3101"></a><a name="INDEX-3102"></a><a name="INDEX-3103"></a><a name="INDEX-3104"></a><a name="INDEX-3105"></a><a name="INDEX-3106"></a>
 
  This class implements an ordered collection--essentially an 
  array--of
  objects that can grow or shrink as necessary. <tt class="literal">Vector</tt> is useful when you need to keep track of a
  number of objects, but do not know in advance how many there will be. Use <tt class="literal">setElementAt()</tt> to set the object at a given
  index of a <tt class="literal">Vector</tt>. Use
  <tt class="literal">elementAt()</tt> to retrieve the object stored at a
  specified index. Note that you typically must cast the
  <tt class="literal">Object</tt> returned by <tt class="literal">elementAt()</tt>
  to the desired type. Call <tt class="literal">add()</tt> to append an
  object to the end of the <tt class="literal">Vector</tt> or to insert an
  object at any specified position. Use
  <tt class="literal">removeElementAt()</tt> to delete the element at a
  specified index or <tt class="literal">removeElement()</tt> to remove a
  specified object from the vector. <tt class="literal">size()</tt> returns the number of objects currently in
  the <tt class="literal">Vector</tt>. <tt class="literal">elements()</tt> returns
  an <tt class="literal">Enumeration</tt> that allows you to iterate through
  those objects. <tt class="literal">capacity()</tt> is not the same as
  <tt class="literal">size()</tt>; it returns the maximum number of objects a
  <tt class="literal">Vector</tt> can hold before its internal storage must be
  resized. <tt class="literal">Vector</tt> automatically resizes its internal
  storage for you, but if you know in advance how many objects a
  <tt class="literal">Vector</tt> will contain, you can increase its efficiency by
  pre-allocating this many elements with
  <tt class="literal">ensureCapacity()</tt>. 
<a name="INDEX-3107"></a>
</p>
<p>
<a name="INDEX-3108"></a><a name="INDEX-3109"></a><tt class="literal">Vector</tt> has been part of the
  <tt class="literal">java.util</tt> package since Java 1.0, but in Java 1.2
  it has been enhanced to implement the <tt class="literal">List</tt>
  interface. <tt class="literal">List</tt> defines new names for many of the
  methods already present in <tt class="literal">Vector</tt>; see
  <tt class="literal">List</tt> for details on those methods. <tt class="literal">Vector</tt> is quite similar to the
  <tt class="literal">ArrayList</tt> class, except that the methods of
  <tt class="literal">Vector</tt> are <tt class="literal">synchronized</tt>, which
  makes them thread-safe but increases the overhead of calling them. If you need thread safety or need to be compatible with Java 1.0 or
  Java 1.1, use <tt class="literal">Vector</tt>; otherwise,
  use <tt class="literal">ArrayList</tt>. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">Vector</b> extends AbstractList, implements Cloneable, java.util.List, Serializable {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">Vector</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public <b class="function">Vector</b> (Collection <i class="parameter">c</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">Vector</b> (int <i class="parameter">initialCapacity</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">Vector</b> (int <i class="parameter">initialCapacity</i>, int <i class="parameter">capacityIncrement</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">addElement</b> (Object <i class="parameter">obj</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">capacity</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">copyInto</b> (Object[ ] <i class="parameter">anArray</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Object <b class="function">elementAt</b> (int <i class="parameter">index</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Enumeration <b class="function">elements</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">ensureCapacity</b> (int <i class="parameter">minCapacity</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Object <b class="function">firstElement</b> ();</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">indexOf</b> (Object <i class="parameter">elem</i>, int <i class="parameter">index</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">insertElementAt</b> (Object <i class="parameter">obj</i>, int <i class="parameter">index</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Object <b class="function">lastElement</b> ();</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">lastIndexOf</b> (Object <i class="parameter">elem</i>, int <i class="parameter">index</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">removeAllElements</b> ();</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">removeElement</b> (Object <i class="parameter">obj</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">removeElementAt</b> (int <i class="parameter">index</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setElementAt</b> (Object <i class="parameter">obj</i>, int <i class="parameter">index</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setSize</b> (int <i class="parameter">newSize</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">trimToSize</b> ();</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Methods Implementing List</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public boolean <b class="function">add</b> (Object <i class="parameter">o</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public void <b class="function">add</b> (int <i class="parameter">index</i>, Object <i class="parameter">element</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public boolean <b class="function">addAll</b> (Collection <i class="parameter">c</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public boolean <b class="function">addAll</b> (int <i class="parameter">index</i>, Collection <i class="parameter">c</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public void <b class="function">clear</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">contains</b> (Object <i class="parameter">elem</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public boolean <b class="function">containsAll</b> (Collection <i class="parameter">c</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public boolean <b class="function">equals</b> (Object <i class="parameter">o</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public Object <b class="function">get</b> (int <i class="parameter">index</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public int <b class="function">hashCode</b> ();</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">indexOf</b> (Object <i class="parameter">elem</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">isEmpty</b> ();</td><td align="right"><i> default:true</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">lastIndexOf</b> (Object <i class="parameter">elem</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public boolean <b class="function">remove</b> (Object <i class="parameter">o</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public Object <b class="function">remove</b> (int <i class="parameter">index</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public boolean <b class="function">removeAll</b> (Collection <i class="parameter">c</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public boolean <b class="function">retainAll</b> (Collection <i class="parameter">c</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public Object <b class="function">set</b> (int <i class="parameter">index</i>, Object <i class="parameter">element</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">size</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public java.util.List <b class="function">subList</b> (int <i class="parameter">fromIndex</i>, int <i class="parameter">toIndex</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public Object[ ] <b class="function">toArray</b> ();</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public Object[ ] <b class="function">toArray</b> (Object[ ] <i class="parameter">a</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Methods Overriding AbstractList</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">protected void <b class="function">removeRange</b> (int <i class="parameter">fromIndex</i>, int <i class="parameter">toIndex</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding AbstractCollection</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">toString</b> ();</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Object</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Object <b class="function">clone</b> ();</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Instance Fields</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected int <b class="function">capacityIncrement</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected int <b class="function">elementCount</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected Object[ ] <b class="function">elementData</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->AbstractCollection(Collection)-->AbstractList(java.util.List(Collection))-->Vector(Cloneable,java.util.List(Collection),Serializable)</tt>
</p>
<p>
<span class="refsect1">Subclasses: </span><tt class="literal">Stack</tt>
</p>
<p>
<span class="refsect1">Passed To: </span>Too many methods to list. </p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">java.awt.image.BufferedImage.getSources(), java.awt.image.RenderedImage.getSources(), java.awt.image.renderable.ParameterBlock.{getParameters(), getSources()}, java.awt.image.renderable.RenderableImage.getSources(), java.awt.image.renderable.RenderableImageOp.getSources(), javax.swing.table.DefaultTableModel.{convertToVector(), getDataVector()}, javax.swing.text.GapContent.getPositionsInRange(), javax.swing.text.StringContent.getPositionsInRange()</tt>
</p>
<p>
<span class="refsect1">Type Of: </span>Too many fields to list. </p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>WeakHashMap</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.util</b></font></td><td align="right"><font size="+1"><b><i>collection</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-3110"></a><a name="INDEX-3111"></a><a name="INDEX-3112"></a>
  This class implements <tt class="literal">Map</tt> using an internal hashtable. It is similar in features and performance to
  <tt class="literal">HashMap</tt>, except that it uses the capabilities of the
  <tt class="literal">java.lang.ref</tt> package, so that the key-to-value
  mappings it maintains do not prevent the key objects from being
  reclaimed by the garbage collector. When there are no more references
  to a key object except for the weak reference maintained by the
  <tt class="literal">WeakHashMap</tt>, 
  the garbage collector reclaims the object, and the
  <tt class="literal">WeakHashMap</tt> deletes the mapping between the
  reclaimed key and its associated value. If there are no references to the
  value object except for the one maintained by the
  <tt class="literal">WeakHashMap</tt>, the value object also becomes
  available for garbage collection. Thus, you can use a
  <tt class="literal">WeakHashMap</tt> to associate an auxiliary value with
  an object without preventing either the object (the key) or the
  auxiliary value from being reclaimed. See <tt class="literal">HashMap</tt> for a discussion of the implementation
  features of this class. See <tt class="literal">Map</tt> for a description
  of the methods it defines. </p>
<p>
<a name="INDEX-3113"></a><a name="INDEX-3114"></a><tt class="literal">WeakHashMap</tt> is primarily useful with objects whose
  <tt class="literal">equals()</tt> methods use the <tt class="literal">==</tt>
  operator for comparison. It is less useful with key objects of type
  <tt class="literal">String</tt>, for example, because there can be multiple
  <tt class="literal">String</tt> objects that are equal to one another and,
  even if the original key value has been reclaimed by the garbage
  collector, it is always possible to pass a <tt class="literal">String</tt>
  with the same value to the <tt class="literal">get()</tt> method. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">WeakHashMap</b> extends AbstractMap implements Map {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">WeakHashMap</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.3</span></td><td align="left">public <b class="function">WeakHashMap</b> (Map <i class="parameter">t</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">WeakHashMap</b> (int <i class="parameter">initialCapacity</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">WeakHashMap</b> (int <i class="parameter">initialCapacity</i>, float <i class="parameter">loadFactor</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Methods Implementing Map</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">clear</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">containsKey</b> (Object <i class="parameter">key</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Set <b class="function">entrySet</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Object <b class="function">get</b> (Object <i class="parameter">key</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">isEmpty</b> ();</td><td align="right"><i> default:true</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Object <b class="function">put</b> (Object <i class="parameter">key</i>, Object <i class="parameter">value</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Object <b class="function">remove</b> (Object <i class="parameter">key</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">size</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->AbstractMap(Map)-->WeakHashMap(Map)</tt>
</p>
</div>
<a name="INDEX-3115"></a>
<a name="INDEX-3116"></a>


<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch22_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch22_01.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch24_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch24_01.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">22.1. The java.text Package</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">24. The java.util.jar Package</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
