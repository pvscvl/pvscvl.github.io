<html>
<head>
<title>The javax.crypto Package (Java in a Nutshell)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="David Flanagan">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-487-8E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="The javax.crypto Package">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm" alt="Java Enterprise in a Nutshell"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch25_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch25_01.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="part2.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/part2.htm">Part 2: API Quick Reference</a></td><td align="right" valign="top" width="172"><a href="ch27_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch27_01.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY --><h1 class="chapter">Chapter 26.  The javax.crypto Package</h1>

<p>
<a name="INDEX-3233"></a><a name="INDEX-3234"></a><a name="INDEX-3235"></a><a name="INDEX-3236"></a><a name="INDEX-3237"></a>

  The <tt class="literal">javax.crypto</tt> 
  package defines classes and interfaces for various cryptographic
  operations. <a href="#javanut3-javax.crypto-1">Figure 26-1</a> shows the class hierarchy of
  this package. The central class is <tt class="literal">Cipher</tt>, which is
  used to encrypt and decrypt data. <tt class="literal">CipherInputStream</tt> and
  <tt class="literal">CipherOutputStream</tt> are utility classes that use a
  <tt class="literal">Cipher</tt> object to encrypt or decrypt streaming
  data. <tt class="literal">SealedObject</tt> is another important utility
  class that uses a <tt class="literal">Cipher</tt> object to encrypt an
  arbitrary serializable Java object.</p>

<a name="javanut3-javax.crypto-1"></a>
<div class="figure">
<img alt="figure" src="figs/JN3_2601.gif" webstripperlinkwas="figs/JN3_2601.gif"></div>
<h4 class="objtitle">Figure 26-1. The javax.crypto package</h4>

<p>
<a name="INDEX-3238"></a><a name="INDEX-3239"></a><a name="INDEX-3240"></a><a name="INDEX-3241"></a>
  The <tt class="literal">KeyGenerator</tt> class creates the
  <tt class="literal">SecretKey</tt> objects used by <tt class="literal">Cipher</tt>
  for encryption and decryption. <tt class="literal">SecretKeyFactory</tt> 
  encodes and decodes <tt class="literal">SecretKey</tt> objects. The
  <tt class="literal">KeyAgreement</tt> class enables two or more parties to
  agree on a <tt class="literal">SecretKey</tt> in such a way that an
  eavesdropper cannot determine the key. The <tt class="literal">Mac</tt>
  class computes a message authentication code (MAC) that can
  ensure the integrity of a transmission between two parties
  who share a <tt class="literal">SecretKey</tt>. A MAC is akin to a digital
  signature, except that it is based on a secret key instead of a
  public/private key pair. </p>
<p>
<a name="INDEX-3242"></a>
  Like the <tt class="literal">java.security</tt> package, the
  <tt class="literal">javax.crypto</tt> package is provider-based, so that
  arbitrary cryptographic implementations may be plugged into any Java
  installation. Various classes in this package have names that end in
  "Spi". These classes define a service-provider interface and
  must be implemented by each cryptographic provider that wishes to provide
  an implementation of a particular cryptographic service or algorithm. </p>
<p>
<a name="INDEX-3243"></a><a name="INDEX-3244"></a><a name="INDEX-3245"></a><a name="INDEX-3246"></a>
  This package is part of the Java Cryptography Extension ( JCE). Sun
  distributes the JCE within the United States and Canada, but,
  unfortunately, U.S. export regulations prohibit the export of
  cryptographic technology to other countries. If you are not a
  resident of the United States or Canada, you have to obtain and
  use a third-party implementation of the JCE developed outside of the
  United States. The
  JCE is distributed with a cryptographic provider named "SunJCE" that
  includes a robust set of implementations for
  <tt class="literal">Cipher</tt>, <tt class="literal">KeyAgreement</tt>,
  <tt class="literal">Mac</tt>, and other classes. Installing the JCE
  extension is not the same, however, as installing the SunJCE
  provider. To make the SunJCE provider permanently available on a
  Java installation, you must edit the
  <em class="emphasis">${java.home}/lib/security/java.security</em> file in
  the Java installation to add a line such as the following:</p>

<blockquote>
<pre class="programlisting">security.provider.2=com.sun.crypto.provider.SunJCE</pre>
</blockquote>

<p>The digit 2 in the line above specifies the preference order of the
  provider; you can use a different number. </p>
<p>  If the SunJCE provider is not statically installed as above, you can
  dynamically install it in an application with code such as the following:</p>

<blockquote>
<pre class="programlisting">import java.security.*;
Provider sunjce = new com.sun.crypto.provider.SunJCE();
Security.addProvider(sunjce);</pre>
</blockquote>

<p>
<a name="INDEX-3247"></a>
  A full tutorial on cryptography is beyond
  the scope of this chapter and of this book. In order to use this
  package, you need to have a basic understanding of cryptographic
  algorithms such as DES. In order to take full advantage of this
  package, you also need to have a detailed understanding of things like
  feedback modes, padding schemes, the Diffie-Hellman key-agreement
  protocol, and so on. For a good introduction to modern cryptography
  in Java, see <em class="emphasis">Java Cryptography</em> by Jonathan
  Knudsen (O'Reilly). For more in-depth coverage, not
  specific to Java, see <em class="emphasis">Applied Cryptography</em> by
  Bruce Schneier (Wiley). </p>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>BadPaddingException</b></font></td><td align="right"><font size="+1"><b>JCE 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>javax.crypto</b></font></td><td align="right"><font size="+1"><b><i>serializable checked</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-3248"></a>
  Signals that input data to a <tt class="literal">Cipher</tt> is not padded
  correctly. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">BadPaddingException</b> extends java.security.GeneralSecurityException {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">BadPaddingException</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">BadPaddingException</b> (String <i class="parameter">msg</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Exception-->java.security.GeneralSecurityException-->BadPaddingException</tt>
</p>
<p>
<span class="refsect1">Thrown By: </span><tt class="literal">Cipher.doFinal(), CipherSpi.engineDoFinal(), SealedObject.getObject()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>Cipher</b></font></td><td align="right"><font size="+1"><b>JCE 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>javax.crypto</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-3249"></a><a name="INDEX-3250"></a>
  This class performs encryption and decryption of byte arrays. <tt class="literal">Cipher</tt> is provider-based, so to obtain a
  <tt class="literal">Cipher</tt> object, you must call the static
  <tt class="literal">getInstance()</tt> factory method. The arguments to
  this method are a string that describes the type of encryption desired
  and, optionally, the name of the provider whose implementation should
  be used. To specify the desired type of encryption, you can simply
  specify the name of an encryption algorithm, such as "DES". Or you
  can specify a three-part name that includes the encryption
  algorithm, the algorithm operating mode, and the padding scheme. These three parts are separated by slash characters, as in
  "DES/CBC/PKCS5Padding". Finally, if you are requesting a block cipher
  algorithm in a stream mode, you can specify the number of bits to be
  processed at a time by following the name of the feedback mode with a
  number of bits. For example: "DES/CFB8/NoPadding". </p>
<p>
<a name="INDEX-3251"></a>

  The "SunJCE" provider supports the following cryptographic algorithms:</p>

  <dl>
<dt>
<b>"DES"</b>
</dt>
<dd>
<p>	  The Digital Encryption Standard. </p>
</dd>
<dt>
<b>"DESede"</b>
</dt>
<dd>
<p>	  Triple DES encryption, also known as "TripleDES". </p>
</dd>
<dt>
<b>"Blowfish"</b>
</dt>
<dd>
<p>	  The Blowfish block cipher designed by Bruce Schneier. </p>
</dd>
<dt>
<b>"PBEWithMD5AndDES"</b>
</dt>
<dd>
<p>	  A password-based encryption scheme specified in PKCS#5. This
	  algorithm implicitly uses "CBC" mode and the "PKCS5Padding"
	  padding; it cannot be used with other modes or padding
	  schemes. </p>
</dd>
<dt>
<b>"PBEWithMD5AndTripleDES"</b>
</dt>
<dd>
<p>	  Password-based encryption as above, but using DESede instead
	  of DES. </p>
</dd>
</dl>


<p>SunJCE supports the following operating modes:</p>

  <dl>
<dt>
<b>"ECB"</b>
</dt>
<dd>
<p>	  Electronic Codebook mode
	</p>
</dd>
<dt>
<b>"CBC"</b>
</dt>
<dd>
<p>	  Cipher Block Chaining mode
	</p>
</dd>
<dt>
<b>"CFB"</b>
</dt>
<dd>
<p>	  Cipher Feedback mode
	</p>
</dd>
<dt>
<b>"OFB"</b>
</dt>
<dd>
<p>	  Output Feedback mode
	</p>
</dd>
<dt>
<b>"PCBC"</b>
</dt>
<dd>
<p>	  Plaintext Cipher Block Chaining mode
	</p>
</dd>
</dl>

<p>Finally, the "SunJCE" provider also supports two padding schemes:
  "NoPadding" and "PKCS5Padding". The name "SSL3Padding" is reserved,
  but this padding scheme is not implemented in the current release of
  "SunJCE". 
<a name="INDEX-3252"></a><a name="INDEX-3253"></a>
</p>
<p>
<a name="INDEX-3254"></a><a name="INDEX-3255"></a>
  Once you have obtained a <tt class="literal">Cipher</tt> object for the
  desired cryptographic algorithm, mode, and padding scheme, you must
  initialize it by calling one of the <tt class="literal">init()</tt>
  methods. The first argument to <tt class="literal">init()</tt> is one of
  the constants <tt class="literal">ENCRYPT_MODE</tt> or
  <tt class="literal">DECRYPT_MODE</tt>. The second argument is a
  <tt class="literal">java.security.Key</tt> object that performs
  the encryption or decryption. If you use one of the symmetric
  (i.e., non-public key) encryption algorithms supported by the "SunJCE"
  provider, this <tt class="literal">Key</tt> object is a
  <tt class="literal">SecretKey</tt> implementation. You can optionally
  pass a <tt class="literal">java.security.SecureRandom</tt> object to
  <tt class="literal">init()</tt> to provide a source of randomness. If you
  do not, the <tt class="literal">Cipher</tt> implementation provides its
  own pseudo-random number generator. </p>
<p>
<a name="INDEX-3256"></a><a name="INDEX-3257"></a><a name="INDEX-3258"></a><a name="INDEX-3259"></a>

  Some cryptographic algorithms require additional initialization
  parameters; these can be passed to <tt class="literal">init()</tt> as a
  <tt class="literal">java.security.AlgorithmParameters</tt> object or as a
  <tt class="literal">java.security.spec.AlgorithmParameterSpec</tt> object. When encrypting, you can omit these parameters, and the
  <tt class="literal">Cipher</tt> implementation uses default values or
  generates appropriate random parameters for you. In this case,
  you should call <tt class="literal">getParameters()</tt> after performing
  encryption to obtain the <tt class="literal">AlgorithmParameters</tt> used
  to encrypt. These parameters are required in order to decrypt, and
  must therefore be saved or transferred along with the encrypted data. Of the algorithms supported by the "SunJCE" provider, the block ciphers
  "DES", "DESede", and "Blowfish" 
  all require an initialization vector when they
  are used in "CBC", "CFB", "OFB", or "PCBC" mode. You can represent an
  initialization vector with a
  <tt class="literal">javax.crypto.spec.IvParameterSpec</tt> object and
  obtain the raw bytes of the initialization vector used by a
  <tt class="literal">Cipher</tt> with the <tt class="literal">getIV()</tt> method. The "PBEWithMD5AndDES" algorithm requires a salt and iteration count
  as parameters. These can be specified with a
  <tt class="literal">javax.crypto.spec.PBEParameterSpec</tt> object. </p>
<p>
<a name="INDEX-3260"></a><a name="INDEX-3261"></a><a name="INDEX-3262"></a>
  Once you have obtained and initialized a <tt class="literal">Cipher</tt>
  object, you are ready to use it for encryption or decryption. If you
  have only a single array of bytes to encrypt or decrypt, pass that
  input array to one of the <tt class="literal">doFinal()</tt> methods. Some
  versions of this method return the encrypted or decrypted bytes as the
  return value of the function. Other versions store the encrypted or
  decrypted bytes to another byte array you specify. If
  you choose to use one of these latter methods, you should first call
  <tt class="literal">getOutputSize()</tt> to determine the required size of
  the output array. If you want to encrypt or decrypt data from a streaming source or
  have more than one array of data, pass the data to one of the
  <tt class="literal">update()</tt> methods, calling it as many times as
  necessary. Then pass the last array of data to one of the
  <tt class="literal">doFinal()</tt> methods. If you are working with
  streaming data, consider using the
  <tt class="literal">CipherInputStream</tt> and
  <tt class="literal">CipherOutputStream</tt> classes instead. </p>

<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">Cipher</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected <b class="function">Cipher</b> (CipherSpi <i class="parameter">cipherSpi</i>, java.security.Provider <i class="parameter">provider</i>, String <i class="parameter">transformation</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constants</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">DECRYPT_MODE</b> ;</td><td align="right"><i> =2</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">ENCRYPT_MODE</b> ;</td><td align="right"><i> =1</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Class Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final Cipher <b class="function">getInstance</b> (String <i class="parameter">transformation</i>) throws java.security.NoSuchAlgorithmExceptionNoSuchPaddingException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final Cipher <b class="function">getInstance</b> (String <i class="parameter">transformation</i>, String <i class="parameter">provider</i>) throws java.security.NoSuchAlgorithmExceptionjava.security.NoSuchProviderExceptionNoSuchPaddingException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Property Accessor Methods (by property name)</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final String <b class="function">getAlgorithm</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final int <b class="function">getBlockSize</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final byte[ ] <b class="function">getIV</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final java.security.AlgorithmParameters <b class="function">getParameters</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final java.security.Provider <b class="function">getProvider</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final byte[ ] <b class="function">doFinal</b> () throws java.lang.IllegalStateExceptionIllegalBlockSizeExceptionBadPaddingException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final byte[ ] <b class="function">doFinal</b> (byte[ ] <i class="parameter">input</i>) throws java.lang.IllegalStateExceptionIllegalBlockSizeExceptionBadPaddingException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final int <b class="function">doFinal</b> (byte[ ] <i class="parameter">output</i>, int <i class="parameter">outputOffset</i>) throws java.lang.IllegalStateExceptionIllegalBlockSizeExceptionShortBufferExceptionBadPaddingException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final byte[ ] <b class="function">doFinal</b> (byte[ ] <i class="parameter">input</i>, int <i class="parameter">inputOffset</i>, int <i class="parameter">inputLen</i>) throws java.lang.IllegalStateExceptionIllegalBlockSizeExceptionBadPaddingException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final int <b class="function">doFinal</b> (byte[ ] <i class="parameter">input</i>, int <i class="parameter">inputOffset</i>, int <i class="parameter">inputLen</i>, byte[ ] <i class="parameter">output</i>) throws java.lang.IllegalStateExceptionShortBufferExceptionIllegalBlockSizeExceptionBadPaddingException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final int <b class="function">doFinal</b> (byte[ ] <i class="parameter">input</i>, int <i class="parameter">inputOffset</i>, int <i class="parameter">inputLen</i>, byte[ ] <i class="parameter">output</i>, int <i class="parameter">outputOffset</i>) throws java.lang.IllegalStateExceptionShortBufferExceptionIllegalBlockSizeExceptionBadPaddingException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final int <b class="function">getOutputSize</b> (int <i class="parameter">inputLen</i>) throws java.lang.IllegalStateException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final void <b class="function">init</b> (int <i class="parameter">opmode</i>, java.security.Key <i class="parameter">key</i>) throws java.security.InvalidKeyException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final void <b class="function">init</b> (int <i class="parameter">opmode</i>, java.security.Key <i class="parameter">key</i>, java.security.SecureRandom <i class="parameter">random</i>) throws java.security.InvalidKeyException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final void <b class="function">init</b> (int <i class="parameter">opmode</i>, java.security.Key <i class="parameter">key</i>, java.security.spec.AlgorithmParameterSpec <i class="parameter">params</i>) throws java.security.InvalidKeyExceptionjava.security.InvalidAlgorithmParameterException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final void <b class="function">init</b> (int <i class="parameter">opmode</i>, java.security.Key <i class="parameter">key</i>, java.security.AlgorithmParameters <i class="parameter">params</i>) throws java.security.InvalidKeyExceptionjava.security.InvalidAlgorithmParameterException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final void <b class="function">init</b> (int <i class="parameter">opmode</i>, java.security.Key <i class="parameter">key</i>, java.security.spec.AlgorithmParameterSpec <i class="parameter">params</i>, java.security.SecureRandom <i class="parameter">random</i>) throws java.security.InvalidKeyExceptionjava.security.InvalidAlgorithmParameterException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final void <b class="function">init</b> (int <i class="parameter">opmode</i>, java.security.Key <i class="parameter">key</i>, java.security.AlgorithmParameters <i class="parameter">params</i>, java.security.SecureRandom <i class="parameter">random</i>) throws java.security.InvalidKeyExceptionjava.security.InvalidAlgorithmParameterException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final byte[ ] <b class="function">update</b> (byte[ ] <i class="parameter">input</i>) throws java.lang.IllegalStateException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final byte[ ] <b class="function">update</b> (byte[ ] <i class="parameter">input</i>, int <i class="parameter">inputOffset</i>, int <i class="parameter">inputLen</i>) throws java.lang.IllegalStateException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final int <b class="function">update</b> (byte[ ] <i class="parameter">input</i>, int <i class="parameter">inputOffset</i>, int <i class="parameter">inputLen</i>, byte[ ] <i class="parameter">output</i>) throws java.lang.IllegalStateExceptionShortBufferException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final int <b class="function">update</b> (byte[ ] <i class="parameter">input</i>, int <i class="parameter">inputOffset</i>, int <i class="parameter">inputLen</i>, byte[ ] <i class="parameter">output</i>, int <i class="parameter">outputOffset</i>) throws java.lang.IllegalStateExceptionShortBufferException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Subclasses: </span><tt class="literal">NullCipher</tt>
</p>

<p>
<span class="refsect1">Passed To: </span><tt class="literal">CipherInputStream.CipherInputStream(), CipherOutputStream.CipherOutputStream(), SealedObject.{getObject(), SealedObject()}</tt>
</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">Cipher.getInstance()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>CipherInputStream</b></font></td><td align="right"><font size="+1"><b>JCE 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>javax.crypto</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-3263"></a><a name="INDEX-3264"></a>
  This class is an input stream that uses a <tt class="literal">Cipher</tt>
  object to encrypt or decrypt the bytes it reads from another stream. You must initialize the <tt class="literal">Cipher</tt> object before
  passing it to the <tt class="literal">CipherInputStream()</tt> constructor. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">CipherInputStream</b> extends java.io.FilterInputStream {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">CipherInputStream</b> (java.io.InputStream <i class="parameter">is</i>, Cipher <i class="parameter">c</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected <b class="function">CipherInputStream</b> (java.io.InputStream <i class="parameter">is</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding FilterInputStream</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">available</b> () throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">close</b> () throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">markSupported</b> ();</td><td align="right"><i> constant</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">read</b> () throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">read</b> (byte[ ] <i class="parameter">b</i>) throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">read</b> (byte[ ] <i class="parameter">b</i>, int <i class="parameter">off</i>, int <i class="parameter">len</i>) throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public long <b class="function">skip</b> (long <i class="parameter">n</i>) throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->java.io.InputStream-->java.io.FilterInputStream-->CipherInputStream</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>CipherOutputStream</b></font></td><td align="right"><font size="+1"><b>JCE 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>javax.crypto</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-3265"></a><a name="INDEX-3266"></a><a name="INDEX-3267"></a>
  This class is an output stream that uses a <tt class="literal">Cipher</tt>
  object to encrypt or decrypt bytes before passing them to another
  output stream. You must initialize the <tt class="literal">Cipher</tt>
  object before passing it to the
  <tt class="literal">CipherOutputStream()</tt> constructor. If you are using
  a <tt class="literal">Cipher</tt> with any kind of padding, you must not
  call <tt class="literal">flush()</tt> until you are done writing all data to
  the stream; otherwise decryption fails. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">CipherOutputStream</b> extends java.io.FilterOutputStream {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">CipherOutputStream</b> (java.io.OutputStream <i class="parameter">os</i>, Cipher <i class="parameter">c</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected <b class="function">CipherOutputStream</b> (java.io.OutputStream <i class="parameter">os</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding FilterOutputStream</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">close</b> () throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">flush</b> () throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">write</b> (byte[ ] <i class="parameter">b</i>) throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">write</b> (int <i class="parameter">b</i>) throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">write</b> (byte[ ] <i class="parameter">b</i>, int <i class="parameter">off</i>, int <i class="parameter">len</i>) throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->java.io.OutputStream-->java.io.FilterOutputStream-->CipherOutputStream</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>CipherSpi</b></font></td><td align="right"><font size="+1"><b>JCE 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>javax.crypto</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-3268"></a><a name="INDEX-3269"></a><a name="INDEX-3270"></a><a name="INDEX-3271"></a>
  This abstract class defines the service-provider interface for
  <tt class="literal">Cipher</tt>. A cryptographic provider must
  implement a concrete subclass of this class for each encryption
  algorithm it supports. A provider can implement a separate class for
  each combination of algorithm, mode, and padding scheme it supports
  or implement more general classes and leave the mode and/or
  padding scheme to be specified in calls to
  <tt class="literal">engineSetMode()</tt> and
  <tt class="literal">engineSetPadding()</tt>. Applications never need to use or subclass this class. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public abstract class <b class="classname">CipherSpi</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">CipherSpi</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected abstract byte[ ] <b class="function">engineDoFinal</b> (byte[ ] <i class="parameter">input</i>, int <i class="parameter">inputOffset</i>, int <i class="parameter">inputLen</i>) throws IllegalBlockSizeExceptionBadPaddingException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected abstract int <b class="function">engineDoFinal</b> (byte[ ] <i class="parameter">input</i>, int <i class="parameter">inputOffset</i>, int <i class="parameter">inputLen</i>, byte[ ] <i class="parameter">output</i>, int <i class="parameter">outputOffset</i>) throws ShortBufferExceptionIllegalBlockSizeExceptionBadPaddingException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected abstract int <b class="function">engineGetBlockSize</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected abstract byte[ ] <b class="function">engineGetIV</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected abstract int <b class="function">engineGetOutputSize</b> (int <i class="parameter">inputLen</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected abstract java.security.AlgorithmParameters <b class="function">engineGetParameters</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected abstract void <b class="function">engineInit</b> (int <i class="parameter">opmode</i>, java.security.Key <i class="parameter">key</i>, java.security.SecureRandom <i class="parameter">random</i>) throws java.security.InvalidKeyException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected abstract void <b class="function">engineInit</b> (int <i class="parameter">opmode</i>, java.security.Key <i class="parameter">key</i>, java.security.spec.AlgorithmParameterSpec <i class="parameter">params</i>, java.security.SecureRandom <i class="parameter">random</i>) throws java.security.InvalidKeyExceptionjava.security.InvalidAlgorithmParameterException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected abstract void <b class="function">engineInit</b> (int <i class="parameter">opmode</i>, java.security.Key <i class="parameter">key</i>, java.security.AlgorithmParameters <i class="parameter">params</i>, java.security.SecureRandom <i class="parameter">random</i>) throws java.security.InvalidKeyExceptionjava.security.InvalidAlgorithmParameterException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected abstract void <b class="function">engineSetMode</b> (String <i class="parameter">mode</i>) throws java.security.NoSuchAlgorithmException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected abstract void <b class="function">engineSetPadding</b> (String <i class="parameter">padding</i>) throws NoSuchPaddingException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected abstract byte[ ] <b class="function">engineUpdate</b> (byte[ ] <i class="parameter">input</i>, int <i class="parameter">inputOffset</i>, int <i class="parameter">inputLen</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected abstract int <b class="function">engineUpdate</b> (byte[ ] <i class="parameter">input</i>, int <i class="parameter">inputOffset</i>, int <i class="parameter">inputLen</i>, byte[ ] <i class="parameter">output</i>, int <i class="parameter">outputOffset</i>) throws ShortBufferException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">Cipher.Cipher()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>IllegalBlockSizeException</b></font></td><td align="right"><font size="+1"><b>JCE 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>javax.crypto</b></font></td><td align="right"><font size="+1"><b><i>serializable checked</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-3272"></a>
  Signals that the length of data provided to a block cipher (as
  implemented, for example, by <tt class="literal">Cipher</tt> and
  <tt class="literal">SealedObject</tt>) does not match the block size for the
  cipher. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">IllegalBlockSizeException</b> extends java.security.GeneralSecurityException {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">IllegalBlockSizeException</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">IllegalBlockSizeException</b> (String <i class="parameter">msg</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Exception-->java.security.GeneralSecurityException-->IllegalBlockSizeException</tt>
</p>
<p>
<span class="refsect1">Thrown By: </span><tt class="literal">Cipher.doFinal(), CipherSpi.engineDoFinal(), SealedObject.{getObject(), SealedObject()}</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>KeyAgreement</b></font></td><td align="right"><font size="+1"><b>JCE 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>javax.crypto</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-3273"></a><a name="INDEX-3274"></a><a name="INDEX-3275"></a><a name="INDEX-3276"></a><a name="INDEX-3277"></a>

  This class provides an API to a key-agreement protocol that
  allows two or more parties to agree on a secret key without exchanging
  any secrets and in such a way that an eavesdropper listening in on the
  communication between those parties cannot determine the
  secret key. The <tt class="literal">KeyAgreement</tt> class is
  algorithm-independent and provider-based, so you must obtain a
  <tt class="literal">KeyAgreement</tt> object by calling one of the static
  <tt class="literal">getInstance()</tt> factory methods and specifying the name
  of the desired key agreement algorithm and, optionally, the name of
  the desired provider of that algorithm. The "SunJCE" provider
  implements a single key-agreement algorithm named "DiffieHellman". </p>
<p>
<a name="INDEX-3278"></a><a name="INDEX-3279"></a><a name="INDEX-3280"></a>
  To use a <tt class="literal">KeyAgreement</tt> object, each party first
  calls the <tt class="literal">init()</tt> method and supplies a
  <tt class="literal">Key</tt> object of its own. Then, each party obtains a
  <tt class="literal">Key</tt> object from one of the other parties to the
  agreement and calls <tt class="literal">doPhase()</tt>. Each party obtains
  an intermediate <tt class="literal">Key</tt> object as the return value of
  <tt class="literal">doPhase()</tt>, and these keys are again exchanged and passed
  to <tt class="literal">doPhase()</tt>. This process typically repeats
  <tt class="literal">n</tt>-1 times, where <tt class="literal">n</tt> is the number
  of parties, but the actual number of repetitions is
  algorithm-dependent. When <tt class="literal">doPhase()</tt> is called the last
  time, the second argument must be <tt class="literal">true</tt> to indicate
  that it is the last phase of the agreement. After all calls to
  <tt class="literal">doPhase()</tt> have been made, each party calls
  <tt class="literal">generateSecret()</tt> to obtain an array of bytes or a
  <tt class="literal">SecretKey</tt> object for a named algorithm type. All
  parties obtain the same bytes or 
  <tt class="literal">SecretKey</tt> from this method. The
  <tt class="literal">KeyAgreement</tt> class is not responsible for the
  transfer of <tt class="literal">Key</tt> objects between parties or for
  mutual authentication among the parties. These tasks must
  be accomplished through some external mechanism. </p>
<p>  The most common type of key agreement is "DiffieHellman" key agreement
  between two parties. It proceeds as follows. First, both parties
  obtain a <tt class="literal">java.security.KeyPairGenerator</tt> for the
  "DiffieHellman" algorithm and use it to generate a
  <tt class="literal">java.security.KeyPair</tt> of Diffie-Hellman public and
  private keys. Each party passes its private key to the
  <tt class="literal">init()</tt> method of its
  <tt class="literal">KeyAgreement</tt> object. (The
  <tt class="literal">init()</tt> method can be passed a
  <tt class="literal">java.security.spec.AlgorithmParameterSpec</tt> object,
  but the Diffie-Hellman protocol does not require any additional
  parameters.) Next, the two parties exchange public keys, typically
  through some kind of networking mechanism (the
  <tt class="literal">KeyAgreement</tt> class is not responsible for the
  actual exchange of keys). Each party passes the public key of the
  other party to the <tt class="literal">doPhase()</tt> method of its
  <tt class="literal">KeyAgreement</tt> object. There are only two
  parties to this agreement, so only one phase is required, and the second
  argument to <tt class="literal">doPhase()</tt> is <tt class="literal">true</tt>. At this point, both parties call <tt class="literal">generateSecret()</tt>
  to obtain the shared secret key. </p>
<p>
<a name="INDEX-3281"></a>
  A three-party Diffie-Hellman key agreement requires two phases and is
  slightly more complicated. Let's call the three parties Alice, Bob, and
  Carol. Each generates a key pair and uses its private key to
  initialize its <tt class="literal">KeyAgreement</tt> object, as before. Then Alice passes her public key to Bob, Bob passes his to Carol, and
  Carol passes hers to Alice. Each party passes this public key to
  <tt class="literal">doPhase()</tt>. Since this is not the final
  <tt class="literal">doPhase()</tt>, the second argument is
  <tt class="literal">false</tt>, and <tt class="literal">doPhase()</tt> returns an
  intermediate <tt class="literal">Key</tt> object. The three parties
  exchange these intermediate keys again in the same way: Alice to Bob, Bob to
  Carol, and Carol to Alice. Now each party passes the intermediate
  key it has received to <tt class="literal">doPhase()</tt> a second time,
  passing <tt class="literal">true</tt> to indicate that this is the final
  phase. Finally, all three can call
  <tt class="literal">generateSecret()</tt> to obtain a shared key to encrypt future communication. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">KeyAgreement</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected <b class="function">KeyAgreement</b> (KeyAgreementSpi <i class="parameter">keyAgreeSpi</i>, java.security.Provider <i class="parameter">provider</i>, String <i class="parameter">algorithm</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Class Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final KeyAgreement <b class="function">getInstance</b> (String <i class="parameter">algorithm</i>) throws java.security.NoSuchAlgorithmException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final KeyAgreement <b class="function">getInstance</b> (String <i class="parameter">algorithm</i>, String <i class="parameter">provider</i>) throws java.security.NoSuchAlgorithmExceptionjava.security.NoSuchProviderException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final java.security.Key <b class="function">doPhase</b> (java.security.Key <i class="parameter">key</i>, boolean <i class="parameter">lastPhase</i>) throws java.security.InvalidKeyExceptionjava.lang.IllegalStateException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final byte[ ] <b class="function">generateSecret</b> () throws java.lang.IllegalStateException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final SecretKey <b class="function">generateSecret</b> (String <i class="parameter">algorithm</i>) throws java.lang.IllegalStateExceptionjava.security.NoSuchAlgorithmExceptionjava.security.InvalidKeyException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final int <b class="function">generateSecret</b> (byte[ ] <i class="parameter">sharedSecret</i>, int <i class="parameter">offset</i>) throws java.lang.IllegalStateExceptionShortBufferException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final String <b class="function">getAlgorithm</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final java.security.Provider <b class="function">getProvider</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final void <b class="function">init</b> (java.security.Key <i class="parameter">key</i>) throws java.security.InvalidKeyException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final void <b class="function">init</b> (java.security.Key <i class="parameter">key</i>, java.security.spec.AlgorithmParameterSpec <i class="parameter">params</i>) throws java.security.InvalidKeyExceptionjava.security.InvalidAlgorithmParameterException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final void <b class="function">init</b> (java.security.Key <i class="parameter">key</i>, java.security.SecureRandom <i class="parameter">random</i>) throws java.security.InvalidKeyException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final void <b class="function">init</b> (java.security.Key <i class="parameter">key</i>, java.security.spec.AlgorithmParameterSpec <i class="parameter">params</i>, java.security.SecureRandom <i class="parameter">random</i>) throws java.security.InvalidKeyExceptionjava.security.InvalidAlgorithmParameterException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">KeyAgreement.getInstance()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>KeyAgreementSpi</b></font></td><td align="right"><font size="+1"><b>JCE 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>javax.crypto</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-3282"></a><a name="INDEX-3283"></a>
  This abstract class defines the service-provider interface for
  <tt class="literal">KeyAgreement</tt>. A cryptographic provider must
  implement a concrete subclass of this class for each encryption
  algorithm it supports. Applications never need to use or subclass
  this class. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public abstract class <b class="classname">KeyAgreementSpi</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">KeyAgreementSpi</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected abstract java.security.Key <b class="function">engineDoPhase</b> (java.security.Key <i class="parameter">key</i>, boolean <i class="parameter">lastPhase</i>) throws java.security.InvalidKeyExceptionjava.lang.IllegalStateException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected abstract byte[ ] <b class="function">engineGenerateSecret</b> () throws java.lang.IllegalStateException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected abstract SecretKey <b class="function">engineGenerateSecret</b> (String <i class="parameter">algorithm</i>) throws java.lang.IllegalStateExceptionjava.security.NoSuchAlgorithmExceptionjava.security.InvalidKeyException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected abstract int <b class="function">engineGenerateSecret</b> (byte[ ] <i class="parameter">sharedSecret</i>, int <i class="parameter">offset</i>) throws java.lang.IllegalStateExceptionShortBufferException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected abstract void <b class="function">engineInit</b> (java.security.Key <i class="parameter">key</i>, java.security.SecureRandom <i class="parameter">random</i>) throws java.security.InvalidKeyException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected abstract void <b class="function">engineInit</b> (java.security.Key <i class="parameter">key</i>, java.security.spec.AlgorithmParameterSpec <i class="parameter">params</i>, java.security.SecureRandom <i class="parameter">random</i>) throws java.security.InvalidKeyExceptionjava.security.InvalidAlgorithmParameterException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">KeyAgreement.KeyAgreement()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>KeyGenerator</b></font></td><td align="right"><font size="+1"><b>JCE 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>javax.crypto</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-3284"></a><a name="INDEX-3285"></a><a name="INDEX-3286"></a><a name="INDEX-3287"></a><a name="INDEX-3288"></a>
  This class provides an API for generating secret keys for symmetric
  cryptography. It is similar to
  <tt class="literal">java.security.KeyPairGenerator</tt>, which generates
  public/private key pairs for asymmetric or public-key cryptography. <tt class="literal">KeyGenerator</tt> is algorithm-independent and
  provider-based, so you must obtain a
  <tt class="literal">KeyGenerator</tt> instance by calling one of the static
  <tt class="literal">getInstance()</tt> factory methods and specifying the name
  of the cryptographic algorithm for which a key is desired and,
  optionally, the name of the security provider whose key-generation
  implementation is to be used. The "SunJCE" provider includes
  <tt class="literal">KeyGenerator</tt> implementations for the "DES",
  "DESede", and "Blowfish" encryption algorithms, and also for the
  "HmacMD5" and "HmacSHA1" message authentication (MAC) algorithms. </p>
<p>
<a name="INDEX-3289"></a>
  Once you have obtained a <tt class="literal">KeyGenerator</tt>, you 
  initialize it with the <tt class="literal">init()</tt> method. You can
  provide a <tt class="literal">java.security.spec.AlgorithmParameterSpec</tt>
  object to provide algorithm-specific initialization parameters or 
  simply specify the desired size (in bits) of the key to be
  generated. In either case, you can also specify a source of
  randomness in the form of a <tt class="literal">SecureRandom</tt> object. If you do not specify a <tt class="literal">SecureRandom</tt>, the
  <tt class="literal">KeyGenerator</tt> instantiates one of its own. None
  of the algorithms supported by the "SunJCE" provider require
  algorithm-specific parameters. </p>
<p>
<a name="INDEX-3290"></a><a name="INDEX-3291"></a>
  After calling <tt class="literal">getInstance()</tt> to obtain a
  <tt class="literal">KeyGenerator</tt> and <tt class="literal">init()</tt> to
  initialize it, simply call <tt class="literal">generateKey()</tt> to create
  a new <tt class="literal">SecretKey</tt>. Remember that the
  <tt class="literal">SecretKey</tt> must be kept secret. Take precautions
  when storing or transmitting the key, so that it does not fall into the
  wrong hands. You may want to use a
  <tt class="literal">java.security.KeyStore</tt> object to store the key in a
  password-protected form. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">KeyGenerator</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected <b class="function">KeyGenerator</b> (KeyGeneratorSpi <i class="parameter">keyGenSpi</i>, java.security.Provider <i class="parameter">provider</i>, String <i class="parameter">algorithm</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Class Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final KeyGenerator <b class="function">getInstance</b> (String <i class="parameter">algorithm</i>) throws java.security.NoSuchAlgorithmException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final KeyGenerator <b class="function">getInstance</b> (String <i class="parameter">algorithm</i>, String <i class="parameter">provider</i>) throws java.security.NoSuchAlgorithmExceptionjava.security.NoSuchProviderException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final SecretKey <b class="function">generateKey</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final String <b class="function">getAlgorithm</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final java.security.Provider <b class="function">getProvider</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final void <b class="function">init</b> (java.security.spec.AlgorithmParameterSpec <i class="parameter">params</i>) throws java.security.InvalidAlgorithmParameterException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final void <b class="function">init</b> (java.security.SecureRandom <i class="parameter">random</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final void <b class="function">init</b> (int <i class="parameter">keysize</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final void <b class="function">init</b> (java.security.spec.AlgorithmParameterSpec <i class="parameter">params</i>, java.security.SecureRandom <i class="parameter">random</i>) throws java.security.InvalidAlgorithmParameterException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final void <b class="function">init</b> (int <i class="parameter">keysize</i>, java.security.SecureRandom <i class="parameter">random</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">KeyGenerator.getInstance()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>KeyGeneratorSpi</b></font></td><td align="right"><font size="+1"><b>JCE 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>javax.crypto</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-3292"></a><a name="INDEX-3293"></a>
  This abstract class defines the service-provider interface for
  <tt class="literal">KeyGenerator</tt>. A cryptographic provider must
  implement a concrete subclass of this class for each key-generation
  algorithm it supports. Applications never need to use or subclass
  this class. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public abstract class <b class="classname">KeyGeneratorSpi</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">KeyGeneratorSpi</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected abstract SecretKey <b class="function">engineGenerateKey</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected abstract void <b class="function">engineInit</b> (java.security.SecureRandom <i class="parameter">random</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected abstract void <b class="function">engineInit</b> (java.security.spec.AlgorithmParameterSpec <i class="parameter">params</i>, java.security.SecureRandom <i class="parameter">random</i>) throws java.security.InvalidAlgorithmParameterException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected abstract void <b class="function">engineInit</b> (int <i class="parameter">keysize</i>, java.security.SecureRandom <i class="parameter">random</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">KeyGenerator.KeyGenerator()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>Mac</b></font></td><td align="right"><font size="+1"><b>JCE 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>javax.crypto</b></font></td><td align="right"><font size="+1"><b><i>cloneable</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-3294"></a><a name="INDEX-3295"></a><a name="INDEX-3296"></a><a name="INDEX-3297"></a>

  This class defines an API for computing a <em class="emphasis">message authentication code</em>
  (MAC) that can check the integrity of information
  transmitted between two parties that share a secret key. A MAC is
  similar to a digital signature, except that it is generated with a
  secret key rather than with a public/private key pair. The
  <tt class="literal">Mac</tt> class is algorithm-independent and
  provider-based. Obtain a <tt class="literal">Mac</tt> object by calling one
  of the static <tt class="literal">getInstance()</tt> factory methods and
  specifying the name of the desired MAC algorithm and, optionally, the
  name of the provider of the desired implementation. The "SunJCE"
  provider implements two algorithms: "HmacMD5" and "HmacSHA1". These
  are MAC algorithms based on the MD5 and SHA-1 cryptographic hash
  functions. </p>
<p>
<a name="INDEX-3298"></a>
  After obtaining a <tt class="literal">Mac</tt> object, initialize it by
  calling the <tt class="literal">init()</tt> method and specifying a
  <tt class="literal">SecretKey</tt> and, optionally, a
  <tt class="literal">java.security.spec.AlgorithmParameterSpec</tt> object. The "HmacMD5" and "HmacSHA1" algorithms can use any kind of
  <tt class="literal">SecretKey</tt>; they are not restricted to a particular
  cryptographic algorithm. And neither algorithm requires an
  <tt class="literal">AlgorithmParameterSpec</tt> object. </p>
<p>
<a name="INDEX-3299"></a><a name="INDEX-3300"></a>
  After obtaining and initializing a <tt class="literal">Mac</tt> object,
  specify the data for which the MAC is to be computed. If the data is
  contained in a single byte array, simply pass it to
  <tt class="literal">doFinal()</tt>. If the data is streaming or is stored
  in various locations, you can supply the data in multiple calls
  to <tt class="literal">update()</tt>. End the series of
  <tt class="literal">update()</tt> calls with a single call to
  <tt class="literal">doFinal()</tt>. Note that some versions of
  <tt class="literal">doFinal()</tt> return the MAC data as the function
  return value. Another version stores the MAC data in a byte array
  you supply. If you use this version of
  <tt class="literal">doFinal()</tt>, be sure to call
  <tt class="literal">getMacLength()</tt> to instantiate an array
  of the correct length. </p>
<p>
<a name="INDEX-3301"></a>
  A call to <tt class="literal">doFinal()</tt> resets the internal state of a
  <tt class="literal">Mac</tt> object. If you want to compute a MAC for part
  of your data and then proceed to compute the MAC for the full data,
  you should <tt class="literal">clone()</tt> the <tt class="literal">Mac</tt>
  object before calling <tt class="literal">doFinal()</tt>. Note, however,
  that <tt class="literal">Mac</tt> implementations are not required to
  implement <tt class="literal">Cloneable</tt>. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">Mac</b> implements Cloneable {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected <b class="function">Mac</b> (MacSpi <i class="parameter">macSpi</i>, java.security.Provider <i class="parameter">provider</i>, String <i class="parameter">algorithm</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Class Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final Mac <b class="function">getInstance</b> (String <i class="parameter">algorithm</i>) throws java.security.NoSuchAlgorithmException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final Mac <b class="function">getInstance</b> (String <i class="parameter">algorithm</i>, String <i class="parameter">provider</i>) throws java.security.NoSuchAlgorithmExceptionjava.security.NoSuchProviderException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final byte[ ] <b class="function">doFinal</b> () throws java.lang.IllegalStateException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final byte[ ] <b class="function">doFinal</b> (byte[ ] <i class="parameter">input</i>) throws java.lang.IllegalStateException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final void <b class="function">doFinal</b> (byte[ ] <i class="parameter">output</i>, int <i class="parameter">outOffset</i>) throws ShortBufferExceptionjava.lang.IllegalStateException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final String <b class="function">getAlgorithm</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final int <b class="function">getMacLength</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final java.security.Provider <b class="function">getProvider</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final void <b class="function">init</b> (java.security.Key <i class="parameter">key</i>) throws java.security.InvalidKeyException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final void <b class="function">init</b> (java.security.Key <i class="parameter">key</i>, java.security.spec.AlgorithmParameterSpec <i class="parameter">params</i>) throws java.security.InvalidKeyExceptionjava.security.InvalidAlgorithmParameterException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final void <b class="function">reset</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final void <b class="function">update</b> (byte[ ] <i class="parameter">input</i>) throws java.lang.IllegalStateException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final void <b class="function">update</b> (byte <i class="parameter">input</i>) throws java.lang.IllegalStateException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final void <b class="function">update</b> (byte[ ] <i class="parameter">input</i>, int <i class="parameter">offset</i>, int <i class="parameter">len</i>) throws java.lang.IllegalStateException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Object</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final Object <b class="function">clone</b> () throws CloneNotSupportedException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Mac(Cloneable)</tt>
</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">Mac.getInstance()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>MacSpi</b></font></td><td align="right"><font size="+1"><b>JCE 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>javax.crypto</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-3302"></a><a name="INDEX-3303"></a>
  This abstract class defines the service-provider interface for
  <tt class="literal">Mac</tt>. A cryptographic provider must
  implement a concrete subclass of this class for each MAC algorithm it supports. Applications never
  need to use or subclass this class. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public abstract class <b class="classname">MacSpi</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">MacSpi</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Object</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Object <b class="function">clone</b> () throws CloneNotSupportedException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected abstract byte[ ] <b class="function">engineDoFinal</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected abstract int <b class="function">engineGetMacLength</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected abstract void <b class="function">engineInit</b> (java.security.Key <i class="parameter">key</i>, java.security.spec.AlgorithmParameterSpec <i class="parameter">params</i>) throws java.security.InvalidKeyExceptionjava.security.InvalidAlgorithmParameterException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected abstract void <b class="function">engineReset</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected abstract void <b class="function">engineUpdate</b> (byte <i class="parameter">input</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected abstract void <b class="function">engineUpdate</b> (byte[ ] <i class="parameter">input</i>, int <i class="parameter">offset</i>, int <i class="parameter">len</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">Mac.Mac()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>NoSuchPaddingException</b></font></td><td align="right"><font size="+1"><b>JCE 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>javax.crypto</b></font></td><td align="right"><font size="+1"><b><i>serializable checked</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-3304"></a><a name="INDEX-3305"></a>
  Signals that no implementation of the requested padding scheme can be
  found. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">NoSuchPaddingException</b> extends java.security.GeneralSecurityException {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">NoSuchPaddingException</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">NoSuchPaddingException</b> (String <i class="parameter">msg</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Exception-->java.security.GeneralSecurityException-->NoSuchPaddingException</tt>
</p>
<p>
<span class="refsect1">Thrown By: </span><tt class="literal">Cipher.getInstance(), CipherSpi.engineSetPadding()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>NullCipher</b></font></td><td align="right"><font size="+1"><b>JCE 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>javax.crypto</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-3306"></a><a name="INDEX-3307"></a>
  This trivial subclass of <tt class="literal">Cipher</tt> implements an
  identity cipher that does not transform plain text in any way. Unlike <tt class="literal">Cipher</tt> objects returned by
  <tt class="literal">Cipher.getInstance()</tt>, a
  <tt class="literal">NullCipher</tt> must be created with the
  <tt class="literal">NullCipher()</tt> constructor. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">NullCipher</b> extends Cipher {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">NullCipher</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Cipher-->NullCipher</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>SealedObject</b></font></td><td align="right"><font size="+1"><b>JCE 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>javax.crypto</b></font></td><td align="right"><font size="+1"><b><i>serializable</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-3308"></a><a name="INDEX-3309"></a><a name="INDEX-3310"></a>
  This class is a wrapper around a serializable object. It serializes
  the object and encrypts the resulting data stream, thereby protecting
  the confidentiality of the object. Create a
  <tt class="literal">SealedObject</tt> by specifying the object to be sealed
  and a <tt class="literal">Cipher</tt> object to perform the encryption. Retrieve the sealed object by calling <tt class="literal">getObject()</tt>
  and specifying the <tt class="literal">Cipher</tt> or
  <tt class="literal">java.security.Key</tt> to use for decryption. The
  <tt class="literal">SealedObject</tt> keeps track of the encryption
  algorithm and parameters so that a <tt class="literal">Key</tt> object
  alone can decrypt the object. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">SealedObject</b> implements Serializable {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">SealedObject</b> (Serializable <i class="parameter">object</i>, Cipher <i class="parameter">c</i>) throws java.io.IOExceptionIllegalBlockSizeException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final String <b class="function">getAlgorithm</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final Object <b class="function">getObject</b> (java.security.Key <i class="parameter">key</i>) throws java.io.IOExceptionClassNotFoundExceptionjava.security.NoSuchAlgorithmExceptionjava.security.InvalidKeyException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final Object <b class="function">getObject</b> (Cipher <i class="parameter">c</i>) throws java.io.IOExceptionClassNotFoundExceptionIllegalBlockSizeExceptionBadPaddingException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final Object <b class="function">getObject</b> (java.security.Key <i class="parameter">key</i>, String <i class="parameter">provider</i>) throws java.io.IOExceptionClassNotFoundExceptionjava.security.NoSuchAlgorithmExceptionjava.security.NoSuchProviderExceptionjava.security.InvalidKeyException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->SealedObject(Serializable)</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>SecretKey</b></font></td><td align="right"><font size="+1"><b>JCE 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>javax.crypto</b></font></td><td align="right"><font size="+1"><b><i>serializable</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-3311"></a><a name="INDEX-3312"></a>

  This interface represents a secret key used for symmetric
  cryptographic algorithms that depend on both the sender and receiver
  knowing the same secret. <tt class="literal">SecretKey</tt> extends the
  <tt class="literal">java.security.Key</tt> interface, but does not add any
  new methods. The interface exists in order to keep secret keys
  distinct from the public and private keys used in public-key, or
  asymmetric, cryptography. See also
  <tt class="literal">java.security.PublicKey</tt> and
  <tt class="literal">java.security.PrivateKey</tt>. </p>
<p>
<a name="INDEX-3313"></a>

  A secret key is nothing more than arrays of bytes and does not require
  a specialized encoding format. Therefore, an implementation of this
  interface should return the format name "RAW" from
  <tt class="literal">getFormat()</tt> and should return the bytes of the key
  from <tt class="literal">getEncoded()</tt>. (These two methods are defined
  by the <tt class="literal">java.security.Key</tt> interface that
  <tt class="literal">SecretKey</tt> extends.)</p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public abstract interface <b class="classname">SecretKey</b> extends java.security.Key {</td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">(SecretKey(java.security.Key(Serializable)))</tt>
</p>
<p>
<span class="refsect1">Implementations: </span><tt class="literal">javax.crypto.spec.SecretKeySpec</tt>
</p>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">SecretKeyFactory.{getKeySpec(), translateKey()}, SecretKeyFactorySpi.{engineGetKeySpec(), engineTranslateKey()}</tt>
</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">KeyAgreement.generateSecret(), KeyAgreementSpi.engineGenerateSecret(), KeyGenerator.generateKey(), KeyGeneratorSpi.engineGenerateKey(), SecretKeyFactory.{generateSecret(), translateKey()}, SecretKeyFactorySpi.{engineGenerateSecret(), engineTranslateKey()}</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>SecretKeyFactory</b></font></td><td align="right"><font size="+1"><b>JCE 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>javax.crypto</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-3314"></a><a name="INDEX-3315"></a><a name="INDEX-3316"></a><a name="INDEX-3317"></a>
  This class defines an API for translating a secret key between its
  opaque <tt class="literal">SecretKey</tt> representation and its
  transparent <tt class="literal">javax.crypto.SecretKeySpec</tt>
  representation. It is much like
  <tt class="literal">java.security.KeyFactory</tt>, except that it works with
  secret (or symmetric) keys rather than with public and private
  (asymmetric) keys. <tt class="literal">SecretKeyFactory</tt> is
  algorithm-independent and provider-based, so you must obtain a
  <tt class="literal">SecretKeyFactory</tt> object by calling one of the
  static <tt class="literal">getInstance()</tt> factory methods and specifying
  the name of the desired secret-key algorithm and, optionally, the name
  of the provider whose implementation is desired. The "SunJCE"
  provider provides <tt class="literal">SecretKeyFactory</tt> implementations
  for the "DES", "DESede", and "PBEWithMD5AndDES" algorithms. </p>
<p>
<a name="INDEX-3318"></a><a name="INDEX-3319"></a>
  Once you have obtained a <tt class="literal">SecretKeyFactory</tt>, use
  <tt class="literal">generateSecret()</tt> to create a
  <tt class="literal">SecretKey</tt> from a
  <tt class="literal">java.security.spec.KeySpec</tt> (or its subclass,
  <tt class="literal">javax.crypto.spec.SecretKeySpec</tt>). Or call
  <tt class="literal">getKeySpec()</tt> to obtain a <tt class="literal">KeySpec</tt>
  for a <tt class="literal">Key</tt> object. Because there can be more than
  one suitable type of <tt class="literal">KeySpec</tt>,
  <tt class="literal">getKeySpec()</tt> requires a <tt class="literal">Class</tt>
  object to specify the type of the <tt class="literal">KeySpec</tt> to be
  created. See also <tt class="literal">DESKeySpec</tt>,
  <tt class="literal">DESedeKeySpec</tt>, and <tt class="literal">PBEKeySpec</tt> in
  the <tt class="literal">javax.crypto.spec</tt> package. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">SecretKeyFactory</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected <b class="function">SecretKeyFactory</b> (SecretKeyFactorySpi <i class="parameter">keyFacSpi</i>, java.security.Provider <i class="parameter">provider</i>, String <i class="parameter">algorithm</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Class Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final SecretKeyFactory <b class="function">getInstance</b> (String <i class="parameter">algorithm</i>) throws java.security.NoSuchAlgorithmException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final SecretKeyFactory <b class="function">getInstance</b> (String <i class="parameter">algorithm</i>, String <i class="parameter">provider</i>) throws java.security.NoSuchAlgorithmExceptionjava.security.NoSuchProviderException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final SecretKey <b class="function">generateSecret</b> (java.security.spec.KeySpec <i class="parameter">keySpec</i>) throws java.security.spec.InvalidKeySpecException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final String <b class="function">getAlgorithm</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final java.security.spec.KeySpec <b class="function">getKeySpec</b> (SecretKey <i class="parameter">key</i>, Class <i class="parameter">keySpec</i>) throws java.security.spec.InvalidKeySpecException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final java.security.Provider <b class="function">getProvider</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final SecretKey <b class="function">translateKey</b> (SecretKey <i class="parameter">key</i>) throws java.security.InvalidKeyException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">SecretKeyFactory.getInstance()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>SecretKeyFactorySpi</b></font></td><td align="right"><font size="+1"><b>JCE 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>javax.crypto</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-3320"></a><a name="INDEX-3321"></a>
  This abstract class defines the service-provider interface for
  <tt class="literal">SecretKeyFactory</tt>. A cryptographic provider
  must implement a concrete subclass of this class for each type of
  secret key it supports. Applications never need to use or subclass
  this class. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public abstract class <b class="classname">SecretKeyFactorySpi</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">SecretKeyFactorySpi</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected abstract SecretKey <b class="function">engineGenerateSecret</b> (java.security.spec.KeySpec <i class="parameter">keySpec</i>) throws java.security.spec.InvalidKeySpecException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected abstract java.security.spec.KeySpec <b class="function">engineGetKeySpec</b> (SecretKey <i class="parameter">key</i>, Class <i class="parameter">keySpec</i>) throws java.security.spec.InvalidKeySpecException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected abstract SecretKey <b class="function">engineTranslateKey</b> (SecretKey <i class="parameter">key</i>) throws java.security.InvalidKeyException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">SecretKeyFactory.SecretKeyFactory()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>ShortBufferException</b></font></td><td align="right"><font size="+1"><b>JCE 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>javax.crypto</b></font></td><td align="right"><font size="+1"><b><i>serializable checked</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-3322"></a>
  Signals that an output buffer is too short to hold the results of an
  operation. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">ShortBufferException</b> extends java.security.GeneralSecurityException {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">ShortBufferException</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">ShortBufferException</b> (String <i class="parameter">msg</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Exception-->java.security.GeneralSecurityException-->ShortBufferException</tt>
</p>
<p>
<span class="refsect1">Thrown By: </span><tt class="literal">Cipher.{doFinal(), update()}, CipherSpi.{engineDoFinal(), engineUpdate()}, KeyAgreement.generateSecret(), KeyAgreementSpi.engineGenerateSecret(), Mac.doFinal()</tt>
</p>
</div>
<a name="INDEX-3323"></a>
<a name="INDEX-3324"></a>
<a name="INDEX-3325"></a>


<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch25_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch25_01.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch27_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch27_01.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">25.1. The java.util.zip Package</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">27. The javax.crypto.interfaces Package</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
