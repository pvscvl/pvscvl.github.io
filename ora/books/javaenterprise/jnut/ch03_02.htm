<html>
<head>
<title>Creating and Initializing Objects (Java in a Nutshell)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="David Flanagan">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-487-8E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Creating and Initializing Objects">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm" alt="Java Enterprise in a Nutshell"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch03_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch03_01.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch03_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch03_01.htm">Chapter 3: Object-Oriented Programming in Java</a></td><td align="right" valign="top" width="172"><a href="ch03_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch03_03.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY --><h2 class="sect1">3.2. Creating and Initializing Objects</h2>
<p>
<a name="INDEX-429"></a><a name="INDEX-430"></a><a name="INDEX-431"></a>

      Take another look at how we've been creating
      <tt class="literal">Circle</tt> objects:
</p>
<blockquote>
<pre class="programlisting">Circle c = new Circle();</pre>
</blockquote>
<p>
      What are those parentheses doing there?  They make it look like
      we're calling a method. In fact, that is exactly what we're doing. Every class in Java has at least one
      <em class="emphasis">constructor</em>, which is a method that has the 
      same name as the class and whose purpose is to perform any necessary
      initialization for a new object. Since we didn't explicitly define a constructor for our
      <tt class="literal">Circle</tt> class in <a href="ch03_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch03_01.htm">Example 3-1</a>, 
      Java gave us a default constructor that takes no arguments
      and performs no special initialization. </p>
<p>      Here's how a constructor works. The <tt class="literal">new</tt> operator
      creates a new, but uninitialized, instance of the class. The
      constructor method is then called, with the new object passed
      implicitly (a <tt class="literal">this</tt> reference, as we saw earlier),
      and whatever arguments that are specified between parentheses
      passed explicitly. The constructor can use these arguments
      to do whatever initialization is necessary. </p>
<h3 class="sect2">3.2.1. Defining a Constructor</h3>
<p>	There is some obvious initialization we could do for our circle
	objects, so let's define a constructor. <a href="#javanut3-ch-3-ex-firstconstructor">Example 3-2</a> shows a new
	definition for <tt class="literal">Circle</tt> that contains a constructor
	that lets us specify the radius of a new
	<tt class="literal">Circle</tt> object. The constructor also uses the <tt class="literal">this</tt> reference to distinguish
	between a method parameter and an instance field that have the
	same name. </p>
<a name="javanut3-ch-3-ex-firstconstructor"></a>
<div class="example">
<h4 class="objtitle">Example 3-2. A Constructor for the Circle Class</h4>
<blockquote>
<pre class="programlisting">public class Circle {
    public static final double PI = 3.14159;  // A constant
    public double r;   // An instance field that holds the radius of the circle

    // The constructor method: initialize the radius field
    public Circle(double r) { this.r = r; }   

    // The instance methods: compute values based on the radius
    public double circumference() { return 2 * PI * r; }
    public double area() { return PI * r*r; }
}</pre>
</blockquote>
</div>
<p>	When we relied on the default constructor supplied by the
	compiler, we had to write code like this to 
	initialize the radius explicitly:

</p>
<blockquote>
<pre class="programlisting">Circle c = new Circle();
c.r = 0.25;</pre>
</blockquote>
<p>

	With this new constructor, the initialization becomes part of the
	object creation step:

</p>
<blockquote>
<pre class="programlisting">Circle c = new Circle(0.25);</pre>
</blockquote>
<p>	Here are some important notes about naming, declaring, and
	writing constructors: 
      </p>
<ul>
<li>
<p>	    The constructor name is always the same as the class name. </p>
</li>
<li>
<p> 
	    Unlike all other methods, a constructor is declared without
	    a return type, not even <tt class="literal">void</tt>. </p>
</li>
<li>
<p>	    The body of a constructor should initialize the
	    <tt class="literal">this</tt> object. </p>
</li>
<li>
<p>	  A constructor should not return
	  <tt class="literal">this</tt> or any other value. </p>
</li>
</ul>
<h3 class="sect2">3.2.2. Defining Multiple Constructors</h3>
<p>	Sometimes you want to initialize an object in a
	number of different ways, depending on what is most convenient
	in a particular circumstance. For example, we might want to initialize the radius of a circle to a specified value
	or a reasonable default value. Since
	our <tt class="literal">Circle</tt> class has only a single instance
	field, there aren't too many ways we can initialize it, of
	course. But in more complex classes, it is often convenient to
	define a variety of constructors. Here's how we can define
	two constructors for <tt class="literal">Circle</tt>:
</p>
<blockquote>
<pre class="programlisting">public Circle() { r = 1.0; }
public Circle(double r) { this.r = r; }</pre>
</blockquote>
<p>	It is perfectly legal to define multiple constructors for a
	class, as long as each constructor has a different parameter
	list. The compiler determines which constructor you wish based
	on the number and type of arguments you supply. This is simply an
	example of method overloading, which we discussed in
	<a href="ch02_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch02_01.htm">Chapter 2, "Java Syntax

from the Ground Up"</a>. </p>
<h3 class="sect2">3.2.3. Invoking One Constructor from Another</h3>
<p>	There is a specialized use of the <tt class="literal">this</tt>
	keyword that arises when a class has multiple
	constructors; it can be used from a constructor to invoke
	one of the other constructors of the same class. In other words,
	we can rewrite the two previous <tt class="literal">Circle</tt> 
	constructors as follows: 
      </p>
<blockquote>
<pre class="programlisting">// This is the basic constructor: initialize the radius
public Circle(double r) { this.r = r; }
// This constructor uses this() to invoke the constructor above
public Circle() { this(1.0); }</pre>
</blockquote>
<p>	The <tt class="literal">this()</tt> syntax is a method invocation that
	calls one of the other constructors of the class. The
	particular constructor that is invoked is determined by the number and
	type of arguments, of course. This is a useful technique when
	a number of constructors share a significant amount of
	initialization code, as it avoids repetition of that code. This would be a more impressive example, of course, if the
	one-parameter version of the <tt class="literal">Circle()</tt>
	constructor did more initialization than it does. </p>
<p>	There is an important restriction on using
	<tt class="literal">this()</tt>: it can appear only as the first
	statement in a constructor. It may, of course, be followed by
	any additional initialization a particular version of the
	constructor needs to do. The reason for this restriction
	involves the automatic invocation of superclass constructor
	methods, which we'll explore later in this chapter.
<a name="INDEX-432"></a>
</p>
<h3 class="sect2">3.2.4. Field Defaults and Initializers</h3>
<p>
<a name="INDEX-433"></a><a name="INDEX-434"></a>

	Not every field of a class requires initialization. Unlike local variables, which have
	no default value and cannot be used until explicitly
	initialized, the fields of a class are automatically initialized
	to the default values shown in 
	<a href="ch02_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch02_04.htm">Table 3-2</a>. Essentially, every
	field of a primitive type is initialized to a default value of
	<tt class="literal">false</tt> or zero, as appropriate. All fields of reference type
	are, by default, initialized to <tt class="literal">null</tt>. These
	default values are guaranteed by Java. If the default value
	of a field is appropriate, you can simply rely on it without
	explicitly initializing the field. This default initialization
	applies to both instance fields and class fields. </p>
<p>	As we've seen, the syntax for declaring a field of a class is a
	lot like the syntax for declaring a local variable. Both class
	and instance field declarations can be followed by an equals
	sign and an initial value, as in:
</p>
<blockquote>
<pre class="programlisting">public static final double PI = 3.14159;
public double r = 1.0;</pre>
</blockquote>
<p>
	As we discussed in <a href="ch02_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch02_01.htm">Chapter 2, "Java Syntax

from the Ground Up"</a>, a
	variable declaration is a statement that appears within a Java
	method; the variable initialization is performed when the
	statement is executed. Field declarations, however, are not part
	of any method, so they cannot be executed as statements are. Instead, the Java compiler generates instance-field
	initialization code automatically and puts it in 
	the constructor or constructors for the
	class. The initialization code is inserted into a constructor
	in the order it appears in the source code, which means
	that a field initializer can use the initial values of fields
	declared before it. Consider the following code excerpt,
	which shows a constructor and two instance fields of a
	hypothetical class:
</p>
<blockquote>
<pre class="programlisting">public class TestClass {
  ... public int len = 10;
  public int[] table = new int[len];

  public TestClass() { 
    for(int i = 0; i &lt; len; i++) table[i] = i;
  }

  // Rest of the class is omitted... 
}</pre>
</blockquote>
<p>
	In this case, the code generated for the constructor is actually
	equivalent to the following:
</p>
<blockquote>
<pre class="programlisting">public TestClass() { 
  len = 10;
  table = new int[len];
  for(int i = 0; i &lt; len; i++) table[i] = i;
}</pre>
</blockquote>
<p>	If a constructor begins with a
	<tt class="literal">this()</tt> call to another constructor, the
	field initialization code does not appear in the first constructor. Instead, the initialization is handled in the constructor invoked
	by the <tt class="literal">this()</tt> call. </p>
<p>	So, if instance fields are initialized in constructor
	methods, where are class fields initialized?  These fields are
	associated with the class, even if no instances of the class are
	ever created, so they need to be initialized even before a
	constructor is called. To support this, the 
	Java compiler
	generates a class initialization method automatically for every class. Class fields are initialized in the body of this method, which
	is guaranteed to be invoked exactly once before the class is
	first used (often when the class is first loaded). As with
	instance field initialization, class field initialization
	expressions are inserted into the class initialization method in
	the order they appear in the source code. This means
	that the initialization expression for a class field can use the
	class fields declared before it. The class
	initialization method is an internal method that is hidden from
	Java programmers. If you disassemble the byte codes in a Java
	class file, however, you'll see the class initialization code in
	a method named <tt class="literal">&lt;clinit&gt;</tt>. </p>
<h3 class="sect3">3.2.4.1. Initializer blocks</h3>
<p>	  So far, we've seen that objects can be initialized through the
	  initialization expressions for their fields and by
	  arbitrary code in their constructor methods. A class has a
	  class initialization method, which is like a constructor, but
	  we cannot explicitly define the body of this method as we can
	  for a constructor. Java does allow us to write
	  arbitrary code for the initialization of class fields, however,
	  with a
	  construct known as a <em class="emphasis">static initializer</em>. A static initializer is simply the keyword
	  <tt class="literal">static</tt> followed by a block of code in curly
	  braces. A static initializer can appear in a class definition
	  anywhere a field or method definition can appear. For
	  example, consider the following code that performs some
	  nontrivial initialization for two class fields:
</p>
<blockquote>
<pre class="programlisting">// We can draw the outline of a circle using trigonometric functions
// Trigonometry is slow, though, so we precompute a bunch of values
public class TrigCircle {
  // Here are our static lookup tables and their own simple initializers
  private static final NUMPTS = 500;
  private static double sines[] = new double[NUMPTS];
  private static double cosines[] = new double[NUMPTS];

  // Here's a static initializer that fills in the arrays 
  static {
    double x = 0.0, delta_x;
    delta_x = (Circle.PI/2)/(NUMPTS-1);
    for(int i = 0, x = 0.0; i &lt; NUMPTS; i++, x += delta_x) {
      sines[i] = Math.sin(x);
      cosines[i] = Math.cos(x);
    }
  }
  // The rest of the class is omitted... }</pre>
</blockquote>
<p>
</p>
<p>	  A class can have any number of static initializers. The body
	  of each initializer block is incorporated into the class
	  initialization method, along with any static field
	  initialization expressions. A static initializer is
	  like a class method in that it cannot use the
	  <tt class="literal">this</tt> keyword or any
	  instance fields or instance methods of the class. </p>
<p>	  In Java 1.1 and later, classes are also allowed to have
	  instance initializers. An instance initializer is like a
	  static initializer, except that it initializes an object, not a
	  class. A class can have any number of instance initializers, and
	  they can appear anywhere a field or method definition can
	  appear. The body of each instance initializer is inserted 
	  at the beginning of every constructor for the class, along
	  with any field initialization expressions. An instance initializer looks just like a
	  static initializer, except that it doesn't use the
	  <tt class="literal">static</tt> keyword. In other words, an instance
	  initializer is just a block of arbitrary Java code that
	  appears within curly braces. </p>
<p>	  Instance initializers can initialize arrays or
	  other fields that require complex initialization. They are
	  sometimes useful because they locate the initialization
	  code right next to the field, instead of separating it off in
	  a constructor method. For example:
</p>
<blockquote>
<pre class="programlisting">private static finale int NUMPTS = 100;
private int[] data = new int[NUMPTS];
{ for(int i = 0; i &lt; NUMPTS; i++) data[i] = i; }</pre>
</blockquote>
<p>
	  In practice, however, this use of instance initializers is 
	  fairly rare. Instance initializers were introduced
	  in Java to support anonymous inner classes, and that is
	  their main utility (we'll discuss anonymous inner classes
	  later in this chapter).
<a name="INDEX-435"></a><a name="INDEX-436"></a><a name="INDEX-437"></a><a name="INDEX-438"></a>
</p>

<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch03_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch03_01.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch03_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch03_03.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">3.1. The Members of a Class</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">3.3. Destroying and Finalizing Objects</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
