<html>
<head>
<title>Member Classes (Java in a Nutshell)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="David Flanagan">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-487-8E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Member Classes">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm" alt="Java Enterprise in a Nutshell"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch03_09.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch03_09.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch03_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch03_01.htm">Chapter 3: Object-Oriented Programming in Java</a></td><td align="right" valign="top" width="172"><a href="ch03_11.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch03_11.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY --><h2 class="sect1">3.10. Member Classes</h2>
<p>
<a name="INDEX-535"></a><a name="INDEX-536"></a>

      A <em class="emphasis">member class</em> is a class that is declared as a
      non-<tt class="literal">static</tt> member of a containing class. If a
      static member class is analogous to a class field or class method,
      a member class is analogous to an instance field or 
      instance method. <a href="#javanut3-ch-3-ex-membercl">Example 3-9</a> shows
      how a member class can be defined and used. This example extends
      the previous <tt class="literal">LinkedStack</tt> example to allow
      enumeration of the elements on the stack by
      defining an <tt class="literal">enumerate()</tt> method that returns an
      implementation of the <tt class="literal">java.util.Enumeration</tt>
      interface. The implementation of this interface is defined as a
      member class. </p>
<a name="javanut3-ch-3-ex-membercl"></a>
<div class="example">
<h4 class="objtitle">Example 3-9. An Enumeration Implemented as a Member Class</h4>
<blockquote>
<pre class="programlisting">public class LinkedStack {
  // Our static member interface; body omitted here... 
  public static interface Linkable { ... }

  // The head of the list
  private Linkable head;  

  // Method bodies omitted here
  public void push(Linkable node) { ... }
  public Linkable pop() { ... }

  // This method returns an Enumeration object for this LinkedStack
public java.util.Enumeration enumerate() { return new Enumerator(); }

  // Here is the implementation of the Enumeration interface,
  // defined as a member class. 
  protected class Enumerator implements java.util.Enumeration {
    Linkable current;
    // The constructor uses the private head field of the containing class
public Enumerator() { current = head; }
    public boolean hasMoreElements() {  return (current != null); }
    public Object nextElement() {
      if (current == null) throw new java.util.NoSuchElementException();
      Object value = current;
      current = current.getNext();
      return value;
    }
  }
}</pre>
</blockquote>
</div>
<p>      Notice how the
      <tt class="literal">Enumerator</tt> class is nested within the
      <tt class="literal">LinkedStack</tt> class. Since
      <tt class="literal">Enumerator</tt> is a helper class used only
      within <tt class="literal">LinkedStack</tt>, there
      is a real elegance to having it defined 
      so close to where it is used by the
      containing class. </p>
<h3 class="sect2">3.10.1. Features of Member Classes</h3>
<p>	Like instance fields and instance methods, every member class is
	associated with an instance of the class within which it is
	defined (i.e., every instance of a member class is
	associated with an instance of the containing class). This
	means that the code of a member class has access to all the
	instance fields and instance methods (as well as the
	<tt class="literal">static</tt> members) of the containing class,
	including any that are declared <tt class="literal">private</tt>. </p>
<p>	This crucial feature is illustrated in <a href="#javanut3-ch-3-ex-membercl">Example 3-9</a>. Here is the body of the 
	<tt class="literal">LinkedStack.Enumerator()</tt> constructor again:
</p>
<blockquote>
<pre class="programlisting">current = head;</pre>
</blockquote>
<p>
	This single line of code sets the 
	<tt class="literal">current</tt> field of the inner class
	to the value of the <tt class="literal">head</tt> field of
	the containing class. The code works as shown, even
	though <tt class="literal">head</tt> is declared as a
	<tt class="literal">private</tt> field in the containing class. </p>
<p>	A member class, like any member of a class, can be assigned one
	of three visibility levels: <tt class="literal">public</tt>,
	<tt class="literal">protected</tt>, or <tt class="literal">private</tt>. If
	none of these visibility modifiers is specified, the default
	package visibility is used. In <a href="#javanut3-ch-3-ex-membercl">Example 3-9</a>, the
	<tt class="literal">Enumerator</tt> class is declared
	<tt class="literal">protected</tt>, so it is inaccessible to
	code using the <tt class="literal">LinkedStack</tt> class, but
	accessible to any class that subclasses 
	<tt class="literal">LinkedStack</tt>. </p>
<h3 class="sect2">3.10.2. Restrictions on Member Classes</h3>
<p>
<a name="INDEX-537"></a>

	There are three important restrictions on member classes:

      </p>
<ul>
<li>
<p>	    A member class cannot have the same name as any containing
	    class or package. This is an important rule, and one not shared by fields and methods. </p>
</li>
<li>
<p>	    Member classes cannot contain any 
	    <tt class="literal">static</tt> fields,
	    methods, or classes (with the exception of
	    constant fields declared both <tt class="literal">static</tt>
	    and <tt class="literal">final</tt>). <tt class="literal">static</tt> fields, methods,
	    and classes are top-level constructs not associated
	    with any particular object, while every member class is
	    associated with an instance of its enclosing class. Defining a <tt class="literal">static</tt> top-level member within
	    a non-top-level member class simply promotes confusion and
	    bad programming style, so you are required to define all
	    static members within a top-level or static member class or
	    interface. </p>
</li>
<li>
<p>	    Interfaces cannot be defined as member classes. An 
	    interface cannot be instantiated, so there is no object 
	    to associate with an
	    instance of the enclosing class. If you declare an interface as
	    a member of a class, the interface is implicitly
	    <tt class="literal">static</tt>, making it a static member class. </p>
</li>
</ul>
<h3 class="sect2">3.10.3. New Syntax for Member Classes</h3>
<p>	The most important feature of a member class is that it can
	access the instance fields and methods in its containing object. We saw this in the <tt class="literal">LinkedStack.Enumerator()</tt>
	constructor of <a href="#javanut3-ch-3-ex-membercl">Example 3-9</a>:
</p>
<blockquote>
<pre class="programlisting">public Enumerator() { current = head; }</pre>
</blockquote>
<p>	In this example, <tt class="literal">head</tt> is a field of the
	<tt class="literal">LinkedStack</tt> class, and we assign it to the
	<tt class="literal">current</tt> field of the
	<tt class="literal">Enumerator</tt> class. The current code works, but
	what if we want to make
	these references explicit?  We could try code like this:
</p>
<blockquote>
<pre class="programlisting">public Enumerator() { this.current = this.head; }</pre>
</blockquote>
<p>	This code does not compile, however. <tt class="literal">this.current</tt> is fine; it is an explicit
	reference to the <tt class="literal">current</tt> field in the newly
	created <tt class="literal">Enumerator</tt> object. It is the
	<tt class="literal">this.head</tt> expression that causes the
	problem; it refers to a field named <tt class="literal">head</tt>
	in the <tt class="literal">Enumerator</tt> object. Since there is no such
	field, the compiler generates an error. To solve this problem,
	Java defines a special syntax for
	explicitly referring to the containing instance of the
	<tt class="literal">this</tt> object. Thus, if we want to be explicit in
	our constructor, we can use the following syntax:
</p>
<blockquote>
<pre class="programlisting">public Enumerator() { this.current = LinkedStack.this.head; }</pre>
</blockquote>
<p>	The general syntax is
	<em class="replaceable">classname</em><tt class="literal">.this</tt>,
	where <em class="replaceable">classname</em> is the
	name of a containing class. Note that member classes can
	themselves contain member classes, nested to any depth. Since no
	member class can have the same name as any containing class,
        however, the use of the enclosing class name prepended to
	<tt class="literal">this</tt> is a perfectly general way to refer to
	any containing instance. This syntax is needed only
	when referring to a member of a containing class that is
	hidden by a member of the same name in the member class. </p>
<h3 class="sect3">3.10.3.1. Accessing superclass members of the containing class</h3>
<p>
<a name="INDEX-538"></a><a name="INDEX-539"></a>


	  When a class shadows or
	  overrides a member of its superclass, you can use the keyword
	  <tt class="literal">super</tt> to refer to the hidden member. This
	  <tt class="literal">super</tt> syntax can be extended to work with
	  member classes as well. On the rare occasion when you need
	  to refer to a shadowed field <tt class="literal">f</tt> or an
	  overridden method <tt class="literal">m</tt> of a superclass of a
	  containing class <tt class="literal">C</tt>, use the following
	  expressions:
</p>
<blockquote>
<pre class="programlisting">C.super.f
C.super.m()</pre>
</blockquote>
<p>
</p>
<p>	  This syntax was not implemented by Java 1.1 compilers, but it works
	  correctly as of Java 1.2. </p>
<h3 class="sect3">3.10.3.2. Specifying the containing instance</h3>
<p>
<a name="INDEX-540"></a>

	  As we've seen, every instance of
	  a member class is associated with an instance of its
	  containing class. Look again at our definition of
	  the <tt class="literal">enumerate()</tt> method in <a href="#javanut3-ch-3-ex-membercl">Example 3-9</a>:
</p>
<blockquote>
<pre class="programlisting">public Enumeration enumerate() { return new Enumerator(); }</pre>
</blockquote>
<p>
</p>
<p>	  When a member class constructor is invoked like this, the new
	  instance of the member class is automatically associated with
	  the <tt class="literal">this</tt> object. This is what you would
	  expect to happen and exactly what you want to occur in
	  most cases. Occasionally, however, you may want to 
	  specify the containing instance explicitly 
	  when instantiating a member
	  class. You can do this by preceding the
	  <tt class="literal">new</tt> operator with a reference to the
	  containing instance. Thus, the <tt class="literal">enumerate()</tt>
	  method shown above is shorthand for the following:

</p>
<blockquote>
<pre class="programlisting">public Enumeration enumerate() { return this.new Enumerator(); }</pre>
</blockquote>
<p>
</p>
<p>	  Let's pretend we didn't define an 
	  <tt class="literal">enumerate()</tt> method for 
	  <tt class="literal">LinkedStack</tt>. In this case, 
	  the code to obtain an
	  <tt class="literal">Enumerator</tt> object for a given
	  <tt class="literal">LinkedStack</tt> object might look like this:
</p>
<blockquote>
<pre class="programlisting">LinkedStack stack = new LinkedStack();    // Create an empty stack
Enumeration e = stack.new Enumerator();   // Create an Enumeration for it</pre>
</blockquote>
<p>
	  The containing instance implicitly specifies the
	  name of the containing class; it is a syntax error to
	  explicitly specify that containing class:
</p>
<blockquote>
<pre class="programlisting">Enumeration e = stack.new LinkedStack.Enumerator();  // Syntax error</pre>
</blockquote>
<p>
</p>
<p>	  There is one other special piece of Java syntax that specifies an enclosing instance for a member
	  class explicitly. Before we consider it, however, let me point out that
	  you should rarely, if ever, need to use this syntax. It is
	  one of the pathological cases that snuck into the language
	  along with all the elegant features of inner classes. </p>
<p>	  As strange as it may seem, it is possible for a top-level
	  class to extend a member class. This means that the subclass
	  does not have a containing instance, but its superclass
	  does. When the subclass constructor invokes the superclass
	  constructor, it must specify the containing instance. It does
	  this by prepending the containing instance and a period to the
	  <tt class="literal">super</tt> keyword. If we had not declared our
	  <tt class="literal">Enumerator</tt> class to be a
	  <tt class="literal">protected</tt> member of
	  <tt class="literal">LinkedStack</tt>, we could subclass it. Although it is not clear why we would want to do so, we could
	  write code like the following:
</p>
<blockquote>
<pre class="programlisting">// A top-level class that extends a member class
class SpecialEnumerator extends LinkedStack.Enumerator {
  // The constructor must explicitly specify a containing instance
  // when invoking the superclass constructor. 
  public SpecialEnumerator(LinkedStack s) { s.super(); }
    // Rest of class omitted... 
}</pre>
</blockquote>
<p>
</p>
<h3 class="sect2">3.10.4. Scope Versus Inheritance for Member Classes</h3>
<p>
<a name="INDEX-541"></a><a name="INDEX-542"></a><a name="INDEX-543"></a><a name="INDEX-544"></a><a name="INDEX-545"></a><a name="INDEX-546"></a><a name="INDEX-547"></a>

	We've just noted that a top-level class can extend a member class. With the introduction of
	member classes, there are two separate hierarchies that
	must be considered for any class. The first is the <em class="emphasis">class</em><em class="emphasis">hierarchy</em>, from superclass to subclass, that defines the fields
	and methods a member class inherits. The second is the
	<em class="emphasis">containment</em><em class="emphasis">hierarchy</em>, from containing class to contained class,
	that defines a set of fields and methods that are in the scope
	of (and are therefore accessible to) the member class. </p>
<p>	The two hierarchies are entirely distinct from each other;
	it is important that you do not confuse them. This
	should not be a problem if you refrain from creating naming
	conflicts, where a field or method in a superclass has the
	same name as a field or method in a containing class. If
	such a naming conflict does arise, however, the inherited
	field or method takes precedence over the field or
	method of the same name in the containing class. This behavior is logical: when a class inherits a field or
	method, that field or method effectively becomes part of
	that class. Therefore, inherited fields and methods are in
	the scope of the class that inherits them and take
	precedence over fields and methods by the same name in
	enclosing scopes. </p>
<p>	Because this can be quite confusing, Java does not leave it to
	chance that you get it right. Whenever there is a naming conflict
	between an inherited field or method and a field or method in a
	containing class, Java requires that you
	<em class="emphasis">explicitly</em> specify which one you mean. For
	example, if a member class <tt class="literal">B</tt> inherits a field
	named <tt class="literal">x</tt> and is contained within a class
	<tt class="literal">A</tt> that also defines a field named
	<tt class="literal">x</tt>, you must use <tt class="literal">this.x</tt> to
	specify the inherited field and <tt class="literal">A.this.x</tt> to
	specify the field in the containing class. Any attempt to use
	the field <tt class="literal">x</tt> without an explicit specification
	of the desired instance causes a compilation error. </p>
<p>	A good way to prevent confusion between the class hierarchy and
	the containment hierarchy is to avoid deep containment
	hierarchies. If a class is nested more than two levels deep, it
	is probably going to cause more confusion than it is worth. Furthermore, if a class has a deep class hierarchy (i.e., it
	has many superclass ancestors), consider defining it as a
	top-level class, rather than as a member class.
<a name="INDEX-548"></a><a name="INDEX-549"></a>
</p>

<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch03_09.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch03_09.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch03_11.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch03_11.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">3.9. Static Member Classes</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">3.11. Local Classes</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
