<html>
<head>
<title>Security for Everyone (Java in a Nutshell)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="David Flanagan">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-487-8E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Security for Everyone">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm" alt="Java Enterprise in a Nutshell"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch05_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch05_04.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch05_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch05_01.htm">Chapter 5: Java Security</a></td><td align="right" valign="top" width="172"><a href="ch05_06.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch05_06.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY --><h2 class="sect1">5.5. Security for Everyone</h2>
<p>
<a name="INDEX-883"></a><a name="INDEX-884"></a>

      Programmers, system administrators, and end users all have
      different security concerns and, thus, different roles to play in
      the Java 1.2 security architecture. </p>
<a name="INDEX-885"></a>
<a name="INDEX-886"></a>
<h3 class="sect2">5.5.1. Security for System Programmers</h3>
<p>	System programmers are the people who define new Java APIs that allow
	access to sensitive system resources. These programmers are
	typically working with native methods that have unprotected
	access to the system. They need to use the Java access-control
	architecture to prevent untrusted code from executing those
	native methods. To do this, system programmers must carefully
	insert <tt class="literal">SecurityManager</tt> calls at appropriate
	places in their code. A system programmer may choose to use an
	existing <tt class="literal">Permission</tt> subclass to govern access
	to the system resources exposed by her API, or she may decide to
	define a specialized subclass of <tt class="literal">Permission</tt>. </p>
<p>	The system programmer carries a tremendous security burden: if she
	does not perform appropriate access control checks in her code,
	she compromises the security of the entire Java platform. The
	details are complex and are beyond the scope of this book. Fortunately, however, system programming that
	involves native methods is rare in Java; almost all of us
	are application programmers who can simply rely on the existing APIs. </p>
<h3 class="sect2">5.5.2. Security for Application Programmers</h3>
<p>
<a name="INDEX-887"></a><a name="INDEX-888"></a>

	Programmers who use the core Java APIs and standard extensions,
	but do not define new extensions or write native methods, can
	simply rely on the security efforts of the system programmers
	who created those APIs. In other words, 
	most of us Java programmers can simply
	use the Java APIs and need not worry about introducing security
	holes into the Java platform. </p>
<p>	In fact, application programmers rarely have to use 
	the access-control architecture. If you are writing Java
	code that may be run as untrusted code, you should be aware of
	the restrictions placed on untrusted code by typical security
	policies. Keep in mind that some methods (such as methods that
	read or write files) can throw
	<tt class="literal">SecurityException</tt> objects, but don't feel you
	must write your code to catch these exceptions. Often,
	the appropriate response to a
	<tt class="literal">SecurityException</tt> is to allow it to propagate
	uncaught, so that it terminates the application.
<a name="INDEX-889"></a>
</p>
<p>	Sometimes, as an application programmer, you want to write an
	application (such as an applet viewer) that can load untrusted
	classes and run them subject to access-control checks. To
	do this in Java 1.2, you must first install a security manager:</p>
<blockquote>
<pre class="programlisting">System.setSecurityManager(new SecurityManager());</pre>
</blockquote>
<p>	Then use <tt class="literal">java.net.URLClassLoader</tt> to load the
	untrusted classes. <tt class="literal">URLClassLoader</tt> assigns a
	default set of safe permissions to the classes it loads, but in
	some cases you may want to modify the permissions granted to the
	loaded code through the <tt class="literal">Policy</tt> and
	<tt class="literal">PermissionCollection</tt> classes. </p>
<h3 class="sect2">5.5.3. Security for System Administrators</h3>
<p>
<a name="INDEX-890"></a><a name="INDEX-891"></a><a name="INDEX-892"></a><a name="INDEX-893"></a>


	In Java 1.2 and later, system administrators are responsible for
	defining the default security policy for the computers at their
	site. The default policy is stored in the file
	<em class="emphasis">lib/security/java.policy</em> in the Java
	installation. A system administrator 
	can edit this text file by hand or
	use the <em class="emphasis">policytool</em> program from Sun to
	edit the file graphically. <em class="emphasis">policytool</em> is the preferred way to
	define policies, so the syntax of the underlying policy file is
	not documented in this book. </p>
<p>
<a name="INDEX-894"></a>

	The default <em class="emphasis">java.policy</em> file defines a
	policy that is much like the policy of Java 1.0 and Java 1.1:
	system classes and installed extensions are fully trusted, while
	all other code is untrusted and only allowed a few simple
	permissions. While this default policy is adequate for many
	purposes, it may not be appropriate for all sites. For example,
	at some organizations, it may be appropriate to grant extra
	permissions to code downloaded from a secure intranet. </p>
<p>
<a name="INDEX-895"></a><a name="INDEX-896"></a>

	In order to define secure and effective security policies, a
	system administrator must understand the various
	<tt class="literal">Permission</tt> subclasses of the Java platform,
	the target and action names they support, and 
	the security implications of granting any particular permission. These topics are explained well in a document titled
	"Permissions in the Java 2 SDK," which is part of the Java 1.2
	release and also available (at the time of this
	writing) online at:
	<a href="../../../../../../../java.sun.com/products/jdk/1.2/docs/guide/security/permissions.html">http://java.sun.com/products/jdk/1.2/docs/guide/security/permissions.html</a>. </p>
<h3 class="sect2">5.5.4. Security for End Users</h3>
<p>
<a name="INDEX-897"></a>

	Most end users do not have to think about security at all: their
	Java programs should simply run in a secure way with no
	intervention by them. Some sophisticated end users may want to
	define their own security policies, however. An end user can do
	this by running <em class="emphasis">policytool</em> himself to
	define personal policy files that augment the system policy. The default personal policy is stored in a file named
	<em class="emphasis">.java.policy</em> in the user's home directory. By default, Java loads this policy file and uses it to augment
	the system policy file. </p>
<p>
<a name="INDEX-898"></a>


	In Java 1.2 and later, a user can specify an additional policy
	file to use when starting up the Java interpreter, by defining
	the <tt class="literal">java.security.policy</tt> property with the
	<tt class="literal">-D</tt> option. For example:</p>
<blockquote>
<pre class="programlisting">C:\&gt; java -Djava.security.policy=<em class="replaceable">policyfile</em> UntrustedApp</pre>
</blockquote>
<p>	This line runs the class <tt class="literal">UntrustedApp</tt> after
	augmenting the default system and user policies with the policy
	specified in the file or URL
	<em class="replaceable">policyfile</em>. To replace the system
	and user policies instead of augmenting them, use a
	double equals sign in the property specification:</p>

<blockquote>
<pre class="programlisting">C:\&gt; java -Djava.security.policy==<em class="replaceable">policyfile</em> UntrustedApp</pre>
</blockquote>

      <p>	Note, however, that specifying a policy file is only useful if
	there is a <tt class="literal">SecurityManager</tt> installed. If a
	user doesn't trust an application, he presumably doesn't
	trust that application to voluntarily install its own security
	manager. In this case, he can define the
	<tt class="literal">java.security.manager</tt> system property:</p>
<blockquote>
<pre class="programlisting">C:\&gt; java -Djava.security.manager -Djava.security.policy=<em class="replaceable">policyfile</em> UntrustedApp</pre>
</blockquote>
<p>        The value of this property does not matter; simply defining it is
	enough to tell the Java interpreter to automatically install a
	default <tt class="literal">SecurityManager</tt> object that
	subjects an application to the access control policies described
	in the system, user, and <tt class="literal">java.security.policy</tt>
	policy files.
<a name="INDEX-899"></a><a name="INDEX-900"></a>
</p>

<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch05_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch05_04.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch05_06.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch05_06.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">5.4. Access Control</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">5.6. Permission Classes</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
