<html>
<head>
<title>Array Types (Java in a Nutshell)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="David Flanagan">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-487-8E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Array Types">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm" alt="Java Enterprise in a Nutshell"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch02_08.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch02_08.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch02_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch02_01.htm">Chapter 2: Java Syntax

from the Ground Up</a></td><td align="right" valign="top" width="172"><a href="ch02_10.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch02_10.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY --><h2 class="sect1">2.9. Array Types</h2>
<p>
<a name="INDEX-367"></a>

      Array types are the second kind of reference types in Java. An array is an ordered collection, or numbered list, of values. The
      values can be primitive values, objects, or even
      other arrays, but all of the values in an array must be of
      the same type. The type of the array is 


the type of the values it
      holds, followed by the characters <tt class="literal">[]</tt>. For
      example:
</p>
<blockquote>
<pre class="programlisting">byte b;                        // byte is a primitive type
byte[] arrayOfBytes;           // byte[] is an array type: array of byte
byte[][] arrayOfArrayOfBytes;  // byte[][] is another type: array of byte[]
Point[] points;                // Point[] is an array of Point objects</pre>
</blockquote>
<p>      For compatibility with C and C++, Java also supports another
      syntax for declaring variables of array type. In this syntax, one
      or more pairs of square brackets follow the name of the variable,
      rather than the name of the type:
</p>
<blockquote>
<pre class="programlisting">byte arrayOfBytes[];            // Same as byte[] arrayOfBytes
byte arrayOfArrayOfBytes[][];   // Same as byte[][] arrayOfArrayOfBytes
byte[] arrayOfArrayOfBytes[];   // Ugh! Same as byte[][] arrayOfArrayOfBytes</pre>
</blockquote>
<p>
      This is almost always a confusing syntax, however, and it is not
      recommended. </p>
<p>      With classes and objects, we have separate terms for the type
      and the values of that type. With arrays, the single word
      array does double duty as the name of both the type and the
      value. Thus, we can speak of the array type
      <tt class="literal">int[]</tt> (a type) and an array of
      <tt class="literal">int</tt> (a particular array value). In practice,
      it is usually clear from context whether a type or a value is
      being discussed. </p>
<h3 class="sect2">2.9.1. Creating Arrays</h3>
<p>
<a name="INDEX-368"></a>

	To create an array value in Java, you use the
	<tt class="literal">new</tt> keyword, just as you do to create an
	object. Arrays don't need to be initialized like objects do,
	however, so you don't pass a list of arguments between
	parentheses. What you must specify, though, is how
	big you want the array to be. If you are creating a
	<tt class="literal">byte[]</tt>, for example, you must specify how
	many <tt class="literal">byte</tt> values you want it to hold. Array values have a fixed size in Java. Once an array is created,
	it can never grow or shrink. Specify the desired
	size of your array as a non-negative integer between square brackets:
</p>
<blockquote>
<pre class="programlisting">byte[] buffer = new byte[1024];
String[] lines = new String[50];</pre>
</blockquote>
<p>
	When you create an array with this syntax, each of the values
	held in the array is automatically initialized to its default
	value. This is <tt class="literal">false</tt> for
	<tt class="literal">boolean</tt> values, <tt class="literal">'\u0000'</tt> for
	<tt class="literal">char</tt> values, 0 for integer values, 0.0 for
	floating-point values, and <tt class="literal">null</tt> for objects
	or array values. </p>
<h3 class="sect2">2.9.2. Using Arrays</h3>
<p>
<a name="INDEX-369"></a>

	Once you've created an array with the <tt class="literal">new</tt> 
	operator and the
	square-bracket syntax, you also use square brackets to access the
	individual values contained in the array. Remember that an
	array is an ordered collection of values. The elements
	of an array are numbered sequentially, starting with 0. The
	number of an array element refers to the element. This number is often called the <em class="emphasis">index</em>, and
	the process of looking up a numbered value in an array is
	sometimes called <em class="emphasis">indexing</em> the array. </p>
<p>	To refer to a particular element of an array, simply place the
	index of the desired element in square brackets after the name of
	the array. For example:
</p>
<blockquote>
<pre class="programlisting">String[] responses = new String[2];   // Create an array of two strings
responses[0] = "Yes";                 // Set the first element of the array
responses[1] = "No";                  // Set the second element of the array

// Now read these array elements
System.out.println(question + " (" + responses[0] + "/" +
                   responses[1] + " ): ");</pre>
</blockquote>
<p>
	In some programming languages, such as C and C++, it is a common bug 
	to write code that tries to read or write array elements that
	are past the end of the array. Java does not allow this. Every
	time you access an array element, the Java interpreter
	automatically checks that the index you have specified is valid. If you specify a negative index or an index that is greater
	than the last index of the array, the interpreter throws an
	exception of type
	<tt class="literal">ArrayIndexOutOfBoundsException</tt>. This
	prevents you from reading or writing nonexistent array
	elements. </p>
<p>	Array index values are integers; you cannot index an
	array with a floating-point value, a <tt class="literal">boolean</tt>,
	an object, or another array. <tt class="literal">char</tt> values
	can be converted to <tt class="literal">int</tt> values, so you
	<em class="emphasis">can</em> use characters as array indexes. Although <tt class="literal">long</tt> is an integer data type,
	<tt class="literal">long</tt> values cannot be used as array indexes. This may seem surprising at first, but consider that an
	<tt class="literal">int</tt> index supports arrays with over two billion
	elements. An <tt class="literal">int[]</tt> with this many elements
	would require eight gigabytes of memory. When you think of it this
	way, it is not surprising that <tt class="literal">long</tt> values
	are not allowed as array indexes. </p>
<p>	Besides setting and reading the value of array elements, there
	is one other thing you can do with an array value. Recall
	that whenever we create an array, we must specify the number of
	elements the array holds. This value is referred to as the
	length of the array; it is an intrinsic property of the
	array. If you need to know the length of the array, append
	<tt class="literal">.length</tt> to the array name:
</p>
<blockquote>
<pre class="programlisting">if (errorCode &lt; errorMessages.length)
  System.out.println(errorMessages[errorCode]);</pre>
</blockquote>
<p>
<tt class="literal">.length</tt> is special Java syntax for arrays. An expression like <tt class="literal">a.length</tt> looks as
	though it refers to a field of an object <tt class="literal">a</tt>,
	but this is not actually the case. The
	<tt class="literal">.length</tt> syntax can be used only to read the
	length of an array. It cannot be used to set the length of an
	array (because, in Java, an array has a fixed length that can never
	change). </p>
<p>	In the previous example, the array index within square
	brackets is a variable, not an integer literal. In fact, arrays
	are most often used with loops, particularly
	<tt class="literal">for</tt> loops, where they are indexed using a
	variable that is incremented or decremented each time through
	the loop:
</p>
<blockquote>
<pre class="programlisting">int[] values;                          // Array elements initialized elsewhere
int total = 0;                         // Store sum of elements here
for(int i = 0; i &lt; values.length; i++) // Loop through array elements
  total += values[i];                  // Add them up</pre>
</blockquote>
<p>	In Java, the first element of an array is always element number
	0. If you are accustomed to a programming language that numbers
	array elements beginning with 1, this will take some getting used to. For an array <tt class="literal">a</tt>, the first element is
	<tt class="literal">a[0]</tt>, the second element is
	<tt class="literal">a[1]</tt>, and the last element is:
</p>
<blockquote>
<pre class="programlisting">a[a.length - 1]         // The last element of any array named a</pre>
</blockquote>
<h3 class="sect2">2.9.3. Array Literals</h3>
<p>
<a name="INDEX-370"></a>

	The <tt class="literal">null</tt> literal used to represent the
	absence of an object can also be used to represent the absence
	of an array. For example:
</p>
<blockquote>
<pre class="programlisting">char[] password = null;</pre>
</blockquote>
<p>	In addition to the <tt class="literal">null</tt> literal, 
	Java also defines special syntax that allows you to specify
	array values literally in your programs. There are
	actually two different syntaxes for array literals. The first,
	and more commonly used, syntax can be used only when declaring a
	variable of array type. It combines the creation of the array
	object with the initialization of the array elements:
</p>
<blockquote>
<pre class="programlisting">int[] powersOfTwo = {1, 2, 4, 8, 16, 32, 64, 128};</pre>
</blockquote>
<p>
	This creates an array that contains the eight
	<tt class="literal">int</tt> elements listed within the curly braces. Note that we don't use the <tt class="literal">new</tt> keyword or
	specify the type of the array in this array literal syntax. The type is implicit in the variable declaration of which 
	the initializer is a
	part. Also, the array length is not specified explicitly with
	this syntax; it is determined implicitly by counting the number
	of elements listed between the curly braces. There is
	a semicolon following the close curly brace in this array
	literal. This is one of the fine points of Java syntax. When
	curly braces delimit classes, methods, and compound
	statements, they are not followed by semicolons. However, for
	this array literal syntax, the semicolon is required to
	terminate the variable declaration statement. </p>
<p>	The problem with this array literal syntax is that it works
	only when you are declaring a variable of array type. Sometimes you
	need to do something with an array value (such as pass it
	to a method) but are going to use the array only once, so 
	you don't want
	to bother assigning it to a variable. In Java 1.1 and later,
	there is an array literal syntax that supports this kind of
	anonymous arrays (so called because they are
	not assigned to variables, so they don't have names). This
	kind of array literal looks as follows:
</p>
<blockquote>
<pre class="programlisting">// Call a method, passing an anonymous array literal that contains two strings
String response = askQuestion("Do you want to quit?",
                              new String[] {"Yes", "No"});

// Call another method with an anonymous array (of anonymous objects)
double d = computeAreaOfTriangle(new Point[] { new Point(1,2),
                                               new Point(3,4),
                                               new Point(3,2) });</pre>
</blockquote>
<p>
	With this syntax, you use the <tt class="literal">new</tt>
	keyword and specify the type of the array, but the
	length of the array is not explicitly specified. </p>
<p>	It is important to understand that the Java Virtual Machine
	architecture does not support any kind of efficient array
	initialization. In other words, 
	array literals are created and initialized
	when the program is run, not when the program is compiled. Consider the following array literal:
</p>
<blockquote>
<pre class="programlisting">int[] perfectNumbers = {6, 28};</pre>
</blockquote>
<p>
	This is compiled into Java byte codes that are equivalent to:
</p>
<blockquote>
<pre class="programlisting">int[] perfectNumbers = new int[2];
perfectNumbers[0] = 6;
perfectNumbers[1] = 28;</pre>
</blockquote>
<p>
	Thus, if you want to include a large amount of
	data in a Java program, it may not be a good idea to include
	that data literally in an array, since the Java compiler
	has to create lots of Java byte codes to initialize the array,
	and then the Java interpreter has to laboriously execute
	all that initialization code. In cases like this, it is better
	to store your data in an external file and read it into
	the program at runtime. </p>
<p>	The fact that Java does all array initialization explicitly at
	runtime has an important corollary, however. It means that the
	elements of an array literal can be arbitrary expressions that
	are computed at runtime, rather than constant expressions that
	are resolved by the compiler. For example:
</p>
<blockquote>
<pre class="programlisting">Point[] points = { circle1.getCenterPoint(), circle2.getCenterPoint() };</pre>
</blockquote>
<h3 class="sect2">2.9.4. Multidimensional Arrays</h3>
<p>
<a name="INDEX-371"></a><a name="INDEX-372"></a>

	As we've seen, an array type is simply the element type followed
	by a pair of square brackets. An array of
	<tt class="literal">char</tt> is <tt class="literal">char[]</tt>, and an
	array of arrays of <tt class="literal">char</tt> is
	<tt class="literal">char[][]</tt>. When the elements of an array are
	themselves arrays, we say that the array is 
	<em class="emphasis">multidimensional</em>. In order to work with
	multidimensional arrays, there are a few additional details you
	must understand. </p>
<p>	Imagine that you want to use a multidimensional array to
	represent a multiplication table:
</p>
<blockquote>
<pre class="programlisting">int[][] products;      // A multiplication table</pre>
</blockquote>
<p>
	Each of the pairs of square brackets represents one dimension,
	so this is a two-dimensional array. To access a single
	<tt class="literal">int</tt> element of this two-dimensional array,
	you must specify two index values, one for each dimension. Assuming that this array was actually initialized as a
	multiplication table, the <tt class="literal">int</tt> value stored at
	any given element would be the product of the two indexes. That
	is, <tt class="literal">products[2][4]</tt> would be 8, and
	<tt class="literal">products[3][7]</tt> would be 21. </p>
<p>	To create a new multidimensional array, use the
	<tt class="literal">new</tt> keyword and specify the size of both
	dimensions of the array. For example:
</p>
<blockquote>
<pre class="programlisting">int[][] products = new int[10][10];</pre>
</blockquote>
<p>
	In some languages, an array like this would be created as a
	single block of 100 <tt class="literal">int</tt> values. Java does
	not work this way. This line of code does three things:

	</p>
<ul>
<li>
<p>	      Declares a variable named <tt class="literal">products</tt>
	      to hold an array of arrays of <tt class="literal">int</tt>. </p>
</li>
<li>
<p>	      Creates a 10-element array to hold 10 arrays of
	      <tt class="literal">int</tt>. </p>
</li>
<li>
<p>	      Creates 10 more arrays, each of which is a 10-element
	      array of <tt class="literal">int</tt>. It assigns each of these
	      10 new arrays to the elements of the initial array. The
	      default value of every <tt class="literal">int</tt> element
	      of each of these 10 new arrays is 0. </p>
</li>
</ul>
<p>

	To put this another way, the previous single line of code is
	equivalent to the following code:
</p>
<blockquote>
<pre class="programlisting">int[][] products = new int[10][];    // An array to hold ten int[] values. 
for(int i = 0; i &lt; 10; i++)          // Loop ten times... 
  products[i] = new int[10];         // ...and create ten arrays. </pre>
</blockquote>
<p>	The <tt class="literal">new</tt> keyword performs this additional
	initialization automatically for you. It works with arrays with
	more than two dimensions as well:
</p>
<blockquote>
<pre class="programlisting">float[][][] globalTemperatureData = new float[360][180][100];</pre>
</blockquote>
<p>
	When using <tt class="literal">new</tt> with multidimensional arrays,
	you do not have to specify a size for all dimensions of the array, 
	only the leftmost
	dimension or dimensions. For example, the following two lines
	are legal:
</p>
<blockquote>
<pre class="programlisting">float[][][] globalTemperatureData = new float[360][][];
float[][][] globalTemperatureData = new float[360][180][];</pre>
</blockquote>
<p>
	The first line creates a single-dimensional array, where
	each element of the array can hold a
	<tt class="literal">float[][]</tt>. The second line creates a
	two-dimensional array, where each element of the array is a
	<tt class="literal">float[]</tt>. If you specify a size for only some
	of the dimensions of an array, however, those dimensions must be
	the leftmost ones. The following lines are not legal:
</p>
<blockquote>
<pre class="programlisting">float[][][] globalTemperatureData = new float[360][][100];  // Error!
float[][][] globalTemperatureData = new float[][180][100];  // Error!</pre>
</blockquote>
<p>	Like a one-dimensional array, a multidimensional array can be
	initialized using an array literal. Simply use nested sets of
	curly braces to nest arrays within arrays. For example, we can
	declare, create, and initialize a 5&times;5 multiplication table like
	this:
</p>
<blockquote>
<pre class="programlisting">int[][] products = { {0, 0, 0, 0, 0},
                     {0, 1, 2, 3, 4},
                     {0, 2, 4, 6, 8},
                     {0, 3, 6, 9, 12},
                     {0, 4, 8, 12, 16} };</pre>
</blockquote>
<p>
	Or, if you want to use a multidimensional array without
	declaring a variable, you can use the anonymous initializer syntax:
</p>
<blockquote>
<pre class="programlisting">boolean response = bilingualQuestion(question, new String[][] {
                                                   { "Yes", "No" },
                                                   { "Oui", "Non" }});</pre>
</blockquote>
<p>
<a name="INDEX-373"></a><a name="INDEX-374"></a>

	When you create a multidimensional array using the
	<tt class="literal">new</tt> keyword, you always get a
	<em class="emphasis">rectangular</em> array: one in which all the
	array values for a given dimension have the same size. This is
	perfect for 
	rectangular data structures, such as matrixes. However, because multidimensional arrays are implemented 
	as arrays of arrays in Java, instead of as a single rectangular
	block of elements, you are in no way constrained to use
	rectangular arrays. For example, since our multiplication table
	is symmetrical about the diagonal from top left to bottom right,
	we can represent the same information in a nonrectangular
	array with fewer elements:
</p>
<blockquote>
<pre class="programlisting">int[][] products = { {0},
                     {0, 1},
                     {0, 2, 4},


                     {0, 3, 6, 9},
                     {0, 4, 8, 12, 16} };</pre>
</blockquote>
<p>
<a name="INDEX-375"></a>

	When working with multidimensional arrays, you'll often find
	yourself using nested loops to create or initialize them. For
	example, you can create and initialize a large triangular
	multiplication table as follows:
</p>
<blockquote>
<pre class="programlisting">int[][] products = new int[12][];          // An array of 12 arrays of int.
for(int row = 0; row &lt; 12; row++) {        // For each element of that array,
  products[row] = new int[row+1];          // allocate an array of int. 
  for(int col = 0; col &lt; row+1; col++)     // For each element of the int[],
    products[row][col] = row * col;        // initialize it to the product. 
}</pre>
</blockquote>

<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch02_08.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch02_08.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch02_10.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch02_10.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">2.8. Classes and Objects</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">2.10. Reference Types</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
