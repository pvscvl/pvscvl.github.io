<html>
<head>
<title>Access Control (Java in a Nutshell)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="David Flanagan">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-487-8E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Access Control">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm" alt="Java Enterprise in a Nutshell"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch05_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch05_03.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch05_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch05_01.htm">Chapter 5: Java Security</a></td><td align="right" valign="top" width="172"><a href="ch05_05.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch05_05.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY --><h2 class="sect1">5.4. Access Control</h2>
<p>
<a name="INDEX-858"></a>

      As I noted at the beginning of this chapter, the heart of the Java
      security architecture is access control: untrusted code simply must not
      be granted access to the sensitive parts of the Java API that
      would allow it to do malicious things. As we'll discuss in
      the following sections, the Java access-control
      model evolved significantly between Java 1.0 and Java 1.2. The Java 1.2 access-control model is
      relatively stable; it has not changed significantly in Java 1.3. </p>
<h3 class="sect2">5.4.1. Java 1.0: The Sandbox</h3>
<p>
<a name="INDEX-859"></a><a name="INDEX-860"></a><a name="INDEX-861"></a>


	In this first release of Java, all Java code installed locally
	on the system is trusted implicitly. All code downloaded
	over the network, however, is untrusted and run in a restricted
	environment playfully called "the sandbox."  The access-control
	policies of the sandbox are defined by the currently installed
	<tt class="literal">java.lang.SecurityManager</tt> object. When
	system code is about to perform a restricted operation, such as
	reading a file from the local filesystem, it first calls an
	appropriate method (such as <tt class="literal">checkRead()</tt>) of
	the currently installed <tt class="literal">SecurityManager</tt>
	object. If untrusted code is running, the
	<tt class="literal">SecurityManager</tt> throws a
	<tt class="literal">SecurityException</tt> that prevents the
	restricted operation from taking place. </p>
<p>
<a name="INDEX-862"></a><a name="INDEX-863"></a>


	The most common user of the <tt class="literal">SecurityManager</tt>
	class is a Java-enabled web browser, which installs a
	<tt class="literal">SecurityManager</tt> object to allow applets to
	run without damaging the host system. The precise details of
	the security policy are an implementation detail of the web
	browser, of course, but applets are typically restricted in the
	following ways:</p>

	<ul>
<li>
<p>	      An applet cannot read, write, rename, or delete files. It
	      cannot query the length or modification date of a file or
	      even check whether a given file exists. Similarly, an applet cannot create, list, or delete a
	      directory. </p>
</li>
<li>
<p>	      An applet cannot connect to or accept a connection from
	      any computer other than the one it was downloaded from. It cannot use any privileged ports (i.e., ports below
	      and including port 1024). </p>
</li>
<li>
<p>	      An applet cannot perform system-level functions, such as
	      loading a native library, spawning a new process, or
	      exiting the Java interpreter. An applet cannot manipulate
	      any threads or thread groups, except for those it creates
	      itself. In Java 1.1 and later, applets cannot use the Java
	      Reflection API to obtain information about the non-public
	      members of classes, except for classes that were
	      downloaded with the applet. </p>
</li>
<li>
<p>	      An applet cannot access certain graphics- and GUI-related
	      facilities. It cannot initiate a print job or access the
	      system clipboard or event queue. In addition, all
	      windows created by an applet typically display a prominent
	      visual indicator that they are "insecure," to prevent an
	      applet from spoofing the appearance of some other
	      application. </p>
</li>
<li>
<p>	      An applet cannot read certain system properties, notably
	      the <tt class="literal">user.home</tt> and
	      <tt class="literal">user.dir</tt> properties, that specify the
	      user's home directory and current working directory. </p>
</li>
<li>
<p>	      An applet cannot circumvent these security
	      restrictions by registering a new
	      <tt class="literal">SecurityManager</tt> object. </p>
</li>
</ul>

<h3 class="sect3">5.4.1.1. How the sandbox works</h3>
<p>	  Suppose that an applet (or some other untrusted code running
	  in the sandbox) attempts to read the contents of the file
	  <em class="emphasis">/etc/passwd</em> by passing this filename to
	  the <tt class="literal">FileInputStream()</tt> constructor. The
	  programmers who wrote the <tt class="literal">FileInputStream</tt>
	  class were aware that the class provides access to a system
	  resource (a file), so use of the class should therefore
	  be subject to access control. For this reason, they coded the
	  <tt class="literal">FileInputStream()</tt> constructor to use the
	  <tt class="literal">SecurityManager</tt> class. </p>
<p>	  Every time <tt class="literal">FileInputStream()</tt> is called, it
	  checks to see if a <tt class="literal">SecurityManager</tt> object
	  has been installed. If so, the constructor calls the
	  <tt class="literal">checkRead()</tt> method of that
	  <tt class="literal">SecurityManager</tt> object, passing the
	  filename (<em class="emphasis">/etc/passwd</em>, in this case) 
	  as the sole argument. The <tt class="literal">checkRead()</tt> method has no return value; it
	  either returns normally or throws a
	  <tt class="literal">SecurityException</tt>. If the method returns,
	  the <tt class="literal">FileInputStream()</tt> constructor
	  simply proceeds with whatever initialization is necessary and
	  returns. Otherwise, it allows the
	  <tt class="literal">SecurityException</tt> to propagate to the
	  caller. When this happens, no
	  <tt class="literal">FileInputStream</tt> object is created, and the
	  applet does not gain access to the
	  <em class="emphasis">/etc/passwd</em> file. </p>
<h3 class="sect2">5.4.2. Java 1.1: Digitally Signed Classes</h3>
<p>
<a name="INDEX-864"></a><a name="INDEX-865"></a><a name="INDEX-866"></a><a name="INDEX-867"></a><a name="INDEX-868"></a><a name="INDEX-869"></a>

	Java 1.1 retains the sandbox model of Java 1.0, but adds the
	<tt class="literal">java.security</tt> package and its digital
	signature capabilities. With these capabilities, Java classes can be
	digitally signed and verified. Thus, web browsers and other Java
	installations can be configured to trust downloaded code that
	bears a valid digital signature of a trusted entity. Such code
	is treated as if it were installed locally, so it is given full
	access to the Java APIs. In this release, the
	<em class="emphasis">javakey</em> program manages keys and
	digitally signs JAR files of Java code. Although Java 1.1 adds the important ability to trust
	digitally signed code that would otherwise be untrusted, it
	sticks to the basic sandbox model: trusted code gets full


	access and untrusted code gets totally restricted access. </p>
<h3 class="sect2">5.4.3. Java 1.2: Permissions and Policies</h3>
<p>
<a name="INDEX-870"></a><a name="INDEX-871"></a><a name="INDEX-872"></a><a name="INDEX-873"></a>

	Java 1.2 introduces major new access-control features into the
	Java security architecture. These features are implemented by
	new classes in the <tt class="literal">java.security</tt> package. The <tt class="literal">Policy</tt> class is one of the most important:
	it defines a Java security policy. A <tt class="literal">Policy</tt>
	object maps <tt class="literal">CodeSource</tt> objects to associated
	sets of <tt class="literal">Permission</tt> objects. A
	<tt class="literal">CodeSource</tt> object represents the source of a piece
	of Java code, which includes both the URL of the class
	file (and can be a local file) and a list of entities that
	have applied their digital signatures to the class file. The
	<tt class="literal">Permission</tt> objects associated with a
	<tt class="literal">CodeSource</tt> in the <tt class="literal">Policy</tt>
	define the permissions that are granted to code from a given
	source. Various Java APIs includes subclasses of
	<tt class="literal">Permission</tt> that represent different types of
	permissions. These include
	<tt class="literal">java.lang.RuntimePermission</tt>,
	<tt class="literal">java.io.FilePermission</tt>, and
	<tt class="literal">java.net.SocketPermission</tt>, for example. </p>
<p>
<a name="INDEX-874"></a><a name="INDEX-875"></a>

	Under this new access-control model, the
	<tt class="literal">SecurityManager</tt> class continues to be the
	central class; access-control requests are still made by
	invoking methods of a <tt class="literal">SecurityManager</tt>. However, the default <tt class="literal">SecurityManager</tt>
	implementation now delegates most of those requests to a new
	<tt class="literal">AccessController</tt> class that makes access
	decisions based on the <tt class="literal">Permission</tt> and
	<tt class="literal">Policy</tt> architecture. </p>
<p>
<a name="INDEX-876"></a>

	The new Java 1.2 access-control architecture has several
	important features:</p>
	<ul>
<li>
<p>	      Code from different sources can be given different sets of
	      permissions. In other words, the new architecture supports
	      fine-grained levels of trust. Even locally installed code
	      can be treated as untrusted or partially untrusted. Under this new architecture, only system classes and
	      standard extensions run as fully trusted. </p>
</li>
<li>
<p>
<a name="INDEX-877"></a>

	      It is no longer necessary to define a custom subclass of
	      <tt class="literal">SecurityManager</tt> to define a security
	      policy. Policies can be configured by a system
	      administrator by editing a text file or using the new
	      <em class="emphasis">policytool</em> program. </p>
</li>
<li>
<p>	      The new architecture is not limited to a fixed set of
	      access control methods in the
	      <tt class="literal">SecurityManager</tt> class. New
	      <tt class="literal">Permission</tt> subclasses can be
	      defined easily to govern access to new system resources (which
	      might be exposed, for example, by new standard extensions
	      that include native code). </p>
</li>
</ul>

<h3 class="sect3">5.4.3.1. How policies and permissions work</h3>
<p>	  Let's return to the example of an
	  applet that attempts to create a
	  <tt class="literal">FileInputStream</tt> to read the file
	  <em class="emphasis">/etc/passwd</em>. In Java 1.2, the
	  <tt class="literal">FileInputStream()</tt> constructor behaves
	  exactly the same as it does in Java 1.0 and Java 1.1: it looks
	  to see if a <tt class="literal">SecurityManager</tt> is installed
	  and, if so, calls its <tt class="literal">checkRead()</tt> method,
	  passing the name of the file to be read. </p>
<p>
<a name="INDEX-878"></a>

	  What's new in Java 1.2 is the default behavior of the
	  <tt class="literal">checkRead()</tt> method. Unless a program has
	  replaced the default 
	  security manager with one of its own, the default
	  implementation creates a <tt class="literal">FilePermission</tt>
	  object to represent the access being requested. This
	  <tt class="literal">FilePermission</tt> object has a
	  <em class="emphasis">target</em> of "/etc/passwd" and an
	  <em class="emphasis">action</em> of "read". The
	  <tt class="literal">checkRead()</tt> method passes this
	  <tt class="literal">FilePermission</tt> object to the static
	  <tt class="literal">checkPermission()</tt> method of the
	  <tt class="literal">java.security.AccessController</tt> class.

<a name="INDEX-879"></a>
</p>
<p>
<a name="INDEX-880"></a>


	  It is the <tt class="literal">AccessController</tt> and its
	  <tt class="literal">checkPermission()</tt> method that do the real
	  work of access control in Java 1.2. The method determines the
	  <tt class="literal">CodeSource</tt> of each calling method
	  and uses the current <tt class="literal">Policy</tt> object to
	  determine the <tt class="literal">Permission</tt> objects associated
	  with it. With this information, the
	  <tt class="literal">AccessController</tt> can determine whether
	  read access to the <em class="emphasis">/etc/passwd</em> file
	  should be allowed. </p>
<p>
<a name="INDEX-881"></a>
	  The <tt class="literal">Permission</tt> class represents both the permissions granted by a
	  <tt class="literal">Policy</tt> and the permissions requested
	  by a method like the <tt class="literal">FileInputStream()</tt>
	  constructor. When requesting a permission, Java typically
	  uses a <tt class="literal">FilePermission</tt> (or other
	  <tt class="literal">Permission</tt> subclass) with a very specific
	  target, like "/etc/passwd". When granting a permission,
	  however, a <tt class="literal">Policy</tt> commonly uses a
	  <tt class="literal">FilePermission</tt> object with a wildcard
	  target, such as "/etc/*", to represent many files. One of the
	  key features of a <tt class="literal">Permission</tt> subclass such as
	  <tt class="literal">FilePermission</tt> is that it defines an
	  <tt class="literal">implies()</tt> method that can determine whether
	  permission to read "/etc/*" implies permission to read
	  "/etc/passwd".
<a name="INDEX-882"></a>
</p>

<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch05_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch05_03.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch05_05.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch05_05.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">5.3. Authentication and Cryptography</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">5.5. Security for Everyone</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
