<html>
<head>
<title>The java.security Package (Java in a Nutshell)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="David Flanagan">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-487-8E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="The java.security Package">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm" alt="Java Enterprise in a Nutshell"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch16_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch16_01.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="part2.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/part2.htm">Part 2: API Quick Reference</a></td><td align="right" valign="top" width="172"><a href="ch18_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch18_01.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY --><h1 class="chapter">Chapter 17.  The java.security Package</h1>

<p>
<a name="INDEX-2331"></a><a name="INDEX-2332"></a><a name="INDEX-2333"></a><a name="INDEX-2334"></a>

  The <tt class="literal">java.security</tt> 
  package contains the classes and interfaces that implement the
  Java security architecture. These classes can be divided into two
  broad categories. First, there are 
  classes that implement access control and prevent
  untrusted code from performing sensitive operations. Second, there
  are authentication classes that implement message digests and digital
  signatures and can authenticate Java classes and other
  objects. </p>
<p>
<a name="INDEX-2335"></a><a name="INDEX-2336"></a><a name="INDEX-2337"></a><a name="INDEX-2338"></a>
  The central access control class is
  <tt class="literal">AccessController</tt>; it uses the currently
  installed <tt class="literal">Policy</tt> object to decide whether a given
  class has <tt class="literal">Permission</tt> to access a given system
  resource. The <tt class="literal">Permissions</tt> and
  <tt class="literal">ProtectionDomain</tt> classes are also important pieces
  of the Java access control architecture. <a href="#javanut3-java.security-1">Figure 17-1</a> shows the access control
  classes of this package.</p>

<a name="javanut3-java.security-1"></a>
<div class="figure">
<img alt="figure" src="figs/JN3_1701.gif" webstripperlinkwas="figs/JN3_1701.gif"></div>
<h4 class="objtitle">Figure 17-1. The access control classes of the java.security package</h4>

<p>
<a name="INDEX-2339"></a><a name="INDEX-2340"></a><a name="INDEX-2341"></a><a name="INDEX-2342"></a><a name="INDEX-2343"></a><a name="INDEX-2344"></a><a name="INDEX-2345"></a><a name="INDEX-2346"></a><a name="INDEX-2347"></a><a name="INDEX-2348"></a>
  The key classes for authentication are
  <tt class="literal">MessageDigest</tt> and <tt class="literal">Signature</tt>;
  they compute and verify cryptographic message digests and digital
  signatures. These classes use public-key
  cryptography techniques and rely on the <tt class="literal">PublicKey</tt> and
  <tt class="literal">PrivateKey</tt> classes. They also rely on an
  infrastructure of related classes, such as
  <tt class="literal">SecureRandom</tt> for producing cryptographic-strength
  pseudo-random numbers, <tt class="literal">KeyPairGenerator</tt> for
  generating pairs of public and private keys, and
  <tt class="literal">KeyStore</tt> for managing a collection of keys and
  certificates. (This package defines a <tt class="literal">Certificate</tt>
  interface, but it is deprecated; see the
  <tt class="literal">java.security.cert</tt> package for the preferred
  <tt class="literal">Certificate</tt> class.)  
  <a href="#javanut3-java.security-2">Figure 17-2</a> shows the authentication
  classes of <tt class="literal">java.security</tt>, while
  <a href="#javanut3-java.security-3">Figure 17-3</a> shows the exceptions.</p>

<a name="javanut3-java.security-2"></a>
<div class="figure">
<img alt="figure" src="figs/JN3_1702.gif" webstripperlinkwas="figs/JN3_1702.gif"></div>
<h4 class="objtitle">Figure 17-2. The authentication classes of the java.security package</h4>

<a name="javanut3-java.security-3"></a>
<div class="figure">
<img alt="figure" src="figs/JN3_1703.gif" webstripperlinkwas="figs/JN3_1703.gif"></div>
<h4 class="objtitle">Figure 17-3. The exception classes of the java.security package</h4>

<p>  The
<a name="INDEX-2349"></a><a name="INDEX-2350"></a><a name="INDEX-2351"></a><tt class="literal">CodeSource</tt> class unites the authentication
  classes with the access control classes. It represents the source of
  a Java class as a <tt class="literal">URL</tt> and a set of
  <tt class="literal">java.security.cert.Certificate</tt> objects that contain 
  the digital signatures of
  the code. The <tt class="literal">AccessController</tt> and
  <tt class="literal">Policy</tt> classes look at the
  <tt class="literal">CodeSource</tt> of a class when making access control
  decisions. </p>
<p>
<a name="INDEX-2352"></a><a name="INDEX-2353"></a>
  All the cryptographic-authentication features of this package are
  provider-based, which means they are implemented by security
  provider modules that can be plugged easily into any Java 1.2 (or later)
  installation. Thus, in addition to defining a security API, this
  package also defines a service provider interface (SPI). Various classes with names that end in "Spi" 
  are part of this SPI. Security provider implementations must subclass these Spi classes, but
  applications never need to use them. Each security provider is
  represented by a <tt class="literal">Provider</tt> class, and the
  <tt class="literal">Security</tt> class allows new providers to be
  dynamically installed. </p>

<p>
<a name="INDEX-2354"></a><a name="INDEX-2355"></a><a name="INDEX-2356"></a><a name="INDEX-2357"></a><a name="INDEX-2358"></a><a name="INDEX-2359"></a><a name="INDEX-2360"></a>
  The <tt class="literal">java.security</tt> package contains several useful
  utility classes. For example, <tt class="literal">DigestInputStream</tt>
  and <tt class="literal">DigestOutputStream</tt> make it easy to
  compute message digests. <tt class="literal">GuardedObject</tt> provides
  customizable access control for an individual object. <tt class="literal">SignedObject</tt> protects the integrity of an arbitrary
  Java object by attaching a digital signature, making it easy to
  detect any
  tampering with the object. Although the
  <tt class="literal">java.security</tt> package contains cryptographic
  classes for authentication, it does not contain classes for encryption
  or decryption. U.S. export control laws prevent Sun from including
  encryption and decryption functionality in the core Java platform. Instead, this functionality is part of the Java Cryptography Extension,
  or JCE. The JCE builds upon the cryptographic infrastructure of
  <tt class="literal">java.security</tt>; see <a href="ch26_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch26_01.htm">Chapter 26, "The javax.crypto Package"</a>. </p>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>AccessControlContext</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.security</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2361"></a><a name="INDEX-2362"></a><a name="INDEX-2363"></a>
  This class encapsulates the state of a call stack. The
  <tt class="literal">checkPermission()</tt> method can make access-control decisions based on the saved state of the call stack. Access-control checks are usually performed by the
  <tt class="literal">AccessController.checkPermission()</tt> method, which
  checks that the current call stack has the required permissions. Sometimes, however, it is necessary to make access-control decisions
  based on a previous state of the call stack. Call
  <tt class="literal">AccessController.getContext()</tt> to create an
  <tt class="literal">AccessControlContext</tt> for a particular call stack. In Java 1.3, this class has constructors that specify a
  custom context in the form of an array of
  <tt class="literal">ProtectionDomain</tt> objects and that associate a 
  <tt class="literal">DomainCombiner</tt> object with an existing
  <tt class="literal">AccessControlContext</tt>. This class is used only by system-level code; typical applications
  rarely need to use it. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public final class <b class="classname">AccessControlContext</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">AccessControlContext</b> (ProtectionDomain[ ] <i class="parameter">context</i>);</td><td align="right"><i></i></td>
</tr>

<tr>
<td width="10"><span class="java-revision">1.3</span></td><td align="left">public <b class="function">AccessControlContext</b> (AccessControlContext <i class="parameter">acc</i>, DomainCombiner <i class="parameter">combiner</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">checkPermission</b> (java.security.Permission <i class="parameter">perm</i>) throws AccessControlException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.3</span></td><td align="left">public DomainCombiner <b class="function">getDomainCombiner</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Object</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">equals</b> (Object <i class="parameter">obj</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">hashCode</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">AccessControlContext.AccessControlContext(), AccessController.doPrivileged()</tt>
</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">AccessController.getContext()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>AccessControlException</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.security</b></font></td><td align="right"><font size="+1"><b><i>serializable unchecked</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2364"></a><a name="INDEX-2365"></a>
  Thrown by 
  <tt class="literal">AccessController</tt> to signal that an access request
  has been denied. <tt class="literal">getPermission()</tt> returns the
  <tt class="literal">Permission</tt> object, if any, that was involved in the
  denied request. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">AccessControlException</b> extends SecurityException {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">AccessControlException</b> (String <i class="parameter">s</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">AccessControlException</b> (String <i class="parameter">s</i>, java.security.Permission <i class="parameter">p</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public java.security.Permission <b class="function">getPermission</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Exception-->RuntimeException-->SecurityException-->AccessControlException</tt>
</p>
<p>
<span class="refsect1">Thrown By: </span><tt class="literal">AccessControlContext.checkPermission(), AccessController.checkPermission()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>AccessController</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.security</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2366"></a><a name="INDEX-2367"></a>
  The static methods of this class implement the default access-control
  mechanism as of Java 1.2. <tt class="literal">checkPermission()</tt> traverses the call stack of the
  current thread and checks whether all classes in the call stack have
  the requested permission. If so, <tt class="literal">checkPermission()</tt>
  returns, and the operation can proceed. If not,
  <tt class="literal">checkPermission()</tt> throws an
  <tt class="literal">AccessControlException</tt>. As of Java 1.2, the 
  <tt class="literal">checkPermission()</tt> method of the default
  <tt class="literal">java.lang.SecurityManager</tt> calls
  <tt class="literal">AccessController.checkPermission()</tt>. System-level
  code that needs to perform an access check should invoke the
  <tt class="literal">SecurityManager</tt> method rather than calling the
  <tt class="literal">AccessController</tt> method directly. Unless you are
  writing system-level code that must control access to system resources,
  you never need to use this class or the
  <tt class="literal">SecurityManager.checkPermission()</tt> method. </p>
<p>
<a name="INDEX-2368"></a>
  The various <tt class="literal">doPrivileged()</tt> methods run blocks of
  privileged code encapsulated in a <tt class="literal">PrivilegedAction</tt> or
  <tt class="literal">PrivilegedExceptionAction</tt> object. When
  <tt class="literal">checkPermission()</tt> is traversing the call stack of a
  thread, it stops if it reaches a privileged block that was executed
  with <tt class="literal">doPrivileged()</tt>. This means that privileged
  code can run with a full set of privileges, even if it was invoked by
  untrusted or lower-privileged code. See
  <tt class="literal">PrivilegedAction</tt> for more details. </p>
<p>
<a name="INDEX-2369"></a>
  The <tt class="literal">getContext()</tt> method returns an
  <tt class="literal">AccessControlContext</tt> that represents the current
  security context of the caller. Such a context might be saved and
  passed to a future call (perhaps a call made from a different thread). Use the two-argument version of 
  <tt class="literal">doPrivileged()</tt> to force permission checks to
  check the <tt class="literal">AccessControlContext</tt> as well. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public final class <b class="classname">AccessController</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">No Constructor</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Class Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static void <b class="function">checkPermission</b> (java.security.Permission <i class="parameter">perm</i>) throws AccessControlException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static Object <b class="function">doPrivileged</b> (PrivilegedExceptionAction <i class="parameter">action</i>) throws PrivilegedActionException;</td><td align="right"><i> native</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static Object <b class="function">doPrivileged</b> (PrivilegedAction <i class="parameter">action</i>);</td><td align="right"><i> native</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static Object <b class="function">doPrivileged</b> (PrivilegedExceptionAction <i class="parameter">action</i>, AccessControlContext <i class="parameter">context</i>) throws PrivilegedActionException;</td><td align="right"><i> native</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static Object <b class="function">doPrivileged</b> (PrivilegedAction <i class="parameter">action</i>, AccessControlContext <i class="parameter">context</i>);</td><td align="right"><i> native</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static AccessControlContext <b class="function">getContext</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>AlgorithmParameterGenerator</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.security</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2370"></a><a name="INDEX-2371"></a><a name="INDEX-2372"></a>
  This class defines a generic API for generating parameters for a
  cryptographic algorithm, typically a <tt class="literal">Signature</tt> or a
  <tt class="literal">javax.crypto.Cipher</tt>. Create an
  <tt class="literal">AlgorithmParameterGenerator</tt> by calling one of the
  static <tt class="literal">getInstance()</tt> factory methods and
  specifying the name of the algorithm and, optionally, the name of the
  desired provider. The default "SUN" provider supports the "DSA"
  algorithm. The "SunJCE" provider shipped with the JCE supports
  "DiffieHellman". Once you have obtained a generator, initialize it by
  calling the <tt class="literal">init()</tt> method and specifying an
  algorithm-independent parameter size (in bits) or an
  algorithm-dependent <tt class="literal">AlgorithmParameterSpec</tt> object. You may also specify a <tt class="literal">SecureRandom</tt> source of
  randomness when you call <tt class="literal">init()</tt>. Once you have
  created and initialized the
  <tt class="literal">AlgorithmParameterGenerator</tt>, call
  <tt class="literal">generateParameters()</tt> to generate an
  <tt class="literal">AlgorithmParameters</tt> object. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">AlgorithmParameterGenerator</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected <b class="function">AlgorithmParameterGenerator</b> (AlgorithmParameterGeneratorSpi <i class="parameter">paramGenSpi</i>, Provider <i class="parameter">provider</i>, String <i class="parameter">algorithm</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Class Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static AlgorithmParameterGenerator <b class="function">getInstance</b> (String <i class="parameter">algorithm</i>) throws NoSuchAlgorithmException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static AlgorithmParameterGenerator <b class="function">getInstance</b> (String <i class="parameter">algorithm</i>, String <i class="parameter">provider</i>) throws NoSuchAlgorithmExceptionNoSuchProviderException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final AlgorithmParameters <b class="function">generateParameters</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final String <b class="function">getAlgorithm</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final Provider <b class="function">getProvider</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final void <b class="function">init</b> (java.security.spec.AlgorithmParameterSpec <i class="parameter">genParamSpec</i>) throws InvalidAlgorithmParameterException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final void <b class="function">init</b> (int <i class="parameter">size</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final void <b class="function">init</b> (java.security.spec.AlgorithmParameterSpec <i class="parameter">genParamSpec</i>, SecureRandom <i class="parameter">random</i>) throws InvalidAlgorithmParameterException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final void <b class="function">init</b> (int <i class="parameter">size</i>, SecureRandom <i class="parameter">random</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">AlgorithmParameterGenerator.getInstance()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>AlgorithmParameterGeneratorSpi</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.security</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2373"></a>
  This abstract class defines the service-provider interface for
  algorithm-parameter generation. A security provider must
  implement a concrete subclass of this class for each algorithm it
  supports. Applications never need to use or subclass this class. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public abstract class <b class="classname">AlgorithmParameterGeneratorSpi</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">AlgorithmParameterGeneratorSpi</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected abstract AlgorithmParameters <b class="function">engineGenerateParameters</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected abstract void <b class="function">engineInit</b> (java.security.spec.AlgorithmParameterSpec <i class="parameter">genParamSpec</i>, SecureRandom <i class="parameter">random</i>) throws InvalidAlgorithmParameterException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected abstract void <b class="function">engineInit</b> (int <i class="parameter">size</i>, SecureRandom <i class="parameter">random</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">AlgorithmParameterGenerator.AlgorithmParameterGenerator()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>AlgorithmParameters</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.security</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2374"></a><a name="INDEX-2375"></a><a name="INDEX-2376"></a>

  This class is a generic, opaque representation of the parameters used
  by some cryptographic algorithm. You can create 
  an instance of the class with
  one of the static <tt class="literal">getInstance()</tt> factory methods,
  specifying the desired algorithm and, optionally, the desired
  provider. The default "SUN" provider supports the "DSA" algorithm. The "SunJCE" provider shipped with the JCE supports "DES",
  "DESede", "PBE", "Blowfish", and "DiffieHellman". Once you have
  obtained an <tt class="literal">AlgorithmParameters</tt> object, initialize
  it by passing an algorithm-specific
  <tt class="literal">java.security.spec.AlgorithmParameterSpec</tt> object 
  or the encoded parameter values as a byte array to
  the <tt class="literal">init()</tt> method. You can also create an
  <tt class="literal">AlgorithmParameters</tt> object with an
  <tt class="literal">AlgorithmParameterGenerator</tt>. <tt class="literal">getEncoded()</tt> returns the initialized algorithm
  parameters as a byte array, using either the algorithm-specific default
  encoding or the named encoding format you specified. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">AlgorithmParameters</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected <b class="function">AlgorithmParameters</b> (AlgorithmParametersSpi <i class="parameter">paramSpi</i>, Provider <i class="parameter">provider</i>, String <i class="parameter">algorithm</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Class Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static AlgorithmParameters <b class="function">getInstance</b> (String <i class="parameter">algorithm</i>) throws NoSuchAlgorithmException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static AlgorithmParameters <b class="function">getInstance</b> (String <i class="parameter">algorithm</i>, String <i class="parameter">provider</i>) throws NoSuchAlgorithmExceptionNoSuchProviderException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final String <b class="function">getAlgorithm</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final byte[ ] <b class="function">getEncoded</b> () throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final byte[ ] <b class="function">getEncoded</b> (String <i class="parameter">format</i>) throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final java.security.spec.AlgorithmParameterSpec <b class="function">getParameterSpec</b> (Class <i class="parameter">paramSpec</i>) throws java.security.spec.InvalidParameterSpecException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final Provider <b class="function">getProvider</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final void <b class="function">init</b> (java.security.spec.AlgorithmParameterSpec <i class="parameter">paramSpec</i>) throws java.security.spec.InvalidParameterSpecException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final void <b class="function">init</b> (byte[ ] <i class="parameter">params</i>) throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final void <b class="function">init</b> (byte[ ] <i class="parameter">params</i>, String <i class="parameter">format</i>) throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Object</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final String <b class="function">toString</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">javax.crypto.Cipher.init(), javax.crypto.CipherSpi.engineInit()</tt>
</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">AlgorithmParameterGenerator.generateParameters(), AlgorithmParameterGeneratorSpi.engineGenerateParameters(), AlgorithmParameters.getInstance(), javax.crypto.Cipher.getParameters(), javax.crypto.CipherSpi.engineGetParameters()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>AlgorithmParametersSpi</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.security</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<p> 
  This abstract class defines the service-provider interface for
  <tt class="literal">AlgorithmParameters</tt>. A security
  provider must implement a concrete subclass of this class for each
  cryptographic algorithm it supports. Applications never need to use or
  subclass this class. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public abstract class <b class="classname">AlgorithmParametersSpi</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">AlgorithmParametersSpi</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected abstract byte[ ] <b class="function">engineGetEncoded</b> () throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected abstract byte[ ] <b class="function">engineGetEncoded</b> (String <i class="parameter">format</i>) throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected abstract java.security.spec.AlgorithmParameterSpec <b class="function">engineGetParameterSpec</b> (Class <i class="parameter">paramSpec</i>) throws java.security.spec.InvalidParameterSpecException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected abstract void <b class="function">engineInit</b> (java.security.spec.AlgorithmParameterSpec <i class="parameter">paramSpec</i>) throws java.security.spec.InvalidParameterSpecException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected abstract void <b class="function">engineInit</b> (byte[ ] <i class="parameter">params</i>) throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected abstract void <b class="function">engineInit</b> (byte[ ] <i class="parameter">params</i>, String <i class="parameter">format</i>) throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected abstract String <b class="function">engineToString</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">AlgorithmParameters.AlgorithmParameters()</tt>
</p>
</div>

<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>AllPermission</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.security</b></font></td><td align="right"><font size="+1"><b><i>serializable permission</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2377"></a><a name="INDEX-2378"></a>
  This class is a <tt class="literal">Permission</tt> subclass whose
  <tt class="literal">implies()</tt> method always returns <tt class="literal">true</tt>. This means
  that code that has been granted <tt class="literal">AllPermission</tt> is
  granted all other possible permissions. This class exists to
  provide a convenient way to grant all permissions to completely
  trusted code. It should be used with care. Applications typically do not need to work directly with
  <tt class="literal">Permission</tt> objects. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public final class <b class="classname">AllPermission</b> extends java.security.Permission {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">AllPermission</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">AllPermission</b> (String <i class="parameter">name</i>, String <i class="parameter">actions</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Permission</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">equals</b> (Object <i class="parameter">obj</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">getActions</b> ();</td><td align="right"><i> default:"&lt;all actions&gt;"</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">hashCode</b> ();</td><td align="right"><i> constant</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">implies</b> (java.security.Permission <i class="parameter">p</i>);</td><td align="right"><i> constant</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public PermissionCollection <b class="function">newPermissionCollection</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->java.security.Permission(Guard,Serializable)-->AllPermission</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>BasicPermission</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.security</b></font></td><td align="right"><font size="+1"><b><i>serializable permission</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2379"></a><a name="INDEX-2380"></a>
  This <tt class="literal">Permission</tt> class is the abstract
  superclass for a number of simple permission types. <tt class="literal">BasicPermission</tt> is typically subclassed to
  implement named permissions that have a name, or target, string, but
  do not support actions. The <tt class="literal">implies()</tt> method of
  <tt class="literal">BasicPermission</tt> defines a simple wildcarding
  capability. The target "*" implies permission for any target. The
  target "x.*" implies permission for any target that begins with "x.". Applications typically do not need to work directly with
  <tt class="literal">Permission</tt> objects. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public abstract class <b class="classname">BasicPermission</b> extends java.security.Permission implements Serializable {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">BasicPermission</b> (String <i class="parameter">name</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">BasicPermission</b> (String <i class="parameter">name</i>, String <i class="parameter">actions</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Permission</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">equals</b> (Object <i class="parameter">obj</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">getActions</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">hashCode</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">implies</b> (java.security.Permission <i class="parameter">p</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public PermissionCollection <b class="function">newPermissionCollection</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->java.security.Permission(Guard,Serializable)-->BasicPermission(Serializable)</tt>
</p>
<p>
<span class="refsect1">Subclasses: </span><tt class="literal">java.awt.AWTPermission, java.io.SerializablePermission, RuntimePermission, java.lang.reflect.ReflectPermission, java.net.NetPermission, SecurityPermission, java.sql.SQLPermission, java.util.PropertyPermission</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>Certificate</b></font></td><td align="right"><font size="+1"><b>Java 1.1; Deprecated in Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.security</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1(opt)</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2381"></a>
  This interface was used in Java 1.1 to represent an
  identity certificate. It has been deprecated as of Java 1.2 in favor of
  the <tt class="literal">java.security.cert</tt> package (see Chapter
  19, <em class="emphasis">The java.security.cert Package</em>.)
  See also
  <tt class="literal">java.security.cert.Certificate</tt>. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public interface <b class="classname">Certificate</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">decode</b> (java.io.InputStream <i class="parameter">stream</i>) throws KeyExceptionjava.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">encode</b> (java.io.OutputStream <i class="parameter">stream</i>) throws KeyExceptionjava.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract String <b class="function">getFormat</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract java.security.Principal <b class="function">getGuarantor</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract java.security.Principal <b class="function">getPrincipal</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract PublicKey <b class="function">getPublicKey</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract String <b class="function">toString</b> (boolean <i class="parameter">detailed</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">Identity.{addCertificate(), removeCertificate()}</tt>
</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">Identity.certificates()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>CodeSource</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.security</b></font></td><td align="right"><font size="+1"><b><i>serializable</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2382"></a><a name="INDEX-2383"></a>
  This class represents the source of a Java class, as defined
  by the URL from which the class was loaded and the set of digital
  signatures attached to the class. A <tt class="literal">CodeSource</tt>
  object is created by specifying a <tt class="literal">java.net.URL</tt> and
  an array of  <tt class="literal">java.security.cert.Certificate</tt>
  objects. Only applications that create custom
  <tt class="literal">ClassLoader</tt> objects should ever need to use or subclass
  this class. </p>
<p>
<a name="INDEX-2384"></a>
  When a <tt class="literal">CodeSource</tt> represents a specific piece of
  Java code, it includes a fully qualified URL and the actual set of
  certificates used to sign the code. When a
  <tt class="literal">CodeSource</tt> object defines a
  <tt class="literal">ProtectionDomain</tt>, however, the URL may include
  wildcards, and the array of certificates is a minimum required
  set of signatures. The <tt class="literal">implies()</tt> method of such a
  <tt class="literal">CodeSource</tt> tests whether a particular
  Java class comes from a matching URL and has the required set of
  signatures. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">CodeSource</b> implements Serializable {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">CodeSource</b> (java.net.URL <i class="parameter">url</i>, java.security.cert.Certificate[ ] <i class="parameter">certs</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final java.security.cert.Certificate[ ] <b class="function">getCertificates</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final java.net.URL <b class="function">getLocation</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">implies</b> (CodeSource <i class="parameter">codesource</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Object</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">equals</b> (Object <i class="parameter">obj</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">hashCode</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">toString</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->CodeSource(Serializable)</tt>
</p>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">java.net.URLClassLoader.getPermissions(), CodeSource.implies(), java.security.Policy.getPermissions(), ProtectionDomain.ProtectionDomain(), SecureClassLoader.{defineClass(), getPermissions()}</tt>
</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">ProtectionDomain.getCodeSource()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>DigestException</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.security</b></font></td><td align="right"><font size="+1"><b><i>serializable checked PJ1.1(opt)</i></b></font></td>
</tr>
</table>
<p>  Signals a problem creating a message digest. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">DigestException</b> extends GeneralSecurityException {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">DigestException</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">DigestException</b> (String <i class="parameter">msg</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Exception-->GeneralSecurityException-->DigestException</tt>
</p>
<p>
<span class="refsect1">Thrown By: </span><tt class="literal">MessageDigest.digest(), MessageDigestSpi.engineDigest()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>DigestInputStream</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.security</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1(opt)</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2385"></a><a name="INDEX-2386"></a><a name="INDEX-2387"></a><a name="INDEX-2388"></a>
  This class is a byte input stream with an associated
  <tt class="literal">MessageDigest</tt> object. When bytes are read with any
  of the <tt class="literal">read()</tt> methods, those bytes are
  automatically passed to the <tt class="literal">update()</tt> method of the
  <tt class="literal">MessageDigest</tt>. When 
  you have finished reading bytes, you can call the
  <tt class="literal">digest()</tt> method of the
  <tt class="literal">MessageDigest</tt> to obtain a message digest. If you
  want to compute a digest just for some of the bytes read from the
  stream, use <tt class="literal">on()</tt> to turn the digesting function on
  and off. Digesting is on by default; call
  <tt class="literal">on(false)</tt> to turn it off. See also
  <tt class="literal">DigestOutputStream</tt> and
  <tt class="literal">MessageDigest</tt>. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">DigestInputStream</b> extends java.io.FilterInputStream {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">DigestInputStream</b> (java.io.InputStream <i class="parameter">stream</i>, MessageDigest <i class="parameter">digest</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public MessageDigest <b class="function">getMessageDigest</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">on</b> (boolean <i class="parameter">on</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setMessageDigest</b> (MessageDigest <i class="parameter">digest</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding FilterInputStream</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">read</b> () throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">read</b> (byte[ ] <i class="parameter">b</i>, int <i class="parameter">off</i>, int <i class="parameter">len</i>) throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Object</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">toString</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Instance Fields</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected MessageDigest <b class="function">digest</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->java.io.InputStream-->java.io.FilterInputStream-->DigestInputStream</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>DigestOutputStream</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.security</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1(opt)</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2389"></a><a name="INDEX-2390"></a><a name="INDEX-2391"></a>
  This class is a byte output stream with an associated
  <tt class="literal">MessageDigest</tt> object. When bytes are written to
  the stream with any of the <tt class="literal">write()</tt> methods, those
  bytes are automatically passed to the <tt class="literal">update()</tt>
  method of the <tt class="literal">MessageDigest</tt>. When you have
  finished writing bytes, you can call the <tt class="literal">digest()</tt>
  method of the <tt class="literal">MessageDigest</tt> to obtain a message
  digest. If you want to compute a digest just for some of the bytes
  written to the stream, use <tt class="literal">on()</tt> to turn the
  digesting function on and off. Digesting is on by default; call
  <tt class="literal">on(false)</tt> to turn it off. See also
  <tt class="literal">DigestInputStream</tt> and 
  <tt class="literal">MessageDigest</tt>. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">DigestOutputStream</b> extends java.io.FilterOutputStream {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">DigestOutputStream</b> (java.io.OutputStream <i class="parameter">stream</i>, MessageDigest <i class="parameter">digest</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public MessageDigest <b class="function">getMessageDigest</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">on</b> (boolean <i class="parameter">on</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setMessageDigest</b> (MessageDigest <i class="parameter">digest</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding FilterOutputStream</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">write</b> (int <i class="parameter">b</i>) throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">write</b> (byte[ ] <i class="parameter">b</i>, int <i class="parameter">off</i>, int <i class="parameter">len</i>) throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Object</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">toString</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Instance Fields</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected MessageDigest <b class="function">digest</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->java.io.OutputStream-->java.io.FilterOutputStream-->DigestOutputStream</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>DomainCombiner</b></font></td><td align="right"><font size="+1"><b>Java 1.3 Beta</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.security</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2392"></a>
  This interface defines a single <tt class="literal">combine()</tt> method
  that combines two arrays of <tt class="literal">ProtectionDomain</tt>
  objects into a single equivalent (and perhaps optimized) array. You can associate a <tt class="literal">DomainCombiner</tt> with an existing
  <tt class="literal">AccessControlContext</tt> by calling the two-argument
  <tt class="literal">AccessControlContext()</tt> constructor. Then, when the
  <tt class="literal">checkPermission()</tt> method of the
  <tt class="literal">AccessControlContext</tt> is called or when the
  <tt class="literal">AccessControlContext</tt> is passed to a
  <tt class="literal">doPrivileged()</tt> method of
  <tt class="literal">AccessController</tt>, the specified
  <tt class="literal">DomainCombiner</tt> merges the protection
  domains of the current stack frame with the protection domains
  encapsulated in the <tt class="literal">AccessControlContext</tt>. This class is used only by system-level code; typical applications
  rarely need to use it. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public interface <b class="classname">DomainCombiner</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract ProtectionDomain[ ] <b class="function">combine</b> (ProtectionDomain[ ] <i class="parameter">currentDomains</i>, ProtectionDomain[ ] <i class="parameter">assignedDomains</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">AccessControlContext.AccessControlContext()</tt>
</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">AccessControlContext.getDomainCombiner()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>GeneralSecurityException</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.security</b></font></td><td align="right"><font size="+1"><b><i>serializable checked</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2393"></a><a name="INDEX-2394"></a>
  This class is the superclass of most of the exceptions defined by the
  <tt class="literal">java.security</tt> package. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">GeneralSecurityException</b> extends Exception {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">GeneralSecurityException</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">GeneralSecurityException</b> (String <i class="parameter">msg</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Exception-->GeneralSecurityException</tt>
</p>
<p>
<span class="refsect1">Subclasses: </span><tt class="literal">DigestException, InvalidAlgorithmParameterException, KeyException, KeyStoreException, NoSuchAlgorithmException, NoSuchProviderException, SignatureException, UnrecoverableKeyException, java.security.cert.CertificateException, java.security.cert.CRLException, java.security.spec.InvalidKeySpecException, java.security.spec.InvalidParameterSpecException, javax.crypto.BadPaddingException, javax.crypto.IllegalBlockSizeException, javax.crypto.NoSuchPaddingException, javax.crypto.ShortBufferException</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>Guard</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.security</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2395"></a><a name="INDEX-2396"></a>
  This interface guards access to an object. The
  <tt class="literal">checkGuard()</tt> method is passed an object
  to which access has been requested. If access should be granted,
  <tt class="literal">checkGuard()</tt> should return silently. Otherwise, if
  access is denied, <tt class="literal">checkGuard()</tt> should throw a
  <tt class="literal">java.lang.SecurityException</tt>. The <tt class="literal">Guard</tt>
  object is used primarily by the <tt class="literal">GuardedObject</tt>
  class. Note that all <tt class="literal">Permission</tt> objects implement
  the <tt class="literal">Guard</tt> interface. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public interface <b class="classname">Guard</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">checkGuard</b> (Object <i class="parameter">object</i>) throws SecurityException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Implementations: </span><tt class="literal">java.security.Permission</tt>
</p>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">GuardedObject.GuardedObject()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>GuardedObject</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.security</b></font></td><td align="right"><font size="+1"><b><i>serializable</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2397"></a><a name="INDEX-2398"></a>
  This class uses a <tt class="literal">Guard</tt> object to guard against
  unauthorized access to an arbitrary encapsulated object. Create a
  <tt class="literal">GuardedObject</tt> by specifying an object and a
  <tt class="literal">Guard</tt> for it. The <tt class="literal">getObject()</tt>
  method calls the <tt class="literal">checkGuard()</tt> method of the
  <tt class="literal">Guard</tt> to determine whether access to the object
  should be allowed. If access is allowed,
  <tt class="literal">getObject()</tt> returns the encapsulated object. Otherwise, it throws a <tt class="literal">java.lang.SecurityException</tt>. </p>
<p>  The <tt class="literal">Guard</tt> object used by a
  <tt class="literal">GuardedObject</tt> is often a
  <tt class="literal">Permission</tt>. In this case, access to the guarded
  object is granted only if the calling code is granted the specified
  permission by the current security policy. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">GuardedObject</b> implements Serializable {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">GuardedObject</b> (Object <i class="parameter">object</i>, Guard <i class="parameter">guard</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Object <b class="function">getObject</b> () throws SecurityException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->GuardedObject(Serializable)</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>Identity</b></font></td><td align="right"><font size="+1"><b>Java 1.1; Deprecated in Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.security</b></font></td><td align="right"><font size="+1"><b><i>serializable PJ1.1(opt)</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2399"></a><a name="INDEX-2400"></a>
  This deprecated class was used in Java 1.1 to represent an entity
  or <tt class="literal">Principal</tt> with an associated
  <tt class="literal">PublicKey</tt> object. In Java 1.1, the public key for 
  a named entity could be retrieved from the system keystore with a
  line like the following:</p>

<blockquote>
<pre class="programlisting">IdentityScope.getSystemScope().getIdentity(name).getPublicKey()</pre>
</blockquote>

<p>
<a name="INDEX-2401"></a><a name="INDEX-2402"></a>
  As of Java 1.2, the <tt class="literal">Identity</tt> class and the related
  <tt class="literal">IdentityScope</tt> and <tt class="literal">Signer</tt>
  classes have been deprecated in favor of <tt class="literal">KeyStore</tt>
  and <tt class="literal">java.security.cert.Certificate</tt>. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public abstract class <b class="classname">Identity</b> implements java.security.PrincipalSerializable {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">Identity</b> (String <i class="parameter">name</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">Identity</b> (String <i class="parameter">name</i>, IdentityScope <i class="parameter">scope</i>) throws KeyManagementException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected <b class="function">Identity</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Property Accessor Methods (by property name)</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">getInfo</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setInfo</b> (String <i class="parameter">info</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final String <b class="function">getName</b> ();</td><td align="right"><i> Implements:Principal</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public PublicKey <b class="function">getPublicKey</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setPublicKey</b> (PublicKey <i class="parameter">key</i>) throws KeyManagementException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final IdentityScope <b class="function">getScope</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">addCertificate</b> (java.security.Certificate <i class="parameter">certificate</i>) throws KeyManagementException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public java.security.Certificate[ ] <b class="function">certificates</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">removeCertificate</b> (java.security.Certificate <i class="parameter">certificate</i>) throws KeyManagementException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">toString</b> (boolean <i class="parameter">detailed</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Methods Implementing Principal</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final boolean <b class="function">equals</b> (Object <i class="parameter">identity</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final String <b class="function">getName</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">hashCode</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">toString</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected boolean <b class="function">identityEquals</b> (Identity <i class="parameter">identity</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Identity(java.security.Principal,Serializable)</tt>
</p>
<p>
<span class="refsect1">Subclasses: </span><tt class="literal">IdentityScope, Signer</tt>
</p>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">Identity.identityEquals(), IdentityScope.{addIdentity(), removeIdentity()}, javax.ejb.EJBContext.isCallerInRole(), javax.ejb.deployment.AccessControlEntry.{AccessControlEntry(), setAllowedIdentities()}, javax.ejb.deployment.ControlDescriptor.setRunAsIdentity()</tt>
</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">IdentityScope.getIdentity(), javax.ejb.EJBContext.getCallerIdentity(), javax.ejb.deployment.AccessControlEntry.getAllowedIdentities(), javax.ejb.deployment.ControlDescriptor.getRunAsIdentity()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>IdentityScope</b></font></td><td align="right"><font size="+1"><b>Java 1.1; Deprecated in Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.security</b></font></td><td align="right"><font size="+1"><b><i>serializable PJ1.1(opt)</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2403"></a>
  This deprecated class was used in Java 1.1 to represent a group of
  <tt class="literal">Identity</tt> and <tt class="literal">Signer</tt> objects and
  their associated <tt class="literal">PublicKey</tt> and
  <tt class="literal">PrivateKey</tt> objects. As of Java 1.2, it has been
  replaced by the <tt class="literal">KeyStore</tt> class. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public abstract class <b class="classname">IdentityScope</b> extends Identity {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">IdentityScope</b> (String <i class="parameter">name</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">IdentityScope</b> (String <i class="parameter">name</i>, IdentityScope <i class="parameter">scope</i>) throws KeyManagementException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected <b class="function">IdentityScope</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Class Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static IdentityScope <b class="function">getSystemScope</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Class Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected static void <b class="function">setSystemScope</b> (IdentityScope <i class="parameter">scope</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">addIdentity</b> (Identity <i class="parameter">identity</i>) throws KeyManagementException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract Identity <b class="function">getIdentity</b> (String <i class="parameter">name</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Identity <b class="function">getIdentity</b> (java.security.Principal <i class="parameter">principal</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract Identity <b class="function">getIdentity</b> (PublicKey <i class="parameter">key</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract java.util.Enumeration <b class="function">identities</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">removeIdentity</b> (Identity <i class="parameter">identity</i>) throws KeyManagementException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract int <b class="function">size</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Identity</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">toString</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Identity(java.security.Principal,Serializable)-->IdentityScope</tt>
</p>

<p>
<span class="refsect1">Passed To: </span><tt class="literal">Identity.Identity(), IdentityScope.{IdentityScope(), setSystemScope()}, Signer.Signer()</tt>
</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">Identity.getScope(), IdentityScope.getSystemScope()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>InvalidAlgorithmParameterException</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.security</b></font></td><td align="right"><font size="+1"><b><i>serializable checked</i></b></font></td>
</tr>
</table>
<p>  Signals that one or more algorithm parameters (usually specified by
  a <tt class="literal">java.security.spec.AlgorithmParameterSpec</tt> object)
  are not valid. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">InvalidAlgorithmParameterException</b> extends GeneralSecurityException {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">InvalidAlgorithmParameterException</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">InvalidAlgorithmParameterException</b> (String <i class="parameter">msg</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Exception-->GeneralSecurityException-->InvalidAlgorithmParameterException</tt>
</p>
<p>
<span class="refsect1">Thrown By: </span>Too many methods to list. </p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>InvalidKeyException</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.security</b></font></td><td align="right"><font size="+1"><b><i>serializable checked PJ1.1(opt)</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2404"></a><a name="INDEX-2405"></a>
  Signals that a <tt class="literal">Key</tt> is not valid. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">InvalidKeyException</b> extends KeyException {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">InvalidKeyException</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">InvalidKeyException</b> (String <i class="parameter">msg</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Exception-->GeneralSecurityException-->KeyException-->InvalidKeyException</tt>
</p>
<p>
<span class="refsect1">Thrown By: </span>Too many methods to list. </p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>InvalidParameterException</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.security</b></font></td><td align="right"><font size="+1"><b><i>serializable unchecked PJ1.1(opt)</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2406"></a>
  This subclass of <tt class="literal">java.lang.IllegalArgumentException</tt>
  signals that a parameter passed to a security method is not valid. This exception type is not widely used. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">InvalidParameterException</b> extends IllegalArgumentException {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">InvalidParameterException</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">InvalidParameterException</b> (String <i class="parameter">msg</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Exception-->RuntimeException-->IllegalArgumentException-->InvalidParameterException</tt>
</p>
<p>
<span class="refsect1">Thrown By: </span><tt class="literal">Signature.{getParameter(), setParameter()}, SignatureSpi.{engineGetParameter(), engineSetParameter()}, Signer.setKeyPair(), java.security.interfaces.DSAKeyPairGenerator.initialize()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>Key</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.security</b></font></td><td align="right"><font size="+1"><b><i>serializable PJ1.1(opt)</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2407"></a><a name="INDEX-2408"></a><a name="INDEX-2409"></a><a name="INDEX-2410"></a>
  This interface defines the high-level characteristics of all
  cryptographic keys. <tt class="literal">getAlgorithm()</tt> returns the
  name of the cryptographic algorithm (such as RSA) used with the
  key. <tt class="literal">getFormat()</tt> return the name of the external
  encoding (such as X.509) used with the key. <tt class="literal">getEncoded()</tt> returns the key as an array of bytes,
  encoded using the format specified by <tt class="literal">getFormat()</tt>. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public interface <b class="classname">Key</b> extends Serializable {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constants</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public static final long <b class="function">serialVersionUID</b> ;</td><td align="right"><i> =6603384152749567654</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract String <b class="function">getAlgorithm</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract byte[ ] <b class="function">getEncoded</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract String <b class="function">getFormat</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">(Key(Serializable))</tt>
</p>
<p>
<span class="refsect1">Implementations: </span><tt class="literal">PrivateKey, PublicKey, javax.crypto.SecretKey</tt>
</p>
<p>
<span class="refsect1">Passed To: </span>Too many methods to list. </p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">KeyFactory.translateKey(), KeyFactorySpi.engineTranslateKey(), KeyStore.getKey(), KeyStoreSpi.engineGetKey(), javax.crypto.KeyAgreement.doPhase(), javax.crypto.KeyAgreementSpi.engineDoPhase()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>KeyException</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.security</b></font></td><td align="right"><font size="+1"><b><i>serializable checked PJ1.1(opt)</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2411"></a>
  Signals that something is wrong with a key. See also the subclasses
  <tt class="literal">InvalidKeyException</tt> and
  <tt class="literal">KeyManagementException</tt>. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">KeyException</b> extends GeneralSecurityException {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">KeyException</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">KeyException</b> (String <i class="parameter">msg</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Exception-->GeneralSecurityException-->KeyException</tt>
</p>
<p>
<span class="refsect1">Subclasses: </span><tt class="literal">InvalidKeyException, KeyManagementException</tt>
</p>
<p>
<span class="refsect1">Thrown By: </span><tt class="literal">java.security.Certificate.{decode(), encode()}, Signer.setKeyPair()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>KeyFactory</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.security</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2412"></a>
 
  This class translates asymmetric cryptographic keys between the
  two representations used by the Java Security API. <tt class="literal">java.security.Key</tt> is the opaque,
  algorithm-independent representation of a key used by most of the
  Security API. <tt class="literal">java.security.spec.KeySpec</tt> is a
  marker interface implemented by transparent, algorithm-specific
  representations of keys. <tt class="literal">KeyFactory</tt> is used with
  public and private keys; see
  <tt class="literal">javax.crypto.SecretKeyFactory</tt> if you are working
  with symmetric or secret keys. </p>
<p>
<a name="INDEX-2413"></a><a name="INDEX-2414"></a><a name="INDEX-2415"></a>
  To convert a <tt class="literal">Key</tt> to a <tt class="literal">KeySpec</tt>
  or vice versa, create a <tt class="literal">KeyFactory</tt> by calling one
  of the static <tt class="literal">getInstance()</tt> factory methods and
  specifying the name of the key algorithm (e.g., DSA or RSA). Then, use
  <tt class="literal">generatePublic()</tt> or
  <tt class="literal">generatePrivate()</tt> to create a
  <tt class="literal">PublicKey</tt> or <tt class="literal">PrivateKey</tt> object
  from a corresponding <tt class="literal">KeySpec</tt>. Or use
  <tt class="literal">getKeySpec()</tt> to obtain a <tt class="literal">KeySpec</tt>
  for a given <tt class="literal">Key</tt>. Because there
  can be more than one <tt class="literal">KeySpec</tt> implementation used by
  a particular cryptographic algorithm, you must also specify the
  <tt class="literal">Class</tt> of the <tt class="literal">KeySpec</tt> you desire. </p>
<p>  If you do not need to transport keys portably between
  applications and/or systems, you can use a <tt class="literal">KeyStore</tt>
  to store and retrieve keys and certificates, avoiding
  <tt class="literal">KeySpec</tt> and <tt class="literal">KeyFactory</tt> altogether. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">KeyFactory</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected <b class="function">KeyFactory</b> (KeyFactorySpi <i class="parameter">keyFacSpi</i>, Provider <i class="parameter">provider</i>, String <i class="parameter">algorithm</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Class Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static KeyFactory <b class="function">getInstance</b> (String <i class="parameter">algorithm</i>) throws NoSuchAlgorithmException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static KeyFactory <b class="function">getInstance</b> (String <i class="parameter">algorithm</i>, String <i class="parameter">provider</i>) throws NoSuchAlgorithmExceptionNoSuchProviderException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final PrivateKey <b class="function">generatePrivate</b> (java.security.spec.KeySpec <i class="parameter">keySpec</i>) throws java.security.spec.InvalidKeySpecException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final PublicKey <b class="function">generatePublic</b> (java.security.spec.KeySpec <i class="parameter">keySpec</i>) throws java.security.spec.InvalidKeySpecException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final String <b class="function">getAlgorithm</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final java.security.spec.KeySpec <b class="function">getKeySpec</b> (Key <i class="parameter">key</i>, Class <i class="parameter">keySpec</i>) throws java.security.spec.InvalidKeySpecException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final Provider <b class="function">getProvider</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final Key <b class="function">translateKey</b> (Key <i class="parameter">key</i>) throws InvalidKeyException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">KeyFactory.getInstance()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>KeyFactorySpi</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.security</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2416"></a>
  This abstract class defines the service-provider interface for
  <tt class="literal">KeyFactory</tt>. A security
  provider must implement a concrete subclass of this class for each
  cryptographic algorithm it supports. Applications never need to use or
  subclass this class. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public abstract class <b class="classname">KeyFactorySpi</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">KeyFactorySpi</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected abstract PrivateKey <b class="function">engineGeneratePrivate</b> (java.security.spec.KeySpec <i class="parameter">keySpec</i>) throws java.security.spec.InvalidKeySpecException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected abstract PublicKey <b class="function">engineGeneratePublic</b> (java.security.spec.KeySpec <i class="parameter">keySpec</i>) throws java.security.spec.InvalidKeySpecException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected abstract java.security.spec.KeySpec <b class="function">engineGetKeySpec</b> (Key <i class="parameter">key</i>, Class <i class="parameter">keySpec</i>) throws java.security.spec.InvalidKeySpecException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected abstract Key <b class="function">engineTranslateKey</b> (Key <i class="parameter">key</i>) throws InvalidKeyException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">KeyFactory.KeyFactory()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>KeyManagementException</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.security</b></font></td><td align="right"><font size="+1"><b><i>serializable checked PJ1.1(opt)</i></b></font></td>
</tr>
</table>
<p>  Signals an exception in a key management operation. In Java 1.2, this
  exception is only thrown by deprecated methods. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">KeyManagementException</b> extends KeyException {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">KeyManagementException</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">KeyManagementException</b> (String <i class="parameter">msg</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Exception-->GeneralSecurityException-->KeyException-->KeyManagementException</tt>
</p>
<p>
<span class="refsect1">Thrown By: </span><tt class="literal">Identity.{addCertificate(), Identity(), removeCertificate(), setPublicKey()}, IdentityScope.{addIdentity(), IdentityScope(), removeIdentity()}, Signer.Signer()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>KeyPair</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.security</b></font></td><td align="right"><font size="+1"><b><i>serializable PJ1.1(opt)</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2417"></a>
  This class is a simple container for a <tt class="literal">PublicKey</tt>
  and a <tt class="literal">PrivateKey</tt> object. Because a
  <tt class="literal">KeyPair</tt> contains an unprotected
  private key, it must be used with as much caution as a
  <tt class="literal">PrivateKey</tt> object. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public final class <b class="classname">KeyPair</b> implements Serializable {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">KeyPair</b> (PublicKey <i class="parameter">publicKey</i>, PrivateKey <i class="parameter">privateKey</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public PrivateKey <b class="function">getPrivate</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public PublicKey <b class="function">getPublic</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->KeyPair(Serializable)</tt>
</p>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">Signer.setKeyPair()</tt>
</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">KeyPairGenerator.{generateKeyPair(), genKeyPair()}, KeyPairGeneratorSpi.generateKeyPair()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>KeyPairGenerator</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.security</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1(opt)</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2418"></a><a name="INDEX-2419"></a>
  This class generates a public/private key pair for a
  specified cryptographic algorithm. To create a
  <tt class="literal">KeyPairGenerator</tt>, call one of the static
  <tt class="literal">getInstance()</tt> methods, specifying the name of the
  algorithm and, optionally, the name of the security provider to use. The default "SUN" provider shipped with Java 1.2 supports only the "DSA" 
  algorithm. The "SunJCE" provider of the Java Cryptography Extension
  (JCE) additionally supports the "DiffieHellman" algorithm. </p>
<p>
<a name="INDEX-2420"></a><a name="INDEX-2421"></a>
  Once you have created a <tt class="literal">KeyPairGenerator</tt>,
  initialize it by calling <tt class="literal">initialize()</tt>. You can
  perform an algorithm-independent initialization by simply specifying
  the desired key size in bits. Alternatively, you can do an
  algorithm-dependent initialization by providing an appropriate
  <tt class="literal">AlgorithmParameterSpec</tt> object for the key-generation algorithm. In either case, you may optionally provide your
  own source of randomness in the guise of a
  <tt class="literal">SecureRandom</tt> object. Once you have created and
  initialized a <tt class="literal">KeyPairGenerator</tt>, call
  <tt class="literal">genKeyPair()</tt> to create a <tt class="literal">KeyPair</tt>
  object. Remember that the <tt class="literal">KeyPair</tt> contains a
  <tt class="literal">PrivateKey</tt> that <em class="emphasis">must</em> be kept
  private. </p>
<p>  For historical reasons, <tt class="literal">KeyPairGenerator</tt> extends
  <tt class="literal">KeyPairGeneratorSpi</tt>. Applications should not use
  any methods inherited from that class. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public abstract class <b class="classname">KeyPairGenerator</b> extends KeyPairGeneratorSpi {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected <b class="function">KeyPairGenerator</b> (String <i class="parameter">algorithm</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Class Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static KeyPairGenerator <b class="function">getInstance</b> (String <i class="parameter">algorithm</i>) throws NoSuchAlgorithmException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static KeyPairGenerator <b class="function">getInstance</b> (String <i class="parameter">algorithm</i>, String <i class="parameter">provider</i>) throws NoSuchAlgorithmExceptionNoSuchProviderException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public final KeyPair <b class="function">genKeyPair</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">getAlgorithm</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public final Provider <b class="function">getProvider</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public void <b class="function">initialize</b> (java.security.spec.AlgorithmParameterSpec <i class="parameter">params</i>) throws InvalidAlgorithmParameterException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">initialize</b> (int <i class="parameter">keysize</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding KeyPairGeneratorSpi</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public KeyPair <b class="function">generateKeyPair</b> ();</td><td align="right"><i> constant</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public void <b class="function">initialize</b> (java.security.spec.AlgorithmParameterSpec <i class="parameter">params</i>, SecureRandom <i class="parameter">random</i>) throws InvalidAlgorithmParameterException;</td><td align="right"><i> empty</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">initialize</b> (int <i class="parameter">keysize</i>, SecureRandom <i class="parameter">random</i>);</td><td align="right"><i> empty</i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->KeyPairGeneratorSpi-->KeyPairGenerator</tt>
</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">KeyPairGenerator.getInstance()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>KeyPairGeneratorSpi</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.security</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2422"></a>
  This abstract class defines the service-provider interface for
  <tt class="literal">KeyPairGenerator</tt>. A security
  provider must implement a concrete subclass of this class for each
  cryptographic algorithm for which it can generate key pairs. Applications never need to use or subclass this class. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public abstract class <b class="classname">KeyPairGeneratorSpi</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">KeyPairGeneratorSpi</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract KeyPair <b class="function">generateKeyPair</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">initialize</b> (java.security.spec.AlgorithmParameterSpec <i class="parameter">params</i>, SecureRandom <i class="parameter">random</i>) throws InvalidAlgorithmParameterException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">initialize</b> (int <i class="parameter">keysize</i>, SecureRandom <i class="parameter">random</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Subclasses: </span><tt class="literal">KeyPairGenerator</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>KeyStore</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.security</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2423"></a><a name="INDEX-2424"></a><a name="INDEX-2425"></a>
  This class represents a mapping of names, or aliases, to
  <tt class="literal">Key</tt> and
  <tt class="literal">java.security.cert.Certificate</tt> objects. Obtain a
  <tt class="literal">KeyStore</tt> object by calling one of the static
  <tt class="literal">getInstance()</tt> methods, specifying the desired key
  store type and, optionally, the desired provider. Use "JKS" to
  specify the "Java Key Store" type defined by Sun. Because of U.S. export regulations, this default
  <tt class="literal">KeyStore</tt> supports only weak encryption of private
  keys. If you have the Java Cryptography Extension installed, use the
  type "JCEKS" and provider "SunJCE" to obtain a
  <tt class="literal">KeyStore</tt> implementation that offers much stronger
  password-based encryption of keys. Once you have
  created a <tt class="literal">KeyStore</tt>, use <tt class="literal">load()</tt>
  to read its contents from a stream, supplying an optional password that verifies the integrity of the stream data. Keystores are
  typically read from a file named <em class="emphasis">.keystore</em> in the
  user's home directory. </p>
<p>
<a name="INDEX-2426"></a><a name="INDEX-2427"></a><a name="INDEX-2428"></a><a name="INDEX-2429"></a><a name="INDEX-2430"></a>
  A <tt class="literal">KeyStore</tt> may contain both public and private
  key entries. A public key entry is represented by a
  <tt class="literal">Certificate</tt> object. Use
  <tt class="literal">getCertificate()</tt> to look up a named public key
  certificate and <tt class="literal">setCertificateEntry()</tt> to add a
  new public key certificate to the keystore. A private key entry in
  the keystore contains both a password-protected <tt class="literal">Key</tt>
  and an array of <tt class="literal">Certificate</tt> objects that represent
  the certificate chain for the public key that
  corresponds to the private key. Use <tt class="literal">getKey()</tt> and
  <tt class="literal">getCertificateChain()</tt> to look up the key and
  certificate chain. Use <tt class="literal">setKeyEntry()</tt> to create a
  new private key entry. You must provide a password when
  reading or writing a private key from the keystore; this password encrypts the key data, and each private key
  entry should have a different password. If you are using
  the JCE, you may also store <tt class="literal">javax.crypto.SecretKey</tt>
  objects in a <tt class="literal">KeyStore</tt>. Secret keys are stored like
  private keys, except that they do not have a certificate chain
  associated with them. </p>
<p>
<a name="INDEX-2431"></a><a name="INDEX-2432"></a>
  To delete an entry from a <tt class="literal">KeyStore</tt>, use
  <tt class="literal">deleteEntry()</tt>. If you modify the contents of a
  <tt class="literal">KeyStore</tt>, use <tt class="literal">store()</tt> to save
  the keystore to a specified stream. You may specify a password that is used to
  validate the integrity of the data, but it is not used to
  encrypt the keystore. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">KeyStore</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected <b class="function">KeyStore</b> (KeyStoreSpi <i class="parameter">keyStoreSpi</i>, Provider <i class="parameter">provider</i>, String <i class="parameter">type</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Class Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final String <b class="function">getDefaultType</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static KeyStore <b class="function">getInstance</b> (String <i class="parameter">type</i>) throws KeyStoreException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static KeyStore <b class="function">getInstance</b> (String <i class="parameter">type</i>, String <i class="parameter">provider</i>) throws KeyStoreExceptionNoSuchProviderException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final java.util.Enumeration <b class="function">aliases</b> () throws KeyStoreException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final boolean <b class="function">containsAlias</b> (String <i class="parameter">alias</i>) throws KeyStoreException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final void <b class="function">deleteEntry</b> (String <i class="parameter">alias</i>) throws KeyStoreException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final java.security.cert.Certificate <b class="function">getCertificate</b> (String <i class="parameter">alias</i>) throws KeyStoreException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final String <b class="function">getCertificateAlias</b> (java.security.cert.Certificate <i class="parameter">cert</i>) throws KeyStoreException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final java.security.cert.Certificate[ ] <b class="function">getCertificateChain</b> (String <i class="parameter">alias</i>) throws KeyStoreException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final java.util.Date <b class="function">getCreationDate</b> (String <i class="parameter">alias</i>) throws KeyStoreException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final Key <b class="function">getKey</b> (String <i class="parameter">alias</i>, char[ ] <i class="parameter">password</i>) throws KeyStoreExceptionNoSuchAlgorithmExceptionUnrecoverableKeyException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final Provider <b class="function">getProvider</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final String <b class="function">getType</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final boolean <b class="function">isCertificateEntry</b> (String <i class="parameter">alias</i>) throws KeyStoreException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final boolean <b class="function">isKeyEntry</b> (String <i class="parameter">alias</i>) throws KeyStoreException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final void <b class="function">load</b> (java.io.InputStream <i class="parameter">stream</i>, char[ ] <i class="parameter">password</i>) throws java.io.IOExceptionNoSuchAlgorithmExceptionjava.security.cert.CertificateException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final void <b class="function">setCertificateEntry</b> (String <i class="parameter">alias</i>, java.security.cert.Certificate <i class="parameter">cert</i>) throws KeyStoreException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final void <b class="function">setKeyEntry</b> (String <i class="parameter">alias</i>, byte[ ] <i class="parameter">key</i>, java.security.cert.Certificate[ ] <i class="parameter">chain</i>) throws KeyStoreException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final void <b class="function">setKeyEntry</b> (String <i class="parameter">alias</i>, Key <i class="parameter">key</i>, char[ ] <i class="parameter">password</i>, java.security.cert.Certificate[ ] <i class="parameter">chain</i>) throws KeyStoreException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final int <b class="function">size</b> () throws KeyStoreException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final void <b class="function">store</b> (java.io.OutputStream <i class="parameter">stream</i>, char[ ] <i class="parameter">password</i>) throws KeyStoreExceptionjava.io.IOExceptionNoSuchAlgorithmExceptionjava.security.cert.CertificateException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">KeyStore.getInstance()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>KeyStoreException</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.security</b></font></td><td align="right"><font size="+1"><b><i>serializable checked</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2433"></a>
  Signals a problem with a <tt class="literal">KeyStore</tt>. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">KeyStoreException</b> extends GeneralSecurityException {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">KeyStoreException</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">KeyStoreException</b> (String <i class="parameter">msg</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Exception-->GeneralSecurityException-->KeyStoreException</tt>
</p>
<p>
<span class="refsect1">Thrown By: </span>Too many methods to list. </p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>KeyStoreSpi</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.security</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2434"></a><a name="INDEX-2435"></a>
  This abstract class defines the service-provider interface for
  <tt class="literal">KeyStore</tt>. A security
  provider must implement a concrete subclass of this class for each
  <tt class="literal">KeyStore</tt> type it supports. Applications never need
  to use or subclass this class. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public abstract class <b class="classname">KeyStoreSpi</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">KeyStoreSpi</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract java.util.Enumeration <b class="function">engineAliases</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract boolean <b class="function">engineContainsAlias</b> (String <i class="parameter">alias</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">engineDeleteEntry</b> (String <i class="parameter">alias</i>) throws KeyStoreException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract java.security.cert.Certificate <b class="function">engineGetCertificate</b> (String <i class="parameter">alias</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract String <b class="function">engineGetCertificateAlias</b> (java.security.cert.Certificate <i class="parameter">cert</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract java.security.cert.Certificate[ ] <b class="function">engineGetCertificateChain</b> (String <i class="parameter">alias</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract java.util.Date <b class="function">engineGetCreationDate</b> (String <i class="parameter">alias</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract Key <b class="function">engineGetKey</b> (String <i class="parameter">alias</i>, char[ ] <i class="parameter">password</i>) throws NoSuchAlgorithmExceptionUnrecoverableKeyException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract boolean <b class="function">engineIsCertificateEntry</b> (String <i class="parameter">alias</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract boolean <b class="function">engineIsKeyEntry</b> (String <i class="parameter">alias</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">engineLoad</b> (java.io.InputStream <i class="parameter">stream</i>, char[ ] <i class="parameter">password</i>) throws java.io.IOExceptionNoSuchAlgorithmExceptionjava.security.cert.CertificateException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">engineSetCertificateEntry</b> (String <i class="parameter">alias</i>, java.security.cert.Certificate <i class="parameter">cert</i>) throws KeyStoreException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">engineSetKeyEntry</b> (String <i class="parameter">alias</i>, byte[ ] <i class="parameter">key</i>, java.security.cert.Certificate[ ] <i class="parameter">chain</i>) throws KeyStoreException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">engineSetKeyEntry</b> (String <i class="parameter">alias</i>, Key <i class="parameter">key</i>, char[ ] <i class="parameter">password</i>, java.security.cert.Certificate[ ] <i class="parameter">chain</i>) throws KeyStoreException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract int <b class="function">engineSize</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">engineStore</b> (java.io.OutputStream <i class="parameter">stream</i>, char[ ] <i class="parameter">password</i>) throws java.io.IOExceptionNoSuchAlgorithmExceptionjava.security.cert.CertificateException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">KeyStore.KeyStore()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>MessageDigest</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.security</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1(opt)</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2436"></a><a name="INDEX-2437"></a><a name="INDEX-2438"></a><a name="INDEX-2439"></a><a name="INDEX-2440"></a><a name="INDEX-2441"></a>

  This class computes a message digest (also known as a cryptographic
  checksum) for an arbitrary sequence of bytes. Obtain a
  <tt class="literal">MessageDigest</tt> object by calling one of the static
  <tt class="literal">getInstance()</tt> factory methods and specifying the
  desired algorithm (e.g., SHA or MD5) and, optionally, the
  desired provider. Next, specify the data to be digested by calling
  any of the <tt class="literal">update()</tt> methods one or more times. Finally, call <tt class="literal">digest()</tt>, which computes the
  message digest and returns it as an array of bytes. If you
  have only one array of bytes to be digested, you can pass it
  directly to <tt class="literal">digest()</tt> and skip the
  <tt class="literal">update()</tt> step. When you call
  <tt class="literal">digest()</tt>, the <tt class="literal">MessageDigest()</tt>
  object is reset and is then ready to compute a new digest. You can also
  explicitly reset a <tt class="literal">MessageDigest</tt> without computing
  the digest by calling <tt class="literal">reset()</tt>. To compute a digest
  for part of a message without resetting the
  <tt class="literal">MessageDigest</tt>, clone the
  <tt class="literal">MessageDigest</tt> and call <tt class="literal">digest()</tt>
  on the cloned copy. Note that not all implementations are cloneable,
  so the <tt class="literal">clone()</tt> method may throw an exception. </p>
<p>  The <tt class="literal">MessageDigest</tt> class is often used
  in conjunction with <tt class="literal">DigestInputStream</tt> and
  <tt class="literal">DigestOutputStream</tt>, which automate the
  <tt class="literal">update()</tt> calls for you. </p>
<div class="refsynopsisdiv">
<table border="0">

<tr>
<td colspan="3">public abstract class <b class="classname">MessageDigest</b> extends MessageDigestSpi {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected <b class="function">MessageDigest</b> (String <i class="parameter">algorithm</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Class Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static MessageDigest <b class="function">getInstance</b> (String <i class="parameter">algorithm</i>) throws NoSuchAlgorithmException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static MessageDigest <b class="function">getInstance</b> (String <i class="parameter">algorithm</i>, String <i class="parameter">provider</i>) throws NoSuchAlgorithmExceptionNoSuchProviderException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static boolean <b class="function">isEqual</b> (byte[ ] <i class="parameter">digesta</i>, byte[ ] <i class="parameter">digestb</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public byte[ ] <b class="function">digest</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public byte[ ] <b class="function">digest</b> (byte[ ] <i class="parameter">input</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public int <b class="function">digest</b> (byte[ ] <i class="parameter">buf</i>, int <i class="parameter">offset</i>, int <i class="parameter">len</i>) throws DigestException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final String <b class="function">getAlgorithm</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public final int <b class="function">getDigestLength</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public final Provider <b class="function">getProvider</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">reset</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">update</b> (byte <i class="parameter">input</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">update</b> (byte[ ] <i class="parameter">input</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">update</b> (byte[ ] <i class="parameter">input</i>, int <i class="parameter">offset</i>, int <i class="parameter">len</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding MessageDigestSpi</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Object <b class="function">clone</b> () throws CloneNotSupportedException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Object</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">toString</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->MessageDigestSpi-->MessageDigest</tt>
</p>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">DigestInputStream.{DigestInputStream(), setMessageDigest()}, DigestOutputStream.{DigestOutputStream(), setMessageDigest()}</tt>
</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">DigestInputStream.getMessageDigest(), DigestOutputStream.getMessageDigest(), MessageDigest.getInstance()</tt>
</p>
<p>
<span class="refsect1">Type Of: </span><tt class="literal">DigestInputStream.digest, DigestOutputStream.digest</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>MessageDigestSpi</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.security</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2442"></a><a name="INDEX-2443"></a>
  This abstract class defines the service-provider interface for
  <tt class="literal">MessageDigest</tt>. A security provider
  must implement a concrete subclass of this class for each message-digest algorithm it supports. Applications never need to use or
  subclass this class. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public abstract class <b class="classname">MessageDigestSpi</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">MessageDigestSpi</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Object</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Object <b class="function">clone</b> () throws CloneNotSupportedException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected abstract byte[ ] <b class="function">engineDigest</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected int <b class="function">engineDigest</b> (byte[ ] <i class="parameter">buf</i>, int <i class="parameter">offset</i>, int <i class="parameter">len</i>) throws DigestException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected int <b class="function">engineGetDigestLength</b> ();</td><td align="right"><i> constant</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected abstract void <b class="function">engineReset</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected abstract void <b class="function">engineUpdate</b> (byte <i class="parameter">input</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected abstract void <b class="function">engineUpdate</b> (byte[ ] <i class="parameter">input</i>, int <i class="parameter">offset</i>, int <i class="parameter">len</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Subclasses: </span><tt class="literal">MessageDigest</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>NoSuchAlgorithmException</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.security</b></font></td><td align="right"><font size="+1"><b><i>serializable checked PJ1.1(opt)</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2444"></a>
  Signals that a requested cryptographic algorithm is not available. Thrown by <tt class="literal">getInstance()</tt> factory methods throughout
  the <tt class="literal">java.security</tt> package. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">NoSuchAlgorithmException</b> extends GeneralSecurityException {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">NoSuchAlgorithmException</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">NoSuchAlgorithmException</b> (String <i class="parameter">msg</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Exception-->GeneralSecurityException-->NoSuchAlgorithmException</tt>
</p>
<p>
<span class="refsect1">Thrown By: </span>Too many methods to list. </p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>NoSuchProviderException</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.security</b></font></td><td align="right"><font size="+1"><b><i>serializable checked PJ1.1(opt)</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2445"></a><a name="INDEX-2446"></a>
  Signals that a requested cryptographic service provider is not available. Thrown by <tt class="literal">getInstance()</tt> factory methods throughout
  the <tt class="literal">java.security</tt> package. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">NoSuchProviderException</b> extends GeneralSecurityException {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">NoSuchProviderException</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">NoSuchProviderException</b> (String <i class="parameter">msg</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Exception-->GeneralSecurityException-->NoSuchProviderException</tt>
</p>
<p>
<span class="refsect1">Thrown By: </span>Too many methods to list. </p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>Permission</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.security</b></font></td><td align="right"><font size="+1"><b><i>serializable permission</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2447"></a>
  This abstract class represents a system resource, such as a file in
  the filesystem, or a system capability, such as the ability to accept
  network connections. Concrete subclasses of
  <tt class="literal">Permission</tt>, such as
  <tt class="literal">java.io.FilePermission</tt> and
  <tt class="literal">java.net.SocketPermission</tt>, represent specific types of
  resources. <tt class="literal">Permission</tt> objects are used by system
  code that is requesting access to a resource. They are also used by
  <tt class="literal">Policy</tt> objects that grant access to resources. The
  <tt class="literal">AccessController.checkPermission()</tt> method considers
  the source of the currently running 
  Java code, determines the set of permissions
  that are granted to that code by the current
  <tt class="literal">Policy</tt>, and then checks to see whether a specified
  <tt class="literal">Permission</tt> object is included in that set. With
  the introduction of Java 1.2, this is the fundamental Java access-control mechanism. </p>
<p>  Each permission has a name (sometimes called the <em class="emphasis">target</em>) and,
  optionally, a comma-separated list of actions. For example, the name
  of a <tt class="literal">FilePermission</tt> is the name of the file
  or directory for which permission is being granted. The actions
  associated with this permission might be "read"; "write"; or
  "read,write". The interpretation of the name and action strings is
  entirely up to the implementation of <tt class="literal">Permission</tt>. A
  number of implementations support the use of wildcards; for example,
  a <tt class="literal">FilePermission</tt> can have a name of "/tmp/*",
  which represents access to any files in a <em class="emphasis">/tmp</em> 
  directory. Permission objects must be immutable, so an implementation must never
  define a <tt class="literal">setName()</tt> or
  <tt class="literal">setActions()</tt> method. </p>
<p>
<a name="INDEX-2448"></a>

  One of the most important abstract methods defined by
  <tt class="literal">Permission</tt> is <tt class="literal">implies()</tt>. This
  method must return <tt class="literal">true</tt> if this
  <tt class="literal">Permission</tt> implies another
  <tt class="literal">Permission</tt>. For example, if an application
  requests a <tt class="literal">FilePermission</tt> with name "/tmp/test" and
  action "read", and the current security <tt class="literal">Policy</tt>
  grants a <tt class="literal">FilePermission</tt> with name "/tmp/*" and actions "read,write",
  the request is granted because the requested permission is
  implied by the granted one. </p>
<p>  In general, only system-level code needs to work directly with
  <tt class="literal">Permission</tt> and its concrete subclasses. System administrators who are 
  configuring security policies need to understand
  the various <tt class="literal">Permission</tt> subclasses. Applications that want to extend the Java access-control mechanism to
  provide customized access control to their own resources should
  subclass <tt class="literal">Permission</tt> to define custom permission
  types. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public abstract class <b class="classname">Permission</b> implements GuardSerializable {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">Permission</b> (String <i class="parameter">name</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract String <b class="function">getActions</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final String <b class="function">getName</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract boolean <b class="function">implies</b> (java.security.Permission <i class="parameter">permission</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public PermissionCollection <b class="function">newPermissionCollection</b> ();</td><td align="right"><i> constant</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Methods Implementing Guard</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">checkGuard</b> (Object <i class="parameter">object</i>) throws SecurityException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Object</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract boolean <b class="function">equals</b> (Object <i class="parameter">obj</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract int <b class="function">hashCode</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">toString</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->java.security.Permission(Guard,Serializable)</tt>
</p>
<p>
<span class="refsect1">Subclasses: </span><tt class="literal">java.io.FilePermission, java.net.SocketPermission, AllPermission, BasicPermission, UnresolvedPermission</tt>
</p>
<p>
<span class="refsect1">Passed To: </span>Too many methods to list. </p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">java.net.HttpURLConnection.getPermission(), java.net.URLConnection.getPermission(), AccessControlException.getPermission()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>PermissionCollection</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.security</b></font></td><td align="right"><font size="+1"><b><i>serializable</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2449"></a><a name="INDEX-2450"></a><a name="INDEX-2451"></a><a name="INDEX-2452"></a>
  This class is used by <tt class="literal">Permissions</tt> to store a
  collection of <tt class="literal">Permission</tt> objects that are all
  the same type. Like the
  <tt class="literal">Permission</tt> class itself,
  <tt class="literal">PermissionCollection</tt> defines an
  <tt class="literal">implies()</tt> method that can determine whether a
  requested <tt class="literal">Permission</tt> is implied by any of the
  <tt class="literal">Permission</tt> objects in the collection. Some <tt class="literal">Permission</tt> types may require a custom
  <tt class="literal">PermissionCollection</tt> type in order to correctly
  implement the <tt class="literal">implies()</tt> method. In this case, the
  <tt class="literal">Permission</tt> subclass should override
  <tt class="literal">newPermissionCollection()</tt> to return a 
  <tt class="literal">Permission</tt> of
  the appropriate type. <tt class="literal">PermissionCollection</tt> is used by system code that
  manages security policies. Applications rarely need to use it. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public abstract class <b class="classname">PermissionCollection</b> implements Serializable {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">PermissionCollection</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">add</b> (java.security.Permission <i class="parameter">permission</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract java.util.Enumeration <b class="function">elements</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract boolean <b class="function">implies</b> (java.security.Permission <i class="parameter">permission</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">isReadOnly</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setReadOnly</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Object</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">toString</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->PermissionCollection(Serializable)</tt>
</p>
<p>
<span class="refsect1">Subclasses: </span><tt class="literal">Permissions</tt>
</p>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">ProtectionDomain.ProtectionDomain()</tt>
</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">java.io.FilePermission.newPermissionCollection(), java.net.SocketPermission.newPermissionCollection(), java.net.URLClassLoader.getPermissions(), AllPermission.newPermissionCollection(), BasicPermission.newPermissionCollection(), java.security.Permission.newPermissionCollection(), java.security.Policy.getPermissions(), ProtectionDomain.getPermissions(), SecureClassLoader.getPermissions(), UnresolvedPermission.newPermissionCollection(), java.util.PropertyPermission.newPermissionCollection()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>Permissions</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.security</b></font></td><td align="right"><font size="+1"><b><i>serializable</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2453"></a><a name="INDEX-2454"></a><a name="INDEX-2455"></a><a name="INDEX-2456"></a>
  This class stores an arbitrary collection of
  <tt class="literal">Permission</tt> objects. When
  <tt class="literal">Permission</tt> objects are added with the
  <tt class="literal">add()</tt> method, they are grouped into an internal set
  of <tt class="literal">PermissionCollection</tt> objects that contain only a
  single type of <tt class="literal">Permission</tt>. Use the
  <tt class="literal">elements()</tt> method to obtain an
  <tt class="literal">Enumeration</tt> of the <tt class="literal">Permission</tt>
  objects in the collection. Use <tt class="literal">implies()</tt> to
  determine if a specified <tt class="literal">Permission</tt> is implied by
  any of the <tt class="literal">Permission</tt> objects in the collection. <tt class="literal">Permissions</tt> is used by system code that
  manages security policies. Applications rarely need to use it. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public final class <b class="classname">Permissions</b> extends PermissionCollection implements Serializable {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">Permissions</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding PermissionCollection</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">add</b> (java.security.Permission <i class="parameter">permission</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public java.util.Enumeration <b class="function">elements</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">implies</b> (java.security.Permission <i class="parameter">permission</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->PermissionCollection(Serializable)-->Permissions(Serializable)</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>Policy</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.security</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2457"></a><a name="INDEX-2458"></a><a name="INDEX-2459"></a><a name="INDEX-2460"></a><a name="INDEX-2461"></a>
  This class provides a mapping from <tt class="literal">CodeSource</tt>
  objects to <tt class="literal">PermissionCollection</tt> objects; it defines
  a security policy by specifying what permissions are granted to what
  code. There is only a single <tt class="literal">Policy</tt> in effect at
  any one time. Obtain the system policy by calling the static
  <tt class="literal">getPolicy()</tt> method. Code that has appropriate
  permissions can specify a new system policy by calling
  <tt class="literal">setPolicy()</tt>. <tt class="literal">getPermissions()</tt>
  is the central <tt class="literal">Policy</tt> method; it evaluates the
  <tt class="literal">Policy</tt> for a given <tt class="literal">CodeSource</tt>
  and returns an appropriate <tt class="literal">PermissionCollection</tt>. The <tt class="literal">refresh()</tt> method is a request to a
  <tt class="literal">Policy</tt> object to update its state (for example, by
  rereading its configuration file). The <tt class="literal">Policy</tt> class is used primarily by system-level
  code. Applications should not need to use this class unless they
  implement some kind of custom access-control mechanism. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public abstract class <b class="classname">Policy</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">Policy</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Class Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static java.security.Policy <b class="function">getPolicy</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static void <b class="function">setPolicy</b> (java.security.Policy <i class="parameter">policy</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract PermissionCollection <b class="function">getPermissions</b> (CodeSource <i class="parameter">codesource</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">refresh</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">java.security.Policy.setPolicy()</tt>
</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">java.security.Policy.getPolicy()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>Principal</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.security</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1(opt)</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2462"></a>
  This interface represents any entity that may serve as a principal in
  a cryptographic transaction of any kind. A
  <tt class="literal">Principal</tt> may represent an individual, a computer,
  or an organization, for example. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public interface <b class="classname">Principal</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract boolean <b class="function">equals</b> (Object <i class="parameter">another</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract String <b class="function">getName</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract int <b class="function">hashCode</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract String <b class="function">toString</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Implementations: </span><tt class="literal">Identity, java.security.acl.Group</tt>
</p>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">IdentityScope.getIdentity(), java.security.acl.Acl.{addEntry(), checkPermission(), getPermissions(), removeEntry(), setName()}, java.security.acl.AclEntry.setPrincipal(), java.security.acl.Group.{addMember(), isMember(), removeMember()}, java.security.acl.Owner.{addOwner(), deleteOwner(), isOwner()}</tt>
</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">java.security.Certificate.{getGuarantor(), getPrincipal()}, java.security.acl.AclEntry.getPrincipal(), java.security.cert.X509Certificate.{getIssuerDN(), getSubjectDN()}, java.security.cert.X509CRL.getIssuerDN()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>PrivateKey</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.security</b></font></td><td align="right"><font size="+1"><b><i>serializable PJ1.1(opt)</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2463"></a><a name="INDEX-2464"></a>
  This interface represents a private cryptographic key. It extends the
  <tt class="literal">Key</tt> interface, but does not add any new methods. The interface exists in order to create a strong distinction between
  private and public keys. See also <tt class="literal">PublicKey</tt>. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public interface <b class="classname">PrivateKey</b> extends Key {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constants</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public static final long <b class="function">serialVersionUID</b> ;</td><td align="right"><i> =6034044314589513430</i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">(PrivateKey(Key(Serializable)))</tt>
</p>
<p>
<span class="refsect1">Implementations: </span><tt class="literal">java.security.interfaces.DSAPrivateKey, java.security.interfaces.RSAPrivateKey, javax.crypto.interfaces.DHPrivateKey</tt>
</p>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">KeyPair.KeyPair(), Signature.initSign(), SignatureSpi.engineInitSign(), SignedObject.SignedObject()</tt>
</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">KeyFactory.generatePrivate(), KeyFactorySpi.engineGeneratePrivate(), KeyPair.getPrivate(), Signer.getPrivateKey()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>PrivilegedAction</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.security</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2465"></a><a name="INDEX-2466"></a><a name="INDEX-2467"></a>
  This interface defines a block of code (the <tt class="literal">run()</tt>
  method) that is to be executed as privileged code by the
  <tt class="literal">AccessController.doPrivileged()</tt> method. When
  privileged code is run in this way, the
  <tt class="literal">AccessController</tt> looks only at the permissions of
  the immediate caller, not the permissions of the entire call stack. The immediate caller is typically fully trusted system code that has a
  full set of permissions, and therefore the privileged code runs with
  that full set of permissions, even if the system code is
  invoked by untrusted code with no permissions whatsoever. </p>
<p>  Privileged code is typically required only when you are writing a
  trusted system library (such as a Java extension package) that must
  read local files or perform other restricted actions, even when called
  by untrusted code. For example, a class that must call
  <tt class="literal">System.loadLibrary()</tt> to load native methods should
  make the call to <tt class="literal">loadLibrary()</tt> within the
  <tt class="literal">run()</tt> method of a
  <tt class="literal">PrivilegedAction</tt>. If your privileged code may
  throw a checked exception, implement it in the
  <tt class="literal">run()</tt> method of a
  <tt class="literal">PrivilegedExceptionAction</tt> instead. </p>
<p>  Be very careful when implementing this interface. To minimize the
  possibility of security holes, keep the body of the
  <tt class="literal">run()</tt> method as short as possible. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public interface <b class="classname">PrivilegedAction</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract Object <b class="function">run</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">AccessController.doPrivileged()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>PrivilegedActionException</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.security</b></font></td><td align="right"><font size="+1"><b><i>serializable checked</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2468"></a><a name="INDEX-2469"></a>
  This exception class is a wrapper around an arbitrary
  <tt class="literal">Exception</tt> thrown by a
  <tt class="literal">PrivilegedExceptionAction</tt> executed by the
  <tt class="literal">AccessController.doPrivileged()</tt> method. Use
  <tt class="literal">getException()</tt> to obtain the wrapped
  <tt class="literal">Exception</tt> object. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">PrivilegedActionException</b> extends Exception {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">PrivilegedActionException</b> (Exception <i class="parameter">exception</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Exception <b class="function">getException</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Throwable</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">printStackTrace</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">printStackTrace</b> (java.io.PrintWriter <i class="parameter">pw</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">printStackTrace</b> (java.io.PrintStream <i class="parameter">ps</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.3</span></td><td align="left">public String <b class="function">toString</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Exception-->PrivilegedActionException</tt>
</p>
<p>
<span class="refsect1">Thrown By: </span><tt class="literal">AccessController.doPrivileged()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>PrivilegedExceptionAction</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.security</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2470"></a><a name="INDEX-2471"></a>
  This interface is like <tt class="literal">PrivilegedAction</tt>, except
  that its <tt class="literal">run()</tt> method may throw an exception. See
  <tt class="literal">PrivilegedAction</tt> for details. </p>

<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public interface <b class="classname">PrivilegedExceptionAction</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract Object <b class="function">run</b> () throws Exception;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">AccessController.doPrivileged()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>ProtectionDomain</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.security</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2472"></a><a name="INDEX-2473"></a><a name="INDEX-2474"></a>
  This class represents a <tt class="literal">CodeSource</tt> and the
  associated <tt class="literal">PermissionCollection</tt> granted to that
  <tt class="literal">CodeSource</tt> by a <tt class="literal">Policy</tt> object. The <tt class="literal">implies()</tt> method checks to see whether the
  specified <tt class="literal">Permission</tt> is implied by any of the
  permissions granted to this <tt class="literal">ProtectionDomain</tt>. In
  Java 1.2, every class has an associated
  <tt class="literal">ProtectionDomain</tt>, which can be obtained with the
  <tt class="literal">getProtectionDomain()</tt> method of the
  <tt class="literal">Class</tt> object. Only applications that implement a
  custom <tt class="literal">ClassLoader</tt> should need to use this class. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">ProtectionDomain</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">ProtectionDomain</b> (CodeSource <i class="parameter">codesource</i>, PermissionCollection <i class="parameter">permissions</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final CodeSource <b class="function">getCodeSource</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final PermissionCollection <b class="function">getPermissions</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">implies</b> (java.security.Permission <i class="parameter">permission</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Object</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">toString</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">ClassLoader.defineClass(), AccessControlContext.AccessControlContext(), DomainCombiner.combine()</tt>
</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">Class.getProtectionDomain(), DomainCombiner.combine()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>Provider</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.security</b></font></td><td align="right"><font size="+1"><b><i>cloneable serializable collection PJ1.1(opt)</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2475"></a><a name="INDEX-2476"></a><a name="INDEX-2477"></a><a name="INDEX-2478"></a>
  This class represents a security provider. It specifies class names
  for implementations of one or more algorithms for message digests,
  digital signatures, key generation, key conversion, key management,
  secure random number generation, certificate conversion, and algorithm
  parameter management. The <tt class="literal">getName()</tt>,
  <tt class="literal">getVersion()</tt>, and <tt class="literal">getInfo()</tt>
  methods return information about the provider. <tt class="literal">Provider</tt> inherits from
  <tt class="literal">Properties</tt> and maintains a mapping of property
  names to property values. These name/value pairs specify the
  capabilities of the <tt class="literal">Provider</tt> implementation. Each
  property name has the form:</p>

<blockquote>
<pre class="programlisting">
<em class="replaceable">service_type</em>.<em class="replaceable">algorithm_name</em>
</pre>
</blockquote>

<p>  The corresponding property value is the name of the class that
  implements the named algorithm. For example, say a
  <tt class="literal">Provider</tt> defines properties named
  "Signature.DSA", "MessageDigest.MD5", and "KeyStore.JKS". The values
  of these properties are the class names of 
  <tt class="literal">SignatureSpi</tt>, <tt class="literal">MessageDigestSpi</tt>,
  and <tt class="literal">KeyStoreSpi</tt> implementations. Other properties
  defined by a <tt class="literal">Provider</tt> are used to provide aliases
  for algorithm names. For example, the property
  <tt class="literal">Alg.Alias.MessageDigest.SHA1</tt> might have the value
  "SHA", meaning that the algorithm name "SHA1" is an alias for "SHA". </p>
<p>
<a name="INDEX-2479"></a><a name="INDEX-2480"></a>
  Security providers are installed for a Java system in an
  implementation-dependent way. For Sun's implementation, the
  <em class="emphasis">${java.home}/lib/security/java.security</em> 
  file specifies the
  class names of all installed <tt class="literal">Provider</tt>
  implementations. An application can also install its own custom
  <tt class="literal">Provider</tt> with the <tt class="literal">addProvider()</tt>
  and <tt class="literal">insertProviderAt()</tt> methods of the
  <tt class="literal">Security</tt> class. Most applications do not need to
  use the <tt class="literal">Provider</tt> class directly. Typically, only
  security-provider implementors need to use the
  <tt class="literal">Provider</tt> class. Some applications may explicitly
  specify the name of a desired <tt class="literal">Provider</tt> when calling
  a static <tt class="literal">getInstance()</tt> factory method, however. Only applications with the most demanding cryptographic needs 
  need to install custom providers. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public abstract class <b class="classname">Provider</b> extends java.util.Properties {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected <b class="function">Provider</b> (String <i class="parameter">name</i>, double <i class="parameter">version</i>, String <i class="parameter">info</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">getInfo</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">getName</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public double <b class="function">getVersion</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Properties</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public void <b class="function">load</b> (java.io.InputStream <i class="parameter">inStream</i>) throws java.io.IOException;</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Hashtable</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public void <b class="function">clear</b> ();</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public java.util.Set <b class="function">entrySet</b> ();</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public java.util.Set <b class="function">keySet</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public Object <b class="function">put</b> (Object <i class="parameter">key</i>, Object <i class="parameter">value</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public void <b class="function">putAll</b> (java.util.Map <i class="parameter">t</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public Object <b class="function">remove</b> (Object <i class="parameter">key</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">toString</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public java.util.Collection <b class="function">values</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->java.util.Dictionary-->java.util.Hashtable(Cloneable,java.util.Map,Serializable)-->java.util.Properties-->Provider</tt>
</p>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">AlgorithmParameterGenerator.AlgorithmParameterGenerator(), AlgorithmParameters.AlgorithmParameters(), KeyFactory.KeyFactory(), KeyStore.KeyStore(), SecureRandom.SecureRandom(), Security.{addProvider(), insertProviderAt()}, java.security.cert.CertificateFactory.CertificateFactory(), javax.crypto.Cipher.Cipher(), javax.crypto.KeyAgreement.KeyAgreement(), javax.crypto.KeyGenerator.KeyGenerator(), javax.crypto.Mac.Mac(), javax.crypto.SecretKeyFactory.SecretKeyFactory()</tt>
</p>
<p>
<span class="refsect1">Returned By: </span>Too many methods to list. </p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>ProviderException</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.security</b></font></td><td align="right"><font size="+1"><b><i>serializable unchecked PJ1.1(opt)</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2481"></a>
  Signals that an exception has occurred inside a cryptographic service
  provider. Note that <tt class="literal">ProviderException</tt> extends
  <tt class="literal">RuntimeException</tt> and is therefore an unchecked
  exception that may be thrown from any method without being declared. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">ProviderException</b> extends RuntimeException {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">ProviderException</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">ProviderException</b> (String <i class="parameter">s</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Exception-->RuntimeException-->ProviderException</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>PublicKey</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.security</b></font></td><td align="right"><font size="+1"><b><i>serializable PJ1.1(opt)</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2482"></a>
  This interface represents a public cryptographic key. It extends the
  <tt class="literal">Key</tt> interface, but does not add any new methods. The interface exists in order to create a strong distinction between
  public and private keys. See also <tt class="literal">PrivateKey</tt>. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public interface <b class="classname">PublicKey</b> extends Key {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constants</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public static final long <b class="function">serialVersionUID</b> ;</td><td align="right"><i> =7187392471159151072</i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">(PublicKey(Key(Serializable)))</tt>
</p>
<p>
<span class="refsect1">Implementations: </span><tt class="literal">java.security.interfaces.DSAPublicKey, java.security.interfaces.RSAPublicKey, javax.crypto.interfaces.DHPublicKey</tt>
</p>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">Identity.setPublicKey(), IdentityScope.getIdentity(), KeyPair.KeyPair(), Signature.initVerify(), SignatureSpi.engineInitVerify(), SignedObject.verify(), java.security.cert.Certificate.verify(), java.security.cert.X509CRL.verify()</tt>
</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">java.security.Certificate.getPublicKey(), Identity.getPublicKey(), KeyFactory.generatePublic(), KeyFactorySpi.engineGeneratePublic(), KeyPair.getPublic(), java.security.cert.Certificate.getPublicKey()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>SecureClassLoader</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.security</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>



<p>
<a name="INDEX-2483"></a><a name="INDEX-2484"></a><a name="INDEX-2485"></a>
  This class adds two protected methods to those defined by
  <tt class="literal">ClassLoader</tt>. The <tt class="literal">defineClass()</tt>
  method is passed a <tt class="literal">CodeSource</tt> object that represents
  the source of the class being loaded. It calls the
  <tt class="literal">getPermissions()</tt> method to obtain a
  <tt class="literal">PermissionCollection</tt> for that
  <tt class="literal">CodeSource</tt>. It then uses the
  <tt class="literal">CodeSource</tt> and
  <tt class="literal">PermissionCollection</tt> to create a
  <tt class="literal">ProtectionDomain</tt>, which is passed to the
  <tt class="literal">defineClass()</tt> method of its superclass. </p>
<p>  The default implementation of the <tt class="literal">getPermissions()</tt>
  method uses the default <tt class="literal">Policy</tt> to
  determine the appropriate set of permissions for a given code source. The value of <tt class="literal">SecureClassLoader</tt> is that subclasses
  can use its <tt class="literal">defineClass()</tt> method to load classes
  without having to work explicitly with the
  <tt class="literal">ProtectionDomain</tt> and <tt class="literal">Policy</tt>
  classes. A subclass of <tt class="literal">SecureClassLoader</tt> can
  define its own security policy by overriding
  <tt class="literal">getPermissions()</tt>. In Java 1.2 and later, any
  application that implements a custom class loader should do so by
  extending <tt class="literal">SecureClassLoader</tt>, instead of subclassing
  <tt class="literal">ClassLoader</tt> directly. Most applications can use
  <tt class="literal">java.net.URLClassLoader</tt>, however, and never
  have to subclass this class. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">SecureClassLoader</b> extends ClassLoader {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected <b class="function">SecureClassLoader</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected <b class="function">SecureClassLoader</b> (ClassLoader <i class="parameter">parent</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected final Class <b class="function">defineClass</b> (String <i class="parameter">name</i>, byte[ ] <i class="parameter">b</i>, int <i class="parameter">off</i>, int <i class="parameter">len</i>, CodeSource <i class="parameter">cs</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected PermissionCollection <b class="function">getPermissions</b> (CodeSource <i class="parameter">codesource</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->ClassLoader-->SecureClassLoader</tt>
</p>
<p>
<span class="refsect1">Subclasses: </span><tt class="literal">java.net.URLClassLoader</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>SecureRandom</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.security</b></font></td><td align="right"><font size="+1"><b><i>serializable PJ1.1(opt)</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2486"></a><a name="INDEX-2487"></a><a name="INDEX-2488"></a>
  This class generates cryptographic-quality pseudo-random bytes. Although <tt class="literal">SecureRandom</tt> defines public constructors,
  the preferred technique for obtaining a <tt class="literal">SecureRandom</tt>
  object is to call one of the static <tt class="literal">getInstance()</tt>
  factory methods, specifying the desired pseudo-random number-generation algorithm, and, optionally, the desired provider of that
  algorithm. Sun's implementation of Java ships with an algorithm named
  "SHA1PRNG" in the "SUN" provider. </p>
<p>
<a name="INDEX-2489"></a><a name="INDEX-2490"></a><a name="INDEX-2491"></a>
  Once you have obtained a <tt class="literal">SecureRandom</tt> object, call
  <tt class="literal">nextBytes()</tt> to fill an array with pseudo-random
  bytes. You can also call any of the methods defined by the
  <tt class="literal">Random</tt> superclass to obtain random numbers. The
  first time one of these methods is called, the
  <tt class="literal">SecureRandom()</tt> method uses its
  <tt class="literal">generateSeed()</tt> method to seed itself. If you have
  a source of random or very high-quality pseudo-random bytes, you may
  provide your own seed by calling <tt class="literal">setSeed()</tt>. Repeated calls to <tt class="literal">setSeed()</tt> augment the existing
  seed instead of replacing it. You can also call
  <tt class="literal">generateSeed()</tt> to generate seeds for use with other
  pseudo-random generators. <tt class="literal">generateSeed()</tt> may use a
  different algorithm than <tt class="literal">nextBytes()</tt> and may
  produce higher-quality randomness, usually at the expense of increased
  computation time. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">SecureRandom</b> extends java.util.Random {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">SecureRandom</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">SecureRandom</b> (byte[ ] <i class="parameter">seed</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">protected <b class="function">SecureRandom</b> (SecureRandomSpi <i class="parameter">secureRandomSpi</i>, Provider <i class="parameter">provider</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Class Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public static SecureRandom <b class="function">getInstance</b> (String <i class="parameter">algorithm</i>) throws NoSuchAlgorithmException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public static SecureRandom <b class="function">getInstance</b> (String <i class="parameter">algorithm</i>, String <i class="parameter">provider</i>) throws NoSuchAlgorithmExceptionNoSuchProviderException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static byte[ ] <b class="function">getSeed</b> (int <i class="parameter">numBytes</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public byte[ ] <b class="function">generateSeed</b> (int <i class="parameter">numBytes</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public final Provider <b class="function">getProvider</b> ();</td><td align="right"><i> default:Sun</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setSeed</b> (byte[ ] <i class="parameter">seed</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Random</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">nextBytes</b> (byte[ ] <i class="parameter">bytes</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setSeed</b> (long <i class="parameter">seed</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Methods Overriding Random</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected final int <b class="function">next</b> (int <i class="parameter">numBits</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->java.util.Random(Serializable)-->SecureRandom</tt>
</p>
<p>
<span class="refsect1">Passed To: </span>Too many methods to list. </p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">SecureRandom.getInstance()</tt>
</p>
<p>
<span class="refsect1">Type Of: </span><tt class="literal">SignatureSpi.appRandom</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>SecureRandomSpi</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.security</b></font></td><td align="right"><font size="+1"><b><i>serializable</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2492"></a><a name="INDEX-2493"></a>
  This abstract class defines the service-provider interface for
  <tt class="literal">SecureRandom</tt>. A security
  provider must implement a concrete subclass of this class for each
  pseudo-random number-generation algorithm it supports. Applications
  never need to use or subclass this class. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public abstract class <b class="classname">SecureRandomSpi</b> implements Serializable {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">SecureRandomSpi</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected abstract byte[ ] <b class="function">engineGenerateSeed</b> (int <i class="parameter">numBytes</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected abstract void <b class="function">engineNextBytes</b> (byte[ ] <i class="parameter">bytes</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected abstract void <b class="function">engineSetSeed</b> (byte[ ] <i class="parameter">seed</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->SecureRandomSpi(Serializable)</tt>
</p>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">SecureRandom.SecureRandom()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>Security</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.security</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1(opt)</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2494"></a><a name="INDEX-2495"></a>
  This class defines static methods both for managing the list of installed
  security providers and for reading and setting the values of various
  properties used by the Java 1.2 security system. It is essentially an
  interface to the <em class="emphasis">${java.home}/lib/security/java.security</em>
  file that is included in Sun's implementation of Java. <tt class="literal">getProviders()</tt> is the most generally useful method;
  it returns an array of installed <tt class="literal">Provider</tt> objects. In Java 1.3, two new versions of <tt class="literal">getProviders()</tt>
  return an array of installed providers that implement the algorithm
  or algorithms specified by the <tt class="literal">String</tt> or
  <tt class="literal">Map</tt> argument. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public final class <b class="classname">Security</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">No Constructor</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Class Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static int <b class="function">addProvider</b> (Provider <i class="parameter">provider</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static String <b class="function">getProperty</b> (String <i class="parameter">key</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static Provider <b class="function">getProvider</b> (String <i class="parameter">name</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static Provider[ ] <b class="function">getProviders</b> ();</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.3</span></td><td align="left">public static Provider[ ] <b class="function">getProviders</b> (String <i class="parameter">filter</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.3</span></td><td align="left">public static Provider[ ] <b class="function">getProviders</b> (java.util.Map <i class="parameter">filter</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static int <b class="function">insertProviderAt</b> (Provider <i class="parameter">provider</i>, int <i class="parameter">position</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static void <b class="function">removeProvider</b> (String <i class="parameter">name</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static void <b class="function">setProperty</b> (String <i class="parameter">key</i>, String <i class="parameter">datum</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Deprecated Public Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">#</span></td><td align="left">public static String <b class="function">getAlgorithmProperty</b> (String <i class="parameter">algName</i>, String <i class="parameter">propName</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>SecurityPermission</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.security</b></font></td><td align="right"><font size="+1"><b><i>serializable permission</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2496"></a><a name="INDEX-2497"></a><a name="INDEX-2498"></a>
  This class is a <tt class="literal">Permission</tt> subclass that
  represents access to various methods of the <tt class="literal">Policy</tt>,
  <tt class="literal">Security</tt>, <tt class="literal">Provider</tt>,
  <tt class="literal">Signer</tt>, and <tt class="literal">Identity</tt> objects. <tt class="literal">SecurityPermission</tt> objects are defined by a name
  only; they do not use a list of actions. Important
  <tt class="literal">SecurityPermission</tt> names are "getPolicy" and
  "setPolicy", which represent the ability query and set the system
  security policy by invoking the <tt class="literal">Policy.getPolicy()</tt>
  and <tt class="literal">Policy.setPolicy()</tt> methods. Applications do
  not typically need to use this class. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public final class <b class="classname">SecurityPermission</b> extends BasicPermission {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">SecurityPermission</b> (String <i class="parameter">name</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">SecurityPermission</b> (String <i class="parameter">name</i>, String <i class="parameter">actions</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->java.security.Permission(Guard,Serializable)-->BasicPermission(Serializable)-->SecurityPermission</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>Signature</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.security</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1(opt)</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2499"></a><a name="INDEX-2500"></a>
  This class computes or verifies a digital signature. Obtain a
  <tt class="literal">Signature</tt> object by calling one of the static
  <tt class="literal">getInstance()</tt> factory methods and specifying the
  desired digital signature algorithm and, optionally, the desired
  provider of that algorithm. A <em class="emphasis">digital signature</em> is essentially a
  message digest encrypted by a public-key encryption algorithm. Thus,
  to specify a digital signature algorithm, you must specify both the
  digest algorithm and the encryption algorithm. The only algorithm
  supported by the default "SUN" provider is "SHA1withDSA". </p>
<p>
<a name="INDEX-2501"></a><a name="INDEX-2502"></a><a name="INDEX-2503"></a><a name="INDEX-2504"></a><a name="INDEX-2505"></a>
  Once you have obtained a <tt class="literal">Signature</tt> object, you must
  initialize it before you can create or verify a digital signature. To
  initialize a digital signature for creation, 
  call <tt class="literal">initSign()</tt> and specify 
  the private key to be used to create the signature. To initialize a
  signature for verification,
  call <tt class="literal">initVerify()</tt> and specify the public
  key of the signer. Once the <tt class="literal">Signature</tt> object has
  been initialized, call <tt class="literal">update()</tt> one or more times
  to specify the bytes to be signed or verified. Finally, to create a digital
  signature, call <tt class="literal">sign()</tt>, passing a byte array
  into which the signature is stored. Or, pass the bytes of the
  digital signature to <tt class="literal">verify()</tt>, which returns
  <tt class="literal">true</tt> if the signature is valid or
  <tt class="literal">false</tt> otherwise. After calling either
  <tt class="literal">sign()</tt> or <tt class="literal">verify()</tt>, the
  <tt class="literal">Signature</tt> object is reset internally and can be
  used to create or verify another signature. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public abstract class <b class="classname">Signature</b> extends SignatureSpi {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected <b class="function">Signature</b> (String <i class="parameter">algorithm</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Constants</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected static final int <b class="function">SIGN</b> ;</td><td align="right"><i> =2</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected static final int <b class="function">UNINITIALIZED</b> ;</td><td align="right"><i> =0</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected static final int <b class="function">VERIFY</b> ;</td><td align="right"><i> =3</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Class Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static Signature <b class="function">getInstance</b> (String <i class="parameter">algorithm</i>) throws NoSuchAlgorithmException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static Signature <b class="function">getInstance</b> (String <i class="parameter">algorithm</i>, String <i class="parameter">provider</i>) throws NoSuchAlgorithmExceptionNoSuchProviderException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final String <b class="function">getAlgorithm</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public final Provider <b class="function">getProvider</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final void <b class="function">initSign</b> (PrivateKey <i class="parameter">privateKey</i>) throws InvalidKeyException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public final void <b class="function">initSign</b> (PrivateKey <i class="parameter">privateKey</i>, SecureRandom <i class="parameter">random</i>) throws InvalidKeyException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final void <b class="function">initVerify</b> (PublicKey <i class="parameter">publicKey</i>) throws InvalidKeyException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.3</span></td><td align="left">public final void <b class="function">initVerify</b> (java.security.cert.Certificate <i class="parameter">certificate</i>) throws InvalidKeyException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public final void <b class="function">setParameter</b> (java.security.spec.AlgorithmParameterSpec <i class="parameter">params</i>) throws InvalidAlgorithmParameterException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final byte[ ] <b class="function">sign</b> () throws SignatureException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public final int <b class="function">sign</b> (byte[ ] <i class="parameter">outbuf</i>, int <i class="parameter">offset</i>, int <i class="parameter">len</i>) throws SignatureException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final void <b class="function">update</b> (byte <i class="parameter">b</i>) throws SignatureException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final void <b class="function">update</b> (byte[ ] <i class="parameter">data</i>) throws SignatureException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final void <b class="function">update</b> (byte[ ] <i class="parameter">data</i>, int <i class="parameter">off</i>, int <i class="parameter">len</i>) throws SignatureException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final boolean <b class="function">verify</b> (byte[ ] <i class="parameter">signature</i>) throws SignatureException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding SignatureSpi</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Object <b class="function">clone</b> () throws CloneNotSupportedException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Object</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">toString</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Instance Fields</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected int <b class="function">state</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Deprecated Public Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">#</span></td><td align="left">public final Object <b class="function">getParameter</b> (String <i class="parameter">param</i>) throws InvalidParameterException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">#</span></td><td align="left">public final void <b class="function">setParameter</b> (String <i class="parameter">param</i>, Object <i class="parameter">value</i>) throws InvalidParameterException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->SignatureSpi-->Signature</tt>
</p>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">SignedObject.{SignedObject(), verify()}</tt>
</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">Signature.getInstance()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>SignatureException</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.security</b></font></td><td align="right"><font size="+1"><b><i>serializable checked PJ1.1(opt)</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2506"></a>
  Signals a problem while creating or verifying a digital signature. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">SignatureException</b> extends GeneralSecurityException {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">SignatureException</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">SignatureException</b> (String <i class="parameter">msg</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Exception-->GeneralSecurityException-->SignatureException</tt>
</p>
<p>
<span class="refsect1">Thrown By: </span>Too many methods to list. </p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>SignatureSpi</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.security</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2507"></a>
  This abstract class defines the service-provider interface for
  <tt class="literal">Signature</tt>. A security
  provider must implement a concrete subclass of this class for each
  digital signature algorithm it supports. Applications
  never need to use or subclass this class. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public abstract class <b class="classname">SignatureSpi</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">SignatureSpi</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Object</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Object <b class="function">clone</b> () throws CloneNotSupportedException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected abstract void <b class="function">engineInitSign</b> (PrivateKey <i class="parameter">privateKey</i>) throws InvalidKeyException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected void <b class="function">engineInitSign</b> (PrivateKey <i class="parameter">privateKey</i>, SecureRandom <i class="parameter">random</i>) throws InvalidKeyException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected abstract void <b class="function">engineInitVerify</b> (PublicKey <i class="parameter">publicKey</i>) throws InvalidKeyException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected void <b class="function">engineSetParameter</b> (java.security.spec.AlgorithmParameterSpec <i class="parameter">params</i>) throws InvalidAlgorithmParameterException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected abstract byte[ ] <b class="function">engineSign</b> () throws SignatureException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected int <b class="function">engineSign</b> (byte[ ] <i class="parameter">outbuf</i>, int <i class="parameter">offset</i>, int <i class="parameter">len</i>) throws SignatureException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected abstract void <b class="function">engineUpdate</b> (byte <i class="parameter">b</i>) throws SignatureException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected abstract void <b class="function">engineUpdate</b> (byte[ ] <i class="parameter">b</i>, int <i class="parameter">off</i>, int <i class="parameter">len</i>) throws SignatureException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected abstract boolean <b class="function">engineVerify</b> (byte[ ] <i class="parameter">sigBytes</i>) throws SignatureException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Instance Fields</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected SecureRandom <b class="function">appRandom</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Deprecated Protected Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">#</span></td><td align="left">protected abstract Object <b class="function">engineGetParameter</b> (String <i class="parameter">param</i>) throws InvalidParameterException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">#</span></td><td align="left">protected abstract void <b class="function">engineSetParameter</b> (String <i class="parameter">param</i>, Object <i class="parameter">value</i>) throws InvalidParameterException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Subclasses: </span><tt class="literal">Signature</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>SignedObject</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.security</b></font></td><td align="right"><font size="+1"><b><i>serializable</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2508"></a>
  This class applies a digital signature to any serializable Java
  object. Create a <tt class="literal">SignedObject</tt> by specifying the
  object to be signed, the <tt class="literal">PrivateKey</tt> to use for the
  signature, and the <tt class="literal">Signature</tt> object to create the
  signature. The <tt class="literal">SignedObject()</tt> constructor
  serializes the specified object into an array of bytes and creates a
  digital signature for those bytes. </p>
<p>
<a name="INDEX-2509"></a><a name="INDEX-2510"></a>
  After creation, a <tt class="literal">SignedObject</tt> is itself typically
  serialized for storage or transmission to another Java thread or
  process. Once the <tt class="literal">SignedObject</tt> is reconstituted,
  the integrity of the object it contains can be verified by calling
  <tt class="literal">verify()</tt> and supplying the
  <tt class="literal">PublicKey</tt> of the signer and a
  <tt class="literal">Signature</tt> that performs the verification. Whether or not verification is performed or is successful,
  <tt class="literal">getObject()</tt> can be called to deserialize and return
  the wrapped object. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public final class <b class="classname">SignedObject</b> implements Serializable {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">SignedObject</b> (Serializable <i class="parameter">object</i>, PrivateKey <i class="parameter">signingKey</i>, Signature <i class="parameter">signingEngine</i>) throws java.io.IOExceptionInvalidKeyExceptionSignatureException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">getAlgorithm</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Object <b class="function">getObject</b> () throws java.io.IOExceptionClassNotFoundException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public byte[ ] <b class="function">getSignature</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">verify</b> (PublicKey <i class="parameter">verificationKey</i>, Signature <i class="parameter">verificationEngine</i>) throws InvalidKeyExceptionSignatureException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->SignedObject(Serializable)</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>Signer</b></font></td><td align="right"><font size="+1"><b>Java 1.1; Deprecated in Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.security</b></font></td><td align="right"><font size="+1"><b><i>serializable PJ1.1(opt)</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2511"></a><a name="INDEX-2512"></a><a name="INDEX-2513"></a>
  This deprecated class was used in Java 1.1 to represent an entity or
  <tt class="literal">Principal</tt> that has an associated
  <tt class="literal">PrivateKey</tt> that enables it to create digital
  signatures. As of Java 1.2, this class and the related
  <tt class="literal">Identity</tt> and <tt class="literal">IdentityScope</tt>
  classes have been replaced by <tt class="literal">KeyStore</tt> and
  <tt class="literal">java.security.cert.Certificate</tt>. See also
  <tt class="literal">Identity</tt>. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public abstract class <b class="classname">Signer</b> extends Identity {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">Signer</b> (String <i class="parameter">name</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">Signer</b> (String <i class="parameter">name</i>, IdentityScope <i class="parameter">scope</i>) throws KeyManagementException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected <b class="function">Signer</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public PrivateKey <b class="function">getPrivateKey</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final void <b class="function">setKeyPair</b> (KeyPair <i class="parameter">pair</i>) throws InvalidParameterExceptionKeyException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Identity</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">toString</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Identity(java.security.Principal,Serializable)-->Signer</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>UnrecoverableKeyException</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.security</b></font></td><td align="right"><font size="+1"><b><i>serializable checked</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2514"></a>
  This exception is thrown if a <tt class="literal">Key</tt> cannot be
  retrieved from a <tt class="literal">KeyStore</tt>. This commonly occurs
  when an incorrect password is used. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">UnrecoverableKeyException</b> extends GeneralSecurityException {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">UnrecoverableKeyException</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">UnrecoverableKeyException</b> (String <i class="parameter">msg</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Exception-->GeneralSecurityException-->UnrecoverableKeyException</tt>
</p>
<p>
<span class="refsect1">Thrown By: </span><tt class="literal">KeyStore.getKey(), KeyStoreSpi.engineGetKey()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>UnresolvedPermission</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.security</b></font></td><td align="right"><font size="+1"><b><i>serializable permission</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2515"></a><a name="INDEX-2516"></a>
  This class is used internally to provide a mechanism for delayed
  resolution of permissions. An <tt class="literal">UnresolvedPermission</tt>
  holds a textual representation of a <tt class="literal">Permission</tt>
  object that can later be used to
  create the actual <tt class="literal">Permission</tt> object. Applications
  never need to use this class. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public final class <b class="classname">UnresolvedPermission</b> extends java.security.Permission implements Serializable {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">UnresolvedPermission</b> (String <i class="parameter">type</i>, String <i class="parameter">name</i>, String <i class="parameter">actions</i>, java.security.cert.Certificate[ ] <i class="parameter">certs</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Permission</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">equals</b> (Object <i class="parameter">obj</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">getActions</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">hashCode</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">implies</b> (java.security.Permission <i class="parameter">p</i>);</td><td align="right"><i> constant</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public PermissionCollection <b class="function">newPermissionCollection</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">toString</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->java.security.Permission(Guard,Serializable)-->UnresolvedPermission(Serializable)</tt>
</p>
</div>
<a name="INDEX-2517"></a>
<a name="INDEX-2518"></a>


<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch16_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch16_01.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch18_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch18_01.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">16.1. The java.net Package</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">18. The java.security.acl Package</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
