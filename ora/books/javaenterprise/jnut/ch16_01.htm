<html>
<head>
<title>The java.net Package (Java in a Nutshell)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="David Flanagan">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-487-8E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="The java.net Package">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm" alt="Java Enterprise in a Nutshell"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch15_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch15_01.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="part2.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/part2.htm">Part 2: API Quick Reference</a></td><td align="right" valign="top" width="172"><a href="ch17_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch17_01.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY --><h1 class="chapter">Chapter 16.  The java.net Package</h1>

<p>
<a name="INDEX-2166"></a><a name="INDEX-2167"></a>
The <tt class="literal">java.net</tt> package provides a powerful and flexible
infrastructure for networking. <a href="#javanut3-java.net-1">Figure 16-1</a>
and <a href="#javanut3-java.net-2">Figure 16-2</a> show the class hierarchy for
this package. Many of the classes in this package are part of the
networking infrastructure and are not used by normal applications;
these complicated classes can make the package a difficult one to
understand. In this overview, I describe only the classes an
application might normally use. </p>

<a name="javanut3-java.net-1"></a>
<div class="figure">
<img alt="figure" src="figs/JN3_1601.gif" webstripperlinkwas="figs/JN3_1601.gif"></div>
<h4 class="objtitle">Figure 16-1. The classes of the java.net package</h4>

<a name="javanut3-java.net-2"></a>
<div class="figure">
<img alt="figure" src="figs/JN3_1602.gif" webstripperlinkwas="figs/JN3_1602.gif"></div>
<h4 class="objtitle">Figure 16-2. The exceptions of the java.net package</h4>

<p>
<a name="INDEX-2168"></a>
The <tt class="literal">URL</tt> class represents an Internet uniform
resource locator (URL). It provides a very simple interface to
networking: the object referred to by the URL can be
downloaded with a single call, or streams may be opened to
read from or write to the object. <a name="INDEX-2169"></a>
At a slightly more complex level, a <tt class="literal">URLConnection</tt>
object can be obtained from a given <tt class="literal">URL</tt> object. The
<tt class="literal">URLConnection</tt> class provides additional methods that
allow you to work with URLs in more sophisticated ways. </p>
<p>
<a name="INDEX-2170"></a>
If you want to do more than simply download an object
referenced by a URL, you can do your own networking with the
<tt class="literal">Socket</tt> class. This class allows you to connect to a
specified port on a specified Internet host and read and
write data using the <tt class="literal">InputStream</tt> and
<tt class="literal">OutputStream</tt> classes of the <tt class="literal">java.io</tt>
package. If you want to implement a server to accept
connections from clients, you can use the related
<a name="INDEX-2171"></a><a name="INDEX-2172"></a><tt class="literal">ServerSocket</tt> class. Both <tt class="literal">Socket</tt> and
<tt class="literal">ServerSocket</tt> use the <tt class="literal">InetAddress</tt> address
class, which represents an Internet address. </p>
<p>
<a name="INDEX-2173"></a><a name="INDEX-2174"></a><a name="INDEX-2175"></a><a name="INDEX-2176"></a>
The <tt class="literal">java.net</tt> package allows you to do low-level
networking with <tt class="literal">DatagramPacket</tt> objects, which may be
sent and received over the network through a
<tt class="literal">DatagramSocket</tt> object. As of Java 1.1, the package has been
extended to include a <tt class="literal">MulticastSocket</tt> class that
supports multicast networking. </p>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>Authenticator</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.net</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2177"></a><a name="INDEX-2178"></a><a name="INDEX-2179"></a>
  This abstract class defines a customizable mechanism for requesting
  and performing password authentication. The static
  <tt class="literal">setDefault()</tt> method establishes the systemwide
  <tt class="literal">Authenticator</tt> object to use when password
  authentication is requested. The implementation can obtain the
  required authentication information from the user however it wants
  (e.g., through a text- or a GUI-based interface). <tt class="literal">setDefault()</tt> can be called only once; subsequent
  calls are ignored. Calling <tt class="literal">setDefault()</tt> requires
  an appropriate <tt class="literal">NetPermission</tt>. </p>
<p>
<a name="INDEX-2180"></a><a name="INDEX-2181"></a>
  When an application or the Java runtime system requires password
  authentication (to read the contents of a specified
  <tt class="literal">URL</tt>, for example), it calls the static
  <tt class="literal">requestPasswordAuthentication()</tt> method, passing arguments
  that specify the host and port for which the password is required and
  a prompt that may be displayed to the user. This
  method looks up the default <tt class="literal">Authenticator</tt> for the
  system and calls its <tt class="literal">getPasswordAuthentication()</tt>
  method. Calling <tt class="literal">requestPasswordAuthentication()</tt>
  requires an appropriate <tt class="literal">NetPermission</tt>. </p>
<p>
<a name="INDEX-2182"></a><tt class="literal">Authenticator</tt> is an abstract class; its default
  implementation of <tt class="literal">getPasswordAuthentication()</tt>
  always returns <tt class="literal">null</tt>. To create an <tt class="literal">Authenticator</tt>,
  you must override this method so that it prompts the user to enter a
  username and password and returns that information in the form of a
  <tt class="literal">PasswordAuthentication</tt> object. Your implementation
  of <tt class="literal">getPasswordAuthentication()</tt> may call the various
  <tt class="literal">getRequesting()</tt> methods to
  find who is requesting the password and what the recommended
  user prompt is. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public abstract class <b class="classname">Authenticator</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">Authenticator</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Class Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static PasswordAuthentication <b class="function">requestPasswordAuthentication</b> (InetAddress <i class="parameter">addr</i>, int <i class="parameter">port</i>, String <i class="parameter">protocol</i>, String <i class="parameter">prompt</i>, String <i class="parameter">scheme</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static void <b class="function">setDefault</b> (Authenticator <i class="parameter">a</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected PasswordAuthentication <b class="function">getPasswordAuthentication</b> ();</td><td align="right"><i> constant</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected final int <b class="function">getRequestingPort</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected final String <b class="function">getRequestingPrompt</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected final String <b class="function">getRequestingProtocol</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected final String <b class="function">getRequestingScheme</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected final InetAddress <b class="function">getRequestingSite</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">Authenticator.setDefault()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>BindException</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.net</b></font></td><td align="right"><font size="+1"><b><i>serializable checked PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-2183"></a><a name="INDEX-2184"></a>
Signals that a socket cannot be bound to a
local address and port. This often means that the port is
already in use. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">BindException</b> extends SocketException {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">BindException</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">BindException</b> (String <i class="parameter">msg</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Exception-->java.io.IOException-->SocketException-->BindException</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>ConnectException</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.net</b></font></td><td align="right"><font size="+1"><b><i>serializable checked PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-2185"></a><a name="INDEX-2186"></a>
Signals that a socket cannot be connected
to a remote address and port. This means that the remote
host can be reached, but is not responding, perhaps
because there is no process on that host that is listening
on the specified port. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">ConnectException</b> extends SocketException {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">ConnectException</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">ConnectException</b> (String <i class="parameter">msg</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Exception-->java.io.IOException-->SocketException-->java.net.ConnectException</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>ContentHandler</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.net</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-2187"></a><a name="INDEX-2188"></a>
This abstract class defines a method that reads data
from a <tt class="literal">URLConnection</tt> and returns an object
that represents that data. Each subclass that implements this
method is responsible for handling a different type of
content (i.e., a different MIME type). Applications never
create <tt class="literal">ContentHandler</tt> objects directly; they are
created, when necessary, by the registered
<tt class="literal">ContentHandlerFactory</tt> object. Applications should
also never call <tt class="literal">ContentHandler</tt> methods
directly; they should call 
<tt class="literal">URL.getContent()</tt> or
<a name="INDEX-2189"></a><tt class="literal">URLConnection.getContent()</tt> instead. You need to subclass <tt class="literal">ContentHandler</tt> only if you
are writing a web browser or similar application that
needs to parse and understand some new content type. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public abstract class <b class="classname">ContentHandler</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">ContentHandler</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract Object <b class="function">getContent</b> (URLConnection <i class="parameter">urlc</i>) throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.3</span></td><td align="left">public Object <b class="function">getContent</b> (URLConnection <i class="parameter">urlc</i>, Class[ ] <i class="parameter">classes</i>) throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">ContentHandlerFactory.createContentHandler()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>ContentHandlerFactory</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.net</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-2190"></a><a name="INDEX-2191"></a>

This interface defines a method that creates and returns an
appropriate <tt class="literal">ContentHandler</tt> object for a specified
MIME type. A systemwide <tt class="literal">ContentHandlerFactory</tt> interface
may be specified using the
<tt class="literal">URLConnection.setContentHandlerFactory()</tt> method. Normal applications never need to use or implement this interface. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public interface <b class="classname">ContentHandlerFactory</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract ContentHandler <b class="function">createContentHandler</b> (String <i class="parameter">mimetype</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">URLConnection.setContentHandlerFactory()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>DatagramPacket</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.net</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-2192"></a>

This class implements a packet of data that may be sent or
received over the network through a <tt class="literal">DatagramSocket</tt>. One of the <tt class="literal">DatagramPacket</tt> constructors specifies an
array of binary data to be sent with its destination address
and port. A packet created with this constructor can then
be sent with the <tt class="literal">send()</tt> method of a
<tt class="literal">DatagramSocket</tt>. The other <tt class="literal">DatagramPacket</tt>
constructor specifies an array of bytes into which data
should be received. The <tt class="literal">receive()</tt> method of
<tt class="literal">DatagramSocket</tt> waits for data and stores it in a
<tt class="literal">DatagramPacket</tt> created in this way. The contents
and sender of a received packet can be queried with the
<tt class="literal">DatagramPacket</tt> instance methods. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public final class <b class="classname">DatagramPacket</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">DatagramPacket</b> (byte[ ] <i class="parameter">buf</i>, int <i class="parameter">length</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public <b class="function">DatagramPacket</b> (byte[ ] <i class="parameter">buf</i>, int <i class="parameter">offset</i>, int <i class="parameter">length</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">DatagramPacket</b> (byte[ ] <i class="parameter">buf</i>, int <i class="parameter">length</i>, InetAddress <i class="parameter">address</i>, int <i class="parameter">port</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public <b class="function">DatagramPacket</b> (byte[ ] <i class="parameter">buf</i>, int <i class="parameter">offset</i>, int <i class="parameter">length</i>, InetAddress <i class="parameter">address</i>, int <i class="parameter">port</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Property Accessor Methods (by property name)</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public InetAddress <b class="function">getAddress</b> ();</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public void <b class="function">setAddress</b> (InetAddress <i class="parameter">iaddr</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public byte[ ] <b class="function">getData</b> ();</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public void <b class="function">setData</b> (byte[ ] <i class="parameter">buf</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public void <b class="function">setData</b> (byte[ ] <i class="parameter">buf</i>, int <i class="parameter">offset</i>, int <i class="parameter">length</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getLength</b> ();</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public void <b class="function">setLength</b> (int <i class="parameter">length</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public int <b class="function">getOffset</b> ();</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getPort</b> ();</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public void <b class="function">setPort</b> (int <i class="parameter">iport</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">DatagramSocket.{receive(), send()}, DatagramSocketImpl.{receive(), send()}, MulticastSocket.send()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>DatagramSocket</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.net</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2193"></a><a name="INDEX-2194"></a><a name="INDEX-2195"></a>

  This class defines a socket that can receive and send unreliable
  datagram packets over the network using the UDP protocol. A <em class="emphasis">datagram</em>
  is a very low-level networking interface: it is simply an array of
  bytes sent over the network. A datagram does not implement any kind of
  stream-based communication protocol, and there is no connection
  established between the sender and the receiver. Datagram packets are
  called "unreliable" 
  because the protocol does not make any attempt to
  ensure they arrive or to resend them if they don't. Thus,
  packets sent through a <tt class="literal">DatagramSocket</tt> are not guaranteed
  to arrive in the order sent or even to arrive at all. On the other hand,
  this low-overhead protocol makes datagram transmission very fast. See <tt class="literal">Socket</tt> and <tt class="literal">URL</tt> for higher-level
  interfaces to networking. </p>
<p>
<a name="INDEX-2196"></a>
  If a port is specified when the <tt class="literal">DatagramSocket</tt> is created,
  that port is used for sending and receiving datagrams; otherwise, the
  system assigns a port. <tt class="literal">getLocalPort()</tt> returns the port
  number in use. <tt class="literal">send()</tt> sends a
<a name="INDEX-2197"></a><a name="INDEX-2198"></a><tt class="literal">DatagramPacket</tt> through the socket. The packet must contain
  the destination address to which it should be sent. <tt class="literal">receive()</tt> waits for data to arrive at the socket and
  stores it, along with the address of the sender, in the specified
  <tt class="literal">DatagramPacket</tt>. <tt class="literal">close()</tt> closes

<a name="INDEX-2199"></a>

  the socket and frees the port for reuse. Once
  <tt class="literal">close()</tt> has been called, the <tt class="literal">DatagramSocket</tt>
  should not be used again. </p>
<p>
<a name="INDEX-2200"></a><a name="INDEX-2201"></a><a name="INDEX-2202"></a><a name="INDEX-2203"></a><a name="INDEX-2204"></a>
  Each time a packet is sent or received, the system must perform a
  security check to ensure that the calling code has permission to send
  data to or receive data from the specified host. In Java 1.2 and later, if you
  are sending multiple packets to or receiving multiple packets
  from a single
  host, use <tt class="literal">connect()</tt> to specify the host
  with which you are communicating. This causes the security
  check to be done a single time, but does not allow the socket to communicate with any other host until
  <tt class="literal">disconnect()</tt> is called. Use
  <tt class="literal">getInetAddress()</tt> and <tt class="literal">getPort()</tt>
  to obtain the host and port, if any, the socket is connected to. </p>
<p>
<a name="INDEX-2205"></a><a name="INDEX-2206"></a><a name="INDEX-2207"></a><a name="INDEX-2208"></a><tt class="literal">setSoTimeout()</tt> specifies the number of milliseconds
  that <tt class="literal">receive()</tt> waits for a packet to arrive
  before throwing an <tt class="literal">InterruptedIOException</tt>. Specify 
  <tt class="literal">0</tt>
  milliseconds to wait forever. <tt class="literal">setSendBufferSize()</tt>
  and <tt class="literal">setReceiveBufferSize()</tt> set hints as to the
  underlying size of the networking buffers. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">DatagramSocket</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">DatagramSocket</b> () throws SocketException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">DatagramSocket</b> (int <i class="parameter">port</i>) throws SocketException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public <b class="function">DatagramSocket</b> (int <i class="parameter">port</i>, InetAddress <i class="parameter">laddr</i>) throws SocketException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Class Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.3</span></td><td align="left">public static void <b class="function">setDatagramSocketImplFactory</b> (DatagramSocketImplFactory <i class="parameter">fac</i>) throws java.io.IOException;</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Property Accessor Methods (by property name)</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public InetAddress <b class="function">getInetAddress</b> ();</td><td align="right"><i> default:null</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public InetAddress <b class="function">getLocalAddress</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getLocalPort</b> ();</td><td align="right"><i> default:1029</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public int <b class="function">getPort</b> ();</td><td align="right"><i> default:-1</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public int <b class="function">getReceiveBufferSize</b> () throws SocketException;</td><td align="right"><i> synchronized default:8192</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public void <b class="function">setReceiveBufferSize</b> (int <i class="parameter">size</i>) throws SocketException;</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public int <b class="function">getSendBufferSize</b> () throws SocketException;</td><td align="right"><i> synchronized default:8192</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public void <b class="function">setSendBufferSize</b> (int <i class="parameter">size</i>) throws SocketException;</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public int <b class="function">getSoTimeout</b> () throws SocketException;</td><td align="right"><i> synchronized default:0</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public void <b class="function">setSoTimeout</b> (int <i class="parameter">timeout</i>) throws SocketException;</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">close</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public void <b class="function">connect</b> (InetAddress <i class="parameter">address</i>, int <i class="parameter">port</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public void <b class="function">disconnect</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">receive</b> (DatagramPacket <i class="parameter">p</i>) throws java.io.IOException;</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">send</b> (DatagramPacket <i class="parameter">p</i>) throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Subclasses: </span><tt class="literal">MulticastSocket</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>DatagramSocketImpl</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.net</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-2209"></a><a name="INDEX-2210"></a>
This abstract class defines the methods necessary to
implement communication through datagram and multicast
sockets. System programmers may create subclasses of this
class when they need to implement datagram or multicast
sockets in a nonstandard network environment, such as
behind a firewall or on a network that uses a nonstandard
transport protocol. Normal applications never need to use or subclass this class. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public abstract class <b class="classname">DatagramSocketImpl</b> implements SocketOptions {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">DatagramSocketImpl</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Methods Implementing SocketOptions</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract Object <b class="function">getOption</b> (int <i class="parameter">optID</i>) throws SocketException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">setOption</b> (int <i class="parameter">optID</i>, Object <i class="parameter">value</i>) throws SocketException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected abstract void <b class="function">bind</b> (int <i class="parameter">lport</i>, InetAddress <i class="parameter">laddr</i>) throws SocketException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected abstract void <b class="function">close</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected abstract void <b class="function">create</b> () throws SocketException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected java.io.FileDescriptor <b class="function">getFileDescriptor</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected int <b class="function">getLocalPort</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">protected abstract int <b class="function">getTimeToLive</b> () throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected abstract void <b class="function">join</b> (InetAddress <i class="parameter">inetaddr</i>) throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected abstract void <b class="function">leave</b> (InetAddress <i class="parameter">inetaddr</i>) throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected abstract int <b class="function">peek</b> (InetAddress <i class="parameter">i</i>) throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected abstract void <b class="function">receive</b> (DatagramPacket <i class="parameter">p</i>) throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected abstract void <b class="function">send</b> (DatagramPacket <i class="parameter">p</i>) throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">protected abstract void <b class="function">setTimeToLive</b> (int <i class="parameter">ttl</i>) throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Instance Fields</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected java.io.FileDescriptor <b class="function">fd</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected int <b class="function">localPort</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Deprecated Protected Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">#</span></td><td align="left">protected abstract byte <b class="function">getTTL</b> () throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">#</span></td><td align="left">protected abstract void <b class="function">setTTL</b> (byte <i class="parameter">ttl</i>) throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->DatagramSocketImpl(SocketOptions)</tt>
</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">DatagramSocketImplFactory.createDatagramSocketImpl()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>DatagramSocketImplFactory</b></font></td><td align="right"><font size="+1"><b>Java 1.3 Beta</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.net</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2211"></a><a name="INDEX-2212"></a>
  This interface defines a method that creates
  <tt class="literal">DatagramSocketImpl</tt> objects. You can register an
  instance of this factory interface with the static 
  <tt class="literal">setDatagramSocketImplFactory()</tt> method of
  <tt class="literal">DatagramSocket</tt>. Application-level code never needs
  to use or implement this interface. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public interface <b class="classname">DatagramSocketImplFactory</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract DatagramSocketImpl <b class="function">createDatagramSocketImpl</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">DatagramSocket.setDatagramSocketImplFactory()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>FileNameMap</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.net</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-2213"></a><a name="INDEX-2214"></a>
This interface defines a single method that is called to
obtain the MIME type of a file based on the name of the file. The
<tt class="literal">fileNameMap</tt> field of the <tt class="literal">URLConnection</tt> class
refers to an object that implements this interface. The
filename-to-file-type map it implements is used by the static
<tt class="literal">URLConnection.guessContentTypeFromName() </tt> method. <a name="INDEX-2215"></a>
</p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public interface <b class="classname">FileNameMap</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract String <b class="function">getContentTypeFor</b> (String <i class="parameter">fileName</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">URLConnection.setFileNameMap()</tt>
</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">URLConnection.getFileNameMap()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>HttpURLConnection</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.net</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-2216"></a><a name="INDEX-2217"></a>
This class is a specialization of <tt class="literal">URLConnection</tt>. An
instance of this class is returned when the
<a name="INDEX-2218"></a><tt class="literal">openConnection()</tt> method is called for a <tt class="literal">URL</tt>
object that uses the HTTP protocol. <a name="INDEX-2219"></a>
The many constants defined by this class are the status
codes returned by HTTP servers. <tt class="literal">setRequestMethod()</tt>
specifies what kind of HTTP request is made. The
contents of this request must be sent through the
<tt class="literal">OutputStream</tt> returned by the
<tt class="literal">getOutputStream()</tt> method of the superclass. Once an
<a name="INDEX-2220"></a>
HTTP request has been sent, <tt class="literal">getResponseCode()</tt>
returns the HTTP server's response code as an integer, and
<a name="INDEX-2221"></a><a name="INDEX-2222"></a><a name="INDEX-2223"></a><tt class="literal">getResponseMessage()</tt> returns the server's response
message. The <tt class="literal">disconnect()</tt> method closes the
connection. The static <tt class="literal">setFollowRedirects()</tt>
specifies whether URL connections that use the HTTP protocol
should automatically follow redirect responses sent by HTTP
servers. In order to successfully use this class, you need to
understand the details of the HTTP protocol. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public abstract class <b class="classname">HttpURLConnection</b> extends URLConnection {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected <b class="function">HttpURLConnection</b> (URL <i class="parameter">u</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constants</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">HTTP_ACCEPTED</b> ;</td><td align="right"><i> =202</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">HTTP_BAD_GATEWAY</b> ;</td><td align="right"><i> =502</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">HTTP_BAD_METHOD</b> ;</td><td align="right"><i> =405</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">HTTP_BAD_REQUEST</b> ;</td><td align="right"><i> =400</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">HTTP_CLIENT_TIMEOUT</b> ;</td><td align="right"><i> =408</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">HTTP_CONFLICT</b> ;</td><td align="right"><i> =409</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">HTTP_CREATED</b> ;</td><td align="right"><i> =201</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">HTTP_ENTITY_TOO_LARGE</b> ;</td><td align="right"><i> =413</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">HTTP_FORBIDDEN</b> ;</td><td align="right"><i> =403</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">HTTP_GATEWAY_TIMEOUT</b> ;</td><td align="right"><i> =504</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">HTTP_GONE</b> ;</td><td align="right"><i> =410</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">HTTP_INTERNAL_ERROR</b> ;</td><td align="right"><i> =500</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">HTTP_LENGTH_REQUIRED</b> ;</td><td align="right"><i> =411</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">HTTP_MOVED_PERM</b> ;</td><td align="right"><i> =301</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">HTTP_MOVED_TEMP</b> ;</td><td align="right"><i> =302</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">HTTP_MULT_CHOICE</b> ;</td><td align="right"><i> =300</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">HTTP_NO_CONTENT</b> ;</td><td align="right"><i> =204</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">HTTP_NOT_ACCEPTABLE</b> ;</td><td align="right"><i> =406</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">HTTP_NOT_AUTHORITATIVE</b> ;</td><td align="right"><i> =203</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">HTTP_NOT_FOUND</b> ;</td><td align="right"><i> =404</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.3</span></td><td align="left">public static final int <b class="function">HTTP_NOT_IMPLEMENTED</b> ;</td><td align="right"><i> =501</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">HTTP_NOT_MODIFIED</b> ;</td><td align="right"><i> =304</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">HTTP_OK</b> ;</td><td align="right"><i> =200</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">HTTP_PARTIAL</b> ;</td><td align="right"><i> =206</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">HTTP_PAYMENT_REQUIRED</b> ;</td><td align="right"><i> =402</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">HTTP_PRECON_FAILED</b> ;</td><td align="right"><i> =412</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">HTTP_PROXY_AUTH</b> ;</td><td align="right"><i> =407</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">HTTP_REQ_TOO_LONG</b> ;</td><td align="right"><i> =414</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">HTTP_RESET</b> ;</td><td align="right"><i> =205</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">HTTP_SEE_OTHER</b> ;</td><td align="right"><i> =303</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">HTTP_UNAUTHORIZED</b> ;</td><td align="right"><i> =401</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">HTTP_UNAVAILABLE</b> ;</td><td align="right"><i> =503</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">HTTP_UNSUPPORTED_TYPE</b> ;</td><td align="right"><i> =415</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">HTTP_USE_PROXY</b> ;</td><td align="right"><i> =305</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">HTTP_VERSION</b> ;</td><td align="right"><i> =505</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Class Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static boolean <b class="function">getFollowRedirects</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static void <b class="function">setFollowRedirects</b> (boolean <i class="parameter">set</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">disconnect</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public java.io.InputStream <b class="function">getErrorStream</b> ();</td><td align="right"><i> constant</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">getRequestMethod</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getResponseCode</b> () throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">getResponseMessage</b> () throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setRequestMethod</b> (String <i class="parameter">method</i>) throws ProtocolException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract boolean <b class="function">usingProxy</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding URLConnection</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.3</span></td><td align="left">public long <b class="function">getHeaderFieldDate</b> (String <i class="parameter">name</i>, long <i class="parameter">Default</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public java.security.Permission <b class="function">getPermission</b> () throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Instance Fields</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected String <b class="function">method</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected int <b class="function">responseCode</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected String <b class="function">responseMessage</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Deprecated Public Fields</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">#</span></td><td align="left">public static final int <b class="function">HTTP_SERVER_ERROR</b> ;</td><td align="right"><i> =500</i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->URLConnection-->HttpURLConnection</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>InetAddress</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.net</b></font></td><td align="right"><font size="+1"><b><i>serializable PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-2224"></a>

This class represents an Internet address and is used when
creating <tt class="literal">DatagramPacket</tt> or <tt class="literal">Socket</tt> objects. The class does
not have a public constructor function, but instead supports
three static methods that return one or more instances of
<tt class="literal">InetAddress</tt>. <tt class="literal">getLocalHost()</tt> returns an
<a name="INDEX-2225"></a><a name="INDEX-2226"></a><a name="INDEX-2227"></a><a name="INDEX-2228"></a><tt class="literal">InetAddress</tt> for the local host. <tt class="literal">getByName()</tt>
returns the <tt class="literal">InetAddress</tt> of a host specified by
name. <tt class="literal">getAllByName()</tt> returns an array of
<tt class="literal">InetAddress</tt> objects that represents all the available
addresses for a host specified by name. Instance methods
are <tt class="literal">getHostName()</tt>, which returns the hostname of an
<tt class="literal">InetAddress</tt>, and <tt class="literal">getAddress()</tt>, which returns
the Internet IP address as an array of bytes, with the
highest-order byte as the first element of the array. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public final class <b class="classname">InetAddress</b> implements Serializable {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">No Constructor</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Class Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static InetAddress[ ] <b class="function">getAllByName</b> (String <i class="parameter">host</i>) throws java.net.UnknownHostException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static InetAddress <b class="function">getByName</b> (String <i class="parameter">host</i>) throws java.net.UnknownHostException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static InetAddress <b class="function">getLocalHost</b> () throws java.net.UnknownHostException;</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Property Accessor Methods (by property name)</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public byte[ ] <b class="function">getAddress</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">getHostAddress</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">getHostName</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public boolean <b class="function">isMulticastAddress</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Object</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">equals</b> (Object <i class="parameter">obj</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">hashCode</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">toString</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->InetAddress(Serializable)</tt>
</p>
<p>
<span class="refsect1">Passed To: </span>Too many methods to list. </p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">Authenticator.getRequestingSite(), DatagramPacket.getAddress(), DatagramSocket.{getInetAddress(), getLocalAddress()}, InetAddress.{getAllByName(), getByName(), getLocalHost()}, MulticastSocket.getInterface(), ServerSocket.getInetAddress(), Socket.{getInetAddress(), getLocalAddress()}, SocketImpl.getInetAddress(), URLStreamHandler.getHostAddress()</tt>
</p>
<p>
<span class="refsect1">Type Of: </span><tt class="literal">SocketImpl.address</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>JarURLConnection</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.net</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2229"></a><a name="INDEX-2230"></a><a name="INDEX-2231"></a>
  This class is a specialized <tt class="literal">URLConnection</tt> that
  represents a connection to a <tt class="literal">jar:</tt> URL. A
  <tt class="literal">jar:</tt> URL is a compound URL that includes the URL of
  a JAR archive and, optionally, a reference to a file
  or directory within the JAR archive. The <tt class="literal">jar:</tt> URL
  syntax uses the <tt class="literal">!</tt> 
  character to separate the pathname of the JAR
  archive from the filename within the JAR archive. Note that a
  <tt class="literal">jar:</tt> URL contains a subprotocol that specifies the
  protocol that retrieves the JAR file itself. For example:</p>

<blockquote>
<pre class="programlisting">jar:http://my.jar.com/my.jar!/                                   // The whole archive
jar:file:/usr/java/lib/my.jar!/com/jar/                      // A directory of the archive
jar:ftp://ftp.jar.com/pub/my.jar!/com/jar/Jar.class  // A file in the archive</pre>
</blockquote>

<p>  To obtain a <tt class="literal">JarURLConnection</tt>, define a
  <tt class="literal">URL</tt> object for a <tt class="literal">jar:</tt> URL, open
  a connection to it with <tt class="literal">openConnection()</tt>, and cast
  the returned <tt class="literal">URLConnection</tt> object to a
  <tt class="literal">JarURLConnection</tt>. The various methods defined by
  <tt class="literal">JarURLConnection</tt> allow you to read the manifest file of
  the JAR archive and look up attributes from that manifest for the
  archive as a whole or for individual entries in the archive. These
  methods make use of various classes from the
  <tt class="literal">java.util.jar</tt> package. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public abstract class <b class="classname">JarURLConnection</b> extends URLConnection {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected <b class="function">JarURLConnection</b> (URL <i class="parameter">url</i>) throws MalformedURLException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Property Accessor Methods (by property name)</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public java.util.jar.Attributes <b class="function">getAttributes</b> () throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public java.security.cert.Certificate[ ] <b class="function">getCertificates</b> () throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">getEntryName</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public java.util.jar.JarEntry <b class="function">getJarEntry</b> () throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract java.util.jar.JarFile <b class="function">getJarFile</b> () throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public URL <b class="function">getJarFileURL</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public java.util.jar.Attributes <b class="function">getMainAttributes</b> () throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public java.util.jar.Manifest <b class="function">getManifest</b> () throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Instance Fields</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected URLConnection <b class="function">jarFileURLConnection</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->URLConnection-->JarURLConnection</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>MalformedURLException</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.net</b></font></td><td align="right"><font size="+1"><b><i>serializable checked PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-2232"></a><a name="INDEX-2233"></a>

Signals that an unparseable URL
specification has been passed to a method. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">MalformedURLException</b> extends java.io.IOException {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">MalformedURLException</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">MalformedURLException</b> (String <i class="parameter">msg</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Exception-->java.io.IOException-->MalformedURLException</tt>
</p>
<p>
<span class="refsect1">Thrown By: </span>Too many methods to list. </p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>MulticastSocket</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.net</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-2234"></a><a name="INDEX-2235"></a>
This subclass of <tt class="literal">DatagramSocket</tt> can send and
receive multicast UDP packets. It extends
<a name="INDEX-2236"></a><a name="INDEX-2237"></a><tt class="literal">DatagramSocket</tt> by adding <tt class="literal">joinGroup()</tt> and
<tt class="literal">leaveGroup()</tt> methods to join and leave multicast
groups. The IP address specified to these methods should be
a valid multicast address in the range of 224.0.0.1 to
239.255.255.255. Note that you do not have to join a group
to send a packet to a multicast address, but you must join
the group to receive packets sent to that address. Note that untrusted code is not allowed to use multicast sockets. </p>
<p>
<a name="INDEX-2238"></a><a name="INDEX-2239"></a><a name="INDEX-2240"></a><tt class="literal">MulticastSocket</tt> defines a variant <tt class="literal">send()</tt>
method that allows you to specify a time-to-live (TTL) value for
the packet you send. This value specifies the number of
network hops the packet can travel before it expires. You can also set a default TTL for all packets sent though a
<tt class="literal">MulticastSocket</tt> with <tt class="literal">setTimeToLive()</tt>, or, prior
  to Java 1.2, with <tt class="literal">setTTL()</tt>. <a name="INDEX-2241"></a>
</p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">MulticastSocket</b> extends DatagramSocket {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">MulticastSocket</b> () throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">MulticastSocket</b> (int <i class="parameter">port</i>) throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Property Accessor Methods (by property name)</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public InetAddress <b class="function">getInterface</b> () throws SocketException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setInterface</b> (InetAddress <i class="parameter">inf</i>) throws SocketException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public int <b class="function">getTimeToLive</b> () throws java.io.IOException;</td><td align="right"><i> default:1</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public void <b class="function">setTimeToLive</b> (int <i class="parameter">ttl</i>) throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">joinGroup</b> (InetAddress <i class="parameter">mcastaddr</i>) throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">leaveGroup</b> (InetAddress <i class="parameter">mcastaddr</i>) throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">send</b> (DatagramPacket <i class="parameter">p</i>, byte <i class="parameter">ttl</i>) throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Deprecated Public Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">#</span></td><td align="left">public byte <b class="function">getTTL</b> () throws java.io.IOException;</td><td align="right"><i> default:1</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">#</span></td><td align="left">public void <b class="function">setTTL</b> (byte <i class="parameter">ttl</i>) throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->DatagramSocket-->MulticastSocket</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>NetPermission</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.net</b></font></td><td align="right"><font size="+1"><b><i>serializable permission</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-2242"></a><a name="INDEX-2243"></a><a name="INDEX-2244"></a><a name="INDEX-2245"></a><a name="INDEX-2246"></a>
This class is a <tt class="literal">java.security.Permission</tt> that
represents various permissions required for Java's URL-based
networking system. See also <tt class="literal">SocketPermission</tt>,
which represents permissions to perform lower-level networking
operations. A <tt class="literal">NetPermission</tt> is defined solely by
its name; no actions list is required or supported. As of Java 1.2,
there are three <tt class="literal">NetPermission</tt> targets defined:
"setDefaultAuthenticator" is required to call
<tt class="literal">Authenticator.setDefault()</tt>;
"requestPasswordAuthentication" to call
<tt class="literal">Authenticator.requestPasswordAuthentication()</tt>; and
"specifyStreamHandler" to explicitly pass a
<tt class="literal">URLStreamHandler</tt> object to the
<tt class="literal">URL()</tt> constructor. The target "*" is a wildcard
that represents all defined <tt class="literal">NetPermission</tt> targets. </p>
<p>  System administrators configuring security policies must be familiar
  with this class and the permissions it represents. System programmers
  may use this class, but application programmers never need to use it
  explicitly. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public final class <b class="classname">NetPermission</b> extends java.security.BasicPermission {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">NetPermission</b> (String <i class="parameter">name</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">NetPermission</b> (String <i class="parameter">name</i>, String <i class="parameter">actions</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->java.security.Permission(java.security.Guard,Serializable)-->java.security.BasicPermission(Serializable)-->NetPermission</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>NoRouteToHostException</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.net</b></font></td><td align="right"><font size="+1"><b><i>serializable checked PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-2247"></a><a name="INDEX-2248"></a>
This exception signals that a socket cannot be connected
to a remote host because the host cannot be contacted. Typically, this means that some link in the network between
the local machine and the remote host is down or that the
host is behind a firewall. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">NoRouteToHostException</b> extends SocketException {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">NoRouteToHostException</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">NoRouteToHostException</b> (String <i class="parameter">msg</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Exception-->java.io.IOException-->SocketException-->NoRouteToHostException</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>PasswordAuthentication</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.net</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2249"></a><a name="INDEX-2250"></a><a name="INDEX-2251"></a>
  This simple immutable class encapsulates a username and a password. The password is stored as a character array rather than as a
  <tt class="literal">String</tt> object so that the caller can erase the
  contents of the array after use for increased security. Note that the
  <tt class="literal">PasswordAuthentication()</tt> constructor clones the
  specified password character array, but
  <tt class="literal">getPassword()</tt> returns a reference to the object's
  internal array. Obtain a <tt class="literal">PasswordAuthentication</tt>
  object by calling
  <tt class="literal">Authenticator.requestPasswordAuthentication()</tt>. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public final class <b class="classname">PasswordAuthentication</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">PasswordAuthentication</b> (String <i class="parameter">userName</i>, char[ ] <i class="parameter">password</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public char[ ] <b class="function">getPassword</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">getUserName</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">Authenticator.{getPasswordAuthentication(), requestPasswordAuthentication()}</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>ProtocolException</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.net</b></font></td><td align="right"><font size="+1"><b><i>serializable checked PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-2252"></a>

Signals a protocol error in the
<tt class="literal">Socket</tt> class. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">ProtocolException</b> extends java.io.IOException {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">ProtocolException</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">ProtocolException</b> (String <i class="parameter">host</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Exception-->java.io.IOException-->ProtocolException</tt>
</p>
<p>
<span class="refsect1">Thrown By: </span><tt class="literal">HttpURLConnection.setRequestMethod()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>ServerSocket</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.net</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2253"></a><a name="INDEX-2254"></a>

  This class is used by servers to listen for connection requests from
  clients. When you create a <tt class="literal">ServerSocket</tt>, you specify the
  port to listen on. <a name="INDEX-2255"></a> 

  The <tt class="literal">accept()</tt> method begins listening on that port and
  blocks until a client requests a connection on the port. At that
  point, <tt class="literal">accept()</tt> accepts the connection, creating and
  returning a <tt class="literal">Socket</tt> the server can use to communicate
  with the client. A typical server starts a new thread to handle
  the communication with the client and calls
  <tt class="literal">accept()</tt> again to listen for another connection. If you do not want <tt class="literal">accept()</tt> to block for an
  indefinite amount of time, call <tt class="literal">setSoTimeout()</tt> to
  specify the number of milliseconds <tt class="literal">accept()</tt>
  should wait for a connection before throwing an
  <tt class="literal">InterruptedIOException</tt>. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">ServerSocket</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">ServerSocket</b> (int <i class="parameter">port</i>) throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">ServerSocket</b> (int <i class="parameter">port</i>, int <i class="parameter">backlog</i>) throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public <b class="function">ServerSocket</b> (int <i class="parameter">port</i>, int <i class="parameter">backlog</i>, InetAddress <i class="parameter">bindAddr</i>) throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Class Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static void <b class="function">setSocketFactory</b> (SocketImplFactory <i class="parameter">fac</i>) throws java.io.IOException;</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Property Accessor Methods (by property name)</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public InetAddress <b class="function">getInetAddress</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getLocalPort</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public int <b class="function">getSoTimeout</b> () throws java.io.IOException;</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public void <b class="function">setSoTimeout</b> (int <i class="parameter">timeout</i>) throws SocketException;</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Socket <b class="function">accept</b> () throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">close</b> () throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Object</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">toString</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">protected final void <b class="function">implAccept</b> (Socket <i class="parameter">s</i>) throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">java.rmi.server.RMIServerSocketFactory.createServerSocket(), java.rmi.server.RMISocketFactory.createServerSocket()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>Socket</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.net</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2256"></a>
  This class implements a socket for stream-based interprocess
  communication over the network. See <tt class="literal">URL</tt> 
  for a higher-level interface
  to networking and <tt class="literal">DatagramSocket</tt> for a
  lower-level interface. </p>
<p>
<a name="INDEX-2257"></a><a name="INDEX-2258"></a><a name="INDEX-2259"></a><a name="INDEX-2260"></a><a name="INDEX-2261"></a><a name="INDEX-2262"></a><a name="INDEX-2263"></a><a name="INDEX-2264"></a>
  Use the <tt class="literal">Socket()</tt> constructor to create a socket and
  connect it to the specified host and port. Once the socket is
  created, <tt class="literal">getInputStream()</tt> and
  <tt class="literal">getOutputStream()</tt> return <tt class="literal">InputStream</tt> and
  <tt class="literal">OutputStream</tt> objects you can use to communicate with
  the remote host, just as you would use them for file input and
  output. <tt class="literal">getInetAddress()</tt> and <tt class="literal">getPort()</tt> return
  the address and port to which the socket is connected. <tt class="literal">getLocalPort()</tt> returns the local port the socket
  is using. See <tt class="literal">ServerSocket</tt> for information about
  how a server can listen for and accept connections of this type. When you are done with a <tt class="literal">Socket</tt>, use
  <tt class="literal">close()</tt> to close it. In Java 1.3, you can also use
  <tt class="literal">shutdownInput()</tt> and
  <tt class="literal">shutdownOutput()</tt> to close the input and output
  communication channels individually. </p>
<p>
<a name="INDEX-2265"></a><a name="INDEX-2266"></a><a name="INDEX-2267"></a><a name="INDEX-2268"></a><a name="INDEX-2269"></a><a name="INDEX-2270"></a><a name="INDEX-2271"></a>
  There are several options you can specify for a <tt class="literal">Socket</tt>
  object to alter its behavior. <tt class="literal">setSendBufferSize()</tt>
  and <tt class="literal">setReceiveBufferSize()</tt> provide hints to the
  underlying networking system as to what buffer size is best to
  use with this socket. <tt class="literal">setSoTimeout()</tt> specifies the
  number of milliseconds a <tt class="literal">read()</tt> call on the
  input stream returned by <tt class="literal">getInputStream()</tt>
  waits for data before throwing an
  <tt class="literal">InterruptedIOException</tt>. The default value of 
  <tt class="literal">0</tt>
  specifies that the stream blocks indefinitely. <tt class="literal">setSoLinger()</tt> specifies what to do when a socket is
  closed while there is still data waiting to be transmitted. If
  lingering is turned on, the <tt class="literal">close()</tt> call 
  blocks for up to the specified number of seconds while attempting to
  transmit the remaining data. Calling
  <tt class="literal">setTcpNoDelay()</tt> with an argument of
  <tt class="literal">true</tt> causes data to be sent through the socket as
  soon as it is available, instead of waiting for the TCP packet to
  become more full before sending it. In Java 1.3, use <tt class="literal">setKeepAlive()</tt> to enable or
  disable the periodic exchange of control messages across an idle
  socket connection. The keepalive protocol enables a client to
  determine if its server has crashed without closing the socket and
  vice versa. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">Socket</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">Socket</b> (String <i class="parameter">host</i>, int <i class="parameter">port</i>) throws java.net.UnknownHostExceptionjava.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">Socket</b> (InetAddress <i class="parameter">address</i>, int <i class="parameter">port</i>) throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">#</span></td><td align="left">public <b class="function">Socket</b> (String <i class="parameter">host</i>, int <i class="parameter">port</i>, boolean <i class="parameter">stream</i>) throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">#</span></td><td align="left">public <b class="function">Socket</b> (InetAddress <i class="parameter">host</i>, int <i class="parameter">port</i>, boolean <i class="parameter">stream</i>) throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public <b class="function">Socket</b> (String <i class="parameter">host</i>, int <i class="parameter">port</i>, InetAddress <i class="parameter">localAddr</i>, int <i class="parameter">localPort</i>) throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public <b class="function">Socket</b> (InetAddress <i class="parameter">address</i>, int <i class="parameter">port</i>, InetAddress <i class="parameter">localAddr</i>, int <i class="parameter">localPort</i>) throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected <b class="function">Socket</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">protected <b class="function">Socket</b> (SocketImpl <i class="parameter">impl</i>) throws SocketException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Class Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static void <b class="function">setSocketImplFactory</b> (SocketImplFactory <i class="parameter">fac</i>) throws java.io.IOException;</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Property Accessor Methods (by property name)</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public InetAddress <b class="function">getInetAddress</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public java.io.InputStream <b class="function">getInputStream</b> () throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.3</span></td><td align="left">public boolean <b class="function">getKeepAlive</b> () throws SocketException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.3</span></td><td align="left">public void <b class="function">setKeepAlive</b> (boolean <i class="parameter">on</i>) throws SocketException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public InetAddress <b class="function">getLocalAddress</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getLocalPort</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public java.io.OutputStream <b class="function">getOutputStream</b> () throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getPort</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public int <b class="function">getReceiveBufferSize</b> () throws SocketException;</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public void <b class="function">setReceiveBufferSize</b> (int <i class="parameter">size</i>) throws SocketException;</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public int <b class="function">getSendBufferSize</b> () throws SocketException;</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public void <b class="function">setSendBufferSize</b> (int <i class="parameter">size</i>) throws SocketException;</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public int <b class="function">getSoLinger</b> () throws SocketException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public int <b class="function">getSoTimeout</b> () throws SocketException;</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public void <b class="function">setSoTimeout</b> (int <i class="parameter">timeout</i>) throws SocketException;</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public boolean <b class="function">getTcpNoDelay</b> () throws SocketException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public void <b class="function">setTcpNoDelay</b> (boolean <i class="parameter">on</i>) throws SocketException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">close</b> () throws java.io.IOException;</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public void <b class="function">setSoLinger</b> (boolean <i class="parameter">on</i>, int <i class="parameter">linger</i>) throws SocketException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.3</span></td><td align="left">public void <b class="function">shutdownInput</b> () throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.3</span></td><td align="left">public void <b class="function">shutdownOutput</b> () throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Object</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">toString</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">ServerSocket.implAccept()</tt>
</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">ServerSocket.accept(), java.rmi.server.RMIClientSocketFactory.createSocket(), java.rmi.server.RMISocketFactory.createSocket()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>SocketException</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.net</b></font></td><td align="right"><font size="+1"><b><i>serializable checked PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-2272"></a>

Signals an exceptional condition
while using a socket. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">SocketException</b> extends java.io.IOException {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">SocketException</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">SocketException</b> (String <i class="parameter">msg</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Exception-->java.io.IOException-->SocketException</tt>
</p>
<p>
<span class="refsect1">Subclasses: </span><tt class="literal">BindException, java.net.ConnectException, NoRouteToHostException</tt>
</p>
<p>
<span class="refsect1">Thrown By: </span>Too many methods to list. </p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>SocketImpl</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.net</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-2273"></a>

This abstract class defines the methods necessary to
implement communication through sockets. Different
subclasses of this class may provide different
implementations suitable in different environments (such as
behind firewalls). These socket implementations are used by
the <tt class="literal">Socket</tt> and <tt class="literal">ServerSocket</tt> classes. Normal applications never need to use or subclass this
class. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public abstract class <b class="classname">SocketImpl</b> implements SocketOptions {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">SocketImpl</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Methods Implementing SocketOptions</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public abstract Object <b class="function">getOption</b> (int <i class="parameter">optID</i>) throws SocketException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public abstract void <b class="function">setOption</b> (int <i class="parameter">optID</i>, Object <i class="parameter">value</i>) throws SocketException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Object</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">toString</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected abstract void <b class="function">accept</b> (SocketImpl <i class="parameter">s</i>) throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected abstract int <b class="function">available</b> () throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected abstract void <b class="function">bind</b> (InetAddress <i class="parameter">host</i>, int <i class="parameter">port</i>) throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected abstract void <b class="function">close</b> () throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected abstract void <b class="function">connect</b> (String <i class="parameter">host</i>, int <i class="parameter">port</i>) throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected abstract void <b class="function">connect</b> (InetAddress <i class="parameter">address</i>, int <i class="parameter">port</i>) throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected abstract void <b class="function">create</b> (boolean <i class="parameter">stream</i>) throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected java.io.FileDescriptor <b class="function">getFileDescriptor</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected InetAddress <b class="function">getInetAddress</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected abstract java.io.InputStream <b class="function">getInputStream</b> () throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected int <b class="function">getLocalPort</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected abstract java.io.OutputStream <b class="function">getOutputStream</b> () throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected int <b class="function">getPort</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected abstract void <b class="function">listen</b> (int <i class="parameter">backlog</i>) throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.3</span></td><td align="left">protected void <b class="function">shutdownInput</b> () throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.3</span></td><td align="left">protected void <b class="function">shutdownOutput</b> () throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Instance Fields</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected InetAddress <b class="function">address</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected java.io.FileDescriptor <b class="function">fd</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected int <b class="function">localport</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected int <b class="function">port</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->SocketImpl(SocketOptions)</tt>
</p>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">Socket.Socket(), SocketImpl.accept()</tt>
</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">SocketImplFactory.createSocketImpl()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>SocketImplFactory</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.net</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-2274"></a>

This interface defines a method that creates
<tt class="literal">SocketImpl</tt> objects. <tt class="literal">SocketImplFactory</tt>
objects may be registered to create <tt class="literal">SocketImpl</tt>
objects for the <tt class="literal">Socket</tt> and <tt class="literal">ServerSocket</tt>
classes. Normal applications never need to use or implement this interface. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public interface <b class="classname">SocketImplFactory</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract SocketImpl <b class="function">createSocketImpl</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">ServerSocket.setSocketFactory(), Socket.setSocketImplFactory()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>SocketOptions</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.net</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2275"></a><a name="INDEX-2276"></a><a name="INDEX-2277"></a>
  This interface defines constants that represent low-level BSD
  Unix-style socket options and methods that set and query the value of
  those options. In Java 1.2, <tt class="literal">SocketImpl</tt> and
  <tt class="literal">DatagramSocketImpl</tt> implement this interface. Any custom socket implementations you define should also provide
  meaningful implementations for the <tt class="literal">getOption()</tt> and
  <tt class="literal">setOption()</tt> methods. Your implementation may
  support options other than those defined here. Only custom socket implementations need to use this interface. All
  other code can use methods defined by <tt class="literal">Socket</tt>,
  <tt class="literal">ServerSocket</tt>, <tt class="literal">DatagramSocket</tt>,
  and <tt class="literal">MulticastSocket</tt> to set specific socket options
  for those socket types. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public interface <b class="classname">SocketOptions</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constants</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">IP_MULTICAST_IF</b> ;</td><td align="right"><i> =16</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">SO_BINDADDR</b> ;</td><td align="right"><i> =15</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.3</span></td><td align="left">public static final int <b class="function">SO_KEEPALIVE</b> ;</td><td align="right"><i> =8</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">SO_LINGER</b> ;</td><td align="right"><i> =128</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">SO_RCVBUF</b> ;</td><td align="right"><i> =4098</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">SO_REUSEADDR</b> ;</td><td align="right"><i> =4</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">SO_SNDBUF</b> ;</td><td align="right"><i> =4097</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">SO_TIMEOUT</b> ;</td><td align="right"><i> =4102</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">TCP_NODELAY</b> ;</td><td align="right"><i> =1</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract Object <b class="function">getOption</b> (int <i class="parameter">optID</i>) throws SocketException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">setOption</b> (int <i class="parameter">optID</i>, Object <i class="parameter">value</i>) throws SocketException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Implementations: </span><tt class="literal">DatagramSocketImpl, SocketImpl</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>SocketPermission</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.net</b></font></td><td align="right"><font size="+1"><b><i>serializable permission</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2278"></a><a name="INDEX-2279"></a><a name="INDEX-2280"></a>
  This class is a <tt class="literal">java.security.Permission</tt> that
  governs all networking operations performed with sockets. Like all
  permissions, a <tt class="literal">SocketPermission</tt> consists of a name,
  or target, and a list of actions that may be performed on that
  target. The target of a <tt class="literal">SocketPermission</tt> is the
  host and, optionally, the port or ports for which permission is being
  granted or requested. The target consists of a hostname optionally
  followed by a colon and a port specification. The host may be a DNS
  domain name, a numerical IP address, or the string "localhost". If
  you specify a host domain name, you may use <tt class="literal">*</tt> 
  as a wildcard as the
  leftmost portion of the hostname. The port specification, if
  present, must be a single port number or a range of port numbers in
  the form <tt class="literal">n1-n2</tt>. If <tt class="literal">n1</tt> is
  omitted, it is taken to be <tt class="literal">0</tt>, and if 
  <tt class="literal">n2</tt> is omitted, it is taken to be
  <tt class="literal">65535</tt>. If no port is specified, the socket permission applies to
  all ports of the specified host. Here are some legal
  <tt class="literal">SocketPermission</tt> targets:</p>

<blockquote>
<pre class="programlisting">java.sun.com:80
*.sun.com:1024-2000
*:1024-
localhost:-1023</pre>
</blockquote>

<p>  In addition to a target, each <tt class="literal">SocketPermission</tt> must
  have a comma-separated list of actions, which specify the operations
  that may be performed on the specified host(s) and port(s). The
  available actions are "connect", "accept", "listen", and "resolve". "connect" represents permission to connect to the specified target. "accept" indicates permission to accept connections from the
  specified target. "listen" represents permission to listen on the
  specified ports for connection requests. This action is only valid
  when used for ports on "localhost". Finally, the "resolve" action
  indicates permission to use the DNS name service to resolve domain
  names into IP addresses. This action is required for and implied by
  all other actions. </p>
<p>  System administrators configuring security policies must be familiar
  with this class and understand the risks of granting the various
  permissions it represents. System programmers writing new low-level
  networking libraries or connecting to native code that performs
  networking may need to use this class. Application programmers,
  however, should never need to use it directly. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public final class <b class="classname">SocketPermission</b> extends java.security.Permission implements Serializable {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">SocketPermission</b> (String <i class="parameter">host</i>, String <i class="parameter">action</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Permission</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">equals</b> (Object <i class="parameter">obj</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">getActions</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">hashCode</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">implies</b> (java.security.Permission <i class="parameter">p</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public java.security.PermissionCollection <b class="function">newPermissionCollection</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->java.security.Permission(java.security.Guard,Serializable)-->SocketPermission(Serializable)</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>UnknownHostException</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.net</b></font></td><td align="right"><font size="+1"><b><i>serializable checked PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-2281"></a>

Signals that the name of a
specified host could not be resolved. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">UnknownHostException</b> extends java.io.IOException {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">UnknownHostException</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">UnknownHostException</b> (String <i class="parameter">host</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Exception-->java.io.IOException-->java.net.UnknownHostException</tt>
</p>
<p>
<span class="refsect1">Thrown By: </span><tt class="literal">InetAddress.{getAllByName(), getByName(), getLocalHost()}, Socket.Socket()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>UnknownServiceException</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.net</b></font></td><td align="right"><font size="+1"><b><i>serializable checked PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-2282"></a>

Signals an attempt to use an
unsupported service of a network connection. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">UnknownServiceException</b> extends java.io.IOException {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">UnknownServiceException</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">UnknownServiceException</b> (String <i class="parameter">msg</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Exception-->java.io.IOException-->UnknownServiceException</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>URL</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.net</b></font></td><td align="right"><font size="+1"><b><i>serializable PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-2283"></a>

This class represents a uniform resource locator 
and allows the data referred to by the URL
to be downloaded. A URL can be specified as a single string
or with separate protocol, host, port, and file
specifications. Relative URLs can also be specified with a
<tt class="literal">String</tt> and the <tt class="literal">URL</tt> object to which it is
relative. <a name="INDEX-2284"></a><a name="INDEX-2285"></a><a name="INDEX-2286"></a><a name="INDEX-2287"></a><a name="INDEX-2288"></a><a name="INDEX-2289"></a><a name="INDEX-2290"></a><tt class="literal">getFile()</tt>, <tt class="literal">getHost()</tt>, <tt class="literal">getPort()</tt>,
<tt class="literal">getProtocol()</tt>, and <tt class="literal">getRef()</tt> return the
various portions of the URL specified by a <tt class="literal">URL</tt>
object. <tt class="literal">sameFile()</tt> determines whether a <tt class="literal">URL</tt>
object refers to the same file as this one. <a name="INDEX-2291"></a><a name="INDEX-2292"></a><a name="INDEX-2293"></a>
The data or object referred to by a URL can be downloaded
from the Internet in three ways: with a
<tt class="literal">URLConnection</tt> created with <tt class="literal">openConnection()</tt>,
with an <tt class="literal">InputStream</tt> created by
<tt class="literal">openStream()</tt>, or with <tt class="literal">getContent()</tt>, which
returns the URL contents directly if an appropriate
<tt class="literal">ContentHandler</tt> can be found. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public final class <b class="classname">URL</b> implements Serializable {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">URL</b> (String <i class="parameter">spec</i>) throws MalformedURLException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">URL</b> (URL <i class="parameter">context</i>, String <i class="parameter">spec</i>) throws MalformedURLException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public <b class="function">URL</b> (URL <i class="parameter">context</i>, String <i class="parameter">spec</i>, URLStreamHandler <i class="parameter">handler</i>) throws MalformedURLException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">URL</b> (String <i class="parameter">protocol</i>, String <i class="parameter">host</i>, String <i class="parameter">file</i>) throws MalformedURLException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">URL</b> (String <i class="parameter">protocol</i>, String <i class="parameter">host</i>, int <i class="parameter">port</i>, String <i class="parameter">file</i>) throws MalformedURLException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public <b class="function">URL</b> (String <i class="parameter">protocol</i>, String <i class="parameter">host</i>, int <i class="parameter">port</i>, String <i class="parameter">file</i>, URLStreamHandler <i class="parameter">handler</i>) throws MalformedURLException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Class Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static void <b class="function">setURLStreamHandlerFactory</b> (URLStreamHandlerFactory <i class="parameter">fac</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Property Accessor Methods (by property name)</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.3</span></td><td align="left">public String <b class="function">getAuthority</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final Object <b class="function">getContent</b> () throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.3</span></td><td align="left">public final Object <b class="function">getContent</b> (Class[ ] <i class="parameter">classes</i>) throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">getFile</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">getHost</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.3</span></td><td align="left">public String <b class="function">getPath</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getPort</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">getProtocol</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.3</span></td><td align="left">public String <b class="function">getQuery</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">getRef</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.3</span></td><td align="left">public String <b class="function">getUserInfo</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public URLConnection <b class="function">openConnection</b> () throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final java.io.InputStream <b class="function">openStream</b> () throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">sameFile</b> (URL <i class="parameter">other</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">toExternalForm</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Object</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">equals</b> (Object <i class="parameter">obj</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">hashCode</b> ();</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">toString</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected void <b class="function">set</b> (String <i class="parameter">protocol</i>, String <i class="parameter">host</i>, int <i class="parameter">port</i>, String <i class="parameter">file</i>, String <i class="parameter">ref</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.3</span></td><td align="left">protected void <b class="function">set</b> (String <i class="parameter">protocol</i>, String <i class="parameter">host</i>, int <i class="parameter">port</i>, String <i class="parameter">authority</i>, String <i class="parameter">userInfo</i>, String <i class="parameter">path</i>, String <i class="parameter">query</i>, String <i class="parameter">ref</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->URL(Serializable)</tt>
</p>
<p>
<span class="refsect1">Passed To: </span>Too many methods to list. </p>
<p>
<span class="refsect1">Returned By: </span>Too many methods to list. </p>
<p>
<span class="refsect1">Type Of: </span><tt class="literal">URLConnection.url</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>URLClassLoader</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.net</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2294"></a><a name="INDEX-2295"></a><a name="INDEX-2296"></a><a name="INDEX-2297"></a>
  This <tt class="literal">ClassLoader</tt> provides a useful way to load
  untrusted Java code from a search path of arbitrary URLs, where each
  URL represents a directory or JAR file to search. Use the inherited
  <tt class="literal">loadClass()</tt> method to load a named class with a
  <tt class="literal">URLClassLoader</tt>. Classes loaded by a
  <tt class="literal">URLClassLoader</tt> have whatever permissions are
  granted to their <tt class="literal">java.security.CodeSource</tt> by the
  system <tt class="literal">java.security.Policy</tt>, plus they have one
  additional permission that allows the class loader to read any
  resource files associated with the class. If the class is loaded from a 
  local <tt class="literal">file:</tt> URL that represents a directory, the
  class is given permission to read all files and directories below that
  directory. If the class is loaded from a local
  <tt class="literal">file:</tt> URL that represents a JAR file, the
  class is given permission to read that JAR file. If the class is
  loaded from a URL that represents a resource on another host, 
  that class is given permission to connect to and accept network
  connections from that host. Note, however, that loaded classes are
  not granted this additional permission if the code that created the
  <tt class="literal">URLClassLoader</tt> in the first place would not have
  had that permission. </p>
<p>
<a name="INDEX-2298"></a>
  You can obtain a <tt class="literal">URLClassLoader</tt> by calling one of
  the <tt class="literal">URLClassLoader()</tt> constructors or 
  one of the static <tt class="literal">newInstance()</tt> methods. If you
  call <tt class="literal">newInstance()</tt>, the
  <tt class="literal">loadClass()</tt> method of the returned
  <tt class="literal">URLClassLoader</tt> performs an additional check to
  ensure that the caller has permission to access the specified
  package. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">URLClassLoader</b> extends java.security.SecureClassLoader {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">URLClassLoader</b> (URL[ ] <i class="parameter">urls</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">URLClassLoader</b> (URL[ ] <i class="parameter">urls</i>, ClassLoader <i class="parameter">parent</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">URLClassLoader</b> (URL[ ] <i class="parameter">urls</i>, ClassLoader <i class="parameter">parent</i>, URLStreamHandlerFactory <i class="parameter">factory</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Class Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static URLClassLoader <b class="function">newInstance</b> (URL[ ] <i class="parameter">urls</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static URLClassLoader <b class="function">newInstance</b> (URL[ ] <i class="parameter">urls</i>, ClassLoader <i class="parameter">parent</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public URL[ ] <b class="function">getURLs</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Methods Overriding SecureClassLoader</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected java.security.PermissionCollection <b class="function">getPermissions</b> (java.security.CodeSource <i class="parameter">codesource</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding ClassLoader</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public URL <b class="function">findResource</b> (String <i class="parameter">name</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public java.util.Enumeration <b class="function">findResources</b> (String <i class="parameter">name</i>) throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Methods Overriding ClassLoader</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected Class <b class="function">findClass</b> (String <i class="parameter">name</i>) throws ClassNotFoundException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected void <b class="function">addURL</b> (URL <i class="parameter">url</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected Package <b class="function">definePackage</b> (String <i class="parameter">name</i>, java.util.jar.Manifest <i class="parameter">man</i>, URL <i class="parameter">url</i>) throws IllegalArgumentException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->ClassLoader-->java.security.SecureClassLoader-->URLClassLoader</tt>
</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">URLClassLoader.newInstance()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>URLConnection</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.net</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-2299"></a>

This abstract class defines a network connection to an
object specified by a URL. <tt class="literal">URL.openConnection()</tt>
returns a <tt class="literal">URLConnection</tt> instance. You should use a
<tt class="literal">URLConnection</tt> object when you want more control over
the downloading of data than is available through the
simpler <tt class="literal">URL</tt> methods. <a name="INDEX-2300"></a><a name="INDEX-2301"></a><tt class="literal">connect()</tt> actually makes the network connection. Other methods that depend on being connected call this
method. <tt class="literal">getContent()</tt> returns the data referred to
by the <tt class="literal">URL</tt>, parsed into an appropriate type of
<tt class="literal">Object</tt>. If the URL protocol supports read and write
operations, <tt class="literal">getInputStream()</tt> and
<tt class="literal">getOutputStream()</tt> return input and
output streams to the object referred to by the URL, respectively. <a name="INDEX-2302"></a><a name="INDEX-2303"></a><a name="INDEX-2304"></a><a name="INDEX-2305"></a><a name="INDEX-2306"></a><a name="INDEX-2307"></a><a name="INDEX-2308"></a><a name="INDEX-2309"></a><tt class="literal">getContentLength()</tt>, <tt class="literal">getContentType()</tt>,
<tt class="literal">getContentEncoding()</tt>, <tt class="literal">getExpiration()</tt>,
<tt class="literal">getDate()</tt>, and <tt class="literal">getLastModified()</tt>
return the appropriate information about the object referred
to by the URL, if that information can be determined
(e.g., from HTTP header fields). <tt class="literal">getHeaderField()</tt><a name="INDEX-2310"></a><a name="INDEX-2311"></a><a name="INDEX-2312"></a>
returns an HTTP header field specified by name or by number. <tt class="literal">getHeaderFieldInt()</tt> and <tt class="literal">getHeaderFieldDate()</tt>
return the value of a named header field parsed as an
integer or a date. </p>
<p>
<a name="INDEX-2313"></a><a name="INDEX-2314"></a>
There are a number of options you can specify to
control how the <tt class="literal">URLConnection</tt> behaves. These
options are set with the various <tt class="literal">set()</tt> methods and may be
queried with corresponding <tt class="literal">get()</tt> methods. The
options must be set before the <tt class="literal">connect()</tt> method is
called. <a name="INDEX-2315"></a><a name="INDEX-2316"></a><tt class="literal">setDoInput()</tt> and <tt class="literal">setDoOutput()</tt>
allow you to specify whether you are using the
<tt class="literal">URLConnection</tt> for input and/or output (input-only by default). <a name="INDEX-2317"></a><a name="INDEX-2318"></a><tt class="literal">setAllowUserInteraction()</tt> specifies whether
user interaction (such as typing a password) is allowed
during the data transfer (<tt class="literal">false</tt> by default). <tt class="literal">setDefaultAllowUserInteraction()</tt> is a
class method that allows you to change the default value
for user interaction. <a name="INDEX-2319"></a><a name="INDEX-2320"></a><tt class="literal">setUseCaches()</tt> allows you to specify whether a
cached version of the URL can be used. You can set this to
<tt class="literal">false</tt> to force a URL to be reloaded. <tt class="literal">setDefaultUseCaches()</tt> sets the default value for
<tt class="literal">setUseCaches()</tt>. <a name="INDEX-2321"></a><tt class="literal">setIfModifiedSince()</tt> allows you to specify that a
URL should not be fetched unless it has been modified since a
specified time (if it is possible to determine
its modification date). </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public abstract class <b class="classname">URLConnection</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected <b class="function">URLConnection</b> (URL <i class="parameter">url</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Class Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static boolean <b class="function">getDefaultAllowUserInteraction</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public static FileNameMap <b class="function">getFileNameMap</b> ();</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static String <b class="function">guessContentTypeFromStream</b> (java.io.InputStream <i class="parameter">is</i>) throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static void <b class="function">setContentHandlerFactory</b> (ContentHandlerFactory <i class="parameter">fac</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static void <b class="function">setDefaultAllowUserInteraction</b> (boolean <i class="parameter">defaultallowuserinteraction</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public static void <b class="function">setFileNameMap</b> (FileNameMap <i class="parameter">map</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Class Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected static String <b class="function">guessContentTypeFromName</b> (String <i class="parameter">fname</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Property Accessor Methods (by property name)</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">getAllowUserInteraction</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setAllowUserInteraction</b> (boolean <i class="parameter">allowuserinteraction</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Object <b class="function">getContent</b> () throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.3</span></td><td align="left">public Object <b class="function">getContent</b> (Class[ ] <i class="parameter">classes</i>) throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">getContentEncoding</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getContentLength</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">getContentType</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public long <b class="function">getDate</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">getDefaultUseCaches</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setDefaultUseCaches</b> (boolean <i class="parameter">defaultusecaches</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">getDoInput</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setDoInput</b> (boolean <i class="parameter">doinput</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">getDoOutput</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setDoOutput</b> (boolean <i class="parameter">dooutput</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public long <b class="function">getExpiration</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public long <b class="function">getIfModifiedSince</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setIfModifiedSince</b> (long <i class="parameter">ifmodifiedsince</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public java.io.InputStream <b class="function">getInputStream</b> () throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public long <b class="function">getLastModified</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public java.io.OutputStream <b class="function">getOutputStream</b> () throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public java.security.Permission <b class="function">getPermission</b> () throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public URL <b class="function">getURL</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">getUseCaches</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setUseCaches</b> (boolean <i class="parameter">usecaches</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">connect</b> () throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">getHeaderField</b> (int <i class="parameter">n</i>);</td><td align="right"><i> constant</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">getHeaderField</b> (String <i class="parameter">name</i>);</td><td align="right"><i> constant</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public long <b class="function">getHeaderFieldDate</b> (String <i class="parameter">name</i>, long <i class="parameter">Default</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getHeaderFieldInt</b> (String <i class="parameter">name</i>, int <i class="parameter">Default</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">getHeaderFieldKey</b> (int <i class="parameter">n</i>);</td><td align="right"><i> constant</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">getRequestProperty</b> (String <i class="parameter">key</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setRequestProperty</b> (String <i class="parameter">key</i>, String <i class="parameter">value</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Object</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">toString</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Instance Fields</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected boolean <b class="function">allowUserInteraction</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected boolean <b class="function">connected</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected boolean <b class="function">doInput</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected boolean <b class="function">doOutput</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected long <b class="function">ifModifiedSince</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected URL <b class="function">url</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected boolean <b class="function">useCaches</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Deprecated Public Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">#</span></td><td align="left">public static String <b class="function">getDefaultRequestProperty</b> (String <i class="parameter">key</i>);</td><td align="right"><i> constant</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">#</span></td><td align="left">public static void <b class="function">setDefaultRequestProperty</b> (String <i class="parameter">key</i>, String <i class="parameter">value</i>);</td><td align="right"><i> empty</i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Subclasses: </span><tt class="literal">HttpURLConnection, JarURLConnection</tt>
</p>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">ContentHandler.getContent()</tt>
</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">URL.openConnection(), URLStreamHandler.openConnection()</tt>
</p>
<p>
<span class="refsect1">Type Of: </span><tt class="literal">JarURLConnection.jarFileURLConnection</tt>
</p>

</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>URLDecoder</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.net</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2322"></a><a name="INDEX-2323"></a>
  This class defines a static <tt class="literal">decode()</tt> method that
  reverses the encoding performed by
  <tt class="literal">URLEncoder.encode()</tt>. It decodes 8-bit text with
  the MIME type "x-www-form-urlencoded", which is a standard encoding
  used by web browsers to submit form contents to CGI scripts and other
  server-side programs. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">URLDecoder</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">URLDecoder</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Class Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static String <b class="function">decode</b> (String <i class="parameter">s</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>URLEncoder</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.net</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-2324"></a><a name="INDEX-2325"></a>

This class defines a single static method that
converts a string to its URL-encoded form. That is, spaces
are converted to +, and nonalphanumeric characters other
than underscore are output as two hexadecimal digits
following a percent sign. Note that this technique
works only for 8-bit characters. This method
canonicalizes a URL specification so that it uses only
characters from an extremely portable subset of ASCII that
can be correctly handled by computers around the world. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">URLEncoder</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">No Constructor</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Class Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static String <b class="function">encode</b> (String <i class="parameter">s</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>URLStreamHandler</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.net</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-2326"></a><a name="INDEX-2327"></a>
This abstract class defines the <tt class="literal">openConnection()</tt> method that creates a
<tt class="literal">URLConnection</tt> for a given <tt class="literal">URL</tt>. A separate
subclass of this class may be defined for various URL
protocol types. A <tt class="literal">URLStreamHandler</tt> is created by a
<tt class="literal">URLStreamHandlerFactory</tt>. Normal applications never need to use or subclass this class. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public abstract class <b class="classname">URLStreamHandler</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">URLStreamHandler</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.3</span></td><td align="left">protected boolean <b class="function">equals</b> (URL <i class="parameter">u1</i>, URL <i class="parameter">u2</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.3</span></td><td align="left">protected int <b class="function">getDefaultPort</b> ();</td><td align="right"><i> constant</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.3</span></td><td align="left">protected InetAddress <b class="function">getHostAddress</b> (URL <i class="parameter">u</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.3</span></td><td align="left">protected int <b class="function">hashCode</b> (URL <i class="parameter">u</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.3</span></td><td align="left">protected boolean <b class="function">hostsEqual</b> (URL <i class="parameter">u1</i>, URL <i class="parameter">u2</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected abstract URLConnection <b class="function">openConnection</b> (URL <i class="parameter">u</i>) throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected void <b class="function">parseURL</b> (URL <i class="parameter">u</i>, String <i class="parameter">spec</i>, int <i class="parameter">start</i>, int <i class="parameter">limit</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.3</span></td><td align="left">protected boolean <b class="function">sameFile</b> (URL <i class="parameter">u1</i>, URL <i class="parameter">u2</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.3</span></td><td align="left">protected void <b class="function">setURL</b> (URL <i class="parameter">u</i>, String <i class="parameter">protocol</i>, String <i class="parameter">host</i>, int <i class="parameter">port</i>, String <i class="parameter">authority</i>, String <i class="parameter">userInfo</i>, String <i class="parameter">path</i>, String <i class="parameter">query</i>, String <i class="parameter">ref</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected String <b class="function">toExternalForm</b> (URL <i class="parameter">u</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Deprecated Protected Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">#</span></td><td align="left">protected void <b class="function">setURL</b> (URL <i class="parameter">u</i>, String <i class="parameter">protocol</i>, String <i class="parameter">host</i>, int <i class="parameter">port</i>, String <i class="parameter">file</i>, String <i class="parameter">ref</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">URL.URL()</tt>
</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">URLStreamHandlerFactory.createURLStreamHandler()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>URLStreamHandlerFactory</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.net</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-2328"></a>

This interface defines a method that creates a
<tt class="literal">URLStreamHandler</tt> object for a specified protocol. Normal applications never need to use or implement this
interface. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public interface <b class="classname">URLStreamHandlerFactory</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract URLStreamHandler <b class="function">createURLStreamHandler</b> (String <i class="parameter">protocol</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">URL.setURLStreamHandlerFactory(), URLClassLoader.URLClassLoader()</tt>
</p>
</div>
<a name="INDEX-2329"></a>
<a name="INDEX-2330"></a>


<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch15_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch15_01.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch17_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch17_01.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">15.1. The java.math Package</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">17. The java.security Package</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
