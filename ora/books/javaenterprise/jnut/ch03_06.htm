<html>
<head>
<title>Abstract Classes and Methods (Java in a Nutshell)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="David Flanagan">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-487-8E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Abstract Classes and Methods">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm" alt="Java Enterprise in a Nutshell"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch03_05.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch03_05.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch03_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch03_01.htm">Chapter 3: Object-Oriented Programming in Java</a></td><td align="right" valign="top" width="172"><a href="ch03_07.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch03_07.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY --><h2 class="sect1">3.6. Abstract Classes and Methods</h2>
<p>
<a name="INDEX-505"></a><a name="INDEX-506"></a><a name="INDEX-507"></a>


      In <a href="ch03_05.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch03_05.htm">Example 3-4</a>, we declared our
      <tt class="literal">Circle</tt> class to be part of a package named
      <tt class="literal">shapes</tt>. Suppose we plan to implement a number
      of shape classes: <tt class="literal">Rectangle</tt>,
      <tt class="literal">Square</tt>, <tt class="literal">Ellipse</tt>,
      <tt class="literal">Triangle</tt>, and so on. We can give these
      shape classes our two basic <tt class="literal">area()</tt> and
      <tt class="literal">circumference()</tt> methods. Now, to make it easy
      to work with an array of shapes, it would be helpful if all our
      shape classes had a common superclass, <tt class="literal">Shape</tt>. If we structure our class hierarchy this way, every
      shape object, regardless of the actual type of shape it
      represents, can be assigned to variables, fields, or array elements
      of type <tt class="literal">Shape</tt>. We want the <tt class="literal">Shape</tt> class to encapsulate whatever
      features all our shapes have in common (e.g., 
      the <tt class="literal">area()</tt> and
      <tt class="literal">circumference()</tt> methods). But our
      generic <tt class="literal">Shape</tt> class doesn't represent any real
      kind of shape, so it cannot define useful implementations
      of the methods. Java handles this situation with
      <em class="emphasis">abstract methods</em>. </p>
<p>      Java lets us define a method without implementing it by declaring
      the method with the <tt class="literal">abstract</tt> modifier. An
      <tt class="literal">abstract</tt> method has no body; it simply has a
      signature definition followed by a semicolon.<a href="#FOOTNOTE-7">[7]</a> Here are
      the rules about <tt class="literal">abstract</tt> methods and the
      <tt class="literal">abstract</tt> classes that contain them:
    </p>
<blockquote class="footnote">
<a name="FOOTNOTE-7"></a>
<p>[7] An
      <tt class="literal">abstract</tt> method in Java is something like a
      pure virtual function in C++ (i.e., a virtual function that is
      declared <tt class="literal">= 0</tt>). In C++, a class that contains a
      pure virtual function is called an abstract class and cannot be
      instantiated. The same is true of Java classes that contain
      <tt class="literal">abstract</tt> methods.</p>
</blockquote>
<ul>
<li>
<p>	  Any class with an <tt class="literal">abstract</tt> method is
	  automatically <tt class="literal">abstract</tt> itself and must
	  be declared as such. </p>
</li>
<li>
<p>	  An <tt class="literal">abstract</tt> class cannot be instantiated. </p>
</li>
<li>
<p>	  A subclass of an <tt class="literal">abstract</tt> class can be
	  instantiated only if it overrides each of the
	  <tt class="literal">abstract</tt> methods of its superclass and
	  provides an implementation (i.e., a method body) for all of
	  them. Such a class is often called a
	  <em class="emphasis">concrete</em> subclass, to emphasize the fact
	  that it is not <tt class="literal">abstract</tt>. </p>
</li>
<li>
<p>	  If a subclass of an <tt class="literal">abstract</tt> class does
	  not implement all the <tt class="literal">abstract</tt> methods
	  it inherits, that subclass is itself
	  <tt class="literal">abstract</tt>. </p>
</li>
<li>
<p>
<tt class="literal">static</tt>, <tt class="literal">private</tt>, and
	  <tt class="literal">final</tt> methods cannot be
	  <tt class="literal">abstract</tt>, since these types of methods
	  cannot be overridden by a subclass. Similarly, a
	  <tt class="literal">final</tt> class cannot contain any
	  <tt class="literal">abstract</tt> methods. </p>
</li>
<li>
<p>	  A class can be declared <tt class="literal">abstract</tt> even if
	  it does not actually have any <tt class="literal">abstract</tt>
	  methods. Declaring
	  such a class <tt class="literal">abstract</tt> indicates that
	  the implementation is somehow incomplete and is meant
	  to serve as a superclass for one or more
	  subclasses that will complete the implementation. Such a class cannot be instantiated. </p>
</li>
</ul>
<p>      There is an important feature of the rules of 
      <tt class="literal">abstract</tt> methods. If we define the <tt class="literal">Shape</tt> class to have 
      <tt class="literal">abstract</tt><tt class="literal">area()</tt> and <tt class="literal">circumference()</tt>
      methods, any subclass of <tt class="literal">Shape</tt> is
      required to provide implementations of these methods so it can 
      be instantiated. In other words, every
      <tt class="literal">Shape</tt> object is guaranteed to have
      implementations of these methods defined. <a href="#javanut3-ch-3-ex-shapes">Example 3-5</a> shows how this might
      work. It defines an <tt class="literal">abstract</tt><tt class="literal">Shape</tt> class and two concrete subclasses of it. </p>
<a name="javanut3-ch-3-ex-shapes"></a>
<div class="example">
<h4 class="objtitle">Example 3-5. An Abstract Class and Concrete Subclasses</h4>
<blockquote>
<pre class="programlisting">public abstract class Shape {
  public abstract double area();            // Abstract methods: note
  public abstract double circumference();   // semicolon instead of body. 
}

class Circle extends Shape {
  public static final double PI = 3.14159265358979323846;
  protected double r;                              // Instance data
  public Circle(double r) { this.r = r; }          // Constructor
  public double getRadius() { return r; }          // Accessor
  public double area() { return PI*r*r; }          // Implementations of
  public double circumference() { return 2*PI*r; } // abstract methods. 
}

class Rectangle extends Shape {
  protected double w, h;                               // Instance data
  public Rectangle(double w, double h) {               // Constructor
    this.w = w;  this.h = h; 
  }
  public double getWidth() { return w; }               // Accessor method
  public double getHeight() { return h; }              // Another accessor
  public double area() { return w*h; }                 // Implementations of
  public double circumference() { return 2*(w + h); }  // abstract methods.
}</pre>
</blockquote>
</div>
<p>      Each <tt class="literal">abstract</tt> method in
      <tt class="literal">Shape</tt> has a semicolon right after its
      parentheses. There are no curly braces, and no method body is
      defined. Using the classes defined in <a href="#javanut3-ch-3-ex-shapes">Example 3-5</a>, we can now write code like
	this:
    </p>
<blockquote>
<pre class="programlisting">Shape[] shapes = new Shape[3];          // Create an array to hold shapes
shapes[0] = new Circle(2.0);            // Fill in the array
shapes[1] = new Rectangle(1.0, 3.0);
shapes[2] = new Rectangle(4.0, 2.0);

double total_area = 0;
for(int i = 0; i &lt; shapes.length; i++)
    total_area += shapes[i].area();     // Compute the area of the shapes</pre>
</blockquote>
<p>      There are two important points to notice here:
    </p>
<ul>
<li>
<p>	  Subclasses of <tt class="literal">Shape</tt> can be assigned to
	  elements of an array of <tt class="literal">Shape</tt>. No cast
	  is necessary. This is another example of a widening
	  reference type conversion (discussed in <a href="ch02_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch02_01.htm">Chapter 2, "Java Syntax

from the Ground Up"</a>). </p>
</li>
<li>
<p>	  You can invoke the <tt class="literal">area()</tt>
	  and <tt class="literal">circumference()</tt> methods for any
	  <tt class="literal">Shape</tt> object, even though the
	  <tt class="literal">Shape</tt> class does not define a body for these
	  methods. When you do this, the method to be invoked is
	  found using dynamic method lookup, so the area of a circle
	  is computed using the method defined by
	  <tt class="literal">Circle</tt>, and the area of a rectangle is
	  computed using the method defined by
	  <tt class="literal">Rectangle</tt>.
<a name="INDEX-508"></a><a name="INDEX-509"></a><a name="INDEX-510"></a>
</p>
</li>
</ul>

<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch03_05.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch03_05.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch03_07.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch03_07.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">3.5. Data Hiding and Encapsulation</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">3.7. Interfaces</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
