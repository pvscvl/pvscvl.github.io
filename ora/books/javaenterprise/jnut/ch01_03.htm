<html>
<head>
<title>An Example Program (Java in a Nutshell)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="David Flanagan">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-487-8E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="An Example Program">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm" alt="Java Enterprise in a Nutshell"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch01_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch01_02.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch01_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch01_01.htm">Chapter 1: Introduction</a></td><td align="right" valign="top" width="172"><a href="ch02_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch02_01.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY --><h2 class="sect1">1.3. An Example Program</h2>
<p>
<a name="INDEX-68"></a><a href="#javanut3-ch-1-ex-1">Example 1-1</a> shows a Java program to
      compute factorials.<a href="#FOOTNOTE-4">[4]</a>  The
      numbers at the beginning of each line are not part of the program;
      they are there for ease of reference when we dissect the program
      line-by-line. </p>
<blockquote class="footnote">
<a name="FOOTNOTE-4"></a>
<p>[4]The factorial of an integer is the
      product of the number and all positive integers less than the
      number. So, for example, the factorial of 4, which is also
      written 4!, is 4 times 3 times 2 times 1, or 24. By definition,
      0! is 1.</p>
</blockquote>
<a name="javanut3-ch-1-ex-1"></a>
<div class="example">
<h4 class="objtitle">Example 1-1. Factorial.java: A Program to Compute Factorials</h4>
<blockquote>
<pre class="programlisting"> 1 /**
 2  * This program computes the factorial of a number
 3  */
 4 public class Factorial {                   // Define a class
 5   public static void main(String[] args) { // The program starts here
 6     int input = Integer.parseInt(args[0]); // Get the user's input
 7     double result = factorial(input);      // Compute the factorial
 8     System.out.println(result);            // Print out the result
 9   }                                        // The main() method ends here
10 
11   public static double factorial(int x) {  // This method computes x!
12     if (x &lt; 0)                             // Check for bad input
13       return 0.0;                          //   if bad, return 0
14     double fact = 1.0;                     // Begin with an initial value
15     while(x &gt; 1) {                         // Loop until x equals 1
16       fact = fact * x;                     //   multiply by x each time
17       x = x - 1;                           //   and then decrement x
18     }                                      // Jump back to start of loop
19     return fact;                           // Return the result
20   }                                        // factorial() ends here
21 }                                          // The class ends here
      </pre>
</blockquote>
</div>
<h3 class="sect2">1.3.1. Compiling and Running the Program</h3>
<p>
<a name="INDEX-69"></a><a name="INDEX-70"></a><a name="INDEX-71"></a><a name="INDEX-72"></a>

	Before we look at how the program works, we must first
	discuss how to run it. In order to compile and run the
	program, you need a Java
	software development kit (SDK) of some sort. Sun Microsystems
	created the Java language and ships a free Java SDK for its
	Solaris operating system and for Microsoft Windows (95/98/NT) 
	platforms. At the time of this writing, the current
	version of Sun's SDK is entitled Java 2 SDK, Standard Edition,
	Version 1.2.2 and is available for download from
	<a href="../../../../../../../java.sun.com/products/jdk/1.2/">http://java.sun.com/products/jdk/1.2/</a> (Sun's
	Java SDK is still often called the JDK, even internally). Be sure to get the SDK and not the Java Runtime
	Environment. The JRE enables you to run existing
	Java programs, but not to write your own. </p>
<p>
<a name="INDEX-73"></a>

	Sun supports its SDK only on Solaris and Windows platforms. Many other companies have licensed and ported the SDK to their
	platforms, however. Contact your operating-system vendor to find
	if a version of the Java SDK is available for your
	system. Linux users should visit
	<a href="../../../../../../../www.blackdown.org/">http://www.blackdown.org/</a>. </p>
<p>	The Sun SDK is not the only Java programming environment
	you can use. Companies such as Borland, Inprise, Metrowerks,
	Oracle, Sybase, and Symantec offer commercial products that
	enable you to write Java programs. This book assumes that you
	are using Sun's SDK. If you are using a product from some other
	vendor, be sure to read that vendor's documentation to learn
	how to compile and run a simple program, like that shown in
	<a href="#javanut3-ch-1-ex-1">Example 1-1</a>. </p>
<p>
<a name="INDEX-74"></a><a name="INDEX-75"></a><a name="INDEX-76"></a><a name="INDEX-77"></a><a name="INDEX-78"></a><a name="INDEX-79"></a>

	Once you have a Java programming environment installed, the
	first step towards running our program is to type it in. Using
	your favorite text editor, enter the program as it is shown in
	<a href="#javanut3-ch-1-ex-1">Example 1-1</a>. Omit the line numbers,
	as they are just there for reference. Note that Java is a
	case-sensitive language, so you must type lowercase letters in
	lowercase and uppercase letters in uppercase. You'll notice
	that many of the lines of this program end with semicolons. It
	is a common mistake to forget these characters, but the
	program won't work without them, so be careful!  If you are not
	a fast typist, you can omit everything from <tt class="literal">//</tt> 
	to the end
	of a line. Those are <em class="emphasis">comments</em> ; they are
	there for your benefit and are ignored by
	Java.<a href="#FOOTNOTE-5">[5]</a>
</p>
<blockquote class="footnote">
<a name="FOOTNOTE-5"></a>
<p>[5]I recommend that you type this example in
	by hand, to get a feel for the language. If you
	<em class="emphasis">really</em> don't want to, however, you can
	download this, and all examples in the book, from
	<a href="../../../../../../../www.oreilly.com/catalog/javanut3/">http://www.oreilly.com/catalog/javanut3/</a>.</p>
</blockquote>
<p>
<a name="INDEX-80"></a><a name="INDEX-81"></a><a name="INDEX-82"></a><a name="INDEX-83"></a>

	When writing Java programs, you should use a text editor that
	saves files in plain-text format, not a word processor
	that supports fonts and formatting and saves files in a
	proprietary format. My favorite text editor on Unix systems is
	<em class="emphasis">emacs</em>. If you use a Windows system,
	you might use <em class="emphasis">Notepad</em> or
	<em class="emphasis">WordPad</em>, if you don't have a
	more specialized programmer's editor. If you are using a
	commercial Java programming environment, it probably includes an
	appropriate text editor; read the documentation that came with
	the product. When you are done entering the program, save it in
	a file named <em class="emphasis">Factorial.java</em>. This is
	important; the program will not work if you save it by any other
	name. </p>
<p>
<a name="INDEX-84"></a><a name="INDEX-85"></a><a name="INDEX-86"></a><a name="INDEX-87"></a><a name="INDEX-88"></a>

	After writing a program like this one, the next step is to
	compile it. With Sun's SDK, the Java compiler is known as
	<em class="emphasis">javac</em>. <em class="emphasis">javac</em> is a
	command-line tool, so you can only use it from a terminal window,
	such as an MS-DOS window on a Windows system or an
	<em class="emphasis">xterm</em> window on a Unix system. Compile the
	program by typing the following command line:<a href="#FOOTNOTE-6">[6]</a>
</p>
<blockquote class="footnote">
<a name="FOOTNOTE-6"></a>
<p>[6]The
	"C:\&gt;" characters represent the command-line prompt;  
	<em class="emphasis">don't</em> 
	type these characters yourself.</p>
</blockquote>
<blockquote>
<pre class="programlisting">C:\&gt; javac Factorial.java</pre>
</blockquote>
<p>	If this command prints any error messages, you probably got
	something wrong when you typed in the program. If it does not
	print any error messages, however, the compilation has succeeded,
	and <em class="emphasis">javac</em> creates a file called
	<em class="emphasis">Factorial.class</em>. This is the compiled
	version of the program. </p>
<p>
<a name="INDEX-89"></a><a name="INDEX-90"></a><a name="INDEX-91"></a>

	Once you have compiled a Java program, you must still run it. Unlike
	some other languages, Java programs are not compiled into native
	machine language, so they cannot be executed directly by the
	system. Instead, they are run by another program known as the
	Java interpreter. In Sun's SDK, the interpreter is a
	command-line program named, appropriately enough,
	<em class="emphasis">java</em>. To run the factorial program, type:
</p>
<blockquote>
<pre class="programlisting">C:\&gt; java Factorial 4</pre>
</blockquote>
<p>
<em class="emphasis">java</em> 
	is the command to run the Java interpreter, 
	<em class="emphasis">Factorial</em>
	is the name of the Java program we want the interpreter to
	run, and <em class="emphasis">4</em>	
	is the input data--the number we want the
	interpreter to compute the factorial of. The program prints a
	single line of output, telling us that the factorial of 4 is 24:
</p>
<blockquote>
<pre class="programlisting">C:\&gt; java Factorial 4
24.0</pre>
</blockquote>
<p>	Congratulations!  You've just written, compiled, and run your
	first Java program. Try running it again to compute the factorials of
	some other numbers. </p>
<h3 class="sect2">1.3.2. Analyzing the Program</h3>
<p>	Now that you have run the factorial program, let's analyze it
	line by line, to see what makes a Java program tick. </p>
<h3 class="sect3">1.3.2.1. Comments</h3>
<p>
<a name="INDEX-92"></a><a name="INDEX-93"></a><a name="INDEX-94"></a><a name="INDEX-95"></a>


	  The first three lines of the program are a comment. Java
	  ignores them, but they tell a human programmer what the
	  program does. A comment begins with the characters
	  <tt class="literal">/*</tt> and
	  ends with the characters <tt class="literal">*/</tt>. Any amount of
	  text, including 
	  multiple lines of text, may appear between these characters. Java also supports another type of comment, which you can see in
	  lines 4 through 21. If the characters <tt class="literal">//</tt>
	  appear in a Java
	  program, Java ignores those characters and any other text
	  that appears between those characters and the end of the line. </p>
<h3 class="sect3">1.3.2.2. Defining a class</h3>
<p>
<a name="INDEX-96"></a><a name="INDEX-97"></a><a name="INDEX-98"></a><a name="INDEX-99"></a><a name="INDEX-100"></a><a name="INDEX-101"></a>


	  Line 4 is the beginning of the program. It says that we are
	  defining a class named <tt class="literal">Factorial</tt>. This
	  explains why the program had to be stored in a file named
	  <em class="emphasis">Factorial.java</em>. That filename indicates
	  that the file contains Java source code for a class named
	  <tt class="literal">Factorial</tt>. The word
	  <tt class="literal">public</tt> is a <em class="emphasis">modifier</em> ;
	  it says that the class is publicly available and that
	  anyone may use it. The open curly-brace
	  character (<tt class="literal">{</tt>) marks the beginning of the body
	  of the class, which 
	  extends all the way to line 21, where we find the matching
	  close curly-brace character (<tt class="literal">}</tt>). The program contains a number of pairs of curly braces;
	  the lines are indented to show the nesting within these
	  braces. </p>
<p>
<a name="INDEX-102"></a><a name="INDEX-103"></a><a name="INDEX-104"></a>

	  A class is the fundamental unit of program structure in Java,
	  so it is not surprising that the first line of our program
	  declares a class. All Java programs are classes, although
	  some programs use many classes instead of just one. Java is
	  an object-oriented programming language, and classes are a
	  fundamental part of the object-oriented paradigm. Each class
	  defines a unique kind of object. <a href="#javanut3-ch-1-ex-1">Example 1-1</a> is not really an object-oriented
	  program, however, so I'm not going to go into detail about classes
	  and objects here. That is the topic of <a href="ch03_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch03_01.htm">Chapter 3, "Object-Oriented Programming in Java"</a>. For now, all you need to understand is
	  that a class defines a set of interacting
	  <em class="emphasis">members</em>. Those members may be
	  fields, methods, or other classes. The
	  <tt class="literal">Factorial</tt> class contains two members, both
	  of which are methods. They are described in upcoming 
	  sections. </p>
<h3 class="sect3">1.3.2.3. Defining a method</h3>
<p>
<a name="INDEX-105"></a><a name="INDEX-106"></a><a name="INDEX-107"></a><a name="INDEX-108"></a><a name="INDEX-109"></a>

	  Line 5 begins the definition of a
	  <em class="emphasis">method</em> of our
	  <tt class="literal">Factorial</tt> class. A method is a named
	  chunk of Java code. A Java program can call, or
	  <em class="emphasis">invoke</em>, a method to execute the code in
	  it. If you have programmed in other languages, you have
	  probably seen methods before, but they may have been called
	  functions, procedures, or subroutines. The interesting thing
	  about methods is that they have
	  <em class="emphasis">parameters</em>
	  and <em class="emphasis">return
	  values</em>. When you call a method, you pass it some
	  data you want it to operate on, and it returns a result to
	  you. A method is like an algebraic function:
</p>
<blockquote>
<pre class="programlisting">y = f(x)</pre>
</blockquote>
	<p>  Here, the mathematical function <tt class="literal">f</tt> performs
	  some computation on the value represented by
	  <tt class="literal">x</tt> and returns a value, which we represent by
	  <tt class="literal">y</tt>. </p>
<p>	  To return to line 5, the <tt class="literal">public</tt> and
	  <tt class="literal">static</tt> keywords are modifiers. <tt class="literal">public</tt> means the method is publicly
	  accessible; anyone can use it. The meaning of the
	  <tt class="literal">static</tt> modifier is not important here; it
	  is explained in <a href="ch03_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch03_01.htm">Chapter 3, "Object-Oriented Programming in Java"</a>. The
	  <tt class="literal">void</tt> keyword specifies the return value of
	  the method. In this case, it specifies that this method does
	  not have a return value. </p>
<p>
<a name="INDEX-110"></a><a name="INDEX-111"></a><a name="INDEX-112"></a>

	  The word <tt class="literal">main</tt> is the name of the method. <tt class="literal">main</tt> is a special name. When you run the
	  Java interpreter, it reads in the class you specify, then
	  looks for a method named
	  <tt class="literal">main()</tt>.<a href="#FOOTNOTE-7">[7]</a>  When the interpreter
	  finds this method, it starts
	  running the program at that method. When the
	  <tt class="literal">main()</tt> method finishes, the program is
	  done, and the Java interpreter exits. In other words, the
	  <tt class="literal">main()</tt> method is the main entry point
	  into a Java program. It is not actually sufficient for a
	  method to be named <tt class="literal">main()</tt>, however. The
	  method must be declared <tt class="literal">public static void</tt>
	  exactly as shown in line 5. In fact, the only part of line 5
	  you can change is the word <tt class="literal">args</tt>, which
	  you can replace with any word you want. You'll be using this
	  line in all of your Java programs, so go ahead and commit it
	  to memory now!<a href="#FOOTNOTE-8">[8]</a>
</p>
<blockquote class="footnote">
<a name="FOOTNOTE-7"></a>
<p>[7]By convention, when this
	  book refers to a method, it follows the name of the
	  method by a pair of parentheses. As you'll see, parentheses
	  are an important part of method syntax, and they serve here to
	  keep method names distinct from the names of classes, fields,
	  variables, and so on.</p>
</blockquote>
<blockquote class="footnote">
<a name="FOOTNOTE-8"></a>
<p>[8]All Java programs that are run
	  directly by the Java interpreter must have a
	  <tt class="literal">main()</tt> method. Programs of this sort are
	  often called <em class="emphasis">applications</em>. It is possible to write programs
	  that are not run directly by the interpreter, but are
	  dynamically loaded into some other already running Java
	  program. Examples are <em class="emphasis">applets</em>, which are
	  programs run by a web browser, and
	  <em class="emphasis">servlets</em>, which are programs run by a web
	  server. Applets are discussed in <em class="emphasis">Java Foundation
	  Classes in a Nutshell</em> (O'Reilly), while servlets are discussed
	  in <em class="citetitle">Java Enterprise in a Nutshell</em> (O'Reilly). In
	  this book, we consider only applications.</p>
</blockquote>
<p>
<a name="INDEX-113"></a><a name="INDEX-114"></a><a name="INDEX-115"></a>

	  Following the name of the <tt class="literal">main()</tt> method is
	  a list of method parameters, contained in
	  parentheses. This <tt class="literal">main()</tt> method has only a
	  single parameter. <tt class="literal">String[]</tt> specifies the
	  type of the parameter, which is an array of strings (i.e., 
	  a numbered list of strings of text). <tt class="literal">args</tt>
	  specifies the name of the parameter. In the algebraic equation
	  <tt class="literal">f(x)</tt>, <tt class="literal">x</tt> is simply a way
	  of referring to an unknown value. <tt class="literal">args</tt>
	  serves the same purpose for the <tt class="literal">main()</tt>
	  method. As we'll see, the name <tt class="literal">args</tt> is
	  used in the body of the method to refer to the
	  unknown value that is passed to the method. </p>
<p>	  As I've just explained, the <tt class="literal">main()</tt> method is a
	  special one that is called by the Java interpreter when it
	  starts running a Java class (program). When you invoke the Java
	  interpreter like this:
</p>
<blockquote>
<pre class="programlisting">C:\&gt; java Factorial 4</pre>
</blockquote>
<p>
	  the string "4" is passed to the <tt class="literal">main()</tt>
	  method as the value of the parameter named
	  <tt class="literal">args</tt>. More precisely, an array of
	  strings containing only one entry, "4", is passed to
	  <tt class="literal">main()</tt>. If we invoke the program like
	  this:
</p>
<blockquote>
<pre class="programlisting">C:\&gt; java Factorial 4 3 2 1</pre>
</blockquote>
<p>
	  then an array of four strings, "4", "3", "2", and "1", are
	  passed to the <tt class="literal">main()</tt> method as the value of
	  the parameter named <tt class="literal">args</tt>. Our
	  program looks only at the first string in the array, so the
	  other strings are ignored. </p>
<p>
<a name="INDEX-116"></a><a name="INDEX-117"></a><a name="INDEX-118"></a><a name="INDEX-119"></a><a name="INDEX-120"></a>
	  Finally, the last thing on line 5 is an open curly brace. This marks the beginning of the body of the
	  <tt class="literal">main()</tt> method, which continues until the
	  matching close curly brace on line 9. Methods are
	  composed of <em class="emphasis">statements</em>, which the Java
	  interpreter executes in sequential order. In this case, lines
	  6, 7, and 8 are three statements that compose the body of
	  the <tt class="literal">main()</tt> method. Each statement
	  ends with a semicolon to separate it from the next. This is
	  an important part of Java syntax; beginning programmers
	  often forget the semicolons. </p>
<h3 class="sect3">1.3.2.4. Declaring a variable and parsing input</h3>
<p>
<a name="INDEX-121"></a><a name="INDEX-122"></a><a name="INDEX-123"></a><a name="INDEX-124"></a><a name="INDEX-125"></a>

	  The first statement of the <tt class="literal">main()</tt> method,
	  line 6, declares a
	  variable and assigns a value to it. In any programming language, a <em class="emphasis">variable</em> 
	  is simply a symbolic
	  name for a value. Think back to algebra class again:
</p>c<sup class="superscript">2</sup> = a<sup class="superscript">2</sup> + b<sup class="superscript">2</sup>
<p>
	  The letters <tt class="literal">a</tt>, <tt class="literal">b</tt>, and
	  <tt class="literal">c</tt> are names we use to refer to unknown
	  values. They make this formula (the Pythagorean theorem) a
	  general one that applies to arbitrary values of
	  <tt class="literal">a</tt>, <tt class="literal">b</tt>, and
	  <tt class="literal">c</tt>, not just a specific set like:
</p>5<sup class="superscript">2</sup> = 4<sup class="superscript">2</sup> + 3<sup class="superscript">2</sup>
<p>
	  A variable in a Java program is exactly the same thing: it is
	  a name we use to refer to a value. More precisely, a variable
	  is a name that refers to a storage space for a value. We
	  often say that a variable holds a value. </p>
<p>	  Line 6 begins with the words <tt class="literal">int input</tt>. This declares a variable named <tt class="literal">input</tt> and
	  specifies that the variable has the type
	  <tt class="literal">int</tt>; that is, it is an integer. Java can work with several
	  different types of values, including integers, real or
	  floating-point numbers, characters (e.g., letters, digits),
	  and strings. Java is a <em class="emphasis">strongly typed</em> language,
	  which means that all variables must have a type specified and
	  can only refer to values of that type. Our
	  <tt class="literal">input</tt> variable always refers to an integer;
	  it cannot refer to a floating point number or a string. Method parameters are also typed. Recall that the
	  <tt class="literal">args</tt> parameter had a type of
	  <tt class="literal">String[]</tt>. </p>
<p>
<a name="INDEX-126"></a><a name="INDEX-127"></a><a name="INDEX-128"></a>

	  Continuing with line 6, the variable declaration
	  <tt class="literal">int input</tt> is followed by the
	  <tt class="literal">=</tt> character. This is the assignment
	  operator in Java; it sets the value of a variable. When
	  reading Java code, don't read <tt class="literal">=</tt> as
	  "equals," but instead read it as "is assigned the value."  As
	  we'll see in <a href="ch02_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch02_01.htm">Chapter 2, "Java Syntax

from the Ground Up"</a>, there is a
	  different operator for "equals."
	</p>
<p>
	  The value being assigned to our <tt class="literal">input</tt>
	  variable is <tt class="literal">Integer.parseInt(args[0])</tt>. This is a method invocation. This first statement of the
	  <tt class="literal">main()</tt> method invokes another method whose
	  name is <tt class="literal">Integer.parseInt()</tt>. As you might
	  guess, this method "parses" an integer; that is, it converts a
	  string representation of an integer, such as "4", to the
	  integer itself. The <tt class="literal">Integer.parseInt()</tt>
	  method is not part of the Java language, but it is a core part
	  of the Java API or Application Programming Interface. Every
	  Java program can use the powerful set of classes and methods
	  defined by this core API. The second half of this book is a
	  quick-reference that documents that core API.
<a name="INDEX-129"></a><a name="INDEX-130"></a><a name="INDEX-131"></a><a name="INDEX-132"></a><a name="INDEX-133"></a>
</p>
<p>
<a name="INDEX-134"></a>

	  When you call a method, you pass values (called 
	  <em class="emphasis">arguments</em>) that are assigned to the 
	  corresponding parameters defined by the method, and the
	  method returns a value. The argument passed to
	  <tt class="literal">Integer.parseInt()</tt> is
	  <tt class="literal">args[0]</tt>. Recall that
	  <tt class="literal">args</tt> is the name of the parameter for
	  <tt class="literal">main()</tt>; it specifies an
	  array (or list) of strings. The
	  elements of an array are numbered sequentially, and the first
	  one is always numbered 0. We only care about 
	  the first string in the <tt class="literal">args</tt> 
	  array, so we use the expression
	  <tt class="literal">args[0]</tt> to refer to that string. Thus,
	  when we invoke the program as shown earlier, 
	  line 6 takes the first string specified after
	  the name of the class, "4", and passes it to the method named
	  <tt class="literal">Integer.parseInt()</tt>. This method converts
	  the string to the corresponding integer and returns the
	  integer as its return value. Finally, this returned integer is
	  assigned to the variable named <tt class="literal">input</tt>. </p>
<h3 class="sect3">1.3.2.5. Computing the result</h3>
<p>
<a name="INDEX-135"></a><a name="INDEX-136"></a>

	  The statement on line 7 is a lot like the statement on line
	  6. It declares a variable and assigns a value to it. The
	  value assigned to the variable is computed by invoking
	  a method. The variable is named
	  <tt class="literal">result</tt>, and it has a type of
	  <tt class="literal">double</tt>. <tt class="literal">double</tt> means a
	  double-precision floating-point number. The variable is
	  assigned a value that is computed by the
	  <tt class="literal">factorial()</tt> method. The
	  <tt class="literal">factorial()</tt> method, however, is not part of the
	  standard Java API. Instead, it is defined as part of our
	  program, by lines 11 through 19. The argument passed to
	  <tt class="literal">factorial()</tt> is the value referred to by the
	  <tt class="literal">input</tt> variable, which was computed on line
	  6. We'll consider the body of the
	  <tt class="literal">factorial()</tt> method shortly, but you can
	  surmise from its name that this method takes an input value,
	  computes the factorial of that value, and returns the result. </p>
<h3 class="sect3">1.3.2.6. Displaying output</h3>
<p>
<a name="INDEX-137"></a><a name="INDEX-138"></a>

	  Line 8 simply calls a method named
	  <tt class="literal">System.out.println()</tt>. This commonly used
	  method is part of the core Java API; it causes the Java 
	  interpreter to print out a
	  value. In this case, the value that it prints is the value
	  referred to by the variable named <tt class="literal">result</tt>. This is the result of our factorial computation. If the
	  <tt class="literal">input</tt> variable holds the value
	  <tt class="literal">4</tt>, the <tt class="literal">result</tt>
	  variable holds the value <tt class="literal">24</tt>, and this line
	  prints out that value. </p>
<p>	  The <tt class="literal">System.out.println()</tt> method
	  does not have a return value, so there is no variable declaration
	  or <tt class="literal">=</tt> assignment operator in this statement,
	  since there is no value to assign to anything. Another way to
	  say this is that, like the <tt class="literal">main()</tt> method of
	  line 5, <tt class="literal">System.out.println()</tt> is declared
	  <tt class="literal">void</tt>. </p>
<h3 class="sect3">1.3.2.7. The end of a method</h3>
<p>
<a name="INDEX-139"></a><a name="INDEX-140"></a><a name="INDEX-141"></a><a name="INDEX-142"></a>

	  Line 9 contains only a single character,
	  <tt class="literal">}</tt>. This marks the end of the
	  method. When the Java interpreter
	  gets here, it is done executing the <tt class="literal">main()</tt>
	  method, so it stops running. The end of the <tt class="literal">main()</tt> method is also the
	  end of the <em class="emphasis">variable scope</em> for the
	  <tt class="literal">input</tt> and <tt class="literal">result</tt>
	  variables declared within <tt class="literal">main()</tt> and for
	  the <tt class="literal">args</tt> parameter of
	  <tt class="literal">main()</tt>. These variable and parameter
	  names have meaning only within the <tt class="literal">main()</tt>
	  method and cannot be used elsewhere in the program, unless
	  other parts of the program declare different variables or
	  parameters that happen to have the same name. </p>
<h3 class="sect3">1.3.2.8. Blank lines</h3>
<p>
<a name="INDEX-143"></a><a name="INDEX-144"></a><a name="INDEX-145"></a><a name="INDEX-146"></a>

	  Line 10 is a blank line. You can insert blank lines, spaces,
	  and tabs anywhere in a
	  program, and you should use them liberally to make the program
	  readable. A blank line appears here to separate the
	  <tt class="literal">main()</tt> method from the
	  <tt class="literal">factorial()</tt> method that begins on line
	  11. You'll notice that the program also uses spaces and tabs
	  to indent the various lines of code. This kind of indentation
	  is optional; it emphasizes the structure of the
	  program and greatly enhances the readability of the code. </p>
<h3 class="sect3">1.3.2.9. Another method</h3>
<p>	  Line 11 begins the definition of the
	  <tt class="literal">factorial()</tt> method that was used by the
	  <tt class="literal">main()</tt> method. Compare this line to line
	  5 to note its similarities and differences. The
	  <tt class="literal">factorial()</tt> method has the same
	  <tt class="literal">public</tt> and <tt class="literal">static</tt>
	  modifiers. It takes a single integer parameter, which we
	  call <tt class="literal">x</tt>. Unlike the
	  <tt class="literal">main()</tt> method, which had no return 
	  value (<tt class="literal">void</tt>),
	  <tt class="literal">factorial()</tt> returns a value of type
	  <tt class="literal">double</tt>. The open curly brace marks the
	  beginning of the method body, which continues past the nested
	  braces on lines 15 and 18 to line 20, where the matching
	  close curly brace is found. The body of
	  the <tt class="literal">factorial()</tt> method, like the body of
	  the <tt class="literal">main()</tt> method, is composed of
	  statements, which are found on lines 12 through 19. </p>
<h3 class="sect3">1.3.2.10. Checking for valid input</h3>
<p>
<a name="INDEX-147"></a>


	  In the <tt class="literal">main()</tt> method, we saw variable
	  declarations, assignments, and method invocations. The
	  statement on line 12 is different. It is
	  an <tt class="literal">if</tt> statement, which executes
	  another statement conditionally. We saw earlier that the Java
	  interpreter executes the three statements of the
	  <tt class="literal">main()</tt> method one after another. It always
	  executes them in exactly that way, in exactly that order. An
	  <tt class="literal">if</tt> statement is a flow-control
	  statement; it can affect the way the interpreter runs a
	  program. </p>
<p>	  The <tt class="literal">if</tt> keyword is followed by a
	  parenthesized expression and a
	  statement. The Java interpreter first evaluates the expression. If
	  it is <tt class="literal">true</tt>, the interpreter executes
	  the statement. If the expression is <tt class="literal">false</tt>, 
	  however, the 
	  interpreter skips the statement and goes to the next one. The condition for the 
	  <tt class="literal">if</tt> statement on line 12 is <tt class="literal">x &lt;
	  0</tt>. It checks whether the value passed to the
	  <tt class="literal">factorial()</tt> method is less 
	  than zero. If it is, this
	  expression is <tt class="literal">true</tt>, and the statement on 
	  line 13 is executed. Line 12 does not end with a semicolon
	  because the statement on line 13 is part of the
	  <tt class="literal">if</tt> statement. Semicolons are
	  required only at the end of a statement. </p>
<p>	  Line 13 is a <tt class="literal">return</tt> statement. It says
	  that the return value of the <tt class="literal">factorial()</tt>
	  method is 0.0. <tt class="literal">return</tt> is also a
	  flow-control statement. When the Java interpreter sees a
	  <tt class="literal">return</tt>, it stops executing the current
	  method and returns the specified value immediately. A
	  <tt class="literal">return</tt> statement can stand alone, but in
	  this case, the <tt class="literal">return</tt> statement is part of
	  the <tt class="literal">if</tt> statement on line 12. The
	  indentation of line 13 helps emphasize this fact. (Java
	  ignores this indentation, but it is very helpful for humans who
	  read Java code!)  Line 13 is executed only if the
	  expression on line 12 is <tt class="literal">true</tt>. </p>
<p>	  Before we move on, we should pull back a bit and talk 
	  about why lines 12 and 13 are necessary in the first
	  place. It is an error to try to compute a factorial for 
	  a negative number, so these lines make sure that the
	  input value <tt class="literal">x</tt> is valid. If it is
	  not valid, they cause <tt class="literal">factorial()</tt> to return
	  a consistent invalid result, 0.0. </p>
<h3 class="sect3">1.3.2.11. An important variable</h3>
<p>	  Line 14 is another variable declaration; it declares a
	  variable named <tt class="literal">fact</tt> of type
	  <tt class="literal">double</tt> and assigns it an initial value of 1.0. This variable holds the value of the
	  factorial as we compute it in the statements that follow. In
	  Java, variables can be declared anywhere; they are not
	  restricted to the beginning of a method or block of code. </p>
<h3 class="sect3">1.3.2.12. Looping and computing the factorial</h3>
<p>
<a name="INDEX-148"></a><a name="INDEX-149"></a><a name="INDEX-150"></a><a name="INDEX-151"></a>

	  Line 15 introduces another type of statement: the
	  <tt class="literal">while</tt> loop. Like an <tt class="literal">if</tt>
	  statement, a <tt class="literal">while</tt> statement consists of a
	  parenthesized expression and a statement. When the Java
	  interpreter sees a <tt class="literal">while</tt> statement, it
	  evaluates the associated expression. If that expression is
	  <tt class="literal">true</tt>, the interpreter 
	  executes the statement. The interpreter repeats this
	  process, evaluating the expression and executing the statement if the
	  expression is <tt class="literal">true</tt>, until the expression
	  evaluates to <tt class="literal">false</tt>. The expression on line 15 is <tt class="literal">x &gt;
	  1</tt>, so the <tt class="literal">while</tt> statement 
	  loops <em class="emphasis">while</em> the parameter
	  <tt class="literal">x</tt> holds a value that is greater than 1. Another way to say this is that the loop continues
	  <em class="emphasis">until</em><tt class="literal">x</tt> holds a value
	  less than or equal to 1. We can assume from this expression
	  that if the loop is ever going to terminate, the value of
	  <tt class="literal">x</tt> must somehow be modified by the statement
	  that the loop executes. </p>
<p>
<a name="INDEX-152"></a>

	  The major difference between the <tt class="literal">if</tt>
	  statement on lines 12-13 and the <tt class="literal">while</tt> loop on
	  lines 15-18 is that the statement associated with the
	  <tt class="literal">while</tt> loop is a <em class="emphasis">compound
	  statement</em>. A compound statement is zero or more
	  statements grouped between curly braces. The
	  <tt class="literal">while</tt> keyword on line 15 is followed by an
	  expression in parentheses and then by an
	  open curly brace. This means that the body of the loop
	  consists of all statements between that opening brace and the
	  closing brace on line 18. Earlier in the chapter, I said that
	  all Java statements end with semicolons. This rule does not
	  apply to compound statements, however, 
	  as you can see by the lack of a
	  semicolon at the end of line 18. The statements inside the
	  compound statement (lines 16 and 17) do end with semicolons,
	  of course. </p>
<p>
<a name="INDEX-153"></a>

	  The body of the <tt class="literal">while</tt> 
	  loop consists of the statements on line
	  16 and 17. Line 16 multiplies the value of
	  <tt class="literal">fact</tt> by the value of <tt class="literal">x</tt>
	  and stores the result back into <tt class="literal">fact</tt>. Line
	  17 is similar. It subtracts 1 from the value of
	  <tt class="literal">x</tt> and stores the result back into
	  <tt class="literal">x</tt>. The <tt class="literal">*</tt> character on
	  line 16 is important: it is the multiplication
	  <em class="emphasis">operator</em>. And, as you can probably guess,
	  the <tt class="literal">-</tt> on line 17 is the subtraction
	  operator. An operator is a key part of Java syntax: it
	  performs a computation on one or two
	  <em class="emphasis">operands</em> to produce a new value. Operands and operators combine to form
	  <em class="emphasis">expressions</em>, such as <tt class="literal">fact *
	  x</tt> or <tt class="literal">x - 1</tt>. We've seen other
	  operators in the program. Line 15, for example, uses the
	  greater-than operator (<tt class="literal">&gt;</tt>) in the
	  expression <tt class="literal">x &gt; 1</tt>, which compares the
	  value of the variable <tt class="literal">x</tt> to 1. The value of
	  this expression is a boolean truth value--either
	  <tt class="literal">true</tt> or <tt class="literal">false</tt>, depending
	  on the result of the comparison. 
<a name="INDEX-154"></a>
</p>
<p>
<a name="INDEX-155"></a>

	  To understand this <tt class="literal">while</tt> loop, it is
	  helpful to think like the Java interpreter. Suppose we are
	  trying to compute the factorial of 4. Before the loop starts,
	  <tt class="literal">fact</tt> is 1.0, and <tt class="literal">x</tt> is 4. After the body of the loop has been executed once--after the
	  first <em class="emphasis">iteration</em>--<tt class="literal">fact</tt>
	  is 4.0, and <tt class="literal">x</tt> is 3. After the second
	  iteration, <tt class="literal">fact</tt> is 12.0, and
	  <tt class="literal">x</tt> is 2. After the third iteration,
	  <tt class="literal">fact</tt> is 24.0, and <tt class="literal">x</tt> is 1. When the interpreter tests the loop condition after the third
	  iteration, it finds that <tt class="literal">x &gt; 1</tt> is no
	  longer true, so it stops running the loop, and the program
	  resumes at line 19. </p>
<h3 class="sect3">1.3.2.13. Returning the result</h3>
<p>
<a name="INDEX-156"></a>

	  Line 19 is another <tt class="literal">return</tt> statement, like
	  the one we saw on line 13. This one does not return a
	  constant value like 0.0, but instead returns the value of the
	  <tt class="literal">fact</tt> variable. If the value of
	  <tt class="literal">x</tt> passed into the
	  <tt class="literal">factorial()</tt> function is 4, then, as we saw
	  earlier, the value of <tt class="literal">fact</tt> is 24.0, so
	  this is the value returned. Recall that the
	  <tt class="literal">factorial()</tt> method was invoked on line 7 of
	  the program. When this <tt class="literal">return</tt> statement is
	  executed, control returns to line 7, where the return value is
	  assigned to the variable named <tt class="literal">result</tt>. </p>
<h3 class="sect2">1.3.3. Exceptions</h3>
<p>
<a name="INDEX-157"></a><a name="INDEX-158"></a>

	If you've made it all the way through the line-by-line analysis
	of <a href="#javanut3-ch-1-ex-1">Example 1-1</a>, you are well on your
	way to understanding the basics of the Java 
	language.<a href="#FOOTNOTE-9">[9]</a>  It is
	a simple but nontrivial program that illustrates many of the
	features of Java. There is one more important feature of Java
	programming I want to introduce, but it is one that does not appear in
	the program listing itself. Recall that the program computes
	the factorial of the number you specify on the command line. What happens if you run the program without specifying a number?
</p>
<blockquote class="footnote">
<a name="FOOTNOTE-9"></a>
<p>[9]<a name="INDEX-159"></a><a name="INDEX-160"></a><a name="INDEX-161"></a>

If you didn't understood all the
	details of this factorial program, don't worry. We'll cover the details of 
	the Java language a lot more thoroughly in <a href="ch02_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch02_01.htm">Chapter 2, "Java Syntax

from the Ground Up"</a> and <a href="ch03_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch03_01.htm">Chapter 3, "Object-Oriented Programming in Java"</a>. However, if you feel like you didn't understand any of the 
	line-by-line analysis, you may also find that the upcoming chapters
	are over your head. In that case, you should probably 
	go elsewhere to
	learn the basics of the Java language and return to this book to
	solidify your understanding, and, of course, to use as a
	reference. One resource you may find useful in learning the
	language is Sun's online Java tutorial, available at
	<a href="../../../../../../../java.sun.com/docs/books/tutorial/">http://java.sun.com/docs/books/tutorial/</a>. </p>
</blockquote>
<blockquote>
<pre class="programlisting">C:\&gt; java Factorial
java.lang.ArrayIndexOutOfBoundsException: 0
        at Factorial.main(Factorial.java:6)
C:\&gt; </pre>
</blockquote>
<p>	And what happens if you specify a value that
	is not a number?
</p>
<blockquote>
<pre class="programlisting">C:\&gt; java Factorial ten
java.lang.NumberFormatException: ten
        at java.lang.Integer.parseInt(Integer.java)
        at java.lang.Integer.parseInt(Integer.java)
        at Factorial.main(Factorial.java:6)
C:\&gt;</pre>
</blockquote>
<p>
<a name="INDEX-162"></a>

	In both cases, an error occurs or, in Java terminology, an
	<em class="emphasis">exception</em> is thrown. When an exception
	is thrown, the Java interpreter prints out a
	message that explains what type of exception it was and where it
	occurred (both exceptions above occurred on line 6&#8202;). In the
	first case, the exception is thrown because there are no
	strings in the <tt class="literal">args</tt> list, meaning we
	asked for a nonexistent string with
	<tt class="literal">args[0]</tt>. In the second case, the exception
	is thrown because <tt class="literal">Integer.parseInt()</tt> cannot
	convert the string "ten" to a number. We'll see more about
	exceptions in <a href="ch02_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch02_01.htm">Chapter 2, "Java Syntax

from the Ground Up"</a> and learn how
	to handle them gracefully as they occur.
<a name="INDEX-163"></a>
</p>

<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch01_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch01_02.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch02_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch02_01.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">1.2. Key Benefits of Java</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">2. Java Syntax

from the Ground Up</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
