<html>
<head>
<title>The java.security.interfaces Package (Java in a Nutshell)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="David Flanagan">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-487-8E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="The java.security.interfaces Package">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm" alt="Java Enterprise in a Nutshell"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch19_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch19_01.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="part2.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/part2.htm">Part 2: API Quick Reference</a></td><td align="right" valign="top" width="172"><a href="ch21_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch21_01.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY --><h1 class="chapter">Chapter 20.  The java.security.interfaces Package</h1>

<p>
<a name="INDEX-2605"></a><a name="INDEX-2606"></a><a name="INDEX-2607"></a><a name="INDEX-2608"></a><a name="INDEX-2609"></a><a name="INDEX-2610"></a><a name="INDEX-2611"></a>
  As its name implies, the <tt class="literal">java.security.interfaces</tt> 
  package contains only interfaces. These interfaces define methods that provide algorithm-specific
  information (such as key values and initialization parameter values)
  about DSA and RSA public and private keys. If you are using the RSA
  algorithm, for example, and working with a
  <tt class="literal">java.security.PublicKey</tt> object, you can cast
  that <tt class="literal">PublicKey</tt> to an
  <tt class="literal">RSAPublicKey</tt> object and use the RSA-specific
  methods defined by <tt class="literal">RSAPublicKey</tt> to query
  the key value directly. <a href="#javanut3-java.security.interfaces">Figure 20-1</a> shows the 
  class hierarchy of
  this package.</p>

<a name="javanut3-java.security.interfaces"></a>
<div class="figure">
<img alt="figure" src="figs/JN3_2001.gif" webstripperlinkwas="figs/JN3_2001.gif"></div>
<h4 class="objtitle">Figure 20-1. The java.security.interfaces package</h4>

<p>  The <tt class="literal">java.security.interfaces</tt> package was introduced
  in Java 1.1. In Java 1.2, the <tt class="literal">java.security.spec</tt>
  package is the preferred way for obtaining algorithm-specific
  information about keys and algorithm parameters. This package
  remains useful in Java 1.2, however, for identifying the type of a
  given <tt class="literal">PublicKey</tt> or <tt class="literal">PrivateKey</tt>
  object. </p>
<p>  The interfaces in this package are typically of interest only to
  programmers who are implementing a security provider or
  who want to implement cryptographic algorithms themselves. Use of this


  package typically requires some familiarity with the mathematics
  underlying DSA and RSA public-key cryptography. </p>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>DSAKey</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.security.interfaces</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1(opt)</i></b></font></td>
</tr>
</table>
<p>  This interface defines a method that must be implemented by both public
  and private DSA keys. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public interface <b class="classname">DSAKey</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract DSAParams <b class="function">getParams</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Implementations: </span><tt class="literal">DSAPrivateKey, DSAPublicKey</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>DSAKeyPairGenerator</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.security.interfaces</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1(opt)</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2612"></a><a name="INDEX-2613"></a><a name="INDEX-2614"></a><a name="INDEX-2615"></a>
  This interface defines algorithm-specific
  <tt class="literal">KeyPairGenerator</tt> initialization methods for DSA
  keys. To generate a pair of DSA keys, use the static
  <tt class="literal">getInstance()</tt> factory method of
  <tt class="literal">java.security.KeyPairGenerator</tt> and specify "DSA" as
  the desired algorithm name. If you wish to perform DSA-specific
  initialization, cast the returned <tt class="literal">KeyPairGenerator</tt>
  to a <tt class="literal">DSAKeyPairGenerator</tt> and call one of the
  <tt class="literal">initialize()</tt> methods defined by this interface. Finally, generate the keys by calling
  <tt class="literal">generateKeyPair()</tt> on the
  <tt class="literal">KeyPairGenerator</tt>. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public interface <b class="classname">DSAKeyPairGenerator</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">initialize</b> (DSAParams <i class="parameter">params</i>, java.security.SecureRandom <i class="parameter">random</i>) throws java.security.InvalidParameterException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">initialize</b> (int <i class="parameter">modlen</i>, boolean <i class="parameter">genParams</i>, java.security.SecureRandom <i class="parameter">random</i>) throws java.security.InvalidParameterException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>DSAParams</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.security.interfaces</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1(opt)</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2616"></a>
  This interface defines methods for obtaining the DSA parameters
  <tt class="literal">g</tt>, <tt class="literal">p</tt>, and <tt class="literal">q</tt>. These methods are useful only if you wish to perform cryptographic
  computation yourself. Using these methods requires 
  a detailed understanding of the mathematics
  underlying DSA public-key cryptography. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public interface <b class="classname">DSAParams</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract java.math.BigInteger <b class="function">getG</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract java.math.BigInteger <b class="function">getP</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract java.math.BigInteger <b class="function">getQ</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Implementations: </span><tt class="literal">java.security.spec.DSAParameterSpec</tt>
</p>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">DSAKeyPairGenerator.initialize()</tt>
</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">DSAKey.getParams()</tt>
</p>
</div>

<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>DSAPrivateKey</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.security.interfaces</b></font></td><td align="right"><font size="+1"><b><i>serializable PJ1.1(opt)</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2617"></a><a name="INDEX-2618"></a><a name="INDEX-2619"></a>
  This interface represents a DSA private key and provides direct
  access to the underlying key value. If you are working with a private
  key you know is a DSA key, you can cast the
  <tt class="literal">PrivateKey</tt> to a <tt class="literal">DSAPrivateKey</tt>. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public interface <b class="classname">DSAPrivateKey</b> extends DSAKey, java.security.PrivateKey {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constants</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public static final long <b class="function">serialVersionUID</b> ;</td><td align="right"><i> =7776497482533790279</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract java.math.BigInteger <b class="function">getX</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">(DSAPrivateKey(DSAKey,java.security.PrivateKey(java.security.Key(Serializable))))</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>DSAPublicKey</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.security.interfaces</b></font></td><td align="right"><font size="+1"><b><i>serializable PJ1.1(opt)</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2620"></a><a name="INDEX-2621"></a>
  This interface represents a DSA public key and provides direct
  access to the underlying key value. If you are working with a public
  key you know is a DSA key, you can cast the
  <tt class="literal">PublicKey</tt> to a <tt class="literal">DSAPublicKey</tt>. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public interface <b class="classname">DSAPublicKey</b> extends DSAKey, java.security.PublicKey {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constants</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public static final long <b class="function">serialVersionUID</b> ;</td><td align="right"><i> =1234526332779022332</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract java.math.BigInteger <b class="function">getY</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">(DSAPublicKey(DSAKey,java.security.PublicKey(java.security.Key(Serializable))))</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>RSAKey</b></font></td><td align="right"><font size="+1"><b>Java 1.3 Beta</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.security.interfaces</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2622"></a><a name="INDEX-2623"></a>
  This is a superinterface for <tt class="literal">RSAPublicKey</tt> and
  <tt class="literal">RSAPrivateKey</tt>; it defines a method shared by both
  classes. Prior to Java 1.3, the <tt class="literal">getModulus()</tt>
  method was defined independently by <tt class="literal">RSAPublicKey</tt>
  and <tt class="literal">RSAPrivateKey</tt>. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public interface <b class="classname">RSAKey</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract java.math.BigInteger <b class="function">getModulus</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Implementations: </span><tt class="literal">RSAPrivateKey, RSAPublicKey</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>RSAPrivateCrtKey</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.security.interfaces</b></font></td><td align="right"><font size="+1"><b><i>serializable</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2624"></a><a name="INDEX-2625"></a><a name="INDEX-2626"></a>
  This interface extends <tt class="literal">RSAPrivateKey</tt> and provides a
  decomposition (based on the Chinese remainder theorem) of the private-key value into the various pieces that comprise it. This interface is
  useful only if you plan to implement your own cryptographic
  algorithms. To use this interface, you must have a detailed
  understanding of the mathematics underlying RSA public-key
  cryptography. Given a <tt class="literal">java.security.PrivateKey</tt>
  object, you can use the <tt class="literal">instanceof</tt> operator to
  determine whether you can safely cast it to an
  <tt class="literal">RSAPrivateCrtKey</tt>. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public interface <b class="classname">RSAPrivateCrtKey</b> extends RSAPrivateKey {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Property Accessor Methods (by property name)</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract java.math.BigInteger <b class="function">getCrtCoefficient</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract java.math.BigInteger <b class="function">getPrimeExponentP</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract java.math.BigInteger <b class="function">getPrimeExponentQ</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract java.math.BigInteger <b class="function">getPrimeP</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract java.math.BigInteger <b class="function">getPrimeQ</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract java.math.BigInteger <b class="function">getPublicExponent</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">(RSAPrivateCrtKey(RSAPrivateKey(java.security.PrivateKey(java.security.Key(Serializable)),RSAKey)))</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>RSAPrivateKey</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.security.interfaces</b></font></td><td align="right"><font size="+1"><b><i>serializable</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2627"></a>
  This interface represents an RSA private key and provides direct
  access to the underlying key values. If you are working with a private
  key you know is an RSA key, you can cast the
  <tt class="literal">PrivateKey</tt> to an <tt class="literal">RSAPrivateKey</tt>. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public interface <b class="classname">RSAPrivateKey</b> extends java.security.PrivateKey, RSAKey {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract java.math.BigInteger <b class="function">getPrivateExponent</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">(RSAPrivateKey(java.security.PrivateKey(java.security.Key(Serializable)),RSAKey))</tt>
</p>
<p>
<span class="refsect1">Implementations: </span><tt class="literal">RSAPrivateCrtKey</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>RSAPublicKey</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.security.interfaces</b></font></td><td align="right"><font size="+1"><b><i>serializable</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2628"></a><a name="INDEX-2629"></a><a name="INDEX-2630"></a>
  This interface represents an RSA public key and provides direct
  access to the underlying key values. If you are working with a public
  key you know is an RSA key, you can cast the
  <tt class="literal">PublicKey</tt> to an <tt class="literal">RSAPublicKey</tt>. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public interface <b class="classname">RSAPublicKey</b> extends java.security.PublicKey, RSAKey {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract java.math.BigInteger <b class="function">getPublicExponent</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">(RSAPublicKey(java.security.PublicKey(java.security.Key(Serializable)),RSAKey))</tt>
</p>
</div>
<a name="INDEX-2631"></a>
<a name="INDEX-2632"></a>


<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch19_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch19_01.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch21_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch21_01.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">19.1. The java.security.cert Package</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">21. The java.security.spec Package</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
