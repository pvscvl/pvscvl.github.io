<html>
<head>
<title>The java.lang.ref Package (Java in a Nutshell)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="David Flanagan">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-487-8E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="The java.lang.ref Package">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm" alt="Java Enterprise in a Nutshell"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch12_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch12_01.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="part2.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/part2.htm">Part 2: API Quick Reference</a></td><td align="right" valign="top" width="172"><a href="ch14_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch14_01.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY --><h1 class="chapter">Chapter 13.  The java.lang.ref Package</h1>

<p>
<a name="INDEX-2062"></a><a name="INDEX-2063"></a><a name="INDEX-2064"></a><a name="INDEX-2065"></a><a name="INDEX-2066"></a><a name="INDEX-2067"></a><a name="INDEX-2068"></a><a name="INDEX-2069"></a>
  The <tt class="literal">java.lang.ref</tt> 
  package defines classes that allow Java programs to interact
  with the Java garbage collector. A <tt class="literal">Reference</tt>
  represents an indirect reference to an arbitrary object, known as the
  <em class="emphasis">referent</em>. <tt class="literal">SoftReference</tt>,
  <tt class="literal">WeakReference</tt>, and
  <tt class="literal">PhantomReference</tt> are three concrete subclasses of
  <tt class="literal">Reference</tt> that interact with the garbage collector
  in different ways, as explained in the individual class
  descriptions that follow. <tt class="literal">ReferenceQueue</tt> represents a linked list of
  <tt class="literal">Reference</tt> objects. Any
  <tt class="literal">Reference</tt> object may have a
  <tt class="literal">ReferenceQueue</tt> associated with it. A
  <tt class="literal">Reference</tt> object is <em class="emphasis">enqueued</em>
  on its <tt class="literal">ReferenceQueue</tt> at some point after the
  garbage collector determines that the referent object has become
  appropriately unreachable. (The exact level of unreachability depends
  on the type of <tt class="literal">Reference</tt> being used.)  An application
  can monitor a <tt class="literal">ReferenceQueue</tt> to determine when
  referent objects enter a new reachability status. <a href="#javanut3-java.lang.ref">Figure 13-1</a> shows the hierarchy of this
  package, which is new as of Java 1.2.</p>

<a name="javanut3-java.lang.ref"></a>
<div class="figure">
<img alt="figure" src="figs/JN3_1301.gif" webstripperlinkwas="figs/JN3_1301.gif"></div>
<h4 class="objtitle">Figure 13-1. The java.lang.ref package</h4>

<p>  Using the mechanisms defined in this package, you can implement a
  cache that grows and shrinks in size according to the amount of
  available system memory. Or, you can implement a hashtable that
  associates auxiliary information with arbitrary objects, but does not
  prevent those objects from being garbage-collected if they are
  otherwise unused. The mechanisms provided by this package are
  low-level ones, however, and typical applications do not use
<tt class="literal">java.lang.ref</tt> directly. Instead, they rely on
  higher-level utilities built on top of the package. See
  <tt class="literal">java.util.WeakHashMap</tt> for one example. </p>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>PhantomReference</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.lang.ref</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2070"></a><a name="INDEX-2071"></a>
  This class represents a reference to an object that does not
  prevent the referent object from being finalized by the
  garbage collector. When (or at some point after) the garbage collector
  determines that there 
  are no more hard (direct) references to the referent object, that
  there are no <tt class="literal">SoftReference</tt> or
  <tt class="literal">WeakReference</tt> objects that refer to the referent,
  and that the referent has been finalized, it enqueues the
  <tt class="literal">PhantomReference</tt> object on the
  <tt class="literal">ReferenceQueue</tt> specified when the
  <tt class="literal">PhantomReference</tt> was created. This serves as
  notification that the object has been finalized and provides one last
  opportunity for any required cleanup code to be run. </p>
<p>
<a name="INDEX-2072"></a>
  To prevent a <tt class="literal">PhantomReference</tt> object from
  resurrecting its referent object, its <tt class="literal">get()</tt>
  method always returns <tt class="literal">null</tt>, both before and after
  the <tt class="literal">PhantomReference</tt> is enqueued. Nevertheless, a
  <tt class="literal">PhantomReference</tt> is not automatically cleared when
  it is enqueued, so when you remove a
  <tt class="literal">PhantomReference</tt> from a
  <tt class="literal">ReferenceQueue</tt>, you must call its
  <tt class="literal">clear()</tt> method or allow the
  <tt class="literal">PhantomReference</tt> object itself to be garbage-collected. </p>
<p>  This class provides a more flexible mechanism for object cleanup than
  the <tt class="literal">finalize()</tt> method does. Note that in order to
  take advantage of it, it is necessary to subclass
  <tt class="literal">PhantomReference</tt> and define a method to perform the
  desired cleanup. Furthermore, since the <tt class="literal">get()</tt>
  method of a <tt class="literal">PhantomReference</tt> always returns
  <tt class="literal">null</tt>, such a subclass must also store whatever data
  is required for the cleanup operation. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">PhantomReference</b> extends java.lang.ref.Reference {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">PhantomReference</b> (Object <i class="parameter">referent</i>, ReferenceQueue <i class="parameter">q</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Reference</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Object <b class="function">get</b> ();</td><td align="right"><i> constant</i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->java.lang.ref.Reference-->PhantomReference</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>Reference</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.lang.ref</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2073"></a><a name="INDEX-2074"></a><a name="INDEX-2075"></a>
  This abstract class represents some type of indirect reference to a referent. <tt class="literal">get()</tt> returns the referent if the reference has
  not been explicitly cleared by the <tt class="literal">clear()</tt> method
  or implicitly cleared by the garbage collector. There are three
  concrete subclasses of <tt class="literal">Reference</tt>. The garbage
  collector handles these subclasses differently and clears their
  references under different circumstances. </p>
<p>
<a name="INDEX-2076"></a><a name="INDEX-2077"></a>
  Each of the subclasses of <tt class="literal">Reference</tt> defines a
  constructor that allows a <tt class="literal">ReferenceQueue</tt> to be
  associated with the <tt class="literal">Reference</tt> object. The
  garbage collector places <tt class="literal">Reference</tt> objects onto
  their associated <tt class="literal">ReferenceQueue</tt> objects to provide
  notification about the state of the referent object. <tt class="literal">isEnqueued()</tt> tests whether a
  <tt class="literal">Reference</tt> has been placed on the associated queue,
  and <tt class="literal">enqueue()</tt> explicitly places it on the queue. <tt class="literal">enqueue()</tt> returns <tt class="literal">false</tt> if the
  <tt class="literal">Reference</tt> object does not have an associated
  <tt class="literal">ReferenceQueue</tt>, or if it has already been enqueued. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public abstract class <b class="classname">Reference</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">No Constructor</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">clear</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">enqueue</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Object <b class="function">get</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">isEnqueued</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Subclasses: </span><tt class="literal">PhantomReference, SoftReference, WeakReference</tt>
</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">ReferenceQueue.{poll(), remove()}</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>ReferenceQueue</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.lang.ref</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2078"></a><a name="INDEX-2079"></a><a name="INDEX-2080"></a>
 
  This class represents a queue (or linked list) of
  <tt class="literal">Reference</tt> objects that have been enqueued because
  the garbage collector has determined that the referent objects to which
  they refer are no longer adequately reachable. It serves as a
  notification system for object-reachability changes. Use
  <tt class="literal">poll()</tt> to return the first
  <tt class="literal">Reference</tt> object on the queue; the method returns
  <tt class="literal">null</tt> if the queue is empty. Use
  <tt class="literal">remove()</tt> to return the first element on the queue,
  or, if the queue is empty, to wait for a <tt class="literal">Reference</tt>
  object to be enqueued. You can create as many
  <tt class="literal">ReferenceQueue</tt> objects as needed. Specify a
  <tt class="literal">ReferenceQueue</tt> for a <tt class="literal">Reference</tt>
  object by passing it to the <tt class="literal">SoftReference()</tt>,
  <tt class="literal">WeakReference()</tt>, or
  <tt class="literal">PhantomReference()</tt> constructor. </p>
<p>
<a name="INDEX-2081"></a>
  A <tt class="literal">ReferenceQueue</tt> is required to use
  <tt class="literal">PhantomReference</tt> objects. It is optional with
  <tt class="literal">SoftReference</tt> and <tt class="literal">WeakReference</tt>
  objects; for these classes, the <tt class="literal">get()</tt> method
  returns <tt class="literal">null</tt> if the referent object is no longer
  adequately reachable. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">ReferenceQueue</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">ReferenceQueue</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public java.lang.ref.Reference <b class="function">poll</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public java.lang.ref.Reference <b class="function">remove</b> () throws InterruptedException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public java.lang.ref.Reference <b class="function">remove</b> (long <i class="parameter">timeout</i>) throws IllegalArgumentExceptionInterruptedException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">PhantomReference.PhantomReference(), SoftReference.SoftReference(), WeakReference.WeakReference()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>SoftReference</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.lang.ref</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2082"></a>
  This class represents a soft reference to an object. A
  <tt class="literal">SoftReference</tt> is not cleared while there are
  any remaining hard (direct) references to the referent. Once the
  referent is no longer in use (i.e., there are no remaining hard
  references to it), the garbage collector may clear the
  <tt class="literal">SoftReference</tt> to the referent at any time. However, the garbage collector does not clear a
  <tt class="literal">SoftReference</tt> until it determines that system
  memory is running low. In particular, the Java VM never throws an
  <tt class="literal">OutOfMemoryError</tt> without first clearing all
  soft references and reclaiming the memory of the referents. The VM
  may (but is not required to) clear soft references according to a
  least-recently-used ordering. </p>
<p>  If a <tt class="literal">SoftReference</tt> has an associated
  <tt class="literal">ReferenceQueue</tt>, the garbage collector
  enqueues the <tt class="literal">SoftReference</tt> at
  some time after it clears the reference. </p>
<p>
<tt class="literal">SoftReference</tt> is particularly useful for
  implementing object-caching systems that do not have a fixed size,
  but grow and shrink as available memory allows. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">SoftReference</b> extends java.lang.ref.Reference {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">SoftReference</b> (Object <i class="parameter">referent</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">SoftReference</b> (Object <i class="parameter">referent</i>, ReferenceQueue <i class="parameter">q</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Reference</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Object <b class="function">get</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->java.lang.ref.Reference-->SoftReference</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>WeakReference</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.lang.ref</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2083"></a>
  This class refers to an object in a way that does not prevent that
  referent object from being finalized and reclaimed by the garbage
  collector. When 
  the garbage collector determines that there are no more hard
  (direct) references to the object, and that there are no
  <tt class="literal">SoftReference</tt> objects that refer to the object, it
  clears the <tt class="literal">WeakReference</tt> and marks the referent
  object for finalization. At some point after this, it 
  also enqueues the <tt class="literal">WeakReference</tt> on its associated
  <tt class="literal">ReferenceQueue</tt>, if there is one, in order to
  provide notification that the referent has been reclaimed. </p>
<p>
<tt class="literal">WeakReference</tt> is used by
  <tt class="literal">java.util.WeakHashMap</tt> to implement a hashtable
  that does not prevent the hashtable key object from being garbage-collected. <tt class="literal">WeakHashMap</tt> is useful when you want to
  associate auxiliary information with an object but do not want to
  prevent the object from being reclaimed. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">WeakReference</b> extends java.lang.ref.Reference {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">WeakReference</b> (Object <i class="parameter">referent</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">WeakReference</b> (Object <i class="parameter">referent</i>, ReferenceQueue <i class="parameter">q</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->java.lang.ref.Reference-->WeakReference</tt>
</p>
</div>
<a name="INDEX-2084"></a>


<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch12_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch12_01.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch14_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch14_01.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">12.1. The java.lang Package</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">14. The java.lang.reflect Package</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
