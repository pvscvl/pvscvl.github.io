<html>
<head>
<title>The java.util.zip Package (Java in a Nutshell)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="David Flanagan">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-487-8E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="The java.util.zip Package">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm" alt="Java Enterprise in a Nutshell"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch24_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch24_01.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="part2.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/part2.htm">Part 2: API Quick Reference</a></td><td align="right" valign="top" width="172"><a href="ch26_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch26_01.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY --><h1 class="chapter">Chapter 25.  The java.util.zip Package</h1>

<p>
<a name="INDEX-3159"></a><a name="INDEX-3160"></a>

The <tt class="literal">java.util.zip</tt> package contains classes for data
compression and decompression. It is new as of Java
1.1. <a href="#javanut3-java.util.zip-1">Figure 25-1</a>
shows the class hierarchy of the package. <a name="INDEX-3161"></a><a name="INDEX-3162"></a>
The <tt class="literal">Deflater</tt> and <tt class="literal">Inflater</tt> classes perform
data compression and decompression. <a name="INDEX-3163"></a><a name="INDEX-3164"></a><a name="INDEX-3165"></a><a name="INDEX-3166"></a><tt class="literal">DeflaterOutputStream</tt> and <tt class="literal">InflaterInputStream</tt>
apply that functionality to byte streams; the subclasses
of these streams implement both the GZIP and ZIP compression
formats. The <tt class="literal">Adler32</tt> and <tt class="literal">CRC32</tt> classes
<a name="INDEX-3167"></a><a name="INDEX-3168"></a>
implement the <tt class="literal">Checksum</tt> interface and compute the
checksums required for data compression. </p>

<a name="javanut3-java.util.zip-1"></a>
<div class="figure">
<img alt="figure" src="figs/JN3_2501.gif" webstripperlinkwas="figs/JN3_2501.gif"></div>
<h4 class="objtitle">Figure 25-1. The java.util.zip package</h4>


<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>Adler32</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.util.zip</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1(opt)</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-3169"></a>
This class implements the <tt class="literal">Checksum</tt> interface and
computes a checksum on a stream of data using the Adler-32
algorithm. This algorithm is significantly faster than the
CRC-32 algorithm and is almost as reliable. The <tt class="literal">CheckedInputStream</tt> and
<tt class="literal">CheckedOutputStream</tt> classes provide a higher-level
interface to computing checksums on streams of data. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">Adler32</b> implements Checksum {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">Adler32</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">update</b> (byte[ ] <i class="parameter">b</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Methods Implementing Checksum</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public long <b class="function">getValue</b> ();</td><td align="right"><i> default:1</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">reset</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">update</b> (int <i class="parameter">b</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">update</b> (byte[ ] <i class="parameter">b</i>, int <i class="parameter">off</i>, int <i class="parameter">len</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Adler32(Checksum)</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>CheckedInputStream</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.util.zip</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-3170"></a><a name="INDEX-3171"></a><a name="INDEX-3172"></a>

This class is a subclass of
<tt class="literal">java.io.FilterInputStream</tt>; it allows a stream to be
read and a checksum computed on its contents at the same
time. This is useful when you want to 

check 


the integrity of a stream of data against a published checksum value. 
To create a <tt class="literal">CheckedInputStream</tt>, you must specify
both the stream it should read and a
<tt class="literal">Checksum</tt> object, such as <tt class="literal">CRC32</tt>, that
implements the particular checksum algorithm you desire.
<a name="INDEX-3173"></a><a name="INDEX-3174"></a><a name="INDEX-3175"></a><a name="INDEX-3176"></a>
The <tt class="literal">read()</tt> and <tt class="literal">skip()</tt> methods are the same
as those of other input streams. As bytes are read, they
are incorporated into the checksum that is being computed. The <tt class="literal">getChecksum()</tt> method does not return
the checksum value itself, but rather the <tt class="literal">Checksum</tt>
object. You must call the <tt class="literal">getValue()</tt> method of this
object to obtain the checksum value. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">CheckedInputStream</b> extends java.io.FilterInputStream {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">CheckedInputStream</b> (java.io.InputStream <i class="parameter">in</i>, Checksum <i class="parameter">cksum</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Checksum <b class="function">getChecksum</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding FilterInputStream</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">read</b> () throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">read</b> (byte[ ] <i class="parameter">buf</i>, int <i class="parameter">off</i>, int <i class="parameter">len</i>) throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public long <b class="function">skip</b> (long <i class="parameter">n</i>) throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->java.io.InputStream-->java.io.FilterInputStream-->CheckedInputStream</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>CheckedOutputStream</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.util.zip</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-3177"></a><a name="INDEX-3178"></a>
This class is a subclass of
<tt class="literal">java.io.FilterOutputStream</tt> that allows data to be
written to a stream and a checksum computed on that data at
the same time. To create a <tt class="literal">CheckedOutputStream</tt>, you must specify both the
output stream to write its data to and 
a <tt class="literal">Checksum</tt> object, such as an instance of
<tt class="literal">Adler32</tt>, that implements the particular checksum
<a name="INDEX-3179"></a><a name="INDEX-3180"></a><a name="INDEX-3181"></a>
algorithm you desire. The <tt class="literal">write()</tt> methods are
similar to those of other <tt class="literal">OutputStream</tt> classes. The
<tt class="literal">getChecksum()</tt> method returns the <tt class="literal">Checksum</tt>
object. You must call <tt class="literal">getValue()</tt> on this
object in order to obtain the actual checksum value. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">CheckedOutputStream</b> extends java.io.FilterOutputStream {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">CheckedOutputStream</b> (java.io.OutputStream <i class="parameter">out</i>, Checksum <i class="parameter">cksum</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Checksum <b class="function">getChecksum</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding FilterOutputStream</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">write</b> (int <i class="parameter">b</i>) throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">write</b> (byte[ ] <i class="parameter">b</i>, int <i class="parameter">off</i>, int <i class="parameter">len</i>) throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->java.io.OutputStream-->java.io.FilterOutputStream-->CheckedOutputStream</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>Checksum</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.util.zip</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-3182"></a><a name="INDEX-3183"></a>
This interface defines the methods required to compute a
checksum on a stream of data. The checksum is computed
based on the bytes of data supplied by the <tt class="literal">update()</tt>
methods; the current value of the checksum can be
obtained at any time with the <tt class="literal">getValue()</tt> method. <tt class="literal">reset()</tt> resets the checksum to its default
value; use this method before beginning a new stream of
data. <a name="INDEX-3184"></a><a name="INDEX-3185"></a>
The checksum value computed by a <tt class="literal">Checksum</tt> object
and returned through the <tt class="literal">getValue()</tt> method must fit
into a <tt class="literal">long</tt> value. Therefore, this interface is not
suitable for the cryptographic checksum algorithms used in
cryptography and security. The classes <tt class="literal">CheckedInputStream</tt> and
<tt class="literal">CheckedOutputStream</tt> provide a higher-level API for
computing a checksum on a stream of data. See also <tt class="literal">java.security.MessageDigest</tt>. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public interface <b class="classname">Checksum</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract long <b class="function">getValue</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">reset</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">update</b> (int <i class="parameter">b</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">update</b> (byte[ ] <i class="parameter">b</i>, int <i class="parameter">off</i>, int <i class="parameter">len</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Implementations: </span><tt class="literal">Adler32, CRC32</tt>
</p>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">CheckedInputStream.CheckedInputStream(), CheckedOutputStream.CheckedOutputStream()</tt>
</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">CheckedInputStream.getChecksum(), CheckedOutputStream.getChecksum()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>CRC32</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.util.zip</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-3186"></a>
This class implements the <tt class="literal">Checksum</tt> interface and
computes a checksum on a stream of data using the CRC-32
algorithm. The <tt class="literal">CheckedInputStream</tt> and
<tt class="literal">CheckedOutputStream</tt> classes provide a higher-level
interface to computing checksums on streams of data. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">CRC32</b> implements Checksum {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">CRC32</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">update</b> (byte[ ] <i class="parameter">b</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Methods Implementing Checksum</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public long <b class="function">getValue</b> ();</td><td align="right"><i> default:0</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">reset</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">update</b> (int <i class="parameter">b</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">update</b> (byte[ ] <i class="parameter">b</i>, int <i class="parameter">off</i>, int <i class="parameter">len</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->CRC32(Checksum)</tt>
</p>
<p>
<span class="refsect1">Type Of: </span><tt class="literal">GZIPInputStream.crc, GZIPOutputStream.crc</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>DataFormatException</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.util.zip</b></font></td><td align="right"><font size="+1"><b><i>serializable checked PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-3187"></a>
Signals that invalid or corrupt data has been encountered
while uncompressing data. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">DataFormatException</b> extends Exception {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">DataFormatException</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">DataFormatException</b> (String <i class="parameter">s</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Exception-->DataFormatException</tt>
</p>
<p>
<span class="refsect1">Thrown By: </span><tt class="literal">Inflater.inflate()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>Deflater</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.util.zip</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1(opt)</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-3188"></a>
This class implements the general ZLIB data-compression
algorithm used by the <em class="emphasis">gzip</em> and <em class="emphasis">PKZip</em> compression programs. The constants defined by this class are used to specify the
compression strategy and the compression
speed/strength tradeoff level to be used. If you set the
<em class="replaceable">nowrap</em> argument to the constructor to <tt class="literal">true</tt>,
the ZLIB header and checksum data are omitted from
the compressed output, which is the format both <em class="emphasis">gzip</em>
and <em class="emphasis">PKZip</em> use. </p>
<p>
<a name="INDEX-3189"></a><a name="INDEX-3190"></a>
The important methods of this class are <tt class="literal">setInput()</tt>,
which specifies input data to be compressed, and
<tt class="literal">deflate()</tt>, which compresses the data and returns the
compressed output. The remaining methods exist so that
<tt class="literal">Deflater</tt> can be used for stream-based compression,
as it is in higher-level classes, such as
<tt class="literal">GZIPOutputStream</tt> and <tt class="literal">ZipOutputStream</tt>. These
stream classes are sufficient in most cases. Most
applications do not need to use <tt class="literal">Deflater</tt> directly. The <tt class="literal">Inflater</tt> class uncompresses data compressed with
a <tt class="literal">Deflater</tt> object. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">Deflater</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">Deflater</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">Deflater</b> (int <i class="parameter">level</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">Deflater</b> (int <i class="parameter">level</i>, boolean <i class="parameter">nowrap</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constants</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">BEST_COMPRESSION</b> ;</td><td align="right"><i> =9</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">BEST_SPEED</b> ;</td><td align="right"><i> =1</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">DEFAULT_COMPRESSION</b> ;</td><td align="right"><i> =-1</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">DEFAULT_STRATEGY</b> ;</td><td align="right"><i> =0</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">DEFLATED</b> ;</td><td align="right"><i> =8</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">FILTERED</b> ;</td><td align="right"><i> =1</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">HUFFMAN_ONLY</b> ;</td><td align="right"><i> =2</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">NO_COMPRESSION</b> ;</td><td align="right"><i> =0</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Property Accessor Methods (by property name)</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getAdler</b> ();</td><td align="right"><i> synchronized default:1</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getTotalIn</b> ();</td><td align="right"><i> synchronized default:0</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getTotalOut</b> ();</td><td align="right"><i> synchronized default:0</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">deflate</b> (byte[ ] <i class="parameter">b</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">deflate</b> (byte[ ] <i class="parameter">b</i>, int <i class="parameter">off</i>, int <i class="parameter">len</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">end</b> ();</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">finish</b> ();</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">finished</b> ();</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">needsInput</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">reset</b> ();</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setDictionary</b> (byte[ ] <i class="parameter">b</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setDictionary</b> (byte[ ] <i class="parameter">b</i>, int <i class="parameter">off</i>, int <i class="parameter">len</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setInput</b> (byte[ ] <i class="parameter">b</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setInput</b> (byte[ ] <i class="parameter">b</i>, int <i class="parameter">off</i>, int <i class="parameter">len</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setLevel</b> (int <i class="parameter">level</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setStrategy</b> (int <i class="parameter">strategy</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Methods Overriding Object</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected void <b class="function">finalize</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">DeflaterOutputStream.DeflaterOutputStream()</tt>
</p>
<p>
<span class="refsect1">Type Of: </span><tt class="literal">DeflaterOutputStream.def</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>DeflaterOutputStream</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.util.zip</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1(opt)</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-3191"></a><a name="INDEX-3192"></a>
This class is a subclass of
<tt class="literal">java.io.FilterOutputStream</tt>; it filters a stream of
data by compressing (deflating) it and then writing the
compressed data to another output stream. To create a
<tt class="literal">DeflaterOutputStream</tt>, you must specify both the stream
it is to write to and a <tt class="literal">Deflater</tt> object
to perform the compression. You can set various
options on the <tt class="literal">Deflater</tt> object to specify just what
type of compression is to be performed. Once a
<tt class="literal">DeflaterOutputStream</tt> is created, its <tt class="literal">write()</tt>
and <tt class="literal">close()</tt> methods are the same as those of other
output streams. <a name="INDEX-3193"></a><a name="INDEX-3194"></a>
The <tt class="literal">InflaterInputStream</tt> class can read data
written with a <tt class="literal">DeflaterOutputStream</tt>. A <tt class="literal">DeflaterOutputStream</tt> writes raw
compressed data; applications often prefer one of its
subclasses, <tt class="literal">GZIPOutputStream</tt> or
<tt class="literal">ZipOutputStream</tt>, that wraps the raw compressed data
within a standard file format. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">DeflaterOutputStream</b> extends java.io.FilterOutputStream {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">DeflaterOutputStream</b> (java.io.OutputStream <i class="parameter">out</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">DeflaterOutputStream</b> (java.io.OutputStream <i class="parameter">out</i>, Deflater <i class="parameter">def</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">DeflaterOutputStream</b> (java.io.OutputStream <i class="parameter">out</i>, Deflater <i class="parameter">def</i>, int <i class="parameter">size</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">finish</b> () throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding FilterOutputStream</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">close</b> () throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">write</b> (int <i class="parameter">b</i>) throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">write</b> (byte[ ] <i class="parameter">b</i>, int <i class="parameter">off</i>, int <i class="parameter">len</i>) throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected void <b class="function">deflate</b> () throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Instance Fields</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected byte[ ] <b class="function">buf</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected Deflater <b class="function">def</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->java.io.OutputStream-->java.io.FilterOutputStream-->DeflaterOutputStream</tt>
</p>
<p>
<span class="refsect1">Subclasses: </span><tt class="literal">GZIPOutputStream, ZipOutputStream</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>GZIPInputStream</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.util.zip</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-3195"></a><a name="INDEX-3196"></a>
This class is a subclass of <tt class="literal">InflaterInputStream</tt>
that reads and uncompresses data compressed in <em class="emphasis">gzip</em>
format. To create a <tt class="literal">GZIPInputStream</tt>, 
simply specify the <tt class="literal">InputStream</tt> to read
compressed data from and, optionally, a buffer size
for the internal decompression buffer. Once a
<tt class="literal">GZIPInputStream</tt> is created, you can use the
<tt class="literal">read()</tt> and <tt class="literal">close()</tt> methods as you would
with any input stream. <a name="INDEX-3197"></a><a name="INDEX-3198"></a>
</p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">GZIPInputStream</b> extends InflaterInputStream {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">GZIPInputStream</b> (java.io.InputStream <i class="parameter">in</i>) throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">GZIPInputStream</b> (java.io.InputStream <i class="parameter">in</i>, int <i class="parameter">size</i>) throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constants</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">GZIP_MAGIC</b> ;</td><td align="right"><i> =35615</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding InflaterInputStream</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">close</b> () throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">read</b> (byte[ ] <i class="parameter">buf</i>, int <i class="parameter">off</i>, int <i class="parameter">len</i>) throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Instance Fields</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected CRC32 <b class="function">crc</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected boolean <b class="function">eos</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->java.io.InputStream-->java.io.FilterInputStream-->InflaterInputStream-->GZIPInputStream</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>GZIPOutputStream</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.util.zip</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1(opt)</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-3199"></a><a name="INDEX-3200"></a>
This class is a subclass of <tt class="literal">DeflaterOutputStream</tt>
that compresses and writes data using the <em class="emphasis">gzip</em> file format. To create a <tt class="literal">GZIPOutputStream</tt>, specify the
<tt class="literal">OutputStream</tt> to write to and,
optionally, a size for the internal compression
buffer. Once the <tt class="literal">GZIPOutputStream</tt> is created, you
can use the <tt class="literal">write()</tt> and <tt class="literal">close()</tt> methods as
you would any output stream. <a name="INDEX-3201"></a><a name="INDEX-3202"></a>
</p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">GZIPOutputStream</b> extends DeflaterOutputStream {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">GZIPOutputStream</b> (java.io.OutputStream <i class="parameter">out</i>) throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">GZIPOutputStream</b> (java.io.OutputStream <i class="parameter">out</i>, int <i class="parameter">size</i>) throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding DeflaterOutputStream</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">close</b> () throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">finish</b> () throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">write</b> (byte[ ] <i class="parameter">buf</i>, int <i class="parameter">off</i>, int <i class="parameter">len</i>) throws java.io.IOException;</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Instance Fields</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected CRC32 <b class="function">crc</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->java.io.OutputStream-->java.io.FilterOutputStream-->DeflaterOutputStream-->GZIPOutputStream</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>Inflater</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.util.zip</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1(mod)</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-3203"></a>
This class implements the general ZLIB data-decompression
algorithm used by <em class="emphasis">gzip</em>, <em class="emphasis">PKZip</em>, and other data-compression
applications. It decompresses or inflates data compressed
through the <tt class="literal">Deflater</tt> class. <a name="INDEX-3204"></a><a name="INDEX-3205"></a>
The important methods of this class are <tt class="literal">setInput()</tt>,
which specifies input data to be decompressed, and
<tt class="literal">inflate()</tt>, which decompresses the input data into an
output buffer. A number of other methods exist so that this
class can be used for stream-based decompression, as it is
in the higher-level classes, such as <tt class="literal">GZIPInputStream</tt>
and <tt class="literal">ZipInputStream</tt>. These stream-based classes are
sufficient in most cases. Most applications do not need to
use <tt class="literal">Inflater</tt> directly. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">Inflater</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">Inflater</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">Inflater</b> (boolean <i class="parameter">nowrap</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Property Accessor Methods (by property name)</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getAdler</b> ();</td><td align="right"><i> synchronized default:1</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getRemaining</b> ();</td><td align="right"><i> synchronized default:0</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getTotalIn</b> ();</td><td align="right"><i> synchronized default:0</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getTotalOut</b> ();</td><td align="right"><i> synchronized default:0</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">end</b> ();</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">finished</b> ();</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">inflate</b> (byte[ ] <i class="parameter">b</i>) throws DataFormatException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">inflate</b> (byte[ ] <i class="parameter">b</i>, int <i class="parameter">off</i>, int <i class="parameter">len</i>) throws DataFormatException;</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">needsDictionary</b> ();</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">needsInput</b> ();</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">reset</b> ();</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setDictionary</b> (byte[ ] <i class="parameter">b</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setDictionary</b> (byte[ ] <i class="parameter">b</i>, int <i class="parameter">off</i>, int <i class="parameter">len</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setInput</b> (byte[ ] <i class="parameter">b</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setInput</b> (byte[ ] <i class="parameter">b</i>, int <i class="parameter">off</i>, int <i class="parameter">len</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Methods Overriding Object</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected void <b class="function">finalize</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">InflaterInputStream.InflaterInputStream()</tt>
</p>
<p>
<span class="refsect1">Type Of: </span><tt class="literal">InflaterInputStream.inf</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>InflaterInputStream</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.util.zip</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-3206"></a><a name="INDEX-3207"></a>
This class is a subclass of
<tt class="literal">java.io.FilterInputStream</tt>; it reads a specified
stream of compressed input data (typically one that was
written with <tt class="literal">DeflaterOutputStream</tt> or a subclass) and
filters that data by uncompressing (inflating) it. To
create an <tt class="literal">InflaterInputStream</tt>, specify both the
input stream to read from and an
<tt class="literal">Inflater</tt> object to perform the
decompression. Once an <tt class="literal">InflaterInputStream</tt> is
created, the <tt class="literal">read()</tt> and <tt class="literal">skip()</tt> methods are
the same as those of other input streams. <a name="INDEX-3208"></a><a name="INDEX-3209"></a>
The <tt class="literal">InflaterInputStream</tt> uncompresses raw
data. Applications often prefer one of its
subclasses, <tt class="literal">GZIPInputStream</tt> or <tt class="literal">ZipInputStream</tt>,
that work with compressed data written in the standard <em class="emphasis">gzip</em>
and <em class="emphasis">PKZip</em> file formats. </p>

<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">InflaterInputStream</b> extends java.io.FilterInputStream {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">InflaterInputStream</b> (java.io.InputStream <i class="parameter">in</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">InflaterInputStream</b> (java.io.InputStream <i class="parameter">in</i>, Inflater <i class="parameter">inf</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">InflaterInputStream</b> (java.io.InputStream <i class="parameter">in</i>, Inflater <i class="parameter">inf</i>, int <i class="parameter">size</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding FilterInputStream</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public int <b class="function">available</b> () throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public void <b class="function">close</b> () throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">read</b> () throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">read</b> (byte[ ] <i class="parameter">b</i>, int <i class="parameter">off</i>, int <i class="parameter">len</i>) throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public long <b class="function">skip</b> (long <i class="parameter">n</i>) throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected void <b class="function">fill</b> () throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Instance Fields</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected byte[ ] <b class="function">buf</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected Inflater <b class="function">inf</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected int <b class="function">len</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->java.io.InputStream-->java.io.FilterInputStream-->InflaterInputStream</tt>
</p>
<p>
<span class="refsect1">Subclasses: </span><tt class="literal">GZIPInputStream, ZipInputStream</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>ZipEntry</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.util.zip</b></font></td><td align="right"><font size="+1"><b><i>cloneable PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-3210"></a>
This class describes a single entry (typically a compressed
file) stored within a ZIP file. The various methods get and
set various pieces of information about the entry. The
<tt class="literal">ZipEntry</tt> class is used by <tt class="literal">ZipFile</tt> and
<tt class="literal">ZipInputStream</tt>, which read ZIP files, and by 
<tt class="literal">ZipOutputStream</tt>, which writes ZIP files. </p>
<p>When you are reading a ZIP file, a <tt class="literal">ZipEntry</tt> object
returned by <tt class="literal">ZipFile</tt> or <tt class="literal">ZipInputStream</tt>
contains the name, size, modification time, and other
information about an entry in the file. When writing a
ZIP file, on the other hand, you must create your own
<tt class="literal">ZipEntry</tt> objects and initialize them to contain the
entry name and other appropriate information before writing
the contents of the entry. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">ZipEntry</b> implements Cloneable {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public <b class="function">ZipEntry</b> (ZipEntry <i class="parameter">e</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">ZipEntry</b> (String <i class="parameter">name</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constants</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">DEFLATED</b> ;</td><td align="right"><i> =8</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">STORED</b> ;</td><td align="right"><i> =0</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Property Accessor Methods (by property name)</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">getComment</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setComment</b> (String <i class="parameter">comment</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public long <b class="function">getCompressedSize</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public void <b class="function">setCompressedSize</b> (long <i class="parameter">csize</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public long <b class="function">getCrc</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setCrc</b> (long <i class="parameter">crc</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">isDirectory</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public byte[ ] <b class="function">getExtra</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setExtra</b> (byte[ ] <i class="parameter">extra</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getMethod</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setMethod</b> (int <i class="parameter">method</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">getName</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public long <b class="function">getSize</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setSize</b> (long <i class="parameter">size</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public long <b class="function">getTime</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setTime</b> (long <i class="parameter">time</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Object</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public Object <b class="function">clone</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public int <b class="function">hashCode</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">toString</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->ZipEntry(Cloneable,ZipConstants)</tt>
</p>
<p>
<span class="refsect1">Subclasses: </span><tt class="literal">java.util.jar.JarEntry</tt>
</p>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">java.util.jar.JarEntry.JarEntry(), java.util.jar.JarFile.getInputStream(), java.util.jar.JarOutputStream.putNextEntry(), ZipEntry.ZipEntry(), ZipFile.getInputStream(), ZipOutputStream.putNextEntry()</tt>
</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">java.util.jar.JarFile.getEntry(), java.util.jar.JarInputStream.{createZipEntry(), getNextEntry()}, ZipFile.getEntry(), ZipInputStream.{createZipEntry(), getNextEntry()}</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>ZipException</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.util.zip</b></font></td><td align="right"><font size="+1"><b><i>serializable checked PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-3211"></a>
Signals that an error has occurred in reading or writing a
ZIP file. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">ZipException</b> extends java.io.IOException {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">ZipException</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">ZipException</b> (String <i class="parameter">s</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Exception-->java.io.IOException-->ZipException</tt>
</p>
<p>
<span class="refsect1">Subclasses: </span><tt class="literal">java.util.jar.JarException</tt>
</p>
<p>
<span class="refsect1">Thrown By: </span><tt class="literal">ZipFile.ZipFile()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>ZipFile</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.util.zip</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1(opt)</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-3212"></a><a name="INDEX-3213"></a>
This class reads the contents of ZIP files. It uses a
random-access file internally so that the entries of the ZIP
file do not have to be read sequentially, as they do with the
<tt class="literal">ZipInputStream</tt> class. A <tt class="literal">ZipFile</tt> object can be created by specifying the
ZIP file to be read either as a <tt class="literal">String</tt> filename or
as a <tt class="literal">File</tt> object. In Java 1.3, temporary ZIP files can be marked for automatic deletion
when they are closed. To take advantage of this feature, pass
<tt class="literal">ZipFile.OPEN_READ|ZipFile.OPEN_DELETE</tt> as the
<em class="replaceable">mode</em> argument to the
<tt class="literal">ZipFile()</tt> constructor. </p>
<p>Once a <tt class="literal">ZipFile</tt> is 
created, the
<a name="INDEX-3214"></a><a name="INDEX-3215"></a><a name="INDEX-3216"></a><tt class="literal">getEntry()</tt> method returns a <tt class="literal">ZipEntry</tt> object
for a named entry, and the <tt class="literal">entries()</tt> method returns
an <tt class="literal">Enumeration</tt> object that allows you to loop
through all the <tt class="literal">ZipEntry</tt> objects for the file. To
read the contents of a specific <tt class="literal">ZipEntry</tt> within the
ZIP file, pass the <tt class="literal">ZipEntry</tt> to
<tt class="literal">getInputStream()</tt>; this returns an
<tt class="literal">InputStream</tt> object from which you can read the
entry's contents. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">ZipFile</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">ZipFile</b> (String <i class="parameter">name</i>) throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">ZipFile</b> (java.io.File <i class="parameter">file</i>) throws ZipExceptionjava.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.3</span></td><td align="left">public <b class="function">ZipFile</b> (java.io.File <i class="parameter">file</i>, int <i class="parameter">mode</i>) throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constants</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.3</span></td><td align="left">public static final int <b class="function">OPEN_DELETE</b> ;</td><td align="right"><i> =4</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.3</span></td><td align="left">public static final int <b class="function">OPEN_READ</b> ;</td><td align="right"><i> =1</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">close</b> () throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public java.util.Enumeration <b class="function">entries</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public ZipEntry <b class="function">getEntry</b> (String <i class="parameter">name</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public java.io.InputStream <b class="function">getInputStream</b> (ZipEntry <i class="parameter">entry</i>) throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">getName</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public int <b class="function">size</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->ZipFile(ZipConstants)</tt>
</p>
<p>
<span class="refsect1">Subclasses: </span><tt class="literal">java.util.jar.JarFile</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>ZipInputStream</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.util.zip</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-3217"></a><a name="INDEX-3218"></a>
This class is a subclass of <tt class="literal">InflaterInputStream</tt> that
reads the entries of a ZIP file in sequential order. Create a
<tt class="literal">ZipInputStream</tt> by specifying the
<tt class="literal">InputStream</tt> from which it is to read the contents of the ZIP
file. Once the <tt class="literal">ZipInputStream</tt> is created, you can use 
<a name="INDEX-3219"></a><a name="INDEX-3220"></a><tt class="literal">getNextEntry()</tt> to begin reading
data from the next entry in the ZIP file. This method must
be called before <tt class="literal">read()</tt> is called to begin reading
the first entry. <tt class="literal">getNextEntry()</tt>
returns a <tt class="literal">ZipEntry</tt> object that describes the entry
being read, or 
<tt class="literal">null</tt> when there are no more entries to be read from
the ZIP file. </p>
<p>The <tt class="literal">read()</tt> methods of <tt class="literal">ZipInputStream</tt> read
until the end of the current entry and then return
-1, indicating that there is no more data to read. To continue with the next entry in the ZIP file, you must
call <tt class="literal">getNextEntry()</tt> again. Similarly, the
<a name="INDEX-3221"></a><a name="INDEX-3222"></a><tt class="literal">skip()</tt> method only skips bytes within the current
entry. <tt class="literal">closeEntry()</tt> can be called to skip the
remaining data in the current entry, but it is usually
easier simply to call <tt class="literal">getNextEntry()</tt> to begin the
next entry. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">ZipInputStream</b> extends InflaterInputStream {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">ZipInputStream</b> (java.io.InputStream <i class="parameter">in</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">closeEntry</b> () throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public ZipEntry <b class="function">getNextEntry</b> () throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding InflaterInputStream</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public int <b class="function">available</b> () throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">close</b> () throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">read</b> (byte[ ] <i class="parameter">b</i>, int <i class="parameter">off</i>, int <i class="parameter">len</i>) throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public long <b class="function">skip</b> (long <i class="parameter">n</i>) throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">protected ZipEntry <b class="function">createZipEntry</b> (String <i class="parameter">name</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->java.io.InputStream-->java.io.FilterInputStream-->InflaterInputStream-->ZipInputStream(ZipConstants)</tt>
</p>
<p>
<span class="refsect1">Subclasses: </span><tt class="literal">java.util.jar.JarInputStream</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>ZipOutputStream</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.util.zip</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1(opt)</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-3223"></a><a name="INDEX-3224"></a>
This class is a subclass of <tt class="literal">DeflaterOutputStream</tt>
that writes data in ZIP file format to an output stream. Before writing any data to the <tt class="literal">ZipOutputStream</tt>, you
must begin an entry within the ZIP file with
<a name="INDEX-3225"></a><tt class="literal">putNextEntry()</tt>. The <tt class="literal">ZipEntry</tt> object passed
to this method should specify at least a name for the entry. Once you have begun an entry with <tt class="literal">putNextEntry()</tt>,
you can write the contents of that entry with the
<a name="INDEX-3226"></a><tt class="literal">write()</tt> methods. When you reach the end of an
entry, you can begin a new one by calling
<tt class="literal">putNextEntry()</tt> again, you can close the current
entry with <tt class="literal">closeEntry()</tt>, or you can close the stream
itself with <tt class="literal">close()</tt>. <a name="INDEX-3227"></a><a name="INDEX-3228"></a>
</p>
<p>
<a name="INDEX-3229"></a><a name="INDEX-3230"></a>
Before beginning an entry with <tt class="literal">putNextEntry()</tt>, you
can set the compression method and level with
<tt class="literal">setMethod()</tt> and <tt class="literal">setLevel()</tt>. The constants
<tt class="literal">DEFLATED</tt> and <tt class="literal">STORED</tt> are the two legal values
for <tt class="literal">setMethod()</tt>. If you use <tt class="literal">STORED</tt>,
the entry is stored in the ZIP file without any
compression. If you use <tt class="literal">DEFLATED</tt>, you can also
specify the compression speed/strength tradeoff by passing a
number from 1 to 9 to <tt class="literal">setLevel()</tt>, where 9 gives the
strongest and slowest level of compression. You can also


use the constants <tt class="literal">Deflater.BEST_SPEED</tt>,
<tt class="literal">Deflater.BEST_COMPRESSION</tt>, and
<tt class="literal">Deflater.DEFAULT_COMPRESSION</tt> with the
<tt class="literal">setLevel()</tt> method. </p>
<p>If you are storing an entry without
compression, the ZIP file format requires that you specify,
in advance, the entry size and CRC-32 checksum in the
<tt class="literal">ZipEntry</tt> object for the entry. An exception is
thrown if these values are not specified or specified incorrectly. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">ZipOutputStream</b> extends DeflaterOutputStream {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">ZipOutputStream</b> (java.io.OutputStream <i class="parameter">out</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constants</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">DEFLATED</b> ;</td><td align="right"><i> =8</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">STORED</b> ;</td><td align="right"><i> =0</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">closeEntry</b> () throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">putNextEntry</b> (ZipEntry <i class="parameter">e</i>) throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setComment</b> (String <i class="parameter">comment</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setLevel</b> (int <i class="parameter">level</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setMethod</b> (int <i class="parameter">method</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding DeflaterOutputStream</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">close</b> () throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">finish</b> () throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">write</b> (byte[ ] <i class="parameter">b</i>, int <i class="parameter">off</i>, int <i class="parameter">len</i>) throws java.io.IOException;</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->java.io.OutputStream-->java.io.FilterOutputStream-->DeflaterOutputStream-->ZipOutputStream(ZipConstants)</tt>
</p>
<p>
<span class="refsect1">Subclasses: </span><tt class="literal">java.util.jar.JarOutputStream</tt>
</p>
</div>
<a name="INDEX-3231"></a>
<a name="INDEX-3232"></a>


<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch24_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch24_01.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch26_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch26_01.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">24.1. The java.util.jar Package</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">26. The javax.crypto Package</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
