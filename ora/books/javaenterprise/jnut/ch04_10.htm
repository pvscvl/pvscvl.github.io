<html>
<head>
<title>Input and Output Streams (Java in a Nutshell)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="David Flanagan">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-487-8E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Input and Output Streams">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm" alt="Java Enterprise in a Nutshell"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch04_09.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch04_09.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch04_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch04_01.htm">Chapter 4: The Java Platform</a></td><td align="right" valign="top" width="172"><a href="ch04_11.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch04_11.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY --><h2 class="sect1">4.10. Input and Output Streams</h2>
<p>
<a name="INDEX-745"></a><a name="INDEX-746"></a><a name="INDEX-747"></a><a name="INDEX-748"></a><a name="INDEX-749"></a><a name="INDEX-750"></a><a name="INDEX-751"></a><a name="INDEX-752"></a><a name="INDEX-753"></a><a name="INDEX-754"></a><a name="INDEX-755"></a><a name="INDEX-756"></a><a name="INDEX-757"></a><a name="INDEX-758"></a>


      The <tt class="literal">java.io</tt> package 
      defines a large number of classes for reading and writing
      streaming, or sequential, data. The
      <tt class="literal">InputStream</tt> and <tt class="literal">OutputStream</tt>
      classes are for reading and writing streams of bytes, while the
      <tt class="literal">Reader</tt> and <tt class="literal">Writer</tt> classes
      are for reading and writing streams of characters. Streams can be
      nested, meaning you might read characters from a
      <tt class="literal">FilterReader</tt> object that reads and processes
      characters from an underlying <tt class="literal">Reader</tt> stream. This underlying <tt class="literal">Reader</tt> stream might read bytes from
      an <tt class="literal">InputStream</tt> and convert them to 
      characters. </p>
<p>
<a name="INDEX-759"></a>

      There are a number of common operations you can perform with
      streams. One is to read lines of input the user types at the
      console:
</p>
<blockquote>
<pre class="programlisting">import java.io.*;

BufferedReader console = new BufferedReader(new InputStreamReader(System.in));
System.out.print("What is your name: ");
String name = null;
try { 
  name = console.readLine(); 
} 
catch (IOException e) { name = "&lt;" + e + "&gt;"; }  // This should never happen
System.out.println("Hello " + name);</pre>
</blockquote>
<p>
</p>
<p>
<a name="INDEX-760"></a><a name="INDEX-761"></a>

      Reading lines of text from a file is a similar operation. The
      following code reads an entire text file and quits when it reaches
      the end:
</p>
<blockquote>
<pre class="programlisting">String filename = System.getProperty("user.home") + File.separator + ".cshrc";
try {
  BufferedReader in = new BufferedReader(new FileReader(filename));
  String line;
  while((line = in.readLine()) != null) {  // Read line, check for end-of-file
    System.out.println(line);              // Print the line
  }
  in.close();    // Always close a stream when you are done with it
}
catch (IOException e) {
  // Handle FileNotFoundException, etc. here
}</pre>
</blockquote>
<p>
</p>
<p>
<a name="INDEX-762"></a><a name="INDEX-763"></a><a name="INDEX-764"></a>

      Throughout this book, you've seen the use of the
      <tt class="literal">System.out.println()</tt> method to display text on
      the console. <tt class="literal">System.out</tt> simply refers to an output
      stream. You can print text to any output stream using similar
      techniques. The following code
      shows how to output text to a file:
</p>
<blockquote>
<pre class="programlisting">try {
  File f = new File(homedir, ".config");
  PrintWriter out = new PrintWriter(new FileWriter(f));
  out.println("## Automatically generated config file. DO NOT EDIT!");
  out.close();  // We're done writing
}
catch (IOException e) { /* Handle exceptions */ }</pre>
</blockquote>
<p>
</p>
<p>
<a name="INDEX-765"></a>

      Not all files contain text, however. The following lines of code 
      treat a file as a stream of bytes and read the bytes into a 
      large array:
</p>
<blockquote>
<pre class="programlisting">try {
  File f;                             // File to read; initialized elsewhere
  int filesize = (int) f.length();    // Figure out the file size
  byte[] data = new byte[filesize];   // Create an array that is big enough
  // Create a stream to read the file
  DataInputStream in = new DataInputStream(new FileInputStream(f));
  in.readFully(data);  // Read file contents into array
  in.close();
}
catch (IOException e) { /* Handle exceptions */ }</pre>
</blockquote>
<p>
</p>
<p>
<a name="INDEX-766"></a><a name="INDEX-767"></a><a name="INDEX-768"></a>

      Various other packages of the Java platform define specialized stream
      classes that operate on streaming data in some useful way. The
      following code shows how to use stream classes from
      <tt class="literal">java.util.zip</tt> to compute a
      checksum of data and then compress the data while writing it to a
      file:
</p>
<blockquote>
<pre class="programlisting">import java.io.*;
import java.util.zip.*;

try {
  File f;                           // File to write to; initialized elsewhere
  byte[] data;                      // Data to write; initialized elsewhere
  Checksum check = new Adler32();   // An object to compute a simple checksum

  // Create a stream that writes bytes to the file f
  FileOutputStream fos = new FileOutputStream(f);
  // Create a stream that compresses bytes and writes them to fos
  GZIPOutputStream gzos = new GZIPOutputStream(fos);
  // Create a stream that computes a checksum on the bytes it writes to gzos
  CheckedOutputStream cos = new CheckedOutputStream(gzos, check);  

  cos.write(data);             // Now write the data to the nested streams
  cos.close();                 // Close down the nested chain of streams
  long sum = check.getValue(); // Obtain the computed checksum
}
catch (IOException e) { /* Handle exceptions */ }</pre>
</blockquote>
<p>
</p>

<p>
<a name="INDEX-769"></a>

      The <tt class="literal">java.util.zip</tt> package also contains a
      <tt class="literal">ZipFile</tt> class that gives you random access to
      the entries of a ZIP archive and allows you to read those entries
      through a stream:
</p>
<blockquote>
<pre class="programlisting">import java.io.*;
import java.util.zip.*;

String filename;     // File to read; initialized elsewhere
String entryname;    // Entry to read from the ZIP file; initialized elsewhere
ZipFile zipfile = new ZipFile(filename);        // Open the ZIP file
ZipEntry entry = zipfile.getEntry(entryname);   // Get one entry
InputStream in = zipfile.getInputStream(entry); // A stream to read the entry
BufferedInputStream bis = new BufferedInputStream(in);  // Improves efficiency
// Now read bytes from bis... 
// Print out contents of the ZIP file
for(java.util.Enumeration e = zipfile.entries(); e.hasMoreElements();) {
  ZipEntry zipentry = (ZipEntry) e.nextElement();
  System.out.println(zipentry.getName());
}</pre>
</blockquote>
<p>
</p>
<p>
<a name="INDEX-770"></a><a name="INDEX-771"></a><a name="INDEX-772"></a>

      If you need to compute a cryptographic-strength checksum (also
      knows as a message digest), use one of the stream classes of the
      <tt class="literal">java.security</tt> package. For example:
</p>
<blockquote>
<pre class="programlisting">import java.io.*;
import java.security.*;
import java.util.*;

File f;          // File to read and compute digest on; initialized elsewhere
List text = new ArrayList();  // We'll store the lines of text here

// Get an object that can compute an SHA message digest
MessageDigest digester = MessageDigest.getInstance("SHA");
// A stream to read bytes from the file f
FileInputStream fis = new FileInputStream(f);
// A stream that reads bytes from fis and computes an SHA message digest
DigestInputStream dis = new DigestInputStream(fis, digester);
// A stream that reads bytes from dis and converts them to characters
InputStreamReader isr = new InputStreamReader(dis);
// A stream that can read a line at a time
BufferedReader br = new BufferedReader(isr);
// Now read lines from the stream
for(String line; (line = br.readLine()) != null; text.add(line)) ;
// Close the streams
br.close();
// Get the message digest
byte[] digest = digester.digest();</pre>
</blockquote>
<p>
</p>
<p>
<a name="INDEX-773"></a>

      So far, we've used a variety of stream classes
      to manipulate streaming data, but the data itself ultimately comes
      from a file or is written to the console. The
      <tt class="literal">java.io</tt> package defines other 
      stream classes that can
      read data from and write data to arrays of bytes or strings of
      text:
</p>
<blockquote>
<pre class="programlisting">import java.io.*;

// Set up a stream that uses a byte array as its destination
ByteArrayOutputStream baos = new ByteArrayOutputStream();
DataOutputStream out = new DataOutputStream(baos);
out.writeUTF("hello");            // Write some string data out as bytes
out.writeDouble(Math.PI);         // Write a floating-point value out as bytes
byte[] data = baos.toByteArray(); // Get the array of bytes we've written
out.close();                      // Close the streams

// Set up a stream to read characters from a string
Reader in = new StringReader("Now is the time!");
// Read characters from it until we reach the end
int c;
while((c = in.read()) != -1) System.out.print((char) c);</pre>
</blockquote>
<p>
Other classes that operate this way include 
<tt class="literal">ByteArrayInputStream</tt>, <tt class="literal">StringWriter</tt>,
<tt class="literal">CharArrayReader</tt>, and <tt class="literal">CharArrayWriter</tt>.
<a name="INDEX-774"></a><a name="INDEX-775"></a><a name="INDEX-776"></a><a name="INDEX-777"></a>
</p>
<p>
<a name="INDEX-778"></a><a name="INDEX-779"></a><a name="INDEX-780"></a><a name="INDEX-781"></a><a name="INDEX-782"></a><tt class="literal">PipedInputStream</tt> and
      <tt class="literal">PipedOutputStream</tt> and their character-based
      counterparts, <tt class="literal">PipedReader</tt> and
      <tt class="literal">PipedWriter</tt>, are 
      another interesting set of streams defined by 
      <tt class="literal">java.io</tt>. These streams are used in pairs
      by two threads that want to communicate. One thread writes bytes to a
      <tt class="literal">PipedOutputStream</tt> or characters to a
      <tt class="literal">PipedWriter</tt>, and another thread reads bytes or
      characters from the corresponding
      <tt class="literal">PipedInputStream</tt> or
      <tt class="literal">PipedReader</tt>:
</p>
<blockquote>
<pre class="programlisting">// A pair of connected piped I/O streams forms a pipe. One thread writes
// bytes to the PipedOutputStream, and another thread reads them from the
// corresponding PipedInputStream. Or use PipedWriter/PipedReader for chars. 
final PipedOutputStream writeEndOfPipe = new PipedOutputStream();
final PipedInputStream readEndOfPipe = new PipedInputStream(writeEndOfPipe);

// This thread reads bytes from the pipe and discards them
Thread devnull = new Thread(new Runnable() {
  public void run() { 
    try { while(readEndOfPipe.read() != -1); }
    catch (IOException e) {}  // ignore it
  }
});
devnull.start();</pre>
</blockquote>
<p>
</p>
<p>
<a name="INDEX-783"></a><a name="INDEX-784"></a><a name="INDEX-785"></a><a name="INDEX-786"></a><a name="INDEX-787"></a>


      One of the most important features of the
      <tt class="literal">java.io</tt> package is the ability to 
      <em class="emphasis">serialize</em>
      objects: to convert an object into a stream of bytes that can
      later be deserialized back into a copy of the original object. The following code shows how to use serialization to save an
      object to a file and later read it back:
</p>
<blockquote>
<pre class="programlisting">Object o;  // The object we are serializing; it must implement Serializable
File f;    // The file we are saving it to

try {
  // Serialize the object
  ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(f));
  oos.writeObject(o);
  oos.close();

  // Read the object back in:
  ObjectInputStream ois = new ObjectInputStream(new FileInputStream(f));
  Object copy = ois.readObject();
  ois.close();
} 
catch (IOException e) { /* Handle input/output exceptions */ }
catch (ClassNotFoundException cnfe) { /* readObject() can throw this */ }</pre>
</blockquote>
<p>
      The previous example serializes to a file, but remember, you can write
      serialized objects to any type of stream. Thus, you can write an
      object to a byte array, then read it back from the byte array,
      creating a deep copy of the object. You can write the
      object's bytes to a compression stream or even write
      the bytes to a stream connected across a network to another
      program!

<a name="INDEX-788"></a><a name="INDEX-789"></a>
</p>

<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch04_09.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch04_09.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch04_11.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch04_11.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">4.9. Files and Directories</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">4.11. Networking</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
