<html>
<head>
<title>Destroying and Finalizing Objects (Java in a Nutshell)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="David Flanagan">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-487-8E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Destroying and Finalizing Objects">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm" alt="Java Enterprise in a Nutshell"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch03_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch03_02.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch03_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch03_01.htm">Chapter 3: Object-Oriented Programming in Java</a></td><td align="right" valign="top" width="172"><a href="ch03_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch03_04.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY --><h2 class="sect1">3.3. Destroying and Finalizing Objects</h2>
<p>
<a name="INDEX-439"></a><a name="INDEX-440"></a><a name="INDEX-441"></a>

      Now that we've seen how new objects are created and
      initialized in Java, we need to study the other end of the
      object life cycle and examine how objects are
      finalized and destroyed. <em class="emphasis">Finalization</em> is
      the opposite of initialization. </p>
<p>
<a name="INDEX-442"></a>

      As I mentioned in <a href="ch02_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch02_01.htm">Chapter 2, "Java Syntax

from the Ground Up"</a>, the memory
      occupied by an object is automatically reclaimed when the object is
      no longer needed. This is done through a process known as
      <em class="emphasis">garbage</em><em class="emphasis">collection</em>. Garbage collection is not some newfangled 
      technique; it has been around for years
      in languages such as Lisp. It just takes some getting
      used to for programmers accustomed to such languages as C and C++,
      in which you must call the <tt class="literal">free()</tt> method or the
      <tt class="literal">delete</tt> operator to reclaim memory. The fact
      that you don't need to remember to destroy every
      object you create is one of the features that makes Java a
      pleasant language to work with. It is also one of the features that
      makes programs written in Java less prone to bugs than those 
      written in
      languages that don't support automatic garbage collection. </p>
<h3 class="sect2">3.3.1. Garbage Collection</h3>
<p>        The Java interpreter knows exactly
	what objects and arrays it has allocated. It can also figure
	out which local variables refer to which objects and arrays, 
	and which objects
	and arrays refer to which other objects and arrays. Thus, the
	interpreter is able to determine when an allocated object is no
	longer referred to by any other object or variable. When the
	interpreter finds such an object, it knows it can destroy 
	the object safely
	and does so. The garbage collector can also detect and destroy
	cycles of objects that refer to each other, but are not
	referenced by any other active objects. Any such
	cycles are also reclaimed. </p>
<p>	The Java garbage collector runs as a low-priority thread, so
	it does most of its work when nothing else is going on, such as
	during idle time while waiting for user input. The only time the
	garbage collector must run while something high-priority is
	going on (i.e., the only time it will actually slow down the
	system) is when available memory has become dangerously low. This doesn't happen very often because the low-priority
	thread cleans things up in the background. </p>
<p>	This scheme may sound slow and wasteful of memory. Actually
	though, modern garbage collectors can be surprisingly efficient. Garbage collection will never be as efficient as well-written,
	explicit memory allocation and deallocation. But it does make
	programming a lot easier and less prone to bugs. And for most
	real-world programs, rapid development, lack of bugs, and easy
	maintenance are more important features than raw speed or memory
	efficiency. </p>
<h3 class="sect2">3.3.2. Memory Leaks in Java</h3>
<p>
<a name="INDEX-443"></a>

	The fact that Java supports garbage collection dramatically
	reduces the incidence of a class of bugs known as
	<em class="emphasis">memory leaks</em>. A memory leak occurs when
	memory is allocated and never reclaimed. At first glance, it might
	seem that garbage collection prevents all memory leaks because
	it reclaims all unused objects. A memory leak can
	still occur in Java, however, if a valid (but unused) reference to an
	unused object is left hanging around. For example, 
	when a method runs for a long time (or
	forever), the local variables in that method can retain object
	references much longer than they are actually required. The following
	code illustrates:
      </p>
<blockquote>
<pre class="programlisting">public static void main(String argso[]) {
  int big_array[] = new int[100000];

  // Do some computations with big_array and get a result. 
  int result = compute(big_array);

  // We no longer need big_array. It will get garbage collected when there
  // are no more references to it. Since big_array is a local variable,
  // it refers to the array until this method returns. But this method
  // doesn't return. So we've got to explicitly get rid of the reference
  // ourselves, so the garbage collector knows it can reclaim the array. 
  big_array = null;

  // Loop forever, handling the user's input
  for(;;) handle_input(result);
}</pre>
</blockquote>
<p>	Memory leaks can also occur when you use a
	hashtable or similar data structure to associate one object with
	another. Even when neither object is required anymore,
	the association remains in the hashtable, preventing the
	objects from being reclaimed until the hashtable itself is
	reclaimed. If the hashtable has a substantially longer lifetime
	than the objects it holds, this can cause memory leaks. </p>
<h3 class="sect2">3.3.3. Object Finalization</h3>
<p>
<a name="INDEX-444"></a>

	A <em class="emphasis">finalizer</em> in Java is the opposite of a
	constructor. While a constructor method performs
	initialization for an object, a finalizer method performs
	finalization for the object. Garbage collection automatically
	frees up the memory resources used by objects, but objects can
	hold other kinds of resources, such as open files and network
	connections. The garbage collector cannot free these
	resources for you, so you need to write a finalizer method for
	any object that needs to perform such tasks as 
	closing files, terminating
	network connections, deleting temporary files, and so on. </p>
<p>	A finalizer is an instance method that takes no arguments and
	returns no value. There can be only one finalizer per class,
	and it must be named
	<tt class="literal">finalize()</tt>.<a href="#FOOTNOTE-1">[1]</a>  
	A finalizer can throw any kind of exception or error, but when a
	finalizer is automatically invoked by the garbage collector, any
	exception or error it throws is ignored and serves only
	to cause the finalizer method to return. Finalizer methods are
	typically declared <tt class="literal">protected</tt> (which we have
	not discussed yet), but can also be declared
	<tt class="literal">public</tt>. An example finalizer looks like
	this:
      </p>
<blockquote class="footnote">
<a name="FOOTNOTE-1"></a>
<p>[1]C++ programmers
	should note that although Java constructor methods are named
	like C++ constructors, Java finalization methods are not named
	like C++ destructor methods. As we will see, they do not
	behave quite like C++ destructor methods,
	either.</p>
</blockquote>
<blockquote>
<pre class="programlisting">protected void finalize() throws Throwable {
  // Invoke the finalizer of our superclass
  // We haven't discussed superclasses or this syntax yet
  super.finalize();

  // Delete a temporary file we were using
  // If the file doesn't exist or tempfile is null, this can throw
  // an exception, but that exception is ignored. 
  tempfile.delete();
}</pre>
</blockquote>
<p>	Here are some important points about finalizers:

	</p>
<ul>
<li>
<p>	      If an object has a finalizer, the finalizer method is
	      invoked sometime after the object becomes unused (or
	      unreachable), but before the garbage collector reclaims
	      the object. </p>
</li>
<li>
<p>	      Java makes no guarantees about when garbage
	      collection will occur or in what order objects will be
	      collected. Therefore, Java can make no guarantees
	      about when (or even whether) a finalizer will be invoked, 
	      in what order finalizers will be invoked, or what thread
	      will execute finalizers. </p>
</li>
<li>
<p>	      The Java interpreter can exit without garbage collecting all
	      outstanding objects, so some finalizers may never be invoked. In this case, though, any outstanding resources are usually
	      freed by the operating system. In Java 1.1, the <tt class="literal">Runtime</tt> method
	      <tt class="literal">runFinalizersOnExit()</tt> can force the virtual machine to run finalizers before
	      exiting. Unfortunately, however, this method can cause
	      deadlock and is inherently unsafe; it has been deprecated
	      as of Java 1.2. In Java 1.3, the <tt class="literal">Runtime</tt>
	      method <tt class="literal">addShutdownHook()</tt> can
	      safely execute arbitrary code before the Java interpreter
	      exits. </p>
</li>
<li>
<p>	      After a finalizer is invoked, objects are not freed right
	      away. This is because a finalizer method can resurrect an
	      object by storing the <tt class="literal">this</tt> pointer
	      somewhere so that the object once again has references. Thus, after <tt class="literal">finalize()</tt> is called, the 
	      garbage collector must once again determine that the object
	      is unreferenced before it can garbage-collect it. However, even if an
	      object is resurrected, the finalizer method is never
	      invoked more than once. Resurrecting an object is
	      never a useful thing to do--just a strange quirk of
	      object finalization. As of Java 1.2, the
	      <tt class="literal">java.lang.ref.PhantomReference</tt> class
	      can implement an alternative to finalization
	      that does not allow resurrection. </p>
</li>
</ul>
<p>	In practice, it is relatively rare for an application-level class
	to require a <tt class="literal">finalize()</tt> method. Finalizer
	methods are
	more useful, however, when writing Java classes that interface
	to native platform code with <tt class="literal">native</tt> methods. In this case, the native implementation can allocate memory or
	other resources that are not under the control of the Java
	garbage collector and need to be reclaimed explicitly by
	a <tt class="literal">native</tt><tt class="literal">finalize()</tt>
	method. </p>
<p>	While Java supports both class and
	instance initialization through static initializers and 
	constructors, it provides only a facility for 
	instance finalization. The original Java
	specification called for a <tt class="literal">classFinalize()</tt>
	method that could finalize a class when the class
	itself became unused and was unloaded from the VM. This feature was never implemented, however, and because it has
	proved to be unnecessary, class finalization has been removed
	from the language specification.
<a name="INDEX-445"></a><a name="INDEX-446"></a><a name="INDEX-447"></a>
</p>

<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch03_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch03_02.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch03_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch03_04.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">3.2. Creating and Initializing Objects</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">3.4. Subclasses and Inheritance</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
