<html>
<head>
<title>Interfaces (Java in a Nutshell)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="David Flanagan">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-487-8E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Interfaces">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm" alt="Java Enterprise in a Nutshell"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch03_06.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch03_06.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch03_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch03_01.htm">Chapter 3: Object-Oriented Programming in Java</a></td><td align="right" valign="top" width="172"><a href="ch03_08.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch03_08.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY --><h2 class="sect1">3.7. Interfaces</h2>
<p>
<a name="INDEX-511"></a>

      Let's extend our <tt class="literal">shapes</tt> package further. Suppose we now want to implement a number of shapes that
      not only know their sizes, but also know the position of their
      center point in the Cartesian coordinate plane. One way to do
      this is to define an abstract
      <tt class="literal">CenteredShape</tt> class and then implement various
      subclasses of it, such as <tt class="literal">CenteredCircle</tt>,
      <tt class="literal">CenteredRectangle</tt>, and so on. </p>
<p>      But we also want these positionable shape classes to support the
      <tt class="literal">area()</tt> and <tt class="literal">circumference()</tt>
      methods we've already defined, without 
      reimplementing these methods. So, for example, we'd like to define
      <tt class="literal">CenteredCircle</tt> as a subclass of
      <tt class="literal">Circle</tt>, so that it inherits
      <tt class="literal">area()</tt> and <tt class="literal">circumference()</tt>. But a class in Java can have only one immediate superclass. If
      <tt class="literal">CenteredCircle</tt> extends
      <tt class="literal">Circle</tt>, it cannot also extend the
      <tt class="literal">abstract</tt><tt class="literal">CenteredShape</tt>
      class!<a href="#FOOTNOTE-8">[8]</a>
</p>
<blockquote class="footnote">
<a name="FOOTNOTE-8"></a>
<p>[8]C++ allows classes to have more than one
      superclass, using a technique known as multiple inheritance. Multiple inheritance adds a lot of complexity to a language;
      Java supports what many believe is a more elegant
      solution.</p>
</blockquote>
<p>      Java's solution to this problem is called an
      interface. Although a Java class can
      extend only a single superclass, it can
      <em class="emphasis">implement</em> any number of interfaces. </p>
<h3 class="sect2">3.7.1. Defining an Interface</h3>
<p>
<a name="INDEX-512"></a>

	An interface is a reference type that is closely related
	to a class. Almost everything you've read so far in this book
	about classes applies equally to interfaces. Defining an
	interface is a lot like defining an abstract class, except
	that the keywords <tt class="literal">abstract</tt> and
	<tt class="literal">class</tt> are replaced with the keyword
	<tt class="literal">interface</tt>. When you define an interface,
	you are creating a new reference type, just as you are when
	you define a class. As its name implies, an 
	<em class="emphasis">interface</em> specifies
	an interface, or API, for certain functionality. It does not define any implementation
	of that API, however. There are a number of
	restrictions that apply to the members of an interface:
	</p>
<ul>
<li>
<p>	      An interface contains no implementation whatsoever. All
	      methods of an interface are implicitly
	      <tt class="literal">abstract</tt>, even if the
	      <tt class="literal">abstract</tt> modifier is omitted. Interface methods have no implementation; a semicolon
	      appears in place of the method body. Because interfaces
	      can contain only <tt class="literal">abstract</tt> methods, and
	      class methods cannot be abstract, the methods of an
	      interface must all be instance methods. </p>
</li>
<li>
<p>	      An interface defines a public API. All methods of an
	      interface are implicitly <tt class="literal">public</tt>, even
	      if the <tt class="literal">public</tt> modifier is omitted. It
	      is an error to define a <tt class="literal">protected</tt> or
	      <tt class="literal">private</tt> method in an interface. </p>
</li>
<li>
<p>	      Although a class defines data and methods that operate on
	      that data, an interface cannot define instance fields. Fields are an implementation detail, and an interface is a
	      pure specification without any implementation. The only
	      fields allowed in an interface definition are constants
	      that are declared both <tt class="literal">static</tt> and
	      <tt class="literal">final</tt>. </p>
</li>
<li>
<p>	      An interface cannot be instantiated, so it does not
	      define a constructor. </p>
</li>
</ul>
<p>
<a href="#javanut3-ch-3-ex-centered">Example 3-6</a> shows the definition
	of an interface named <tt class="literal">Centered</tt>. This
	interface defines the methods a <tt class="literal">Shape</tt>
	subclass should implement if it knows the x,y coordinate of
	its center point. </p>
<a name="javanut3-ch-3-ex-centered"></a>
<div class="example">
<h4 class="objtitle">Example 3-6. An Interface Definition</h4>
<blockquote>
<pre class="programlisting">public interface Centered {
  public void setCenter(double x, double y);
  public double getCenterX();
  public double getCenterY();
}</pre>
</blockquote>
</div>
<h3 class="sect2">3.7.2. Implementing an Interface</h3>
<p>
<a name="INDEX-513"></a>

        Just as a class uses
	<tt class="literal">extends</tt> to specify its superclass, it can use
	<tt class="literal">implements</tt> to name one or more interfaces it
	supports. <tt class="literal">implements</tt> is a Java keyword that can appear
	in a class declaration following the <tt class="literal">extends</tt>
	clause. <tt class="literal">implements</tt> should be followed by the
	name or names of the interface(s) the class implements, with 
	multiple names separated by commas. </p>
<p>	When a class
	declares an interface in its <tt class="literal">implements</tt>
	clause, it is saying that it provides an implementation
	(i.e., a body) for each method of that interface. If a
	class implements an interface but does not provide an
	implementation for every interface method, it
	inherits those unimplemented <tt class="literal">abstract</tt>
	methods from the interface and must itself be
	declared <tt class="literal">abstract</tt>. If a class implements
	more than one interface, it must implement every
	method of each interface it implements (or be
	declared <tt class="literal">abstract</tt>). </p>
<p>
<a href="#javanut3-ch-3-ex-centeredrect">Example 3-7</a> shows how we can
	define a <tt class="literal">CenteredRectangle</tt> class that extends
	our <tt class="literal">Rectangle</tt> class and implements the
	<tt class="literal">Centered</tt> interface we defined in <a href="#javanut3-ch-3-ex-centered">Example 3-6</a>. </p>
<a name="javanut3-ch-3-ex-centeredrect"></a>
<div class="example">
<h4 class="objtitle">Example 3-7. Implementing an Interface</h4>
<blockquote>
<pre class="programlisting">public class CenteredRectangle extends Rectangle implements Centered {
  // New instance fields
  private double cx, cy;

  // A constructor
  public CenteredRectangle(double cx, double cy, double w, double h) { 
    super(w, h); 
    this.cx = cx;
    this.cy = cy;
  }

  // We inherit all the methods of Rectangle, but must
  // provide implementations of all the Centered methods. 
  public void setCenter(double x, double y) { cx = x; cy = y; }
  public double getCenterX() { return cx; }
  public double getCenterY() { return cy; }
}</pre>
</blockquote>
</div>
<p>	As I noted earlier, constants can appear in an interface
	definition. Any class that
	implements the interface inherits the constants and can use them
	as if they were defined directly in the class. There is no need
	to prefix them with the name of the interface or
	provide any kind of implementation of the constants. When you have a set of constants used
	by more than one class (e.g., a port number and other protocol
	constants used by a client and server), 
	it can be convenient to define the necessary
	constants in an interface that contains no methods. Then, any
	class that wants to use those constants needs only to declare
	that it implements the
	interface. <tt class="literal">java.io.ObjectStreamConstants</tt> is
	just such an interface. </p>
<h3 class="sect2">3.7.3. Using Interfaces</h3>
<p>
<a name="INDEX-514"></a>

	Suppose we implement <tt class="literal">CenteredCircle</tt> and
	<tt class="literal">CenteredSquare</tt> just as we implemented
	<tt class="literal">CenteredRectangle</tt> in <a href="#javanut3-ch-3-ex-centeredrect">Example 3-7</a>. Since each 
	class extends <tt class="literal">Shape</tt>, instances of the 
	classes can be treated as
	instances of the <tt class="literal">Shape</tt> class, as we saw
	earlier. Since each class implements
	<tt class="literal">Centered</tt>, instances can also be treated as
	instances of that type. The following code demonstrates both
	techniques:
      </p>
<blockquote>
<pre class="programlisting">Shape[] shapes = new Shape[3];          // Create an array to hold shapes

// Create some centered shapes, and store them in the Shape[]
// No cast necessary: these are all widening conversions
shapes[0] = new CenteredCircle(1.0, 1.0, 1.0);
shapes[1] = new CenteredSquare(2.5, 2, 3);
shapes[2] = new CenteredRectangle(2.3, 4.5, 3, 4);

// Compute average area of the shapes and average distance from the origin
double totalArea = 0;
double totalDistance;
for(int i = 0; i &lt; shapes.length; i++) {
  totalArea += shapes[i].area();       // Compute the area of the shapes
  if (shapes[i] instanceof Centered) { // The shape is a Centered shape
    // Note the required cast from Shape to Centered (no cast
    // would be required to go from CenteredSquare to Centered, however). 
    Centered c = (Centered) shapes[i]; // Assign it to a Centered variable
    double cx = c.getCenterX();        // Get coordinates of the center
    double cy = c.getCenterY();        // Compute distance from origin
    totalDistance += Math.sqrt(cx*cx + cy*cy);
  }
}
System.out.println("Average area: " + totalArea/shapes.length);
System.out.println("Average distance: " + totalDistance/shapes.length);</pre>
</blockquote>
<p>	This example
	demonstrates that interfaces are data types in Java, just like
	classes. When a class implements an interface,
	instances of that class can be assigned to variables of the
	interface type. Don't interpret this example, however, to imply
	that you must assign a <tt class="literal">CenteredRectangle</tt>
	object to a <tt class="literal">Centered</tt> variable before you can
	invoke the <tt class="literal">setCenter()</tt> method or 
	to a <tt class="literal">Shape</tt> variable before you
	can invoke the <tt class="literal">area()</tt> method. <tt class="literal">CenteredRectangle</tt> defines
	<tt class="literal">setCenter()</tt> and inherits
	<tt class="literal">area()</tt> from its <tt class="literal">Rectangle</tt>
	superclass, so you can always invoke these methods. </p>
<h3 class="sect2">3.7.4. When to Use Interfaces</h3>
<p>	When defining an abstract type (e.g., <tt class="literal">Shape</tt>)
	that you expect to have many sub-types (e.g., 
	<tt class="literal">Circle</tt>, <tt class="literal">Rectangle</tt>, 
	<tt class="literal">Square</tt>), you are often faced with a choice
	between interfaces and abstract classes. Since they have
	similar features, it is not always clear when to use one over
	the other. </p>
<p>	An interface is useful because any class can implement it, even
	if that class extends some entirely unrelated superclass. But an interface is a pure API specification and
	contains no implementation. If an interface has numerous
	methods, it can become tedious to implement the methods over
	and over, especially when much of the implementation is
	duplicated by each implementing class. </p>
<p>	On the other hand, a class that extends an
	abstract class cannot extend any other class, which
	can cause design difficulties in some situations. However, an abstract
	class does not need to be entirely abstract; it can contain a partial
	implementation that subclasses can take advantage of. In some
	cases, numerous subclasses can rely on default method
	implementations provided by an abstract class. </p>
<p>Another important difference between interfaces and abstract classes
has to do with compatibility. If you define an interface as part of a
public API and then later add a new method to the interface, you break
any classes that implemented the previous version of the interface. If
you use an abstract clas, however, you can safely add nonabstract
methods to that class without requiring modifications to existing
classes that extend the abstract class. </p>
<p>	In some situations, it will be clear that an interface or
	an abstract class is the right design
	choice. In other cases, a common design pattern is to use both. First, define the type as a totally abstract interface. Then
	create an abstract class that implements the interface and
	provides useful default implementations subclasses can take
	advantage of. For example:
</p>
<blockquote>
<pre class="programlisting">// Here is a basic interface. It represents a shape that fits inside
// of a rectangular bounding box. Any class that wants to serve as a 
// RectangularShape can implement these methods from scratch. 
public interface RectangularShape {
  public void setSize(double width, double height);
  public void setPosition(double x, double y);
  public void translate(double dx, double dy);
  public double area();
  public boolean isInside();
}

// Here is a partial implementation of that interface. Many
// implementations may find this a useful starting point. 
public abstract class AbstractRectangularShape implements RectangularShape {
  // The position and size of the shape
  protected double x, y, w, h;

  // Default implementations of some of the interface methods
  public void setSize(double width, double height) { w = width; h = height; }
  public void setPosition(double x, double y) { this.x = x; this.y = y; }
  public void translate (double dx, double dy) { x += dx; y += dy; }
}</pre>
</blockquote>
<h3 class="sect2">3.7.5. Implementing Multiple Interfaces</h3>
<p>
<a name="INDEX-515"></a><a name="INDEX-516"></a>

	Suppose we want shape objects that can be positioned in
	terms of not only their center points, but also their upper-left
	corners. And suppose we also want shapes that can be scaled
	larger and smaller. Remember that although a class can
	extend only a single superclass, it can implement any number of
	interfaces. Assuming we have defined appropriate
	<tt class="literal">UpperRightCornered</tt> and <tt class="literal">Scalable</tt>
	interfaces, we can declare a class as follows:
</p>
<blockquote>
<pre class="programlisting">public class SuperDuperSquare extends Shape
       implements Centered, UpperRightCornered, Scalable {
   // class members omitted here. 
}</pre>
</blockquote>
<p>	When a class implements more than one interface, it simply means
	that it must provide implementations for all abstract
	methods in all its interfaces. </p>
<h3 class="sect2">3.7.6. Extending Interfaces</h3>
<p>
<a name="INDEX-517"></a>

	Interfaces can have subinterfaces, just as classes can have
	subclasses. A subinterface inherits all the abstract methods
	and constants of its superinterface and can define new
	abstract methods and constants. Interfaces are different from
	classes in one very important way, however: an interface can have
	an <tt class="literal">extends</tt> clause that lists more than one
	superinterface. For example, here are some interfaces that
	extend other interfaces:
      </p>
<blockquote>
<pre class="programlisting">public interface Positionable extends Centered {
  public setUpperRightCorner(double x, double y);
  public double getUpperRightX();
  public double getUpperRightY();
}
public interface Transformable extends Scalable, Translatable, Rotatable {}
public interface SuperShape implements Positionable, Transformable {}</pre>
</blockquote>
<p>	An interface that extends more than one interface inherits all
	the abstract methods and constants from each of those
	interfaces and can define its own additional abstract methods
	and constants. A class that implements such an interface must
	implement the abstract methods defined directly by the interface,
	as well as all the abstract methods inherited from all
	the superinterfaces. </p>
<h3 class="sect2">3.7.7. Marker Interfaces</h3>
<p>
<a name="INDEX-518"></a><a name="INDEX-519"></a><a name="INDEX-520"></a>

	Sometimes it is useful to define an interface
	that is entirely empty. A class can implement this interface 
	simply by naming it in its <tt class="literal">implements</tt> clause
	without having to implement any methods. In this case, 
	any instances of the class become valid
	instances of the interface. Java code can check whether an
	object is an instance of the interface using the
	<tt class="literal">instanceof</tt> operator, so this technique is a
	useful way to provide additional information about an object. The <tt class="literal">Cloneable</tt> interface in
	<tt class="literal">java.lang</tt> is an example of this type of
	<em class="emphasis">marker interface</em>. It defines no methods, but 
	identifies the class as one that allows its internal state to
	be cloned by the <tt class="literal">clone()</tt> method of the
	<tt class="literal">Object</tt> class. As of Java 1.1,
	<tt class="literal">java.io.Serializable</tt> is another such marker
	interface. Given an arbitrary object, you can determine whether
	it has a working <tt class="literal">clone()</tt> method with code
	like this:
</p>
<blockquote>
<pre class="programlisting">Object o;     // Initialized elsewhere
Object copy;
if (o instanceof Cloneable) copy = o.clone();
else copy = null;</pre>
</blockquote>

<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch03_06.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch03_06.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch03_08.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch03_08.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">3.6. Abstract Classes and Methods</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">3.8. Inner Class Overview</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
