<html>
<head>
<title>Data Hiding and Encapsulation (Java in a Nutshell)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="David Flanagan">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-487-8E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Data Hiding and Encapsulation">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm" alt="Java Enterprise in a Nutshell"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch03_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch03_04.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch03_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch03_01.htm">Chapter 3: Object-Oriented Programming in Java</a></td><td align="right" valign="top" width="172"><a href="ch03_06.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch03_06.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY --><h2 class="sect1">3.5. Data Hiding and Encapsulation</h2>
<p>
<a name="INDEX-487"></a><a name="INDEX-488"></a>

      We started this chapter by describing a class as "a collection of
      data and methods." One of the important object-oriented techniques
      we haven't discussed so far is hiding the data within the
      class and making it available only through the methods. This
      technique is known as <em class="emphasis">encapsulation</em>
      because it seals the data (and internal methods) safely
      inside the "capsule" of the class, where it can be accessed only
      by trusted users (i.e., by the methods of the class). </p>
<p>      Why would you want to do this?  The most important reason is to
      hide the internal implementation details of your class. If you
      prevent programmers from relying on those details, you can
      safely modify the implementation without worrying that you will
      break existing code that uses the class. </p>
<p>      Another reason for encapsulation is to protect your class against
      accidental or willful stupidity. A class often contains a number
      of interdependent fields that must be in a consistent
      state. If you allow a programmer (including yourself) to
      manipulate those fields directly, he may change one field
      without changing important related fields, thus leaving the
      class in an inconsistent state. If, instead, he has to call a
      method to change the field, that method can be sure to do
      everything necessary to keep the state consistent. Similarly, if
      a class defines certain methods for internal use only, hiding
      these methods prevents users of the class from calling
      them. </p>
<p>      Here's another way to think about encapsulation: when all the
      data for a class is hidden, the methods define the only
      possible operations that can be performed on objects of that
      class. Once you have carefully tested and debugged your methods,
      you can be confident that the class will work as expected. On the
      other hand, if all the fields of the class can be directly
      manipulated, the number of possibilities you have to test becomes
      unmanageable. </p>
<p>      There are other reasons to hide fields and methods of a class, as
      well:
      </p>
<ul>
<li>
<p>	  Internal fields and methods that are visible outside the
	  class just clutter up the API. Keeping visible
	  fields to a minimum keeps your class tidy and therefore 
	  easier to use
	  and understand. </p>
</li>
<li>
<p>	  If a field or method is visible to the users of your class,
	  you have to document it. Save yourself time and effort by
	  hiding it instead. </p>
</li>
</ul>
<h3 class="sect2">3.5.1. Access Control</h3>
<p>
<a name="INDEX-489"></a><a name="INDEX-490"></a>

	All the fields and methods of a class can always be used within
	the body of the class itself. Java defines access control rules
	that restrict members of a class from being used outside the
	class. In an number of examples in this chapter, you've seen the
	<tt class="literal">public</tt> modifier used in field and method
	declarations. This <tt class="literal">public</tt> keyword, along
	with <tt class="literal">protected</tt> and
	<tt class="literal">private</tt>, are <em class="emphasis">access</em><em class="emphasis">control</em><em class="emphasis">modifiers</em> ; they
	specify the access rules for the field or method. </p>
<h3 class="sect3">3.5.1.1. Access to packages</h3>
<p>
<a name="INDEX-491"></a>

	  A package is always accessible to code defined within the
	  package. Whether it is accessible to code from other
	  packages depends on the way the package is deployed on the host
	  system. When the class files that comprise a package are
	  stored in a directory, for example, a user must have read
	  access to the directory and the files within it in order to
	  have access to the package. Package access is not part of the
	  Java language itself. Access control is usually done at the
	  level of classes and members of classes instead. </p>
<h3 class="sect3">3.5.1.2. Access to classes</h3>
<p>
<a name="INDEX-492"></a>

	  By default, top-level classes are accessible within the
	  package in which they are defined. However, if a top-level
	  class is declared <tt class="literal">public</tt>, it is
	  accessible everywhere (or everywhere that the package itself
	  is accessible). The reason that we've restricted these
	  statements to top-level classes is that, as we'll see later
	  in this chapter, classes can also be defined as members of
	  other classes. Because these inner classes are members of a
	  class, they obey the member access-control rules. </p>
<h3 class="sect3">3.5.1.3. Access to members</h3>
<p>
<a name="INDEX-493"></a>

	  As I've already said, the members of a class are always
	  accessible within the body of the class. By default, members
	  are also accessible throughout the package in which the class
	  is defined. This implies that classes placed in the same
	  package should trust each other with their internal
	  implementation details.<a href="#FOOTNOTE-6">[6]</a>
	  This default level of access is often called <em class="emphasis">package</em><em class="emphasis">access</em>. It is only one of four possible levels of access. The other three levels of access are defined by the
	  <tt class="literal">public</tt>, <tt class="literal">protected</tt>, and
	  <tt class="literal">private</tt> modifiers. Here is some example
	  code that uses these modifiers:
</p>
<blockquote class="footnote">
<a name="FOOTNOTE-6"></a>
<p>[6]C++ programmers might
	  say that all classes within a package are
	  <tt class="literal">friend</tt>-ly to each other.</p>
</blockquote>
<blockquote>
<pre class="programlisting">public class Laundromat {      // People can use this class. 
  private Laundry[] dirty;     // They cannot use this internal field,
  public void wash() { ... }   // but they can use these public methods
  public void dry() { ... }    // to manipulate the internal field. 
}</pre>
</blockquote>
<p>
</p>
<p>	  Here are the access rules that apply to members of a class:

	  </p>
<ul>
<li>
<p>		If a member of a class is declared with the
		<tt class="literal">public</tt> modifier, it means that the
		member is accessible anywhere the containing class 
		is accessible. This is the least restrictive type of
		access control. </p>
</li>
<li>
<p>		If a member of a class is declared
		<tt class="literal">private</tt>, the member is never
		accessible, except within the class itself. This is the
		most restrictive type of access control. </p>
</li>
<li>
<p>		If a member of a class is declared
		<tt class="literal">protected</tt>, it is accessible to
		all classes within the package (the same as the default
		package accessibility) and also accessible
		within the body of any subclass of the class, regardless
		of the package in which that subclass is defined. This is
		more restrictive than <tt class="literal">public</tt> access,
		but less restrictive than package access. </p>
</li>
<li>
<p>	      If a member of a class is not declared with any of these
	      modifiers, it has the default package access: it is
	      accessible to code within all classes that are defined
	      in the same package, but inaccessible outside of the
	      package. </p>
</li>
</ul>
<p>
</p>
<p>
<tt class="literal">protected</tt> access requires a little more
	  elaboration. Suppose that the field <tt class="literal">r</tt> of
	  our <tt class="literal">Circle</tt> class had been declared
	  <tt class="literal">protected</tt> and that our
	  <tt class="literal">PlaneCircle</tt> class had been defined in a
	  different package. In this case, every 
	  <tt class="literal">PlaneCircle</tt>
	  object inherits the field <tt class="literal">r</tt>, and the
	  <tt class="literal">PlaneCircle</tt> code can use that field as it
	  currently does. Now suppose that <tt class="literal">PlaneCircle</tt> 
	  defines the
	  following method to compare the size of a
	  <tt class="literal">PlaneCircle</tt> object to the size of some
	  other <tt class="literal">Circle</tt> object:
</p>
<blockquote>
<pre class="programlisting">// Return true if this object is bigger than the specified circle
public boolean isBigger(Circle c) {
  return (this.r &gt; c.r);  // If r is protected, c.r is illegal access!
}</pre>
</blockquote>
<p>
	  In this scenario, this method does not compile. The expression
	  <tt class="literal">this.r</tt> is perfectly legal, since it
	  accesses a protected field inherited by
	  <tt class="literal">PlaneCircle</tt>. Accessing
	  <tt class="literal">c.r</tt> is not legal, however, since it is
	  attempting to access a protected field it does not
	  inherit. To make this method legal, we either have to declare
	  <tt class="literal">PlaneCircle</tt> in the same package as
	  <tt class="literal">Circle</tt> or change the type of the
	  <tt class="literal">isBigger()</tt> parameter to be a
	  <tt class="literal">PlaneCircle</tt> instead of a
	  <tt class="literal">Circle</tt>. </p>
<h3 class="sect3">3.5.1.4. Access control and inheritance</h3>
<p>
<a name="INDEX-494"></a>

	  The Java specification states that a subclass inherits all the
	  instance fields and instance methods of its superclass accessible to it. If the subclass is defined in the same
	  package as the superclass, it inherits all
	  non-<tt class="literal">private</tt> instance fields and methods. If the subclass is defined in a different package, however, it
	  inherits all <tt class="literal">protected</tt> and
	  <tt class="literal">public</tt> instance fields and methods. <tt class="literal">private</tt> fields and methods are never
	  inherited; neither are class fields or class methods. Finally, constructors are not inherited; they are chained, as
	  described earlier in this chapter. </p>
<p>	  The statement that a subclass does not inherit the
	  inaccessible fields and methods of its superclass can be a
	  confusing one. It would seem to imply that when you create an
	  instance of a subclass, no memory is allocated for any
	  <tt class="literal">private</tt> fields defined by the superclass. This is not the intent of the statement, however. Every
	  instance of a subclass does, in fact, include a complete
	  instance of the superclass within it, including all
	  inaccessible fields and methods. It is simply a matter of terminology. Because the inaccessible
	  fields cannot be used in the subclass, we say they are
	  not inherited. I stated earlier in this section that the
	  members of a class are always accessible within the body of
	  the class. If this statement is to apply to all members of
	  the class, including inherited members, then we have to define
	  "inherited members" to include only those members that are
	  accessible. If you don't care for this definition, you can
	  think of it this way instead:
	  </p>
<ul>
<li>
<p>		A class inherits <em class="emphasis">all</em> instance fields 
		and instance methods (but not constructors) of its superclass. </p>
</li>
<li>
<p>		The body of a class can always access all the fields
		and methods it declares itself. It can also access
		the <em class="emphasis">accessible</em> 
		fields and members it inherits from
		its superclass. </p>
</li>
</ul>
<p>
</p>
<h3 class="sect3">3.5.1.5. Member access summary</h3>
<p>
<a href="#javanut3-ch-3-tab-1">Table 3-1</a>
	  summarizes the member access rules. </p>
<a name="javanut3-ch-3-tab-1"></a>
<h4 class="objtitle">Table 3-1. Class Member Accessibility</h4>
<table border="1">
<tr>
<th></th><th>Member Visibility</th>
</tr>
<tr>
<th>Accessible to:</th><th>public</th><th>protected</th><th>package</th><th>private</th>
</tr>
<tr>
<td>Defining class</td><td>Yes</td><td>Yes</td><td>Yes</td><td>Yes</td>
</tr>
<tr>
<td>Class in same package</td><td>Yes</td><td>Yes</td><td>Yes</td><td>No</td>
</tr>
<a name="INDEX-495"></a>
<a name="INDEX-496"></a>
<tr>
<td>Subclass in different package</td><td>Yes</td><td>Yes</td><td>No</td><td>No</td>
</tr>
<tr>
<td>Non-subclass different package</td><td>Yes</td><td>No</td><td>No</td><td>No</td>
</tr>
</table>
<p>	  Here are some simple rules of thumb for using
	  visibility modifiers:
	  </p>
<ul>
<li>
<p>		Use <tt class="literal">public</tt> only for methods and constants
		that form part of the public API of the class. Certain
		important or frequently used fields can also be
		<tt class="literal">public</tt>, but it is common practice to make
		fields non-<tt class="literal">public</tt> and encapsulate them
		with <tt class="literal">public</tt> accessor methods. </p>
</li>
<li>
<p>		Use <tt class="literal">protected</tt> for fields
		and methods that aren't required by most programmers
		using the class, but that may be of interest to anyone
		creating a subclass as part of a different package. Note that <tt class="literal">protected</tt> members are
		technically part of the exported API of a class. They
		should be documented and cannot be changed without
		potentially breaking code that relies on them. </p>
</li>
<li>
<p>		Use the default package visibility for fields and
		methods that are internal implementation details, but
		are used by cooperating classes in the same
		package. You cannot take real advantage of
		package visibility unless you use the
		<tt class="literal">package</tt> directive to group your
		cooperating classes into a package. </p>
</li>
<li>
<p>		Use <tt class="literal">private</tt> for fields
		and methods that are used only inside the class and
		should be hidden everywhere else. </p>
</li>
</ul>
<p>
	    If you are not sure
	    whether to use <tt class="literal">protected</tt>,
	    package, or <tt class="literal">private</tt>
	    accessibility, it is better to start with overly
	    restrictive member access. You can always relax the
	    access restrictions in future versions of your class, if
	    necessary. Doing the reverse is not a good idea because
	    increasing access restrictions is not a backwards-compatible change.

<a name="INDEX-497"></a>
</p>
<h3 class="sect2">3.5.2. Data Accessor Methods</h3>
<p>
<a name="INDEX-498"></a><a name="INDEX-499"></a>

	In the <tt class="literal">Circle</tt> example we've been using, we've
	declared the circle radius to be a <tt class="literal">public</tt>
	field. The <tt class="literal">Circle</tt> class is one in which it
	may well be reasonable to keep that field publicly
	accessible; it is a simple enough class, with no
	dependencies between its fields. On the other hand, our current implementation of the class allows a
	<tt class="literal">Circle</tt> object to have a negative radius, and
	circles with negative radii should simply not exist. As long
	as the radius is stored in a <tt class="literal">public</tt> field,
	however, any programmer can set the field to any value she
	wants, no matter how unreasonable. The only solution is to
	restrict the programmer's direct access to the field and
	define <tt class="literal">public</tt> methods that provide indirect
	access to the field. Providing <tt class="literal">public</tt>
	methods to read and write a field is not the same as making the
	field itself <tt class="literal">public</tt>. The crucial difference
	is that methods can perform error checking. </p>
<p>
<a href="#javanut3-ch-3-ex-poscircle">Example 3-4</a> shows how we might
	reimplement <tt class="literal">Circle</tt> to prevent circles with
	negative radii. This version of <tt class="literal">Circle</tt>
	declares the <tt class="literal">r</tt> field to be
	<tt class="literal">protected</tt> and defines accessor methods named
	<tt class="literal">getRadius()</tt> and
	<tt class="literal">setRadius()</tt> to read and write the field value
	while enforcing the restriction on negative radius values. Because the <tt class="literal">r</tt> field is
	<tt class="literal">protected</tt>, it is directly (and more
	efficiently) accessible to subclasses. </p>
<a name="javanut3-ch-3-ex-poscircle"></a>
<div class="example">
<h4 class="objtitle">Example 3-4. The Circle Class Using Data Hiding and Encapsulation</h4>
<blockquote>
<pre class="programlisting">package shapes;           // Specify a package for the class

public class Circle {     // The class is still public
  // This is a generally useful constant, so we keep it public
  public static final double PI = 3.14159;

  protected double r;     // Radius is hidden, but visible to subclasses

  // A method to enforce the restriction on the radius
  // This is an implementation detail that may be of interest to subclasses
  protected checkRadius(double radius) { 
    if (radius &lt; 0.0) 
      throw new IllegalArgumentException("radius may not be negative.");
  }

  // The constructor method
  public Circle(double r) {
    checkRadius(r);
    this.r = r;
  }

  // Public data accessor methods
  public double getRadius() { return r; };
  public void setRadius(double r) { 
    checkRadius(r);
    this.r = r;
  }

  // Methods to operate on the instance field
  public double area() { return PI * r * r; }
  public double circumference() { return 2 * PI * r; }
}</pre>
</blockquote>
</div>
<p>	We have defined the
	<tt class="literal">Circle</tt> class within a package named
	<tt class="literal">shapes</tt>. Since <tt class="literal">r</tt> is
	<tt class="literal">protected</tt>, any other classes in the
	<tt class="literal">shapes</tt> package have direct access to that
	field and can set it however they like. The assumption here is
	that all classes within the <tt class="literal">shapes</tt> package
	were written by the same author or a closely cooperating
	group of authors, and that the classes all trust each other
	not to abuse their privileged level of access to each other's
	implementation details. </p>
<p>	Finally, the code that enforces the restriction
	against negative radius values is itself placed within a
	<tt class="literal">protected</tt> method,
	<tt class="literal">checkRadius()</tt>. Although users of the
	<tt class="literal">Circle</tt> class cannot call this method,
	subclasses of the class can call it and even override
	it if they want to change the restrictions on the radius. </p>
<p>	Note particularly the <tt class="literal">getRadius()</tt> and
	<tt class="literal">setRadius()</tt> methods of <a href="#javanut3-ch-3-ex-poscircle">Example 3-4</a>. It is almost universal
	in Java that data accessor methods begin with the prefixes "get"
	and "set."  If the field being accessed is of type
	<tt class="literal">boolean</tt>, however, the
	<tt class="literal">get()</tt> method may be replaced with an
	equivalent method that begins with "is."  For example, the
	accessor method for a <tt class="literal">boolean</tt> field named
	<tt class="literal">readable</tt> is typically called
	<tt class="literal">isReadable()</tt> instead of
	<tt class="literal">getReadable()</tt>. In the programming
	conventions of the JavaBeans component model (covered in <a href="ch06_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch06_01.htm">Chapter 6, "JavaBeans"</a>), a hidden field with one or more
	data accessor methods whose names begin with "get," "is," or
	"set" is called a <em class="emphasis">property</em>. An interesting
	way to study a complex class is to look at the set of
	properties it defines. Properties 
	are particularly common in the AWT and Swing
	APIs, which are covered in <em class="emphasis">Java Foundation Classes in
	a Nutshell</em> (O'Reilly).
<a name="INDEX-500"></a><a name="INDEX-501"></a><a name="INDEX-502"></a><a name="INDEX-503"></a><a name="INDEX-504"></a>
</p>

<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch03_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch03_04.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch03_06.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch03_06.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">3.4. Subclasses and Inheritance</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">3.6. Abstract Classes and Methods</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
