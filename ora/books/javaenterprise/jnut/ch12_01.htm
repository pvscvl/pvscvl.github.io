<html>
<head>
<title>The java.lang Package (Java in a Nutshell)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="David Flanagan">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-487-8E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="The java.lang Package">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm" alt="Java Enterprise in a Nutshell"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch11_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch11_01.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="part2.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/part2.htm">Part 2: API Quick Reference</a></td><td align="right" valign="top" width="172"><a href="ch13_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch13_01.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY --><h1 class="chapter">Chapter 12.  The java.lang Package</h1>

<p>
<a name="INDEX-1698"></a>

The <tt class="literal">java.lang</tt> package contains the classes that are
most central to the Java language. As you can see from
<a href="#javanut3-java.lang-1">Figure 12-1</a>,
the class hierarchy is broad rather than deep, which means
that the classes are independent of each other. </p>

<a name="javanut3-java.lang-1"></a>
<div class="figure">
<img alt="figure" src="figs/JN3_1201.gif" webstripperlinkwas="figs/JN3_1201.gif"></div>
<h4 class="objtitle">Figure 12-1. The java.lang package</h4>

<p>
<a name="INDEX-1699"></a><a name="INDEX-1700"></a><tt class="literal">Object</tt> is the ultimate superclass of all Java
classes and is therefore at the top of all class
hierarchies. <tt class="literal">Class</tt> is a class that describes a Java
class. There is one <tt class="literal">Class</tt> object for each class
that is loaded into Java. </p>
<p>
<a name="INDEX-1701"></a><a name="INDEX-1702"></a><a name="INDEX-1703"></a><a name="INDEX-1704"></a><a name="INDEX-1705"></a><a name="INDEX-1706"></a><a name="INDEX-1707"></a><tt class="literal">Boolean</tt>, <tt class="literal">Character</tt>, <tt class="literal">Byte</tt>,
<tt class="literal">Short</tt>, <tt class="literal">Integer</tt>, <tt class="literal">Long</tt>,
<tt class="literal">Float</tt>, and <tt class="literal">Double</tt> are immutable class wrappers
around each of the primitive Java data types. These classes are useful
when you need to manipulate primitive types as objects. They also
contain useful conversion and utility methods. <a name="INDEX-1708"></a><a name="INDEX-1709"></a><tt class="literal">String</tt> and <tt class="literal">StringBuffer</tt> are objects that
  represent strings. <tt class="literal">String</tt> is an immutable type, while
  <tt class="literal">StringBuffer</tt> can have its string changed in place. In
  Java 1.2 and later, all these classes (except <tt class="literal">StringBuffer</tt>)
  implement the <tt class="literal">Comparable</tt> interface, which enables
  sorting and searching algorithms. <a name="INDEX-1710"></a>
  The <tt class="literal">Math</tt> class (and, in Java 1.3, the 
  <tt class="literal">StrictMath</tt> class) defines static methods for various
  floating-point mathematical functions. </p>
<p>
<a name="INDEX-1711"></a>
  The <tt class="literal">Thread</tt> class provides support for multiple
  threads of control running within the same Java interpreter. The
  <tt class="literal">Runnable</tt> interface is implemented by objects that
  have a <tt class="literal">run()</tt> method that can serve as the body of a
  thread. </p>
<p>
<a name="INDEX-1712"></a><a name="INDEX-1713"></a><a name="INDEX-1714"></a><tt class="literal">System</tt> provides low-level system methods. <tt class="literal">Runtime</tt> provides similar low-level methods, including an
  <tt class="literal">exec()</tt> method that, along with the
  <tt class="literal">Process</tt> class, defines an API for running external
  processes. </p>
<p>
<a name="INDEX-1715"></a><a name="INDEX-1716"></a><tt class="literal">Throwable</tt> is the root class of the exception and
error hierarchy. <tt class="literal">Throwable</tt> objects are used with the
Java <tt class="literal">throw</tt> and <tt class="literal">catch</tt> statements. <tt class="literal">java.lang</tt> defines quite a few subclasses of
<tt class="literal">Throwable</tt>. <tt class="literal">Exception</tt> and <tt class="literal">Error</tt> are
the superclasses of all exceptions and errors. <a name="INDEX-1717"></a><a name="INDEX-1718"></a><a href="#javanut3-java.lang-2">Figure 12-2</a>
and
<a href="#javanut3-java.lang-3">Figure 12-3</a>
show the class hierarchies for these core Java exceptions
and errors.</p>

<a name="javanut3-java.lang-2"></a>
<div class="figure">
<img alt="figure" src="figs/JN3_1202.gif" webstripperlinkwas="figs/JN3_1202.gif"></div>
<h4 class="objtitle">Figure 12-2. The exception classes in the java.lang package</h4>

<a name="javanut3-java.lang-3"></a>
<div class="figure">
<img alt="figure" src="figs/JN3_1203.gif" webstripperlinkwas="figs/JN3_1203.gif"></div>
<h4 class="objtitle">Figure 12-3. The error classes in the java.lang package</h4>


<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>AbstractMethodError</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.lang</b></font></td><td align="right"><font size="+1"><b><i>serializable error PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1719"></a><a name="INDEX-1720"></a>

Signals an attempt to invoke an abstract method. </p>

<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">AbstractMethodError</b> extends IncompatibleClassChangeError {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">AbstractMethodError</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">AbstractMethodError</b> (String <i class="parameter">s</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Error-->LinkageError-->IncompatibleClassChangeError-->AbstractMethodError</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>ArithmeticException</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.lang</b></font></td><td align="right"><font size="+1"><b><i>serializable unchecked PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1721"></a><a name="INDEX-1722"></a>

A <tt class="literal">RuntimeException</tt> that signals an exceptional
arithmetic condition, such as integer division by zero. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">ArithmeticException</b> extends RuntimeException {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">ArithmeticException</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">ArithmeticException</b> (String <i class="parameter">s</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Exception-->RuntimeException-->ArithmeticException</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>ArrayIndexOutOfBoundsException</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.lang</b></font></td><td align="right"><font size="+1"><b><i>serializable unchecked PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1723"></a>

Signals that an array index less than zero or greater than
or equal to the array size has been used. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">ArrayIndexOutOfBoundsException</b> extends IndexOutOfBoundsException {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">ArrayIndexOutOfBoundsException</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">ArrayIndexOutOfBoundsException</b> (String <i class="parameter">s</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">ArrayIndexOutOfBoundsException</b> (int <i class="parameter">index</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Exception-->RuntimeException-->IndexOutOfBoundsException-->ArrayIndexOutOfBoundsException</tt>
</p>
<p>
<span class="refsect1">Thrown By: </span>Too many methods to list. </p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>ArrayStoreException</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.lang</b></font></td><td align="right"><font size="+1"><b><i>serializable unchecked PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1724"></a>

Signals an attempt to store the wrong type of object into an
array. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">ArrayStoreException</b> extends RuntimeException {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">ArrayStoreException</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">ArrayStoreException</b> (String <i class="parameter">s</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Exception-->RuntimeException-->ArrayStoreException</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>Boolean</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.lang</b></font></td><td align="right"><font size="+1"><b><i>serializable PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1725"></a><a name="INDEX-1726"></a><a name="INDEX-1727"></a><a name="INDEX-1728"></a>

This class provides an immutable object wrapper around the
<tt class="literal">boolean</tt> primitive type. Note that the <tt class="literal">TRUE</tt>
and <tt class="literal">FALSE</tt> constants are <tt class="literal">Boolean</tt>
objects; they are not the same as the <tt class="literal">true</tt> and
<tt class="literal">false</tt><tt class="literal">boolean</tt> values. As of Java 1.1, this class
defines a <tt class="literal">Class</tt> constant that represents the <tt class="literal">boolean</tt>
type. <a name="INDEX-1729"></a><a name="INDEX-1730"></a><tt class="literal">booleanValue()</tt> returns the <tt class="literal">boolean</tt> value of
a <tt class="literal">Boolean</tt> object. The class method
<tt class="literal">getBoolean()</tt> retrieves the <tt class="literal">boolean</tt> value of
a named property from the system property list. The class method <tt class="literal">valueOf()</tt> parses
a string and returns the <tt class="literal">boolean</tt> value it
represents. <a name="INDEX-1731"></a>
</p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public final class <b class="classname">Boolean</b> implements Serializable {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">Boolean</b> (boolean <i class="parameter">value</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">Boolean</b> (String <i class="parameter">s</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constants</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final Boolean <b class="function">FALSE</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final Boolean <b class="function">TRUE</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public static final Class <b class="function">TYPE</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Class Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static boolean <b class="function">getBoolean</b> (String <i class="parameter">name</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static Boolean <b class="function">valueOf</b> (String <i class="parameter">s</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">booleanValue</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Object</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">equals</b> (Object <i class="parameter">obj</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">hashCode</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">toString</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Boolean(Serializable)</tt>
</p>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">javax.swing.DefaultDesktopManager.setWasIcon()</tt>
</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">Boolean.valueOf(), javax.swing.filechooser.FileView.isTraversable()</tt>
</p>
<p>
<span class="refsect1">Type Of: </span><tt class="literal">java.awt.font.TextAttribute.{RUN_DIRECTION_LTR, RUN_DIRECTION_RTL, STRIKETHROUGH_ON, SWAP_COLORS_ON}, Boolean.{FALSE, TRUE}</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>Byte</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.lang</b></font></td><td align="right"><font size="+1"><b><i>serializable comparable PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1732"></a>
This class provides an object wrapper around the
<tt class="literal">byte</tt> primitive type. It defines useful constants
for the minimum and maximum values that can be stored by the
<tt class="literal">byte</tt> type and a <tt class="literal">Class</tt> object constant
that represents the <tt class="literal">byte</tt> type. It also provides
various methods for
converting <tt class="literal">Byte</tt> values to and from strings and other numeric types. </p>
<p>
<a name="INDEX-1733"></a><a name="INDEX-1734"></a>
Most of the static methods of this class can convert
a <tt class="literal">String</tt> to a <tt class="literal">Byte</tt> object or a <tt class="literal">byte</tt>
value: the four <tt class="literal">parseByte()</tt> and <tt class="literal">valueOf()</tt>
methods parse a number from the specified string using an
optionally specified radix and return it in one of these two
<a name="INDEX-1735"></a>
forms. The <tt class="literal">decode()</tt> method parses a byte specified
in base 10, base 8, or base 16 and returns it as a
<tt class="literal">Byte</tt>. If the string begins with "0x" or "#", it is
interpreted as a hexadecimal number. If it begins with
"0", it is interpreted as an octal number. Otherwise, it is
interpreted as a decimal number. </p>
<p>
<a name="INDEX-1736"></a>
Note that this class has two <tt class="literal">toString()</tt>
methods. One is static and converts a <tt class="literal">byte</tt>
primitive value to a string; the other is the usual
<tt class="literal">toString()</tt> method that converts a <tt class="literal">Byte</tt>
object to a string. Most of the remaining methods convert a
<tt class="literal">Byte</tt> to various primitive numeric types. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public final class <b class="classname">Byte</b> extends Number implements Comparable {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">Byte</b> (byte <i class="parameter">value</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">Byte</b> (String <i class="parameter">s</i>) throws NumberFormatException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constants</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final byte <b class="function">MAX_VALUE</b> ;</td><td align="right"><i> =127</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final byte <b class="function">MIN_VALUE</b> ;</td><td align="right"><i> =-128</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final Class <b class="function">TYPE</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Class Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static Byte <b class="function">decode</b> (String <i class="parameter">nm</i>) throws NumberFormatException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static byte <b class="function">parseByte</b> (String <i class="parameter">s</i>) throws NumberFormatException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static byte <b class="function">parseByte</b> (String <i class="parameter">s</i>, int <i class="parameter">radix</i>) throws NumberFormatException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static String <b class="function">toString</b> (byte <i class="parameter">b</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static Byte <b class="function">valueOf</b> (String <i class="parameter">s</i>) throws NumberFormatException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static Byte <b class="function">valueOf</b> (String <i class="parameter">s</i>, int <i class="parameter">radix</i>) throws NumberFormatException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public int <b class="function">compareTo</b> (Byte <i class="parameter">anotherByte</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Methods Implementing Comparable</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public int <b class="function">compareTo</b> (Object <i class="parameter">o</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Number</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public byte <b class="function">byteValue</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public double <b class="function">doubleValue</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public float <b class="function">floatValue</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">intValue</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public long <b class="function">longValue</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public short <b class="function">shortValue</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Object</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">equals</b> (Object <i class="parameter">obj</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">hashCode</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">toString</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Number(Serializable)-->Byte(Comparable)</tt>
</p>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">Byte.compareTo()</tt>
</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">Byte.{decode(), valueOf()}</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>Character</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.lang</b></font></td><td align="right"><font size="+1"><b><i>serializable comparable PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1737"></a><a name="INDEX-1738"></a><a name="INDEX-1739"></a><a name="INDEX-1740"></a><a name="INDEX-1741"></a>
This class provides an immutable object wrapper around the
primitive <tt class="literal">char</tt> data type. <tt class="literal">charValue()</tt>
returns the <tt class="literal">char</tt> value of a <tt class="literal">Character</tt>
object. A number of class methods provide the Java/Unicode
equivalent of the C <em class="emphasis">&lt;ctype.h&gt;</em> character macros for
checking the type of characters and converting to uppercase
and lowercase letters. <tt class="literal">getType()</tt> returns the
<a name="INDEX-1742"></a>
character type. The return value is one of the constants
defined by the class, which represents a number of broad
Unicode character categories. <tt class="literal">digit()</tt> returns the integer
<a name="INDEX-1743"></a><a name="INDEX-1744"></a>
equivalent of a given character for a given radix
(e.g., radix 16 for hexadecimal). <tt class="literal">forDigit()</tt> returns
the character that corresponds to the specified value for
the specified radix. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public final class <b class="classname">Character</b> implements ComparableSerializable {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">Character</b> (char <i class="parameter">value</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constants</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public static final byte <b class="function">COMBINING_SPACING_MARK</b> ;</td><td align="right"><i> =8</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public static final byte <b class="function">CONNECTOR_PUNCTUATION</b> ;</td><td align="right"><i> =23</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public static final byte <b class="function">CONTROL</b> ;</td><td align="right"><i> =15</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public static final byte <b class="function">CURRENCY_SYMBOL</b> ;</td><td align="right"><i> =26</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public static final byte <b class="function">DASH_PUNCTUATION</b> ;</td><td align="right"><i> =20</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public static final byte <b class="function">DECIMAL_DIGIT_NUMBER</b> ;</td><td align="right"><i> =9</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public static final byte <b class="function">ENCLOSING_MARK</b> ;</td><td align="right"><i> =7</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public static final byte <b class="function">END_PUNCTUATION</b> ;</td><td align="right"><i> =22</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public static final byte <b class="function">FORMAT</b> ;</td><td align="right"><i> =16</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public static final byte <b class="function">LETTER_NUMBER</b> ;</td><td align="right"><i> =10</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public static final byte <b class="function">LINE_SEPARATOR</b> ;</td><td align="right"><i> =13</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public static final byte <b class="function">LOWERCASE_LETTER</b> ;</td><td align="right"><i> =2</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public static final byte <b class="function">MATH_SYMBOL</b> ;</td><td align="right"><i> =25</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">MAX_RADIX</b> ;</td><td align="right"><i> =36</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final char <b class="function">MAX_VALUE</b> ;</td><td align="right"><i> ='\uFFFF'</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">MIN_RADIX</b> ;</td><td align="right"><i> =2</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final char <b class="function">MIN_VALUE</b> ;</td><td align="right"><i> ='\0'</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public static final byte <b class="function">MODIFIER_LETTER</b> ;</td><td align="right"><i> =4</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public static final byte <b class="function">MODIFIER_SYMBOL</b> ;</td><td align="right"><i> =27</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public static final byte <b class="function">NON_SPACING_MARK</b> ;</td><td align="right"><i> =6</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public static final byte <b class="function">OTHER_LETTER</b> ;</td><td align="right"><i> =5</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public static final byte <b class="function">OTHER_NUMBER</b> ;</td><td align="right"><i> =11</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public static final byte <b class="function">OTHER_PUNCTUATION</b> ;</td><td align="right"><i> =24</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public static final byte <b class="function">OTHER_SYMBOL</b> ;</td><td align="right"><i> =28</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public static final byte <b class="function">PARAGRAPH_SEPARATOR</b> ;</td><td align="right"><i> =14</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public static final byte <b class="function">PRIVATE_USE</b> ;</td><td align="right"><i> =18</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public static final byte <b class="function">SPACE_SEPARATOR</b> ;</td><td align="right"><i> =12</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public static final byte <b class="function">START_PUNCTUATION</b> ;</td><td align="right"><i> =21</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public static final byte <b class="function">SURROGATE</b> ;</td><td align="right"><i> =19</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public static final byte <b class="function">TITLECASE_LETTER</b> ;</td><td align="right"><i> =3</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public static final Class <b class="function">TYPE</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public static final byte <b class="function">UNASSIGNED</b> ;</td><td align="right"><i> =0</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public static final byte <b class="function">UPPERCASE_LETTER</b> ;</td><td align="right"><i> =1</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Inner Classes</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Class Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static int <b class="function">digit</b> (char <i class="parameter">ch</i>, int <i class="parameter">radix</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static char <b class="function">forDigit</b> (int <i class="parameter">digit</i>, int <i class="parameter">radix</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public static int <b class="function">getNumericValue</b> (char <i class="parameter">ch</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public static int <b class="function">getType</b> (char <i class="parameter">ch</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static boolean <b class="function">isDefined</b> (char <i class="parameter">ch</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static boolean <b class="function">isDigit</b> (char <i class="parameter">ch</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public static boolean <b class="function">isIdentifierIgnorable</b> (char <i class="parameter">ch</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public static boolean <b class="function">isISOControl</b> (char <i class="parameter">ch</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public static boolean <b class="function">isJavaIdentifierPart</b> (char <i class="parameter">ch</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public static boolean <b class="function">isJavaIdentifierStart</b> (char <i class="parameter">ch</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static boolean <b class="function">isLetter</b> (char <i class="parameter">ch</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static boolean <b class="function">isLetterOrDigit</b> (char <i class="parameter">ch</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static boolean <b class="function">isLowerCase</b> (char <i class="parameter">ch</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public static boolean <b class="function">isSpaceChar</b> (char <i class="parameter">ch</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static boolean <b class="function">isTitleCase</b> (char <i class="parameter">ch</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public static boolean <b class="function">isUnicodeIdentifierPart</b> (char <i class="parameter">ch</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public static boolean <b class="function">isUnicodeIdentifierStart</b> (char <i class="parameter">ch</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static boolean <b class="function">isUpperCase</b> (char <i class="parameter">ch</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public static boolean <b class="function">isWhitespace</b> (char <i class="parameter">ch</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static char <b class="function">toLowerCase</b> (char <i class="parameter">ch</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static char <b class="function">toTitleCase</b> (char <i class="parameter">ch</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static char <b class="function">toUpperCase</b> (char <i class="parameter">ch</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public char <b class="function">charValue</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public int <b class="function">compareTo</b> (Character <i class="parameter">anotherCharacter</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Methods Implementing Comparable</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public int <b class="function">compareTo</b> (Object <i class="parameter">o</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Object</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">equals</b> (Object <i class="parameter">obj</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">hashCode</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">toString</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Deprecated Public Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">#</span></td><td align="left">public static boolean <b class="function">isJavaLetter</b> (char <i class="parameter">ch</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">#</span></td><td align="left">public static boolean <b class="function">isJavaLetterOrDigit</b> (char <i class="parameter">ch</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">#</span></td><td align="left">public static boolean <b class="function">isSpace</b> (char <i class="parameter">ch</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Character(Comparable,Serializable)</tt>
</p>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">Character.compareTo()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>Character.Subset</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.lang</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-1745"></a><a name="INDEX-1746"></a><a name="INDEX-1747"></a><a name="INDEX-1748"></a>
  This class represents a named subset of the Unicode character set. The <tt class="literal">toString()</tt> method returns the name of the
  subset. This is a base class intended for further subclassing. Note,
  in particular, that it does not provide a way to list the members of
  the subset, nor a way to test for membership in the subset. See <tt class="literal">Character.UnicodeBlock</tt>. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public static class <b class="classname">Character.Subset</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected <b class="function">Subset</b> (String <i class="parameter">name</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Object</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final boolean <b class="function">equals</b> (Object <i class="parameter">obj</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final int <b class="function">hashCode</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final String <b class="function">toString</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Subclasses: </span><tt class="literal">java.awt.im.InputSubset, Character.UnicodeBlock</tt>
</p>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">java.awt.im.InputContext.setCharacterSubsets(), java.awt.im.spi.InputMethod.setCharacterSubsets()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>Character.UnicodeBlock</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.lang</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-1749"></a><a name="INDEX-1750"></a><a name="INDEX-1751"></a>
  This subclass of <tt class="literal">Character.Subset</tt> defines a
  number of constants that represent named subsets of the Unicode
  character set. The subsets and their names are the "character
  blocks" defined by the Unicode 2.0 specification (see
  <a href="../../../../../../../www.unicode.org/">http://www.unicode.org/</a>&#8202;). The static method
  <tt class="literal">of()</tt> takes a character and returns the
  <tt class="literal">Character.UnicodeBlock</tt> to which it belongs, or
  <tt class="literal">null</tt> if it is not part of any defined block. When
  presented with an unknown Unicode character, this method provides a
  useful way to determine what alphabet it belongs to. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public static final class <b class="classname">Character.UnicodeBlock</b> extends Character.Subset {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">No Constructor</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constants</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final Character.UnicodeBlock <b class="function">ALPHABETIC_PRESENTATION_FORMS</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final Character.UnicodeBlock <b class="function">ARABIC</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final Character.UnicodeBlock <b class="function">ARABIC_PRESENTATION_FORMS_A</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final Character.UnicodeBlock <b class="function">ARABIC_PRESENTATION_FORMS_B</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final Character.UnicodeBlock <b class="function">ARMENIAN</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final Character.UnicodeBlock <b class="function">ARROWS</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final Character.UnicodeBlock <b class="function">BASIC_LATIN</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final Character.UnicodeBlock <b class="function">BENGALI</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final Character.UnicodeBlock <b class="function">BLOCK_ELEMENTS</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final Character.UnicodeBlock <b class="function">BOPOMOFO</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final Character.UnicodeBlock <b class="function">BOX_DRAWING</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final Character.UnicodeBlock <b class="function">CJK_COMPATIBILITY</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final Character.UnicodeBlock <b class="function">CJK_COMPATIBILITY_FORMS</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final Character.UnicodeBlock <b class="function">CJK_COMPATIBILITY_IDEOGRAPHS</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final Character.UnicodeBlock <b class="function">CJK_SYMBOLS_AND_PUNCTUATION</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final Character.UnicodeBlock <b class="function">CJK_UNIFIED_IDEOGRAPHS</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final Character.UnicodeBlock <b class="function">COMBINING_DIACRITICAL_MARKS</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final Character.UnicodeBlock <b class="function">COMBINING_HALF_MARKS</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final Character.UnicodeBlock <b class="function">COMBINING_MARKS_FOR_SYMBOLS</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final Character.UnicodeBlock <b class="function">CONTROL_PICTURES</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final Character.UnicodeBlock <b class="function">CURRENCY_SYMBOLS</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final Character.UnicodeBlock <b class="function">CYRILLIC</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final Character.UnicodeBlock <b class="function">DEVANAGARI</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final Character.UnicodeBlock <b class="function">DINGBATS</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final Character.UnicodeBlock <b class="function">ENCLOSED_ALPHANUMERICS</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final Character.UnicodeBlock <b class="function">ENCLOSED_CJK_LETTERS_AND_MONTHS</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final Character.UnicodeBlock <b class="function">GENERAL_PUNCTUATION</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final Character.UnicodeBlock <b class="function">GEOMETRIC_SHAPES</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final Character.UnicodeBlock <b class="function">GEORGIAN</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final Character.UnicodeBlock <b class="function">GREEK</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final Character.UnicodeBlock <b class="function">GREEK_EXTENDED</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final Character.UnicodeBlock <b class="function">GUJARATI</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final Character.UnicodeBlock <b class="function">GURMUKHI</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final Character.UnicodeBlock <b class="function">HALFWIDTH_AND_FULLWIDTH_FORMS</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final Character.UnicodeBlock <b class="function">HANGUL_COMPATIBILITY_JAMO</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final Character.UnicodeBlock <b class="function">HANGUL_JAMO</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final Character.UnicodeBlock <b class="function">HANGUL_SYLLABLES</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final Character.UnicodeBlock <b class="function">HEBREW</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final Character.UnicodeBlock <b class="function">HIRAGANA</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final Character.UnicodeBlock <b class="function">IPA_EXTENSIONS</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final Character.UnicodeBlock <b class="function">KANBUN</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final Character.UnicodeBlock <b class="function">KANNADA</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final Character.UnicodeBlock <b class="function">KATAKANA</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final Character.UnicodeBlock <b class="function">LAO</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final Character.UnicodeBlock <b class="function">LATIN_1_SUPPLEMENT</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final Character.UnicodeBlock <b class="function">LATIN_EXTENDED_A</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final Character.UnicodeBlock <b class="function">LATIN_EXTENDED_ADDITIONAL</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final Character.UnicodeBlock <b class="function">LATIN_EXTENDED_B</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final Character.UnicodeBlock <b class="function">LETTERLIKE_SYMBOLS</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final Character.UnicodeBlock <b class="function">MALAYALAM</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final Character.UnicodeBlock <b class="function">MATHEMATICAL_OPERATORS</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final Character.UnicodeBlock <b class="function">MISCELLANEOUS_SYMBOLS</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final Character.UnicodeBlock <b class="function">MISCELLANEOUS_TECHNICAL</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final Character.UnicodeBlock <b class="function">NUMBER_FORMS</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final Character.UnicodeBlock <b class="function">OPTICAL_CHARACTER_RECOGNITION</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final Character.UnicodeBlock <b class="function">ORIYA</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final Character.UnicodeBlock <b class="function">PRIVATE_USE_AREA</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final Character.UnicodeBlock <b class="function">SMALL_FORM_VARIANTS</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final Character.UnicodeBlock <b class="function">SPACING_MODIFIER_LETTERS</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final Character.UnicodeBlock <b class="function">SPECIALS</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final Character.UnicodeBlock <b class="function">SUPERSCRIPTS_AND_SUBSCRIPTS</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final Character.UnicodeBlock <b class="function">SURROGATES_AREA</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final Character.UnicodeBlock <b class="function">TAMIL</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final Character.UnicodeBlock <b class="function">TELUGU</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final Character.UnicodeBlock <b class="function">THAI</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final Character.UnicodeBlock <b class="function">TIBETAN</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Class Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static Character.UnicodeBlock <b class="function">of</b> (char <i class="parameter">c</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">Character.UnicodeBlock.of()</tt>
</p>
<p>
<span class="refsect1">Type Of: </span>Too many fields to list. </p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>Class</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.lang</b></font></td><td align="right"><font size="+1"><b><i>serializable PJ1.1</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-1752"></a><a name="INDEX-1753"></a>

  This class represents a Java class or interface, or, as of Java 1.1, any
  Java type. There is one <tt class="literal">Class</tt> object for each class that
  is loaded into the Java Virtual Machine, and, as of Java 1.1, there are
  special <tt class="literal">Class</tt> objects that represent the Java primitive
  types. The <tt class="literal">TYPE</tt> constants defined by <tt class="literal">Boolean</tt>,
  <tt class="literal">Integer</tt>, and the other primitive wrapper classes hold
  these special <tt class="literal">Class</tt> objects. Array types are also
  represented by <tt class="literal">Class</tt> objects in Java 1.1. </p>
<p>
<a name="INDEX-1754"></a>

  There is no constructor for this class. You can obtain a
  <tt class="literal">Class</tt> object by calling the <tt class="literal">getClass()</tt> method
  of any instance of the desired class. In Java 1.1 and later, you can also refer
  to a <tt class="literal">Class</tt> object by appending
  <tt class="literal">.class</tt> to the name of a class. Finally, and most
  interestingly, a class can be dynamically loaded by passing its
  fully qualified name (i.e., package name plus class name) to the
  static <tt class="literal">Class.forName()</tt> method. This method loads the
  named class (if it is not already loaded) into the Java interpreter
  and returns a <tt class="literal">Class</tt> object for it. Classes can also be
  loaded with a <tt class="literal">ClassLoader</tt> object. </p>
<p>
<a name="INDEX-1755"></a>

  The <tt class="literal">newInstance()</tt> method creates an instance of a given
  class; this allows you to create instances of dynamically loaded
  classes for which you cannot use the <tt class="literal">new</tt> keyword. Note
  that this method only works when the target class has a no-argument
  constructor. See <tt class="literal">newInstance()</tt> in
  <tt class="literal">java.lang.reflect.Constructor</tt> for a more powerful way to
  instantiate dynamically loaded classes. </p>
<p>
<a name="INDEX-1756"></a><a name="INDEX-1757"></a><a name="INDEX-1758"></a><a name="INDEX-1759"></a><tt class="literal">getName()</tt> returns the name of the class. <tt class="literal">getSuperclass()</tt> returns its superclass. <tt class="literal">isInterface()</tt> tests whether the <tt class="literal">Class</tt> object
  represents an interface, and <tt class="literal">getInterfaces()</tt> returns an
  array of the interfaces that this class implements. In Java 1.2 and later,
  <tt class="literal">getPackage()</tt> returns a <tt class="literal">Package</tt>
  object that represents the package containing the class. <tt class="literal">getProtectionDomain()</tt> returns the
  <tt class="literal">java.security.ProtectionDomain</tt> to which this class
  belongs. The various other <tt class="literal">get()</tt> and <tt class="literal">is()</tt> methods
  return other information about the represented class; they form part of
  the Java Reflection API, along with the classes in
  <tt class="literal">java.lang.reflect</tt>. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public final class <b class="classname">Class</b> implements Serializable {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">No Constructor</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Class Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static Class <b class="function">forName</b> (String <i class="parameter">className</i>) throws ClassNotFoundException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public static Class <b class="function">forName</b> (String <i class="parameter">name</i>, boolean <i class="parameter">initialize</i>, ClassLoader <i class="parameter">loader</i>) throws ClassNotFoundException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Property Accessor Methods (by property name)</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public boolean <b class="function">isArray</b> ();</td><td align="right"><i> native</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public Class[ ] <b class="function">getClasses</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public ClassLoader <b class="function">getClassLoader</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public Class <b class="function">getComponentType</b> ();</td><td align="right"><i> native</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public java.lang.reflect.Constructor[ ] <b class="function">getConstructors</b> () throws SecurityException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public Class[ ] <b class="function">getDeclaredClasses</b> () throws SecurityException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public java.lang.reflect.Constructor[ ] <b class="function">getDeclaredConstructors</b> () throws SecurityException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public java.lang.reflect.Field[ ] <b class="function">getDeclaredFields</b> () throws SecurityException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public java.lang.reflect.Method[ ] <b class="function">getDeclaredMethods</b> () throws SecurityException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public Class <b class="function">getDeclaringClass</b> ();</td><td align="right"><i> native</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public java.lang.reflect.Field[ ] <b class="function">getFields</b> () throws SecurityException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">isInterface</b> ();</td><td align="right"><i> native</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Class[ ] <b class="function">getInterfaces</b> ();</td><td align="right"><i> native</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public java.lang.reflect.Method[ ] <b class="function">getMethods</b> () throws SecurityException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public int <b class="function">getModifiers</b> ();</td><td align="right"><i> native</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">getName</b> ();</td><td align="right"><i> native</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public Package <b class="function">getPackage</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public boolean <b class="function">isPrimitive</b> ();</td><td align="right"><i> native</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public java.security.ProtectionDomain <b class="function">getProtectionDomain</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public Object[ ] <b class="function">getSigners</b> ();</td><td align="right"><i> native</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Class <b class="function">getSuperclass</b> ();</td><td align="right"><i> native</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public java.lang.reflect.Constructor <b class="function">getConstructor</b> (Class[ ] <i class="parameter">parameterTypes</i>) throws NoSuchMethodExceptionSecurityException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public java.lang.reflect.Constructor <b class="function">getDeclaredConstructor</b> (Class[ ] <i class="parameter">parameterTypes</i>) throws NoSuchMethodExceptionSecurityException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public java.lang.reflect.Field <b class="function">getDeclaredField</b> (String <i class="parameter">name</i>) throws NoSuchFieldExceptionSecurityException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public java.lang.reflect.Method <b class="function">getDeclaredMethod</b> (String <i class="parameter">name</i>, Class[ ] <i class="parameter">parameterTypes</i>) throws NoSuchMethodExceptionSecurityException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public java.lang.reflect.Field <b class="function">getField</b> (String <i class="parameter">name</i>) throws NoSuchFieldExceptionSecurityException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public java.lang.reflect.Method <b class="function">getMethod</b> (String <i class="parameter">name</i>, Class[ ] <i class="parameter">parameterTypes</i>) throws NoSuchMethodExceptionSecurityException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public java.net.URL <b class="function">getResource</b> (String <i class="parameter">name</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public java.io.InputStream <b class="function">getResourceAsStream</b> (String <i class="parameter">name</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public boolean <b class="function">isAssignableFrom</b> (Class <i class="parameter">cls</i>);</td><td align="right"><i> native</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public boolean <b class="function">isInstance</b> (Object <i class="parameter">obj</i>);</td><td align="right"><i> native</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Object <b class="function">newInstance</b> () throws InstantiationExceptionIllegalAccessException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Object</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">toString</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Class(Serializable)</tt>
</p>
<p>
<span class="refsect1">Passed To: </span>Too many methods to list. </p>
<p>
<span class="refsect1">Returned By: </span>Too many methods to list. </p>
<p>
<span class="refsect1">Type Of: </span><tt class="literal">java.beans.beancontext.BeanContextServiceAvailableEvent.serviceClass, java.beans.beancontext.BeanContextServiceRevokedEvent.serviceClass, Boolean.TYPE, Byte.TYPE, Character.TYPE, Double.TYPE, Float.TYPE, Integer.TYPE, Long.TYPE, Short.TYPE, Void.TYPE</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>ClassCastException</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.lang</b></font></td><td align="right"><font size="+1"><b><i>serializable unchecked PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1760"></a>

Signals an invalid cast of an object to a type of which it
is not an instance. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">ClassCastException</b> extends RuntimeException {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">ClassCastException</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">ClassCastException</b> (String <i class="parameter">s</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Exception-->RuntimeException-->ClassCastException</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>ClassCircularityError</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.lang</b></font></td><td align="right"><font size="+1"><b><i>serializable error PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1761"></a><a name="INDEX-1762"></a>

Signals that a circular dependency has been detected while
performing initialization for a class. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">ClassCircularityError</b> extends LinkageError {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">ClassCircularityError</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">ClassCircularityError</b> (String <i class="parameter">s</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Error-->LinkageError-->ClassCircularityError</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>ClassFormatError</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.lang</b></font></td><td align="right"><font size="+1"><b><i>serializable error PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1763"></a>

Signals an error in the binary format of a class file. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">ClassFormatError</b> extends LinkageError {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">ClassFormatError</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">ClassFormatError</b> (String <i class="parameter">s</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Error-->LinkageError-->ClassFormatError</tt>
</p>
<p>
<span class="refsect1">Subclasses: </span><tt class="literal">UnsupportedClassVersionError</tt>
</p>
<p>
<span class="refsect1">Thrown By: </span><tt class="literal">ClassLoader.defineClass()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>ClassLoader</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.lang</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-1764"></a><a name="INDEX-1765"></a><a name="INDEX-1766"></a><a name="INDEX-1767"></a><a name="INDEX-1768"></a><a name="INDEX-1769"></a><a name="INDEX-1770"></a>
  This class is the abstract superclass of objects that know how to load
  Java classes into a Java VM. Given a <tt class="literal">ClassLoader</tt>
  object, you can dynamically load a class by calling the public
  <tt class="literal">loadClass()</tt> method, specifying the full name of the
  desired class. You can obtain a resource associated with a class by
  calling <tt class="literal">getResource()</tt>,
  <tt class="literal">getResources()</tt>, and
  <tt class="literal">getResourceAsStream()</tt>. Many applications do not
  need to use <tt class="literal">ClassLoader</tt> directly; these
  applications use the <tt class="literal">Class.forName()</tt> and
  <tt class="literal">Class.getResource()</tt> methods to dynamically load
  classes and resources using the <tt class="literal">ClassLoader</tt> object
  that loaded the application itself. </p>
<p>
<a name="INDEX-1771"></a><a name="INDEX-1772"></a><a name="INDEX-1773"></a>
  In order to load classes over the network or from any source other
  than the standard system classes, you must use a custom
  <tt class="literal">ClassLoader</tt> object that knows how to obtain data
  from that source. A <tt class="literal">java.net.URLClassLoader</tt> is
  suitable for this purpose for almost all applications. Only rarely
  should an application need to define a <tt class="literal">ClassLoader</tt>
  subclass of its own. When this is necessary, the subclass should
  typically extend <tt class="literal">java.security.SecureClassLoader</tt>
  and override the <tt class="literal">findClass()</tt> method. This
  method must find the bytes that comprise the named class, then
  pass them to the <tt class="literal">defineClass()</tt> method and return
  the resulting <tt class="literal">Class</tt> object. In Java 1.2 and later, the
  <tt class="literal">findClass()</tt> method must also define the
  <tt class="literal">Package</tt> object associated with the class, if it has
  not already been defined. It can use <tt class="literal">getPackage()</tt>
  and <tt class="literal">definePackage()</tt> for this purpose. Custom
  subclasses of <tt class="literal">ClassLoader</tt> should also override
  <tt class="literal">findResource()</tt> and
  <tt class="literal">findResources()</tt> to enable the public
  <tt class="literal">getResource()</tt> and <tt class="literal">getResources()</tt>
  methods.
<a name="INDEX-1774"></a><a name="INDEX-1775"></a>
</p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public abstract class <b class="classname">ClassLoader</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected <b class="function">ClassLoader</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">protected <b class="function">ClassLoader</b> (ClassLoader <i class="parameter">parent</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Class Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public static ClassLoader <b class="function">getSystemClassLoader</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public static java.net.URL <b class="function">getSystemResource</b> (String <i class="parameter">name</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public static java.io.InputStream <b class="function">getSystemResourceAsStream</b> (String <i class="parameter">name</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public static java.util.Enumeration <b class="function">getSystemResources</b> (String <i class="parameter">name</i>) throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public final ClassLoader <b class="function">getParent</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public java.net.URL <b class="function">getResource</b> (String <i class="parameter">name</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public java.io.InputStream <b class="function">getResourceAsStream</b> (String <i class="parameter">name</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public final java.util.Enumeration <b class="function">getResources</b> (String <i class="parameter">name</i>) throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public Class <b class="function">loadClass</b> (String <i class="parameter">name</i>) throws ClassNotFoundException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">protected final Class <b class="function">defineClass</b> (String <i class="parameter">name</i>, byte[ ] <i class="parameter">b</i>, int <i class="parameter">off</i>, int <i class="parameter">len</i>) throws ClassFormatError;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">protected final Class <b class="function">defineClass</b> (String <i class="parameter">name</i>, byte[ ] <i class="parameter">b</i>, int <i class="parameter">off</i>, int <i class="parameter">len</i>, java.security.ProtectionDomain <i class="parameter">protectionDomain</i>) throws ClassFormatError;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">protected Package <b class="function">definePackage</b> (String <i class="parameter">name</i>, String <i class="parameter">specTitle</i>, String <i class="parameter">specVersion</i>, String <i class="parameter">specVendor</i>, String <i class="parameter">implTitle</i>, String <i class="parameter">implVersion</i>, String <i class="parameter">implVendor</i>, java.net.URL <i class="parameter">sealBase</i>) throws IllegalArgumentException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">protected Class <b class="function">findClass</b> (String <i class="parameter">name</i>) throws ClassNotFoundException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">protected String <b class="function">findLibrary</b> (String <i class="parameter">libname</i>);</td><td align="right"><i> constant</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">protected final Class <b class="function">findLoadedClass</b> (String <i class="parameter">name</i>);</td><td align="right"><i> native</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">protected java.net.URL <b class="function">findResource</b> (String <i class="parameter">name</i>);</td><td align="right"><i> constant</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">protected java.util.Enumeration <b class="function">findResources</b> (String <i class="parameter">name</i>) throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected final Class <b class="function">findSystemClass</b> (String <i class="parameter">name</i>) throws ClassNotFoundException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">protected Package <b class="function">getPackage</b> (String <i class="parameter">name</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">protected Package[ ] <b class="function">getPackages</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected Class <b class="function">loadClass</b> (String <i class="parameter">name</i>, boolean <i class="parameter">resolve</i>) throws ClassNotFoundException;</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected final void <b class="function">resolveClass</b> (Class <i class="parameter">c</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">protected final void <b class="function">setSigners</b> (Class <i class="parameter">c</i>, Object[ ] <i class="parameter">signers</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Deprecated Protected Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">#</span></td><td align="left">protected final Class <b class="function">defineClass</b> (byte[ ] <i class="parameter">b</i>, int <i class="parameter">off</i>, int <i class="parameter">len</i>) throws ClassFormatError;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Subclasses: </span><tt class="literal">java.security.SecureClassLoader</tt>
</p>
<p>
<span class="refsect1">Passed To: </span>Too many methods to list. </p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">Class.getClassLoader(), ClassLoader.{getParent(), getSystemClassLoader()}, SecurityManager.currentClassLoader(), Thread.getContextClassLoader(), java.rmi.server.RMIClassLoader.getClassLoader()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>ClassNotFoundException</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.lang</b></font></td><td align="right"><font size="+1"><b><i>serializable checked PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1776"></a>

Signals that a class to be loaded cannot be found. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">ClassNotFoundException</b> extends Exception {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">ClassNotFoundException</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">ClassNotFoundException</b> (String <i class="parameter">s</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public <b class="function">ClassNotFoundException</b> (String <i class="parameter">s</i>, Throwable <i class="parameter">ex</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public Throwable <b class="function">getException</b> ();</td><td align="right"><i> default:null</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Throwable</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public void <b class="function">printStackTrace</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public void <b class="function">printStackTrace</b> (java.io.PrintWriter <i class="parameter">pw</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public void <b class="function">printStackTrace</b> (java.io.PrintStream <i class="parameter">ps</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Exception-->ClassNotFoundException</tt>
</p>
<p>
<span class="refsect1">Thrown By: </span>Too many methods to list. </p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>Cloneable</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.lang</b></font></td><td align="right"><font size="+1"><b><i>cloneable PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1777"></a><a name="INDEX-1778"></a>

This interface defines no methods or variables, but
indicates that the class that implements it may be cloned
(i.e., copied) by calling the <tt class="literal">Object</tt> method
<tt class="literal">clone()</tt>. Calling <tt class="literal">clone()</tt> for an object that
does not implement this interface (and does not override
<tt class="literal">clone()</tt> with its own implementation)
causes a <tt class="literal">CloneNotSupportedException</tt> to be thrown. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public interface <b class="classname">Cloneable</b>  {</td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Implementations: </span>Too many classes to list. </p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>CloneNotSupportedException</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.lang</b></font></td><td align="right"><font size="+1"><b><i>serializable checked PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1779"></a>

Signals that the <tt class="literal">clone()</tt> method has been called for
an object of a class that does not implement the
<tt class="literal">Cloneable</tt> interface. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">CloneNotSupportedException</b> extends Exception {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">CloneNotSupportedException</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">CloneNotSupportedException</b> (String <i class="parameter">s</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Exception-->CloneNotSupportedException</tt>
</p>
<p>
<span class="refsect1">Subclasses: </span><tt class="literal">java.rmi.server.ServerCloneException</tt>
</p>
<p>
<span class="refsect1">Thrown By: </span><tt class="literal">java.awt.datatransfer.DataFlavor.clone(), Object.clone(), java.rmi.server.UnicastRemoteObject.clone(), java.security.MessageDigest.clone(), java.security.MessageDigestSpi.clone(), java.security.Signature.clone(), java.security.SignatureSpi.clone(), javax.crypto.Mac.clone(), javax.crypto.MacSpi.clone(), javax.swing.AbstractAction.clone(), javax.swing.DefaultListSelectionModel.clone(), javax.swing.tree.DefaultTreeSelectionModel.clone()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>Comparable</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.lang</b></font></td><td align="right"><font size="+1"><b><i>comparable</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-1780"></a><a name="INDEX-1781"></a>
  This interface defines a single method, <tt class="literal">compareTo()</tt>,
  that is responsible for comparing one object to another and determining
  their relative order, according to some natural ordering for that
  class of objects. Any general-purpose class that represents a value
  that can be sorted or ordered should implement this interface. Any
  class that does implement this interface can make use of various
  powerful methods such as <tt class="literal">java.util.Collections.sort()</tt> and
  <tt class="literal">java.util.Arrays.binarySearch()</tt>. 


As of Java 1.2, many of the key
  classes in the Java API have been modified to implement this
  interface.</p>
<p>  The <tt class="literal">compareTo()</tt> object compares this object to the
  object passed as an argument. It should assume that the supplied
  object is of the appropriate type; if it is not, it should throw a
  <tt class="literal">ClassCastException</tt>. If this object is less than the
  supplied object or should appear before the supplied object in a
  sorted list, <tt class="literal">compareTo()</tt> should return a
  negative number. If this object is greater than the supplied object
  or should come after the supplied object in a sorted list, 
  <tt class="literal">compareTo()</tt> should return a positive integer. If
  the two objects are equivalent, and their relative order in a sorted
  list does not matter, <tt class="literal">compareTo()</tt> should
  return 0. If <tt class="literal">compareTo()</tt> 
  returns 0 for two
  objects, the <tt class="literal">equals()</tt> method should typically
  return <tt class="literal">true</tt>. If this is not the case, the
  <tt class="literal">Comparable</tt> objects are not suitable for use in
  <tt class="literal">java.util.TreeSet</tt> and
  <tt class="literal">java.util.TreeMap</tt> classes.
<a name="INDEX-1782"></a>
</p>
<p>  See <tt class="literal">java.util.Comparator</tt> for a way to define an
  ordering for objects that do not implement
  <tt class="literal">Comparable</tt> or to define an ordering other than the
  natural ordering defined by a <tt class="literal">Comparable</tt> class. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public interface <b class="classname">Comparable</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract int <b class="function">compareTo</b> (Object <i class="parameter">o</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Implementations: </span><tt class="literal">java.io.File, java.io.ObjectStreamField, Byte, Character, Double, Float, Integer, Long, Short, String, java.math.BigDecimal, java.math.BigInteger, java.text.CollationKey, java.util.Date</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>Compiler</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.lang</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1783"></a><a name="INDEX-1784"></a><a name="INDEX-1785"></a>
The static methods of this class provide an interface to the
just-in-time (JIT) byte-code-to-native code compiler in use
by the Java interpreter. If no JIT compiler is in use by
the VM, these methods do nothing. <a name="INDEX-1786"></a><a name="INDEX-1787"></a><tt class="literal">compileClass()</tt> asks the JIT compiler to compile the
specified class. <tt class="literal">compileClasses()</tt> asks the JIT
compiler to compile all classes that match the specified
name. These methods return <tt class="literal">true</tt> if the compilation
was successful, or <tt class="literal">false</tt> if it failed or if there is
<a name="INDEX-1788"></a><a name="INDEX-1789"></a><a name="INDEX-1790"></a>
no JIT compiler on the system. <tt class="literal">enable()</tt> and
<tt class="literal">disable()</tt> turn just-in-time compilation on and off. <tt class="literal">command()</tt> asks the JIT compiler to perform some
compiler-specific operation; this is a hook for vendor
extensions. No standard operations have been defined. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public final class <b class="classname">Compiler</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">No Constructor</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Class Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static Object <b class="function">command</b> (Object <i class="parameter">any</i>);</td><td align="right"><i> native</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static boolean <b class="function">compileClass</b> (Class <i class="parameter">clazz</i>);</td><td align="right"><i> native</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static boolean <b class="function">compileClasses</b> (String <i class="parameter">string</i>);</td><td align="right"><i> native</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static void <b class="function">disable</b> ();</td><td align="right"><i> native</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static void <b class="function">enable</b> ();</td><td align="right"><i> native</i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>Double</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.lang</b></font></td><td align="right"><font size="+1"><b><i>serializable comparable PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1791"></a><a name="INDEX-1792"></a><a name="INDEX-1793"></a><a name="INDEX-1794"></a>

This class provides an immutable object wrapper around the
<tt class="literal">double</tt> primitive data type. <tt class="literal">valueOf()</tt> converts a
string to a <tt class="literal">Double</tt>, <tt class="literal">doubleValue()</tt> returns
the primitive <tt class="literal">double</tt> value of a <tt class="literal">Double</tt>
object, and there are other methods for returning a
<tt class="literal">Double</tt> value as a variety of other primitive types. This class also provides some useful constants and static
methods for testing <tt class="literal">double</tt> values. <tt class="literal">MIN_VALUE</tt> and <tt class="literal">MAX_VALUE</tt> are the smallest
(closest to zero) and largest representable <tt class="literal">double</tt><a name="INDEX-1795"></a><a name="INDEX-1796"></a>
values. <tt class="literal">isInfinite()</tt> in class and instance
method forms tests whether a <tt class="literal">double</tt> or a
<tt class="literal">Double</tt> has an infinite value. Similarly,
<tt class="literal">isNaN()</tt> tests whether a <tt class="literal">double</tt> or
<tt class="literal">Double</tt> is not-a-number; this is a comparison that
cannot be done directly because the <tt class="literal">NaN</tt> constant
never tests equal to any other value, including itself. <tt class="literal">doubleToLongBits()</tt> and <tt class="literal">longBitsToDouble()</tt><a name="INDEX-1797"></a><a name="INDEX-1798"></a>
allow you to manipulate the bit representation of a
<tt class="literal">double</tt> directly. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public final class <b class="classname">Double</b> extends Number implements Comparable {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">Double</b> (String <i class="parameter">s</i>) throws NumberFormatException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">Double</b> (double <i class="parameter">value</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constants</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final double <b class="function">MAX_VALUE</b> ;</td><td align="right"><i> =1.7976931348623157E308</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final double <b class="function">MIN_VALUE</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final double <b class="function">NaN</b> ;</td><td align="right"><i> =NaN</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final double <b class="function">NEGATIVE_INFINITY</b> ;</td><td align="right"><i> =-Infinity</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final double <b class="function">POSITIVE_INFINITY</b> ;</td><td align="right"><i> =Infinity</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public static final Class <b class="function">TYPE</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Class Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static long <b class="function">doubleToLongBits</b> (double <i class="parameter">value</i>);</td><td align="right"><i> native</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.3</span></td><td align="left">public static long <b class="function">doubleToRawLongBits</b> (double <i class="parameter">value</i>);</td><td align="right"><i> native</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static boolean <b class="function">isInfinite</b> (double <i class="parameter">v</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static boolean <b class="function">isNaN</b> (double <i class="parameter">v</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static double <b class="function">longBitsToDouble</b> (long <i class="parameter">bits</i>);</td><td align="right"><i> native</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public static double <b class="function">parseDouble</b> (String <i class="parameter">s</i>) throws NumberFormatException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static String <b class="function">toString</b> (double <i class="parameter">d</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static Double <b class="function">valueOf</b> (String <i class="parameter">s</i>) throws NumberFormatException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public int <b class="function">compareTo</b> (Double <i class="parameter">anotherDouble</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">isInfinite</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">isNaN</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Methods Implementing Comparable</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public int <b class="function">compareTo</b> (Object <i class="parameter">o</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Number</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public byte <b class="function">byteValue</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public double <b class="function">doubleValue</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public float <b class="function">floatValue</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">intValue</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public long <b class="function">longValue</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public short <b class="function">shortValue</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Object</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">equals</b> (Object <i class="parameter">obj</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">hashCode</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">toString</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Number(Serializable)-->Double(Comparable)</tt>
</p>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">Double.compareTo()</tt>
</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">Double.valueOf()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>Error</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.lang</b></font></td><td align="right"><font size="+1"><b><i>serializable error PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1799"></a>
This class forms the root of the error hierarchy in Java. Subclasses
of <tt class="literal">Error</tt>, unlike subclasses of <tt class="literal">Exception</tt>,
should not be caught and generally cause
termination of the program. Subclasses of <tt class="literal">Error</tt>
need not be declared in the <tt class="literal">throws</tt> clause of a
method definition. <a name="INDEX-1800"></a><tt class="literal">getMessage()</tt> returns a message associated with the
error. See <tt class="literal">Throwable</tt> for other methods. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">Error</b> extends Throwable {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">Error</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">Error</b> (String <i class="parameter">s</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Error</tt>
</p>
<p>
<span class="refsect1">Subclasses: </span><tt class="literal">java.awt.AWTError, LinkageError, ThreadDeath, VirtualMachineError</tt>
</p>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">java.rmi.ServerError.ServerError()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>Exception</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.lang</b></font></td><td align="right"><font size="+1"><b><i>serializable checked PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1801"></a>
This class forms the root of the exception hierarchy in Java. An
<tt class="literal">Exception</tt> signals an abnormal condition that must be
specially handled to prevent program termination. Exceptions may be caught and handled. An exception that is
not a subclass of <tt class="literal">RuntimeException</tt> must be
declared in the <tt class="literal">throws</tt> clause of any method that can
throw it. <a name="INDEX-1802"></a><tt class="literal">getMessage()</tt> returns a message associated with the
exception. See <tt class="literal">Throwable</tt> for other methods. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">Exception</b> extends Throwable {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">Exception</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">Exception</b> (String <i class="parameter">s</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Exception</tt>
</p>
<p>
<span class="refsect1">Subclasses: </span>Too many classes to list. </p>
<p>
<span class="refsect1">Passed To: </span>Too many methods to list. </p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">java.awt.event.InvocationEvent.getException(), java.security.PrivilegedActionException.getException(), javax.ejb.EJBException.getCausedByException(), javax.jms.JMSException.getLinkedException(), org.omg.CORBA.Environment.exception()</tt>
</p>
<p>
<span class="refsect1">Thrown By: </span><tt class="literal">java.rmi.server.RemoteCall.executeCall(), java.rmi.server.RemoteRef.invoke(), java.rmi.server.Skeleton.dispatch(), java.security.PrivilegedExceptionAction.run(), javax.naming.spi.NamingManager.getObjectInstance(), javax.naming.spi.ObjectFactory.getObjectInstance()</tt>
</p>
<p>
<span class="refsect1">Type Of: </span><tt class="literal">java.io.WriteAbortedException.detail, java.rmi.server.ServerCloneException.detail</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>ExceptionInInitializerError</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.lang</b></font></td><td align="right"><font size="+1"><b><i>serializable error PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1803"></a><a name="INDEX-1804"></a>
This error is thrown by the Java Virtual Machine when an
exception occurs in the static initializer of a class. You
can use the <tt class="literal">getException()</tt> method to obtain the
<tt class="literal">Throwable</tt> object that was thrown from the
initializer. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">ExceptionInInitializerError</b> extends LinkageError {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">ExceptionInInitializerError</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">ExceptionInInitializerError</b> (String <i class="parameter">s</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">ExceptionInInitializerError</b> (Throwable <i class="parameter">thrown</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Throwable <b class="function">getException</b> ();</td><td align="right"><i> default:null</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Throwable</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public void <b class="function">printStackTrace</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public void <b class="function">printStackTrace</b> (java.io.PrintWriter <i class="parameter">pw</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public void <b class="function">printStackTrace</b> (java.io.PrintStream <i class="parameter">ps</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Error-->LinkageError-->ExceptionInInitializerError</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>Float</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.lang</b></font></td><td align="right"><font size="+1"><b><i>serializable comparable PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1805"></a><a name="INDEX-1806"></a><a name="INDEX-1807"></a><a name="INDEX-1808"></a><a name="INDEX-1809"></a>
This class provides an immutable object wrapper around the
<tt class="literal">float</tt> primitive data type. <tt class="literal">valueOf()</tt> converts a string to a <tt class="literal">Float</tt>,
<tt class="literal">floatValue()</tt> returns the primitive <tt class="literal">float</tt>
value of a <tt class="literal">Float</tt> object, 
and there are methods for returning a <tt class="literal">Float</tt>
value as a variety of other primitive types. This class also provides some useful constants and static
methods for testing <tt class="literal">float</tt> values. <tt class="literal">MIN_VALUE</tt>
and <tt class="literal">MAX_VALUE</tt> are the smallest (closest to zero) and
largest representable <tt class="literal">double</tt> values. <a name="INDEX-1810"></a><a name="INDEX-1811"></a><tt class="literal">isInfinite()</tt> in class and instance method
forms tests whether a <tt class="literal">float</tt> or a <tt class="literal">Float</tt> has
an infinite value. Similarly, <tt class="literal">isNaN()</tt> tests whether
a <tt class="literal">float</tt> or <tt class="literal">Float</tt> is not-a-number; this is a
comparison that cannot be done directly because the
<tt class="literal">NaN</tt> constant never tests equal to any other value,
including itself. <tt class="literal">floatToIntBits()</tt> and
<tt class="literal">intBitsToFloat()</tt> allow you to manipulate the bit
representation of a <tt class="literal">float</tt> directly. <a name="INDEX-1812"></a><a name="INDEX-1813"></a>
</p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public final class <b class="classname">Float</b> extends Number implements Comparable {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">Float</b> (String <i class="parameter">s</i>) throws NumberFormatException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">Float</b> (float <i class="parameter">value</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">Float</b> (double <i class="parameter">value</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constants</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final float <b class="function">MAX_VALUE</b> ;</td><td align="right"><i> =3.4028235E38</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final float <b class="function">MIN_VALUE</b> ;</td><td align="right"><i> =1.4E-45</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final float <b class="function">NaN</b> ;</td><td align="right"><i> =NaN</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final float <b class="function">NEGATIVE_INFINITY</b> ;</td><td align="right"><i> =-Infinity</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final float <b class="function">POSITIVE_INFINITY</b> ;</td><td align="right"><i> =Infinity</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public static final Class <b class="function">TYPE</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Class Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static int <b class="function">floatToIntBits</b> (float <i class="parameter">value</i>);</td><td align="right"><i> native</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.3</span></td><td align="left">public static int <b class="function">floatToRawIntBits</b> (float <i class="parameter">value</i>);</td><td align="right"><i> native</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static float <b class="function">intBitsToFloat</b> (int <i class="parameter">bits</i>);</td><td align="right"><i> native</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static boolean <b class="function">isInfinite</b> (float <i class="parameter">v</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static boolean <b class="function">isNaN</b> (float <i class="parameter">v</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public static float <b class="function">parseFloat</b> (String <i class="parameter">s</i>) throws NumberFormatException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static String <b class="function">toString</b> (float <i class="parameter">f</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static Float <b class="function">valueOf</b> (String <i class="parameter">s</i>) throws NumberFormatException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public int <b class="function">compareTo</b> (Float <i class="parameter">anotherFloat</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">isInfinite</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">isNaN</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Methods Implementing Comparable</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public int <b class="function">compareTo</b> (Object <i class="parameter">o</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Number</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public byte <b class="function">byteValue</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public double <b class="function">doubleValue</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public float <b class="function">floatValue</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">intValue</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public long <b class="function">longValue</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public short <b class="function">shortValue</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Object</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">equals</b> (Object <i class="parameter">obj</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">hashCode</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">toString</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Number(Serializable)-->Float(Comparable)</tt>
</p>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">Float.compareTo()</tt>
</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">Float.valueOf()</tt>
</p>
<p>
<span class="refsect1">Type Of: </span>Too many fields to list. </p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>IllegalAccessError</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.lang</b></font></td><td align="right"><font size="+1"><b><i>serializable error PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1814"></a><a name="INDEX-1815"></a><a name="INDEX-1816"></a><a name="INDEX-1817"></a>

Signals an attempted use of a class, method, or field
that is not accessible. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">IllegalAccessError</b> extends IncompatibleClassChangeError {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">IllegalAccessError</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">IllegalAccessError</b> (String <i class="parameter">s</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Error-->LinkageError-->IncompatibleClassChangeError-->IllegalAccessError</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>IllegalAccessException</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.lang</b></font></td><td align="right"><font size="+1"><b><i>serializable checked PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1818"></a><a name="INDEX-1819"></a><a name="INDEX-1820"></a>

Signals that a class or initializer is not accessible. Thrown by <tt class="literal">Class.newInstance()</tt>. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">IllegalAccessException</b> extends Exception {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">IllegalAccessException</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">IllegalAccessException</b> (String <i class="parameter">s</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Exception-->IllegalAccessException</tt>
</p>
<p>
<span class="refsect1">Thrown By: </span>Too many methods to list. </p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>IllegalArgumentException</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.lang</b></font></td><td align="right"><font size="+1"><b><i>serializable unchecked PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1821"></a><a name="INDEX-1822"></a>

Signals an illegal argument to a method. See subclasses
<tt class="literal">IllegalThreadStateException</tt> and
<tt class="literal">NumberFormatException</tt>. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">IllegalArgumentException</b> extends RuntimeException {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">IllegalArgumentException</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">IllegalArgumentException</b> (String <i class="parameter">s</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Exception-->RuntimeException-->IllegalArgumentException</tt>
</p>
<p>
<span class="refsect1">Subclasses: </span><tt class="literal">IllegalThreadStateException, NumberFormatException, java.security.InvalidParameterException</tt>
</p>
<p>
<span class="refsect1">Thrown By: </span>Too many methods to list. </p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>IllegalMonitorStateException</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.lang</b></font></td><td align="right"><font size="+1"><b><i>serializable unchecked PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1823"></a><a name="INDEX-1824"></a><a name="INDEX-1825"></a><a name="INDEX-1826"></a><a name="INDEX-1827"></a><a name="INDEX-1828"></a>

Signals an illegal monitor state. It is thrown by the
<tt class="literal">Object</tt><tt class="literal">notify()</tt> and <tt class="literal">wait()</tt> methods used for
thread synchronization. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">IllegalMonitorStateException</b> extends RuntimeException {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">IllegalMonitorStateException</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">IllegalMonitorStateException</b> (String <i class="parameter">s</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Exception-->RuntimeException-->IllegalMonitorStateException</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>IllegalStateException</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.lang</b></font></td><td align="right"><font size="+1"><b><i>serializable unchecked PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1829"></a><a name="INDEX-1830"></a>
Signals that a method has been
invoked on an object that is not in an appropriate state to perform the requested operation. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">IllegalStateException</b> extends RuntimeException {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">IllegalStateException</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">IllegalStateException</b> (String <i class="parameter">s</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Exception-->RuntimeException-->java.lang.IllegalStateException</tt>
</p>
<p>
<span class="refsect1">Subclasses: </span><tt class="literal">java.awt.IllegalComponentStateException, java.awt.dnd.InvalidDnDOperationException</tt>
</p>
<p>
<span class="refsect1">Thrown By: </span>Too many methods to list. </p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>IllegalThreadStateException</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.lang</b></font></td><td align="right"><font size="+1"><b><i>serializable unchecked PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1831"></a><a name="INDEX-1832"></a>

Signals that a thread is not in the appropriate state for an
attempted operation to succeed. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">IllegalThreadStateException</b> extends IllegalArgumentException {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">IllegalThreadStateException</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">IllegalThreadStateException</b> (String <i class="parameter">s</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Exception-->RuntimeException-->IllegalArgumentException-->IllegalThreadStateException</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>IncompatibleClassChangeError</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.lang</b></font></td><td align="right"><font size="+1"><b><i>serializable error PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1833"></a><a name="INDEX-1834"></a>

This is the superclass of a group of related error types. It signals some kind of illegal use of a legal class. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">IncompatibleClassChangeError</b> extends LinkageError {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">IncompatibleClassChangeError</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">IncompatibleClassChangeError</b> (String <i class="parameter">s</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Error-->LinkageError-->IncompatibleClassChangeError</tt>
</p>
<p>
<span class="refsect1">Subclasses: </span><tt class="literal">AbstractMethodError, IllegalAccessError, InstantiationError, NoSuchFieldError, NoSuchMethodError</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>IndexOutOfBoundsException</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.lang</b></font></td><td align="right"><font size="+1"><b><i>serializable unchecked PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1835"></a>

Signals that an index is out of bounds. See the subclasses
<tt class="literal">ArrayIndexOutOfBoundsException</tt> and
<tt class="literal">StringIndexOutOfBoundsException</tt>. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">IndexOutOfBoundsException</b> extends RuntimeException {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">IndexOutOfBoundsException</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">IndexOutOfBoundsException</b> (String <i class="parameter">s</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Exception-->RuntimeException-->IndexOutOfBoundsException</tt>
</p>
<p>
<span class="refsect1">Subclasses: </span><tt class="literal">ArrayIndexOutOfBoundsException, StringIndexOutOfBoundsException</tt>
</p>
<p>
<span class="refsect1">Thrown By: </span><tt class="literal">java.awt.Toolkit.createCustomCursor(), java.awt.print.Book.{getPageFormat(), getPrintable(), setPage()}, java.awt.print.Pageable.{getPageFormat(), getPrintable()}</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>InheritableThreadLocal</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.lang</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-1836"></a><a name="INDEX-1837"></a>
  This class holds a thread-local value that is inherited by child
  threads. See <tt class="literal">ThreadLocal</tt> for a discussion of
  thread-local values. Note that the inheritance referred to in
  the name of this class is not superclass-to-subclass inheritance;
  instead, it is parent-thread-to-child-thread inheritance. </p>
<p>  This class is best understood by example. Suppose that an application
  has defined an <tt class="literal">InheritableThreadLocal</tt> object and
  that a certain thread (the parent thread) has a thread-local value
  stored in that object. Whenever that thread creates a new thread (a
  child thread), the <tt class="literal">InheritableThreadLocal</tt> object
  is automatically updated so that the new child thread has the
  same value associated with it as the parent thread. Note that
  the value associated with the child thread is independent from the
  value associated with the parent thread. If the child thread
  subsequently alters its value by calling the <tt class="literal">set()</tt>
  method of the <tt class="literal">InheritableThreadLocal</tt>, the value
  associated with the parent thread does not change. </p>
<p>
<a name="INDEX-1838"></a>
  By default, a child thread inherits a parent's values unmodified. By
  overriding the <tt class="literal">childValue()</tt> method, however, you
  can create a subclass of <tt class="literal">InheritableThreadLocal</tt>
  in which the child thread inherits some arbitrary function of the
  parent thread's value. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">InheritableThreadLocal</b> extends ThreadLocal {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">InheritableThreadLocal</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected Object <b class="function">childValue</b> (Object <i class="parameter">parentValue</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->ThreadLocal-->InheritableThreadLocal</tt>
</p>

</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>InstantiationError</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.lang</b></font></td><td align="right"><font size="+1"><b><i>serializable error PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1839"></a><a name="INDEX-1840"></a><a name="INDEX-1841"></a>

Signals an attempt to instantiate an interface or abstract class. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">InstantiationError</b> extends IncompatibleClassChangeError {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">InstantiationError</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">InstantiationError</b> (String <i class="parameter">s</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Error-->LinkageError-->IncompatibleClassChangeError-->InstantiationError</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>InstantiationException</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.lang</b></font></td><td align="right"><font size="+1"><b><i>serializable checked PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1842"></a><a name="INDEX-1843"></a>

Signals an attempt to instantiate an interface or an
abstract class. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">InstantiationException</b> extends Exception {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">InstantiationException</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">InstantiationException</b> (String <i class="parameter">s</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Exception-->InstantiationException</tt>
</p>
<p>
<span class="refsect1">Thrown By: </span><tt class="literal">Class.newInstance(), java.lang.reflect.Constructor.newInstance(), javax.swing.UIManager.setLookAndFeel()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>Integer</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.lang</b></font></td><td align="right"><font size="+1"><b><i>serializable comparable PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1844"></a><a name="INDEX-1845"></a><a name="INDEX-1846"></a><a name="INDEX-1847"></a>

This class provides an immutable object wrapper around the
<tt class="literal">int</tt> primitive data type. This
class also contains useful minimum and maximum
constants and useful conversion methods. <a name="INDEX-1848"></a><a name="INDEX-1849"></a><tt class="literal">parseInt()</tt> and <tt class="literal">valueOf()</tt> convert a string
to an <tt class="literal">int</tt> or to an <tt class="literal">Integer</tt>,
respectively. Each can take a radix argument to
specify the base the value is represented in. <a name="INDEX-1850"></a><tt class="literal">decode()</tt> also converts a <tt class="literal">String</tt> to an
<tt class="literal">Integer</tt>. It assumes a hexadecimal number if the
string begins with "0X" or "0x", or an octal
number if the string begins with "0". Otherwise, a decimal number is assumed. <a name="INDEX-1851"></a><a name="INDEX-1852"></a><a name="INDEX-1853"></a><a name="INDEX-1854"></a><tt class="literal">toString()</tt> converts in the other direction, and the
<tt class="literal">static</tt> version takes a radix
argument. <tt class="literal">toBinaryString()</tt>, <tt class="literal">toOctalString()</tt>,
and <tt class="literal">toHexString()</tt> convert an <tt class="literal">int</tt> to a string
using base 2, base 8, and base 16. These methods treat the
integer as an unsigned value. Other routines return the value of an <tt class="literal">Integer</tt> as
various primitive types, and, finally, the
<tt class="literal">getInteger()</tt> methods
<a name="INDEX-1855"></a>
return the integer value of a named property from the system
property list, or the specified default value. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public final class <b class="classname">Integer</b> extends Number implements Comparable {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">Integer</b> (String <i class="parameter">s</i>) throws NumberFormatException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">Integer</b> (int <i class="parameter">value</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constants</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">MAX_VALUE</b> ;</td><td align="right"><i> =2147483647</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">MIN_VALUE</b> ;</td><td align="right"><i> =-2147483648</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public static final Class <b class="function">TYPE</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Class Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static Integer <b class="function">decode</b> (String <i class="parameter">nm</i>) throws NumberFormatException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static Integer <b class="function">getInteger</b> (String <i class="parameter">nm</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static Integer <b class="function">getInteger</b> (String <i class="parameter">nm</i>, int <i class="parameter">val</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static Integer <b class="function">getInteger</b> (String <i class="parameter">nm</i>, Integer <i class="parameter">val</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static int <b class="function">parseInt</b> (String <i class="parameter">s</i>) throws NumberFormatException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static int <b class="function">parseInt</b> (String <i class="parameter">s</i>, int <i class="parameter">radix</i>) throws NumberFormatException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static String <b class="function">toBinaryString</b> (int <i class="parameter">i</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static String <b class="function">toHexString</b> (int <i class="parameter">i</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static String <b class="function">toOctalString</b> (int <i class="parameter">i</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static String <b class="function">toString</b> (int <i class="parameter">i</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static String <b class="function">toString</b> (int <i class="parameter">i</i>, int <i class="parameter">radix</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static Integer <b class="function">valueOf</b> (String <i class="parameter">s</i>) throws NumberFormatException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static Integer <b class="function">valueOf</b> (String <i class="parameter">s</i>, int <i class="parameter">radix</i>) throws NumberFormatException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public int <b class="function">compareTo</b> (Integer <i class="parameter">anotherInteger</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Methods Implementing Comparable</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public int <b class="function">compareTo</b> (Object <i class="parameter">o</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Number</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public byte <b class="function">byteValue</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public double <b class="function">doubleValue</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public float <b class="function">floatValue</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">intValue</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public long <b class="function">longValue</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public short <b class="function">shortValue</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Object</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">equals</b> (Object <i class="parameter">obj</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">hashCode</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">toString</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Number(Serializable)-->Integer(Comparable)</tt>
</p>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">Integer.{compareTo(), getInteger()}, javax.swing.JInternalFrame.setLayer()</tt>
</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">Integer.{decode(), getInteger(), valueOf()}, javax.swing.JLayeredPane.getObjectForLayer()</tt>
</p>
<p>
<span class="refsect1">Type Of: </span><tt class="literal">java.awt.font.TextAttribute.{SUPERSCRIPT_SUB, SUPERSCRIPT_SUPER, UNDERLINE_LOW_DASHED, UNDERLINE_LOW_DOTTED, UNDERLINE_LOW_GRAY, UNDERLINE_LOW_ONE_PIXEL, UNDERLINE_LOW_TWO_PIXEL, UNDERLINE_ON}, javax.swing.JLayeredPane.{DEFAULT_LAYER, DRAG_LAYER, FRAME_CONTENT_LAYER, MODAL_LAYER, PALETTE_LAYER, POPUP_LAYER}</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>InternalError</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.lang</b></font></td><td align="right"><font size="+1"><b><i>serializable error PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1856"></a><a name="INDEX-1857"></a>

Signals an internal error in the Java interpreter. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">InternalError</b> extends VirtualMachineError {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">InternalError</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">InternalError</b> (String <i class="parameter">s</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Error-->VirtualMachineError-->InternalError</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>InterruptedException</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.lang</b></font></td><td align="right"><font size="+1"><b><i>serializable checked PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1858"></a><a name="INDEX-1859"></a>

Signals that the thread has been interrupted. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">InterruptedException</b> extends Exception {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">InterruptedException</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">InterruptedException</b> (String <i class="parameter">s</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Exception-->InterruptedException</tt>
</p>
<p>
<span class="refsect1">Thrown By: </span>Too many methods to list. </p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>LinkageError</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.lang</b></font></td><td align="right"><font size="+1"><b><i>serializable error PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1860"></a><a name="INDEX-1861"></a>

The superclass of a group of errors that signal problems
linking a class or resolving dependencies between classes. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">LinkageError</b> extends Error {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">LinkageError</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">LinkageError</b> (String <i class="parameter">s</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Error-->LinkageError</tt>
</p>
<p>
<span class="refsect1">Subclasses: </span><tt class="literal">ClassCircularityError, ClassFormatError, ExceptionInInitializerError, IncompatibleClassChangeError, NoClassDefFoundError, UnsatisfiedLinkError, VerifyError</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>Long</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.lang</b></font></td><td align="right"><font size="+1"><b><i>serializable comparable PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1862"></a><a name="INDEX-1863"></a><a name="INDEX-1864"></a>

This class provides an immutable object wrapper around the
<tt class="literal">long</tt> primitive data type. This class also contains useful minimum and maximum
constants and useful conversion methods. <a name="INDEX-1865"></a><a name="INDEX-1866"></a><a name="INDEX-1867"></a><a name="INDEX-1868"></a><a name="INDEX-1869"></a><a name="INDEX-1870"></a><tt class="literal">parseLong()</tt> and <tt class="literal">valueOf()</tt> convert a
string to a <tt class="literal">long</tt> or to a <tt class="literal">Long</tt>,
respectively. Each can take a radix argument to specify the
base the value is represented in. <tt class="literal">toString()</tt>
converts in the other direction and may also take a radix
argument. <tt class="literal">toBinaryString()</tt>, <tt class="literal">toOctalString()</tt>,
and <tt class="literal">toHexString()</tt> convert a <tt class="literal">long</tt> to a string
using base 2, base 8, and base 16. These methods treat the
<tt class="literal">long</tt> as an unsigned value. Other routines return the value of a <tt class="literal">Long</tt> as various
primitive types, and, finally, the <tt class="literal">getLong()</tt>
methods return the <tt class="literal">long</tt> value of a named property or
<a name="INDEX-1871"></a>
the value of the specified default. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public final class <b class="classname">Long</b> extends Number implements Comparable {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">Long</b> (long <i class="parameter">value</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">Long</b> (String <i class="parameter">s</i>) throws NumberFormatException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constants</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final long <b class="function">MAX_VALUE</b> ;</td><td align="right"><i> =9223372036854775807</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final long <b class="function">MIN_VALUE</b> ;</td><td align="right"><i> =-9223372036854775808</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public static final Class <b class="function">TYPE</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Class Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public static Long <b class="function">decode</b> (String <i class="parameter">nm</i>) throws NumberFormatException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static Long <b class="function">getLong</b> (String <i class="parameter">nm</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static Long <b class="function">getLong</b> (String <i class="parameter">nm</i>, long <i class="parameter">val</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static Long <b class="function">getLong</b> (String <i class="parameter">nm</i>, Long <i class="parameter">val</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static long <b class="function">parseLong</b> (String <i class="parameter">s</i>) throws NumberFormatException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static long <b class="function">parseLong</b> (String <i class="parameter">s</i>, int <i class="parameter">radix</i>) throws NumberFormatException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static String <b class="function">toBinaryString</b> (long <i class="parameter">i</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static String <b class="function">toHexString</b> (long <i class="parameter">i</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static String <b class="function">toOctalString</b> (long <i class="parameter">i</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static String <b class="function">toString</b> (long <i class="parameter">i</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static String <b class="function">toString</b> (long <i class="parameter">i</i>, int <i class="parameter">radix</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static Long <b class="function">valueOf</b> (String <i class="parameter">s</i>) throws NumberFormatException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static Long <b class="function">valueOf</b> (String <i class="parameter">s</i>, int <i class="parameter">radix</i>) throws NumberFormatException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public int <b class="function">compareTo</b> (Long <i class="parameter">anotherLong</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Methods Implementing Comparable</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public int <b class="function">compareTo</b> (Object <i class="parameter">o</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Number</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public byte <b class="function">byteValue</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public double <b class="function">doubleValue</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public float <b class="function">floatValue</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">intValue</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public long <b class="function">longValue</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public short <b class="function">shortValue</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Object</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">equals</b> (Object <i class="parameter">obj</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">hashCode</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">toString</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Number(Serializable)-->Long(Comparable)</tt>
</p>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">Long.{compareTo(), getLong()}</tt>
</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">Long.{decode(), getLong(), valueOf()}</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>Math</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.lang</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1872"></a>

This class defines constants for the mathematical values
<em class="emphasis">e</em> and &pi; and defines static methods for floating-point trigonometry, exponentiation, and other operations. It is the equivalent of the C <em class="emphasis">&lt;math.h&gt;</em> functions. It
also contains methods for computing minimum and maximum
values and for generating pseudo-random numbers. </p>
<p>  Most methods of <tt class="literal">Math</tt> operate on
  <tt class="literal">float</tt> and <tt class="literal">double</tt> floating-point
  values. Remember that these values are only approximations of actual
  real numbers. To allow implementations to take full advantage of the
  floating-point capabilities of a native platform, the methods of
  <tt class="literal">Math</tt> are not required to return exactly the same
  values on all platforms. In other words, the results returned by different
  implementations may differ slightly in the least-significant bits. In Java 1.3, applications that require strict platform-independence of
  results should use <tt class="literal">StrictMath</tt> instead. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public final class <b class="classname">Math</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">No Constructor</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constants</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final double <b class="function">E</b> ;</td><td align="right"><i> =2.718281828459045</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final double <b class="function">PI</b> ;</td><td align="right"><i> =3.141592653589793</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Class Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static int <b class="function">abs</b> (int <i class="parameter">a</i>);</td><td align="right"><i> strictfp</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static long <b class="function">abs</b> (long <i class="parameter">a</i>);</td><td align="right"><i> strictfp</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static float <b class="function">abs</b> (float <i class="parameter">a</i>);</td><td align="right"><i> strictfp</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static double <b class="function">abs</b> (double <i class="parameter">a</i>);</td><td align="right"><i> strictfp</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static double <b class="function">acos</b> (double <i class="parameter">a</i>);</td><td align="right"><i> strictfp</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static double <b class="function">asin</b> (double <i class="parameter">a</i>);</td><td align="right"><i> strictfp</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static double <b class="function">atan</b> (double <i class="parameter">a</i>);</td><td align="right"><i> strictfp</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static double <b class="function">atan2</b> (double <i class="parameter">a</i>, double <i class="parameter">b</i>);</td><td align="right"><i> strictfp</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static double <b class="function">ceil</b> (double <i class="parameter">a</i>);</td><td align="right"><i> strictfp</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static double <b class="function">cos</b> (double <i class="parameter">a</i>);</td><td align="right"><i> strictfp</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static double <b class="function">exp</b> (double <i class="parameter">a</i>);</td><td align="right"><i> strictfp</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static double <b class="function">floor</b> (double <i class="parameter">a</i>);</td><td align="right"><i> strictfp</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static double <b class="function">IEEEremainder</b> (double <i class="parameter">f1</i>, double <i class="parameter">f2</i>);</td><td align="right"><i> strictfp</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static double <b class="function">log</b> (double <i class="parameter">a</i>);</td><td align="right"><i> strictfp</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static int <b class="function">max</b> (int <i class="parameter">a</i>, int <i class="parameter">b</i>);</td><td align="right"><i> strictfp</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static long <b class="function">max</b> (long <i class="parameter">a</i>, long <i class="parameter">b</i>);</td><td align="right"><i> strictfp</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static float <b class="function">max</b> (float <i class="parameter">a</i>, float <i class="parameter">b</i>);</td><td align="right"><i> strictfp</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static double <b class="function">max</b> (double <i class="parameter">a</i>, double <i class="parameter">b</i>);</td><td align="right"><i> strictfp</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static int <b class="function">min</b> (int <i class="parameter">a</i>, int <i class="parameter">b</i>);</td><td align="right"><i> strictfp</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static long <b class="function">min</b> (long <i class="parameter">a</i>, long <i class="parameter">b</i>);</td><td align="right"><i> strictfp</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static float <b class="function">min</b> (float <i class="parameter">a</i>, float <i class="parameter">b</i>);</td><td align="right"><i> strictfp</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static double <b class="function">min</b> (double <i class="parameter">a</i>, double <i class="parameter">b</i>);</td><td align="right"><i> strictfp</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static double <b class="function">pow</b> (double <i class="parameter">a</i>, double <i class="parameter">b</i>);</td><td align="right"><i> strictfp</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static double <b class="function">random</b> ();</td><td align="right"><i> strictfp</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static double <b class="function">rint</b> (double <i class="parameter">a</i>);</td><td align="right"><i> strictfp</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static int <b class="function">round</b> (float <i class="parameter">a</i>);</td><td align="right"><i> strictfp</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static long <b class="function">round</b> (double <i class="parameter">a</i>);</td><td align="right"><i> strictfp</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static double <b class="function">sin</b> (double <i class="parameter">a</i>);</td><td align="right"><i> strictfp</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static double <b class="function">sqrt</b> (double <i class="parameter">a</i>);</td><td align="right"><i> strictfp</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static double <b class="function">tan</b> (double <i class="parameter">a</i>);</td><td align="right"><i> strictfp</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public static double <b class="function">toDegrees</b> (double <i class="parameter">angrad</i>);</td><td align="right"><i> strictfp</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public static double <b class="function">toRadians</b> (double <i class="parameter">angdeg</i>);</td><td align="right"><i> strictfp</i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>NegativeArraySizeException</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.lang</b></font></td><td align="right"><font size="+1"><b><i>serializable unchecked PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1873"></a><a name="INDEX-1874"></a>

Signals an attempt to allocate an array with fewer than zero
elements. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">NegativeArraySizeException</b> extends RuntimeException {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">NegativeArraySizeException</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">NegativeArraySizeException</b> (String <i class="parameter">s</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Exception-->RuntimeException-->NegativeArraySizeException</tt>
</p>
<p>
<span class="refsect1">Thrown By: </span><tt class="literal">java.lang.reflect.Array.newInstance()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>NoClassDefFoundError</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.lang</b></font></td><td align="right"><font size="+1"><b><i>serializable error PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1875"></a><a name="INDEX-1876"></a>

Signals that the definition of a specified class cannot
be found. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">NoClassDefFoundError</b> extends LinkageError {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">NoClassDefFoundError</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">NoClassDefFoundError</b> (String <i class="parameter">s</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Error-->LinkageError-->NoClassDefFoundError</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>NoSuchFieldError</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.lang</b></font></td><td align="right"><font size="+1"><b><i>serializable error PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1877"></a><a name="INDEX-1878"></a>

Signals that a specified field cannot be found. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">NoSuchFieldError</b> extends IncompatibleClassChangeError {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">NoSuchFieldError</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">NoSuchFieldError</b> (String <i class="parameter">s</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Error-->LinkageError-->IncompatibleClassChangeError-->NoSuchFieldError</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>NoSuchFieldException</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.lang</b></font></td><td align="right"><font size="+1"><b><i>serializable checked PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1879"></a><a name="INDEX-1880"></a>
This exception signals that the specified field does not
exist in the specified class. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">NoSuchFieldException</b> extends Exception {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">NoSuchFieldException</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">NoSuchFieldException</b> (String <i class="parameter">s</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Exception-->NoSuchFieldException</tt>
</p>
<p>
<span class="refsect1">Thrown By: </span><tt class="literal">Class.{getDeclaredField(), getField()}</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>NoSuchMethodError</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.lang</b></font></td><td align="right"><font size="+1"><b><i>serializable error PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1881"></a><a name="INDEX-1882"></a>

Signals that a specified method cannot be found. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">NoSuchMethodError</b> extends IncompatibleClassChangeError {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">NoSuchMethodError</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">NoSuchMethodError</b> (String <i class="parameter">s</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Error-->LinkageError-->IncompatibleClassChangeError-->NoSuchMethodError</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>NoSuchMethodException</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.lang</b></font></td><td align="right"><font size="+1"><b><i>serializable checked PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1883"></a><a name="INDEX-1884"></a>

Signals that the specified method does not exist in the
specified class. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">NoSuchMethodException</b> extends Exception {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">NoSuchMethodException</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">NoSuchMethodException</b> (String <i class="parameter">s</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Exception-->NoSuchMethodException</tt>
</p>
<p>
<span class="refsect1">Thrown By: </span><tt class="literal">Class.{getConstructor(), getDeclaredConstructor(), getDeclaredMethod(), getMethod()}</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>NullPointerException</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.lang</b></font></td><td align="right"><font size="+1"><b><i>serializable unchecked PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1885"></a><a name="INDEX-1886"></a>

Signals an attempt to access a field or invoke a method of
a <tt class="literal">null</tt> object. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">NullPointerException</b> extends RuntimeException {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">NullPointerException</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">NullPointerException</b> (String <i class="parameter">s</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Exception-->RuntimeException-->NullPointerException</tt>
</p>
<p>
<span class="refsect1">Thrown By: </span><tt class="literal">java.awt.print.PrinterJob.setPageable()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>Number</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.lang</b></font></td><td align="right"><font size="+1"><b><i>serializable PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1887"></a>

This is an abstract class that is the superclass of
<tt class="literal">Byte</tt>, <tt class="literal">Short</tt>, 
<tt class="literal">Integer</tt>, <tt class="literal">Long</tt>, <tt class="literal">Float</tt>, and
<tt class="literal">Double</tt>. It defines the conversion functions those types implement. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public abstract class <b class="classname">Number</b> implements Serializable {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">Number</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public byte <b class="function">byteValue</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract double <b class="function">doubleValue</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract float <b class="function">floatValue</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract int <b class="function">intValue</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract long <b class="function">longValue</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public short <b class="function">shortValue</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Number(Serializable)</tt>
</p>
<p>
<span class="refsect1">Subclasses: </span><tt class="literal">Byte, Double, Float, Integer, Long, Short, java.math.BigDecimal, java.math.BigInteger</tt>
</p>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">java.awt.Button.AccessibleAWTButton.setCurrentAccessibleValue(), java.awt.Checkbox.AccessibleAWTCheckbox.setCurrentAccessibleValue(), java.awt.CheckboxMenuItem.AccessibleAWTCheckboxMenuItem.setCurrentAccessibleValue(), java.awt.MenuItem.AccessibleAWTMenuItem.setCurrentAccessibleValue(), java.awt.Scrollbar.AccessibleAWTScrollBar.setCurrentAccessibleValue(), javax.accessibility.AccessibleValue.setCurrentAccessibleValue(), javax.swing.AbstractButton.AccessibleAbstractButton.setCurrentAccessibleValue(), javax.swing.JInternalFrame.AccessibleJInternalFrame.setCurrentAccessibleValue(), javax.swing.JInternalFrame.JDesktopIcon.AccessibleJDesktopIcon.setCurrentAccessibleValue(), javax.swing.JProgressBar.AccessibleJProgressBar.setCurrentAccessibleValue(), javax.swing.JScrollBar.AccessibleJScrollBar.setCurrentAccessibleValue(), javax.swing.JSlider.AccessibleJSlider.setCurrentAccessibleValue(), javax.swing.JSplitPane.AccessibleJSplitPane.setCurrentAccessibleValue()</tt>
</p>
<p>
<span class="refsect1">Returned By: </span>Too many methods to list. </p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>NumberFormatException</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.lang</b></font></td><td align="right"><font size="+1"><b><i>serializable unchecked PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1888"></a>

Signals an illegal number format. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">NumberFormatException</b> extends IllegalArgumentException {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">NumberFormatException</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">NumberFormatException</b> (String <i class="parameter">s</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Exception-->RuntimeException-->IllegalArgumentException-->NumberFormatException</tt>
</p>
<p>
<span class="refsect1">Thrown By: </span>Too many methods to list. </p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>Object</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.lang</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1889"></a>

This is the root class in Java. All classes are subclasses
of <tt class="literal">Object</tt>, and thus all objects can invoke the
<tt class="literal">public</tt> and <tt class="literal">protected</tt> methods of this class. <a name="INDEX-1890"></a><a name="INDEX-1891"></a><tt class="literal">equals()</tt> tests whether two objects have the same
value (not whether two variables refer to the same
object, but whether two distinct objects have byte-for-byte equivalence). For classes that implement the <tt class="literal">Cloneable</tt>
interface, <tt class="literal">clone()</tt> makes a byte-for-byte copy of an
<tt class="literal">Object</tt>. <tt class="literal">getClass()</tt> returns the
<tt class="literal">Class</tt> object associated with any <tt class="literal">Object</tt>, and
the <tt class="literal">notify()</tt>, <tt class="literal">notifyAll()</tt>, and
<tt class="literal">wait()</tt> methods are used for thread synchronization
on a given <tt class="literal">Object</tt>. <a name="INDEX-1892"></a><a name="INDEX-1893"></a><a name="INDEX-1894"></a><a name="INDEX-1895"></a>
</p>
<p>A number of these <tt class="literal">Object</tt> methods should be
overridden by subclasses of <tt class="literal">Object</tt>. For example, a subclass
should provide its own definition of the
<a name="INDEX-1896"></a><tt class="literal">toString()</tt> method so that it can be used with the
string concatenation operator and with the
<tt class="literal">PrintWriter.println()</tt> methods. Defining the
<tt class="literal">toString()</tt> method for all objects also helps with
debugging. </p>
<p>A class that contains references to other objects may want to
override the <tt class="literal">equals()</tt> and <tt class="literal">clone()</tt> methods
(for <tt class="literal">Cloneable</tt> objects) so that it recursively
calls the <tt class="literal">equals()</tt> and <tt class="literal">clone()</tt> methods of the
objects referred to within the original object. <a name="INDEX-1897"></a><a name="INDEX-1898"></a>
Some classes, particularly those that override
<tt class="literal">equals()</tt>, may also want to override the
<tt class="literal">hashCode()</tt> method to provide an appropriate hashcode
to be used when storing instances in a
<tt class="literal">Hashtable</tt> data structure. </p>
<p>
<a name="INDEX-1899"></a>
A class that allocates system resources other than memory
(such as file descriptors or windowing system graphic
contexts) should override the <tt class="literal">finalize()</tt> method to
release these resources when the object is no longer
referred to and is about to be garbage-collected. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">Object</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">Object</b> ();</td><td align="right"><i> empty</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">equals</b> (Object <i class="parameter">obj</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final Class <b class="function">getClass</b> ();</td><td align="right"><i> native</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">hashCode</b> ();</td><td align="right"><i> native</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final void <b class="function">notify</b> ();</td><td align="right"><i> native</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final void <b class="function">notifyAll</b> ();</td><td align="right"><i> native</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">toString</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final void <b class="function">wait</b> () throws InterruptedException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final void <b class="function">wait</b> (long <i class="parameter">timeout</i>) throws InterruptedException;</td><td align="right"><i> native</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final void <b class="function">wait</b> (long <i class="parameter">timeout</i>, int <i class="parameter">nanos</i>) throws InterruptedException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected Object <b class="function">clone</b> () throws CloneNotSupportedException;</td><td align="right"><i> native</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected void <b class="function">finalize</b> () throws Throwable;</td><td align="right"><i> empty</i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Subclasses: </span>Too many classes to list. </p>
<p>
<span class="refsect1">Passed To: </span>Too many methods to list. </p>
<p>
<span class="refsect1">Returned By: </span>Too many methods to list. </p>
<p>
<span class="refsect1">Type Of: </span>Too many fields to list. </p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>OutOfMemoryError</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.lang</b></font></td><td align="right"><font size="+1"><b><i>serializable error PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1900"></a><a name="INDEX-1901"></a><a name="INDEX-1902"></a><a name="INDEX-1903"></a>

Signals that the interpreter has run out of memory (and that
garbage collection is unable to free any memory). </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">OutOfMemoryError</b> extends VirtualMachineError {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">OutOfMemoryError</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">OutOfMemoryError</b> (String <i class="parameter">s</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Error-->VirtualMachineError-->OutOfMemoryError</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>Package</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.lang</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-1904"></a><a name="INDEX-1905"></a><a name="INDEX-1906"></a>
  This class represents a Java package. You can obtain the
  <tt class="literal">Package</tt> object for a given <tt class="literal">Class</tt>
  by calling the <tt class="literal">getPackage()</tt> method of the
  <tt class="literal">Class</tt> object. The static
  <tt class="literal">Package.getPackage()</tt> method returns a
  <tt class="literal">Package</tt> object for the named package, if any such
  package has been loaded by the current class loader. Similarly, the static
  <tt class="literal">Package.getPackages()</tt> returns all
  <tt class="literal">Package</tt> objects that have been loaded by the
  current class loader. Note that a <tt class="literal">Package</tt> object
  is not defined unless at least one class has been loaded from
  that package. Although you can obtain the <tt class="literal">Package</tt>
  of a given <tt class="literal">Class</tt>, you cannot obtain an array of
  <tt class="literal">Class</tt> objects contained in a specified
  <tt class="literal">Package</tt>. </p>
<p>
<a name="INDEX-1907"></a><a name="INDEX-1908"></a>
  If the classes that comprise a package are contained in a JAR file
  that has the appropriate attributes set in its manifest file, the
  <tt class="literal">Package</tt> object allows you to query the title,
  vendor, and version of both the package specification and the package
  implementation; all six values are strings. The
  specification version string has a special format. It consists of one
  or more integers, separated from each other by periods. Each integer can
  have leading zeros, but is not considered an octal digit. Increasing
  numbers indicate later versions. The
  <tt class="literal">isCompatibleWith()</tt> method calls
  <tt class="literal">getSpecificationVersion()</tt> to obtain the
  specification version and compares it with the version string
  supplied as an argument. If the package-specification version is the
  same as or greater than the specified string,
  <tt class="literal">isCompatibleWith()</tt> returns
  <tt class="literal">true</tt>. This allows you to test whether the version
  of a package (typically a standard extension) is new enough for the
  purposes of your application. </p>
<p>
<a name="INDEX-1909"></a>
  Packages may be sealed, which means that all classes in the package
  must come from the same JAR file. If a package is sealed, the
  no-argument version of <tt class="literal">isSealed()</tt> returns
  <tt class="literal">true</tt>. The one-argument version of
  <tt class="literal">isSealed()</tt> returns <tt class="literal">true</tt> if the
  specified URL represents the JAR file from which the package is
  loaded. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">Package</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">No Constructor</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Class Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static Package <b class="function">getPackage</b> (String <i class="parameter">name</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static Package[ ] <b class="function">getPackages</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Property Accessor Methods (by property name)</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">getImplementationTitle</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">getImplementationVendor</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">getImplementationVersion</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">getName</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">isSealed</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">isSealed</b> (java.net.URL <i class="parameter">url</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">getSpecificationTitle</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">getSpecificationVendor</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">getSpecificationVersion</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">isCompatibleWith</b> (String <i class="parameter">desired</i>) throws NumberFormatException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Object</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">hashCode</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">toString</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">Class.getPackage(), ClassLoader.{definePackage(), getPackage(), getPackages()}, Package.{getPackage(), getPackages()}, java.net.URLClassLoader.definePackage()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>Process</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.lang</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1910"></a>

This class describes a process that is running externally to
the Java interpreter. Note that a <tt class="literal">Process</tt> is very
different from a <tt class="literal">Thread</tt>; the <tt class="literal">Process</tt>
class is abstract and cannot be instantiated. Call one of
the <tt class="literal">Runtime.exec()</tt> methods to start a process and
return a corresponding <tt class="literal">Process</tt> object. </p>
<p>
<a name="INDEX-1911"></a><a name="INDEX-1912"></a><a name="INDEX-1913"></a><tt class="literal">waitFor()</tt> blocks until the process exits. <tt class="literal">exitValue()</tt> returns the exit code of the process. <tt class="literal">destroy()</tt> kills the process. <a name="INDEX-1914"></a><a name="INDEX-1915"></a><tt class="literal">getErrorStream()</tt> returns an <tt class="literal">InputStream</tt> from
which you can read any bytes the process sends to its
standard error stream. <tt class="literal">getInputStream()</tt> returns
an <tt class="literal">InputStream</tt> from which you can read any bytes
the process sends to its standard output stream. <tt class="literal">getOutputStream()</tt> returns an <tt class="literal">OutputStream</tt>
you can use to send bytes to the standard input stream
of the process. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public abstract class <b class="classname">Process</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">Process</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Property Accessor Methods (by property name)</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract java.io.InputStream <b class="function">getErrorStream</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract java.io.InputStream <b class="function">getInputStream</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract java.io.OutputStream <b class="function">getOutputStream</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">destroy</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract int <b class="function">exitValue</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract int <b class="function">waitFor</b> () throws InterruptedException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">Runtime.exec()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>Runnable</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.lang</b></font></td><td align="right"><font size="+1"><b><i>runnable PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1916"></a><a name="INDEX-1917"></a>
This interface specifies the <tt class="literal">run()</tt> method that
is required to use with the <tt class="literal">Thread</tt> class. Any class
that implements this interface can provide the body
of a thread. See <tt class="literal">Thread</tt> for more information. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public interface <b class="classname">Runnable</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">run</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Implementations: </span><tt class="literal">java.awt.image.renderable.RenderableImageProducer, Thread, java.util.TimerTask, javax.jms.Session, javax.swing.text.AsyncBoxView.ChildState</tt>
</p>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">java.awt.EventQueue.{invokeAndWait(), invokeLater()}, java.awt.event.InvocationEvent.InvocationEvent(), Thread.Thread(), javax.swing.SwingUtilities.{invokeAndWait(), invokeLater()}, javax.swing.text.AbstractDocument.render(), javax.swing.text.Document.render(), javax.swing.text.LayoutQueue.addTask()</tt>
</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">javax.swing.text.LayoutQueue.waitForWork()</tt>
</p>
<p>
<span class="refsect1">Type Of: </span><tt class="literal">java.awt.event.InvocationEvent.runnable</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>Runtime</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.lang</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1918"></a><a name="INDEX-1919"></a>
This class encapsulates a number of platform-dependent
system functions. The static method
<tt class="literal">getRuntime()</tt> returns the <tt class="literal">Runtime</tt> object
for the current platform; this object can perform system functions in a platform-independent
way. </p>
<p>
<a name="INDEX-1920"></a><tt class="literal">exit()</tt> causes the Java interpreter to exit and
  return a specified return code. This method is usually invoked through
  <tt class="literal">System.exit()</tt>. <a name="INDEX-1921"></a>
  In Java 1.3,
  <tt class="literal">addShutdownHook()</tt> registers an unstarted
  <tt class="literal">Thread</tt> object that is run when the virtual
  machine shuts down, either through a call to <tt class="literal">exit()</tt>
  or through a user interrupt (a CTRL-C, for example). The purpose
  of a shutdown hook is to perform necessary cleanup, such as shutting
  down network connections, deleting temporary files, and so on. Any
  number of hooks can be registered with
  <tt class="literal">addShutdownHook()</tt>. Before the interpreter exits,
  it starts all registered shutdown-hook threads and lets them run
  concurrently. Any hooks you write should perform their cleanup
  operation and exit promptly so they do not delay the shutdown
  process. <a name="INDEX-1922"></a><a name="INDEX-1923"></a>
  To remove a shutdown hook before it is run, call
  <tt class="literal">removeShutdownHook()</tt>. To force an immediate exit
  that does not invoke the shutdown hooks, call
  <tt class="literal">halt()</tt>. </p>
<p>
<a name="INDEX-1924"></a><tt class="literal">exec()</tt> starts a new process running externally to
the interpreter. Note that any processes run outside of
Java may be system-dependent. </p>
<p>
<a name="INDEX-1925"></a><a name="INDEX-1926"></a><a name="INDEX-1927"></a><a name="INDEX-1928"></a><tt class="literal">freeMemory()</tt> returns the approximate amount of free
memory. <tt class="literal">totalMemory()</tt> returns the total amount of
memory available to the Java interpreter. <tt class="literal">gc()</tt>
forces the garbage collector to run synchronously, which may
free up more memory. Similarly, <tt class="literal">runFinalization()</tt><a name="INDEX-1929"></a>
forces the <tt class="literal">finalize()</tt> methods of unreferenced
objects to be run immediately. This may free up system
resources those objects were holding. </p>
<p>
<a name="INDEX-1930"></a><a name="INDEX-1931"></a><tt class="literal">load()</tt> loads a dynamic library with a fully
specified pathname. <tt class="literal">loadLibrary()</tt> loads a dynamic
library with only the library name specified; it looks in
platform-dependent locations for the specified library. These libraries generally contain native code definitions
for native methods. </p>
<p>
<a name="INDEX-1932"></a><a name="INDEX-1933"></a><tt class="literal">traceInstructions()</tt> and <tt class="literal">traceMethodCalls()</tt>
enable and disable tracing by the interpreter. These methods are used
for debugging or profiling an application. It is not specified how
the VM emits the trace information, and VMs are not even required to
support this feature. </p>
<p>Note that some of the <tt class="literal">Runtime</tt> methods are
more commonly called via the static methods of the
<tt class="literal">System</tt> class. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">Runtime</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">No Constructor</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Class Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static Runtime <b class="function">getRuntime</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.3</span></td><td align="left">public void <b class="function">addShutdownHook</b> (Thread <i class="parameter">hook</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Process <b class="function">exec</b> (String[ ] <i class="parameter">cmdarray</i>) throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Process <b class="function">exec</b> (String <i class="parameter">command</i>) throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Process <b class="function">exec</b> (String <i class="parameter">command</i>, String[ ] <i class="parameter">envp</i>) throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Process <b class="function">exec</b> (String[ ] <i class="parameter">cmdarray</i>, String[ ] <i class="parameter">envp</i>) throws java.io.IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">exit</b> (int <i class="parameter">status</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public long <b class="function">freeMemory</b> ();</td><td align="right"><i> native</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">gc</b> ();</td><td align="right"><i> native</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.3</span></td><td align="left">public void <b class="function">halt</b> (int <i class="parameter">status</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">load</b> (String <i class="parameter">filename</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">loadLibrary</b> (String <i class="parameter">libname</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.3</span></td><td align="left">public boolean <b class="function">removeShutdownHook</b> (Thread <i class="parameter">hook</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">runFinalization</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public long <b class="function">totalMemory</b> ();</td><td align="right"><i> native</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">traceInstructions</b> (boolean <i class="parameter">on</i>);</td><td align="right"><i> native</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">traceMethodCalls</b> (boolean <i class="parameter">on</i>);</td><td align="right"><i> native</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Deprecated Public Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">#</span></td><td align="left">public java.io.InputStream <b class="function">getLocalizedInputStream</b> (java.io.InputStream <i class="parameter">in</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">#</span></td><td align="left">public java.io.OutputStream <b class="function">getLocalizedOutputStream</b> (java.io.OutputStream <i class="parameter">out</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1#</span></td><td align="left">public static void <b class="function">runFinalizersOnExit</b> (boolean <i class="parameter">value</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">Runtime.getRuntime()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>RuntimeException</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.lang</b></font></td><td align="right"><font size="+1"><b><i>serializable unchecked PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1934"></a>

This exception type is not used directly, but serves as a
superclass of a group of run-time exceptions that need not be
declared in the <tt class="literal">throws</tt> clause of a method
definition. These exceptions need not be declared because
they are runtime conditions that can generally occur in any
Java method. Thus, declaring them would be unduly
burdensome, and Java does not require it. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">RuntimeException</b> extends Exception {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">RuntimeException</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">RuntimeException</b> (String <i class="parameter">s</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Exception-->RuntimeException</tt>
</p>
<p>
<span class="refsect1">Subclasses: </span>Too many classes to list. </p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>RuntimePermission</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.lang</b></font></td><td align="right"><font size="+1"><b><i>serializable permission</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-1935"></a>
  This class is a <tt class="literal">java.security.Permission</tt> that
  represents access to various important system facilities. A
  <tt class="literal">RuntimePermission</tt> has a name, or target, that
  represents the facility for which permission is being sought or
  granted. The name "exitVM" represents permission to call
  <tt class="literal">System.exit()</tt>, and the name
  "accessClassInPackage.java.lang" represents permission to read classes
  from the <tt class="literal">java.lang</tt> package. The name of a
  <tt class="literal">RuntimePermission</tt> may use a ".*" suffix as a
  wildcard. For example, the name "accessClassInPackage.java.*"
  represents permission to read classes from any package whose name
  begins with "java.". <tt class="literal">RuntimePermission</tt> does not
  use action list strings as some <tt class="literal">Permission</tt>
  classes do; the name of the permission alone is enough. </p>

<p>  Supported <tt class="literal">RuntimePermssion</tt> names are:
  "accessClassInPackage.<em class="replaceable">package</em>",
  "accessDeclaredMembers",
  "createClassLoader",
  "createSecurityManager",
  "defineClassInPackage.<em class="replaceable">package</em>",
  "exitVM",
  "getClassLoader",
  "getProtectionDomain",
  "loadLibrary.<em class="replaceable">library_name</em>",
  "modifyThread",
  "modifyThreadGroup",
  "queuePrintJob",
  "readFileDescriptor",
  "set-ContextClassLoader",
  "setFactory",
  "setIO",
  "setSecurityManager",
  "stopThread",
  and
  "writeFileDescriptor". </p>
<p>
<a name="INDEX-1936"></a>
  System administrators configuring security policies should be familiar
  with these permission names, the operations they govern access to, and
  with the risks inherent in granting any of them. Although system
  programmers may need to work with this class, application programmers
  should never need to use <tt class="literal">RuntimePermssion</tt> directly. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public final class <b class="classname">RuntimePermission</b> extends java.security.BasicPermission {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">RuntimePermission</b> (String <i class="parameter">name</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">RuntimePermission</b> (String <i class="parameter">name</i>, String <i class="parameter">actions</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->java.security.Permission(java.security.Guard,Serializable)-->java.security.BasicPermission(Serializable)-->RuntimePermission</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>SecurityException</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.lang</b></font></td><td align="right"><font size="+1"><b><i>serializable unchecked PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1937"></a>

Signals that an operation is not permitted for security
reasons. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">SecurityException</b> extends RuntimeException {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">SecurityException</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">SecurityException</b> (String <i class="parameter">s</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Exception-->RuntimeException-->SecurityException</tt>
</p>
<p>
<span class="refsect1">Subclasses: </span><tt class="literal">java.rmi.RMISecurityException, java.security.AccessControlException</tt>
</p>
<p>
<span class="refsect1">Thrown By: </span>Too many methods to list. </p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>SecurityManager</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.lang</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-1938"></a>
  This class defines the methods necessary to implement a
  security policy for the safe execution of untrusted code. Before
  performing potentially sensitive operations, Java calls methods of the
  <tt class="literal">SecurityManager</tt> object currently in effect to determine
  whether the operations are permitted. These methods throw a
  <tt class="literal">SecurityException</tt> if the operation is not permitted. Typical applications do not need to use or subclass
  <tt class="literal">SecurityManager</tt>. It is typically used only by web browsers,
  applet viewers, and other programs that need to run untrusted code in
  a controlled environment. </p>
<p>
<a name="INDEX-1939"></a>
  Prior to Java 1.2, this class is <tt class="literal">abstract</tt>, and
  the default implementation of each <tt class="literal">check()</tt> method
  throws a <tt class="literal">SecurityException</tt> unconditionally. The
  Java security mechanism has been overhauled as of Java 1.2. As part
  of the overhaul, this class is no longer <tt class="literal">abstract</tt>
  and its methods have useful default implementations, so there is
  rarely a need to subclass it. If so, the method returns silently; if
  not, it throws a <tt class="literal">SecurityException</tt>. <tt class="literal">checkPermission()</tt> operates by invoking the
  <tt class="literal">checkPermission()</tt> method of the system
  <tt class="literal">java.security.AccessController</tt> object. In Java
  1.2 and later, all other <tt class="literal">check()</tt> methods of
  <tt class="literal">SecurityManager</tt> are now implemented on top of
  <tt class="literal">checkPermission()</tt>. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">SecurityManager</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">SecurityManager</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Property Accessor Methods (by property name)</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Object <b class="function">getSecurityContext</b> ();</td><td align="right"><i> default:AccessControlContext</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public ThreadGroup <b class="function">getThreadGroup</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">checkAccept</b> (String <i class="parameter">host</i>, int <i class="parameter">port</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">checkAccess</b> (Thread <i class="parameter">t</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">checkAccess</b> (ThreadGroup <i class="parameter">g</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public void <b class="function">checkAwtEventQueueAccess</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">checkConnect</b> (String <i class="parameter">host</i>, int <i class="parameter">port</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">checkConnect</b> (String <i class="parameter">host</i>, int <i class="parameter">port</i>, Object <i class="parameter">context</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">checkCreateClassLoader</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">checkDelete</b> (String <i class="parameter">file</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">checkExec</b> (String <i class="parameter">cmd</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">checkExit</b> (int <i class="parameter">status</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">checkLink</b> (String <i class="parameter">lib</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">checkListen</b> (int <i class="parameter">port</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public void <b class="function">checkMemberAccess</b> (Class <i class="parameter">clazz</i>, int <i class="parameter">which</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public void <b class="function">checkMulticast</b> (java.net.InetAddress <i class="parameter">maddr</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public void <b class="function">checkMulticast</b> (java.net.InetAddress <i class="parameter">maddr</i>, byte <i class="parameter">ttl</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">checkPackageAccess</b> (String <i class="parameter">pkg</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">checkPackageDefinition</b> (String <i class="parameter">pkg</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public void <b class="function">checkPermission</b> (java.security.Permission <i class="parameter">perm</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public void <b class="function">checkPermission</b> (java.security.Permission <i class="parameter">perm</i>, Object <i class="parameter">context</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public void <b class="function">checkPrintJobAccess</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">checkPropertiesAccess</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">checkPropertyAccess</b> (String <i class="parameter">key</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">checkRead</b> (String <i class="parameter">file</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">checkRead</b> (java.io.FileDescriptor <i class="parameter">fd</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">checkRead</b> (String <i class="parameter">file</i>, Object <i class="parameter">context</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public void <b class="function">checkSecurityAccess</b> (String <i class="parameter">target</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">checkSetFactory</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public void <b class="function">checkSystemClipboardAccess</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">checkTopLevelWindow</b> (Object <i class="parameter">window</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">checkWrite</b> (String <i class="parameter">file</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">checkWrite</b> (java.io.FileDescriptor <i class="parameter">fd</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected Class[ ] <b class="function">getClassContext</b> ();</td><td align="right"><i> native</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Deprecated Public Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">#</span></td><td align="left">public boolean <b class="function">getInCheck</b> ();</td><td align="right"><i> default:false</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Deprecated Protected Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">#</span></td><td align="left">protected int <b class="function">classDepth</b> (String <i class="parameter">name</i>);</td><td align="right"><i> native</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">#</span></td><td align="left">protected int <b class="function">classLoaderDepth</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">#</span></td><td align="left">protected ClassLoader <b class="function">currentClassLoader</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1#</span></td><td align="left">protected Class <b class="function">currentLoadedClass</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">#</span></td><td align="left">protected boolean <b class="function">inClass</b> (String <i class="parameter">name</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">#</span></td><td align="left">protected boolean <b class="function">inClassLoader</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Deprecated Protected Fields</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">#</span></td><td align="left">protected boolean <b class="function">inCheck</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Subclasses: </span><tt class="literal">java.rmi.RMISecurityManager</tt>
</p>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">System.setSecurityManager()</tt>
</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">System.getSecurityManager()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>Short</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.lang</b></font></td><td align="right"><font size="+1"><b><i>serializable comparable PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1940"></a><a name="INDEX-1941"></a><a name="INDEX-1942"></a>
This class provides an object wrapper around the
<tt class="literal">short</tt> primitive type. It defines useful constants
for the minimum and maximum values that can be stored by the
<tt class="literal">short</tt> type, and also a <tt class="literal">Class</tt> object constant
that represents the <tt class="literal">short</tt> type. It also provides
various methods for converting <tt class="literal">Short</tt> values to and
from strings and other numeric types. </p>
<p>
<a name="INDEX-1943"></a><a name="INDEX-1944"></a><a name="INDEX-1945"></a>
Most of the static methods of this class can convert
a <tt class="literal">String</tt> to a <tt class="literal">Short</tt> object or a <tt class="literal">short</tt>
value; the four <tt class="literal">parseShort()</tt> and <tt class="literal">valueOf()</tt>
methods parse a number from the specified string using an
optionally specified radix and return it in one of these two
forms. The <tt class="literal">decode()</tt> method parses a number specified
in base 10, base 8, or base 16 and returns it as a
<tt class="literal">Short</tt>. If the string begins with "0x" or "#", it is
interpreted as a hexadecimal number; if it begins with
"0", it is interpreted as an octal number. Otherwise, it is
interpreted as a decimal number. </p>
<p>
<a name="INDEX-1946"></a>
Note that this class has two different <tt class="literal">toString()</tt>
methods. One is static and converts a <tt class="literal">short</tt>
primitive value to a string. The other is the usual
<tt class="literal">toString()</tt> method that converts a <tt class="literal">Short</tt>
object to a string. Most of the remaining methods convert a
<tt class="literal">Short</tt> to various primitive numeric types. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public final class <b class="classname">Short</b> extends Number implements Comparable {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">Short</b> (short <i class="parameter">value</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">Short</b> (String <i class="parameter">s</i>) throws NumberFormatException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constants</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final short <b class="function">MAX_VALUE</b> ;</td><td align="right"><i> =32767</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final short <b class="function">MIN_VALUE</b> ;</td><td align="right"><i> =-32768</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final Class <b class="function">TYPE</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Class Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static Short <b class="function">decode</b> (String <i class="parameter">nm</i>) throws NumberFormatException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static short <b class="function">parseShort</b> (String <i class="parameter">s</i>) throws NumberFormatException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static short <b class="function">parseShort</b> (String <i class="parameter">s</i>, int <i class="parameter">radix</i>) throws NumberFormatException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static String <b class="function">toString</b> (short <i class="parameter">s</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static Short <b class="function">valueOf</b> (String <i class="parameter">s</i>) throws NumberFormatException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static Short <b class="function">valueOf</b> (String <i class="parameter">s</i>, int <i class="parameter">radix</i>) throws NumberFormatException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public int <b class="function">compareTo</b> (Short <i class="parameter">anotherShort</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Methods Implementing Comparable</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public int <b class="function">compareTo</b> (Object <i class="parameter">o</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Number</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public byte <b class="function">byteValue</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public double <b class="function">doubleValue</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public float <b class="function">floatValue</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">intValue</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public long <b class="function">longValue</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public short <b class="function">shortValue</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Object</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">equals</b> (Object <i class="parameter">obj</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">hashCode</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">toString</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Number(Serializable)-->Short(Comparable)</tt>
</p>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">Short.compareTo()</tt>
</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">Short.{decode(), valueOf()}</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>StackOverflowError</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.lang</b></font></td><td align="right"><font size="+1"><b><i>serializable error PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1947"></a><a name="INDEX-1948"></a>

Signals that a stack overflow has occurred within the Java interpreter. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">StackOverflowError</b> extends VirtualMachineError {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">StackOverflowError</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">StackOverflowError</b> (String <i class="parameter">s</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Error-->VirtualMachineError-->StackOverflowError</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>StrictMath</b></font></td><td align="right"><font size="+1"><b>Java 1.3 Beta</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.lang</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-1949"></a>
  This class is identical to the <tt class="literal">Math</tt>
  class, but additionally requires that its methods strictly adhere to
  the behavior of certain published algorithms. The methods of
  <tt class="literal">StrictMath</tt> are intended to operate identically,
  down to the very least significant bit, for all possible arguments. When strict platform-independence of floating-point results is not
  required, use the <tt class="literal">Math</tt> class for better
  performance. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public final class <b class="classname">StrictMath</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">No Constructor</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constants</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final double <b class="function">E</b> ;</td><td align="right"><i> =2.718281828459045</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final double <b class="function">PI</b> ;</td><td align="right"><i> =3.141592653589793</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Class Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static int <b class="function">abs</b> (int <i class="parameter">a</i>);</td><td align="right"><i> strictfp</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static long <b class="function">abs</b> (long <i class="parameter">a</i>);</td><td align="right"><i> strictfp</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static float <b class="function">abs</b> (float <i class="parameter">a</i>);</td><td align="right"><i> strictfp</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static double <b class="function">abs</b> (double <i class="parameter">a</i>);</td><td align="right"><i> strictfp</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static double <b class="function">acos</b> (double <i class="parameter">a</i>);</td><td align="right"><i> native strictfp</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static double <b class="function">asin</b> (double <i class="parameter">a</i>);</td><td align="right"><i> native strictfp</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static double <b class="function">atan</b> (double <i class="parameter">a</i>);</td><td align="right"><i> native strictfp</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static double <b class="function">atan2</b> (double <i class="parameter">a</i>, double <i class="parameter">b</i>);</td><td align="right"><i> native strictfp</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static double <b class="function">ceil</b> (double <i class="parameter">a</i>);</td><td align="right"><i> native strictfp</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static double <b class="function">cos</b> (double <i class="parameter">a</i>);</td><td align="right"><i> native strictfp</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static double <b class="function">exp</b> (double <i class="parameter">a</i>);</td><td align="right"><i> native strictfp</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static double <b class="function">floor</b> (double <i class="parameter">a</i>);</td><td align="right"><i> native strictfp</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static double <b class="function">IEEEremainder</b> (double <i class="parameter">f1</i>, double <i class="parameter">f2</i>);</td><td align="right"><i> native strictfp</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static double <b class="function">log</b> (double <i class="parameter">a</i>);</td><td align="right"><i> native strictfp</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static int <b class="function">max</b> (int <i class="parameter">a</i>, int <i class="parameter">b</i>);</td><td align="right"><i> strictfp</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static long <b class="function">max</b> (long <i class="parameter">a</i>, long <i class="parameter">b</i>);</td><td align="right"><i> strictfp</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static float <b class="function">max</b> (float <i class="parameter">a</i>, float <i class="parameter">b</i>);</td><td align="right"><i> strictfp</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static double <b class="function">max</b> (double <i class="parameter">a</i>, double <i class="parameter">b</i>);</td><td align="right"><i> strictfp</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static int <b class="function">min</b> (int <i class="parameter">a</i>, int <i class="parameter">b</i>);</td><td align="right"><i> strictfp</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static long <b class="function">min</b> (long <i class="parameter">a</i>, long <i class="parameter">b</i>);</td><td align="right"><i> strictfp</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static float <b class="function">min</b> (float <i class="parameter">a</i>, float <i class="parameter">b</i>);</td><td align="right"><i> strictfp</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static double <b class="function">min</b> (double <i class="parameter">a</i>, double <i class="parameter">b</i>);</td><td align="right"><i> strictfp</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static double <b class="function">pow</b> (double <i class="parameter">a</i>, double <i class="parameter">b</i>);</td><td align="right"><i> native strictfp</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static double <b class="function">random</b> ();</td><td align="right"><i> strictfp</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static double <b class="function">rint</b> (double <i class="parameter">a</i>);</td><td align="right"><i> native strictfp</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static int <b class="function">round</b> (float <i class="parameter">a</i>);</td><td align="right"><i> strictfp</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static long <b class="function">round</b> (double <i class="parameter">a</i>);</td><td align="right"><i> strictfp</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static double <b class="function">sin</b> (double <i class="parameter">a</i>);</td><td align="right"><i> native strictfp</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static double <b class="function">sqrt</b> (double <i class="parameter">a</i>);</td><td align="right"><i> native strictfp</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static double <b class="function">tan</b> (double <i class="parameter">a</i>);</td><td align="right"><i> native strictfp</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static double <b class="function">toDegrees</b> (double <i class="parameter">angrad</i>);</td><td align="right"><i> strictfp</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static double <b class="function">toRadians</b> (double <i class="parameter">angdeg</i>);</td><td align="right"><i> strictfp</i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>String</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.lang</b></font></td><td align="right"><font size="+1"><b><i>serializable comparable PJ1.1</i></b></font></td>
</tr>
</table>



<p>
<a name="INDEX-1950"></a>

The <tt class="literal">String</tt> class represents a string of
characters. A <tt class="literal">String</tt> object is created by the Java
compiler whenever it encounters a string in
double quotes; this method of creation is typically simpler
than using a constructor. Some methods of this
class provide useful string-manipulation functions. <a name="INDEX-1951"></a><a name="INDEX-1952"></a><a name="INDEX-1953"></a><tt class="literal">length()</tt> returns the number of characters in a
string. <tt class="literal">charAt()</tt> extracts a character from a
string. <tt class="literal">compareTo()</tt> compares two strings, while
<a name="INDEX-1954"></a><a name="INDEX-1955"></a><a name="INDEX-1956"></a><tt class="literal">equalsIgnoreCase()</tt> tests strings for equality,
ignoring case. <tt class="literal">startsWith()</tt> and <tt class="literal">endsWith()</tt>
compare the start and end of a string to a specified
value. <tt class="literal">indexOf()</tt> and <tt class="literal">lastIndexOf()</tt> search
<a name="INDEX-1957"></a><a name="INDEX-1958"></a><a name="INDEX-1959"></a>
forward and backward in a string for a specified character
or substring. <tt class="literal">substring()</tt> returns a substring of a
string. <tt class="literal">replace()</tt> creates a new copy of the string
with one character replaced by another. <a name="INDEX-1960"></a><a name="INDEX-1961"></a><a name="INDEX-1962"></a><a name="INDEX-1963"></a><a name="INDEX-1964"></a><tt class="literal">toUpperCase()</tt> and <tt class="literal">toLowerCase()</tt> convert the
case of a string. <tt class="literal">trim()</tt> strips whitespace from the
start and end of a string. <tt class="literal">concat()</tt> concatenates
two strings, which can also be done with the <tt class="literal">+</tt>
operator. <a name="INDEX-1965"></a>
The static <tt class="literal">valueOf()</tt> methods convert various Java
primitive types to strings. </p>
<p>Note that <tt class="literal">String</tt> objects are immutable; there is no
<tt class="literal">setCharAt()</tt> method to change the contents. The
methods above that return a <tt class="literal">String</tt> do not modify the
string they are passed, but instead return a modified copy
of the string. Use a <tt class="literal">StringBuffer</tt> if you want to
manipulate the contents of a string or
<tt class="literal">toCharArray()</tt> to convert a string to an array of
<tt class="literal">char</tt> values. <a name="INDEX-1966"></a>
</p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public final class <b class="classname">String</b> implements ComparableSerializable {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">String</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public <b class="function">String</b> (byte[ ] <i class="parameter">bytes</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">String</b> (StringBuffer <i class="parameter">buffer</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">String</b> (String <i class="parameter">value</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">String</b> (char[ ] <i class="parameter">value</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public <b class="function">String</b> (byte[ ] <i class="parameter">bytes</i>, String <i class="parameter">enc</i>) throws java.io.UnsupportedEncodingException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">#</span></td><td align="left">public <b class="function">String</b> (byte[ ] <i class="parameter">ascii</i>, int <i class="parameter">hibyte</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">String</b> (char[ ] <i class="parameter">value</i>, int <i class="parameter">offset</i>, int <i class="parameter">count</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public <b class="function">String</b> (byte[ ] <i class="parameter">bytes</i>, int <i class="parameter">offset</i>, int <i class="parameter">length</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public <b class="function">String</b> (byte[ ] <i class="parameter">bytes</i>, int <i class="parameter">offset</i>, int <i class="parameter">length</i>, String <i class="parameter">enc</i>) throws java.io.UnsupportedEncodingException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">#</span></td><td align="left">public <b class="function">String</b> (byte[ ] <i class="parameter">ascii</i>, int <i class="parameter">hibyte</i>, int <i class="parameter">offset</i>, int <i class="parameter">count</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constants</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public static final java.util.Comparator <b class="function">CASE_INSENSITIVE_ORDER</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Class Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static String <b class="function">copyValueOf</b> (char[ ] <i class="parameter">data</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static String <b class="function">copyValueOf</b> (char[ ] <i class="parameter">data</i>, int <i class="parameter">offset</i>, int <i class="parameter">count</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static String <b class="function">valueOf</b> (long <i class="parameter">l</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static String <b class="function">valueOf</b> (float <i class="parameter">f</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static String <b class="function">valueOf</b> (double <i class="parameter">d</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static String <b class="function">valueOf</b> (int <i class="parameter">i</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static String <b class="function">valueOf</b> (Object <i class="parameter">obj</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static String <b class="function">valueOf</b> (char[ ] <i class="parameter">data</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static String <b class="function">valueOf</b> (char <i class="parameter">c</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static String <b class="function">valueOf</b> (boolean <i class="parameter">b</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static String <b class="function">valueOf</b> (char[ ] <i class="parameter">data</i>, int <i class="parameter">offset</i>, int <i class="parameter">count</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public char <b class="function">charAt</b> (int <i class="parameter">index</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">compareTo</b> (String <i class="parameter">anotherString</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public int <b class="function">compareToIgnoreCase</b> (String <i class="parameter">str</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">concat</b> (String <i class="parameter">str</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">endsWith</b> (String <i class="parameter">suffix</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">equalsIgnoreCase</b> (String <i class="parameter">anotherString</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public byte[ ] <b class="function">getBytes</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public byte[ ] <b class="function">getBytes</b> (String <i class="parameter">enc</i>) throws java.io.UnsupportedEncodingException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">getChars</b> (int <i class="parameter">srcBegin</i>, int <i class="parameter">srcEnd</i>, char[ ] <i class="parameter">dst</i>, int <i class="parameter">dstBegin</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">indexOf</b> (String <i class="parameter">str</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">indexOf</b> (int <i class="parameter">ch</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">indexOf</b> (int <i class="parameter">ch</i>, int <i class="parameter">fromIndex</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">indexOf</b> (String <i class="parameter">str</i>, int <i class="parameter">fromIndex</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">intern</b> ();</td><td align="right"><i> native</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">lastIndexOf</b> (int <i class="parameter">ch</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">lastIndexOf</b> (String <i class="parameter">str</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">lastIndexOf</b> (int <i class="parameter">ch</i>, int <i class="parameter">fromIndex</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">lastIndexOf</b> (String <i class="parameter">str</i>, int <i class="parameter">fromIndex</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">length</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">regionMatches</b> (int <i class="parameter">toffset</i>, String <i class="parameter">other</i>, int <i class="parameter">ooffset</i>, int <i class="parameter">len</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">regionMatches</b> (boolean <i class="parameter">ignoreCase</i>, int <i class="parameter">toffset</i>, String <i class="parameter">other</i>, int <i class="parameter">ooffset</i>, int <i class="parameter">len</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">replace</b> (char <i class="parameter">oldChar</i>, char <i class="parameter">newChar</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">startsWith</b> (String <i class="parameter">prefix</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">startsWith</b> (String <i class="parameter">prefix</i>, int <i class="parameter">toffset</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">substring</b> (int <i class="parameter">beginIndex</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">substring</b> (int <i class="parameter">beginIndex</i>, int <i class="parameter">endIndex</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public char[ ] <b class="function">toCharArray</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">toLowerCase</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public String <b class="function">toLowerCase</b> (java.util.Locale <i class="parameter">locale</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">toUpperCase</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public String <b class="function">toUpperCase</b> (java.util.Locale <i class="parameter">locale</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">trim</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Methods Implementing Comparable</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public int <b class="function">compareTo</b> (Object <i class="parameter">o</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Object</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">equals</b> (Object <i class="parameter">anObject</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">hashCode</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">toString</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Deprecated Public Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">#</span></td><td align="left">public void <b class="function">getBytes</b> (int <i class="parameter">srcBegin</i>, int <i class="parameter">srcEnd</i>, byte[ ] <i class="parameter">dst</i>, int <i class="parameter">dstBegin</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->String(Comparable,Serializable)</tt>
</p>
<p>
<span class="refsect1">Passed To: </span>Too many methods to list. </p>
<p>
<span class="refsect1">Returned By: </span>Too many methods to list. </p>
<p>
<span class="refsect1">Type Of: </span>Too many fields to list. </p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>StringBuffer</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.lang</b></font></td><td align="right"><font size="+1"><b><i>serializable PJ1.1</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-1967"></a><a name="INDEX-1968"></a><a name="INDEX-1969"></a><a name="INDEX-1970"></a><a name="INDEX-1971"></a><a name="INDEX-1972"></a><a name="INDEX-1973"></a><a name="INDEX-1974"></a><a name="INDEX-1975"></a><a name="INDEX-1976"></a>
  This class represents a mutable string of characters that can grow or
  shrink as necessary. Its mutability makes it suitable for processing
  text in place, which is not possible with the immutable
  <tt class="literal">String</tt> class. Its resizability and the various
  methods it implements make it easier to use than a
  <tt class="literal">char[]</tt>. You can query the character stored at a given
  index with <tt class="literal">charAt()</tt> and set the character with
  <tt class="literal">setCharAt()</tt>. Use the various
  <tt class="literal">append()</tt> methods to append text to the end of the
  buffer. Use <tt class="literal">insert()</tt> to insert text at a specified
  position within the buffer. Note that arguments to
  <tt class="literal">append()</tt> and <tt class="literal">insert()</tt> are
  converted to strings as necessary before they are appended or
  inserted. Use <tt class="literal">toString()</tt> to convert the contents
  of a <tt class="literal">StringBuffer</tt> to a <tt class="literal">String</tt>
  object. In Java 1.2 and later, use <tt class="literal">deleteCharAt()</tt> or
  <tt class="literal">delete()</tt> to delete a single character or a range of
  characters from the buffer. Use <tt class="literal">replace()</tt> to
  replace a range of characters with a specified
  <tt class="literal">String</tt>, and use <tt class="literal">substring()</tt> to
  convert a portion of a <tt class="literal">StringBuffer</tt> to a
  <tt class="literal">String</tt>. </p>
<p>
<a name="INDEX-1977"></a><a name="INDEX-1978"></a>
  String concatenation in Java is performed with the
  <tt class="literal">+</tt> operator and is implemented using the
  <tt class="literal">append()</tt> method of a
  <tt class="literal">StringBuffer</tt>. After a string is processed in a
  <tt class="literal">StringBuffer</tt> object, it can be efficiently converted
  to a <tt class="literal">String</tt> object for subsequent use. The
  <tt class="literal">StringBuffer.toString()</tt> method is typically implemented so
  that it does not copy the internal array of characters. Instead, it
  shares that array with the new <tt class="literal">String</tt> object, making a
  new copy for itself only if and when further modifications are made to
  the <tt class="literal">StringBuffer</tt> object. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public final class <b class="classname">StringBuffer</b> implements Serializable {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">StringBuffer</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">StringBuffer</b> (int <i class="parameter">length</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">StringBuffer</b> (String <i class="parameter">str</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public StringBuffer <b class="function">append</b> (char[ ] <i class="parameter">str</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public StringBuffer <b class="function">append</b> (boolean <i class="parameter">b</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public StringBuffer <b class="function">append</b> (Object <i class="parameter">obj</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public StringBuffer <b class="function">append</b> (String <i class="parameter">str</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public StringBuffer <b class="function">append</b> (char <i class="parameter">c</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public StringBuffer <b class="function">append</b> (float <i class="parameter">f</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public StringBuffer <b class="function">append</b> (double <i class="parameter">d</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public StringBuffer <b class="function">append</b> (int <i class="parameter">i</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public StringBuffer <b class="function">append</b> (long <i class="parameter">l</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public StringBuffer <b class="function">append</b> (char[ ] <i class="parameter">str</i>, int <i class="parameter">offset</i>, int <i class="parameter">len</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">capacity</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public char <b class="function">charAt</b> (int <i class="parameter">index</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public StringBuffer <b class="function">delete</b> (int <i class="parameter">start</i>, int <i class="parameter">end</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public StringBuffer <b class="function">deleteCharAt</b> (int <i class="parameter">index</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">ensureCapacity</b> (int <i class="parameter">minimumCapacity</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">getChars</b> (int <i class="parameter">srcBegin</i>, int <i class="parameter">srcEnd</i>, char[ ] <i class="parameter">dst</i>, int <i class="parameter">dstBegin</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public StringBuffer <b class="function">insert</b> (int <i class="parameter">offset</i>, char[ ] <i class="parameter">str</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public StringBuffer <b class="function">insert</b> (int <i class="parameter">offset</i>, boolean <i class="parameter">b</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public StringBuffer <b class="function">insert</b> (int <i class="parameter">offset</i>, Object <i class="parameter">obj</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public StringBuffer <b class="function">insert</b> (int <i class="parameter">offset</i>, String <i class="parameter">str</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public StringBuffer <b class="function">insert</b> (int <i class="parameter">offset</i>, char <i class="parameter">c</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public StringBuffer <b class="function">insert</b> (int <i class="parameter">offset</i>, float <i class="parameter">f</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public StringBuffer <b class="function">insert</b> (int <i class="parameter">offset</i>, double <i class="parameter">d</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public StringBuffer <b class="function">insert</b> (int <i class="parameter">offset</i>, int <i class="parameter">i</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public StringBuffer <b class="function">insert</b> (int <i class="parameter">offset</i>, long <i class="parameter">l</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public StringBuffer <b class="function">insert</b> (int <i class="parameter">index</i>, char[ ] <i class="parameter">str</i>, int <i class="parameter">offset</i>, int <i class="parameter">len</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">length</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public StringBuffer <b class="function">replace</b> (int <i class="parameter">start</i>, int <i class="parameter">end</i>, String <i class="parameter">str</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public StringBuffer <b class="function">reverse</b> ();</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setCharAt</b> (int <i class="parameter">index</i>, char <i class="parameter">ch</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setLength</b> (int <i class="parameter">newLength</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public String <b class="function">substring</b> (int <i class="parameter">start</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public String <b class="function">substring</b> (int <i class="parameter">start</i>, int <i class="parameter">end</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Object</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">toString</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->StringBuffer(Serializable)</tt>
</p>
<p>
<span class="refsect1">Passed To: </span>Too many methods to list. </p>
<p>
<span class="refsect1">Returned By: </span>Too many methods to list. </p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>StringIndexOutOfBoundsException</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.lang</b></font></td><td align="right"><font size="+1"><b><i>serializable unchecked PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1979"></a>

Signals that the index used to access a character of a
<tt class="literal">String</tt> or <tt class="literal">StringBuffer</tt> is less than zero or
is too large. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">StringIndexOutOfBoundsException</b> extends IndexOutOfBoundsException {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">StringIndexOutOfBoundsException</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">StringIndexOutOfBoundsException</b> (int <i class="parameter">index</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">StringIndexOutOfBoundsException</b> (String <i class="parameter">s</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Exception-->RuntimeException-->IndexOutOfBoundsException-->StringIndexOutOfBoundsException</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>System</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.lang</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-1980"></a>
  This class defines a platform-independent interface to system
  facilities, including system properties and system input and output
  streams. All methods and variables of this class are static,
  and the class cannot be instantiated. Because the methods defined by
  this class are low-level system methods, most require special
  permissions and cannot be executed by untrusted code. </p>
<p>
<a name="INDEX-1981"></a><a name="INDEX-1982"></a><tt class="literal">getProperty()</tt> looks up a named property on the system-properties list, returning the optionally specified default value if
  no property definition is found. <tt class="literal">getProperties()</tt> returns
  the entire properties list. <tt class="literal">setProperties()</tt> sets a
  <tt class="literal">Properties</tt> object on the properties list. In Java 1.2 and later,
  <tt class="literal">setProperty()</tt> sets the value of a system property. The following table lists system properties that are always defined. Untrusted code may be unable to read some or all of these
  properties. Additional properties can be defined using the
  <tt class="literal">-D</tt> option when invoking the Java interpreter. </p>
<table border="1">
<tr>
<th>Property Name</th><th>Description</th>
</tr>
<tr>
<td><tt class="literal">java.home</tt></td><td>The directory Java is installed in</td>
</tr>
<tr>
<td><tt class="literal">java.class.path</tt></td><td>Where classes are loaded from</td>
</tr>
<tr>
<td><tt class="literal">java.specification.version</tt></td><td>Version of the Java API specification (&#8202;Java 1.2)</td>
</tr>
<tr>
<td><tt class="literal">java.specification.vendor</tt></td><td>Vendor of the Java API specifiction (&#8202;Java 1.2)</td>
</tr>
<tr>
<td><tt class="literal">java.specification.name</tt></td><td>Name of the Java API specification (&#8202;Java 1.2)</td>
</tr>
<tr>
<td><tt class="literal">java.version</tt></td><td>Version of the Java API implementation</td>
</tr>
<tr>
<td><tt class="literal">java.vendor</tt></td><td>Vendor of this Java API implementation</td>
</tr>
<tr>
<td><tt class="literal">java.vendor.url</tt></td><td>URL of the vendor of this Java API implementation</td>
</tr>
<tr>
<td><tt class="literal">java.vm.specification.version</tt></td><td>Version of the Java VM specification (&#8202;Java 1.2)</td>
</tr>
<tr>
<td><tt class="literal">java.vm.specification.vendor</tt></td><td>Vendor of the Java VM specification (&#8202;Java 1.2)</td>
</tr>
<tr>
<td><tt class="literal">java.vm.specification.name</tt></td><td>Name of the Java VM specification (&#8202;Java 1.2)</td>
</tr>
<tr>
<td><tt class="literal">java.vm.version</tt></td><td>Version of the Java VM implementation (&#8202;Java 1.2)</td>
</tr>
<tr>
<td><tt class="literal">java.vm.vendor</tt></td><td>Vendor of the Java VM implementation (&#8202;Java 1.2)</td>
</tr>
<tr>
<td><tt class="literal">java.vm.name</tt></td><td>Name of the Java VM implementation (&#8202;Java 1.2)</td>
</tr>
<tr>
<td><tt class="literal">java.class.version</tt></td><td>Version of the Java class file format</td>
</tr>
<tr>
<td><tt class="literal">os.name</tt></td><td>Name of the host operating system</td>
</tr>
<tr>
<td><tt class="literal">os.arch</tt></td><td>Host operating system architecture</td>
</tr>
<tr>
<td><tt class="literal">os.version</tt></td><td>Version of the host operating system</td>
</tr>
<tr>
<td><tt class="literal">file.separator</tt></td><td>Platform directory separator character</td>
</tr>
<tr>
<td><tt class="literal">path.separator</tt></td><td>Platform path separator character</td>
</tr>
<tr>
<td><tt class="literal">line.separator</tt></td><td>Platform line separator character(s)</td>
</tr>
<tr>
<td><tt class="literal">user.name</tt></td><td>Current user's account name</td>
</tr>
<tr>
<td><tt class="literal">user.home</tt></td><td>Home directory of current user</td>
</tr>
<tr>
<td><tt class="literal">user.dir</tt></td><td>The current working directory</td>
</tr>
</table>
<p>
<a name="INDEX-1983"></a><a name="INDEX-1984"></a><a name="INDEX-1985"></a><a name="INDEX-1986"></a><a name="INDEX-1987"></a><a name="INDEX-1988"></a><a name="INDEX-1989"></a>
  The <tt class="literal">in</tt>, <tt class="literal">out</tt>, and <tt class="literal">err</tt> fields hold
  the standard input, output, and error streams for the system. These fields
  are frequently used in calls such as
  <tt class="literal">System.out.println()</tt>. In Java 1.1,
  <tt class="literal">setIn()</tt>, <tt class="literal">setOut()</tt>, and
  <tt class="literal">setErr()</tt> allow these streams to be redirected. </p>
<p>
<a name="INDEX-1990"></a><a name="INDEX-1991"></a><a name="INDEX-1992"></a><a name="INDEX-1993"></a><a name="INDEX-1994"></a><a name="INDEX-1995"></a><a name="INDEX-1996"></a><tt class="literal">System</tt> also defines various other useful
  static methods. <tt class="literal">exit()</tt> causes the Java
  VM to exit. <tt class="literal">arraycopy()</tt> efficiently copies an array or a
  portion of an array into a destination array. <tt class="literal">currentTimeMillis()</tt> returns the current time in
  milliseconds since midnight GMT, January 1, 1970 GMT. <tt class="literal">gc()</tt> requests that the garbage collector perform a
  thorough garbage-collection pass, and
  <tt class="literal">runFinalization()</tt> requests that the garbage
  collector finalize all objects that are ready for finalization. Applications do not typically need to call these garbage-collection
  methods, but they can be useful when benchmarking code with
  <tt class="literal">currentTimeMillis()</tt>. <tt class="literal">identityHashCode()</tt> computes the hashcode for an
  object in the same way that the default
  <tt class="literal">Object.hashCode()</tt> method does. It does this
  regardless of whether or how the <tt class="literal">hashCode()</tt> method
  has been overridden. <tt class="literal">load()</tt> and
  <tt class="literal">loadLibrary()</tt> can read libraries of native
  code into the system. <tt class="literal">mapLibraryName()</tt> converts a
  system-independent library name into a system-dependent library 
  filename. Finally, <tt class="literal">getSecurityManager()</tt> and
  <tt class="literal">setSecurityManager()</tt> get and set the system
  <tt class="literal">SecurityManager</tt> object responsible for the system
  security policy.
<a name="INDEX-1997"></a><a name="INDEX-1998"></a><a name="INDEX-1999"></a><a name="INDEX-2000"></a><a name="INDEX-2001"></a>
</p>
<p>  See also <tt class="literal">Runtime</tt>, which defines several other
  methods that provide low-level access to system facilities. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public final class <b class="classname">System</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">No Constructor</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constants</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final java.io.PrintStream <b class="function">err</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final java.io.InputStream <b class="function">in</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final java.io.PrintStream <b class="function">out</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Class Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static void <b class="function">arraycopy</b> (Object <i class="parameter">src</i>, int <i class="parameter">src_position</i>, Object <i class="parameter">dst</i>, int <i class="parameter">dst_position</i>, int <i class="parameter">length</i>);</td><td align="right"><i> native</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static long <b class="function">currentTimeMillis</b> ();</td><td align="right"><i> native</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static void <b class="function">exit</b> (int <i class="parameter">status</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static void <b class="function">gc</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static java.util.Properties <b class="function">getProperties</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static String <b class="function">getProperty</b> (String <i class="parameter">key</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static String <b class="function">getProperty</b> (String <i class="parameter">key</i>, String <i class="parameter">def</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static SecurityManager <b class="function">getSecurityManager</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public static int <b class="function">identityHashCode</b> (Object <i class="parameter">x</i>);</td><td align="right"><i> native</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static void <b class="function">load</b> (String <i class="parameter">filename</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static void <b class="function">loadLibrary</b> (String <i class="parameter">libname</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public static String <b class="function">mapLibraryName</b> (String <i class="parameter">libname</i>);</td><td align="right"><i> native</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static void <b class="function">runFinalization</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public static void <b class="function">setErr</b> (java.io.PrintStream <i class="parameter">err</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public static void <b class="function">setIn</b> (java.io.InputStream <i class="parameter">in</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public static void <b class="function">setOut</b> (java.io.PrintStream <i class="parameter">out</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static void <b class="function">setProperties</b> (java.util.Properties <i class="parameter">props</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public static String <b class="function">setProperty</b> (String <i class="parameter">key</i>, String <i class="parameter">value</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static void <b class="function">setSecurityManager</b> (SecurityManager <i class="parameter">s</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Deprecated Public Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">#</span></td><td align="left">public static String <b class="function">getenv</b> (String <i class="parameter">name</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1#</span></td><td align="left">public static void <b class="function">runFinalizersOnExit</b> (boolean <i class="parameter">value</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>Thread</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.lang</b></font></td><td align="right"><font size="+1"><b><i>runnable PJ1.1</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2002"></a><a name="INDEX-2003"></a><a name="INDEX-2004"></a><a name="INDEX-2005"></a><a name="INDEX-2006"></a>
  This class encapsulates all information about a single thread of
  control running on the Java interpreter. To create a thread, you must
  either pass a <tt class="literal">Runnable</tt> object (i.e., an object that implements
  the <tt class="literal">Runnable</tt> interface by defining a <tt class="literal">run()</tt>
  method) to the <tt class="literal">Thread</tt> constructor or subclass
  <tt class="literal">Thread</tt> so that it defines its own <tt class="literal">run()</tt>
  method. The <tt class="literal">run()</tt> method of the <tt class="literal">Thread</tt> or of
  the specified <tt class="literal">Runnable</tt> object is the body of the
  thread. It begins executing when the <tt class="literal">start()</tt> method of the
  <tt class="literal">Thread</tt> object is called. The thread runs until the
  <tt class="literal">run()</tt> method returns. <tt class="literal">isAlive()</tt>
  returns <tt class="literal">true</tt> if a thread has been started, and the
  <tt class="literal">run()</tt> method has not yet exited. </p>
<p>
<a name="INDEX-2007"></a><a name="INDEX-2008"></a><a name="INDEX-2009"></a>
  The static methods of this class operate on the currently running
  thread. <tt class="literal">currentThread()</tt>
  returns the <tt class="literal">Thread</tt> object of the currently running
  code. <tt class="literal">sleep()</tt> makes the current thread stop for a
  specified amount of time. <tt class="literal">yield()</tt> makes the current
  thread give up control to any other threads of equal priority that are
  waiting to run. </p>
<p>
<a name="INDEX-2010"></a><a name="INDEX-2011"></a><a name="INDEX-2012"></a><a name="INDEX-2013"></a><a name="INDEX-2014"></a><a name="INDEX-2015"></a>
  The instance methods may be called by one thread to operate on a
  different thread. <tt class="literal">checkAccess()</tt> checks whether the
  running thread has permission to modify a <tt class="literal">Thread</tt>
  object and throws a <tt class="literal">SecurityException</tt> if it does
  not. <tt class="literal">join()</tt> waits for a thread to die. <tt class="literal">interrupt()</tt> wakes up a waiting or sleeping thread (with an
  <tt class="literal">InterruptedException</tt>) or sets an interrupted flag on a
  nonsleeping thread. A thread can test its own interrupted flag
  with the static <tt class="literal">interrupted()</tt> method or can test the flag
  of another thread with <tt class="literal">isInterrupted()</tt>. Calling
  <tt class="literal">interrupted()</tt> implicitly clears the interrupted
  flag, but calling <tt class="literal">isInterrupted()</tt> does not. Methods related to <tt class="literal">sleep()</tt> and
  <tt class="literal">interrupt()</tt> are the <tt class="literal">wait()</tt> and
  <tt class="literal">notify()</tt> methods defined by the
  <tt class="literal">Object</tt> class. Calling <tt class="literal">wait()</tt>
  causes the current thread to block until the object's
  <tt class="literal">notify()</tt> method is called by another thread. </p>
<p>
<a name="INDEX-2016"></a><a name="INDEX-2017"></a><a name="INDEX-2018"></a><a name="INDEX-2019"></a><a name="INDEX-2020"></a><a name="INDEX-2021"></a><tt class="literal">setName()</tt> sets the name of a thread, which is
  purely optional. <tt class="literal">setPriority()</tt> sets the priority of
  the thread. Higher priority threads run before lower-priority threads. Java does not specify what happens to multiple threads of equal
  priority; some systems perform time-slicing and share the CPU
  between such threads. On other systems, one compute-bound thread that
  does not call <tt class="literal">yield()</tt> may starve another thread
  of the same priority. <tt class="literal">setDaemon()</tt> sets a boolean
  flag that specifies whether this thread is a daemon or not. The
  Java VM keeps running as long as at least one non-daemon thread is
  running. Call <tt class="literal">getThreadGroup()</tt> to obtain the
  <tt class="literal">ThreadGroup</tt> of which a thread is part. In Java 1.2 and later,
  use <tt class="literal">setContextClassLoader()</tt> to specify the
  <tt class="literal">ClassLoader</tt> to be used to load any classes required
  by the thread. </p>
<p>
<a name="INDEX-2022"></a><a name="INDEX-2023"></a><a name="INDEX-2024"></a><tt class="literal">suspend()</tt>, <tt class="literal">resume()</tt>, and
  <tt class="literal">stop()</tt> suspend, resume, and stop a given thread,
  respectively, 
  but all three methods are deprecated because they are inherently
  unsafe and can cause deadlock. If a thread must be stoppable, have it
  periodically check a flag and exit if the flag is set. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">Thread</b> implements Runnable {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">Thread</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">Thread</b> (String <i class="parameter">name</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">Thread</b> (Runnable <i class="parameter">target</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">Thread</b> (Runnable <i class="parameter">target</i>, String <i class="parameter">name</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">Thread</b> (ThreadGroup <i class="parameter">group</i>, Runnable <i class="parameter">target</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">Thread</b> (ThreadGroup <i class="parameter">group</i>, String <i class="parameter">name</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">Thread</b> (ThreadGroup <i class="parameter">group</i>, Runnable <i class="parameter">target</i>, String <i class="parameter">name</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constants</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">MAX_PRIORITY</b> ;</td><td align="right"><i> =10</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">MIN_PRIORITY</b> ;</td><td align="right"><i> =1</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">NORM_PRIORITY</b> ;</td><td align="right"><i> =5</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Class Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static int <b class="function">activeCount</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static Thread <b class="function">currentThread</b> ();</td><td align="right"><i> native</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static void <b class="function">dumpStack</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static int <b class="function">enumerate</b> (Thread[ ] <i class="parameter">tarray</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static boolean <b class="function">interrupted</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static void <b class="function">sleep</b> (long <i class="parameter">millis</i>) throws InterruptedException;</td><td align="right"><i> native</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static void <b class="function">sleep</b> (long <i class="parameter">millis</i>, int <i class="parameter">nanos</i>) throws InterruptedException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static void <b class="function">yield</b> ();</td><td align="right"><i> native</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Property Accessor Methods (by property name)</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final boolean <b class="function">isAlive</b> ();</td><td align="right"><i> native default:false</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public ClassLoader <b class="function">getContextClassLoader</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public void <b class="function">setContextClassLoader</b> (ClassLoader <i class="parameter">cl</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final boolean <b class="function">isDaemon</b> ();</td><td align="right"><i> default:false</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final void <b class="function">setDaemon</b> (boolean <i class="parameter">on</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">isInterrupted</b> ();</td><td align="right"><i> default:false</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final String <b class="function">getName</b> ();</td><td align="right"><i> default:"Thread-0"</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final void <b class="function">setName</b> (String <i class="parameter">name</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final int <b class="function">getPriority</b> ();</td><td align="right"><i> default:5</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final void <b class="function">setPriority</b> (int <i class="parameter">newPriority</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final ThreadGroup <b class="function">getThreadGroup</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final void <b class="function">checkAccess</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">destroy</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">interrupt</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final void <b class="function">join</b> () throws InterruptedException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final void <b class="function">join</b> (long <i class="parameter">millis</i>) throws InterruptedException;</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final void <b class="function">join</b> (long <i class="parameter">millis</i>, int <i class="parameter">nanos</i>) throws InterruptedException;</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">start</b> ();</td><td align="right"><i> native synchronized</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Methods Implementing Runnable</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">run</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Object</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">toString</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Deprecated Public Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">#</span></td><td align="left">public int <b class="function">countStackFrames</b> ();</td><td align="right"><i> native</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">#</span></td><td align="left">public final void <b class="function">resume</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">#</span></td><td align="left">public final void <b class="function">stop</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">#</span></td><td align="left">public final void <b class="function">stop</b> (Throwable <i class="parameter">obj</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">#</span></td><td align="left">public final void <b class="function">suspend</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Thread(Runnable)</tt>
</p>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">Runtime.{addShutdownHook(), removeShutdownHook()}, SecurityManager.checkAccess(), Thread.enumerate(), ThreadGroup.{enumerate(), uncaughtException()}</tt>
</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">Thread.currentThread(), javax.swing.text.AbstractDocument.getCurrentWriter()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>ThreadDeath</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.lang</b></font></td><td align="right"><font size="+1"><b><i>serializable error PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-2025"></a><a name="INDEX-2026"></a>
Signals that a thread should terminate. This error is
thrown in a thread when the <tt class="literal">Thread.stop()</tt> method is
called for that thread. This is an unusual <tt class="literal">Error</tt>
type that simply causes a thread to be terminated, but does
not print an error message or cause the interpreter to
exit. You can catch <tt class="literal">ThreadDeath</tt> errors to do any
necessary cleanup for a thread, but if you do, you must
rethrow the error so that the thread actually
terminates. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">ThreadDeath</b> extends Error {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">ThreadDeath</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Error-->ThreadDeath</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>ThreadGroup</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.lang</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2027"></a><a name="INDEX-2028"></a><a name="INDEX-2029"></a><a name="INDEX-2030"></a><a name="INDEX-2031"></a><a name="INDEX-2032"></a>
  This class represents a group of threads and allows that group to be
  manipulated as a whole. A <tt class="literal">ThreadGroup</tt> can contain
  <tt class="literal">Thread</tt> objects, as well as other child <tt class="literal">ThreadGroup</tt>
  objects. All <tt class="literal">ThreadGroup</tt> objects are created as children
  of some other <tt class="literal">ThreadGroup</tt>, and thus there is a
  parent/child hierarchy of <tt class="literal">ThreadGroup</tt> objects. Use
  <tt class="literal">getParent()</tt> to obtain the parent
  <tt class="literal">ThreadGroup</tt>, and use
  <tt class="literal">activeCount()</tt>,
  <tt class="literal">activeGroupCount()</tt>, and the various
  <tt class="literal">enumerate()</tt> methods to list the child
  <tt class="literal">Thread</tt> and <tt class="literal">ThreadGroup</tt> objects. Most applications can simply rely on the default system thread group. System-level code and applications such as servers that need to
  create a large number of threads may find it convenient to create
  their own <tt class="literal">ThreadGroup</tt> objects, however. </p>
<p>
<a name="INDEX-2033"></a><a name="INDEX-2034"></a><a name="INDEX-2035"></a><a name="INDEX-2036"></a><tt class="literal">interrupt()</tt> interrupts all threads in the group at
  once. <tt class="literal">setMaxPriority()</tt> specifies the maximum
  priority any thread in the group can have. <tt class="literal">checkAccess()</tt> checks whether the calling thread has
  permission to modify the given thread group. The method throws a
  <tt class="literal">SecurityException</tt> if the current thread does not
  have access. <tt class="literal">uncaughtException()</tt> contains the code
  that is run when a thread terminates because of an uncaught exception
  or error. You can customize this method by subclassing
  <tt class="literal">ThreadGroup</tt>. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">ThreadGroup</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">ThreadGroup</b> (String <i class="parameter">name</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">ThreadGroup</b> (ThreadGroup <i class="parameter">parent</i>, String <i class="parameter">name</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Property Accessor Methods (by property name)</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final boolean <b class="function">isDaemon</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final void <b class="function">setDaemon</b> (boolean <i class="parameter">daemon</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public boolean <b class="function">isDestroyed</b> ();</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final int <b class="function">getMaxPriority</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final void <b class="function">setMaxPriority</b> (int <i class="parameter">pri</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final String <b class="function">getName</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final ThreadGroup <b class="function">getParent</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">activeCount</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">activeGroupCount</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final void <b class="function">checkAccess</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final void <b class="function">destroy</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">enumerate</b> (ThreadGroup[ ] <i class="parameter">list</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">enumerate</b> (Thread[ ] <i class="parameter">list</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">enumerate</b> (ThreadGroup[ ] <i class="parameter">list</i>, boolean <i class="parameter">recurse</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">enumerate</b> (Thread[ ] <i class="parameter">list</i>, boolean <i class="parameter">recurse</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public final void <b class="function">interrupt</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">list</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final boolean <b class="function">parentOf</b> (ThreadGroup <i class="parameter">g</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">uncaughtException</b> (Thread <i class="parameter">t</i>, Throwable <i class="parameter">e</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Object</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">toString</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Deprecated Public Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1#</span></td><td align="left">public boolean <b class="function">allowThreadSuspension</b> (boolean <i class="parameter">b</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">#</span></td><td align="left">public final void <b class="function">resume</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">#</span></td><td align="left">public final void <b class="function">stop</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">#</span></td><td align="left">public final void <b class="function">suspend</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">SecurityManager.checkAccess(), Thread.Thread(), ThreadGroup.{enumerate(), parentOf(), ThreadGroup()}</tt>
</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">SecurityManager.getThreadGroup(), Thread.getThreadGroup(), ThreadGroup.getParent()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>ThreadLocal</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.lang</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2037"></a><a name="INDEX-2038"></a>
  This class provides a convenient way to create thread-local
  variables. When you declare a static field in a
  class, there is only one value for that field, shared by all objects
  of the class. When you declare a nonstatic instance field in a
  class, every object of the class has its own separate copy of that
  variable. <tt class="literal">ThreadLocal</tt> provides an option between
  these two extremes. If you declare a static field
  to hold a <tt class="literal">ThreadLocal</tt> object, that
  <tt class="literal">ThreadLocal</tt> holds a different value for each
  thread. Objects running in the same thread see the same value
  when they call the <tt class="literal">get()</tt> method of the
  <tt class="literal">ThreadLocal</tt> object. Objects running in different threads
  obtain different values from <tt class="literal">get()</tt>, however. </p>
<p>
<a name="INDEX-2039"></a>
  The <tt class="literal">set()</tt> method sets the value held by the
  <tt class="literal">ThreadLocal</tt> object for the currently running
  thread. <tt class="literal">get()</tt> returns the value held for the
  currently running thread. Note that there is no way to obtain the
  value of the <tt class="literal">ThreadLocal</tt> object for any thread other than
  the one that calls <tt class="literal">get()</tt>. To understand the
  <tt class="literal">ThreadLocal</tt> class, you may find it helpful to think
  of a <tt class="literal">ThreadLocal</tt> object as a hashtable or
  <tt class="literal">java.util.Map</tt> that maps from
  <tt class="literal">Thread</tt> objects to arbitrary values. Calling
  <tt class="literal">set()</tt> creates an association between the current
  <tt class="literal">Thread</tt>
  (<tt class="literal">Thread.currentThread()</tt>) and the specified value. Calling <tt class="literal">get()</tt> first looks up the current thread,
  then uses the hashtable to look up the value associated with that
  current thread. </p>
<p>
<a name="INDEX-2040"></a>
  If a thread calls <tt class="literal">get()</tt> for the first time without
  having first called <tt class="literal">set()</tt> to establish a
  thread-local value, <tt class="literal">get()</tt> calls the protected
  <tt class="literal">initialValue()</tt> method to obtain the initial value
  to return. The default implementation of
  <tt class="literal">initialValue()</tt> simply returns
  <tt class="literal">null</tt>, but subclasses can override this if they
  desire. </p>
<p>  See also <tt class="literal">InheritableThreadLocal</tt>, which allows
  thread-local values to be inherited from parent threads by child
  threads. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">ThreadLocal</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">ThreadLocal</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Object <b class="function">get</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">set</b> (Object <i class="parameter">value</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected Object <b class="function">initialValue</b> ();</td><td align="right"><i> constant</i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Subclasses: </span><tt class="literal">InheritableThreadLocal</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>Throwable</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.lang</b></font></td><td align="right"><font size="+1"><b><i>serializable PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-2041"></a><a name="INDEX-2042"></a><a name="INDEX-2043"></a>

This is the root class of the Java exception and error
hierarchy. All exceptions and errors
are subclasses of <tt class="literal">Throwable</tt>. The
<tt class="literal">getMessage()</tt> method retrieves any error message
associated with the exception or error. <a name="INDEX-2044"></a><a name="INDEX-2045"></a><tt class="literal">printStackTrace()</tt> prints a stack trace that
shows where the exception occurred. <tt class="literal">fillInStackTrace()</tt> extends the stack trace when
the exception is partially handled and then rethrown. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">Throwable</b> implements Serializable {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">Throwable</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">Throwable</b> (String <i class="parameter">message</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Throwable <b class="function">fillInStackTrace</b> ();</td><td align="right"><i> native</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public String <b class="function">getLocalizedMessage</b> ();</td><td align="right"><i> default:null</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">getMessage</b> ();</td><td align="right"><i> default:null</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">printStackTrace</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">printStackTrace</b> (java.io.PrintStream <i class="parameter">s</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public void <b class="function">printStackTrace</b> (java.io.PrintWriter <i class="parameter">s</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Object</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">toString</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)</tt>
</p>
<p>
<span class="refsect1">Subclasses: </span><tt class="literal">Error, Exception</tt>
</p>
<p>
<span class="refsect1">Passed To: </span>Too many methods to list. </p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">ClassNotFoundException.getException(), ExceptionInInitializerError.getException(), Throwable.fillInStackTrace(), java.lang.reflect.InvocationTargetException.getTargetException(), java.lang.reflect.UndeclaredThrowableException.getUndeclaredThrowable(), javax.naming.NamingException.getRootCause(), javax.servlet.ServletException.getRootCause()</tt>
</p>
<p>
<span class="refsect1">Thrown By: </span><tt class="literal">java.awt.AWTEvent.finalize(), java.awt.Font.finalize(), java.awt.Frame.finalize(), java.awt.Window.finalize(), Object.finalize(), java.lang.reflect.InvocationHandler.invoke(), javax.swing.text.AbstractDocument.AbstractElement.finalize()</tt>
</p>
<p>
<span class="refsect1">Type Of: </span><tt class="literal">java.rmi.RemoteException.detail, java.rmi.activation.ActivationException.detail, javax.naming.NamingException.rootException, org.omg.CORBA.portable.UnknownException.originalEx</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>UnknownError</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.lang</b></font></td><td align="right"><font size="+1"><b><i>serializable error PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-2046"></a><a name="INDEX-2047"></a>

Signals that an unknown error has occurred at the level of
the Java Virtual Machine. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">UnknownError</b> extends VirtualMachineError {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">UnknownError</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">UnknownError</b> (String <i class="parameter">s</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Error-->VirtualMachineError-->UnknownError</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>UnsatisfiedLinkError</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.lang</b></font></td><td align="right"><font size="+1"><b><i>serializable error PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-2048"></a><a name="INDEX-2049"></a>

Signals that Java cannot satisfy all the links in a class
that it has loaded. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">UnsatisfiedLinkError</b> extends LinkageError {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">UnsatisfiedLinkError</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">UnsatisfiedLinkError</b> (String <i class="parameter">s</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Error-->LinkageError-->UnsatisfiedLinkError</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>UnsupportedClassVersionError</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.lang</b></font></td><td align="right"><font size="+1"><b><i>serializable error</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2050"></a><a name="INDEX-2051"></a>
  Every Java class file contains a version number that specifies the
  version of the class file format. This error is thrown when the Java
  Virtual Machine attempts to read a class file with a version number it does not support. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">UnsupportedClassVersionError</b> extends ClassFormatError {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">UnsupportedClassVersionError</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">UnsupportedClassVersionError</b> (String <i class="parameter">s</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Error-->LinkageError-->ClassFormatError-->UnsupportedClassVersionError</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>UnsupportedOperationException</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.lang</b></font></td><td align="right"><font size="+1"><b><i>serializable unchecked</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2052"></a><a name="INDEX-2053"></a><a name="INDEX-2054"></a>
  Signals that a method you have called is not supported, and its
  implementation does not do anything (except throw this exception). This exception is used most often by the Java collection framework of
  <tt class="literal">java.util</tt>. Immutable or unmodifiable collections
  throw this exception when a modification method, such as
  <tt class="literal">add()</tt> or <tt class="literal">delete()</tt>, is called. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">UnsupportedOperationException</b> extends RuntimeException {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">UnsupportedOperationException</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">UnsupportedOperationException</b> (String <i class="parameter">message</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Exception-->RuntimeException-->UnsupportedOperationException</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>VerifyError</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.lang</b></font></td><td align="right"><font size="+1"><b><i>serializable error PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-2055"></a><a name="INDEX-2056"></a><a name="INDEX-2057"></a>
Signals that a class has not passed the byte-code
verification procedures. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">VerifyError</b> extends LinkageError {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">VerifyError</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">VerifyError</b> (String <i class="parameter">s</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Error-->LinkageError-->VerifyError</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>VirtualMachineError</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.lang</b></font></td><td align="right"><font size="+1"><b><i>serializable error PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-2058"></a><a name="INDEX-2059"></a>

An abstract error type that serves as superclass for a group
of errors related to the Java Virtual Machine. See
<tt class="literal">InternalError</tt>, <tt class="literal">UnknownError</tt>,
<tt class="literal">OutOfMemoryError</tt>, and <tt class="literal">StackOverflowError</tt>. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public abstract class <b class="classname">VirtualMachineError</b> extends Error {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">VirtualMachineError</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">VirtualMachineError</b> (String <i class="parameter">s</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Error-->VirtualMachineError</tt>
</p>
<p>
<span class="refsect1">Subclasses: </span><tt class="literal">InternalError, OutOfMemoryError, StackOverflowError, UnknownError</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>Void</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.lang</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-2060"></a>
The <tt class="literal">Void</tt> class cannot be instantiated and serves
merely as a placeholder for its static <tt class="literal">TYPE</tt>
field, which is a <tt class="literal">Class</tt> object constant that
represents the <tt class="literal">void</tt> type. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public final class <b class="classname">Void</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">No Constructor</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constants</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final Class <b class="function">TYPE</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
</div>
<a name="INDEX-2061"></a>


<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch11_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch11_01.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch13_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch13_01.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">11.1. The java.io Package</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">13. The java.lang.ref Package</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
