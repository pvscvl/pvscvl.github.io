<html>
<head>
<title>The java.beans Package (Java in a Nutshell)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="David Flanagan">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-487-8E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="The java.beans Package">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm" alt="Java Enterprise in a Nutshell"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="howto_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/howto_02.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="part2.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/part2.htm">Part 2: API Quick Reference</a></td><td align="right" valign="top" width="172"><a href="ch10_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch10_01.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY --><h1 class="chapter">Chapter 9.  The java.beans Package</h1>

<p>
<a name="INDEX-1149"></a>

  The <tt class="literal">java.beans</tt> 
  package contains classes and interfaces related to JavaBeans
  components. Most of the classes and interfaces are used by tools that
  manipulate beans, rather than by the beans themselves. They are also
  used or implemented by auxiliary classes provided by bean implementors
  for the benefit of bean-manipulation tools. <a href="#javanut3-java.beans-1">Figure 9-1</a> shows the class hierarchy for this package.</p>

<a name="javanut3-java.beans-1"></a>
<div class="figure">
<img alt="figure" src="figs/JN3_0901.gif" webstripperlinkwas="figs/JN3_0901.gif"></div>
<h4 class="objtitle">Figure 9-1. The java.beans package</h4>

<p>
<a name="INDEX-1150"></a>
  The <tt class="literal">Beans</tt> class defines several generally useful
  static methods. Its <tt class="literal">instantiate()</tt> method is
  particularly important. The <tt class="literal">Introspector</tt> class is
  used to obtain information about a bean and the properties, events,
  and methods it exports. Most of this information is returned using
  the <tt class="literal">FeatureDescriptor</tt> class and its various
  subclasses. The <tt class="literal">java.beans</tt> package also defines
  the <tt class="literal">PropertyChangeEvent</tt> class and the
  <tt class="literal">PropertyChangeListener</tt> interface that are widely
  used by AWT and Swing to provide notification when a bound property
  of a GUI component changes. </p>
<a name="INDEX-1151"></a>
<a name="INDEX-1152"></a>
<a name="INDEX-1153"></a>
<a name="INDEX-1154"></a>
<a name="INDEX-1155"></a>
<a name="INDEX-1156"></a>
<p>  See <a href="ch06_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch06_01.htm">Chapter 6, "JavaBeans"</a>, for a complete introduction to the
  JavaBeans component model. </p>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>AppletInitializer</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.beans</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-1157"></a><a name="INDEX-1158"></a><a name="INDEX-1159"></a>
  This interface defines general methods to initialize a
  newly instantiated <tt class="literal">Applet</tt> object. An
  <tt class="literal">AppletInitializer</tt> can be passed to the
  <tt class="literal">Beans.instantiate()</tt> method so that when a bean
  that is also an applet is created, it can be properly initialized. The <tt class="literal">initialize()</tt> method should associate the applet
  object with an appropriate <tt class="literal">AppletContext</tt> and
  <tt class="literal">AppletStub</tt>, place it within an appropriate
  <tt class="literal">Container</tt>, and call its
  <tt class="literal">init()</tt> method. The <tt class="literal">activate()</tt>
  method should make the applet active by calling its
  <tt class="literal">start()</tt> method. This interface is typically used by bean context
  implementors. Applications writers may need to use
  <tt class="literal">AppletInitializer</tt> objects, but should not usually
  have to invoke or implement the methods directly. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public interface <b class="classname">AppletInitializer</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">activate</b> (java.applet.Applet <i class="parameter">newApplet</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">initialize</b> (java.applet.Applet <i class="parameter">newAppletBean</i>, java.beans.beancontext.BeanContext <i class="parameter">bCtxt</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">Beans.instantiate()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>BeanDescriptor</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.beans</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1160"></a><a name="INDEX-1161"></a><a name="INDEX-1162"></a><a name="INDEX-1163"></a><a name="INDEX-1164"></a>
A <tt class="literal">BeanDescriptor</tt> object is a type of
<tt class="literal">FeatureDescriptor</tt> that describes a JavaBeans component. The
<tt class="literal">BeanInfo</tt> class for a bean optionally creates
and initializes a <tt class="literal">BeanDescriptor</tt> object to describe
the bean. Typically, only application builders and similar
tools use the <tt class="literal">BeanDescriptor</tt>. To create a <tt class="literal">BeanDescriptor</tt>, you must specify the
class of the bean and, optionally, the class of a
<tt class="literal">Customizer</tt> for the bean. You can use the methods of
<tt class="literal">FeatureDescriptor</tt> to provide additional information
about the bean. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">BeanDescriptor</b> extends FeatureDescriptor {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">BeanDescriptor</b> (Class <i class="parameter">beanClass</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">BeanDescriptor</b> (Class <i class="parameter">beanClass</i>, Class <i class="parameter">customizerClass</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Class <b class="function">getBeanClass</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Class <b class="function">getCustomizerClass</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->FeatureDescriptor-->BeanDescriptor</tt>
</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">BeanInfo.getBeanDescriptor(), SimpleBeanInfo.getBeanDescriptor()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>BeanInfo</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.beans</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1165"></a><a name="INDEX-1166"></a><a name="INDEX-1167"></a>
The <tt class="literal">BeanInfo</tt> interface defines the methods a
class must implement in order to export information about a
JavaBeans component. The <tt class="literal">Introspector</tt> class knows how to
obtain all the basic information required about a bean. A bean that wants to be more programmer-friendly can provide
a class that implements this interface, and
provide additional information about itself (such as an
icon and description strings for each of its properties,
events, and methods). Note that a bean developer defines a
class that implements the methods of this interface. Typically, only builder applications and similar tools
actually invoke the methods defined here. </p>
<p>
<a name="INDEX-1168"></a><a name="INDEX-1169"></a><a name="INDEX-1170"></a><a name="INDEX-1171"></a>
The <tt class="literal">getBeanDescriptor()</tt>,
<tt class="literal">getEventSetDescriptors()</tt>,
<tt class="literal">getPropertyDescriptors()</tt>, and
<tt class="literal">getMethodDescriptors()</tt> methods should return
appropriate descriptor objects for the bean or
<tt class="literal">null</tt> if the bean does not provide explicit bean,
event set, property, or method descriptor objects. The
<a name="INDEX-1172"></a><a name="INDEX-1173"></a><tt class="literal">getDefaultEventIndex()</tt> and
<tt class="literal">getDefaultPropertyIndex()</tt> methods return values that
specify the default event and property (i.e., those most likely
to be of interest to a programmer using the bean). These methods
should return -1 if there are no defaults. <a name="INDEX-1174"></a>
The <tt class="literal">getIcon()</tt> method should return an image object
suitable for representing the bean in a palette or menu of
available beans. The argument passed to this method is one
of the four constants defined by the class; it specifies the
type and size of icon requested. If the requested icon
cannot be provided, <tt class="literal">getIcon()</tt> should return
<tt class="literal">null</tt>. </p>
<p>
<a name="INDEX-1175"></a>
A <tt class="literal">BeanInfo</tt> class is allowed to return
<tt class="literal">null</tt> or -1 if it cannot provide the requested
information. In this case, the <tt class="literal">Introspector</tt> class
provides basic values for the omitted information from
its own introspection of the bean. See
<tt class="literal">SimpleBeanInfo</tt> for a trivial implementation of this
interface suitable for convenient subclassing. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public interface <b class="classname">BeanInfo</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constants</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">ICON_COLOR_16x16</b> ;</td><td align="right"><i> =1</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">ICON_COLOR_32x32</b> ;</td><td align="right"><i> =2</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">ICON_MONO_16x16</b> ;</td><td align="right"><i> =3</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">ICON_MONO_32x32</b> ;</td><td align="right"><i> =4</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Property Accessor Methods (by property name)</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract BeanInfo[ ] <b class="function">getAdditionalBeanInfo</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract BeanDescriptor <b class="function">getBeanDescriptor</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract int <b class="function">getDefaultEventIndex</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract int <b class="function">getDefaultPropertyIndex</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract EventSetDescriptor[ ] <b class="function">getEventSetDescriptors</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract MethodDescriptor[ ] <b class="function">getMethodDescriptors</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract PropertyDescriptor[ ] <b class="function">getPropertyDescriptors</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract java.awt.Image <b class="function">getIcon</b> (int <i class="parameter">iconKind</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Implementations: </span><tt class="literal">SimpleBeanInfo, java.beans.beancontext.BeanContextServiceProviderBeanInfo</tt>
</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">BeanInfo.getAdditionalBeanInfo(), Introspector.getBeanInfo(), SimpleBeanInfo.getAdditionalBeanInfo(), java.beans.beancontext.BeanContextServiceProviderBeanInfo.getServicesBeanInfo()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>Beans</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.beans</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1176"></a><a name="INDEX-1177"></a>
The <tt class="literal">Beans</tt> class is not meant to be instantiated;
its static methods provide miscellaneous JavaBeans
features. <a name="INDEX-1178"></a>
The <tt class="literal">instantiate()</tt> method creates an instance of a
bean. The specified bean name represents either a
serialized bean file or a bean class file; it is
interpreted relative to the specified <tt class="literal">ClassLoader</tt>
object. </p>
<p>
<a name="INDEX-1179"></a><a name="INDEX-1180"></a>
The <tt class="literal">setDesignTime()</tt> and <tt class="literal">isDesignTime()</tt>
methods can set and query a flag that indicates
whether beans are being used in a application builder
<a name="INDEX-1181"></a><a name="INDEX-1182"></a>
environment. Similarly, <tt class="literal">setGuiAvailable()</tt> and
<tt class="literal">isGuiAvailable()</tt> set and query a flag that indicates
whether the Java Virtual Machine is running in an
environment in which a GUI is available. (Note that
untrusted applet code cannot call <tt class="literal">setDesignTime()</tt> or
<tt class="literal">setGuiAvailable()</tt>.)</p>
<p>
<a name="INDEX-1183"></a>
The <tt class="literal">isInstanceOf()</tt> method is a replacement for the
Java <tt class="literal">instanceof</tt> operator to use with beans. Currently, it behaves like <tt class="literal">instanceof</tt>, but in
the future it may work with beans that consist of a set
of Java objects, each of which provides a different view of
<a name="INDEX-1184"></a>
a bean. Similarly, the <tt class="literal">getInstanceOf()</tt> method is a
replacement for the Java cast operator. This method converts a
bean to a superclass or interface type, and currently, it
behaves like a cast, but in the future, it will be compatible with multiclass beans. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">Beans</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">Beans</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Class Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static Object <b class="function">getInstanceOf</b> (Object <i class="parameter">bean</i>, Class <i class="parameter">targetType</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static Object <b class="function">instantiate</b> (ClassLoader <i class="parameter">cls</i>, String <i class="parameter">beanName</i>) throws java.io.IOExceptionClassNotFoundException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public static Object <b class="function">instantiate</b> (ClassLoader <i class="parameter">cls</i>, String <i class="parameter">beanName</i>, java.beans.beancontext.BeanContext <i class="parameter">beanContext</i>) throws java.io.IOExceptionClassNotFoundException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public static Object <b class="function">instantiate</b> (ClassLoader <i class="parameter">cls</i>, String <i class="parameter">beanName</i>, java.beans.beancontext.BeanContext <i class="parameter">beanContext</i>, AppletInitializer <i class="parameter">initializer</i>) throws java.io.IOExceptionClassNotFoundException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static boolean <b class="function">isDesignTime</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static boolean <b class="function">isGuiAvailable</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static boolean <b class="function">isInstanceOf</b> (Object <i class="parameter">bean</i>, Class <i class="parameter">targetType</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static void <b class="function">setDesignTime</b> (boolean <i class="parameter">isDesignTime</i>) throws SecurityException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static void <b class="function">setGuiAvailable</b> (boolean <i class="parameter">isGuiAvailable</i>) throws SecurityException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>Customizer</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.beans</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1185"></a><a name="INDEX-1186"></a>
The <tt class="literal">Customizer</tt> interface specifies the methods that
must be defined by any class designed to customize a JavaBeans component. In addition to implementing this interface,
a customizer class must be a subclass of
<tt class="literal">java.awt.Component</tt> and have a constructor
that takes no arguments so it can be instantiated by
an application builder. </p>
<p>Customizer classes are typically used by a complex bean
to allow the user to easily configure the bean and provide
an alternative to a simple list of properties and their
values. If a customizer class is defined for a bean,
it must be associated with the bean through a
<tt class="literal">BeanDescriptor</tt> object returned by a <tt class="literal">BeanInfo</tt>
class for the bean. Note that while a <tt class="literal">Customizer</tt>
class is created 


by the author of a bean, that class is
instantiated and used only by application builders and similar
tools. </p>
<p>
<a name="INDEX-1187"></a>
After a <tt class="literal">Customizer</tt> class is instantiated, its
<tt class="literal">setObject()</tt> method is invoked once to specify
the bean object to customize. The
<a name="INDEX-1188"></a><a name="INDEX-1189"></a><a name="INDEX-1190"></a><a name="INDEX-1191"></a><a name="INDEX-1192"></a><tt class="literal">addPropertyChangeListener()</tt> and
<tt class="literal">removePropertyChangeListener()</tt> methods can be called
to register and deregister <tt class="literal">PropertyChangeListener</tt> objects. The <tt class="literal">Customizer</tt> should send a
<tt class="literal">PropertyChangeEvent</tt> to all registered listeners any
time it changes a property of the bean it is customizing. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public interface <b class="classname">Customizer</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Event Registration Methods (by event name)</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">addPropertyChangeListener</b> (PropertyChangeListener <i class="parameter">listener</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">removePropertyChangeListener</b> (PropertyChangeListener <i class="parameter">listener</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">setObject</b> (Object <i class="parameter">bean</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>DesignMode</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.beans</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-1193"></a>
  This interface defines a single boolean <tt class="literal">designTime</tt>
  property that specifies whether a bean is running within an
  interactive design tool or a standalone application or
  applet. This interface is typically implemented by a bean container
  or bean context, so that children beans can query the
  <tt class="literal">designTime</tt> property. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public interface <b class="classname">DesignMode</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constants</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final String <b class="function">PROPERTYNAME</b> ;</td><td align="right"><i> ="designTime"</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract boolean <b class="function">isDesignTime</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">setDesignTime</b> (boolean <i class="parameter">designTime</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Implementations: </span><tt class="literal">java.beans.beancontext.BeanContext</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>EventSetDescriptor</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.beans</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1194"></a><a name="INDEX-1195"></a><a name="INDEX-1196"></a><a name="INDEX-1197"></a><a name="INDEX-1198"></a>
An <tt class="literal">EventSetDescriptor</tt> object is a type of
<tt class="literal">FeatureDescriptor</tt> that describes a single set of
events supported by a JavaBeans component. A set of events
corresponds to one or more methods supported by a single
<tt class="literal">EventListener</tt> interface. The <tt class="literal">BeanInfo</tt> class
for a bean optionally creates
<tt class="literal">EventSetDescriptor</tt> objects to describe the event
sets the bean supports. Typically, only application
builders and similar tools use the <tt class="literal">get</tt> and
<tt class="literal">is</tt> methods of <tt class="literal">EventSetDescriptor</tt> objects to
obtain the event-set description information. </p>
<p>To create an <tt class="literal">EventSetDescriptor</tt> object, you must
specify the class of the bean that supports the event set, the
base name of the event set, the class of the
<tt class="literal">EventListener</tt> interface that corresponds to the
event set, and the methods within this interface that are
invoked when particular events within the set occur. Optionally, you can also specify the methods of the bean
class that add and remove
<tt class="literal">EventListener</tt> objects. The various constructors allow you
to specify methods by name, as
<tt class="literal">java.lang.reflect.Method</tt> objects, or as
<tt class="literal">MethodDescriptor</tt> objects. </p>
<p>
<a name="INDEX-1199"></a><a name="INDEX-1200"></a>
Once you have created an <tt class="literal">EventSetDescriptor</tt>,
use <tt class="literal">setUnicast()</tt> to specify whether it represents a unicast
event and <tt class="literal">setInDefaultEventSet()</tt> to specify whether
the event set should be treated as the default
event set by builder applications. The methods of the
<tt class="literal">FeatureDescriptor</tt> superclass allow additional
information about the property to be specified. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">EventSetDescriptor</b> extends FeatureDescriptor {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">EventSetDescriptor</b> (Class <i class="parameter">sourceClass</i>, String <i class="parameter">eventSetName</i>, Class <i class="parameter">listenerType</i>, String <i class="parameter">listenerMethodName</i>) throws IntrospectionException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">EventSetDescriptor</b> (String <i class="parameter">eventSetName</i>, Class <i class="parameter">listenerType</i>, MethodDescriptor[ ] <i class="parameter">listenerMethodDescriptors</i>, java.lang.reflect.Method <i class="parameter">addListenerMethod</i>, java.lang.reflect.Method <i class="parameter">removeListenerMethod</i>) throws IntrospectionException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">EventSetDescriptor</b> (String <i class="parameter">eventSetName</i>, Class <i class="parameter">listenerType</i>, java.lang.reflect.Method[ ] <i class="parameter">listenerMethods</i>, java.lang.reflect.Method <i class="parameter">addListenerMethod</i>, java.lang.reflect.Method <i class="parameter">removeListenerMethod</i>) throws IntrospectionException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">EventSetDescriptor</b> (Class <i class="parameter">sourceClass</i>, String <i class="parameter">eventSetName</i>, Class <i class="parameter">listenerType</i>, String[ ] <i class="parameter">listenerMethodNames</i>, String <i class="parameter">addListenerMethodName</i>, String <i class="parameter">removeListenerMethodName</i>) throws IntrospectionException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Property Accessor Methods (by property name)</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public java.lang.reflect.Method <b class="function">getAddListenerMethod</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">isInDefaultEventSet</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setInDefaultEventSet</b> (boolean <i class="parameter">inDefaultEventSet</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public MethodDescriptor[ ] <b class="function">getListenerMethodDescriptors</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public java.lang.reflect.Method[ ] <b class="function">getListenerMethods</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Class <b class="function">getListenerType</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public java.lang.reflect.Method <b class="function">getRemoveListenerMethod</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">isUnicast</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setUnicast</b> (boolean <i class="parameter">unicast</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->FeatureDescriptor-->EventSetDescriptor</tt>
</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">BeanInfo.getEventSetDescriptors(), SimpleBeanInfo.getEventSetDescriptors()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>FeatureDescriptor</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.beans</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1201"></a><a name="INDEX-1202"></a>
The <tt class="literal">FeatureDescriptor</tt> class is the base class for
<tt class="literal">MethodDescriptor</tt> and <tt class="literal">PropertyDescriptor</tt>,
as well as
other classes used by the JavaBeans introspection
mechanism. It provides basic information about a feature
(e.g., method, property, or event) of a bean. Typically, the
methods that begin with <tt class="literal">get</tt> and <tt class="literal">is</tt> are
used by application builders or other tools to query the
features of a bean. The <tt class="literal">set</tt> methods, on the other
hand, may be used by bean authors to define information about
the bean. </p>
<p>
<a name="INDEX-1203"></a><a name="INDEX-1204"></a><tt class="literal">setName()</tt> specifies the locale-independent,
programmatic name of the feature; <tt class="literal">setDisplayName()</tt>
specifies a localized, human-readable name; and
<a name="INDEX-1205"></a><a name="INDEX-1206"></a><a name="INDEX-1207"></a><tt class="literal">setShortDescription()</tt> specifies a short localized
string (about 40 characters) that describes the feature. Both the short description and the localized name default to
the value of the programmatic name. <tt class="literal">setExpert()</tt> and
<tt class="literal">setHidden()</tt> allow you to indicate that the feature
is for use only by experts or by the builder
tool and should be hidden from users of the builder. Finally, the <tt class="literal">setValue()</tt> method allows you to
associate an arbitrary named value with the feature. <a name="INDEX-1208"></a>
</p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">FeatureDescriptor</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">FeatureDescriptor</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Property Accessor Methods (by property name)</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">getDisplayName</b> ();</td><td align="right"><i> default:null</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setDisplayName</b> (String <i class="parameter">displayName</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">isExpert</b> ();</td><td align="right"><i> default:false</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setExpert</b> (boolean <i class="parameter">expert</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">isHidden</b> ();</td><td align="right"><i> default:false</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setHidden</b> (boolean <i class="parameter">hidden</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">getName</b> ();</td><td align="right"><i> default:null</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setName</b> (String <i class="parameter">name</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public boolean <b class="function">isPreferred</b> ();</td><td align="right"><i> default:false</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public void <b class="function">setPreferred</b> (boolean <i class="parameter">preferred</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">getShortDescription</b> ();</td><td align="right"><i> default:null</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setShortDescription</b> (String <i class="parameter">text</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public java.util.Enumeration <b class="function">attributeNames</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Object <b class="function">getValue</b> (String <i class="parameter">attributeName</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setValue</b> (String <i class="parameter">attributeName</i>, Object <i class="parameter">value</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Subclasses: </span><tt class="literal">BeanDescriptor, EventSetDescriptor, MethodDescriptor, ParameterDescriptor, PropertyDescriptor</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>IndexedPropertyDescriptor</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.beans</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1209"></a><a name="INDEX-1210"></a>
An <tt class="literal">IndexedPropertyDescriptor</tt> object is a type of
<tt class="literal">PropertyDescriptor</tt> that describes a bean property
that is (or behaves like) an array. The <tt class="literal">BeanInfo</tt>
class for a bean optionally creates and initializes
<tt class="literal">IndexedPropertyDescriptor</tt> objects to describe the
indexed properties the bean supports. Typically, only
application builders and similar tools use the
descriptor objects to obtain indexed property description
information. </p>
<p>You create an <tt class="literal">IndexedPropertyDescriptor</tt> by
specifying the name of the indexed property and the
<tt class="literal">Class</tt> object for the bean. If you have not followed
the standard design patterns for accessor method naming,
you can also specify the accessor methods for the
property, either as method names or as
<tt class="literal">java.lang.reflect.Method</tt> objects. Once you have
created an <tt class="literal">IndexedPropertyDescriptor</tt> object, you
can use the methods of <tt class="literal">PropertyDescriptor</tt> and
<tt class="literal">FeatureDescriptor</tt> to provide additional information
about the indexed property. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">IndexedPropertyDescriptor</b> extends PropertyDescriptor {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">IndexedPropertyDescriptor</b> (String <i class="parameter">propertyName</i>, Class <i class="parameter">beanClass</i>) throws IntrospectionException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">IndexedPropertyDescriptor</b> (String <i class="parameter">propertyName</i>, java.lang.reflect.Method <i class="parameter">getter</i>, java.lang.reflect.Method <i class="parameter">setter</i>, java.lang.reflect.Method <i class="parameter">indexedGetter</i>, java.lang.reflect.Method <i class="parameter">indexedSetter</i>) throws IntrospectionException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">IndexedPropertyDescriptor</b> (String <i class="parameter">propertyName</i>, Class <i class="parameter">beanClass</i>, String <i class="parameter">getterName</i>, String <i class="parameter">setterName</i>, String <i class="parameter">indexedGetterName</i>, String <i class="parameter">indexedSetterName</i>) throws IntrospectionException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Class <b class="function">getIndexedPropertyType</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public java.lang.reflect.Method <b class="function">getIndexedReadMethod</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public java.lang.reflect.Method <b class="function">getIndexedWriteMethod</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public void <b class="function">setIndexedReadMethod</b> (java.lang.reflect.Method <i class="parameter">getter</i>) throws IntrospectionException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public void <b class="function">setIndexedWriteMethod</b> (java.lang.reflect.Method <i class="parameter">setter</i>) throws IntrospectionException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->FeatureDescriptor-->PropertyDescriptor-->IndexedPropertyDescriptor</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>IntrospectionException</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.beans</b></font></td><td align="right"><font size="+1"><b><i>serializable checked PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1211"></a><a name="INDEX-1212"></a>
Signals that introspection on a JavaBeans component cannot be
completed. Typically, this indicates a bug in the way the
bean or its associated <tt class="literal">BeanInfo</tt> class is defined. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">IntrospectionException</b> extends Exception {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">IntrospectionException</b> (String <i class="parameter">mess</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Exception-->IntrospectionException</tt>
</p>
<p>
<span class="refsect1">Thrown By: </span>Too many methods to list. </p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>Introspector</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.beans</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1213"></a><a name="INDEX-1214"></a>
The <tt class="literal">Introspector</tt> is a class that is never
instantiated. Its static <tt class="literal">getBeanInfo()</tt> methods
<a name="INDEX-1215"></a>
provide a way to obtain information about a JavaBeans component and
are typically only invoked by application builders or
similar tools. <tt class="literal">getBeanInfo()</tt> first looks for a
<tt class="literal">BeanInfo</tt> class for the specified bean class. For a class named <em class="replaceable">x</em>, it looks for a <tt class="literal">BeanInfo</tt>
class named <em class="replaceable">x</em><tt class="literal">BeanInfo</tt>, first in the current
package and then in each of the packages in the
<tt class="literal">BeanInfo</tt> search path. </p>
<p>If no <tt class="literal">BeanInfo</tt> class is found, or if the
<tt class="literal">BeanInfo</tt> class found does not provide complete
information about the bean properties, events, and methods,
<tt class="literal">getBeanInfo()</tt> introspects on the bean
class by using the <tt class="literal">java.lang.reflect</tt> package to fill
in the missing information. When explicit information is
provided by a <tt class="literal">BeanInfo</tt> class, <tt class="literal">getBeanInfo()</tt>
treats it as definitive. When determining information
through introspection, however, it examines each of the
bean's superclasses in turn, looking for a <tt class="literal">BeanInfo</tt>
class at that level or using introspection. When calling
<tt class="literal">getBeanInfo()</tt>, you may optionally specify a second
class argument that specifies a superclass for which, and
above which, <tt class="literal">getBeanInfo()</tt> does not introspect. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">Introspector</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">No Constructor</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constants</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public static final int <b class="function">IGNORE_ALL_BEANINFO</b> ;</td><td align="right"><i> =3</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public static final int <b class="function">IGNORE_IMMEDIATE_BEANINFO</b> ;</td><td align="right"><i> =2</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public static final int <b class="function">USE_ALL_BEANINFO</b> ;</td><td align="right"><i> =1</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Class Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static String <b class="function">decapitalize</b> (String <i class="parameter">name</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public static void <b class="function">flushCaches</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public static void <b class="function">flushFromCaches</b> (Class <i class="parameter">clz</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static BeanInfo <b class="function">getBeanInfo</b> (Class <i class="parameter">beanClass</i>) throws IntrospectionException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public static BeanInfo <b class="function">getBeanInfo</b> (Class <i class="parameter">beanClass</i>, int <i class="parameter">flags</i>) throws IntrospectionException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static BeanInfo <b class="function">getBeanInfo</b> (Class <i class="parameter">beanClass</i>, Class <i class="parameter">stopClass</i>) throws IntrospectionException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static String[ ] <b class="function">getBeanInfoSearchPath</b> ();</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static void <b class="function">setBeanInfoSearchPath</b> (String[ ] <i class="parameter">path</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>MethodDescriptor</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.beans</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1216"></a><a name="INDEX-1217"></a>
A <tt class="literal">MethodDescriptor</tt> object is a type of
<tt class="literal">FeatureDescriptor</tt> that describes a method supported
by a JavaBeans component. The <tt class="literal">BeanInfo</tt> class for a bean
optionally creates <tt class="literal">MethodDescriptor</tt> objects that
describe the methods the bean exports. While a
<tt class="literal">BeanInfo</tt> class creates and initializes
<tt class="literal">MethodDescriptor</tt> objects, it is typically only
application builders and similar tools that use these
objects to obtain information about the methods supported by
a bean. </p>
<p>To create a <tt class="literal">MethodDescriptor</tt>, you must specify the
<tt class="literal">java.lang.reflect.Method</tt> object for the method and,
optionally, an array of <tt class="literal">ParameterDescriptor</tt>
objects that describe the parameters of the method. Once
you have created a <tt class="literal">MethodDescriptor</tt> object, you can
use <tt class="literal">FeatureDescriptor</tt> methods to provide additional
information about each method. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">MethodDescriptor</b> extends FeatureDescriptor {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">MethodDescriptor</b> (java.lang.reflect.Method <i class="parameter">method</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">MethodDescriptor</b> (java.lang.reflect.Method <i class="parameter">method</i>, ParameterDescriptor[ ] <i class="parameter">parameterDescriptors</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public java.lang.reflect.Method <b class="function">getMethod</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public ParameterDescriptor[ ] <b class="function">getParameterDescriptors</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->FeatureDescriptor-->MethodDescriptor</tt>
</p>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">EventSetDescriptor.EventSetDescriptor()</tt>
</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">BeanInfo.getMethodDescriptors(), EventSetDescriptor.getListenerMethodDescriptors(), SimpleBeanInfo.getMethodDescriptors()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>ParameterDescriptor</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.beans</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1218"></a><a name="INDEX-1219"></a>
A <tt class="literal">ParameterDescriptor</tt> object is a type of
<tt class="literal">FeatureDescriptor</tt> that describes an argument or
parameter to a method of a JavaBeans component. The <tt class="literal">BeanInfo</tt>
class for a JavaBeans component optionally creates
<tt class="literal">ParameterDescriptor</tt> objects that describe the
parameters of the methods the bean exports. While the
<tt class="literal">BeanInfo</tt> class creates and initializes
<tt class="literal">ParameterDescriptor</tt> objects, it is typically only
application builders and similar tools that use these
objects to obtain information about method parameters
supported by the bean. </p>
<p>
<a name="INDEX-1220"></a>
The <tt class="literal">ParameterDescriptor</tt> class is a trivial subclass
of <tt class="literal">FeatureDescriptor</tt> and does not provide any new
methods. Thus, you should use the methods
of <tt class="literal">FeatureDescriptor</tt> to provide information about method
parameters. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">ParameterDescriptor</b> extends FeatureDescriptor {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">ParameterDescriptor</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->FeatureDescriptor-->ParameterDescriptor</tt>
</p>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">MethodDescriptor.MethodDescriptor()</tt>
</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">MethodDescriptor.getParameterDescriptors()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>PropertyChangeEvent</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.beans</b></font></td><td align="right"><font size="+1"><b><i>serializable event PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1221"></a><a name="INDEX-1222"></a><a name="INDEX-1223"></a><a name="INDEX-1224"></a><a name="INDEX-1225"></a><tt class="literal">PropertyChangeEvent</tt> is a subclass of
<tt class="literal">java.util.EventObject</tt>. An event of this type is
sent to interested <tt class="literal">PropertyChangeListener</tt> objects
whenever a JavaBeans component changes a bound property or whenever
a <tt class="literal">PropertyEditor</tt> or <tt class="literal">Customizer</tt> changes a
property value. A <tt class="literal">PropertyChangeEvent</tt> is also sent
to registered <tt class="literal">VetoableChangeListener</tt> objects when a
bean attempts to change the value of a constrained
property. </p>
<p>When creating a <tt class="literal">PropertyChangeEvent</tt>, you normally
specify the bean that generated the event, the programmatic
(locale-independent) name of the property that changed, and
the old and new values of the property. If the values cannot
be determined, <tt class="literal">null</tt> should be passed instead. If the event is a notification that more than one property
value changed, the name should also be <tt class="literal">null</tt>. While JavaBeans must generate and send
<tt class="literal">PropertyChangeEvent</tt> objects, it 


is typically only
application builders and similar tools that are
interested in receiving them. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">PropertyChangeEvent</b> extends java.util.EventObject {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">PropertyChangeEvent</b> (Object <i class="parameter">source</i>, String <i class="parameter">propertyName</i>, Object <i class="parameter">oldValue</i>, Object <i class="parameter">newValue</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Object <b class="function">getNewValue</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Object <b class="function">getOldValue</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Object <b class="function">getPropagationId</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">getPropertyName</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setPropagationId</b> (Object <i class="parameter">propagationId</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->java.util.EventObject(Serializable)-->PropertyChangeEvent</tt>
</p>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">PropertyChangeListener.propertyChange(), PropertyChangeSupport.firePropertyChange(), PropertyVetoException.PropertyVetoException(), VetoableChangeListener.vetoableChange(), VetoableChangeSupport.fireVetoableChange(), java.beans.beancontext.BeanContextSupport.{propertyChange(), vetoableChange()}, javax.swing.JList.AccessibleJList.propertyChange(), javax.swing.JTable.AccessibleJTable.propertyChange(), javax.swing.event.SwingPropertyChangeSupport.firePropertyChange(), javax.swing.table.DefaultTableColumnModel.propertyChange()</tt>
</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">PropertyVetoException.getPropertyChangeEvent()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>PropertyChangeListener</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.beans</b></font></td><td align="right"><font size="+1"><b><i>event listener PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1226"></a><a name="INDEX-1227"></a><a name="INDEX-1228"></a>
This interface is an extension of
<tt class="literal">java.util.EventListener</tt>; it defines the method
a class must implement in order to be notified when property
changes occur. A <tt class="literal">PropertyChangeEvent</tt> is sent to
all registered <tt class="literal">PropertyChangeListener</tt> objects when a
bean changes one of its bound properties or when a
<tt class="literal">PropertyEditor</tt> or <tt class="literal">Customizer</tt> changes the
value of a property. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public interface <b class="classname">PropertyChangeListener</b> extends java.util.EventListener {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">propertyChange</b> (PropertyChangeEvent <i class="parameter">evt</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">(PropertyChangeListener(java.util.EventListener))</tt>
</p>
<p>
<span class="refsect1">Implementations: </span><tt class="literal">java.beans.beancontext.BeanContextSupport, javax.swing.JList.AccessibleJList, javax.swing.JTable.AccessibleJTable, javax.swing.table.DefaultTableColumnModel</tt>
</p>
<p>
<span class="refsect1">Passed To: </span>Too many methods to list. </p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">java.beans.beancontext.BeanContextSupport.getChildPropertyChangeListener(), javax.swing.AbstractButton.createActionPropertyChangeListener(), javax.swing.JCheckBox.createActionPropertyChangeListener(), javax.swing.JComboBox.createActionPropertyChangeListener(), javax.swing.JMenu.createActionChangeListener(), javax.swing.JMenuItem.createActionPropertyChangeListener(), javax.swing.JPopupMenu.createActionChangeListener(), javax.swing.JRadioButton.createActionPropertyChangeListener(), javax.swing.JTextField.createActionPropertyChangeListener(), javax.swing.JToolBar.createActionChangeListener()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>PropertyChangeSupport</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.beans</b></font></td><td align="right"><font size="+1"><b><i>serializable PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1229"></a><a name="INDEX-1230"></a><a name="INDEX-1231"></a>
The <tt class="literal">PropertyChangeSupport</tt> class is a convenience
class that maintains a list of registered
<tt class="literal">PropertyChangeListener</tt> objects and provides the
<tt class="literal">firePropertyChange()</tt> method for sending a
<tt class="literal">PropertyChangeEvent</tt> object to all registered
listeners. Because there are some tricky thread-synchronization issues involved in doing this correctly, it
is recommended that all JavaBeans that support bound
properties either extend this class or, more commonly,
create an instance of this class to which they can delegate
the task of maintaining the list of listeners. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">PropertyChangeSupport</b> implements Serializable {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">PropertyChangeSupport</b> (Object <i class="parameter">sourceBean</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Event Registration Methods (by event name)</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">addPropertyChangeListener</b> (PropertyChangeListener <i class="parameter">listener</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">removePropertyChangeListener</b> (PropertyChangeListener <i class="parameter">listener</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public void <b class="function">addPropertyChangeListener</b> (String <i class="parameter">propertyName</i>, PropertyChangeListener <i class="parameter">listener</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public void <b class="function">firePropertyChange</b> (PropertyChangeEvent <i class="parameter">evt</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public void <b class="function">firePropertyChange</b> (String <i class="parameter">propertyName</i>, int <i class="parameter">oldValue</i>, int <i class="parameter">newValue</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public void <b class="function">firePropertyChange</b> (String <i class="parameter">propertyName</i>, boolean <i class="parameter">oldValue</i>, boolean <i class="parameter">newValue</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">firePropertyChange</b> (String <i class="parameter">propertyName</i>, Object <i class="parameter">oldValue</i>, Object <i class="parameter">newValue</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public boolean <b class="function">hasListeners</b> (String <i class="parameter">propertyName</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public void <b class="function">removePropertyChangeListener</b> (String <i class="parameter">propertyName</i>, PropertyChangeListener <i class="parameter">listener</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->PropertyChangeSupport(Serializable)</tt>
</p>
<p>
<span class="refsect1">Subclasses: </span><tt class="literal">javax.swing.event.SwingPropertyChangeSupport</tt>
</p>
<p>
<span class="refsect1">Type Of: </span><tt class="literal">java.awt.Toolkit.desktopPropsSupport, java.beans.beancontext.BeanContextChildSupport.pcSupport</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>PropertyDescriptor</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.beans</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1232"></a><a name="INDEX-1233"></a>
A <tt class="literal">PropertyDescriptor</tt> object is a type of
<tt class="literal">FeatureDescriptor</tt> that describes a single property
of a JavaBeans component. The <tt class="literal">BeanInfo</tt> class for a bean
optionally creates and initializes
<tt class="literal">PropertyDescriptor</tt> objects to describe the
properties the bean supports. Typically, only
application builders and similar tools use the
<tt class="literal">get</tt> and <tt class="literal">is</tt> methods to obtain this property
description information. </p>
<p>You create a <tt class="literal">PropertyDescriptor</tt> by specifying the
name of the property and the <tt class="literal">Class</tt> object for the
bean. If you have not followed the standard design
patterns for accessor-method naming, you can also
specify the accessor methods for the property. Once a
<tt class="literal">PropertyDescriptor</tt> is created, the
<a name="INDEX-1234"></a><a name="INDEX-1235"></a><a name="INDEX-1236"></a><a name="INDEX-1237"></a><tt class="literal">setBound()</tt> and <tt class="literal">setConstrained()</tt> methods
allow you to specify whether the property is bound and/or
<a name="INDEX-1238"></a>
constrained. <tt class="literal">setPropertyEditorClass()</tt> allows you to
specify a specific property editor that should
edit the value of this property (this is useful, for
example, when the property is an enumerated type with a
specific list of supported values). The methods of the
<tt class="literal">FeatureDescriptor</tt> superclass allow additional
information about the property to be specified. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">PropertyDescriptor</b> extends FeatureDescriptor {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">PropertyDescriptor</b> (String <i class="parameter">propertyName</i>, Class <i class="parameter">beanClass</i>) throws IntrospectionException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">PropertyDescriptor</b> (String <i class="parameter">propertyName</i>, java.lang.reflect.Method <i class="parameter">getter</i>, java.lang.reflect.Method <i class="parameter">setter</i>) throws IntrospectionException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">PropertyDescriptor</b> (String <i class="parameter">propertyName</i>, Class <i class="parameter">beanClass</i>, String <i class="parameter">getterName</i>, String <i class="parameter">setterName</i>) throws IntrospectionException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Property Accessor Methods (by property name)</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">isBound</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setBound</b> (boolean <i class="parameter">bound</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">isConstrained</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setConstrained</b> (boolean <i class="parameter">constrained</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Class <b class="function">getPropertyEditorClass</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setPropertyEditorClass</b> (Class <i class="parameter">propertyEditorClass</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Class <b class="function">getPropertyType</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public java.lang.reflect.Method <b class="function">getReadMethod</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public void <b class="function">setReadMethod</b> (java.lang.reflect.Method <i class="parameter">getter</i>) throws IntrospectionException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public java.lang.reflect.Method <b class="function">getWriteMethod</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public void <b class="function">setWriteMethod</b> (java.lang.reflect.Method <i class="parameter">setter</i>) throws IntrospectionException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->FeatureDescriptor-->PropertyDescriptor</tt>
</p>
<p>
<span class="refsect1">Subclasses: </span><tt class="literal">IndexedPropertyDescriptor</tt>
</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">BeanInfo.getPropertyDescriptors(), SimpleBeanInfo.getPropertyDescriptors()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>PropertyEditor</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.beans</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>



<p>
<a name="INDEX-1239"></a><a name="INDEX-1240"></a>
The <tt class="literal">PropertyEditor</tt> interface defines the methods
that must be implemented by a JavaBeans property editor
intended for use within an application builder or similar
tool. <tt class="literal">PropertyEditor</tt> is a complex interface because
it defines methods to support different ways of
displaying property values to the user. It also defines
methods to support different ways of allowing the
user to edit the property value. </p>
<p>For a property of type <em class="replaceable">x</em>, the author of a bean
typically implements a property editor of class
<em class="replaceable">x</em><tt class="literal">Editor</tt>. While the editor is implemented by
the bean author, it is usually instantiated or used only
by application builders or similar tools (or by a
<tt class="literal">Customizer</tt> class for a bean). In addition to implementing the <tt class="literal">PropertyEditor</tt>
interface, a property editor must have a constructor that
expects no arguments, so that it can be easily be
instantiated by an application builder. Also, it must
accept registration and deregistration of
<tt class="literal">PropertyChangeListener</tt> objects and send a
<tt class="literal">PropertyChangeEvent</tt> to all registered listeners when
it changes the value of the property being edited. The <tt class="literal">PropertyEditorSupport</tt> class is a trivial
implementation of <tt class="literal">PropertyEditor</tt>, suitable for
subclassing or for supporting a list of
<tt class="literal">PropertyChangeListener</tt> objects. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public interface <b class="classname">PropertyEditor</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Event Registration Methods (by event name)</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">addPropertyChangeListener</b> (PropertyChangeListener <i class="parameter">listener</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">removePropertyChangeListener</b> (PropertyChangeListener <i class="parameter">listener</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Property Accessor Methods (by property name)</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract String <b class="function">getAsText</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">setAsText</b> (String <i class="parameter">text</i>) throws IllegalArgumentException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract java.awt.Component <b class="function">getCustomEditor</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract String <b class="function">getJavaInitializationString</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract boolean <b class="function">isPaintable</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract String[ ] <b class="function">getTags</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract Object <b class="function">getValue</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">setValue</b> (Object <i class="parameter">value</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">paintValue</b> (java.awt.Graphics <i class="parameter">gfx</i>, java.awt.Rectangle <i class="parameter">box</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract boolean <b class="function">supportsCustomEditor</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Implementations: </span><tt class="literal">PropertyEditorSupport</tt>
</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">PropertyEditorManager.findEditor()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>PropertyEditorManager</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.beans</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1241"></a><a name="INDEX-1242"></a>
The <tt class="literal">PropertyEditorManager</tt> class is not meant to be
instantiated; it defines static methods for registering and
looking up <tt class="literal">PropertyEditor</tt> classes for a specified
property type. A bean can specify a particular <tt class="literal">PropertyEditor</tt>
class for a given property by specifying it in a
<tt class="literal">PropertyDescriptor</tt> object for the property. If it
does not do this, the <tt class="literal">PropertyEditorManager</tt>
is used to register and look up editors. A bean or an
application builder tool can call the
<a name="INDEX-1243"></a><a name="INDEX-1244"></a><tt class="literal">registerEditor()</tt> method to register a
<tt class="literal">PropertyEditor</tt> for properties of a specified type. Application builders and bean <tt class="literal">Customizer</tt> classes can
call the <tt class="literal">findEditor()</tt> method to obtain a
<tt class="literal">PropertyEditor</tt> for a given property type. If no editor has been registered for a given type, the
<tt class="literal">PropertyEditorManager</tt> attempts to locate one. For a type <tt class="literal">x</tt>, it looks for a class
<em class="replaceable">x</em><tt class="literal">Editor</tt> first in the same package as
<em class="replaceable">x</em>, and then in each package listed in the
property editor search path. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">PropertyEditorManager</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">PropertyEditorManager</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Class Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static PropertyEditor <b class="function">findEditor</b> (Class <i class="parameter">targetType</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static String[ ] <b class="function">getEditorSearchPath</b> ();</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static void <b class="function">registerEditor</b> (Class <i class="parameter">targetType</i>, Class <i class="parameter">editorClass</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static void <b class="function">setEditorSearchPath</b> (String[ ] <i class="parameter">path</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>PropertyEditorSupport</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.beans</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1245"></a><a name="INDEX-1246"></a>
The <tt class="literal">PropertyEditorSupport</tt> class is a trivial
implementation of the <tt class="literal">PropertyEditor</tt> interface. It
provides no-op default implementations of most methods,
so you can define simple <tt class="literal">PropertyEditor</tt>
subclasses that override only a few required methods. <a name="INDEX-1247"></a><a name="INDEX-1248"></a><a name="INDEX-1249"></a><a name="INDEX-1250"></a>

In addition, <tt class="literal">PropertyEditorSupport</tt> defines working
versions of <tt class="literal">addPropertyChangeListener()</tt> and
<tt class="literal">removePropertyChangeListener()</tt>, along with a
<tt class="literal">firePropertyChange()</tt> method that sends a
<tt class="literal">PropertyChangeEvent</tt> to all registered listeners. <tt class="literal">PropertyEditor</tt> classes may choose to instantiate a
<tt class="literal">PropertyEditorSupport</tt> object simply to handle the
job of managing the list of listeners. When used in this
way, the <tt class="literal">PropertyEditorSupport</tt> object should be
instantiated with a source object specified, so that the
source object can be used in the <tt class="literal">PropertyChangeEvent</tt>
objects that are sent. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">PropertyEditorSupport</b> implements PropertyEditor {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected <b class="function">PropertyEditorSupport</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected <b class="function">PropertyEditorSupport</b> (Object <i class="parameter">source</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Event Registration Methods (by event name)</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">addPropertyChangeListener</b> (PropertyChangeListener <i class="parameter">listener</i>);</td><td align="right"><i> Implements:PropertyEditor synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">removePropertyChangeListener</b> (PropertyChangeListener <i class="parameter">listener</i>);</td><td align="right"><i> Implements:PropertyEditor synchronized</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">firePropertyChange</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Methods Implementing PropertyEditor</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">addPropertyChangeListener</b> (PropertyChangeListener <i class="parameter">listener</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">getAsText</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public java.awt.Component <b class="function">getCustomEditor</b> ();</td><td align="right"><i> constant</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">getJavaInitializationString</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String[ ] <b class="function">getTags</b> ();</td><td align="right"><i> constant</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Object <b class="function">getValue</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">isPaintable</b> ();</td><td align="right"><i> constant</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">paintValue</b> (java.awt.Graphics <i class="parameter">gfx</i>, java.awt.Rectangle <i class="parameter">box</i>);</td><td align="right"><i> empty</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">removePropertyChangeListener</b> (PropertyChangeListener <i class="parameter">listener</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setAsText</b> (String <i class="parameter">text</i>) throws IllegalArgumentException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setValue</b> (Object <i class="parameter">value</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">supportsCustomEditor</b> ();</td><td align="right"><i> constant</i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->PropertyEditorSupport(PropertyEditor)</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>PropertyVetoException</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.beans</b></font></td><td align="right"><font size="+1"><b><i>serializable checked PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1251"></a><a name="INDEX-1252"></a><a name="INDEX-1253"></a>
Signals that a 
<tt class="literal">VetoableChangeListener</tt> that received a
<tt class="literal">PropertyChangeEvent</tt> for a constrained property of
a bean has vetoed that proposed change. When this exception is received, the property in question
should revert to its original value, and any
<tt class="literal">VetoableChangeListener</tt> objects that have already
been notified of the property change must be renotified to
indicate that the property has reverted to its old value. The <tt class="literal">VetoableChangeSupport</tt> class handles this
renotification automatically and rethrows the
<tt class="literal">PropertyVetoException</tt> to notify its caller that the
change was rejected. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">PropertyVetoException</b> extends Exception {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">PropertyVetoException</b> (String <i class="parameter">mess</i>, PropertyChangeEvent <i class="parameter">evt</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public PropertyChangeEvent <b class="function">getPropertyChangeEvent</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Exception-->PropertyVetoException</tt>
</p>
<p>
<span class="refsect1">Thrown By: </span><tt class="literal">VetoableChangeListener.vetoableChange(), VetoableChangeSupport.fireVetoableChange(), java.beans.beancontext.BeanContextChild.setBeanContext(), java.beans.beancontext.BeanContextChildSupport.{fireVetoableChange(), setBeanContext()}, java.beans.beancontext.BeanContextSupport.{setLocale(), vetoableChange()}, javax.swing.JComponent.fireVetoableChange(), javax.swing.JInternalFrame.{setClosed(), setIcon(), setMaximum(), setSelected()}</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>SimpleBeanInfo</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.beans</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1254"></a><a name="INDEX-1255"></a>
The <tt class="literal">SimpleBeanInfo</tt> class is a trivial implementation
of the <tt class="literal">BeanInfo</tt> interface. The methods of this
class all return <tt class="literal">null</tt> or -1, indicating that
no bean information is available. To use this class, you
need to override only the method or methods that return the
particular type of bean information you want to provide. 
<a name="INDEX-1256"></a><a name="INDEX-1257"></a>
In addition, <tt class="literal">SimpleBeanInfo</tt> provides a convenience
method, <tt class="literal">loadImage()</tt>, that takes a resource name as
an argument and returns an <tt class="literal">Image object</tt>. This method is
useful when defining the <tt class="literal">getIcon()</tt> method. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">SimpleBeanInfo</b> implements BeanInfo {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">SimpleBeanInfo</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public java.awt.Image <b class="function">loadImage</b> (String <i class="parameter">resourceName</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Methods Implementing BeanInfo</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public BeanInfo[ ] <b class="function">getAdditionalBeanInfo</b> ();</td><td align="right"><i> constant default:null</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public BeanDescriptor <b class="function">getBeanDescriptor</b> ();</td><td align="right"><i> constant default:null</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getDefaultEventIndex</b> ();</td><td align="right"><i> constant default:-1</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getDefaultPropertyIndex</b> ();</td><td align="right"><i> constant default:-1</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public EventSetDescriptor[ ] <b class="function">getEventSetDescriptors</b> ();</td><td align="right"><i> constant default:null</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public java.awt.Image <b class="function">getIcon</b> (int <i class="parameter">iconKind</i>);</td><td align="right"><i> constant</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public MethodDescriptor[ ] <b class="function">getMethodDescriptors</b> ();</td><td align="right"><i> constant default:null</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public PropertyDescriptor[ ] <b class="function">getPropertyDescriptors</b> ();</td><td align="right"><i> constant default:null</i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->SimpleBeanInfo(BeanInfo)</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>VetoableChangeListener</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.beans</b></font></td><td align="right"><font size="+1"><b><i>event listener PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1258"></a><a name="INDEX-1259"></a><a name="INDEX-1260"></a>
This interface is an extension of
<tt class="literal">java.util.EventListener</tt>. It defines the method a class must implement in order to be notified when a Java
bean makes a change to a constrained property. A
<tt class="literal">PropertyChangeEvent</tt> is passed to the
<a name="INDEX-1261"></a><tt class="literal">VetoableChange()</tt> method when such a change occurs. If the <tt class="literal">VetoableChangeListener</tt> wants to prevent
the change from occurring, this method should throw a
<tt class="literal">PropertyVetoException</tt>. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public interface <b class="classname">VetoableChangeListener</b> extends java.util.EventListener {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">vetoableChange</b> (PropertyChangeEvent <i class="parameter">evt</i>) throws PropertyVetoException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">(VetoableChangeListener(java.util.EventListener))</tt>
</p>
<p>
<span class="refsect1">Implementations: </span><tt class="literal">java.beans.beancontext.BeanContextSupport</tt>
</p>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">VetoableChangeSupport.{addVetoableChangeListener(), removeVetoableChangeListener()}, java.beans.beancontext.BeanContextChild.{addVetoableChangeListener(), removeVetoableChangeListener()}, java.beans.beancontext.BeanContextChildSupport.{addVetoableChangeListener(), removeVetoableChangeListener()}, javax.swing.JComponent.{addVetoableChangeListener(), removeVetoableChangeListener()}</tt>
</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">java.beans.beancontext.BeanContextSupport.getChildVetoableChangeListener()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>VetoableChangeSupport</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.beans</b></font></td><td align="right"><font size="+1"><b><i>serializable PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1262"></a><a name="INDEX-1263"></a><a name="INDEX-1264"></a><tt class="literal">VetoableChangeSupport</tt> is a convenience class that
maintains a list of registered
<tt class="literal">VetoableChangeListener</tt> objects and provides a
<tt class="literal">fireVetoableChange()</tt> method for sending a
<tt class="literal">PropertyChangeEvent</tt> to all registered listeners. If
any of the registered listeners veto the proposed change,
<tt class="literal">fireVetoableChange()</tt> sends out another
<tt class="literal">PropertyChangeEvent</tt> notifying previously notified
listeners that the property has reverted to its original
value. Because of the extra complexity of correctly handling
veto-able changes and because of some tricky thread-synchronization issues involved in maintaining the list of
listeners, it is recommended that all Java beans that
support constrained events create a
<tt class="literal">VetoableChangeSupport</tt> object to which they can
delegate the tasks of maintaining the list of listeners and
of firing events. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">VetoableChangeSupport</b> implements Serializable {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">VetoableChangeSupport</b> (Object <i class="parameter">sourceBean</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Event Registration Methods (by event name)</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">addVetoableChangeListener</b> (VetoableChangeListener <i class="parameter">listener</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">removeVetoableChangeListener</b> (VetoableChangeListener <i class="parameter">listener</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public void <b class="function">addVetoableChangeListener</b> (String <i class="parameter">propertyName</i>, VetoableChangeListener <i class="parameter">listener</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public void <b class="function">fireVetoableChange</b> (PropertyChangeEvent <i class="parameter">evt</i>) throws PropertyVetoException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public void <b class="function">fireVetoableChange</b> (String <i class="parameter">propertyName</i>, int <i class="parameter">oldValue</i>, int <i class="parameter">newValue</i>) throws PropertyVetoException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public void <b class="function">fireVetoableChange</b> (String <i class="parameter">propertyName</i>, boolean <i class="parameter">oldValue</i>, boolean <i class="parameter">newValue</i>) throws PropertyVetoException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">fireVetoableChange</b> (String <i class="parameter">propertyName</i>, Object <i class="parameter">oldValue</i>, Object <i class="parameter">newValue</i>) throws PropertyVetoException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public boolean <b class="function">hasListeners</b> (String <i class="parameter">propertyName</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public void <b class="function">removeVetoableChangeListener</b> (String <i class="parameter">propertyName</i>, VetoableChangeListener <i class="parameter">listener</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->VetoableChangeSupport(Serializable)</tt>
</p>
<p>
<span class="refsect1">Type Of: </span><tt class="literal">java.beans.beancontext.BeanContextChildSupport.vcSupport</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>Visibility</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.beans</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1265"></a><a name="INDEX-1266"></a><a name="INDEX-1267"></a><a name="INDEX-1268"></a>
This interface is intended to be implemented by advanced
beans that can run both with and without a GUI present. The
methods it defines allow a bean to specify whether it
requires a GUI and allow the environment to notify the bean
whether a GUI is available. <a name="INDEX-1269"></a><a name="INDEX-1270"></a><a name="INDEX-1271"></a><a name="INDEX-1272"></a>
If a bean absolutely requires a GUI, it should return
<tt class="literal">true</tt> from <tt class="literal">needsGui()</tt>. If a bean is running
without a GUI, it should return <tt class="literal">true</tt> from
<tt class="literal">avoidingGui()</tt>. If no GUI is available, the bean can
be notified through a call to <tt class="literal">dontUseGui()</tt>, and if a
GUI is available, the bean can be notified through a call to
<tt class="literal">okToUseGui()</tt>. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public interface <b class="classname">Visibility</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract boolean <b class="function">avoidingGui</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">dontUseGui</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract boolean <b class="function">needsGui</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">okToUseGui</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Implementations: </span><tt class="literal">java.beans.beancontext.BeanContext</tt>
</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">java.beans.beancontext.BeanContextSupport.getChildVisibility()</tt><a name="INDEX-1273"></a>
</p>
</div>


<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="howto_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/howto_02.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch10_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch10_01.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">Reading a Quick-Reference Entry</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">10. The java.beans.beancontext Package</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
