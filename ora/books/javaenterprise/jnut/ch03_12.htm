<html>
<head>
<title>Anonymous Classes (Java in a Nutshell)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="David Flanagan">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-487-8E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Anonymous Classes">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm" alt="Java Enterprise in a Nutshell"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch03_11.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch03_11.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch03_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch03_01.htm">Chapter 3: Object-Oriented Programming in Java</a></td><td align="right" valign="top" width="172"><a href="ch03_13.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch03_13.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY --><h2 class="sect1">3.12. Anonymous Classes</h2>
<p>
<a name="INDEX-560"></a><a name="INDEX-561"></a>

      An <em class="emphasis">anonymous class</em> 
      is a local class without a name. An anonymous
      class is defined and instantiated in a single succinct expression
      using the <tt class="literal">new</tt> operator. While a local class
      definition is a statement in a block of Java code, an anonymous
      class definition is an expression, which means that it can be
      included as part of a larger expression, such as a method call. When a local class is used only once, consider using
      anonymous class syntax, which places the definition and use of the
      class in exactly the same place. </p>
<p>      Consider <a href="#javanut3-ch-3-ex-anoncl">Example 3-11</a>, which shows the
      <tt class="literal">Enumeration</tt> class 
      implemented as an anonymous class within the
      <tt class="literal">enumerate()</tt> method of the
      <tt class="literal">LinkedStack</tt> class. Compare it with <a href="ch03_11.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch03_11.htm">Example 3-10</a>, which shows the same class
      implemented as a local class. </p>
<a name="javanut3-ch-3-ex-anoncl"></a>
<div class="example">
<h4 class="objtitle">Example 3-11. An Enumeration Implemented with an Anonymous Class</h4>
<blockquote>
<pre class="programlisting">public java.util.Enumeration enumerate() {
  // The anonymous class is defined as part of the return statement
  return new java.util.Enumeration() { 
    Linkable current; = head;
    { current = head; }  // Replace constructor with an instance initializer
    public boolean hasMoreElements() {  return (current != null); }
    public Object nextElement() {
      if (current == null) throw new java.util.NoSuchElementException();
      Object value = current;
      current = current.getNext();
      return value;
    }
  };  // Note the required semicolon: it terminates the return statement
}</pre>
</blockquote>
</div>
<p>      One common use for an anonymous class is to provide a
      simple implementation of an adapter class. An 
      <em class="emphasis">adapter class</em> is
      one that defines code that is invoked by some other object. Take, for example, the <tt class="literal">list()</tt> method of the
      <tt class="literal">java.io.File</tt> class. This method lists the files in a
      directory. Before it returns the list, though, it passes the name of
      each file to a <tt class="literal">FilenameFilter</tt> object you
      must supply. This <tt class="literal">FilenameFilter</tt> object 
      accepts or rejects each file. When you implement the
      <tt class="literal">FilenameFilter</tt> interface, you are defining an adapter
      class for use with the <tt class="literal">File.list()</tt> method. Since the body of such a class is typically quite short, it is
      easy to define an adapter class as an anonymous class. Here's how you can define a <tt class="literal">FilenameFilter</tt>
      class to list only those files whose names end 
      with <em class="emphasis">.java</em> :
</p>
<blockquote>
<pre class="programlisting">File f = new File("/src");      // The directory to list

// Now call the list() method with a single FilenameFilter argument
// Define and instantiate an anonymous implementation of FilenameFilter
// as part of the method invocation expression. 
String[] filelist = f.list(new FilenameFilter() {
  public boolean accept(File f, String s) { return s.endsWith(".java"); }
}); // Don't forget the parenthesis and semicolon that end the method call!</pre>
</blockquote>
<p>      As you can see, the syntax for defining an anonymous class and
      creating an
      instance of that class uses the <tt class="literal">new</tt> keyword,
      followed by the name of a class and 
      a class body definition in curly braces. If the name following the <tt class="literal">new</tt> keyword is the
      name of a class, the anonymous class is a subclass of the named
      class. If the name following <tt class="literal">new</tt> specifies an
      interface, as in the two previous examples, the anonymous class
      implements that interface and extends <tt class="literal">Object</tt>. The syntax does not include any way to specify an
      <tt class="literal">extends</tt> clause, an
      <tt class="literal">implements</tt> clause, or a name for the class. </p>
<p>      Because an anonymous class has no name, it is not possible
      to define a constructor for it within the class body. This
      is one of the basic restrictions on anonymous classes. Any
      arguments you specify between the parentheses following the
      superclass name in an anonymous class definition are
      implicitly passed to the superclass constructor. Anonymous
      classes are commonly used to subclass simple classes that do
      not take any constructor arguments, so the parentheses
      in the anonymous class definition syntax are often
      empty. In the previous examples, each anonymous class
      implemented an interface and extended <tt class="literal">Object</tt>. Since the <tt class="literal">Object()</tt> constructor takes no
      arguments, the parentheses were empty in those examples. </p>
<h3 class="sect2">3.12.1. Features of Anonymous Classes</h3>
<p>	One of the most elegant things about anonymous classes is
	that they allow you to define a one-shot class exactly where
	it is needed. In addition, anonymous classes have a succinct
	syntax that reduces clutter in your code. </p>
<h3 class="sect2">3.12.2. Restrictions on Anonymous Classes</h3>
<p>
<a name="INDEX-562"></a><a name="INDEX-563"></a>

	Because an anonymous class is just a type of local class, 
	anonymous classes and local classes 
	share the same restrictions. An anonymous class cannot define
	any <tt class="literal">static</tt> fields, methods, or classes,
	except for <tt class="literal">static</tt><tt class="literal">final</tt>
	constants. Interfaces cannot be defined anonymously, since
	there is no way to implement an interface without a name. Also, like local classes, anonymous classes cannot be
	<tt class="literal">public</tt>, <tt class="literal">private</tt>,
	<tt class="literal">protected</tt>, or <tt class="literal">static</tt>. </p>
<p>	Since an anonymous class has no name, it is not possible to
	define a constructor for an anonymous class. If your class
	requires a constructor, you must use a local class instead. However, you can often use an instance initializer as a
	substitute for a constructor. In fact, instance initializers
	were introduced into the language for this very purpose. </p>
<p>	The syntax for defining an anonymous class combines definition
	with instantiation. Thus, using an anonymous class instead of a
	local class is not appropriate if you need to create more than a
	single instance of the class each time the containing block is
	executed. </p>
<h3 class="sect2">3.12.3. New Syntax for Anonymous Classes</h3>
<p>	We've already seen examples of the syntax for defining and
	instantiating an anonymous class. We can express that syntax more
	formally as:
</p>

<blockquote>
<pre class="programlisting">
<tt class="literal">new </tt><em class="replaceable">class-name</em> <tt class="literal">(</tt> [ <em class="replaceable">argument-list</em> ] <tt class="literal">) {</tt> <em class="replaceable">class-body</em> <tt class="literal">}</tt>
</pre>
</blockquote>

<p>
	or:
</p>
<blockquote>
<pre class="programlisting">
<tt class="literal">new </tt><em class="replaceable">interface-name</em> <tt class="literal">() {</tt> <em class="replaceable">class-body</em> <tt class="literal">}</tt>
</pre>
</blockquote>

<p>	As I already mentioned, instance initializers are another
	specialized piece of Java syntax that was introduced to 
	support anonymous classes. As we discussed earlier in the
	chapter, an instance initializer
	is a block of initialization code contained within curly braces
	inside a class definition. The contents of an instance
	initializer for a class are automatically inserted into all
	constructors for the class, including any automatically created
	default constructor. An anonymous class cannot define a 
	constructor, so it gets a default constructor. By using
	an instance initializer, you can get around the fact that you
	cannot define a constructor for an anonymous class. </p>
<h3 class="sect2">3.12.4. When to Use an Anonymous Class</h3>
<p>
<a name="INDEX-564"></a>

	As we've discussed, an anonymous class behaves just like a local
	class and is distinguished from a local class merely in the
	syntax used to define and instantiate it. In your own code,
	when you have to choose between using an anonymous class and a
	local class, the decision often comes down to a matter of style. You should use whichever syntax makes your code clearer. In
	general, you should consider using an anonymous class instead of
	a local class if:
      </p>
<ul>
<li>
<p>	    The class has a very short body. </p>
</li>
<li>
<p>	    Only one instance of the class is needed. </p>
</li>
<li>
<p>	    The class is used right after it is defined. </p>
</li>
<li>
<p>	    The name of the class does not make your code any easier to
	    understand. </p>
</li>
</ul>
<h3 class="sect2">3.12.5. Anonymous Class Indentation and Formatting</h3>
<p>	The common indentation and formatting conventions we are
	familiar with for block-structured languages like Java and C
	begin to break down somewhat once we start placing anonymous
	class definitions within arbitrary expressions. Based on their
	experience with inner classes, the engineers at Sun
	recommend the following formatting rules:
      </p>
<ul>
<li>
<p>	    The opening curly brace should not be on a line
	    by itself; instead, it should follow the close parenthesis
	    of the <tt class="literal">new</tt> operator. Similarly, the
	    <tt class="literal">new</tt> operator should, when possible,
	    appear on the same line as the assignment or other
	    expression of which it is a part. </p>
</li>
<li>
<p>	    The body of the anonymous class should be indented relative
	    to the beginning of the line that contains the
	    <tt class="literal">new</tt> keyword. </p>
</li>
<li>
<p>	    The closing curly brace of an anonymous class should not be
	    on a line by itself either; it should be followed by
	    whatever tokens are required by the rest of the expression. Often this is a semicolon or a close parenthesis
	    followed by a semicolon. This extra punctuation serves as a
	    flag to the reader that this is not just an ordinary block of
	    code and makes it easier to understand anonymous classes
	    in a code listing.
<a name="INDEX-565"></a><a name="INDEX-566"></a>
</p>
</li>
</ul>

<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch03_11.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch03_11.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch03_13.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch03_13.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">3.11. Local Classes</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">3.13. How Inner Classes Work</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
