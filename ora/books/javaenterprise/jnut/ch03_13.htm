<html>
<head>
<title>How Inner Classes Work (Java in a Nutshell)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="David Flanagan">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-487-8E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="How Inner Classes Work">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm" alt="Java Enterprise in a Nutshell"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch03_12.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch03_12.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch03_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch03_01.htm">Chapter 3: Object-Oriented Programming in Java</a></td><td align="right" valign="top" width="172"><a href="ch03_14.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch03_14.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY --><h2 class="sect1">3.13. How Inner Classes Work</h2>
<p>
<a name="INDEX-567"></a><a name="INDEX-568"></a>


      The preceding sections have explained the features and behavior of the
      various types of inner classes. Strictly speaking, that should be
      all you need to know about inner classes. In practice, however,
      some programmers find it easier to understand the details of inner
      classes if they understand how they are implemented. </p>
<p>      Inner classes were introduced in Java 1.1. Despite the dramatic
      changes to the Java language, the introduction of inner classes
      did not change the Java Virtual Machine or the Java class file
      format. As far as the Java interpreter is concerned, there is no
      such thing as an inner class: all classes are normal top-level
      classes. In order to make an inner class behave as if it is
      actually defined inside another class, the Java compiler ends
      up inserting hidden fields, methods, and constructor arguments
      into the classes it generates. You may want to use the <em class="emphasis">javap</em> disassembler to
      disassemble some of the class files for inner classes so you can
      see what tricks the compiler has used to make inner classes work. (See <a href="ch08_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch08_01.htm">Chapter 8, "Java Development Tools"</a>, for information on
      <em class="emphasis">javap</em>.)
    </p>
<h3 class="sect2">3.13.1. Static Member Class Implementation</h3>
<p>
<a name="INDEX-569"></a><a name="INDEX-570"></a>

	Recall our first <tt class="literal">LinkedStack</tt> example 
	(<a href="ch03_09.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch03_09.htm">Example 3-8</a>),
	which defined a static member interface named
	<tt class="literal">Linkable</tt>. When you compile this
	<tt class="literal">LinkedStack</tt> class, the compiler actually
	generates two class files. The first one is
	<em class="emphasis">LinkedStack.class</em>, as expected. The second
	class file, however, is called
	<em class="emphasis">LinkedStack$Linkable.class</em>. The
	<tt class="literal">$</tt> in this name is automatically inserted by
	the Java compiler. This second class file contains the
	implementation of the static member interface. </p>
<p>	As we discussed earlier, 
	a static member class can access all the <tt class="literal">static</tt>
	members of its containing class. If a static member class does
	this, the compiler automatically qualifies the member access
	expression with the name of the containing class. A static
	member class is even allowed to access the
	<tt class="literal">private</tt><tt class="literal">static</tt> 
	fields of its containing
	class. Since the static member class is compiled into an
	ordinary top-level class, however, there is no way it can
	directly access the <tt class="literal">private</tt> 
	members of its container. Therefore, if a static member class uses a
	<tt class="literal">private</tt> member of its containing class (or
	vice versa), the compiler automatically generates
	non-<tt class="literal">private</tt> access methods and converts the
	expressions that access the <tt class="literal">private</tt> members
	into expressions that access these specially generated methods. These methods are given the default package access, which is
	sufficient, as the member class and its containing class are
	guaranteed to be in the same package. </p>
<h3 class="sect2">3.13.2. Member Class Implementation</h3>
<p>
<a name="INDEX-571"></a>

	A member class is implemented much like a static member class. It is compiled into a separate top-level class file, and the
	compiler performs various code manipulations to make 
	interclass member access work correctly. </p>
<p>	The most significant difference between a member class and a
	static member class is that each instance of a member class is
	associated with an instance of the enclosing class. The
	compiler enforces this association 
	by defining a synthetic field named
	<tt class="literal">this$0</tt> in each member class. This field is
	used to hold a reference to the enclosing instance. Every
	member class constructor is given an extra parameter that initializes this field. Every time a member class constructor
	is invoked, the compiler automatically passes a
	reference to the enclosing class for this extra parameter. </p>
<p>	As we've seen, a member class, like any member of a class, can
	be declared <tt class="literal">public</tt>,
	<tt class="literal">protected</tt>, or <tt class="literal">private</tt>, or
	given the default package visibility. However, as I mentioned
	earlier, there have been no changes to the Java Virtual Machine
	to support member classes. Member classes are compiled to
	class files just like top-level classes, but top-level
	classes can only have public or package access. Therefore, 
	as far as the
	Java interpreter is concerned, member classes can
	only have public or package visibility. This means that a
	member class declared <tt class="literal">protected</tt> is actually
	treated as a public class, and a member class declared
	<tt class="literal">private</tt> actually has package visibility. This does not mean you should never declare a
	member class as <tt class="literal">protected</tt> or
	<tt class="literal">private</tt>. Although the interpreter cannot
	enforce these access control modifiers, the modifiers are noted
	in the class file. This allows any conforming Java compiler to
	enforce the access modifiers and prevent the member classes from
	being accessed in unintended ways. </p>
<h3 class="sect2">3.13.3. Local and Anonymous Class Implementation</h3>
<p>
<a name="INDEX-572"></a><a name="INDEX-573"></a>

	A local class is able to refer to fields and methods in
	its containing class for exactly the same reason that
	a member class can; it is passed a hidden reference to
	the containing class in its constructor and saves
	that reference away in a <tt class="literal">private</tt> field added by the
	compiler. Also, like member classes, local classes can use
	<tt class="literal">private</tt> fields and methods of their containing
	class because the compiler inserts any required accessor
	methods. </p>
<p>	What makes local classes different from member classes is that
	they have the ability to refer to local variables in the scope
	that defines them. The crucial restriction on this ability,
	however, is that local classes can only reference local
	variables and parameters that are declared
	<tt class="literal">final</tt>. The reason for this restriction 
	becomes apparent from
	the implementation. A local class can use local variables
	because the compiler automatically gives the class a
	<tt class="literal">private</tt> instance field to hold a copy of each
	local variable the class uses. The compiler also adds hidden
	parameters to each local class constructor to initialize
	these automatically created <tt class="literal">private</tt> fields. Thus, a local class does not actually access
	local variables, but merely its own private copies of them. The
	only way this can work correctly is if the local variables are
	declared <tt class="literal">final</tt>, so that they are guaranteed
	not to change. With this guarantee, the local class can be
	assured that its internal copies of the variables are always in
	sync with the real local variables. </p>
<p>	Since anonymous classes have no names, you may wonder what the
	class files that represent them are named. This is an
	implementation detail, but the Java compiler from Sun uses
	numbers to provide anonymous class names. If you compile the
	example shown in <a href="ch03_12.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch03_12.htm">Example 3-11</a>, you'll
	find that it produces a file with a name like
	<em class="emphasis">LinkedStack$1.class</em>. This is the class file
	for the anonymous class.
<a name="INDEX-574"></a><a name="INDEX-575"></a>
</p>

<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch03_12.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch03_12.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch03_14.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch03_14.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">3.12. Anonymous Classes</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">3.14. Modifier Summary</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
