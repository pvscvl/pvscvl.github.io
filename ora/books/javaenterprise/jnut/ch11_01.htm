<html>
<head>
<title>The java.io Package (Java in a Nutshell)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="David Flanagan">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-487-8E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="The java.io Package">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm" alt="Java Enterprise in a Nutshell"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch10_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch10_01.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="part2.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/part2.htm">Part 2: API Quick Reference</a></td><td align="right" valign="top" width="172"><a href="ch12_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch12_01.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY --><h1 class="chapter">Chapter 11.  The java.io Package</h1>

<p>
<a name="INDEX-1349"></a>

The <tt class="literal">java.io</tt> package contains a relatively large
number of classes, but, as you can see from
<a href="#javanut3-java.io-1">Figure 11-1</a>
and
<a href="#javanut3-java.io-2">Figure 11-2</a>,
the classes form a fairly structured hierarchy. Most of the
package consists of byte streams--subclasses of
<tt class="literal">InputStream</tt> or <tt class="literal">OutputStream</tt> and (in Java
1.1) character streams--subclasses of <tt class="literal">Reader</tt> or
<tt class="literal">Writer</tt>. Each of these stream types has a
specific purpose, and, despite its size, <tt class="literal">java.io</tt> is a
straightforward package to understand and to use. </p>
<p>
<a name="INDEX-1350"></a>
Before we consider the stream classes in the package, let's 
examine the important non-stream classes. <tt class="literal">File</tt>
represents a file or directory name in a system-independent
way and provides methods for listing directories, querying
file attributes, and renaming and deleting files. <a name="INDEX-1351"></a><tt class="literal">FilenameFilter</tt> is an interface that defines a method
that accepts or rejects specified filenames. It is used by
<tt class="literal">java.awt.FileDialog</tt> and 
<tt class="literal">File</tt> to specify what types of files should be
included in directory listings. <tt class="literal">RandomAccessFile</tt><a name="INDEX-1352"></a><a name="INDEX-1353"></a>
allows you to read from or write to arbitrary locations
of a file. Often, though, you'll prefer sequential access
to a file and should use one of the stream classes. </p>
<p>
<a name="INDEX-1354"></a><a name="INDEX-1355"></a><tt class="literal">InputStream</tt> and <tt class="literal">OutputStream</tt> are abstract
classes that define methods for reading and writing bytes. Their subclasses allow bytes to be read from and written to
a variety of sources and sinks. <tt class="literal">FileInputStream</tt> and
<a name="INDEX-1356"></a><a name="INDEX-1357"></a><a name="INDEX-1358"></a><a name="INDEX-1359"></a><tt class="literal">FileOutputStream</tt> read from and write to files. <a name="INDEX-1360"></a><a name="INDEX-1361"></a><a name="INDEX-1362"></a><a name="INDEX-1363"></a><tt class="literal">ByteArrayInputStream</tt> and
<tt class="literal">ByteArrayOutputStream</tt> read from and write to an
array of bytes in memory. <tt class="literal">PipedInputStream</tt> reads
bytes from a <tt class="literal">PipedOutputStream</tt>, and
<a name="INDEX-1364"></a><a name="INDEX-1365"></a><a name="INDEX-1366"></a><a name="INDEX-1367"></a><tt class="literal">PipedOutputStream</tt> writes bytes to a
<tt class="literal">PipedInputStream</tt>. These classes work together to
implement a <em class="emphasis">pipe</em> for communication between threads. </p>
<p>
<a name="INDEX-1368"></a><a name="INDEX-1369"></a><a name="INDEX-1370"></a><a name="INDEX-1371"></a><tt class="literal">FilterInputStream</tt> and <tt class="literal">FilterOutputStream</tt> are
special; they filter input and output bytes. When you create a
<tt class="literal">FilterInputStream</tt>, you specify an <tt class="literal">InputStream</tt>
for it to filter. When you call the
<a name="INDEX-1372"></a><a name="INDEX-1373"></a><tt class="literal">read()</tt> method of a <tt class="literal">FilterInputStream</tt>, it
calls the <tt class="literal">read()</tt> method of its <tt class="literal">InputStream</tt>,
processes the bytes it reads, and returns the
filtered bytes. Similarly, when you create a <tt class="literal">FilterOutputStream</tt>,
you specify an <tt class="literal">OutputStream</tt> to be filtered. Calling the
<tt class="literal">write()</tt> method of a <tt class="literal">FilterOutputStream</tt> causes it to
process your bytes in some way and then pass those filtered
bytes to the <tt class="literal">write()</tt> method of its <tt class="literal">OutputStream</tt>.</p>

<a name="javanut3-java.io-1"></a>
<div class="figure">
<img alt="figure" src="figs/JN3_1101.gif" webstripperlinkwas="figs/JN3_1101.gif"></div>
<h4 class="objtitle">Figure 11-1. The java.io package</h4>

<a name="javanut3-java.io-2"></a>
<div class="figure">
<img alt="figure" src="figs/JN3_1102.gif" webstripperlinkwas="figs/JN3_1102.gif"></div>
<h4 class="objtitle">Figure 11-2. The exception classes of the java.io package</h4>

<p>
<tt class="literal">FilterInputStream</tt> and <tt class="literal">FilterOutputStream</tt> do
not perform any filtering themselves; this is done by their
subclasses. <tt class="literal">BufferedInputStream</tt> and
<a name="INDEX-1374"></a><a name="INDEX-1375"></a><a name="INDEX-1376"></a><a name="INDEX-1377"></a><tt class="literal">BufferedOutputStream</tt> provide input and output
buffering and can increase I/O efficiency. <a name="INDEX-1378"></a><a name="INDEX-1379"></a><a name="INDEX-1380"></a><a name="INDEX-1381"></a><tt class="literal">DataInputStream</tt> reads raw bytes from a stream and
interprets them in various binary formats. It has various
methods to read primitive Java data types in their standard
binary formats. <tt class="literal">DataOutputStream</tt> allows you to
write Java primitive data types in binary format. </p>
<p>
<a name="INDEX-1382"></a><a name="INDEX-1383"></a>
In Java 1.1 and later, the byte streams I just described are
complemented by an analogous set of character input and
output streams. <tt class="literal">Reader</tt> is the superclass of all
character input streams, and <tt class="literal">Writer</tt> is the
superclass of all character output streams. These character
streams supersede the byte streams for all textual I/O. They are more efficient than the byte streams, and they
correctly handle the conversion between local encodings and
Unicode text, making them invaluable for internationalized
programs. Most of the <tt class="literal">Reader</tt> and <tt class="literal">Writer</tt>
streams have obvious byte-stream analogs. <a name="INDEX-1384"></a><a name="INDEX-1385"></a><a name="INDEX-1386"></a><tt class="literal">BufferedReader</tt> is a commonly used stream; it
provides buffering for efficiency and also has a
<tt class="literal">readLine()</tt> method to read a line of text at a time.
<a name="INDEX-1387"></a><a name="INDEX-1388"></a><tt class="literal">PrintWriter</tt> is another very common stream; its
methods allow output of a textual representation of any
primitive Java type or of any object (via the object's
<tt class="literal">toString()</tt> method). </p>
<p>
<a name="INDEX-1389"></a><a name="INDEX-1390"></a><a name="INDEX-1391"></a><a name="INDEX-1392"></a>
The <tt class="literal">ObjectInputStream</tt> and <tt class="literal">ObjectOutputStream</tt>
classes are special. These byte-stream classes are new as of
Java 1.1 and are part of the Object Serialization API. </p>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>BufferedInputStream</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.io</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1393"></a><a name="INDEX-1394"></a>

This class is a <tt class="literal">FilterInputStream</tt> that provides
input data buffering; efficiency is increased by reading in a large
amount of data and storing it in an internal buffer. When data is requested, it is usually available from the
buffer. Thus, most calls to read data do not actually have to 
read data from a disk, network, or
other slow source. Create a
<tt class="literal">BufferedInputStream</tt> by specifying the
<tt class="literal">InputStream</tt> that is to be buffered in the
call to the constructor. See also <tt class="literal">BufferedReader</tt>. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">BufferedInputStream</b> extends FilterInputStream {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">BufferedInputStream</b> (java.io.InputStream <i class="parameter">in</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">BufferedInputStream</b> (java.io.InputStream <i class="parameter">in</i>, int <i class="parameter">size</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding FilterInputStream</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">available</b> () throws IOException;</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public void <b class="function">close</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">mark</b> (int <i class="parameter">readlimit</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">markSupported</b> ();</td><td align="right"><i> constant</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">read</b> () throws IOException;</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">read</b> (byte[ ] <i class="parameter">b</i>, int <i class="parameter">off</i>, int <i class="parameter">len</i>) throws IOException;</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">reset</b> () throws IOException;</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public long <b class="function">skip</b> (long <i class="parameter">n</i>) throws IOException;</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Instance Fields</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected byte[ ] <b class="function">buf</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected int <b class="function">count</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected int <b class="function">marklimit</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected int <b class="function">markpos</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected int <b class="function">pos</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->java.io.InputStream-->FilterInputStream-->BufferedInputStream</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>BufferedOutputStream</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.io</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1395"></a><a name="INDEX-1396"></a>

This class is a <tt class="literal">FilterOutputStream</tt> that provides
output data buffering; output efficiency is increased by storing values
to be written in a buffer and actually writing them out only
<a name="INDEX-1397"></a>
when the buffer fills up or when the <tt class="literal">flush()</tt> method
is called. Create a <tt class="literal">BufferedOutputStream</tt> by
specifying the <tt class="literal">OutputStream</tt> that is to be
buffered in the call to the constructor. See also <tt class="literal">BufferedWriter</tt>. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">BufferedOutputStream</b> extends FilterOutputStream {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">BufferedOutputStream</b> (java.io.OutputStream <i class="parameter">out</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">BufferedOutputStream</b> (java.io.OutputStream <i class="parameter">out</i>, int <i class="parameter">size</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding FilterOutputStream</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">flush</b> () throws IOException;</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">write</b> (int <i class="parameter">b</i>) throws IOException;</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">write</b> (byte[ ] <i class="parameter">b</i>, int <i class="parameter">off</i>, int <i class="parameter">len</i>) throws IOException;</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Instance Fields</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected byte[ ] <b class="function">buf</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected int <b class="function">count</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->java.io.OutputStream-->FilterOutputStream-->BufferedOutputStream</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>BufferedReader</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.io</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1398"></a><a name="INDEX-1399"></a>
This class applies buffering to a character input stream,
thereby improving the efficiency of character input. You
create a <tt class="literal">BufferedReader</tt> by specifying some other
character input stream from which it is to buffer input. (You can also specify a buffer size at this time, although
the default size is usually fine.)  Typically, you 
use this sort of buffering with a 
<tt class="literal">FileReader</tt> or <tt class="literal">InputStreamReader</tt>. <a name="INDEX-1400"></a><tt class="literal">BufferedReader</tt> defines the standard set of
<tt class="literal">Reader</tt> methods and provides a
<tt class="literal">readLine()</tt> method that reads a line of text (not
including the line terminator) and returns it as a
<tt class="literal">String</tt>. <tt class="literal">BufferedReader</tt> is the character-stream analog of
<tt class="literal">BufferedInputStream</tt>. It also provides a replacement
for the deprecated <tt class="literal">readLine()</tt> method of
<tt class="literal">DataInputStream</tt>, which did not properly convert
bytes into characters. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">BufferedReader</b> extends Reader {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">BufferedReader</b> (Reader <i class="parameter">in</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">BufferedReader</b> (Reader <i class="parameter">in</i>, int <i class="parameter">sz</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">readLine</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Reader</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">close</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">mark</b> (int <i class="parameter">readAheadLimit</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">markSupported</b> ();</td><td align="right"><i> constant</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">read</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">read</b> (char[ ] <i class="parameter">cbuf</i>, int <i class="parameter">off</i>, int <i class="parameter">len</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">ready</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">reset</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public long <b class="function">skip</b> (long <i class="parameter">n</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Reader-->BufferedReader</tt>
</p>
<p>
<span class="refsect1">Subclasses: </span><tt class="literal">LineNumberReader</tt>
</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">javax.servlet.ServletRequest.getReader()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>BufferedWriter</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.io</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1401"></a><a name="INDEX-1402"></a>
This class applies buffering to a character output stream,
improving output efficiency by coalescing many small write
requests into a single larger request. You create a
<tt class="literal">BufferedWriter</tt> by specifying some other character
output stream to which it sends its buffered and
coalesced output. (You can also specify a buffer size at this time, although
the default size is usually satisfactory.)  Typically, you
use this sort of buffering with a 
<tt class="literal">FileWriter</tt> or <tt class="literal">OutputStreamWriter</tt>.

<a name="INDEX-1403"></a><a name="INDEX-1404"></a><a name="INDEX-1405"></a><a name="INDEX-1406"></a><tt class="literal">BufferedWriter</tt> defines the standard <tt class="literal">write()</tt>,
<tt class="literal">flush()</tt>, and <tt class="literal">close()</tt> methods all output
streams define, but it adds a <tt class="literal">newLine()</tt> method that
outputs the platform-dependent line separator (usually
a newline character, a carriage-return character, or both)
to the stream. <tt class="literal">BufferedWriter</tt> is the character-stream analog of
<tt class="literal">BufferedOutputStream</tt>. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">BufferedWriter</b> extends Writer {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">BufferedWriter</b> (Writer <i class="parameter">out</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">BufferedWriter</b> (Writer <i class="parameter">out</i>, int <i class="parameter">sz</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">newLine</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Writer</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">close</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">flush</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">write</b> (int <i class="parameter">c</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">write</b> (String <i class="parameter">s</i>, int <i class="parameter">off</i>, int <i class="parameter">len</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">write</b> (char[ ] <i class="parameter">cbuf</i>, int <i class="parameter">off</i>, int <i class="parameter">len</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Writer-->BufferedWriter</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>ByteArrayInputStream</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.io</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1407"></a><a name="INDEX-1408"></a>

This class is a subclass of <tt class="literal">InputStream</tt> in which
input data comes from a specified array of <tt class="literal">byte</tt>
values. This is useful when you want to read data in memory
as if it were coming from a file, pipe, or socket. Note that the specified array of bytes is not copied when a
<tt class="literal">ByteArrayInputStream</tt> is created. See also <tt class="literal">CharArrayReader</tt>. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">ByteArrayInputStream</b> extends java.io.InputStream {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">ByteArrayInputStream</b> (byte[ ] <i class="parameter">buf</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">ByteArrayInputStream</b> (byte[ ] <i class="parameter">buf</i>, int <i class="parameter">offset</i>, int <i class="parameter">length</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding InputStream</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">available</b> ();</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public void <b class="function">close</b> () throws IOException;</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public void <b class="function">mark</b> (int <i class="parameter">readAheadLimit</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public boolean <b class="function">markSupported</b> ();</td><td align="right"><i> constant</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">read</b> ();</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">read</b> (byte[ ] <i class="parameter">b</i>, int <i class="parameter">off</i>, int <i class="parameter">len</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">reset</b> ();</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public long <b class="function">skip</b> (long <i class="parameter">n</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Instance Fields</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected byte[ ] <b class="function">buf</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected int <b class="function">count</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">protected int <b class="function">mark</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected int <b class="function">pos</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->java.io.InputStream-->ByteArrayInputStream</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>ByteArrayOutputStream</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.io</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1409"></a><a name="INDEX-1410"></a>

This class is a subclass of <tt class="literal">OutputStream</tt> in
which output data is stored in an internal
<tt class="literal">byte</tt> array. The internal array grows as
necessary and can be retrieved with
<a name="INDEX-1411"></a><a name="INDEX-1412"></a><a name="INDEX-1413"></a><tt class="literal">toByteArray()</tt> or <tt class="literal">toString()</tt>. The
<tt class="literal">reset()</tt> method discards any data currently
stored in the internal array and stores data
from the beginning again. See also <tt class="literal">CharArrayWriter</tt>. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">ByteArrayOutputStream</b> extends java.io.OutputStream {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">ByteArrayOutputStream</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">ByteArrayOutputStream</b> (int <i class="parameter">size</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">reset</b> ();</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">size</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public byte[ ] <b class="function">toByteArray</b> ();</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public String <b class="function">toString</b> (String <i class="parameter">enc</i>) throws UnsupportedEncodingException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">writeTo</b> (java.io.OutputStream <i class="parameter">out</i>) throws IOException;</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding OutputStream</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public void <b class="function">close</b> () throws IOException;</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">write</b> (int <i class="parameter">b</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">write</b> (byte[ ] <i class="parameter">b</i>, int <i class="parameter">off</i>, int <i class="parameter">len</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Object</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">toString</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Instance Fields</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected byte[ ] <b class="function">buf</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected int <b class="function">count</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Deprecated Public Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">#</span></td><td align="left">public String <b class="function">toString</b> (int <i class="parameter">hibyte</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->java.io.OutputStream-->ByteArrayOutputStream</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>CharArrayReader</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.io</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1414"></a><a name="INDEX-1415"></a>
This class is a character input stream that uses a character
array as the source of the characters it returns. You
create a <tt class="literal">CharArrayReader</tt> by specifying the character
array (or portion of an array) it is to read from. <tt class="literal">CharArrayReader</tt> defines the usual <tt class="literal">Reader</tt>
methods and supports the <tt class="literal">mark()</tt> and <tt class="literal">reset()</tt>
methods. <a name="INDEX-1416"></a><a name="INDEX-1417"></a>
Note that the character array you pass to the
<tt class="literal">CharArrayReader()</tt> constructor is not copied. This
means that changes you make to the elements of the array
after you create the input stream affect the values
read from the array. <tt class="literal">CharArrayReader</tt> is the character-array analog of
<tt class="literal">ByteArrayInputStream</tt> and is similar to
<tt class="literal">StringReader</tt>. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">CharArrayReader</b> extends Reader {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">CharArrayReader</b> (char[ ] <i class="parameter">buf</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">CharArrayReader</b> (char[ ] <i class="parameter">buf</i>, int <i class="parameter">offset</i>, int <i class="parameter">length</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Reader</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">close</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">mark</b> (int <i class="parameter">readAheadLimit</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">markSupported</b> ();</td><td align="right"><i> constant</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">read</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">read</b> (char[ ] <i class="parameter">b</i>, int <i class="parameter">off</i>, int <i class="parameter">len</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">ready</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">reset</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public long <b class="function">skip</b> (long <i class="parameter">n</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Instance Fields</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected char[ ] <b class="function">buf</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected int <b class="function">count</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected int <b class="function">markedPos</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected int <b class="function">pos</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Reader-->CharArrayReader</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>CharArrayWriter</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.io</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1418"></a><a name="INDEX-1419"></a>
This class is a character output stream that uses an
internal character array as the destination of characters
written to it. When you create a <tt class="literal">CharArrayWriter</tt>,
you may optionally specify an initial size for the character
array, but you do not specify the character array
itself; this array is managed internally by the
<tt class="literal">CharArrayWriter</tt> and grows as necessary to
accommodate all the characters written to it. The
<a name="INDEX-1420"></a><a name="INDEX-1421"></a><tt class="literal">toString()</tt> and <tt class="literal">toCharArray()</tt> methods return
a copy of all characters written to the stream, as a
string and an array of characters, respectively. <a name="INDEX-1422"></a><a name="INDEX-1423"></a><a name="INDEX-1424"></a><a name="INDEX-1425"></a><tt class="literal">CharArrayWriter</tt> defines the standard
<tt class="literal">write()</tt>, <tt class="literal">flush()</tt>, and <tt class="literal">close()</tt> methods
all <tt class="literal">Writer</tt> subclasses define. It also defines a
few other useful methods. <tt class="literal">size()</tt> returns the number
of characters that have been written to the stream. <a name="INDEX-1426"></a><tt class="literal">reset()</tt> resets the stream to its initial state, with
an empty character array; this is more efficient than
creating a new <tt class="literal">CharArrayWriter</tt>. Finally,
<tt class="literal">writeTo()</tt> writes the contents of the internal
character array to some other specified character stream. <a name="INDEX-1427"></a><tt class="literal">CharArrayWriter</tt> is the character-stream analog of
<tt class="literal">ByteArrayOutputStream</tt> and is quite similar to
<tt class="literal">StringWriter</tt>. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">CharArrayWriter</b> extends Writer {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">CharArrayWriter</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">CharArrayWriter</b> (int <i class="parameter">initialSize</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">reset</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">size</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public char[ ] <b class="function">toCharArray</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">writeTo</b> (Writer <i class="parameter">out</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Writer</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">close</b> ();</td><td align="right"><i> empty</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">flush</b> ();</td><td align="right"><i> empty</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">write</b> (int <i class="parameter">c</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">write</b> (char[ ] <i class="parameter">c</i>, int <i class="parameter">off</i>, int <i class="parameter">len</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">write</b> (String <i class="parameter">str</i>, int <i class="parameter">off</i>, int <i class="parameter">len</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Object</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">toString</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Instance Fields</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected char[ ] <b class="function">buf</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected int <b class="function">count</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Writer-->CharArrayWriter</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>CharConversionException</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.io</b></font></td><td align="right"><font size="+1"><b><i>serializable checked PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1428"></a><a name="INDEX-1429"></a>
Signals an error when converting bytes to
characters or vice versa. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">CharConversionException</b> extends IOException {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">CharConversionException</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">CharConversionException</b> (String <i class="parameter">s</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Exception-->IOException-->CharConversionException</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>DataInput</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.io</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1430"></a>

This interface defines the methods required for streams
that can read Java primitive data
types in a machine-independent binary format. It is
implemented by <tt class="literal">DataInputStream</tt> and
<tt class="literal">RandomAccessFile</tt>. See <tt class="literal">DataInputStream</tt> for
more information on the methods. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public interface <b class="classname">DataInput</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract boolean <b class="function">readBoolean</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract byte <b class="function">readByte</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract char <b class="function">readChar</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract double <b class="function">readDouble</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract float <b class="function">readFloat</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">readFully</b> (byte[ ] <i class="parameter">b</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">readFully</b> (byte[ ] <i class="parameter">b</i>, int <i class="parameter">off</i>, int <i class="parameter">len</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract int <b class="function">readInt</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract String <b class="function">readLine</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract long <b class="function">readLong</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract short <b class="function">readShort</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract int <b class="function">readUnsignedByte</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract int <b class="function">readUnsignedShort</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract String <b class="function">readUTF</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract int <b class="function">skipBytes</b> (int <i class="parameter">n</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Implementations: </span><tt class="literal">java.io.DataInputStream, ObjectInput, RandomAccessFile</tt>
</p>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">java.io.DataInputStream.readUTF(), java.rmi.server.UID.read()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>DataInputStream</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.io</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1431"></a><a name="INDEX-1432"></a>

This class is a type of <tt class="literal">FilterInputStream</tt> that
allows you to read binary representations of Java primitive data
types in a portable way. Create a <tt class="literal">DataInputStream</tt>
by specifying the <tt class="literal">InputStream</tt> that is to be filtered
in the call to the constructor. <tt class="literal">DataInputStream</tt> reads only primitive Java types; use
<tt class="literal">ObjectInputStream</tt> to read object values. </p>
<p>Many of the methods read and return a single Java
primitive type, in binary format, from the stream. <a name="INDEX-1433"></a><a name="INDEX-1434"></a><tt class="literal">readUnsignedByte()</tt> and <tt class="literal">readUnsignedShort()</tt>
read unsigned values and return them as <tt class="literal">int</tt> values,
since unsigned <tt class="literal">byte</tt> and <tt class="literal">short</tt> types are not
supported in Java. <tt class="literal">read()</tt> reads data into an array
<a name="INDEX-1435"></a><a name="INDEX-1436"></a>
of bytes, blocking until at least some data is available. By contrast, <tt class="literal">readFully()</tt> reads data into an array of
bytes, but blocks until all requested data becomes
available. <tt class="literal">skipBytes()</tt> blocks until the specified number of
bytes have been read and discarded. <a name="INDEX-1437"></a><a name="INDEX-1438"></a><tt class="literal">readLine()</tt> reads characters from the stream until
it encounters a newline, a carriage return, or a newline/carriage 
return pair. The returned string is not terminated
with a newline or carriage return. This method is
deprecated as of Java 1.1; see <tt class="literal">BufferedReader</tt> for an
alternative. <tt class="literal">readUTF()</tt> reads a string of Unicode
<a name="INDEX-1439"></a>
text encoded in a slightly modified version of the UTF-8
transformation format. UTF-8 is an ASCII-compatible
encoding of Unicode characters that is often used for the
transmission and storage of Unicode text. This class uses a
modified UTF-8 encoding that never contains embedded null characters. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">DataInputStream</b> extends FilterInputStream implements DataInput {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">DataInputStream</b> (java.io.InputStream <i class="parameter">in</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Class Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final String <b class="function">readUTF</b> (DataInput <i class="parameter">in</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Methods Implementing DataInput</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final boolean <b class="function">readBoolean</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final byte <b class="function">readByte</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final char <b class="function">readChar</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final double <b class="function">readDouble</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final float <b class="function">readFloat</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final void <b class="function">readFully</b> (byte[ ] <i class="parameter">b</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final void <b class="function">readFully</b> (byte[ ] <i class="parameter">b</i>, int <i class="parameter">off</i>, int <i class="parameter">len</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final int <b class="function">readInt</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final long <b class="function">readLong</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final short <b class="function">readShort</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final int <b class="function">readUnsignedByte</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final int <b class="function">readUnsignedShort</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final String <b class="function">readUTF</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final int <b class="function">skipBytes</b> (int <i class="parameter">n</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding FilterInputStream</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final int <b class="function">read</b> (byte[ ] <i class="parameter">b</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final int <b class="function">read</b> (byte[ ] <i class="parameter">b</i>, int <i class="parameter">off</i>, int <i class="parameter">len</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Deprecated Public Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">#</span></td><td align="left">public final String <b class="function">readLine</b> () throws IOException;</td><td align="right"><i> Implements:DataInput</i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->java.io.InputStream-->FilterInputStream-->java.io.DataInputStream(DataInput)</tt>
</p>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">javax.swing.text.html.parser.DTD.read()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>DataOutput</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.io</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1440"></a>

This interface defines the methods required for streams
that can write Java primitive data
types in a machine-independent binary format. It is
implemented by <tt class="literal">DataOutputStream</tt> and
<tt class="literal">RandomAccessFile</tt>. See <tt class="literal">DataOutputStream</tt> for
more information on the methods. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public interface <b class="classname">DataOutput</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">write</b> (byte[ ] <i class="parameter">b</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">write</b> (int <i class="parameter">b</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">write</b> (byte[ ] <i class="parameter">b</i>, int <i class="parameter">off</i>, int <i class="parameter">len</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">writeBoolean</b> (boolean <i class="parameter">v</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">writeByte</b> (int <i class="parameter">v</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">writeBytes</b> (String <i class="parameter">s</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">writeChar</b> (int <i class="parameter">v</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">writeChars</b> (String <i class="parameter">s</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">writeDouble</b> (double <i class="parameter">v</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">writeFloat</b> (float <i class="parameter">v</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">writeInt</b> (int <i class="parameter">v</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">writeLong</b> (long <i class="parameter">v</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">writeShort</b> (int <i class="parameter">v</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">writeUTF</b> (String <i class="parameter">str</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Implementations: </span><tt class="literal">java.io.DataOutputStream, ObjectOutput, RandomAccessFile</tt>
</p>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">java.rmi.server.UID.write()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>DataOutputStream</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.io</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1441"></a><a name="INDEX-1442"></a>

This class is a subclass of <tt class="literal">FilterOutputStream</tt> that
allows you to write Java primitive data types in a
portable binary format. Create a <tt class="literal">DataOutputStream</tt> by specifying
the <tt class="literal">OutputStream</tt> that is to be filtered in the call
to the constructor. <tt class="literal">DataOutputStream</tt> has methods that output only
primitive types; use <tt class="literal">ObjectOutputStream</tt> to output
object values. </p>
<p>Many of this class's methods write a single Java primitive
type, in binary format, to the output stream. <a name="INDEX-1443"></a><a name="INDEX-1444"></a><a name="INDEX-1445"></a><tt class="literal">write()</tt> writes a single byte, an array, or a
subarray of bytes. <tt class="literal">flush()</tt> forces any
buffered data to be output. <tt class="literal">size()</tt> returns the
number of bytes written so far. <a name="INDEX-1446"></a><tt class="literal">writeUTF()</tt> outputs a Java string of Unicode
characters using a slightly modified version of the UTF-8
transformation format. UTF-8 is an ASCII-compatible
encoding of Unicode characters that is often used for the
transmission and storage of Unicode text. Except for the
<tt class="literal">writeUTF()</tt> method, this class is used for binary
output of data. Textual output should be done with
<tt class="literal">PrintWriter</tt> (or <tt class="literal">PrintStream</tt> in Java 1.0). </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">DataOutputStream</b> extends FilterOutputStream implements DataOutput {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">DataOutputStream</b> (java.io.OutputStream <i class="parameter">out</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final int <b class="function">size</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Methods Implementing DataOutput</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">write</b> (int <i class="parameter">b</i>) throws IOException;</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">write</b> (byte[ ] <i class="parameter">b</i>, int <i class="parameter">off</i>, int <i class="parameter">len</i>) throws IOException;</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final void <b class="function">writeBoolean</b> (boolean <i class="parameter">v</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final void <b class="function">writeByte</b> (int <i class="parameter">v</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final void <b class="function">writeBytes</b> (String <i class="parameter">s</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final void <b class="function">writeChar</b> (int <i class="parameter">v</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final void <b class="function">writeChars</b> (String <i class="parameter">s</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final void <b class="function">writeDouble</b> (double <i class="parameter">v</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final void <b class="function">writeFloat</b> (float <i class="parameter">v</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final void <b class="function">writeInt</b> (int <i class="parameter">v</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final void <b class="function">writeLong</b> (long <i class="parameter">v</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final void <b class="function">writeShort</b> (int <i class="parameter">v</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final void <b class="function">writeUTF</b> (String <i class="parameter">str</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding FilterOutputStream</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">flush</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Instance Fields</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected int <b class="function">written</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->java.io.OutputStream-->FilterOutputStream-->java.io.DataOutputStream(DataOutput)</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>EOFException</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.io</b></font></td><td align="right"><font size="+1"><b><i>serializable checked PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1447"></a>

An <tt class="literal">IOException</tt> that signals the end-of-file. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">EOFException</b> extends IOException {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">EOFException</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">EOFException</b> (String <i class="parameter">s</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Exception-->IOException-->EOFException</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>Externalizable</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.io</b></font></td><td align="right"><font size="+1"><b><i>serializable PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1448"></a><a name="INDEX-1449"></a>
This interface defines the methods that must be implemented
by an object that wants complete control over the way it is
<a name="INDEX-1450"></a><a name="INDEX-1451"></a>
serialized. The <tt class="literal">writeExternal()</tt> and
<tt class="literal">readExternal()</tt> methods should be implemented to
write and read object data in some arbitrary format, using
the methods of the <tt class="literal">DataOutput</tt> and <tt class="literal">DataInput</tt>
interfaces. <tt class="literal">Externalizable</tt> objects must serialize their own
fields and are also responsible for serializing the fields
of their superclasses. Most objects do not need to define a custom output format
and can use the <tt class="literal">Serializable</tt> interface instead of
<tt class="literal">Externalizable</tt> for serialization. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public interface <b class="classname">Externalizable</b> extends Serializable {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">readExternal</b> (ObjectInput <i class="parameter">in</i>) throws IOExceptionClassNotFoundException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">writeExternal</b> (ObjectOutput <i class="parameter">out</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">(Externalizable(Serializable))</tt>
</p>
<p>
<span class="refsect1">Implementations: </span><tt class="literal">java.awt.datatransfer.DataFlavor, java.rmi.server.RemoteRef</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>File</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.io</b></font></td><td align="right"><font size="+1"><b><i>serializable comparable PJ1.1(opt)</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-1452"></a>
  This class supports a platform-independent definition of file and
  directory names. It also provides methods to list the files in a
  directory; check the existence, readability, writeability, type,
  size, and modification time of files and directories; make new
  directories; rename files and directories; delete files and
  directories; and create and delete temporary and lock files. The
  constants 


defined by this class are the platform-dependent directory
  and path-separator characters, available as a <tt class="literal">String</tt> and
  a <tt class="literal">char</tt>. </p>
<p>
<a name="INDEX-1453"></a><a name="INDEX-1454"></a><a name="INDEX-1455"></a><a name="INDEX-1456"></a><a name="INDEX-1457"></a><a name="INDEX-1458"></a><a name="INDEX-1459"></a><a name="INDEX-1460"></a><a name="INDEX-1461"></a><tt class="literal">getName()</tt> returns the name of the <tt class="literal">File</tt> with
  any directory names omitted. <tt class="literal">getPath()</tt> returns the full
  name of the file, including the directory name. <tt class="literal">getParent()</tt> and <tt class="literal">getParentFile()</tt> return
  the directory that contains the <tt class="literal">File</tt>; the only difference
  between the two methods is that one returns a
  <tt class="literal">String</tt>, while the other returns a
  <tt class="literal">File</tt>. <tt class="literal">isAbsolute()</tt> tests whether the
  <tt class="literal">File</tt> is an absolute specification. If not,
  <tt class="literal">getAbsolutePath()</tt> returns an absolute filename
  created by appending the relative filename to the current working
  directory. <tt class="literal">getAbsoluteFile()</tt> returns the
  equivalent absolute <tt class="literal">File</tt> object. <tt class="literal">getCanonicalPath()</tt> and
  <tt class="literal">getCanonicalFile()</tt> are similar methods: they return
  an absolute filename or <tt class="literal">File</tt> object that has been
  converted to its system-dependent canonical form. This can be
  useful when comparing two <tt class="literal">File</tt> objects to see if
  they refer to the same file or directory. </p>
<p>
<a name="INDEX-1462"></a><a name="INDEX-1463"></a><a name="INDEX-1464"></a><a name="INDEX-1465"></a><a name="INDEX-1466"></a><a name="INDEX-1467"></a><a name="INDEX-1468"></a><a name="INDEX-1469"></a><a name="INDEX-1470"></a><a name="INDEX-1471"></a><tt class="literal">exists()</tt>, <tt class="literal">canWrite()</tt>, <tt class="literal">canRead()</tt>,
  <tt class="literal">isFile()</tt>, <tt class="literal">isDirectory()</tt>, and
  <tt class="literal">isHidden()</tt> perform the obvious tests on the
  specified <tt class="literal">File</tt>. <tt class="literal">length()</tt> returns the length of
  the file. <tt class="literal">lastModified()</tt> returns the modification time of
  the file (which should be used for comparison with other file times
  only and not interpreted as any particular time format). <tt class="literal">setLastModified()</tt> allows the modification time to
  be set; <tt class="literal">setReadOnly()</tt> makes a file or directory
  read-only. </p>
<p>
<a name="INDEX-1472"></a><a name="INDEX-1473"></a><a name="INDEX-1474"></a><a name="INDEX-1475"></a><tt class="literal">list()</tt> returns the names of all entries in a directory that
  are not rejected by an optional
  <tt class="literal">FilenameFilter</tt>. <tt class="literal">listFiles()</tt> returns an
  array of <tt class="literal">File</tt> objects that represent all entries in
  a directory not rejected by an optional
  <tt class="literal">FilenameFilter</tt> or <tt class="literal">FileFilter</tt>. <tt class="literal">listRoots()</tt> returns an array of
  <tt class="literal">File</tt> objects representing all root directories on
  the system. On Unix systems, for example, there is typically only one
  root, <em class="emphasis">/</em>. On Windows systems, however, there is a different root for
  each drive letter: <em class="emphasis">c:\</em>, 
  <em class="emphasis">d:\</em>, and <em class="emphasis">e:\</em>, for example. </p>
<p>
<a name="INDEX-1476"></a><a name="INDEX-1477"></a><a name="INDEX-1478"></a><a name="INDEX-1479"></a><a name="INDEX-1480"></a><a name="INDEX-1481"></a><a name="INDEX-1482"></a><tt class="literal">mkdir()</tt> creates a directory, and <tt class="literal">mkdirs()</tt> creates
  all the directories in a <tt class="literal">File</tt>
  specification. <tt class="literal">renameTo()</tt> renames a file or
  directory; <tt class="literal">delete()</tt> deletes a file or directory. Prior to
  Java 1.2, the <tt class="literal">File</tt> class doesn't provide any way
  to create a file; that task is accomplished typically with
  <tt class="literal">FileOutputStream</tt>. As of Java 1.2, however, two
  special-purpose file creation methods have been added. The static
  <tt class="literal">createTempFile()</tt> method returns a
  <tt class="literal">File</tt> object that refers to a newly created empty
  file with a unique name that begins with the specified prefix (which
  must be at least three characters long) and ends with the specified
  suffix. One version of this method creates the file in a specified
  directory, and the other creates it in the system temporary directory. Applications can use temporary files for any purpose without worrying
  about overwriting files belonging to other applications. The other file-creation method of Java 1.2 is
  <tt class="literal">createNewFile()</tt>. This instance method attempts to
  create a new, empty file with the name specified by the
  <tt class="literal">File</tt> object. If it succeeds, it returns
  <tt class="literal">true</tt>. However, if the file already exists, it
  returns <tt class="literal">false</tt>. <tt class="literal">createNewFile()</tt>
  works atomically, and is therefore useful for file locking and other
  mutual-exclusion schemes. When working with
  <tt class="literal">createTempFile()</tt> or
  <tt class="literal">createNewFile()</tt>, consider using
  <tt class="literal">deleteOnExit()</tt> to request that the files be deleted
  when the Java VM exits normally. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">File</b> implements ComparableSerializable {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">File</b> (String <i class="parameter">pathname</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">File</b> (String <i class="parameter">parent</i>, String <i class="parameter">child</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">File</b> (File <i class="parameter">parent</i>, String <i class="parameter">child</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constants</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final String <b class="function">pathSeparator</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final char <b class="function">pathSeparatorChar</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final String <b class="function">separator</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final char <b class="function">separatorChar</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Class Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public static File <b class="function">createTempFile</b> (String <i class="parameter">prefix</i>, String <i class="parameter">suffix</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public static File <b class="function">createTempFile</b> (String <i class="parameter">prefix</i>, String <i class="parameter">suffix</i>, File <i class="parameter">directory</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public static File[ ] <b class="function">listRoots</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Property Accessor Methods (by property name)</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">isAbsolute</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public File <b class="function">getAbsoluteFile</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">getAbsolutePath</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public File <b class="function">getCanonicalFile</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public String <b class="function">getCanonicalPath</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">isDirectory</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">isFile</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public boolean <b class="function">isHidden</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">getName</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">getParent</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public File <b class="function">getParentFile</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">getPath</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">canRead</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">canWrite</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public int <b class="function">compareTo</b> (File <i class="parameter">pathname</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public boolean <b class="function">createNewFile</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">delete</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public void <b class="function">deleteOnExit</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">exists</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public long <b class="function">lastModified</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public long <b class="function">length</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String[ ] <b class="function">list</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String[ ] <b class="function">list</b> (FilenameFilter <i class="parameter">filter</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public File[ ] <b class="function">listFiles</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public File[ ] <b class="function">listFiles</b> (java.io.FileFilter <i class="parameter">filter</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public File[ ] <b class="function">listFiles</b> (FilenameFilter <i class="parameter">filter</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">mkdir</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">mkdirs</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">renameTo</b> (File <i class="parameter">dest</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public boolean <b class="function">setLastModified</b> (long <i class="parameter">time</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public boolean <b class="function">setReadOnly</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public java.net.URL <b class="function">toURL</b> () throws java.net.MalformedURLException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Methods Implementing Comparable</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public int <b class="function">compareTo</b> (Object <i class="parameter">o</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Object</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">equals</b> (Object <i class="parameter">obj</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">hashCode</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">toString</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->File(Comparable,Serializable)</tt>
</p>
<p>
<span class="refsect1">Passed To: </span>Too many methods to list. </p>
<p>
<span class="refsect1">Returned By: </span>Too many methods to list. </p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>FileDescriptor</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.io</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1483"></a>

This class is a platform-independent representation of a
low-level handle to an open file or socket. The static <tt class="literal">in</tt>, <tt class="literal">out</tt>, and <tt class="literal">err</tt>
variables are <tt class="literal">FileDescriptor</tt> objects that represent
the standard input, output, and error streams,
respectively. There is no public constructor method to
create a <tt class="literal">FileDescriptor</tt> object. You can obtain one
with the <tt class="literal">getFD()</tt> method of <tt class="literal">FileInputStream</tt>,
<tt class="literal">FileOutputStream</tt>, or <tt class="literal">RandomAccessFile</tt>. <a name="INDEX-1484"></a>
</p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public final class <b class="classname">FileDescriptor</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">FileDescriptor</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constants</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final FileDescriptor <b class="function">err</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final FileDescriptor <b class="function">in</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final FileDescriptor <b class="function">out</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public void <b class="function">sync</b> () throws SyncFailedException;</td><td align="right"><i> native</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">valid</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">FileInputStream.FileInputStream(), FileOutputStream.FileOutputStream(), FileReader.FileReader(), FileWriter.FileWriter(), SecurityManager.{checkRead(), checkWrite()}</tt>
</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">FileInputStream.getFD(), FileOutputStream.getFD(), RandomAccessFile.getFD(), java.net.DatagramSocketImpl.getFileDescriptor(), java.net.SocketImpl.getFileDescriptor()</tt>
</p>
<p>
<span class="refsect1">Type Of: </span><tt class="literal">FileDescriptor.{err, in, out}, java.net.DatagramSocketImpl.fd, java.net.SocketImpl.fd</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>FileFilter</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.io</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-1485"></a><a name="INDEX-1486"></a>
  This interface defines an <tt class="literal">accept()</tt> method that filters a list of files. You can list the contents of a
  directory by calling the <tt class="literal">listFiles()</tt> method of the
  <tt class="literal">File</tt> object that represents the desired directory. If you want a filtered listing, such as a listing of files but not
  subdirectories or a listing of files whose names end in 
  <em class="emphasis">.class</em>, you
  can pass a <tt class="literal">FileFilter</tt> object to
  <tt class="literal">listFiles()</tt>. For each entry in the directory, a
  <tt class="literal">File</tt> object is passed to the
  <tt class="literal">accept()</tt> method. If <tt class="literal">accept()</tt>
  returns <tt class="literal">true</tt>, that <tt class="literal">File</tt> is
  included in the return value of <tt class="literal">listFiles()</tt>. If
  <tt class="literal">accept()</tt> returns false, that entry is not
  included in the listing. <tt class="literal">FileFilter</tt> is new in Java
  1.2. Use <tt class="literal">FilenameFilter</tt> if compatibility with
  previous releases of Java is required or if you prefer to filter
  filenames (i.e., <tt class="literal">String</tt> objects) rather than
  <tt class="literal">File</tt> objects. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public interface <b class="classname">FileFilter</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract boolean <b class="function">accept</b> (File <i class="parameter">pathname</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">File.listFiles()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>FileInputStream</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.io</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1(opt)</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1487"></a><a name="INDEX-1488"></a><a name="INDEX-1489"></a>
This class is a subclass of <tt class="literal">InputStream</tt> that reads
bytes from a file specified by name or by a <tt class="literal">File</tt> or
<tt class="literal">FileDescriptor</tt> object. <tt class="literal">read()</tt> reads a byte
or array of bytes from the file. It returns -1 when the end-of-file 
has been reached. To read binary data, you
typically use this class in conjunction with a
<tt class="literal">BufferedInputStream</tt> and <tt class="literal">DataInputStream</tt>. To
read text, you typically use it with an
<tt class="literal">InputStreamReader</tt> and <tt class="literal">BufferedReader</tt>. Call
<tt class="literal">close()</tt> to close the file when input is no longer
needed. <a name="INDEX-1490"></a>
</p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">FileInputStream</b> extends java.io.InputStream {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">FileInputStream</b> (String <i class="parameter">name</i>) throws FileNotFoundException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">FileInputStream</b> (FileDescriptor <i class="parameter">fdObj</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">FileInputStream</b> (File <i class="parameter">file</i>) throws FileNotFoundException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final FileDescriptor <b class="function">getFD</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding InputStream</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">available</b> () throws IOException;</td><td align="right"><i> native</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">close</b> () throws IOException;</td><td align="right"><i> native</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">read</b> () throws IOException;</td><td align="right"><i> native</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">read</b> (byte[ ] <i class="parameter">b</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">read</b> (byte[ ] <i class="parameter">b</i>, int <i class="parameter">off</i>, int <i class="parameter">len</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public long <b class="function">skip</b> (long <i class="parameter">n</i>) throws IOException;</td><td align="right"><i> native</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Methods Overriding Object</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected void <b class="function">finalize</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->java.io.InputStream-->FileInputStream</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>FilenameFilter</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.io</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1(opt)</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1491"></a><a name="INDEX-1492"></a><a name="INDEX-1493"></a>
This interface defines the <tt class="literal">accept()</tt> method that must
be implemented by any object that filters filenames
(i.e., selects a subset of filenames from a list of
filenames). There are no standard <tt class="literal">FilenameFilter</tt>
classes implemented by Java, but objects that implement this
interface are used by the <tt class="literal">java.awt.FileDialog</tt><a name="INDEX-1494"></a>
object and the <tt class="literal">File.list()</tt> method. A typical
<tt class="literal">FilenameFilter</tt> object might check that the specified
<tt class="literal">File</tt> represents a file (not a directory), is
readable (and possibly writable as well), and that its name
ends with some desired extension. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public interface <b class="classname">FilenameFilter</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract boolean <b class="function">accept</b> (File <i class="parameter">dir</i>, String <i class="parameter">name</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">java.awt.FileDialog.setFilenameFilter(), java.awt.peer.FileDialogPeer.setFilenameFilter(), File.{list(), listFiles()}</tt>
</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">java.awt.FileDialog.getFilenameFilter()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>FileNotFoundException</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.io</b></font></td><td align="right"><font size="+1"><b><i>serializable checked PJ1.1(opt)</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1495"></a>

An <tt class="literal">IOException</tt> that signals that a specified file
cannot be found. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">FileNotFoundException</b> extends IOException {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">FileNotFoundException</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">FileNotFoundException</b> (String <i class="parameter">s</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Exception-->IOException-->FileNotFoundException</tt>
</p>
<p>
<span class="refsect1">Thrown By: </span><tt class="literal">FileInputStream.FileInputStream(), FileOutputStream.FileOutputStream(), FileReader.FileReader(), RandomAccessFile.RandomAccessFile()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>FileOutputStream</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.io</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1(opt)</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1496"></a><a name="INDEX-1497"></a>
This class is a subclass of <tt class="literal">OutputStream</tt> that
writes data to a file specified by name or by a
<tt class="literal">File</tt> or <tt class="literal">FileDescriptor</tt><a name="INDEX-1498"></a>
object. <tt class="literal">write()</tt> writes a byte or array of bytes to
the file. To write binary data, you typically use this
class in conjunction with a <tt class="literal">BufferedOutputStream</tt> and
a <tt class="literal">DataOutputStream</tt>. To write text, you typically
use it with a <tt class="literal">PrintWriter</tt>, <tt class="literal">BufferedWriter</tt>
and an <tt class="literal">OutputStreamWriter</tt>. Use <tt class="literal">close()</tt> to
close a <tt class="literal">FileOutputStream</tt> when no further output
will be written to it.

<a name="INDEX-1499"></a>
</p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">FileOutputStream</b> extends java.io.OutputStream {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">FileOutputStream</b> (FileDescriptor <i class="parameter">fdObj</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">FileOutputStream</b> (String <i class="parameter">name</i>) throws FileNotFoundException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">FileOutputStream</b> (File <i class="parameter">file</i>) throws FileNotFoundException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public <b class="function">FileOutputStream</b> (String <i class="parameter">name</i>, boolean <i class="parameter">append</i>) throws FileNotFoundException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final FileDescriptor <b class="function">getFD</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding OutputStream</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">close</b> () throws IOException;</td><td align="right"><i> native</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">write</b> (int <i class="parameter">b</i>) throws IOException;</td><td align="right"><i> native</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">write</b> (byte[ ] <i class="parameter">b</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">write</b> (byte[ ] <i class="parameter">b</i>, int <i class="parameter">off</i>, int <i class="parameter">len</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Methods Overriding Object</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected void <b class="function">finalize</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->java.io.OutputStream-->FileOutputStream</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>FilePermission</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.io</b></font></td><td align="right"><font size="+1"><b><i>serializable permission</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-1500"></a><a name="INDEX-1501"></a><a name="INDEX-1502"></a><a name="INDEX-1503"></a><a name="INDEX-1504"></a>
  This class is a <tt class="literal">java.security.Permission</tt> that
  governs access to the local filesystem. A
  <tt class="literal">FilePermission</tt> has a name, or target, which
  specifies what file or files it pertains to, and a comma-separated
  list of actions that may be performed on the file or files. The
  supported actions are "read", "write", 
  "delete", and "execute". Read
  and write permission are required by any methods that read or write a
  file. Delete permission is required by
  <tt class="literal">File.delete()</tt>, and execute permission is required by
  <tt class="literal">Runtime.exec()</tt>. </p>
<p>  The name of a <tt class="literal">FilePermission</tt> may be as simple as a
  file or directory name. <tt class="literal">FilePermission</tt> also
  supports the use of certain wildcards, however, to specify a
  permission that applies to more than one file. If the name of the
  <tt class="literal">FilePermission</tt> is a directory name followed by 
  "<tt class="literal">/*</tt>"
  ("<tt class="literal">\*</tt>" on
  Windows platforms), it specifies all files in the named directory. If
  the name is a directory name followed by 
  "<tt class="literal">/-</tt>" 
  ("<tt class="literal">\-</tt>"
  on Windows), it specifies all files in the directory, and,
  recursively, all files in all subdirectories. A 
  "<tt class="literal">*</tt>" alone specifies
  all files in the current directory, and a 
  "<tt class="literal">-</tt>" alone specifies all
  files in or beneath the current directory. Finally, the special name
  "&lt;&lt;ALL FILES&gt;&gt;" 
  matches all files anywhere in the filesystem. </p>
<p>  Applications do not need to use this class directly. Programmers
  writing system-level code and system administrators configuring
  security policies may need to use it, however. Be very careful when
  granting any types of <tt class="literal">FilePermission</tt>. Restricting
  access (especially write access) to files is one of the cornerstones
  of the Java security model with regard to untrusted code. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public final class <b class="classname">FilePermission</b> extends java.security.Permission implements Serializable {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">FilePermission</b> (String <i class="parameter">path</i>, String <i class="parameter">actions</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Permission</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">equals</b> (Object <i class="parameter">obj</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">getActions</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">hashCode</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">implies</b> (java.security.Permission <i class="parameter">p</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public java.security.PermissionCollection <b class="function">newPermissionCollection</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->java.security.Permission(java.security.Guard,Serializable)-->FilePermission(Serializable)</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>FileReader</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.io</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1(opt)</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1505"></a><a name="INDEX-1506"></a><tt class="literal">FileReader</tt> is a convenience subclass of
<tt class="literal">InputStreamReader</tt> that is useful when you want to
read text (as opposed to binary data) from a file. You
create a <tt class="literal">FileReader</tt> by specifying the file to be
read in any of three possible forms. The
<tt class="literal">FileReader</tt> constructor internally creates a
<tt class="literal">FileInputStream</tt> to read bytes from the specified
file and uses the functionality of its superclass,
<tt class="literal">InputStreamReader</tt>, to convert those bytes from
characters in the local encoding to the Unicode characters
used by Java. Because <tt class="literal">FileReader</tt> is a trivial subclass of
<tt class="literal">InputStreamReader</tt>, it does not define any
<tt class="literal">read()</tt> methods or other methods of its own. Instead, it inherits all its methods from its superclass. If you want to read Unicode characters from a file that uses some encoding other than the default encoding for the
locale, you must explicitly create your own
<tt class="literal">InputStreamReader</tt> to perform the byte-to-character
conversion. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">FileReader</b> extends InputStreamReader {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">FileReader</b> (FileDescriptor <i class="parameter">fd</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">FileReader</b> (File <i class="parameter">file</i>) throws FileNotFoundException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">FileReader</b> (String <i class="parameter">fileName</i>) throws FileNotFoundException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Reader-->InputStreamReader-->FileReader</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>FileWriter</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.io</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1(opt)</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1507"></a><a name="INDEX-1508"></a><tt class="literal">FileWriter</tt> is a convenience subclass of
<tt class="literal">OutputStreamWriter</tt> that is useful when you want to
write text (as opposed to binary data) to a file. You
create a <tt class="literal">FileWriter</tt> by specifying the file to be
written to and, optionally, whether the data
should be appended to the end of an existing file instead of
overwriting that file. The <tt class="literal">FileWriter</tt> class creates an internal
<tt class="literal">FileOutputStream</tt> to write bytes to the specified
file and uses the functionality of its superclass,
<tt class="literal">OutputStreamWriter</tt>, to convert the Unicode characters
written to the stream into bytes using the
default encoding of the default locale. (If you want to use
an encoding other than the default, you cannot use
<tt class="literal">FileWriter</tt>; in that case you must create your own
<tt class="literal">OutputStreamWriter</tt> and <tt class="literal">FileOutputStream</tt>.)
Because <tt class="literal">FileWriter</tt> is a trivial subclass of
<tt class="literal">OutputStreamWriter</tt>, it does not define any methods
of its own, but simply inherits them from its superclass. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">FileWriter</b> extends OutputStreamWriter {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">FileWriter</b> (File <i class="parameter">file</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">FileWriter</b> (FileDescriptor <i class="parameter">fd</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">FileWriter</b> (String <i class="parameter">fileName</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">FileWriter</b> (String <i class="parameter">fileName</i>, boolean <i class="parameter">append</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Writer-->OutputStreamWriter-->FileWriter</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>FilterInputStream</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.io</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1509"></a><a name="INDEX-1510"></a>

This class provides method definitions required to filter
data obtained from the <tt class="literal">InputStream</tt> specified when
the <tt class="literal">FilterInputStream</tt> is created. It must be
subclassed to perform some sort of 
filtering operation and
cannot be instantiated directly. See the subclasses
<tt class="literal">BufferedInputStream</tt>, <tt class="literal">DataInputStream</tt>,
and
<tt class="literal">PushbackInputStream</tt>. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">FilterInputStream</b> extends java.io.InputStream {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected <b class="function">FilterInputStream</b> (java.io.InputStream <i class="parameter">in</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding InputStream</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">available</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">close</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">mark</b> (int <i class="parameter">readlimit</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">markSupported</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">read</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">read</b> (byte[ ] <i class="parameter">b</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">read</b> (byte[ ] <i class="parameter">b</i>, int <i class="parameter">off</i>, int <i class="parameter">len</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">reset</b> () throws IOException;</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public long <b class="function">skip</b> (long <i class="parameter">n</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Instance Fields</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected java.io.InputStream <b class="function">in</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->java.io.InputStream-->FilterInputStream</tt>
</p>
<p>
<span class="refsect1">Subclasses: </span><tt class="literal">BufferedInputStream, java.io.DataInputStream, LineNumberInputStream, PushbackInputStream, java.security.DigestInputStream, java.util.zip.CheckedInputStream, java.util.zip.InflaterInputStream, javax.crypto.CipherInputStream, javax.swing.ProgressMonitorInputStream</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>FilterOutputStream</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.io</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1511"></a><a name="INDEX-1512"></a>
This class provides method definitions required to filter
the data to be written to the <tt class="literal">OutputStream</tt> specified
when the <tt class="literal">FilterOutputStream</tt> is created. It
must be subclassed to perform some sort of filtering
operation and may not be instantiated directly. See
the subclasses
<tt class="literal">BufferedOutputStream</tt> and <tt class="literal">DataOutputStream</tt>. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">FilterOutputStream</b> extends java.io.OutputStream {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">FilterOutputStream</b> (java.io.OutputStream <i class="parameter">out</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding OutputStream</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">close</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">flush</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">write</b> (int <i class="parameter">b</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">write</b> (byte[ ] <i class="parameter">b</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">write</b> (byte[ ] <i class="parameter">b</i>, int <i class="parameter">off</i>, int <i class="parameter">len</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Instance Fields</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected java.io.OutputStream <b class="function">out</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->java.io.OutputStream-->FilterOutputStream</tt>
</p>
<p>
<span class="refsect1">Subclasses: </span><tt class="literal">BufferedOutputStream, java.io.DataOutputStream, PrintStream, java.security.DigestOutputStream, java.util.zip.CheckedOutputStream, java.util.zip.DeflaterOutputStream, javax.crypto.CipherOutputStream</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>FilterReader</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.io</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1513"></a><a name="INDEX-1514"></a>
This abstract class is intended to act as a superclass for
character input streams that read data from some other
character input stream, filter it in some way, and then
return the filtered data when a <tt class="literal">read()</tt>
method is called. <a name="INDEX-1515"></a><tt class="literal">FilterReader</tt> is declared <tt class="literal">abstract</tt> so that
it cannot be instantiated. But none of its methods are
themselves abstract: they all simply call the requested
operation on the input stream passed to the
<tt class="literal">FilterReader()</tt> constructor. If you were allowed to
instantiate a <tt class="literal">FilterReader</tt>, you'd find that it is a
null filter (i.e., it simply reads characters from the
specified input stream and returns them without any kind of filtering). </p>
<p>Because <tt class="literal">FilterReader</tt> implements a null filter, it
is an ideal superclass for classes that want to implement
simple filters but do not want to override all the
methods of <tt class="literal">Reader</tt>. In order to create your own
filtered character input stream, you should subclass
<tt class="literal">FilterReader</tt> and override both its <tt class="literal">read()</tt>
methods to perform the desired filtering operation. Note
that you can implement one of the <tt class="literal">read()</tt> methods in
terms of the other, and thus only implement the filtration
once. Recall that the other <tt class="literal">read()</tt> methods defined
by <tt class="literal">Reader</tt> are implemented in terms of these methods,
so you do not need to override those. In some cases, you may
need to override other methods of <tt class="literal">FilterReader</tt>
and provide methods or constructors that are specific to your subclass. <tt class="literal">FilterReader</tt> is the character-stream analog to
<tt class="literal">FilterInputStream</tt>. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public abstract class <b class="classname">FilterReader</b> extends Reader {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected <b class="function">FilterReader</b> (Reader <i class="parameter">in</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Reader</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">close</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">mark</b> (int <i class="parameter">readAheadLimit</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">markSupported</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">read</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">read</b> (char[ ] <i class="parameter">cbuf</i>, int <i class="parameter">off</i>, int <i class="parameter">len</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">ready</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">reset</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public long <b class="function">skip</b> (long <i class="parameter">n</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Instance Fields</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected Reader <b class="function">in</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Reader-->FilterReader</tt>
</p>
<p>
<span class="refsect1">Subclasses: </span><tt class="literal">PushbackReader</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>FilterWriter</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.io</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1516"></a><a name="INDEX-1517"></a>
This abstract class is intended to act as a superclass for
character output streams that filter the data written to
them before writing it to some other character output
stream. <tt class="literal">FilterWriter</tt> is declared <tt class="literal">abstract</tt> so that
it cannot be instantiated. But none of its methods are
themselves abstract: they all simply invoke the
corresponding method on the output stream that was passed to
the <tt class="literal">FilterWriter</tt> constructor. If you were allowed to
instantiate a <tt class="literal">FilterWriter</tt> object, you'd find that it
acts as a null filter (i.e., it simply passes the
characters written to it along, without any filtration). </p>
<p>Because <tt class="literal">FilterWriter</tt> implements a null filter, it
is an ideal superclass for classes that want to implement
simple filters without having to override all of the methods
of <tt class="literal">Writer</tt>. In order to create your own filtered
character output stream, you should subclass
<a name="INDEX-1518"></a><tt class="literal">FilterWriter</tt> and override all its <tt class="literal">write()</tt>
methods to perform the desired filtering operation. Note
that you can implement two of the <tt class="literal">write()</tt> methods in
terms of the third and thus implement your filtering
algorithm only once. In some cases, you may want to override
other <tt class="literal">Writer</tt> methods and 
add other methods or constructors that are specific to
your subclass. <tt class="literal">FilterWriter</tt> is the character-stream analog of
<tt class="literal">FilterOutputStream</tt>. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public abstract class <b class="classname">FilterWriter</b> extends Writer {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected <b class="function">FilterWriter</b> (Writer <i class="parameter">out</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Writer</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">close</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">flush</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">write</b> (int <i class="parameter">c</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">write</b> (char[ ] <i class="parameter">cbuf</i>, int <i class="parameter">off</i>, int <i class="parameter">len</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">write</b> (String <i class="parameter">str</i>, int <i class="parameter">off</i>, int <i class="parameter">len</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Instance Fields</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected Writer <b class="function">out</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Writer-->FilterWriter</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>InputStream</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.io</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1519"></a>

This abstract class is the superclass of all input streams. It defines the basic input methods all input stream
classes provide.<a name="INDEX-1520"></a><a name="INDEX-1521"></a><a name="INDEX-1522"></a><a name="INDEX-1523"></a><tt class="literal">read()</tt> reads a single byte or an array (or subarray)
of bytes. It returns the byte read, the number of bytes
read, or -1 if the end-of-file has been reached. <tt class="literal">skip()</tt> skips a specified number of bytes
of input. <tt class="literal">available()</tt> returns the number of bytes
that can be read without blocking. <tt class="literal">close()</tt> closes
the input stream and frees up any system resources
associated with it. The stream should not be used after
<tt class="literal">close()</tt> has been called. </p>
<p>
<a name="INDEX-1524"></a><a name="INDEX-1525"></a><a name="INDEX-1526"></a>
If <tt class="literal">markSupported()</tt> returns <tt class="literal">true</tt> for a given
<tt class="literal">InputStream</tt>, that stream supports
<tt class="literal">mark()</tt> and <tt class="literal">reset()</tt> methods. <tt class="literal">mark()</tt>
marks the current position in the input stream so that
<tt class="literal">reset()</tt> can return to that position (as long as no
more than the specified number of bytes have been read
between the calls to <tt class="literal">mark()</tt> and <tt class="literal">reset()</tt>). See also <tt class="literal">Reader</tt>. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public abstract class <b class="classname">InputStream</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">InputStream</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">available</b> () throws IOException;</td><td align="right"><i> constant</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">close</b> () throws IOException;</td><td align="right"><i> empty</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">mark</b> (int <i class="parameter">readlimit</i>);</td><td align="right"><i> synchronized empty</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">markSupported</b> ();</td><td align="right"><i> constant</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract int <b class="function">read</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">read</b> (byte[ ] <i class="parameter">b</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">read</b> (byte[ ] <i class="parameter">b</i>, int <i class="parameter">off</i>, int <i class="parameter">len</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">reset</b> () throws IOException;</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public long <b class="function">skip</b> (long <i class="parameter">n</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Subclasses: </span><tt class="literal">ByteArrayInputStream, FileInputStream, FilterInputStream, ObjectInputStream, PipedInputStream, SequenceInputStream, StringBufferInputStream, javax.servlet.ServletInputStream, org.omg.CORBA.portable.InputStream</tt>
</p>
<p>
<span class="refsect1">Passed To: </span>Too many methods to list. </p>
<p>
<span class="refsect1">Returned By: </span>Too many methods to list. </p>
<p>
<span class="refsect1">Type Of: </span><tt class="literal">FilterInputStream.in, System.in</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>InputStreamReader</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.io</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1527"></a><a name="INDEX-1528"></a>
This class is a character input stream that uses a byte
input stream as its data source. It reads bytes from a
specified <tt class="literal">InputStream</tt> and translates them into
Unicode characters according to a particular platform- and
locale-dependent character encoding. This is an
important internationalization feature in Java 1.1 and later. <a name="INDEX-1529"></a><tt class="literal">InputStreamReader</tt> supports the standard
<tt class="literal">Reader</tt> methods. It also has a <tt class="literal">getEncoding()</tt>
method that returns the name of the encoding being used to
convert bytes to characters. </p>
<p>When you create an <tt class="literal">InputStreamReader</tt>, you specify an
<tt class="literal">InputStream</tt> from which the <tt class="literal">InputStreamReader</tt>
is to read bytes and, optionally, the name
of the character encoding used by those bytes. If you do
not specify an encoding name, the <tt class="literal">InputStreamReader</tt>
uses the default encoding for the default locale, which
is usually the correct thing to do. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">InputStreamReader</b> extends Reader {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">InputStreamReader</b> (java.io.InputStream <i class="parameter">in</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">InputStreamReader</b> (java.io.InputStream <i class="parameter">in</i>, String <i class="parameter">enc</i>) throws UnsupportedEncodingException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">getEncoding</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Reader</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">close</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">read</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">read</b> (char[ ] <i class="parameter">cbuf</i>, int <i class="parameter">off</i>, int <i class="parameter">len</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">ready</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Reader-->InputStreamReader</tt>
</p>
<p>
<span class="refsect1">Subclasses: </span><tt class="literal">FileReader</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>InterruptedIOException</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.io</b></font></td><td align="right"><font size="+1"><b><i>serializable checked PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1530"></a>

An <tt class="literal">IOException</tt> that signals that an input or output
operation was interrupted. The <tt class="literal">bytesTransferred</tt>
field contains the number of bytes read or written before
the operation was interrupted. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">InterruptedIOException</b> extends IOException {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">InterruptedIOException</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">InterruptedIOException</b> (String <i class="parameter">s</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Fields</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">bytesTransferred</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Exception-->IOException-->InterruptedIOException</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>InvalidClassException</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.io</b></font></td><td align="right"><font size="+1"><b><i>serializable checked PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1531"></a><a name="INDEX-1532"></a>
Signals that the serialization mechanism has encountered one
of several possible problems with the class of an object that
is being serialized or deserialized. The <tt class="literal">classname</tt>
field should contain the name of the class in question, and
the <tt class="literal">getMessage()</tt> method is overridden to return
this class name with the message. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">InvalidClassException</b> extends ObjectStreamException {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">InvalidClassException</b> (String <i class="parameter">reason</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">InvalidClassException</b> (String <i class="parameter">cname</i>, String <i class="parameter">reason</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Throwable</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">getMessage</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Fields</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">classname</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Exception-->IOException-->ObjectStreamException-->InvalidClassException</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>InvalidObjectException</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.io</b></font></td><td align="right"><font size="+1"><b><i>serializable checked PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1533"></a><a name="INDEX-1534"></a><a name="INDEX-1535"></a>
This exception should be thrown by the
<tt class="literal">validateObject()</tt> method of an object that implements
the <tt class="literal">ObjectInputValidation</tt> interface when a
deserialized object fails an input validation test for any
reason. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">InvalidObjectException</b> extends ObjectStreamException {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">InvalidObjectException</b> (String <i class="parameter">reason</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Exception-->IOException-->ObjectStreamException-->InvalidObjectException</tt>
</p>
<p>
<span class="refsect1">Thrown By: </span><tt class="literal">java.awt.font.TextAttribute.readResolve(), ObjectInputStream.registerValidation(), ObjectInputValidation.validateObject(), java.text.AttributedCharacterIterator.Attribute.readResolve()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>IOException</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.io</b></font></td><td align="right"><font size="+1"><b><i>serializable checked PJ1.1</i></b></font></td>
</tr>
</table>



<p>
<a name="INDEX-1536"></a>

Signals that an exceptional condition has occurred during
input or output. This class has several more specific
subclasses. See <tt class="literal">EOFException</tt>,
<tt class="literal">FileNotFoundException</tt>,
<tt class="literal">InterruptedIOException</tt>, and
<tt class="literal">UTFDataFormatException</tt>. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">IOException</b> extends Exception {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">IOException</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">IOException</b> (String <i class="parameter">s</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Exception-->IOException</tt>
</p>
<p>
<span class="refsect1">Subclasses: </span><tt class="literal">CharConversionException, EOFException, FileNotFoundException, InterruptedIOException, ObjectStreamException, SyncFailedException, UnsupportedEncodingException, UTFDataFormatException, java.net.MalformedURLException, java.net.ProtocolException, java.net.SocketException, java.net.UnknownHostException, java.net.UnknownServiceException, java.rmi.RemoteException, java.util.zip.ZipException, javax.swing.text.ChangedCharSetException</tt>
</p>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">java.awt.print.PrinterIOException.PrinterIOException()</tt>
</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">java.awt.print.PrinterIOException.getIOException()</tt>
</p>
<p>
<span class="refsect1">Thrown By: </span>Too many methods to list. </p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>LineNumberInputStream</b></font></td><td align="right"><font size="+1"><b>Java 1.0; Deprecated in Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.io</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1537"></a><a name="INDEX-1538"></a><a name="INDEX-1539"></a><a name="INDEX-1540"></a>

This class is a <tt class="literal">FilterInputStream</tt> that keeps track
of the number of lines of data that have been read. <tt class="literal">getLineNumber()</tt> returns the current line number;
<tt class="literal">setLineNumber()</tt> sets the line number of the current
line. Subsequent lines are numbered starting from
that number. This class is deprecated as of Java 1.1 because it does not
properly convert bytes to characters. Use
<tt class="literal">LineNumberReader</tt> instead. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">LineNumberInputStream</b> extends FilterInputStream {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">LineNumberInputStream</b> (java.io.InputStream <i class="parameter">in</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getLineNumber</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setLineNumber</b> (int <i class="parameter">lineNumber</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding FilterInputStream</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">available</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">mark</b> (int <i class="parameter">readlimit</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">read</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">read</b> (byte[ ] <i class="parameter">b</i>, int <i class="parameter">off</i>, int <i class="parameter">len</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">reset</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public long <b class="function">skip</b> (long <i class="parameter">n</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->java.io.InputStream-->FilterInputStream-->LineNumberInputStream</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>LineNumberReader</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.io</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>



<p>
<a name="INDEX-1541"></a><a name="INDEX-1542"></a><a name="INDEX-1543"></a><a name="INDEX-1544"></a><a name="INDEX-1545"></a>

This class is a character input stream that keeps track of the number
of lines of text that have been read from it. It supports the usual
<tt class="literal">Reader</tt> methods and also the <tt class="literal">readLine()</tt> method
introduced by its superclass. In addition to these methods, you can
call <tt class="literal">getLineNumber()</tt> to query the number of lines set so
far. You can also call <tt class="literal">setLineNumber()</tt> to set the line
number for the current line. Subsequent lines are numbered
sequentially from this specified starting point. This class is a
character-stream analog to <tt class="literal">LineNumberInputStream</tt>, which
has been deprecated as of Java 1.1. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">LineNumberReader</b> extends BufferedReader {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">LineNumberReader</b> (Reader <i class="parameter">in</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">LineNumberReader</b> (Reader <i class="parameter">in</i>, int <i class="parameter">sz</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getLineNumber</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setLineNumber</b> (int <i class="parameter">lineNumber</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding BufferedReader</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">mark</b> (int <i class="parameter">readAheadLimit</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">read</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">read</b> (char[ ] <i class="parameter">cbuf</i>, int <i class="parameter">off</i>, int <i class="parameter">len</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">readLine</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">reset</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public long <b class="function">skip</b> (long <i class="parameter">n</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Reader-->BufferedReader-->LineNumberReader</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>NotActiveException</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.io</b></font></td><td align="right"><font size="+1"><b><i>serializable checked PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1546"></a>
This exception is thrown in several circumstances. It
indicates that the invoked method was not invoked at the
right time or in the correct context. Typically, it means
that an <tt class="literal">ObjectOutputStream</tt> or
<tt class="literal">ObjectInputStream</tt> is not currently active and
therefore the requested operation cannot be performed. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">NotActiveException</b> extends ObjectStreamException {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">NotActiveException</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">NotActiveException</b> (String <i class="parameter">reason</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Exception-->IOException-->ObjectStreamException-->NotActiveException</tt>
</p>
<p>
<span class="refsect1">Thrown By: </span><tt class="literal">ObjectInputStream.{defaultReadObject(), readFields(), registerValidation()}</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>NotSerializableException</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.io</b></font></td><td align="right"><font size="+1"><b><i>serializable checked PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1547"></a><a name="INDEX-1548"></a>
Signals that an object cannot be
serialized. It is thrown when serialization is attempted on
an instance of a class that does not implement the
<tt class="literal">Serializable</tt> interface. Note that it is also
thrown when an attempt is made to serialize a
<tt class="literal">Serializable</tt> object that refers to (or contains)
an object that is not <tt class="literal">Serializable</tt>. <a name="INDEX-1549"></a><a name="INDEX-1550"></a>
A subclass of a class that is <tt class="literal">Serializable</tt> can
prevent itself from being serialized by throwing this
exception from its <tt class="literal">writeObject()</tt> and/or
<tt class="literal">readObject()</tt> methods. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">NotSerializableException</b> extends ObjectStreamException {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">NotSerializableException</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">NotSerializableException</b> (String <i class="parameter">classname</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Exception-->IOException-->ObjectStreamException-->NotSerializableException</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>ObjectInput</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.io</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1551"></a>
This interface extends the <tt class="literal">DataInput</tt> interface and
adds methods for deserializing objects and reading bytes and
arrays of bytes. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public interface <b class="classname">ObjectInput</b> extends DataInput {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract int <b class="function">available</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">close</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract int <b class="function">read</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract int <b class="function">read</b> (byte[ ] <i class="parameter">b</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract int <b class="function">read</b> (byte[ ] <i class="parameter">b</i>, int <i class="parameter">off</i>, int <i class="parameter">len</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract Object <b class="function">readObject</b> () throws ClassNotFoundExceptionIOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract long <b class="function">skip</b> (long <i class="parameter">n</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">(ObjectInput(DataInput))</tt>
</p>
<p>
<span class="refsect1">Implementations: </span><tt class="literal">ObjectInputStream</tt>
</p>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">java.awt.datatransfer.DataFlavor.readExternal(), Externalizable.readExternal(), java.rmi.server.ObjID.read()</tt>
</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">java.rmi.server.RemoteCall.getInputStream()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>ObjectInputStream</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.io</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-1552"></a><a name="INDEX-1553"></a><tt class="literal">ObjectInputStream</tt> deserializes objects, arrays,
  and other values from a stream that was previously created with an
  <tt class="literal">ObjectOutputStream</tt>. The

<a name="INDEX-1554"></a><tt class="literal">readObject()</tt> method deserializes objects and arrays (which
  should then be cast to the appropriate type); various other methods
  read primitive data values from the stream. Note that
  only objects that implement the <tt class="literal">Serializable</tt> or
  <tt class="literal">Externalizable</tt> interface can be serialized and
  deserialized. </p>
<p>
<a name="INDEX-1555"></a>
  A class may implement its own private
  <tt class="literal">readObject(ObjectInputStream)</tt> method to customize
  the way it is deserialized. If you define such a method, there are
  several <tt class="literal">ObjectInputStream</tt> methods you can use
  to help you deserialize the object. <tt class="literal">defaultReadObject()</tt> is the easiest. It reads the
  content of the object just as an <tt class="literal">ObjectInputStream</tt>
  would normally do. If you wrote additional data before or after the
  default object contents, you should read that data before or after
  calling <tt class="literal">defaultReadObject()</tt>. When working with multiple versions
  or implementations of a class, you may have to deserialize a set of
  fields that do not match the fields of your class. In this case,
  give your class a static field named
  <tt class="literal">serialPersistentFields</tt> whose value is an array of 
  <tt class="literal">ObjectStreamField</tt> objects that describe the fields
  to be deserialized. If you do this, your
  <tt class="literal">readObject()</tt> method can call
  <tt class="literal">readFields()</tt> to read the specified fields from the
  stream and return them in a 
  <tt class="literal">ObjectInputStream.GetField</tt> object. See
  <tt class="literal">ObjectStreamField</tt> and
  <tt class="literal">ObjectInputStream.GetField</tt> for more details. <a name="INDEX-1556"></a><a name="INDEX-1557"></a>

  Finally, you can call   <tt class="literal">registerValidation()</tt> from 
  a custom <tt class="literal">readObject()</tt> method. This method registers an
  <tt class="literal">ObjectInputValidation</tt> object (typically the object being
  deserialized) to be notified when a complete tree of objects has been
  deserialized, and the original call to the <tt class="literal">readObject()</tt>
  method of the <tt class="literal">ObjectInputStream</tt> is about to return to its
  caller. </p>
<p>  The remaining methods include miscellaneous stream-manipulation
  methods and several protected methods for use by subclasses that want
  to customize the deserialization behavior of
  <tt class="literal">ObjectInputStream</tt>. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">ObjectInputStream</b> extends java.io.InputStream implements ObjectInput, ObjectStreamConstants {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">ObjectInputStream</b> (java.io.InputStream <i class="parameter">in</i>) throws IOExceptionStreamCorruptedException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">protected <b class="function">ObjectInputStream</b> () throws IOExceptionSecurityException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Inner Classes</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">defaultReadObject</b> () throws IOExceptionClassNotFoundExceptionNotActiveException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public ObjectInputStream.GetField <b class="function">readFields</b> () throws IOExceptionClassNotFoundExceptionNotActiveException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">registerValidation</b> (ObjectInputValidation <i class="parameter">obj</i>, int <i class="parameter">prio</i>) throws NotActiveExceptionInvalidObjectException;</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Methods Implementing DataInput</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">readBoolean</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public byte <b class="function">readByte</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public char <b class="function">readChar</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public double <b class="function">readDouble</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public float <b class="function">readFloat</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">readFully</b> (byte[ ] <i class="parameter">data</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">readFully</b> (byte[ ] <i class="parameter">data</i>, int <i class="parameter">offset</i>, int <i class="parameter">size</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">readInt</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public long <b class="function">readLong</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public short <b class="function">readShort</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">readUnsignedByte</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">readUnsignedShort</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">readUTF</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">skipBytes</b> (int <i class="parameter">len</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Methods Implementing ObjectInput</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">available</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">close</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">read</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">read</b> (byte[ ] <i class="parameter">b</i>, int <i class="parameter">off</i>, int <i class="parameter">len</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final Object <b class="function">readObject</b> () throws OptionalDataExceptionClassNotFoundExceptionIOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected boolean <b class="function">enableResolveObject</b> (boolean <i class="parameter">enable</i>) throws SecurityException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.3</span></td><td align="left">protected ObjectStreamClass <b class="function">readClassDescriptor</b> () throws IOExceptionClassNotFoundException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">protected Object <b class="function">readObjectOverride</b> () throws OptionalDataExceptionClassNotFoundExceptionIOException;</td><td align="right"><i> constant</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected void <b class="function">readStreamHeader</b> () throws IOExceptionStreamCorruptedException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected Class <b class="function">resolveClass</b> (ObjectStreamClass <i class="parameter">v</i>) throws IOExceptionClassNotFoundException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected Object <b class="function">resolveObject</b> (Object <i class="parameter">obj</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.3</span></td><td align="left">protected Class <b class="function">resolveProxyClass</b> (String[ ] <i class="parameter">interfaces</i>) throws IOExceptionClassNotFoundException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Deprecated Public Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">#</span></td><td align="left">public String <b class="function">readLine</b> () throws IOException;</td><td align="right"><i> Implements:DataInput</i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->java.io.InputStream-->ObjectInputStream(ObjectInput(DataInput),ObjectStreamConstants)</tt>
</p>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">java.beans.beancontext.BeanContextServicesSupport.bcsPreDeserializationHook(), java.beans.beancontext.BeanContextSupport.{bcsPreDeserializationHook(), deserialize(), readChildren()}, javax.swing.text.StyleContext.{readAttributes(), readAttributeSet()}</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>ObjectInputStream.GetField</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.io</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-1558"></a><a name="INDEX-1559"></a>
  This class holds the values of named fields read by an
  <tt class="literal">ObjectInputStream</tt>. It gives the programmer precise
  control over the deserialization process and is typically used when 
  implementing an object with a set of fields that do not match the
  set of fields (and the serialization stream format) of the original
  implementation of the object. This class allows the implementation of
  a class to change without breaking serialization compatibility. </p>
<p>
<a name="INDEX-1560"></a>
  In order to use the <tt class="literal">GetField</tt> class, your class must
  implement a private <tt class="literal">readObject()</tt> method that is
  responsible for custom deserialization. Typically, when using the
  <tt class="literal">GetField</tt> class, you have also specified an
  array of <tt class="literal">ObjectStreamField</tt> objects as the value of
  a private static field named <tt class="literal">serialPersistentFields</tt>. This
  array specifies the names and types of all fields expected to be found
  when reading from a serialization stream. If there is no
  <tt class="literal">serialPersistantField</tt> field, the array of
  <tt class="literal">ObjectStreamField</tt> objects is created from the
  actual fields (excluding <tt class="literal">static</tt> and
  <tt class="literal">transient</tt> fields) of the class. </p>
<p>
<a name="INDEX-1561"></a><a name="INDEX-1562"></a><a name="INDEX-1563"></a><a name="INDEX-1564"></a>
  Within the <tt class="literal">readObject()</tt> method of your class, call
  the <tt class="literal">readFields()</tt> method of
  <tt class="literal">ObjectInputStream()</tt>. This method reads the
  values of all fields from the stream and stores them in an
  <tt class="literal">ObjectInputStream.GetField</tt> object that it
  returns. This <tt class="literal">GetField</tt> object is essentially a
  mapping from field names to field values, and you can extract the
  values of whatever fields you need in order to restore the proper
  state of the object being deserialized. The various
  <tt class="literal">get()</tt> methods return the values of named fields of
  specified types. Each method takes a default value as an argument, in
  case no value for the named field was present in the serialization
  stream. (This can happen when deserializing an object written by an
  earlier version of the class, for example.)  Use the
  <tt class="literal">defaulted()</tt> method to determine whether the
  <tt class="literal">GetField</tt> object contains a value for the named
  field. If this method returns <tt class="literal">true</tt>, the named
  field had no value in the stream, so the <tt class="literal">get()</tt>
  method of the <tt class="literal">GetField</tt> object has to return
  the specified default value. The <tt class="literal">getObjectStreamClass()</tt> method of a
  <tt class="literal">GetField</tt> object returns the
  <tt class="literal">ObjectStreamClass</tt> object for the object being
  deserialized. This <tt class="literal">ObjectStreamClass</tt> can obtain the array of <tt class="literal">ObjectStreamField</tt> objects
  for the class. </p>
<p>  See also <tt class="literal">ObjectOutputStream.PutField</tt>
</p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public abstract static class <b class="classname">ObjectInputStream.GetField</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">GetField</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract boolean <b class="function">defaulted</b> (String <i class="parameter">name</i>) throws IOExceptionIllegalArgumentException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract boolean <b class="function">get</b> (String <i class="parameter">name</i>, boolean <i class="parameter">defvalue</i>) throws IOExceptionIllegalArgumentException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract byte <b class="function">get</b> (String <i class="parameter">name</i>, byte <i class="parameter">defvalue</i>) throws IOExceptionIllegalArgumentException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract char <b class="function">get</b> (String <i class="parameter">name</i>, char <i class="parameter">defvalue</i>) throws IOExceptionIllegalArgumentException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract short <b class="function">get</b> (String <i class="parameter">name</i>, short <i class="parameter">defvalue</i>) throws IOExceptionIllegalArgumentException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract int <b class="function">get</b> (String <i class="parameter">name</i>, int <i class="parameter">defvalue</i>) throws IOExceptionIllegalArgumentException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract long <b class="function">get</b> (String <i class="parameter">name</i>, long <i class="parameter">defvalue</i>) throws IOExceptionIllegalArgumentException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract float <b class="function">get</b> (String <i class="parameter">name</i>, float <i class="parameter">defvalue</i>) throws IOExceptionIllegalArgumentException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract double <b class="function">get</b> (String <i class="parameter">name</i>, double <i class="parameter">defvalue</i>) throws IOExceptionIllegalArgumentException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract Object <b class="function">get</b> (String <i class="parameter">name</i>, Object <i class="parameter">defvalue</i>) throws IOExceptionIllegalArgumentException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract ObjectStreamClass <b class="function">getObjectStreamClass</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">ObjectInputStream.readFields()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>ObjectInputValidation</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.io</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1565"></a><a name="INDEX-1566"></a><a name="INDEX-1567"></a><a name="INDEX-1568"></a><a name="INDEX-1569"></a>

A class implements this interface and defines the
<tt class="literal">validateObject()</tt> method in order to validate itself when it and all the objects it depends on
have been completely deserialized from an <tt class="literal">ObjectInputStream</tt>. The <tt class="literal">validateObject()</tt> method is only invoked,
however, if the object is passed to
<tt class="literal">ObjectInputStream.registerValidation()</tt>; this must be
done from the <tt class="literal">readObject()</tt> method of the object. Note that if an object is deserialized as part of a larger
object graph, its <tt class="literal">validateObject()</tt> method is not
invoked until the entire graph is read, and the original
call to <tt class="literal">ObjectInputStream.readObject()</tt> is about to
return. <tt class="literal">validateObject()</tt> should throw an
<tt class="literal">InvalidObjectException</tt> if the object fails
validation. This stops object serialization, and
the original call to <tt class="literal">ObjectInputStream.readObject()</tt>
terminates with the <tt class="literal">InvalidObjectException</tt>
exception. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public interface <b class="classname">ObjectInputValidation</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">validateObject</b> () throws InvalidObjectException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">ObjectInputStream.registerValidation()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>ObjectOutput</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.io</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1570"></a>
This interface extends the <tt class="literal">DataOutput</tt> interface and
adds methods for serializing objects and writing bytes and
arrays of bytes. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public interface <b class="classname">ObjectOutput</b> extends DataOutput {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">close</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">flush</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">write</b> (byte[ ] <i class="parameter">b</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">write</b> (int <i class="parameter">b</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">write</b> (byte[ ] <i class="parameter">b</i>, int <i class="parameter">off</i>, int <i class="parameter">len</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">writeObject</b> (Object <i class="parameter">obj</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">(ObjectOutput(DataOutput))</tt>
</p>
<p>
<span class="refsect1">Implementations: </span><tt class="literal">ObjectOutputStream</tt>
</p>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">java.awt.datatransfer.DataFlavor.writeExternal(), Externalizable.writeExternal(), ObjectOutputStream.PutField.write(), java.rmi.server.ObjID.write(), java.rmi.server.RemoteRef.getRefClass()</tt>
</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">java.rmi.server.RemoteCall.{getOutputStream(), getResultStream()}</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>ObjectOutputStream</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.io</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-1571"></a><a name="INDEX-1572"></a>

  The <tt class="literal">ObjectOutputStream</tt> serializes objects,
  arrays, and other values to a stream. The

<a name="INDEX-1573"></a><tt class="literal">writeObject()</tt> method serializes an object or array, and
  various other methods write primitive data values to the
  stream. Note that only objects that implement the
  <tt class="literal">Serializable</tt> or <tt class="literal">Externalizable</tt>
  interface can be serialized. </p>
<p>
<a name="INDEX-1574"></a>
  A class that wants to customize the way instances are serialized
  should declare a private
  <tt class="literal">writeObject(ObjectOutputStream)</tt> method. This
  method is invoked when an object is being serialized and can use
  several additional methods of <tt class="literal">ObjectOutputStream</tt>. <tt class="literal">defaultWriteObject()</tt> performs the same serialization that
  would happen if no <tt class="literal">writeObject()</tt> method existed. An object can call this method to serialize itself and then use other
  methods of <tt class="literal">ObjectOutputStream</tt> to write additional
  data to the serialization stream. The class must define a matching
  <tt class="literal">readObject()</tt> method to read that additional data,
  of course. 
<a name="INDEX-1575"></a><a name="INDEX-1576"></a>
  When working with multiple versions or implementations of
  a class, you may have to serialize a set of fields that do not
  precisely match the fields of your class. In this case, give your
  class a static field named <tt class="literal">serialPersistentFields</tt>
  whose value is an array of <tt class="literal">ObjectStreamField</tt>
  objects that describe the fields to be serialized. In your
  <tt class="literal">writeObject()</tt> method, call
  <tt class="literal">putFields()</tt> to obtain an
  <tt class="literal">ObjectOutputStream.PutField</tt> object. Store field
  names and values into this object, and then call
  <tt class="literal">writeFields()</tt> to write them out to the
  serialization stream. See <tt class="literal">ObjectStreamField</tt> and
  <tt class="literal">ObjectOutputStream.PutField</tt> for further details. </p>
<p>  The remaining methods of <tt class="literal">ObjectOutputStream</tt> are
  miscellaneous stream-manipulation methods and protected methods for
  use by subclasses that want to customize its serialization behavior. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">ObjectOutputStream</b> extends java.io.OutputStream implements ObjectOutput, ObjectStreamConstants {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">ObjectOutputStream</b> (java.io.OutputStream <i class="parameter">out</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">protected <b class="function">ObjectOutputStream</b> () throws IOExceptionSecurityException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Inner Classes</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">defaultWriteObject</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public ObjectOutputStream.PutField <b class="function">putFields</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">reset</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public void <b class="function">useProtocolVersion</b> (int <i class="parameter">version</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public void <b class="function">writeFields</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Methods Implementing DataOutput</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">writeBoolean</b> (boolean <i class="parameter">data</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">writeByte</b> (int <i class="parameter">data</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">writeBytes</b> (String <i class="parameter">data</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">writeChar</b> (int <i class="parameter">data</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">writeChars</b> (String <i class="parameter">data</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">writeDouble</b> (double <i class="parameter">data</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">writeFloat</b> (float <i class="parameter">data</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">writeInt</b> (int <i class="parameter">data</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">writeLong</b> (long <i class="parameter">data</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">writeShort</b> (int <i class="parameter">data</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">writeUTF</b> (String <i class="parameter">s</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Methods Implementing ObjectOutput</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">close</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">flush</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">write</b> (byte[ ] <i class="parameter">b</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">write</b> (int <i class="parameter">data</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">write</b> (byte[ ] <i class="parameter">b</i>, int <i class="parameter">off</i>, int <i class="parameter">len</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final void <b class="function">writeObject</b> (Object <i class="parameter">obj</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected void <b class="function">annotateClass</b> (Class <i class="parameter">cl</i>) throws IOException;</td><td align="right"><i> empty</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.3</span></td><td align="left">protected void <b class="function">annotateProxyClass</b> (Class <i class="parameter">cl</i>) throws IOException;</td><td align="right"><i> empty</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected void <b class="function">drain</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected boolean <b class="function">enableReplaceObject</b> (boolean <i class="parameter">enable</i>) throws SecurityException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected Object <b class="function">replaceObject</b> (Object <i class="parameter">obj</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.3</span></td><td align="left">protected void <b class="function">writeClassDescriptor</b> (ObjectStreamClass <i class="parameter">classdesc</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">protected void <b class="function">writeObjectOverride</b> (Object <i class="parameter">obj</i>) throws IOException;</td><td align="right"><i> empty</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected void <b class="function">writeStreamHeader</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->java.io.OutputStream-->ObjectOutputStream(ObjectOutput(DataOutput),ObjectStreamConstants)</tt>
</p>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">java.awt.AWTEventMulticaster.{save(), saveInternal()}, java.beans.beancontext.BeanContextServicesSupport.bcsPreSerializationHook(), java.beans.beancontext.BeanContextSupport.{bcsPreSerializationHook(), serialize(), writeChildren()}, javax.swing.text.StyleContext.{writeAttributes(), writeAttributeSet()}</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>ObjectOutputStream.PutField</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.io</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-1577"></a><a name="INDEX-1578"></a>
  This class holds values of named fields and allows them to be written
  to an <tt class="literal">ObjectOutputStream</tt> during the process of
  object serialization. It gives the programmer precise control over
  the serialization process and is typically used when the set of
  fields defined by a class do not match the set of fields (and the
  serialization stream format) defined by the original implementation of
  the class. In other words, <tt class="literal">ObjectOutputStream.PutField</tt>
  allows the implementation of a class to change without breaking
  serialization compatibility. </p>
<p>  In order to use the <tt class="literal">PutField</tt> class, you typically
  define a private static <tt class="literal">serialPersistentFields</tt>
  field that refers to an array of <tt class="literal">ObjectStreamField</tt>
  objects. This array defines the set of fields written to the
  <tt class="literal">ObjectOutputStream</tt>, and therefore defines the
  serialization format. If you do not declare a
  <tt class="literal">serialPersistentFields</tt> field, the set of fields
  is all fields of the class, excluding <tt class="literal">static</tt>
  and <tt class="literal">transient</tt> fields. </p>
<p>
<a name="INDEX-1579"></a><a name="INDEX-1580"></a>
  In addition to the <tt class="literal">serialPersistentFields</tt> field,
  your class must also define a private <tt class="literal">writeObject()</tt>
  method that is responsible for the custom serialization of your class. In this method, call the <tt class="literal">putFields()</tt> method of
  <tt class="literal">ObjectOutputStream</tt> to obtain an
  <tt class="literal">ObjectOutputStream.PutField</tt> object. Once you have
  this object, use its various <tt class="literal">put()</tt> methods to
  specify the names and values of the field to be written out. The set
  of named fields should match those specified by
  <tt class="literal">serialPersistentFields</tt>. You may specify the fields
  in any order; the <tt class="literal">PutField</tt> class is responsible for
  writing them out in the correct order. Once you have specified the
  values of all fields, call the <tt class="literal">write()</tt> method of
  your <tt class="literal">PutField</tt> object in order to write the field
  values out to the serialization stream. </p>
<p>  To reverse this custom serialization process, see
  <tt class="literal">ObjectInputStream.GetField</tt>. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public abstract static class <b class="classname">ObjectOutputStream.PutField</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">PutField</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">put</b> (String <i class="parameter">name</i>, long <i class="parameter">value</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">put</b> (String <i class="parameter">name</i>, int <i class="parameter">value</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">put</b> (String <i class="parameter">name</i>, float <i class="parameter">value</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">put</b> (String <i class="parameter">name</i>, Object <i class="parameter">value</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">put</b> (String <i class="parameter">name</i>, double <i class="parameter">value</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">put</b> (String <i class="parameter">name</i>, char <i class="parameter">value</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">put</b> (String <i class="parameter">name</i>, boolean <i class="parameter">value</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">put</b> (String <i class="parameter">name</i>, short <i class="parameter">value</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">put</b> (String <i class="parameter">name</i>, byte <i class="parameter">value</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">write</b> (ObjectOutput <i class="parameter">out</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">ObjectOutputStream.putFields()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>ObjectStreamClass</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.io</b></font></td><td align="right"><font size="+1"><b><i>serializable PJ1.1</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-1581"></a><a name="INDEX-1582"></a><a name="INDEX-1583"></a><a name="INDEX-1584"></a>

  This class represents a class that is being serialized. An
  <tt class="literal">ObjectStreamClass</tt> object contains the name of a class, its
  unique version identifier, and the name and type of the fields that
  constitute the serialization format for the class. <tt class="literal">getSerialVersionUID()</tt> returns a unique version
  identifier for the class. It returns either the value of the
  private <tt class="literal">serialVersionUID</tt> field
  of the class or a computed value that is based upon the
  public API of the class. In Java 1.2 and later, <tt class="literal">getFields()</tt>
  returns an array of <tt class="literal">ObjectStreamField</tt> objects that
  represent the names and types of the fields of the class to be
  serialized. <tt class="literal">getField()</tt> returns a single
  <tt class="literal">ObjectStreamField</tt> object that represents a single
  named field. By default, these methods use all the fields of a class
  except those that are <tt class="literal">static</tt> or
  <tt class="literal">transient</tt>. However, this default set of fields can
  be overridden by declaring a private
  <tt class="literal">serialPersistentFields</tt> field in the class. The
  value of this field should be the desired array of
  <tt class="literal">ObjectStreamField</tt> objects. </p>
<p>
<a name="INDEX-1585"></a><a name="INDEX-1586"></a><tt class="literal">ObjectStreamClass</tt> class does not have a
  constructor; you should use the static <tt class="literal">lookup()</tt> method to
  obtain an <tt class="literal">ObjectStreamClass</tt> object for a given
  <tt class="literal">Class</tt> object. The <tt class="literal">forClass()</tt> instance method
  performs the opposite operation; it returns the <tt class="literal">Class</tt>
  object that corresponds to a given <tt class="literal">ObjectStreamClass</tt>. Most applications never need to use this class. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">ObjectStreamClass</b> implements Serializable {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">No Constructor</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constants</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public static final ObjectStreamField[ ] <b class="function">NO_FIELDS</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Class Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static ObjectStreamClass <b class="function">lookup</b> (Class <i class="parameter">cl</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Class <b class="function">forClass</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public ObjectStreamField <b class="function">getField</b> (String <i class="parameter">name</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public ObjectStreamField[ ] <b class="function">getFields</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">getName</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public long <b class="function">getSerialVersionUID</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Object</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">toString</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->ObjectStreamClass(Serializable)</tt>
</p>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">ObjectInputStream.resolveClass(), ObjectOutputStream.writeClassDescriptor()</tt>
</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">ObjectInputStream.readClassDescriptor(), ObjectInputStream.GetField.getObjectStreamClass(), ObjectStreamClass.lookup()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>ObjectStreamConstants</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.io</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-1587"></a><a name="INDEX-1588"></a>
  This interface defines various constants used by the Java object-serialization mechanism. Two important constants are
  <tt class="literal">PROTOCOL_VERSION_1</tt> and
  <tt class="literal">PROTOCOL_VERSION_2</tt>, which specify the version of
  the serialization protocol to use. In Java 1.2, you can pass either of
  these values to the <tt class="literal">useProtocolVersion()</tt> method of
  an <tt class="literal">ObjectOutputStream</tt>. By default, Java 1.2 uses
  Version 2 of the protocol, and Java 1.1 uses Version 1 when
  serializing objects. Java 1.2 can deserialize objects written using
  either version of the protocol, as can Java 1.1.7 and later. If you
  want to serialize an object so that it can be read by versions of Java
  prior to Java 1.1.7, use <tt class="literal">PROTOCOL_VERSION_1</tt>. </p>
<p>  The other constants defined by this interface are low-level values
  used by the serialization protocol. You do not need to use them
  unless you are reimplementing the serialization mechanism yourself. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public interface <b class="classname">ObjectStreamConstants</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constants</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">baseWireHandle</b> ;</td><td align="right"><i> =8257536</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">PROTOCOL_VERSION_1</b> ;</td><td align="right"><i> =1</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">PROTOCOL_VERSION_2</b> ;</td><td align="right"><i> =2</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final byte <b class="function">SC_BLOCK_DATA</b> ;</td><td align="right"><i> =8</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final byte <b class="function">SC_EXTERNALIZABLE</b> ;</td><td align="right"><i> =4</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final byte <b class="function">SC_SERIALIZABLE</b> ;</td><td align="right"><i> =2</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final byte <b class="function">SC_WRITE_METHOD</b> ;</td><td align="right"><i> =1</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final short <b class="function">STREAM_MAGIC</b> ;</td><td align="right"><i> =-21267</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final short <b class="function">STREAM_VERSION</b> ;</td><td align="right"><i> =5</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final SerializablePermission <b class="function">SUBCLASS_IMPLEMENTATION_PERMISSION</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final SerializablePermission <b class="function">SUBSTITUTION_PERMISSION</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final byte <b class="function">TC_ARRAY</b> ;</td><td align="right"><i> =117</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final byte <b class="function">TC_BASE</b> ;</td><td align="right"><i> =112</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final byte <b class="function">TC_BLOCKDATA</b> ;</td><td align="right"><i> =119</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final byte <b class="function">TC_BLOCKDATALONG</b> ;</td><td align="right"><i> =122</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final byte <b class="function">TC_CLASS</b> ;</td><td align="right"><i> =118</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final byte <b class="function">TC_CLASSDESC</b> ;</td><td align="right"><i> =114</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final byte <b class="function">TC_ENDBLOCKDATA</b> ;</td><td align="right"><i> =120</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final byte <b class="function">TC_EXCEPTION</b> ;</td><td align="right"><i> =123</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.3</span></td><td align="left">public static final byte <b class="function">TC_LONGSTRING</b> ;</td><td align="right"><i> =124</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final byte <b class="function">TC_MAX</b> ;</td><td align="right"><i> =125</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final byte <b class="function">TC_NULL</b> ;</td><td align="right"><i> =112</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final byte <b class="function">TC_OBJECT</b> ;</td><td align="right"><i> =115</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.3</span></td><td align="left">public static final byte <b class="function">TC_PROXYCLASSDESC</b> ;</td><td align="right"><i> =125</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final byte <b class="function">TC_REFERENCE</b> ;</td><td align="right"><i> =113</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final byte <b class="function">TC_RESET</b> ;</td><td align="right"><i> =121</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final byte <b class="function">TC_STRING</b> ;</td><td align="right"><i> =116</i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Implementations: </span><tt class="literal">ObjectInputStream, ObjectOutputStream</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>ObjectStreamException</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.io</b></font></td><td align="right"><font size="+1"><b><i>serializable checked PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1589"></a>
This class is the superclass of a number of more specific
exception types that may be raised in the process of
serializing and deserializing objects with the
<tt class="literal">ObjectOutputStream</tt> and <tt class="literal">ObjectInputStream</tt>
classes. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public abstract class <b class="classname">ObjectStreamException</b> extends IOException {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected <b class="function">ObjectStreamException</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected <b class="function">ObjectStreamException</b> (String <i class="parameter">classname</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Exception-->IOException-->ObjectStreamException</tt>
</p>
<p>
<span class="refsect1">Subclasses: </span><tt class="literal">InvalidClassException, InvalidObjectException, NotActiveException, NotSerializableException, OptionalDataException, StreamCorruptedException, WriteAbortedException</tt>
</p>
<p>
<span class="refsect1">Thrown By: </span><tt class="literal">java.awt.color.ICC_Profile.readResolve(), java.security.cert.Certificate.writeReplace(), java.security.cert.Certificate.CertificateRep.readResolve()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>ObjectStreamField</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.io</b></font></td><td align="right"><font size="+1"><b><i>comparable</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-1590"></a>
  This class represents a named field of a specified type (i.e., a
  specified <tt class="literal">Class</tt>). When a class serializes itself
  by writing a set of fields that are different from the fields it uses
  in its own implementation, it defines the set of fields to be written
  with an array of <tt class="literal">ObjectStreamField</tt> objects. This
  array should be the value of a private static field named
  <tt class="literal">serialPersistentFields</tt>. The methods of this class
  are used internally by the serialization mechanism and are not
  typically used elsewhere. See also
  <tt class="literal">ObjectOutputStream.PutField</tt> and
  <tt class="literal">ObjectInputStream.GetField</tt>. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">ObjectStreamField</b> implements Comparable {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">ObjectStreamField</b> (String <i class="parameter">n</i>, Class <i class="parameter">clazz</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Property Accessor Methods (by property name)</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">getName</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getOffset</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">isPrimitive</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Class <b class="function">getType</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public char <b class="function">getTypeCode</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">getTypeString</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Methods Implementing Comparable</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">compareTo</b> (Object <i class="parameter">o</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Object</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">toString</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected void <b class="function">setOffset</b> (int <i class="parameter">offset</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->ObjectStreamField(Comparable)</tt>
</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">ObjectStreamClass.{getField(), getFields()}</tt>
</p>
<p>
<span class="refsect1">Type Of: </span><tt class="literal">ObjectStreamClass.NO_FIELDS</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>OptionalDataException</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.io</b></font></td><td align="right"><font size="+1"><b><i>serializable checked PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1591"></a><a name="INDEX-1592"></a>
Thrown by the <tt class="literal">readObject()</tt> method
of an <tt class="literal">ObjectInputStream</tt> when it encounters primitive
type data where it expects object data. Despite the
exception name, this data is not optional, and object
deserialization is stopped. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">OptionalDataException</b> extends ObjectStreamException {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">No Constructor</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Fields</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">eof</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">length</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Exception-->IOException-->ObjectStreamException-->OptionalDataException</tt>
</p>
<p>
<span class="refsect1">Thrown By: </span><tt class="literal">ObjectInputStream.{readObject(), readObjectOverride()}</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>OutputStream</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.io</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1593"></a>

This abstract class is the superclass of all output streams. It defines the basic output methods all output stream
classes provide. <a name="INDEX-1594"></a><a name="INDEX-1595"></a><a name="INDEX-1596"></a><tt class="literal">write()</tt> writes a single byte or an array (or subarray)
of bytes. <tt class="literal">flush()</tt> forces any buffered output to be
written. <tt class="literal">close()</tt> closes the stream and frees up any
system resources associated with it. The stream may not be
used once <tt class="literal">close()</tt> has been called. See also <tt class="literal">Writer</tt>. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public abstract class <b class="classname">OutputStream</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">OutputStream</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">close</b> () throws IOException;</td><td align="right"><i> empty</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">flush</b> () throws IOException;</td><td align="right"><i> empty</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">write</b> (int <i class="parameter">b</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">write</b> (byte[ ] <i class="parameter">b</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">write</b> (byte[ ] <i class="parameter">b</i>, int <i class="parameter">off</i>, int <i class="parameter">len</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Subclasses: </span><tt class="literal">ByteArrayOutputStream, FileOutputStream, FilterOutputStream, ObjectOutputStream, PipedOutputStream, javax.servlet.ServletOutputStream, org.omg.CORBA.portable.OutputStream</tt>
</p>
<p>
<span class="refsect1">Passed To: </span>Too many methods to list. </p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">Process.getOutputStream(), Runtime.getLocalizedOutputStream(), java.net.Socket.getOutputStream(), java.net.SocketImpl.getOutputStream(), java.net.URLConnection.getOutputStream(), java.rmi.server.LogStream.getOutputStream()</tt>
</p>
<p>
<span class="refsect1">Type Of: </span><tt class="literal">FilterOutputStream.out</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>OutputStreamWriter</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.io</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1597"></a><a name="INDEX-1598"></a>
This class is a character output stream that uses a byte
output stream as the destination for its data. When
characters are written to an <tt class="literal">OutputStreamWriter</tt>, it
translates them into bytes according to a particular locale-
and/or platform-specific character encoding and writes those
bytes to the specified <tt class="literal">OutputStream</tt>. This is a very
important internationalization feature in Java 1.1 and later. <a name="INDEX-1599"></a><tt class="literal">OutputStreamWriter</tt> supports the usual <tt class="literal">Writer</tt>
methods. It also has a <tt class="literal">getEncoding()</tt> method that
returns the name of the encoding being used to convert
characters to bytes. </p>
<p>When you create an <tt class="literal">OutputStreamWriter</tt>, specify
the <tt class="literal">OutputStream</tt> to which it writes bytes and,
optionally, the name of the character encoding
that should be used to convert characters to bytes. If you
do not specify an encoding name, the
<tt class="literal">OutputStreamWriter</tt> uses the default encoding of
the default locale, which is usually the correct thing to
do. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">OutputStreamWriter</b> extends Writer {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">OutputStreamWriter</b> (java.io.OutputStream <i class="parameter">out</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">OutputStreamWriter</b> (java.io.OutputStream <i class="parameter">out</i>, String <i class="parameter">enc</i>) throws UnsupportedEncodingException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">getEncoding</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Writer</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">close</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">flush</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">write</b> (int <i class="parameter">c</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">write</b> (char[ ] <i class="parameter">cbuf</i>, int <i class="parameter">off</i>, int <i class="parameter">len</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">write</b> (String <i class="parameter">str</i>, int <i class="parameter">off</i>, int <i class="parameter">len</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Writer-->OutputStreamWriter</tt>
</p>
<p>
<span class="refsect1">Subclasses: </span><tt class="literal">FileWriter</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>PipedInputStream</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.io</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1600"></a><a name="INDEX-1601"></a><a name="INDEX-1602"></a>

This class is an <tt class="literal">InputStream</tt> that implements one half of 
a pipe and is useful for communication between
threads. A <tt class="literal">PipedInputStream</tt> must be connected to a
<tt class="literal">PipedOutputStream</tt> object, which may be specified
when the <tt class="literal">PipedInputStream</tt> is created or with the
<tt class="literal">connect()</tt> method. Data read from a
<tt class="literal">PipedInputStream</tt> object is received from the
<tt class="literal">PipedOutputStream</tt> to which it is connected. See <tt class="literal">InputStream</tt> for information on the low-level
methods for reading data from a <tt class="literal">PipedInputStream</tt>. A
<tt class="literal">FilterInputStream</tt> can provide a
higher-level interface for reading data from a
<tt class="literal">PipedInputStream</tt>. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">PipedInputStream</b> extends java.io.InputStream {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">PipedInputStream</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">PipedInputStream</b> (PipedOutputStream <i class="parameter">src</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Constants</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">protected static final int <b class="function">PIPE_SIZE</b> ;</td><td align="right"><i> =1024</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">connect</b> (PipedOutputStream <i class="parameter">src</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding InputStream</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">available</b> () throws IOException;</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">close</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">read</b> () throws IOException;</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">read</b> (byte[ ] <i class="parameter">b</i>, int <i class="parameter">off</i>, int <i class="parameter">len</i>) throws IOException;</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected void <b class="function">receive</b> (int <i class="parameter">b</i>) throws IOException;</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Instance Fields</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected byte[ ] <b class="function">buffer</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected int <b class="function">in</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected int <b class="function">out</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->java.io.InputStream-->PipedInputStream</tt>
</p>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">PipedOutputStream.{connect(), PipedOutputStream()}</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>PipedOutputStream</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.io</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1603"></a><a name="INDEX-1604"></a><a name="INDEX-1605"></a>

This class is an <tt class="literal">OutputStream</tt> that implements one
half of a pipe and is useful for communication between
threads. A <tt class="literal">PipedOutputStream</tt> must be connected to a
<tt class="literal">PipedInputStream</tt>, which may be specified when the
<tt class="literal">PipedOutputStream</tt> is created or with the
<tt class="literal">connect()</tt> method. Data written to the
<tt class="literal">PipedOutputStream</tt> is available for reading on
the <tt class="literal">PipedInputStream</tt>. See <tt class="literal">OutputStream</tt> for information on the low-level
methods for writing data to a <tt class="literal">PipedOutputStream</tt>. A
<tt class="literal">FilterOutputStream</tt> can provide a
higher-level interface for writing data to a
<tt class="literal">PipedOutputStream</tt>. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">PipedOutputStream</b> extends java.io.OutputStream {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">PipedOutputStream</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">PipedOutputStream</b> (PipedInputStream <i class="parameter">snk</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">connect</b> (PipedInputStream <i class="parameter">snk</i>) throws IOException;</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding OutputStream</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">close</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">flush</b> () throws IOException;</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">write</b> (int <i class="parameter">b</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">write</b> (byte[ ] <i class="parameter">b</i>, int <i class="parameter">off</i>, int <i class="parameter">len</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->java.io.OutputStream-->PipedOutputStream</tt>
</p>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">PipedInputStream.{connect(), PipedInputStream()}</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>PipedReader</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.io</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1606"></a><a name="INDEX-1607"></a><tt class="literal">PipedReader</tt> is a character input stream that reads
characters from a <tt class="literal">PipedWriter</tt> character output
stream to which it is connected. <tt class="literal">PipedReader</tt>
implements one half of a pipe and is useful for
communication between two threads of an application. A <tt class="literal">PipedReader</tt> cannot be used until it is connected
to a <tt class="literal">PipedWriter</tt> object, which may be passed to the
<tt class="literal">PipedReader()</tt> constructor or to the
<tt class="literal">connect()</tt> method. <tt class="literal">PipedReader</tt> inherits most of the methods of its
superclass. See <tt class="literal">Reader</tt> for more information. <tt class="literal">PipedReader</tt> is the character-stream analog of
<tt class="literal">PipedInputStream</tt>. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">PipedReader</b> extends Reader {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">PipedReader</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">PipedReader</b> (PipedWriter <i class="parameter">src</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">connect</b> (PipedWriter <i class="parameter">src</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Reader</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">close</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public int <b class="function">read</b> () throws IOException;</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">read</b> (char[ ] <i class="parameter">cbuf</i>, int <i class="parameter">off</i>, int <i class="parameter">len</i>) throws IOException;</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public boolean <b class="function">ready</b> () throws IOException;</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Reader-->PipedReader</tt>
</p>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">PipedWriter.{connect(), PipedWriter()}</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>PipedWriter</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.io</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1608"></a><a name="INDEX-1609"></a><tt class="literal">PipedWriter</tt> is a character output stream that writes
characters to the <tt class="literal">PipedReader</tt> character input stream
to which it is connected. <tt class="literal">PipedWriter</tt> implements
one half of a pipe and is useful for communication between
two threads of an application. A <tt class="literal">PipedWriter</tt> cannot be used until it is connected
to a <tt class="literal">PipedReader</tt> object, which may be passed to the
<tt class="literal">PipedWriter()</tt> constructor, or to the
<tt class="literal">connect()</tt> method. <tt class="literal">PipedWriter</tt> inherits most of the methods of its
superclass. See <tt class="literal">Writer</tt> for more information. <tt class="literal">PipedWriter</tt> is the character-stream analog of
<tt class="literal">PipedOutputStream</tt>. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">PipedWriter</b> extends Writer {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">PipedWriter</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">PipedWriter</b> (PipedReader <i class="parameter">snk</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">connect</b> (PipedReader <i class="parameter">snk</i>) throws IOException;</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Writer</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">close</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">flush</b> () throws IOException;</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public void <b class="function">write</b> (int <i class="parameter">c</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">write</b> (char[ ] <i class="parameter">cbuf</i>, int <i class="parameter">off</i>, int <i class="parameter">len</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Writer-->PipedWriter</tt>
</p>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">PipedReader.{connect(), PipedReader()}</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>PrintStream</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.io</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1610"></a><a name="INDEX-1611"></a><a name="INDEX-1612"></a>
This class is a <tt class="literal">FilterOutputStream</tt> that implements a
number of methods for displaying textual representations of
Java primitive data types. The <tt class="literal">print()</tt> methods
output standard textual representations of each data type. The <tt class="literal">println()</tt> methods do the same and follow the
representations with newlines. Each method converts a 
Java primitive type to a <tt class="literal">String</tt> representation and
outputs the resulting string. When an <tt class="literal">Object</tt> is
passed to a <tt class="literal">print()</tt> or <tt class="literal">println()</tt>, it is
converted to a <tt class="literal">String</tt> by calling its
<tt class="literal">toString()</tt> method. <a name="INDEX-1613"></a><tt class="literal">PrintStream</tt> is the <tt class="literal">OutputStream</tt> type that
makes it easiest to output text. As such, it is the most
commonly used of the output streams. The <tt class="literal">System.out</tt>
variable is a <tt class="literal">PrintStream</tt>. </p>
<p>
<a name="INDEX-1614"></a>
Note that in Java 1.0 this class does not handle Unicode
characters correctly; it discards the top 8 bits of all
16-bit characters and thus works only with Latin-1
(ISO8859-1) characters. Although this problem has been
fixed as of Java 1.1, <tt class="literal">PrintStream</tt> has been superseded
by <tt class="literal">PrintWriter</tt> as of Java 1.1. The constructors of
this class have been deprecated, but the class itself has
not, because it is still used by the <tt class="literal">System.out</tt>
and <tt class="literal">System.err</tt> standard output streams. </p>
<p>
<tt class="literal">PrintStream</tt>, and its <tt class="literal">PrintWriter</tt>
replacement, output textual representations of Java data
types. Use <tt class="literal">DataOutputStream</tt> to output binary
representations of data. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">PrintStream</b> extends FilterOutputStream {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">PrintStream</b> (java.io.OutputStream <i class="parameter">out</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">PrintStream</b> (java.io.OutputStream <i class="parameter">out</i>, boolean <i class="parameter">autoFlush</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">checkError</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">print</b> (long <i class="parameter">l</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">print</b> (int <i class="parameter">i</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">print</b> (char <i class="parameter">c</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">print</b> (float <i class="parameter">f</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">print</b> (String <i class="parameter">s</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">print</b> (Object <i class="parameter">obj</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">print</b> (double <i class="parameter">d</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">print</b> (char[ ] <i class="parameter">s</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">print</b> (boolean <i class="parameter">b</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">println</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">println</b> (long <i class="parameter">x</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">println</b> (float <i class="parameter">x</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">println</b> (char <i class="parameter">x</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">println</b> (int <i class="parameter">x</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">println</b> (String <i class="parameter">x</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">println</b> (Object <i class="parameter">x</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">println</b> (double <i class="parameter">x</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">println</b> (char[ ] <i class="parameter">x</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">println</b> (boolean <i class="parameter">x</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding FilterOutputStream</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">close</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">flush</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">write</b> (int <i class="parameter">b</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">write</b> (byte[ ] <i class="parameter">buf</i>, int <i class="parameter">off</i>, int <i class="parameter">len</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">protected void <b class="function">setError</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->java.io.OutputStream-->FilterOutputStream-->PrintStream</tt>
</p>
<p>
<span class="refsect1">Subclasses: </span><tt class="literal">java.rmi.server.LogStream</tt>
</p>
<p>
<span class="refsect1">Passed To: </span>Too many methods to list. </p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">java.rmi.server.LogStream.getDefaultStream(), java.rmi.server.RemoteServer.getLog(), java.sql.DriverManager.getLogStream(), javax.swing.DebugGraphics.logStream()</tt>
</p>
<p>
<span class="refsect1">Type Of: </span><tt class="literal">System.{err, out}</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>PrintWriter</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.io</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1615"></a><a name="INDEX-1616"></a><a name="INDEX-1617"></a><a name="INDEX-1618"></a>
This class is a character output stream that implements a
number of <tt class="literal">print()</tt> and <tt class="literal">println()</tt> methods that
output textual representations of primitive values and
objects. When you create a <tt class="literal">PrintWriter</tt> object, you
specify a character or byte output stream that it should
write its characters to and, optionally, whether
the <tt class="literal">PrintWriter</tt> stream should be automatically
flushed whenever <tt class="literal">println()</tt> is called. If you specify
a byte output stream as the destination, the
<tt class="literal">PrintWriter()</tt> constructor automatically creates
the necessary <tt class="literal">OutputStreamWriter</tt> object to convert
characters to bytes using the default encoding. </p>
<p>
<a name="INDEX-1619"></a><a name="INDEX-1620"></a><a name="INDEX-1621"></a><tt class="literal">PrintWriter</tt> implements the normal <tt class="literal">write()</tt>,
<tt class="literal">flush()</tt>, and <tt class="literal">close()</tt> methods all
<tt class="literal">Writer</tt> subclasses define. It is more common to use
the higher-level <tt class="literal">print()</tt> and <tt class="literal">println()</tt>
methods, each of which converts its argument to a string
before outputting it. <tt class="literal">println()</tt> can also terminate the line (and optionally flush
the buffer) after printing its argument. </p>
<p>
<a name="INDEX-1622"></a>
The methods of <tt class="literal">PrintWriter</tt> never throw exceptions. Instead, when errors occur, they set an internal flag you can check by calling <tt class="literal">checkError()</tt>. <tt class="literal">checkError()</tt> first flushes the internal stream and
then returns <tt class="literal">true</tt> if any exception has occurred
while writing values to that stream. Once an error has


occurred on a <tt class="literal">PrintWriter</tt> object, all subsequent
calls to <tt class="literal">checkError()</tt> return <tt class="literal">true</tt>;
there is no way to reset the error flag. </p>
<p>
<tt class="literal">PrintWriter</tt> is the character stream analog to
<tt class="literal">PrintStream</tt>, which it supersedes. You can usually
trivially replace any <tt class="literal">PrintStream</tt> objects in a
program with <tt class="literal">PrintWriter</tt> objects. This is
particularly important for internationalized programs. The
only valid remaining use for the <tt class="literal">PrintStream</tt> class
is for the <tt class="literal">System.out</tt> and <tt class="literal">System.err</tt>
standard output streams. See <tt class="literal">PrintStream</tt> for
details. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">PrintWriter</b> extends Writer {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">PrintWriter</b> (java.io.OutputStream <i class="parameter">out</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">PrintWriter</b> (Writer <i class="parameter">out</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">PrintWriter</b> (java.io.OutputStream <i class="parameter">out</i>, boolean <i class="parameter">autoFlush</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">PrintWriter</b> (Writer <i class="parameter">out</i>, boolean <i class="parameter">autoFlush</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">checkError</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">print</b> (int <i class="parameter">i</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">print</b> (long <i class="parameter">l</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">print</b> (boolean <i class="parameter">b</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">print</b> (char <i class="parameter">c</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">print</b> (double <i class="parameter">d</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">print</b> (char[ ] <i class="parameter">s</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">print</b> (String <i class="parameter">s</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">print</b> (float <i class="parameter">f</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">print</b> (Object <i class="parameter">obj</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">println</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">println</b> (int <i class="parameter">x</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">println</b> (long <i class="parameter">x</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">println</b> (boolean <i class="parameter">x</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">println</b> (char <i class="parameter">x</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">println</b> (String <i class="parameter">x</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">println</b> (Object <i class="parameter">x</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">println</b> (char[ ] <i class="parameter">x</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">println</b> (float <i class="parameter">x</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">println</b> (double <i class="parameter">x</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Writer</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">close</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">flush</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">write</b> (char[ ] <i class="parameter">buf</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">write</b> (String <i class="parameter">s</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">write</b> (int <i class="parameter">c</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">write</b> (String <i class="parameter">s</i>, int <i class="parameter">off</i>, int <i class="parameter">len</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">write</b> (char[ ] <i class="parameter">buf</i>, int <i class="parameter">off</i>, int <i class="parameter">len</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected void <b class="function">setError</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Instance Fields</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected Writer <b class="function">out</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Writer-->PrintWriter</tt>
</p>
<p>
<span class="refsect1">Passed To: </span>Too many methods to list. </p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">java.sql.DriverManager.getLogWriter(), javax.servlet.ServletResponse.getWriter(), javax.sql.ConnectionPoolDataSource.getLogWriter(), javax.sql.DataSource.getLogWriter(), javax.sql.XADataSource.getLogWriter()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>PushbackInputStream</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.io</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1623"></a><a name="INDEX-1624"></a><a name="INDEX-1625"></a>

This class is a <tt class="literal">FilterInputStream</tt> that implements a
one-byte pushback buffer or, as of Java 1.1, a pushback buffer of a
specified length. The <tt class="literal">unread()</tt> methods
push bytes back into the stream; these bytes
are the first ones read by the next call to a
<tt class="literal">read()</tt> method. This class is sometimes useful when
writing parsers. See also <tt class="literal">PushbackReader</tt>. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">PushbackInputStream</b> extends FilterInputStream {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">PushbackInputStream</b> (java.io.InputStream <i class="parameter">in</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public <b class="function">PushbackInputStream</b> (java.io.InputStream <i class="parameter">in</i>, int <i class="parameter">size</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">unread</b> (int <i class="parameter">b</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public void <b class="function">unread</b> (byte[ ] <i class="parameter">b</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public void <b class="function">unread</b> (byte[ ] <i class="parameter">b</i>, int <i class="parameter">off</i>, int <i class="parameter">len</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding FilterInputStream</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">available</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public void <b class="function">close</b> () throws IOException;</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">markSupported</b> ();</td><td align="right"><i> constant</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">read</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">read</b> (byte[ ] <i class="parameter">b</i>, int <i class="parameter">off</i>, int <i class="parameter">len</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public long <b class="function">skip</b> (long <i class="parameter">n</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Instance Fields</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">protected byte[ ] <b class="function">buf</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">protected int <b class="function">pos</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->java.io.InputStream-->FilterInputStream-->PushbackInputStream</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>PushbackReader</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.io</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1626"></a><a name="INDEX-1627"></a>
This class is a character input stream that uses another
input stream as its input source and adds the ability to
push characters back onto the stream. This feature is often
useful when writing parsers. When you create a <tt class="literal">PushbackReader</tt> stream, you specify
the stream to be read from and, optionally, the
size of the pushback buffer (i.e., the number of characters
that may be pushed back onto the stream or unread). If you
do not specify a size for this buffer, the default size is one
character. <a name="INDEX-1628"></a><tt class="literal">PushbackReader</tt> inherits or overrides all standard
<tt class="literal">Reader</tt> methods and adds three <tt class="literal">unread()</tt>
methods that push a single character, an array
of characters, or a portion of an array of characters back
onto the stream. This class is the character stream analog of
<tt class="literal">PushbackInputStream</tt>. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">PushbackReader</b> extends FilterReader {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">PushbackReader</b> (Reader <i class="parameter">in</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">PushbackReader</b> (Reader <i class="parameter">in</i>, int <i class="parameter">size</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">unread</b> (int <i class="parameter">c</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">unread</b> (char[ ] <i class="parameter">cbuf</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">unread</b> (char[ ] <i class="parameter">cbuf</i>, int <i class="parameter">off</i>, int <i class="parameter">len</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding FilterReader</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">close</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public void <b class="function">mark</b> (int <i class="parameter">readAheadLimit</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">markSupported</b> ();</td><td align="right"><i> constant</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">read</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">read</b> (char[ ] <i class="parameter">cbuf</i>, int <i class="parameter">off</i>, int <i class="parameter">len</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">ready</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public void <b class="function">reset</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Reader-->FilterReader-->PushbackReader</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>RandomAccessFile</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.io</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1(opt)</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1629"></a><a name="INDEX-1630"></a>

This class allows you to read and write arbitrary bytes,
text, and primitive Java data types from or to any specified
location in a file. Because this class provides random,
rather than sequential, access to files, it is neither a
subclass of <tt class="literal">InputStream</tt> nor of <tt class="literal">OutputStream</tt>,
but provides an entirely independent method for reading and
writing data from or to files. <tt class="literal">RandomAccessFile</tt>
implements the same interfaces as <tt class="literal">DataInputStream</tt>
and <tt class="literal">DataOutputStream</tt>, and thus defines the same
methods for reading and writing data as those classes do. </p>
<p>
<a name="INDEX-1631"></a>
The <tt class="literal">seek()</tt> method provides random
access to the file; it is used to select the position in the
file where data should be read or written. The <em class="replaceable">mode</em> argument to the constructor methods should
be "r" for a file that
is to be read-only or "rw" for a
file that is to be written (and perhaps read as well). </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">RandomAccessFile</b> implements DataInputDataOutput {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">RandomAccessFile</b> (String <i class="parameter">name</i>, String <i class="parameter">mode</i>) throws FileNotFoundException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">RandomAccessFile</b> (File <i class="parameter">file</i>, String <i class="parameter">mode</i>) throws FileNotFoundException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">close</b> () throws IOException;</td><td align="right"><i> native</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final FileDescriptor <b class="function">getFD</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public long <b class="function">getFilePointer</b> () throws IOException;</td><td align="right"><i> native</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public long <b class="function">length</b> () throws IOException;</td><td align="right"><i> native</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">read</b> () throws IOException;</td><td align="right"><i> native</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">read</b> (byte[ ] <i class="parameter">b</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">read</b> (byte[ ] <i class="parameter">b</i>, int <i class="parameter">off</i>, int <i class="parameter">len</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">seek</b> (long <i class="parameter">pos</i>) throws IOException;</td><td align="right"><i> native</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public void <b class="function">setLength</b> (long <i class="parameter">newLength</i>) throws IOException;</td><td align="right"><i> native</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Methods Implementing DataInput</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final boolean <b class="function">readBoolean</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final byte <b class="function">readByte</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final char <b class="function">readChar</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final double <b class="function">readDouble</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final float <b class="function">readFloat</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final void <b class="function">readFully</b> (byte[ ] <i class="parameter">b</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final void <b class="function">readFully</b> (byte[ ] <i class="parameter">b</i>, int <i class="parameter">off</i>, int <i class="parameter">len</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final int <b class="function">readInt</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final String <b class="function">readLine</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final long <b class="function">readLong</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final short <b class="function">readShort</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final int <b class="function">readUnsignedByte</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final int <b class="function">readUnsignedShort</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final String <b class="function">readUTF</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">skipBytes</b> (int <i class="parameter">n</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Methods Implementing DataOutput</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">write</b> (int <i class="parameter">b</i>) throws IOException;</td><td align="right"><i> native</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">write</b> (byte[ ] <i class="parameter">b</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">write</b> (byte[ ] <i class="parameter">b</i>, int <i class="parameter">off</i>, int <i class="parameter">len</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final void <b class="function">writeBoolean</b> (boolean <i class="parameter">v</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final void <b class="function">writeByte</b> (int <i class="parameter">v</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final void <b class="function">writeBytes</b> (String <i class="parameter">s</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final void <b class="function">writeChar</b> (int <i class="parameter">v</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final void <b class="function">writeChars</b> (String <i class="parameter">s</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final void <b class="function">writeDouble</b> (double <i class="parameter">v</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final void <b class="function">writeFloat</b> (float <i class="parameter">v</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final void <b class="function">writeInt</b> (int <i class="parameter">v</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final void <b class="function">writeLong</b> (long <i class="parameter">v</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final void <b class="function">writeShort</b> (int <i class="parameter">v</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final void <b class="function">writeUTF</b> (String <i class="parameter">str</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->RandomAccessFile(DataInput,DataOutput)</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>Reader</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.io</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1632"></a>
This abstract class is the superclass of all character input
streams. It is an analog to <tt class="literal">InputStream</tt>, which is
the superclass of all byte input streams. <tt class="literal">Reader</tt>
defines the basic methods that all character output streams
provide. <a name="INDEX-1633"></a><a name="INDEX-1634"></a><tt class="literal">read()</tt> returns a single character or an array (or
subarray) of characters, blocking if necessary; it returns
-1 if the end of the stream has been reached. <tt class="literal">ready()</tt> returns <tt class="literal">true</tt> if there are characters
available for reading. If <tt class="literal">ready()</tt> returns
<tt class="literal">true</tt>, the next call to <tt class="literal">read()</tt> is
guaranteed not to block. <tt class="literal">close()</tt> closes the
<a name="INDEX-1635"></a><a name="INDEX-1636"></a>
character input stream. <tt class="literal">skip()</tt> skips a specified
number of characters in the input stream. If
<a name="INDEX-1637"></a><a name="INDEX-1638"></a><a name="INDEX-1639"></a><tt class="literal">markSupported()</tt> returns <tt class="literal">true</tt>, 
<tt class="literal">mark()</tt> marks a position in the stream and, if
necessary, creates a look-ahead buffer of the specified size. Future calls to <tt class="literal">reset()</tt> restore the stream to
the marked position if they occur within the specified
look-ahead limit. Note that not all stream types support
this mark-and-reset functionality. To create a subclass of <tt class="literal">Reader</tt>, you need only
implement the three-argument version of <tt class="literal">read()</tt> and
the <tt class="literal">close()</tt> method. Most subclasses implement additional
methods, however. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public abstract class <b class="classname">Reader</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected <b class="function">Reader</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected <b class="function">Reader</b> (Object <i class="parameter">lock</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">close</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">mark</b> (int <i class="parameter">readAheadLimit</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">markSupported</b> ();</td><td align="right"><i> constant</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">read</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">read</b> (char[ ] <i class="parameter">cbuf</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract int <b class="function">read</b> (char[ ] <i class="parameter">cbuf</i>, int <i class="parameter">off</i>, int <i class="parameter">len</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">ready</b> () throws IOException;</td><td align="right"><i> constant</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">reset</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public long <b class="function">skip</b> (long <i class="parameter">n</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Instance Fields</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected Object <b class="function">lock</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Subclasses: </span><tt class="literal">BufferedReader, CharArrayReader, FilterReader, InputStreamReader, PipedReader, StringReader</tt>
</p>
<p>
<span class="refsect1">Passed To: </span>Too many methods to list. </p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">java.awt.datatransfer.DataFlavor.getReaderForText(), java.sql.Clob.getCharacterStream(), java.sql.ResultSet.getCharacterStream(), java.sql.SQLInput.readCharacterStream()</tt>
</p>
<p>
<span class="refsect1">Type Of: </span><tt class="literal">FilterReader.in</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>SequenceInputStream</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.io</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1640"></a><a name="INDEX-1641"></a>

This class provides a way of seamlessly concatenating the
data from two or more input streams. It provides an
<tt class="literal">InputStream</tt> interface to a sequence of
<tt class="literal">InputStream</tt> objects. Data is read from the streams
in the order in which the streams are specified. When the end
of one stream is reached, data is automatically read from
the next stream. This class might be useful, for example,
when implementing an include file facility for a parser of
some sort. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">SequenceInputStream</b> extends java.io.InputStream {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">SequenceInputStream</b> (java.util.Enumeration <i class="parameter">e</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">SequenceInputStream</b> (java.io.InputStream <i class="parameter">s1</i>, java.io.InputStream <i class="parameter">s2</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding InputStream</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public int <b class="function">available</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">close</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">read</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">read</b> (byte[ ] <i class="parameter">b</i>, int <i class="parameter">off</i>, int <i class="parameter">len</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->java.io.InputStream-->SequenceInputStream</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>Serializable</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.io</b></font></td><td align="right"><font size="+1"><b><i>serializable PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1642"></a><a name="INDEX-1643"></a>
The <tt class="literal">Serializable</tt> interface defines no methods or
constants. A class should implement this interface simply
to indicate that it allows itself to be serialized
and deserialized with
<a name="INDEX-1644"></a><a name="INDEX-1645"></a><tt class="literal">ObjectOutputStream.writeObject()</tt> and
<tt class="literal">ObjectInputStream.readObject()</tt>. </p>
<p>Objects that need special handling during
serialization or deserialization may implement one or both
of the following methods. Note, however, that these methods
are not part of the <tt class="literal">Serializable</tt> interface:</p>

<blockquote>
<pre class="programlisting">private void writeObject(java.io.ObjectOutputStream out) throws IOException;
private void readObject(java.io.ObjectInputStream in) throws IOException, ClassNotFoundException;</pre>
</blockquote>

<p>
<a name="INDEX-1646"></a><a name="INDEX-1647"></a>
Typically, the <tt class="literal">writeObject()</tt> method performs any
necessary cleanup or preparation for serialization,
invokes the <tt class="literal">defaultWriteObject()</tt> method of the
<tt class="literal">ObjectOutputStream</tt> to serialize the
non-transient fields of the class, and
optionally writes any additional data that is required. Similarly, the <tt class="literal">readObject()</tt> method typically
invokes the <tt class="literal">defaultReadObject()</tt> method of the
<tt class="literal">ObjectInputStream</tt>, reads any additional data
written by the corresponding <tt class="literal">writeObject()</tt> method,
and performs any extra initialization required by the
object. The <tt class="literal">readObject()</tt> method may also register
an <tt class="literal">ObjectInputValidation</tt> object to validate the
object once it is completely deserialized. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public interface <b class="classname">Serializable</b>  {</td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Implementations: </span>Too many classes to list. </p>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">java.security.SignedObject.SignedObject(), javax.crypto.SealedObject.SealedObject(), javax.jms.ObjectMessage.setObject(), javax.jms.Session.createObjectMessage(), org.omg.CORBA.Any.insert_Value(), org.omg.CORBA.DataOutputStream.write_Value(), org.omg.CORBA.DynAny.insert_val(), org.omg.CORBA.StreamingPolicy.marshal(), org.omg.CORBA.StringValueHelper.write_value(), org.omg.CORBA.ValueBaseHelper.{insert(), write()}, org.omg.CORBA.ValueBaseHolder.ValueBaseHolder(), org.omg.CORBA.WStringValueHelper.write_value(), org.omg.CORBA.portable.BoxedValueHelper.write_value()</tt>
</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">java.beans.beancontext.BeanContextSupport.getChildSerializable(), javax.jms.ObjectMessage.getObject(), org.omg.CORBA.Any.extract_Value(), org.omg.CORBA.DataInputStream.read_Value(), org.omg.CORBA.DynAny.get_val(), org.omg.CORBA.StreamingPolicy.unmarshal(), org.omg.CORBA.StringValueHelper.read_value(), org.omg.CORBA.ValueBaseHelper.{extract(), read()}, org.omg.CORBA.WStringValueHelper.read_value(), org.omg.CORBA.portable.BoxedValueHelper.read_value(), org.omg.CORBA.portable.ValueFactory.read_value()</tt>
</p>
<p>
<span class="refsect1">Type Of: </span><tt class="literal">org.omg.CORBA.ValueBaseHolder.value</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>SerializablePermission</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.io</b></font></td><td align="right"><font size="+1"><b><i>serializable permission</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-1648"></a><a name="INDEX-1649"></a>
  This class is a <tt class="literal">java.security.Permission</tt> that
  governs the use of certain sensitive features of serialization. <tt class="literal">SerializablePermission</tt> objects have a name, or
  target, but do not have an action list. The name
  "enableSubclassImplementation" 
  represents permission to serialize and
  deserialize objects using subclasses of
  <tt class="literal">ObjectOutputStream</tt> and
  <tt class="literal">ObjectInputStream</tt>. This capability is protected by
  a permission because malicious code can define object stream
  subclasses that incorrectly serialize and deserialize objects. </p>
<p>
<a name="INDEX-1650"></a><a name="INDEX-1651"></a>
  The only other name supported by
  <tt class="literal">SerializablePermission</tt> is 
  "enableSubstitution",
  which represents permission for one object to be substituted for
  another during serialization or deserialization. The
  <tt class="literal">ObjectOutputStream.enableReplaceObject()</tt> and
  <tt class="literal">ObjectInputStream.enableResolveObject()</tt> methods
  require a permission of this type. </p>
<p>  Applications never need to use this class. Programmers writing
  system-level code may use it, and system adminstrators configuring
  security policies should be familiar with it. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public final class <b class="classname">SerializablePermission</b> extends java.security.BasicPermission {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">SerializablePermission</b> (String <i class="parameter">name</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">SerializablePermission</b> (String <i class="parameter">name</i>, String <i class="parameter">actions</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->java.security.Permission(java.security.Guard,Serializable)-->java.security.BasicPermission(Serializable)-->SerializablePermission</tt>
</p>
<p>
<span class="refsect1">Type Of: </span><tt class="literal">ObjectStreamConstants.{SUBCLASS_IMPLEMENTATION_PERMISSION, SUBSTITUTION_PERMISSION}</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>StreamCorruptedException</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.io</b></font></td><td align="right"><font size="+1"><b><i>serializable checked PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1652"></a><a name="INDEX-1653"></a><a name="INDEX-1654"></a>
Signals that the data stream being read by an
<tt class="literal">ObjectInputStream</tt> has been corrupted and does not
contain valid serialized object data. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">StreamCorruptedException</b> extends ObjectStreamException {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">StreamCorruptedException</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">StreamCorruptedException</b> (String <i class="parameter">reason</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Exception-->IOException-->ObjectStreamException-->StreamCorruptedException</tt>
</p>
<p>
<span class="refsect1">Thrown By: </span><tt class="literal">ObjectInputStream.{ObjectInputStream(), readStreamHeader()}, java.rmi.server.RemoteCall.getResultStream()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>StreamTokenizer</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.io</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1655"></a><a name="INDEX-1656"></a>

This class performs lexical analysis of a
specified input stream and breaks the input into tokens. It can be extremely useful when writing simple parsers. <tt class="literal">nextToken()</tt> returns the next token in the
stream; this is either one of the constants defined by
the class (which represent end-of-file, end-of-line, a
parsed floating-point number, and a parsed word) or a
character value. <tt class="literal">pushBack()</tt> pushes the token back
<a name="INDEX-1657"></a>
onto the stream, so that it is returned by the next
call to <tt class="literal">nextToken()</tt>. The public variables
<tt class="literal">sval</tt> and <tt class="literal">nval</tt> contain the string and numeric
values (if applicable) of the most recently read token. They
are applicable when the returned token is <tt class="literal">TT_WORD</tt>
or <tt class="literal">TT_NUMBER</tt>. <tt class="literal">lineno()</tt> returns the current
line number. <a name="INDEX-1658"></a>
</p>
<p>
<a name="INDEX-1659"></a><a name="INDEX-1660"></a>
The remaining methods allow you to specify how tokens are
recognized. <tt class="literal">wordChars()</tt>
specifies a range of characters that should be treated as
parts of words. <tt class="literal">whitespaceChars()</tt> specifies a range
of characters that serve to delimit tokens. <a name="INDEX-1661"></a><a name="INDEX-1662"></a><tt class="literal">ordinaryChars()</tt> and <tt class="literal">ordinaryChar()</tt> specify
characters that are never part of tokens and should be
returned as-is. <tt class="literal">resetSyntax()</tt> makes all characters
ordinary. <a name="INDEX-1663"></a><a name="INDEX-1664"></a><tt class="literal">eolIsSignificant()</tt> specifies whether end-of-line is
significant. If so, the <tt class="literal">TT_EOL</tt> constant is
returned for end-of-lines; otherwise, they are treated
as whitespace. <a name="INDEX-1665"></a><a name="INDEX-1666"></a><a name="INDEX-1667"></a><tt class="literal">commentChar()</tt> specifies a character that begins a
comment that lasts until the end of the line. No characters
in the comment are returned. <tt class="literal">slashStarComments()</tt> and <tt class="literal">slashSlashComments()</tt>
specify whether the <tt class="literal">StreamTokenizer</tt> should recognize
C- and C++-style comments. If so, no part of the comment is returned as a token. <a name="INDEX-1668"></a><tt class="literal">quoteChar()</tt> specifies a character used to delimit
strings. When a string token is parsed, the quote character
is returned as the token value, and the body of the
string is stored in the <tt class="literal">sval</tt> variable. <a name="INDEX-1669"></a><tt class="literal">lowerCaseMode()</tt> specifies whether <tt class="literal">TT_WORD</tt>
tokens should be converted to all lowercase characters
before being stored in <tt class="literal">sval</tt>. <a name="INDEX-1670"></a><a name="INDEX-1671"></a><tt class="literal">parseNumbers()</tt> specifies
that the <tt class="literal">StreamTokenizer</tt> should recognize and return
double-precision floating-point number tokens. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">StreamTokenizer</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public <b class="function">StreamTokenizer</b> (Reader <i class="parameter">r</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">#</span></td><td align="left">public <b class="function">StreamTokenizer</b> (java.io.InputStream <i class="parameter">is</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constants</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">TT_EOF</b> ;</td><td align="right"><i> =-1</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">TT_EOL</b> ;</td><td align="right"><i> =10</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">TT_NUMBER</b> ;</td><td align="right"><i> =-2</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">TT_WORD</b> ;</td><td align="right"><i> =-3</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">commentChar</b> (int <i class="parameter">ch</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">eolIsSignificant</b> (boolean <i class="parameter">flag</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">lineno</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">lowerCaseMode</b> (boolean <i class="parameter">fl</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">nextToken</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">ordinaryChar</b> (int <i class="parameter">ch</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">ordinaryChars</b> (int <i class="parameter">low</i>, int <i class="parameter">hi</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">parseNumbers</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">pushBack</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">quoteChar</b> (int <i class="parameter">ch</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">resetSyntax</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">slashSlashComments</b> (boolean <i class="parameter">flag</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">slashStarComments</b> (boolean <i class="parameter">flag</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">whitespaceChars</b> (int <i class="parameter">low</i>, int <i class="parameter">hi</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">wordChars</b> (int <i class="parameter">low</i>, int <i class="parameter">hi</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Object</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">toString</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Fields</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public double <b class="function">nval</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">sval</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">ttype</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>StringBufferInputStream</b></font></td><td align="right"><font size="+1"><b>Java 1.0; Deprecated in Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.io</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1672"></a><a name="INDEX-1673"></a>

This class is a subclass of <tt class="literal">InputStream</tt> in which
input bytes come from the characters of a specified
<tt class="literal">String</tt> object. This class does not correctly convert the characters of a
<tt class="literal">StringBuffer</tt> into bytes and is deprecated as of Java
1.1. Use <tt class="literal">StringReader</tt> instead to convert
characters into bytes or use <tt class="literal">ByteArrayInputStream</tt>
to read bytes from an array of bytes. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">StringBufferInputStream</b> extends java.io.InputStream {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">StringBufferInputStream</b> (String <i class="parameter">s</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding InputStream</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">available</b> ();</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">read</b> ();</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">read</b> (byte[ ] <i class="parameter">b</i>, int <i class="parameter">off</i>, int <i class="parameter">len</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">reset</b> ();</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public long <b class="function">skip</b> (long <i class="parameter">n</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Instance Fields</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected String <b class="function">buffer</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected int <b class="function">count</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected int <b class="function">pos</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->java.io.InputStream-->StringBufferInputStream</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>StringReader</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.io</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1674"></a><a name="INDEX-1675"></a>
This class is a character input stream that uses a
<tt class="literal">String</tt> object as the source of the characters it
returns. When you create a <tt class="literal">StringReader</tt>, you must
specify the <tt class="literal">String</tt> to read from. <a name="INDEX-1676"></a><a name="INDEX-1677"></a><tt class="literal">StringReader</tt> defines the normal <tt class="literal">Reader</tt>
methods and supports <tt class="literal">mark()</tt> and <tt class="literal">reset()</tt>. If <tt class="literal">reset()</tt> is called before <tt class="literal">mark()</tt> has been
called, the stream is reset to the beginning of
the specified string. <tt class="literal">StringReader</tt> is a character stream analog to
<tt class="literal">StringBufferInputStream</tt>, which is deprecated as of Java
1.1. <tt class="literal">StringReader</tt> is also similar to
<tt class="literal">CharArrayReader</tt>. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">StringReader</b> extends Reader {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">StringReader</b> (String <i class="parameter">s</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Reader</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">close</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">mark</b> (int <i class="parameter">readAheadLimit</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">markSupported</b> ();</td><td align="right"><i> constant</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">read</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">read</b> (char[ ] <i class="parameter">cbuf</i>, int <i class="parameter">off</i>, int <i class="parameter">len</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">ready</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">reset</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public long <b class="function">skip</b> (long <i class="parameter">ns</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Reader-->StringReader</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>StringWriter</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.io</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1678"></a><a name="INDEX-1679"></a>
This class is a character output stream that uses an
internal <tt class="literal">StringBuffer</tt> object as the destination of
the characters written to the stream. When you create a
<tt class="literal">StringWriter</tt>, you may optionally specify an initial
size for the <tt class="literal">StringBuffer</tt>, but you do not specify
the <tt class="literal">StringBuffer</tt> itself; it is managed internally
by the <tt class="literal">StringWriter</tt> and grows as necessary to
accommodate the characters written to it. <a name="INDEX-1680"></a><a name="INDEX-1681"></a><a name="INDEX-1682"></a><tt class="literal">StringWriter</tt> defines the standard <tt class="literal">write()</tt>,
<tt class="literal">flush()</tt>, and <tt class="literal">close()</tt> methods all
<tt class="literal">Writer</tt> subclasses define, as well as two methods
to obtain the characters that have been written to the
<a name="INDEX-1683"></a><a name="INDEX-1684"></a>
stream's internal buffer. <tt class="literal">toString()</tt> returns the
contents of the internal buffer as a <tt class="literal">String</tt>, and
<tt class="literal">getBuffer()</tt> returns the buffer itself. Note that
<tt class="literal">getBuffer()</tt> returns a reference to the actual
internal buffer, not a copy of it, so any changes you make
to the buffer are reflected in subsequent calls to
<tt class="literal">toString()</tt>. <tt class="literal">StringWriter</tt> is quite similar to
<tt class="literal">CharArrayWriter</tt>, but does not have a byte-stream
analog. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">StringWriter</b> extends Writer {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">StringWriter</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">StringWriter</b> (int <i class="parameter">initialSize</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public StringBuffer <b class="function">getBuffer</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Writer</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">close</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">flush</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">write</b> (int <i class="parameter">c</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">write</b> (String <i class="parameter">str</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">write</b> (String <i class="parameter">str</i>, int <i class="parameter">off</i>, int <i class="parameter">len</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">write</b> (char[ ] <i class="parameter">cbuf</i>, int <i class="parameter">off</i>, int <i class="parameter">len</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Object</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">toString</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Writer-->StringWriter</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>SyncFailedException</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.io</b></font></td><td align="right"><font size="+1"><b><i>serializable checked PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1685"></a>
Signals that a call to <tt class="literal">FileDescriptor.sync()</tt> did not
complete successfully. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">SyncFailedException</b> extends IOException {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">SyncFailedException</b> (String <i class="parameter">desc</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Exception-->IOException-->SyncFailedException</tt>
</p>
<p>
<span class="refsect1">Thrown By: </span><tt class="literal">FileDescriptor.sync()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>UnsupportedEncodingException</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.io</b></font></td><td align="right"><font size="+1"><b><i>serializable checked PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1686"></a><a name="INDEX-1687"></a>
Signals that a requested character encoding
is not supported by the current Java Virtual Machine. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">UnsupportedEncodingException</b> extends IOException {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">UnsupportedEncodingException</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">UnsupportedEncodingException</b> (String <i class="parameter">s</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Exception-->IOException-->UnsupportedEncodingException</tt>
</p>
<p>
<span class="refsect1">Thrown By: </span><tt class="literal">ByteArrayOutputStream.toString(), InputStreamReader.InputStreamReader(), OutputStreamWriter.OutputStreamWriter(), String.{getBytes(), String()}</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>UTFDataFormatException</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.io</b></font></td><td align="right"><font size="+1"><b><i>serializable checked PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1688"></a><a name="INDEX-1689"></a><a name="INDEX-1690"></a>

An <tt class="literal">IOException</tt> that signals that a malformed UTF-8
string has been encountered by a class that implements the
<tt class="literal">DataInput</tt> interface. UTF-8 is an ASCII-compatible
transformation format for Unicode characters that is often
used to store and transmit Unicode text. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">UTFDataFormatException</b> extends IOException {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">UTFDataFormatException</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">UTFDataFormatException</b> (String <i class="parameter">s</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Exception-->IOException-->UTFDataFormatException</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>WriteAbortedException</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.io</b></font></td><td align="right"><font size="+1"><b><i>serializable checked PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1691"></a>
Thrown when reading a stream of data that
is incomplete because an exception was thrown while it was
being written. The <tt class="literal">detail</tt> field may contain the
exception that terminated the output stream. The
<a name="INDEX-1692"></a><tt class="literal">getMessage()</tt> method has been overridden to include
the message of this <tt class="literal">detail</tt> exception, if any. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">WriteAbortedException</b> extends ObjectStreamException {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">WriteAbortedException</b> (String <i class="parameter">s</i>, Exception <i class="parameter">ex</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Throwable</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">getMessage</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Fields</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Exception <b class="function">detail</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Exception-->IOException-->ObjectStreamException-->WriteAbortedException</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>Writer</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.io</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-1693"></a>
This abstract class is the superclass of all character output streams. It is an analog to <tt class="literal">OutputStream</tt>,
which is the superclass of all byte output streams. <tt class="literal">Writer</tt> defines the basic <tt class="literal">write()</tt>,
<tt class="literal">flush()</tt>, and <tt class="literal">close()</tt> methods all
character output streams provide. <a name="INDEX-1694"></a><a name="INDEX-1695"></a><a name="INDEX-1696"></a>
The five versions of the <tt class="literal">write()</tt> method write a
single character, a character array or subarray, or a
string or substring to the destination of the
stream. The most general version of this method--the one
that writes a specified portion of a character array--is
abstract and must be implemented by all subclasses. By
default, the other <tt class="literal">write()</tt> methods are implemented
in terms of this abstract one. The <tt class="literal">flush()</tt> method is another abstract method
all subclasses must implement. It should force any output
buffered by the stream to be written to its destination. If
that destination is itself a character or byte output
stream, it should invoke the <tt class="literal">flush()</tt> method of the
destination stream as well. The <tt class="literal">close()</tt> method is also abstract. A subclass
must implement this method so that it flushes and then
closes the current stream and also closes whatever
destination stream it is connected to. Once the stream is closed, any future calls to <tt class="literal">write()</tt> or
<tt class="literal">flush()</tt> should throw an <tt class="literal">IOException</tt>. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public abstract class <b class="classname">Writer</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected <b class="function">Writer</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected <b class="function">Writer</b> (Object <i class="parameter">lock</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">close</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">flush</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">write</b> (String <i class="parameter">str</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">write</b> (char[ ] <i class="parameter">cbuf</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">write</b> (int <i class="parameter">c</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">write</b> (String <i class="parameter">str</i>, int <i class="parameter">off</i>, int <i class="parameter">len</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">write</b> (char[ ] <i class="parameter">cbuf</i>, int <i class="parameter">off</i>, int <i class="parameter">len</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Instance Fields</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected Object <b class="function">lock</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Subclasses: </span><tt class="literal">BufferedWriter, CharArrayWriter, FilterWriter, OutputStreamWriter, PipedWriter, PrintWriter, StringWriter</tt>
</p>
<p>
<span class="refsect1">Passed To: </span>Too many methods to list. </p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">javax.swing.text.AbstractWriter.getWriter()</tt>
</p>
<p>
<span class="refsect1">Type Of: </span><tt class="literal">FilterWriter.out, PrintWriter.out</tt>
</p>
</div>
<a name="INDEX-1697"></a>


<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch10_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch10_01.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch12_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch12_01.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">10.1. The java.beans.beancontext Package</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">12. The java.lang Package</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
