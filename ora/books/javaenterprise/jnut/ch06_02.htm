<html>
<head>
<title>JavaBeans Conventions (Java in a Nutshell)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="David Flanagan">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-487-8E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="JavaBeans Conventions">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm" alt="Java Enterprise in a Nutshell"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch06_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch06_01.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch06_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch06_01.htm">Chapter 6: JavaBeans</a></td><td align="right" valign="top" width="172"><a href="ch06_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch06_03.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY --><h2 class="sect1">6.2. JavaBeans Conventions</h2>
<p>
<a name="INDEX-955"></a><a name="INDEX-956"></a><a name="INDEX-957"></a><a name="INDEX-958"></a>

      The JavaBeans component model relies on a number of rules and
      conventions bean developers must follow. These conventions
      are not part of the JavaBeans API itself, but in many ways, they are
      more important to bean developers than the API itself. The
      conventions are sometimes referred to as <em class="emphasis">design</em><em class="emphasis">patterns</em>&#8202;; they
      specify such things as method names and signatures for property
      accessor methods defined by a bean. </p>
<p>
<a name="INDEX-959"></a><a name="INDEX-960"></a>


      The reason for these design patterns is interoperability between
      beans and the beanbox programs that manipulate them. As we've
      seen, beanbox programs may rely on introspection to determine the
      list of properties, events, and methods a bean supports. In order
      for this to work, bean developers must use method names the
      beanbox can recognize. The JavaBeans framework facilitates this
      process by establishing naming conventions. One such convention, for
      example, is that the getter and setter accessor methods for a
      property should begin with <tt class="literal">get</tt> and <tt class="literal">set</tt>. </p>
<p>
<a name="INDEX-961"></a>

      Not all the patterns are absolute requirements. If a bean has
      property accessor methods that do not follow the naming
      conventions, it is possible to use a
      <tt class="literal">PropertyDescriptor</tt> object (specified in a
      <tt class="literal">BeanInfo</tt> class) to indicate the accessor methods for
      the property. Although the
      <tt class="literal">BeanInfo</tt> class provides an alternative to the
      property-accessor-method naming convention, the property accessor
      method must still follow the conventions that specify the number
      and type of its parameters and its return value. </p>
<h3 class="sect2">6.2.1. Beans</h3>
<p>
<a name="INDEX-962"></a>

        A bean itself must adhere to the following conventions:
      </p>
<dl>
<dt>
<b>Class name</b>
</dt>
<dd>
<p>	      There are no restrictions on the class name of a bean. </p>
</dd>
<dt>
<b>Superclass</b>
</dt>
<dd>
<p>	      A bean can extend any other class. Beans are often AWT
	      or Swing components, but there are no restrictions. </p>
</dd>
<dt>
<b>Instantiation</b>
</dt>
<dd>
<p>	      A bean must provide a no-parameter constructor or 
	      a file that contains a serialized instance the
	      beanbox can deserialize for use as a prototype bean, so
	      a beanbox can instantiate the bean. The file that contains the bean should have the same name as
	      the bean, with an extension of <em class="emphasis">.ser</em>. </p>
</dd>
<dt>
<b>Bean name</b>
</dt>
<dd>
<p>	      The name of a bean is the name of the class that
	      implements it or the name of the file that holds
	      the serialized instance of the bean (with the 
	      <em class="emphasis">.ser</em>
	      extension removed and directory separator 
	      (<tt class="literal">/</tt>) characters
	      converted to dot (<tt class="literal">.</tt>) characters). </p>
</dd>
</dl>
<h3 class="sect2">6.2.2. Properties</h3>
<p>
<a name="INDEX-963"></a>

	A bean defines a property <em class="replaceable">p</em> of type
	<em class="replaceable">T</em> if it has accessor methods that
	follow these patterns (if
	<em class="replaceable">T</em> is <tt class="literal">boolean</tt>, 
	a special form of getter method is allowed):
      </p>
<dl>
<dt>
<b>Getter</b>
</dt>
<dd>

<blockquote>
<pre class="programlisting">public <em class="replaceable">T</em> get<em class="replaceable">P</em>()</pre>
</blockquote>
</dd>
<dt>
<b>Boolean getter</b>
</dt>
<dd>
<blockquote>
<pre class="programlisting">public boolean is<em class="replaceable">P</em>()</pre>
</blockquote>
</dd>
<dt>
<b>Setter</b>
</dt>
<dd>
<blockquote>
<pre class="programlisting">public void set<em class="replaceable">P</em>(<em class="replaceable">T</em>)</pre>
</blockquote>
</dd>
<dt>
<b>Exceptions</b>
</dt>
<dd>
<p>	      Property accessor methods can throw any type of checked or
	      unchecked exceptions
	    </p>
</dd>
</dl>
<h3 class="sect2">6.2.3. Indexed Properties</h3>
<p>
<a name="INDEX-964"></a><a name="INDEX-965"></a>


	An indexed property is a property of array
	type that provides accessor methods that get and set the entire
	array, as well as methods that get and set individual elements of
	the array. A bean defines an indexed property
	<em class="replaceable">p</em> of type
	<em class="replaceable">T</em><tt class="literal">[]</tt> if it defines
	the following accessor methods:
      </p>
<dl>
<dt>
<b>Array getter</b>
</dt>
<dd>
<blockquote>
<pre class="programlisting">public <em class="replaceable">T</em>[] get<em class="replaceable">P</em>()</pre>
</blockquote>
</dd>
<dt>
<b>Element getter</b>
</dt>
<dd>
<blockquote>
<pre class="programlisting">public <em class="replaceable">T</em> get<em class="replaceable">P</em>(int)</pre>
</blockquote>
</dd>
<dt>
<b>Array setter</b>
</dt>
<dd>
<blockquote>
<pre class="programlisting">public void set<em class="replaceable">P</em>(<em class="replaceable">T</em>[])</pre>
</blockquote>
</dd>
<dt>
<b>Element setter</b>
</dt>
<dd>
<blockquote>
<pre class="programlisting">public void set<em class="replaceable">P</em>(int,<em class="replaceable">T</em>)</pre>
</blockquote>
</dd>
<dt>
<b>Exceptions</b>
</dt>
<dd>
<p>	      Indexed property accessor methods can throw any type of
	      checked or unchecked exceptions. In particular, they
	      should throw an
	      <tt class="literal">ArrayIndexOutOfBoundsException</tt> if the
	      supplied index is out of bounds. </p>
</dd>
</dl>


<h3 class="sect2">6.2.4. Bound Properties</h3>
<p>
<a name="INDEX-966"></a>
	A bound property is one that generates a
	<tt class="literal">PropertyChangeEvent</tt> when its value changes. Here are the conventions for a bound property:
      </p>
<dl>
<dt>
<b>Accessor methods</b>
</dt>
<dd>
<p>	      The getter and setter methods for a bound property follow
	      the same conventions as a regular property. </p>
</dd>
<dt>
<b>Introspection</b>
</dt>
<dd>
<p>	      A beanbox cannot distinguish a bound property from a
	      nonbound property through introspection alone. Therefore, you may want to implement a
	      <tt class="literal">BeanInfo</tt> class that returns a
	      <tt class="literal">PropertyDescriptor</tt> object for the
	      property. The <tt class="literal">isBound()</tt> method of this
	      <tt class="literal">PropertyDescriptor</tt> should return
	      <tt class="literal">true</tt>. </p>
</dd>
<dt>
<b>Listener registration</b>
</dt>
<dd>
<p>	      A bean that defines one or more bound properties must
	      define a pair of methods for the registration of listeners
	      that are notified when any bound property value change. The methods must have these signatures:
</p>
<blockquote>
<pre class="programlisting">public void addPropertyChangeListener(PropertyChangeListener)
public void removePropertyChangeListener(PropertyChangeListener)</pre>
</blockquote>
<p>
</p>
</dd>
<dt>
<b>Named property listener registration</b>
</dt>
<dd>
<p>	      A bean can optionally provide additional methods that
	      allow event listeners to be registered for changes
	      to a single bound property value. These methods are passed the
	      name of a property and have the following signatures:
</p>
<blockquote>
<pre class="programlisting">public void addPropertyChangeListener(String, PropertyChangeListener)
public void removePropertyChangeListener(String, PropertyChangeListener)</pre>
</blockquote>
<p>
</p>
</dd>
<dt>
<b>Per-property listener registration</b>
</dt>
<dd>
<p>	      A bean can optionally provide additional event listener
	      registration methods that are specific to a single
	      property. For a property <em class="replaceable">p</em>,
	      these methods have the following signatures:
</p>
<blockquote>
<pre class="programlisting">public void add<em class="replaceable">P</em>Listener(PropertyChangeListener)
public void remove<em class="replaceable">P</em>Listener(PropertyChangeListener)</pre>
</blockquote>
<p>
	      Methods of this type allow a beanbox to
	      distinguish a bound property from a nonbound property. </p>
</dd>
<dt>
<b>Notification</b>
</dt>
<dd>
<p>	      When the value of a bound property changes, the bean
	      should update its internal state to reflect the change
	      and then pass a <tt class="literal">PropertyChangeEvent</tt> to
	      the <tt class="literal">propertyChange()</tt> method of every
	      <tt class="literal">PropertyChangeListener</tt> object
	      registered for the bean or the specific bound
	      property. </p>
</dd>
<dt>
<b>Support</b>
</dt>
<dd>
<p>
<tt class="literal">java.beans.PropertyChangeSupport</tt> is a
	      helpful class for implementing bound properties. </p>
</dd>
</dl>
<h3 class="sect2">6.2.5. Constrained Properties</h3>
<p>
<a name="INDEX-967"></a><a name="INDEX-968"></a><a name="INDEX-969"></a>


	A constrained property is one for which any changes can be
	vetoed by registered listeners. Most constrained properties are
	also bound properties. Here are the conventions for a
	constrained property:
      </p>
<dl>
<dt>
<b>Getter</b>
</dt>
<dd>
<p>	      The getter method for a constrained property is the same
	      as the getter method for a regular property. </p>
</dd>
<dt>
<b>Setter</b>
</dt>
<dd>
<p>	      The setter method of a constrained property throws a
	      <tt class="literal">PropertyVetoException</tt> if the property
	      change is vetoed. For a property
	      <em class="replaceable">p</em> of type
	      <em class="replaceable">T</em>, the signature looks like this:
</p>
<blockquote>
<pre class="programlisting">public void set<em class="replaceable">P</em>(<em class="replaceable">T</em>) throws PropertyVetoException</pre>
</blockquote>
<p>
</p>
</dd>
<dt>
<b>Listener registration</b>
</dt>
<dd>
<p>	      A bean that defines one or more constrained properties must
	      define a pair of methods for the registration of listeners
	      that are notified when any constrained property value changes. The methods must have these signatures:
</p>
<blockquote>
<pre class="programlisting">public void addVetoableChangeListener(VetoableChangeListener)
public void removeVetoableChangeListener(VetoableChangeListener)</pre>
</blockquote>
<p>
</p>
</dd>
<dt>
<b>Named property listener registration</b>
</dt>
<dd>
<p>	      A bean can optionally provide additional methods that
	      allow event listeners to be registered for 
	      changes to a single constrained property value. These
	      methods are passed the name of a property and have the
	      following signatures:
</p>
<blockquote>
<pre class="programlisting">public void addVetoableChangeListener(String, VetoableChangeListener)
public void removeVetoableChangeListener(String, VetoableChangeListener)</pre>
</blockquote>
<p>
</p>
</dd>
<dt>
<b>Per-property listener registration</b>
</dt>
<dd>
<p>	      A bean can optionally provide additional listener
	      registration methods that are specific to a single
	      constrained property. For a property 
	      <em class="replaceable">p</em>, these methods have the
	      following signatures:
</p>
<blockquote>
<pre class="programlisting">public void add<em class="replaceable">P</em>Listener(VetoableChangeListener)
public void remove<em class="replaceable">P</em>Listener(VetoableChangeListener)</pre>
</blockquote>
<p>
</p>
</dd>
<dt>
<b>Notification</b>
</dt>
<dd>
<p>	      When the setter method of a constrained property is
	      invoked, the bean must generate a
	      <tt class="literal">PropertyChangeEvent</tt> that describes the
	      requested change and pass that event to the
	      <tt class="literal">vetoableChange()</tt> method of every
	      <tt class="literal">VetoableChangeListener</tt> object
	      registered for the bean or the specific constrained
	      property. If any listener vetos the change by throwing a
	      <tt class="literal">PropertyVetoException</tt>, the bean must
	      send out another <tt class="literal">PropertyChangeEvent</tt>
	      to revert the property to its original value, and then
	      it should throw a <tt class="literal">PropertyVetoException</tt>
	      itself. If, on the other hand, the property change is not
	      vetoed, the bean should update its internal state to
	      reflect the change. If the constrained property is also a
	      bound property, the bean should notify
	      <tt class="literal">PropertyChangeListener</tt> objects at this
	      point. </p>
</dd>
<dt>
<b>Support</b>
</dt>
<dd>
<p>
<tt class="literal">java.beans.VetoableChangeSupport</tt> is a
	      helpful class for implementing constrained properties. </p>
</dd>
</dl>
<h3 class="sect2">6.2.6. Events</h3>
<p>
<a name="INDEX-970"></a><a name="INDEX-971"></a>

	In addition to <tt class="literal">PropertyChangeEvent</tt> events
	generated when bound and constrained properties are changed, a
	bean can generate other types of events. An event named
	<em class="replaceable">E</em> should follow these conventions:
      </p>
<dl>
<dt>
<b>Event class</b>
</dt>
<dd>
<p>	      The event class should directly or indirectly extend
	      <tt class="literal">java.util.EventObject</tt> and should be
	      named
	      <em class="replaceable">E</em><tt class="literal">Event</tt>. </p>
</dd>
<dt>
<b>Listener interface</b>
</dt>
<dd>
<p>	      The event must be associated with an event listener
	      interface that extends
	      <tt class="literal">java.util.EventListener</tt> and is named 
	      <em class="replaceable">E</em><tt class="literal">Listener</tt>. </p>
</dd>
<dt>
<b>Listener methods</b>
</dt>
<dd>
<p>	      The event listener interface can define any number of
	      methods that take a single argument of type
	      <em class="replaceable">E</em><tt class="literal">Event</tt> and
	      return <tt class="literal">void</tt>. </p>
</dd>
<dt>
<b>Listener registration</b>
</dt>
<dd>
<p>	      The bean must define a pair of methods for registering
	      event listeners that want to be notified when an
	      <em class="replaceable">E</em> event occurs. The methods
	      should have the following signatures:
</p>
<blockquote>
<pre class="programlisting">public void add<em class="replaceable">E</em>Listener(<em class="replaceable">E</em>Listener)
public void remove<em class="replaceable">E</em>Listener(<em class="replaceable">E</em>Listener)</pre>
</blockquote>
<p>
</p>
</dd>
<dt>
<b>Unicast events</b>
</dt>
<dd>
<p>	      A unicast event allows only one listener object to be
	      registered at a single time. If
	      <em class="replaceable">E</em> is a unicast event, the
	      listener registration method should have this signature:
</p>
<blockquote>
<pre class="programlisting">public void add<em class="replaceable">E</em>Listener(<em class="replaceable">E</em>Listener) throws TooManyListenersException</pre>
</blockquote>
<p>
<a name="INDEX-972"></a><a name="INDEX-973"></a><a name="INDEX-974"></a>
</p>
</dd>
</dl>
<h3 class="sect2">6.2.7. Methods</h3>
<p>
<a name="INDEX-975"></a>

	A beanbox can expose the methods of a bean to application
	designers. The only formal convention is that these methods
	must be declared <tt class="literal">public</tt>. The following
	guidelines are also useful, however:
      </p>
<dl>
<dt>
<b>Method name</b>
</dt>
<dd>
<p>	      A method can have any name that does not conflict with the
	      property- and event-naming conventions. The name should
	      be as descriptive as possible. </p>
</dd>
<dt>
<b>Parameters</b>
</dt>
<dd>
<p>	      A method can have any number and type of parameters. However,
	      beanbox programs may work best with no-parameter methods
	      or methods that have simple primitive parameters. </p>
</dd>
<dt>
<b>Excluding methods</b>
</dt>
<dd>
<p>	      A bean can explicitly specify the list of methods it
	      exports by providing a <tt class="literal">BeanInfo</tt>
	      implementation. </p>
</dd>
<dt>
<b>Documentation</b>
</dt>
<dd>
<p>
<a name="INDEX-976"></a>

	      A bean can provide user-friendly, human-readable localized
	      names and descriptions for methods through
	      <tt class="literal">MethodDescriptor</tt> objects returned by a
	      <tt class="literal">BeanInfo</tt> implementation. </p>
</dd>
</dl>
<h3 class="sect2">6.2.8. Auxiliary Classes</h3>
<p>	  A bean can provide the following auxiliary classes:
	</p>
<dl>
<dt>
<b><tt class="literal">BeanInfo</tt></b>
</dt>
<dd>
<p>	      To provide additional information about a bean
	      <em class="replaceable">B</em>, implement the
	      <tt class="literal">BeanInfo</tt> interface in a class named
	      <em class="replaceable">B</em><tt class="literal">BeanInfo</tt>. </p>
</dd>
<dt>
<b>Property editor for a specific type</b>
</dt>
<dd>
<p>	      To enable a beanbox to work with properties of type
	      <em class="replaceable">T</em>, implement the
	      <tt class="literal">PropertyEditor</tt> interface in a class
	      named
	      <em class="replaceable">T</em><tt class="literal">Editor</tt>. The class must have a no-parameter constructor. </p>
</dd>
<dt>
<b>Property editor for a specific property</b>
</dt>
<dd>
<p>	      To customize the way a beanbox allows the user to enter
	      values for a single property, define a class that
	      implements the <tt class="literal">PropertyEditor</tt>
	      interface and has a no-parameter constructor, and register
	      that class with a <tt class="literal">PropertyDescriptor</tt>
	      object returned by the <tt class="literal">BeanInfo</tt> class
	      for the bean. </p>
</dd>
<dt>
<b>Customizers</b>
</dt>
<dd>
<p>	      To define a customizer, or wizard, for configuring a bean
	      <em class="replaceable">B</em>, define an AWT or Swing
	      component with a no-parameter constructor that does the
	      customization. The class is commonly called
	      <em class="replaceable">B</em><tt class="literal">Customizer</tt>,
	      but this is not required. Register the class with the
	      <tt class="literal">BeanDescriptor</tt> object returned by the
	      <tt class="literal">BeanInfo</tt> class for the bean. </p>
</dd>
<dt>
<b>Documentation</b>
</dt>
<dd>
<p>	      Define default documentation for a bean
	      <em class="replaceable">B</em> in HTML 2.0 format and store
	      that documentation in a file named
	      <em class="replaceable">B</em><tt class="literal">.html</tt>. Define localized translations of the documentation in
	      files by the same name in locale-specific directories. </p>
</dd>
</dl>
<h3 class="sect2">6.2.9. Bean Packaging and Distribution</h3>
<p>
<a name="INDEX-977"></a><a name="INDEX-978"></a>

	Beans are distributed in JAR archive files that have the following:
      </p>
<dl>
<dt>
<b>Content</b>
</dt>
<dd>
<p>	      The class or classes that implement a bean should be
	      included in the JAR file, along with auxiliary classes
	      such as <tt class="literal">BeanInfo</tt> and
	      <tt class="literal">PropertyEditor</tt> implementations. If the
	      bean is instantiated from a serialized instance, that
	      instance should be included in the JAR archive with a
	      filename ending in <em class="emphasis">.ser</em>. The JAR file can contain HTML
	      documentation for the bean and should also contain any
	      resource files, such as images, required by the bean and
	      its auxiliary classes. A single JAR file can contain
	      more than one bean. </p>
</dd>
<dt>
<b><tt class="literal">Java-Bean</tt> attribute</b>
</dt>
<dd>
<p>	      The manifest of the JAR file must mark any 
	      <em class="emphasis">.class</em> and <em class="emphasis">.ser</em> 
	      files that define a bean with the attribute:
</p>
<blockquote>
<pre class="programlisting">Java-Bean: true</pre>
</blockquote>
<p>
</p>
</dd>
<dt>
<b><tt class="literal">Depends-On</tt> attribute</b>
</dt>
<dd>
<p>	      The manifest of a JAR file can use the
	      <tt class="literal">Depends-On</tt> attribute to specify all
	      other files in the JAR archive on which the bean depends. A beanbox application can use this information when
	      generating applications or repackaging beans. Each bean
	      can have zero or more <tt class="literal">Depends-On</tt>
	      attributes, each of which can list zero or more
	      space-separated filenames. Within a JAR file,
	      <tt class="literal">/</tt> is always used as the directory separator. </p>
</dd>
<dt>
<b><tt class="literal">Design-Time-Only</tt> attribute</b>
</dt>
<dd>
<p>	      The manifest of a JAR file can optionally use the
	      <tt class="literal">Design-Time-Only</tt> attribute to specify
	      auxiliary files, such as <tt class="literal">BeanInfo</tt>
	      implementations, that are used by a beanbox, but 
	      not used by applications that use the bean. The beanbox
	      can use this information when repackaging beans for use in
	      an application.
<a name="INDEX-979"></a><a name="INDEX-980"></a>
</p>
</dd>
</dl>

<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch06_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch06_01.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch06_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch06_03.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">6.1. Bean Basics</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">6.3. Bean Contexts and Services</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
