<html>
<head>
<title>Java Development Tools (Java in a Nutshell)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="David Flanagan">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-487-8E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Java Development Tools">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm" alt="Java Enterprise in a Nutshell"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch07_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch07_03.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="part1.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/part1.htm">Part 1: Introducing Java</a></td><td align="right" valign="top" width="172"><a href="part2.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/part2.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY --><h1 class="chapter">Chapter 8.  Java Development Tools</h1>

<p>
<a name="INDEX-1096"></a><a name="INDEX-1097"></a>

    Sun's implementation of Java includes a number of tools for 
    Java developers. Chief among these are the Java interpreter and the
    Java compiler, of course, but there are a number of others as well. This chapter documents all the tools shipped with the Java 2 SDK
    (formerly known as the JDK), 
    except for the RMI and IDL tools that are specific to
    enterprise programming. Those tools are documented in <em class="emphasis">Java
    Enterprise in a Nutshell</em> (O'Reilly).
<a name="INDEX-1098"></a><a name="INDEX-1099"></a>
</p>
<p>    The tools documented here are part of Sun's development kit; they
    are implementation details and not part of the Java
    specification itself. If you are using a Java development
    environment other than Sun's SDK (or a port of it), you should
    consult your vendor's tool documentation. </p>
<p>
<a name="INDEX-1100"></a><a name="INDEX-1101"></a><a name="INDEX-1102"></a>

    Some examples in this chapter use Unix conventions for file
    and path separators. If Windows is your development platform,
    change forward slashes in filenames to backward slashes, and
    colons in path specifications to semicolons. </p>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+2"><b>appletviewer</b></font></td><td align="right"><font size="+2"><b>JDK 1.0 and later</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+2"><b>The Java Applet Viewer</b></font></td><td align="right"><font size="+2"><b><i></i></b></font></td>
</tr>
</table>
<p>
<h3>Synopsis</h3>
<blockquote>
<pre class="programlisting">appletviewer [ <em class="replaceable">options</em> ] <em class="replaceable">url</em> | <em class="replaceable">file</em>... </pre>
</blockquote>
<h3>
<a name="INDEX-1103"></a><a name="INDEX-1104"></a>

<span class="refsect1">Description</span></h3>
<em class="emphasis">appletviewer</em> reads or downloads the one or
	more HTML documents specified by the filename or URL on the command
	line. Next, it downloads any applets specified in any of those
	files and runs each applet in a separate window. If the
	specified document or documents do not contain any applets,
	<em class="emphasis">appletviewer</em> does nothing. </p>
<p>

<em class="emphasis">appletviewer</em> recognizes applets specified
	with the <tt class="literal">&lt;APPLET&gt;</tt> tag and, in Java 1.2
	and later, the <tt class="literal">&lt;OBJECT&gt;</tt> and
	<tt class="literal">&lt;EMBED&gt;</tt> tags. </p>
<p>
<h3><span class="refsect1">Options</span></h3>

<em class="emphasis">appletviewer</em> recognizes the following
	options:
      </p>
<dl>
<dt>
<b><tt class="literal">-debug</tt></b>
</dt>
<dd>
<p>	      If this option is specified, 
	      <em class="emphasis">appletviewer</em> is started within
	      <em class="emphasis">jdb</em> (the Java debugger). This allows
	      you to debug the applets referenced by the document or
	      documents. </p>
</dd>
<dt>
<b><tt class="literal">-encoding</tt><em class="replaceable">enc</em></b>
</dt>
<dd>
<p>	      This option specifies the character encoding that
	      <em class="emphasis">appletviewer</em> should use when reading
	      the contents of the specified files or URLs. It is used
	      in the conversion of applet parameter values to Unicode. Java 1.1 and later. </p>
</dd>
<dt>
<b><tt class="literal">-J</tt><em class="replaceable">javaoption</em></b>
</dt>
<dd>
<p>	      This option passes the specified
	      <em class="replaceable">javaoption</em> as a command-line
	      argument to the Java interpreter. <em class="replaceable">javaoption</em> should not contain
	      spaces. If a multiword option must be passed to the Java
	      interpreter, multiple <tt class="literal">-J</tt> options should
	      be used. See <em class="emphasis">java</em> for a list of
	      valid Java interpreter options. Java 1.1 and later. </p>
</dd>
</dl>
<p>
<em class="emphasis">appletviewer</em> 
	also recognizes the <tt class="literal">-classic</tt>,
	<tt class="literal">-native</tt>, and <tt class="literal">-green</tt>
	options that the Java interpreter recognizes. See
	<em class="emphasis">java</em> for details on these options. </p>
<p>
<h3><span class="refsect1">Commands</span></h3>	

Each window displayed by <em class="emphasis">appletviewer</em>
	contains a single <b class="emphasis-bold">Applet</b> menu,
	with the following commands available:
      </p>
<dl>
<dt>
<b><b class="emphasis-bold">Restart</b></b>
</dt>
<dd>
<p>	      Stops and destroys the current applet, then reinitializes
	      and restarts it. </p>
</dd>
<dt>
<b><b class="emphasis-bold">Reload</b></b>
</dt>
<dd>
<p>	      Stops, destroys, and unloads the applet, then reloads,
	      reinitializes, and restarts it. </p>
</dd>
<dt>
<b><b class="emphasis-bold">Stop</b></b>
</dt>
<dd>
<p>	      Stops the current applet. Java 1.1 and
	      later. </p>
</dd>
<dt>
<b><b class="emphasis-bold">Save</b></b>
</dt>
<dd>
<p>	      Serializes the applet and saves the serialized applet in
	      the file <em class="emphasis">Applet.ser</em> in the user's
	      home directory. The applet should be stopped before
	      selecting this option. Java 1.1 and later. </p>
</dd>
<dt>
<b><b class="emphasis-bold">Start</b></b>
</dt>
<dd>
<p>	      Restarts a stopped applet. Java 1.1 and
	      later. </p>
</dd>
<dt>
<b><b class="emphasis-bold">Clone</b></b>
</dt>
<dd>
<p>	      Creates a new copy of the applet in a new
	      <em class="emphasis">appletviewer</em> window. </p>
</dd>
<dt>
<b><b class="emphasis-bold">Tag</b></b>
</dt>
<dd>
<p>	      Pops up a dialog box that displays the
	      <tt class="literal">&lt;APPLET&gt;</tt> tag and all associated
	      <tt class="literal">&lt;PARAM&gt;</tt> tags that created the
	      current applet. </p>
</dd>
<dt>
<b><b class="emphasis-bold">Info</b></b>
</dt>
<dd>
<p>	      Pops up a dialog box that contains information about the
	      applet. This information is provided by the
	      <tt class="literal">getAppletInfo()</tt> and
	      <tt class="literal">getParameterInfo()</tt> methods implemented
	      by the applet. </p>
</dd>
<dt>
<b><b class="emphasis-bold">Edit</b></b>
</dt>
<dd>
<p>	      This command is not implemented. The <b class="emphasis-bold">Edit</b> menu item is disabled. </p>
</dd>
<dt>
<b><b class="emphasis-bold">Character Encoding</b></b>
</dt>
<dd>
<p>	      Displays the current character encoding in the status
	      line. Java 1.1 and later. </p>
</dd>
<dt>
<b><b class="emphasis-bold">Print</b></b>
</dt>
<dd>
<p>	      Prints the applet. Java 1.1 and later. </p>
</dd>
<dt>
<b><b class="emphasis-bold">Properties</b></b>
</dt>
<dd>
<p>	      Displays a dialog that allows the user to set
	      <em class="emphasis">appletviewer</em> preferences, including
	      settings for firewall and caching proxy servers. </p>
</dd>
<dt>
<b><b class="emphasis-bold">Close</b></b>
</dt>
<dd>
<p>	      Closes the current <em class="emphasis">appletviewer</em>
	      window. </p>
</dd>
<dt>
<b><b class="emphasis-bold">Quit</b></b>
</dt>
<dd>
<p>	      Quits <em class="emphasis">appletviewer</em>, closing all open
	      windows. </p>
</dd>
</dl>

<dl>
<dt>
<b><tt class="literal">CLASSPATH</tt></b>
</dt>
<dd>
<p>	      In Java 1.0 and Java 1.1,
	      <em class="emphasis">appletviewer</em> uses the
	      <tt class="literal">CLASSPATH</tt> environment variable in the
	      same way the Java interpreter does. See
	      <em class="emphasis">java</em> for details. In Java 1.2 and
	      later, however, <em class="emphasis">appletviewer</em> ignores
	      this environment variable to better simulate the action of
	      a web browser. </p>
</dd>
</dl>
<p>
<h3><span class="refsect1">Properties</span></h3>	
When it starts up, <em class="emphasis">appletviewer</em> reads
	property definitions from the file
	<em class="emphasis">~/.hotjava/properties</em> (Unix) or 
	<em class="emphasis">.hotjava\properties</em> relative to the
	<tt class="literal">HOME</tt> environment variable (Windows). These
	properties are stored in the system properties list and can specify the various error and status messages the applet
	viewer displays, as well as its security policies and use of
	proxy servers. The properties that affect security and proxies
	are described in the following sections. Most users of
	<em class="emphasis">appletviewer</em> do not need to use
	these properties. </p>
<p>
<h3><span class="refsect1">Security Properties</span></h3>	
The following properties specify the security restrictions
	<em class="emphasis">appletviewer</em> places on untrusted applets:
      </p>
<dl>
<dt>
<b><tt class="literal">acl.read</tt></b>
</dt>
<dd>
<p>	      A list of files and directories an untrusted
	      applet is allowed to read. The elements of the list
	      should be separated with colons on Unix systems and
	      semicolons on Windows systems. On Unix systems, the
	      <tt class="literal">~</tt> character is replaced with the home
	      directory of the current user. If the plus character
	      appears as an element in the list, it is replaced by the
	      value of the <tt class="literal">acl.read.default</tt> property. This provides an easy way to enable read access--by
	      simply setting <tt class="literal">acl.read</tt> to "+". By
	      default, untrusted applets are not allowed to read any
	      files or directories. </p>
</dd>
<dt>
<b><tt class="literal">acl.read.default</tt></b>
</dt>
<dd>
<p>	      A list of files and directories that are readable
	      by untrusted applets if the <tt class="literal">acl.read</tt>
	      property contains a plus character. </p>
</dd>
<dt>
<b><tt class="literal">acl.write</tt></b>
</dt>
<dd>
<p>	      A list of files and directories an untrusted
	      applet is allowed to write to. The elements of the list
	      should be separated with colons on Unix systems and
	      semicolons on Windows systems. On Unix systems, the
	      <tt class="literal">~</tt> character is replaced with the home
	      directory of the current user. If the plus character
	      appears as an element in the list, it is replaced by the
	      value of the <tt class="literal">acl.write.default</tt>
	      property. This provides an easy way to enable write
	      access--by simply setting
	      <tt class="literal">acl.write</tt> to "+". By default,
	      untrusted applets are not allowed to write to any files or
	      directories. </p>
</dd>
<dt>
<b><tt class="literal">acl.write.default</tt></b>
</dt>
<dd>
<p>	      A list of files and directories that are writable
	      by untrusted applets if the <tt class="literal">acl.write</tt>
	      property contains a plus character. </p>
</dd>
<dt>
<b><tt class="literal">appletviewer.security.mode</tt></b>
</dt>
<dd>
<p>	      Specifies the types of network access an
	      untrusted applet is allowed to perform. If it is set to
	      "none", the applet can perform no networking at all. The value "host" is the default; it specifies that the
	      applet can connect only to the host from which it was
	      loaded. The value "unrestricted" specifies that an applet
	      can connect to any host without restrictions. </p>
</dd>
<dt>
<b><tt class="literal">package.restrict.access.</tt><em class="replaceable">package-prefix</em></b>
</dt>
<dd>
<p>	      Properties of this form can be set to
	      <tt class="literal">true</tt> to prevent untrusted applets from
	      using classes in any package that has the specified
	      package name prefix as the first component of its name. For example, to prevent applets from using any of the Sun
	      classes (such as the Java compiler and the applet viewer
	      itself) that are shipped with the Java SDK, you can specify
	      the following property:
	    </p>
<blockquote>
<pre class="programlisting">package.restrict.access.sun=true</pre>
</blockquote>
<p>
<em class="emphasis">appletviewer</em> sets this property to
	      <tt class="literal">true</tt> by default for the
	      <tt class="literal">sun.*</tt> and <tt class="literal">netscape.*</tt> packages. </p>
</dd>
<dt>
<b><tt class="literal">package.restrict.definition.</tt><em class="replaceable">package-prefix</em></b>
</dt>
<dd>
<p>	      Properties of this form can be set to
	      <tt class="literal">true</tt> to prevent untrusted applets from
	      defining classes in a package that has the specified
	      package name prefix as the first component of its name. For example, to prevent an applet from defining classes in
	      any of the standard Java packages, you can specify the
	      following property:
	    </p>
<blockquote>
<pre class="programlisting">package.restrict.definition.java=true</pre>
</blockquote>
<p>
<em class="emphasis">appletviewer</em> sets this property to
	      <tt class="literal">true</tt> by default for the
	      <tt class="literal">java.*</tt>, <tt class="literal">sun.*</tt>, and
	      <tt class="literal">netscape.*</tt> packages. </p>
</dd>
<dt>
<b><em class="replaceable">property</em><tt class="literal">.applet</tt></b>
</dt>
<dd>
<p>	      When a property of this form is set to
	      <tt class="literal">true</tt> (as of Java 1.1), it specifies that an
	      applet should be allowed to read the property named
	      <tt class="literal">property</tt> from the system properties
	      list. By default, applets are allowed to read only 10
	      standard system properties (as detailed in <em class="emphasis">Java
	      Foundation Classes in a Nutshell</em> (O'Reilly)). For example, to
	      allow an applet to read the <tt class="literal">user.home</tt>
	      property, specify a property of the form:
	    </p>
<blockquote>
<pre class="programlisting">user.home.applet=true</pre>
</blockquote>
</dd>
</dl>
<p>
<h3><span class="refsect1">Proxy Properties</span></h3>

<em class="emphasis">appletviewer</em> uses the following properties
	to configure its use of firewall and caching proxy servers:
      </p>
<dl>
<dt>
<b><tt class="literal">firewallHost</tt></b>
</dt>
<dd>
<p>	      The firewall proxy host to connect to if 
	      <tt class="literal">firewallSet</tt> is
	      <tt class="literal">true</tt>. </p>
</dd>
<dt>
<b><tt class="literal">firewallPort</tt></b>
</dt>
<dd>
<p>	      The port of the firewall proxy host to connect to
	      if <tt class="literal">firewallSet</tt> is 
	      <tt class="literal">true</tt>. </p>
</dd>
<dt>
<b><tt class="literal">firewallSet</tt></b>
</dt>
<dd>
<p>	      Whether the applet viewer should use a
	      firewall proxy. Values are <tt class="literal">true</tt> or
	      <tt class="literal">false</tt>. </p>
</dd>
<dt>
<b><tt class="literal">proxyHost</tt></b>
</dt>
<dd>
<p>	      The caching proxy host to connect to if
	      <tt class="literal">proxySet</tt> is
	      <tt class="literal">true</tt>. </p>
</dd>
<dt>
<b><tt class="literal">proxyPort</tt></b>
</dt>
<dd>
<p>	      The port of the caching proxy host to connect to
	      if <tt class="literal">proxySet</tt> is
	      <tt class="literal">true</tt>. </p>
</dd>
<dt>
<b><tt class="literal">proxySet</tt></b>
</dt>
<dd>
<p>	      Whether the applet viewer should use a
	      caching proxy. Values are <tt class="literal">true</tt> or
	      <tt class="literal">false</tt>.
<a name="INDEX-1105"></a><a name="INDEX-1106"></a>
</p>
</dd>
</dl>
<p>
<span class="refsect1"><b>See Also</b>: </span><em class="emphasis">java</em>, <em class="emphasis">javac</em>, <em class="emphasis">jdb</em>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+2"><b>extcheck</b></font></td><td align="right"><font size="+2"><b>Java 2 SDK 1.2 and later</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+2"><b>JAR Version Conflict Utility</b></font></td><td align="right"><font size="+2"><b><i></i></b></font></td>
</tr>
</table>
<h3>Synopsis</h3>
<blockquote>
<pre class="programlisting">extcheck -verbose <em class="replaceable">jarfile</em>
</pre>
</blockquote>
<p>
<h3><span class="refsect1">Description</span></h3>
<a name="INDEX-1107"></a><a name="INDEX-1108"></a><em class="emphasis">extcheck</em> checks to see if the extension
	contained in the specified <em class="replaceable">jarfile</em> 
	(or a newer
	version of that extension) has already been installed on the
	system. It does this by reading the
	<tt class="literal">Specification-Title</tt> and
	<tt class="literal">Specification-Version</tt> manifest attributes
	from the specified <em class="replaceable">jarfile</em> and from
	all of the JAR files found in the system extensions directory. </p>
<p>

<em class="emphasis">extcheck</em> is designed for use in automated
	installation scripts. Without the
	<tt class="literal">-verbose</tt> option, it does not print the results
	of its check. Instead, it sets its exit code to 0 if the specified
	extension does not conflict with any installed extensions and
	can be safely installed. It sets its exit code to a non-zero
	value if an extension with the same name is already installed
	and has a specification version number equal to or greater than
	the version of the specified file. </p>
<dl>
<dt>
<b><tt class="literal">-verbose</tt></b>
</dt>
<dd>
<p>	      Lists the installed extensions as they are checked and
	      displays the results of the check.
	    </p>
</dd>
</dl>
<p>
<span class="refsect1"><b>See Also</b>: </span><em class="emphasis">jar</em>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+2"><b>jar</b></font></td><td align="right"><font size="+2"><b>JDK 1.1 and later</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+2"><b>Java Archive Tool</b></font></td><td align="right"><font size="+2"><b><i></i></b></font></td>
</tr>
</table>
<h3>Synopsis</h3>
<blockquote>
<pre class="programlisting">jar c|t|u|x[f][m][M][0][v] [&#8202;<em class="replaceable">jar</em>] [<em class="replaceable">manifest</em>] [-C <em class="replaceable">directory</em>] [<em class="replaceable">files</em>]
jar -i [ <em class="replaceable">jar</em>] </pre>
</blockquote>
<p>
<h3><span class="refsect1">Description</span></h3>
<em class="emphasis">jar</em> is a tool that can create
	and manipulate Java Archive ( JAR) files. A JAR file is a ZIP
	file that contains Java class files, auxiliary resource files
	required by those classes, and optional meta-information. This meta-information
	includes a manifest file that lists the contents of the JAR
	archive and provides auxiliary information about each file. </p>
<p>

The <em class="emphasis">jar</em> command can create JAR
	files, list the contents of JAR files, and extract files from a
	JAR archive. In Java 1.2 and later, it can also
	add files to an existing archive or update the manifest file of
	an archive. In Java 1.3 and later, <em class="emphasis">jar</em> can
	also add an index entry to a JAR file. </p>
<p>
<h3><span class="refsect1">Options</span></h3>

	The syntax of the <em class="emphasis">jar</em> command is
	reminiscent of the Unix <em class="emphasis">tar</em> (tape archive)
	command. Most options to <em class="emphasis">jar</em> are specified
	as a block of concatenated letters passed as a single argument,
	rather than as individual command-line arguments. The first
	letter of the first argument specifies what action
	<em class="emphasis">jar</em> is to perform; it is required. Other
	letters are optional. The various file arguments depend
	on which letters are specified. </p>
<p>
<h3><span class="refsect1">Command Options</span></h3>	  
The first letter of the first option to <em class="emphasis">jar</em>
	  specifies the basic operation <em class="emphasis">jar</em> is
	  to perform. Here are the four possible options:
	</p>
<dl>
<dt>
<b><tt class="literal">c</tt></b>
</dt>
<dd>
<p>		Creates a new JAR archive. A list of input files and/or
		directories must be specified as the final arguments to
		<em class="emphasis">jar</em>. The newly created JAR file
		has a <em class="emphasis">META-INF/MANIFEST.MF</em>
		file as its first entry. This automatically created
		manifest lists the contents of the JAR file and
		contains a message digest for each file. </p>
</dd>
<dt>
<b><tt class="literal">t</tt></b>
</dt>
<dd>
<p>		Lists the contents of a JAR archive. </p>
</dd>
<dt>
<b><tt class="literal">u</tt></b>
</dt>
<dd>
<p>		Updates the contents of a JAR archive. Any files listed on
		the command line are added to the archive. When used with
		the <tt class="literal">m</tt> option, this adds the
		specified manifest information to the JAR file. Java 1.2 and later. </p>
</dd>
<dt>
<b><tt class="literal">x</tt></b>
</dt>
<dd>
<p>		Extracts the contents of a JAR archive. The files and
		directories specified on the command line are extracted
		and created in the current working directory. If no file
		or directory names are specified, all the files and
		directories in the JAR file are extracted. </p>
</dd>
</dl>
<p>
<h3><span class="refsect1">Modifier Options</span></h3>	  
Each of the four command specifier letters can be followed by
	  additional letters that provide further detail about the
	  operation to be performed:
	</p>
<dl>
<dt>
<b><tt class="literal">f</tt></b>
</dt>
<dd>
<p>		Indicates that <em class="emphasis">jar</em> is to
		operate on a JAR file whose name is specified on the
		command line. If this option is not present, 
		<em class="emphasis">jar</em> reads a JAR file from
		standard input and/or writes a JAR file to standard
		output. If the <tt class="literal">f</tt> option is present,
		the command line must contain the name of the JAR
		file to operate on. </p>
</dd>
<dt>
<b><tt class="literal">m</tt></b>
</dt>
<dd>
<p>		When <em class="emphasis">jar</em> 
		creates or updates a JAR file, it automatically
		creates (or updates) a manifest file named
		<em class="emphasis">META-INF/MANIFEST.MF</em> in the JAR
		archive. This default manifest simply lists the contents
		of the JAR file. Many JAR files require additional
		information to be specified in the manifest; the
		<tt class="literal">m</tt> option tells the
		<em class="emphasis">jar</em> command that a manifest template
		is specified on the command line. <em class="emphasis">jar</em> reads this manifest file and
		stores all the information it contains into the
		<em class="emphasis">META-INF/MANIFEST.MF</em> file it creates. This <tt class="literal">m</tt> option should be used only with
		the <tt class="literal">c</tt> or <tt class="literal">u</tt> commands,
		not with the <tt class="literal">t</tt> or <tt class="literal">x</tt>
		commands. </p>
</dd>
<dt>
<b><tt class="literal">M</tt></b>
</dt>
<dd>
<p>		Used with the <tt class="literal">c</tt> and
		<tt class="literal">u</tt> commands to tell
		<em class="emphasis">jar</em> not to create a default manifest
		file. </p>
</dd>
<dt>
<b><tt class="literal">v</tt></b>
</dt>
<dd>
<p>		Tells
		<em class="emphasis">jar</em> to produce verbose output. </p>
</dd>
<dt>
<b><tt class="literal">0</tt></b>
</dt>
<dd>
<p>		Used with the <tt class="literal">c</tt> and
		<tt class="literal">u</tt> commands to tell
		<em class="emphasis">jar</em> to store files in the JAR archive
		without compressing them. Note that this option is the
		digit zero, not the letter O. </p>
</dd>
</dl>
<p>
<h3><span class="refsect1">Files</span></h3>	  
The first option to <em class="emphasis">jar</em> consists of an
	  initial command letter and various option letters. This first
	  option is followed by a list of files:
	</p>
<dl>
<dt>
<b><em class="replaceable">jar</em></b>
</dt>
<dd>
<p>		If the first option contains the letter
		<tt class="literal">f</tt>, that option must be followed by
		the name of the JAR file to create or manipulate. </p>
</dd>
<dt>
<b><em class="replaceable">manifest</em></b>
</dt>
<dd>
<p>		If the first option contains the letter
		<tt class="literal">m</tt>, that option must be followed by
		the name of the file that contains manifest information. If the first option contains both the letters
		<tt class="literal">f</tt> and <tt class="literal">m</tt>, the
		JAR and manifest files should be listed in the same order
		the <tt class="literal">f</tt> and <tt class="literal">m</tt>
		options appear. In other words, if 
		<tt class="literal">f</tt> comes before
		<tt class="literal">m</tt>, the JAR filename should come
		before the manifest filename. Otherwise, if 
		<tt class="literal">m</tt>
		comes before <tt class="literal">f</tt>, the manifest
		filename should be specified before the JAR filename. </p>
</dd>
<dt>
<b><em class="replaceable">files</em></b>
</dt>
<dd>
<p>		The list of one or more files and/or directories
		to be inserted into or extracted from the JAR archive. </p>
</dd>
</dl>
<p>
<h3><span class="refsect1">Additional Options</span></h3>
	  In addition to all the options listed previously,
	  <em class="emphasis">jar</em> also supports the following:
	</p>
<dl>
<dt>
<b><tt class="literal">-C</tt> <em class="replaceable">dir</em></b>
</dt>
<dd>
<p>	        Used within the list of files to process;
		it tells <em class="emphasis">jar</em> to change
		to the specified <em class="replaceable">dir</em> while
		processing the subsequent files and directories. The
		subsequent file and directory names are interpreted
		relative to <em class="replaceable">dir</em> and are
		inserted into the JAR archive without
		<em class="replaceable">dir</em> as a prefix. Any number
		of <tt class="literal">-C</tt> options can be used; each
		remains in effect until the next is encountered. The directory specified by a <tt class="literal">-C</tt>
		option is interpreted relative to the current working
		directory, not the directory specified by the previous
		<tt class="literal">-C</tt> option. Java 1.2 and later.</p>
</dd>
<dt>
<b><tt class="literal">-i</tt> <em class="replaceable">jarfile</em></b>
</dt>
<dd>
<p>		The <tt class="literal">-i</tt> option is used instead of the
		<tt class="literal">c</tt>, <tt class="literal">t</tt>,
		<tt class="literal">u</tt>, and <tt class="literal">x</tt> commands. It tells <em class="emphasis">jar</em> to produce an index of
		all JAR files referenced by the specified
		<em class="replaceable">jarfile</em>. The index is stored
		in a file named
		<em class="emphasis">META-INF/INDEX.LIST</em> ; a Java
		interpreter or applet viewer can use the information in
		this index to optimize its class and resource lookup
		algorithm and avoid downloading unnecessary JAR files. Java 1.3 and later. </p>
</dd>
</dl>
<p>
<h3><span class="refsect1">Examples</span></h3>
	The <em class="emphasis">jar</em> command has a confusing array of
	options, but, in most cases, its use is quite simple. To create
	a simple JAR file that contains all the class files in the current
	directory and all files in a subdirectory called
	<em class="emphasis">images</em>, you can type:
      </p>
<blockquote>
<pre class="programlisting">% jar cf my.jar *.class images</pre>
</blockquote>
<p>
<span class="refsect1">Examples: </span>	To verbosely list the contents of a JAR archive:
      </p>
<blockquote>
<pre class="programlisting">% jar tvf your.jar</pre>
</blockquote>
<p>
<span class="refsect1">Examples: </span>	To extract the manifest file from a JAR file for examination or
	editing: 
      </p>
<blockquote>
<pre class="programlisting">% jar xf the.jar META-INF/MANIFEST.MF</pre>
</blockquote>
<p>
<span class="refsect1">Examples: </span>	To update the manifest of a JAR file:

<a name="INDEX-1109"></a>
</p>
<blockquote>
<pre class="programlisting">% jar ufm my.jar manifest.template</pre>
</blockquote>
<p>
<span class="refsect1"><b>See Also</b>: </span><a name="INDEX-1110"></a><em class="emphasis">jarsigner</em>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+2"><b>jarsigner</b></font></td><td align="right"><font size="+2"><b>Java 2 SDK 1.2 and later</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+2"><b>JAR Signing and Verification Tool</b></font></td><td align="right"><font size="+2"><b><i></i></b></font></td>
</tr>
</table>
<h3>Synopsis</h3>
<blockquote>
<pre class="programlisting">jarsigner [<em class="replaceable">options</em>] <em class="replaceable">jarfile</em> <em class="replaceable">signer</em>
jarsigner -verify <em class="replaceable">jarfile</em>
</pre>
</blockquote>
<p>
<h3><span class="refsect1">Description</span></h3>

<em class="emphasis">jarsigner</em> adds a digital signature to
	the specified <em class="replaceable">jarfile</em>, or, if the
	<tt class="literal">-verify</tt> option is specified, it verifies the
	digital signature or signatures already attached to the JAR
	file. The specified <em class="replaceable">signer</em> is a
	case-insensitive nickname or alias for the entity whose
	signature is to be used. The specified
	<em class="replaceable">signer</em> name is used to look up the
	private key that generates the signature. </p>
<p>
	When you apply your digital signature to a JAR file, you are
	implicitly vouching for the contents of the archive. You are
	offering your personal word that the JAR file contains only
	nonmalicious code, files that do not violate copyright laws,
	and so forth. When you verify a digitally signed JAR file, you can determine who the signer or signers of the file are and
	(if the verification succeeds) that the contents of the JAR file
	have not been changed, corrupted, or tampered with since the
	signature or signatures were applied. Verifying a
	digital signature is entirely different from deciding whether or
	not you trust the person or organization whose signature you
	verified. </p>
<p>

<em class="emphasis">jarsigner</em> and the related 
	<em class="emphasis">keytool</em> program replace the
	<em class="emphasis">javakey</em> program of Java 1.1. </p>
<p>
<h3><span class="refsect1">Options</span></h3>
<em class="emphasis">jarsigner</em> defines a number of options, many
	of which specify how a private key is to be found for the
	specified <em class="replaceable">signer</em>. Most of
	these options are unnecessary when using the
	<tt class="literal">-verify</tt> option to verify a signed JAR file:
      </p>
<dl>
<dt>
<b><tt class="literal">-certs</tt></b>
</dt>
<dd>
<p>	      If this option is specified along with either the
	      <tt class="literal">-verify</tt> or <tt class="literal">-verbose</tt>
	      option, it causes <em class="emphasis">jarsigner</em> to
	      display details of the public-key certificates associated
	      with the signed JAR file. </p>
</dd>
<dt>
<b><tt class="literal">-J</tt><em class="replaceable">javaoption</em></b>
</dt>
<dd>
<p>	      Passes the specified <em class="replaceable">javaoption</em>
	      directly to the Java interpreter. </p>
</dd>
<dt>
<b><tt class="literal">-keypass</tt> <em class="replaceable">password</em></b>
</dt>
<dd>
<p>	      Specifies the password that encrypts the private key of
	      the specified <em class="replaceable">signer</em>. If this
	      option is not specified,
	      <em class="emphasis">jarsigner</em> prompts you for
	      the password. </p>
</dd>
<dt>
<b><tt class="literal">-keystore</tt> <em class="replaceable">url</em></b>
</dt>
<dd>
<p>	      A <em class="emphasis">keystore</em> is a file that contains keys
	      and certificates. This option specifies the filename or URL
	      of the keystore in which the private- and public-key
	      certificates of the specified
	      <em class="replaceable">signer</em> are looked up. The
	      default is the file named <em class="emphasis">.keystore</em> in
	      the user's home directory (the value of the system
	      property <tt class="literal">user.home</tt>). This is also the
	      default location of the keystore managed by
	      <em class="emphasis">keytool</em>. </p>
</dd>
<dt>
<b><tt class="literal">-sigfile</tt> <em class="replaceable">basename</em></b>
</dt>
<dd>
<p>	      Specifies the base names of the <em class="emphasis">.SF</em> 
	      and <em class="emphasis">.DSA</em> files added
	      to the <em class="emphasis">META-INF/</em> directory of the JAR
	      file. If you leave this option unspecified, the base
	      filename is chosen based on the
	      <em class="replaceable">signer</em> name. </p>
</dd>
<dt>
<b><tt class="literal">-signedjar</tt> <em class="replaceable">outputfile</em></b>
</dt>
<dd>
<p>	      Specifies the name for the signed JAR file created by
	      <em class="emphasis">jarsigner</em>. If this option is not
	      specified, <em class="emphasis">jarsigner</em> overwrites
	      the <em class="replaceable">jarfile</em> specified on the
	      command line. </p>
</dd>
<dt>
<b><tt class="literal">-storepass</tt> <em class="replaceable">password</em></b>
</dt>
<dd>
<p>	      Specifies the password that verifies the integrity of
	      the keystore (but does not encrypt the private key). If this option is
	      omitted, <em class="emphasis">jarsigner</em> prompts you
	      for the password. </p>
</dd>
<dt>
<b><tt class="literal">-storetype</tt> <em class="replaceable">type</em></b>
</dt>
<dd>
<p>	      Specifies the type of keystore specified by the
	      <tt class="literal">-keystore</tt> option. The default is the
	      system-default keystore type, which on most systems is the
	      Java Keystore type, known as "JKS". If you have the Java
	      Cryptography Extension installed, you may want to use a
	      "JCEKS" keystore instead. </p>
</dd>
<dt>
<b><tt class="literal">-verbose</tt></b>
</dt>
<dd>
<p>	      Displays extra information about the signing or
	      verification process. </p>
</dd>
<dt>
<b><tt class="literal">-verify</tt></b>
</dt>
<dd>
<p>	      Specifies that <em class="emphasis">jarsigner</em> should
	      verify the specified JAR file rather than sign it.</p>
</dd>
</dl>
<p>
<span class="refsect1"><b>See Also</b>: </span><em class="emphasis">jar</em>, <em class="emphasis">keytool</em>, <em class="emphasis">javakey</em><a name="INDEX-1111"></a><a name="INDEX-1112"></a>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+2"><b>java</b></font></td><td align="right"><font size="+2"><b>JDK 1.0 and later</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+2"><b>The Java Interpreter</b></font></td><td align="right"><font size="+2"><b><i></i></b></font></td>
</tr>
</table>
<h3>Synopsis</h3>
<blockquote>
<pre class="programlisting">java [ <em class="replaceable">interpreter-options</em> ] <em class="replaceable">classname</em> [ <em class="replaceable">program-arguments</em> ]
java [ <em class="replaceable">interpreter-options</em> ] -jar <em class="replaceable">jarfile</em> [ <em class="replaceable">program-arguments</em> ]</pre>
</blockquote>
<p>
<h3><span class="refsect1">Description</span></h3>
<a name="INDEX-1113"></a><em class="emphasis">java</em> is the Java byte-code
	interpreter; it runs Java programs. The program to be run
	is the class specified by <em class="replaceable">classname</em>. This must be a fully qualified name: it must include the package
	name of the class, but not the <em class="emphasis">.class</em> file
	extension. For example:</p>

<blockquote>
<pre class="programlisting">% java david.games.Checkers
% java Test</pre>
</blockquote>

<p>
	The specified class must define a
	<tt class="literal">main()</tt> method with exactly the following
	signature:</p>

<blockquote>
<pre class="programlisting">public static void main(String[] args)</pre>
</blockquote>

<p>
	This method serves as the program entry point: the interpreter
	begins execution here. </p>
<p>
	In Java 1.2 and later, a program can be packaged in an
	executable JAR file. To run a program packaged in this fashion,
	use the <tt class="literal">-jar</tt> option to specify the JAR file. The manifest of an executable JAR file must contain a
	<tt class="literal">Main-Class</tt> 
	attribute that specifies which class within the JAR
	file contains the <tt class="literal">main()</tt> method at which the
	interpreter is to begin execution. </p>
<p>
	Any command-line options that precede the name of the class or
	JAR file to execute are options to the Java interpreter itself. Any options that follow the class name or JAR filename are
	options to the program; they are ignored by the Java
	interpreter and passed as an array of strings to the
	<tt class="literal">main()</tt> method of the program. </p>
<p>
	The Java interpreter runs until the <tt class="literal">main()</tt>
	method exits, and any threads (except for threads marked as
	daemon threads) created by the program have also exited. </p>
<p>
<h3><span class="refsect1">Interpreter Versions</span></h3>	  
The <em class="emphasis">java</em> program is the basic version of
	  the Java interpreter. In addition to this program, however,
	  there are several other versions of the Java interpreter. Each of these versions is similar to <em class="emphasis">java</em>,
	  but has a specialized function. The various interpreter
	  programs are the following:
	</p>
<dl>
<dt>
<b><em class="emphasis">java</em></b>
</dt>
<dd>
<p>		This is the basic version of the Java interpreter; 
		it is usually the correct one to use. The behavior and
		set of supported options changed between Java 1.1
		and Java 1.2. </p>
</dd>
<dt>
<b><em class="emphasis">oldjava</em></b>
</dt>
<dd>
<p>		This version of the interpreter is included in 
		Java 1.2 and Java 1.3x for compatibility with the Java
		1.1 interpreter. It loads classes using the Java 1.1
		class-loading scheme. Very few Java applications need
		to use this version of the interpreter. </p>
</dd>
<dt>
<b><em class="emphasis">javaw</em></b>
</dt>
<dd>
<p>		This version of the interpreter is included only on
		Windows platforms. Use <em class="emphasis">javaw</em> when
		you want to run a Java program (from a script, for
		example) without forcing a console window to appear. In Java 1.2 and Java 1.3, there is also an
		<em class="emphasis">oldjavaw</em> program that combines the
		features of <em class="emphasis">oldjava</em> and
		<em class="emphasis">javaw</em>. </p>
</dd>
<dt>
<b><em class="emphasis">java_g</em></b>
</dt>
<dd>
<p>		In Java 1.0 and Java 1.1, <em class="emphasis">java_g</em> is
		a debugging version of the Java interpreter. It
		includes a few specialized command-line options, but is
		rarely used. Windows platforms also define a
		<em class="emphasis">javaw_g</em> program. <em class="emphasis">java_g</em> is not included in Java 1.2
		or later versions. </p>
</dd>
<dt>
<b><em class="emphasis">Client or Classic VM</em></b>
</dt>
<dd>
<p>		In Java 1.3, the <em class="emphasis">java</em> application
		launcher tool can run a program using either of two
		VM implementations. The "Client VM" uses
		Sun's Hotspot incremental compilation technology and is
		highly tuned for running client-side Java applications
		(as opposed to server applications). This is the
		default VM. The "Classic VM" is essentially the same VM
		used by Java 1.2. To select the "Classic VM," specify the
		<tt class="literal">-classic</tt> option. </p>
</dd>
<dt>
<b><em class="emphasis">Just-In-Time Compiler</em></b>
</dt>
<dd>
<p>		In Java 1.2, and in Java 1.3 when you specify the
		<tt class="literal">-classic</tt> option, the Java interpreter
		uses a just-in-time compiler (if one is available for
		your platform). A JIT converts Java byte codes to native
		machine instructions at runtime and significantly 
		speeds up the
		execution of a typical Java program. If you
		do not want to use the JIT, you can disable it by
		setting the <tt class="literal">JAVA_COMPILER</tt> environment
		variable to "NONE" or the
		<tt class="literal">java.compiler</tt> system property to
		"NONE" using the <tt class="literal">-D</tt> option:</p>

<blockquote>
<pre class="programlisting">% setenv JAVA_COMPILER NONE                        <em class="replaceable">// Unix syntax</em>
% java -Djava.compiler=NONE MyProgram</pre>
</blockquote>

<p>		If you want to use a different JIT compiler
		implementation, set the environment variable or system
		property to the name of the desired implementation. </p>
</dd>
<dt>
<b><em class="emphasis">Threading systems</em></b>
</dt>
<dd>
<p>		On Solaris and related Unix platforms, you have a choice
		of the type of threads used by the Java 1.2 interpreter
		and the "Classic VM" of Java 1.3. To use native OS
		threads, specify <tt class="literal">-native</tt>. To use
		nonnative, or green, threads (the default), specify
		<tt class="literal">-green</tt>. In Java 1.3, the default
		"Client VM" uses native threads. Specifying
		<tt class="literal">-green</tt> or <tt class="literal">-native</tt>
		in Java 1.3 implicitly specifies
		<tt class="literal">-classic</tt> as well. </p>
</dd>
</dl>
<h3>Options</h3>
<dl>
<dt>
<b><tt class="literal">-classic</tt></b>
</dt>
<dd>
<p>	      Runs the "Classic VM" instead of the default
	      high-performance "Client VM."  Java 1.3 and later. </p>
</dd>
<dt>
<b><tt class="literal">-classpath</tt> <em class="replaceable">path</em></b>
</dt>
<dd>
<p>	      Specifies the directories, JAR files, and ZIP files
	      <em class="emphasis">java</em> searches when trying to load a
	      class. In Java 1.0 and 1.1, and with the
	      <em class="emphasis">oldjava</em> interpreter, this option
	      specifies the location of system classes, extension
	      classes, and application classes. In Java 1.2 and later,
	      this option specifies only the location of application
	      classes. See <a href="#javanut3-load-class">Loading Classes</a> for further
	      details. </p>
</dd>
<dt>
<b><tt class="literal">-cp</tt></b>
</dt>
<dd>
<p>	      A synonym for
	      <tt class="literal">-classpath</tt>. Java 1.2 and later. </p>
</dd>
<dt>
<b><tt class="literal">-cs</tt>, <tt class="literal">-checksource</tt></b>
</dt>
<dd>
<p>	      Both options tell <em class="emphasis">java</em> to
	      check the modification times on the specified class file
	      and its corresponding source file. If the class file
	      cannot be found or if it is out of date, it is
	      automatically recompiled from the source. Java 1.0 and Java 
	      1.1 only; these options are not available in Java 1.2 and
	      later. </p>
</dd>
<dt>
<b><tt class="literal">-D</tt><em class="replaceable">propertyname</em><tt class="literal">=</tt><em class="replaceable">value</em></b>
</dt>
<dd>
<p>	      Defines <em class="replaceable">propertyname</em> to equal
	      <em class="replaceable">value</em> in the system properties list. Your Java program can then look up the specified value by
	      its property name. You can specify any number of
	      <tt class="literal">-D</tt> options. For example:
	    </p>
<blockquote>
<pre class="programlisting">% java -Dawt.button.color=gray -Dmy.class.pointsize=14 my.class</pre>
</blockquote>
</dd>
<dt>
<b><tt class="literal">-debug</tt></b>
</dt>
<dd>
<p>	      Causes <em class="emphasis">java</em> to start up in a way that
	      allows the <em class="emphasis">jdb</em> debugger to attach
	      itself to the interpreter session. In Java 1.2 and later,
	      this option has been replaced with
	      <tt class="literal">-Xdebug</tt>. </p>
</dd>
<dt>
<b><tt class="literal">-green</tt></b>
</dt>
<dd>
<p>	      On operating systems such as Solaris that support
	      multiple styles of threading, this option selects
	      nonnative, or green, threads. This is the default in
	      Java 1.2. In Java 1.3, using this option also selects the
	      <tt class="literal">-classic</tt> option. See also
	      <tt class="literal">-native</tt>. Java 1.2 and later. </p>
</dd>
<dt>
<b><tt class="literal">-help</tt>, <tt class="literal">-?</tt></b>
</dt>
<dd>
<p>	      Prints a usage message and exits. See also
	      <tt class="literal">-X</tt>. </p>
</dd>
<dt>
<b><tt class="literal">-jar</tt> <em class="replaceable">jarfile</em></b>
</dt>
<dd>
<p>	      Runs the specified executable
	      <em class="replaceable">jarfile</em>. The manifest of the
	      specified <em class="replaceable">jarfile</em> must contain
	      a <tt class="literal">Main-Class</tt> attribute that identifies
	      the class with the <tt class="literal">main()</tt> method at
	      which program execution is to begin. Java 1.2 and later. </p>
</dd>
<dt>
<b><tt class="literal">-l</tt><em class="replaceable">digit</em></b>
</dt>
<dd>
<p>	      Sets the logging level for trace output. See
	      <tt class="literal">-t</tt> and <tt class="literal">-tm</tt>. <em class="emphasis">java_g</em> only. </p>
</dd>
<dt>
<b><tt class="literal">-ms </tt><em class="replaceable">initmem</em><tt class="literal">[k|m]</tt></b>
</dt>
<dd>
<p>	      Specifies how much memory is allocated for the heap when
	      the interpreter starts up. In Java 1.2 and later, this
	      option has been renamed <tt class="literal">-Xms</tt>. </p>
</dd>
<dt>
<b><tt class="literal">-mx</tt> <em class="replaceable">maxmem</em><tt class="literal">[k|m]</tt></b>
</dt>
<dd>
<p>	      Specifies the maximum heap size the interpreter can use
	      for dynamically allocated objects and arrays. In Java 1.2
	      and later, this option has been renamed
	      <tt class="literal">-Xmx</tt>. </p>
</dd>
<dt>
<b><tt class="literal">-native</tt></b>
</dt>
<dd>
<p>	      On operating systems such as Solaris that support
	      multiple styles of threading, this option selects
	      native threads, instead of the default green threads. Using native threads can be advantageous in some
	      circumstances, such as when running on a multi-CPU
	      computer. In Java 1.3, the default Hotspot virtual
	      machine uses native threads. Selecting this 
	      option in Java 1.3
	      implicitly selects the <tt class="literal">-classic</tt> option
	      as well. Java 1.2 and later. </p>
</dd>
<dt>
<b><tt class="literal">-noasyncgc</tt></b>
</dt>
<dd>
<p>	      Do not do garbage collection asynchronously. With this
	      option specified, <em class="emphasis">java</em> performs
	      garbage collection only when it runs out of memory or when the
	      garbage collector is explicitly invoked. Without this
	      option, <em class="emphasis">java</em> runs the garbage
	      collector as a separate, low-priority thread. Java 1.0 and
	      Java 1.1 only; this option
	      has been removed in Java 1.2 and later versions. </p>
</dd>
<dt>
<b><tt class="literal">-noclassgc</tt></b>
</dt>
<dd>
<p>	      Do not garbage-collect loaded classes no longer
	      in use. This option was added in Java 1.1; it has been renamed
	      to <tt class="literal">-Xnoclassgc</tt> as of Java 1.2. </p>
</dd>
<dt>
<b><tt class="literal">-noverify</tt></b>
</dt>
<dd>
<p>	      Never run the byte-code verifier. Java 1.0 and Java 1.1 only;
	      this option has been
	      removed in Java 1.2 and later versions. </p>
</dd>
<dt>
<b><tt class="literal">-oss</tt> <em class="replaceable">stacksize</em><tt class="literal">[k|m]</tt></b>
</dt>
<dd>
<p>	      Sets the size of each thread's Java code stack. By
	      default, <em class="replaceable">stacksize</em> is specified in
	      bytes. You can specify it in kilobytes by appending the
	      letter <tt class="literal">k</tt> or in megabytes by appending
	      the letter <tt class="literal">m</tt>. The default value is 400
	      KB. You must specify at least 1000 bytes. Java 1.0 and
	      Java 1.1 only; this option
	      has been removed in Java 1.2 and later versions. </p>
</dd>
<dt>
<b><tt class="literal">-prof[:</tt><em class="replaceable">file</em><tt class="literal">]</tt></b>
</dt>
<dd>
<p>	      Outputs profiling information to the specified
	      <em class="replaceable">file</em> or to the file
	      <em class="emphasis">java.prof</em> in the current directory. The format of this profiling information is not well-documented. Prior to Java 1.1, no <em class="replaceable">file</em>
	      can be specified; profiling information is always output
	      to <em class="emphasis">./java.prof</em>. Java 1.0 and Java 1.1
	      only; this option has been
	      superseded in Java 1.2 by the
	      <tt class="literal">-Xrunhprof</tt> option and in Java 1.3 by 
	      <tt class="literal">-Xprof</tt>. </p>
</dd>
<dt>
<b><tt class="literal">-showversion</tt></b>
</dt>
<dd>
<p>	      This option works like the <tt class="literal">-version</tt> option,
	      except that the interpreter continues running after
	      printing the version information. Java 1.3 and later. </p>
</dd>
<dt>
<b><tt class="literal">-ss</tt> <em class="replaceable">stacksize</em><tt class="literal">[k|m]</tt></b>
</dt>
<dd>
<p>	      Sets the size of each thread's native code stack. By
	      default, <em class="replaceable">stacksize</em> is specified in
	      bytes. You can specify it in kilobytes by appending the
	      letter <tt class="literal">k</tt> or in megabytes by appending
	      the letter <tt class="literal">m</tt>. The default value is 128
	      KB. You must specify at least 1000 bytes. Java 1.0 and
	      Java 1.1 only; this option
	      has been removed in Java 1.2 and later versions. </p>
</dd>
<dt>
<b><tt class="literal">-t</tt></b>
</dt>
<dd>
<p>	      Outputs a trace of all byte codes executed. <em class="emphasis">java_g</em> only. </p>
</dd>
<dt>
<b><tt class="literal">-tm</tt></b>
</dt>
<dd>
<p>	      Outputs a trace of all methods executed. <em class="emphasis">java_g</em> only. </p>
</dd>
<dt>
<b><tt class="literal">-verbose</tt>, <tt class="literal">-v</tt>, <tt class="literal">-verbose:class</tt></b>
</dt>
<dd>
<p>	      Prints a message each time <em class="emphasis">java</em> loads
	      a class. In Java 1.0 and Java 1.1, you can use
	      <tt class="literal">-v</tt> as a synonym. In Java 1.2 and
	      later, you can use <tt class="literal">-verbose:class</tt> as a
	      synonym. </p>
</dd>
<dt>
<b><tt class="literal">-verbosegc</tt></b>
</dt>
<dd>
<p>	      Prints a message when garbage collection occurs. In Java 1.2
	      and later, this option has been renamed
	      <tt class="literal">-verbose:gc</tt>. </p>
</dd>
<dt>
<b><tt class="literal">-verbose:gc</tt></b>
</dt>
<dd>
<p>	      Prints a message when garbage collection occurs. Java
	      1.2 and later. Prior to Java 1.2, use <tt class="literal">-verbosegc</tt>. </p>
</dd>
<dt>
<b><tt class="literal">-verbose:jni</tt></b>
</dt>
<dd>
<p>	      Prints a message when native methods are called. Java 
	      1.2 and later. </p>
</dd>
<dt>
<b><tt class="literal">-verify</tt></b>
</dt>
<dd>
<p>	      Runs the byte-code verifier on all classes that are
	      loaded. Java 1.0 and Java 1.1 only; this 
	      option has been removed in Java 1.2 and later. </p>
</dd>
<dt>
<b><tt class="literal">-verifyremote</tt></b>
</dt>
<dd>
<p>	      Runs the byte-code verifier on all classes that are loaded
	      through a class loader. (This generally refers to classes
	      that are dynamically loaded from an untrusted location.)
	      This is the default behavior for
	      <em class="emphasis">java</em>. Java 1.0 and Java 1.1 only; this 
	      option has been removed in Java 1.2 and later. </p>
</dd>
<dt>
<b><tt class="literal">-version</tt></b>
</dt>
<dd>
<p>	      Prints the version of the Java interpreter and exits. </p>
</dd>
<dt>
<b><tt class="literal">-X</tt></b>
</dt>
<dd>
<p>	      Displays usage information for the nonstandard interpreter
	      options (those beginning with <tt class="literal">-X</tt>) and
	      exits. See also <tt class="literal">-help</tt>. Java 1.2 and
	      later. </p>
</dd>
<dt>
<b><tt class="literal">-Xbatch</tt></b>
</dt>
<dd>
<p>	      Tells the Hotspot VM to perform all just-in-time
	      compilation in the foreground, regardless of the time
	      required for compilation. Without this option, the VM
	      compiles methods in the background while interpreting
	      them in the foreground. Java 1.3 and later. </p>
</dd>
<dt>
<b><tt class="literal">-Xbootclasspath:</tt><em class="replaceable">path</em></b>
</dt>
<dd>
<p>	      Specifies a search path consisting of directories, ZIP files,
	      and JAR files the <em class="emphasis">java</em>
	      interpreter should use to look up system classes. With
	      <em class="emphasis">oldjava</em>, use
	      <tt class="literal">-classpath</tt> to specify this
	      information. Use of this option is very rare. Java 1.2
	      and later. </p>
</dd>
<dt>
<b><tt class="literal">-Xcheck:jni</tt></b>
</dt>
<dd>
<p>	      Performs additional checks when using Java Native Interface
	      functions. Java 1.2 and later. </p>
</dd>
<dt>
<b><tt class="literal">-Xdebug</tt></b>
</dt>
<dd>
<p>	      Starts the interpreter in a way that allows a debugger to
	      communicate with it. Java 1.2 and later. Prior to Java 1.2, use
	      <tt class="literal">-debug</tt>. </p>
</dd>
<dt>
<b><tt class="literal">-Xfuture</tt></b>
</dt>
<dd>
<p>	      Strictly checks the format of all class files loaded. Without this option, <em class="emphasis">java</em> performs
	      the same checks that were performed in Java 1.1. Java
	      1.2 and later. </p>
</dd>
<dt>
<b><tt class="literal">-Xincgc</tt></b>
</dt>
<dd>
<p>	      Uses incremental garbage collection. In this mode the
	      garbage collector runs continuously in the background, and
	      a running program is rarely, if ever, subject to noticeable
	      pauses while garbage collection occurs. Using this option
	      typically results in a 10% decrease in overall
	      performance, however. Java 1.3 and later. </p>
</dd>
<dt>
<b><tt class="literal">-Xint</tt></b>
</dt>
<dd>
<p>	      Tells the Hotspot VM to operate in interpreted
	      mode only, without performing any just-in-time
	      compilation. Java 1.3 and later. </p>
</dd>
<dt>
<b><tt class="literal">-Xmixed</tt></b>
</dt>
<dd>
<p>	      Tells the Hotspot VM to perform just-in-time
	      compilation on frequently used methods ("hotspots") and
	      execute other methods in interpreted mode. This is the
	      default behavior. Java 1.3 and later. </p>
</dd>
<dt>
<b><tt class="literal">-Xms </tt><em class="replaceable">initmem</em><tt class="literal">[k|m]</tt></b>
</dt>
<dd>
<p>	      Specifies how much memory is allocated for the heap when
	      the interpreter starts up. By default,
	      <em class="replaceable">initmem</em> 
	      is specified in bytes. You can
	      specify it in kilobytes by appending the letter
	      <tt class="literal">k</tt> or in megabytes by appending the
	      letter <tt class="literal">m</tt>. The default is 1 MB. For
	      large or memory-intensive applications (such as the Java
	      compiler), you can improve runtime performance by
	      starting the interpreter with a larger amount of memory. You must specify an initial heap size of at least 1000
	      bytes. Java 1.2 and later. Prior to Java 1.2, use <tt class="literal">-ms</tt>. </p>
</dd>
<dt>
<b><tt class="literal">-Xmx</tt> <em class="replaceable">maxmem</em><tt class="literal">[k|m]</tt></b>
</dt>
<dd>
<p>	      Specifies the maximum heap size the interpreter uses
	      for dynamically allocated objects and arrays. <em class="replaceable">maxmem</em> is specified in bytes by
	      default. You can specify <em class="replaceable">maxmem</em> in
	      kilobytes by appending the letter <tt class="literal">k</tt> and
	      in megabytes by appending the letter
	      <tt class="literal">m</tt>. The default is 16 MB. 


You cannot specify a heap size
	      less than 1000 bytes. Java 1.2 and later. Prior to Java 1.2, use
	      <tt class="literal">-mx</tt>. </p>
</dd>
<dt>
<b><tt class="literal">-Xnoclassgc</tt></b>
</dt>
<dd>
<p>	      Do not garbage-collect classes. Java 1.2 and later. In Java 1.1, use
	      <tt class="literal">-noclassgc</tt>. </p>
</dd>
<dt>
<b><tt class="literal">-Xprof</tt></b>
</dt>
<dd>
<p>	      Prints profiling output to standard output. Java 1.3 and
	      later. In Java 1.2,
	      or when using the <tt class="literal">-classic</tt> option, use 
	      <tt class="literal">-Xrunhprof</tt>. Prior to Java 1.2, use 
	      <tt class="literal">-prof</tt>. </p>
</dd>
<dt>
<b><tt class="literal">-Xrs</tt></b>
</dt>
<dd>
<p>	      Requests that the interpreter use fewer operating system
	      signals. This option may improve performance on some
	      systems. Java 1.2 and later. </p>
</dd>
<dt>
<b><tt class="literal">-Xrunhprof:</tt><em class="replaceable">suboptions</em></b>
</dt>
<dd>
<p>	      Turns on CPU, heap, or monitor profiling. <em class="replaceable">suboptions</em> is a comma-separated
	      list of <tt class="literal">name=value</tt> pairs. Use
	      <tt class="literal">-Xrunhprof:help</tt> for a list of supported
	      options and values. Java 1.2 and later. Prior to Java 1.2, rudimentary
	      profiling support is available with the
	      <tt class="literal">-prof</tt> option. In Java 1.3, this option
	      is supported if <tt class="literal">-classic</tt> is used, but
	      is not supported by the new Hotspot VM. See
	      <tt class="literal">-Xprof</tt>. </p>
</dd>
</dl>
<p>
<h3><a name="javanut3-load-class">
<span class="refsect1">Loading Classes</span></a></h3>
The Java interpreter knows where to find the system classes that
	comprise the Java platform. In Java 1.2 and later, it also
	knows where to find the class files for all extensions installed
	in the system extensions directory. However, the interpreter
	must be told where to find the nonsystem classes that comprise
	the application to be run. </p>
<p>
Class files are stored in directories that correspond to their
	package name. For example, the class
	<tt class="literal">com.davidflanagan.utils.Util</tt> is stored
	in a file <em class="filename">com/davidflanagan/utils/Util.class</em>. By default, the interpreter uses the current working directory
	as the root and looks for all classes in and beneath this
	directory. </p>
<p>
The interpreter can also search for classes within ZIP and JAR
	files. To tell the interpreter where to look for classes, you
	specify a <em class="emphasis">classpath</em>&#8202;: a list of directories
	and ZIP and JAR archives. When looking for a class, the
	interpreter searches
	each of the specified locations in the order in which they are
	specified. </p>
<p>
The easiest way to specify a classpath is to set the
	<tt class="literal">CLASSPATH</tt> environment variable, which works
	much like the <tt class="literal">PATH</tt> variable used by a Unix
	shell or a Windows command-interpreter path. To specify a
	classpath in Unix, you might type a command like this:</p>

<blockquote>
<pre class="programlisting">% setenv CLASSPATH .:~/myclasses:/usr/lib/javautils.jar:/usr/lib/javaapps</pre>
</blockquote>

<p>
On a Windows system, you might use a command like the following:</p>

<blockquote>
<pre class="programlisting">C:\&gt; set CLASSPATH=.;c:\myclasses;c:\javatools\classes.zip;d:\javaapps</pre>
</blockquote>
<p>
Note that Unix and Windows use different characters to separate
	directory and path components. </p>
<p>
You can also specify a classpath with the
	<tt class="literal">-classpath</tt> or <tt class="literal">-cp</tt> options
	to the Java interpreter. A path specified with one of these
	options overrides any path specified by the
	<tt class="literal">CLASSPATH</tt> environment variable. In Java 1.2
	and later, the <tt class="literal">-classpath</tt> option specifies
	only the search path for application and user classes. Prior to Java 1.2, or when using the
	<em class="emphasis">oldjava</em> interpreter, this option specifies
	the search path for all classes, including system classes and
	extension classes.
<a name="INDEX-1114"></a>
</p>
<p>
<span class="refsect1"><b>See Also</b>: </span><a name="INDEX-1115"></a><em class="emphasis">javac</em>, <em class="emphasis">jdb</em>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+2"><b>javac</b></font></td><td align="right"><font size="+2"><b>JDK 1.0 and later</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+2"><b>The Java Compiler</b></font></td><td align="right"><font size="+2"><b><i></i></b></font></td>
</tr>
</table>
<h3>Synopsis</h3>
<blockquote>
<pre class="programlisting">javac [ <em class="replaceable">options</em> ] <em class="replaceable">files</em>
oldjavac [ <em class="replaceable">options</em> ] <em class="replaceable">files</em>
</pre>
</blockquote>
<p>
<h3><span class="refsect1">Description</span></h3>

<em class="emphasis">javac</em> is the Java compiler; it
	compiles Java source code (in <em class="emphasis">.java</em> files)
	into Java byte codes (in <em class="emphasis">.class</em> files). The
	Java compiler is itself written in Java. The Java compiler has
	been completely rewritten in Java 1.3, and its performance has
	been substantially improved. Although the new
	<em class="emphasis">javac</em> is substantially compatible with
	previous versions of the compiler, the old version of the
	compiler is provided as <em class="emphasis">oldjavac</em>. </p>
<p>
<em class="emphasis">javac</em> can be passed any number of Java
	source files, whose names must all end with the
	<em class="emphasis">.java</em> extension. <em class="emphasis">javac</em> produces a separate
	<em class="emphasis">.class</em> class file for each class defined in
	the source files. Each source file can contain any number of
	classes, although only one can be a <tt class="literal">public</tt>
	top-level class. The name of the source file (minus the 
	<em class="emphasis">.java</em>
	extension) must match the name of the <tt class="literal">public</tt> 
	class it contains. </p>
<p>
	In Java 1.2 and later, if a filename specified on the
	command line begins with the character <tt class="literal">@</tt>, 
	that file is
	taken not as a Java source file, but as a list of Java source
	files. Thus, if you keep a list of Java source files for a
	particular project in a file named
	<em class="emphasis">project.list</em>, you can compile all those
	files at once with the command:</p>

<blockquote>
<pre class="programlisting">% javac @project.list</pre>
</blockquote>

<p>
	To compile a source file, <em class="emphasis">javac</em>
	must be able to find definitions of all classes used in the
	source file. It looks for definitions in both source-file and
	class-file form, automatically compiling any source files
	that have no corresponding class files or that
	have been modified since they were most recently compiled. </p>

<h3>Options</h3>
<dl>
<dt>
<b><tt class="literal">-bootclasspath</tt> <em class="replaceable">path</em></b>
</dt>
<dd>
<p>	      Specifies the search <em class="replaceable">path</em><em class="emphasis">javac</em> uses to look up system classes. This option is handy when you are 
	      using <em class="emphasis">javac</em>
	      as a cross-compiler to compile classes against different
	      versions of the Java API. For example, you might use the
	      Java 1.3 compiler to compile classes against the Java 1.2
	      runtime environment. This option does not
	      specify the system classes used to run the compiler
	      itself, only the system classes read by the compiler. See
	      also <tt class="literal">-extdirs</tt> and
	      <tt class="literal">-target</tt>. Java 1.2 and later. </p>
</dd>
<dt>
<b><tt class="literal">-classpath</tt> <em class="replaceable">path</em></b>
</dt>
<dd>
<p>	      Specifies the 
	      path <em class="emphasis">javac</em> uses to look up
	      classes referenced in the specified source code. This
	      option overrides any path specified by the
	      <tt class="literal">CLASSPATH</tt> environment variable. The
	      <em class="replaceable">path</em> specified is an ordered list of
	      directories, ZIP files, and JAR archives, separated by colons
	      on Unix systems or semicolons on Windows systems. If the
	      <tt class="literal">-sourcepath</tt> option is not set, this
	      option also specifies the search path for source files. </p>
<p>	      Prior to Java 1.2, this option specifies the path to
	      system and extension classes, as well as user and
	      application classes, and must be used carefully. In Java
	      1.2 and later, it specifies only the search path for
	      application classes. See the discussion of "Loading Classes" in the
	      documentation for the <em class="emphasis">java</em> command
	      for further information. </p>
</dd>
<dt>
<b><tt class="literal">-d</tt> <em class="replaceable">directory</em></b>
</dt>
<dd>
<p>	      Specifies the directory in which (or beneath which) class files
	      should be stored. By default, <em class="emphasis">javac</em>
	      stores the <em class="emphasis">.class</em> files it generates
	      in the same directory as the <em class="emphasis">.java</em>
	      files those classes were defined in. If the
	      <tt class="literal">-d</tt> option is specified, however, the
	      specified <em class="replaceable">directory</em> is treated
	      as the root of the class hierarchy, and
	      <em class="emphasis">.class</em> files are placed in this
	      directory or the appropriate subdirectory below it,
	      depending on the package name of the class. Thus, the
	      following command:
	    </p>
<blockquote>
<pre class="programlisting">% javac -d /java/classes Checkers.java</pre>
</blockquote>
<p>	      places the file <em class="emphasis">Checkers.class</em> in the
	      directory <em class="emphasis">/java/classes</em> if the
	      <em class="emphasis">Checkers.java</em> file has no
	      <tt class="literal">package</tt> statement. On the other hand,
	      if the source file specifies that it is in a package:
	    </p>
<blockquote>
<pre class="programlisting">package com.davidflanagan.games;</pre>
</blockquote>
<p>	      the <em class="emphasis">.class</em> file is stored in
	      <em class="emphasis">/java/classes/com/davidflanagan/games</em>. When the <tt class="literal">-d</tt> option is specified,
	      <em class="emphasis">javac</em> automatically creates any
	      directories it needs to store its class files in the
	      appropriate place. </p>
</dd>
<dt>
<b><tt class="literal">-depend</tt></b>
</dt>
<dd>
<p>	      Tells <em class="emphasis">javac</em> to recursively search for
	      out-of-date class files in need of recompilation. This
	      option forces a thorough compilation, but can slow
	      the process down significantly. In Java 1.2 and later, 
	      this option
	      has been renamed <tt class="literal">-Xdepend</tt>. </p>
</dd>
<dt>
<b><tt class="literal">-deprecation</tt></b>
</dt>
<dd>
<p>	      Tells <em class="emphasis">javac</em> to issue a warning for
	      every use of a deprecated API. By default,
	      <em class="emphasis">javac</em> issues only a single warning
	      for each source file that uses deprecated APIs. Java
	      1.1 and later. </p>
</dd>
<dt>
<b><tt class="literal">-extdirs</tt> <em class="replaceable">path</em></b>
</dt>
<dd>
<p>	      Specifies a list of directories to search for
	      extension JAR files. It is used along with
	      <tt class="literal">-bootclasspath</tt> when doing cross-compilation 
	      for different versions of the Java runtime
	      environment. Java 1.2 and later. </p>
</dd>
<dt>
<b><tt class="literal">-g</tt></b>
</dt>
<dd>
<p>	      Tells <em class="emphasis">javac</em> to add line
	      number, source file, and local variable information to the
	      output class files, for use by debuggers. By default,
	      <em class="emphasis">javac</em> generates only the line
	      numbers. </p>
</dd>
<dt>
<b><tt class="literal">-g:none</tt></b>
</dt>
<dd>
<p>	      Tells <em class="emphasis">javac</em> to include no debugging
	      information in the output class files. Java 1.2 and later. </p>
</dd>
<dt>
<b><tt class="literal">-g:</tt><em class="replaceable">keyword-list</em></b>
</dt>
<dd>
<p>	      Tells <em class="emphasis">javac</em> to output the types of
	      debugging information specified by the comma-separated
	      <em class="replaceable">keyword-list</em>. The valid
	      keywords are: <tt class="literal">source</tt>, which specifies
	      source-file information; <tt class="literal">lines</tt>, which
	      specifies line number information; and
	      <tt class="literal">vars</tt>, which specifies local variable
	      debugging information. Java 1.2 and later. </p>
</dd>
<dt>
<b><tt class="literal">-J</tt><em class="replaceable">javaoption</em></b>
</dt>
<dd>
<p>	      Passes the argument <em class="replaceable">javaoption</em>
	      directly through to the Java interpreter. For example:
	      <tt class="literal">-J-Xmx32m</tt>. <em class="replaceable">javaoption</em> should not contain
	      spaces; if multiple arguments must be passed to the
	      interpreter, use multiple <tt class="literal">-J</tt> options. Java 1.1 and later. </p>
</dd>
<dt>
<b><tt class="literal">-nowarn</tt></b>
</dt>
<dd>
<p>	      Tells <em class="emphasis">javac</em> not to print warning
	      messages. Errors are still reported as usual. </p>
</dd>
<dt>
<b><tt class="literal">-nowrite</tt></b>
</dt>
<dd>
<p>	      Tells <em class="emphasis">javac</em> not to create any class
	      files. Source files are parsed as usual, but no output is
	      written. This option is useful when you want to check
	      that a file will compile without actually compiling it. Java 1.0 and Java 1.1 only; this 
	      option is not available in Java 1.2 and later. </p>
</dd>
<dt>
<b><tt class="literal">-O</tt></b>
</dt>
<dd>
<p>	      Enables optimization of class files to improve their
	      execution speed. Using this option can result in larger
	      class files that are difficult to debug and cause longer
	      compilation times. Prior to Java 1.2, this option is
	      incompatible with <tt class="literal">-g</tt>; turning on
	      <tt class="literal">-O</tt> implicitly turns off
	      <tt class="literal">-g</tt> and turns on
	      <tt class="literal">-depend</tt>. </p>
</dd>
<dt>
<b><tt class="literal">-sourcepath</tt> <em class="replaceable">path</em></b>
</dt>
<dd>
<p>	      Specifies the list of directories, ZIP files, and
	      JAR archives that <em class="emphasis">javac</em> searches when
	      looking for source files. The files found in this source
	      path are compiled if no corresponding class files are
	      found or if the source files are newer than the class files. By default, source files are searched for in the same
	      places class files are searched for. Java 1.2 and
	      later. </p>
</dd>
<dt>
<b><tt class="literal">-target</tt> <em class="replaceable">version</em></b>
</dt>
<dd>
<p>	      Specifies the class-file-format version to use for the
	      generated class files. The default
	      <em class="replaceable">version</em> is 1.1, which generates
	      class files that can be read and executed by Java 1.0 and
	      later virtual machines. If you specify
	      <em class="replaceable">version</em> as 1.2,
	      <em class="emphasis">javac</em> increments the class file
	      version number, producing a class file that does not run
	      with a Java 1.0 or Java 1.1 interpreter. There have not
	      been any actual changes to the Java class-file format; the
	      new version number is simply a convenient way to prevent
	      classes that depend on the many new features of Java 1.2
	      from being run on out-of-date interpreters. </p>
</dd>
<dt>
<b><tt class="literal">-verbose</tt></b>
</dt>
<dd>
<p>	      Tells the compiler to display messages about what it is
	      doing. In particular, it causes
	      <em class="emphasis">javac</em> to list all the source files
	      it compiles, including files that did not appear on the
	      command line. </p>
</dd>
<dt>
<b><tt class="literal">-X</tt></b>
</dt>
<dd>
<p>	      Tells the <em class="emphasis">javac</em> compiler
	      (and, in Java 1.3, the <em class="emphasis">oldjavac</em>
	      compiler) to display usage information for its
	      nonstandard options (all of which begin with
	      <tt class="literal">-X</tt>). Java 1.2 and 
	      <em class="emphasis">oldjavac</em> only. </p>
</dd>
<dt>
<b><tt class="literal">-Xdepend</tt></b>
</dt>
<dd>
<p>	      Tells <em class="emphasis">javac</em> to
	      recursively search for source files that need
	      recompilation. This causes a very thorough but
	      time-consuming compilation process. Java 1.2 and 
	      <em class="emphasis">oldjavac</em> only. </p>
</dd>
<dt>
<b><tt class="literal">-Xstdout</tt></b>
</dt>
<dd>
<p>	      Tells <em class="emphasis">javac</em> to send warning and error
	      messages to the standard output stream instead of the
	      standard error stream. Java 1.2 and 
	      <em class="emphasis">oldjavac</em> only. </p>
</dd>
<dt>
<b><tt class="literal">-Xverbosepath</tt></b>
</dt>
<dd>
<p>	      Displays verbose output explaining where various class files
	      and source files were found. Java 1.2 and 
	      <em class="emphasis">oldjavac</em> only. </p>
</dd>
</dl>
<h3>Environment</h3>
<dl>
<dt>
<b><tt class="literal">CLASSPATH</tt></b>
</dt>
<dd>
<p>	      Specifies an ordered list (colon-separated on Unix,
	      semicolon-separated on Windows systems) of directories,
	      ZIP files, and JAR archives in which <em class="emphasis">javac</em>
	      should look for user class files and source files. This
	      variable is overridden by the
	      <tt class="literal">-classpath</tt> option.
<a name="INDEX-1116"></a>
</p>
</dd>
</dl>
<p>
<span class="refsect1"><b>See Also</b>: </span><a name="INDEX-1117"></a><a name="INDEX-1118"></a><em class="emphasis">java</em>, <em class="emphasis">jdb</em>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+2"><b>javadoc</b></font></td><td align="right"><font size="+2"><b>JDK 1.0 and later</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+2"><b>The Java Documentation Generator</b></font></td><td align="right"><font size="+2"><b><i></i></b></font></td>
</tr>
</table>
<h3>Synopsis</h3>
<blockquote>
<pre class="programlisting">javadoc [ <em class="replaceable">options</em> ] <em class="replaceable">package</em>... <em class="replaceable">sourcefiles</em>... <em class="replaceable">@lists</em>... </pre>
</blockquote>
<p>
<h3><span class="refsect1">Description</span></h3>
<em class="emphasis">javadoc</em> generates API documentation, in
	HTML format (by default), for any number of packages and classes
	you specify. The <em class="emphasis">javadoc</em> command line can
	list any number of package names and any number of Java source
	files. For convenience, when working with a large number of
	packages or source files, you can list them all in an auxiliary 
	file and specify the name of that file on the command
	line, preceded by an <tt class="literal">@</tt> character. </p>
<p>
<em class="emphasis">javadoc</em> uses the <em class="emphasis">javac</em>
	compiler to process all the specified Java source files and all
	the Java source files in all the specified packages. It uses the
	information it gleans from this processing to generate detailed
	API documentation. Most importantly, the generated
	documentation includes the contents of all documentation
	comments included in the source files. See <a href="ch07_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch07_01.htm">Chapter 7, "Java Programming and

Documentation Conventions"</a>, for information about writing
	doc comments in your own Java code. </p>
<p>
	When you specify a Java source file for
	<em class="emphasis">javadoc</em> to process, you must specify the
	name of the file that contains the source, including a complete
	path to the file. It is more common, however, to use
	<em class="emphasis">javadoc</em> to create documentation for entire
	packages of classes. When you specify a package for
	<em class="emphasis">javadoc</em> to process, you specify the package
	name, not the directory that contains the source code for the
	package. In this case, you may need to specify the
	<tt class="literal">-sourcepath</tt> option so that
	<em class="emphasis">javadoc</em> can find your package source code
	correctly if it is not stored in a location already listed in
	your default classpath. </p>
<p>
<em class="emphasis">javadoc</em> creates HTML documentation by
	default, but you can customize its behavior by defining a
	doclet class that generates documentation in whatever format
	you desire. You can write your own doclets using the doclet
	API defined by the <tt class="literal">com.sun.javadoc</tt> package. Documentation for this package is included in the standard
	documentation bundle for Java 1.2 and later. </p>
<p>
<em class="emphasis">javadoc</em> has significant new
	functionality as of Java 1.2. This reference page documents the
	Java 1.2 and later versions of the program, but makes no attempt
	to distinguish new features of the Java 1.2 version from the
	features that existed in previous versions. </p>
<p>
<h3><span class="refsect1">Options</span></h3>
<em class="emphasis">javadoc</em> defines a large number of options. Some are standard options that are always recognized by
	<em class="emphasis">javadoc</em>. Other options are defined by
	the doclet that produces the documentation. The options for the
	standard HTML doclet are included in the following list:
      </p>
<dl>
<dt>
<b><tt class="literal">-1.1</tt></b>
</dt>
<dd>
<p>	      Simulates the output style and directory structure of the
	      Java 1.1 version of <em class="emphasis">javadoc</em>. </p>
</dd>
<dt>
<b><tt class="literal">-author</tt></b>
</dt>
<dd>
<p>	      Includes authorship information specified with
	      <tt class="literal">@author</tt> in the generated documentation. Default doclet only. </p>
</dd>
<dt>
<b><tt class="literal">-bootclasspath</tt></b>
</dt>
<dd>
<p>	      Specifies the location of an alternate set of system
	      classes. This can be useful when cross-compiling. See
	      <em class="emphasis">javac</em> for more information on this
	      option. </p>
</dd>
<dt>
<b><tt class="literal">-bottom</tt> <em class="replaceable">text</em></b>
</dt>
<dd>
<p>	      Displays <em class="replaceable">text</em> at the bottom of
	      each generated HTML file. <em class="replaceable">text</em>
	      can contain HTML tags. See also <tt class="literal">-footer</tt>. Default doclet only. </p>
</dd>
<dt>
<b><tt class="literal">-charset</tt> <em class="replaceable">encoding</em></b>
</dt>
<dd>
<p>	      Specifies the character encoding for the output. This
	      depends on the encoding used in the documentation comments
	      of your source code, of course. The
	      <em class="replaceable">encoding</em> value is used
	      in a <tt class="literal">&lt;META&gt;</tt> tag in the HTML
	      output. Default doclet only. </p>
</dd>
<dt>
<b><tt class="literal">-classpath</tt> <em class="replaceable">path</em></b>
</dt>
<dd>
<p>	      Specifies a path
	      <em class="emphasis">javadoc</em> uses to look up both class
	      files and, if you do not specify the
	      <tt class="literal">-sourcepath</tt> option, source files. Because <em class="emphasis">javadoc</em> uses the
	      <em class="emphasis">javac</em> compiler, it needs to be able
	      to locate class files for all classes referenced by the
	      packages being documented. See <em class="emphasis">java</em>
	      and <em class="emphasis">javac</em> for more information about
	      this option and the default value provided by the
	      <tt class="literal">CLASSPATH</tt> environment variable. </p>
</dd>
<dt>
<b><tt class="literal">-d</tt> <em class="replaceable">directory</em></b>
</dt>
<dd>
<p>	      Specifies the directory in and beneath which
	      <em class="emphasis">javadoc</em> should store the HTML files
	      it generates. If this option is omitted, the current
	      directory is used. Default doclet only. </p>
</dd>
<dt>
<b><tt class="literal">-docencoding</tt> <em class="replaceable">encoding</em></b>
</dt>
<dd>
<p>	      Specifies the 
	      encoding to be used for output HTML documents. The name of the encoding specified here may not
	      exactly match the name of the charset specified with the
	      <tt class="literal">-charset</tt> option. Default doclet only. </p>
</dd>
<dt>
<b><tt class="literal">-doclet</tt> <em class="replaceable">classname</em></b>
</dt>
<dd>
<p>	      Specifies the name of the doclet class to use to generate the
	      documentation. If this option is not specified,
	      <em class="emphasis">javadoc</em> generates documentation
	      using the default HTML doclet. </p>
</dd>
<dt>
<b><tt class="literal">-docletpath</tt> <em class="replaceable">classpath</em></b>
</dt>
<dd>
<p>	      If the class specified by the <tt class="literal">-doclet</tt>
	      tag is not available from the default classpath, this
	      option specifies a path from which it can be loaded. </p>
</dd>
<dt>
<b><tt class="literal">-doctitle</tt> <em class="replaceable">text</em></b>
</dt>
<dd>
<p>	      Provides a title to display at the top of the
	      documentation overview file. This file is often the first
	      thing readers see when they browse the generated
	      documentation. The title can contain HTML tags. Default doclet only. </p>
</dd>
<dt>
<b><tt class="literal">-encoding</tt> <em class="replaceable">encoding-name</em></b>
</dt>
<dd>
<p>	      Specifies the character encoding of the input source files
	      and the documentation comments they contain. This can be different from the desired output encoding
	      specified by <tt class="literal">-docencoding</tt>. The default
	      is the platform default encoding. </p>
</dd>
<dt>
<b><tt class="literal">-extdirs</tt> <em class="replaceable">dirlist</em></b>
</dt>
<dd>
<p>	      Specifies a list of directories 
	      to search for standard extensions. Only necessary when cross-compiling with
	      <tt class="literal">-bootclasspath</tt>. See
	      <em class="emphasis">javac</em> for details. </p>
</dd>
<dt>
<b><tt class="literal">-footer</tt> <em class="replaceable">text</em></b>
</dt>
<dd>
<p>	      Specifies text to be displayed near the bottom of each
	      file, to the right of the navigation bar. <em class="replaceable">text</em> can contain HTML tags. See also <tt class="literal">-bottom</tt> and
	      <tt class="literal">-header</tt>. Default doclet only. </p>
</dd>
<dt>
<b><tt class="literal">-group</tt> <em class="replaceable">title</em> <em class="replaceable">packagelist</em></b>
</dt>
<dd>
<p>
<em class="emphasis">javadoc</em> generates a top-level
	      overview page that lists all packages in the generated
	      document. By default, these packages are listed in
	      alphabetical order in a single table. You can break them
	      into groups of related packages with this option, however. The <em class="replaceable">title</em> specifies the title
	      of the package group, such as "Core Packages."  The
	      <em class="replaceable">packagelist</em> is a
	      colon-separated list of package names, each of which can
	      include a trailing <tt class="literal">*</tt> 
	      character as a wildcard. The
	      <em class="emphasis">javadoc</em> command line can
	      contain any number of <tt class="literal">-group</tt> options. For example:</p>

<blockquote>
<pre class="programlisting">javadoc -group "AWT Packages" java.awt*
        -group "Swing Packages" javax.accessibility:javax.swing*</pre>
</blockquote>

</dd>
<dt>
<b><tt class="literal">-header</tt> <em class="replaceable">text</em></b>
</dt>
<dd>
<p>	      Specifies text to be displayed near the top of each file,
	      to the right of the upper navigation bar. <em class="replaceable">text</em> can contain HTML tags. See also <tt class="literal">-footer</tt>,
	      <tt class="literal">-doctitle</tt>, and
	      <tt class="literal">-windowtitle</tt>. Default doclet only. </p>
</dd>
<dt>
<b><tt class="literal">-help</tt></b>
</dt>
<dd>
<p>	      Displays a usage message for <em class="emphasis">javadoc</em>. </p>
</dd>
<dt>
<b><tt class="literal">-helpfile</tt> <em class="replaceable">file</em></b>
</dt>
<dd>
<p>	      Specifies the name of an HTML file that contains help for
	      using the generated documentation. <em class="emphasis">javadoc</em> includes links to this
	      help file in all files it generates. If this option is
	      not specified, <em class="emphasis">javadoc</em> creates
	      a default help file. Default doclet only. </p>
</dd>
<dt>
<b><tt class="literal">-J</tt><em class="replaceable">javaoption</em></b>
</dt>
<dd>
<p>	      Passes the argument <em class="emphasis">javaoption</em> directly
	      through to the Java interpreter. When processing a
	      large number of packages, you may need to use this option
	      to increase the amount of memory
	      <em class="emphasis">javadoc</em> is allowed to use. For
	      example:</p>

<blockquote>
<pre class="programlisting">% javadoc -J-Xmx64m</pre>
</blockquote>

</dd>
<dt>
<b><tt class="literal">-link</tt> <em class="replaceable">url</em></b>
</dt>
<dd>
<p>	      Specifies an absolute or relative URL of the
	      top-level directory of another
	      <em class="emphasis">javadoc</em>-generated document. <em class="emphasis">javadoc</em> uses this URL as the base URL
	      for links from the current document to packages, classes,
	      methods, and fields that are not documented in the current
	      document. For example, when using
	      <em class="emphasis">javadoc</em> to produce documentation for
	      your own packages, you can use this option to link your
	      documentation to the <em class="emphasis">javadoc</em>
	      documentation for the core Java APIs. Default doclet only. </p>
<p>	      The directory specified by 
	      <em class="replaceable">url</em> must contain a file named
	      <em class="emphasis">package-list</em>, and
	      <em class="emphasis">javadoc</em> must be able to read this
	      file at runtime. This file is automatically generated by
	      a previous run of <em class="emphasis">javadoc</em>&#8202;; it
	      contains a list of all packages documented at the
	      <em class="replaceable">url</em>. </p>
<p>	      More than one <tt class="literal">-link</tt> option can be
	      specified, although this does not work properly in early
	      releases of Java 1.2. If no <tt class="literal">-link</tt>
	      option is specified, references in the generated
	      documentation to classes and members that are external to
	      the documentation are not hyperlinked. </p>
</dd>
<dt>
<b><tt class="literal">-linkoffline</tt> <em class="replaceable">url</em> <em class="replaceable">packagelist</em></b>
</dt>
<dd>
<p>	      This option is like the <tt class="literal">-link</tt> option,
	      except that the <em class="replaceable">packagelist</em>
	      file is explicitly specified on the command line. This is
	      useful when the directory specified by 
	      <em class="replaceable">url</em> does not
	      have a <em class="emphasis">package-list</em> file or when that file
	      is not available when <em class="emphasis">javadoc</em> is run. Default doclet only. </p>
</dd>
<dt>
<b><tt class="literal">-locale</tt> <em class="replaceable">language_country_variant</em></b>
</dt>
<dd>
<p>	      Specifies the locale to use for generated documentation. This is used to look up a resource file that contains
	      localized messages and text for the output files. </p>
</dd>
<dt>
<b><tt class="literal">-nodeprecated</tt></b>
</dt>
<dd>
<p>	      Tells <em class="emphasis">javadoc</em> to omit
	      documentation for deprecated features. This option
	      implies <tt class="literal">-nodeprecatedlist</tt>. Default doclet only. </p>
</dd>
<dt>
<b><tt class="literal">-nodeprecatedlist</tt></b>
</dt>
<dd>
<p>	      Tells <em class="emphasis">javadoc</em> not to generate the
	      <em class="emphasis">deprecated-list.html</em> file and not to
	      output a link to it on the navigation bar. Default doclet only. </p>
</dd>
<dt>
<b><tt class="literal">-nohelp</tt></b>
</dt>
<dd>
<p>	      Tells <em class="emphasis">javadoc</em> not to 
	      generate a help file or a link to it in the
	      navigation bar. Default doclet only. </p>
</dd>
<dt>
<b><tt class="literal">-noindex</tt></b>
</dt>
<dd>
<p>	      Tells <em class="emphasis">javadoc</em> not to 
	      generate index files. Default doclet only. </p>
</dd>
<dt>
<b><tt class="literal">-nonavbar</tt></b>
</dt>
<dd>
<p>	      Tells <em class="emphasis">javadoc</em> to
	      omit the navigation bars from the top and bottom of every
	      file. Also omits the text specified by
	      <tt class="literal">-header</tt> and <tt class="literal">-footer</tt>. This is useful when generating documentation to be
	      printed. Default doclet only. </p>
</dd>
<dt>
<b><tt class="literal">-notree</tt></b>
</dt>
<dd>
<p>	      Tells <em class="emphasis">javadoc</em> not to
	      generate the <em class="emphasis">tree.html</em> class
	      hierarchy diagram or a link to it in the navigation bar. Default doclet only. </p>
</dd>
<dt>
<b><tt class="literal">-overview</tt> <em class="replaceable">filename</em></b>
</dt>
<dd>
<p>	      Reads an overview doc comment from
	      <em class="replaceable">filename</em> and uses that comment
	      in the overview page. This file does not contain Java
	      source code, so the doc comment should not actually
	      appear between <tt class="literal">/**</tt> and
	      <tt class="literal">*/</tt> delimiters. </p>
</dd>
<dt>
<b><tt class="literal">-package</tt></b>
</dt>
<dd>
<p>	      Includes package-visible classes and members in the output,
	      as well as <tt class="literal">public</tt> and
	      <tt class="literal">protected</tt> classes and members. </p>
</dd>
<dt>
<b><tt class="literal">-private</tt></b>
</dt>
<dd>
<p>	      Includes all classes and members, including
	      <tt class="literal">private</tt> and
	      package-visible classes and members, in
	      the generated documentation. </p>
</dd>
<dt>
<b><tt class="literal">-protected</tt></b>
</dt>
<dd>
<p>	      Includes <tt class="literal">public</tt> and
	      <tt class="literal">protected</tt> classes and members in the
	      generated output. This is the default. </p>
</dd>
<dt>
<b><tt class="literal">-public</tt></b>
</dt>
<dd>
<p>	      Includes only <tt class="literal">public</tt> classes and members
	      in the generated output. Omits
	      <tt class="literal">protected</tt>, <tt class="literal">private</tt>,
	      and package-visible classes and members. </p>
</dd>
<dt>
<b><tt class="literal">-serialwarn</tt></b>
</dt>
<dd>
<p>	      Issues warnings about serializable classes that do not
	      adequately document their serialization format with
	      <tt class="literal">@serial</tt> and related doc-comment tags. Default doclet only. </p>
</dd>
<dt>
<b><tt class="literal">-sourcepath</tt> <em class="replaceable">path</em></b>
</dt>
<dd>
<p>	      Specifies a 
	      search path for source files, typically set to a single
	      root directory. <em class="emphasis">javadoc</em> 
	      uses this path when looking for
	      the Java source files that implement a specified package. </p>
</dd>
<dt>
<b><tt class="literal">-splitindex</tt></b>
</dt>
<dd>
<p>	      Generates multiple index files, one for each letter of the
	      alphabet. Use this option when documenting large amounts
	      of code. Otherwise, the single index file generated by
	      <em class="emphasis">javadoc</em> will be too large to be
	      useful. Default doclet only. </p>
</dd>
<dt>
<b><tt class="literal">-stylesheetfile</tt> <em class="replaceable">file</em></b>
</dt>
<dd>
<p>	      Specifies a file to use as a CSS stylesheet for the
	      generated HTML. <em class="emphasis">javadoc</em> inserts
	      appropriate links to this file in the generated
	      documentation. Default doclet only. </p>
</dd>
<dt>
<b><tt class="literal">-use</tt></b>
</dt>
<dd>
<p>	      Generates and inserts links to an additional file for each
	      class and package that lists the uses of the class or
	      package. </p>
</dd>
<dt>
<b><tt class="literal">-verbose</tt></b>
</dt>
<dd>
<p>	      Displays additional messages while processing source files. </p>
</dd>
<dt>
<b><tt class="literal">-version</tt></b>
</dt>
<dd>
<p>	      Includes information from <tt class="literal">@version</tt> tags
	      in the generated output. This option does
	      <em class="emphasis">not</em> tell <em class="emphasis">javadoc</em>
	      to print its own version number. Default doclet only. </p>
</dd>
<dt>
<b><tt class="literal">-windowtitle</tt> <em class="replaceable">text</em></b>
</dt>
<dd>
<p>	      Specifies <em class="replaceable">text</em> to be output in
	      the <tt class="literal">&lt;TITLE&gt;</tt> tag of each generated
	      file. This title typically appears in the web-browser
	      titlebar and its history and bookmarks lists. <em class="replaceable">text</em> should not contain HTML
	      tags. See also <tt class="literal">-doctitle</tt> and
	      <tt class="literal">-header</tt>. Default doclet only. </p>
</dd>
</dl>
<h3>Environment</h3>
<dl>
<dt>
<b><tt class="literal">CLASSPATH</tt></b>
</dt>
<dd>
<p>	      This environment variable specifies the default classpath
	      <em class="emphasis">javadoc</em> uses to find the class
	      files and source files. It is overridden by the
	      <tt class="literal">-classpath</tt> and
	      <tt class="literal">-sourcepath</tt> options. See
	      <em class="emphasis">java</em> and <em class="emphasis">javac</em>
	      for further discussion of the classpath.
<a name="INDEX-1119"></a><a name="INDEX-1120"></a>
</p>
</dd>
</dl>
<p>
<span class="refsect1"><b>See Also</b>: </span><a name="INDEX-1121"></a><a name="INDEX-1122"></a><em class="emphasis">java</em>, <em class="emphasis">javac</em>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+2"><b>javah</b></font></td><td align="right"><font size="+2"><b>JDK 1.0 and later</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+2"><b>Native Method C Stub Generator</b></font></td><td align="right"><font size="+2"><b><i></i></b></font></td>
</tr>
</table>
<h3>Synopsis</h3>
<blockquote>
<pre class="programlisting">javah [ <em class="replaceable">options</em> ] <em class="replaceable">classnames</em>
</pre>
</blockquote>
<p>
<h3><span class="refsect1">Description</span></h3>
<em class="emphasis">javah</em> generates C header and source files
	(<em class="emphasis">.h</em> and <em class="emphasis">.c</em> files)
	that are used when implementing Java native methods in C. The
	preferred native method interface has changed between Java 1.0
	and Java 1.1. In Java 1.1 and earlier,
	<em class="emphasis">javah</em> generates files for old-style
	native methods. In Java 1.1, the <tt class="literal">-jni</tt>
	option specifies that <em class="emphasis">javah</em> should generate
	new-style files. In Java 1.2 and later, this option
	becomes the default. </p>
<p>
	This reference page describes only how to use
	<em class="emphasis">javah</em>. A full description of how to
	implement Java native methods in C is beyond the scope of this
	book. </p>
<h3>Options</h3>
<dl>
<dt>
<b><tt class="literal">-bootclasspath</tt></b>
</dt>
<dd>
<p>	      Specifies the path to search for system classes. See
	      <em class="emphasis">javac</em> for further discussion. Java 1.2 and later. </p>
</dd>
<dt>
<b><tt class="literal">-classpath</tt> <em class="replaceable">path</em></b>
</dt>
<dd>
<p>	      The path <em class="emphasis">javah</em> uses to look up
	      the classes named on the command line. This option
	      overrides any path specified by the
	      <tt class="literal">CLASSPATH</tt> environment variable. Prior
	      to Java 1.2, this option can specify the
	      location of the system classes and extensions. In Java
	      1.2 and later, it specifies only the location of application
	      classes. See <tt class="literal">-bootclasspath</tt>. See also
	      <em class="emphasis">java</em> for further discussion of the
	      classpath. </p>
</dd>
<dt>
<b><tt class="literal">-d</tt> <em class="replaceable">directory</em></b>
</dt>
<dd>
<p>	      Specifies the directory into which
	      <em class="emphasis">javah</em> stores the files it generates. By default, it stores them in the current directory. This
	      option cannot be used with <tt class="literal">-o</tt>. </p>
</dd>
<dt>
<b><tt class="literal">-force</tt></b>
</dt>
<dd>
<p>	      Always write output files, even if they contain no useful
	      content. </p>
</dd>
<dt>
<b><tt class="literal">-help</tt></b>
</dt>
<dd>
<p>	      Causes <em class="emphasis">javah</em> to display a simple
	      usage message and exit. </p>
</dd>
<dt>
<b><tt class="literal">-jni</tt></b>
</dt>
<dd>
<p>	      Specifies that <em class="emphasis">javah</em> should output
	      header files for use with the new Java Native
	      Interface (JNI), rather than using the old JDK 1.0 native
	      interface. This option is the default in Java 1.2 and
	      later. See also <tt class="literal">-old</tt>. Java 1.1 and
	      later. </p>
</dd>
<dt>
<b><tt class="literal">-o</tt> <em class="replaceable">outputfile</em></b>
</dt>
<dd>
<p>	      Combines all output into a single file,
	      <em class="replaceable">outputfile</em>, instead of creating
	      separate files for each specified class. </p>
</dd>
<dt>
<b><tt class="literal">-old</tt></b>
</dt>
<dd>
<p>	      Outputs files for Java 1.0-style native methods. Prior to
	      Java 1.2, this was the default. See also
	      <tt class="literal">-jni</tt>. Java 1.2 and later. </p>
</dd>
<dt>
<b><tt class="literal">-stubs</tt></b>
</dt>
<dd>
<p>	      Generates <em class="emphasis">.c</em> stub files for the class
	      or classes, instead of header files. This option is only
	      for the Java 1.0 native methods interface. See
	      <tt class="literal">-old</tt>. </p>
</dd>
<dt>
<b><tt class="literal">-td</tt> <em class="replaceable">directory</em></b>
</dt>
<dd>
<p>	      Specifies the directory where <em class="emphasis">javah</em> should
	      store temporary files. On Unix systems, the default is
	      <em class="emphasis">/tmp</em>. </p>
</dd>
<dt>
<b><tt class="literal">-trace</tt></b>
</dt>
<dd>
<p>	      Specifies that <em class="emphasis">javah</em> should include
	      tracing output commands in the stub files it generates. In Java 1.2 and later, this option is obsolete and has
	      been removed. In its place, you can use the
	      <tt class="literal">-verbose:jni</tt> option of the Java
	      interpreter. </p>
</dd>
<dt>
<b><tt class="literal">-v</tt>, <tt class="literal">-verbose</tt></b>
</dt>
<dd>
<p>	      Verbose mode. Causes <em class="emphasis">javah</em> to print
	      messages about what it is doing. In Java 1.2 and later,
	      <tt class="literal">-verbose</tt> is a synonym. </p>
</dd>
<dt>
<b><tt class="literal">-version</tt></b>
</dt>
<dd>
<p>	      Causes <em class="emphasis">javah</em> to display its version
	      number. </p>
</dd>
</dl>
<h3>Environment</h3>
<dl>
<dt>
<b><tt class="literal">CLASSPATH</tt></b>
</dt>
<dd>
<p>	      Specifies the default classpath
	      <em class="emphasis">javah</em> searches to find the specified
	      classes. See <em class="emphasis">java</em> for a further
	      discussion of the classpath. </p>
</dd>
</dl>
<p>
<span class="refsect1"><b>See Also</b>: </span><em class="emphasis">java</em>, <em class="emphasis">javac</em>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+2"><b>javakey</b></font></td><td align="right"><font size="+2"><b>JDK 1.1; Superseded in Java 2 SDK 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+2"><b>Key Management and Digital Signatures</b></font></td><td align="right"><font size="+2"><b><i></i></b></font></td>
</tr>
</table>
<h3>Synopsis</h3>
<blockquote>
<pre class="programlisting">javakey <em class="replaceable">options</em>
</pre>
</blockquote>
<p>
<h3><span class="refsect1">Description</span></h3>
<a name="INDEX-1123"></a><a name="INDEX-1124"></a><em class="emphasis">javakey</em> provides a command-line interface
	to a number of complex key and certificate generation and
	management tasks, including the generation of digital
	signatures. In Java 1.2 and later, 
	<em class="emphasis">javakey</em> has been
	superseded by two new tools, <em class="emphasis">keytool</em> for
	managing keys and certificates and
	<em class="emphasis">jarsigner</em> for digitally signing code. Due
	to bugs in Java 1.1, digital signatures generated by
	<em class="emphasis">javakey</em> are not recognized in Java 1.2. Likewise, signatures generated by the new 
	<em class="emphasis">jarsigner</em>
	tool are not recognized by Java 1.1. </p>
<p>
<em class="emphasis">javakey</em> manages a
	system database of entities. Each entity can have public and
	private keys and/or certificates associated with it. In
	addition, each entity can be declared to be trusted or not. Any
	entity in the database can be an identity or a signer. Identities have only a public key associated with them, while
	signers have both a public and private key and thus can sign
	files. </p>
<p>
<h3><span class="refsect1">Options</span></h3>
<em class="emphasis">javakey</em> defines a large number of options
	that perform a number of distinct operations:
      </p>
<dl>
<dt>
<b><tt class="literal">-c</tt> <em class="replaceable">identity-name</em> <tt class="literal">[true|false]</tt></b>
</dt>
<dd>
<p>	      Creates and adds a new identity entity to the database,
	      using the specified name. If 
	      <em class="replaceable">identity-name</em> is
	      followed by <tt class="literal">true</tt>, it declares the identity
	      to be trusted. Otherwise, it is untrusted. </p>
</dd>
<dt>
<b><tt class="literal">-cs</tt> <em class="replaceable">signer-name</em> <tt class="literal">[true|false]</tt></b>
</dt>
<dd>
<p>	      Creates and adds a new signer entity to the
	      database, using the specified name. If 
	      <em class="replaceable">signer-name</em> is
	      followed by <tt class="literal">true</tt>, declares the signer to
	      be trusted. Otherwise, it is untrusted. </p>
</dd>
<dt>
<b><tt class="literal">-t</tt> <em class="replaceable">entity-name</em> <tt class="literal">true|false</tt></b>
</dt>
<dd>
<p>	      Specifies whether the named entity is trusted
	      (<tt class="literal">true</tt>) or not
	      (<tt class="literal">false</tt>). </p>
</dd>
<dt>
<b><tt class="literal">-l</tt></b>
</dt>
<dd>
<p>	      Lists the names of all entities in the security
	      database. </p>
</dd>
<dt>
<b><tt class="literal">-ld</tt></b>
</dt>
<dd>
<p>	      Lists the names and other details about all
	      entities in the security database. </p>
</dd>
<dt>
<b><tt class="literal">-li</tt> <em class="replaceable">entity-name</em></b>
</dt>
<dd>
<p>	      Lists detailed information about the
	      named entity from the security database. </p>
</dd>
<dt>
<b><tt class="literal">-r</tt> <em class="replaceable">entity-name</em></b>
</dt>
<dd>
<p>	      Removes the named entity from the security
	      database. </p>
</dd>
<dt>
<b><tt class="literal">-ik</tt> <em class="replaceable">identity-name</em> <em class="replaceable">keyfile</em></b>
</dt>
<dd>
<p>	      Imports a key by reading 
	      a public key from the specified file and
	      associating it with the named identity. The key must be in
	      X.509 format. </p>
</dd>
<dt>
<b><tt class="literal">-ikp</tt> <em class="replaceable">signer-name</em> <em class="replaceable">pubkeyfile</em> <em class="replaceable">privkeyfile</em></b>
</dt>
<dd>
<p>	      Imports a key pair by reading the specified public-key and
	      private-key files and associating them with the named signer
	      entity. The keys must be in X.509 format. </p>
</dd>
<dt>
<b><tt class="literal">-ic</tt> <em class="replaceable">entity-name</em> <em class="replaceable">certificate-file</em></b>
</dt>
<dd>
<p>	      Imports a certificate by reading a certificate from the named
	      certificate file and associating it with the named entity. If the entity already has a public key, compares it to the
	      key in the certificate and issues a warning if they don't
	      match. If the entity has no public key assigned,
	      uses the public key from the certificate. </p>
</dd>
<dt>
<b><tt class="literal">-ii</tt> <em class="replaceable">entity-name</em></b>
</dt>
<dd>
<p>	      Imports information, allowing you to enter
	      arbitrary textual information about an entity into the
	      database. </p>
</dd>
<dt>
<b><tt class="literal">-gk</tt> <em class="replaceable">signer algorithm size [pubfile [privfile]]</em></b>
</dt>
<dd>
<p>	      Generates a public and private key and
	      associates them with the named signer. Uses the specified
	      algorithm. Currently, the only supported algorithm is
	      "DSA". Generates keys of the specified number of bits,
	      which must be between 512 and 1024. If
	      <em class="replaceable">pubfile</em> is specified, writes 
	      the public
	      key to the specified file. If 
	      <em class="replaceable">privfile</em>
	      is specified, writes the private key to the specified file. </p>
</dd>
<dt>
<b><tt class="literal">-g</tt> <em class="replaceable">signer algorithm size [pubfile [privfile]]</em></b>
</dt>
<dd>
<p>	      A synonym for the <tt class="literal">-gk</tt> command. </p>
</dd>
<dt>
<b><tt class="literal">-gc</tt> <em class="replaceable">directivefile</em></b>
</dt>
<dd>
<p>	      Generates a certificate according to
	      the parameters specified in the directive file. The
	      directive file is a <tt class="literal">Properties</tt> file
	      that must provide values for the following named
	      properties:
	    </p>
<dl>
<dt>
<b><tt class="literal">issuer.name</tt></b>
</dt>
<dd>
<p>The name of the
		  entity issuing the certificate
		  </p>
</dd>
<dt>
<b><tt class="literal">issuer.cert</tt></b>
</dt>
<dd>
<p>		  The issuer's
		  certificate number to be used to sign the generated
		  certificate (unless the certificate is
		  self-signed)
		  </p>
</dd>
<dt>
<b><tt class="literal">subject.name</tt></b>
</dt>
<dd>
<p>The database name of
		  the entity to which the certificate is being issued
		  </p>
</dd>
<dt>
<b><tt class="literal">subject.real.name</tt></b>
</dt>
<dd>
<p>The real name
		  of the entity to which the certificate is being issued
		  </p>
</dd>
<dt>
<b><tt class="literal">subject.country</tt></b>
</dt>
<dd>
<p>The country
		  the subject entity is in
		  </p>
</dd>
<dt>
<b><tt class="literal">subject.org</tt></b>
</dt>
<dd>
<p>The organization with which
		  the subject entity is affiliated
		  </p>
</dd>
<dt>
<b><tt class="literal">subject.org.unit</tt></b>
</dt>
<dd>
<p>A division
		  within the subject's organization
		  </p>
</dd>
<dt>
<b><tt class="literal">start.date</tt></b>
</dt>
<dd>
<p>The starting date (and
		  time) of the certificate
		  </p>
</dd>
<dt>
<b><tt class="literal">end.date</tt></b>
</dt>
<dd>
<p>The ending date (and
		  time) of the certificate
		  </p>
</dd>
<dt>
<b><tt class="literal">serial.number</tt></b>
</dt>
<dd>
<p>A serial number for
		  the certificate; this number must be unique among all
		  certificates generated by the issuer
		  </p>
</dd>
<dt>
<b><tt class="literal">out.file</tt></b>
</dt>
<dd>
<p>An optional filename
		  that specifies the file to which the certificate should be
		  written 
		  </p>
</dd>
</dl>
</dd>
<dt>
<b><tt class="literal">-dc</tt> <em class="replaceable">certfile</em></b>
</dt>
<dd>
<p>	      Displays the contents of the
	      certificate stored in <em class="replaceable">certfile</em>. </p>
</dd>
<dt>
<b><tt class="literal">-ec</tt> <em class="replaceable">entity certificate-number file</em></b>
</dt>
<dd>
<p>	      Exports the numbered certificate of
	      the specified entity into the specified file. Use the
	      <tt class="literal">-li</tt> command to inspect the certificate
	      numbers for a given entity. </p>
</dd>
<dt>
<b><tt class="literal">-ek</tt> <em class="replaceable">entity pubfile [privfile]</em></b>
</dt>
<dd>
<p>	      Exports the public key of the specified entity
	      into the specified file. If the entity is a signer and
	      the <em class="replaceable">privfile</em> is specified, additionally
	      exports the private key of the entity to that file. </p>
</dd>
<dt>
<b><tt class="literal">-gs</tt> <em class="replaceable">directivefile jarfile</em></b>
</dt>
<dd>
<p>	      Generates, or applies, a digital signature to the
	      specified JAR file, using the directives in the specified
	      directive file. The directive file is a
	      <tt class="literal">Properties</tt> file that must provide
	      values for the following named properties:
	    </p>
<dl>
<dt>
<b><tt class="literal">signer</tt></b>
</dt>
<dd>
<p>The entity name of the
		  signer
		  </p>
</dd>
<dt>
<b><tt class="literal">cert</tt></b>
</dt>
<dd>
<p>The certificate number to
		  use for the signature
		  </p>
</dd>
<dt>
<b><tt class="literal">chain</tt></b>
</dt>
<dd>
<p>The length of a chain of
		  certificates to include (not currently
		  supported; specify 0)
		  </p>
</dd>
<dt>
<b><tt class="literal">signature.file</tt></b>
</dt>
<dd>
<p>The basename of
		  the signature file and signature block to be inserted
		  into the JAR file; must be eight characters or less and
		  should not conflict with any other digital
		  signatures that may be inserted into the JAR file
		  </p>
</dd>
<dt>
<b><tt class="literal">out.file</tt></b>
</dt>
<dd>
<p>This optional property
		  specifies the name that should be used for the signed
		  JAR file that is generated.

<a name="INDEX-1125"></a><a name="INDEX-1126"></a>
</p>
</dd>
</dl>
</dd>
</dl>
<p>
<span class="refsect1"><b>See Also</b>: </span><em class="emphasis">jar</em>, <em class="emphasis">jarsigner</em>, <em class="emphasis">keytool</em>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+2"><b>javap</b></font></td><td align="right"><font size="+2"><b>JDK 1.0 and later</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+2"><b>The Java Class Disassembler</b></font></td><td align="right"><font size="+2"><b><i></i></b></font></td>
</tr>
</table>
<h3>Synopsis</h3>
<blockquote>
<pre class="programlisting">javap [ <em class="replaceable">options</em> ] <em class="replaceable">classnames</em>
</pre>
</blockquote>
<p>
<h3><span class="refsect1">Description</span></h3>
<a name="INDEX-1127"></a><a name="INDEX-1128"></a><em class="emphasis">javap</em> reads the class files specified by
	the class names on the command line and prints a human-readable
	version of the API defined by those classes. <em class="emphasis">javap</em> can also disassemble the
	specified classes, displaying the Java VM byte codes for the
	methods they contain. </p>
<h3>Options</h3>
<dl>
<dt>
<b><tt class="literal">-b</tt></b>
</dt>
<dd>
<p>	      Enables backward compatibility with the output of the Java
	      1.1 version of <em class="emphasis">javap</em>. This option
	      exists for program that depends on the precise output
	      format of <em class="emphasis">javap</em>. Java 1.2 and later. </p>
</dd>
<dt>
<b><tt class="literal">-bootclasspath</tt> <em class="replaceable">path</em></b>
</dt>
<dd>
<p>	      Specifies the search path for the system classes. See
	      <em class="emphasis">javac</em> for information about this
	      rarely used option. Java 1.2 and later. </p>
</dd>
<dt>
<b><tt class="literal">-c</tt></b>
</dt>
<dd>
<p>	      Displays the code (i.e., Java VM byte codes) for each method of each specified class. This option
	      always disassembles all methods, regardless of their
	      visibility level. </p>
</dd>
<dt>
<b><tt class="literal">-classpath</tt> <em class="replaceable">path</em></b>
</dt>
<dd>
<p>	      Specifies the 
	      path <em class="emphasis">javap</em> uses to look up
	      the classes named on the command line. This option
	      overrides the path specified by the
	      <tt class="literal">CLASSPATH</tt> environment variable. Prior
	      to Java 1.2, this argument specifies the path for all
	      system classes, extensions, and application classes. In
	      Java 1.2 and later, it specifies only the application 
	      classpath. See also <tt class="literal">-bootclasspath</tt> and
	      <tt class="literal">-extdirs</tt>. See
	      <em class="emphasis">java</em> and <em class="emphasis">javac</em>
	      for more information on the classpath. </p>
</dd>
<dt>
<b><tt class="literal">-extdirs</tt> <em class="replaceable">dirs</em></b>
</dt>
<dd>
<p>	      Specifies one or more directories that should be searched
	      for extension classes. See <em class="emphasis">javac</em> for
	      information about this rarely used option. Java 1.2 and
	      later. </p>
</dd>
<dt>
<b><tt class="literal">-l</tt></b>
</dt>
<dd>
<p>	      Displays tables of line numbers and local variables, if
	      available in the class files. This option is typically
	      useful only when used with <tt class="literal">-c</tt>. The <em class="emphasis">javac</em> compiler does not
	      include local variable information in its class files by
	      default. See the <tt class="literal">-g</tt> and related
	      options to <em class="emphasis">javac</em>. </p>
</dd>
<dt>
<b><tt class="literal">-help</tt></b>
</dt>
<dd>
<p>	      Prints a usage message and exits. </p>
</dd>
<dt>
<b><tt class="literal">-J</tt><em class="replaceable">javaoption</em> </b>
</dt>
<dd>
<p>	      Passes the specified <em class="replaceable">javaoption</em>
	      directly to the Java interpreter. </p>
</dd>
<dt>
<b><tt class="literal">-package</tt></b>
</dt>
<dd>
<p>	      Displays package-visible, <tt class="literal">protected</tt>, and
	      <tt class="literal">public</tt> class members, but not
	      <tt class="literal">private</tt> members. This is the default. </p>
</dd>
<dt>
<b><tt class="literal">-private</tt></b>
</dt>
<dd>
<p>	      Displays all class members, including
	      <tt class="literal">private</tt> members. </p>
</dd>
<dt>
<b><tt class="literal">-protected</tt></b>
</dt>
<dd>
<p>	      Displays only <tt class="literal">protected</tt> and
	      <tt class="literal">public</tt> members. </p>
</dd>
<dt>
<b><tt class="literal">-public</tt></b>
</dt>
<dd>
<p>	      Displays only <tt class="literal">public</tt> members of the
	      specified classes. </p>
</dd>
<dt>
<b><tt class="literal">-s</tt></b>
</dt>
<dd>
<p>	      Outputs the class member declarations using the internal
	      VM type and method signature format, instead
	      of the more readable source-code format. </p>
</dd>
<dt>
<b><tt class="literal">-verbose</tt></b>
</dt>
<dd>
<p>	      Verbose mode. Outputs additional information (in the form of
	      Java comments) about each member of each specified class. </p>
</dd>
<dt>
<b><tt class="literal">-verify</tt></b>
</dt>
<dd>
<p>	      Causes <em class="emphasis">javap</em> to perform partial class
	      verification on the specified class or classes and display
	      the results. Java 1.0 and 1.1. only; this 
	      option has been removed in Java 1.2 and
	      later because it does not perform a sufficiently thorough
	      verification. </p>
</dd>
<dt>
<b><tt class="literal">-version</tt></b>
</dt>
<dd>
<p>	      Causes <em class="emphasis">javap</em> to display its version
	      number. </p>
</dd>
</dl>
<h3>Environment</h3>
<dl>
<dt>
<b><tt class="literal">CLASSPATH</tt></b>
</dt>
<dd>
<p>	      Specifies the default search path for application
	      classes. The <tt class="literal">-classpath</tt> option
	      overrides this environment variable. See
	      <em class="emphasis">java</em> for a discussion of the classpath.
</p>
</dd>
</dl>
<p>
<span class="refsect1"><b>See Also</b>: </span><a name="INDEX-1129"></a><a name="INDEX-1130"></a><em class="emphasis">java</em>, <em class="emphasis">javac</em>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+2"><b>jdb</b></font></td><td align="right"><font size="+2"><b>JDK 1.0 and later</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+2"><b>The Java Debugger</b></font></td><td align="right"><font size="+2"><b><i></i></b></font></td>
</tr>
</table>
<h3>Synopsis</h3>
<blockquote>
<pre class="programlisting">jdb [ <em class="replaceable">options</em> ] <em class="replaceable">class</em> [ <em class="replaceable">program options</em> ]
jdb <em class="replaceable">connect options</em>
</pre>
</blockquote>
<p>
<h3><span class="refsect1">Description</span></h3>
<a name="INDEX-1131"></a><a name="INDEX-1132"></a><em class="emphasis">jdb</em> is a debugger for Java classes. It is
	text-based, command-line-oriented, and has a command syntax like
	that of the Unix <em class="emphasis">dbx</em> or
	<em class="emphasis">gdb</em> debuggers used with C and C++ programs. </p>
<p>
<em class="emphasis">jdb</em> is written in Java, so it runs
	within a Java interpreter. When <em class="emphasis">jdb</em> is
	invoked with the name of a Java class, it starts another copy of
	the <em class="emphasis">java</em> interpreter, using any interpreter
	options specified on the command line. The new interpreter is
	started with special options that enable it to communicate with
	<em class="emphasis">jdb</em>. The new interpreter loads the
	specified class file and then stops and waits for debugging
	commands before executing the first byte code. </p>
<p>
<em class="emphasis">jdb</em> can also debug a program
	that is already running in another Java interpreter. Doing so
	requires special options be passed to both the
	<em class="emphasis">java</em> interpreter and to
	<em class="emphasis">jdb</em>. The Java debugging architecture has
	changed dramatically with the introduction of Java 1.3, and so
	have the <em class="emphasis">java</em> and <em class="emphasis">jdb</em>
	options used to allow <em class="emphasis">jdb</em> to connect to a
	running interpreter. </p>
<p>
<h3><span class="refsect1">jdb Expression Syntax</span></h3>
<em class="emphasis">jdb</em> debugging commands such as
	  <tt class="literal">print</tt>, <tt class="literal">dump</tt>, and
	  <tt class="literal">suspend</tt>x allow you to refer to classes,
	  objects, methods, fields, and threads in the program being
	  debugged. You can refer to classes by name, with or without
	  their package names. You can also refer to 
	  <tt class="literal">static</tt> class
	  members by name. You can refer to individual objects by
	  object ID, which is an eight-digit hexadecimal integer. Or, when
	  the classes you are debugging contain local
	  variable information, you can often use local variable names
	  to refer to objects. You can use normal Java syntax to refer
	  to the fields of an object and the elements of an array; you
	  can also use this syntax to write quite complex expressions. In
	  Java 1.3, <em class="emphasis">jdb</em> even supports method
	  invocation using standard Java syntax. </p>
<p>
A number of <em class="emphasis">jdb</em> commands require you to
	  specify a thread. Each thread is given an integer identifier
	  and is named using the syntax
	  <tt class="literal">t@</tt><em class="replaceable">n</em>, where
	  <em class="replaceable">n</em> is the thread ID. </p>
<p>
<h3><span class="refsect1">Options</span></h3>
	When invoking <em class="emphasis">jdb</em> with a specified class
	file, any of the <em class="emphasis">java</em> interpreter options
	can be specified. See the <em class="emphasis">java</em> reference
	page for an explanation of these options. In addition,
	<em class="emphasis">jdb</em> supports the following options:
      </p>
<dl>
<dt>
<b><tt class="literal">-attach</tt> [<em class="replaceable">host</em>:]<em class="replaceable">port</em></b>
</dt>
<dd>
<p>	      Specifies that <em class="emphasis">jdb</em> should
	      connect to the Java "Client VM" that is already running on
	      the specified host (or the local host, if unspecified) and
	      listening for debugging connections on the specified
	      port. Java 1.3 and later. </p>
<p>	      In order to use <em class="emphasis">jdb</em> to connect
	      to a running VM in this way, the VM must have been started
	      with a command line something like this:</p>

<blockquote>
<pre class="programlisting">% java -Xdebug -Xrunjdwp:transport=dt_socket,address=8000,server=y,suspend=n</pre>
</blockquote>

<p>	      The Java 1.3 <em class="emphasis">jdb</em> 
	      architecture allows a complex
	      set of interpreter-to-debugger connection options, and
	      <em class="emphasis">java</em> and <em class="emphasis">jdb</em>
	      provide a complex set of options and suboptions to enable
	      it. A detailed description of those options is beyond the
	      scope of this book. </p>
</dd>
<dt>
<b><tt class="literal">-help</tt></b>
</dt>
<dd>
<p>	      Displays a usage message listing supported options. </p>
</dd>
<dt>
<b><tt class="literal">-host</tt> <em class="replaceable">hostname</em></b>
</dt>
<dd>
<p>	      In Java 1.2 and earlier, this option is used to connect to
	      an already running interpreter. It specifies the name of
	      the host upon which the desired interpreter session is
	      running. If omitted, the default is the local host. This
	      option must be used with <tt class="literal">-password</tt>. In
	      Java 1.3, this option has been replaced by the
	      <tt class="literal">-attach</tt> option. </p>
</dd>
<dt>
<b><tt class="literal">-launch</tt></b>
</dt>
<dd>
<p>	      Starts the specified application when
	      <em class="emphasis">jdb</em> starts. This avoids the need
	      to explicitly use the <tt class="literal">run</tt> command
	      to start it. Java 1.3 and later. </p>
</dd>
<dt>
<b><tt class="literal">-password</tt> <em class="replaceable">password</em></b>
</dt>
<dd>
<p>	      In Java 1.2 and earlier, this option specifies a password
	      that uniquely identifies a Java VM on a particular host. When used in conjunction with
	      <tt class="literal">-hostname</tt>, this option enables
	      <em class="emphasis">jdb</em> to connect to a running
	      interpreter. The interpreter must have been started with
	      the <tt class="literal">-debug</tt> or
	      <tt class="literal">-Xdebug</tt> option, which causes it to
	      display an appropriate <em class="replaceable">password</em>
	      for use with this option. In Java 1.3, this option has
	      been replaced by the <tt class="literal">-attach</tt> option. </p>
</dd>
<dt>
<b><tt class="literal">-sourcepath</tt> <em class="replaceable">path</em></b>
</dt>
<dd>
<p>	      Specifies the locations <em class="emphasis">jdb</em>
	      searches when attempting to find source files that
	      correspond to the class files being debugged. If
	      unspecified, <em class="emphasis">jdb</em> uses the classpath
	      by default. Java 1.3 and later. </p>
</dd>
<dt>
<b><tt class="literal">-tclassic</tt></b>
</dt>
<dd>
<p>	      Tells <em class="emphasis">jdb</em> to invoke the "Classic VM"
	      instead of the "Client VM" (Hotspot), which is the
	      default VM in Java 1.3. Java 1.3 and later. </p>
</dd>
<dt>
<b><tt class="literal">-version</tt></b>
</dt>
<dd>
<p>	      Displays the <em class="emphasis">jdb</em> version number and
	      exits. </p>
</dd>
</dl>
<p>
<h3><span class="refsect1">Commands</span></h3>
<em class="emphasis">jdb</em> understands the following debugging
	commands:
      </p>
<dl>
<dt>
<b><tt class="literal">?</tt> or <tt class="literal">help</tt></b>
</dt>
<dd>
<p>	      Lists all supported commands, with a short explanation of each. </p>
</dd>
<dt>
<b><tt class="literal">!!</tt></b>
</dt>
<dd>
<p>	      A shorthand command that is replaced with the text
	      of the last command entered. It can be followed with
	      additional text that is appended to that previous command. </p>
</dd>
<dt>
<b><tt class="literal">catch</tt> [ <em class="replaceable">exception-class</em> ]</b>
</dt>
<dd>
<p>	      Causes a breakpoint whenever the specified exception is
	      thrown. If no exception is specified, the command lists
	      the exceptions currently being caught. Use
	      <tt class="literal">ignore</tt> to stop these breakpoints from
	      occurring. </p>
</dd>
<dt>
<b><tt class="literal">classes</tt></b>
</dt>
<dd>
<p>	      Lists all classes that have been loaded. </p>
</dd>
<dt>
<b><tt class="literal">clear</tt></b>
</dt>
<dd>
<p>	      Lists all currently set breakpoints. </p>
</dd>
<dt>
<b><tt class="literal">clear</tt> <em class="replaceable">class</em>.<em class="replaceable">method</em> [<tt class="literal">(</tt><em class="replaceable">param-type...</em><tt class="literal">)</tt>]</b>
</dt>
<dd>
<p>	      Clears the breakpoint set in the specified method of the
	      specified class. </p>
</dd>
<dt>
<b><tt class="literal">clear</tt> [ <em class="replaceable">class</em>:<em class="replaceable">line</em> ]</b>
</dt>
<dd>
<p>	      Removes the breakpoint set at the specified line of the
	      specified class. </p>
</dd>
<dt>
<b><tt class="literal">cont</tt></b>
</dt>
<dd>
<p>	      Resumes execution. This command should be used when the
	      current thread is stopped at a breakpoint. </p>
</dd>
<dt>
<b><tt class="literal">down</tt> [ <em class="replaceable">n</em> ]</b>
</dt>
<dd>
<p>	      Moves down <em class="replaceable">n</em> frames in the call stack of
	      the current thread. If <tt class="literal">n</tt> is not
	      specified, moves down one frame. </p>
</dd>
<dt>
<b><tt class="literal">dump </tt><em class="replaceable">id...</em></b>
</dt>
<dd>
<p>	      Prints the value of all fields of the specified object or
	      objects. If you specify the name of a class,
	      <tt class="literal">dump</tt> displays all class (static)
	      methods and variables of the class, and also displays the
	      superclass and list of implemented interfaces. Objects
	      and classes can be specified by name or by their
	      eight-digit hexadecimal ID numbers. Threads can also be
	      specified with the shorthand
	      <tt class="literal">t@</tt><em class="replaceable">thread-number</em>. </p>
</dd>
<dt>
<b><tt class="literal">exit</tt> or <tt class="literal">quit</tt></b>
</dt>
<dd>
<p>	      Quits <em class="emphasis">jdb</em>. </p>
</dd>
<dt>
<b><tt class="literal">gc</tt></b>
</dt>
<dd>
<p>	      Runs the garbage collector to force unused objects to be
	      reclaimed. </p>
</dd>
<dt>
<b><tt class="literal">ignore</tt> <em class="replaceable">exception-class</em></b>
</dt>
<dd>
<p>	      Does not treat the specified exception as a breakpoint. This command turns off a <tt class="literal">catch</tt> command. This command does not cause the Java interpreter
	      to ignore exceptions; it merely tells
	      <em class="emphasis">jdb</em> to ignore them. </p>
</dd>
<dt>
<b><tt class="literal">list</tt> [ <em class="replaceable">line-number</em> ]</b>
</dt>
<dd>
<p>	      Lists the specified line of source code as well as several
	      lines that appear before and after it. If no line number
	      is specified, uses the line number of the current stack
	      frame of the current thread. The lines listed are from
	      the source file of the current stack frame of the current
	      thread. Use the <tt class="literal">use</tt> command to tell
	      <em class="emphasis">jdb</em> where to find source files. </p>
</dd>
<dt>
<b><tt class="literal">list</tt> <em class="replaceable">method</em></b>
</dt>
<dd>
<p>	      Displays the source code of the specified method. </p>
</dd>
<dt>
<b><tt class="literal">load</tt> <em class="replaceable">classname</em></b>
</dt>
<dd>
<p>	      Loads the specified class into <em class="emphasis">jdb</em>. </p>
</dd>
<dt>
<b><tt class="literal">locals</tt></b>
</dt>
<dd>
<p>	      Displays a list of local variables for the current stack
	      frame. Java code must be compiled with the
	      <tt class="literal">-g</tt> option in order to contain local
	      variable information. </p>
</dd>
<dt>
<b><tt class="literal">memory</tt></b>
</dt>
<dd>
<p>	      Displays a summary of memory usage for the Java program
	      being debugged. </p>
</dd>
<dt>
<b><tt class="literal">methods</tt> <em class="replaceable">class</em></b>
</dt>
<dd>
<p>	      Lists all methods of the specified class. Use
	      <tt class="literal">dump</tt> to list the instance variables of
	      an object or the class (static) variables of a class. </p>
</dd>
<dt>
<b><tt class="literal">print</tt> <em class="replaceable">id...</em></b>
</dt>
<dd>
<p>	      Prints the value of the specified item or items. Each item
	      can be a class, object, field, or local variable, and can
	      be specified by name or by eight-digit hexadecimal ID
	      number. You can also refer to threads with the special
	      syntax
	      <tt class="literal">t@</tt><em class="replaceable">thread-number</em>. The <tt class="literal">print</tt> command displays an object's
	      value by invoking its <tt class="literal">toString()</tt>
	      method. </p>
</dd>
<dt>
<b><tt class="literal">next</tt></b>
</dt>
<dd>
<p>	      Executes the current line of source code, including any
	      method calls it makes. See also <tt class="literal">step</tt>. </p>
</dd>
<dt>
<b><tt class="literal">resume</tt> [ <em class="replaceable">thread-id...</em> ]</b>
</dt>
<dd>
<p>	      Resumes execution of the specified thread or threads. If
	      no threads are specified, all suspended threads are
	      resumed. See also <tt class="literal">suspend</tt>. </p>
</dd>
<dt>
<b><tt class="literal">run</tt> [ <em class="replaceable">class</em> ] [ <em class="replaceable">args</em> ]</b>
</dt>
<dd>
<p>	      Runs the <tt class="literal">main()</tt> method of the specified
	      class, passing the specified arguments to it. If no class
	      or arguments are specified, uses the class and arguments
	      specified on the <em class="emphasis">jdb</em> command line. </p>
</dd>
<dt>
<b><tt class="literal">step</tt></b>
</dt>
<dd>
<p>	      Runs the current line of the current thread and stops
	      again. If the line invokes a method, steps into that
	      method and stops. See also <tt class="literal">next</tt>. </p>
</dd>
<dt>
<b><tt class="literal">stepi</tt></b>
</dt>
<dd>
<p>	      Executes a single Java VM instruction. </p>
</dd>
<dt>
<b><tt class="literal">step up</tt></b>
</dt>
<dd>
<p>	      Runs until the current method returns to its caller and
	      stops again. </p>
</dd>
<dt>
<b><tt class="literal">stop</tt></b>
</dt>
<dd>
<p>	      Lists current breakpoints. </p>
</dd>
<dt>
<b><tt class="literal">stop at</tt> <em class="replaceable">class</em>:<em class="replaceable">line</em></b>
</dt>
<dd>
<p>	      Sets a breakpoint at the specified line of the specified
	      class. Program execution stops when it reaches this line. Use <tt class="literal">clear</tt> to remove a breakpoint. </p>
</dd>
<dt>
<b><tt class="literal">stop in</tt> <em class="replaceable">class</em>.<em class="replaceable">method</em> [<tt class="literal">(</tt><em class="replaceable">param-type...</em><tt class="literal">)</tt>]</b>
</dt>
<dd>
<p>	      Sets a breakpoint at the beginning of the specified method
	      of the specified class. Program execution stops when it
	      enters the method. Use <tt class="literal">clear</tt> to remove
	      a breakpoint. </p>
</dd>
<dt>
<b><tt class="literal">suspend</tt> [ <em class="replaceable">thread-id...</em> ]</b>
</dt>
<dd>
<p>	      Suspends the specified thread or threads. If no threads
	      are specified, suspends all running threads. Use
	      <tt class="literal">resume</tt> to restart them. </p>
</dd>
<dt>
<b><tt class="literal">thread</tt> <em class="replaceable">thread-id</em></b>
</dt>
<dd>
<p>	      Sets the current thread to the specified thread. This
	      thread is used implicitly by a number of other
	      <em class="emphasis">jdb</em> commands. The thread can be
	      specified by name or number. </p>
</dd>
<dt>
<b><tt class="literal">threadgroup</tt> <em class="replaceable">name</em></b>
</dt>
<dd>
<p>	      Sets the current thread group. </p>
</dd>
<dt>
<b><tt class="literal">threadgroups</tt></b>
</dt>
<dd>
<p>	      Lists all thread groups running in the Java interpreter
	      session being debugged. </p>
</dd>
<dt>
<b><tt class="literal">threads</tt> [ <em class="replaceable">threadgroup</em> ]</b>
</dt>
<dd>
<p>	      Lists all threads in the named thread group. If no thread
	      group is specified, lists all threads in the current thread
	      group (specified by <tt class="literal">threadgroup</tt>). </p>
</dd>
<dt>
<b><tt class="literal">up</tt> [ <em class="replaceable">n</em> ]</b>
</dt>
<dd>
<p>	      Moves up <em class="replaceable">n</em> frames in the call stack of
	      the current thread. If <tt class="literal">n</tt> is not
	      specified, moves up one frame. </p>
</dd>
<dt>
<b><tt class="literal">use</tt> [ <em class="replaceable">source-file-path</em> ]</b>
</dt>
<dd>
<p>	      Sets the path used by <em class="emphasis">jdb</em> to look up
	      source files for the classes being debugged. If no path
	      is specified, displays the current source path. </p>
</dd>
<dt>
<b><tt class="literal">where</tt> [<em class="replaceable">thread-id</em> ] [<tt class="literal">all</tt>]</b>
</dt>
<dd>
<p>	      Displays a stack trace for the specified thread. If no
	      thread is specified, displays a stack trace for the current
	      thread. If <tt class="literal">all</tt> is specified, displays a
	      stack trace for all threads. </p>
</dd>
<dt>
<b><tt class="literal">wherei</tt> [<em class="replaceable">thread-id</em> x]</b>
</dt>
<dd>
<p>	      Displays a stack trace for the specified or current thread,
	      including detailed program counter information. </p>
</dd>
</dl>
<h3>Environment</h3>
<dl>
<dt>
<b><tt class="literal">CLASSPATH</tt></b>
</dt>
<dd>
<p>	      Specifies an ordered list (colon-separated on Unix,
	      semicolon-separated on Windows systems) of directories,
	      ZIP files, and JAR archives 
	      in which <em class="emphasis">jdb</em> should look
	      for class definitions. When a path is specified with this
	      environment variable, <em class="emphasis">jdb</em> always
	      implicitly appends the location of the system classes to
	      the end of the path. If this environment variable is not
	      specified, the default path is the current directory and
	      the system classes. This variable is overridden by the
	      <tt class="literal">-classpath</tt> option.
<a name="INDEX-1133"></a><a name="INDEX-1134"></a>
</p>
</dd>
</dl>
<p>
<span class="refsect1"><b>See Also</b>: </span><em class="emphasis">java</em>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+2"><b>keytool</b></font></td><td align="right"><font size="+2"><b>Java 2 SDK 1.2 and later</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+2"><b>Key and Certificate Management Tool</b></font></td><td align="right"><font size="+2"><b><i></i></b></font></td>
</tr>
</table>
<h3>Synopsis</h3>
<blockquote>
<pre class="programlisting">keytool <em class="replaceable">command</em> <em class="replaceable">options</em>
</pre>
</blockquote>
<p>
<h3><span class="refsect1">Description</span></h3>
<a name="INDEX-1135"></a><a name="INDEX-1136"></a><a name="INDEX-1137"></a><a name="INDEX-1138"></a><a name="INDEX-1139"></a><em class="emphasis">keytool</em> manages and manipulates a
	<em class="emphasis">keystore</em> : a repository for public and
	private keys and public-key certificates. <em class="emphasis">keytool</em> defines various commands for
	generating keys, importing data into the keystore, and exporting
	and displaying keystore data. Keys and certificates are stored
	in a keystore using a case-insensitive name, or
	<em class="emphasis">alias</em>. <em class="emphasis">keytool</em> uses
	this alias to refer to a key or certificate. </p>
<p>
	The first option to <em class="emphasis">keytool</em> always
	specifies the basic command to be performed. Subsequent options
	provide details about how the command is to be performed. Only
	the command must be specified. If a command requires an
	option that does not have a default value,
	<em class="emphasis">keytool</em> prompts you interactively for
	the value. </p>
<h3>Commands</h3>
<dl>
<dt>
<b><tt class="literal">-certreq</tt></b>
</dt>
<dd>
<p>	      Generates a certificate signing request in PKCS#10 format
	      for the specified alias. The request is written to the
	      specified file or to the standard output stream. The
	      request should be sent to a certificate authority (CA), which
	      authenticates the requestor and sends back a
	      signed certificate authenticating the requestor's public
	      key. This signed certificate can then be imported into
	      the keystore with the <tt class="literal">-import</tt> command. This command uses the following options: 
	      <tt class="literal">-alias</tt>,
	      <tt class="literal">-file</tt>,
	      <tt class="literal">-keypass</tt>,
	      <tt class="literal">-keystore</tt>,
	      <tt class="literal">-sigalg</tt>,
	      <tt class="literal">-storepass</tt>,
	      <tt class="literal">-storetype</tt>, and
	      <tt class="literal">-v</tt>. </p>
</dd>
<dt>
<b><tt class="literal">-delete</tt></b>
</dt>
<dd>
<p>	      Deletes a specified alias from a specified keystore. This command uses the following options: 
	      <tt class="literal">-alias</tt>,
	      <tt class="literal">-keystore</tt>,
	      <tt class="literal">-storepass</tt>,
	      <tt class="literal">-storetype</tt>, and
	      <tt class="literal">-v</tt>. </p>
</dd>
<dt>
<b><tt class="literal">-export</tt></b>
</dt>
<dd>
<p>	      Writes the certificate associated with the specified alias
	      to the specified file or to standard output. This command uses the following options: 
	      <tt class="literal">-alias</tt>,
	      <tt class="literal">-file</tt>,
	      <tt class="literal">-keystore</tt>,
	      <tt class="literal">-rfc</tt>,
	      <tt class="literal">-storepass</tt>,
	      <tt class="literal">-storetype</tt>, and
	      <tt class="literal">-v</tt>. </p>
</dd>
<dt>
<b><tt class="literal">-genkey</tt></b>
</dt>
<dd>
<p>	      Generates a public/private key pair and a self-signed X.509
	      certificate for the public key. Self-signed certificates
	      are not often useful by themselves, so this command is
	      often followed by <tt class="literal">-certreq</tt>. This command uses the following options: 
	      <tt class="literal">-alias</tt>,
	      <tt class="literal">-dname</tt>,
	      <tt class="literal">-keyalg</tt>,
	      <tt class="literal">-keypass</tt>,
	      <tt class="literal">-keysize</tt>,
	      <tt class="literal">-keystore</tt>,
	      <tt class="literal">-sigalg</tt>,
	      <tt class="literal">-storepass</tt>,
	      <tt class="literal">-storetype</tt>,
	      <tt class="literal">-v</tt>, and
	      <tt class="literal">-validity</tt>. </p>
</dd>
<dt>
<b><tt class="literal">-help</tt></b>
</dt>
<dd>
<p>	      Lists all available <em class="emphasis">keytool</em> commands
	      and their options. This command is not used with any
	      other options. </p>
</dd>
<dt>
<b><tt class="literal">-identitydb</tt></b>
</dt>
<dd>
<p>	      Reads keys and certificates from a Java 1.1 identity
	      database managed with <em class="emphasis">javakey</em> and
	      stores them into a keystore so they can be manipulated by
	      <em class="emphasis">keytool</em>. The identity database is
	      read from the specified file or from standard input if no
	      file is specified. The keys and 
	      certificates are written into the specified
	      keystore file, which is automatically created if it does
	      not exist yet. This command uses the following options: 
	      <tt class="literal">-file</tt>,
	      <tt class="literal">-keystore</tt>,
	      <tt class="literal">-storepass</tt>,
	      <tt class="literal">-storetype</tt>, and
	      <tt class="literal">-v</tt>. </p>
</dd>
<dt>
<b><tt class="literal">-import</tt></b>
</dt>
<dd>
<p>	      Reads a certificate or PKCS#7-formatted certificate
	      chain from a specified file or from standard input and
	      stores it as a trusted certificate in the keystore with
	      the specified alias. This command uses the following options: 
	      <tt class="literal">-alias</tt>,
	      <tt class="literal">-file</tt>,
	      <tt class="literal">-keypass</tt>,
	      <tt class="literal">-keystore</tt>,
	      <tt class="literal">-noprompt</tt>,
	      <tt class="literal">-storepass</tt>,
	      <tt class="literal">-storetype</tt>,
	      <tt class="literal">-trustcacerts</tt>, and
	      <tt class="literal">-v</tt>. </p>
</dd>
<dt>
<b><tt class="literal">-keyclone</tt></b>
</dt>
<dd>
<p>	      Duplicates the keystore entry of a specified alias and
	      stores it in the keystore under a new alias. This command uses the following options: 
	      <tt class="literal">-alias</tt>,
	      <tt class="literal">-dest</tt>,
	      <tt class="literal">-keypass</tt>,
	      <tt class="literal">-keystore</tt>,
	      <tt class="literal">-new</tt>,
	      <tt class="literal">-storepass</tt>,
	      <tt class="literal">-storetype</tt>, and
	      <tt class="literal">-v</tt>. </p>
</dd>
<dt>
<b><tt class="literal">-keypasswd</tt></b>
</dt>
<dd>
<p>	      Changes the password that encrypts the private key
	      associated with a specified alias. This command uses the following options: 
	      <tt class="literal">-alias</tt>,
	      <tt class="literal">-keypass</tt>,
	      <tt class="literal">-new</tt>,
	      <tt class="literal">-storetype</tt>, and
	      <tt class="literal">-v</tt>. </p>
</dd>
<dt>
<b><tt class="literal">-list</tt></b>
</dt>
<dd>
<p>	      Displays (on standard output) the fingerprint of the
	      certificate associated with the specified alias. With the
	      <tt class="literal">-v</tt> option, prints certificate
	      details in human-readable format. With
	      <tt class="literal">-rfc</tt>, prints certificate contents in
	      a machine-readable, printable-encoding format. This command uses the following options: 
	      <tt class="literal">-alias</tt>,
	      <tt class="literal">-keystore</tt>,
	      <tt class="literal">-rfc</tt>,
	      <tt class="literal">-storepass</tt>,
	      <tt class="literal">-storetype</tt>, and
	      <tt class="literal">-v</tt>. </p>
</dd>
<dt>
<b><tt class="literal">-printcert</tt></b>
</dt>
<dd>
<p>	      Displays the contents of a certificate read from the
	      specified file or from standard input. Unlike most
	      <em class="emphasis">keytool</em> commands, this one does not
	      use a keystore. This command uses the following options: 
	      <tt class="literal">-file</tt> and
	      <tt class="literal">-v</tt>. </p>
</dd>
<dt>
<b><tt class="literal">-selfcert</tt></b>
</dt>
<dd>
<p>	      Creates a self-signed certificate for the public key 
	      associated with the specified alias and uses it to replace
	      any certificate or certificate chain already associated
	      with that alias. This command uses the following options: 
	      <tt class="literal">-alias</tt>,
	      <tt class="literal">-dname</tt>,
	      <tt class="literal">-keypass</tt>,
	      <tt class="literal">-keystore</tt>,
	      <tt class="literal">-sigalg</tt>,
	      <tt class="literal">-storepass</tt>,
	      <tt class="literal">-storetype</tt>,
	      <tt class="literal">-v</tt>, and
	      <tt class="literal">-validity</tt>. </p>
</dd>
<dt>
<b><tt class="literal">-storepasswd</tt></b>
</dt>
<dd>
<p>	      Changes the password that protects the integrity of the
	      keystore as a whole. The new password must be at least six
	      characters long. This command uses the following options: 
	      <tt class="literal">-keystore</tt>,
	      <tt class="literal">-new</tt>,
	      <tt class="literal">-storepass</tt>,
	      <tt class="literal">-storetype</tt>, and
	      <tt class="literal">-v</tt>. </p>
</dd>
</dl>
<p>
<h3><span class="refsect1">Options</span></h3>
	The various <em class="emphasis">keytool</em> commands can be passed
	various options from the following list. Many of these options have
	reasonable default values. <em class="emphasis">keytool</em>
	interactively prompts for any unspecified options that do not have
	defaults:
      </p>
<dl>
<dt>
<b><tt class="literal">-alias</tt> <em class="replaceable">name</em></b>
</dt>
<dd>
<p>	      Specifies the alias to be manipulated in the keystore. The default is "mykey". </p>
</dd>
<dt>
<b><tt class="literal">-dest</tt> <em class="replaceable">newalias</em></b>
</dt>
<dd>
<p>	      Specifies the new alias name (the destination alias) for
	      the <tt class="literal">-keyclone</tt> command. If not
	      specified, <em class="emphasis">keytool</em> prompts for
	      a value. </p>
</dd>
<dt>
<b><tt class="literal">-dname</tt> <em class="replaceable">X.500-distinguished-name</em></b>
</dt>
<dd>
<p>	      Specifies the X.500 distinguished name to appear on the
	      certificate generated by <tt class="literal">-selfcert</tt> or
	      <tt class="literal">-genkey</tt>. A distinguished name is a
	      highly qualified name intended to be globally
	      unique. For example:</p>

<blockquote>
<pre class="programlisting">CN=David Flanagan, OU=Editorial, O=OReilly, L=Cambridge, S=Massachusetts, C=US</pre>
</blockquote>

<p>	      The <tt class="literal">-genkey</tt> command of
	      <em class="emphasis">keytool</em> prompts for a
	      distinguished name if none is specified. The
	      <tt class="literal">-selfcert</tt> command uses the
	      distinguished name of the current certificate if no
	      replacement name is specified. </p>
</dd>
<dt>
<b><tt class="literal">-file</tt> <em class="replaceable">file</em></b>
</dt>
<dd>
<p>	      Specifies the input or output file for many of the
	      <em class="emphasis">keytool</em> commands. If left
	      unspecified, <em class="emphasis">keytool</em> reads from
	      the standard input or writes to the standard output. </p>
</dd>
<dt>
<b><tt class="literal">-keyalg</tt> <em class="replaceable">algorithm-name</em></b>
</dt>
<dd>
<p>	      Used with <tt class="literal">-genkey</tt> to specify what type
	      of cryptographic keys to generate. In the default Java
	      implementation shipped from Sun, the only supported
	      algorithm is "DSA"; this is the default if this option
	      is omitted. </p>
</dd>
<dt>
<b><tt class="literal">-keypass</tt> <em class="replaceable">password</em></b>
</dt>
<dd>
<p>	      Specifies the password that encrypts a private key in
	      the keystore. If this option is unspecified,
	      <em class="emphasis">keytool</em> first tries the
	      <tt class="literal">-storepass</tt> password. If that does
	      not work, it prompts for the appropriate password. </p>
</dd>
<dt>
<b><tt class="literal">-keysize</tt> <em class="replaceable">size</em></b>
</dt>
<dd>
<p>	      Used with the <tt class="literal">-genkey</tt> command to
	      specify the length in bits of the generated keys. If
	      unspecified, the default is 1024. </p>
</dd>
<dt>
<b><tt class="literal">-keystore</tt> <em class="replaceable">filename</em></b>
</dt>
<dd>
<p>	      Specifies the location of the keystore file. If
	      unspecified, a file named <em class="emphasis">.keystore</em>
	      in the user's home directory is used. </p>
</dd>
<dt>
<b><tt class="literal">-new</tt> <em class="replaceable">new-password-or-alias</em></b>
</dt>
<dd>
<p>	      Used with the <tt class="literal">-keyclone</tt> command to
	      specify the new alias name and  with
	      <tt class="literal">-keypasswd</tt> and
	      <tt class="literal">-storepasswd</tt> to specify the new
	      password. If unspecified, <em class="emphasis">keytool</em>
	      prompts for the value of this option. </p>
</dd>
<dt>
<b><tt class="literal">-noprompt</tt></b>
</dt>
<dd>
<p>	      Used with the <tt class="literal">-import</tt> command to
	      disable interactive prompting of the user when a chain of
	      trust cannot be established for an imported certificate. If this option is not specified, the
	      <tt class="literal">-import</tt> command prompts the user. </p>
</dd>
<dt>
<b><tt class="literal">-rfc</tt></b>
</dt>
<dd>
<p>	      Used with the <tt class="literal">-list</tt> and
	      <tt class="literal">-export</tt> commands to specify that
	      certificate output should be in the printable encoding
	      format specified by RFC-1421. If this option is not
	      specified, <tt class="literal">-export</tt> outputs the
	      certificate in binary format, and <tt class="literal">-list</tt>
	      lists only the certificate fingerprint. This option
	      cannot be combined with <tt class="literal">-v</tt> in the
	      <tt class="literal">-list</tt> command. </p>
</dd>
<dt>
<b><tt class="literal">-sigalg</tt> <em class="replaceable">algorithm-name</em></b>
</dt>
<dd>
<p>	      Specifies a digital signature algorithm that signs
	      a certificate. If omitted, the default for this option
	      depends on the type of underlying public key. If it
	      is a DSA key, the default algorithm is
	      "SHA1withDSA". If the key is an RSA key, the default
	      signature algorithm is "MD5withRSA". </p>
</dd>
<dt>
<b><tt class="literal">-storepass</tt> <em class="replaceable">password</em></b>
</dt>
<dd>
<p>	      Specifies a password that protects the integrity of the
	      entire keystore file. This password also serves as a
	      default password for any private keys that do not have
	      their own <tt class="literal">-keypass</tt> specified. If
	      <tt class="literal">-storepass</tt> is not specified,
	      <em class="emphasis">keytool</em> prompts for it. The
	      password must be at least six characters long. </p>
</dd>
<dt>
<b><tt class="literal">-storetype</tt> <em class="replaceable">type</em></b>
</dt>
<dd>
<p>	      Specifies the type of the keystore to be used. If
	      this option is not specified, the default is taken from
	      the system security properties file. Often, the default
	      is Sun's "JKS" Java Keystore type. </p>
</dd>
<dt>
<b><tt class="literal">-trustcacerts</tt></b>
</dt>
<dd>
<p>	      Used with the <tt class="literal">-import</tt> command to
	      specify that the self-signed certificate authority
	      certificates contained in the keystore in the
	      <em class="emphasis">jre/lib/security/cacerts</em> file should
	      be considered trusted. If this option is omitted,
	      <em class="emphasis">keytool</em> ignores that file. </p>
</dd>
<dt>
<b><tt class="literal">-v</tt></b>
</dt>
<dd>
<p>	      This option specifies verbose mode, if present, and makes
	      many <em class="emphasis">keytool</em> commands produce
	      additional output. </p>
</dd>
<dt>
<b><tt class="literal">-validity</tt> <em class="replaceable">time</em></b>
</dt>
<dd>
<p>	      Used with the <tt class="literal">-genkey</tt> and
	      <tt class="literal">-selfcert</tt> commands to specify the
	      period of validity (in days) of the generated certificate. If unspecified, the default is 90 days. </p>
</dd>
</dl>
<p>
<span class="refsect1"><b>See Also</b>: </span><a name="INDEX-1140"></a><em class="emphasis">jarsigner</em>, <em class="emphasis">javakey</em>, <em class="emphasis">policytool</em>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+2"><b>native2ascii</b></font></td><td align="right"><font size="+2"><b>JDK 1.1 and later</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+2"><b>Converts Java Source Code to ASCII</b></font></td><td align="right"><font size="+2"><b><i></i></b></font></td>
</tr>
</table>
<h3>Synopsis</h3>
<blockquote>
<pre class="programlisting">native2ascii [ <em class="replaceable">options</em> ] [ <em class="replaceable">inputfile</em> [ <em class="replaceable">outputfile</em> ]]</pre>
</blockquote>
<p>
<h3><span class="refsect1">Description</span></h3>
<a name="INDEX-1141"></a><a name="INDEX-1142"></a><em class="emphasis">javac</em> can only process files encoded in the
	eight-bit Latin-1 encoding, with any other characters encoded using
	the <tt class="literal">\u</tt><em class="replaceable">xxxx</em> Unicode
	notation. <em class="emphasis">native2ascii</em> is a simple program
	that reads a Java source file encoded using a local encoding and
	converts it to the Latin-1-plus-ASCII-encoded-Unicode form
	required by <em class="emphasis">javac</em>. </p>
<p>
	The <em class="replaceable">inputfile</em> and
	<em class="replaceable">outputfile</em> are optional. If unspecified,
	standard input and standard output are used, making
	<em class="emphasis">native2ascii</em> suitable for use in pipes. </p>
<h3>OPtions</h3>
<dl>
<dt>
<b><tt class="literal">-encoding</tt> <em class="replaceable">encoding-name</em></b>
</dt>
<dd>
<p>	      Specifies the encoding used by source files. If this
	      option is not specified, the encoding is taken from the
	      <tt class="literal">file.encoding</tt> system property. </p>
</dd>
<dt>
<b><tt class="literal">-reverse</tt></b>
</dt>
<dd>
<p>	      Specifies that the conversion should be done in
	      reverse--from encoded
	      <tt class="literal">\u</tt><em class="replaceable">xxxx</em> characters
	      to characters in the native encoding. </p>
</dd>
</dl>
<p>
<span class="refsect1"><b>See Also</b>: </span><tt class="literal">java.io.InputStreamReader</tt>, <tt class="literal">java.io.OutputStreamWriter</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+2"><b>policytool</b></font></td><td align="right"><font size="+2"><b>Java 2 SDK 1.2 and later</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+2"><b>Policy File Creation and Management Tool</b></font></td><td align="right"><font size="+2"><b><i></i></b></font></td>
</tr>
</table>
<h3>Synopsis</h3>
<blockquote>
<pre class="programlisting">policytool</pre>
</blockquote>
<p>
<h3><span class="refsect1">Description</span></h3>
<a name="INDEX-1143"></a><a name="INDEX-1144"></a><em class="emphasis">policytool</em> displays a Swing user interface
	that makes it easy to edit security policy configuration files. The Java security architecture is based on policy files, 
	which specify sets of permissions to be granted to code from
	various sources. By default, the Java security policy is
	defined by a system policy file stored in the
	<em class="emphasis">jre/lib/security/java.policy</em> file and a
	user policy file stored in the <em class="emphasis">.java.policy</em>
	file in the user's home directory. System administrators and
	users can edit these files with a text editor, but the syntax of
	the file is somewhat complex, so it is usually easier to use
	<em class="emphasis">policytool</em> to define and edit security
	policies. </p>
<p>
<h3><span class="refsect1">Selecting the Policy File to Edit</span></h3>	
When <em class="emphasis">policytool</em> starts up, it opens
	the <em class="emphasis">.java.policy</em> file in the user's home
	directory by default. Use the <b class="emphasis-bold">New</b>, <b class="emphasis-bold">Open</b>,
	and <b class="emphasis-bold">Save</b> commands in the
	<b class="emphasis-bold">File</b> menu to create a new policy
	file, open an existing file, and save an edited file, respectively. </p>
<p>
<h3><span class="refsect1">Editing the Policy File</span>	</h3>
The main <em class="emphasis">policytool</em> window displays a list
	of the entries contained in the policy file. Each entry
	specifies a code source and the permissions that are to be
	granted to code from that source. The window also contains
	buttons that allow you to add a new entry, edit an existing
	entry, or delete an entry from the policy file. If you add or
	edit an entry, <em class="emphasis">policytool</em> opens a new
	window that displays the details of that policy entry. </p>
<p>
<h3><span class="refsect1">Editing the Policy File</span></h3>
Every policy file has an associated keystore, from which it
	obtains the certificates it needs when verifying the digital
	signatures of Java code. You can usually rely on the
	default keystore, but if you need to specify the
	keystore explicitly 
	for a policy file, use the <b class="emphasis-bold">Change
	Keystore</b> command in the 
	<b class="emphasis-bold">Edit</b> menu
	of the main <em class="emphasis">policytool</em> window. </p>
<p>
<h3><span class="refsect1">Adding or Editing a Policy Entry: </span></h3>
The policy entry editor window displays the code source for the
	policy entry and a list of permissions associated with that
	code source. It also contains buttons that allow you to add a
	new permission, delete a permission, or edit an existing
	permission. </p>
<p>
<span class="refsect1">Adding or Editing a Policy Entry: </span>	When defining a new policy entry, the first step is to specify
	the code source. A code source is defined by a URL from which
	the code is downloaded and/or a list of digital signatures that
	must appear on the code. Specify one or both of these values by
	typing in a URL and/or a comma-separated list of aliases. These
	aliases identify trusted certificates in the keystore associated
	with the policy file. </p>
<p>
After you have defined the code source for a policy entry, you
	must define the permissions to be granted to code from that
	source. Use the <b class="emphasis-bold">Add Permission</b>
	and <b class="emphasis-bold">Edit Permission</b> buttons to
	add and edit permissions. These buttons bring up yet another
	<em class="emphasis">policytool</em> window. </p>
<p>
<h3><span class="refsect1">Defining a Permission</span></h3>
	To define a permission in the permission editor window, first
	select the desired permission type from the <b class="emphasis-bold">Permission</b> drop-down menu. Then, select an
	appropriate target value from the <b class="emphasis-bold">Target
	Name</b> menu. The choices in this menu are customized
	depending on the permission type you selected. For some types
	of permission, such as <tt class="literal">FilePermission</tt>, there
	is not a fixed set of possible targets, and you usually have to
	type in the specific target you want. For example, you might
	type "/tmp" to specify the directory <em class="emphasis">/tmp</em>,
	"/tmp/*" to specify all the files in that directory, or
	"/tmp/-" to specify all the files in the directory, and,
	recursively, any subdirectories. See the documentation of the
	individual <tt class="literal">Permission</tt> classes for a
	description of the targets they support. </p>
<p>
Depending on the type of permission you select, you may also
	have to select one or more action values from the <b class="emphasis-bold">Actions</b> menu. When you have selected a
	permission and appropriate target and action values, click the
	<b class="emphasis-bold">Okay</b> button to dismiss the window. </p>
<p>
<span class="refsect1"><b>See Also</b>: </span><em class="emphasis">jarsigner</em>, <em class="emphasis">keytool</em>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+2"><b>serialver</b></font></td><td align="right"><font size="+2"><b>JDK 1.1 and later</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+2"><b>Class Version Number Generator</b></font></td><td align="right"><font size="+2"><b><i></i></b></font></td>
</tr>
</table>
<h3>Synopsis</h3>
<blockquote>
<pre class="programlisting">serialver [-show] <em class="replaceable">classname</em>... </pre>
</blockquote>
<p>
<h3><span class="refsect1">Description: </span></h3>
<a name="INDEX-1145"></a><a name="INDEX-1146"></a><em class="emphasis">serialver</em> displays the version number of a
	class or classes. This version number is used for the purposes
	of serialization: the version number must change each time the
	serialization format of the class changes. </p>
<p>
	If the specified class declares a <tt class="literal">long</tt><tt class="literal">serialVersionUID</tt> constant, the value of that
	field is displayed. Otherwise, a unique version number is
	computed by applying the Secure Hash Algorithm (SHA) to the API
	defined by the class. This program is primarily useful for
	computing an initial unique version number for a class, which is
	then declared as a constant in the class. The output of
	<em class="emphasis">serialver</em> is a line of legal Java code,
	suitable for pasting into a class definition. </p>
<h3>Options</h3>
<dl>
<dt>
<b><tt class="literal">-show</tt></b>
</dt>
<dd>
<p>	      When the <tt class="literal">-show</tt> option is specified,
	      <em class="emphasis">serialver</em> displays a simple graphical
	      interface that allows the user to type in a single
	      classname at a time and obtain its serialization UID. When using <tt class="literal">-show</tt>, no class names can be
	      specified on the command-line. </p>
</dd>
</dl>
<h3>Environment</h3>
<dl>
<dt>
<b><tt class="literal">CLASSPATH</tt></b>
</dt>
<dd>
<p>
<em class="emphasis">serialver</em> is written in Java, so
	      it is sensitive to the <tt class="literal">CLASSPATH</tt>
	      environment variable in the same way the
	      <em class="emphasis">java</em> interpreter is. The specified
	      classes are looked up relative to this classpath. </p>
</dd>
</dl>
<p>
<span class="refsect1"><b>See Also</b>: </span><tt class="literal">java.io.ObjectStreamClass</tt><a name="INDEX-1147"></a><a name="INDEX-1148"></a>
</p>
</div>


<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch07_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch07_03.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="part2.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/part2.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">7.3. Java Documentation Comments</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">Part 2. API Quick Reference</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
