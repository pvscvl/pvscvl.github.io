<html>
<head>
<title>JavaBeans (Java in a Nutshell)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="David Flanagan">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-487-8E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="JavaBeans">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm" alt="Java Enterprise in a Nutshell"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch05_06.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch05_06.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="part1.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/part1.htm">Part 1: Introducing Java</a></td><td align="right" valign="top" width="172"><a href="ch06_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch06_02.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY --><h1 class="chapter">Chapter 6.  JavaBeans</h1>
<div class="htmltoc">
<h4 class="tochead">Contents:</h4>
<p>
<a href="ch06_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch06_01.htm">Bean Basics</a>
<br>
<a href="ch06_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch06_02.htm">JavaBeans Conventions</a>
<br>
<a href="ch06_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch06_03.htm">Bean Contexts and Services</a>
<br>
</p>
</div>

<p>
<a name="INDEX-908"></a><a name="INDEX-909"></a><a name="INDEX-910"></a><a name="INDEX-911"></a><a name="INDEX-912"></a><a name="INDEX-913"></a><a name="INDEX-914"></a><a name="INDEX-915"></a><a name="INDEX-916"></a><a name="INDEX-917"></a><a name="INDEX-918"></a><a name="INDEX-919"></a>

    The JavaBeans API provides a framework for defining reusable,
    embeddable, modular software components. The JavaBeans
    specification includes the following definition of a bean: "a
    reusable software component that can be manipulated visually in a
    builder tool." As you can see, this is a rather loose definition;
    beans can take a variety of forms. The most common use of beans is for graphical user interface
    components, such as components of the <tt class="literal">java.awt</tt>
    and <tt class="literal">javax.swing</tt> packages, which are documented in
    <em class="citetitle">Java Foundation Classes in a Nutshell</em> 
    (O'Reilly).<a href="#FOOTNOTE-1">[1]</a>
    Although all beans can be manipulated visually, this does not mean
    every bean has its own visual representation. For example, the
    <tt class="literal">javax.sql.RowSet</tt> class (documented in
    <em class="citetitle">Java Enterprise in a Nutshell</em> (O'Reilly)) 
    is a JavaBeans component
    that represents the data resulting from a database query. There are
    no limits on the simplicity or complexity of a JavaBeans component. The
    simplest beans are typically basic graphical interface components,
    such as a <tt class="literal">java.awt.Button</tt> object. But even
    complex systems, such as an embeddable spreadsheet application, can
    function as individual beans. </p>
<blockquote class="footnote">
<a name="FOOTNOTE-1"></a>
<p>[1]	JavaBeans are documented in this book instead of that one
	because the JavaBeans component model is not specific to AWT or
	Swing programming. Nevertheless, it is hardly possible to
	discuss beans without mentioning AWT and Swing components. You will probably get the most out of this chapter if you have
	some familiarity with GUI programming in Java using AWT or
	Swing.</p>
</blockquote>
<p>    One of the goals of the JavaBeans model is interoperability with
    similar component frameworks. So, for example, a native Windows
    program can, with an appropriate bridge or wrapper object, use a
    JavaBeans component 
    as if it were a COM or ActiveX component. The details of
    this sort of interoperability are beyond the scope of this chapter,
    however. </p>
<p>
<a name="INDEX-920"></a><a name="INDEX-921"></a>

    The JavaBeans component model consists of the
    <tt class="literal">java.beans</tt> and
    <tt class="literal">java.beans.beancontext</tt> packages and a number of
    important naming and API conventions to which conforming beans and bean-manipulation tools must adhere. Because JavaBeans is a
    framework for generic components, the JavaBeans conventions are, in
    many ways, more important than the actual API. </p>
<p>
<a name="INDEX-922"></a><a name="INDEX-923"></a><a name="INDEX-924"></a><a name="INDEX-925"></a><a name="INDEX-926"></a><a name="INDEX-927"></a><a name="INDEX-928"></a><a name="INDEX-929"></a>


    Two interesting technologies related to JavaBeans are the Java
    Activation Framework and InfoBus. Both are standard extensions, 
    implemented in the <tt class="literal">javax.activation</tt> and
    <tt class="literal">javax.infobus</tt> packages, respectively. You can read more about
    them at the JavaBeans web site:
    <a href="../../../../../../../java.sun.com/beans/">http://java.sun.com/beans/</a>. </p>
<p>
<a name="INDEX-930"></a><a name="INDEX-931"></a>

    Beans can be used at three levels by three different
    categories of programmers:
    </p>
<ul>
<li>
<p>
<a name="INDEX-932"></a>

	  If you are writing an application that uses beans developed by
	  other programmers or using a beanbox
	  tool<a href="#FOOTNOTE-2">[2]</a> to
	  combine those beans into an application, you need to be
	  familiar with general JavaBeans concepts and terminology. You also need to read the documentation for the individual beans
	  you use in your application, but you do not need to
	  understand the JavaBeans API. This chapter begins with an
	  overview of JavaBeans concepts that should be sufficient for
	  programmers using beans at this level. </p>
<blockquote class="footnote">
<a name="FOOTNOTE-2"></a>
<p>[2]<em class="emphasis">beanbox</em> is the name of the sample
	  bean-manipulation program provided by Sun in its Beans
	  Development Kit (BDK). The term is a useful one, and I'll use
	  it to describe any kind of graphical design tool or
	  application builder that manipulates beans.</p>
</blockquote>
</li>
<li>

<p>	  If you are writing beans, you need to understand and
	  follow various JavaBeans naming and packaging conventions. After the introduction to general bean concepts and
	  terminology, this chapter describes the basic bean conventions
	  bean developers must follow. Although a JavaBeans component
	  can be
	  implemented without using the JavaBeans API, most
	  beans are distributed with various auxiliary classes that make
	  them easier to use within beanbox tools. These auxiliary
	  classes rely heavily on the JavaBeans API so that they can
	  interoperate with beanbox tools. </p>
</li>
<li>
<p>
<a name="INDEX-933"></a><a name="INDEX-934"></a>

	  If you are developing a GUI editor, application builder, or
	  other beanbox tool, you use the JavaBeans API to help you
	  manipulate beans within the tool. You also need to be
	  intimately familiar with all the various JavaBeans
	  programming conventions. Although this chapter describes the
	  most important conventions, you should also refer
	  to the primary source, the JavaBeans specification (see
	  <a href="../../../../../../../java.sun.com/beans">http://java.sun.com/beans</a>/&#8202;). </p>
</li>
</ul>
<h2 class="sect1">6.1. Bean Basics</h2>
<p>
<a name="INDEX-935"></a>

      Any object that conforms to certain
      basic rules can be a bean; there is no <tt class="literal">Bean</tt> class
      all beans are required to subclass. Many beans are AWT
      components, but it is also quite possible, and often useful,
      to write "invisible" beans that do not have an onscreen
      appearance. (&#8202;Just because a bean does not have an onscreen
      appearance in a finished application does not mean it
      cannot be visually manipulated by a beanbox tool, however.)
    </p>
<p>
<a name="INDEX-936"></a>

      A bean is characterized by the properties, events, and methods it
      exports. It is these properties, events, and methods an
      application designer manipulates in a
      beanbox tool. A <em class="emphasis">property</em> is a piece of the bean's internal state
      that can be programmatically set and/or queried, usually through a
      standard pair of <tt class="literal">get</tt> and <tt class="literal">set</tt> accessor
      methods. </p>
<p>


      A bean communicates with the application in which it is embedded
      and with other beans by generating <em class="emphasis">events</em>. The JavaBeans API uses the same event model AWT and Swing
      components use. This model is based on the
      <tt class="literal">java.util.EventObject</tt> class and the
      <tt class="literal">java.util.EventListener</tt> interface; it is
      described in detail in <em class="emphasis">Java Foundation Classes in a
      Nutshell</em> (O'Reilly). In brief, the event model works like this:
      </p>
<ul>
<li>
<p>
<a name="INDEX-937"></a><a name="INDEX-938"></a><a name="INDEX-939"></a><a name="INDEX-940"></a>

	    A bean defines an event if it provides
	    <tt class="literal">add</tt> and <tt class="literal">remove</tt> methods
	    for registering and deregistering listener objects for that
	    event. </p>
</li>
<li>
<p>	    An application that wants to be notified when an
	    event of that type occurs uses these methods to register an
	    event listener object of the appropriate type. </p>
</li>
<li>
<p>	    When the event occurs, the bean notifies all registered
	    listeners by passing an event object that describes the event to
	    a method defined by the event listener interface. </p>
</li>
</ul>
<p>
<a name="INDEX-941"></a>

      A <em class="emphasis">unicast event</em> is a rare kind of event for
      which there can be only a single registered listener object. The
      <tt class="literal">add</tt> registration method for a unicast event
      throws a <tt class="literal">TooManyListenersException</tt> if an
      attempt is made to register more than a single listener. </p>
<p>
<a name="INDEX-942"></a>

      The <em class="emphasis">methods</em>
      exported by a bean are simply any
      <tt class="literal">public</tt> methods defined by the bean, excluding those
      methods that get and set property values and register and
      remove event listeners. </p>
<p>
<a name="INDEX-943"></a><a name="INDEX-944"></a><a name="INDEX-945"></a><a name="INDEX-946"></a>

      In addition to the regular sort of properties described earlier, the
      JavaBeans API also supports several specialized property
      subtypes. An <em class="emphasis">indexed proper
ty</em> is a
      property that has an array value, as well as getter and setter methods that
      access both individual elements of the array and the entire array. A <em class="emphasis">bound property</em> is one that sends a
      <tt class="literal">PropertyChangeEvent</tt> to any interested
      <tt class="literal">PropertyChangeListener</tt> objects whenever the
      value of the property changes. A <em class="emphasis">constrained property</em> is one that can
      have any changes vetoed by any interested listener. When the
      value of a constrained property of a bean changes, the bean must
      send out a <tt class="literal">PropertyChangeEvent</tt> to the list of
      interested <tt class="literal">VetoableChangeListener</tt> objects. If
      any of these objects throws a
      <tt class="literal">PropertyVetoException</tt>, the property value
      is not changed, and the <tt class="literal">PropertyVetoException</tt>
      is propagated back to the property setter method. </p>
<p>
<a name="INDEX-947"></a><a name="INDEX-948"></a><a name="INDEX-949"></a>


      Because Java allows dynamic loading of classes, beanbox
      programs can load arbitrary beans. The beanbox tool uses a
      process called <em class="emphasis">introspection</em> to determine the
      properties, events, and methods exported by a bean. The introspection mechanism is implemented by the
      <tt class="literal">java.beans.Introspector</tt> class; it relies on both
      the <tt class="literal">java.lang.reflect</tt> reflection mechanism and a
      number of JavaBeans naming conventions. <tt class="literal">Introspector</tt> can determine the list of properties
      supported by a bean, for example, by scanning the class for
      methods that have the right names and signatures to be
      <tt class="literal">get</tt> and <tt class="literal">set</tt> property
      accessor methods. </p>
<p>      The introspection mechanism does not rely on the reflection
      capabilities of Java alone, however. Any bean can define an
      auxiliary <tt class="literal">BeanInfo</tt> class that provides
      additional information about the bean and its properties,
      events, and methods. The <tt class="literal">Introspector</tt>
      automatically attempts to locate and load the
      <tt class="literal">BeanInfo</tt> class of a bean. </p>
<p>
<a name="INDEX-950"></a>

      The <tt class="literal">BeanInfo</tt> class provides additional
      information about the bean primarily in the form of
      <tt class="literal">FeatureDescriptor</tt> objects, each one describing a
      single feature of the bean. Each
      <tt class="literal">FeatureDescriptor</tt> provides a name and brief
      description of the feature it documents. The beanbox tool can
      display the name and description to the user, making the bean
      essentially self-documenting and easier to use. Specific bean
      features, such as properties, events, and methods, are described by
      specific subclasses of <tt class="literal">FeatureDescriptor</tt>, such as
      <tt class="literal">PropertyDescriptor</tt>, <tt class="literal">EventSetDescriptor</tt>,
      and <tt class="literal">MethodDescriptor</tt>. </p>
<p>      One of the primary tasks of a beanbox application is to allow the
      user to customize a bean by setting property values. A beanbox
      defines <em class="emphasis">property editors</em> for commonly used
      property types, such as numbers, strings, fonts, and colors. If a
      bean has a property of a more complicated type, however, it can
      define a <tt class="literal">PropertyEditor</tt> class that enables the
      beanbox to let the user set values for that property. </p>
<p>
<a name="INDEX-951"></a><a name="INDEX-952"></a>

      In addition, a complex bean may not be satisfied with the
      property-by-property customization mechanism provided by
      most beanbox tools. Such a bean can define a
      <tt class="literal">Customizer</tt> class to create a graphical interface
      that allows the user to configure a bean in some useful way. A particularly complex bean can even define customizers that serve
      as "wizards" that guide the user step by step through the
      customization process. </p>
<p>
<a name="INDEX-953"></a><a name="INDEX-954"></a>


      A <em class="emphasis">bean context</em> is a logical container (and
      often a visual container) for JavaBeans and, optionally, for
      other nested bean contexts. In practice, most JavaBeans are AWT
      or Swing components or containers. Beanbox tools recognize this
      and allow component beans to be nested within container beans. A
      bean context is a kind of heavyweight container that formalizes
      this nesting relationship. More importantly, however, a bean
      context can provide a set of services (e.g., printing services,
      debugging services, database connection services)
      to the beans it contains. Beans that are aware of their context
      can be written to query the context and take advantage of the
      services that are available. Bean contexts are implemented using
      the <tt class="literal">java.beans.beancontext</tt> API, which is new 
      as of Java 1.2 and discussed in more detail later in this chapter. </p>




<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch05_06.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch05_06.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch06_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch06_02.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">5.6. Permission Classes</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">6.2. JavaBeans Conventions</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
