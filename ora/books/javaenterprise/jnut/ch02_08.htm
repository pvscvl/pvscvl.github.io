<html>
<head>
<title>Classes and Objects (Java in a Nutshell)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="David Flanagan">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-487-8E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Classes and Objects">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm" alt="Java Enterprise in a Nutshell"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch02_07.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch02_07.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch02_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch02_01.htm">Chapter 2: Java Syntax

from the Ground Up</a></td><td align="right" valign="top" width="172"><a href="ch02_09.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch02_09.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY --><h2 class="sect1">2.8. Classes and Objects</h2>
<p>
<a name="INDEX-360"></a><a name="INDEX-361"></a>

      Now that we have introduced operators, expressions, statements,
      and methods, we can finally talk about classes. A
      <em class="emphasis">class</em> is a named collection of fields that
      hold data values and methods that operate on those values. Some
      classes also contain nested inner classes. Classes are the most
      fundamental structural element of all Java programs. You cannot
      write Java code without defining a class. All Java statements
      appear within methods, and all methods are defined within classes. </p>
<p>      Classes are more than just another structural level of Java
      syntax. Just as a cell is the smallest unit of life that can
      survive and reproduce on its own, a class is the smallest unit of
      Java code that can stand alone. The Java compiler and interpreter
      do not recognize fragments of Java code that are smaller than a
      class. A class is the basic unit of execution for Java, which
      makes classes very important. Java actually defines another
      construct, called an <em class="emphasis">interface</em>, that is quite
      similar to a class. The distinction between classes and
      interfaces will become clear in <a href="ch03_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch03_01.htm">Chapter 3, "Object-Oriented Programming in Java"</a>,
      but for now I'll use the term "class" to mean either a class or
      an interface. </p>
<p>      Classes are important for another reason: every class defines a
      new data type. For example, you can define a class named
      <tt class="literal">Point</tt> to represent a data point in the
      two-dimensional Cartesian coordinate system. This class can
      define fields (each of type <tt class="literal">double</tt>) to hold the
      X and Y coordinates of a point and 
      methods to manipulate and operate on the point. The
      <tt class="literal">Point</tt> class is a new data type. </p>
<p>      When discussing data types, it is important to distinguish between
      the data type itself and the values the data type
      represents. <tt class="literal">char</tt> is a data type: it represents
      Unicode characters. But a <tt class="literal">char</tt> value
      represents a single specific character. A class is a data
      type; the value of a class type is called an
      <em class="emphasis">object</em>. We use the name class because each
      class defines a type (or kind, or species, or
      class) of objects. The
      <tt class="literal">Point</tt> class is a data type that represents
      X,Y points, while a <tt class="literal">Point</tt> object represents a
      single specific X,Y point. As you might imagine,
      classes and their objects are closely linked. In the
      sections that follow, we will be discussing both. </p>
<h3 class="sect2">2.8.1. Defining a Class</h3>
<p>
<a name="INDEX-362"></a>

	Here is a possible definition
	of the <tt class="literal">Point</tt> class we have been discussing:
</p>
<blockquote>
<pre class="programlisting">/** Represents a Cartesian (x,y) point */
public class Point {
  public double x, y;                    // The coordinates of the point. 
  public Point(double x, double y) {     // A constructor that
    this.x = x; this.y = y;              // initializes the fields. 
  }

  public double distanceFromOrigin() {   // A method that operates on
    return Math.sqrt(x*x + y*y);         // the x and y fields. 
  }
}</pre>
</blockquote>
<p>
	This class definition is stored in a file named
	<em class="emphasis">Point.java</em> and compiled to a file named
	<em class="emphasis">Point.class</em>, at which point it is
	available for use by Java programs and other classes. This
	class definition is provided here for completeness and to
	provide context, but don't expect to understand all the details
	just yet;
	most of <a href="ch03_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch03_01.htm">Chapter 3, "Object-Oriented Programming in Java"</a> is devoted to the topic
	of defining classes. Do pay extra attention to the first
	(non-comment) line of the class definition, however. Just as the first line of a method definition--the method
	signature--defines the API for the method, this line defines the
	basic API for a class (as described in the next chapter). </p>
<p>	Keep in mind that you don't have to define every class you want
	to use in a Java program. The Java platform
	consists of over 1500 predefined classes that are guaranteed to
	be available on every computer that runs Java. </p>
<h3 class="sect2">2.8.2. Creating an Object</h3>
<p>
<a name="INDEX-363"></a>

	Now that we have defined the <tt class="literal">Point</tt> class as a
	new data 
	type, we can use
	the following line to declare a variable that holds a
	<tt class="literal">Point</tt> object:
</p>
<blockquote>
<pre class="programlisting">Point p;</pre>
</blockquote>
<p>
	Declaring a variable to hold a <tt class="literal">Point</tt> object
	does not create the object itself, however. To actually create
	an object, you must use the <tt class="literal">new</tt> operator. This keyword is followed by the object's class (i.e., its type)
	and an optional argument list in parentheses. These arguments are
	passed to the constructor method for the class, which
	initializes internal fields in the new object:
</p>
<blockquote>
<pre class="programlisting">// Create a Point object representing (2,-3.5) and store it in variable p
Point p = new Point(2.0, -3.5);

// Create some other objects as well
Date d = new Date();         // A Date object that represents the current time
Vector list = new Vector();  // A Vector object to hold a list of objects</pre>
</blockquote>
<p>	The <tt class="literal">new</tt> keyword is by far the most common
	way to create objects in Java. There are a few other ways that
	are worth mentioning, however. First, there are a couple
	of classes that are so important that the Java language defines
	special literal syntax for creating objects of those types (as
	we'll discuss in the next section). Second, Java supports a dynamic loading mechanism that allows
	programs to load classes and create
	instances of those classes dynamically. This dynamic instantiation is done
	with the <tt class="literal">newInstance()</tt> methods of
	<tt class="literal">java.lang.Class</tt> and 
	<tt class="literal">java.lang.Constructor</tt>. Finally, in Java 1.1 and later, objects
	can also be created by deserializing them. In other
	words, an object that has had its state saved, or serialized, 
	usually to a file, can be recreated using the
	<tt class="literal">java.io.ObjectInputStream</tt> class. </p>
<h3 class="sect2">2.8.3. Object Literals</h3>
<p>
<a name="INDEX-364"></a>

	As I just said, Java defines special syntax for creating
	instances of two very important classes. The first class is
	<tt class="literal">String</tt>, which represents text as a string
	of characters. Since programs usually communicate with their
	users through the written word, the ability to manipulate
	strings of text is quite important in any programming
	language. In some languages, strings are a primitive type, on
	a par with integers and characters. In Java, however, strings
	are objects; the data type used to represent text is the 
	<tt class="literal">String</tt> class. </p>
<p>	Because strings are such a fundamental data type, Java allows you
	to include text literally in programs by placing it between
	double-quote (<tt class="literal">"</tt>) characters. For example:
</p>
<blockquote>
<pre class="programlisting">String name = "David";
System.out.println("Hello, " + name);</pre>
</blockquote>
<p>
	Don't confuse the double-quote characters that surround string
	literals with the single-quote (or apostrophe) characters that
	surround <tt class="literal">char</tt> literals. String literals can
	contain any of the escape sequences <tt class="literal">char</tt>
	literals can (see <a href="ch02_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch02_04.htm">Table 2-3</a>). Escape
	sequences are particularly useful for embedding double-quote
	characters within double-quoted string literals. For example:
</p>
<blockquote>
<pre class="programlisting">String story = "\t\"How can you stand it?\" he asked sarcastically.\n";</pre>
</blockquote>
<p>
	String literals can be only a single line long. Java does not
	support any kind of continuation-character syntax that allows
	two separate lines to be treated as a single line. If you need
	to represent a long string of text that does not fit on a single
	line, break it into independent string literals and use the
	<tt class="literal">+</tt> operator to concatenate the literals. For example:
</p>
<blockquote>
<pre class="programlisting">String s = "This is a test of the         // This is illegal; string literals
            emergency broadcast system";  // cannot be broken across lines. 

String s = "This is a test of the " +     // Do this instead. 
           "emergency broadcast system";</pre>
</blockquote>
<p>
	This concatenation of literals is done when your
	program is compiled, not when it is run, so you do not need to
	worry about any kind of performance penalty. </p>
<p>	The second class that supports its own special object literal
	syntax is the class named <tt class="literal">Class</tt>. <tt class="literal">Class</tt> is a (self-referential) data type that
	represents all Java data types,
	including primitive types and array types, not just class
	types. To include a
	<tt class="literal">Class</tt> object literally in a Java program,
	follow the name of any data type with <tt class="literal">.class</tt>. For example:
</p>
<blockquote>
<pre class="programlisting">Class typeInt = int.type;
Class typeIntArray = int[].type;
Class typePoint = Point.class;</pre>
</blockquote>
<p>
	This feature is supported by Java 1.1 and later. </p>
<p>	The Java reserved word <tt class="literal">null</tt> is a special
	literal that can be used with any class. Instead of
	representing a literal object, it represents the absence of an
	object. For example:
</p>
<blockquote>
<pre class="programlisting">String s = null;
Point p = null;</pre>
</blockquote>
<p>	Finally, objects can also be included literally in a Java
	program through the use of a construct known as an anonymous
	inner class. Anonymous classes are discussed in 
	<a href="ch03_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch03_01.htm">Chapter 3, "Object-Oriented Programming in Java"</a>. </p>
<h3 class="sect2">2.8.4. Using an Object</h3>
<p>
<a name="INDEX-365"></a>

	Now that we've seen how to define classes and
	instantiate them by creating objects, we need to look at the
	Java syntax that allows us to use those objects. Recall that a
	class defines a collection of fields and methods. Each object
	has its own copies of those fields and has access to those
	methods. We use the dot character
	(<tt class="literal">.</tt>) to access the named fields and methods of
	an object. For example:
</p>
<blockquote>
<pre class="programlisting">Point p = new Point(2, 3);         // Create an object
double x = p.x;                    // Read a field of the object 
p.y = p.x * p.x;                   // Set the value of a field 
double d = p.distanceFromOrigin(); // Access a method of the object</pre>
</blockquote>
<p>	This syntax is central to object-oriented programming in Java,
	so you'll see it a lot. Note, in particular, the expression
	<tt class="literal">p.distanceFromOrigin()</tt>. This tells
	the Java compiler to look up a method named
	<tt class="literal">distanceFromOrigin()</tt> defined by the class
	<tt class="literal">Point</tt> and use that method to perform a
	computation on the fields of the object <tt class="literal">p</tt>. We'll cover the details of this operation in <a href="ch03_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch03_01.htm">Chapter 3, "Object-Oriented Programming in Java"</a>.
<a name="INDEX-366"></a>
</p>

<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch02_07.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch02_07.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch02_09.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch02_09.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">2.7. Methods</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">2.9. Array Types</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
