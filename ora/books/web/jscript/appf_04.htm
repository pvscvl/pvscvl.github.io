<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Appendix F] F.4 Specification</TITLE>
<meta name="author" content="David Flanagan">
<meta name="date" content="Tue Apr 22 18:37:12 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="JavaScript">
<meta name="title" content="JavaScript: The Definitive Guide">
<!-- JavaScript: pathcont.js -->
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><img src="gifs/smbanner.gif" alt="Javascript: The Definitive Guide"></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="appf_03.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b>Appendix F</b></td>
<td width=172 align=right valign=top><a href="appf_05.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>
<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="appf-SECT1-AUTOID.4">F.4 Specification</A></h2>

<p class=para>
  A cookie is introduced to the client by including a
  <tt class=literal>Set-Cookie</tt> header as part of an HTTP response;
  typically this will be generated by a CGI script.
  

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="appf-SECT2-AUTOID.1">Syntax of the Set-Cookie HTTP Response Header</A></h3>

<p class=para>
    This is the format a CGI script would use to add to the HTTP headers
    a new piece of data which is to be stored by the client for later
    retrieval.
    

<div class=programlisting>
<p>
<pre>
Set-Cookie: <tt class=replaceable><i>name</i></tt>=<tt class=replaceable><i>value</i></tt>; expires=<tt class=replaceable><i>date</i></tt>;
path=<tt class=replaceable><i>path</i></tt>; domain=<tt class=replaceable><i>domain_name</i></tt>; secure
</PRE>
</DIV>


   

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal><tt class=replaceable><i>name</i></tt>=<tt class=replaceable><i>value</i></tt></tt><dd>

<p class=para>
       This string is a sequence of characters excluding
       semicolons, commas, and white space. If there is a need to place
       such data in the name or value, some encoding method such as
       URL style <tt class=literal>%XX</tt> encoding is recommended,
       though no encoding is defined or required.

<p class=para>
This is
       the only required attribute on the
       <tt class=literal>Set-Cookie</tt> header.
      

<p>
<dt class=varlistentry><tt class=literal>expires=<tt class=replaceable><i>date</i></tt></tt><dd>

<p class=para>
       The <tt class=literal>expires</tt> attribute specifies a date
       string that defines the valid lifetime of that cookie. Once
       the expiration date has been reached, the cookie will no
       longer be stored or given out.

<p class=para>
The date string is
       formatted as:
       

<div class=programlisting>
<p>
<pre>
Wdy, DD-Mon-YYYY HH:MM:SS GMT
</PRE>
</DIV>

<p class=para>
       This is based on RFC 822, RFC 850, RFC 1036, and RFC 1123,
       with the variations that the only legal time zone is GMT and
       the separators between the elements of the date must be
       dashes.
      

<p class=para>
       <tt class=literal>expires</tt> is an optional
       attribute. If not specified, the cookie will expire when the
       user's session ends.
      

<div class=note>
<p class=note><blockquote><p><b>NOTE:</B> 

<p class=para>
        There is a bug in Netscape Navigator version 1.1 and earlier.
        Only cookies whose <tt class=literal>path</tt> attribute is set
        explicitly to "/" will be properly saved between sessions if
        they have an <tt class=literal>expires</tt> attribute.
       
</blockquote><p>
</DIV>

<p>
<dt class=varlistentry><tt class=literal>domain=<tt class=replaceable><i>domain_name</i></tt></tt><dd>

<p class=para>
       When searching the cookie list for valid cookies, a comparison
       of the <tt class=literal>domain</tt> attributes of the cookie is
       made with the Internet domain name of the host from which the
       URL will be fetched. If there is a tail match, then the
       cookie will go through <tt class=literal>path</tt> matching to see
       if it should be sent. "Tail matching" means that
       <tt class=literal>domain</tt> attribute is matched against the
       tail of the fully qualified domain name of the host. A
       <tt class=literal>domain</tt> attribute of acme.com would match host names
       anvil.acme.com as well
       as shipping.crate.acme.com.

<p class=para>
Only hosts within the specified domain can set a cookie
       for a domain and domains must have at least two (2) or three
       (3) periods in them to prevent domains of the form:
       .com, .edu, and va.us. Any domain that falls
       within one of the seven special top level domains listed below
       only require two periods. Any other domain requires at least
       three. The seven special top level domains are:
       <i class=emphasis>com</I>, <i class=emphasis>edu</I>,
       <i class=emphasis>net</I>, <i class=emphasis>org</I>,
       <i class=emphasis>gov</I>, <i class=emphasis>mil</I>, and
       <i class=emphasis>int</I>.
      

<p class=para>
       The default value of <tt class=literal>domain</tt> is the host
       name of the server which generated the cookie
       response.
      

<p>
<dt class=varlistentry><tt class=literal>path=<tt class=replaceable><i>path</i></tt></tt><dd>

<p class=para>
       The <tt class=literal>path</tt> attribute is used to specify the
       subset of URLs in a domain for which the cookie is valid. If a
       cookie has already passed <tt class=literal>domain</tt> matching,
       then the pathname component of the URL is compared with the
       path attribute, and if there is a match, the cookie is
       considered valid and is sent along with the URL request. The
       path <i class=filename>/foo</i> would match
       <i class=filename>/foobar</i> and
       <i class=filename>/foo/bar.html</i>. The path
       <i class=filename>/</i> is the most general path.

<p class=para>
If the <tt class=literal>path</tt> is not specified, it as
       assumed to be the same path as the document being described by
       the header which contains the cookie.
      

<p>
<dt class=varlistentry><tt class=literal>secure</tt><dd>

<p class=para>
       If a cookie is marked <tt class=literal>secure</tt>, it will only
       be transmitted if the communications channel with the host is
       a secure one. Currently this means that secure cookies will
       only be sent to HTTPS (HTTP over SSL) servers.

<p class=para>
If
       <tt class=literal>secure</tt> is not specified, a cookie is
       considered safe to be sent in the clear over unsecured
       channels.
      </DL>
</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="appf-SECT2-AUTOID.2">Syntax of the Cookie HTTP Request Header</A></h3>

<p class=para>
    When requesting a URL from an HTTP server, the browser will match
    the URL against all cookies and if any of them match, a line
    containing the name/value pairs of all matching cookies will be
    included in the HTTP request. Here is the format of that line:
    

<div class=programlisting>
<p>
<pre>
Cookie: <tt class=replaceable><i>NAME1=OPAQUE_STRING1</i></tt>; <tt class=replaceable><i>NAME2=OPAQUE_STRING2 ...</i></tt>
</PRE>
</DIV>


   

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="appf-SECT2-AUTOID.3">Additional Notes</A></h3>

<ul class=itemizedlist>
<li class=listitem>     Multiple <tt class=literal>Set-Cookie</tt> headers can be issued in
     a single server response.
    

<p>
<li class=listitem>     Instances of the same path and name will overwrite each other,
     with the latest instance taking precedence. Instances of the
     same path but different names will add additional mappings.
    

<p>
<li class=listitem>     Setting the path to a higher-level value does not override other
     more specific path mappings. If there are multiple matches for a
     given cookie name, but with separate paths, all the matching
     cookies will be sent. (See examples below.)
    

<p>
<li class=listitem>     The <tt class=literal>expires</tt> header lets the client know when
     it is safe to purge the mapping but the client is not required to
     do so. A client may also delete a cookie before its expiration
     date arrives if the number of cookies exceeds its internal
     limits.
    

<p>
<li class=listitem>     When sending cookies to a server, all cookies with a more specific
     path mapping should be sent before cookies with less specific path
     mappings. For example, a cookie "name1=foo" with a path mapping
     of <i class=filename>/</i> should be sent after a cookie
     "name1=foo2" with a path mapping of <i class=filename>/bar</i> if
     they are both to be sent.
    

<p>
<li class=listitem>     There are limitations on the number of cookies that a client can
     store at any one time. This is a specification of the minimum
     number of cookies that a client should be prepared to receive and
     store:
    

<p>
<ul class=itemizedlist>
<li class=listitem>       300 total cookies;
      

<p>
<li class=listitem>       4 kilobytes per cookie, where the name and the OPAQUE_STRING
       combine to form the 4 kilobyte limit;
      

<p>
<li class=listitem>       20 cookies per server or domain (note that completely
       specified hosts and domains are treated as separate entities
       and have a 20-cookie limitation for each, not combined).
      

<p>
</UL>
<p class=para>
     Servers should not expect clients to be able to exceed these
     limits. When the 300-cookie limit or the 20-cookie-per-server
     limit is exceeded, clients should delete the least recently used
     cookie. When a cookie larger than 4 kilobytes is encountered the
     cookie should be trimmed to fit, but the name should remain intact
     as long as it is less than 4 kilobytes.
    

<p>
<li class=listitem>     If a CGI script wishes to delete a cookie, it can do so by
     returning a cookie with the same name, and an
     <tt class=literal>expires</tt> time which is in the past. The path
     and name must match exactly in order for the expiring cookie to
     replace the valid cookie. This requirement makes it difficult
     for anyone but the originator of a cookie to delete a cookie.
    

<p>
<li class=listitem>     When caching HTTP, as a proxy server might do, the
     <tt class=literal>Set-cookie</tt> response header should never be cached.
    

<p>
<li class=listitem>     If a proxy server receives a response which contains a
     <tt class=literal>Set-cookie</tt> header, it should propagate the
     <tt class=literal>Set-cookie</tt> header to the client, regardless of
     whether the response was 304 (Not Modified) or 200 (OK).
    

<p class=para>
     Similarly, if a client request contains a
     <tt class=literal>Cookie:</tt> header, it should be forwarded through
     a proxy, even if the conditional
     <tt class=literal>If-modified-since</tt> request is being made.
     

<p>
</UL>
</DIV>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="appf_03.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src="gifs/txthome.gif" alt="Home" border=0></a></td>
<td width=172 align=right valign=top><a href="appf_05.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Overview</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td>
<td width=172 align=right valign=top>Examples</td>
</tr>
</table>

<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
</DIV>

</BODY>
</HTML>
