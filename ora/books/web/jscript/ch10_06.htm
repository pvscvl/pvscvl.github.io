<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 10] 10.6 Execution of JavaScript Programs</TITLE>
<meta name="author" content="David Flanagan">
<meta name="date" content="Thu Apr 24 13:34:10 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="JavaScript">
<meta name="title" content="JavaScript: The Definitive Guide">
<!-- JavaScript: pathcont.js -->
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><img src="gifs/smbanner.gif" alt="Javascript: The Definitive Guide"></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch10_05.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b>Chapter 10</b></td>
<td width=172 align=right valign=top><a href="ch10_07.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>
<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="ch10-SECT1-AUTOID.6">10.6 Execution of JavaScript Programs</A></h2>

<p class=para>
<a name="CH09.ORDER1"></A><a name="CH09.ORDER2"></A><a name="CH09.ORDER3"></A>      The previous sections of this chapter have discussed the
      <i class=emphasis>structure</I> of JavaScript programs. This
      section moves on to discuss how those programs are executed by the
      JavaScript interpreter. Although it may seem obvious, it is
      important to understand how and when a web browser executes the
      JavaScript code embedded in various parts of an HTML file. The
      subsections below explain how different forms of JavaScript code
      are executed and also explain the implications that you must be
      aware of when writing JavaScript programs.
    

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch10-SECT2-AUTOID.8">Scripts</A></h3>

<p class=para>
	JavaScript statements that appear between
	<tt class=literal>&lt;SCRIPT&gt;</tt> and
	<tt class=literal>&lt;/SCRIPT&gt;</tt> tags are executed in the
	order that they appear, and, when more than one script appears
	in a file, those scripts are executed in the order they
	appear. The same rules apply to scripts included from separate
	files with the <tt class=literal>SRC</tt> attribute. This much is
	obvious. 
      

<p class=para>
	The detail that is not so obvious, but that is important to
	remember, is that execution of scripts occurs as part of the web
	browser's HTML parsing process. Thus, if a script appears in
	the <tt class=literal>&lt;HEAD&gt;</tt> of an HTML document, none of
	the <tt class=literal>&lt;BODY&gt;</tt> of the document will have
	been defined yet. This means that the Form, Link, and other
	JavaScript objects that represent the contents of the document
	body will not have been created yet and cannot be manipulated by
	that code. (We'll learn more about these objects in <a href="ch12_01.htm">Chapter 12, <i>Programming with Windows</i></A>, and the chapters that follow it,
	and you can find complete details in the reference section of
	this book.)
      

<p class=para>
	Because JavaScript scripts are evaluated as part of the web
	browser's HTML parsing, the JavaScript objects that represent
	parts of the HTML document do not exist until they are parsed,
	and your scripts should not attempt to manipulate objects that
	haven't been created yet. For example, you can't write a script
	that manipulates the contents of an HTML form if the script
	appears before the form in the HTML file. There are some other,
	similar, rules that apply on a case-by-case basis. For example,
	there are properties of the JavaScript Document object that may
	be set only from a script in the <tt class=literal>&lt;HEAD&gt;</tt>
	of an HTML document, before Navigator has begun to parse the
	document content from the <tt class=literal>&lt;BODY&gt;</tt>
	section. Any special rules of this sort are documented in this
	book's reference entry for the affected object or property.
      

<p class=para>
	As noted above, scripts that use the <tt class=literal>SRC</tt>
	attribute to read in an external JavaScript file are executed
	just as scripts that include their code directly in the file
	are. What this means is that the HTML parser and the JavaScript
	interpreter must both stop and wait for the external JavaScript
	file to be downloaded--scripts cannot be downloaded in parallel
	as embedded images can. Downloading an external file of
	JavaScript code, even over a relatively fast modem connection,
	can cause noticeable delays in the loading and execution of a web
	page. Of course, once the JavaScript code is cached locally,
	this problem effectively disappears.
      

<p class=para>
	Note that scripts using the Internet Explorer
	<tt class=literal>FOR</tt> and <tt class=literal>EVENT</tt> tags are not
	executed following the rules described here--they should rightly
	be considered event handlers, rather than scripts, and are
	executed in the same way (described below) that more
	conventionally defined event handlers are.
      

<p class=para>
	In Navigator 2.0, there is a notable bug relating to execution
	of scripts: whenever the web browser is resized, all the scripts
	within it are re-interpreted.
      

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch10-SECT2-AUTOID.9">Functions</A></h3>

<p class=para>
	Remember that defining a function is not the same as executing
	it. It is perfectly safe to define a function that manipulates
	variables that aren't declared yet, or objects that haven't been
	created yet. You simply must take care that the function is not
	executed or invoked until the necessary variables, objects, and
	so on, all exist. We said above that you can't write a script
	to manipulate an HTML form if the script appears before the form
	in the HTML file. You can, however, write a script that defines
	a function to manipulate the form, regardless of the relative
	location of the script and form. In fact, this is quite a
	common thing to do. Many JavaScript programs start off with a
	script at the beginning of the file that does nothing more than
	define functions that will be used elsewhere further down in the
	HTML file.
      

<p class=para>
	It is also common to write JavaScript programs that use scripts
	simply to define functions that are later invoked through event
	handlers. As we'll see in the next section, you must take care
	in this case to insure two things:  first, that all functions
	are defined before any event handler attempts to invoke them.
	And second, that event handlers and the functions they invoke do
	not attempt to use objects that have not been defined yet.
      

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch10-SECT2-AUTOID.10">Event Handlers</A></h3>

<p class=para>
	As we've seen, defining an event handler creates a JavaScript
	function. These event-handler functions are defined as part of
	the HTML parsing process, but, like functions defined directly
	by scripts, event handlers are not executed immediately. Event
	handler execution is <i class=emphasis>asynchronous</I>. Since
	events occur, in general, when the user interacts with HTML
	objects, there is no way to predict when an event handler will
	be invoked. In fact, event handlers may be invoked even before a
	web page is fully loaded and parsed. This is easier to
	understand if you imagine a slow network connection--even a
	half-loaded document may display hypertext links and form
	elements that the user can interact with, thereby causing event
	handlers to be invoked before the second half of the document is
	loaded.
      

<p class=para>
	
	The fact that event handlers are invoked asynchronously has two
	important implications. First, if your event handler invokes
	functions, you must be sure that the functions are already
	defined before the handler calls them. One way to guarantee
	this is to define all your functions in the
	<tt class=literal>&lt;HEAD&gt;</tt> of an HTML document. This
	section of a document will always be completely parsed (and any
	functions in it defined) before the
	<tt class=literal>&lt;BODY&gt;</tt> of the document is parsed.
	Since all objects that define event handlers must themselves be
	defined in the <tt class=literal>&lt;BODY&gt;</tt>, functions in the
	<tt class=literal>&lt;HEAD&gt;</tt> are guaranteed to be defined
	before any event handlers are invoked.
      

<p class=para>
	The second implication of the fact that event handlers may be
	invoked before a document is fully loaded is that you must be
	sure that event handlers do not attempt to manipulate HTML
	objects that have not yet been parsed and created. An event
	handler may always safely manipulate its own object, of course,
	and also any objects that are defined before it in the HTML
	file. One strategy is simply to define your web page user
	interface in such a way that event handlers always refer only to
	objects defined before they are. For example, if you define a
	form that contains event handlers only on the <b>Submit</b> and <b>Reset</b> buttons, then you simply need to
	place these buttons at the bottom of the form (which is where
	good UI style says they should go anyway).
      

<p class=para>
	In more complex programs, you may not be able to ensure that
	event handlers will only manipulate objects defined before them,
	and in these programs you need to take extra care. If an event
	handler only manipulates objects defined within the same form,
	it is pretty unlikely that you'll ever have problems. When you
	start manipulating objects in other forms or in other frames,
	however, this starts to be a real concern. One technique is to
	test for the existence of the object you want to
	manipulate before you manipulate it. You can do this simply by
	comparing it (and any parent objects) to
	<tt class=literal>null</tt>. For example:
	

<div class=programlisting>
<p>
<pre>
&lt;SCRIPT&gt;
function set_name_other_frame(name)
{
    if (parent.frames[1] == null) return;   //<tt class=replaceable><i> other frame not defined yet</i></tt>
    if (parent.frames[1].document) return;  //<tt class=replaceable><i> document not loaded in it yet</i></tt>
    if (!parent.frames[1].document.myform) return;  //<tt class=replaceable><i> form not defined yet</i></tt>
    if (!parent.frames[1].document.myform.lastname) return; //<tt class=replaceable><i> field not defined</i></tt>
    parent.frames[1].document.myform.name.value = name;
}
&lt;/SCRIPT&gt;
&lt;INPUT TYPE="text" NAME="lastname"
       onChange="set_name_other_frame(this.value)";
&gt;  
</PRE>
</DIV>


      

<p class=para>
<a name="CH09.LOAD"></A>	Another technique that an event handler can use to ensure that
	all required objects are defined involves the
	<tt class=literal>onLoad()</tt> event handler. This event
	handler is defined in the <tt class=literal>&lt;BODY&gt;</tt> or
	<tt class=literal>&lt;FRAMESET&gt;</tt> tag of an HTML file and is
	invoked when the document or frameset is fully loaded. If you
	set a flag within
	the <tt class=literal>onLoad()</tt> event handler, then
	other event handlers can test this flag to see if they can
	safely run, with the knowledge that the document is fully loaded
	and all objects it contains are defined. For example:
	

<div class=programlisting>
<p>
<pre>
&lt;BODY onLoad="window.loaded = true;"&gt;
  &lt;FORM&gt;
    &lt;INPUT TYPE="button" VALUE="Press Me"
           onClick="if (window.loaded != true) return; doit();"
    &gt;
  &lt;/FORM&gt;
&lt;/BODY&gt;
</PRE>
</DIV>


      

<p class=para>
	Unfortunately, in Navigator 2.0, documents that contain images
	and do not contain frames may invoke the
	<tt class=literal>onLoad()</tt> handler early, and so this
	technique is not foolproof. A possible solution is to include a
	small script at the very <i class=emphasis>end</I> of the
	document and have this script set the necessary flag:
	

<div class=programlisting>
<p>
<pre>
    &lt;SCRIPT&gt;window.loaded = true;&lt;/SCRIPT&gt;
  &lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>
</DIV>


	The following subsection contains more information on the
	<tt class=literal>onLoad()</tt> event handler, and its partner, the
	<tt class=literal>onUnload()</tt> handler.
      

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch10-SECT2-AUTOID.11">onLoad() and onUnload() Event Handlers</A></h3>

<p class=para>
	The <tt class=literal>onLoad()</tt> event handler and its
	partner the <tt class=literal>onUnload()</tt> handler are
	worth a special mention in the context of execution order of
	JavaScript programs. Both these event handlers are defined in
	the <tt class=literal>&lt;BODY&gt;</tt> or
	<tt class=literal>&lt;FRAMESET&gt;</tt> tag of an HTML file. (No
	HTML file can legally contain both these tags.) The
	<tt class=literal>onLoad()</tt> handler is executed when the
	document or frameset is fully loaded, which means that all
	images have been downloaded and displayed, all sub-frames have
	loaded, any Java applets and plug-ins (Navigator) have started
	running, and so on. The <tt class=literal>onUnload()</tt>
	handler is executed just before the page is "unloaded", which
	occurs when the browser is about to move on to a new page. Be
	aware that when you are working with multiple frames, there is
	no guarantee of the order in which the
	<tt class=literal>onLoad()</tt> event handler will be
	invoked for the various frames, except that the handler for the
	parent frame will be invoked after the handlers of all its
	children frames (although this is buggy and doesn't always work
	correctly in Navigator 2.0).
      

<p class=para>
	The <tt class=literal>onLoad()</tt> event handler lets you
	perform initialization for your web page. And the
	<tt class=literal>onUnload()</tt> event handler lets you
	undo any lingering effects of the initialization, or perform any
	other necessary "clean up" on your page. For example,
	<tt class=literal>onLoad()</tt> could set the
	<tt class=literal>Window.defaultStatus</tt> property to display a
	special message in the browser's status bar. Then the
	<tt class=literal>onUnload()</tt> handler would restore the
	<tt class=literal>defaultStatus</tt> property to its default (the
	empty string) so that the message does not persist on other
	pages.
      

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch10-SECT2-AUTOID.12">JavaScript URL Execution</A></h3>

<p class=para>
	JavaScript code in a <tt class=literal>javascript:</tt> URL is not
	executed when the document containing the URL is loaded. It is
	not interpreted until the browser tries to "load the document"
	that the URL refers to. This may be when a user types in a
	JavaScript URL, or, more likely, it is when the user follows a
	link, clicks on a client-side image map, or submits a form.
	<tt class=literal>javascript:</tt> URLs are usually equivalent to
	event handlers, and like event handlers, the code in those URLs
	can be executed before a document is fully loaded. Thus, you
	must take the same precautions with
	<tt class=literal>javascript:</tt> URLs that you take with event
	handlers to ensure that they do not attempt to reference objects
	(or functions) that are not yet defined.
      

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch10-SECT2-AUTOID.13">JavaScript Entity Execution</A></h3>

<p class=para>
	Since JavaScript entities are used as the value of HTML
	attributes, these pieces of JavaScript code are executed during
	the process of HTML parsing that is done while the document is
	loading. In fact, since the JavaScript code in an entity
	produces a value that becomes part of the HTML itself, the HTML
	parsing process is dependent on the JavaScript interpreter in
	this case. JavaScript entities can always be replaced by more
	cumbersome scripts that write the affected HTML tags
	dynamically. For example, the following line of HTML:
	

<div class=programlisting>
<p>
<pre>
&lt;INPUT TYPE="text" NAME="lastname" VALUE="&amp;{defaults.lastname};"&gt;
</PRE>
</DIV>


	can be replaced with these lines:
	

<div class=programlisting>
<p>
<pre>
&lt;SCRIPT&gt;
  document.write('&lt;INPUT TYPE="text" NAME="lastname" VALUE="' +
                 defaults.lastname +
                 '"&gt;');
&lt;/SCRIPT&gt;
</PRE>
</DIV>


	For all intents and purposes, JavaScript entities are executed
	just like their equivalent scripts are.
      

</DIV>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch10_05.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src="gifs/txthome.gif" alt="Home" border=0></a></td>
<td width=172 align=right valign=top><a href="ch10_07.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>JavaScript Entities</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td>
<td width=172 align=right valign=top>JavaScript and Threads</td>
</tr>
</table>

<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
</DIV>

</BODY>
</HTML>
