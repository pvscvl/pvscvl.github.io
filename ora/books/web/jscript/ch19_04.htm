<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 19] 19.4 JavaScript Conversion of JavaObjects</TITLE>
<meta name="author" content="David Flanagan">
<meta name="date" content="Wed Apr 23 18:24:57 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="JavaScript">
<meta name="title" content="JavaScript: The Definitive Guide">
<!-- JavaScript: pathcont.js -->
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><img src="gifs/smbanner.gif" alt="Javascript: The Definitive Guide"></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch19_03.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b>Chapter 19</b></td>
<td width=172 align=right valign=top><a href="ch19_05.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>
<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="ch19-SECT1-AUTOID.4">19.4 JavaScript Conversion of JavaObjects</A></h2>

<p class=para>
      Having worked your way through that dense data conversion section
      above you may have hoped that we were through with the topic of
      data conversion. But there is more to be discussed. It has to do
      with how JavaScript converts JavaObjects to various JavaScript
      primitive types. Notice in <a href="ch19_03.htm">Figure 19-3</A> that quite a few Java data
      types, including Java strings (instances of
      <i class=emphasis>java.lang.String</I>) are converted to JavaObject
      objects in JavaScript rather than being converted to actual
      JavaScript primitive types, such as strings. This means that when
      you use LiveConnect, you'll commonly be working with JavaObject
      objects.
    

<p class=para>
      Refer back to <a href="ch09_01.htm">Table 9.1</A>.  You may also want
      to re-read the section of <a href="ch09_01.htm">Chapter 9, <i>Further Topics in JavaScript</i></A>,
      that <a href="ch09_01.htm">Table 9.1</A> is
      contained in.  The table shows how various JavaScript data types
      are converted when used in various "contexts." For example, when
      a number is used in a string context, it is converted to a
      string. And when an object is used in a Boolean context, it is
      converted to the value <tt class=literal>false</tt> if it is
      <tt class=literal>null</tt> and <tt class=literal>true</tt>
      otherwise. These conversion rules don't apply to JavaObject
      objects. JavaObject objects are converted using their own rules,
      as follows:
      

<p>
<ul class=itemizedlist>
<li class=listitem>	    When a JavaObject is used in a numeric context, it is
	    converted to a number by invoking the
	    <tt class=literal>doubleValue()</tt> method of the Java object
	    it represents. If the Java object does not define this
	    method, a JavaScript error occurs.
	  

<p>
<li class=listitem>	    When a JavaObject is used in a Boolean context, it is
	    converted to a Boolean value by invoking the
	    <tt class=literal>booleanValue()</tt> method of the Java object
	    it represents. If the Java object does not define this
	    method, a JavaScript error occurs.
	  

<p>
<li class=listitem>	    When a JavaObject is used in a string context, it is
	    converted to a string value by invoking the
	    <tt class=literal>toString()</tt> method of the Java object it
	    represents. All Java objects define or inherit this method,
	    so this conversion always succeeds.
	  

<p>
<li class=listitem>	    When a JavaObject is used in a function context, a
	    JavaScript error occurs.
	  

<p>
<li class=listitem>	    When a JavaObject is used in an object context, no
	    conversion is necessary, since it is already a JavaScript
	    object.
	  

<p>
</UL>

    

<p class=para>
      Because of these different conversion rules, and for other reasons
      as well, JavaObjects behave differently than other JavaScript
      objects, and there are some common pitfalls that you need to
      beware of. First, it is not uncommon to work with a JavaObject
      that represents an instance of a
      <i class=emphasis>java.lang.Double</I> or some other numeric
      object. In many ways, such a JavaObject will behave like a
      primitive number value, but be careful when using the
      <tt class=literal>+</tt> operator. When you use a JavaObject (or any
      JavaScript object) with <tt class=literal>+</tt>, it constitutes a
      string context, and the object is converted to a string for string
      concatenation, instead of being converted to a number for
      addition.
    

<p class=para>
      When we described this same problem above when working with a
      Number object, we said that the workaround was to explicitly call
      <tt class=literal>valueOf()</tt> to convert the Number to a primitive
      number. Because of another difference between JavaObjects and
      other JavaScript objects, this workaround doesn't work in this
      case. Recall that the JavaObject object has no properties of its
      own; all of its properties represent fields and methods of the
      Java object it represents. This means that JavaObjects don't even
      have the <tt class=literal>valueOf()</tt> method recommended above!
      So when you've got a JavaObject representing an instance of
      <i class=emphasis>java.lang.Double</I>, or something similar,
      you'll have to call the <tt class=literal>doubleValue()</tt> method
      when you need to force it to a primitive value.
    

<p class=para>
      Another difference between JavaObjects and other JavaScript data
      types is that JavaObjects can only be used in a Boolean context if
      they define a <tt class=literal>booleanValue()</tt> method. Suppose
      <tt class=literal>button</tt> is a JavaScript variable that may
      contain <tt class=literal>null</tt> or may hold a JavaObject that
      represents an instance of the <i class=emphasis>java.awt.Button</I>
      class. If you want to check whether the variable contains
      <tt class=literal>null</tt>, you might write code like this, out of
      old habit:
      

<div class=programlisting>
<p>
<pre>
if (!button) { ... }
</PRE>
</DIV>


      If <tt class=literal>button</tt> is <tt class=literal>null</tt>, this will
      work fine. But if <tt class=literal>button</tt> actually contains a
      JavaObject representing a <i class=emphasis>java.awt.Button</I>
      instance, then LiveConnect will try to invoke the
      <tt class=literal>booleanValue()</tt> method. When it discovers that
      the <i class=emphasis>java.awt.Button</I> class doesn't define one,
      it will cause a JavaScript error. The workaround in this case is
      to be explicit about what you are testing for, to avoid using the
      JavaObject in a Boolean context:
      

<div class=programlisting>
<p>
<pre>
if (button != null) { ... }
</PRE>
</DIV>


      This is a good habit to get into, in any case, since it makes your
      code easier to read and understand.
    

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch19_03.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src="gifs/txthome.gif" alt="Home" border=0></a></td>
<td width=172 align=right valign=top><a href="ch19_05.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>LiveConnect Data Conversion</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td>
<td width=172 align=right valign=top>Scripting Java with JavaScript</td>
</tr>
</table>

<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
</DIV>

</BODY>
</HTML>
