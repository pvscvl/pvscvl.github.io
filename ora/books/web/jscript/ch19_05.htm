<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 19] 19.5 Scripting Java with JavaScript</TITLE>
<meta name="author" content="David Flanagan">
<meta name="date" content="Wed Apr 23 18:24:59 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="JavaScript">
<meta name="title" content="JavaScript: The Definitive Guide">
<!-- JavaScript: pathcont.js -->
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><img src="gifs/smbanner.gif" alt="Javascript: The Definitive Guide"></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch19_04.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b>Chapter 19</b></td>
<td width=172 align=right valign=top><a href="ch19_06.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>
<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="ch19-SECT1-AUTOID.5">19.5 Scripting Java with JavaScript</A></h2>

<p class=para>
      Now that we've discussed the JavaScript data types used by
      LiveConnect, and the data conversions that go on when JavaScript
      reads and writes Java data values, we can begin to discuss some of
      the practical applications of LiveConnect. Bear in mind, while
      reading this section, that we have still only discussed half of
      LiveConnect--the half that allows JavaScript to work with Java.
      The portions of LiveConnect that allow a Java applet to use
      JavaScript will be documented later.
    

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch19-SECT2-AUTOID.8">Using the Java System Classes</A></h3>

<p class=para>
	All of the LiveConnect examples presented so far in this chapter
	have made use of Java classes from the standard Java libraries
	from Sun. There is not a whole lot of interesting things you
	can do with an instance of
	<i class=emphasis>java.ang.Double</I>, but we have seen some
	interesting uses of the <i class=emphasis>java.lang.System</I>
	class, for example.
      

<p class=para>
	LiveConnect gives us the capability to create new instances of
	Java classes, to set and query fields of classes and their
	instances, and to invoke methods of classes or instances. Using
	these capabilities, there are some interesting things we can do
	with the "built-in" or "system" classes that are installed with
	Navigator. Note also, that there are some things that we cannot
	do. LiveConnect does not give us the capability to define new
	Java classes or subclasses from within JavaScript, nor does it
	give us the ability to create Java arrays. Also, the things we
	can do with the standard Java classes are restricted for
	security reasons. A JavaScript program cannot use the
	<i class=emphasis>java.io.File</I> class, for example, because
	that would give it the power to read, write, and delete files on
	the host system--exactly the capabilities needed for Internet
	"viruses". Because of security issues like this one, JavaScript
	can use Java only in those ways that untrusted applets can.
      

<p class=para>
	<a href="#JSCRIPT-CH-LIVECONN-EX-1">Example 19-1</A> shows JavaScript code
	that uses standard Java classes (the JavaScript code looks
	almost identical to Java code, in fact) to pop up a window and
	display some text. The results are shown in <a href="#JSCRIPT-CH-LIVECONN-FIG-4">Figure 19-4</A>.
      

<div class=example>
<h4 class=example><a class="TITLE" name="JSCRIPT-CH-LIVECONN-EX-1">Example 19-1: Scripting the Built-in Java Classes</A></h4>

<div class=programlisting>
<p>
<pre>
var f = new java.awt.Frame("Hello World");
var ta = new java.awt.TextArea("hello, world", 5, 20);
f.add("Center", ta);
f.pack();
f.show();
</PRE>
</DIV>

</DIV>

<div class=figure>
<h4 class=figure><a class="TITLE" name="JSCRIPT-CH-LIVECONN-FIG-4">Figure 19-4: A Java window created from JavaScript</A></h4>


<p>
<img align=middle src="figs/js1904.gif" alt="[Graphic: Figure 19-4]" width=285 height=121>

</DIV>

<p class=para>
	<a href="#JSCRIPT-CH-LIVECONN-EX-1">Example 19-1</A> shows how it is
	possible to use JavaScript to create simple Java user
	interfaces. But while this technique of creating and popping up
	a Java window from JavaScript seems like it could lead to much
	more complex examples of Java user interfaces and graphics drawn
	from JavaScript, it is not actually so easy. LiveConnect allows
	us only to call methods in classes and objects. It does not
	define any way to subclass Java objects or define Java methods,
	and both of these techniques are required in Java to be able to
	handle events (such as button presses). Thus, in general, you
	can only use JavaScript to create static Java programs, not Java
	programs that <i class=emphasis>interact</I> with a user. This
	may change in the future, however--both the JDK 1.1 version of
	the AWT user-interface library from Sun and the Internet
	Foundation Classes (IFC) library from Netscape make it easier to
	define event handlers, and may make it possible to connect Java
	user-interfaces to JavaScript functions that handle user
	interaction.
      

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch19-SECT2-AUTOID.9">Interacting with Applets</A></h3>

<p class=para>
	We saw in <a href="ch14_01.htm">Chapter 14, <i>Documents and Their Contents</i></A>, that the
	Document object has an <tt class=literal>applets[]</tt>
	property which is an array containing JavaObject objects, one
	for each Java applet in the document. The JavaObject objects in
	this array represent the Java object of each applet--this
	will always be an instance of some subclass
	<i class=emphasis>java.applet.Applet</I>. Because LiveConnect
	exposes the Java object for each applet on a web page, you can
	freely read and write public fields of the applet and just as
	freely invoke public methods of the applet.
      

<p class=para>
	<a href="#JSCRIPT-CH-LIVECONN-EX-2">Example 19-2</A> shows some simple HTML
	that embeds an applet in a web page and includes buttons that
	start and stop the applet by using LiveConnect to invoke the
	applet's <tt class=literal>start()</tt> and
	<tt class=literal>stop()</tt> methods.
      

<div class=example>
<h4 class=example><a class="TITLE" name="JSCRIPT-CH-LIVECONN-EX-2">Example 19-2: Controlling an Applet with JavaScript</A></h4>

<div class=programlisting>
<p>
<pre>
&lt;!--<tt class=replaceable><i> Here's the applet </i></tt>--&gt;
&lt;APPLET NAME="animation" CODE="Animation.class" WIDTH=500 HEIGHT=200&gt;
&lt;/APPLET&gt;
&lt;!--<tt class=replaceable><i> And here are the buttons that start and stop it. </i></tt>--&gt;
&lt;FORM&gt;
&lt;INPUT TYPE=button VALUE="Start" onclick="document.animation.start()"&gt;
&lt;INPUT TYPE=button VALUE="Stop" onclick="document.animation.stop()"&gt;
&lt;/FORM&gt;
</PRE>
</DIV>

</DIV>

<p class=para>
	There are a couple of points to note about this example. First,
	the <tt class=literal>&lt;APPLET&gt;</tt> tag is given a
	<tt class=literal>NAME</tt> attribute, and the value of that
	attribute becomes the name of a property in the document object.
	We've seen this technique before with the
	<tt class=literal>&lt;FORM&gt;</tt> and
	<tt class=literal>&lt;IMG&gt;</tt> tags; in this case it allows us
	to refer to applets by names such as
	<tt class=literal>document.animation</tt> instead of numbers such as
	<tt class=literal>document.applets[0]</tt>.
      

<p class=para>
	The second point to note about this example is that it calls the
	<tt class=literal>start()</tt> and <tt class=literal>stop()</tt> methods
	of the applet--these are standard methods that all applets
	define; they are the methods that the browser itself calls to
	start and stop the applet. But you needn't stop at calling the
	standard methods of the Java <i class=emphasis>Applet</I>
	class. If your applet defines other methods of its own, you can
	call any of these as well.[3]
	If you were working with a full-featured animation applet, for
	example, you might define an HTML form to serve as a complete
	control panel for the animation, with <b>Fast-Forward</b> and <b>Reverse</b> buttons, an input field for
	specifying speed, and so on. The buttons in this control panel
	could then control the applet by invoking special-purpose
	methods, such as <tt class=literal>fast_forward()</tt>, provided by
	the applet.
      

<blockquote class=footnote>
<p class=para>[3] 
	    In fact, it is safer and more portable to call your own
	    custom methods than to call those that are intended to be
	    called by the browser.
	  
</blockquote>
<p class=para>
	Another possibility to bear in mind is that you can write
	passive applets that take no action on their own, but exist
	simply to serve your JavaScript code. An applet might define
	various utility functions for popping up dialog boxes that are
	more complex than those provided by the
	<tt class=literal>alert()</tt>, <tt class=literal>confirm()</tt>, and
	<tt class=literal>prompt()</tt> methods, for example.
      

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch19-SECT2-AUTOID.10">Working with Plug-Ins</A></h3>

<p class=para>
	Just as the <tt class=literal>applets[]</tt> array of the Document
	object contains JavaObjects that represent the applets embedded
	in a document with the <tt class=literal>&lt;APPLET&gt;</tt> tag,
	the <tt class=literal>embeds[]</tt> array of the Document object
	contains JavaObjects that represent data embedded in a web page
	with the <tt class=literal>&lt;EMBED&gt;</tt> tag. This is data
	that is intended to be displayed by a Navigator plug-in. Do not
	confuse the <tt class=literal>Document.embeds[]</tt> array with the
	<tt class=literal>Navigator.plug-ins[]</tt> array. The first
	contains objects that represent a single piece of embedded data,
	and the second contains Plugin objects that represent the actual
	plug-ins that are installed in Navigator to display embedded
	data.
      

<p class=para>
	The JavaObject objects in the <tt class=literal>embeds[]</tt> array
	are all instances of some subclass of the
	<i class=emphasis>netscape.plugin.Plugin</I> class. Each
	Java-enabled plug-in defines its own subclass of
	<i class=emphasis>netscape.plugin.Plugin</I>, and creates an
	instance of that subclass for each piece of embedded data (each
	<tt class=literal>&lt;EMBED&gt;</tt> tag) that it displays. The
	purpose of these <i class=emphasis>netscape.plugin.Plugin</I>
	subclasses is to define an API through which Java applets and
	JavaScript programs can control the behavior of a plug-in, or of
	a particular instance of a plug-in.
      

<p class=para>
	Because the objects in the <tt class=literal>embeds[]</tt> array are
	provided by plug-ins, the properties and methods of any of these
	objects will depend on the particular plug-in in use. In
	general, you'll have to read the vendor's documentation for any
	given plug-in to determine how to control it through LiveConnect.
	If the plug-in that is displaying the data is not Java-enabled,
	then the corresponding object in the <tt class=literal>embeds[]</tt>
	array will be a JavaObject that represents a dummy Java object
	with no functionality.
      

<p class=para>
	<a href="#JSCRIPT-CH-LIVECONN-EX-3">Example 19-3</A> shows how you might
	use the LiveAudio plug-in (bundled with Navigator 3.0 on most
	platforms) and LiveConnect to automatically play a sound when
	the user clicks a button and when the mouse passes over a
	hyperlink. The example relies upon the
	<tt class=literal>play()</tt> method of the
	<i class=emphasis>netscape.plugin.Plugin</I> instance provided by
	the LiveAudio plug-in. This method, and many others, are
	detailed by Netscape in their LiveAudio documentation.
      

<div class=example>
<h4 class=example><a class="TITLE" name="JSCRIPT-CH-LIVECONN-EX-3">Example 19-3: Controlling a Plug-In from JavaScript</A></h4>

<div class=programlisting>
<p>
<pre>
&lt;!--<tt class=replaceable><i> Here we embed some sounds in the browser, with attributes to </i></tt>--&gt;
&lt;!--<tt class=replaceable><i> specify that they won't be played when first loaded. In this </i></tt>--&gt;
&lt;!--<tt class=replaceable><i> example, we use sounds found locally on Windows 95 platforms. </i></tt>--&gt;
&lt;EMBED SRC="file:///<tt class=replaceable><i>C|/windows/media/Tada.wav" HIDDEN=true AUTOSTART=false&gt;</i></tt>
&lt;EMBED SRC="file:///<tt class=replaceable><i>C|/windows/media/Ding.wav" HIDDEN=true AUTOSTART=false&gt;</i></tt>
&lt;EMBED SRC="file:///<tt class=replaceable><i>C|/windows/media/The Microsoft Sound.wav"</i></tt>
       HIDDEN=true AUTOSTART=false&gt;
&lt;!--<tt class=replaceable><i> Here are some buttons that play those sounds. Note the use of the </i></tt>--&gt;
&lt;!--<tt class=replaceable><i> embeds[] array and the play() method invoked through LiveConnect. </i></tt>--&gt;
&lt;FORM&gt;
&lt;INPUT TYPE=button VALUE="Play Sound #1" onClick="document.embeds[0].play()"&gt;
&lt;INPUT TYPE=button VALUE="Play Sound #2" onClick="document.embeds[1].play()"&gt;
&lt;INPUT TYPE=button VALUE="Play Sound #3" onClick="document.embeds[2].play()"&gt;
&lt;/FORM&gt;
&lt;!--<tt class=replaceable><i> Here's a hypertext link that plays a sound when the user passes over </i></tt>--&gt;
&lt;A HREF="" onMouseOver="document.embeds[0].play()"&gt;Click Me&lt;/A&gt;
</PRE>
</DIV>

</DIV>

<p class=para>
	Although the objects in the <tt class=literal>embeds[]</tt> array
	are all instances of subclasses of
	<i class=emphasis>netscape.plugin.Plugin</I>, there is one method
	that all subclasses share which you may find useful in your
	JavaScript code. The <tt class=literal>isActive()</tt> method
	returns <tt class=literal>true</tt> if the specified Plugin object
	is still active and <tt class=literal>false</tt> if it is not.
	Generally, a plug-in will only become inactive if it was on a
	page that is no longer displayed. This situation can only arise
	when you store references to the <tt class=literal>embeds[]</tt>
	array of one window in JavaScript variables of another window.
      

</DIV>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch19_04.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src="gifs/txthome.gif" alt="Home" border=0></a></td>
<td width=172 align=right valign=top><a href="ch19_06.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>JavaScript Conversion of JavaObjects</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td>
<td width=172 align=right valign=top>Using JavaScript from Java</td>
</tr>
</table>

<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
</DIV>

</BODY>
</HTML>
