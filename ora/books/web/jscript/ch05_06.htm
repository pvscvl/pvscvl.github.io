<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 5] 5.6 for...in</TITLE>
<meta name="author" content="David Flanagan">
<meta name="date" content="Wed Apr 23 18:06:22 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="JavaScript">
<meta name="title" content="JavaScript: The Definitive Guide">
<!-- JavaScript: pathcont.js -->
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><img src="gifs/smbanner.gif" alt="Javascript: The Definitive Guide"></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch05_05.htm#ch05-SECT1-AUTOID.5"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b>Chapter 5</b></td>
<td width=172 align=right valign=top><a href="ch05_07.htm#ch05-SECT1-AUTOID.7"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>
<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="ch05-SECT1-AUTOID.6">5.6 for...in</A></h2>

<p class=para>
<a name="CH05.FOR3"></A><a name="CH05.FOR4"></A><a name="CH05.FOR5"></A><a name="CH05.FOR6"></A>      The <tt class=literal>for</tt> keyword is used in two ways in
      JavaScript. We've just seen how it is used in the
      <tt class=literal>for</tt> loop. It is also used in the
      <tt class=literal>for/in</tt> statement. This statement is a somewhat
      different kind of loop with the following syntax:
    

<div class=programlisting>
<p>
<pre>
for (<tt class=replaceable><i>variable</i></tt> in <tt class=replaceable><i>object</i></tt>)
    <tt class=replaceable><i>statement</i></tt>
</PRE>
</DIV>

<p class=para>
      The <tt class=replaceable><i>variable</i></tt> should be the name of a
      variable, or should be an element of an array or a property of an
      object; it should be something suitable as the left-hand side of
      an assignment expression. <tt class=replaceable><i>object</i></tt> is the
      name of an object, or an expression that evaluates to an
      object. As usual, the <tt class=replaceable><i>statement</i></tt> is a
      primitive statement or statement block that forms the body of the
      loop.
    

<p class=para>
      You can loop through the elements of an array by simply
      incrementing an index variable each time through a
      <tt class=literal>while</tt> or <tt class=literal>for</tt> loop. The
      <tt class=literal>for/in</tt> statement provides a way to loop through
      the properties of an object. The body of the <tt class=literal>for/in</tt>
      loop is executed once for each property of
      <tt class=replaceable><i>object</i></tt>. Before the body of the loop is
      executed, the name of one of the object's properties is assigned to
      <tt class=replaceable><i>variable</i></tt>, as a string. Within the body
      of the loop, you can use this variable to look up the value of the
      object's property with the <tt class=literal>[]</tt> operator.
      For example, the following <tt class=literal>for/in</tt> loop prints
      out the name and value of each property of an object:
    

<div class=programlisting>
<p>
<pre>
for (prop in my_object) {
    document.write("name: " + prop  "; value: " + my_object[prop], "&lt;br&gt;");
}
</PRE>
</DIV>

<p class=para>
      The <tt class=literal>for/in</tt> loop does not specify in what order
      the properties of an object will be assigned to the variable. There
      is no way to tell in advance, and the behavior may differ between
      implementations or versions of JavaScript.
    

<p class=para>
      The <tt class=literal>for/in</tt> loop does not actually loop through
      all possible properties of all objects. The rules below specify
      exactly which properties the statement does list and which it does
      not in Navigator 3.0. Internet Explorer may use somewhat
      different rules: 
      

<p>
<ul class=itemizedlist>
<li class=listitem>	    It lists any user-defined properties or methods explicitly
	    set in a user-defined or system object.
	  

<p>
<li class=listitem>	    In general, it lists the properties, but not the methods, of
	    built-in and HTML objects. Certain properties, such as the
	    <tt class=literal>constructor</tt> property are never listed,
	    and some built-in objects may have object-specific listing
	    behavior. This object-specific behavior may differ between
	    Navigator and Internet Explorer.
	  

<p>
<li class=listitem>	    It lists all defined indexes of user-defined arrays, but
	    does not list the <tt class=literal>length</tt> property of
	    those arrays.
	  

<p>
<li class=listitem>	    It lists the <tt class=literal>length</tt> property and indices
	    of built-in and HTML arrays.
	  

<p>
<li class=listitem>	    It does not list properties of functions, methods, or
	    constructors. 
	  

<p>
<li class=listitem>	    It does not list the constants defined by the
	    <tt class=literal>Math</tt> and <tt class=literal>Number</tt>
	    objects, such as <tt class=literal>Math.PI</tt>. (Since
	    <tt class=literal>Math</tt> and <tt class=literal>Number</tt> are
	    constructor functions, this follows from the above point.)
	  

<p>
<li class=listitem>	    It does not list object properties or methods
	    implicitly defined in an object with the
	    <tt class=literal>var</tt> or <tt class=literal>function</tt>
	    keywords. (In client-side JavaScript, defining a variable
	    with <tt class=literal>var</tt> is the same as defining a
	    property of the same name in the current Window object,
	    except for the different treatment of these two cases by the
	    <tt class=literal>for/in</tt> loop.)  Properties implicitly
	    defined by the <tt class=literal>var</tt> keyword at any time
	    will never again be listed, even if the property is
	    afterwards directly and explicitly set in the object. This
	    last is not true for the <tt class=literal>function</tt>
	    keyword.
	  

<p>
</UL>

    

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch05_05.htm#ch05-SECT1-AUTOID.5"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src="gifs/txthome.gif" alt="Home" border=0></a></td>
<td width=172 align=right valign=top><a href="ch05_07.htm#ch05-SECT1-AUTOID.7"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>for</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td>
<td width=172 align=right valign=top>break</td>
</tr>
</table>

<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
</DIV>

</BODY>
</HTML>
