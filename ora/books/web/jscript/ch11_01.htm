<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 11] Windows and the JavaScript Name Space</TITLE>
<meta name="author" content="David Flanagan">
<meta name="date" content="Wed Apr 23 18:14:40 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="JavaScript">
<meta name="title" content="JavaScript: The Definitive Guide">
<!-- JavaScript: pathcont.js -->
</HEAD>
<body bgcolor="#FFFFFF" text="#000000">

<div class=htmlnav>
<h1><img src="gifs/smbanner.gif" alt="Javascript: The Definitive Guide"></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch10_07.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b>Chapter 11</b></td>
<td width=172 align=right valign=top><a href="ch11_02.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>
<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
<hr align=left width=515>
</DIV>
<h1 class=chapter><a class="TITLE" name="JSCRIPT-CH-NAMESPACE">11. Windows and the JavaScript Name Space</A></H1>

<div class=htmltoc>

<p>
<b>Contents:</b><br>
The Implicit Window Reference<br>
<a href="ch11_02.htm">Multiple Windows and Explicit Window References</A><br>
<a href="ch11_03.htm">Windows and Frames</A><br>
<a href="ch11_04.htm">Window and Frame Names</A><br>
<a href="ch11_05.htm">The JavaScript Name Space</A><br>
<a href="ch11_06.htm">Window and Variable Lifetime</A><br>
<a href="ch11_07.htm">Garbage Collection</A><br>
<a href="ch11_08.htm">The JavaScript Object Hierarchy</A><br>

</DIV>

<p class=para>
<a name="CH10.WIN1"></A>
    The interesting features of client-side JavaScript are those that
    integrate the programming language with the functionality of the
    browser. Since the most notable function of any web browser is its
    ability to display HTML text in a window, the Window object is the
    central, most important object in JavaScript. As we'll see in this
    chapter, the Window object is also the root of the "object
    hierarchy"--that is, all other HTML objects in JavaScript are
    accessed as properties of the Window object, or as properties of
    those properties. JavaScript HTML objects other than the Window
    object will be documented in the chapters that follow this one.
  

<div class=sect1>
<h2 class=sect1><a class="TITLE" name="ch11-SECT1-AUTOID.1">11.1 The Implicit Window Reference</A></h2>

<p class=para>

      In client-side JavaScript, the web browser window is represented
      by a Window object. This object has methods like
      <tt class=literal>alert()</tt> and <tt class=literal>prompt()</tt> that
      pop up dialog boxes to display messages and get input from the
      user. It has properties like <tt class=literal>location</tt> that
      specify the URL of the document currently displayed in the window
      and also allows programs to force the window to load a new
      document. As further examples, the Window object also has a
      <tt class=literal>status</tt> property that controls the message
      displayed in the browser status line, and a
      <tt class=literal>history</tt> property that refers to an object which
      allows programs to move the browser backwards and forwards through
      the user's browsing history.
    

<p class=para>
      While we've named various methods and properties of the Window
      object, we haven't named the Window object itself yet. ("Window"
      is the object's type, of course, not a reference to the actual
      object.)  In fact, the Window object simply does not have a
      name--that is, there is no variable that contains a reference to
      the object that represents the browser window. The Window object
      is so central to client-side JavaScript that every JavaScript
      expression is evaluated in the context of that object. So whenever
      you use properties like <tt class=literal>history</tt> or methods like
      <tt class=literal>alert()</tt>, you implicitly refer to the
      <tt class=literal>history</tt> property of the Window object and the
      <tt class=literal>alert()</tt> method of the Window object. This
      reference to the window is implicit in all JavaScript expressions.
    

<p class=para>
      Having said this much, you may be confused, because you've
      probably seen JavaScript code that uses expressions like this:
      

<div class=programlisting>
<p>
<pre>
window.alert("The URL is: " + window.location);
</PRE>
</DIV>


      This is how it works: the Window object actually has a property
      named <tt class=literal>window</tt> that refers to itself. Thus, the
      expressions above are still implicitly evaluated in the context
      of the Window object. They reference the
      <tt class=literal>window</tt> property, which is simply another
      reference, explicit this time, to the same Window object. Then
      these expressions use this explicit reference to refer to the
      <tt class=literal>alert()</tt> method or <tt class=literal>location</tt>
      property. Therefore, using <tt class=literal>window</tt> in the
      above expression is unnecessary, and the following would work
      just as well.
      

<div class=programlisting>
<p>
<pre>
alert("The URL is: " + location);
</PRE>
</DIV>


    

<p class=para>
      The Window object has another property, <tt class=literal>self</tt>,
      that is a synonym for the <tt class=literal>window</tt> property. In
      some cases, it is useful to use one of these properties to make
      your code clearer or to disambiguate it. Using these properties
      is largely a stylistic matter, however. For example, you might
      find it clearer to rewrite the JavaScript statement above like this:
      

<div class=programlisting>
<p>
<pre>
alert("The URL is: " + self.location);
</PRE>
</DIV>


      There are also a few occasions in which you need an explicit
      reference to the Window object--if you want to pass it as an
      argument to a function, for example. The <tt class=literal>self</tt>
      and <tt class=literal>window</tt> properties are useful in these
      cases.
    

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch10_07.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src="gifs/txthome.gif" alt="Home" border=0></a></td>
<td width=172 align=right valign=top><a href="ch11_02.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Infinite Loops in JavaScript</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td>
<td width=172 align=right valign=top>Multiple Windows and Explicit Window References</td>
</tr>
</table>

<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
</DIV>

</BODY>
</HTML>
