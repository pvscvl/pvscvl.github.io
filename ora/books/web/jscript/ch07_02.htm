<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 7] 7.2 Creating New Objects with Constructors</TITLE>
<meta name="author" content="David Flanagan">
<meta name="date" content="Wed Apr 23 18:08:52 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="JavaScript">
<meta name="title" content="JavaScript: The Definitive Guide">
<!-- JavaScript: pathcont.js -->
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><img src="gifs/smbanner.gif" alt="Javascript: The Definitive Guide"></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch07_01.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b>Chapter 7</b></td>
<td width=172 align=right valign=top><a href="ch07_03.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>
<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="ch07-SECT1-AUTOID.2">7.2 Creating New Objects with Constructors</A></h2>

<p class=para>
      As we saw briefly in <a href="ch04_01.htm">Chapter 4, <i>Expressions and Operators</i></A>, the
      <tt class=literal>new</tt> operator creates a new object. For
      example:
      

<div class=programlisting>
<p>
<pre>
o = new Object();
</PRE>
</DIV>


    

<p class=para>
      This syntax creates an "empty" object, one that has no properties
      defined. There are certain occasions in which you might want to
      start with an empty object of this sort, but in "object-oriented"
      programming, it is more common to work with objects that have a
      predefined set of properties. For example, you might want to
      define one or more objects that represent rectangles. In this
      case, each rectangle object should have a <tt class=literal>width</tt>
      property and a <tt class=literal>height</tt> property.
    

<p class=para>
      To create objects with properties such as <tt class=literal>width</tt>
      and <tt class=literal>height</tt> already defined, we need to write
      a <i class=emphasis>constructor</I> to create and initialize these
      properties in a new object. A constructor is a JavaScript
      function with three special features:
    

<p>
<ul class=itemizedlist>
<li class=listitem>	  It is invoked through the <tt class=literal>new</tt> operator.
	

<p>
<li class=listitem>	  It is passed a reference to a newly created, "empty" object
	  as the value of the special <tt class=literal>this</tt> keyword,
	  and it is responsible for performing appropriate
	  initialization for that new object. 
	

<p>
<li class=listitem>	  It should not return a value; if it uses the
	  <tt class=literal>return</tt> statement, it should do so without
	  a value to be returned.
	

<p>
</UL>
<p class=para>
      <a href="#JSCRIPT-CH-OBJECTS-EX-1">Example 7-1</A> shows how the constructor
      function for a rectangle object might be defined and invoked.
    

<div class=example>
<h4 class=example><a class="TITLE" name="JSCRIPT-CH-OBJECTS-EX-1">Example 7-1: A Rectangle Object Constructor Function</A></h4>

<div class=programlisting>
<p>
<pre>
//<tt class=replaceable><i> define the constructor.</i></tt>
//<tt class=replaceable><i> Note how it initializes the object referred to by "this"</i></tt>
function Rectangle(w, h) 
{
    this.width = w;
    this.height = h;
}
//<tt class=replaceable><i> invoke the constructor to create two rectangle objects</i></tt>
//<tt class=replaceable><i> Notice that we pass the width and height to the constructor, so it</i></tt>
//<tt class=replaceable><i> can initialize each new object appropriately.</i></tt>
rect1 = new Rectangle(2, 4);
rect2 = new Rectangle(8.5, 11);
</PRE>
</DIV>

</DIV>

<p class=para>
      Notice how the constructor performs its initialization on the
      object referred to by the <tt class=literal>this</tt> keyword. A
      constructor will generally perform initialization based on the
      argument values that are passed to it. Some constructors may also
      initialize other properties of a new object (setting them to
      constant values, for example). Keep in mind that a constructor
      function simply initializes the specified object; it does not have
      to return that object.
    

<p class=para>
      Also notice how we define a "class" of objects simply by defining an
      appropriate constructor function--all objects created with
      that constructor will have the same properties. It is
      stylistically important to give constructor functions a name
      that indicates the class of objects they will "construct."  For
      example, creating a rectangle with
      <tt class=literal>new construct_rect(1,2)</tt> is a lot less intuitive
      than <tt class=literal>new Rectangle(1,2)</tt>.
    

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch07-SECT2-AUTOID.4">The constructor Property</A></h3>

<p class=para>
	In Navigator 3.0, but not in Internet Explorer 3.0, all objects
	have a <tt class=literal>constructor</tt> property that refers to
	the constructor function that was used to create the object.
	Since the constructor function determines the "class" of an
	object, the <tt class=literal>constructor</tt> property in a sense
	specifies the "type" of any given object. For example, you
	might use code like the following to determine the type of an
	unknown object:
	

<div class=programlisting>
<p>
<pre>
if ((typeof n == "object") &amp;&amp; (n.constructor == Number))
   //<tt class=replaceable><i> then do something with the Number object...</i></tt>
</PRE>
</DIV>


      

</DIV>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch07_01.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src="gifs/txthome.gif" alt="Home" border=0></a></td>
<td width=172 align=right valign=top><a href="ch07_03.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Object Properties</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td>
<td width=172 align=right valign=top>Methods</td>
</tr>
</table>

<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
</DIV>

</BODY>
</HTML>
