<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 5] 5.9 with</TITLE>
<meta name="author" content="David Flanagan">
<meta name="date" content="Wed Apr 23 18:06:25 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="JavaScript">
<meta name="title" content="JavaScript: The Definitive Guide">
<!-- JavaScript: pathcont.js -->
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><img src="gifs/smbanner.gif" alt="Javascript: The Definitive Guide"></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch05_08.htm#ch05-SECT1-AUTOID.8"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b>Chapter 5</b></td>
<td width=172 align=right valign=top><a href="ch05_10.htm#ch05-SECT1-AUTOID.10"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>
<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="ch05-SECT1-AUTOID.9">5.9 with</A></h2>

<p class=para>
<a name="CH05.WITH1"></A><a name="CH05.WITH2"></A><a name="CH05.WITH3"></A><a name="CH05.WITH4"></A>      JavaScript interfaces with the web browser through an "object
      hierarchy" that contains quite a few arrays nested within objects
      and objects nested within arrays. In order to refer to the
      components that make up a web page, you may find yourself
      referring to objects with cumbersome expressions like the
      following:
      

<div class=programlisting>
<p>
<pre>
frames[1].document.forms[0].address_field.value
</PRE>
</DIV>


    

<p class=para>
      The <tt class=literal>with</tt> statement provides a way to simplify
      expressions like this one, and reduce your typing. It has the
      following syntax:
    

<div class=programlisting>
<p>
<pre>
with (<tt class=replaceable><i>object</i></tt>)
    <tt class=replaceable><i>statement</i></tt>
</PRE>
</DIV>

<p class=para>
      <tt class=replaceable><i>object</i></tt> is an expression that evaluates
      to an object. This specified object becomes the default object
      for all expressions in <tt class=replaceable><i>statement</i></tt>, which
      is a primitive statement or statement block. Any time an
      identifier appears within <tt class=replaceable><i>statement</i></tt>,
      that identifier is looked up as a property of
      <tt class=replaceable><i>object</i></tt> first. If the identifier is
      defined as a property of <tt class=replaceable><i>object</i></tt>, then
      this is the definition used. If the identifier is not defined
      there, then JavaScript looks up its value as it normally would.
    

<p class=para>
      For example, you might use the <tt class=literal>with</tt> statement
      to simplify the following code:
      

<div class=programlisting>
<p>
<pre>
x = Math.sin(i * Math.PI / 20);
y = Math.cos(i * Math.PI / 30);
</PRE>
</DIV>


      Using <tt class=literal>with</tt>, you might write:
      

<div class=programlisting>
<p>
<pre>
with(Math) {
    x = sin(i * PI / 20);
    y = cos(i * PI / 30);
}
</PRE>
</DIV>


    

<p class=para>
      Similarly, instead of calling
      <tt class=literal>document.write()</tt> over and over again in
      a JavaScript program, you could use a
      <tt class=literal>with(document)</tt> statement, and then invoke
      <tt class=literal>write()</tt> over and over again instead.
    

<p class=para>
      You can nest <tt class=literal>with</tt> statements arbitrarily. Note
      that the <tt class=replaceable><i>object</i></tt> expression in a nested
      <tt class=literal>with</tt> statement may itself be interpreted
      depending on the <tt class=replaceable><i>object</i></tt> in a containing
      <tt class=literal>with</tt> statement.
    

<p class=para>
      If the <tt class=replaceable><i>object</i></tt> in a
      <tt class=literal>with</tt> statement contains properties that have the
      same name as top-level variables, the <tt class=literal>with</tt>
      statement effectively hides the top-level variable--when you
      use the name of that variable you now refer to the object's property
      instead. If you need to explicitly refer to a hidden top-level
      variable <tt class=replaceable><i>var</i></tt>, you can usually use this
      syntax:
    

<div class=programlisting>
<p>
<pre>
top.<tt class=replaceable><i>var</i></tt>
</PRE>
</DIV>

<p class=para>
      We'll see why this works when we study the Window object in <a href="ch11_01.htm">Chapter 11, <i>Windows and the JavaScript Name Space</i></A>. Note that this technique will not
      work if <tt class=literal>top</tt> is the name of a property of the
      <tt class=replaceable><i>object</i></tt> in any enclosing
      <tt class=literal>with</tt> statement.
    

<p class=para>
      It is important to understand that the <tt class=literal>with</tt>
      statement only works with properties that already exist in the
      specified <tt class=replaceable><i>object</i></tt>. If you assign a value
      to a variable that does not exist as a property of the specified
      <tt class=replaceable><i>object</i></tt>, then that property is not created
      in the <tt class=replaceable><i>object</i></tt>. Instead, JavaScript
      searches the containing <tt class=literal>with</tt> statements, if
      any, for a property with that name, and then searches for a top-level
      variable with that name. If no such property or variable is found,
      then a new top-level variable is created. The rule to remember is
      that new properties cannot be added to an object if you refer to the
      object implicitly through a <tt class=literal>with</tt> statement. To
      create a new property in the object, you must refer to it explicitly.
    

<p class=para>
      To really understand how the <tt class=literal>with</tt> statement
      works, we need to briefly consider how variables are looked up in
      JavaScript. We'll return to this topic in detail in <a href="ch11_01.htm">Chapter 11, <i>Windows and the JavaScript Name Space</i></A>. Suppose JavaScript needs to look
      up the value of the name <tt class=literal>n</tt>. It proceeds as
      follows: 
      

<p>
<ul class=itemizedlist>
<li class=listitem>	    If <tt class=literal>n</tt> is referred to within a
	    <tt class=literal>with</tt> statement, then it first checks to
	    see if <tt class=literal>n</tt> is a property of the
	    <tt class=replaceable><i>object</i></tt> of that statement. If so,
	    it uses the value of this property.
	  

<p>
<li class=listitem>	    If the first enclosing <tt class=literal>with</tt> statement
	    does not provide a definition for <tt class=literal>n</tt>, then
	    JavaScript checks any other enclosing
	    <tt class=literal>with</tt> statements in order (remember that
	    they can be nested to any depth). If any of objects
	    specified in these statements define a property
	    <tt class=literal>n</tt>, then that definition is used.
	  

<p>
<li class=listitem>	    If the reference to <tt class=literal>n</tt> occurs within a
	    function, and no enclosing <tt class=literal>with</tt>
	    statements yield a definition for it, then JavaScript checks
	    to see if the function has any local variables or arguments
	    named <tt class=literal>n</tt>. If so, it uses this value.
	  

<p>
<li class=listitem>	    Finally, if no definition for <tt class=literal>n</tt> has been
	    found then JavaScript checks to see if there is a top-level
	    variable named <tt class=literal>n</tt>, and uses it if so.
	  

<p>
<li class=listitem>	    If <tt class=literal>n</tt> is not defined in any of these
	    places, then an error occurs.
	  

<p>
</UL>

    

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch05_08.htm#ch05-SECT1-AUTOID.8"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src="gifs/txthome.gif" alt="Home" border=0></a></td>
<td width=172 align=right valign=top><a href="ch05_10.htm#ch05-SECT1-AUTOID.10"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>continue</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td>
<td width=172 align=right valign=top>var</td>
</tr>
</table>

<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
</DIV>

</BODY>
</HTML>
