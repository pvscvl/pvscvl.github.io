<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 19] 19.6 Using JavaScript from Java</TITLE>
<meta name="author" content="David Flanagan">
<meta name="date" content="Wed Apr 23 18:25:02 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="JavaScript">
<meta name="title" content="JavaScript: The Definitive Guide">
<!-- JavaScript: pathcont.js -->
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><img src="gifs/smbanner.gif" alt="Javascript: The Definitive Guide"></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch19_05.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b>Chapter 19</b></td>
<td width=172 align=right valign=top><a href="ch19_07.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>
<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="ch19-SECT1-AUTOID.6">19.6 Using JavaScript from Java</A></h2>

<p class=para>
<a name="CH19.JAVA"></A>      Having explored how to control Java from JavaScript code, we now
      turn to the opposite problem: how to control JavaScript from Java
      code. This control is accomplished primarily through the
      <i class=emphasis>netscape.javascript.JSObject</I> class. Just as a
      JavaObject is a JavaScript wrapper around a Java object, so a
      JSObject is a Java wrapper around a JavaScript object.
    

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch19-SECT2-AUTOID.11">The JSObject Class</A></h3>

<p class=para>
<a name="CH19.JSO"></A>	All Java interactions with JavaScript are performed through a
	single interface--the
	<i class=emphasis>netscape.javascript.JSObject</I> class.  An
	instance of this class is a wrapper around a single JavaScript
	object. The class defines methods that allow you to read and
	write property values and array elements of the JavaScript
	object, and to invoke methods of the object. A synopsis of
	this class appears in the code <a href="#JSCRIPT-CH-LIVECONN-EX-4">Example 19-4</A>.
      

<div class=example>
<h4 class=example><a class="TITLE" name="JSCRIPT-CH-LIVECONN-EX-4">Example 19-4: Synopsis of the netscape.javascript.JSObject Class</A></h4>

<div class=programlisting>
<p>
<pre>
public final class JSObject extends Object {
  //<tt class=replaceable><i> static method to obtain initial JSObject for applet's browser window</i></tt>
  public static JSObject getWindow(java.applet.Applet applet);
  public Object getMember(String name);                 //<tt class=replaceable><i> read object property</i></tt>
  public Object getSlot(int index);                     //<tt class=replaceable><i> read array element</i></tt>
  public void setMember(String name, Object value);     //<tt class=replaceable><i> set object property</i></tt>
  public void setSlot(int index, Object value);         //<tt class=replaceable><i> set array element</i></tt>
  public void removeMember(String name);                //<tt class=replaceable><i> delete property</i></tt>
  public Object call(String methodName, Object args[]); //<tt class=replaceable><i> invoke method</i></tt>
  public Object eval(String s);                         //<tt class=replaceable><i> evaluate string</i></tt>
  public String toString();                             //<tt class=replaceable><i> convert to string</i></tt>
  protected void finalize();
}
</PRE>
</DIV>

</DIV>

<p class=para>
	Because all JavaScript objects appear in a hierarchy rooted at
	the current browser window, JSObjects must also appear in a
	hierarchy. In order for a Java applet to interact with any
	JavaScript objects, it must first obtain a JSObject that
	represents the browser window (or frame) in which the applet
	appears. The JSObject class does not define a constructor
	method, so we cannot simply create an appropriate JSObject.
	Instead, we must call the static <tt class=literal>getWindow()</tt>
	method. When passed a reference to an applet itself, this
	method returns a JSObject that represents the browser window
	that contains that applet. Thus, every applet that interacts
	with JavaScript will include a line that looks something like
	this
	

<div class=programlisting>
<p>
<pre>
JSObject jsroot = JSObject.getWindow(this);  //<tt class=replaceable><i> "this" is the applet itself</i></tt>
</PRE>
</DIV>


      

<p class=para>
	Having obtained a JSObject that refers to the "root" window of
	the JavaScript object hierarchy, you can use instance methods of
	the JSObject to read the values of properties of the JavaScript
	object that it represents. Most of these properties have values
	that are themselves JavaScript objects, and so you can continue
	the process and read their properties as well. The JSObject
	<tt class=literal>getMember()</tt> method returns the value of a
	named property, and the <tt class=literal>getSlot()</tt> method
	returns the value of a numbered array element of the specified
	JavaScript object. You might use these methods as follows:
	

<div class=programlisting>
<p>
<pre>
import netscape.javascript.JSObject;  //<tt class=replaceable><i> this must be at the top of the file</i></tt>
        ...
JSObject jsroot = JSObject.getWindow(this);                  //<tt class=replaceable><i> self</i></tt>
JSObject document = (JSObject) jsroot.getMember("document"); //<tt class=replaceable><i>  .document</i></tt>
JSObject applets = (JSObject) document.getMember("applets"); //<tt class=replaceable><i>    .applets</i></tt>
Applet applet0 = (Applet) applets.getSlot(0);                //<tt class=replaceable><i>      [0]</i></tt>
</PRE>
</DIV>


      

<p class=para>
	Note two things about this code fragment above. First, that
	<tt class=literal>getMember()</tt> and <tt class=literal>getSlot()</tt>
	both return a value of type Object, which generally must be cast
	to some more specific value, such as a JSObject. Second, that
	the value read from "slot" 0 of the <tt class=literal>applets</tt>
	array can be cast to an Applet, rather than a JSObject. This is
	because the elements of the JavaScript
	<tt class=literal>applets[]</tt> array are JavaObject objects that
	represent Java Applet objects. When Java reads a JavaScript
	JavaObject, it "unwraps" that object and returns the Java object
	(in this case an Applet) that it contains. The data conversion
	that occurs through the JSObject interface will be documented
	later in this section.
      

<p class=para>
	The JSObject class also supports methods for setting properties
	and array elements of JavaScript objects.
	<tt class=literal>setMember()</tt> and <tt class=literal>setSlot()</tt>
	are analogous to the <tt class=literal>getMember()</tt> and
	<tt class=literal>getSlot()</tt> methods we've already seen. These
	methods set the value of a named property or a numbered array
	element to a specified value. Note, however, that the value to
	be set must be a Java Object. This means that you can set
	JavaScript properties to values of types such as Applet, String,
	and JSObject, but you cannot set them to
	<tt class=literal>boolean</tt>, <tt class=literal>int</tt>, or
	<tt class=literal>double</tt>. Instead of setting properties or
	array elements to primitive Java values, you must use their
	corresponding Java object types, such as Boolean, Integer, and
	Double. Finally, on a related not, the
	<tt class=literal>removeMember()</tt> method allows you to delete
	the value of a named property from a JavaScript object.
      

<p class=para>
	Besides reading and writing properties and array elements from
	JavaScript objects, the JSObject class also allows you to invoke
	methods of JavaScript objects. The JSObject
	<tt class=literal>call()</tt> method invokes a named method of the
	specified JavaScript object, and passes a specified array of
	Java objects as arguments to that method. As we saw when
	setting JavaScript properties, note that it is not possible to
	pass primitive Java values as arguments to a JavaScript method;
	instead you must use their corresponding Java object types. For
	example, you might use the <tt class=literal>call()</tt> method in
	Java code like the following to open a new browser window:
	

<div class=programlisting>
<p>
<pre>
public JSObject newwin(String url, String window_name)
{
    Object[] args = { url, window_name };
    JSObject win = JSObject.getWindow(this);
    return (JSObject) win.call("open", args);
}
</PRE>
</DIV>


      

<p class=para>
	The JSObject has one more very important method:
	<tt class=literal>eval()</tt>. This Java method of the JSObject
	works just like the JavaScript method of the JavaScript Object
	type--it executes a string that contains JavaScript code.
	You'll find that using <tt class=literal>eval()</tt> is often much
	easier than using the various other methods of the JSObject
	class. One reason is that it can be much simpler to use.
	Another is that since all the code is passed as a string, you
	can use a string representation of the data types you want, and
	do not have to convert Java primitive types to their
	corresponding object types. For example, compare the following
	two lines of code that set properties of the main browser
	window:
	

<div class=programlisting>
<p>
<pre>
jsroot.setMember("i", new Integer(0));
jsroot.eval("self.i = 0");
</PRE>
</DIV>


	The second line is obviously easier to understand. As another
	example, consider the following use of <tt class=literal>eval()</tt>:
	

<div class=programlisting>
<p>
<pre>
JSObject jsroot = JSObject.getWindow(this);
jsroot.eval("parent.frames[1].document.write('Hello from Java!')");
</PRE>
</DIV>


	To do the equivalent without the <tt class=literal>eval()</tt>
	method is a lot harder:
	

<div class=programlisting>
<p>
<pre>
JSObject jsroot = JSObject.getWindow(this);
JSObject parent = (JSObject) jsroot.getMember("parent");
JSObject frames = (JSObject) parent.getMember("frames");
JSObject frame1 = (JSObject) frames.getSlot(1);
JSObject document = (JSObject) frame1.getMember("document");
Object[] args = { "Hello from Java!" };
document.call("write", args);
</PRE>
</DIV>


      

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch19-SECT2-AUTOID.12">Using JSObjects in Applets</A></h3>

<p class=para>
<a name="CH19.APP"></A>	<a href="#JSCRIPT-CH-LIVECONN-EX-5">Example 19-5</A>
	shows the <tt class=literal>init()</tt> method of an applet that
	uses LiveConnect to interact with JavaScript.
      

<div class=example>
<h4 class=example><a class="TITLE" name="JSCRIPT-CH-LIVECONN-EX-5">Example 19-5: Using JavaScript from an Applet Method</A></h4>

<div class=programlisting>
<p>
<pre>
import netscape.javascript.*
public void init()
{
    //<tt class=replaceable><i> get the JSObject representing the applet's browser window.</i></tt>
    JSObject win = JSObject.getWindow(this);
    //<tt class=replaceable><i> Run JavaScript with eval(). Careful with those nested quotes!</i></tt>
    win.eval("alert('The CPUHog applet is now running on your computer. " +
             "You may find that your system slows down a bit.');");
}
</PRE>
</DIV>

</DIV>

<p class=para>
	In order to use any applet you must compile it and then embed it
	in an HTML file. When the applet interacts with JavaScript,
	special instructions are required for both of these steps.
      

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="ch19-SECT3-AUTOID.1">Compiling applets that use the JSObject class</A></h4>

<p class=para>
	  Any applet that interacts with JavaScript uses the
	  <i class=emphasis>netscape.javascript.JSObject</I> class. In
	  order to compile these applets, therefore, your Java compiler
	  must know where to find a definition of this class. Because
	  the class is defined and shipped by Netscape and not by Sun,
	  the <i class=emphasis>javac</I> compiler from Sun does not know
	  about it. This section explains how to enable your compiler
	  to find this required class. If you are not using the JDK
	  from Sun, then you may have to do something a little
	  different--see the documentation from the vendor of your Java
	  compiler or Java development environment.
	

<p class=para>
	  The basic approach to tell the JDK compiler where to find
	  classes is to set the CLASSPATH environment variable. This
	  environment variable specifies a list of directories and zip
	  files that the compiler should search for class definitions
	  (in addition to its standard directory of system classes).
	  Navigator 3.0 stores its class definitions in a file named
	  <tt class=literal>java_30</tt>. The exact location of this file
	  depends on what platform you use and also on how and where you
	  installed the browser files. On a Unix system, the full path
	  to this file will depend on where you installed Navigator, but
	  will typically be something like:
	  

<div class=programlisting>
<p>
<pre>
/usr/local/lib/netscape/java_30
</PRE>
</DIV>


	  On a Windows 95 system, the path will also depend on where you
	  chose to install Navigator, but it will usually be something
	  like:
	  

<div class=programlisting>
<p>
<pre>
C:\ProgramFiles\Netscape\Navigator\Program\Java\Classes\Java_30
</PRE>
</DIV>


	  You may have to search a bit to locate this file on your
	  system.
	

<p class=para>
	  The <tt class=literal>java_30</tt> file, wherever it is located,
	  is an uncompressed zip file of all the Java classes Navigator
	  needs. The <i class=emphasis>javac</I> compiler can extract
	  classes from zip files, and so you can tell the compiler where
	  to find the <i class=emphasis>netscape.javascript.JSObject</I>
	  class with lines like the following. For Unix systems:
	  

<div class=programlisting>
<p>
<pre>
setenv CLASSPATH .:/usr/local/lib/netscape/java_30
</PRE>
</DIV>


	  And for Windows 95 systems:
	  

<div class=programlisting>
<p>
<pre>
set CLASSPATH=.;C:\Program Files\Netscape\Navigator\Program\Java\Classes\Java_30
</PRE>
</DIV>


	

<p class=para>
	  If this does not work for you, you may need to extract the
	  <tt class=literal>netscape/</tt> directory from the
	  <tt class=literal>java_30</tt> zip file, and install this
	  directory somewhere like
	  <tt class=literal>/usr/local/lib/netscape_classes</tt>. Then, you
	  can include this unzipped directory in your CLASSPATH
	  environment variable.
	

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="ch19-SECT3-AUTOID.2">The MAYSCRIPT attribute</A></h4>

<p class=para>
	  There is one further requirement before you can run an applet
	  that interacts with JavaScript. As a security precaution,
	  applets are not allowed to use JavaScript unless the web page
	  author (who may be different than the applet author)
	  explicitly gives the applet permission to do so. To give this
	  permission, you must include the new
	  <tt class=literal>MAYSCRIPT</tt> attribute in an applet's
	  <tt class=literal>&lt;APPLET&gt;</tt> tag in the HTML file.
	

<p class=para>
	  <a href="#JSCRIPT-CH-LIVECONN-EX-5">Example 19-5</A> showed a fragment of
	  an applet that used JavaScript to display an alert dialog
	  box. Once you have successfully compiled this applet, you
	  might include it in an HTML file with HTML code like the following:
	  

<div class=programlisting>
<p>
<pre>
&lt;APPLET code="CPUHog.class" width=300 height=300 MAYSCRIPT&gt;&lt;/APPLET&gt;
</PRE>
</DIV>


	  If you do not remember to include the
	  <tt class=literal>MAYSCRIPT</tt> tag, the applet will not be
	  allowed to interact with JavaScript.
	

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="ch19-SECT3-AUTOID.3">A complete example</A></h4>

<p class=para>
	  <a href="#JSCRIPT-CH-LIVECONN-EX-6">Example 19-6</A> shows a complete
	  example of a Java class that uses LiveConnect and the JSObject
	  class to communicate with JavaScript. The class is a subclass
	  of <i class=emphasis>java.io.OutputStream</I>, and is used to
	  allow a Java applet to write HTML text into a newly created
	  web browser window. An applet might want to do this because
	  it provides a way to display formatted text, which is
	  difficult to do with Java itself. Another important reason
	  that an applet might want to display its output in a browser
	  window is that this gives the user the ability to print the
	  output or save it to a file, which are capabilities that
	  applets themselves do not have.
	

<div class=example>
<h4 class=example><a class="TITLE" name="JSCRIPT-CH-LIVECONN-EX-6">Example 19-6: An OutputStream for Displaying HTML in a Browser Window</A></h4>

<div class=programlisting>
<p>
<pre>
import netscape.javascript.JSObject;    //<tt class=replaceable><i> these are the classes we'll use</i></tt>
import java.applet.Applet;
import java.io.OutputStream;
//<tt class=replaceable><i> an output stream that sends HTML text to a newly created web browser window</i></tt>
public class HTMLOutputStream extends OutputStream
{
    JSObject main_window;        //<tt class=replaceable><i> the initial browser window</i></tt>
    JSObject window;             //<tt class=replaceable><i> the new window we create</i></tt>
    JSObject document;           //<tt class=replaceable><i> the document of that new window</i></tt>
    static int window_num = 0;   //<tt class=replaceable><i> used to give each new window a unique name</i></tt>
    //<tt class=replaceable><i> To create a new HTMLOutputStream, you must specify the applet that</i></tt>
    //<tt class=replaceable><i> will use it (this specifies a browser window) and the desired size</i></tt>
    //<tt class=replaceable><i> for the new window.</i></tt>
    public HTMLOutputStream(Applet applet, int width, int height)
    {
        //<tt class=replaceable><i> get main browser window from the applet with JSObject.getWindow()</i></tt>
        main_window = JSObject.getWindow(applet);
        //<tt class=replaceable><i> use JSObject.eval() to create a new window</i></tt>
        window = (JSObject)
            main_window.eval("self.open(''," +
                             "'HTMLOutputStream" + window_num++ + "'," +
                             "'menubar,status,resizable,scrollbars," +
                             "width=" + width + ",height=" + height + "')");
        //<tt class=replaceable><i> use JSObject.getMember() to get the document of this new window</i></tt>
        document = (JSObject) window.getMember("document");
        //<tt class=replaceable><i> Then use JSObject.call() to open this document.</i></tt>
        document.call("open", null);
    }
    //<tt class=replaceable><i> This is the write() method required for all OutputStream subclasses.</i></tt>
    public void write(byte[] chars, int offset, int length)
    {
        //<tt class=replaceable><i> create a string from the specified bytes</i></tt>
        String s = new String(chars, 0, offset, length);
        //<tt class=replaceable><i> store the string in an array for use with JSObject.call()</i></tt>
        Object[] args = { s };
        //<tt class=replaceable><i> check to see if the window has been closed</i></tt>
        boolean closed = ((Boolean)window.getMember("closed")).booleanValue();
        //<tt class=replaceable><i> if not, use JSObject.call() to invoke document.write()</i></tt>
        if (!closed) document.call("write", args);
    }
    //<tt class=replaceable><i> Here are two variants on the above method, also required.</i></tt>
    public void write(byte[] chars) { write(chars, 0, chars.length); }
    public void write(int c) { byte[] chars = {(byte)c}; write(chars, 0, 1); }
    //<tt class=replaceable><i> When the stream is closed, use JSObject.call() to call Document.close</i></tt>
    public void close() { document.call("close", null); }
    //<tt class=replaceable><i> This method is unique to HTMLOutputStream. If the new window is</i></tt>
    //<tt class=replaceable><i> still open, use JSObject.call() to invoke Window.close() to close it.</i></tt>
    public void close_window()
    {
        boolean closed = ((Boolean)window.getMember("closed")).booleanValue();
        if (!closed) window.call("close", null);
    }
}
</PRE>
</DIV>

</DIV>

</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch19-SECT2-AUTOID.13">Data Conversion</A></h3>

<p class=para>
<a name="CH19.DATA2"></A><a name="CH19.DATA4"></A>	At the beginning of this chapter we described the rules by which
	value are converted when JavaScript reads and writes Java fields
	and invokes Java methods. Those rules explained how the
	JavaScript JavaObject, JavaArray, JavaClass, and JavaMethod
	objects convert data, and they apply only to the case of
	JavaScript manipulating Java. When Java manipulates JavaScript,
	the conversion is performed by the Java JSObject, and the
	conversion rules are different.
	<a href="#JSCRIPT-CH-LIVECONN-FIG-6">Figure 19-5</A> and
	<a href="#JSCRIPT-CH-LIVECONN-FIG-7">Figure 19-6</A> illustrate this
	conversion.
      

<div class=figure>
<h4 class=figure><a class="TITLE" name="JSCRIPT-CH-LIVECONN-FIG-6">Figure 19-5: Data conversions performed when Java writes JavaScript values</A></h4>


<p>
<img align=middle src="figs/js1906.gif" alt="[Graphic: Figure 19-5]" width=503 height=332>

</DIV>

<div class=figure>
<h4 class=figure><a class="TITLE" name="JSCRIPT-CH-LIVECONN-FIG-7">Figure 19-6: Data conversions performed when Java reads JavaScript values</A></h4>


<p>
<img align=middle src="figs/js1907.gif" alt="[Graphic: Figure 19-6]" width=503 height=332>

</DIV>

<p class=para>
	The point to remember when studying these figures is that Java
	can only interact with JavaScript through the API provided by
	the JSObject class. This class allows only Java objects, not
	primitive values, to be written to JavaScript, and allows only
	Java objects to read from JavaScript. When writing JavaScript
	functions that will be invoked from Java, bear in mind that
	the arguments passed by Java will either be JavaScript objects
	from unwrapped Java JSObjects, or they will be JavaObjects. As
	we saw earlier in this chapter, JavaObjects behave somewhat
	differently than other types. For example, an instance of
	<i class=emphasis>java.lang.Double</I> behaves differently than
	a primitive JavaScript number or even a JavaScript Number
	object. The same caution applies when you are working with
	JavaScript properties that will have their values set by Java.
      

<p class=para>
	Keep in mind that one way to avoid the whole issue of data
	conversion is to use the <tt class=literal>eval()</tt> method of
	the JSObject class whenever your Java code wants to
	communicate with JavaScript. In order to do this, your Java
	code must convert all method arguments or property values to
	string form. Then the string to be evaluated can be passed
	unchanged to JavaScript, which can convert the string form of
	the data to the appropriate JavaScript data types.
      

</DIV>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch19_05.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src="gifs/txthome.gif" alt="Home" border=0></a></td>
<td width=172 align=right valign=top><a href="ch19_07.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Scripting Java with JavaScript</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td>
<td width=172 align=right valign=top>Working with Java in Internet Explorer</td>
</tr>
</table>

<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
</DIV>

</BODY>
</HTML>
