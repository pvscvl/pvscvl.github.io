<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 1] 1.5 An Example: Calculating Your Taxes with JavaScript</TITLE>
<meta name="author" content="David Flanagan">
<meta name="date" content="Wed Apr 23 18:00:25 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="JavaScript">
<meta name="title" content="JavaScript: The Definitive Guide">
<!-- JavaScript: pathcont.js -->
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><img src="gifs/smbanner.gif" alt="Javascript: The Definitive Guide"></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch01_04.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b>Chapter 1</b></td>
<td width=172 align=right valign=top><a href="ch01_06.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>
<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="ch01-SECT1-AUTOID.5">1.5 An Example: Calculating Your Taxes with JavaScript</A></h2>

<p class=para>
      <a href="#JSCRIPT-CH-INTRO-EX-3">Example 1-3</A> is a listing of a complete,
      non-trivial JavaScript program. The program calculates the
      estimated U.S. federal income tax you will have to pay for
      1996.[5]
      The program is displayed in <a href="#JSCRIPT-CH-INTRO-FIG-3">Figure 1-3</A>. As you can see, it consists of
      an HTML form displayed within an HTML table. To use it, you enter
      your filing status, adjusted gross income, and a couple of other
      pieces of data. Every time you enter data into the form,
      JavaScript recomputes all the fields and displays your estimated
      tax at the bottom.
    

<blockquote class=footnote>
<p class=para>[5] 
	  If you are not a U.S. resident, you won't have to pay, but you
	  should study this example anyway!
	
</blockquote>
<div class=figure>
<h4 class=figure><a class="TITLE" name="JSCRIPT-CH-INTRO-FIG-3">Figure 1-3: A JavaScript tax estimator</A></h4>


<p>
<img align=middle src="figs/js0103.gif" alt="[Graphic: Figure 1-3]" width=307 height=157>

</DIV>

<p class=para>
      This example is a fairly complex one, but is worth taking the time
      to look over. You shouldn't expect to understand all the
      JavaScript code at this point, but studying the program will give
      you a good idea of what JavaScript programs look like, how event
      handlers work, and how JavaScript code can be integrated with HTML
      forms.
    

<p class=para>
      The beginning of the program defines "constructor functions" for
      two data types we'll use in the tax calculation. These new
      datatypes are <tt class=literal>TaxBracket</tt> and
      <tt class=literal>TaxSchedule</tt>.  The next portion of the program
      creates and initializes an array of four
      <tt class=literal>TaxSchedule</tt> objects, each of which contains
      five <tt class=literal>TaxBracket</tt> objects. This is the data
      that the program will use to compute income tax.
    

<p class=para>
      Next comes the definition of a function named
      <tt class=literal>compute()</tt>. This is the function that computes
      the estimated tax you'll have to pay. It doesn't just perform the
      computation, however. It also reads the user's input from the
      form, and stores the result of the tax computation, along with
      intermediate results in the computation back into the form. The
      variable <tt class=literal>f</tt> in this function refers to the HTML
      form, and the various elements of the form are accessed by name.
      Thus, you'll see expressions like
      <tt class=literal>f.income.value</tt> to refer to the string that the
      user entered in the income field. The names for these fields will
      be assigned when the form is itself defined. Note that this
      <tt class=literal>compute()</tt> function both reads and writes the
      value of expressions like <tt class=literal>f.income.value</tt> and
      <tt class=literal>f.standard.checked</tt>--querying and setting the
      values displayed in the form. If you follow the comments, and
      refer occasionally to the reference section (Part III of this
      book), you may be able to follow the logic behind the tax
      computation.
    

<p class=para>
      After the definition of the <tt class=literal>compute()</tt> function,
      we reach the end of the JavaScript
      <tt class=literal>&lt;SCRIPT&gt;</tt>. The rest of the file consists
      of HTML, but this does not mean that JavaScript is not involved.
      After some brief instructions to the user, the HTML begins to
      define the form displayed by the program. The form is contained
      within an HTML table which makes things somewhat harder to figure
      out. Note, though, that every input element defined in the form
      has a <tt class=literal>NAME</tt> attribute, so that JavaScript can
      refer to it by name. And note that every input element has an
      event handler defined. These event handlers all call the
      <tt class=literal>compute()</tt> function defined earlier in the
      program. This means that whenever the user enters a value, all
      values in the form will be recomputed and redisplayed.
    

<div class=example>
<h4 class=example><a class="TITLE" name="JSCRIPT-CH-INTRO-EX-3">Example 1-3: Estimating Your Taxes with JavaScript</A></h4>

<div class=programlisting>
<p>
<pre>
&lt;HEAD&gt;
&lt;TITLE&gt;1996 U.S. Federal Income Tax Estimator&lt;/TITLE&gt;
&lt;SCRIPT&gt;
//<tt class=replaceable><i> These functions define the data structures we'll use to store</i></tt>
//<tt class=replaceable><i> tax bracket and tax schedule data for computing taxes.</i></tt>
function TaxBracket(cutoff, percentage, base)
{
    this.cutoff = cutoff;          //<tt class=replaceable><i> how much money to be in this bracket</i></tt>
    this.percentage = percentage;  //<tt class=replaceable><i> what the tax is in this bracket</i></tt>
    this.base = base;              //<tt class=replaceable><i> combined tax from all lower brackets</i></tt>
}
function TaxSchedule(b0, b1, b2, b3, b4) 
{   //<tt class=replaceable><i> A tax schedule is just 5 brackets</i></tt>
    this[0] = b0; this[1] = b1; this[2] = b2; this[3] = b3; this[4] = b4;
}
//<tt class=replaceable><i> Taxes are computed using a tax schedule that depends on your filing status, </i></tt>
//<tt class=replaceable><i> so we create an array and store four different schedules in it.</i></tt>
var Schedules = new Object();  //<tt class=replaceable><i> create the array.</i></tt>
//<tt class=replaceable><i> Schedule X: Single</i></tt>
Schedules[0] =  new TaxSchedule(new TaxBracket(263750, .396, 84020.5),
    new TaxBracket(121300, .36, 32738.5), new TaxBracket(58150, .31, 13162),
    new TaxBracket(24000, .28, 3600), new TaxBracket(0, .15, 0));
//<tt class=replaceable><i> Schedule Z: Head of Household</i></tt>
Schedules[1] = new TaxSchedule(new TaxBracket(263750, .396, 81554),
    new TaxBracket(134500, .36, 35024), new TaxBracket(83050, .31, 19074.5),
    new TaxBracket(32150, .28, 4822.5), new TaxBracket(0, .15, 0));
//<tt class=replaceable><i> Schedule Y1: Married,  Filing Jointly</i></tt>
Schedules[2] = new TaxSchedule(new TaxBracket(263750, .396, 79445),
    new TaxBracket(147700, .36, 37667), new TaxBracket(96900, .31, 21919),
    new TaxBracket(40100, .28, 6015), new TaxBracket(0, .15, 0));
//<tt class=replaceable><i> Schedule Y2: Married, Filing Separately</i></tt>
Schedules[3] = new TaxSchedule(new TaxBracket(131875, .396, 39722.5),
    new TaxBracket(73850, .36, 18833.5), new TaxBracket(48450, .31, 10959.5),
    new TaxBracket(20050, .28, 3007.5),  new TaxBracket(0, .15, 0));
//<tt class=replaceable><i> The standard deduction allowed by tax law depends on filing status, </i></tt>
//<tt class=replaceable><i> so we've got to store this data in an array as well.</i></tt>
var StandardDeductions = new Object();
StandardDeductions[0] = 4000; StandardDeductions[1] = 5900; 
StandardDeductions[2] = 6700; StandardDeductions[3] = 3350;
//<tt class=replaceable><i> This function computes the tax and updates all the elements in the form. </i></tt>
//<tt class=replaceable><i> It is triggered whenever anything changes, and makes sure that</i></tt>
//<tt class=replaceable><i> all elements of the form contain legal values and are consistent.</i></tt>
function compute()
{
    var f = document.taxcalc;  //<tt class=replaceable><i> This is the form we'll we working with.</i></tt>
    //<tt class=replaceable><i> get the filing status</i></tt>
    var status = f.status.selectedIndex;
    //<tt class=replaceable><i> line 1, adjusted gross income</i></tt>
    var income = parseFloat(f.income.value);
    if (isNaN(income)) { income = 0; f.income.value = "0"; }
    f.income.value = Math.round(income);
    
    //<tt class=replaceable><i> line 2, the standard or itemized deduction</i></tt>
    var deduction;
    if (f.standard.checked)
        deduction = StandardDeductions[status];
    else {
        deduction = parseFloat(f.deduction.value);
        if (isNaN(deduction)) deduction = 0;
        if (deduction &lt; StandardDeductions[status]) {
            deduction = StandardDeductions[status];
            f.standard.checked = true;
        }
    }
    f.deduction.value = Math.round(deduction);
    //<tt class=replaceable><i> Line 3: Subtract line 2 from line 1</i></tt>
    var line3 = income - deduction;
    if (line3 &lt; 0) line3 = 0;
    f.line3.value = line3;
    //<tt class=replaceable><i> Line 4: exemptions</i></tt>
    var num_exemptions = parseInt(f.num_exemptions.value);
    if (isNaN(num_exemptions)) num_exemptions = 1;
    f.num_exemptions.value = num_exemptions;
    var exemption = num_exemptions * 2550;
    f.exemption.value = exemption;
    //<tt class=replaceable><i> Line 5: subtract Line 4 from Line 3.</i></tt>
    var line5 = line3 - exemption;
    if (line5 &lt; 0) line5 = 0;
    f.line5.value = line5;
    //<tt class=replaceable><i> Line 6: tax from schedules.</i></tt>
    //<tt class=replaceable><i> determine which tax schedule to use, based on filing status</i></tt>
    var schedule = Schedules[status];
    //<tt class=replaceable><i> determine which tax bracket to use within that schedule</i></tt>
    for(var i = 0; i &lt; 5; i++) if (line5 &gt;= schedule[i].cutoff) break;
    var bracket = schedule[i];
    //<tt class=replaceable><i> then compute the tax based on that bracket</i></tt>
    var tax = (line5 - bracket.cutoff) * bracket.percentage + bracket.base;
    f.tax.value = Math.round(tax);
}
&lt;/SCRIPT&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;H1&gt;1996 U.S. Federal Income Tax Estimator&lt;/H1&gt;
To compute your 1996 U.S. Federal Income Tax, follow the steps in the
table below. You only need to enter the data in the boldface fields.
JavaScript will perform all the necessary computations for you.
&lt;P&gt;
&lt;I&gt;This program is an example only. Computing your actual income tax is
almost always more complicated than this!&lt;/I&gt;
&lt;!--<tt class=replaceable><i> 
  -- The code below is an HTML table inside of an HTML form. It gets tricky!
  -- Notice the event handlers on all the form input elements.
  </i></tt>--&gt;
&lt;FORM NAME="taxcalc"&gt;
  &lt;TABLE BORDER CELLPADDING=3&gt;
    &lt;TR&gt;                                        &lt;!--<tt class=replaceable><i> Filing status </i></tt>--&gt;
      &lt;TD&gt;&amp;nbsp;&lt;/TD&gt;
      &lt;TD COLSPAN=3 BGCOLOR="d0d0d0"&gt;
        &lt;B&gt;Select your filing status:&lt;/B&gt;
        &lt;SELECT NAME="status" onChange="compute()"&gt;
          &lt;OPTION VALUE=0 SELECTED&gt;Single
          &lt;OPTION VALUE=1&gt;Head of Household
          &lt;OPTION VALUE=2&gt;Married, Filing Jointly
          &lt;OPTION VALUE=3&gt;Married, Filing Separately
        &lt;/SELECT&gt;
      &lt;TD&gt;&lt;/TR&gt;
    &lt;TR&gt;                                        &lt;!--<tt class=replaceable><i> Line 1: Income </i></tt>--&gt;
      &lt;TD&gt;1.&lt;/TD&gt;
      &lt;TD BGCOLOR="d0d0d0"&gt;&lt;B&gt;Enter your Adjusted Gross Income&lt;/B&gt;&lt;/TD&gt;
      &lt;TD BGCOLOR="d0d0d0"&gt;
        &lt;INPUT TYPE=text NAME="income" SIZE=12 onChange="compute()"&gt;
      &lt;/TD&gt;&lt;/TR&gt;
    &lt;TR&gt;                                        &lt;!--<tt class=replaceable><i> Line 2: Deduction </i></tt>--&gt;
      &lt;TD&gt;2.&lt;/TD&gt;
      &lt;TD BGCOLOR="d0d0d0"&gt;
        &lt;B&gt;Check here 
        &lt;INPUT TYPE=checkbox NAME="standard" CHECKED onClick="compute()"&gt;
        for the standard deduction,&lt;BR&gt;or enter your Itemized Deduction&lt;/B&gt;
      &lt;/TD&gt;
      &lt;TD BGCOLOR="d0d0d0"&gt;
        &lt;INPUT TYPE=text NAME="deduction" SIZE=12 
               onChange="this.form.standard.checked = false; compute()"&gt;
      &lt;/TD&gt;&lt;/TR&gt;
    &lt;TR&gt;                                        &lt;!--<tt class=replaceable><i> Line 3: subtraction </i></tt>--&gt;
      &lt;TD&gt;3.&lt;/TD&gt;
      &lt;TD&gt;Subtract Line 2 from Line 1:&lt;/TD&gt;
      &lt;TD&gt;&lt;INPUT TYPE=text NAME="line3" SIZE=12 onChange="compute()"&gt;&lt;/TD&gt;&lt;/TR&gt;
    &lt;TR&gt;                                        &lt;!--<tt class=replaceable><i> Line 4: Exemption </i></tt>--&gt;
      &lt;TD ROWSPAN=2&gt;4.&lt;/TD&gt;
      &lt;TD BGCOLOR="d0d0d0"&gt;
        &lt;B&gt;Enter your number of exemptions: &lt;/B&gt;
        &lt;INPUT TYPE=text NAME="num_exemptions" SIZE=2 onChange="compute()"&gt;
      &lt;/TD&gt;&lt;TD&gt;&lt;/TD&gt;&lt;/TR&gt;
    &lt;TR&gt;                                        &lt;!--<tt class=replaceable><i> Line 4, continued </i></tt>--&gt;
      &lt;TD&gt;Multiply number of exemptions by $2,550.&lt;/TD&gt;
      &lt;TD&gt;&lt;INPUT TYPE=text NAME="exemption" SIZE=12 onChange="compute()"&gt;&lt;/TD&gt;
    &lt;/TR&gt;
    &lt;TR&gt;                                        &lt;!--<tt class=replaceable><i> Line 5: subtraction </i></tt>--&gt;
      &lt;TD&gt;5.&lt;/TD&gt;
      &lt;TD&gt;Subtract Line 4 from Line 3.&lt;/TD&gt;
      &lt;TD&gt;&lt;INPUT TYPE=text NAME="line5" SIZE=12 onChange="compute()"&gt;&lt;/TD&gt;&lt;/TR&gt;
    &lt;TR&gt;                                        &lt;!--<tt class=replaceable><i> Line 6: Tax </i></tt>--&gt;
      &lt;TD&gt;6.&lt;/TD&gt;
      &lt;TD&gt;This is your tax, from 1996 tax rate schedules&lt;/TD&gt;
      &lt;TD&gt;&lt;INPUT TYPE=text NAME="tax" SIZE=12 onChange="compute()"&gt;&lt;/TD&gt;&lt;/TR&gt;
  &lt;/TABLE&gt;
&lt;FORM&gt;
&lt;/BODY&gt;
</PRE>
</DIV>

</DIV>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch01_04.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src="gifs/txthome.gif" alt="Home" border=0></a></td>
<td width=172 align=right valign=top><a href="ch01_06.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>What JavaScript Can't Do</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td>
<td width=172 align=right valign=top>Flavors and Versions of JavaScript</td>
</tr>
</table>

<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
</DIV>

</BODY>
</HTML>
