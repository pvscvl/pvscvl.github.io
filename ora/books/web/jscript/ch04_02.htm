<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 4] 4.2 Operator Overview</TITLE>
<meta name="author" content="David Flanagan">
<meta name="date" content="Wed Apr 23 18:04:43 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="JavaScript">
<meta name="title" content="JavaScript: The Definitive Guide">
<!-- JavaScript: pathcont.js -->
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><img src="gifs/smbanner.gif" alt="Javascript: The Definitive Guide"></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch04_01.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b>Chapter 4</b></td>
<td width=172 align=right valign=top><a href="ch04_03.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>
<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="ch04-SECT1-AUTOID.2">4.2 Operator Overview</A></h2>

<p class=para>
<a name="CH04.OP1"></A>      If you are a C, C++, or Java programmer, then the JavaScript
      operators will almost all be already familiar to you.
      <a href="#JSCRIPT-CH-OPERATORS-TAB-1">Table 4.1</A>
      summarizes the operators, and you can refer to this table for
      reference. In the table, the column labeled <b>P</b> gives the operator precedence, and the
      column labeled <b>A</b> gives the operator
      associativity, which can be L (left-to-right) or R
      (right-to-left).
    

<p class=para>
      If you do not already know C, C++, or Java, the sections that
      follow the table explain how to interpret the table and explain
      what each of the operators does.
    

<p>
<div class=table>
<table>
<caption><a class="TITLE" name="JSCRIPT-CH-OPERATORS-TAB-1">Table 4-1: JavaScript Operators</A></CAPTION>
<tr class=row>
<th align="left">P</TH>
<th align="left">A</TH>
<th align="left">Operator</TH>
<th align="left">Operand Type(s)</TH>
<th align="LEFT">Operation Performed</TH>
</TR>
<tr class=row>
<td align="left">0</TD>
<td align="left">L</TD>
<td align="left"><tt class=literal>.</tt></TD>
<td align="left">object, property</TD>
<td align="LEFT">property access</TD>
</TR>
<tr class=row>
<td align="left">&nbsp;</TD>
<td align="left">L</TD>
<td align="left"><tt class=literal>[]</tt></TD>
<td align="left">array, integer</TD>
<td align="LEFT">array index</TD>
</TR>
<tr class=row>
<td align="left">&nbsp;</TD>
<td align="left">L</TD>
<td align="left"><tt class=literal>()</tt></TD>
<td align="left">function, args</TD>
<td align="LEFT">function call</TD>
</TR>
<tr class=row>
<td align="left">1</TD>
<td align="left">R</TD>
<td align="left"><tt class=literal>++</tt></TD>
<td align="left">number</TD>
<td align="LEFT">

<p class=para>
pre-or-post increment (unary)</TD>
</TR>
<tr class=row>
<td align="left">&nbsp;</TD>
<td align="left">R</TD>
<td align="left"><tt class=literal>--</tt></TD>
<td align="left">number</TD>
<td align="LEFT">

<p class=para>
pre-or-post decrement (unary)</TD>
</TR>
<tr class=row>
<td align="left">&nbsp;</TD>
<td align="left">R</TD>
<td align="left"><tt class=literal>-</tt></TD>
<td align="left">number</TD>
<td align="LEFT">

<p class=para>
unary minus (negation)</TD>
</TR>
<tr class=row>
<td align="left">&nbsp;</TD>
<td align="left">R</TD>
<td align="left"><tt class=literal>~</tt></TD>
<td align="left">integer</TD>
<td align="LEFT">

<p class=para>
bitwise complement (unary)</TD>
</TR>
<tr class=row>
<td align="left">&nbsp;</TD>
<td align="left">R</TD>
<td align="left"><tt class=literal>!</tt></TD>
<td align="left">Boolean</TD>
<td align="LEFT">

<p class=para>
logical complement (unary)</TD>
</TR>
<tr class=row>
<td align="left">&nbsp;</TD>
<td align="left">R</TD>
<td align="left"><tt class=literal>typeof</tt></TD>
<td align="left">any</TD>
<td align="LEFT">return data type (unary)</TD>
</TR>
<tr class=row>
<td align="left">&nbsp;</TD>
<td align="left">R</TD>
<td align="left"><tt class=literal>new</tt></TD>
<td align="left">constructor call</TD>
<td align="LEFT">create new object (unary)</TD>
</TR>
<tr class=row>
<td align="left">&nbsp;</TD>
<td align="left">R</TD>
<td align="left"><tt class=literal>void</tt></TD>
<td align="left">any</TD>
<td align="LEFT">return undefined value (unary)</TD>
</TR>
<tr class=row>
<td align="left">2</TD>
<td align="left">L</TD>
<td align="left"><tt class=literal>*, /, %</tt></TD>
<td align="left">numbers</TD>
<td align="LEFT">

<p class=para>
multiplication, division, remainder</TD>
</TR>
<tr class=row>
<td align="left">3</TD>
<td align="left">L</TD>
<td align="left"><tt class=literal>+, -</tt></TD>
<td align="left">numbers</TD>
<td align="LEFT">addition, subtraction</TD>
</TR>
<tr class=row>
<td align="left">&nbsp;</TD>
<td align="left">L</TD>
<td align="left"><tt class=literal>+</tt></TD>
<td align="left">strings</TD>
<td align="LEFT">string concatenation</TD>
</TR>
<tr class=row>
<td align="left">4</TD>
<td align="left">L</TD>
<td align="left"><tt class=literal>&lt;&lt;</tt></TD>
<td align="left">integers</TD>
<td align="LEFT">left shift</TD>
</TR>
<tr class=row>
<td align="left">&nbsp;</TD>
<td align="left">L</TD>
<td align="left"><tt class=literal>&gt;&gt;</tt></TD>
<td align="left">integers</TD>
<td align="LEFT">

<p class=para>
right shift with sign-extension</TD>
</TR>
<tr class=row>
<td align="left">&nbsp;</TD>
<td align="left">L</TD>
<td align="left"><tt class=literal>&gt;&gt;&gt;</tt></TD>
<td align="left">integers</TD>
<td align="LEFT">

<p class=para>
right shift with zero extension</TD>
</TR>
<tr class=row>
<td align="left">5</TD>
<td align="left">L</TD>
<td align="left"><tt class=literal>&lt;, &lt;=</tt></TD>
<td align="left">numbers or strings</TD>
<td align="LEFT">

<p class=para>
less than, less than or equal</TD>
</TR>
<tr class=row>
<td align="left">&nbsp;</TD>
<td align="left">L</TD>
<td align="left"><tt class=literal>&gt;, &gt;=</tt></TD>
<td align="left">numbers or strings</TD>
<td align="LEFT">

<p class=para>
greater than, greater than or equal</TD>
</TR>
<tr class=row>
<td align="left">6</TD>
<td align="left">L</TD>
<td align="left"><tt class=literal>==</tt></TD>
<td align="left">primitive types</TD>
<td align="LEFT">

<p class=para>
equal (have identical values)</TD>
</TR>
<tr class=row>
<td align="left">&nbsp;</TD>
<td align="left">L</TD>
<td align="left"><tt class=literal>!=</tt></TD>
<td align="left">primitive types</TD>
<td align="LEFT">

<p class=para>
not equal (have different values)</TD>
</TR>
<tr class=row>
<td align="left">&nbsp;</TD>
<td align="left">L</TD>
<td align="left"><tt class=literal>==</tt></TD>
<td align="left">reference types</TD>
<td align="LEFT">

<p class=para>
equal (refer to same object)</TD>
</TR>
<tr class=row>
<td align="left">&nbsp;</TD>
<td align="left">L</TD>
<td align="left"><tt class=literal>!=</tt></TD>
<td align="left">reference types</TD>
<td align="LEFT">

<p class=para>
not equal (refer to different objects)</TD>
</TR>
<tr class=row>
<td align="left">7</TD>
<td align="left">L</TD>
<td align="left"><tt class=literal>&amp;</tt></TD>
<td align="left">integers</TD>
<td align="LEFT">bitwise AND</TD>
</TR>
<tr class=row>
<td align="left">8</TD>
<td align="left">L</TD>
<td align="left"><tt class=literal>^</tt></TD>
<td align="left">integers</TD>
<td align="LEFT">bitwise XOR</TD>
</TR>
<tr class=row>
<td align="left">9</TD>
<td align="left">L</TD>
<td align="left"><tt class=literal>|</tt></TD>
<td align="left">integers</TD>
<td align="LEFT">bitwise OR</TD>
</TR>
<tr class=row>
<td align="left">10</TD>
<td align="left">L</TD>
<td align="left"><tt class=literal>&amp;&amp;</tt></TD>
<td align="left">Booleans</TD>
<td align="LEFT">logical AND</TD>
</TR>
<tr class=row>
<td align="left">11</TD>
<td align="left">L</TD>
<td align="left"><tt class=literal>||</tt></TD>
<td align="left">Booleans</TD>
<td align="LEFT">logical OR</TD>
</TR>
<tr class=row>
<td align="left">12</TD>
<td align="left">R</TD>
<td align="left"><tt class=literal>?:</tt></TD>
<td align="left">Boolean, any, any</TD>
<td align="LEFT">

<p class=para>
conditional (ternary) operator</TD>
</TR>
<tr class=row>
<td align="left">13</TD>
<td align="left">R</TD>
<td align="left"><tt class=literal>=</tt></TD>
<td align="left">variable, any</TD>
<td align="LEFT">assignment</TD>
</TR>
<tr class=row>
<td align="left">&nbsp;</TD>
<td align="left">R</TD>
<td align="left">

<p class=para>
<tt class=literal>*=, /=, %=, +=, -=, &lt;&lt;=,
	      &gt;&gt;=, &gt;&gt;&gt;=, 
	      &amp;=, ^=, |=</tt></TD>
<td align="left">variable, any</TD>
<td align="LEFT">assignment with operation</TD>
</TR>
<tr class=row>
<td align="left">14</TD>
<td align="left">L</TD>
<td align="left"><tt class=literal>,</tt></TD>
<td align="left">any</TD>
<td align="LEFT">multiple evaluation</TD>
</TR>
</TABLE>
<p>
</DIV>
<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch04-SECT2-AUTOID.1">Number of Operands</A></h3>

<p class=para>
	In general, there are three types of operators. Most JavaScript
	operators, like the <tt class=literal>+</tt> operator that we saw in
	the previous section, are <i class=emphasis>binary operators</I>
	that combine two expressions into a single, more complex
	expression. That is, they operate on two operands. JavaScript
	also supports a number of <i class=emphasis>unary operators</I>, which
	convert a single expression into a single more complex
	expression. The <tt class=literal>-</tt> operator in the expression
	<tt class=literal>-3</tt> is a unary operator which performs the
	operation of negation on the operand
	<tt class=literal>3</tt>. Finally, JavaScript supports one
	<i class=emphasis>ternary operator</I>, <tt class=literal>?:</tt>,
	which combines the value of three expressions into a single
	expression.
      

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch04-SECT2-AUTOID.2">Type of Operands</A></h3>

<p class=para>
	When constructing JavaScript expressions, you must pay attention
	to the data types that are being passed to operators, and to the
	data types that are returned. Different operators expect their
	operands' expressions to evaluate to values of a certain data
	type. For example, it is not possible to multiply strings, so
	the expression <tt class=literal>"a" * "b"</tt> is not
	legal in JavaScript. Note, however, that JavaScript tries to
	convert expressions to the appropriate type whenever possible,
	so the expression <tt class=literal>"3" *
	"5"</tt> is legal. Its value is the number 15,
	not the string "15".
      

<p class=para>
	Furthermore, some operators behave differently depending on the
	type of the operands. Most notably, the <tt class=literal>+</tt>
	operator adds numeric operands but concatenates string
	operands. And if passed one string and one number, it converts
	the number to a string and concatenates the two resulting
	strings. For example, <tt class=literal>'1' + 0</tt> yields the
	string <tt class=literal>'10'</tt>.
      

<p class=para>
	 
	Finally, note that operators do not always return the same type
	as their operands. The comparison operators (less than, equal
	to, greater than, etc.) take operands of various types, but when
	comparison expressions are evaluated, they always return a
	Boolean result that indicates whether the comparison is true or
	not. For example, the expression <tt class=literal>a &lt; 3</tt>
	returns <tt class=literal>true</tt> if the value of variable
	<tt class=literal>a</tt> is in fact less than
	<tt class=literal>3</tt>. As we'll see, the Boolean values returned
	by comparison operators are used in <tt class=literal>if</tt>
	statements, <tt class=literal>while</tt> loops, and
	<tt class=literal>for</tt> loops--JavaScript statements that
	control the execution of a program based on the results of
	evaluating expressions that contain comparison operators.
      

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch04-SECT2-AUTOID.3">Operator Precedence</A></h3>

<p class=para>
	In <a href="#JSCRIPT-CH-OPERATORS-TAB-1">Table 4.1</A> the column labeled
	<b>P</b> specifies the
	<i class=emphasis>precedence</I> of each operator. Operator
	precedence controls the order in which operations are
	performed. Operators with a lower number in the <b>P</b> column are performed before those with a
	higher number. Somewhat confusingly, we say that operators that
	are performed first (with a lower <b>P</b> number) have <i class=emphasis>higher</I>
	precedence.
      

<p class=para>
	Consider the following expression:
        

<div class=programlisting>
<p>
<pre>
w = x + y*z;
</PRE>
</DIV>


	The multiplication operator <tt class=literal>*</tt> has a higher
	precedence than the addition operator <tt class=literal>+</tt>, so
	the multiplication is performed before the
	addition. Furthermore, the assignment operator
	<tt class=literal>=</tt> has the lowest precedence, and so the
	the assignment operator <tt class=literal>=</tt> has the lowest
	assignment is performed after all the operations on the
	right-hand side are completed. Operator precedence can be
	overridden with the explicit use of parentheses. To force the
	addition to be performed first in the above example, we would
	write:
	

<div class=programlisting>
<p>
<pre>
w = (x + y)*z;
</PRE>
</DIV>



	In practice, if you are at all unsure about the precedence of
	your operators, the simplest thing is to use parentheses to make
	the evaluation order explicit. The only rules that are important
	to know are that multiplication and division are performed
	before addition and subtraction, and that assignment has very
	low precedence and is always performed last.
      

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch04-SECT2-AUTOID.4">Operator Associativity</A></h3>

<p class=para>
	In <a href="#JSCRIPT-CH-OPERATORS-TAB-1">Table 4.1</A> the column labeled
	<b>A</b> specifies the associativity of
	the operator. A value of L specifies left-to-right
	associativity, and a value of R specifies right-to-left
	associativity. The associativity of an operator specifies the
	order in which operations of the same precedence are
	performed. Left-to-right associativity means that operations are
	performed from left to right. For example:
	

<div class=programlisting>
<p>
<pre>
w = x + y + z;
</PRE>
</DIV>


	is the same as:
	

<div class=programlisting>
<p>
<pre>
w = ((x + y) + z);
</PRE>
</DIV>


	because the addition operator has left-to-right
	associativity. On the other hand, the following (almost
	nonsensical) expressions:
	

<div class=programlisting>
<p>
<pre>
x = ~-~y;
w = x = y = z;
q = a?b:c?d:e?f:g;
</PRE>
</DIV>


	are equivalent to:
	

<div class=programlisting>
<p>
<pre>
x = ~(-(~y));
w = (x = (y = z));
q = a?b:(c?d:(e?f:g));
</PRE>
</DIV>


	because the unary, assignment, and ternary conditional
	operators have right-to-left associativity.
      

</DIV>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch04_01.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src="gifs/txthome.gif" alt="Home" border=0></a></td>
<td width=172 align=right valign=top><a href="ch04_03.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Expressions</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td>
<td width=172 align=right valign=top>Arithmetic Operators</td>
</tr>
</table>

<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
</DIV>

</BODY>
</HTML>
