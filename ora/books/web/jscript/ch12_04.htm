<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 12] 12.4 Frame Programming Techniques</TITLE>
<meta name="author" content="David Flanagan">
<meta name="date" content="Wed Apr 23 18:16:04 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="JavaScript">
<meta name="title" content="JavaScript: The Definitive Guide">
<!-- JavaScript: pathcont.js -->
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><img src="gifs/smbanner.gif" alt="Javascript: The Definitive Guide"></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch12_03.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b>Chapter 12</b></td>
<td width=172 align=right valign=top><a href="ch12_05.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>
<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="ch12-SECT1-AUTOID.4">12.4 Frame Programming Techniques</A></h2>

<p class=para>
<a name="CH12.FRAME1"></A>      In a section above we demonstrated that it is possible to open a
      new browser window, and to dynamically create a HTML document
      within that new window. This is a very powerful technique in
      JavaScript, and it applies not only to new browser windows, but
      also to frames. In fact, it is much more common to create a web
      site that uses multiple frames than it is to create one that
      uses multiple browser windows. The key to successful
      programming with frames is knowing how to refer to one frame
      from another. Recall that every Window object (which means
      every browser window, and every frame within a window or within
      another frame) has a <tt class=literal>frames[]</tt> array, and also
      <tt class=literal>parent</tt>, <tt class=literal>top</tt>,
      <tt class=literal>self</tt>, and <tt class=literal>window</tt>
      properties. You might want to refer back to
      <a href="ch12_01.htm">Figure 12-1</A> to refresh your memory
      about how each of these properties work.
    

<p class=para>
      Once you know how to refer to any frame from any other frame,
      you can start writing JavaScript programs that work in complex
      framed documents. Pay careful attention to how you name frames,
      and be aware of what window any given piece of code is running
      in. For example, if an event handler in frame A invokes a
      function that is defined in frame B, the code in that function
      is running in frame A, not frame B--and if the code wants to
      refer to frame B, it can't just use the implicit window
      reference, as it could if it were actually running in frame B.
      When you encounter complexities like these, it is helpful to
      give each frame a name, and refer to them by name rather than by
      number. (Recall that giving a frame a name creates a property
      with that name in the frame's parent.)  When you are working
      with frames that are nested, at multiple levels, however you may
      want to create some "global" properties of the top-level browser
      window that refer to each of the frames in your program, no
      matter how many levels down they are nested. Then, for example,
      you can refer to frames with expressions like
      <tt class=literal>top.frameB</tt>, and know that you are referring
      to the right frame, regardless of what frame the expression is
      evaluated in. The key here is to create an absolute naming
      convention for frames rather than using the relative naming
      convention that JavaScript provides by default.
    

<p class=para>
      As we saw in the error handler example, JavaScript code in one
      window (or frame) can dynamically create an HTML document in
      another window (or frame). It is a lot harder for JavaScript
      code to dynamically create a new HTML document in its own window
      or frame, because doing this generally overwrites the JavaScript
      code itself!  If your web page design calls for one static frame
      and two frames that have their contents dynamically updated,
      the static frame can contain the JavaScript code necessary
      to update the dynamic frames. But what if your design calls for
      all the frames to be dynamic?  A static frame is still required,
      but the trick here is to create the static frame so that it is
      invisible!  You do this by explicitly creating it at a location
      that is greater than 100% of the frame width or height. HTML to
      create such an invisible frame is shown in
      <a href="#JSCRIPT-CH-WINDOWS-EX-5">Example 12-5</A>.
    

<div class=example>
<h4 class=example><a class="TITLE" name="JSCRIPT-CH-WINDOWS-EX-5">Example 12-5: Creating an Invisible Frame</A></h4>

<div class=programlisting>
<p>
<pre>
&lt;!--<tt class=replaceable><i> Create two frames that take up half the screen each, and one that </i></tt>--&gt;
&lt;!--<tt class=replaceable><i> takes up "all the rest" of the room. The third frame will be </i></tt>--&gt;
&lt;!--<tt class=replaceable><i> invisible, because it has a height of zero. </i></tt>--&gt;
&lt;frameset rows="50%,50%,*"&gt;  
&lt;!--<tt class=replaceable><i> first two frames start out empty, loading no documents </i></tt>--&gt;
&lt;frame name="dynamic_frame_1"&gt;
&lt;frame name="dynamic_frame_2"&gt;
&lt;!--<tt class=replaceable><i> invisible frame contains the code that will </i></tt>--&gt;
&lt;!--<tt class=replaceable><i> dynamically update the others </i></tt>--&gt;
&lt;frame name="invisible_frame" src="program.html"&gt;  
&lt;/frameset&gt;           
</PRE>
</DIV>

</DIV>

<p class=para>
      A technique related to dynamically generating frame content is
      the use of the <tt class=literal>TARGET</tt> attribute of
      <tt class=literal>&lt;A&gt;</tt>, <tt class=literal>&lt;AREA&gt;</tt>,
      and <tt class=literal>&lt;FORM&gt;</tt> tags. This attribute was
      discussed earlier in this chapter--it directs the browser to
      load the URL pointed to by a hyperlink into the named frame or
      window, or to load the results of form submission into the named
      frame. This, too, is a very useful way to change the contents
      of one frame from another frame.
    

<p class=para>
      Another HTML technique that is possible with frames in Navigator
      3.0 is creating borderless frames. A borderless frame is
      visible to the user but its border is not. You can use
      borderless frames when you want an region of the screen that can
      display HTML content independently of the rest of the page, but
      which fits "seamlessly" with its neighboring frames. You can
      create borderless frames with attributes like those shown here.
      Note that the entire frameset must be borderless, since if one
      frame is borderless, its adjoining neighbors must be borderless,
      too:
      

<div class=programlisting>
<p>
<pre>
&lt;frameset border=no width=0 rows="10%,*"&gt;
  &lt;frame name="banner" src="ad.html"&gt;
  &lt;frame name="main" src="content.html"&gt;
&lt;/frameset&gt;
</PRE>
</DIV>


      This HTML fragment hints at one possible use of borderless
      frames:  to create "banner" regions at the top (or bottom) of
      web pages that do not scroll with the main part of the page.
      These are useful, of course, for company logos, advertisements,
      and the like.
    

<p class=para>
      We'd described how you can use JavaScript running in one frame
      to dynamically create HTML content for another frame. But in
      this discussion we have always created the frames themselves
      with a frameset specified in a static HTML file. Since frames
      are specified in HTML, there is no reason we cannot create them
      dynamically as well. <a href="#JSCRIPT-CH-WINDOWS-EX-6">Example 12-6</A>
      shows how it can be done. This example opens a small new
      window, dynamically creates four frames in it, and then, using
      the <tt class=literal>setTimeout()</tt> method, periodically changes
      the background color of each frame, creating a simple but
      colorful animated display, which is pictured in
      <a href="#JSCRIPT-CH-WINDOWS-FIG-3">Figure 12-3</A>. The <b>Stop</b> button in the original window stops
      the animation using <tt class=literal>clearTimeout()</tt> and
      closes the new window using the
      <tt class=literal>Window.close()</tt> method. This example brings
      together many of the window and frame programming techniques
      we've been discussing.
    

<p class=para>
     
    

<div class=figure>
<h4 class=figure><a class="TITLE" name="JSCRIPT-CH-WINDOWS-FIG-3">Figure 12-3: A simple animation in dynamically created frames</A></h4>


<p>
<img align=middle src="figs/js1203.gif" alt="[Graphic: Figure 12-3]" width=332 height=348>

</DIV>

<div class=example>
<h4 class=example><a class="TITLE" name="JSCRIPT-CH-WINDOWS-EX-6">Example 12-6: Dynamically Creating and Animating Frames</A></h4>

<div class=programlisting>
<p>
<pre>
&lt;HTML&gt;
&lt;HEAD&gt;
&lt;SCRIPT LANGUAGE="JavaScript1.1"&gt;
//<tt class=replaceable><i> open a new window</i></tt>
var n = window.open('', 'f', 'width=400,height=400');
//<tt class=replaceable><i> dynamically create frames in that new window</i></tt>
//<tt class=replaceable><i> note the use of the special about:blank URL to get empty frames</i></tt>
n.document.write('&lt;frameset rows="50%,50%" cols="50%,50%"&gt;');
n.document.write('&lt;frame name="f1" src="about:blank"&gt;');
n.document.write('&lt;frame name="f2" src="about:blank"&gt;');
n.document.write('&lt;frame name="f3" src="about:blank"&gt;');
n.document.write('&lt;frame name="f4" src="about:blank"&gt;');
n.document.write('&lt;/frameset&gt;');
//<tt class=replaceable><i> an array of the colors we cycle through for the animation</i></tt>
colors = new Array("red","green","blue","yellow","white");
//<tt class=replaceable><i> an array of the frames we cycle through (in this order) </i></tt>
windows = new Array(n.f1, n.f2, n.f4, n.f3);
//<tt class=replaceable><i> the current color and frame counters</i></tt>
var c = 0, f = 0;
//<tt class=replaceable><i> a variable that holds the current timeout id (used to cancel the timeout)</i></tt>
var timeout = null;
//<tt class=replaceable><i> This function sets the "next" frame in the list to the "next" color</i></tt>
//<tt class=replaceable><i> in the list. We call it once to start the animation, and then it </i></tt>
//<tt class=replaceable><i> arranges to invoke itself every quarter second after that.</i></tt>
function change_one_frame()
{
    //<tt class=replaceable><i> dynamically output the HTML necessary to set the background color</i></tt>
    windows[f].document.write('&lt;BODY BGCOLOR="' + colors[c] + '"&gt;');
    windows[f].document.close();
    f = (f + 1) % 4;  //<tt class=replaceable><i> increment frame counter</i></tt>
    c = (c + 1) % 5;  //<tt class=replaceable><i> increment color counter</i></tt>
    
    //<tt class=replaceable><i> arrange to be called again in 250 milliseconds and</i></tt>
    //<tt class=replaceable><i> save the timeout id so that we can stop this crazy thing</i></tt>
    timeout = setTimeout("change_one_frame()", 250);
}
&lt;/SCRIPT&gt;
&lt;/HEAD&gt;
&lt;!--<tt class=replaceable><i> start the frame animation when the document is fully loaded </i></tt>--&gt;
&lt;BODY onLoad="change_one_frame();"&gt;
&lt;!--<tt class=replaceable><i> Create a button to stop the animation with clearTimeout() </i></tt>--&gt;
&lt;!--<tt class=replaceable><i> and close the window with close(). </i></tt>--&gt;
&lt;FORM&gt;
  &lt;INPUT TYPE="button" VALUE="Stop"
     onClick="if (timeout) clearTimeout(timeout); if (!n.closed) n.close();"&gt;
&lt;/FORM&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>
</DIV>

</DIV>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch12_03.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src="gifs/txthome.gif" alt="Home" border=0></a></td>
<td width=172 align=right valign=top><a href="ch12_05.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>The Status Line</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td>
<td width=172 align=right valign=top>Other Window Programming Techniques</td>
</tr>
</table>

<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
</DIV>

</BODY>
</HTML>
