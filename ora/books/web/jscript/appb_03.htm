<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Appendix B] B.3 Commonly Encountered JavaScript Bugs in Navigator 2.0</TITLE>
<meta name="author" content="David Flanagan">
<meta name="date" content="Tue Apr 22 18:12:36 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="JavaScript">
<meta name="title" content="JavaScript: The Definitive Guide">
<!-- JavaScript: pathcont.js -->
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><img src="gifs/smbanner.gif" alt="Javascript: The Definitive Guide"></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="appb_02.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b>Appendix B</b></td>
<td width=172 align=right valign=top><a href="appc_01.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>
<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="appb-SECT1-AUTOID.3">B.3 Commonly Encountered JavaScript Bugs in Navigator 2.0</A></h2>

<p class=para>
<a name="CH14.BUGS1"></A><a name="CH14.BUGS2"></A>      Navigator 2.0 has a lot of bugs. This is a fact of life and a
      source of frequent frustration. By being aware of the most
      important and most frequently encountered bugs, you can begin to
      reduce the amount of frustration you'll have to endure when
      programming with the Navigator 2.0 version of client-side
      JavaScript--and, more important, the amount of frustration
      your customers endure when they run your JavaScript code with
      Navigator 2.0.
    

<p class=para>
      If you're wondering why this relatively long section has been
      devoted to Navigator 2.0 bugs, when presumably these have all
      been fixed in Navigator 3.0, remember that it doesn't matter
      what version of Navigator you run; it is the user's version that
      counts. Even with Navigator 3.0 released in final form, your
      scripts may still be run on many Navigator 2.0 platforms.
    

<p class=para>
      Navigator 2.0 is sufficiently buggy that apparently no one has
      attempted to make a complete list of all known bugs (if Netscape
      has one, they are not releasing it). The reason is simple: trying
      to produce a definitive list of bugs, for versions 2.0, 2.0.1, and
      2.0.2, running on Windows 3.1, Windows 95, Windows NT, the
      Macintosh, and each of the many flavors of Unix that are supported
      would be a huge undertaking. Documenting all the bugs in all the
      versions on all the platforms in detail would probably require a
      book longer than this one.
    

<p class=para>
      For that reason, this section does not attempt to be a definitive
      list of bugs in Navigator 2.0. Instead, the aim is to inform you
      of the most serious and most commonly encountered bugs so that you
      will know how to avoid them and how to work around them when you
      can't avoid them. In a heterogeneous environment like the
      Internet, users of your scripts will be running a variety of
      Navigator versions on a variety of platforms. In effect,
      <i class=emphasis>a bug on any one popular platform is a bug on all
      platforms</I>, since the affected code or object cannot be
      safely used. For that reason, the bugs listed here are not
      categorized by platform or version.
    

<p class=para>
      Note that with release 2.0.2, development stopped on version 2.0
      of Navigator. Thus, the bugs listed here will remain in the
      installed base of Navigator 2.0 browsers.
    

<p class=para>
      After describing the commonly encountered bugs, this chapter ends
      with a short section on debugging techniques that you may find
      useful for your scripts.
    

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="appb-SECT2-AUTOID.7">Security Hobbles</A></h3>

<p class=para>

	The first possibility you should consider when you encounter a
	strange bug in a script is to check whether you are violating
	Navigator's security restrictions. Remember that in versions
	2.0.1 and 2.0.2, a script cannot read any properties of a
	window if the contents of that window came from a different
	server (i.e., a different host or a different protocol running
	on the same host) than the script did. The implications of
	this one restriction are far-reaching and have many
	implications for referencing properties across windows or
	frames. In particular, if you see the "Window has no
	properties" or "access disallowed from scripts at
	<i class=emphasis>url</I> to documents at
	<i class=emphasis>url</I>" error messages, you've
	probably run up against this security hobble.
      

<p class=para>
	See <a href="ch20_01.htm">Chapter 20, <i>JavaScript Security</i></A>, for a list of a few
	more security restrictions. These restrictions are inconvenient
	and annoying, but they aren't really bugs; just limitations in
	the capabilities of JavaScript. Many of these restrictions may
	be lifted when data tainting becomes the default security model
	in Navigator 4.0.
      

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="appb-SECT2-AUTOID.8">General Bugs</A></h3>

<p class=para>
	This section covers general bugs that don't apply to any one
	particular JavaScript object.
      

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="appb-SECT3-AUTOID.13">Printing and saving generated text</A></h4>

<p class=para>

	  When you output text to a document using the
	  <tt class=literal>Document.write()</tt> method, Navigator
	  can display this text. Unfortunately, because of the way HTML
	  parsing works in Navigator, text generated by JavaScript
	  cannot be printed or saved to a file. There is no workaround,
	  except to replace your client-side JavaScript with a
	  server-side CGI script.
	

<p class=para>
	  A bug related to the previous one is that when the web browser
	  is resized, all JavaScript in the web page is re-interpreted.
	  This bug is fixed in 3.0 along with the printing bug.
	

<p class=para>
	  Another related Navigator (non-JavaScript) bug is that when
	  Navigator prints forms, it does not print the contents of the
	  form elements.
	

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="appb-SECT3-AUTOID.14">JavaScript and tables</A></h4>

<p class=para>

	  In general, JavaScript and tables do not mix well in Navigator
	  2.0. If you can, simply avoid putting JavaScript code in web
	  pages that contain tables. If you cannot avoid it, then don't
	  put form elements within tables--the table algorithm
	  parses table contents twice, causing contained form elements
	  to be created twice, and what are supposed to be single form
	  elements end up in arrays of elements. Also, do not try to use
	  JavaScript to output a portion (one or a few cells) of a
	  table. If you need to generate some of the table with
	  JavaScript code, use JavaScript to generate the entire
	  table. These table problems have been fixed (mostly) in 3.0.
	

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="appb-SECT3-AUTOID.15">Line length limit</A></h4>

<p class=para>
	  JavaScript was designed not to impose arbitrary length
	  restrictions on lines of code. Unfortunately, because of a bug
	  in the HTML parser, JavaScript complains if any lines in your
	  program are over 254 characters long. Usually, the only time
	  this occurs is when you have a very long string, in which case
	  the end of the string gets truncated, and JavaScript complains
	  of an "Unterminated string literal." The workaround is to
	  break up your long lines and to avoid long strings. If you
	  must use long strings, break them up into chunks that are
	  shorter than 254 characters and use <tt class=literal>+</tt> to
	  concatenate them.
	

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="appb-SECT3-AUTOID.16">Script size limit</A></h4>

<p class=para>
	  Because of the nature of the 16-bit architecture of Windows
	  3.1, there is a limit on the length of scripts that can be
	  handled on this platform. Programmers have reported having
	  problems on this platform when their scripts reach 20Kb to
	  40Kb in length. A solution is to break the script up into
	  separate modules and load each module into a separate frame or
	  window, and then (carefully!) make function calls between
	  frames or windows. When a script gets this long, another
	  solution you should seriously consider is converting it to a
	  CGI script run on the server, instead of forcing the user to
	  download all the code.
	

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="appb-SECT3-AUTOID.17">Conversion of floating-point values to strings</A></h4>

<p class=para>
	  The code used by JavaScript to convert floating-point values
	  to strings is buggy and you will often see floating-point
	  values displayed with a lot of trailing 9s. For example, the
	  following code:
	  

<div class=programlisting>
<p>
<pre>
i = .15
alert(i);
</PRE>
</DIV>


	  will usually display a dialog box containing a string like
	  ".14999999999995" instead of the ".15" that you would
	  expect. This is a particular problem when dealing with numeric
	  values that represent money. A workaround is to multiply your
	  value by 100, and use the
	  <tt class=literal>Math.round()</tt> method to round the
	  result to the nearest integer. If you divide by 100 at this
	  point, you'll have the same problem of trailing 9s, so the
	  only solution is to convert your value times 100 to a string,
	  use the <tt class=literal>String.substring()</tt> method
	  to extract the dollars digits and cents digits, and then print
	  these strings out, adding your own decimal point.
	

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="appb-SECT3-AUTOID.18">Date and time bugs</A></h4>

<p class=para>
	  In Navigator 2.0, the Date object has quite a few bugs and is
	  almost unusable. On Macintosh platforms, the time returned is
	  off by an hour, and on all platforms, time zones are not
	  handled well. Also, prior to version 2.0.2, there was a
	  Navigator bug (not directly a JavaScript bug) in the handling
	  daylight savings time. A side effect of this is that Navigator
	  2.0 and 2.0.1 cannot correctly determine whether a document on
	  a server is newer than the cached version and so the <b>Reload</b> button does not always work
	  correctly.
	

<p class=para>
	  You can usually use the Date object to print out the current
	  date, and you can use it to compute the interval (in
	  milliseconds) between two dates or times in the same time
	  zone, but you should probably not attempt more sophisticated
	  uses of it than that.
	

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="appb-SECT3-AUTOID.19">lastIndexOf()</A></h4>

<p class=para>
	  The String method <tt class=literal>lastIndexOf()</tt>
	  should search a string backward starting from the specified
	  character position within the string (0 for the first
	  character, and <tt class=literal>string.length</tt> - 1 for the
	  last character). In 2.0, however, it begins the search one
	  character before the specified character. The workaround in
	  2.0 is to add 1 to the desired index.
	

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="appb-SECT3-AUTOID.20">eval()</A></h4>

<p class=para>
	  Using the <tt class=literal>eval()</tt> function crashes
	  Navigator 2.0 and 2.01 when running on Windows 3.1 platforms.
	  This bug is fixed in 2.02, however. The workaround is to
	  avoid <tt class=literal>eval()</tt>, or to use the
	  <tt class=literal>Navigator</tt> object to check what platform the
	  script is running on, and refuse to run on a Windows
	  3.1/Navigator 2.0 or 2.01 platform.
	

</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="appb-SECT2-AUTOID.9">Window and Frame Bugs</A></h3>

<p class=para>
        The bugs described below affect the Window object and related
        areas of JavaScript. Some of them are suprisingly subtle, and
        because the Window object is so important in client-side
        JavaScript, these bugs may have wide reaching impact.
      

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="appb-SECT3-AUTOID.21">Window.open() method</A></h4>

<p class=para>
	  The <tt class=literal>Window.open()</tt> method takes
	  three arguments, a URL to display in the window, a window
	  name, and a list of browser features that should be present or
	  absent in the new window. Unfortunately, there are bugs with
	  the first and third arguments.
	

<p class=para>
	  On the Macintosh and some Unix platforms, the URL specified as
	  the first argument to <tt class=literal>Window.open()</tt>
	  is ignored. A commonly proposed workaround is to call
	  <tt class=literal>open()</tt> a second time with the same
	  URL specified. Another workaround is to set the
	  <tt class=literal>location.href</tt> property of the window after
	  it is created. For example, the second block of JavaScript
	  code should be used instead of the first block:
	  

<div class=programlisting>
<p>
<pre>
// problems on Mac and Unix
var w = open("http://www.ora.com");
// following works on all platforms
var w = open("");
w.location.href = "http://www.ora.com";
      
</PRE>
</DIV>


	

<p class=para>
	  In addition, the list of window features specified by the
	  third argument to <tt class=literal>Window.open()</tt>
	  does not work on Unix platforms running the X Window
	  System. Width and height may be specified with this third
	  argument, but no other features may be specified--all
	  windows will be created without a menubar, toolbar, status
	  line, and so on.
	

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="appb-SECT3-AUTOID.22">Dangling references</A></h4>

<p class=para>

	  As discussed in <a href="ch11_01.htm">Chapter 11, <i>Windows and the JavaScript Name Space</i></A>, the
	  JavaScript memory management model is inadequate in Navigator
	  2.0. Because all objects allocated by a window are freed when
	  the window unloads, references to those objects from other
	  windows can be left dangling if the user closes the window or
	  unexpectedly points the browser to a new page. If you attempt
	  to use one of these references to a no-longer-existing object,
	  you may get a corrupt value, or you may actually crash the
	  browser.
	

<p class=para>
	  It is debatable whether this is a bug or just an unfortunate
	  misfeature of the JavaScript architecture in Navigator 2.0.
	  In any case, the solution is to be very careful with your
	  cross-window references.
	

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="appb-SECT3-AUTOID.23">Frame properties overwrite others</A></h4>

<p class=para>

	  This is a bug that occurs only in a very specific situation,
	  but it is bizarre and puzzling when you encounter it for the
	  first time. When a window contains named frames, the
	  references to those frames are stored in properties of the
	  window. JavaScript apparently allocates the first few property
	  "slots" of the window object for these frames. If you create
	  other properties of the Window object before the frames are
	  created, and if the window is a newly created one, then these
	  properties may take up those first property "slots." Later,
	  when the frame references are stored in those slots, the value
	  of your properties will be overwritten.
	

<p class=para>

	  This situation occurs only in a couple of specific cases. The
	  first is when you have a <tt class=literal>&lt;SCRIPT&gt;</tt> tag
	  that sets properties before a
	  <tt class=literal>&lt;FRAMESET&gt;</tt> tag that defines frames.
	  (Doing this is probably a poor programming practice, by the
	  way.)  The second is when you have a script that sets
	  properties in a window and then generates the frames itself by
	  explicitly outputting the necessary
	  <tt class=literal>&lt;FRAMESET&gt;</tt> and
	  <tt class=literal>&lt;FRAME&gt;</tt> tags.
	

<p class=para>
	  A related bug that serves to make this bug even more
	  mysterious is that frame properties of a Window object are not
	  detected by a <tt class=literal>for/in</tt> loop until they have
	  actually been used once by a script!
	

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="appb-SECT3-AUTOID.24">onLoad() event handler called early</A></h4>

<p class=para>
	  When a document that does not contain frames but does contain
	  images is loaded into a window, the Window object's
	  <tt class=literal>onLoad()</tt> event handler may be
	  called before the document is actually completely loaded. In
	  this case, you cannot rely on
	  <tt class=literal>onLoad()</tt> to tell you when the
	  document is fully loaded and all document objects are
	  defined. Therefore, you should be sure to check that the
	  elements you want to access really exist before attempting to
	  use them. For example, you might check that the last element
	  of the last form is created before doing any manipulation of
	  forms. If the element is not created when you check it, you
	  can use <tt class=literal>setTimeout()</tt> to defer the
	  code to be executed and to check again later.
	

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="appb-SECT3-AUTOID.25">Dialogs in onUnload()</A></h4>

<p class=para>
	  Invoking the <tt class=literal>alert()</tt>,
	  <tt class=literal>confirm()</tt>, or
	  <tt class=literal>prompt()</tt> dialogs from an
	  <tt class=literal>onUnload()</tt> event handler may crash
	  Navigator. The only workaround is to avoid the temptation to
	  do this--don't try to pop up a dialog to say good-bye to
	  the user when they leave your page!
	

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="appb-SECT3-AUTOID.26">Scripts in framesets</A></h4>

<p class=para>
	  Scripts that appear after a
	  <tt class=literal>&lt;FRAMESET&gt;</tt> tag in a document will not
	  be executed. This is not actually a bug, but a fact of the
	  JavaScript architecture. Scripts may appear in the
	  <tt class=literal>&lt;HEAD&gt;</tt> or
	  <tt class=literal>&lt;BODY&gt;</tt> of a document. An HTML file
	  that defines a frameset has a head--that portion that
	  appears before the frameset--but does not have a body;
	  the frameset is a substitute for the document body, and
	  JavaScript rules do not allow scripts within frameset
	  definitions.
	

<p class=para>
	  JavaScript does allow scripts before the beginning of a
	  frameset, but unless you have a good reason to do this, it
	  probably isn't a good idea.
	

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="appb-SECT3-AUTOID.27">Status and defaultStatus</A></h4>

<p class=para>
	  When you query the value of the <tt class=literal>status</tt>
	  property of a Window, you get the value of the
	  <tt class=literal>defaultStatus</tt> property of that Window, even
	  if there is a <tt class=literal>status</tt> message currently
	  displayed by the browser.
	

<p class=para>
	  Also, on some platforms the <tt class=literal>defaultStatus</tt>
	  message is not properly restored after a status message is
	  displayed. For example, if you set the
	  <tt class=literal>status</tt> property to a special message from
	  the <tt class=literal>onMouseOver()</tt> event handler of
	  a hypertext link, then this message may not be erased when the
	  user moves the mouse off the link. You can address this
	  problem by using <tt class=literal>setTimeout()</tt> to
	  register a function to be executed after a couple of seconds
	  which will explicitly set the <tt class=literal>status</tt>
	  property to be the same as the
	  <tt class=literal>defaultStatus</tt>.
	

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="appb-SECT3-AUTOID.28">setTimeout() memory leak</A></h4>

<p class=para>
	  As discussed in <a href="ch12_01.htm">Chapter 12, <i>Programming with Windows</i></A>, Navigator
	  2.0 does not reclaim any memory used by a page until that page
	  unloads. The <tt class=literal>setTimeout()</tt> method
	  allocates memory each time it is called, even when called
	  repeatedly with the same string argument. Therefore, pages
	  that perform repetitive actions (such as animation) with
	  <tt class=literal>setTimeout()</tt> will allocate more and
	  more memory, and may eventually crash the browser.
	

</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="appb-SECT2-AUTOID.10">Document Object Bugs</A></h3>

<p class=para>
These bugs affect the Document object.

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="appb-SECT3-AUTOID.29">Document background color</A></h4>

<p class=para>
	  You can set the <tt class=literal>Document.bgColor</tt> property
	  at any time to change the background color of a document.
	  Unfortunately, on Unix/X11 platforms, and possibly some
	  others, doing this also erases any text displayed in the
	  window. If you really want to change the document color, you
	  will have to reload or rewrite the document contents, which
	  will cause a noticeable flicker after the color changes.
	

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="appb-SECT3-AUTOID.30">Closing the current document</A></h4>

<p class=para>
	  Calling <tt class=literal>Document.close()</tt> on a
	  document that contains the currently running script may crash
	  the browser. The solution is to not do this. Obviously, any
	  time Navigator crashes, it is a bug. But just as obviously,
	  closing a document that contains the code that is currently
	  being executed is not a useful thing to do, and it is not
	  clear what such an attempt should actually do.
	

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="appb-SECT3-AUTOID.31">Overwriting the current script</A></h4>

<p class=para>
	  If you call <tt class=literal>Document.write()</tt> on the
	  current document from an event handler or timeout, or call a
	  function that calls
	  <tt class=literal>Document.write()</tt> from an event
	  handler or timeout, you will implicitly close the current
	  document and open a new one to perform the write into. What
	  this does is erase the contents of the document,
	  <i class=emphasis>including the currently executing function or event
	  handler</I>. At best you will get undefined results if
	  you attempt to do this. Often, though, you will crash the
	  browser.
	

<p class=para>
	  The solution, of course, is to not do this. Note that you can
	  safely overwrite the document of a separate frame or window.
	

</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="appb-SECT2-AUTOID.11">Form Bugs</A></h3>

<p class=para>
        This section describes bugs that affect HTML forms and the
        elements they contain.
      

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="appb-SECT3-AUTOID.32">Images and form event handlers</A></h4>

<p class=para>
	  A strange but very commonly encountered bug is the following:
	  If a document contains images <i class=emphasis>and</I> forms,
	  then all the <tt class=literal>&lt;IMG&gt;</tt> tags must have
	  <tt class=literal>WIDTH</tt> and <tt class=literal>HEIGHT</tt>
	  attributes, or the event handlers of the form may be
	  ignored. Usually, adding these tags speeds document loading
	  times, so it is a good idea to get in the habit of using them
	  with all images.
	

<p class=para>
	  An alternative workaround is to follow your forms with an
	  empty pair of <tt class=literal>&lt;SCRIPT&gt;</tt> and
	  <tt class=literal>&lt;/SCRIPT&gt;</tt> tags.
	

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="appb-SECT3-AUTOID.33">Backward radio and checkbox arrays</A></h4>

<p class=para>
	  When an HTML form contains more than one element with the same
	  name, then those elements will be stored in an array by that
	  name. This is commonly done for radio buttons and
	  checkboxes. The elements are supposed to appear in the array
	  in the same order that they appear in the HTML source. For
	  obscure reasons, however, if the elements do not have event
	  handlers defined, then they will be placed in these arrays
	  backward. If some of the elements have event handlers and some
	  do not, then they will be placed in the array in some chaotic
	  order. The solution is to provide an event handler for each
	  element, even if it is only a dummy handler like the
	  following:
	

<div class=programlisting>
<p>
<pre>
&lt;INPUT TYPE="checkbox" NAME="opt" VALUE="case-sensitive" onClick="0"&gt;
</PRE>
</DIV>

<p class=para>
	  Of course, the order the elements are placed in the array is
	  only an issue if you want to read or write the properties of
	  those elements from your JavaScript code. If the form will
	  simply be submitted to a server, then you don't have to worry
	  about this bug.
	

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="appb-SECT3-AUTOID.34">Form method property</A></h4>

<p class=para>
	  The <tt class=literal>method</tt> property of a Form object
	  specifies the technique used to submit the contents of a form
	  to a server. This property should be a read/write property,
	  but in Navigator 2.0, it is read-only and may be set only when
	  the form is defined in HTML.
	

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="appb-SECT3-AUTOID.35">Mutable string values</A></h4>

<p class=para>
	  In JavaScript, strings are immutable objects, which means that
	  the characters within them may not be changed and that any
	  operations on strings actually create <i class=emphasis>new</I>
	  strings. Strings are assigned by reference, not by value. In
	  general, when an object is assigned by reference, a change
	  made to the object through one reference will be visible
	  through all other references to the object. Because strings
	  cannot be changed, however, you can have multiple references
	  to a string object and not worry that the string value will
	  change without your knowing it.
	

<p class=para>
	  Unfortunately, however, the <tt class=literal>value</tt> property
	  of the Text and Textarea objects is a
	  <i class=emphasis>mutable</I> string in Navigator 2.0. Thus, if
	  you assign the <tt class=literal>value</tt> property to a
	  variable, and then you set (or the user types) new text into
	  the Text or Textarea object, the string your variable refers
	  to will change.
	

<p class=para>
	  The way to prevent this behavior is to force the
	  <tt class=literal>value</tt> property to be copied by value rather
	  than by reference. You can do this by creating a new string
	  object with the <tt class=literal>+</tt> operator. Add the empty
	  string to the <tt class=literal>value</tt> property to create a
	  new string that contains the same text as the
	  <tt class=literal>value</tt> property:
	  

<div class=programlisting>
<p>
<pre>
var address = document.form1.address.value + "";
</PRE>
</DIV>


	

</DIV>

</DIV>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="appb_02.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src="gifs/txthome.gif" alt="Home" border=0></a></td>
<td width=172 align=right valign=top><a href="appc_01.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Known JavaScript Bugs in Internet Explorer 3.0</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td>
<td width=172 align=right valign=top>Differences between Navigator 2.0 and 3.0</td>
</tr>
</table>

<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
</DIV>

</BODY>
</HTML>
