<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 18] 18.3 Compatibility with JavaScript 1.0 Browsers</TITLE>
<meta name="author" content="David Flanagan">
<meta name="date" content="Thu Apr 24 13:37:58 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="JavaScript">
<meta name="title" content="JavaScript: The Definitive Guide">
<!-- JavaScript: pathcont.js -->
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><img src="gifs/smbanner.gif" alt="Javascript: The Definitive Guide"></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch18_02.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b>Chapter 18</b></td>
<td width=172 align=right valign=top><a href="ch18_04.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>
<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="ch18-SECT1-AUTOID.3">18.3 Compatibility with JavaScript 1.0 Browsers</A></h2>

<p class=para>
<a name="CH18.VERS1"></A><a name="CH18.VERS2"></A>      The previous section discussed compatibility techniques that are
      useful when JavaScript 1.0 (or JavaScript 1.1) code is loaded into
      a browser that does not support JavaScript. This section
      discusses techniques you can use when JavaScript 1.1 code is
      loaded into browsers that only support JavaScript 1.0. The basic
      goals are the same:  we need to prevent the code from being
      interpreted by browsers that don't understand it, and we need to
      display a special message on those browsers that informs the user
      that their browsers can't run the scripts on the page.
    

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch18-SECT2-AUTOID.10">The LANGUAGE Attribute</A></h3>

<p class=para>
	The first goal is easy. As we saw in <a href="ch10_01.htm">Chapter 10, <i>Client-Side Program Structure</i></A>, we can prevent a JavaScript 1.0
	browser from attempting to run code that requires JavaScript 1.1
	by setting the <tt class=literal>LANGUAGE</tt> attribute of the
	<tt class=literal>&lt;SCRIPT&gt;</tt> tag appropriately. It looks
	like this:
	

<div class=programlisting>
<p>
<pre>
&lt;SCRIPT LANGUAGE="JavaScript1.1"&gt;
&lt;!-- Hide from non-JavaScript browsers
        .
        .  JavaScript 1.1 code goes here
        .
// Done hiding --&gt;
&lt;/SCRIPT&gt;  
</PRE>
</DIV>


	Note that we still have to use our trick with HTML comments to
	prevent old non-JavaScript browsers from formatting our
	JavaScript code as HTML.
      

<p class=para>
	Note that the use of the <tt class=literal>LANGUAGE</tt> attribute
	is a perfectly general technique. When the next version of
	JavaScript (presumably known as "JavaScript1.2") arrives, we'll
	be able to prevent JavaScript 1.0 and JavaScript 1.1 browsers
	from interpreting 1.2-level code by specifying
	<tt class=literal>LANGUAGE="JavaScript1.2"</tt>.
      

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch18-SECT2-AUTOID.11">&lt;NOSCRIPT&gt;</A></h3>

<p class=para>
	Hiding our JavaScript 1.1 code from browsers that can't
	understand it was easy. It turns out that gracefully displaying
	a message on all browsers that don't understand our JavaScript
	1.1 code is not nearly so straightforward. When we wanted to
	display a message for non-JavaScript browsers that couldn't run
	our JavaScript 1.0 code used the comment trick shown in
	<a href="ch18_02.htm">Example 18-2</A>. This technique will
	still work when our JavaScript 1.1 code is read by
	non-JavaScript browsers, but it won't work when that code is
	read by JavaScript 1.0 browsers. 
      

<p class=para>
	The <tt class=literal>&lt;NOSCRIPT&gt;</tt> and
	<tt class=literal>&lt;/NOSCRIPT&gt;</tt> tags provide a partial
	solution. These tags were introduced by Netscape in Navigator
	3.0. The intent of these tags is that anything between them
	will be ignored on a script-capable browser and will be
	displayed on a script-incapable browser. This is a simple,
	obvious idea, but the implementation isn't quite right. Since
	these tags were introduced in Navigator 3.0, Navigator 2.0 does
	not know about them, and so it ignores them and displays any
	HTML that appears between them. Navigator 3.0, on the other
	hand knows about these tags, and since it is a
	JavaScript-enabled browser it ignores all the HTML between the
	tags. What this means is that
	<tt class=literal>&lt;NOSCRIPT&gt;</tt> and
	<tt class=literal>&lt;/NOSCRIPT&gt;</tt> provide us a way to display
	a message on Navigator 2.0 (a JavaScript 1.0 browser) that does
	not appear on Navigator 3.0 (a JavaScript 1.1 browser). <a href="#JSCRIPT-CH-COMPAT-EX-4">Example 18-4</A> shows how you might use these
	tags to display a message when our JavaScript 1.1 code could not
	be run.
      

<div class=example>
<h4 class=example><a class="TITLE" name="JSCRIPT-CH-COMPAT-EX-4">Example 18-4: Displaying a Message with &lt;NOSCRIPT&gt;</A></h4>

<div class=programlisting>
<p>
<pre>
&lt;HTML&gt;
&lt;HEAD&gt;&lt;TITLE&gt;My Cool JavaScript 1.1 Page&lt;/TITLE&gt;&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;H1&gt;My Cool JavaScript 1.1 Page&lt;/H1&gt;
&lt;NOSCRIPT&gt;
    &lt;!-- This message will be displayed by Navigator 2.0 and --&gt;
    &lt;!-- by non-JavaScript browsers --&gt;
    &lt;HR&gt;&lt;I&gt;
    This page depends heavily on JavaScript 1.1.&lt;BR&gt;
    Since your browser doesn't seem support that version of
    JavaScript, you're missing out on a lot of cool stuff!
    &lt;/I&gt;&lt;HR&gt;
&lt;/NOSCRIPT&gt;
&lt;SCRIPT LANGUAGE="JavaScript1.1"&gt; &lt;!--
    // My Cool JavaScript 1.1 code goes here
// --&gt;&lt;/SCRIPT&gt;
&lt;/BODY&gt;&lt;/HTML&gt;
</PRE>
</DIV>

</DIV>

<p class=para>
	Unfortunately, this <tt class=literal>&lt;NOSCRIPT&gt;</tt>
	technique is not entirely adequate. Since Navigator 2.0 does
	not recognize <tt class=literal>&lt;NOSCRIPT&gt;</tt>, this tag does
	not serve to distinguish JavaScript-enabled browsers from
	non-JavaScript browser. In the example above, we use it to
	distinguish JavaScript 1.1 browsers from JavaScript 1.0 browsers
	and from non-JavaScript browsers. But this use isn't correct
	either. It turns out that Internet Explorer 3.0 recognizes
	<tt class=literal>&lt;NOSCRIPT&gt;</tt>, and since it supports
	scripting, even JavaScript 1.0 scripting, it ignores everything
	between <tt class=literal>&lt;NOSCRIPT&gt;</tt> and
	<tt class=literal>&lt;/NOSCRIPT&gt;</tt>. While this is the
	technically correct thing to do, the incompatibility between
	Navigator and Internet Explorer renders the
	<tt class=literal>&lt;NOSCRIPT&gt;</tt> tag practically useless.
	What this means is that the message shown in <a href="#JSCRIPT-CH-COMPAT-EX-4">Example 18-4</A> will be displayed, as
	desired, in Navigator 2.0 and in non-JavaScript browsers, but it
	will not be displayed by Internet Explorer.
      
      

<p class=para>
	There is another problem with
	<tt class=literal>&lt;NOSCRIPT&gt;</tt> as well. It is not a
	general-purpose mechanism. When JavaScript 1.2 is out, there
	will no way to use <tt class=literal>&lt;NOSCRIPT&gt;</tt> to
	display a message on all browsers that do not support that
	version of the language.
      

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch18-SECT2-AUTOID.12">Failing Gracefully the Hard Way</A></h3>

<p class=para>
	Since <tt class=literal>&lt;NOSCRIPT&gt;</tt> doesn't do quite what
	we want we have to be more explicit in displaying our messages.
	We'll revert to using HTML comments to display our failure
	message on non-JavaScript browsers, and we'll use JavaScript 1.0
	to display a message on JavaScript-enabled browsers that do not
	support JavaScript 1.1. <a href="#JSCRIPT-CH-COMPAT-EX-5">Example 18-5</A>
	shows how we do it.
      

<div class=example>
<h4 class=example><a class="TITLE" name="JSCRIPT-CH-COMPAT-EX-5">Example 18-5: Displaying a Message for Browsers That Do Not Support JavaScript 1.1</A></h4>

<div class=programlisting>
<p>
<pre>
&lt;!-- Set a variable to determine what version of JavaScript we support --&gt;
&lt;!-- This technique can be extended to any number of language versions --&gt;
&lt;SCRIPT LANGUAGE="JavaScript"&gt; &lt;!--
  _version = 10; // --&gt; &lt;/SCRIPT&gt;
&lt;SCRIPT LANGUAGE="JavaScript1.1"&gt; &lt;!--
  _version = 11; // --&gt; &lt;/SCRIPT&gt;
&lt;SCRIPT LANGUAGE="JavaScript1.2"&gt; &lt;!-- 
  _version = 12; // --&gt; &lt;/SCRIPT&gt;
&lt;!-- If the version is not high enough, display a message --&gt;
&lt;!-- This version of the message appears for JavaScript 1.0 browsers --&gt;
&lt;SCRIPT LANGUAGE="JavaScript"&gt; &lt;!--
  if (_version &lt; 11) {
    document.write('&lt;HR&gt;&lt;H1&gt;This Page Requires JavaScript 1.1&lt;/H1&gt;');
    document.write('Your JavaScript 1.0 browser cannot run this page.&lt;HR&gt;');
  }
// --&gt; &lt;/SCRIPT&gt;
&lt;SCRIPT LANGUAGE="JavaScript1.1"&gt;
&lt;!-- This version of the message will appear on non-JavaScript browsers --&gt;
&lt;!-- --&gt; &lt;HR&gt;&lt;H1&gt;This Page Requires JavaScript 1.1&lt;/H1&gt;
&lt;!-- --&gt; Your non-JavaScript browser cannot run this page.&lt;HR&gt;
&lt;!--  Start hiding the actual program code
        .
        .  The actual JavaScript 1.1 code goes here.
        .
// Done hiding --&gt;
&lt;/SCRIPT&gt;
</PRE>
</DIV>

</DIV>

<p class=para>
	While the technique shown in <a href="#JSCRIPT-CH-COMPAT-EX-5">Example 18-5</A> is not nearly so elegant as
	the <tt class=literal>&lt;NOSCRIPT&gt;</tt> solution, the important
	points to note are that it works correctly with Internet
	Explorer, and that it is extensible for future versions of the
	language. That is, this technique will allow you to display
	messages on JavaScript 1.0, JavaScript 1.1, and non-JavaScript
	browsers when you write code that only works for JavaScript
	1.2.
      

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch18-SECT2-AUTOID.13">Loading a New Page for Compatibility</A></h3>

<p class=para>
	In <a href="ch18_02.htm">Example 18-3</A> we saw how you could
	use the Location object to read in a JavaScript-based page if
	JavaScript is supported, and otherwise simply use a
	non-JavaScript page. You can obviously use this same technique
	to load a JavaScript 1.1 page from a default JavaScript 1.0
	page, or vice versa.
      

<p class=para>
	If we take this idea a couple of steps further, we can come up
	with some interesting variations. <a href="#JSCRIPT-CH-COMPAT-EX-6">Example 18-6</A> shows one such variation. It
	is a short program that tests whether JavaScript 1.1 is
	supported. If so, it uses the
	<tt class=literal>Location.replace()</tt> method to load in a
	JavaScript 1.1 page (recall that using
	<tt class=literal>replace()</tt> prevents the <b>Back</b> button from breaking). If JavaScript
	1.1 is not supported, it displays a message saying so on either
	a JavaScript 1.0 browser or a non-JavaScript browser.
      

<div class=example>
<h4 class=example><a class="TITLE" name="JSCRIPT-CH-COMPAT-EX-6">Example 18-6: A Web Page to Test for JavaScript Compatibility</A></h4>

<div class=programlisting>
<p>
<pre>
&lt;!-- This script jumps to a new page if JavaScript 1.1 is supported --&gt;
&lt;!-- it also set a flag that we can test for below so we don't display --&gt;
&lt;!-- the message during the time the browser is loading the new file --&gt;
&lt;SCRIPT LANGUAGE="JavaScript1.1"&gt; &lt;!--
location.replace(location.search.substring(1)); self.loading = true;
// --&gt; &lt;/SCRIPT&gt;
&lt;!-- Otherwise we display a message, either in HTML or with JavaScript 1.0 --&gt;
&lt;SCRIPT LANGUAGE="JavaScript"&gt;
&lt;!-- --&gt; &lt;HR&gt;&lt;H1&gt;This Page Requires JavaScript 1.1&lt;/H1&gt;
&lt;!-- --&gt; Your non-JavaScript browser cannot run this page.&lt;HR&gt;
&lt;!-- 
  if (!self.loading) {
    document.write('&lt;HR&gt;&lt;H1&gt;This Page Requires JavaScript 1.1&lt;/H1&gt;');
    document.write('Your JavaScript 1.0 browser cannot run this page.&lt;HR&gt;');
  }
// --&gt;
&lt;/SCRIPT&gt;
</PRE>
</DIV>

</DIV>

<p class=para>
	The most interesting thing about this example is that it is a
	generic one--the name of the JavaScript 1.1 file to be loaded is
	encoded in the search portion of the original URL, and that file
	will be loaded only if JavaScript 1.1 is supported. Thus if the
	file in this example had the name
	<tt class=literal>testjs11.html</tt>, then you could use it in URLs
	like the one shown in this hyperlink:
	

<div class=programlisting>
<p>
<pre>
&lt;A HREF="http://my.isp.net/~david/utils/testjs11.html?../js/cooljs11.html"&gt;
Visit my cool JavaScript 1.1 page!
&lt;/A&gt;  
</PRE>
</DIV>


      

<p class=para>
	The other thing to note about <a href="#JSCRIPT-CH-COMPAT-EX-6">Example 18-6</A> is that (at least with
	Navigator 3.0) calling <tt class=literal>Location.replace()</tt>
	starts a new page loading but does not immediately stop the
	current page from executing. Therefore, this example has to set
	a flag when it starts loading the specified JavaScript 1.1 page.
	If this flag is set, then the JavaScript 1.0 code in the example
	will not display the message. If it didn't do this, the message
	would briefly flash on the screen before the JavaScript 1.1 page
	was loaded. For this same reason the example can't simply
	display the compatibility message in a normal HTML
	<tt class=literal>&lt;BODY&gt;</tt>.
      

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch18-SECT2-AUTOID.14">Included Files and Compatibility with Navigator 2.0</A></h3>

<p class=para>
	As we saw in <a href="ch10_01.htm">Chapter 10, <i>Client-Side Program Structure</i></A>, Navigator 3.0
	can use the <tt class=literal>SRC</tt> attribute of the
	<tt class=literal>&lt;SCRIPT&gt;</tt> tag to refer indirectly to a
	file of JavaScript code rather than having that code appear
	directly in the HTML file. This is a very useful thing to do
	for a number of reasons, including modularity, ease of code
	maintenance and reuse, and caching efficiency on the
	client-side. 
      

<p class=para>
	The use of the <tt class=literal>SRC</tt> attribute also makes it
	somewhat easier to fail gracefully and display a message.
	<a href="#JSCRIPT-CH-COMPAT-EX-7">Example 18-7</A> shows how. This example
	relies on the fact that a JavaScript 1.0 browser doesn't
	understand the <tt class=literal>SRC</tt> attribute and tries to
	execute the code between the <tt class=literal>&lt;SCRIPT&gt;</tt>
	and <tt class=literal>&lt;/SCRIPT&gt;</tt> tags.
      

<div class=example>
<h4 class=example><a class="TITLE" name="JSCRIPT-CH-COMPAT-EX-7">Example 18-7: Displaying a Failure Message When Using &lt;SCRIPT SRC=&gt;</A></h4>

<div class=programlisting>
<p>
<pre>
&lt;SCRIPT LANGUAGE="JavaScript" SRC="../javascript/util.js"&gt;
&lt;!-- This is the message for non-JavaScript browsers --&gt;
&lt;!-- --&gt; &lt;H1&gt;Sorry, this page requires Netscape Navigator 3.0&lt;/H1&gt;
&lt;!--  code for Navigator 2.0 browsers here
document.write("&lt;H1&gt;Sorry, this page requires Navigator 3.0.&lt;/H1&gt;");
// --&gt;&lt;/SCRIPT&gt;
</PRE>
</DIV>

</DIV>

<p class=para>
	There are so many good reasons to use the <tt class=literal>SRC</tt>
	attribute that you may find yourself wanting to use it even when
	you are trying to maintain compatibility with JavaScript 1.0.
	In order to do this, you'll have to maintain two separate
	versions of your web page, one that works with JavaScript 1.1
	and one that works with JavaScript 1.0. The default page will
	assume JavaScript 1.1 support and will load the JavaScript code
	with the <tt class=literal>SRC</tt> attribute. If that attribute is
	not recognized, then this default page must arrange to load in
	the other version of the page which has JavaScript 1.0 code
	explicitly included in it. You can do this with a variation on
	code we saw earlier in this chapter. <a href="#JSCRIPT-CH-COMPAT-EX-8">Example 18-8</A> shows what it will look like.
      

<div class=example>
<h4 class=example><a class="TITLE" name="JSCRIPT-CH-COMPAT-EX-8">Example 18-8: Load an Alternate Page When &lt;SCRIPT SRC=&gt; Fails</A></h4>

<div class=programlisting>
<p>
<pre>
&lt;!-- Try to load the JavaScript code with SRC. --&gt;
&lt;SCRIPT SRC="../javascript/utils.js"&gt; &lt;!--
// <tt class=replaceable><i>if the SRC attribute is not recognized, then this code will load</i></tt>
// <tt class=replaceable><i>a compatible version of the page that does not use SRC. The new</i></tt>
// <tt class=replaceable><i>page will have the same name but will be in a directory named "compat/"</i></tt>
var path = location.path;
var filename = path.substring(path.lastIndexOf("/")+1, path.length);
location = "compat/" + filename;
// --&gt;&lt;/SCRIPT&gt;
</PRE>
</DIV>

</DIV>

<p class=para>
	Note that, as we've seen, techniques like this one that rely on
	assigning a new URL to the <tt class=literal>location</tt> property
	break the <b>Back</b> button of the
	browser. Also note that server-side includes (SSI) provide an
	easy way to maintain the two separate versions of a web page
	required by this technique. One file uses the
	<tt class=literal>SRC</tt> attribute to read in its JavaScript code
	on the client side, and the other uses a server-side include to
	read in the JavaScript code on the server side.
      

</DIV>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch18_02.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src="gifs/txthome.gif" alt="Home" border=0></a></td>
<td width=172 align=right valign=top><a href="ch18_04.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Compatibility with Non-JavaScript Browsers</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td>
<td width=172 align=right valign=top>Compatibility Through CGI Scripts</td>
</tr>
</table>

<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
</DIV>

</BODY>
</HTML>
