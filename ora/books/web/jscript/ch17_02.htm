<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 17] 17.2 The Form Object</TITLE>
<meta name="author" content="David Flanagan">
<meta name="date" content="Wed Apr 23 18:22:04 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="JavaScript">
<meta name="title" content="JavaScript: The Definitive Guide">
<!-- JavaScript: pathcont.js -->
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><img src="gifs/smbanner.gif" alt="Javascript: The Definitive Guide"></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch17_01.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b>Chapter 17</b></td>
<td width=172 align=right valign=top><a href="ch17_03.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>
<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="ch17-SECT1-AUTOID.2">17.2 The Form Object</A></h2>

<p class=para>
      The JavaScript Form object represents an HTML form. Forms are
      always found as elements of the <tt class=literal>forms[]</tt>
      array, which is a property of the Document object. Forms appear
      in this array in the order that they appear within the
      document. Thus, <tt class=literal>document.forms[0]</tt> refers to
      the first form in a document, and you can refer to the last form
      in an document with:
      

<div class=programlisting>
<p>
<pre>
document.forms[document.forms.length]
</PRE>
</DIV>


    

<p class=para>
      The most interesting property of the Form object is the
      <tt class=literal>elements[]</tt> array, which contains JavaScript
      objects (of various types) that represent the various input
      elements of the form. Again, elements appear in this array in
      the order that they appear in the document. So
      <tt class=literal>document.forms[1].elements[2]</tt> refers to the
      third element of the second form in the document of the current
      window. 
    

<p class=para>
      The remaining properties of the Form object are of less
      importance. They are <tt class=literal>action</tt>,
      <tt class=literal>encoding</tt>, <tt class=literal>method</tt>, and
      <tt class=literal>target</tt>, and they correspond directly to the
      <tt class=literal>ACTION</tt>, <tt class=literal>ENCODING</tt>,
      <tt class=literal>METHOD</tt>, and <tt class=literal>TARGET</tt>
      attributes of the <tt class=literal>&lt;FORM&gt;</tt> tag. These
      properties and attributes are all used to control how form data
      is submitted to the web server, and where the results are
      displayed, and they are therefore only useful when the form
      actually will be submitted to a CGI script. See the reference
      section for an explanation of the properties, or see a book on
      HTML or CGI programming[2]
      for a thorough discussion of the attributes. What is worth noting
      here is that these Form properties are all read/write strings in
      Navigator 2.0 and 3.0, so a JavaScript program can dynamically set
      their values in order to change the way the form is submitted.
      Unfortunately, while you <i class=emphasis>can</I> set the value of
      these properties in Internet Explorer 3.0, any values you set will
      be ignored.
    

<blockquote class=footnote>
<p class=para>[2] 
	  Such as <i class=emphasis>CGI Programming on the World Wide
	    Web</I>, by Shishir Gundavaram, published by
	  O'Reilly &amp; Associates.
	
</blockquote>
<p class=para>
      In the days before JavaScript, forms were submitted with a
      special-purpose <b>Submit</b> button,
      and the form elements had their values reset with a
      special-purpose <b>Reset</b> button.
      The JavaScript Form object, however, supports two methods,
      <tt class=literal>submit()</tt> and (in Navigator 3.0)
      <tt class=literal>reset()</tt>, which serve this same
      purpose. Invoking the <tt class=literal>submit()</tt> method of a
      Form submits the form, exactly as if the user had clicked on a
      <b>Submit</b> button, and invoking
      <tt class=literal>reset()</tt> resets the form elements, exactly as
      if the user had clicked on a <b>Reset</b> button.
    

<p class=para>
      To accompany the <tt class=literal>submit()</tt> and
      <tt class=literal>reset()</tt> methods, the Form object provides the
      <tt class=literal>onSubmit()</tt> event handler to detect form
      submission, and (in Navigator 3.0) the
      <tt class=literal>onReset()</tt> event handler to detect form
      resets. The <tt class=literal>onSubmit()</tt> handler is invoked
      just before the form is submitted, and can cancel the submission
      by returning <tt class=literal>false</tt>. This provides an
      opportunity for a JavaScript program to check the user's input
      for errors to avoid submitting incomplete or invalid data over
      the network to a CGI program. We'll see an example of doing
      this at the end of this section.
    

<p class=para>
      The <tt class=literal>onReset()</tt> event handler is similar to the
      <tt class=literal>onSubmit()</tt> handler. It is invoked just
      before the form is reset, and may prevent the form elements from
      being reset by returning <tt class=literal>false</tt>. This allows
      a JavaScript program to ask for confirmation of the reset, which
      can be a good idea when the form is long or detailed. You might
      request this sort of confirmation with an event handler like the
      following (recall that <tt class=literal>onReset()</tt> requires
      Navigator 3.0):
      

<div class=programlisting>
<p>
<pre>
&lt;FORM...
     onReset="return confirm('Really erase ALL data and start over?')"
&gt;
</PRE>
</DIV>


    

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch17_01.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src="gifs/txthome.gif" alt="Home" border=0></a></td>
<td width=172 align=right valign=top><a href="ch17_03.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Forms in CGI and JavaScript</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td>
<td width=172 align=right valign=top>Form Elements</td>
</tr>
</table>

<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
</DIV>

</BODY>
</HTML>
