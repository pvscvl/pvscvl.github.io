<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 12] 12.2 Opening and Closing Windows</TITLE>
<meta name="author" content="David Flanagan">
<meta name="date" content="Wed Apr 23 18:15:59 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="JavaScript">
<meta name="title" content="JavaScript: The Definitive Guide">
<!-- JavaScript: pathcont.js -->
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><img src="gifs/smbanner.gif" alt="Javascript: The Definitive Guide"></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch12_01.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b>Chapter 12</b></td>
<td width=172 align=right valign=top><a href="ch12_03.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>
<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="ch12-SECT1-AUTOID.2">12.2 Opening and Closing Windows</A></h2>

<p class=para>
<a name="CH12.WIN1"></A>      Earlier in this chapter we learned about the
      <tt class=literal>Window.open()</tt> and
      <tt class=literal>Window.close()</tt> methods that open and close
      browser windows. As you'll recall, the first argument to the
      <tt class=literal>open()</tt> method specifies a URL to be loaded
      into the new window, or the empty string if the window should be
      blank. The second argument is the name for the window. In
      Navigator, this second argument is optional, but it is required by
      Internet Explorer 3.0.
    

<p class=para>
      The <tt class=literal>open()</tt> method also has an optional third
      argument that we haven't seen yet. This third argument is a
      string that contains a comma-separated list of "features" for
      the new window. These "features" specify whether the window
      will have a menu bar, whether it will display a toolbar, whether
      it will be resizable, and so on. The features may also specify
      what the width and height of the window will be. If you do
      not specify this third argument, you'll get a full-size window
      will all the standard features. If you do specify the argument,
      you get only the features you specify. 
      For example, you could use a line like the following to
      open a 400*300 window with a location field and a status bar:
	

<div class=programlisting>
<p>
<pre>
smallwin = window.open("", "small", "location,status,width=400,height=300");
</PRE>
</DIV>


      The list of available features and complete syntax for the third
      argument is given in the <tt class=literal>Window.open()</tt>
      reference page.
    

<p class=para>
      One common reason to open new browser windows with reduced sizes
      and reduced feature sets is to create "dialog boxes" that are
      more complex than those available through
      <tt class=literal>alert()</tt> and related methods.
      <a href="#JSCRIPT-CH-WINDOWS-FIG-2">Figure 12-2</A> shows such a "dialog
      box" in a small browser window.
    

<div class=figure>
<h4 class=figure><a class="TITLE" name="JSCRIPT-CH-WINDOWS-FIG-2">Figure 12-2: Using a browser window as a dialog box</A></h4>


<p>
<img align=middle src="figs/js1202.gif" alt="[Graphic: Figure 12-2]" width=500 height=366>

</DIV>

<p class=para>
      <a href="#JSCRIPT-CH-WINDOWS-EX-2">Example 12-2</A> shows the code used to
      create the "dialog box" of <a href="#JSCRIPT-CH-WINDOWS-FIG-2">Figure 12-2</A>. This example is a function
      that serves as an error handler. This handler is invoked
      when the JavaScript interpreter detects an error in code it is
      executing. The function we define here creates a new window and
      dynamically generates an HTML document containing
      details about the error and about the platform the error
      occurred on, using an HTML form designed to be
      submitted via email (which provides a way for end users to
      automatically mail bug reports to a program's author).
    

<div class=example>
<h4 class=example><a class="TITLE" name="JSCRIPT-CH-WINDOWS-EX-2">Example 12-2: Reporting JavaScript Errors with a Secondary Window</A></h4>

<div class=programlisting>
<p>
<pre>
&lt;script&gt;
//<tt class=replaceable><i> a variable we use to ensure that each error window we create is unique</i></tt>
var error_count = 0;
//<tt class=replaceable><i> Define the error handler. It generates an HTML form so</i></tt>
//<tt class=replaceable><i> the user can report the error to the author.</i></tt>
function report_error(msg, url, line)
{
   var w = window.open("",                    //<tt class=replaceable><i> URL (none specified)</i></tt>
                       "error"+error_count++, //<tt class=replaceable><i> name (force it to be unique)</i></tt>
                       "resizable,status,width=625,height=400"); //<tt class=replaceable><i> features</i></tt>
   var d = w.document;    //<tt class=replaceable><i> We use this variable to save typing!</i></tt>
   //<tt class=replaceable><i> Output an HTML document, including a form, into the new window.</i></tt>
   d.write('&lt;DIV align=center&gt;');
   d.write('&lt;FONT SIZE=7 FACE="helvetica"&gt;&lt;B&gt;');
   d.write('OOPS.... A JavaScript Error Has Occurred!');
   d.write('&lt;/B&gt;&lt;/FONT&gt;&lt;BR&gt;&lt;HR SIZE=4 WIDTH="80%"&gt;');
   d.write('&lt;FORM ACTION="mailto:david@ora.com" METHOD=post');
   d.write(' ENCTYPE="text/plain"&gt;');
   d.write('&lt;FONT SIZE=3&gt;');
   d.write('&lt;I&gt;Click the "Report Error" button to send a bug report.&lt;/I&gt;&lt;BR&gt;');
   d.write('&lt;INPUT TYPE="submit" VALUE="Report Error"&gt;&amp;nbsp;&amp;nbsp;');
   d.write('&lt;INPUT TYPE="button" VALUE="Dismiss" onClick="self.close()"&gt;');
   d.write('&lt;/DIV&gt;&lt;DIV align=right&gt;');
   d.write('&lt;BR&gt;Your name &lt;I&gt;(optional)&lt;/I&gt;: ');
   d.write('&lt;INPUT SIZE=42 NAME="name" VALUE=""&gt;');
   d.write('&lt;BR&gt;Error Message: ');
   d.write('&lt;INPUT SIZE=42 NAME="message" VALUE="' + msg + '"&gt;');
   d.write('&lt;BR&gt;Document: &lt;INPUT SIZE=42 NAME="url" VALUE="' + url + '"&gt;');
   d.write('&lt;BR&gt;Line Number: &lt;INPUT SIZE=42 NAME="line" VALUE="' + line +'"&gt;');
   d.write('&lt;BR&gt;Browser Version: ');
   d.write('&lt;INPUT SIZE=42 NAME="version" VALUE="'+navigator.userAgent + '"&gt;');
   d.write('&lt;/DIV&gt;&lt;/FONT&gt;');
   d.write('&lt;/FORM&gt;');
   //<tt class=replaceable><i> Remember to close the document when we're done.</i></tt>
   d.close();
   //<tt class=replaceable><i> Return true from this error handler, so that JavaScript does not</i></tt>
   //<tt class=replaceable><i> display its own error dialog.</i></tt>
   return true;
}
//<tt class=replaceable><i> Before the event handler can take effect, we have to register it</i></tt>
//<tt class=replaceable><i> for a particular window.</i></tt>
self.onerror = report_error;
&lt;/script&gt;
&lt;script&gt;
//<tt class=replaceable><i> The following line of code causes the error that creates the dialog </i></tt>
//<tt class=replaceable><i> box shown in the accompanying figure.</i></tt>
self = null;
&lt;/script&gt;
</PRE>
</DIV>

</DIV>

<p class=para>
      <a href="#JSCRIPT-CH-WINDOWS-EX-2">Example 12-2</A>
      demonstrates a number of important techniques for programming
      with windows. First, of course, it shows how you can create a
      window with reduced size and few extraneous features. It also
      shows how this window can close itself when the user clicks the
      "Dismiss" button. Perhaps most important, it demonstrates the
      fundamentally important technique of using JavaScript code
      running in one window to dynamically create an HTML document in
      another window. It does this using the
      <tt class=literal>Document.write()</tt> method, of course, and it
      uses that method to create a relatively complex HTML form in the
      new window. The details of the form are not particularly
      important here--we'll study the Form object and form elements in
      <a href="ch17_01.htm">Chapter 17, <i>Forms and Form Elements</i></A>--what is important is the
      way that the form is dynamically created.
    

<p class=para>
      In addition to the above techniques, <a href="#JSCRIPT-CH-WINDOWS-EX-2">Example 12-2</A> also demonstrates the use of
      the <tt class=literal>Window.onerror()</tt> event handler, and in
      fact, the example consists primarily of an
      <tt class=literal>onerror()</tt> event handler. This event handler
      is new in Navigator 3.0--it is invoked by JavaScript when any
      sort of error occurs in the JavaScript interpreter. The handler
      is passed three arguments that specify the error message, the
      document it occurred in, and the line number it occurred at. It
      can use these arguments to handle the error any way it chooses.
      If the handler returns <tt class=literal>true</tt>, as it does in
      this example, then JavaScript will not display its own error
      message dialog. Because this event handler is passed arguments,
      there is no appropriate syntax for defining it as the value of
      an HTML attribute. For this reason, it must be defined by
      assigning a function to the <tt class=literal>onerror</tt> property
      of a window, in the same way that you would define a method of
      an object.
    

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch12_01.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src="gifs/txthome.gif" alt="Home" border=0></a></td>
<td width=172 align=right valign=top><a href="ch12_03.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Simple Dialogs</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td>
<td width=172 align=right valign=top>The Status Line</td>
</tr>
</table>

<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
</DIV>

</BODY>
</HTML>
