<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 8] 8.5 Array Length Property</TITLE>
<meta name="author" content="David Flanagan">
<meta name="date" content="Thu Apr 24 13:32:34 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="JavaScript">
<meta name="title" content="JavaScript: The Definitive Guide">
<!-- JavaScript: pathcont.js -->
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><img src="gifs/smbanner.gif" alt="Javascript: The Definitive Guide"></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch08_04.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b>Chapter 8</b></td>
<td width=172 align=right valign=top><a href="ch08_06.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>
<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="ch08-SECT1-AUTOID.5">8.5 Array Length Property</A></h2>

<p class=para>
<a name="CH08.LENGTH1"></A><a name="CH08.LENGTH2"></A><a name="CH08.LENGTH3"></A>      As we saw in the previous section, the
      <tt class=literal>Array()</tt> constructor method
      automatically initializes a <tt class=literal>length</tt> property for
      the array you create. When you create an array with this
      constructor (available only in Navigator 3.0 and later) this
      <tt class=literal>length</tt> property is automatically updated by
      JavaScript so that it is always one greater than the largest
      element number in the array. The following code illustrates this:
      

<div class=programlisting>
<p>
<pre>
a = new Array();       //<tt class=replaceable><i> a.length == 0  (no elements defined)</i></tt>
a = new Array(10);     //<tt class=replaceable><i> a.length == 10 (empty elements 0-9 defined)</i></tt>
a = new Array(1,2,3);  //<tt class=replaceable><i> a.length == 3  (elements 0-2 defined)</i></tt>
a[5] = -1;             //<tt class=replaceable><i> a.length == 6  (elements 0,1,2, and 5 defined)</i></tt>
a[49] = 0;             //<tt class=replaceable><i> a.length == 50 (elements 0,1,2,5, and 49 defined)</i></tt>
</PRE>
</DIV>


    

<p class=para>
      The <tt class=literal>length</tt> property of a Navigator 3.0 array is
      not read-only. You can set <tt class=literal>length</tt> to a value
      smaller than its current value; the array will then be shortened
      to the new length--elements will be truncated from the end of the
      array, and their values will be lost. If you change the
      <tt class=literal>length</tt> property so that it is larger than its
      current value, the array will be made larger--new, undefined,
      elements will be added at the end to increase it to the newly
      specified size.
    

<p class=para>
      We've said that arrays are the same data type as objects are, and
      that any object can have array elements. This is true, but in
      Navigator 3.0, arrays created with the <tt class=literal>Array()</tt>
      constructor have features that other objects do not have. One of
      these features is the <tt class=literal>length</tt> property. If you
      create an object with the <tt class=literal>Object()</tt> constructor
      (or a constructor you define yourself) you can assign array
      elements to that object, but that object will not have the special
      <tt class=literal>length</tt> property described in this section.
    

<p class=para>
      Because the <tt class=literal>Array()</tt> constructor and the array
      <tt class=literal>length</tt> property are not available in Navigator
      2.0, JavaScript programs written for Navigator 2.0 often define
      custom array constructor functions that attempt to simulate the
      <tt class=literal>length</tt> property. (To avoid confusion with the
      "real" <tt class=literal>length</tt> property of arrays in 3.0, I
      prefer to name the property <tt class=literal>size</tt> in 2.0.)  We
      saw such an array constructor in <a href="ch08_04.htm">Example 8-1</A>, and will learn more about
      arrays in Navigator 2.0 later in this chapter.
    

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch08-SECT2-AUTOID.4">The length Property and Sparse Arrays</A></h3>

<p class=para>
	But what is the point of the <tt class=literal>length</tt> property to
	begin with?  One obvious feature is that it allows you to loop
	through the elements of an array:
	

<div class=programlisting>
<p>
<pre>
sum = 0;
for(var i = 0; i &lt; arr.length; i++) 
    sum += arr[i];
</PRE>
</DIV>


      

<p class=para>
	This technique only works, of course, if the array in question has
	contiguous elements defined for each index between
	<tt class=literal>0</tt> and <tt class=literal>length-1</tt>. Since
	arrays in JavaScript are associative, sparse arrays, array
	elements do not have to be defined in contiguous blocks, like they
	do in C and related languages. For example, consider the code we
	saw above:
      

<div class=programlisting>
<p>
<pre>
a = new Array();
a[5] = -1;
a[49] = 0;
</PRE>
</DIV>

<p class=para>
	
	These lines of code define an array with two elements, one with
	index 5 and one with index 49. There are not any elements
	defined at indexes 0 through 4 and 6 through 48. An array like
	this with non-contiguous elements is sometimes called a "sparse"
	array. By contrast, an array with contiguous elements is
	sometimes called a "dense" array.[2]
      

<blockquote class=footnote>
<p class=para>[2] 
	    Note though that the terms "sparse" and "dense" may also refer
	    to the underlying implementation of the array, rather than to
	    how you use it. JavaScript's arrays are implemented as sparse
	    arrays, regardless of how you use them in any particular case.
	  
</blockquote>
<p class=para>
	When you are programming in JavaScript, you will typically use
	dense arrays with contiguous elements, if for no other reason
	than that you probably learned to program with languages that did not
	directly support sparse arrays.
      

</DIV>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch08_04.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src="gifs/txthome.gif" alt="Home" border=0></a></td>
<td width=172 align=right valign=top><a href="ch08_06.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Creating Arrays</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td>
<td width=172 align=right valign=top>Array Methods</td>
</tr>
</table>

<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
</DIV>

</BODY>
</HTML>
