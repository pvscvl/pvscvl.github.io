<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 19] 19.8 Summary</TITLE>
<meta name="author" content="David Flanagan">
<meta name="date" content="Wed Apr 23 18:25:08 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="JavaScript">
<meta name="title" content="JavaScript: The Definitive Guide">
<!-- JavaScript: pathcont.js -->
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><img src="gifs/smbanner.gif" alt="Javascript: The Definitive Guide"></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch19_07.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b>Chapter 19</b></td>
<td width=172 align=right valign=top><a href="ch20_01.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>
<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="ch19-SECT1-AUTOID.8">19.8 Summary</A></h2>

<p class=para>
      LiveConnect allows JavaScript and Java to cooperate through two
      fairly separate and symmetrical systems. In JavaScript, the
      JavaPackage, JavaClass, JavaObject, JavaArray, and JavaMethod
      objects all allow JavaScript to read and write Java properties
      and arrays and to invoke Java methods. In Java, the
      <i class=emphasis>netscape.javascript.JSObject</I> class allows
      Java programs to read and write properties of JavaScript objects
      and elements of JavaScript arrays, to invoke JavaScript
      functions, and evaluate strings of JavaScript code. The
      following two subsections summarize these two halves of
      LiveConnect.
    

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch19-SECT2-AUTOID.17">JavaScript to Java</A></h3>

<ul class=itemizedlist>
<li class=listitem> The JavaClass, JavaObject, JavaArray, and
	    JavaMethod objects allow transparent communication between
	    JavaScript and Java--they handle data conversion and
	    all the tricky behind-the-scenes work. 

<p>
<li class=listitem> The data conversions performed when JavaScript
	    reads and writes Java values are illustrated in <a href="ch19_03.htm">Figure 19-2</A> and <a href="ch19_03.htm">Figure 19-3</A>. 

<p>
<li class=listitem> Most Java objects are converted to JavaScript
	    JavaObject objects. JavaObjects behave differently than
	    other JavaScript objects, and need to be handled with care.
	    In particular, JavaObjects are converted to numeric, Boolean
	    and string values differently than other JavaScript types
	    are. 

<p>
<li class=listitem> You can use the JavaPackage objects referred to
	    by the Window properties <tt class=literal>Packages</tt>,
	    <tt class=literal>java</tt>, <tt class=literal>sun</tt>, and
	    <tt class=literal>netscape</tt> to obtain a JavaClass object for
	    any of the standard classes built in to Navigator. The
	    JavaClass object allows you to read and write static
	    properties and invoke static methods of a class.
	    

<p>
<li class=listitem> You can use the <tt class=literal>new</tt> operator
	    on a JavaClass object to create a new Java object and a
	    JavaScript JavaObject wrapper for it. You can use this
	    JavaObject to read and write instance fields and invoke
	    instance methods. 

<p>
<li class=listitem> You can use the
	    <tt class=literal>getClass()</tt> function to obtain a
	    JavaClass object corresponding to the Java class of a
	    JavaObject object. 

<p>
<li class=listitem> You can "script" Java directly from JavaScript
	    simply by working with the predefined classes. But this
	    technique is limited--no significant user interaction
	    with a "scripted" Java program is possible.
	    

<p>
<li class=listitem> You can also use the
	    <tt class=literal>document.applets[]</tt> array and the
	    JavaObject objects it contains to interact with applets.
	    Manipulating the fields and methods of a custom-written
	    applet allows a richer set of possibilities than simply
	    scripting with the basic Java classes. 

<p>
<li class=listitem> You can use the
	    <tt class=literal>document.embeds[]</tt> array and the
	    JavaObjects it contains to interact with the plug-ins that
	    are displaying embedded data in the document. You can
	    control plug-ins through vendor-specific Java APIs.
	    

<p>
</UL>
</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch19-SECT2-AUTOID.18">Java to JavaScript</A></h3>

<ul class=itemizedlist>
<li class=listitem>	    The <i class=emphasis>netscape.javascript.JSObject</I>
	    class is the Java equivalent of the JavaScript JavaObject
	    class. It handles data conversion and all the
	    behind-the-scenes work to allow Java code to communicate
	    with JavaScript.
	  

<p>
<li class=listitem>	    The data conversions performed when Java reads and writes
	    JavaScript data are illustrated in
	    <a href="ch19_06.htm">Figure 19-5</A> and
	    <a href="ch19_06.htm">Figure 19-6</A>.
	  

<p>
<li class=listitem>	    The <tt class=literal>getMember()</tt> and
	    <tt class=literal>getSlot()</tt> methods of a JSObject allow
	    Java to read JavaScript object properties and array elements.
	  

<p>
<li class=listitem>	    The <tt class=literal>setMember()</tt> and
	    <tt class=literal>setSlot()</tt> methods allow Java to set the
	    value of JavaScript object properties and array elements.
	  

<p>
<li class=listitem>	    The <tt class=literal>call()</tt> method of a JSObject allows
	    Java to invoke JavaScript functions.
	  

<p>
<li class=listitem>	    The <tt class=literal>eval()</tt> method of a JSObject allows
	    Java to pass an arbitrary string of JavaScript code to the
	    JavaScript interpreter for execution. This method is often
	    easier to use than the other JSObject methods.
	  

<p>
<li class=listitem> An applet that uses the JSObject class must
	    import it with an <tt class=literal>import</tt> statement. To
	    compile the applet, the <tt class=literal>CLASSPATH</tt>
	    environment variable must be set to include the Java classes
	    supplied by Netscape.
	  

<p>
<li class=listitem>	    In order to interact with JavaScript, an applet must be
	    embedded in an HTML document with an
	    <tt class=literal>&lt;APPLET&gt;</tt> tag that includes the
	    <tt class=literal>MAYSCRIPT</tt> attribute.
	  

<p>
</UL>
</DIV>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch19_07.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src="gifs/txthome.gif" alt="Home" border=0></a></td>
<td width=172 align=right valign=top><a href="ch20_01.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Working with Java in Internet Explorer</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td>
<td width=172 align=right valign=top>JavaScript Security</td>
</tr>
</table>

<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
</DIV>

</BODY>
</HTML>
