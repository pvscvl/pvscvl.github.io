<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 7] 7.5 Classes in JavaScript</TITLE>
<meta name="author" content="David Flanagan">
<meta name="date" content="Wed Apr 23 18:08:57 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="JavaScript">
<meta name="title" content="JavaScript: The Definitive Guide">
<!-- JavaScript: pathcont.js -->
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><img src="gifs/smbanner.gif" alt="Javascript: The Definitive Guide"></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch07_04.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b>Chapter 7</b></td>
<td width=172 align=right valign=top><a href="ch07_06.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>
<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="ch07-SECT1-AUTOID.5">7.5 Classes in JavaScript</A></h2>

<p class=para>
<a name="CH07.CLASS1"></A>      Although JavaScript supports a data type we call an "object", the
      language's lack of strong typing and a formal inheritance
      mechanism mean that it is not a truly object-oriented language.
      Still, JavaScript does a good job of simulating the features of
      object-oriented languages like Java and C++. For example, we've
      been using the term "class" in the last few sections of this
      chapter, despite the fact that JavaScript does not officially
      define or support classes. This section will explore some of the
      parallels between JavaScript and the true object-oriented features
      of Java and C++.
    

<p class=para>
      We start by defining some basic terminology. An object, as we've
      already seen, is a data structure that "contains" various pieces
      of named data, and may also contain various methods to operate on
      those pieces of data. An object groups related data values and
      methods into a single convenient package, which generally makes
      programming easier, by increasing the modularity and reusability
      of code. Objects in JavaScript may have any number of properties,
      and properties may be added to an object dynamically. This is not
      the case in strictly typed languages like Java and C++--in those
      languages, each object has a predefined set of properties, (or
      fields, as they are often called) and each property contains a
      value of a predefined type. So when we are using JavaScript
      objects to simulate object-oriented programming techniques, we
      will generally define in advance the set of properties that each
      object will have, and the type of data that each property will
      hold.
    

<p class=para>
      In Java and C++, a <i class=emphasis>class</I> is thing that
      defines the structure of an object. It is the class that
      specifies exactly what fields an object contains, and what types
      of data each holds. It is also the class that defines the methods
      that operate on an object. JavaScript does not have a formal
      notion of a class, but, as we've seen, it approximates classes
      with its constructors. A constructor function can create a
      standard set of properties for each object it initializes.
      Similarly, in Navigator 3.0, the prototype object associated with
      the constructor can define the methods and constants that will be
      shared by each object initialized by the constructor.
    

<p class=para>
      In both JavaScript and true object-oriented languages, there may
      be multiple objects of the same class. We often say that an
      object is an <i class=emphasis>instance</I> of its class. Thus,
      there may be many instances of any class. Sometimes we use the
      term <i class=emphasis>instantiate</I> to describe the process of
      creating an object (an instance of a class).
    

<p class=para>
      In Java, it is a common programming convention to name classes with
      an initial capital letter, and to name objects with lower case
      letters. This helps to keep classes and objects distinct from
      each other in our code, and this is a useful convention to follow
      in JavaScript programming as well. In previous sections, for
      example, we've defined the <tt class=literal>Circle</tt> and
      <tt class=literal>Rectangle</tt> "classes," for example, and have
      created instances of those classes named <tt class=literal>c</tt> and
      <tt class=literal>rect</tt>.
    

<p class=para>
      The fields defined by a Java class may be of four basic types:
      "instance" variables, "instance" methods, "static" or "class"
      variables, and "static" or "class" methods. The paragraphs below
      explain the differences between these types of fields, and show
      how they are simulated in JavaScript.
    

<p class=para>
      An "instance variable" is a variable of an instance, or object.
      It is a variable contained in an object. Each object has its own
      separate copy of this variable; if there are ten objects of a
      given class, then there are ten copies of this variable. In our
      Circle class, for example, every circle object has a
      <tt class=literal>r</tt> property that specifies the radius of the
      circle. In this case <tt class=literal>r</tt> is an instance
      variable. Since each object has its own copy of instance
      variables, these variables are accessed through individual
      objects. If <tt class=literal>c</tt> is an object that is an instance
      of the Circle class, for example, then we refer to its radius as:
<div class=programlisting>
<p>
<pre>
c.r
</PRE>
</DIV>


      By default, any object property in JavaScript is an instance
      variable, but to truly simulate object-oriented programming, we
      will say that instance variables in JavaScript are those
      properties that are created and/or initialize in an object by the
      constructor function. 
    

<p class=para>
      An "instance method" is much like an "instance variable" except
      that it is a method rather than a data value. (In Java, functions
      and methods are not data types, as they are in JavaScript, so this
      distinction is more clear). Instance methods are invoked on a
      particular "instance" or object. The <tt class=literal>area()</tt>
      method of our Circle class is an instance method. It is invoked
      on a Circle object <tt class=literal>c</tt> like this:
      

<div class=programlisting>
<p>
<pre>
a = c.area();
</PRE>
</DIV>


      Instance methods use the <tt class=literal>this</tt> keyword to refer
      to the object or instance they are operating on. An instance
      method can be invoked for any instance of a class, but this does
      not mean that each object contains its own private copy of the
      method, as it does its instance variables. Instead, each instance
      method is shared by all instances of a class. In JavaScript, we
      define an instance method for a class by setting a property in the
      constructor's prototype object to a function value. This way, all
      objects created by that constructor share a reference to the
      function, and can invoke it using the method invocation syntax
      shown above. (Prior to Navigator 3.0, instance methods can be
      defined in a constructor function, as instance variables are; this
      is less efficient, though.)
    

<p class=para>
      A "class" or "static" variable in Java is a variable that is
      associated with a class itself, rather than with each instance of
      a class. No matter how many instances of the class are created,
      there is only one copy of each class variable. Just as instance
      variables are accessed through an instance of a class, class
      variables are accessed through the class itself.
      <tt class=literal>Number.MAX_VALUE</tt> is an example of a class
      variable in JavaScript--the <tt class=literal>MAX_VALUE</tt> property
      is accessed through the <tt class=literal>Number</tt> class. Because
      there is only one copy of each class variable, class variables are
      essentially global variables. What is nice about them, however,
      is that by being associated with a class, they have a logical
      niche, a position in the JavaScript name space, where they are not
      likely to be overwritten by other variables with the same name.
      As is probably clear, we simulate a class variable in JavaScript
      simply by defining a property of the constructor function itself.
      For example, to create a class variable
      <tt class=literal>Circle.PI</tt> to store the mathematical constant,
      often used with circles, we could do the following:
      

<div class=programlisting>
<p>
<pre>
Circle.PI = 3.14;
</PRE>
</DIV>


    

<p class=para>
      Finally, we come to class methods. A "class" or "static" method
      is a method associated with a class rather than with an instance
      of a class. Class methods are invoked through the class, rather
      than through a particular instance of the class.
      <tt class=literal>Math.sqrt()</tt>, <tt class=literal>Math.sin()</tt>, and
      other methods of the <tt class=literal>Math</tt> object are class
      methods. Because class methods are not invoked through a
      particular object, they cannot use the <tt class=literal>this</tt>
      keyword--<tt class=literal>this</tt> refers to the object that an
      <i class=emphasis>instance</I> method is invoked for. Like class
      variables, class methods are "global." Because they do not
      operate on a particular object, static methods can often more
      easily be thought of as functions that happen to be invoked
      through a class. Again, associating these functions with a class
      gives them a convenient niche in the JavaScript name space, and
      prevents "name space collisions" from occurring in case some other
      class happens to define a function with the same name. To define
      a class method in JavaScript, we simply set the appropriate
      function as a property of the constructor.
    

<p class=para>
      <a href="#JSCRIPT-CH-OBJECTS-EX-5">Example 7-5</A> is a re-implementation of
      our Circle class that contains examples of each of these four
      basic types of fields.
    

<div class=example>
<h4 class=example><a class="TITLE" name="JSCRIPT-CH-OBJECTS-EX-5">Example 7-5: Defining Instance/Class Variables and Methods</A></h4>

<div class=programlisting>
<p>
<pre>
function Circle(radius) {   //<tt class=replaceable><i> the constructor defines the class itself</i></tt>
    //<tt class=replaceable><i> r is an instance variable; defined and initialized in the constructor</i></tt>
    this.r = radius;    
}
//<tt class=replaceable><i> Circle.PI is a class variable--it is a property of the constructor function</i></tt>
Circle.PI = 3.14159;
//<tt class=replaceable><i> Here is a function that computes a circle area.</i></tt>
function Circle_area() { return Circle.PI * this.r * this.r; }
//<tt class=replaceable><i> Here we make the function into an instance method by assigning it</i></tt>
//<tt class=replaceable><i> to the prototype object of the constructor. Remember that we have to</i></tt>
//<tt class=replaceable><i> create and discard one object before the prototype object exists</i></tt>
new Circle(0);
Circle.prototype.area = Circle_area;
//<tt class=replaceable><i> Here's another function. It takes two circle objects are arguments and</i></tt>
//<tt class=replaceable><i> returns the one that is larger (has the larger radius). </i></tt>
function Circle_max(a,b) {
    if (a.r &gt; b.r) return a;
    else return b;
}
//<tt class=replaceable><i> Since this function compares two circle objects, it doesn't make sense as </i></tt>
//<tt class=replaceable><i> an instance method operating on a single circle object. But we don't want</i></tt>
//<tt class=replaceable><i> it to be a standalone function either, so we make it into a class method</i></tt>
//<tt class=replaceable><i> by assigning it to the constructor function:</i></tt>
Circle.max = Circle_max;
//<tt class=replaceable><i> Here is some code that uses each of these fields:</i></tt>
c = new Circle(1.0);       //<tt class=replaceable><i> create an instance of the Circle class</i></tt>
c.r = 2.2;                 //<tt class=replaceable><i> set the r instance variable</i></tt>
a = c.area();              //<tt class=replaceable><i> invoke the area() instance method </i></tt>
x = Math.exp(Circle.PI);   //<tt class=replaceable><i> use the PI class variable in our own computation.</i></tt>
d = new Circle(1.2);       //<tt class=replaceable><i> create another Circle instance</i></tt>
bigger = Circle.max(c,d);  //<tt class=replaceable><i> use the max() class method.</i></tt>
</PRE>
</DIV>

</DIV>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch07_04.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src="gifs/txthome.gif" alt="Home" border=0></a></td>
<td width=172 align=right valign=top><a href="ch07_06.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Object Prototypes</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td>
<td width=172 align=right valign=top>Objects as Associative Arrays</td>
</tr>
</table>

<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
</DIV>

</BODY>
</HTML>
