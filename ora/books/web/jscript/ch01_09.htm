<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 1] 1.9 Exploring JavaScript</TITLE>
<meta name="author" content="David Flanagan">
<meta name="date" content="Wed Apr 23 18:00:33 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="JavaScript">
<meta name="title" content="JavaScript: The Definitive Guide">
<!-- JavaScript: pathcont.js -->
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><img src="gifs/smbanner.gif" alt="Javascript: The Definitive Guide"></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch01_08.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b>Chapter 1</b></td>
<td width=172 align=right valign=top><a href="ch02_01.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>
<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="ch01-SECT1-AUTOID.9">1.9 Exploring JavaScript</A></h2>

<p class=para>
      The way to really learn a new programming language is to write
      programs with it. As you read through this book, I encourage you
      to try out JavaScript features as you learn about them. There are a
      number of ways you can do this, and a number of techniques that
      make it easy to experiment with JavaScript.
    

<p class=para>
      
      The most obvious way to explore JavaScript is to write simple
      scripts. JavaScript has powerful enough features that even simple
      programs, only a few lines long, can produce complex results. We
      saw an example that computed factorials at the beginning of this
      chapter. Suppose you wanted to modify it as follows to display
      Fibonacci numbers instead:
    

<div class=programlisting>
<p>
<pre>
&lt;SCRIPT&gt;
document.write("&lt;h2&gt;Table of Fibonacci Numbers&lt;/h2&gt;");
for(i=0,j=1,k=0,fib=1; i&lt;50; i++,fib=j+k,k=j,j=fib) {
    document.write("Fibonacci(" + i + ") = " + fib);
    document.write("&lt;br&gt;");
}
&lt;/SCRIPT&gt;
</PRE>
</DIV>

<p class=para>
      This code may be convoluted (and don't worry if you don't yet
      understand it) but the point is that when you want to experiment
      with short programs like this, you can simply type them up and try
      them out in your web browser using a local
      <tt class=literal>file:</tt> URL. For simple JavaScript experiments
      like this, you can usually omit the
      <tt class=literal>&lt;HTML&gt;</tt>, <tt class=literal>&lt;HEAD&gt;</tt>,
      and <tt class=literal>&lt;BODY&gt;</tt> tags in your HTML file, and
      you can even omit the <tt class=literal>LANGUAGE="JavaScript"</tt>
      attribute that you would include in the
      <tt class=literal>&lt;SCRIPT&gt;</tt> tag of any production code you
      wrote.
    

<p class=para>
      For even simpler experiments with JavaScript, you can sometimes
      use the <tt class=literal>javascript:</tt> URL pseudo-protocol to
      evaluate a JavaScript expression and return the result. A
      JavaScript URL consists of the <tt class=literal>javascript:</tt>
      protocol specifier followed by arbitrary JavaScript code (with
      statements separated from one another by semicolons). When the
      browser "loads" such a URL, it executes the JavaScript code. The
      value of the last expression in such a URL is converted to a
      string, and this string becomes the "document" specified by the
      URL. For example, you might type the following JavaScript URLs
      into the <b>Location</b> field of your web
      browser to test your understanding of some of JavaScript's
      operators and statements:
    

<div class=programlisting>
<p>
<pre>
javascript:5%2
javascript:x = 3; (x &lt; 5)? "x is less": "x is greater"
javascript:d = new Date(); typeof d;
javascript:for(i=0,j=1,k=0,fib=1; i&lt;10; i++,fib=j+k,k=j,j=fib) alert(fib);
</PRE>
</DIV>

<p class=para>
      While you can type these URLs directly into the <b>Location</b> field of Navigator, you cannot do
      the same in Internet Explorer 3.0. These URLs will work correctly
      in IE 3.0 in hypertext links and the like, but they cannot be
      entered directly.
    

<p class=para>
      In Navigator 2.0 and 3.0 (but not Internet Explorer 3.0), if you
      specify the URL <tt class=literal>javascript:</tt> by itself,
      Navigator will display a JavaScript interpreter screen, and
      JavaScript code entered into the input field in the lower frame
      will be evaluated and the results displayed in the upper frame.
      <a href="#JSCRIPT-CH-INTRO-FIG-4">Figure 1-4</A> shows this special
      interpreter screen, with some example code evaluated. In this
      case, the JavaScript code shown pops up a dialog box that displays
      the name and value of each of the properties of the browser
      window.
    

<div class=figure>
<h4 class=figure><a class="TITLE" name="JSCRIPT-CH-INTRO-FIG-4">Figure 1-4: The javascript: interpreter screen</A></h4>


<p>
<img align=middle src="figs/js0104.gif" alt="[Graphic: Figure 1-4]" width=500 height=681>

</DIV>

<p class=para>
      <a href="#JSCRIPT-CH-INTRO-FIG-4">Figure 1-4</A> also shows some other
      useful techniques for experimenting with JavaScript. First, it
      shows the use of the <tt class=literal>alert()</tt> function to
      display text. This function pops up a dialog box and displays
      plain text (i.e., not HTML formatted) within it. It also
      demonstrates the <tt class=literal>for/in</tt> loop, which loops
      through all the properties of an object. This is quite useful
      when trying to discover which objects have what
      properties. The <tt class=literal>for/in</tt> loop is documented in
      <a href="ch05_01.htm">Chapter 5, <i>Statements</i></A>.
    

<p class=para>
      While exploring JavaScript, you will probably write code that
      doesn't work as you expect it to, and will want to debug it. The basic
      debugging technique for JavaScript is like that in many other
      languages--insert statements into your code to print out the value
      of relevant variables so that you can try to figure out what is
      actually happening. As we've seen, you can sometimes use the
      <tt class=literal>document.write()</tt> method to do this. This
      method doesn't work from within event handlers, however, and has
      some other shortcomings as well, so it's often easier to use
      the <tt class=literal>alert()</tt> method to display debugging
      messages in a separate dialog box.
    

<p class=para>
      The <tt class=literal>for/in</tt> loop mentioned above is also very
      useful when debugging. You can use it, along with the
      <tt class=literal>alert()</tt> method to write a function that
      displays a list of the names and values of all properties of an
      object, for example. This kind of function can be quite handy
      when exploring the language or trying to debug code.
    

<p class=para>
      Good luck with JavaScript, and have fun exploring!
    

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch01_08.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src="gifs/txthome.gif" alt="Home" border=0></a></td>
<td width=172 align=right valign=top><a href="ch02_01.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Using the Rest of This Book</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td>
<td width=172 align=right valign=top>Lexical Structure</td>
</tr>
</table>

<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
</DIV>

</BODY>
</HTML>
