<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 4] 4.9 Miscellaneous Operators</TITLE>
<meta name="author" content="David Flanagan">
<meta name="date" content="Wed Apr 23 18:05:02 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="JavaScript">
<meta name="title" content="JavaScript: The Definitive Guide">
<!-- JavaScript: pathcont.js -->
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><img src="gifs/smbanner.gif" alt="Javascript: The Definitive Guide"></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch04_08.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b>Chapter 4</b></td>
<td width=172 align=right valign=top><a href="ch05_01.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>
<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="ch04-SECT1-AUTOID.9">4.9 Miscellaneous Operators</A></h2>

<p class=para>
      JavaScript supports a number of other miscellaneous operators,
      described in the sections below.
    

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch04-SECT2-AUTOID.30">The Conditional Operator (?:)</A></h3>

<p class=para>
	The conditional operator is the only ternary operator (three
	operands) in JavaScript and is sometimes actually called the
	ternary operator. This operator is sometimes written
	<tt class=literal>?:</tt>, although it does not appear quite that
	way in code. Because this operator has three operands, the first
	goes before the <tt class=literal>?</tt>, the second goes between
	the <tt class=literal>?</tt> and the <tt class=literal>:</tt>, and the
	third goes after the <tt class=literal>:</tt>. It is used like this:
      

<div class=programlisting>
<p>
<pre>
x &gt; 0 ? x*y : -x*y
</PRE>
</DIV>

<p class=para>
	The first operand of the conditional operator must have a
	Boolean value--usually this is the result of a comparison
	expression. The second and third operands may have any
	value. The value returned by the conditional operator depends on
	the Boolean value of the first operand. If that operand is
	<tt class=literal>true</tt>, then the value of the conditional
	expression is the value of the second operand. If the first
	operand is <tt class=literal>false</tt>, then the value is the value
	of the third operand.
      

<p class=para>
	While you can achieve similar results using the
	<tt class=literal>if</tt> statement, the <tt class=literal>?:</tt>
	operator is a very handy shortcut in many cases. Here is a
	typical usage, which checks to be sure that a variable is
	defined, uses it if so, and provides a default value if not.
	

<div class=programlisting>
<p>
<pre>
greeting = "hello " + ((name != null) ? name : "there");
</PRE>
</DIV>


	This is equivalent to, but more compact than, the following
	<tt class=literal>if</tt> statement:
	

<div class=programlisting>
<p>
<pre>
greeting = "hello ";
if (name != null) 
    greeting += name;
else 
    greeting += "there";
</PRE>
</DIV>


      

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch04-SECT2-AUTOID.31">The typeof Operator</A></h3>

<p class=para>
	The <tt class=literal>typeof</tt> operator is available in
	Navigator 3.0 and Internet Explorer 3.0.
	<tt class=literal>typeof</tt> is an unusual operator because it is
	not represented by punctuation characters but instead by the
	<tt class=literal>typeof</tt> keyword. It is a unary operator that
	is placed before its single operand, which can be of any
	type. The value of the <tt class=literal>typeof</tt> operator is a
	string indicating the data type of the operand.[2]
      

<blockquote class=footnote>
<p class=para>[2] 
            This means that <tt class=literal>typeof typeof</tt>
	    <tt class=replaceable><i>x</i></tt>, where
	    <tt class=replaceable><i>x</i></tt> is any value, will always
	    yield the value <tt class=literal>"string"</tt>.
	  
</blockquote>
<p class=para>
	Possible values are <tt class=literal>"number"</tt>,
	<tt class=literal>"string"</tt>, <tt class=literal>"boolean"</tt>,
	<tt class=literal>"object"</tt>, <tt class=literal>"function"</tt>,
	and <tt class=literal>"undefined"</tt> for undefined values. Both
	arrays and objects return the <tt class=literal>"object"</tt>
	value. <tt class=literal>typeof</tt> may be used as follows:
	

<div class=programlisting>
<p>
<pre>
typeof i
(typeof value == "string") ? "'" + value + "'" : value
</PRE>
</DIV>


      

<p class=para>
	Note that you can place parentheses around the operand to
	<tt class=literal>typeof</tt>, which will make
	<tt class=literal>typeof</tt> look like the name of a function
	rather than an operator keyword:
	

<div class=programlisting>
<p>
<pre>
typeof(i)
</PRE>
</DIV>


      

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch04-SECT2-AUTOID.32">Object Creation Operator (new)</A></h3>

<p class=para>
	As we saw earlier, numbers, strings, and Boolean values are
	represented through textual literals in JavaScript. That is, you
	just type their string representation into your program, and
	then your program can manipulate that value. As we'll see later,
	you can use the <tt class=literal>function</tt> keyword to define
	functions that your program can work with. But JavaScript
	supports two other data types as well--objects and
	arrays. Object and array values cannot simply be typed into your
	JavaScript programs; they must be created. The
	<tt class=literal>new</tt> operator is used to do this.
      

<p class=para>
	The <tt class=literal>new</tt> operator is one, like
	<tt class=literal>typeof</tt>, that is represented by a keyword
	rather than by special punctuation characters. This is a unary
	operator that appears before its operand. It has the following
	syntax:
	

<div class=programlisting>
<p>
<pre>
new <i class=emphasis>constructor</I>
</PRE>
</DIV>


	<i class=emphasis>constructor</I> must be a function-call
	expression (i.e., it must include an expression that refers to a
	function, and this function should be followed by an optional
	argument list in parentheses). As a special case, for this
	<tt class=literal>new</tt> operator only, JavaScript simplifies the
	grammar by allowing the parentheses to be omitted if there are
	no arguments in the function call. Example uses of the
	<tt class=literal>new</tt> operator are:
	

<div class=programlisting>
<p>
<pre>
o = new Object;   //<tt class=replaceable><i> optional parentheses omitted here</i></tt>
d = new Date();
c = new rectangle(3.0, 4.0, 1.5, 2.75);
obj[i] = new constructors[i]();
</PRE>
</DIV>


      

<p class=para>
	The <tt class=literal>new</tt> operator works as follows: first, it
	creates a new object with no properties defined. Next, it invokes
	the specified constructor function, passing the specified
	arguments, and passing the newly created object as the value of
	the <tt class=literal>this</tt> keyword. The constructor function
	can then use the <tt class=literal>this</tt> keyword to initialize
	the new object in any way desired. We'll learn more about the
	<tt class=literal>this</tt> keyword and about constructor functions
	in <a href="ch07_01.htm">Chapter 7, <i>Objects</i></A>.
      

<p class=para>
	In Navigator 3.0, you create a JavaScript array with the
	<tt class=literal>new Array()</tt> syntax. In Navigator
	2.0, there is not an <tt class=literal>Array()</tt>
	constructor function defined. In this version of JavaScript,
	you can create an array with the
	<tt class=literal>Object()</tt> constructor instead. Some
	programs will define their own custom
	<tt class=literal>Array()</tt> constructor.
      

<p class=para>
	We'll see more about creating and working with objects and
	arrays in <a href="ch07_01.htm">Chapter 7, <i>Objects</i></A> and
	<a href="ch08_01.htm">Chapter 8, <i>Arrays</i></A>.
      

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch04-SECT2-AUTOID.33">The delete Operator</A></h3>

<p class=para>
        If you are a C++ programmer, then you probably expect
        JavaScript to have a <tt class=literal>delete</tt> operator that
        destroys objects created with the <tt class=literal>new</tt>
        operator.  JavaScript does have such an operator, but it does
        not behave in the same way the C++ <tt class=literal>delete</tt>.
        In Navigator 2.0 and 3.0, <tt class=literal>delete</tt> simply
        sets its operand (a variable, object property, or array
        element) to <tt class=literal>null</tt>.  You could obviously do
        this with an assignment statement just as easily, and in fact,
        <tt class=literal>delete</tt> is depricated in Navigator 2.0 and
        3.0; you should not use it at all.  This mostly-useless
        version of the operator was created in a beta version of
        Navigator 2.0, and never quite got removed from the language.
        In Navigator 4.0, however, we can expect to see a new,
        non-depricated, <tt class=literal>delete</tt> operator which is
        more functional--it will actually delete, or undefine a
        variable or object property.
      

<p class=para>
	 Note that even this new Navigator 4.0
         <tt class=literal>delete</tt> operator will not be the same as
         the C++ <tt class=literal>delete</tt>--it simply undefines a
         variable or property, and does not actually delete or destroy
         or free up the memory associated with an object created with
         <tt class=literal>new</tt>.  The reason that a C++-style
         <tt class=literal>delete</tt> is not necessary is that JavaScript
         provides automatic "garbage collection"--when objects and
         other values are no longer being used, the memory associated
         with them is automatically reclaimed by the system. You don't
         have to worry about deleting objects or freeing or releasing
         memory that is no longer in use.  Garbage collection in
         JavaScript is discussed in more detail in <a href="ch11_01.htm">Chapter 11, <i>Windows and the JavaScript Name Space</i></A>.
      

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch04-SECT2-AUTOID.34">The void Operator</A></h3>

<p class=para>
	The <tt class=literal>void</tt> operator is supported in
	Navigator 3.0, but not in Internet Explorer 3.0. IE will
	support it in a future version.
      

<p class=para>
	<tt class=literal>void</tt> is a unary operator that appears before
	an expression with any value. The purpose of this operator is
	an unusual one: it always discards its operand value and simply
	returns an undefined value. The only occasion on which you are
	likely to want to do this is in a <tt class=literal>javascript:</tt>
	URL, in which you want to evaluate an expression for its side
	effects, but do not want the browser to display the value of the
	evaluated expression. Thus, you might use the
	<tt class=literal>void</tt> operator in HTML like the following:
	

<div class=programlisting>
<p>
<pre>
&lt;A HREF="javascript:void document.form1.submit();"&gt;Submit Form&lt;/A&gt;
</PRE>
</DIV>


      

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch04-SECT2-AUTOID.35">The Comma Operator (,)</A></h3>

<p class=para>
	The comma operator is a simple one. It evaluates its left
	argument, evaluates its right argument, and then returns the
	value of its right argument. Thus, this line:
	

<div class=programlisting>
<p>
<pre>
i=0, j=1, k=2;
</PRE>
</DIV>


	is equivalent to:
	

<div class=programlisting>
<p>
<pre>
i = 0;
j = 1;
k = 2;
</PRE>
</DIV>


      

<p class=para>
	This strange operator is useful only in a few limited
	circumstances in which you need to evaluate several independent
	expressions with side effects in a situation where only a single
	expression is allowed. In practice, the comma operator is only
	frequently used in conjunction with the <tt class=literal>for</tt>
	loop statement, which we'll see later in <a href="ch05_01.htm">Chapter 5, <i>Statements</i></A>.
      

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch04-SECT2-AUTOID.36">Array and Object Access Operators</A></h3>

<p class=para>
	As noted briefly in <a href="ch03_01.htm">Chapter 3, <i>Variables and Data Types</i></A>, you can
	access elements of an array using square brackets
	<tt class=literal>[]</tt>, and you can access elements of an
	object using a dot (<tt class=literal>.</tt>); both of these are
	treated as operators in JavaScript.
      

<p class=para>
	The <tt class=literal>.</tt> operator expects an object as its left
	operand, and the name of an object property or method as the
	right operand. This right operand should not be a string or a
	variable that contains a string, but should be the literal name
	of the property, without quotes of any kind. Here are some
	examples:
	

<div class=programlisting>
<p>
<pre>
document.lastModified
navigator.appName
frames[0].length
document.write("hello world")
</PRE>
</DIV>


      

<p class=para>
	If the specified property does not exist in the object,
	JavaScript does not issue an error, but instead simply returns
	the special undefined value as the value of the expression.
      

<p class=para>
	Most operators allow arbitrary expressions for either operand,
	as long as the type of the operand is suitable. The
	<tt class=literal>.</tt> operator is an exception: the right-hand
	operand must be a literal property name. Nothing else is
	allowed. 
      

<p class=para>
	The <tt class=literal>[]</tt> operator allows access to
	array elements and also to object properties, and it does so without
	the restrictions that the <tt class=literal>.</tt> operator places
	on the right-hand operand. If the first operand (which goes
	before the left bracket) refers to an array, then the second
	operand (which goes between the brackets) can be an arbitrary
	expression that evaluates to an integer. For example:
	

<div class=programlisting>
<p>
<pre>
frames[1]
document.forms[i + j]
document.forms[i].elements[j++]
</PRE>
</DIV>


      

<p class=para>
	If the first operand to the <tt class=literal>[]</tt>
	operator is a reference to an object, on the other hand, then
	the second operand may be an arbitrary expression that evaluates
	to a string that names a property of the object.
	Note that in this case, the second operand is a string, not a
	literal name. It should be a constant in quotes, or a variable
	or expression that refers to a string. This works like
	associative arrays in the Perl and awk
	programming languages. For example:
	

<div class=programlisting>
<p>
<pre>
document["lastModified"]
frames[0]['length']
data["val" + i]
</PRE>
</DIV>


      

<p class=para>
	
        The <tt class=literal>[]</tt> operator is usually used to
	access the elements of an array. It is less convenient than
	the <tt class=literal>.</tt> operator for accessing properties of
	an object because of the need to quote the name of the
	property. When an object is used as an associative array,
	however, and the property names are dynamically generated,
	then the <tt class=literal>.</tt> operator cannot be used, and
	only the <tt class=literal>[]</tt> operator will do. This
	is commonly the case when you use the
	<tt class=literal>for/in</tt> loop, which will be introduced in
	<a href="ch05_01.htm">Chapter 5, <i>Statements</i></A>.  For example, the
	following JavaScript code uses a <tt class=literal>for/in</tt>
	loop and the <tt class=literal>[]</tt> operator to print
	out the name and value of all properties <tt class=literal>f</tt>
	in an object <tt class=literal>o</tt>:
	

<div class=programlisting>
<p>
<pre>
for (f in o) {
    document.write('o.' + f + ' = ' + o[f]);
    document.write('&lt;BR&gt;');
}
</PRE>
</DIV>


      

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch04-SECT2-AUTOID.37">Function Call Operator</A></h3>

<p class=para>
	The <tt class=literal>()</tt> operator is used to invoke
	functions in JavaScript.
	
	This is an unusual operator in that it does not have a fixed
	number of operands. The first operand is always the name of a
	function or an expression that refers to a function. This is
	followed by the left parenthesis and any number of additional
	operands, which may be arbitrary expressions, each separated
	from the next with a comma. The right parenthesis follows the
	final operand. The <tt class=literal>()</tt> operator
	evaluates each of its operands, and invokes the function
	specified by the first, with the value of the remaining operands
	passed as arguments. Examples:
      

<div class=programlisting>
<p>
<pre>
document.close()
Math.sin(x)
alert("Welcome " + name)
Date.UTC(99, 11, 31, 23, 59, 59)
funcs[i].f(funcs[i].args[0], funcs[i].args[1])
</PRE>
</DIV>

</DIV>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch04_08.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src="gifs/txthome.gif" alt="Home" border=0></a></td>
<td width=172 align=right valign=top><a href="ch05_01.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Assignment Operators</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td>
<td width=172 align=right valign=top>Statements</td>
</tr>
</table>

<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
</DIV>

</BODY>
</HTML>
