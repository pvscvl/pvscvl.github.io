<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 14] 14.2 The Link Object</TITLE>
<meta name="author" content="David Flanagan">
<meta name="date" content="Thu Apr 24 13:35:31 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="JavaScript">
<meta name="title" content="JavaScript: The Definitive Guide">
<!-- JavaScript: pathcont.js -->
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><img src="gifs/smbanner.gif" alt="Javascript: The Definitive Guide"></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch14_01.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b>Chapter 14</b></td>
<td width=172 align=right valign=top><a href="ch14_03.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>
<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="ch14-SECT1-AUTOID.2">14.2 The Link Object</A></h2>

<p class=para>
<a name="CH14.LINK1"></A><a name="CH14.LINK2"></A>      The previous section has described the Document object and some of
      its important methods and properties. The Document object has a
      number of other properties that we have not discussed yet. These
      properties are arrays, each of which contains references to other
      important JavaScript objects. This and the following sections
      explain the <tt class=literal>links[]</tt>,
      <tt class=literal>anchors[]</tt>, <tt class=literal>applets[]</tt>,
      <tt class=literal>embeds[]</tt>, <tt class=literal>images[]</tt>, and
      <tt class=literal>forms[]</tt> properties of the Document object, and
      the Link, JavaObject, Image, and Form objects those array
      properties refer to.
    

<p class=para>

      The Link object represents a hypertext link in a document, and
      is created with an <tt class=literal>&lt;A
      HREF="</tt><tt class=replaceable><i>hyperlink</i></tt><tt class=literal>"&gt;</tt>
      HTML tag, or, in Navigator 3.0, with an
      <tt class=literal>&lt;AREA&gt;</tt> tag within a client-side image
      map <tt class=literal>&lt;MAP&gt;</tt> tag. The
      <tt class=literal>links[]</tt> property of the Document
      object is an array that contains a complete list of hypertext
      links in the document. The <tt class=literal>Link</tt> object
      represents the URL of the hypertext link, and contains all of
      the properties that the <tt class=literal>Location</tt> object
      does. For example, the <tt class=literal>href</tt> property of a
      Link object contains the complete text of the URL that is linked
      to, and the <tt class=literal>hostname</tt> property contains only
      the hostname portion of that URL. See the reference section for
      a complete list of these URL-related properties.
    

<p class=para>
      One obvious use of the Link object and the
      <tt class=literal>links[]</tt> array is to write a "web crawler"
      program. This program would run in one browser window or frame
      and read web pages into another window or frame (by setting the
      <tt class=literal>location</tt> property of the Window object). For
      each page it reads in, it would look through the
      <tt class=literal>links[]</tt> array and recursively follow them. If
      carefully written (so it doesn't get caught in infinite recursion
      or doesn't start going in circles) such a program can, for
      example, be used to generate a list of all web pages that are
      accessible from a given starting page, and can be quite useful in
      web site maintenance. <a href="#JSCRIPT-CH-DOCUMENTS-EX-3">Example 14-3</A>
      shows a simple function that can be used to generate a list of all
      the links in a specified Document object.
    

<div class=example>
<h4 class=example><a class="TITLE" name="JSCRIPT-CH-DOCUMENTS-EX-3">Example 14-3: Listing the Links in a Document</A></h4>

<div class=programlisting>
<p>
<pre>
//<tt class=replaceable><i> Create a new window and list the destinations of all links in document d </i></tt>
//<tt class=replaceable><i> in that window. Note that we use a text/plain document.</i></tt>
function listlinks(d)
{
    var newwin = window.open("", "linklist", 
                    "menubar,scrollbars,resizable,width=600,height=300");
    newwin.document.open("text/plain");
    for (var i = 0; i &lt; d.links.length; i++)
        newwin.document.writeln(d.links[i]);
    newwin.document.close();
}
</PRE>
</DIV>

</DIV>

<p class=para>
      Don't expect to search the entire Internet with this technique,
      however. For security reasons, JavaScript in Navigator 2.0 and
      Navigator 3.0 is "hobbled" so that it cannot steal data that may
      be private. The restriction is this:  a script running in one
      window or frame can read properties from other windows or
      frames only if the contents of the other window or frame were loaded
      from the same web server as the script. While our "web crawler"
      program as we've described it above is not a threat to Internet
      security or privacy, this general security restriction will
      prevent it from crawling very far beyond the site from which it
      was loaded. (When the crawler loads a page from a different site,
      it will appear as if that page simply has no links on it.)
      See <a href="ch20_01.htm">Chapter 20, <i>JavaScript Security</i></A>, for a complete discussion
      of JavaScript security, including a description of how to
      partially lift the restriction described here with the
      <tt class=literal>domain</tt> property, or to fully lift it by
      enabling the data-tainting security model.
    

<p class=para>
      More interesting than the URL-related properties of the Link
      object are the event handlers it supports. We saw the
      <tt class=literal>onMouseOver()</tt> event handler previously in <a href="ch12_03.htm">Example 12-3</A> where it was used with both
      <tt class=literal>&lt;A&gt;</tt> and <tt class=literal>&lt;AREA&gt;</tt>
      to change the message in the browser's status line when the mouse
      moved over the link. 
    

<p class=para>
      In addition to this <tt class=literal>onMouseOver()</tt> event
      handler, the link object supports two others. The
      <tt class=literal>onClick()</tt> event handler is invoked when the
      user clicks on a hypertext link. In Navigator 3.0, if this event
      handler returns <tt class=literal>false</tt> then the browser won't
      follow the link, as it would otherwise. Note that
      <tt class=literal>onClick()</tt> only works for Link objects created
      with the <tt class=literal>&lt;A&gt;</tt> tag; it should work for
      those created with the <tt class=literal>&lt;AREA&gt;</tt> tag in a
      future version of the language.
    

<p class=para>
      In Navigator 3.0, both the <tt class=literal>&lt;A&gt;</tt> and
      <tt class=literal>&lt;AREA&gt;</tt> tags support an
      <tt class=literal>onMouseOut()</tt> event handler. This is simply the
      opposite of the <tt class=literal>onMouseOver()</tt> handler--it is
      run when the mouse pointer moves off of a hypertext link. If you
      used <tt class=literal>onMouseOver()</tt> to display a message in the
      status line, you can use <tt class=literal>onMouseOut()</tt> to clear
      it; as we saw in <a href="ch12_01.htm">Chapter 12, <i>Programming with Windows</i></A>, the status
      line is not automatically cleared, as it should be, on Windows
      platforms. 
    

<p class=para>
      Finally, it is worth mentioning that the <tt class=literal>href</tt>
      and other URL properties of the Link object are read/write. Thus,
      you can write JavaScript programs that dynamically modify the
      destinations of hypertext links!
      <a href="#JSCRIPT-CH-DOCUMENTS-EX-4">Example 14-4</A> is a frivolous piece
      of JavaScript-enhanced HTML that implements a random hypertext
      link. It demonstrates each of the features of the Link object that
      we've considered: the <tt class=literal>links[]</tt> array, the use of
      the Link event handlers, and dynamic setting of the destination of
      a Link. Note that the example sets the <tt class=literal>href</tt>
      property of the Link, but doesn't bother to read the
      <tt class=literal>href</tt> property of the link it randomly chooses.
      Instead, it simply relies on the <tt class=literal>toString()</tt>
      method of the Link object to return the URL.
    

<div class=example>
<h4 class=example><a class="TITLE" name="JSCRIPT-CH-DOCUMENTS-EX-4">Example 14-4: A Random Hypertext Link</A></h4>

<div class=programlisting>
<p>
<pre>
&lt;A HREF="about:" 
    onMouseOver="status = 'Take a chance... Click me.'; return true;"
    onMouseOut="status = ''"
    onClick="this.href = 
              document.links[Math.floor(Math.random()*document.links.length)]"
&gt;
Random Link
&lt;/A&gt;
</PRE>
</DIV>

</DIV>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch14_01.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src="gifs/txthome.gif" alt="Home" border=0></a></td>
<td width=172 align=right valign=top><a href="ch14_03.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>The Document Object</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td>
<td width=172 align=right valign=top>The Anchor Object</td>
</tr>
</table>

<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
</DIV>

</BODY>
</HTML>
