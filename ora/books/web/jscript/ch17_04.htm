<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 17] 17.4 Form Element Names and Values</TITLE>
<meta name="author" content="David Flanagan">
<meta name="date" content="Wed Apr 23 18:22:12 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="JavaScript">
<meta name="title" content="JavaScript: The Definitive Guide">
<!-- JavaScript: pathcont.js -->
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><img src="gifs/smbanner.gif" alt="Javascript: The Definitive Guide"></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch17_03.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b>Chapter 17</b></td>
<td width=172 align=right valign=top><a href="ch17_05.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>
<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="ch17-SECT1-AUTOID.4">17.4 Form Element Names and Values</A></h2>

<p class=para>
      Two other properties shared by all form element objects are
      <tt class=literal>name</tt> and <tt class=literal>value</tt>. When a
      form is submitted, the user's input data is passed to the web
      server in the form of name/value pairs, and these properties
      specify the name under which each element's data is submitted
      and the value that is submitted for that element. The name
      property is a read-only string; its value is specified by the
      <tt class=literal>NAME</tt> attribute of the HTML tag that defined
      the form element. This <tt class=literal>NAME</tt> attribute is
      optional, but data from an element cannot be submitted unless a
      it is specified. In the next subsection, we'll see another use
      of the <tt class=literal>NAME</tt> attribute.
    

<p class=para>
      The <tt class=literal>value</tt> property is similar to the
      <tt class=literal>name</tt> property. This property is a read/write
      string for all form element objects, and it contains the data
      that is transferred over the network when the form is submitted.
      The initial value of the <tt class=literal>value</tt> property is,
      logically enough, usually specified by the
      <tt class=literal>VALUE</tt> attribute of the HTML tag that defined
      the form element. For some objects, however, the initial
      <tt class=literal>value</tt> is specified in some other way.
    

<p class=para>
      The <tt class=literal>value</tt> property contains a string value for
      all form elements. Because of the automatic data conversion
      performed by Navigator, you can assign a value or object of any
      type to the <tt class=literal>value</tt> property and it will
      automatically be converted to a string. Unfortunately, a
      limitation in Internet Explorer 3.0 does not allow objects to be
      assigned to the <tt class=literal>value</tt> property. In order to do
      this you must explicitly convert the object to a string; you
      cannot rely on automatic conversion as you can with Navigator.
      Thus, if you wanted to display the current date and time in an
      input field of a form, the following code would not work in IE 3.0:
      

<div class=programlisting>
<p>
<pre>
today = new Date();
document.myform.date.value = today;
</PRE>
</DIV>


      The easiest way to explicitly convert the <tt class=literal>today</tt>
      object to a string is to add it to the empty string, so the
      following code would work in IE 3.0:
      

<div class=programlisting>
<p>
<pre>
today = new Date();
document.myform.date.value = "" + today;
</PRE>
</DIV>


    

<p class=para>
      Not all uses of the <tt class=literal>value</tt> property are
      obvious at the first glance. For Text and TextArea objects, the
      <tt class=literal>value</tt> property is simply the string contained
      in the input field. Setting the <tt class=literal>value</tt>
      property of these objects changes the text that those input
      fields display. For Button, Reset, and Submit objects, however,
      the <tt class=literal>value</tt> property contains is the text that
      is displayed by the push-button. Although the property is
      read/write, changing it will not change the text that appears in
      the button (at least not on all platforms). Also, the
      <tt class=literal>value</tt> of Button and Reset objects is never
      actually submitted with the form that contains them. (The value
      of a Submit object is submitted only when that Submit object was
      the one that caused the form to be submitted--this allows a CGI
      script to determine how the form was submitted in cases where
      there is more than one way to do so.)
    

<p class=para>
      The <tt class=literal>value</tt> property for Checkbox and Radio
      objects is also a little bit tricky. Since these objects
      represent toggle buttons in an HTML form, you might expect their
      <tt class=literal>value</tt> property to indicate the state of the
      button--i.e., to be a Boolean value that indicates whether the
      toggle button is checked or not. In fact, though, it is the
      <tt class=literal>checked</tt> property of these objects that
      indicates what state they are in. The <tt class=literal>value</tt>
      property, as always, is the string value that is submitted with
      the form if the Checkbox or Radio object is checked when the
      form is submitted. It should be set to some string that is
      meaningful to the CGI script that will receive the form
      submission. 
    

<p class=para>
<a name="CH17.SELECT1"></A><a name="CH17.SELECT2"></A>      The Select object is another unusual case. It displays a list
      or drop-down menu of options and allows the user to select one
      or more of them. These options are not specified by the
      <tt class=literal>&lt;SELECT&gt;</tt> tag, but by a separate
      <tt class=literal>&lt;OPTION&gt;</tt> tag, so it turns out that the
      Select object actually has no <tt class=literal>value</tt> property,
      and is an exception to the rule above that all form element
      objects have a property by this name. Since the
      <tt class=literal>VALUE</tt> attribute belongs to the
      <tt class=literal>&lt;OPTION&gt;</tt> tag, the
      <tt class=literal>value</tt> property belongs to the Option object.
      Now, you might expect that, like the Text and Button objects,
      the <tt class=literal>value</tt> property of the Option object would
      specify the text that is displayed to the user in the list or
      drop-down menu. In fact, though, this is not how it is done.
      The text displayed for an Option is meant to be a verbose,
      human-readable string, and this is not ideal for processing by a
      CGI script. The <tt class=literal>text</tt> property of the Option
      object specifies the string that the user sees, and the
      <tt class=literal>value</tt> property specifies the (usually terser)
      string submitted if the option is selected when the form is
      submitted.
    

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch17-SECT2-AUTOID.1">The Select and Option objects</A></h3>

<p class=para>
	While we are discussing the Select and Option objects, it should
	be noted that these differ in a number of ways form other form
	element objects. First, note that the Option object is not
	itself a form element--it is an object contained by a Select
	object. The Select object is the only form element object that
	contains other objects. They are contained in its
	<tt class=literal>options[]</tt> array, so you may end up referring
	to individual Option objects with very long expressions like the
	following:
	

<div class=programlisting>
<p>
<pre>
document.forms[0].elements[1].options[2]
</PRE>
</DIV>


      

<p class=para>
	The second unique feature of the Option object is that, in
	Navigator 3.0, they can be dynamically created at run-time.
	Option objects are created with the <tt class=literal>Option()</tt>
	constructor function, and can be added to the
	<tt class=literal>options[]</tt> array of a Select object by simple
	assignment. This <tt class=literal>options[]</tt> property has
	several special behaviors itself--if you decrease the value of
	<tt class=literal>options.length</tt> options will be deleted
	from the end of the list or drop-down menu displayed by the
	Select object. Similarly, if you set one of the entries in the
	<tt class=literal>options[]</tt> array to <tt class=literal>null</tt>,
	that option will be removed from the list or menu, and the
	elements following it in the array will be moved down one to
	fill up the newly vacated array element. For full details, see
	the Select and Option objects, and their properties in the
	reference section of this book.
      

</DIV>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch17_03.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src="gifs/txthome.gif" alt="Home" border=0></a></td>
<td width=172 align=right valign=top><a href="ch17_05.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Form Elements</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td>
<td width=172 align=right valign=top>Naming Forms and Form Elements</td>
</tr>
</table>

<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
</DIV>

</BODY>
</HTML>
