<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 9] Further Topics in JavaScript</TITLE>
<meta name="author" content="David Flanagan">
<meta name="date" content="Wed Apr 23 18:11:37 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="JavaScript">
<meta name="title" content="JavaScript: The Definitive Guide">
<!-- JavaScript: pathcont.js -->
</HEAD>
<body bgcolor="#FFFFFF" text="#000000">

<div class=htmlnav>
<h1><img src="gifs/smbanner.gif" alt="Javascript: The Definitive Guide"></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch08_09.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b>Chapter 9</b></td>
<td width=172 align=right valign=top><a href="ch09_02.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>
<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
<hr align=left width=515>
</DIV>
<h1 class=chapter><a class="TITLE" name="JSCRIPT-CH-FURTHER">9. Further Topics in JavaScript</A></H1>

<div class=htmltoc>

<p>
<b>Contents:</b><br>
Automatic Data Type Conversion<br>
<a href="ch09_02.htm">Explicit Data Type Conversions</A><br>
<a href="ch09_03.htm">By Value vs. By Reference</A><br>

</DIV>

<p class=para>
    This chapter covers miscellaneous JavaScript topics that would have
    bogged down previous chapters had they been covered there. Now that
    you have read through the preceding chapters, and are experienced with
    the core JavaScript language, you are ready to tackle the more
    advanced and detailed concepts presented here. In fact, you may
    prefer to move on to other chapters and learn about the specifics of
    client-side JavaScript at this point. Do be sure to return to this
    chapter, however. You will not truly understand the workings of the
    JavaScript language if you have not read the material in this
    chapter. 
  

<div class=sect1>
<h2 class=sect1><a class="TITLE" name="ch09-SECT1-AUTOID.1">9.1 Automatic Data Type Conversion</A></h2>

<p class=para>
<a name="CH09.CONV"></A><a name="CH09.CONV7"></A>      We've seen that JavaScript is an untyped language. This means,
      for example, that we don't have to specify the data type of
      variable when we declare it. The fact that JavaScript is untyped
      gives it the flexibility and simplicity that are desirable for a
      scripting language (although those features come at the expense
      of rigor, which is important for the longer, more complex
      programs often written in stricter languages like C and
      Java). Another feature of JavaScript's flexible treatment of
      data types is the automatic type conversions that it
      performs. For example, if you call
      <tt class=literal>document.write()</tt> to output the value of a
      Boolean value, JavaScript will automatically convert that value
      to the string <tt class=literal>"true"</tt> or the string
      <tt class=literal>"false"</tt>. Similarly, if you write an
      <tt class=literal>if</tt> that tests a string value, JavaScript will
      automatically convert that string to a Boolean value--to
      <tt class=literal>false</tt> if the string is empty and to
      <tt class=literal>true</tt> otherwise.
    

<p class=para>
      The subsections below explain, in detail, all of the automatic
      data conversions performed by JavaScript.
    

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch09-SECT2-AUTOID.1">Conversions to Strings</A></h3>

<p class=para>
<a name="CH09.CONV1"></A>	Of all the automatic data conversions performed by JavaScript,
	conversions to strings are probably the most common. Whenever
	a nonstring value is used in a "string context," JavaScript
	converts that value to a string.  A "string context" is
	anywhere that a string value is expected.  Generally, this
	means arguments to built-in JavaScript functions and
	methods. As described above, for example, if we pass a Boolean
	value to <tt class=literal>document.write()</tt>, it will be
	converted to a string before being output. Similarly, if we
	pass a number to this method, it will also be converted to a
	string before output.
      

<p class=para>
	Another common "string context" occurs with the
	<tt class=literal>+</tt> operator. When <tt class=literal>+</tt> is
	used with numeric operands, it adds them. When it is used with
	string operands, however, it concatenates them. When one
	operand is a string, and one is a nonstring, the nonstring
	operand will first be converted to a string and then the two
	strings will be concatenated:
	

<div class=programlisting>
<p>
<pre>
x = 1 + 2;                //<tt class=replaceable><i> yields 3</i></tt>
x = 'hello' + 'world';    //<tt class=replaceable><i> yields 'helloworld'</i></tt>
x = 1 + '2';              //<tt class=replaceable><i> yields '12'</i></tt>
x = true + '3';           //<tt class=replaceable><i> yields 'true3'</i></tt>
</PRE>
</DIV>


      

<p class=para>
	Actually, the <tt class=literal>+</tt> operator even works when both
	operands are of object type: the operands are converted to
	strings and concatenated. When one operands is an object, and
	the other is neither an object nor a string, both operands are
	converted to strings and concatenated:
	

<div class=programlisting>
<p>
<pre>
x = window + 1;             //<tt class=replaceable><i> yields '[object Window]1'</i></tt>
x = window + top;           //<tt class=replaceable><i> yields '[object Window][object Window]'</i></tt>
x = window + true;          //<tt class=replaceable><i> yields '[object Window]true'</i></tt>
</PRE>
</DIV>


      

<p class=para>
	The paragraphs above have described the "string contexts" in
	which values are converted to strings. Here is exactly how
        that conversion is performed:
	

<p>
<ul class=itemizedlist>
<li class=listitem> 
	      Numbers are converted to strings in the obvious way: the
	      resulting string contains the digits of the decimal
	      representation of the number. The number
	      <tt class=literal>123.45</tt>, for example, is converted to
	      the string <tt class=literal>"123.45"</tt>.
	    

<p>
<li class=listitem>	      The Boolean value <tt class=literal>true</tt> is converted to
	      the string <tt class=literal>"true"</tt>, and the value
	      <tt class=literal>false</tt> is converted to the string
	      <tt class=literal>"false"</tt>. 
	    

<p>
<li class=listitem>	      In Navigator, functions are converted to strings which
	      consist of the text of the function definition,
	      including the complete body of the function. Thus, a
	      function defined as follows:
	      

<div class=programlisting>
<p>
<pre>
function square(x) { return x*x; }
</PRE>
</DIV>


	      is converted to the string:
	      

<div class=programlisting>
<p>
<pre>
"function square(x) {
    return x*x;
}"
</PRE>
</DIV>


	      The JavaScript code in the function body may be
	      reformatted during this conversion--note the insertion of
	      newlines in the example above. Similarly, any comments in
	      the original function definition will not appear in the
	      resulting string. An interesting feature of the string
	      conversion of a function is that it is guaranteed to be
	      perfectly legal JavaScript code, and is thus may be passed
	      to the <tt class=literal>eval()</tt> method to be
	      reinterpreted (perhaps in some new context). You should
	      not rely on this, however, because Internet
	      Explorer 3.0 does not include the body of a function when
	      it converts it to a string, and this behavior is not
	      likely to change in future versions.
	    

<p>
<li class=listitem>	      Objects are converted to strings by calling their
	      <tt class=literal>toString()</tt> method. By default, most
	      objects have a <tt class=literal>toString()</tt> method that
	      specifies at least the type of the object. For
	      example, the Window object <tt class=literal>window</tt> is
	      converted to the string <tt class=literal>"[object Window]"</tt>. 
	      Similarly, the <tt class=literal>navigator</tt> object
	      converts to the string <tt class=literal>"[object Navigator]"</tt>.
	      By default, all user-defined objects convert to the vague
	      string <tt class=literal>"[object Object]"</tt>. 
	    

<p class=para>
	      Note that you can override the default
	      <tt class=literal>toString()</tt> method for any object,
	      thereby controlling exactly how the object is converted to
	      a string.
	    

<p>
<li class=listitem> 
	      The <tt class=literal>null</tt> value is converted to the
	      string <tt class=literal>"null"</tt>, and the JavaScript
	      undefined value is converted to the string
	      <tt class=literal>"undefined"</tt>.
	    

<p>
</UL>

      

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch09-SECT2-AUTOID.2">Conversions to Numbers</A></h3>

<p class=para>
<a name="CH09.CONV3"></A>	Just as JavaScript values are automatically converted to strings
	when used in a "string context," they are automatically
	converted to numbers when used in a "numeric context." The two
	numeric contexts are:
	

<p>
<ul class=itemizedlist>
<li class=listitem> 
	      Numeric arguments to built-in functions and methods
	      (arguments to user-defined functions do not have a type
	      defined, so no conversion is performed).
	    

<p>
<li class=listitem> 
	      Operands of various arithmetic, comparison, and other
	      operators. 
	    

<p>
</UL>

      

<p class=para>
	For example, the following lines of code contain non-numeric
	values in numeric contexts, and cause automatic conversion to
	occur:
	

<div class=programlisting>
<p>
<pre>
Math.sin("1.45");       //<tt class=replaceable><i> String "1.45" converted to number 1.45</i></tt>
done = sum &gt; "10"       //<tt class=replaceable><i> String "10" converted to number 10</i></tt>
sum = sum + true;       //<tt class=replaceable><i> Boolean value true converted to number 1</i></tt>
total = total - "3";    //<tt class=replaceable><i> String "3" converted to number 3</i></tt>
</PRE>
</DIV>


	Note, however, that the following line of code does not cause a
	numeric conversion to occur.
	

<div class=programlisting>
<p>
<pre>
total = total + "3"
</PRE>
</DIV>


	Recall that the <tt class=literal>+</tt> operator adds numbers
	<i class=emphasis>and</I> concatenates strings. Since there is
	one string operand in this example, JavaScript interprets the
	operator as the string concatenation operator, rather than the
	addition operator.  Therefore, there is not a numeric context
	here, and the string is not converted to a number. In fact,
	just the opposite occurs: the numeric value
	<tt class=literal>total</tt> occurs in a string context, and
	therefore is converted to a string.
      

<p class=para>
	JavaScript values are converted to numbers according to the
	following rules:
	

<p>
<ul class=itemizedlist>
<li class=listitem>	      If a string contains the decimal representation of an
	      integer or floating-point number, with no trailing
	      non-numeric characters, then the string is converted to
	      that number. If the string does not represent a number,
	      or contains trailing characters that are not part of the
	      number, then the attempt to convert it fails, and
	      JavaScript displays an error message. As a special case,
	      the empty string (<tt class=literal>""</tt>) is converted to
	      the number <tt class=literal>0</tt>.
	    

<p>
<li class=listitem>	      The Boolean value <tt class=literal>true</tt> is converted to
	      the number 1, <tt class=literal>false</tt> to
	      <tt class=literal>0</tt>. 
	    

<p>
<li class=listitem>	      <tt class=literal>null</tt> is converted to the number
	      <tt class=literal>0</tt>. 
	    

<p>
<li class=listitem>	      Objects are converted to numbers by invoking their
	      <tt class=literal>valueOf()</tt> method, if they have one. If
	      the <tt class=literal>valueOf()</tt> method returns a number,
	      that value is the result of the conversion. If
	      <tt class=literal>valueOf()</tt> returns a string or Boolean
	      value, then that value is converted to a number following
	      the rules above. If the <tt class=literal>valueOf()</tt>
	      method returns some other type, or if no such method
	      exists, then the conversion fails, and JavaScript displays
	      an error message.
	    

<p>
<li class=listitem>	      Functions and the undefined value cannot be converted to
	      numbers. Using a function or an undefined value in a
	      numeric context will always cause a error message
	      to be displayed.
	    

<p>
</UL>

      

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch09-SECT2-AUTOID.3">Conversions to Booleans</A></h3>

<p class=para>
	When a JavaScript value is used in a "Boolean context", it is
	automatically converted to a Boolean value. A "Boolean context"
	is anywhere that a Boolean value is expected: Boolean arguments
	to certain built-in methods, the return value from certain
	event-handlers, and, more commonly, the expressions used by the
	<tt class=literal>if</tt> statement, the <tt class=literal>while</tt>
	and <tt class=literal>for</tt> loops, and the conditional
	(<tt class=literal>:?</tt>) operator.
      

<p class=para>
	For example, the following lines of code use the integer
	<tt class=literal>i</tt>, the string <tt class=literal>s</tt>, and the
	object <tt class=literal>o</tt> in Boolean contexts, and cause those
	values to be converted to Boolean values:
	

<div class=programlisting>
<p>
<pre>
for(i = 10; i; i--) document.write(messages[i]); 
response = s?"yes":"no";
if (o) sum += o.value;
</PRE>
</DIV>


      

<p class=para>
	In C, there is no Boolean type. Integer values are used instead,
	and just about any value can implicitly be used in a "Boolean
	context". In Java, however, there is a Boolean type, and the
	language does not permit any conversion, implicit or explicit, to
	Boolean values. This means that you need to be very precise
	with your <tt class=literal>if</tt> and <tt class=literal>while</tt>
	statement (for example) in Java. JavaScript--like Java--has a
	Boolean type, but--like C--it allows just about any type to be
	used in a Boolean context. If you are a C programmer, you will
	find the JavaScript Boolean conversions intuitive and
	convenient. The conversions follow these rules:
	

<p>
<ul class=itemizedlist>
<li class=listitem>	      The number <tt class=literal>0</tt> is converted to
	      <tt class=literal>false</tt>. All other numbers are converted
	      to <tt class=literal>true</tt>.
	    

<p>
<li class=listitem>	      The empty string (<tt class=literal>""</tt>) is converted to
	      <tt class=literal>false</tt>. All other strings are converted
	      to <tt class=literal>true</tt>.
	    

<p>
<li class=listitem> 
	      <tt class=literal>null</tt> is converted to
	      <tt class=literal>false</tt>. Non-<tt class=literal>null</tt>
	      objects are converted to the value
	      <tt class=literal>true</tt>, with one exception:  if the
	      object has a <tt class=literal>valueOf()</tt> method, and that
	      method returns <tt class=literal>false</tt>,
	      <tt class=literal>0</tt>, or the empty string, then the object
	      is converted to <tt class=literal>false</tt>.
	    

<p>
<li class=listitem>	      Functions are always converted to the value
	      <tt class=literal>true</tt>. 
	    

<p>
<li class=listitem>	      Undefined values are converted to <tt class=literal>false</tt>.
	    

<p>
</UL>

      

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch09-SECT2-AUTOID.4">Conversions to Objects</A></h3>

<p class=para>
<a name="CH09.CONV5"></A>	Just as JavaScript values are converted to strings, numbers,
	and Boolean values, when used in the appropriate context, so too
	are they converted to objects when used in an "object context."
	This is the most subtle of the automatic conversions, and it is
	possible to use JavaScript without ever realizing that it is
	happening. A value is used in an "object context" when you use
	the <tt class=literal>.</tt> operator to read or write a property of
	the value or to reference a method of the object. A value is
	also used in an object context when you use the
	<tt class=literal>[]</tt> operator to access an array element of the
	value.
      

<p class=para>
	Why would we want to do this?  If a value is not already an
	object, how can it have properties or methods to access, anyway?
	Consider JavaScript strings, for example. JavaScript defines
	quite a few methods that can operate on strings. If
	<tt class=literal>s</tt> is a string, then each of the following
	lines is legal JavaScript:
	

<div class=programlisting>
<p>
<pre>
len = s.length;
document.write(s.bold());
t = s.substring(2,4);
a = s.split(",");
</PRE>
</DIV>


	A string isn't an object, so why can we treat it like one?  Are
	strings simply a special case supported by JavaScript?  Are they
	a special data type that is half object, half primitive type?
	No. When a JavaScript string is used in an object context, as
	the strings in the above example are, they are converted to a
	String object that represents the same underlying value as the
	original string did. (Note the capitalization convention: the
	primitive type is a string, the corresponding object is a
	String.)  The String object defines a <tt class=literal>length</tt>
	property and quite a few methods that perform various operations
	on the string.
      

<p class=para>
	Strings are the primary example of why and when this sort of
	automatic conversion to an object data type is necessary. But
	it is occasionally used with other data types as well. For
	example, JavaScript will convert a function value to a
	Function object so that you can access the
	<tt class=literal>arguments</tt> property, which is an array of
	arguments passed to the function. Also, a numeric value can be
	converted to a Number object, which allows you to invoke the
	<tt class=literal>toString()</tt> method of that object, a method
	that takes an optional argument to specify what base the
	number should be converted to.
      

<p class=para>
	The rules for automatic conversions to objects are particularly
	straightforward: 
	

<p>
<ul class=itemizedlist>
<li class=listitem>	      Strings are converted to String objects.
	    

<p>
<li class=listitem>	      Numbers are converted to Number objects.
	    

<p>
<li class=listitem>	      Boolean values are converted to Boolean objects.
	    

<p>
<li class=listitem>	      Functions are converted to Function objects.
	    

<p>
<li class=listitem>	      <tt class=literal>null</tt> and the undefined value cannot be
	      converted to objects, and cause an error message to be
	      displayed if used in an object context.
	    

<p>
</UL>

      

<p class=para>
	The conversion of values to objects is handled quite
	transparently by JavaScript, and it is often not obvious to a
	casual programmer that the conversion is happening at all. This
	is for two reasons. First, the converted objects are transient:
	suppose a string, for example, is converted to a String object,
	and a method is invoked on that String object. The String
	object is never saved into a variable, and so it is used once
	and then is no longer available to the program (it is "garbage
	collected" so memory is not wasted). This makes it
	difficult to even obtain an instance of a String object. To do
	so, we must explicitly convert our string to String object. We
	can do this in either of two ways:
	

<div class=programlisting>
<p>
<pre>
s = new String("hello");
s = new Object("hello");
</PRE>
</DIV>


	Similarly, we can create Number, Boolean, and Function objects
	by invoking the <tt class=literal>Number()</tt>,
	<tt class=literal>Boolean()</tt>, or <tt class=literal>Function()</tt>
	constructors with our number, Boolean, or function value, or,
	more generally, by invoking the <tt class=literal>Object()</tt>
	constructor with the value to be converted.
      

<p class=para>
	The second reason why conversion to objects is often transparent
	to programmers is that each of the String, Number, Boolean, and
	Function objects have <tt class=literal>toString()</tt> methods that
	are invoked when they are used in a string context, and have
	<tt class=literal>valueOf()</tt> methods that are invoked when they
	are used in numeric, Boolean, or function contexts. Because the
	data conversion is so completely automatic, it can be difficult
	to even distinguish between a value and its corresponding
	object. The <tt class=literal>typeof</tt> operator provides one way
	to distinguish primitive values from objects. When invoked on a
	primitive value, <tt class=literal>typeof</tt> will return one of
	the strings "string", "number", "boolean", and "function". When
	invoked on the corresponding object, however, it will return
	"object":
	
	

<div class=programlisting>
<p>
<pre>
typeof "hello"               //<tt class=replaceable><i> returns "string"</i></tt>
typeof new String("hello")   //<tt class=replaceable><i> returns "object"</i></tt>
</PRE>
</DIV>


      

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch09-SECT2-AUTOID.5">Conversions to Functions</A></h3>

<p class=para>
	The only time that JavaScript can convert a value to a function
	is when a Function object is used in a function context (which
	occurs when you use the <tt class=literal>()</tt> operator to invoke
	a value.)  In this case, the Function object is trivially
	converted to the primitive function value it represents.
	Using any value other than a function or a Function object in a
	function context will cause JavaScript to display an error message.
      

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch09-SECT2-AUTOID.6">Data Conversion Summary</A></h3>

<p class=para>
	While many of the automatic data conversions explained in the
	subsections above are intuitive, there are so many of them that
	it can be difficult to keep them all straight. <a href="#JSCRIPT-CH-FURTHER-TAB-CONVERSION">Table 9.1</A> summarizes each of the
	possible conversions.
      

<p>
<div class=table>
<table>
<caption><a class="TITLE" name="JSCRIPT-CH-FURTHER-TAB-CONVERSION">Table 9-1: Automatic Data Type Conversions</A></CAPTION>
<tr class=row>
<th align="left">&nbsp;</TH>
<th colspan=5 align="center"><i class=emphasis>Used As:</I></TH>
</TR>
<tr class=row>
<th align="left"><i class=emphasis>Value:</I></TH>
<th align="LEFT">String</TH>
<th align="left">Number</TH>
<th align="left">Boolean</TH>
<th align="left">Object</TH>
<th align="LEFT">Function</TH>
</TR>
<tr class=row>
<td align="left">

<p class=para>
<b>non-empty string
                </b></TD>
<td align="LEFT">-</TD>
<td align="left">

<p class=para>
	          Numeric value of string, or error
                </TD>
<td align="left"> <tt class=literal>true</tt>  </TD>
<td align="left">

<p class=para>
String object</TD>
<td align="LEFT"><i class=emphasis>error</I></TD>
</TR>
<tr class=row>
<td align="left">

<p class=para>
<b>empty string
                  </b></TD>
<td align="LEFT">-</TD>
<td align="left"> <tt class=literal>0</tt>  </TD>
<td align="left"> <tt class=literal>false</tt>  </TD>
<td align="left">

<p class=para>
String object</TD>
<td align="LEFT"><i class=emphasis>error</I></TD>
</TR>
<tr class=row>
<td align="left"><b>0</b></TD>
<td align="LEFT"> <tt class=literal>"0"</tt>  </TD>
<td align="left">-</TD>
<td align="left">  <tt class=literal>false</tt> </TD>
<td align="left">

<p class=para>
Number object</TD>
<td align="LEFT"><i class=emphasis>error</I></TD>
</TR>
<tr class=row>
<td align="left"><b>NaN</b></TD>
<td align="LEFT"> <tt class=literal>"NaN"</tt>  </TD>
<td align="left">-</TD>
<td align="left"> <tt class=literal>true</tt> </TD>
<td align="left">

<p class=para>
Number object</TD>
<td align="LEFT"><i class=emphasis>error</I></TD>
</TR>
<tr class=row>
<td align="left"><b>Infinity</b></TD>
<td align="LEFT"> <tt class=literal>"Infinity"</tt>  </TD>
<td align="left">-</TD>
<td align="left"> <tt class=literal>true</tt>  </TD>
<td align="left">

<p class=para>
Number object</TD>
<td align="LEFT"><i class=emphasis>error</I></TD>
</TR>
<tr class=row>
<td align="left">

<p class=para>
<b>Negative Infinity
                     </b></TD>
<td align="LEFT"> <tt class=literal>"-Infinity"</tt>  </TD>
<td align="left">-</TD>
<td align="left"> <tt class=literal>true</tt>  </TD>
<td align="left">

<p class=para>
Number object</TD>
<td align="LEFT"><i class=emphasis>error</I></TD>
</TR>
<tr class=row>
<td align="left">

<p class=para>
<b>any other number
                     </b></TD>
<td align="LEFT">

<p class=para>
string value of number</TD>
<td align="left">-</TD>
<td align="left"> <tt class=literal>true</tt> </TD>
<td align="left">

<p class=para>
Number object</TD>
<td align="LEFT"><i class=emphasis>error</I></TD>
</TR>
<tr class=row>
<td align="left"><b>true</b></TD>
<td align="LEFT"> <tt class=literal>"true"</tt>  </TD>
<td align="left"> <tt class=literal>1</tt>  </TD>
<td align="left">-</TD>
<td align="left">

<p class=para>
Boolean object</TD>
<td align="LEFT"><i class=emphasis>error</I></TD>
</TR>
<tr class=row>
<td align="left"><b>false</b></TD>
<td align="LEFT"> <tt class=literal>"false"</tt>  </TD>
<td align="left"> <tt class=literal>0</tt>  </TD>
<td align="left">-</TD>
<td align="left">

<p class=para>
Boolean object</TD>
<td align="LEFT"><i class=emphasis>error</I></TD>
</TR>
<tr class=row>
<td align="left">

<p class=para>
<b>object or array</b>
		</TD>
<td align="LEFT">

<p class=para>
	         <tt class=literal>toString()</tt> result, or object type
              </TD>
<td align="left">

<p class=para>
	         <tt class=literal>valueOf()</tt> result, or <i class=emphasis>error</I></TD>
<td align="left">

<p class=para>
	         <tt class=literal>valueOf()</tt> result, or
   	         <tt class=literal>true</tt></TD>
<td align="left">-</TD>
<td align="LEFT">

<p class=para>
<i class=emphasis>error</I> (unless Function
		obj)</TD>
</TR>
<tr class=row>
<td align="left"><b>null</b></TD>
<td align="LEFT"> <tt class=literal>"null"</tt>  </TD>
<td align="left"> <tt class=literal>0</tt>  </TD>
<td align="left"> <tt class=literal>false</tt>  </TD>
<td align="left">-</TD>
<td align="LEFT"><i class=emphasis>error</I></TD>
</TR>
<tr class=row>
<td align="left">

<p class=para>
<b>undefined value</b>
		</TD>
<td align="LEFT"> <tt class=literal>"undefined"</tt>  </TD>
<td align="left"><i class=emphasis>error</I></TD>
<td align="left"> <tt class=literal>false</tt>  </TD>
<td align="left"><i class=emphasis>error</I></TD>
<td align="LEFT"><i class=emphasis>error</I></TD>
</TR>
<tr class=row>
<td align="left"><b>function</b></TD>
<td align="LEFT">

<p class=para>
	         Complete function text
	        </TD>
<td align="left"><i class=emphasis>error</I></TD>
<td align="left"> <tt class=literal>true</tt>  </TD>
<td align="left">

<p class=para>
Function object</TD>
<td align="LEFT">-</TD>
</TR>
</TABLE>
<p>
</DIV>
</DIV>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch08_09.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src="gifs/txthome.gif" alt="Home" border=0></a></td>
<td width=172 align=right valign=top><a href="ch09_02.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Array Summary</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td>
<td width=172 align=right valign=top>Explicit Data Type Conversions</td>
</tr>
</table>

<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
</DIV>

</BODY>
</HTML>
