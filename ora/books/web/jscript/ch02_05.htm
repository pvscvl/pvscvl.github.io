<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 2] 2.5 Literals</TITLE>
<meta name="author" content="David Flanagan">
<meta name="date" content="Wed Apr 23 18:01:50 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="JavaScript">
<meta name="title" content="JavaScript: The Definitive Guide">
<!-- JavaScript: pathcont.js -->
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><img src="gifs/smbanner.gif" alt="Javascript: The Definitive Guide"></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch02_04.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b>Chapter 2</b></td>
<td width=172 align=right valign=top><a href="ch02_06.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>
<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="ch02-SECT1-AUTOID.5">2.5 Literals</A></h2>

<p class=para>
      A literal in JavaScript is a data value that appears directly in a
      program. These are numbers, strings (in single or double quotes),
      the Boolean values <tt class=literal>true</tt> and
      <tt class=literal>false</tt>, and the special value
      <tt class=literal>null</tt>. The specific syntax of each type of
      literal is described in the following subsections.
    

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch02-SECT2-AUTOID.2">Integer Literals</A></h3>

<p class=para>
	Base-10 integers may be represented simply as an optional minus
	sign followed by a sequence of digits that does not begin with
	the digit zero.
      

<div class=programlisting>
<p>
<pre>
[<b>-</b>](<b>1</b>-<b>9</b>)(<b>0</b>-<b>9</b>)*
</PRE>
</DIV>

<p class=para>
	For example:
      

<div class=programlisting>
<p>
<pre>
3
-12
10000000
</PRE>
</DIV>

<p class=para>
	Since JavaScript represents all numbers as floating-point values, you
	can specify extremely large integer values, but you may lose
	precision in the trailing digits.
      

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch02-SECT2-AUTOID.3">Octal and Hexadecimal Literals</A></h3>

<p class=para>
	You may also specify integers as octal (base-8) and hexadecimal
	(base-16) values. An octal value begins with an optional minus
	sign, followed by the digit zero, followed by a sequence of
	digits, each between 0 and 7:
      

<div class=programlisting>
<p>
<pre>
[<b>-</b>]<b>0</b>(<b>0</b>-<b>7</b>)*
</PRE>
</DIV>

<p class=para>
	As in C and C++, a hexadecimal literal begins with an optional
	minus sign followed by "0x" or "0X", followed by a string of
	hexadecimal digits. A hexadecimal digit is one of the digits 0
	through 9, or the letters a (or A) through f (or F), which are
	used to represent values ten through fifteen.
      

<div class=programlisting>
<p>
<pre>
[<b>-</b>]<b>0</b>(<b>x</b>|<b>X</b>)(<b>0</b>-<b>9</b>|<b>a</b>-<b>f</b>|<b>A</b>-<b>F</b>)*
</PRE>
</DIV>

<p class=para>
	Examples:
      

<div class=programlisting>
<p>
<pre>
-0123
0377
0xff
-0xCAFE911
</PRE>
</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch02-SECT2-AUTOID.4">Floating-Point Literals</A></h3>

<p class=para>
	Floating-point literals can have a decimal point; they use the
	traditional syntax for scientific notation exponents. A
	floating-point value is represented as:
      

<p>
<ul class=itemizedlist>
<li class=listitem>	    An optional plus or minus sign, followed by
	  

<p>
<li class=listitem>	    The integral part
            of the number, followed by
	  

<p>
<li class=listitem>	    A decimal point and the fractional part of the number.
	  

<p>
</UL>
<p class=para>
	Exponential notation may be represented with additional syntax:
      

<p>
<ul class=itemizedlist>
<li class=listitem>	    The letter e or E, followed by
	  

<p>
<li class=listitem>	    An optional plus or minus sign, followed by
	  

<p>
<li class=listitem> 
	    A one, two, or three digit integer
	    exponent. The preceding integral and fractional parts of the
	    number are multiplied by ten to the power of this exponent.
	    

<p>
</UL>
<p class=para>
	More succinctly, the syntax is:
      

<div class=programlisting>
<p>
<pre>
[(<b>+</b>|<b>-</b>)][<tt class=replaceable><i>digits</i></tt>][<b>.</b><tt class=replaceable><i>digits</i></tt>][(<b>E</b>|<b>e</b>)[(<b>+</b>|<b>-</b>)]<tt class=replaceable><i>digits</i></tt>]
</PRE>
</DIV>

<p class=para>
	Examples:
      

<div class=programlisting>
<p>
<pre>
3.14
-1.414
.333333333333333333
6.02e+23
1.4738223E-32
</PRE>
</DIV>

<p class=para>
	Note that JavaScript does not specify the maximum and minimum
	representable sizes of numbers. It is probably safe to assume
	that every implementation uses IEEE double-precision format,
	which has a maximum value of approximately +/-1.79E+308 and
	a minimum value of approximately +/-4.94E-324.
      

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch02-SECT2-AUTOID.5">String Literals</A></h3>

<p class=para>
<a name="CH03.STRING"></A>	Strings are any sequence of zero or more characters enclosed
	within single or double quotes (<tt class=literal>'</tt> or
	<tt class=literal>"</tt>). Double-quote characters may be contained
	within strings delimited by single-quote characters, and
	single-quote characters may be contained within strings
	delimited by double quotes. Examples of string literals are:
      

<div class=programlisting>
<p>
<pre>
'testing'
"3.14"
'name="myform"'
"Wouldn't you prefer O'Reilly's book?"
</PRE>
</DIV>

<p class=para>
	HTML uses double-quoted strings.[2]
        Since JavaScript code often contains embedded HTML strings,
	and is often embedded within HTML strings (for event handler
	specifications), it is a good idea to use single quotes around
	your JavaScript strings. In the example below, the string
	"Thank you" is single-quoted within a JavaScript expression,
	which is double-quoted within an HTML event-handler attribute:
      

<blockquote class=footnote>
<p class=para>[2] 
	    The original versions of HTML required double-quoted
	    strings, though most popular web browsers now allow
	    single-quoted strings as HTML attribute values as well.
	  
</blockquote>
<div class=programlisting>
<p>
<pre>
&lt;A HREF="" onClick="alert('Thank you')"&gt;Click Me&lt;/A&gt;
</PRE>
</DIV>

<p class=para>
	On the other hand, when you use single quotes to delimit your
	strings, you must be careful with English contractions and
	possessives like "can't" and "O'Reilly's". Since the apostrophe
	is the same as the single-quote character, you must use the
	backslash character (<tt class=literal>\</tt>) to escape any
	apostrophes that appear in single-quoted strings. This use of the
	backslash is explained in the section that follows.
      

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch02-SECT2-AUTOID.6">Escape Sequences in String Literals</A></h3>

<p class=para>
	The backslash character (<tt class=literal>\</tt>) has a special
	purpose in JavaScript strings. Combined with the character
	that follows it, it represents a character that is not
	otherwise representable within the string, just like in C
	or C++. For example, the characters <tt class=literal>\n</tt>
	are an escape sequence that represents a newline character.
	When we type the string literal, we type two individual
	characters, the backslash and the <tt class=literal>n</tt>, but
	the string itself contains only a single newline character at
	that location.[3]
      

<blockquote class=footnote>
<p class=para>[3] 
	    Bear in mind that HTML ignores newlines, so a
	    <tt class=literal>\n</tt> escape sequence in HTML will not
	    produce a newline in the browser display: for that you
	    need to output <tt class=literal>&lt;BR&gt;</tt> or
	    <tt class=literal>&lt;P&gt;</tt>. Thus, the
	    <tt class=literal>\n</tt> escape might be useful in a string
	    you pass to <tt class=literal>alert()</tt>, but not in
	    a string you pass to
	    <tt class=literal>document.write()</tt>.
	  
</blockquote>
<p class=para>
	Another example, mentioned above, is the <tt class=literal>\'</tt>
	escape which represents the single quote (or apostrophe)
	character. This escape sequence is useful when you need to
	include an apostrophe in a string literal which is contained
	within single quotes. You can see why we call these "escape
	sequences"--the backslash allows us to "escape" from the usual
	interpretation of the single-quote character; instead of using
	it to mark the end of the string, we use it as an apostrophe.
	<a href="#JSCRIPT-CH-LEXICAL-TAB-ESCSEQ">Table 2.1</A>
	lists the JavaScript escape sequences and the characters they
	represent.
      

<p class=para>
	There is one escape sequence that deserves special comment.
	<tt class=literal>\</tt><tt class=replaceable><i>xxx</i></tt> represents
	the character with the Latin-1 (ISO8859-1) encoding specified
	by the three octal digits <tt class=replaceable><i>xxx</i></tt>. You
	can use this escape sequence to embed accented characters and
	special symbols into your JavaScript code, even though those
	characters cannot be typed from a standard keyboard. For
	example, the sequence
	<tt class=literal>\</tt><tt class=literal>251</tt> represents the
	copyright symbol.
      

<p>
<div class=table>
<table>
<caption><a class="TITLE" name="JSCRIPT-CH-LEXICAL-TAB-ESCSEQ">Table 2-1: JavaScript Escape Sequences</A></CAPTION>
<tr class=row>
<th align="left">Sequence</TH>
<th align="LEFT">Character Represented</TH>
</TR>
<tr class=row>
<td align="left"><tt class=literal>\b</tt></TD>
<td align="LEFT">Backspace</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>\f</tt></TD>
<td align="LEFT">Form feed</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>\n</tt></TD>
<td align="LEFT">Newline</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>\r</tt></TD>
<td align="LEFT">Carriage return</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>\t</tt></TD>
<td align="LEFT">Tab</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>\'</tt></TD>
<td align="LEFT">Apostrophe or single quote</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>\"</tt></TD>
<td align="LEFT">Double quote</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>\<tt class=replaceable><i>xxx</i></tt></tt></TD>
<td align="LEFT">

<p class=para>
	        The character with the encoding specified by the three
	        octal digits <tt class=replaceable><i>xxx</i></tt>.
	      </TD>
</TR>
</TABLE>
<p>
</DIV>
</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch02-SECT2-AUTOID.7">Boolean Literals</A></h3>

<p class=para>
	The <i class=emphasis>Boolean</I> data type in JavaScript
	represents a "truth value"--i.e., whether something is true or
	false. Any kind of comparison operation in JavaScript yields a
	Boolean value that specifies whether the comparison succeeded or
	failed. Since there are two possible truth values, there are
	two Boolean literals: the keywords <tt class=literal>true</tt> or
	<tt class=literal>false</tt>. These literals are commonly used in
	JavaScript code like the following:
      

<div class=programlisting>
<p>
<pre>
while(done != true) {
    ...
    if ((a == true) || (b == false) || (i &gt; 10)) done = true;
}
</PRE>
</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch02-SECT2-AUTOID.8">The null Literal</A></h3>

<p class=para>
	There is one final literal used in JavaScript: the
	<tt class=literal>null</tt> keyword. All other literals represent a
	value of a particular data type. <tt class=literal>null</tt> is
	different--it represents a lack of value. In a sense,
	<tt class=literal>null</tt> is like zero, but for data types other
	than numbers. We'll see more about <tt class=literal>null</tt> in
	<a href="ch03_01.htm">Chapter 3, <i>Variables and Data Types</i></A>.
      

</DIV>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch02_04.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src="gifs/txthome.gif" alt="Home" border=0></a></td>
<td width=172 align=right valign=top><a href="ch02_06.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Comments</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td>
<td width=172 align=right valign=top>Identifiers</td>
</tr>
</table>

<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
</DIV>

</BODY>
</HTML>
