<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 17] 17.5 Naming Forms and Form Elements</TITLE>
<meta name="author" content="David Flanagan">
<meta name="date" content="Wed Apr 23 18:22:13 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="JavaScript">
<meta name="title" content="JavaScript: The Definitive Guide">
<!-- JavaScript: pathcont.js -->
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><img src="gifs/smbanner.gif" alt="Javascript: The Definitive Guide"></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch17_04.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b>Chapter 17</b></td>
<td width=172 align=right valign=top><a href="ch17_06.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>
<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="ch17-SECT1-AUTOID.5">17.5 Naming Forms and Form Elements</A></h2>

<p class=para>
      As we saw above, all form elements have a <tt class=literal>NAME</tt>
      attribute that must be set in their HTML tags, if the form is to
      be submitted to a CGI script. While form submission is not
      generally of interest to JavaScript programs, there is another
      useful reason to specify this <tt class=literal>NAME</tt> tag; we'll
      explain it below.
    

<p class=para>
      The <tt class=literal>&lt;FORM&gt;</tt> tag also has a
      <tt class=literal>NAME</tt> attribute that you can set. This
      attribute has nothing to do with form submission. It exists for
      the convenience of JavaScript programmers. If the
      <tt class=literal>NAME</tt> attribute is defined in a
      <tt class=literal>&lt;FORM&gt;</tt> tag, then when the Form object is
      created for that form, it will be stored as an element in the
      <tt class=literal>forms[]</tt> array of the Document object, as usual,
      but it will also be stored in its own personal property of the
      Document object. The name of this newly defined property is the
      value of the <tt class=literal>NAME</tt> attribute. Thus, if you
      define a form with HTML like this:
      

<div class=programlisting>
<p>
<pre>
&lt;FORM NAME="questionnaire"&gt;
   ...
&lt;/FORM&gt;
</PRE>
</DIV>


      Then you can refer to that form as:
      

<div class=programlisting>
<p>
<pre>
document.questionnaire
</PRE>
</DIV>


      Often, you'll find this more convenient than the array notation:
      

<div class=programlisting>
<p>
<pre>
document.forms[2]
</PRE>
</DIV>


    

<p class=para>
      Note that the <tt class=literal>&lt;IMG&gt;</tt>,
      <tt class=literal>&lt;APPLET&gt;</tt>, and
      <tt class=literal>&lt;EMBED&gt;</tt> tags all also have
      <tt class=literal>NAME</tt> attributes that work the same way as the
      <tt class=literal>NAME</tt> attribute of
      <tt class=literal>&lt;FORM&gt;</tt>. But with forms, this style of
      naming goes a step further, because all of the elements contained
      within a form have <tt class=literal>NAME</tt> attributes. When you
      give a form element a <tt class=literal>NAME</tt> attribute, you
      create a new property of the Form object that refers to that
      element. The name of this property is the value of the attribute,
      of course. Thus, you can refer to an element named "zipcode" in a
      form named "address" as:
      

<div class=programlisting>
<p>
<pre>
document.address.zipcode
</PRE>
</DIV>


      With reasonably chosen names, this syntax is much more elegant
      than the alternative which relies on hard-coded array indices:
      

<div class=programlisting>
<p>
<pre>
document.forms[1].elements[4]
</PRE>
</DIV>


    

<p class=para>
      In HTML forms that use Checkbox and Radio elements, it is common
      practice to give each of a set of related elements the same name.
      For example, if a form contains a number Radio buttons that allow
      the user to indicate their favorite web browser, then each of
      these buttons might be given the name "favorite". The
      <tt class=literal>VALUE</tt> property of one button might be "nn", and
      the value of another might be "ie". When the form is submitted, a
      string like "favorite=mosaic" will be sent to indicate the user's
      selection. Using the same name for multiple elements is not a
      problem in this case because only one of those elements can be
      selected at a time, so only one value can be submitted with that
      name.
    

<p class=para>
      When more than one element in a form has the same
      <tt class=literal>NAME</tt> attribute, JavaScript simply places those
      elements into an array using the specified name. So, if the Radio
      objects in the example above were part of our form named
      "questionnaire", then you could refer to them with expressions like
      these:
      

<div class=programlisting>
<p>
<pre>
document.questionnaire.favorite[0]
document.questionnaire.favorite[1]
</PRE>
</DIV>


    

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch17_04.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src="gifs/txthome.gif" alt="Home" border=0></a></td>
<td width=172 align=right valign=top><a href="ch17_06.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Form Element Names and Values</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td>
<td width=172 align=right valign=top>Form Verification Example</td>
</tr>
</table>

<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
</DIV>

</BODY>
</HTML>
