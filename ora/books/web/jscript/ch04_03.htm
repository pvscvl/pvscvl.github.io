<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 4] 4.3 Arithmetic Operators</TITLE>
<meta name="author" content="David Flanagan">
<meta name="date" content="Wed Apr 23 18:04:49 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="JavaScript">
<meta name="title" content="JavaScript: The Definitive Guide">
<!-- JavaScript: pathcont.js -->
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><img src="gifs/smbanner.gif" alt="Javascript: The Definitive Guide"></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch04_02.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b>Chapter 4</b></td>
<td width=172 align=right valign=top><a href="ch04_04.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>
<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="ch04-SECT1-AUTOID.3">4.3 Arithmetic Operators</A></h2>

<p class=para>
<a name="CH04.ARITH1"></A><a name="CH04.ARITH2"></A><a name="CH04.ARITH3"></A>      Having explained operator precedence, associativity, and other
      background material, we can start to describe the operators
      themselves. This section details the arithmetic operators.
    

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch04-SECT2-AUTOID.5">Addition (+)</A></h3>

<p class=para>
	The <tt class=literal>+</tt> operator adds its two numeric
	operands. If both operands are strings, then it returns a string
	that is the result of concatenating the second operand onto the
	first. If either operand is a string, then the other is
	converted to a string, and the two strings are concatenated.
	Furthermore, if either operand is an object, then both operands
	are converted to strings and concatenated.
      

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch04-SECT2-AUTOID.6">Subtraction (-)</A></h3>

<p class=para>
	The <tt class=literal>-</tt> operator subtracts its second operand
	from its first. Both operands must be numbers. Used as a unary
	operator, <tt class=literal>-</tt> negates its operand.
      

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch04-SECT2-AUTOID.7">Multiplication (*)</A></h3>

<p class=para>
	The <tt class=literal>*</tt> operator multiplies its two operands,
	which must both be numbers.
      

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch04-SECT2-AUTOID.8">Division (/)</A></h3>

<p class=para>
	The <tt class=literal>/</tt> operator divides its first operand by
	its second. Both operands must be numbers. If you are a C
	programmer, you might expect to get an integer result when you
	divide one integer by another. In JavaScript, however, all
	numbers are floating-point, so all divisions have floating-point
	results: <tt class=literal>5/2</tt> evaluates to
	<tt class=literal>2.5</tt>, not <tt class=literal>2</tt>.
      

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch04-SECT2-AUTOID.9">Modulo (%)</A></h3>

<p class=para>
	The <tt class=literal>%</tt> operator computes the first operand
	modulo the second operand. That is, it returns the remainder
	when the first operand is divided by the second operand an
	integer number of times. Both operands must be numbers. For
	example, <tt class=literal>5 % 2</tt> evaluates to
	<tt class=literal>1</tt>.
      

<p class=para>
	While the modulo operator is typically used with integer
	operands, it also works for floating-point values. For example,
	<tt class=literal>4.2 % 2.1 == 0</tt>.
      

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch04-SECT2-AUTOID.10">Unary Negation (-)</A></h3>

<p class=para>
	When <tt class=literal>-</tt> is used as a unary operator,
	before a single operand, it performs unary negation, i.e., it
	converts a positive value to an equivalently negative value,
	and vice versa.
      

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch04-SECT2-AUTOID.11">Increment (++)</A></h3>

<p class=para>
	The <tt class=literal>++</tt> operator increments (i.e., adds 1
	to) its single operand, which must be a variable, an element
	of an array, or a property of an object that refers to a
	numeric value. The precise behavior of this operator depends
	on its position relative to the operand. When used before the
	operand, where it is known as the pre-increment operator, it
	increments the operand and evaluates to the incremented value
	of that operand. When used after the operand, where it is
	known as the post-increment operator, it increments its
	operand, but evaluates to the
	<i class=emphasis>unincremented</I> value of that operand.
      

<p class=para>
	For example, the following code sets both <tt class=literal>i</tt>
	and <tt class=literal>j</tt> to <tt class=literal>2</tt>:
	

<div class=programlisting>
<p>
<pre>
i = 1;
j = ++i;
</PRE>
</DIV>


	But these lines set <tt class=literal>i</tt> to <tt class=literal>2</tt>
	and <tt class=literal>j</tt> to <tt class=literal>1</tt>:
	

<div class=programlisting>
<p>
<pre>
i = 1;
j = i++;
</PRE>
</DIV>


	This operator, in both its forms, is most commonly used to
	increment a counter that controls a loop.
      

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch04-SECT2-AUTOID.12">Decrement (--)</A></h3>

<p class=para>
	The <tt class=literal>--</tt> operator
	decrements (i.e., subtracts 1 from) its single numeric
	operand, which must be a variable, an element of an array, or
	a property of an object.  Like the <tt class=literal>++</tt>
	operator, the precise behavior of
	<tt class=literal>--</tt> depends on its
	position relative to the operand. When used before the
	operand, it decrements and returns the decremented value. When
	used after the operand, it decrements, but returns the
	<i class=emphasis>undecremented</I> value.
      

</DIV>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch04_02.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src="gifs/txthome.gif" alt="Home" border=0></a></td>
<td width=172 align=right valign=top><a href="ch04_04.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Operator Overview</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td>
<td width=172 align=right valign=top>Comparison Operators</td>
</tr>
</table>

<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
</DIV>

</BODY>
</HTML>
