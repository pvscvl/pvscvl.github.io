<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 15] 15.5 Cookie Example</TITLE>
<meta name="author" content="David Flanagan">
<meta name="date" content="Thu Apr 24 13:36:43 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="JavaScript">
<meta name="title" content="JavaScript: The Definitive Guide">
<!-- JavaScript: pathcont.js -->
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><img src="gifs/smbanner.gif" alt="Javascript: The Definitive Guide"></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch15_04.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b>Chapter 15</b></td>
<td width=172 align=right valign=top><a href="ch16_01.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>
<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="ch15-SECT1-AUTOID.5">15.5 Cookie Example</A></h2>

<p class=para>
      <a href="#JSCRIPT-CH-COOKIES-EX-1">Example 15-1</A> brings all this
      discussion of cookies together. This example defines a Cookie
      class. When you create a Cookie object, you specify a
      Document object, a name for the cookie, and, optionally, an
      expiration time, a path, a domain, and whether the cookie should
      be secure. After creating a Cookie object, you may set
      arbitrary properties on this object. When you call the
      <tt class=literal>store()</tt> method of the object, these
      property names and values will be stored as the value of the
      cookie (a single cookie, not one for each property).  Later,
      when you return to the page, or on another page, you can create
      a Cookie object with the same name. When you invoke the
      <tt class=literal>load()</tt> method of the object, the cookie value
      will be read and parsed, and the stored properties will be
      re-created in the new Cookie object. Finally, if you call the
      <tt class=literal>remove()</tt> method of the Cookie object, the
      cookie values will be deleted.
    

<p class=para>
      This example demonstrates a useful and elegant way to use
      cookies. The code is somewhat complicated, but is worth
      studying. You might choose to start at the bottom of the
      example, so you understand how the Cookie class is used before
      you start trying to understand how it is defined.
    

<div class=example>
<h4 class=example><a class="TITLE" name="JSCRIPT-CH-COOKIES-EX-1">Example 15-1: A Utility Class for Working with Cookies</A></h4>

<div class=programlisting>
<p>
<pre>
&lt;SCRIPT LANGUAGE="JavaScript1.1"&gt;
//<tt class=replaceable><i> The constructor function: creates a cookie object for the specified</i></tt>
//<tt class=replaceable><i> document, with a specified name and optional attributes.</i></tt>
//<tt class=replaceable><i> Arguments:</i></tt>
//<tt class=replaceable><i>   document: the Document object that the cookie is stored for. Required.</i></tt>
//<tt class=replaceable><i>   name:     a string that specifies a name for the cookie. Required.</i></tt>
//<tt class=replaceable><i>   hours:    an optional number that specifies the number of hours from now</i></tt>
//<tt class=replaceable><i>             that the cookie should expire.</i></tt>
//<tt class=replaceable><i>   path:     an optional string that specifies the cookie path attribute.</i></tt>
//<tt class=replaceable><i>   domain:   an optional string that specifies the cookie domain attribute.</i></tt>
//<tt class=replaceable><i>   secure:   an optional Boolean value that, if true, requests a secure cookie.</i></tt>
//<tt class=replaceable><i></i></tt>
function Cookie(document, name, hours, path, domain, secure)
{
    //<tt class=replaceable><i> All the predefined properties of this object begin with '$'</i></tt>
    //<tt class=replaceable><i> to distinguish them from other properties which are the values to</i></tt>
    //<tt class=replaceable><i> be stored in the cookie.</i></tt>
    this.$document = document;
    this.$name = name;
    if (hours)
        this.$expiration = new Date((new Date()).getTime() + hours*3600000);
    else this.$expiration = null;
    if (path) this.$path = path; else this.$path = null;
    if (domain) this.$domain = domain; else this.$domain = null;
    if (secure) this.$secure = true; else this.$secure = false;
}
//<tt class=replaceable><i> This function is the store() method of the Cookie object.</i></tt>
function _Cookie_store()
{
    //<tt class=replaceable><i> First, loop through the properties of the Cookie object and</i></tt>
    //<tt class=replaceable><i> put together the value of the cookie. Since cookies use the</i></tt>
    //<tt class=replaceable><i> equals sign and semicolons as separators, we'll use colons</i></tt>
    //<tt class=replaceable><i> and ampersands for the individual state variables we store </i></tt>
    //<tt class=replaceable><i> within a single cookie value. Note that we escape the value</i></tt>
    //<tt class=replaceable><i> of each state variable, in case it contains punctuation or other</i></tt>
    //<tt class=replaceable><i> illegal characters.</i></tt>
    var cookieval = "";
    for(var prop in this) {
        //<tt class=replaceable><i> Ignore properties with names that begin with '$' and also methods.</i></tt>
        if ((prop.charAt(0) == '$') || ((typeof this[prop]) == 'function')) 
            continue;
        if (cookieval != "") cookieval += '&amp;';
        cookieval += prop + ':' + escape(this[prop]);
    }
    //<tt class=replaceable><i> Now that we have the value of the cookie, put together the </i></tt>
    //<tt class=replaceable><i> complete cookie string, which includes the name, and the various</i></tt>
    //<tt class=replaceable><i> attributes specified when the Cookie object was created.</i></tt>
    var cookie = this.$name + '=' + cookieval;
    if (this.$expiration)
        cookie += '; expires=' + this.$expiration.toGMTString();
    if (this.$path) cookie += '; path=' + this.$path;
    if (this.$domain) cookie += '; domain=' + this.$domain;
    if (this.$secure) cookie += '; secure';
    //<tt class=replaceable><i> Now store the cookie by setting the magic Document.cookie property.</i></tt>
    this.$document.cookie = cookie;
}
//<tt class=replaceable><i> This function is the load() method of the Cookie object.</i></tt>
function _Cookie_load()
{
    //<tt class=replaceable><i> First, get a list of all cookies that pertain to this document.</i></tt>
    //<tt class=replaceable><i> We do this by reading the magic Document.cookie property.</i></tt>
    var allcookies = this.$document.cookie;
    if (allcookies == "") return false;
    //<tt class=replaceable><i> Now extract just the named cookie from that list.</i></tt>
    var start = allcookies.indexOf(this.$name + '=');
    if (start == -1) return false;   //<tt class=replaceable><i> cookie not defined for this page.</i></tt>
    start += this.$name.length + 1;  //<tt class=replaceable><i> skip name and equals sign.</i></tt>
    var end = allcookies.indexOf(';', start);
    if (end == -1) end = allcookies.length;
    var cookieval = allcookies.substring(start, end);
    //<tt class=replaceable><i> Now that we've extracted the value of the named cookie, we've</i></tt>
    //<tt class=replaceable><i> got to break that value down into individual state variable </i></tt>
    //<tt class=replaceable><i> names and values. The name/value pairs are separated from each</i></tt>
    //<tt class=replaceable><i> other with ampersands, and the individual names and values are</i></tt>
    //<tt class=replaceable><i> separated from each other with colons. We use the split method</i></tt>
    //<tt class=replaceable><i> to parse everything.</i></tt>
    var a = cookieval.split('&amp;');  //<tt class=replaceable><i> break it into array of name/value pairs</i></tt>
    for(var i=0; i &lt; a.length; i++)  //<tt class=replaceable><i> break each pair into an array</i></tt>
        a[i] = a[i].split(':');
    //<tt class=replaceable><i> Now that we've parsed the cookie value, set all the names and values</i></tt>
    //<tt class=replaceable><i> of the state variables in this Cookie object. Note that we unescape()</i></tt>
    //<tt class=replaceable><i> the property value, because we called escape() when we stored it.</i></tt>
    for(var i = 0; i &lt; a.length; i++) {
        this[a[i][0]] = unescape(a[i][1]);
    }
    //<tt class=replaceable><i> We're done, so return the success code.</i></tt>
    return true;
}
//<tt class=replaceable><i> This function is the remove() method of the Cookie object.</i></tt>
function _Cookie_remove()
{
    var cookie;
    cookie = this.$name + '=';
    if (this.$path) cookie += '; path=' + this.$path;
    if (this.$domain) cookie += '; domain=' + this.$domain;
    cookie += '; expires=Fri, 02-Jan-1970 00:00:00 GMT';
    this.$document.cookie = cookie;
}
//<tt class=replaceable><i> Create a dummy Cookie object, so we can use the prototype object to make</i></tt>
//<tt class=replaceable><i> the functions above into methods.</i></tt>
new Cookie();
Cookie.prototype.store = _Cookie_store;
Cookie.prototype.load = _Cookie_load;
Cookie.prototype.remove = _Cookie_remove;
//<tt class=replaceable><i>===================================================================</i></tt>
//<tt class=replaceable><i>  The code above is the definition of the Cookie class.</i></tt>
//<tt class=replaceable><i>  The code below is a sample use of that class.</i></tt>
//<tt class=replaceable><i>===================================================================</i></tt>
//<tt class=replaceable><i> Create the cookie we'll use to save state for this web page.</i></tt>
//<tt class=replaceable><i> Since we're using the default path, this cookie will be accessible</i></tt>
//<tt class=replaceable><i> to all web pages in the same directory as this file or "below" it.</i></tt>
//<tt class=replaceable><i> Therefore, it should have a name that is unique among those pages.</i></tt>
//<tt class=replaceable><i> Note that we set the expiration to 10 days in the future.</i></tt>
var visitordata = new Cookie(document, "name_color_count_state", 240);
//<tt class=replaceable><i> First, try to read data stored in the cookie. If the cookie is not</i></tt>
//<tt class=replaceable><i> defined, or if it doesn't contain the data we need, then query the</i></tt>
//<tt class=replaceable><i> user for that data.</i></tt>
if (!visitordata.load() || !visitordata.name || !visitordata.color) {
    visitordata.name = prompt("What is your name:", "");
    visitordata.color = prompt("What is your favorite color:", "");
}
//<tt class=replaceable><i> Keep track of how many times this user has visited the page:</i></tt>
if (visitordata.visits == null) visitordata.visits = 0;
visitordata.visits++;
//<tt class=replaceable><i> Store the cookie values, even if they were already stored, so that the </i></tt>
//<tt class=replaceable><i> expiration date will be reset to 10 days from this most recent visit.</i></tt>
//<tt class=replaceable><i> Also, store them again to save the updated visits state variable.</i></tt>
visitordata.store();
//<tt class=replaceable><i> Now we can use the state variables we read:</i></tt>
document.write('&lt;FONT SIZE=7 COLOR="' + visitordata.color + '"&gt;' +
               'Welcome, ' + visitordata.name + '!' +
               '&lt;/FONT&gt;' +
               '&lt;P&gt;You have visited ' + visitordata.visits + ' times.');
&lt;/SCRIPT&gt;
&lt;FORM&gt;
&lt;INPUT TYPE="button" VALUE="Forget My Name" onClick="visitordata.remove();"&gt;
&lt;/FORM&gt;
</PRE>
</DIV>

</DIV>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch15_04.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src="gifs/txthome.gif" alt="Home" border=0></a></td>
<td width=172 align=right valign=top><a href="ch16_01.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Cookie Limitations</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td>
<td width=172 align=right valign=top>Special Effects with Images</td>
</tr>
</table>

<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
</DIV>

</BODY>
</HTML>
