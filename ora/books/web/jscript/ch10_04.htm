<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 10] 10.4 JavaScript in URLs</TITLE>
<meta name="author" content="David Flanagan">
<meta name="date" content="Thu Apr 24 13:34:08 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="JavaScript">
<meta name="title" content="JavaScript: The Definitive Guide">
<!-- JavaScript: pathcont.js -->
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><img src="gifs/smbanner.gif" alt="Javascript: The Definitive Guide"></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch10_03.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b>Chapter 10</b></td>
<td width=172 align=right valign=top><a href="ch10_05.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>
<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="ch10-SECT1-AUTOID.4">10.4 JavaScript in URLs</A></h2>

<p class=para>
      Another way that JavaScript code can be included on the client
      side is in a URL following the <tt class=literal>javascript:</tt>
      pseudo-protocol specifier. This special protocol type specifies
      that the body of the URL is arbitrary JavaScript code to be
      interpreted by the JavaScript interpreter.  If the JavaScript
      code in a <tt class=literal>javascript:</tt> URL contains multiple
      statements, the statements must be separated from one another by
      semicolons. Such a URL might look like the following:
      

<div class=programlisting>
<p>
<pre>
javascript:var now = new Date(); "&lt;h1&gt;The time is:&lt;/h1&gt;" + now;
</PRE>
</DIV>


    

<p class=para>
      When the browser "loads" one of these JavaScript URLs, it executes
      the JavaScript code contained in the URL and displays the
      "document" referred to by the URL. This "document" is the string
      value of the last JavaScript statement in the URL. This string
      will be formatted and displayed just like any other document
      loaded into the browser.
    

<p class=para>
      More commonly, a JavaScript URL will contain JavaScript statements
      that perform actions but return no value. For example:
      

<div class=programlisting>
<p>
<pre>
javascript:alert("Hello World!")
</PRE>
</DIV>


      When this sort of URL is "loaded," the browser executes the
      JavaScript code, but, because there is no value to display as the
      new document, it does not modify the currently displayed
      document. 
    

<p class=para>
      Note that in Navigator 3.0, you can use the
      <tt class=literal>void</tt> operator to force an expression to have no
      value. This is useful when you want to execute an assignment
      statement, for example, but do not want to display the assigned
      value in the browser window. (Recall that assignment statements
      are also expressions, and that they evaluate to the value of the
      right-hand-side of the assignment.)
    

<p class=para>
      The <tt class=literal>javascript:</tt> URL can be used anywhere you'd
      use a regular URL. It is not altogether clear, however, why you'd
      want to do so. In Navigator, one important use for this syntax is
      typing it directly into the <b>Location</b> field of your browser, where it
      allows you to try out and test arbitrary JavaScript code without
      having to get out your editor and create an HTML file containing
      the code. In fact, Navigator takes this idea even further. As
      described in <a href="ch01_01.htm">Chapter 1, <i>Introduction to JavaScript</i></A>, if you enter the
      URL <tt class=literal>javascript:</tt> alone, with no JavaScript code
      following it, Navigator displays a JavaScript interpreter page
      that allows you to sequentially enter and execute lines of code.
      Unfortunately, neither of these techniques work in Internet
      Explorer 3.0.
    

<p class=para>
      <tt class=literal>javascript:</tt> URLs can also be used in other
      contexts. You might use one as the target of a hypertext link,
      for example. Then when the user clicks on the link, the specified
      JavaScript code will be executed. Or, if you specify a
      <tt class=literal>javascript:</tt> URL as the value of the ACTION
      attribute of a <tt class=literal>&lt;FORM&gt;</tt> tag, then the
      JavaScript code in the URL will be executed when the user submits
      the form. In these contexts, the <tt class=literal>javascript:</tt>
      URL is essentially a substitute for an event-handler. Event
      handlers and <tt class=literal>javascript:</tt> URLs can often be used
      essentially interchangeably, and which you choose is basically a
      stylistic matter. 
    

<p class=para>
      There are a few circumstances where a
      <tt class=literal>javascript:</tt> URL can be used with objects that
      do not support event handlers. For example the
      <tt class=literal>&lt;AREA&gt;</tt> tag does not support an
      <tt class=literal>onClick()</tt> event-handler on Windows platforms in
      Navigator 3.0 (one will be added in the next release, though). So
      if you want to execute JavaScript code when the user clicks on a
      client-side image map, you must use a
      <tt class=literal>javascript:</tt> URL.
    

<p class=para>
      Internet Explorer supports the <tt class=literal>javascript:</tt>
      protocol specifiers for URLs, but does not have a special built-in
      JavaScript interpreter page. A future version of Explorer will
      probably also support a <tt class=literal>vbscript:</tt> protocol.
    

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch10_03.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src="gifs/txthome.gif" alt="Home" border=0></a></td>
<td width=172 align=right valign=top><a href="ch10_05.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>JavaScript and Events</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td>
<td width=172 align=right valign=top>JavaScript Entities</td>
</tr>
</table>

<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
</DIV>

</BODY>
</HTML>
