<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 11] 11.5 The JavaScript Name Space</TITLE>
<meta name="author" content="David Flanagan">
<meta name="date" content="Wed Apr 23 18:14:46 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="JavaScript">
<meta name="title" content="JavaScript: The Definitive Guide">
<!-- JavaScript: pathcont.js -->
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><img src="gifs/smbanner.gif" alt="Javascript: The Definitive Guide"></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch11_04.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b>Chapter 11</b></td>
<td width=172 align=right valign=top><a href="ch11_06.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>
<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="ch11-SECT1-AUTOID.5">11.5 The JavaScript Name Space</A></h2>

<p class=para>
<a name="CH10.SPACE1"></A><a name="CH10.SPACE2"></A>      We've said that the Window object is really the most central one
      in client-side JavaScript. This is because it is the object that
      defines the <i class=emphasis>name space</I> of a program. We saw
      earlier that every JavaScript expression implicitly refers to
      the current window.  This includes expressions as simple as
      <tt class=literal>window</tt>, which is a reference to a property
      within the current window that happens to refer to that window
      itself.
    

<p class=para>
      But if every expression refers to the current window, then so does
      code like this:
      

<div class=programlisting>
<p>
<pre>
var i;  //<tt class=replaceable><i> declare a variable i</i></tt>
i = 0;  //<tt class=replaceable><i> assign the variable a value</i></tt>
</PRE>
</DIV>


      The assignment <tt class=literal>i = 0</tt> is actually the same as writing
      

<div class=programlisting>
<p>
<pre>
window.i = 0;
</PRE>
</DIV>


    

<p class=para>
      This is an important point to understand about client-side
      JavaScript: <i class=emphasis>variables are nothing more than properties
      of the current window.</I> (This is not true for local
      variables declared within a function, however.)
    

<p class=para>
      One implication of the fact that variables are properties of the
      current Window object is that two variables with the same name may
      be declared in different windows or different frames, and they
      will not overwrite or conflict with each other.
    

<p class=para>
      Another implication is that JavaScript code running in one window
      or frame may read and write variables declared by code in another
      window or frame, as long as the first window knows how to refer to
      the second window.[2]
      So, if a top-level window has two frames, and code in the first
      frame does the following:
      

<div class=programlisting>
<p>
<pre>
parent.frames[1].i = 3;
</PRE>
</DIV>


      it is equivalent to code in the second frame doing the following:
      

<div class=programlisting>
<p>
<pre>
i = 3;
</PRE>
</DIV>


    

<blockquote class=footnote>
<p class=para>[2] 
	  See <a href="ch20_01.htm">Chapter 20, <i>JavaScript Security</i></A>, however, for a
	  discussion of a "security hobble" that prevents scripts from
	  one web server from reading values from windows that contain
	  data from other web servers.
	
</blockquote>
<p class=para>
      The final implication of the equivalence between variables and
      window properties is that there is no such thing as a "global
      variable" in client-side JavaScript--i.e., there are no
      user-created variables that are global to Navigator as a whole,
      across all windows and frames. Each variable is defined only
      within one window. 
    

<p class=para>
      Recall that the <tt class=literal>function</tt> keyword that defines
      functions declares a variable just like the <tt class=literal>var</tt>
      keyword does. Since functions are referred to by variables, they
      to are defined only within the window in which they are declared.
      That is, if you define a function in one window, you cannot use it
      in another, unless you explicitly assign the function to a
      variable in the other window. 
    

<p class=para>
      Remember that constructors are also functions, so when you define
      a class of objects with a constructor function and an associated
      prototype object, that class is only defined for a single window.
      (See <a href="ch07_01.htm">Chapter 7, <i>Objects</i></A>, for details on
      constructor functions and prototype objects.)  This is true of
      predefined constructors as well as constructors you define
      yourself. The String constructor is available in all windows, but
      that is because all windows automatically are given a property
      that refers to this predefined constructor function. Just as
      each window has its own separate reference to the constructor,
      each window has a separate copy of the prototype object for a
      constructor. So if you write a new method for manipulating
      JavaScript strings, and make it a method of the String class by
      assigning it to the <tt class=literal>String.prototype</tt> object in
      the current window, then all strings in that window will be able
      to use the new method. But the new method will not be accessible
      to strings defined in other windows.
    

<p class=para>
      Bear in mind that this discussion of variables and Window object
      properties does not apply to variables declared within functions.
      These "local" variables exist only within the function body and
      are not accessible outside of the function. Also, note that there
      is one difference between variables and properties of the current
      window. This difference is revealed in the behavior of the
      <tt class=literal>for/in</tt> loop. Window properties that were
      created by variable declarations are not returned by the
      <tt class=literal>for/in</tt> loop, while "regular" properties of the
      Window are. See <a href="ch05_01.htm">Chapter 5, <i>Statements</i></A>, for
      details.
    

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch11-SECT2-AUTOID.2">Variable Scope</A></h3>

<p class=para>
<a name="CH11.SCOPE1"></A><a name="CH11.SCOPE2"></A>	We saw above that top-level variables are implemented as
	properties of the current window or frame object. In <a href="ch06_01.htm">Chapter 6, <i>Functions</i></A>, we saw that local variables
	in a function are implemented as transient properties of the
	function object itself. From these facts, we can begin to
	understand variable scoping in JavaScript; we can begin to see
	how variable names are looked up.
      

<p class=para>
	Suppose a function <tt class=literal>f</tt> uses the identifier
	<tt class=literal>x</tt> in an expression. In order to evaluate the
	expression, JavaScript must look up the value of this
	identifier. To do so, it first checks if <tt class=literal>f</tt>
	itself has a property named <tt class=literal>x</tt>. If so, the
	value of that property is used; it is an argument, local
	variable, or static variable assigned to the function. If
	<tt class=literal>f</tt> does not have a property named
	<tt class=literal>x</tt>, then JavaScript next checks to see if the
	window that <tt class=literal>f</tt> is defined in has a property
	named <tt class=literal>x</tt>, and, if so, it uses the value of
	that property. In this case <tt class=literal>x</tt> would be a
	top-level or "global" (to that window) variable. Note that
	JavaScript looks up <tt class=literal>x</tt> in the window in which
	<tt class=literal>f</tt> was defined, which may not be the same as
	the window that is executing the script that called
	<tt class=literal>f</tt>. This is a subtle but important
	difference that can arise in some circumstances.
      

<p class=para>
	A similar process occurs if the function <tt class=literal>f</tt>
	uses <tt class=literal>document.title</tt> in an expression. In
	order to evaluate <tt class=literal>document.title</tt>, JavaScript
	must first evaluate <tt class=literal>document</tt>. It does this
	in the same way it evaluated <tt class=literal>x</tt>. First it
	sees if <tt class=literal>f</tt> has a property named
	<tt class=literal>document</tt>. If not, it checks whether its
	Window object has such a property. Once it has obtained a value
	for <tt class=literal>document</tt>, it proceeds to look up
	<tt class=literal>title</tt> as a property that object--it does not
	check the properties of the function or window, in this case, of
	course. In this example, the code probably refers to the
	<tt class=literal>document</tt> property of the Window object, and
	if the function inadvertently defined a local variable named
	<tt class=literal>document</tt>, the
	<tt class=literal>document.title</tt> expression might well
	be evaluated incorrectly.
      

<p class=para>
	What we learn from these examples is that identifiers are
	evaluated in two scopes: the current function, and the window in
	which the function is defined. In <a href="ch05_01.htm">Chapter 5, <i>Statements</i></A> we saw that the
	<tt class=literal>with</tt> statement can be used to add additional
	scopes. When an identifier is evaluated, it is first looked up
	in the scopes specified by any containing
	<tt class=literal>with</tt> statements. For example, if a top-level
	script runs the following code:
	

<div class=programlisting>
<p>
<pre>
with(o) {
  document.write(x);
}
</PRE>
</DIV>


	Then the identifier <tt class=literal>x</tt> is evaluated first in
	the scope of the object <tt class=literal>o</tt>. If no definition
	is found in that object's properties, then <tt class=literal>x</tt>
	is evaluated in the context of the current window. If the same
	code occurred within a function <tt class=literal>f</tt> then
	<tt class=literal>x</tt> would be looked up first as a property of
	<tt class=literal>o</tt>, then as a property of <tt class=literal>f</tt>
	and finally as a property of the current window. 
      

<p class=para>
	Recall that <tt class=literal>with</tt> statements can be nested
	arbitrarily, creating a variable "scope" of any depth.
	One interesting way to use <tt class=literal>with</tt> is with a
	window reference:
	

<div class=programlisting>
<p>
<pre>
with(parent.frames[1]) {
   ...
}
</PRE>
</DIV>


	This technique allows code in one window to easily read
	properties of another window. Another technique that is
	sometimes of interest is to place the entire body of a
	function within the block of a <tt class=literal>with(this)</tt>
	statement.  What this does is create a method that evaluates
	identifiers by looking them up first as properties of the
	object that it is a method of. Note, however, that such a
	method would find properties of its object
	<i class=emphasis>before</I> it found its own local variables
	and arguments, which is unusual behavior!
      

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="ch11-SECT3-AUTOID.1">Scope of event handlers</A></h4>

<p class=para>
	  Event handlers are scoped differently than regular functions
	  are. Consider the <tt class=literal>onChange()</tt> event
	  handler of a text input field named <tt class=literal>t</tt>
	  within an HTML form named <tt class=literal>f</tt>. If this
	  event handler wants to evaluate the identifier
	  <tt class=literal>x</tt>, it first uses the scope of any
	  <tt class=literal>with</tt> statements of course, and then looks
	  at local variables and arguments, as we saw above. If the
	  event handler were a standalone function, it would look in
	  the scope of the containing window next and stop there. But
	  because this function is an event handler, it next looks in
	  the scope of the text input element <tt class=literal>t</tt>. If
	  the property <tt class=literal>x</tt> is not defined there, it
	  looks at the properties of the form object
	  <tt class=literal>f</tt>. If <tt class=literal>f</tt> does not have
	  a property named <tt class=literal>x</tt>, JavaScript next
	  checks to see if the Document object that contains the form
	  has a definition of this property. Finally, if no definition
	  of <tt class=literal>x</tt> is found in any of these objects,
	  the containing window is checked.
	

<p class=para>
	  If all identifiers had unique names, scope would never
	  matter.  But identifiers are not always unique, and we have
	  to pay attention to scope. One important case is the
	  <tt class=literal>Window.open()</tt> method and the
	  <tt class=literal>Document.open()</tt> method. If a top-level
	  script of a regular function calls
	  <tt class=literal>open()</tt>, JavaScript's scoping rules will
	  find the <tt class=literal>open</tt> property of the Window
	  object and use this method. On the other hand, if an event
	  handler calls <tt class=literal>open()</tt>, the scoping rules
	  are different, and JavaScript will find the definition of
	  <tt class=literal>open</tt> in the Document object before it
	  finds it in the Window object. The same code may work in
	  different ways depending on its context. The moral of this
	  particular example is to never use the
	  <tt class=literal>open()</tt> method without explicitly
	  specifying whether you mean
	  <tt class=literal>document.open()</tt> or
	  <tt class=literal>window.open()</tt>. Be similarly cautious when
	  using <tt class=literal>location</tt>; it, too, is a property of
	  both the Window and Document objects.
	

<p class=para>
	  Finally, note that if an event handler doesn't call
	  <tt class=literal>open()</tt> directly but instead calls a
	  function that calls <tt class=literal>open()</tt>, the function
	  does <i class=emphasis>not</I> inherit the scope of the
	  event handler that invoked it. The function's scope would be
	  the function itself, and then the window that contains it, so
	  in this case, the <tt class=literal>open()</tt> method would be
	  interpreted as the <tt class=literal>Window.open()</tt> method, not
	  <tt class=literal>Document.open()</tt>.
	

</DIV>

</DIV>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch11_04.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src="gifs/txthome.gif" alt="Home" border=0></a></td>
<td width=172 align=right valign=top><a href="ch11_06.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Window and Frame Names</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td>
<td width=172 align=right valign=top>Window and Variable Lifetime</td>
</tr>
</table>

<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
</DIV>

</BODY>
</HTML>
