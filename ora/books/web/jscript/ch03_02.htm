<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 3] 3.2 Numbers</TITLE>
<meta name="author" content="David Flanagan">
<meta name="date" content="Thu Apr 24 13:13:50 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="JavaScript">
<meta name="title" content="JavaScript: The Definitive Guide">
<!-- JavaScript: pathcont.js -->
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><img src="gifs/smbanner.gif" alt="Javascript: The Definitive Guide"></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch03_01.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b>Chapter 3</b></td>
<td width=172 align=right valign=top><a href="ch03_03.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>
<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="ch03-SECT1-AUTOID.2">3.2 Numbers</A></h2>

<p class=para>
<a name="CH03.NUM1"></A><a name="CH03.NUM2"></A>  Numbers are the most basic data type there is, and require very
  little explanation. As we saw in <a href="ch02_01.htm">Chapter 2, <i>Lexical Structure</i></A>, numeric literals can be integer or
  floating-point, and integers can be expressed in decimal, octal, or
  hexadecimal notation.  JavaScript differs from programming languages
  like C and Java in that it does not make a distinction between
  integer value and floating point values. All numbers in JavaScript
  are represented as floating-point values. JavaScript represents
  numbers using the standard 8-byte IEEE floating-point numeric
  format, which means that it can represent numbers as large as
  +/-1.7976931348623157*10^308,
  and numbers as small as
  +/-2.2250738585072014*10^-308.[2]
    

<blockquote class=footnote>
<p class=para>[2] 
	  This format will be familiar to Java programmers as the
	  format of the <tt class=literal>double</tt> type. It is also
	  the <tt class=literal>double</tt> format used in almost all
	  modern implementations of C and C++.
	
</blockquote>
<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch03-SECT2-AUTOID.3">Arithmetic and Mathematical Functions</A></h3>

<p class=para>
	JavaScript programs work with numbers using the arithmetic
	operators that the language provides. These include
	<tt class=literal>+</tt> for addition, <tt class=literal>-</tt> for
	subtraction, <tt class=literal>*</tt> for multiplication, and
	<tt class=literal>/</tt> for division. Full details on these and
	other arithmetic operators are in <a href="ch04_01.htm">Chapter 4, <i>Expressions and Operators</i></A>.
      

<p class=para>
	In addition to these basic arithmetic operations, JavaScript
	supports more complex mathematical operations through a large
	number of mathematical functions that are a core part of the
	language. For convenience, these functions are all stored as
	properties of a single object named <tt class=literal>Math</tt>, and
	so we use always use the literal name <tt class=literal>Math</tt> to
	access them. For example, to compute the sine of the numeric
	value <tt class=literal>x</tt>, we would write code like this:
	

<div class=programlisting>
<p>
<pre>
sine_of_x = Math.sin(x);
</PRE>
</DIV>


	And to compute the square-root of a numeric expression, we might
	use code like this (note the use of the <tt class=literal>*</tt>
	operator for multiplication):
	

<div class=programlisting>
<p>
<pre>
hypot = Math.sqrt(x*x + y*y);
</PRE>
</DIV>


	See the Math object and subsequent listings in the reference
	section of this book for full details on all the mathematical
	functions supported by JavaScript.
      

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch03-SECT2-AUTOID.4">Special Numeric Values</A></h3>

<p class=para>
	There are several special numeric values used by JavaScript.
	When a floating-point value becomes larger than the largest
	representable type, the result is a special infinity value,
	which JavaScript prints as <tt class=literal>Infinity</tt>. Similarly,
	when a negative value becomes more negative than the most
	negative representable number, the result is negative infinity,
	printed as <tt class=literal>-Infinity</tt>. (Internet Explorer 3.0
	prints these special infinity values in a less intuitive
	fashion; this will be fixed.)
      

<p class=para>
	Another special JavaScript numeric value is returned when a
	mathematical operation (such as division by zero) yields an
	undefined result or an error. In this case, the result is the
	special Not-a-Number value, printed as <tt class=literal>NaN</tt>.
	The special Not-a-Number value has special behavior: it does
	not compare equal to any number, including itself!  For this
	reason, a special function <tt class=literal>isNaN()</tt>
	is required to test for this value. In Navigator 2.0, the
	<tt class=literal>NaN</tt> value and the
	<tt class=literal>isNaN()</tt> do not work correctly on
	Windows and other platforms. On 2.0 Windows platforms, 0 is
	returned instead of <tt class=literal>NaN</tt> when a numeric
	value is undefined.  Similarly, <tt class=literal>NaN</tt> does
	not work in Internet Explorer 3.0, although it will in future
	versions. In IE 3.0, <tt class=literal>isNaN()</tt> always returns
	<tt class=literal>false</tt>, and functions return 0 instead of
	<tt class=literal>NaN</tt>.
      

<p class=para>
	In Navigator 3.0 (but not IE 3.0), there are constants defined
	for each of these special numeric values. These constants are
	listed in <a href="#JSCRIPT-CH-DATATYPES-TAB-CONSTANTS">Table 3.1</A>.
      

<p>
<div class=table>
<table>
<caption><a class="TITLE" name="JSCRIPT-CH-DATATYPES-TAB-CONSTANTS">Table 3-1: Special Numeric Constants</A></CAPTION>
<tr class=row>
<th align="left">Constant</TH>
<th align="left">Meaning</TH>
</TR>
<tr class=row>
<td align="left"><tt class=literal>Number.MAX_VALUE</tt></TD>
<td align="left">Largest representable number</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>Number.MIN_VALUE</tt></TD>
<td align="left">Most negative representable number</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>Number.NaN</tt></TD>
<td align="left">Special not-a-number value</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>Number.POSITIVE_INFINITY</tt></TD>
<td align="left">Special value to represent infinity</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>Number.NEGATIVE_INFINITY</tt></TD>
<td align="left">Special value to represent negative infinity</TD>
</TR>
</TABLE>
<p>
</DIV>
</DIV>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch03_01.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src="gifs/txthome.gif" alt="Home" border=0></a></td>
<td width=172 align=right valign=top><a href="ch03_03.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Variables</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td>
<td width=172 align=right valign=top>Strings</td>
</tr>
</table>

<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
</DIV>

</BODY>
</HTML>
