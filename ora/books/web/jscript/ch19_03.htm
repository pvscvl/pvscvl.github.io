<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 19] 19.3 LiveConnect Data Conversion</TITLE>
<meta name="author" content="David Flanagan">
<meta name="date" content="Wed Apr 23 18:24:55 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="JavaScript">
<meta name="title" content="JavaScript: The Definitive Guide">
<!-- JavaScript: pathcont.js -->
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><img src="gifs/smbanner.gif" alt="Javascript: The Definitive Guide"></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch19_02.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b>Chapter 19</b></td>
<td width=172 align=right valign=top><a href="ch19_04.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>
<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="ch19-SECT1-AUTOID.3">19.3 LiveConnect Data Conversion</A></h2>

<p class=para>
<a name="CH19.DATA"></A><a name="CH19.DATA3"></A>      Java is a strongly typed language with a relatively large number
      of data types. JavaScript is an untyped language with a
      relatively small number of types. Because of these major
      structural differences in the two languages, one of the central
      responsibilities of LiveConnect is data conversion. When
      JavaScript sets a Java class or instance field or passes an
      argument to a Java method, a JavaScript value must be converted to
      an equivalent Java value. And when JavaScript reads a Java class
      or instance field or obtains the return value of Java method, that
      Java value must be converted into a compatible JavaScript
      value.[2]
    

<blockquote class=footnote>
<p class=para>[2] 
	  In addition, data conversion must also happen when Java reads
	  or writes a JavaScript field or invokes a JavaScript method.
	  These conversions are done differently, however, and will be
	  described later in the chapter when we explain how to use
	  JavaScript from Java. For now, we're only considering the
	  data conversion that happens when JavaScript code interacts
	  with Java, not the other way around.
	
</blockquote>
<p class=para>
      <a href="#JSCRIPT-CH-LIVECONN-FIG-2">Figure 19-2</A> and
      <a href="#JSCRIPT-CH-LIVECONN-FIG-3">Figure 19-3</A>
      illustrate how data conversion is performed when JavaScript writes
      Java values and when it reads them.
    

<div class=figure>
<h4 class=figure><a class="TITLE" name="JSCRIPT-CH-LIVECONN-FIG-2">Figure 19-2: Data conversions performed when JavaScript writes Java values</A></h4>


<p>
<img align=middle src="figs/js1902.gif" alt="[Graphic: Figure 19-2]" width=503 height=453>

</DIV>

<div class=figure>
<h4 class=figure><a class="TITLE" name="JSCRIPT-CH-LIVECONN-FIG-3">Figure 19-3: Data conversions performed when JavaScript reads Java values</A></h4>


<p>
<img align=middle src="figs/js1903.gif" alt="[Graphic: Figure 19-3]" width=503 height=473>

</DIV>

<p class=para>
      Notice the following points about the data conversions illustrated
      in <a href="#JSCRIPT-CH-LIVECONN-FIG-2">Figure 19-2</A>.
      

<p>
<ul class=itemizedlist>
<li class=listitem>	    JavaScript numbers can be converted to any of the primitive
	    Java numeric types. The actual conversion performed will
	    depend, of course, on the type of the Java field being set
	    or method argument being passed. Note that you can lose
	    precision doing this, for example, when you pass a large
	    number to a Java field of type <tt class=literal>short</tt>, or
	    when you pass a floating-point value to a Java integral
	    type.
	  

<p>
<li class=listitem>	    JavaScript numbers can also be converted to instances of the
	    java class <i class=emphasis>java.lang.Double</I>, but not to
	    instances of related classes such as
	    <i class=emphasis>java.lang.Integer</I> or
	    <i class=emphasis>java.lang.Float</I>.
	  

<p>
<li class=listitem>	    JavaScript does not have any representation for character
	    data, so JavaScript numbers may also be converted to the
	    Java primitive <tt class=literal>char</tt> type.
	  

<p>
<li class=listitem>	    A JavaObject in JavaScript is "unwrapped" when passed to
	    Java, and is converted to the Java object it represents.
	    Note, however, that JavaClass objects in JavaScript are not
	    converted to Java instances of
	    <i class=emphasis>java.lang.Class</I>, as might be expected.
	  

<p>
</UL>

    

<p class=para>
      Also notice these points about the conversions illustrated in
      <a href="#JSCRIPT-CH-LIVECONN-FIG-3">Figure 19-3</A>.
      

<p>
<ul class=itemizedlist>
<li class=listitem>	    Since JavaScript does not have a type for character data,
	    the Java primitive <tt class=literal>char</tt> type is converted
	    to a JavaScript number, and not a string, as might be
	    expected.
	  

<p>
<li class=listitem>	    The figure shows that Java numbers are returned either as
	    primitive JavaScript numbers or as a JavaScript Number
	    object. Similarly, Java <tt class=literal>boolean</tt> values
	    are returned as primitive JavaScript Booleans or as
	    JavaScript Boolean objects. Which is returned depends on
	    whether the value read is a Java field or the return value
	    of a Java method. The discrepancy will be explained in a
	    subsection later in the chapter.
	  

<p>
<li class=listitem>	    Java instances of <i class=emphasis>java.lang.Double</I>,
	    <i class=emphasis>java.lang.Integer</I>, and similar classes
	    are not converted to JavaScript numbers. Like all Java
	    objects, they are converted to JavaObject objects in
	    JavaScript.
	  

<p>
<li class=listitem>	    Java strings are instances of
	    <i class=emphasis>java.lang.String</I>, so like other Java
	    objects they are converted to JavaObject objects rather than
	    to actual JavaScript strings.
	  

<p>
<li class=listitem>            Any type of Java array is converted to a JavaArray object
	    in JavaScript. Note, however, that Java instances of
	    <i class=emphasis>java.lang.Class</I> are not converted to
	    a JavaClass object--like other Java objects, they are
	    converted to a JavaObject.
        

<p>
</UL>

    

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch19-SECT2-AUTOID.6">Wrapper Objects</A></h3>

<p class=para>
	In addition to the note above, there is a very important concept
	that must be made clear in order for you to fully understand
	<a href="#JSCRIPT-CH-LIVECONN-FIG-2">Figure 19-2</A> and <a href="#JSCRIPT-CH-LIVECONN-FIG-3">Figure 19-3</A>. This is the idea of
	"wrapper" objects. While conversions between most JavaScript
	and Java primitive types are possible, conversions between
	object types are not, in general, possible. This is why
	LiveConnect defines the JavaObject object in JavaScript--it
	represents a Java object that cannot be directly converted to a
	JavaScript object. In a sense, a JavaObject is a JavaScript
	"wrapper" around a Java object. When JavaScript reads a Java
	value (a field or the return value of a method), Java objects
	are "wrapped" and JavaScript sees a JavaObject.
      

<p class=para>
	A similar thing happens when JavaScript writes a JavaScript object
	into a Java field or passes a JavaScript object to a Java method.
	There is no way to convert the JavaScript object to a Java object,
	so the object gets wrapped. Just as the JavaScript wrapper for a
	Java object is a JavaObject, the Java wrapper for a JavaScript
	object is the Java class
	<i class=emphasis>netscape.javascript.JSObject</I>.
      

<p class=para>
	It gets interesting when these wrapper objects are passed back.
	If JavaScript writes a JavaObject into a Java field or passes it
	to Java method, then LiveConnect first "unwraps" the object,
	converting the JavaObject back into the Java object that it
	represents. And similarly, if JavaScript reads a Java field or
	gets the return value of a Java method that is an instance of
	<i class=emphasis>netscape.javascript.JSObject</I>, then that
	JSObject is also unwrapped to reveal and return the original
	JavaScript object.
      

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch19-SECT2-AUTOID.7">Java Field Values versus Method Return Values</A></h3>

<p class=para>
	In Navigator 3.0, LiveConnect returns slightly different data
	types when a value is read from a Java field than it does when
	the same value is read as the return value of a Java method.
	<a href="#JSCRIPT-CH-LIVECONN-FIG-3">Figure 19-3</A> shows that all Java
	primitive numeric types and instances of
	<i class=emphasis>java.lang.Double</I> are returned as primitive
	JavaScript numbers or as Number objects. When the numeric
	return value of a method is read, it is returned as a primitive
	JavaScript number. But when a numeric value is read from a
	field, it is returned as a Number object.
      

<p class=para>
	Recall that Number objects in JavaScript behave almost the same, 
        but not exactly, as primitive JavaScript numbers. One important
	difference is that Number objects, like all JavaScript objects,
	use the + operator for string concatenation rather than
	addition. So code like the following can yield unexpected
	results:
	

<div class=programlisting>
<p>
<pre>
var r = new java.awt.Rectangle(0,0,5,5);
var w = r.width;         //<tt class=replaceable><i> This is a Number object, not a primitive number.</i></tt>
var new_w = w + 1;       //<tt class=replaceable><i> Oops!  new_w is now "51", not 6, as expected.</i></tt>
</PRE>
</DIV>


	To work around this problem, you can explicitly call the
	<tt class=literal>valueOf()</tt> method to convert a Number object
	to its corresponding numeric value. For example:
	

<div class=programlisting>
<p>
<pre>
var r = new java.awt.Rectangle(0,0,5,5);
var w = r.width.valueOf();  //<tt class=replaceable><i> Now we've got a primitive number.</i></tt>
var new_w = w + 1;          //<tt class=replaceable><i> This time, new_w is 6, as desired.</i></tt>
</PRE>
</DIV>


	You can also force a Number object to a primitive number by
	using it in a numeric context (but not the
	<tt class=literal>+</tt> operator) by subtracting zero, for example.
	So in the above example we could also have done this:
	

<div class=programlisting>
<p>
<pre>
var w = r.width - 0;        //<tt class=replaceable><i> Now we've got a primitive number.</i></tt>
</PRE>
</DIV>


      

<p class=para>
	The same discrepancy occurs when Java primitive Boolean values
	and instances of <i class=emphasis>java.lang.Boolean</I> are read
	from Java fields--they are returned as JavaScript Boolean
	objects even though the same Java value would have been returned
	as a primitive Boolean value if it had been the return value of
	a method. You can work around this with the
	<tt class=literal>valueOf()</tt> method, as above.
      

<p class=para>
	Finally, when Java objects are read from Java fields (but not
	when they are read as the return value of a Java method), the 
	returned value behaves in all respects like a JavaObject, except
	that passing it to the <tt class=literal>getClass()</tt> function
	fails with an error: "getClass expects a Java object argument".
	To work around this problem, to obtain a JavaObject object that
	<tt class=literal>getClass()</tt> recognizes as such, you can use
	code like the following:
	

<div class=programlisting>
<p>
<pre>
var o = java.lang.System.out;       //<tt class=replaceable><i> This should be a JavaObject</i></tt>
var c = getClass(o);                //<tt class=replaceable><i> ...but this causes an error.</i></tt>
var p = new Object(o);              //<tt class=replaceable><i> This is the workaround</i></tt>
var c = getClass(p);                //<tt class=replaceable><i> ...this works now. </i></tt>
</PRE>
</DIV>


      

<p class=para>
	The fact that values are returned differently when read from a
	field than when read as method return values is not
	exactly a bug in LiveConnect; it is more of a misfeature, and it
	is one that the designers of LiveConnect may not be able to
	correct in future versions of Navigator. It stems from a subtle
	incompatibility between Java and JavaScript. In Java methods
	are not data types as they are in JavaScript, so it is perfectly
	legal to define a method that has the same name as a field.
	JavaScript, however, allows us to treat methods, including Java
	methods, as variables that we can manipulate, and so it is not
	possible to use the same name for a JavaScript property and a method.
      

<p class=para>
	We run into a problem when we try to use a Java class has a
	field and a method by the same name. Suppose that a JavaObject
	<tt class=literal>o</tt> refers to an instance of such a class, and
	the name shared by the field and the method is
	<tt class=literal>f</tt>. Then the JavaScript expression
	<tt class=literal>o.f</tt> is ambiguous; JavaScript does not know
	whether we are referring to the method or the field. Consider
	this code:
	

<div class=programlisting>
<p>
<pre>
var ambiguous = o.f;     //<tt class=replaceable><i> Is it a JavaMethod or JavaObject?</i></tt>
                         //<tt class=replaceable><i> It depends on how we use it in the future!</i></tt>
ambiguous();             //<tt class=replaceable><i> Hmm...we must have meant the method.</i></tt>
s += ambiguous;          //<tt class=replaceable><i> In this case, we must have meant the field.</i></tt>
</PRE>
</DIV>


	The variable <tt class=literal>ambiguous</tt> really can't have a
	value until it is used in a context that makes it clear what
	value it is supposed to have. The way this ambiguity is
	resolved is that <tt class=literal>ambiguous</tt> is implemented as
	an internal object of a type known as a JavaSlot. Only when it
	is clear what context the "slot" is being used in is this value
	converted to the appropriate type.
      

<p class=para>
	Notice that this ambiguity only arises when reading Java fields;
	there is no possibility of it when reading the return values of
	Java methods. Thus the differences the way values are read
	arises from the JavaSlot conversion process when Java field
	values are read.
      

</DIV>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch19_02.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src="gifs/txthome.gif" alt="Home" border=0></a></td>
<td width=172 align=right valign=top><a href="ch19_04.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>LiveConnect Data Types</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td>
<td width=172 align=right valign=top>JavaScript Conversion of JavaObjects</td>
</tr>
</table>

<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
</DIV>

</BODY>
</HTML>
