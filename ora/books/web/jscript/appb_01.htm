<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Appendix B] Known Bugs</TITLE>
<meta name="author" content="David Flanagan">
<meta name="date" content="Tue Apr 22 18:12:20 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="JavaScript">
<meta name="title" content="JavaScript: The Definitive Guide">
<!-- JavaScript: pathcont.js -->
</HEAD>
<body bgcolor="#FFFFFF" text="#000000">

<div class=htmlnav>
<h1><img src="gifs/smbanner.gif" alt="Javascript: The Definitive Guide"></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="appa_04.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b>Appendix B</b></td>
<td width=172 align=right valign=top><a href="appb_02.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>
<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
<hr align=left width=515>
</DIV>
<h1 class=appendix><a class="TITLE" name="JSCRIPT-APP-BUGS">B. Known Bugs</A></H1>

<div class=htmltoc>

<p>
<b>Contents:</b><br>
Known JavaScript Bugs in Navigator 3.0<br>
<a href="appb_02.htm">Known JavaScript Bugs in Internet Explorer 3.0</A><br>
<a href="appb_03.htm">Commonly Encountered JavaScript Bugs in Navigator 2.0</A><br>

</DIV>

<p class=para>
    In order to program effectively in JavaScript, or any language, it
    is important to have an idea of what features don't work as
    advertised. This appendix discusses the known bugs in various
    versions of JavaScript.
  

<div class=sect1>
<h2 class=sect1><a class="TITLE" name="appb-SECT1-AUTOID.1">B.1 Known JavaScript Bugs in Navigator 3.0</A></h2>

<p class=para>
<a name="APPB.NAV3"></A><a name="APPB.BUGS"></A>      The bugs detailed in the sections below comprise the complete list
      of JavaScript bugs that were known to the developers of JavaScript
      at Netscape when this book went to press. Unfortunately, not all
      of these bugs have been fully researched, and some of the
      descriptions are vague. They've been arranged by topic, and in
      approximate order of severity and the frequency with which they
      are encountered.
    

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="appb-SECT2-AUTOID.1">History.go() Doesn't Work with Frames</A></h3>

<p class=para>
	The <tt class=literal>History.go()</tt> method may not work
	correctly when a window contains multiple frames. Use
	<tt class=literal>History.back()</tt> and
	<tt class=literal>History.forward()</tt> instead.
      

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="appb-SECT2-AUTOID.2">Table Bugs</A></h3>

<p class=para>
	There are a couple of JavaScript bugs in Navigator 3.0 that
	relate to HTML tables.
      

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="appb-SECT3-AUTOID.1">Images in tables</A></h4>

<p class=para>
	  When an <tt class=literal>&lt;IMG&gt;</tt> tag appears in a table
	  cell, two JavaScript Image objects will be created to
	  represent it. If the <tt class=literal>&lt;IMG&gt;</tt> tag
	  appears in a table nested within a table, four Image objects
	  may be created. Only the last Image object created for a
	  given <tt class=literal>&lt;IMG&gt;</tt> tag has a working
	  <tt class=literal>src</tt> property. Because an unexpected number
	  of Image objects are created, it is difficult to correctly use
	  the <tt class=literal>Document.images[]</tt> array to refer to
	  them.
	

<p class=para>
	  As a workaround, give all of your images names with the
	  <tt class=literal>NAME</tt> attribute, and refer to them by name
	  as properties of the Document object. When JavaScript
	  creates multiple objects with the same name, it stores them
	  in an array by that name. If an image named "outside" is
	  specified outside of any HTML tables, you can refer to it as
	  <tt class=literal>document.outside</tt>. However, if an image
	  named "inside" is created within a table, two Image objects
	  with this name will be created, and they can be referred to
	  as <tt class=literal>document.inside[0]</tt> and
	  <tt class=literal>document.inside[1]</tt>. It is the latter
	  image that has the correctly working <tt class=literal>src</tt>
	  property.
	

<p class=para>
	  The following function demonstrates a workaround to this bug.
	  Given an image name, it returns the working Image object with
	  that name. It works correctly for images that are not part of
	  tables, and will continue to work correctly even after this
	  bug has been patched.
<div class=programlisting>
<p>
<pre>
function getImage(image_name)
{
    var i = document[image_name];
    if (i.length)                  //<tt class=replaceable><i> If the image is actually an array...</i></tt>
        return i[i.length-1];      //<tt class=replaceable><i> then return the last image in it.</i></tt>
    else return i;                 //<tt class=replaceable><i> Otherwise return the single Image.</i></tt>
}
</PRE>
</DIV>


	

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="appb-SECT3-AUTOID.2">Document.write() in nested tables</A></h4>

<p class=para>
	  Calling <tt class=literal>document.write()</tt> from within a
	  nested table can sometimes result in incorrectly formatted
	  text, which may include portions of JavaScript code that
	  appears within <tt class=literal>&lt;SCRIPT&gt;</tt> and
	  <tt class=literal>&lt;/SCRIPT&gt;</tt> tags.
	

<p class=para>
	  Using <tt class=literal>document.write()</tt> within tables is not
	  nearly so buggy as it could be in Navigator 2.0, but
	  nevertheless, it is still a good idea to sidestep these
	  problems by using <tt class=literal>document.write()</tt> to
	  dynamically generate the entire table, including all relevant
	  HTML tags, rather than just generating the contents of a
	  static HTML table.
	

</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="appb-SECT2-AUTOID.3">Bugs with Dynamically Generated Documents</A></h3>

<p class=para>
	Navigator 3.0 contained a lot of changes that allow it to print
	and save the dynamically generated content of documents, which
	is something that was <i class=emphasis>not</I> possible in
	Navigator 2.0. Unfortunately, these changes seem to have left
	(or created) some residual bugs, and the exact circumstances
	under which these bugs can occur are not always clear.
      

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="appb-SECT3-AUTOID.3">Event handlers in regenerated documents</A></h4>

<p class=para>
	  For very complex implementation-specific reasons, if your
	  JavaScript program generates a document into a separate window
	  or frame, you may find that the event handlers in the
	  generated document stop working if your program ever
	  regenerates that document. There are two steps you can take
	  to avoid this problem. The first is to not call
	  <tt class=literal>document.open()</tt> for the window or frame
	  into which you are generating your document. While it is good
	  style to call this function, it is not actually necessary,
	  because calling <tt class=literal>document.write()</tt> on a
	  closed document implicitly re-opens the document. The only
	  time <tt class=literal>document.open()</tt> is actually necessary
	  is when you want to open a document for some MIME type other
	  than "text/html".
	

<p class=para>
	  The other way to avoid this problem, if you really do want to
	  call <tt class=literal>document.open()</tt>, is to store the
	  return value of <tt class=literal>document.open()</tt> into a
	  global variable. The return value of this method is typically
	  ignored but it is actually the new Document object. Because
	  of the particular genesis of this bug, simply storing this
	  return value is sufficient to prevent the event handlers from
	  breaking. 
	

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="appb-SECT3-AUTOID.4">Content disappears upon resize</A></h4>

<p class=para>
	  In some generated documents, at least those containing
	  Applets, resizing the browser may cause document content to
	  disappear. As a workaround to this problem, you can try
	  calling <tt class=literal>document.write()</tt> with the empty
	  string before each <tt class=literal>&lt;APPLET&gt;</tt> tag in
	  the document. That is, insert do-nothing lines like the
	  following before your <tt class=literal>&lt;APPLET&gt;</tt> tags:
	  

<div class=programlisting>
<p>
<pre>
&lt;!-- Bug workaround for NN 3.0 --&gt;
&lt;SCRIPT LANGUAGE="JavaScript"&gt;document.write("");&lt;/SCRIPT&gt;
      
</PRE>
</DIV>


	

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="appb-SECT3-AUTOID.5">onClick() event handlers ignored</A></h4>

<p class=para>
	  Under certain conditions, which are not yet understood, an
	  <tt class=literal>onClick()</tt> event handler in a generated
	  document may fail to work. Since it is not yet understood
	  what triggers this problem, no standard workaround has been
	  found yet.
	

</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="appb-SECT2-AUTOID.4">LiveConnect Bugs</A></h3>

<p class=para>
	LiveConnect, described in <a href="ch19_01.htm">Chapter 19, <i>LiveConnect: JavaScript and Java</i></A>,
	is a new and powerful addition to Navigator 3.0. As such, it is
	not surprising that some bugs remain. Actually, most
	LiveConnect bugs are really missing features, rather than actual
	buggy implementation.
      

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="appb-SECT3-AUTOID.6">Can't call Java method with nonsystem object arguments</A></h4>

<p class=para>
	  JavaScript cannot call any Java method that takes an object as
	  an argument if the type of that object is not one of the
	  standard system classes. For example, if an applet defines a
	  helper class called <i class=emphasis>Helper</I>, JavaScript
	  could not invoke a method that expected an argument of type
	  <i class=emphasis>Helper</I>. The workaround is to define any
	  affected methods so that they take arguments of type
	  <i class=emphasis>java.lang.Object</I>, and then, within the
	  method, to cast those arguments to the actual desired type.
	

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="appb-SECT3-AUTOID.7">Java network activity can cause exception</A></h4>

<p class=para>
	  If JavaScript invokes Java code that performs networking, it
	  may cause an exception to be thrown. If you encounter this
	  problem, a workaround you can try is to perform the networking
	  in a separate thread, and have JavaScript call the method that
	  starts the networking thread.
	

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="appb-SECT3-AUTOID.8">Accessing applets before they are loaded</A></h4>

<p class=para>
	  If you attempt to use LiveConnect to interact with a Java
	  applet before the applet is fully loaded, you will see an
	  error dialog, and the applet will be inaccessible to
	  JavaScript even after it has finished loading. To avoid this
	  situation, use the <tt class=literal>onLoad()</tt> event handler
	  of the Window object to be sure that everything has finished
	  loading before attempting to interact with applets.
	

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="appb-SECT3-AUTOID.9">Problems with overloaded methods</A></h4>

<p class=para>
	  If a class contains overloaded methods (i.e., methods with the
	  same name but different arguments), JavaScript may not be able
	  to correctly figure out which one to call. In beta releases
	  of Navigator 3.0, JavaScript could only invoke the first
	  overloaded method that it found in the class. That problem
	  has been resolved, however, and overloaded methods usually
	  work now.
	

<p class=para>
	  If you encounter trouble with overloaded methods, a workaround
	  is to give them different names, or to add a new method that
	  simply calls the correct overloaded method for you.
	

</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="appb-SECT2-AUTOID.5">Form Bugs on Windows Platforms</A></h3>

<p class=para>
	There are a few bugs related to event handlers and form elements
	that occur on Windows platforms only.
      

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="appb-SECT3-AUTOID.10">onBlur() and onFocus()</A></h4>

<p class=para>
	  <tt class=literal>onBlur()</tt> and <tt class=literal>onFocus()</tt>
	  event handlers of Form elements are never invoked on Windows
	  platforms.
	

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="appb-SECT3-AUTOID.11">onClick() in reset button</A></h4>

<p class=para>
	  On Windows platforms, you can't prevent a Form from being
	  reset by returning false from the <tt class=literal>onClick()</tt>
	  event handler of the Reset button object.
	

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="appb-SECT3-AUTOID.12">FileUpload bug</A></h4>

<p class=para>
	  For important security reasons, the <tt class=literal>value</tt>
	  field of the FileUpload object cannot be set by JavaScript
	  programs. This is not a bug. Unfortunately, on Windows
	  platforms, you cannot correctly read the the
	  <tt class=literal>value</tt> property after the user has clicked
	  the <b>Browse</b> button of the form
	  element to select a file. The <tt class=literal>value</tt>
	  property is only correct if the user actually types in the
	  filename. As a workaround, you can try calling the
	  <tt class=literal>focus()</tt> and <tt class=literal>blur()</tt>
	  methods of the FileUpload object before attempting to read the
	  <tt class=literal>value</tt> property.
	

</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="appb-SECT2-AUTOID.6">Window Size on Unix Platforms</A></h3>

<p class=para>
	On Unix platforms, when you open a new window with the
	<tt class=literal>Window.open()</tt> method, the width and height
	specifications may be overridden and ignored if X resources
	specify window width and height, or if Navigator was started
	with the standard X <tt class=literal>-geometry</tt> command line
	argument. The only workaround to this bug is to be satisfied
	with the default window size and not try to override it with X
	resources or command-line arguments.
      

</DIV>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="appa_04.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src="gifs/txthome.gif" alt="Home" border=0></a></td>
<td width=172 align=right valign=top><a href="appb_02.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>FAQ Lists</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td>
<td width=172 align=right valign=top>Known JavaScript Bugs in Internet Explorer 3.0</td>
</tr>
</table>

<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
</DIV>

</BODY>
</HTML>
