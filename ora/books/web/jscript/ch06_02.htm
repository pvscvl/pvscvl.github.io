<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 6] 6.2 Functions as Data Types</TITLE>
<meta name="author" content="David Flanagan">
<meta name="date" content="Wed Apr 23 18:07:36 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="JavaScript">
<meta name="title" content="JavaScript: The Definitive Guide">
<!-- JavaScript: pathcont.js -->
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><img src="gifs/smbanner.gif" alt="Javascript: The Definitive Guide"></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch06_01.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b>Chapter 6</b></td>
<td width=172 align=right valign=top><a href="ch06_03.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>
<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="ch06-SECT1-AUTOID.2">6.2 Functions as Data Types</A></h2>

<p class=para>
<a name="CH06.DTFUN"></A>      The most important features of functions is that they can be
      defined and invoked, as shown in the previous section. Function
      definition and invocation are syntactic features of JavaScript,
      and of most other programming languages. In JavaScript, however,
      functions are not only syntax, but also data. In some languages,
      like Java, functions are part of a program, but cannot be
      manipulated by the program--you cannot, for example, pass one
      function as an argument to another function in Java. Other
      languages, like C and C++, are more flexible--while a function
      defined in C is not actually a data type, "function pointers" can
      be manipulated by the program, and it is possible to pass these
      function pointers to other functions and to assign them to
      variables.
    

<p class=para>
      JavaScript goes even further than C. Functions in JavaScript are
      data, and thus can be treated like any other data value--assigned
      to variables, stored in the properties of objects or the elements
      of arrays, passed to functions, and so on.  Because JavaScript is
      an interpreted language, and because it treats functions as a
      distinct data type, the language (in Navigator 3.0) even allows
      functions to be defined dynamically, at run-time!  We'll see how
      this is done when we consider the Function object later in this
      chapter.

<p class=para>
      We've seen that the <tt class=literal>function</tt> keyword is the
      syntax used to define a function in a JavaScript program. To
      understand how functions are JavaScript data as well as JavaScript
      syntax, we've got to understand what the
      <tt class=literal>function</tt> keyword really does.
      <tt class=literal>function</tt> creates a function, as we've seen, but
      it also defines a variable. In this way, the
      <tt class=literal>function</tt> keyword is like the
      <tt class=literal>var</tt> keyword. Consider the following function
      definition: 
      

<div class=programlisting>
<p>
<pre>
function square(x) { return x*x; }
</PRE>
</DIV>


      This code does the following:
      

<p>
<ul class=itemizedlist>
<li class=listitem>	    Defines a new variable named <tt class=literal>square</tt>.
	  

<p>
<li class=listitem>	    Creates a new data value, of type function. This function
	    value expects a single argument named <tt class=literal>x</tt>,
	    and has a body that consists of a single statement:
	    "<tt class=literal>return x*x;</tt>".
	  

<p>
<li class=listitem>	    Assigns the newly created function value to the newly
	    defined variable.
	  

<p>
</UL>

    

<p class=para>
      When we consider function definition in this light, it becomes
      clear that the name of a function is really immaterial--it is
      simply the name of a variable that holds the function. The
      function can be assigned to another variable, and will still work
      the same:
      

<div class=programlisting>
<p>
<pre>
function square(x) { return x*x; }
a = square(4);   //<tt class=replaceable><i> a contains the number 16</i></tt>
b = square;      //<tt class=replaceable><i> now b refers to the same function as square does.</i></tt>
c = b(5);        //<tt class=replaceable><i> c contains the number 25</i></tt>
</PRE>
</DIV>


      Functions can also be assigned to object properties:
      

<div class=programlisting>
<p>
<pre>
o = new Object;
o.sq = square;
y = o.sq(16);   //<tt class=replaceable><i> y equals 256</i></tt>
</PRE>
</DIV>


      Functions don't even require names, as when we assign them to
      array elements:
      

<div class=programlisting>
<p>
<pre>
a = new Array(10);
a[0] = square;
a[1] = 20;
a[2] = a[0](a[1]);  //<tt class=replaceable><i> a[2] contains 400</i></tt>
</PRE>
</DIV>


      Note that the function invocation syntax in this last example
      looks strange, but is still a legal use of the JavaScript
      <tt class=literal>()</tt> operator!
    

<p class=para>
      <a href="#JSCRIPT-CH-FUNCTIONS-EX-2">Example 6-2</A>
      is a detailed example of the things that can be done when
      functions are used as data. It demonstrates how functions can be
      passed as arguments to other functions, and also how they can be
      stored in associative arrays (which were introduced in <a href="ch03_01.htm">Chapter 3, <i>Variables and Data Types</i></A>, and are explained in detail in
      <a href="ch07_01.htm">Chapter 7, <i>Objects</i></A>.)  This example may be a
      little tricky, but the comments explain what is going on; it is
      worth studying carefully. 
    

<div class=example>
<h4 class=example><a class="TITLE" name="JSCRIPT-CH-FUNCTIONS-EX-2">Example 6-2: Using Functions as Data</A></h4>

<div class=programlisting>
<p>
<pre>
//<tt class=replaceable><i> We define some simple functions here</i></tt>
function add(x,y) { return x + y; }
function subtract(x,y) { return x - y; }
function multiply(x,y) { return x * y; }
function divide(x,y) { return x / y; }
//<tt class=replaceable><i> Here's a function that takes one of the above functions</i></tt>
//<tt class=replaceable><i> as an argument and invokes it on two operands</i></tt>
function operate(operator, operand1, operand2) 
{
    return operator(operand1, operand2);
}
//<tt class=replaceable><i> We could invoke this function like this to compute</i></tt>
//<tt class=replaceable><i> the value (2+3) + (4*5):</i></tt>
var i = operate(add, operate(add, 2, 3), operate(multiply, 4, 5));
//<tt class=replaceable><i> Now we store the functions defined above in an associative array</i></tt>
var operators = new Object();
operators["add"] = add;
operators["subtract"] = subtract;
operators["multiply"] = multiply;
operators["divide"] = divide;
operators["pow"] = Math.pow;  //<tt class=replaceable><i> works for predefined functions too.</i></tt>
//<tt class=replaceable><i> This function takes the name of an operator, looks up</i></tt>
//<tt class=replaceable><i> that operator in the array, and then invokes it on the</i></tt>
//<tt class=replaceable><i> supplied operands. Note the syntax used to invoke the</i></tt>
//<tt class=replaceable><i> operator function.</i></tt>
function operate2(op_name, operand1, operand2)
{
    if (operators[op_name] == null) return "unknown operator";
    else return operators[op_name](operand1, operand2);
}
//<tt class=replaceable><i> We could invoke this function as follows to compute</i></tt>
//<tt class=replaceable><i> the value ("hello" + " " + "world"):</i></tt>
var j = operate2("add", "hello", operate2("add", " ", "world"))
//<tt class=replaceable><i> Using the predefined Math.pow() function</i></tt>
var k = operate2("pow", 10, 2)
</PRE>
</DIV>

</DIV>

<p class=para>
      If the preceding example does not convince you of the utility of
      being able to pass functions as arguments to other functions, and
      otherwise treat functions as data values, consider the
      <tt class=literal>Array.sort()</tt> method. This function sorts the
      elements of an array, but because there are many possible orders
      to sort things into (numerical order, alphabetical order, date
      order, ascending, descending, and so on) it takes a function as an
      argument to tell it how to perform the sort. This function has a
      very simple job--it is passed two elements of the array, which it
      compares, and then returns a value specifying which element is
      larger and which is smaller. This function argument makes the
      <tt class=literal>Array.sort()</tt> method perfectly general and
      infinitely flexible--it can sort any type of data into any
      conceivable order!
    

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch06_01.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src="gifs/txthome.gif" alt="Home" border=0></a></td>
<td width=172 align=right valign=top><a href="ch06_03.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Defining and Invoking Functions</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td>
<td width=172 align=right valign=top>The Function Object</td>
</tr>
</table>

<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
</DIV>

</BODY>
</HTML>
