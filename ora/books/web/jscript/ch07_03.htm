<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 7] 7.3 Methods</TITLE>
<meta name="author" content="David Flanagan">
<meta name="date" content="Wed Apr 23 18:08:53 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="JavaScript">
<meta name="title" content="JavaScript: The Definitive Guide">
<!-- JavaScript: pathcont.js -->
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><img src="gifs/smbanner.gif" alt="Javascript: The Definitive Guide"></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch07_02.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b>Chapter 7</b></td>
<td width=172 align=right valign=top><a href="ch07_04.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>
<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="ch07-SECT1-AUTOID.3">7.3 Methods</A></h2>

<p class=para>
<a name="CH07.METH1"></A>      A <i class=emphasis>method</I> is nothing more than a JavaScript
      function that is invoked through an object. Recall that functions
      are data values, and that there is nothing special about the name
      they are defined with--a function can be assigned to any variable,
      or even to any property of an object. If we have a function
      <tt class=literal>f</tt>, and an object <tt class=literal>o</tt>, then we
      can define a method named <tt class=literal>m</tt> with the following line:
      

<div class=programlisting>
<p>
<pre>
o.m = f;
</PRE>
</DIV>


    

<p class=para>
      Having defined the method <tt class=literal>m()</tt> of the object
      <tt class=literal>o</tt>, we invoke it like this:
      

<div class=programlisting>
<p>
<pre>
o.m();
</PRE>
</DIV>


      Or, if <tt class=literal>m()</tt> expects two arguments, we might
      invoke it like this:
      

<div class=programlisting>
<p>
<pre>
o.m(x, x+2);
</PRE>
</DIV>


    

<p class=para>
      Invoking <tt class=literal>o.m()</tt> this way is the same as calling
      <tt class=literal>f()</tt>, except for one point: when the
      function is invoked as a method, through the object
      <tt class=literal>o</tt>, the <tt class=literal>this</tt> keyword will
      refer to that object within the body of the method. When the same
      function object is invoked directly as
      <tt class=literal>f()</tt>, the <tt class=literal>this</tt>
      keyword will not contain a meaningful value.[1]
    

<blockquote class=footnote>
<p class=para>[1] 
	  As you may have discovered by now, variables in client-side
	  JavaScript are all implicitly properties of the current Window
	  object, so invoking <tt class=literal>f()</tt> is
	  equivalent to invoking <tt class=literal>window.f()</tt>:
	  the <tt class=literal>this</tt> keyword in both these cases refers
	  to the current window. (See <a href="ch11_01.htm">Chapter 11, <i>Windows and the JavaScript Name Space</i></A>,
	  for an extended discussion of this somewhat odd aspect of
	  JavaScript.) 
	
</blockquote>
<p class=para>
      This discussion of the <tt class=literal>this</tt> keyword should
      begin to make it clear why we use methods at all. Any function
      that is used as a method is effectively passed a third
      argument--the object through which it is invoked. Typically, a
      method performs some sort of operation on that object, and the
      method invocation syntax is a particularly elegant way to express
      the fact that a function is operating on an object. Compare the
      following two lines of code:
      

<div class=programlisting>
<p>
<pre>
o.m(x,y);
f(o,x,y);
</PRE>
</DIV>


      The hypothetical method <tt class=literal>m()</tt> and function
      <tt class=literal>f()</tt> may perform exactly the same operation on
      the object <tt class=literal>o</tt>, but the method invocation syntax
      more clearly indicates the idea that it is the object
      <tt class=literal>o</tt> that is the primary focus or target of the
      operation.
    

<p class=para>
      The typical usage of methods is more clearly illustrated through
      an example. <a href="#JSCRIPT-CH-OBJECTS-EX-2">Example 7-2</A> returns to
      the Rectangle objects of <a href="ch07_02.htm">Example 7-1</A>
      and how a method that operates on Rectangle objects can be defined
      and invoked.
    

<div class=example>
<h4 class=example><a class="TITLE" name="JSCRIPT-CH-OBJECTS-EX-2">Example 7-2: Defining and Invoking a Method</A></h4>

<div class=programlisting>
<p>
<pre>
//<tt class=replaceable><i> This is a function. It uses the this keyword, so</i></tt>
//<tt class=replaceable><i> it doesn't make sense to invoke this function by itself; it</i></tt>
//<tt class=replaceable><i> needs instead be made a method of some object, some object that has</i></tt>
//<tt class=replaceable><i> "width" and "height" properties defined.</i></tt>
function compute_area() 
{
    return this.width * this.height;
}
//<tt class=replaceable><i> Create a new Rectangle object, using the constructor defined earlier</i></tt>
var rect = new Rectangle(8.5, 11);
//<tt class=replaceable><i> Define a method by assigning the function to a property of the object</i></tt>
rect.area = compute_area;
//<tt class=replaceable><i> Invoke the new method like this:</i></tt>
a = rect.area();    //<tt class=replaceable><i> a = 8.5*11 = 93.5</i></tt>
</PRE>
</DIV>

</DIV>

<p class=para>
      There is a shortcoming that is evident in <a href="#JSCRIPT-CH-OBJECTS-EX-2">Example 7-2</A>: before you can invoke the
      <tt class=literal>area()</tt> method for the <tt class=literal>rect</tt>
      object, you must assign that method to a property of the
      object. While we can invoke the <tt class=literal>area()</tt>
      method on the particular object named <tt class=literal>rect</tt>, we
      can't invoke it on any other Rectangle objects
      without first assigning the method to them. This quickly becomes
      tedious. <a href="#JSCRIPT-CH-OBJECTS-EX-3">Example 7-3</A> defines
      some additional Rectangle methods and shows how they can
      automatically be assigned to all Rectangle objects with a
      constructor function.
    

<div class=example>
<h4 class=example><a class="TITLE" name="JSCRIPT-CH-OBJECTS-EX-3">Example 7-3: Defining Methods in a Constructor</A></h4>

<div class=programlisting>
<p>
<pre>
//<tt class=replaceable><i> First, define some functions that will be used as methods</i></tt>
function Rectangle_area() { return this.width * this.height; }
function Rectangle_perimeter() { return 2*this.width + 2*this.height; }
function Rectangle_set_size(w,h) { this.width = w; this.height = h; }
function Rectangle_enlarge() { this.width *= 2; this.height *= 2; }
function Rectangle_shrink() { this.width /= 2; this.height /= 2; }
//<tt class=replaceable><i> Then define a constructor method for our Rectangle objects.</i></tt>
//<tt class=replaceable><i> The constructor initializes properties, and also assigns methods.</i></tt>
function Rectangle(w, h) 
{
    //<tt class=replaceable><i> initialize object properties</i></tt>
    this.width = w;
    this.height = h;
    //<tt class=replaceable><i> define methods for the object</i></tt>
    this.area = Rectangle_area;
    this.perimeter = Rectangle_perimeter;
    this.set_size = Rectangle_set_size;
    this.enlarge = Rectangle_enlarge;
    this.shrink = Rectangle_shrink;
}
//<tt class=replaceable><i> Now, when we create a rectangle, we can immediately invoke methods on it:</i></tt>
r = new Rectangle(2,2);
a = r.area();
r.enlarge();
p = r.perimeter();
</PRE>
</DIV>

</DIV>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch07_02.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src="gifs/txthome.gif" alt="Home" border=0></a></td>
<td width=172 align=right valign=top><a href="ch07_04.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Creating New Objects with Constructors</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td>
<td width=172 align=right valign=top>Object Prototypes</td>
</tr>
</table>

<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
</DIV>

</BODY>
</HTML>
