<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 3] 3.11 Data Type Wrapper Objects</TITLE>
<meta name="author" content="David Flanagan">
<meta name="date" content="Thu Apr 24 13:13:58 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="JavaScript">
<meta name="title" content="JavaScript: The Definitive Guide">
<!-- JavaScript: pathcont.js -->
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><img src="gifs/smbanner.gif" alt="Javascript: The Definitive Guide"></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch03_10.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b>Chapter 3</b></td>
<td width=172 align=right valign=top><a href="ch04_01.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>
<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="ch03-SECT1-AUTOID.11">3.11 Data Type Wrapper Objects</A></h2>

<p class=para>
      When we introduced strings earlier in this chapter, we pointed out
      a strange feature of that data type:  to operate on strings, we
      use object notation. For example, a typical operation involving
      strings might be the following:
      

<div class=programlisting>
<p>
<pre>
s = "These are the times that try people's souls.";
last_word = s.substring(s.lastIndexOf(" ")+1, s.length);
</PRE>
</DIV>


      If we didn't know better, it would appear that
      <tt class=literal>s</tt> was an object, and that we were invoking
      methods and reading property values of that object.
    

<p class=para>
      In <a href="ch06_01.htm">Chapter 6, <i>Functions</i></A>, we'll see something
      similar: functions also have properties that we can access using
      object notation. What's going on?  Are strings and functions
      objects, or are they distinct data types?  In Navigator 3.0, the
      <tt class=literal>typeof</tt> operator assures us that strings have a
      data type "string" and that functions are of type "function" and
      that neither is of type "object". Why then, do they use object
      notation?  
    

<p class=para>
      The truth is that each primitive data type (i.e., the data types
      that are not objects or arrays) has a corresponding object type
      defined for it. That is, besides supporting the number, string,
      Boolean and function data types, JavaScript also supports Number,
      String, Boolean, and Function object types. These object types
      are "wrappers" around the primitive data types--they contain the
      same primitive data value, but also define the properties and
      methods that we use to manipulate that data (or to manipulate
      strings and functions, at least; the Number and Boolean objects
      are not as useful as the String and Function objects.)
    

<p class=para>
      As an untyped language, JavaScript can very flexibly convert
      values from one type to another. When we use a string in an
      "object context", (i.e., when we try to access a property or method
      of the string) JavaScript internally creates a String wrapper
      object for the string value. This String object is used in place
      of the primitive string value; the object has properties and
      methods defined, and so the use of the primitive value in an
      object context succeeds. The same is true, of course, for the
      other primitive types and their corresponding object wrappers; we
      just don't use the other types in an object context nearly as
      often as we use strings in that context.
    

<p class=para>
      When we use a string in an object context, note that the String
      object that is created is a transient one--it is used to allow us
      to access a property or method, and then it is no longer needed
      and is reclaimed by the system. Suppose <tt class=literal>s</tt> is a
      string, and we determine the length of the string with a line like
      this:
      

<div class=programlisting>
<p>
<pre>
len = s.length;
</PRE>
</DIV>


      In this case, <tt class=literal>s</tt> remains a string; the original
      string value is not itself changed. A new transient String object
      is created, which allows us to access the length property, and the
      transient object is discarded, with no change to the original
      value <tt class=literal>s</tt>. If you think that this scheme sounds
      elegant and bizarrely complex at the same time, you are right.
      Don't worry, however, the conversion to a transient object is done
      quite efficiently within JavaScript.
    

<p class=para>
      If for some reason we want to use a String object explicitly in our
      program, we will have to create a non-transient one that will not
      be automatically discarded by the system. We create String
      objects just as we create other objects, with the
      <tt class=literal>new</tt> operator. (The <tt class=literal>new</tt>
      operator will be introduced in <a href="ch04_01.htm">Chapter 4, <i>Expressions and Operators</i></A>, and we'll learn more about object
      creation in <a href="ch07_01.htm">Chapter 7, <i>Objects</i></A>.)  For example:
      

<div class=programlisting>
<p>
<pre>
s = "hello world";               //<tt class=replaceable><i> a primitive string value</i></tt>
S = new String("Hello World");   //<tt class=replaceable><i> a String object</i></tt>
</PRE>
</DIV>


    

<p class=para>
      Once we have created a String object <tt class=literal>S</tt>, what
      can we do with it?  Nothing that we can't do with the
      corresponding primitive string value. If we use the
      <tt class=literal>typeof</tt> operator, it will tell us that
      <tt class=literal>S</tt> is indeed an object, and not a string value,
      but except for that case, we'll find that we can't distinguish
      between the a primitive string and the String object. This is for
      two reasons. First, as we've seen, strings are automatically
      converted to String objects whenever necessary. But it turns out
      that the reverse is also true. Whenever we use a String object
      where a primitive string value is expected, JavaScript will
      automatically convert the String to a string. So if we use our
      String object with the <tt class=literal>+</tt> operator, a transient
      primitive string value will be created so that the string
      concatenation operation can be performed:
      

<div class=programlisting>
<p>
<pre>
msg = S + '!';
</PRE>
</DIV>


    

<p class=para>
      Bear in mind that everything we've said in this section about
      string values and String objects applies also to the other
      primitive types and their corresponding Number, Boolean, and
      Function objects. You can learn more about these object types
      from their respective entries in the reference section of this
      book. In <a href="ch09_01.htm">Chapter 9, <i>Further Topics in JavaScript</i></A> we'll see more about
      this primitive type/object duality, and about automatic data
      conversion in JavaScript.
    

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch03_10.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src="gifs/txthome.gif" alt="Home" border=0></a></td>
<td width=172 align=right valign=top><a href="ch04_01.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>The Date Object</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td>
<td width=172 align=right valign=top>Expressions and Operators</td>
</tr>
</table>

<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
</DIV>

</BODY>
</HTML>
