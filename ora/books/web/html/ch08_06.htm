<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 8] 8.6 Forms Programming</TITLE>
<meta name="author" content="Chuck Musciano and Bill Kennedy">
<meta name="date" content="Mon Mar 17 09:01:06 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="HTML">
<meta name="title" content="HTML: The Definitive Guide">
<!-- JavaScript: pathcont.js -->
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><img src="gifs/smbanner.gif" alt="HTML: The Definitive Guide"></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch08_05.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b>Chapter 8</b></td>
<td width=172 align=right valign=top><a href="ch09_01.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>
<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="USING-HTML-CH08-SECT-6">8.6 Forms Programming</A></h2>

<p class=para>
<a name="CH08.PROGRAM1"></A><a name="CH08.PROGRAM2"></A><a name="CH08.PROGRAM3"></A>If you create forms, sooner or later you'll need to create the
server-side application that processes your form. Don't panic. There
is nothing magic about server-side programming, nor is it overly
difficult. With a little practice and some perseverance, you'll be
cranking out forms applications.

<p class=para>
The most important advice we can give about forms programming is easy
to remember: copy others' work. Writing a forms application from
scratch is fairly hard; copying a functioning forms application and
modifying it to support your form is far easier.

<p class=para>
Fortunately, server vendors know this, and they usually supply sample
forms applications with their server. Rummage about for a directory
named <i class=emphasis>cgi-src</I>, and you'll discover a number of
useful examples you can easily copy and reuse.

<p class=para>
We can't hope to replicate all the useful stuff that came with your
server, nor can we provide a complete treatise on forms
programming. What we can do is offer a simple example of both
GET and POST applications,
giving you a feel for the work involved and hopefully getting you
moving you in the right direction.

<p class=para>
Before we begin, keep in mind that not all servers invoke these
applications in the same manner. Our examples cover the broad class of
servers derived from the original NCSA HTTP
server. They also should work with the Netscape Communications family
of server products and the public-domain Apache server. In all cases,
consult your server documentation for complete details.

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="USING-HTML-CH08-SECT-6.1">Returning Results</A></h3>

<p class=para>
Before we begin, we need to discuss how server-side applications
end. All server-side applications pass their results back to the
server (and on to the user) by writing that result to the
application's standard output as a
MIME-encoded file. Hence, the first line of the
application's output must be a MIME
content-type descriptor. If your application returns an
HTML document, the first line is:

<p class=para>
<div class=screen>
<p>
<pre>
Content-type: text/html
</PRE>
</DIV>

<p class=para>
The second line must be completely empty. Your application can return
some other content type, too--just include the correct
MIME type. A GIF image, for
example, is preceded with:

<p class=para>
<div class=screen>
<p>
<pre>
Content-type: image/gif
</PRE>
</DIV>

<p class=para>
Generic text that is not to be interpreted as HTML
can be returned with:

<p class=para>
<div class=screen>
<p>
<pre>
Content-type: text/plain
</PRE>
</DIV>

<p class=para>
This is often useful for returning the output of other commands that
generate plain text instead of HTML.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="USING-HTML-CH08-SECT-6.2">Handling GET Forms</A></h3>

<p class=para>
<a name="CH08.GET"></A>One of two methods for passing form parameters from client to server
is the GET method. In that way, parameters are
passed as part of the URL that invokes the
server-side forms application. A typical invocation of a
GET-style application might use a
URL like this:

<p class=para>
<div class=screen>
<p>
<pre>
http://www.kumquat.com/cgi-bin/dump_get?name=bob&amp;phone=555-1212
</PRE>
</DIV>

<p class=para>
When the server processes this URL, it invokes the
application named <tt class=replaceable><i>dump_get</i></tt> stored in the directory
named <tt class=replaceable><i>cgi-bin</i></tt>. Everything after the question mark
is passed to the application as parameters.

<p class=para>
Things diverge a bit at this point, due to the nature of the
GET-style URL. While forms place
name/value pairs in the URL, it is possible to
invoke a GET-style application with only values in
the URL. Thus,

<p class=para>
<div class=screen>
<p>
<pre>
http://www.kumquat.com/cgi-bin/dump_get?bob+555-1212
</PRE>
</DIV>

<p class=para>
is a valid invocation as well, with parameters separated by a plus
sign (+). This is a common invocation when the
application is referenced by a searchable document with the
<tt>&lt;isindex&gt;</TT> tag. The parameters typed by the user into
the document's text-entry field are passed to the server-side
application as unnamed parameters separated by plus signs.

<p class=para>
If you invoke your GET application with named
parameters, your server will pass those parameters to the application
in one way; unnamed parameters are passed differently.

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="USING-HTML-CH08-SECT-6.2.1">Using named parameters with GET applications</A></h4>

<p class=para>
<a name="CH08.NAMED"></A>Named parameters are passed to GET applications by
creating an environment variable named <tt class=literal>QUERY_STRING</tt>
and setting its value to the entire portion of the
URL following the question mark. Using our previous
example, the value of <tt class=literal>QUERY_STRING</tt> would be set to:

<p class=para>
<div class=screen>
<p>
<pre>
name=bob&amp;phone=555-1212
</PRE>
</DIV>

<p class=para>
Your application must retrieve this variable and extract from it the
parameter name/value pairs. Fortunately, most servers come with a set
of utility routines that performs this task for you, so a simple C
program that just dumps the parameters might look like:

<p class=para>
<div class=screen>
<p>
<pre>
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#define MAX_ENTRIES 10000
typedef struct {char *name;
                char *val;
               }entry;
char *makeword(char *line, char stop);
char x2c(char *what);
void unescape_url(char *url);
void plustospace(char *str);
main(int argc, char *argv[])
{  entry entries[MAX_ENTRIES];
    int num_entries, i;
    char *query_string;
/* Get the value of the QUERY_STRING environment variable */
    query_string = getenv("QUERY_STRING");
/* Extract the parameters, building a table of entries */
    for (num_entries = 0; query_string[0]; num_entries++) {
       entries[num_entries].val = makeword(query_string, '&amp;');
       
       plustospace(entries[num_entries].val);
       unescape_url(entries[num_entries].val);
       entries[num_entries].name = 
          makeword(entries[num_entries].val, '=');
       }
/* Spit out the HTML boilerplate */
    printf("Content-type: text/html|n");
    printf("|n");
    
    printf("&lt;html&gt;");
    printf("&lt;head&gt;");
    printf("&lt;title&gt;Named Parameter Echo&lt;/title&gt;|n");
    printf("&lt;/head&gt;");
    printf("&lt;body&gt;");
    printf("You entered the following parameters:|n");
    printf("&lt;ul&gt;|n");
/* Echo the parameters back to the user */
    for(i = 0; i &lt; num_entries; i++)
        printf("&lt;li&gt; %s = %s|n", entries[i].name, 
                  entries[i].val);
/* And close out with more boilerplate */
    printf("&lt;/ul&gt;|n");
    printf("&lt;/body&gt;|n");
    printf("&lt;/html&gt;|n");
}
</PRE>
</DIV>

<p class=para>
The example program begins with a few declarations that define the
utility routines that scan through a character string and extract the
parameter names and values. The body of the program obtains the value
of the QUERY_STRING environment variable using the
<i class=command>getenv()</i> system call, uses the utility routines to
extract the parameters from that value, and then generates a simple
HTML document that echoes back those values to the
user.

<p class=para>
For real applications, you'll want to insert your actual processing
code after the parameter extraction and before the
HTML generation. Of course, you'll also need to
change the HTML generation to match your
application's functionality.

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="USING-HTML-CH08-SECT-6.2.2">Using unnamed parameters with GET applications</A></h4>

<p class=para>
Unnamed parameters are passed to the application as command-line
parameters. This makes writing the server-side application almost
trivial. Here is a simple shell script that dumps the parameter values
back to the user:

<p class=para>
<div class=screen>
<p>
<pre>
#!/bin/csh -f
#
# Dump unnamed GET parameters back to the user
echo "Content-type: text/html"
echo
echo '&lt;html&gt;'
echo '&lt;head&gt;'
echo '&lt;title&gt;Unnamed Parameter Echo&lt;/title&gt;'
echo '&lt;/head&gt;'
echo '&lt;body&gt;'
echo 'You entered the following parameters:'
echo '&lt;ul&gt;'
foreach i ($*)
   echo '&lt;li&gt;' $i
end
echo '&lt;/ul&gt;'
echo '&lt;/body&gt;'
exit 0
</PRE>
</DIV>

<p class=para>
Again, we follow the same general style: output a generic document
header, including the MIME content type, followed by the parameters
and some closing boilerplate. To convert this to a real application,
replace the <i class=command>foreach</i> loop with commands that
actually do something.

</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="USING-HTML-CH08-SECT-6.3">Handling POST Forms</A></h3>

<p class=para>
<a name="CH08.POST"></A>Applications that use POST-style parameters expect
to read encoded parameters from their standard input. Like
GET-style application with named parameters, they
can take advantage of the server's utility routines to parse
these parameters.

<p class=para>
Here is a program that echos the POST-style
parameters back to the user:

<p class=para>
<div class=screen>
<p>
<pre>
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#define MAX_ENTRIES 10000
typedef struct {char *name;
                char *val;
               } entry;
char *makeword(char *line, char stop);
char *fmakeword(FILE *f, char stop, int *len);
char x2c(char *what);
void unescape_url(char *url);
void plustospace(char *str);
main(int argc, char *argv[])
{  entry entries[MAX_ENTRIES];
    int num_entries, i;
/* Parse parameters from stdin, building a table of entries */
    for (num_entries = 0; !feof(stdin); num_entries++) {
       entries[num_entries].val = fmakeword(stdin, '&amp;', &amp;cl);
       plustospace(entries[num_entries].val);
       unescape_url(entries[num_entries].val);
       entries[num_entries].name = 
          makeword(entries[num_entries].val, '=');
       }
/* Spit out the HTML boilerplate */
    printf("Content-type: text/html|n");
    printf("|n");
    printf("&lt;html&gt;");
    printf("&lt;head&gt;");
    printf("&lt;title&gt;Named Parameter Echo&lt;/title&gt;|n");
    printf("&lt;/head&gt;");
    printf("&lt;body&gt;");
    printf("You entered the following parameters:|n");
    printf("&lt;ul&gt;|n");
/* Echo the parameters back to the user */
    for(i = 0; i &lt; num_entries; i++)
        printf("&lt;li&gt; %s = %s|n", entries[i].name, 
                  entries[i].val);
/* And close out with more boilerplate */
    printf("&lt;/ul&gt;|n");
    printf("&lt;/body&gt;|n");
    printf("&lt;/html&gt;|n");
}
</PRE>
</DIV>

<p class=para>
Again, we follow the same general form. The program starts by
declaring the various utility routines needed to parse the parameters,
along with a data structure to hold the parameter list. The actual
code begins by reading the parameter list from the standard input and
building a list of parameter names and values in the array named
<tt class=literal>entries</tt>. Once this is complete, a boilerplate
document header is written to the standard output, followed by the
parameters and some closing boilerplate.

<p class=para>
Like the other examples, this program is handy for checking the
parameters being passed to the server application while you are early
in the forms and application debugging process. You can also use it as
a skeleton for other applications by inserting appropriate processing
code after the parameter list is built up and altering the output
section to send back the appropriate results.

</DIV>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch08_05.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src="gifs/txthome.gif" alt="Home" border=0></a></td>
<td width=172 align=right valign=top><a href="ch09_01.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Creating Effective Forms</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td>
<td width=172 align=right valign=top>Tables</td>
</tr>
</table>

<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
</DIV>

</BODY>
</HTML>
