<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 8] Forms</TITLE>
<meta name="author" content="Chuck Musciano and Bill Kennedy">
<meta name="date" content="Mon Mar 17 09:00:49 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="HTML">
<meta name="title" content="HTML: The Definitive Guide">
<!-- JavaScript: pathcont.js -->
</HEAD>
<body bgcolor="#FFFFFF" text="#000000">

<div class=htmlnav>
<h1><img src="gifs/smbanner.gif" alt="HTML: The Definitive Guide"></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch07_08.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b>Chapter 8</b></td>
<td width=172 align=right valign=top><a href="ch08_02.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>
<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
<hr align=left width=515>
</DIV>
<h1 class=chapter><a class="TITLE" name="USING-HTML-CH08">Forms</A></H1>

<div class=htmltoc>

<p>
<b>Contents:</b><br>
Form Fundamentals<br>
<a href="ch08_02.htm">Form Input Elements</A><br>
<a href="ch08_03.htm">Multiline Text Areas</A><br>
<a href="ch08_04.htm">Multiple Choice Elements</A><br>
<a href="ch08_05.htm">Creating Effective Forms</A><br>
<a href="ch08_06.htm">Forms Programming</A><br>

</DIV>

<p class=para>
<a name="CH08.FORMS"></A>Forms, forms, forms, forms: we fill 'em out for nearly
everything, from the moment we're born, 'til the moment we
die. So what's to explain all the hoopla and excitement over
HTML forms? Simply this: they make
HTML truly interactive.

<p class=para>
When you think about it, except for the limited input from users
available through the <tt>&lt;isindex&gt;</TT> tag,
HTML's interactivity is basically a lot of
button pushing: click here, click there, go here, go there;
there's no real user feedback, and it's certainly not
personalized. Applets provide extensive user-interaction capability,
but they can be difficult to write and are still not standardized for
all browsers. Forms, on the other hand, are supported by almost every
browser and make it possible to create documents that collect and
process user input, and formulate personalized replies.

<p class=para>
This powerful mechanism has far-reaching implications, particularly
for electronic commerce. It finishes an online catalog by giving
buyers a way to immediately order products and services. It gives
nonprofit organizations a way to sign up new members. It gives market
researchers a way to collect user data. It gives you an automated way
to interact with your HTML document readers.

<p class=para>
Mull over the ways you might want to interact with your readers while
we take a look at both the client- and server-side details of creating
forms.

<div class=sect1>
<h2 class=sect1><a class="TITLE" name="USING-HTML-CH08-SECT-1">8.1 Form Fundamentals</A></h2>

<p class=para>

Unlike the <tt>&lt;isindex&gt;</TT> tag, you can put one or more
forms in a single document. And unlike an <tt>&lt;isindex&gt;</TT>
document, users can ignore the embedded forms, reading content and
interacting with the document's links just as with a form-less
document. <i class=emphasis>[<tt>&lt;isindex&gt;</TT>, <a href="ch06_06.htm">6.6.1</A>]</I>

<p class=para>
Forms are comprised of one or more text-input boxes, clickable
(<i class=emphasis>radio</I>) buttons, multiple-choice checkboxes, and
even pull-down menus and clickable images, all placed inside the
<tt>&lt;form&gt;</TT> tag. Within a form, you may also put
regular body content, including text and images. The text is
particularly useful for providing instructions to the users on how to
fill out the form and for form element labels and prompts.

<p class=para>
Once a user fills out the various fields in the form, they click a
special ``Submit'' button (or, sometimes, press the Return
key) to submit the form to a server. The form-supporting browser
packages up the user-supplied values and choices and sends them to a
server.[1]
The server then passes the information along to a supporting
program or application that processes the information and creates a
reply, usually in HTML. The reply may be simply a
thank you or it might prompt the user how to fill out the form
correctly or to supply missing fields. The server sends the reply to
the browser client that presents it to the user.

<blockquote class=footnote>
<p class=para>[1] 
Some browsers, Netscape in particular, may also encrypt the
information, securing it from credit-card thieves, for
example. However, the encryption facility must also be supported on
the server-side as well: contact the browser manufacturer for
details.
</blockquote>
<p class=para>
The server-side data-processing aspects of forms are not part of the
HTML standard; they are defined by the
server's software. While a complete discussion of
server-side forms programming is beyond the scope of this book, we'd
be remiss if we did not include at least a simple example to get you
started. To that end, we've included at the end of this chapter a few
skeletal programs that illustrate the common styles of server-side
forms programming.

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="USING-HTML-CH08-SECT-1.1">The <tt>&lt;form&gt;</TT> Tag</A></h3>

<p class=para>
<a name="CH08.FORMTAG1"></A><a name="CH08.FORMTAG2"></A>You place a form anywhere inside the body of an
HTML document with its elements enclosed by the
<tt>&lt;form&gt;</TT> tag and its respective end tag
<tt>&lt;/form&gt;</TT>. You may, and we recommend you often do,
include regular body content inside a form to specially label
user-input fields and to provide directions, for example.

<div class=sidebar>
<p class=sidebar><blockquote><tt>&lt;form&gt;</TT>

<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>Function:</I><dd>

<p class=para>
Defines a form

<p>
<dt class=varlistentry><i class=emphasis>Attributes:</I><dd>ACTION, ENCTYPE, and METHOD

<p>
<dt class=varlistentry><i class=emphasis>End tag:</I><dd>

<p class=para>
<tt>&lt;/form&gt;</TT>; never omitted

<p>
<dt class=varlistentry><i class=emphasis>Contains:</I><dd>

<p class=para>
<tt class=replaceable><i>form_content</i></tt>

<p>
<dt class=varlistentry><i class=emphasis>Used in:</I><dd>

<p class=para>
<tt class=replaceable><i>block</i></tt></DL>
</BLOCKQUOTE><p>
</DIV>

<p class=para>
Browsers flow the special form elements into the containing paragraphs
as if they were small images embedded into the text. There
aren't any special layout rules for form elements, so you need
to use other HTML elements, like the
<tt>&lt;br&gt;</TT> and <tt>&lt;p&gt;</TT> tags, to control the
placement of elements within the text flow. <i class=emphasis>[<tt>&lt;p&gt;</TT>, <a href="ch04_01.htm">4.1.2</A>]</I> <i class=emphasis>[<tt>&lt;br&gt;</TT>, <a href="ch04_07.htm">4.7.1</A>]</I>

<p class=para>
All of the form elements within a <tt>&lt;form&gt;</TT> tag
comprise a single form. The browser sends all of the values of these
elements--blank, default, or user-modified--when the user
submits the form to the server.

<p class=para>
You must define at least two special form attributes, which provide
the name and address of the form's processing server and the
method by which the parameters are to be sent to the server. A third,
optional attribute lets you change how the parameters get encoded for
secure transmission over the network.

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="USING-HTML-CH08-SECT-1.1.1">The action attribute</A></h4>

<p class=para>
The required action attribute for
the <tt>&lt;form&gt;</TT> tag gives the URL of
the application that is to receive and process the form's data.

<p class=para>
Most webmasters keep their forms-processing applications in a special
directory on their Web server, usually named
<tt class=replaceable><i>cgi-bin</i></tt>, which stands for Common Gateway
Interface[2]
binaries. Keeping these special forms-processing programs and
applications in one directory makes it easier to manage and secure the
server.

<blockquote class=footnote>
<p class=para>[2] 
The Common Gateway Interface (CGI) defines the
protocol by which servers interact with programs that process form data.
</blockquote>
<p class=para>
A typical <tt>&lt;form&gt;</TT> tag with the
action attribute looks like this:

<p class=para>
<div class=screen>
<p>
<pre>
&lt;form action="http://www.kumquat.com/cgi-bin/update"&gt;
...
&lt;/form&gt;
</PRE>
</DIV>

<p class=para>
The example URL tells the browser to contact the
server named <tt class=replaceable><i>www.kumquat.com</i></tt> and pass along the
user's form values to the application named
<tt class=replaceable><i>update</i></tt> located in the <tt class=replaceable><i>cgi-bin</i></tt>
directory.

<p class=para>
In general, if you see a URL that references a
document in a directory named <tt class=replaceable><i>cgi-bin</i></tt>, you can be
pretty sure that the document is actually an application that creates
the desired page dynamically each time it's invoked.

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="USING-HTML-CH08-SECT-1.1.2">The enctype attribute</A></h4>

<p class=para>
<a name="CH08.ENCTYPE1"></A><a name="CH08.ENCTYPE2"></A>The browser specially encodes the form's data before it passes
that data to the server so it does not become scrambled or corrupted
during the transmission. It is up to the server to either decode the
parameters or to pass them, still encoded, to the application.

<p class=para>
The standard encoding format is the Internet Media Type named
``application/x-www-form-urlencoded.'' You can change that
encoding with the optional enctype
attribute in the <tt>&lt;form&gt;</TT> tag. If you do elect to use an
alternative encoding, the only other supported format is
"multipart/form-data."

<p class=para>
The reality is that you'll rarely if ever see the enctype attribute used. The only format
common among the popular browsers and Web servers is the default
application/x-www-form-urlencoded. Netscape is the only browser that
currently supports the multipart/form-data alternative, which is
required only for those forms that contain file-selection fields.
Unless your forms need file-selection fields, you probably should
ignore this attribute and simply rely upon the browser and your
processing server to use the default encoding type. <i class=emphasis>[file-selection fields, <a href="ch08_02.htm">8.2.2.3</A>]</I>

<p class=para>
The standard
encoding--application/x-www-form-urlencoded--converts any
spaces in the form values to a plus sign (+), nonalphanumeric
characters into a percent sign (%) followed by two hexadecimal digits
that are the ASCII code of the character, and the
line breaks in multiline form data into <tt class=literal>%0D%0A</tt>.

<p class=para>
The standard encoding also includes a name for each field in the
form. (A ``field'' is a discrete element in the form, whose
value can be nearly anything, from a single number to several lines of
text--the user's address, for example.) If there is more
than one value in the field, the values are separated by ampersands
(``&amp;'').

<p class=para>
For example, here's what the browser sends to the server after
the user fills out a form with two input fields labeled
<tt class=literal>name</tt> and <tt class=literal>address</tt>; the former
field has just one line of text, while the latter field has several
lines of input:

<p class=para>
<div class=screen>
<p>
<pre>
name=O'Reilly+&amp;+Associates&amp;address=103+Morris+Street%0D%0A
Sebastopol,%0D%0ACA+95472
</PRE>
</DIV>

<p class=para>
We've broken the value into two lines for clarity in this book,
but in reality, the browser sends the data in an unbroken string. The
<tt class=literal>name</tt> field is ``O'Reilly &amp;
Associates'' and the value of the <tt class=literal>address</tt>
field, complete with embedded newline characters, is:

<p class=para>
<div class=screen>
<p>
<pre>
103 Morris Street
Sebastopol,
CA 95472
</PRE>
</DIV>

<p class=para>
The multipart/form-data encoding encapsulates the fields in the form
as several parts of a single MIME-compatible
compound document. Each field has its own section in the resulting
file, set off by a standard delimiter. Within each section, one or
more header lines define the name of the field, followed by one or
more lines containing the value of the field. Since the value part of
each section can contain binary data or otherwise unprintable
characters, no character conversion or encoding occurs within the
transmitted data.

<p class=para>
This encoding format is by nature more verbose and longer than the
application/x-www-form-urlencoded format. As such, it can only be used
when the method attribute of the
<tt>&lt;form&gt;</TT> tag is set to post, as described below.

<p class=para>
A simple example makes it easy to understand this format. Here's
our previous example, when transmitted as multipart/form-data:

<div class=screen>
<p>
<pre>
------------------------------146931364513459
Content-Disposition: form-data; name="name"
  
O'Reilly &amp; Associates
------------------------------146931364513459
Content-Disposition: form-data; name="address"
  
103 Morris Street
Sebastopol,
CA 95472
------------------------------146931364513459--
</PRE>
</DIV>

<p class=para>
The first line of the transmission defines the delimiter that will
appear before each section of the document. It always consists of
thirty dashes and a long random number that distinguishes it from
other text that might appear in actual field values.

<p class=para>
The next lines contain the header fields for the first section. There
will always be a Content-Disposition field indicating that this
section contains form data and providing the name of the form element
whose value is in this section. You may see other header fields; in
particular, some file-selection fields include a Content-Type header
field that indicates the type of data contained in the file being
transmitted.

<p class=para>
After the headers, there is a single blank line followed by the actual
value of the field on one or more lines. The section concludes with a
repeat of the delimiter line that started the transmission. Another
section follows immediately, and the pattern repeats until all of the
form parameters have been transmitted.  The end of the transmission is
indicated by an extra two dashes at the end of the last delimiter
line.

<p class=para>
As we pointed out earlier, use multipart/form-data encoding only when
your form contains a file-selection field. Here's an example of how
the transmission of a file-selection field might look:

<div class=screen>
<p>
<pre>
------------------------------146931364513459
Content-Disposition: form-data; name="thefile"; filename="test"
Content-Type: text/plain
  
First line of the file
...
Last line of the file
------------------------------146931364513459
</PRE>
</DIV>

<p class=para>
The only notable difference is that the Content-Disposition field
contains an extra element, "filename," that defines the name of the
file being transmitted. There might also be a Content-Type field to
further describe the file's contents.

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="USING-HTML-CH08-SECT-1.1.3">The method attribute</A></h4>

<p class=para>
<a name="CH08.METHOD1"></A><a name="CH08.METHOD2"></A>The other required attribute for the <tt>&lt;form&gt;</TT> tag sets
the method by which the browser sends the form's data to the
server for processing. There are two ways: the POST
method and the GET method.

<p class=para>
With the POST method, the browser sends the data in
two steps: the browser first contacts the form-processing server
specified in the action attribute,
and once contact is made, sends the data to the server in a separate
transmission.

<p class=para>
On the server side, POST-style applications are
expected to read the parameters from a standard location once they
begin execution. Once read, the parameters must be decoded before the
application can use the form values. Your particular server will
define exactly how your POST-style applications can
expect to receive their parameters.

<p class=para>
The GET method, on the other hand, contacts the
form-processing server and sends the form data in a single
transmission step: the browser appends the data to the form's
<tt class=literal>action</tt> URL, separated by the
question mark (?) character.

<p class=para>
The common browsers transmit the form information by either method;
some servers receive the form data by only one or the other
method. You indicate which of the two
methods--POST or
GET--your forms-processing server handles with
the method attribute in the <tt>&lt;form&gt;</TT>
tag. Here's the complete tag including the
GET transmission method
attribute for the previous form example:

<p class=para>
<div class=screen>
<p>
<pre>
&lt;form method=GET 
   action="http://www.kumquat.com/cgi-bin/update"&gt; 
  ...
&lt;/form&gt;
</PRE>
</DIV>

<p class=para>
Which one to use if your form-processing server supports both the
POST and GET methods? Here are
some rules of thumb:

<p>
<ul class=itemizedlist>
<li class=listitem>For best form-transmission performance, send small forms with
a few short fields via the GET method.

<p>
<li class=listitem>Because some server operating systems limit the number and
length of command-line arguments that can be passed to an
application at once, use the POST method to
send forms that have many fields, or ones that have long text
fields.

<p>
<li class=listitem>If you are inexperienced in writing server-side
form-processing applications, choose
GET. The extra steps involved in reading
and decoding POST-style transmitted
parameters, while not too difficult, may be more work than you
are willing to tackle.

<p>
<li class=listitem>If security is an issue, choose
POST. GET places the
form parameters directly in the application
URL where they easily can be captured by
network sniffers or extracted from a server log file. If the
parameters contain sensitive information like credit card
numbers, you may be compromising your users without their
knowledge. While POST applications are not
without their security holes, they can at least take advantage
of encryption when transmitting the parameters as a separate
transaction with the server.

<p>
</UL>
<p class=para>
If you want to invoke the server-side application outside the realm of
a form, including passing it parameters, use GET
because it lets you include form-like parameters as part of a
URL. POST-style applications, on
the other hand, expect an extra transmission from the browser after
the URL, something you can't do as part of a
conventional <tt>&lt;a&gt;</TT> tag.

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="USING-HTML-CH08-SECT-1.1.4">Passing parameters explicitly</A></h4>

<p class=para>
The foregoing bit of advice warrants some explanation. Suppose you had
a simple form with two elements, named x and y. When the values of
these elements are encoded, they look like this:

<div class=screen>
<p>
<pre>
x=27&amp;y=33
</PRE>
</DIV>

<p class=para>
If the form uses method=GET, the
URL used to reference the server-side application
looks something like this:

<div class=screen>
<p>
<pre>
http://www.kumquat.com/cgi-bin/update?x=27&amp;y=33
</PRE>
</DIV>

<p class=para>
There is nothing to keep you from creating a conventional
<tt>&lt;a&gt;</TT> tag that invokes the form with any parameter
value you desire, like so:

<div class=screen>
<p>
<pre>
&lt;a href="http://www.kumquat.com/cgi-bin/update?x=19&amp;y=104"&gt;
</PRE>
</DIV>

<p class=para>
The only hitch is that the ampersand that separates the parameters is
also the character-entity insertion character. When placed within the
href attribute of the
<tt>&lt;a&gt;</TT> tag, the ampersand will cause the browser to
replace the characters following it with a corresponding character
entity.

<p class=para>
To keep this from happening, you must replace the literal ampersand
with its entity equivalent, either <tt>&amp;&amp;#38;;</TT> or &amp;amp;. With this substitution, our
example of the nonform reference to the server-side application looks
like this:

<p class=para>
<div class=screen>
<p>
<pre>
&lt;a href="http://www.kumquat.com/cgi-bin/update?x=19&amp;amp;y=104"&gt;
</PRE>
</DIV>

<p class=para>
Because of the potential confusion that arises from having to escape
the ampersands in the URL, server implementors are
encouraged to also accept the semicolon (;) as a parameter
separater. You might want to check your server's documentation
to see if they honor this convention. See <a href="appd_01.htm">Appendix D, <i>Character Entities</i></A>.

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="USING-HTML-CH08-SECT-1.1.5">A simple example</A></h4>

<p class=para>
In a moment we'll examine each element of a form in
detail. Let's first take a quick look at a simple example to see
how forms are put together.

<p class=para>
This one (shown in <a href="#USING-HTML-CH08-FIG-1">Figure 8-1</A>) gathers
basic demographic information about a user:

<p class=para>
<div class=screen>
<p>
<pre>
&lt;form method=POST action="http://www.kumquat.com/demo"&gt;
  Name: 
    &lt;input type=text name=name size=32 maxlength=80&gt;
  &lt;p&gt;
  Sex: 
    &lt;input type=radio name=sex value="M"&gt; Male 
    &lt;input type=radio name=sex value="F"&gt; Female
  &lt;p&gt;
  Income: 
    &lt;select name=income size=1&gt;
      &lt;option&gt;Under $25,000
      &lt;option&gt;$25,001 to $50,000
      &lt;option&gt;$50,001 and higher
    &lt;/select&gt;
  &lt;p&gt;
  &lt;input type=submit&gt;
&lt;/form&gt;
</PRE>
</DIV>

<p class=para>
The first line of the example starts the form and indicates
we'll be using the POST method for data
transmission to the form-processing server. The form's
user-input elements follow, each defined by an
<tt>&lt;input&gt;</TT> tag and type
attribute. There are three elements in the simple example, each
contained within its own paragraph.

<div class=figure>
<h4 class=figure><a class="TITLE" name="USING-HTML-CH08-FIG-1">Figure 8-1: A simple form</A></h4>


<p>
<img align=middle src="figs/uhtml0801.gif" alt="[Graphic: Figure 8-1]" width=500 height=252>

</DIV>

<p class=para>
The first element is a conventional text-entry field, letting the user
type in up to 80 characters, but displaying only 32 of them at a
time. The next element is a multiple-choice option, which lets the
user select only one of two radio buttons. This is followed by a
pull-down menu for choosing one of three options. The final element is
a simple submission button, which, when clicked by the user, sets the
form's processing in motion.

</DIV>

</DIV>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch07_08.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src="gifs/txthome.gif" alt="Home" border=0></a></td>
<td width=172 align=right valign=top><a href="ch08_02.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Appropriate List Usage</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td>
<td width=172 align=right valign=top>Form Input Elements</td>
</tr>
</table>

<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
</DIV>

</BODY>
</HTML>
