<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 5] 5.2 Inserting Images in Your Documents</TITLE>
<meta name="author" content="Chuck Musciano and Bill Kennedy">
<meta name="date" content="Mon Mar 17 08:56:19 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="HTML">
<meta name="title" content="HTML: The Definitive Guide">
<!-- JavaScript: pathcont.js -->
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><img src="gifs/smbanner.gif" alt="HTML: The Definitive Guide"></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch05_01.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b>Chapter 5</b></td>
<td width=172 align=right valign=top><a href="ch05_03.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>
<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="USING-HTML-CH05-SECT-2">5.2 Inserting Images in Your Documents</A></h2>

<p class=para>
<a name="CH05.GRAPHICS"></A>One of the most compelling features of HTML is its
ability to include images with your document text, either as an
intrinsic component of the document (inline images), as separate
documents specially selected for download via hyperlinks, or, with
Netscape and Internet Explorer, as background for your document. When
judiciously added to the body content, images--static icons,
pictures, illustrations, drawings, and so on--can make your
documents more attractive, inviting, and professional looking, as well
as informative and easier to browse. You may also specially enable an
image so that it becomes a visual map of hyperlinks. When used to
excess, however, images make your document cluttered, confusing, and
inaccessible, as well as unnecessarily lengthen the time it takes for
users to download and view your pages.

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="USING-HTML-CH05-SECT-2.1">Understanding Image Formats</A></h3>

<p class=para>
<a name="CH05.FORMATS1"></A><a name="CH05.FORMATS2"></A><a name="CH05.GIF"></A>The HTML standard does not prescribe an official
format for images. However, the popular browsers specifically
accommodate only certain image formats; GIF and
JPEG, in particular. Most other multimedia formats
require special accessory applications that each browser owner must
obtain, install, and successfully operate to view the special
files. So it's not too surprising that GIF
and JPEG are the de facto image standards on the
Web.

<p class=para>
Both image formats were already in widespread use before the Web came
into being, so there's lots of supporting software out there to
help you prepare your graphics for either format. However, each has
its own advantages and drawbacks, including features that some
browsers exploit for special display effects.

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="USING-HTML-CH05-SECT-2.1.1">GIF</A></h4>

<p class=para>
The Graphics Interchange Format (GIF) was first
developed for image transfer among users of the CompuServe online
service. The format serves two purposes: its encoding is
cross-platform, so that with appropriate GIF
decoding software, graphics created and converted to
GIF on a Macintosh, for example, can be loaded into
a Windows-based PC, decoded, and viewed without a lot of fuss. The
second main feature is that the GIF format uses
special compression technology that can significantly reduce the size
of the image file for faster transfer over a
network. GIF compression is ``lossless,''
too; none of an image's original data is altered or
deleted, so the uncompressed and decoded image exactly matches its
original.

<p class=para>
Even though GIF image files invariably have the
<i class=filename>.gif</i> (or
<i class=filename>.GIF</i>) filename suffix, there
actually are two GIF versions: the original
GIF87 and an expanded GIF89a, which supports several new features including transparent
backgrounds popular with HTML authors (see
<a href="#USING-HTML-CH05-SECT-2.1.2">5.2.1.2</A>,  below). The popular
browsers support both GIF versions, which use the
same encoding scheme that maps 8-bit pixel values to a color table,
for a maximum of 256 colors per image. Most GIF
images have even fewer colors and there are special tools to simplify
the colors in more elaborate graphics. By simplifying the
GIF images, you create a smaller color map and
enhance pixel redundancy for better file compression and consequent
faster downloading.

<p class=para>
However, because of the limited number of colors, a
GIF-encoded image is not always appropriate,
particularly for photorealistic pictures (see JPEG
discussion below). Rather, GIFs make excellent
icons, reduced color images, and drawings.

<p class=para>
Because most graphical browsers explicitly support the
GIF format, it is currently the most widely
accepted image-encoding format on the Web. It is acceptable for both
inline images and externally linked ones. When in doubt as to which
image format to use, choose GIF. It will work in
almost any situation.

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="USING-HTML-CH05-SECT-2.1.2">Interlacing and transparency</A></h4>

<p class=para>
<a name="CH05.INTERLACING"></A><a name="CH05.TRANSPARENCY"></A><a name="CH05.GRAPHICS2"></A><a name="CH05.GRAPHICS3"></A>GIF images can be made to perform two special
tricks: interlacing and transparency. With interlacing, a
GIF image seemingly materializes on the display,
rather than progressively flow onto it from top to bottom. Normally, a
GIF encoded image is a sequence of pixel data, in
order row-by-row, from top to bottom of the image. While the common
GIF image renders onscreen like pulling down a window
shade, interlaced GIFs open like a venetian
blind. That's because interlacing sequences every fourth row of
the image. That way, users get to see a full image--top to
bottom, albeit fuzzy--in a quarter of the time it takes to
download and display the remainder of the image. The resulting quarter-done
image usually is clear enough so that users with slow network
connections can evaluate whether or not to take the time to download
the remainder of the image file.

<p class=para>
Not all graphical browsers, although able to display an interlaced
GIF, are actually able to display the materializing
effects of interlacing. With those that do, users still can defeat the
effect by choosing to delay image display until after download and
decoding. NCSA Mosaic, on the other hand, always
downloads and decodes images before display, so it doesn't
support the effect at all.

<p class=para>
The other popular effect available with GIF
images--GIF89a formatted images
actually--is the ability to make a portion of them transparent so
that what's underneath--usually the browser window's
background--shows through. The transparent GIF
image has one color in its color map designated as the background
color. The browser simply ignores any pixel in the image that uses
that background color, thereby letting the display window's
background show through. By carefully cropping its dimensions and by
using a solid, contiguous background color, a transparent image can be
made to seamlessly meld into a page's surrounding content or
float above it.

<p class=para>
Transparent GIF images are great for any graphic
you want to meld into the document and not stand out as a rectangular
block. Transparent GIF logos are very popular, as
are transparent icons and dingbats--any graphic that should
appear to have an arbitrary, natural shape. You may also insert a
transparent image inline with conventional text to act as a special
character glyph within conventional text.

<p class=para>
The downside to transparency is that the GIF image
will look lousy if you don't remove its border when included in
a hyperlink anchor (<tt>&lt;a&gt;</TT> tag), or is otherwise
specially framed. And, too, content flow happens around the
image's rectangular dimensions, not adjacent to its apparent
shape. That can lead to unnecessarily isolated images or odd-looking
sections in your HTML pages.

<p class=para>
Either and both GIF tricks--interlacing and
transparency--don't just happen; you need special software
to prepare the GIF file. Many picture tools now
save your creations or acquired images in GIF
format, although few are able to make interlaced files and fewer let
you designate and enable transparency. Fortunately, there are a slew
of shareware and freeware programs specialized for either
task. Look into your favorite Internet software archives for
GIF graphics and conversion tools and also see
<a href="ch12_01.htm">Chapter 12, <i>Tips, Tricks, and Hacks</i></A>, for details on creating transparent
images.

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="USING-HTML-CH05-SECT-2.1.3">JPEG</A></h4>

<p class=para>
<a name="CH05.JPEG"></A>
The Joint Photographic Experts Group is a standards body that
developed what is now known as the JPEG
image-encoding format. Like GIFs,
JPEG images are platform independent and specially
compressed for high-speed transfer via digital communication
technologies. Unlike GIF, JPEG
supports tens of thousands of colors for more detailed, photorealistic
digital images. And JPEG uses special algorithms
that yield much higher data-compression ratios. It is not uncommon,
for example, for a 200-kilobyte GIF image (which
uses lossless compression) to be reduced to a 30-kilobyte
JPEG image. To achieve that amazing compression, JPEG does lose some image data. However,
you can adjust the degree of ``lossiness'' with special
JPEG tools, so that although the uncompressed image
may not exactly match the original, it will be close enough that most
people cannot tell the difference.

<p class=para>
The JPEG format is nearly universally understood by
today's graphical browsers. Some, most notably Netscape, have a
built-in JPEG decoder. Others, like Mosaic, invoke
an external viewing tool (helper application) for decoding and
displaying JPEG files, which invariably are stored
with a <i class=filename>.jpg</i> (or <i class=filename>.JPG</i>)
filename suffix.

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="USING-HTML-CH05-SECT-2.1.4">XBM</A></h4>

<p class=para>
The X BitMap image format is an ASCII
representation of a monochrome image. It is designed to capture small,
black-and-white icons in a form that can be directly included in C
and C++ programs. XBM format offers no compression
features or support for color images.

<p class=para>
XBM format images are typically supported by
browsers that run under the X Window System, usually running on a
UNIX platform. XBM format is
useful for capturing small icons that might be used as bullets or
dingbats within a document. It makes little sense to use
XBM for any other type of image; the resulting
XBM file would be far larger than the equivalent
GIF version of the same image.

</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="USING-HTML-CH05-SECT-2.2">When to Use Images</A></h3>

<p class=para>
Most pictures are worth a thousand words. But don't forget
that no one pays attention to a blabbermouth. First and foremost,
think of your HTML document images as visual tools,
not gratuitous trappings. They should support your text content and
help readers navigate your documents. Use images to clarify,
illustrate, or exemplify the contents. Content supporting photographs,
charts, graphs, maps, and drawings are all natural candidates for
appropriate HTML images. Product photographs are
essential components in online catalogs and shopping guides, for
example. And link-enabled icons and dingbats can be effective
visual guides to internal and external resources. If an image
doesn't do any of these valuable services for your
document, throw it out, already!

<p class=para>
One of the most important considerations when adding images to a
document is the additional delay they add to the retrieval time for a
document over the network, particularly for modem connections. While a
simple text document might run, at most, 10 or 15 thousand
bytes, images can easily extend to hundreds of thousands of bytes
each. And the total retrieval time for a document is not only equal to
the sum of all its component parts, but also to compounded networking
overhead delays since each image requires a separate connection and
download request between the client browser and the Web
server. Depending on the speed of the connection
(<i class=emphasis>bandwidth</I>, usually expressed as bits or bytes
per second) as well as network congestion that can delay connections,
a single document containing one 100-kilobyte image may take anywhere
from around 30 seconds through a 28.8 kilobit-per-second modem
connection in the wee hours of the morning when most everyone else is
asleep, to well over <i class=emphasis>ten</I>
<i class=emphasis>minutes</I> with a 9600 bit-per-second modem at
noontime. You get the picture?

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="USING-HTML-CH05-SECT-2.3">When to Use Text</A></h3>

<p class=para>
Text hasn't gone out of style. For some users, it is the only
portion of your document they can access. We argue that, in most
circumstances, your documents should be usable by readers who cannot
view images or have disabled their automatic download in their browser
to improve their low-speed connection. While the urge to add images to
all of your documents may be strong, there are times when pure text
documents make more sense.

<p class=para>
Documents being converted to the Web from other formats rarely have
embedded images. Reference materials and other serious content often
is completely usable in a text-only form.

<p class=para>
You should create text-only documents when access speed is critical
and potentially slow. If you know that many users will have only
low-speed connections to your pages, you should accommodate them by
avoiding the use of images within your documents. Better yet, provide
a home (leading) page that lets readers decide between duplicate
collections of your work: one containing the images, and another
stripped of them. (The popular graphics browsers include special
picture icons as place holders for yet-to-be downloaded images, which
can trash and muddle your document's layout into an
unreadable mess.)

<p class=para>
Text is most appropriate--supporting images only, without frills
or nonessential graphics--if your documents are to be readily
searchable by any of the many Web indexing services. Images are almost
always ignored by these search engines. If the major content of your
pages is provided with images, very little information about your
documents will find its way into the online Web directories.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="USING-HTML-CH05-SECT-2.4">Speeding Image Downloads</A></h3>

<p class=para>
There are several ways to ameliorate the overhead and delays inherent
with images besides being very choosy about which to include in your
documents.
<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>Keep it simple</I><dd>

<p class=para>
A full-screen, 24-bit color graphic, even when reduced in size by
digital compression with one of the standard formats like
JPEG or GIF, is still going to
be a network bandwidth hog. Acquire and use the various image
management software to optimize image dimensions and number of colors
into the fewest number of pixels. Simplify your drawings. Stay away
from panoramic photographs. Avoid large empty backgrounds in your
images, as well as gratuitous borders and other space-consuming
elements. Also avoid dithering (blending two colors among adjacent
pixels to achieve a third color); the technique can significantly
reduce the compressibility of your images. Strive for large areas of
uniform colors, which compress readily in both GIF
and JPEG format.

<p>
<dt class=varlistentry><i class=emphasis>Reuse images</I><dd>

<p class=para>
This is particularly true for icons. The popular browsers cache
incoming document components in local storage for the very purpose of
quick, network connection-less retrieval of data.

<p>
<dt class=varlistentry><i class=emphasis>Divide up large documents</I><dd>

<p class=para>
This is a general rule that includes images. Many small document
segments, organized through hyperlinks (of course!) and effective
tables of contents tend to be better accepted by users than a few large
documents. In general, people would rather ``flip'' several
pages than dawdle waiting for a large one to download. (It's
related to the TV channel-surfing syndrome.) One accepted rule of
thumb is to keep your documents under 50 kilobytes each, so even the
slowest connections won't overly frustrate your readers.

<p>
<dt class=varlistentry><i class=emphasis>Isolate necessarily large graphics</I><dd>

<p class=para>
 
 Provide a special link, perhaps one that includes a thumbnail of the
 graphic, thereby letting readers decide if and when they want to
 spend the time downloading the full image. And since the downloaded
 image isn't mixed with other document components like inline
 images, it's much easier for the reader to identify and save
 the image on their system's local storage for later study. (For
 details on non-inline image downloads, see <a href="ch05_07.htm">5.7</A>).

<p>
<dt class=varlistentry><i class=emphasis>Specify image dimensions</I><dd>

<p class=para>
Finally, another way to improve performance is by including the
image's rectangular height and width information in its tag. By
supplying those dimensions, you eliminate the extra steps the extended
browsers must take to download, examine, and calculate an
image's space in the document. There is a downside to this
approach, however, that we explore in <a href="#USING-HTML-CH05-SECT-2.6.11">5.2.6.11</A>.</DL>
</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="USING-HTML-CH05-SECT-2.5">JPEG or GIF?</A></h3>

<p class=para>
You may choose to use only GIF or
JPEG images in your HTML
documents if your sources for images or your software toolset prefers
one over the other format. Both are nearly universally supported by
today's browsers, so there shouldn't be any user-viewing
problems.

<p class=para>
Nevertheless, we recommend that you acquire the facilities to create
and convert to both formats, to take advantage of their unique
capabilities. For instance, use GIF's
transparency feature for icons and dingbats. Alternatively, use
JPEG for large and colorful images for faster
downloading.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="USING-HTML-CH05-SECT-2.6">The <tt>&lt;img&gt;</TT> Tag</A></h3>

<p class=para>
<a name="CH05.IMGTAG1"></A><a name="CH05.IMGTAG2"></A>
The <tt>&lt;img&gt;</TT> tag lets you reference and insert a graphic
image into the current text flow of your HTML
document. There is no implied line or paragraph break before or after
the <tt>&lt;img&gt;</TT> tag, so images can be truly
``inline'' with text and other content.

<div class=sidebar>
<p class=sidebar><blockquote><tt>&lt;img&gt;</TT>

<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>Function:</I><dd>

<p class=para>
Inserts an image into a document

<p>
<dt class=varlistentry><i class=emphasis>Attributes:</I><dd>ALIGN, ALT, BORDER (extension), CONTROLS (Internet Explorer only), DYNSRC (Internet Explorer only), HEIGHT (extension), HSPACE (extension), ISMAP, LOOP (Internet Explorer only), SRC, LOWSRC (Netscape only), START (Internet Explorer only), VSPACE (extension), WIDTH (extension), and USEMAP (extension)

<p>
<dt class=varlistentry><i class=emphasis>End tag:</I><dd>

<p class=para>
None

<p>
<dt class=varlistentry><i class=emphasis>Contains:</I><dd>

<p class=para>
Nothing

<p>
<dt class=varlistentry><i class=emphasis>Used in:</I><dd>

<p class=para>
<tt class=replaceable><i>text</i></tt></DL>
</BLOCKQUOTE><p>
</DIV>

<p class=para>
The format of the image itself is not defined by the
HTML standard, although the popular graphical
browsers specially support GIF and
JPEG images. The HTML standard
doesn't specify or restrict the size or dimensions of the image,
either. Images may have any number of colors, but how those colors are
rendered is highly browser dependent.

<p class=para>
Image presentation in general is very browser specific. Images may be
ignored by nongraphical browsers. Browsers operating in a constrained
environment may modify the image size or complexity. And users,
particularly those with slow network connections, may choose to defer
image loading altogether. Accordingly, you should make sure your
documents make sense and are useful, even if the images are completely
removed.

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="USING-HTML-CH05-SECT-2.6.1">The src attribute</A></h4>

<p class=para>

The src attribute for the
<tt>&lt;img&gt;</TT> tag is required; its value is the image
file's URL, either absolute or relative to
the HTML document referencing the image. To
unclutter their document storage, HTML authors
typically collect image files into a separate folder they often name
something like ``pics'' or ``images.'' <i class=emphasis>[URLs, <a href="ch06_02.htm">6.2</A>]</I>

<p class=para>
For example, this HTML fragment places an image of
a famous kumquat packing plant into the narrative text (see <a href="#USING-HTML-CH05-FIG-8">Figure 5-8</A>):

<div class=screen>
<p>
<pre>
Here we are, on day 17 of the tour, in front of the kumquat
packing plant:
<tt>&lt;p&gt;</TT>
<tt>&lt;img src="pics/packing_plant.gif"&gt;</TT>
<tt>&lt;p&gt;</TT>
What an exciting moment, to see the boxes of fruit moving
</PRE>
</DIV>

<div class=figure>
<h4 class=figure><a class="TITLE" name="USING-HTML-CH05-FIG-8">Figure 5-8: The mighty Kumquat</A></h4>


<p>
<img align=middle src="figs/uhtml0508.gif" alt="[Graphic: Figure 5-8]" width=500 height=278>

</DIV>

<p class=para>
In the example, the paragraph (<tt>&lt;p&gt;</TT>) tags surrounding
the <tt>&lt;img&gt;</TT> tag causes the browser to render the image
by itself with some vertical space after the preceding and before the
trailing text. Text may also abut the image, as we describe in <a href="#USING-HTML-CH05-SECT-2.6.4">5.2.6.4</A>.

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="USING-HTML-CH05-SECT-2.6.2">The lowsrc attribute</A></h4>

<p class=para>

To the benefit of users, particularly those with slow Internet
connections, the browser innovators at Netscape Communications have
introduced the lowsrc companion to
the src attribute in the
<tt>&lt;img&gt;</TT> tag as a way to speed up document
rendering. The lowsrc attribute's
value, like src, is the
URL of an image file that the browser loads and
displays when it first encounters the <tt>&lt;img&gt;</TT>
tag. Then, when the document has been completely loaded and can be
read by the user, the Netscape browser goes back and retrieves the
image specified by the src
attribute.

<p class=para>
Ostensibly, the lowsrc image is a
low-resolution, abbreviated version of the final src image and which, therefore, loads faster
by comparison to quickly give the reader an idea of its content until
the final, higher-resolution image eventually replaces it
onscreen. But the lowsrc attribute
can also be used for some special effects.

<p class=para>
For example, Netscape uses the lowsrc image's dimensions to reserve space in
the document for both the lowsrc
and src images, unless you
explicitly allocate that space with the height and width attributes
described below. Hence, if the dimensions of the image specified in
the src attribute are different
than those for the lowsrc image,
the src image will be reduced,
enlarged, stretched, and/or compressed to fit in the allotted space.
Moreover, the lowsrc and src images needn't be identical, so you might take advantage of the delayed
rendering of the src image for simple animation.

<p class=para>
The lowsrc attribute is for
Netscape version 2 only. Other browsers ignore it and only load the
image specified by the src
attribute. Netscape won't load either image if the user chooses not to
auto-load images. In that case, both images will load in order
when the user clicks the images button or clicks the image icon
placeholder. No browser loads the lowsrc image only; you must include a
src image, otherwise nothing will
appear except the missing image icon.

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="USING-HTML-CH05-SECT-2.6.3">The alt attribute</A></h4>

<p class=para>

The alt attribute specifies
alternative text the browser may show if image display is not
possible or disabled by the user. It's an option, but one we
highly recommend you exercise for every image in your
document. This way, if the image is not available, the user still has
some indication of what it is that's missing.

<p class=para>
The value for the alt attribute is
a text string of up to 1024 characters, enclosed in quotes if you
include spaces or other punctuation. The alternative text may contain
entity references to special characters, but it may not contain any
other sort of markup; in particular, no style tags allowed.

<p class=para>
Graphical browsers ignore the alt
attribute if the image is available and downloading is enabled by the
user. Otherwise, they insert the alt attribute's text as a label next
to an image placeholder icon. Well-chosen <tt class=literal>alt</tt>
labels thereby additionally support those users with a graphical browser
who have disabled their automatic image download because of a slow
connection to the Web.

<p class=para>
Nongraphical, text-only browsers like Lynx put the
<tt class=literal>alt</tt> text directly into the content flow just like
any other text element. So, when used effectively, the
<tt class=literal>alt</tt> tag sometimes can transparently substitute for
missing images. (Your text-only browser users will appreciate not
being constantly reminded of their second-class Web
citizenship.) For example, consider using the asterisk
(*) character as the alt attribute alternative to a special
bullet icon:

<div class=screen>
<p>
<pre>
<tt>&lt;h3&gt;</TT><tt>&lt;img src="pics/fancy_bullet.gif" alt="*"&gt;</TT><tt>&lt;/h3&gt;</TT> 
<tt>&lt;h1&gt;</TT>Introduction<tt>&lt;/h1&gt;</TT>
</PRE>
</DIV>

<p class=para>
A graphical browser displays the bullet image, while in a
nongraphical browser the <tt class=literal>alt</tt> asterisk takes the
place of the missing bullet. Similarly, use <tt class=literal>alt</tt>
text to replace special image bullets for list items. For example, the
following code:

<div class=screen>
<p>
<pre>
<tt>&lt;ul&gt;</TT>
  <tt>&lt;li&gt;</TT> Kumquat recipes <tt>&lt;img src="pics/new.gif" alt="(New!)"&gt;</TT>
  <tt>&lt;li&gt;</TT> Annual harvest dates
<tt>&lt;/ul&gt;</TT>
</PRE>
</DIV>

<p class=para>
displays the <tt class=literal>new.gif</tt> image with graphical browsers,
and the text ``(New!)'' with text-only browsers.

<p class=para>
The alt attribute lets you use even
more complex text (see <a href="#USING-HTML-CH05-FIG-9">Figure 5-9</A>):

<div class=screen>
<p>
<pre>
Here we are, on day 17 of the tour, in front of the kumquat
packing plant:
<tt>&lt;p&gt;</TT>
<tt>&lt;img src=" pics/packing_plant.gif"
  alt="[Image of our tour group outside the main packing plant]"&gt;</TT>
<tt>&lt;p&gt;</TT>
What an exciting moment, to see the boxes of fruit moving
</PRE>
</DIV>

<div class=figure>
<h4 class=figure><a class="TITLE" name="USING-HTML-CH05-FIG-9">Figure 5-9: Text-only browsers like Lynx display an image's alt attribute text</A></h4>


<p>
<img align=middle src="figs/uhtml0509.gif" alt="[Graphic: Figure 5-9]" width=500 height=193>

</DIV>

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="USING-HTML-CH05-SECT-2.6.4">The align attribute</A></h4>

<p class=para>
<a name="CH05.ALIGN1"></A><a name="CH05.ALIGN2"></A><a name="CH05.ALIGN3"></A><a name="CH05.ALIGN4"></A>
The HTML standard does not define a default
alignment for images with respect to other text and images in the same
line of content, so you cannot absolutely predict how the mixture of
text and images will look.[2]
 HTML images normally appear in line with a single
 line of text. Our common media like magazines typically wrap text
 around images, with several lines next to and abutting the image, not
 just a single line.

<blockquote class=footnote>
<p class=para>[2] 
        Most of the popular graphical browsers normally insert an
        image so that its base aligns with the baseline of the
        text--the same alignment as that specified by the
        attribute value of <tt class=literal>bottom</tt>. Nonetheless,
        HTML document designers should assume that
        alignment varies between browsers and always include the
        desired type of image alignment.
</blockquote>
<p class=para>
Fortunately, HTML document designers can extert some
control over the alignment of images with body-content text through
the align attribute for the
<tt>&lt;img&gt;</TT> tag. The HTML standard
specifies three image-alignment attribute values:
<tt class=literal>top</tt>, <tt class=literal>middle</tt>, and
<tt class=literal>bottom</tt>. The developers of Netscape Navigator have
added four more alignment attributes to that list:
<tt class=literal>texttop</tt>, <tt class=literal>absmiddle</tt>,
<tt class=literal>baseline</tt>, and <tt class=literal>absbottom</tt>. These
are Netscape-only; other browsers ignore them. Two other special,
nonstandard image alignments--<tt class=literal>left</tt> and
<tt class=literal>right</tt>--are supported by all the extended
browsers, including Netscape, Internet Explorer, and Mosaic. They let
you embed images into the flow of text so that not just one but
several lines of words will wrap around one and even fill the gap
between two images.

<p class=para>
The list below contains descriptions for the inline
HTML image alignments. See <a href="#USING-HTML-CH05-FIG-10">Figure 5-10</A> for examples.

<div class=figure>
<h4 class=figure><a class="TITLE" name="USING-HTML-CH05-FIG-10">Figure 5-10: HTML standard and Netscape-extended inline image alignments with text</A></h4>


<p>
<img align=middle src="figs/uhtml0510.gif" alt="[Graphic: Figure 5-10]" width=503 height=313>

</DIV>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>top</tt><dd>

<p class=para>
The top of the image is aligned with the top edge of the tallest item in the current line of text. If there are no other images in the current line, the top of the image is aligned with the top of the text.

<p>
<dt class=varlistentry><tt class=literal>texttop</tt> (Netscape only)<dd>

<p class=para>
The align=texttop attribute and value tells Netscape to align the top of the image with the top of the tallest text item in the current line. This is slightly different from the standard HTML <tt class=literal>top</tt> option, which aligns the top of the image with the top of the tallest item, image or text, in the current line. If the line contains no other images that extend above the top of the text, <tt class=literal>texttop</tt> and <tt class=literal>top</tt> have the same effect.

<p>
<dt class=varlistentry><tt class=literal>middle</tt><dd>

<p class=para>
The middle of the image is aligned with the baseline of the text in the current line. Note that the baseline of the text is not anywhere near the middle of the text, so that it is not possible to align the middle of the image with the true middle of the text.

<p>
<dt class=varlistentry><tt class=literal>absmiddle</tt> (Netscape only)<dd>

<p class=para>
If you set the align attribute of the <tt>&lt;img&gt;</TT> tag to <tt class=literal>absmiddle</tt>, Netscape will fit the absolute middle of the image to the absolute middle of the current line. This is different from the common <tt class=literal>middle</tt> option, which aligns the middle of the image with the baseline--the bottom of the characters--of the current line of text. With <tt class=literal>absmiddle</tt>, the center of the image aligns exactly with the center of the text.

<p>
<dt class=varlistentry><tt class=literal>bottom</tt><dd>

<p class=para>
The bottom of the image is aligned with the baseline of the text in
the current line. It is not possible to align the bottom of the image
with the actual bottom of the current line. This type of alignment is
most useful when inserting custom symbols and dingbats into a line of
text.

<p>
<dt class=varlistentry><tt class=literal>baseline</tt> (Netscape
only)<tt class=literal></tt><dd>

<p class=para>
The <tt class=literal>baseline</tt> value for the align attribute has exactly the same effect
as the standard <tt class=literal>bottom</tt> option: it tells Netscape to
align the bottom of the image with the baseline of the text
line. Netscape's authors included this option simply because its
name is more indicative of its effect on image alignment.

<p>
<dt class=varlistentry><tt class=literal>absbottom</tt> (Netscape only)<tt class=literal></tt><dd>

<p class=para>
The align=absbottom attribute has
Netscape align the bottom of the image with the true bottom of the
current line of text: the bottom of the tail on a
``y,'' for example, rather than at the baseline of the text,
which is the bottom of the ``v'' in the ``y''
character.</DL>
<p class=para>
Use the top or middle alignment values for best integration of icons, dingbats, or other special inline effects with the text content. Otherwise, <tt class=literal>align=bottom</tt> usually gives the best appearance. When aligning one or more images on a single line, select the alignment that gives the best overall appearance to your document.

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="USING-HTML-CH05-SECT-2.6.5">Wrapping text around images</A></h4>

<p class=para>
The <tt class=literal>left</tt> and <tt class=literal>right</tt> image
alignment values tell the extended browsers to align an image against
the left or right margin, respectively, of the current text flow. The
browser then renders subsequent document content in the remaining
portion of the flow adjacent to the image. The net result is that the
document content following the image is wrapped around the image.

<p class=para>
<a href="#USING-HTML-CH05-FIG-11">Figure 5-11</A> shows text flow around a
left-aligned image:

<div class=screen>
<p>
<pre>
<tt>&lt;img src="pics/kumquat.gif" align=left&gt;</TT>
The kumquat is the smallest of the citrus fruits, similar
in appearance to a tiny orange. The similarity ends with its
appearance, however. While oranges are generally sweet,
kumquats are extremely bitter. Theirs is an acquired taste,
to be sure.
</PRE>
</DIV>

<div class=figure>
<h4 class=figure><a class="TITLE" name="USING-HTML-CH05-FIG-11">Figure 5-11: Text flow around a left-aligned image</A></h4>


<p>
<img align=middle src="figs/uhtml0511.gif" alt="[Graphic: Figure 5-11]" width=500 height=259>

</DIV>

<p class=para>
You can place images against both margins simultaneously (<a href="#USING-HTML-CH05-FIG-12">Figure 5-12</A>) and the text will run down the
middle of the page between them:

<div class=screen>
<p>
<pre>
<tt>&lt;img src="pics/kumquat.gif" align=left&gt;</TT>
<tt>&lt;img src="pics/tree.gif" align=right&gt;</TT>
The kumquat is the smallest of the citrus fruits, similar
in appearance to a tiny orange. The similarity ends with its
appearance, however. While oranges are generally sweet,
kumquats are extremely bitter. Theirs is an acquired taste,
to be sure.
</PRE>
</DIV>

<div class=figure>
<h4 class=figure><a class="TITLE" name="USING-HTML-CH05-FIG-12">Figure 5-12: Running text between left- and right-aligned images</A></h4>


<p>
<img align=middle src="figs/uhtml0512.gif" alt="[Graphic: Figure 5-12]" width=500 height=249>

</DIV>

<p class=para>
While text is flowing around an image, the left (or right) margin of
the page is temporarily redefined to be adjacent to the image as
opposed to the edge of the page. This means that subsequent images
with the same alignment will stack up against each other. The
following source fragment achieves that staggered image effect, shown
in <a href="#USING-HTML-CH05-FIG-13">Figure 5-13</A>:

<div class=screen>
<p>
<pre>
<tt>&lt;img src="pics/marcia.gif" align=left&gt;</TT>
Marcia!
<tt>&lt;img src="pics/jan.gif" align=left&gt;</TT>
Jan!
<tt>&lt;img src="pics/cindy.gif" align=left&gt;</TT>
Cindy!
</PRE>
</DIV>

<div class=figure>
<h4 class=figure><a class="TITLE" name="USING-HTML-CH05-FIG-13">Figure 5-13: Three very lovely girls</A></h4>


<p>
<img align=middle src="figs/uhtml0513.gif" alt="[Graphic: Figure 5-13]" width=500 height=211>

</DIV>

<p class=para>
When the text flows beyond the bottom of the image, the margin returns
to its former position, typically at the edge of the browser window.

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="USING-HTML-CH05-SECT-2.6.6">Centering an image</A></h4>

<p class=para>
Have you noticed that you can't vertically center an image in the
browser window with the align
attribute? The <tt class=literal>middle</tt> and
<tt class=literal>absmiddle</tt> values center the image vertically with
the current line, but the image is horizontally justified depending on
what content comes before it in the current flow and the dimensions of
the browser window.

<p class=para>
You can vertically center an inline image in the browser window, but
only if it's isolated from surrounding content, such as by
paragraph or line break tags. Then, either use the
<tt>&lt;center&gt;</TT> tag or the align=center attribute in the paragraph tag
to center the image. For example:

<div class=screen>
<p>
<pre>
Kumquats are tasty treats
<tt>&lt;br&gt;</TT>
<tt>&lt;center&gt;</TT>
<tt>&lt;img src="pics/kumquat.gif"&gt;</TT> 
<tt>&lt;/center&gt;</TT>
that everyone should strive to eat!
</PRE>
</DIV>

<p class=para>
Use the paragraph tag with its align=center attribute if want some extra
space above and below the centered image:

<div class=screen>
<p>
<pre>
Kumquats are tasty treats
<tt>&lt;p align=center&gt;</TT>
<tt>&lt;img src="pics/kumquat.gif"&gt;</TT> 
<tt>&lt;/p&gt;</TT>
that everyone should strive to eat!
</PRE>
</DIV>

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="USING-HTML-CH05-SECT-2.6.7">The border attribute</A></h4>

<p class=para>

Browsers normally render images that also are hyperlinks (included in
an <tt>&lt;a&gt;</TT> tag) with a two-pixel-wide colored border,
indicating to the reader that the image can be selected to visit the
associated document. Netscape and Internet Explorer let you change the
thickness of that border with the border attribute to the
<tt>&lt;img&gt;</TT> tag. The value of the border attribute is an integer equal to the
border thickness in pixels.

<p class=para>
<a href="#USING-HTML-CH05-FIG-14">Figure 5-14</A> shows you the thick and thin of image borders, as rendered from the following HTML source:

<div class=screen>
<p>
<pre>
<tt>&lt;a href="test.html"&gt;</TT>
 <tt>&lt;img src="pics/kumquat.gif" border=1&gt;</TT>
<tt>&lt;/a&gt;</TT>
<tt>&lt;a href="test.html"&gt;</TT>
  <tt>&lt;img src="pics/kumquat.gif" border=2&gt;</TT>
<tt>&lt;/a&gt;</TT>
<tt>&lt;a href="test.html"&gt;</TT>
  <tt>&lt;img src="pics/kumquat.gif" border=4&gt;</TT>
<tt>&lt;/a&gt;</TT>
<tt>&lt;a href="test.html"&gt;</TT>
  <tt>&lt;img src="pics/kumquat.gif" border=8&gt;</TT>
<tt>&lt;/a&gt;</TT>
</PRE>
</DIV>

<div class=figure>
<h4 class=figure><a class="TITLE" name="USING-HTML-CH05-FIG-14">Figure 5-14: The thick and thin of image borders</A></h4>


<p>
<img align=middle src="figs/uhtml0514.gif" alt="[Graphic: Figure 5-14]" width=500 height=300>

</DIV>

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="USING-HTML-CH05-SECT-2.6.8">Removing the image border</A></h4>

<p class=para>

You can eliminate the border around an image hyperlink altogether with
the border=0 attribute within the
<tt>&lt;img&gt;</TT> tag. For some images, particularly image maps,
the absence of a border can greatly improve the appearance of your
pages. Images that are clearly link buttons to other pages may also
look best without a border.

<p class=para>
Be careful, though, that by removing the border, you don't
diminish your page's usability. No border means you've
removed a common visual indicator of a link, making it less easy for
your readers to find the links on the page. Browsers will change the
mouse cursor as readers pass it over an image that is a hyperlink, but
you should not assume they will, nor should you make readers test your
borderless images to find hidden links.

<p class=para>
We strongly recommend that you use some additional way with borderless
images to let your readers know to click the images. Even including
simple text instructions will go a long way to making your pages more
accessible to readers.

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="USING-HTML-CH05-SECT-2.6.9">The height and width attributes</A></h4>

<p class=para>
<a name="CH05.W.H1"></A><a name="CH05.W.H2"></A><a name="CH05.W.H3"></A><a name="CH05.W.H4"></A><a name="CH05.DIMGRA1"></A><a name="CH05.DIMGRA2"></A>
Normally, a graphical browser determines the size of an image and,
hence, the rectangular space to reserve for it in the display window,
by retrieving the image file and extracting its embedded height and
width specifications. This is not the most efficient way to render a
document since the browser must sequentially examine each image file
and calculate its screen space before rendering adjacent and
subsequent document content. That can significantly increase the
amount of time it takes to render the document and delay scanning by
the user.

<p class=para>
Netscape and Internet Explorer provide a more efficient way for
HTML authors to specify an image's dimensions
with height and width <tt>&lt;img&gt;</TT> attribute
extensions. That way, the extended browser can calculate and reserve
space before actually downloading an image, speeding document
rendering. Both attributes require an integer value that indicates the
image size in pixels; the order in which they appear in the
<tt>&lt;img&gt;</TT> tag is not important.

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="USING-HTML-CH05-SECT-2.6.10">Resized and flood-filling images</A></h4>

<p class=para>
A hidden feature of the height and
width <tt>&lt;img&gt;</TT>
extension attributes is that you don't need to specify exact
image dimensions; attribute values can be larger or smaller than the
actual size of the image. The extended browsers automatically scale
the image to fit the predefined space. This gives you a down-and-dirty
way of creating thumbnail versions of large images and a way to
enlarge very small pictures. Be careful, though: The browser still
must download the entire file, no matter its final rendered
size, and you will distort an image if you don't retain
its original height versus width proportions. Moreover, the
full-size image probably will ruin the appearance of the document
altogether if displayed by a nonextended browser like Mosaic.

<p class=para>
Another trick with the height and
width image attributes provides an
easy way to flood-fill areas of your page and can also improve
document performance. Suppose you want to insert a colored bar across
your document. Rather than create an image to the full dimensions,
create one that is just one pixel high and wide and set it to the
desired color. Then use the <tt class=literal>height</tt> and
<tt class=literal>width</tt> <tt>&lt;img&gt;</TT> extensions to scale it
to the larger size:

<div class=screen>
<p>
<pre>
<tt>&lt;img src="pics/one-pixel.gif" width=640 height=20&gt;</TT>
</PRE>
</DIV>

<p class=para>
The smaller image downloads much faster than a full-scale image, and
the width and height attributes create the desired bar
after the tiny image arrives at the browser (<a href="#USING-HTML-CH05-FIG-15">Figure 5-15</A>). Nifty, no? No, if the
reader uses Mosaic or another nonextended browser, all they'll
see is a one-pixel dot. So, again, don't forget these are
special image extensions, not universally available to readers.

<div class=figure>
<h4 class=figure><a class="TITLE" name="USING-HTML-CH05-FIG-15">Figure 5-15: This bar was made from a one-pixel image</A></h4>


<p>
<img align=middle src="figs/uhtml0515.gif" alt="[Graphic: Figure 5-15]" width=500 height=143>

</DIV>

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="USING-HTML-CH05-SECT-2.6.11">More problems with height and width</A></h4>

<p class=para>
Although the height and width attributes for the
<tt>&lt;img&gt;</TT> tag can improve performance and let you perform
some neat tricks, there is a particularly knotty downside to using
them. The extended browser sets aside the specified rectangle of space
to the prescribed dimensions in the display window even if the user
has turned off automatic download of images. What the user often is
left with is a page full of semi-empty frames with a meaningless
picture placeholder icon inside. The page looks terribly unfinished
and is mostly useless. Without accompanying dimensions, on the other
hand, the browser simply inserts a placeholder icon inline and usually
sized to the surrounding text, so at least there's something
there to read in the display.

<p class=para>
We don't have an answer to this dilemma. We would, however, include
extension attributes because we encourage any practice that improves network
performance.

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="USING-HTML-CH05-SECT-2.6.12">The hspace and vspace attributes</A></h4>

<p class=para>

Graphical browsers usually don't give you much space between an
image and the text around it. And unless you create a transparent
image border that expands the space between them, the typical
two-pixel buffer between an image and adjacent text is just too close
for most designer's comfort. Add the image into a hyperlink, and
the special colored border will negate any transparent buffer space
you labored to create, as well as draw even more attention to how
close the adjacent text butts up against the image.

<p class=para>
The <tt>&lt;img&gt;</TT> extensions, <tt class=literal>hspace</tt> and
<tt class=literal>vspace</tt>, supported by both Netscape and Internet
Explorer, can give your images breathing room. With
<tt class=literal>hspace</tt>, you specify the number of pixels of extra
space to leave between the image and text on the left and right sides
of the image; the <tt class=literal>vspace</tt> value is the number of
pixels on the top and bottom. <a href="#USING-HTML-CH05-FIG-16">Figure 5-16</A>
shows the difference between two wrapped images:

<div class=figure>
<h4 class=figure><a class="TITLE" name="USING-HTML-CH05-FIG-16">Figure 5-16: Improve image/text interfaces with <tt class=literal>vspace</tt> and <tt class=literal>hspace</tt> extensions</A></h4>


<p>
<img align=middle src="figs/uhtml0516.gif" alt="[Graphic: Figure 5-16]" width=500 height=413>

</DIV>

<div class=screen>
<p>
<pre>
<tt>&lt;img src="pics/kumquat.gif" align=left&gt;</TT>
The kumquat is the smallest of the citrus fruits, similar
in appearance to a tiny orange. The similarity ends with its
appearance, however. While oranges are generally sweet,
kumquats are extremely bitter. Theirs is an acquired taste,
to be sure. Most folks, at first taste, wonder how you could 
ever eat another, let alone enjoy it!
<tt>&lt;p&gt;</TT>
<tt>&lt;img src="pics/kumquat.gif" align=left hspace=10 vspace=10&gt;</TT>
The kumquat is the smallest of the citrus fruits, similar
in appearance to a tiny orange. The similarity ends with its
appearance, however. While oranges are generally sweet,
kumquats are extremely bitter. Theirs is an acquired taste,
to be sure. Most folks, at first taste, wonder how you could 
ever eat another, let alone enjoy it!
</PRE>
</DIV>

<p class=para>
We're sure you'll agree that the additional space around
the image makes the text easier to read and the overall page more
attractive.

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="USING-HTML-CH05-SECT-2.6.13">The ismap and usemap attributes</A></h4>

<p class=para>

The ismap and usemap attributes for the
<tt>&lt;img&gt;</TT> tag tell the browser that the image is a
special mouse-selectable visual map of one or more hyperlinks,
commonly known as an <i class=emphasis>image map</I>. The
<tt class=literal>ismap </tt>style of image maps is supported by all the
graphical browsers. It may only be specified within an
<tt>&lt;a&gt;</TT> tag hyperlink. <i class=emphasis>[<tt>&lt;a&gt;</TT>, <a href="ch06_03.htm">6.3.1</A>]</I>

<p class=para>
For example:

<div class=screen>
<p>
<pre>
<tt>&lt;a href="/cgi-bin/images/map2"&gt;</TT> 
  <tt>&lt;img src="pics/map2.gif" ismap&gt;</TT>
<tt>&lt;/a&gt;</TT>
</PRE>
</DIV>

<p class=para>
The browser automatically sends the x,y position of
the mouse (relative to the upper-left corner of the image) to the
server when the user clicks somewhere on the <tt class=literal>ismap</tt>
image. Special server software, the
<i class=emphasis>/cgi-bin/images/map2</I> program in the example, may
then use those coordinates to determine a response.

<p class=para>
The usemap attribute is supported
by Netscape and Internet Explorer, version 2 or later. It's a
client-side image map mechanism that effectively eliminates
server-side processing of the mouse coordinates and its incumbant
network delays and problems. Using special <tt>&lt;map&gt;</TT> and
<tt>&lt;area&gt;</TT> extension tags, HTML
authors provide a map of
coordinates for the hyperlink-sensitive regions in the
<tt class=literal>usemap</tt> image along with related hyperlink
URLs. The value of the usemap attribute is a URL
that points to that special <tt>&lt;map&gt;</TT> section. And the
extended browser on the user's computer translates the
coordinates of a click of the mouse on the image into some action,
including loading and displaying another document. <i class=emphasis>[<tt>&lt;map&gt;</TT> <a href="ch06_05.htm">6.5.3</A>]</I> <i class=emphasis>[<tt>&lt;area&gt;</TT> <a href="ch06_05.htm">6.5.4</A>]</I>

<p class=para>
For example, the following source specially encodes the 100-pixel wide
by 100-pixel tall<tt class=literal> map2.gif</tt> image into four
segments, each of which, if clicked by the user, links to a different
document. Also notice we've included, validly, the
<tt class=literal>ismap</tt> image map processing capability in the
example <tt>&lt;img&gt;</TT> tag so that users of other,
non-<tt class=literal>usemap</tt>-capable browsers have access to the
alternative, server-side mechanism to process the image map:

<div class=screen>
<p>
<pre>
<tt>&lt;a href="/cgi-bin/images/map2"&gt;</TT>
  <tt>&lt;img src="pics/map2.gif" ismap usemap="#map2"&gt;</TT>
<tt>&lt;/a&gt;</TT>
... 
<tt>&lt;map name="map2"&gt;</TT>
  <tt>&lt;area coords="0,0,49,49" href="link1.html"&gt;</TT> 
  <tt>&lt;area coords="50,0,99,49" href="link2.html"&gt;</TT> 
  <tt>&lt;area coords="0,50,49,99" href="link3.html"&gt;</TT> 
  <tt>&lt;area coords="50,50,99,99" href="link4.html"&gt;</TT> 
<tt>&lt;/map&gt;</TT>
</PRE>
</DIV>

<p class=para>
Geographical maps make excellent <tt class=literal>ismap</tt> and
<tt class=literal>usemap</tt> examples: Browsing a nationwide
company's pages, for instance, the user might click their home
town on a map to get the addresses and phone numbers for nearby retail
outlets. The advantage of the <tt class=literal>usemap</tt> client-side
image map processing is that it does not require a server or special
server software and so, unlike the <tt class=literal>ismap</tt> mechanism,
can be used in non-Web (networkless) environments, such as with local
files or on CD-ROM.

<p class=para>
Please read our more complete discussion of anchors and links,
including image maps within links, in <a href="ch06_01.htm">Chapter 6, <i>Links and Webs</i></A>.

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="USING-HTML-CH05-SECT-2.6.14">Combining <tt>&lt;img&gt;</TT> attributes</A></h4>

<p class=para>
You may combine any of the various standard and extension attributes
for images where and when they make sense. The order for inclusion of
multiple attributes in the <tt>&lt;img&gt;</TT> tag is not
important, either. Just be careful not to use redundant attributes or
you won't be able to predict the outcome.

</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="USING-HTML-CH05-SECT-2.7">Internet Explorer <tt>&lt;img&gt;</TT> Attributes for Video</A></h3>

<p class=para>
<a name="CH05.VIDEO1"></A><a name="CH05.VIDEO2"></A><a name="CH05.VIDEO3"></A><a name="CH05.VIDEO4"></A>
Most of the extensions to HTML that Internet
Explorer supports, including the various <tt>&lt;img&gt;</TT> tag
attributes, were originally implemented and introduced to the Web by
Netscape. However, the special controls, dynsrc, loop, and start attribute extensions for the
<tt>&lt;img&gt;</TT> tag currently are unique to Internet
Explorer. They let you embed an inline movie into the body content,
just like an image.
<p class=para>
It is a sorely needed innovation; movies otherwise require a separate
 helper application which the user must have installed and which
 displays the movie in a separate window (see <a href="ch05_07.htm">5.7</A>). We, like many other Web
 aficionados, prefer integrated content.

<p class=para>
However, the Internet Explorer movie extensions currently are very
limited. They are not supported by any other browser and can only be
used with Audio Video Interleave (AVI) formatted
movie files, since that's the player format built into Internet
Explorer and enabled through Windows 95. Moreover, recent innovations
in browser technology, <i class=emphasis>applets</I> in particular, may
make Internet Explorer's approach of extending the already
overloaded <tt>&lt;img&gt;</TT> tag obsolete. See <a href="ch05_06.htm">5.6</A> for details.

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="USING-HTML-CH05-SECT-2.7.1">The dynsrc attribute</A></h4>

<p class=para>
You use the dynsrc attribute
extension in the <tt>&lt;img&gt;</TT> tag to reference an
AVI movie for inline display by Internet
Explorer. Its required value is the URL of the
movie file enclosed in quotes. For example, this is the tag and
attribute for an AVI movie file entitled
<i class=emphasis>intro.avi</I>:

<div class=screen>
<p>
<pre>
<tt>&lt;img dynsrc="movies/intro.avi"&gt;</TT>
</PRE>
</DIV>

<p class=para>
The browser sets aside a video viewport in the HTML
display window and plays the movie, with audio if included in the
clip, similar to an inline image: in line with current body content
and according to the dimension of the video frame. And, like common
images, the <tt>&lt;dynsrc&gt;</TT> referenced movie file gets
displayed immediately after download from the server. You may change
those defaults and add some user controls with other attributes, as
described below.

<p class=para>
Because all other browsers currently ignore the special Internet
Explorer attributes for movies, they may become confused by an
<tt>&lt;img&gt;</TT> tag that does not contain the otherwise
required <tt>&lt;src&gt;</TT> attribute and an image
URL. We recommend that you include the
<tt>&lt;src&gt;</TT> attribute and a valid image file
URL in all <tt>&lt;img&gt;</TT> tags, including
those that reference a movie for Internet Explorer users. The other
browsers display the still image in place of the movie; Internet
Explorer does the reverse and plays the movie, but does not display
the image. Note that the order of attributes does not matter.

<p class=para>
For example:

<div class=screen>
<p>
<pre>
<tt>&lt;img dynsrc="movies/intro.avi" src="pics/mvstill.gif"&gt;</TT>
</PRE>
</DIV>

<p class=para>
Internet Explorer loads and plays the AVI movie
<i class=emphasis>intro.avi</I>; all other graphical browsers will load
and display the <i class=emphasis>mvstill.gif</I> image instead.

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="USING-HTML-CH05-SECT-2.7.2">The controls attribute</A></h4>

<p class=para>
Normally, Internet Explorer plays a movie inside a framed viewport
once, without any user controls. To add controls the user may
manipulate with the mouse, include the
controls
attribute, without a value, in the respective <tt>&lt;img&gt;</TT>
tag. VCR-like play, fast-forward, reverse, stop,
and pause controls are provided to the user; if the clip includes a
sound track, an audio volume is provided as well.

<p class=para>
For example: 

<div class=screen>
<p>
<pre>
<tt>&lt;img dynsrc="movies/intro.avi" controls src="pics/mvstill.gif"&gt;</TT>
</PRE>
</DIV>

<p class=para>
adds the various playback controls to the video window of the
<i class=emphasis>intro.avi</I> movie clip, as shown in <a href="#USING-HTML-CH05-FIG-17">Figure 5-17</A>.

<div class=figure>
<h4 class=figure><a class="TITLE" name="USING-HTML-CH05-FIG-17">Figure 5-17: The controls attribute adds movie playback controls to the video playback frame</A></h4>


<p>
<img align=middle src="figs/uhtml0517.gif" alt="[Graphic: Figure 5-17]" width=500 height=266>

</DIV>

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="USING-HTML-CH05-SECT-2.7.3">The loop attribute</A></h4>

<p class=para>
Internet Explorer normally plays a movie clip from beginning to end
once after download. The loop attribute for the
movie <tt>&lt;img&gt;</TT> tag lets you have the clip play
repeatedly an integer number of times set by the attribute's
value, or forever if the value is <tt class=literal>infinite</tt>. Of
course, the user can cut the loop short by pressing the stop button,
if given controls (see above), or by moving on to another document.

<p class=para>
The following <i class=emphasis>intro.avi</I> movie clip will play from
beginning to end, then restart at the beginning and play through to
the end nine more times:

<div class=screen>
<p>
<pre>
<tt>&lt;img dynsrc="movies/intro.avi" loop=10 src="pics/mvstill.gif"&gt;</TT>
</PRE>
</DIV>

<p class=para>
Whereas the following movie will play over and over again, incessantly:

<div class=screen>
<p>
<pre>
<tt>&lt;img dynsrc="movies/intro.avi" loop=infinite src="pics/mvstill.gif"&gt;</TT>
</PRE>
</DIV>

<p class=para>
Looping movies aren't necessarily meant to annoy. Some special
effects animations, for instance, are a sequence of repeated frames or
segments. Rather than string the redundant segments into one, long
movie that extends its download time, simply loop the single, compact
frame or segment.

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="USING-HTML-CH05-SECT-2.7.4">The start attribute</A></h4>

<p class=para>
 
 
Normally, an Internet Explorer movie clip starts playing as soon as
  it's downloaded. You can modify that behavior with the start attribute in the movie's
  <tt>&lt;img&gt;</TT> tag. By setting its value to
  <tt class=literal>mouseover</tt>, you delay playback until the user
  passes the mouse pointer over the movie viewport. The other valid
  start attribute value,
  <tt class=literal>fileopen</tt>, is the default: start playback just
  after download. It is included because both values may be combined
  in the start attribute to cause
  the movie to automatically playback once after download, and then
  whenever the user passes the mouse over its viewport. Add a
  value-separating comma, with no intervening spaces, or else enclose
  them in quotes, when combining the start
  attribute values.

<p class=para>
For example, our by-now-infamous <i class=emphasis>intro.avi</I> movie
will play once when its host HTML document is
loaded by the user, and whenever he or she passes the mouse over the
movie's viewport:

<div class=screen>
<p>
<pre>
<tt>&lt;img dynsrc="movies/intro.avi" start="fileopen,mouseover"
     src="pics/mvstill.gif"&gt;</TT>
</PRE>
</DIV>

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="USING-HTML-CH05-SECT-2.7.5">Combining movie <tt>&lt;img&gt;</TT> attributes</A></h4>

<p class=para>
Treat Internet Explorer inline movies as you would any image, mixing
and matching the various movie-specific, as well as the standard and
extended <tt>&lt;img&gt;</TT> tag attributes and values supported by
the browser. For example, you might align the movie (or its image
alternate, if displayed by another browser) to the right of the
browser window:

<div class=screen>
<p>
<pre>
<tt>&lt;img dynsrc="movies/intro.avi" src="pics/mvstill.gif" align=right&gt;</TT>
</PRE>
</DIV>

<p class=para>
Combining attributes to achieve a special effect is good. We also
recommend you combine attributes to give control to the user, when
appropriate. For instance, if you set up a movie to loop incessantly,
you should also include the controls attribute so the user can stop the
movie without having to leave the HTML document.

<p class=para>
As we stated in <a href="#USING-HTML-CH05-SECT-2.7.4">5.2.7.4</A>, by
combining attributes you can also delay playback until the user passes
the mouse over its viewport. Magically, the movie comes alive and plays
continuously:

<div class=screen>
<p>
<pre>
<tt>&lt;img dynsrc="movies/magic.avi" start=mouseover
     loop=infinite src="pics/magic.gif"&gt;</TT>
</PRE>
</DIV>

</DIV>

</DIV>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch05_01.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src="gifs/txthome.gif" alt="Home" border=0></a></td>
<td width=172 align=right valign=top><a href="ch05_03.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Using Horizontal Rules</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td>
<td width=172 align=right valign=top>Document Colors and Background Images</td>
</tr>
</table>

<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
</DIV>

</BODY>
</HTML>
