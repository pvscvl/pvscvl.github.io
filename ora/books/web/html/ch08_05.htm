<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 8] 8.5 Creating Effective Forms</TITLE>
<meta name="author" content="Chuck Musciano and Bill Kennedy">
<meta name="date" content="Mon Mar 17 09:01:04 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="HTML">
<meta name="title" content="HTML: The Definitive Guide">
<!-- JavaScript: pathcont.js -->
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><img src="gifs/smbanner.gif" alt="HTML: The Definitive Guide"></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch08_04.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b>Chapter 8</b></td>
<td width=172 align=right valign=top><a href="ch08_06.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>
<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="USING-HTML-CH08-SECT-5">8.5 Creating Effective Forms</A></h2>

<p class=para>
Properly done, a form can provide an effective user interface for your
readers. With some server-side programming tricks, you can use forms
to personalize the HTML documents you present to
readers, and thereby significantly increase the value of your pages on
the Web.

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="USING-HTML-CH08-SECT-5.1">Browser Constraints</A></h3>

<p class=para>
<a name="CH08.BROWSERS"></A>As with other HTML elements, browsers have
varying abilities to display and manage forms.

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="USING-HTML-CH08-SECT-5.1.1">Browser limitations</A></h4>

<p class=para>
Unlike other graphical-user interfaces, browser displays are
static. They have little or no capability for real-time data
validation, for example, or to update the values in a form based upon
user input, giving users help and guidance. Hence, poorly designed Web
forms can be difficult to fill out.

<p class=para>
Make sure your forms assist the user as much as possible in getting
their input correct. Adjust the size of text-input fields to give
clues on acceptable input; five- (or the new nine-) character-wide
zipcode fields, for instance. Use checkboxes, radio buttons, and
selection lists whenever possible to narrow the list of choices the
user must make.

<p class=para>
Make sure you also adequately document your forms. Explain how to fill
them out, supplying examples for each field. Provide appropriate
hyperlinks to documentation that describes each field, if necessary.

<p class=para>
When the form is submitted, make sure the server-side application
exhaustively validates the user's data. If an error is
discovered, present the user with intelligent error messages and
possible corrections. One of the most frustrating aspects of filling
out forms is having to start over from scratch whenever the server
discovers an error. To alleviate this ugly redundancy and burden on
your readers, consider spending extra time and resources on the server
side that returns the user's completed form with the erroneous
fields flagged for changes.

<p class=para>
While all of these suggestions require significant effort on your
part, they will pay off many times over by making life easier for your
users. Remember, you'll write the HTML for
the form just once, but it may be used thousands or even millions of
times by users.

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="USING-HTML-CH08-SECT-5.1.2">Handling limited displays</A></h4>

<p class=para>
The most common client on the Web is a PC running Windows on a 640x480
pixel display. The actual document-viewing window typically is around
600x400 pixels; roughly 75 readable characters wide and 30 to 50 lines
tall. You should design your forms (and all your documents) so
they are effective when viewed through a window of this size.

<p class=para>
You should structure your form to naturally scroll into two
or three logical sections. The user can fill out the first section,
page down; fill out the second section, page down; and so forth.

<p class=para>
You should also avoid wide input elements. It is difficult enough to
deal with a scrolling-text field or text area without having to scroll
the document itself horizontally to see additional portions of the
input element.

</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="USING-HTML-CH08-SECT-5.2">User Interface Considerations</A></h3>

<p class=para>
<a name="CH08.USER"></A><a name="CH08.USER2"></A>When you elect to create a form, you immediately assume another role:
that of a user-interface designer. While a complete discussion of user
interface design is beyond the scope of this book, it helps to
understand a few basic design rules to create effective, attractive
forms.

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="USING-HTML-CH08-SECT-5.2.1">Basic user-interface design</A></h4>

<p class=para>
Any user interface is perceived at several levels
simultaneously. Forms are no different. At the lowest level, your
brain recognizes shapes within the document, attempting to categorize
the elements of the form. At a higher level, you are reading the text
guides and prompts, trying to determine what input is required of
you. At the highest level, you are seeking to accomplish a goal with
the interface as your tool.

<p class=para>
A good form accommodates all three of these perceptive needs. Input
elements should be organized in logical groups so that your brain can
process the form layout in chunks of related fields. Consistent,
well-written prompts and supporting text assist and lead the user to
enter the correct information. Text prompts also remind users of the
task at hand and reinforce the form's goal.

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="USING-HTML-CH08-SECT-5.2.2">Creating forms that flow</A></h4>

<p class=para>
Users process forms in a predictable order, one element after another,
seeking to find the next element as they finish the previous one. To
accommodate this searching process, you should design your forms so
that one field leads naturally to another, and that related fields are
grouped together. Similarly, groups should lead naturally to one
another and should be formatted in a consistent manner.

<p class=para>
Simply stringing a number of fields together does not constitute an
effective form. You must put yourself in the place of your users,
who are using the form for the first time. Test your form on
unsuspecting friends and colleagues before you release it on the
general public. Is it easy to determine the purpose of the form? Where
do you start filling things out? Can the user find a button to push to
submit the form? Is there an opportunity to confirm decisions? Do
readers understand what is expected of them for each field?

<p class=para>
Your forms should lead the user naturally through the process of
supplying the necessary data for the application. You wouldn't
ask for a street address before asking for the user's name;
other rules may dictate the ordering of other groups of input
elements. To see if your form really works, make sure you view it on
several browsers and have several people fill it out and comment on
its effectiveness.

</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="USING-HTML-CH08-SECT-5.3">Good Form, Old Chap</A></h3>

<p class=para>
At first glance, the basic rule of
HTML--content, not style-- seems in
direct opposition to the basic rule of good interface
design--precise, consistent layout. Even so, it is possible to
use some HTML elements to greatly improve the
layout and readability of most forms.

<p class=para>
Traditional page layout uses a grid of columns to align common
elements within a page. The resulting implied vertical and horizontal
``edges'' of adjacent elements give a sense of order and
organization to the page, and makes it easy for the eye to
scan and follow.

<p class=para>
HTML makes it hard, but you can accomplish the same
sort of layout for your forms. For example, you can group related
elements and separate groups with empty paragraphs or horizontal
rules.

<p class=para>
Vertical alignment is more difficult but not impossible. In general,
forms are easier to use if you arrange the input elements vertically
and aligned to a common margin. One popular form layout keeps the left
edge of the input elements aligned, with the element labels
immediately to the left of the elements. This is done by using
preformatted text to insert a specific number of spaces in front of
each element. For example, here is our previous form example, with the
labels realigned using the <tt>&lt;pre&gt;</TT> tag:

<p class=para>
<div class=screen>
<p>
<pre>
&lt;form method=POST action="http://www.kumquat.com/demo"&gt;
  &lt;pre&gt;
      Name: &lt;input type=text name=name size=32 maxlength=80&gt;
       Sex: &lt;input type=radio name=sex value="M"&gt; Male 
            &lt;input type=radio name=sex value="F"&gt; Female
    Income: &lt;select name=income size=1&gt;
              &lt;option&gt;Under $25,000
              &lt;option&gt;$25,001 to $50,000
              &lt;option&gt;$50,001 and higher
            &lt;/select&gt;
  &lt;input type=submit value="Submit Query"&gt;
  &lt;/pre&gt;
&lt;/form&gt;
</PRE>
</DIV>

<p class=para>
Notice in the resulting rendered form shown in 
<a href="#USING-HTML-CH08-FIG-5">Figure 8-5</A> that the
<tt>&lt;pre&gt;</TT> tag has preserved extra spaces and blank lines,
ensuring the elements will be properly aligned. The only drawback to
this technique is that the text of the labels is in a monospace
typeface.

<div class=figure>
<h4 class=figure><a class="TITLE" name="USING-HTML-CH08-FIG-5">Figure 8-5: Using a consistent vertical margin to align form elements</A></h4>


<p>
<img align=middle src="figs/uhtml0805.gif" alt="[Graphic: Figure 8-5]" width=500 height=289>

</DIV>

<p class=para>
You may find other consistent ways to lay out your forms. The key is
to find a useful layout style that works well across most browsers and
stick with it. Even though HTML has limited tools
to control layout and positioning, take advantage of what is available
to make your forms more attractive and easier to use.

</DIV>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch08_04.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src="gifs/txthome.gif" alt="Home" border=0></a></td>
<td width=172 align=right valign=top><a href="ch08_06.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Multiple Choice Elements</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td>
<td width=172 align=right valign=top>Forms Programming</td>
</tr>
</table>

<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
</DIV>

</BODY>
</HTML>
