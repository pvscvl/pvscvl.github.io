<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 12] 12.5 Tricks with Tables</TITLE>
<meta name="author" content="Chuck Musciano and Bill Kennedy">
<meta name="date" content="Mon Mar 17 09:03:58 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="HTML">
<meta name="title" content="HTML: The Definitive Guide">
<!-- JavaScript: pathcont.js -->
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><img src="gifs/smbanner.gif" alt="HTML: The Definitive Guide"></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch12_04.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b>Chapter 12</b></td>
<td width=172 align=right valign=top><a href="ch12_06.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>
<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="USING-HTML-CH12-SECT-5">12.5 Tricks with Tables</A></h2>

<p class=para>
<a name="CH12.TABLES"></A>Enough with the cheap tricks. On to some really good ones: tricks
with the HTML <tt>&lt;table&gt;</TT> tag and
attributes that add some attractive features to your
documents.

<p class=para>
By design, HTML tables let authors create
appealing, accessible tables of information. But the
HTML table tags also can be exploited to create
innovative, attractive page designs that are otherwise unobtainable in
standard HTML.

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="USING-HTML-CH12-SECT-5.1">Multicolumn Pages</A></h3>

<p class=para>
<a name="CH12.MULTICOLUMN1"></A><a name="CH12.MULTICOLUMN2"></A><a name="CH12.MULTICOLUMN3"></A>One popular page-layout element is completely missing from
HTML: multiple columns of text. This is easily
remedied by placing your document content inside a table of one row
with two or more columns. Table-enabled browsers make the row as tall
as the tallest column of text.

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="USING-HTML-CH12-SECT-5.1.1">Basic multicolumn layout</A></h4>

<p class=para>
The basic two-column layout has a single table row with three data
cells: one each for the columns of text and an intervening empty cell
to more attractively separate the two columns. (We've added a
large cellspacing attribute value
to create that intervening space between the columns, but that works
only with Netscape.)

<p class=para>
The following example table,

<div class=screen>
<p>
<pre>
&lt;table border=0 cellspacing=7&gt;
  &lt;tr&gt;
    &lt;td&gt;Copy for column 1...
    &lt;td&gt;&lt;br&gt;
    &lt;td&gt;Copy for column 2...
 &lt;/table&gt;
</PRE>
</DIV>

<p class=para>
is an excellent template for a simple two-column text layout 
(see <a href="#USING-HTML-CH12-FIG-2">Figure 12-2</A>)

<div class=figure>
<h4 class=figure><a class="TITLE" name="USING-HTML-CH12-FIG-2">Figure 12-2: A simple two-column layout</A></h4>


<p>
<img align=middle src="figs/uhtml1202.gif" alt="[Graphic: Figure 12-2]" width=500 height=314>

</DIV>

<p class=para>
The one thing the browsers won't do is automatically balance the
text in the columns, resulting in adjacent columns of approximately
the same length. You'll have to experiment with your document,
manually shifting text from one column to another until you achieve a
nicely balanced page.

<p class=para>
Keep in mind, though, that users may resize their display windows and
the columns' contents will shift accordingly. So, don't spend a
lot of time getting the last sentences of each column to line up
exactly; they're bound to be skewed in other browser window
widths.

<p class=para>
Of course, you can easily convert the example layout to three or more
columns by dividing the text among more cells in the table. But keep
in mind that pages with more than three columns may prove difficult to
read on small displays where the actual column width might be quite
small.

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="USING-HTML-CH12-SECT-5.1.2">Straddle Heads</A></h4>

<p class=para>
The basic multicolumn format is just the start. By adding cells that
span across the columns, you create headlines. Similarly, you can make
figures span across more than one column: simply add the colspan attribute to the cell containing the
headline or figure. <a href="#USING-HTML-CH12-FIG-3">Figure 12-3</A> shows an
attractive three-column layout with straddle heads and a spanning
figure, created from the following HTML source with
table tags:

<div class=figure>
<h4 class=figure><a class="TITLE" name="USING-HTML-CH12-FIG-3">Figure 12-3: Fancy straddle heads and spanning figures with HTML table tags</A></h4>


<p>
<img align=middle src="figs/uhtml1203.gif" alt="[Graphic: Figure 12-3]" width=500 height=418>

</DIV>

<div class=screen>
<p>
<pre>
&lt;table border=0 cellspacing=7&gt;
  &lt;tr&gt;
    &lt;th colspan=5&gt;&lt;h2&gt;The History of the Kumquat&lt;/h2&gt;
  &lt;tr valign=top&gt;
    &lt;td rowspan=2&gt;Copy for column 1...
    &lt;td rowspan=2 width=24&gt;&lt;br&gt;
    &lt;td &gt;Copy for column 2...
    &lt;td width=24&gt;&lt;br&gt;
    &lt;td &gt;Copy for column 3...
  &lt;tr&gt;
    &lt;td colspan=3 align=center&gt;&lt;img src="pics/fruit.gif"&gt;
    &lt;p&gt;
    &lt;i&gt;The Noble Fruit&lt;/i&gt;
&lt;/table&gt;
</PRE>
</DIV>

<p class=para>
To achieve this nice layout, we used the colspan attribute on the cell in the first
row to span all five table columns (three with copy and the two
intercolumn spaces). We use the rowspan attribute on the first column and
its adjacent column spacer to extend the columns down beside the
figure. The figure's cell has a colspan attribute so that the contents span
the other two columns and intervening spaces.

</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="USING-HTML-CH12-SECT-5.2">Side Heads</A></h3>

<p class=para>
<a name="CH12.SIDE1"></A><a name="CH12.SIDE2"></A><a name="CH12.SIDE3"></A>The only text-heading features available in HTML
are the <tt>&lt;h1&gt;</TT> through <tt>&lt;h6&gt;</TT>
tags. These tags are always embedded in the text flow, separating
adjacent paragraphs of text. Through multiple columns, you can achieve
an alternative style that places headings into a separate side column,
running vertically alongside the document text.

<p class=para>
These so-called side heads are a bit more difficult to achieve with
Mosaic than with Netscape or Internet Explorer because you can't
control cell widths in Mosaic. Consequently, although you can make
side heads with Mosaic, they aren't as attractive or as
controllable as with Netscape or Internet Explorer.

<p class=para>
<a href="#USING-HTML-CH12-FIG-4">Figure 12-4</A> shows you a fairly fancy pair
of side heads, the result of the following bit of source
HTML table code:

<div class=figure>
<h4 class=figure><a class="TITLE" name="USING-HTML-CH12-FIG-4">Figure 12-4: Table tags created these side heads</A></h4>


<p>
<img align=middle src="figs/uhtml1204.gif" alt="[Graphic: Figure 12-4]" width=500 height=150>

</DIV>

<div class=screen>
<p>
<pre>
&lt;table&gt;
  &lt;tr&gt;
  &lt;th width="30%" align=right&gt;
    &lt;h3&gt;Section 1&lt;/h3&gt;
  &lt;td&gt;
  &lt;td&gt;
    Copy for section 1 goes on and on a bit 
    so that it will take up more than one line in the
    table cell window...   
  &lt;tr&gt;
  &lt;th align=right&gt;
    &lt;h3&gt;Section 2&lt;/h3&gt;
  &lt;td&gt;
  &lt;td&gt;
    Copy for section 2 goes on and on a bit 
    so that it will take up more than one line in the
    table cell window...
&lt;/table&gt;
</PRE>
</DIV>

<p class=para>
Notice how we create reasonably attractive side heads set off from the
left margin of the Netscape browser window by adjusting the first
header cell's width and right-justifying the cell
contents. Mosaic ignores the width attribute, so you'll find it
renders the example with a much thinner first column, but otherwise
the side heads are intact.

<p class=para>
Just as in our multicolumn layout, the example side-head layout uses
an empty column to create a space between the narrow left column
containing the heading and the wider right column containing the text
associated with that heading. For Netscape and Internet Explorer, you
may tune the width of the heading column. It's best to specify
the width as a percentage of the table width, rather than explicitly
in numbers of pixels to make sure that the heading column scales to fit
both wide and narrow display windows.

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="USING-HTML-CH12-SECT-5.2.1">When tables aren't implemented</A></h4>

<p class=para>
One of the dangers of being overly dependent on tables is that your
documents are usually unreadable when viewed with browsers that
don't support tables. In the case of side heads, though, your
document will come out just fine on a ``table-challenged''
browser.

<p class=para>
Most browsers follow one of the Internet's basic tenets: be
liberal in what you accept and strict in what you create. This
usually means the browser will ignore tags that don't make
sense, including all of the markup that creates a table.

<p class=para>
In the case of our side-head layout, the browsers that can't do tables
ignore the table tags and only see this part of the document:

<p class=para>

<div class=screen>
<p>
<pre>
&lt;h3&gt;Section 1&lt;/h3&gt;
  Copy for section 1 goes on and on a bit 
  so that it will take up more than one line in the
  table cell window...   
&lt;h3&gt;Section 2&lt;/h3&gt;
  Copy for section 2 goes on and on a bit 
  so that it will take up more than one line in the
  table cell window...
</PRE>
</DIV>


<p class=para>
Of course, this is a perfectly valid sequence of
HTML that generates a conventional document with
sections divided by <tt>&lt;h3&gt;</TT> headers. Your document will
look fine, regardless of the browser, table-capable or not.

</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="USING-HTML-CH12-SECT-5.3">Better Forms Layout</A></h3>

<p class=para>
<a name="CH12.LAYOUT1"></A><a name="CH12.LAYOUT2"></A>Of all the features in HTML, it's forms that cry
out for better layout control. Unlike other structured elements in
HTML, forms look best when rendered in a fixed
layout with precise margins and vertical alignment of
elements. However, except for carefully planned <tt>&lt;pre&gt;</TT>
formatted form segments, the common language just doesn't give
us any special tools to better control forms layout.

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="USING-HTML-CH12-SECT-5.3.1">Basic form layout</A></h4>

<p class=para>
Your forms will almost always look better and be easier for your
readers to follow if you use a table to structure and align the
form's elements. For example, you might use a vertical alignment
to your forms, with field labels to the left and their respective form
elements aligned to an adjacent vertical margin on the
right. Don't try that with just standard
HTML.

<p class=para>
Rather, prepare a form that contains a two-column table. The following
HTML source does just that, and it works with both
Netscape (<a href="#USING-HTML-CH12-FIG-5">Figure 12-5</A>) and Mosaic to nicely
format the enclosed form:

<div class=figure>
<h4 class=figure><a class="TITLE" name="USING-HTML-CH12-FIG-5">Figure 12-5: Nicely align your forms with tables</A></h4>


<p>
<img align=middle src="figs/uhtml1205.gif" alt="[Graphic: Figure 12-5]" width=500 height=145>

</DIV>

<div class=screen>
<p>
<pre>
&lt;form method=post action="http:/cgi-bin/process"&gt;
  &lt;table&gt;
    &lt;tr&gt;
      &lt;th align=right&gt;Name: 
      &lt;td&gt;&lt;input type=text size=32&gt;
    &lt;tr&gt;
      &lt;th align=right&gt;Address: 
      &lt;td&gt;&lt;input type=text size=32&gt;
    &lt;tr&gt;
      &lt;th align=right&gt;Phone: 
      &lt;td&gt;&lt;input type=text size=12&gt;
    &lt;tr&gt;
      &lt;td colspan=2 align=center&gt;
      &lt;input type=submit value="Register"&gt;
  &lt;/table&gt;
&lt;/form&gt;
</PRE>
</DIV>

<p class=para>
Of course, more complex form layouts can be managed with tables. We
recommend you first sketch the form layout on paper and then
plan how various combinations of table elements, including row- and
column-straddled table cells might be used to effect the layout.

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="USING-HTML-CH12-SECT-5.3.2">Building forms with nested tables</A></h4>

<p class=para>
As we mentioned earlier, you may place a table inside the cell of
another table. While this alone can lead to some elaborate table
designs, nested tables also are useful for managing a subset of
form elements within the larger table containing the entire form. The
best application for using a nested table in a form is for laying out
checkboxes and radio buttons.

<p class=para>
For example, insert the following row containing a table into the form
table in the previous example. It creates a checkbox with four
choices:

<p class=para>

<div class=screen>
<p>
<pre>
&lt;tr&gt;
  &lt;th align=right valign=top&gt;Preferences: 
  &lt;td&gt;
  &lt;table&gt;
    &lt;tr&gt;
    &lt;td&gt;&lt;input type=checkbox name=pref&gt;Lemons
    &lt;td&gt;&lt;input type=checkbox name=pref&gt;Limes
    &lt;tr&gt;
    &lt;td&gt;&lt;input type=checkbox name=pref&gt;Oranges
    &lt;td&gt;&lt;input type=checkbox name=pref&gt;Kumquats
  &lt;/table&gt;
</PRE>
</DIV>


<p class=para>
<a href="#USING-HTML-CH12-FIG-6">Figure 12-6</A> shows you how this nested table
attractively formats the checkboxes, which browsers would
otherwise render on a single line and not well aligned.

<div class=figure>
<h4 class=figure><a class="TITLE" name="USING-HTML-CH12-FIG-6">Figure 12-6: Nesting tables to format elements of a form</A></h4>


<p>
<img align=middle src="figs/uhtml1206.gif" alt="[Graphic: Figure 12-6]" width=500 height=195>

</DIV>

</DIV>

</DIV>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch12_04.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src="gifs/txthome.gif" alt="Home" border=0></a></td>
<td width=172 align=right valign=top><a href="ch12_06.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Custom Bullets</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td>
<td width=172 align=right valign=top>Transparent Images</td>
</tr>
</table>

<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
</DIV>

</BODY>
</HTML>
