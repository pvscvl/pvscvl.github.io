<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 7] Advanced Form Applications</TITLE>
<meta name="author" content="Shishir Gundavaram">
<meta name="date" content="Mon Mar 17 13:30:44 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="cgi programming">
<meta name="title" content="CGI Programming on the World Wide Web">
<!-- JavaScript: pathcont.js -->

</HEAD>
<body bgcolor="#FFFFFF" text="#000000">

<div class=htmlnav>
<h1><img src="gifs/smbanner.gif" alt="CGI Programming on the World Wide Web"></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch06_06.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b>Chapter 7</b></td>
<td width=172 align=right valign=top><a href="ch07_02.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>
<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
<hr align=left width=515>
</DIV>
<h1 class=chapter><a class="TITLE" name="CGI-CHP-7">Advanced Form Applications</A></H1>

<div class=htmltoc>

<p>
<b>Contents:</b><br>
Guestbook<br>
<a href="ch07_02.htm">Survey/Poll and Pie Graphs</A><br>
<a href="ch07_03.htm">Quiz/Test Form Application</A><br>
<a href="ch07_04.htm">Security</A><br>

</DIV>

<p class=para>
Four different CGI
applications are presented in this chapter, all of which use queries
and form information to produce some interesting documents with
hypertext and graphics. These applications include:

<p>
<ul class=itemizedlist>
<li class=listitem><i class=emphasis>Guestbook</I>: A
form interface for users to leave comments on a particular Web page
for other people to see. The concepts behind the guestbook are very
simple: Present a form to the user to fill out, process the form
information, and store it in a file.

<p>
<li class=listitem><i class=emphasis>Poll or a Survey</I>: A CGI program
that allows you to solicit opinions from users and present them
with a dynamically created pie graph illustrating the up-to-date
results. This application involves displaying a form and manipulating
and storing the form data into a format that we can read easily
and quickly at a later time. When the user elects to see the current
results, we simply read in all of the data and graph it.

<p>
<li class=listitem><i class=emphasis>Quiz/Test</I>: A unique interface
that shows you how to "extend" HTML by adding
new tags! This CGI application reads the specified data file consisting
of tags to create quizzes (as well as regular HTML),
formats it to HTML, and sends it to the browser.
It will also correct the quiz once the user completes it.

<p>
</UL>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="CGI-CHP-7-SECT-1">7.1 Guestbook</A></h2>

<p class=para>
One of the most common
applications on the Web is a guestbook. It is simply a form that
allows visitors to enter some information about themselves. This
information is placed in a file for everyone to see. Here are the
steps that need to be taken to create a guestbook:

<p>
<ul class=itemizedlist>
<li class=listitem>Display a form with such fields as
name, email address, and comments

<p>
<li class=listitem>Write a CGI program to decode the form

<p>
<li class=listitem>Place the information in a file

<p>
</UL>
<p class=para>
The program begins as follows:

<div class=screen>
<p>
<pre>
#!/usr/local/bin/perl
$webmaster = "shishir\@bu\.edu";
$method = $ENV{'REQUEST_METHOD'};
$script = $ENV{'SCRIPT_NAME'};
$query  = $ENV{'QUERY_STRING'};
$document_root = "/usr/local/bin/httpd_1.4.2/public";
$guest_file = "/guestbook.html";
$full_path = $document_root . $guest_file;
</PRE>
</DIV>

<p class=para>
In this initialization code,
the <i class=emphasis>document_root</I> variable is the directory
that contains your HTML files. Set this variable
to the value of <i class=emphasis>DocumentRoot</I>, as defined in
the <i class=emphasis>srm.conf</I> configuration file. The <i class=emphasis>guest_file</I>
variable contains the relative path to the guestbook file, relative
to <i class=emphasis>DocumentRoot</I>. And <i class=emphasis>full_path</I>
represents the full path to the guestbook file. It is very important
to separate the full path from the relative path, as you will see
in a moment.

<div class=screen>
<p>
<pre>
$exclusive_lock = 2;
$unlock = 8;
</PRE>
</DIV>

<p class=para>
The lock definitions are stored in the <i class=emphasis>exclusive_lock</I>
and <i class=emphasis>unlock</I> variables, respectively.

<div class=screen>
<p>
<pre>
if ($method eq "GET") {
    if ($query eq "add") {
</PRE>
</DIV>

<p class=para>
This program is coded slightly
differently from the programs that you have seen in this book. Let's
first see how this program can be accessed:

<p>
<ul class=itemizedlist>
<li class=listitem>A URL of <i class=emphasis>http://your.machine/cgi-bin/guestbook.pl?add</I>,
using the <tt class=literal>GET</tt> method, will present a form for
visitors to enter information.

<p>
<li class=listitem>A URL of <i class=emphasis>http://your.machine/cgi-bin/guestbook.pl</I>,
using the <tt class=literal>GET</tt> method, will display the actual
guestbook file. (The user can also see the guestbook file by opening
that file directly, e.g., by accessing <i class=emphasis>http://your.machine/guestbook.html</I>.)

<p>
<li class=listitem>When the form is submitted using the <tt class=literal>POST</tt>
method, this program decodes the information, and outputs a thank-you
message.

<p>
</UL>
<p class=para>
As you can see, this
program is very versatile. It handles all tasks of the guestbook.
You could just as easily split the program into its constituents:
an <tt class=literal>HTML</tt> form, a program to display the guestbook
(optional), and a program to decode the form information. There
are advantages either way. Combining all tasks into the single program
ensures that all components of the program are in one place, and
files cannot be accidently misplaced. On the other hand, separating
them ensures that each component of the guestbook is independent,
and can be modified without risking the integrity of the other components.
It is matter of personal preference.

<div class=screen>
<p>
<pre>
        $date_time = &amp;get_date_time();
</PRE>
</DIV>

<p class=para>
The <i class=emphasis>get_date_time</I> subroutine displays
the current date and time.

<div class=screen>
<p>
<pre>
        &amp;MIME_header ("text/html", "Shishir Gundavaram's Guestbook");
</PRE>
</DIV>

<p class=para>
The <i class=emphasis>MIME_header</I>
subroutine outputs a chosen <tt class=literal>MIME</tt> header, and
sets the title of the document to the user-specified argument. The
only reason for the subroutine is to make the program more compact.

<div class=screen>
<p>
<pre>
        print &lt;&lt;End_Of_Guestbook_Form;
This is a guestbook CGI script that allows people to leave some
information for others to see. Please enter all requested
information, &lt;B&gt;and&lt;/B&gt; if you have a WWW server, enter the address
so a hypertext link can be created. 
&lt;P&gt;
The current time is: $date_time
&lt;HR&gt;
</PRE>
</DIV>

<p class=para>
First, an introductory message is displayed, along with the
current date and time. (You cannot call subroutines from within
print "blocks," so the <i class=emphasis>get_date_time</I> subroutine
to get the date and time was called earlier and placed in the <i class=emphasis>date_time</I>
variable.).

<div class=screen>
<p>
<pre>
&lt;FORM METHOD="POST"&gt;
&lt;PRE&gt;
&lt;EM&gt;Full Name&lt;/EM&gt;:      &lt;INPUT TYPE="text" NAME="name" SIZE=40&gt;
&lt;EM&gt;Email Address&lt;/EM&gt;:  &lt;INPUT TYPE="text" NAME="from" SIZE=40&gt;
&lt;EM&gt;WWW Server&lt;/EM&gt;:     &lt;INPUT TYPE="text" NAME="www"  SIZE=40&gt;
&lt;/PRE&gt;
&lt;P&gt;
&lt;EM&gt;Please enter the information that you'd like to add:&lt;/EM&gt;&lt;BR&gt;
&lt;TEXTAREA ROWS=3 COLS=60 NAME="comments"&gt;&lt;/TEXTAREA&gt;&lt;P&gt;
&lt;INPUT TYPE="submit" VALUE="Add to Guestbook"&gt;
&lt;INPUT TYPE="reset"  VALUE="Clear Information"&gt;&lt;BR&gt;
&lt;P&gt;
&lt;/FORM&gt;
&lt;HR&gt;
End_Of_Guestbook_Form
</PRE>
</DIV>

<p class=para>
As you can see, there is no <tt class=literal>ACTION</tt>
attribute to the <tt>&lt;FORM&gt;</TT>
tag. By omitting the <tt class=literal>ACTION</tt> attribute, the browser
defaults to sending the completed form to the current CGI program.
The <tt class=literal>METHOD</tt> is set to <tt class=literal>POST</tt>-as
we'll see later, this is how the guestbook program will know the
form has been completed.

<p class=para>
The various elements that comprise
a form are output. The &lt;PRE&gt; tags align the text fields. <a href="#CGI-CHP-7-FIG-1">Figure 7.1</A> shows how a completed form is rendered by Netscape Navigator.

<div class=figure>
<h4 class=figure><a class="TITLE" name="CGI-CHP-7-FIG-1">Figure 7-1: Guestbook form</A></h4>


<p>
<img aligindex.htmln=middle webstripperattrwas="src" webstripperlinkwas="http://rtfm.vn.ua/prog/perl/orb/books/web/cgi/figs/cgi0701.gif" alt="[Graphic: Figure 7-1]">

</DIV>

<p class=para>
If there was no query specified, the guestbook
data file is displayed for output.

<div class=screen>
<p>
<pre>
    } else {
 if ( open(GUESTBOOK, "&lt;" . $full_path) ) {
            flock (GUESTBOOK, $exclusive_lock);
</PRE>
</DIV>

<p class=para>
The <i class=emphasis>full_path</I>
variable contains the full path to the guestbook file. The main
reason for storing the relative path and full path separately is
that hypertext anchors need the relative path, while the full path
is needed to open the file. Before you open any file, it is always
a good idea to check that the file can be opened.

<div class=screen>
<p>
<pre>
            &amp;MIME_header ("text/html", "Here is my guestbook!");
            
            while (&lt;GUESTBOOK&gt;) {
                print;
            }
                
            flock (GUESTBOOK, $unlock);
            close(GUESTBOOK);
</PRE>
</DIV>

<p class=para>
The loop iterates
through each line of the file and displays it to standard output.
<a href="#CGI-CHP-7-FIG-2">Figure 7.2</A> shows the output.

<div class=figure>
<h4 class=figure><a class="TITLE" name="CGI-CHP-7-FIG-2">Figure 7-2: Guestbook output</A></h4>


<p>
<img aligindex.htmln=middle webstripperattrwas="src" webstripperlinkwas="http://rtfm.vn.ua/prog/perl/orb/books/web/cgi/figs/cgi0702.gif" alt="[Graphic: Figure 7-2]">

</DIV>

<div class=screen>
<p>
<pre>
        } else {
            &amp;return_error (500, "Guestbook File Error",
                 	              "Cannot read from the guestbook file [$full_path].");
        }
    }
</PRE>
</DIV>

<p class=para>
If there were
any problems opening the file, an error message is sent to the client.
The <i class=emphasis>return_error</I> subroutine is the same as
the one presented in <a href="ch04_01.htm">Chapter 4, <i>Forms and CGI</i></A>.

<p class=para>
Remember the "add" form, in which the <tt>&lt;FORM&gt;</TT>
tag used a <tt class=literal>METHOD</tt> of <tt class=literal>POST</tt>?
Here's where the form is processed. If the request method is <tt class=literal>POST</tt>,
it means that the user filled out the form, and submitted it back
to this program.

<div class=screen>
<p>
<pre>
} elsif ($method eq "POST") {   
 if ( open (GUESTBOOK, "&gt;&gt;" . $full_path) ) {
        flock (GUESTBOOK, $exclusive_lock);
        $date_time = &amp;get_date_time();
        &amp;parse_form_data (*FORM);
</PRE>
</DIV>

<p class=para>
Now we add the
new entry to the guestbook. First, the program checks to see if
it can write to the guestbook file. If there are no errors, the
file is opened in append mode, and exclusively locked. The form
information is decoded and placed in the <tt class=literal>FORM</tt>
associative array. The <i class=emphasis>parse_form_data</I> subroutine
in this program is slightly different than the one we've previously
encountered in <a href="ch04_01.htm">Chapter 4, <i>Forms and CGI</i></A>; it does not
check for <tt class=literal>GET</tt> requests, since the program only
uses it for <tt class=literal>POST</tt>.

<div class=screen>
<p>
<pre>
        $FORM{'name'}  = "Anonymous User"       if !$FORM{'name'};
        $FORM{'from'}  = $ENV{'REMOTE_HOST'}    if !$FORM{'from'};
</PRE>
</DIV>

<p class=para>
Above is a construct
you might not have seen before. It is a simpler way of saying:

<div class=screen>
<p>
<pre>
if (!$FORM{'name'}) {
    $FORM{'name'} = "Anonymous User";
}
if (!$FORM{'from'}) {
    $FORM{'from'}=$ENV{'REMOTE_HOST'};
}
</PRE>
</DIV>

<p class=para>
In other words, the form variables <i class=emphasis>name</I>
and <i class=emphasis>from</I> are checked for valid information.
If the fields are empty, default information is stored.

<div class=screen>
<p>
<pre>
        $FORM{'comments'} =~ s/\n/&lt;BR&gt;/g;
</PRE>
</DIV>

<p class=para>
The information that the user entered in the <tt>&lt;TEXTAREA&gt;</TT>
field is stored in comments. Every newline character is replaced
by the <tt class=literal>HTML</tt> break tag. This ensures that the
information is displayed correctly. Note that if the user enters
<tt class=literal>HTML</tt> code (or SSI directives) as part of the
comments, the code will be interpreted. This could be dangerous.
See <a href="ch09_01.htm">Chapter 9, <i>Gateways, Databases, and Search/Index Utilities</i></A>, for an intricate regular expression that
"escapes" <tt class=literal>HTML</tt> code.

<div class=screen>
<p>
<pre>
	        print GUESTBOOK &lt;&lt;End_Of_Write;
&lt;P&gt;
&lt;B&gt;$date_time:&lt;/B&gt;&lt;BR&gt;
Message from &lt;EM&gt;$FORM{'name'}&lt;/EM&gt; at &lt;EM&gt;$FORM{'from'}&lt;/EM&gt;:
&lt;P&gt;
$FORM{'comments'}
End_Of_Write
</PRE>
</DIV>

<p class=para>
The user name, host, and comments, along with the current
date and time, are written to the guestbook file.

<div class=screen>
<p>
<pre>
        if ($FORM{'www'}) {
            print GUESTBOOK &lt;&lt;End_of_Web_Address;
			
&lt;P&gt;
$FORM{'name'} can also be reached at: 
&lt;A HREF="$FORM{'www'}"&gt;$FORM{'www'}&lt;/A&gt;
End_of_Web_Address
        }
		
        print GUESTBOOK "&lt;P&gt;&lt;HR&gt;";
</PRE>
</DIV>

<p class=para>
If an <tt class=literal>HTTP</tt>
address was provided by the user, it is also displayed.

<div class=screen>
<p>
<pre>
        flock (GUESTBOOK, $unlock);
        close(GUESTBOOK);
</PRE>
</DIV>

<p class=para>
The file is unlocked
and closed. It is very important to unlock and close the guestbook
file to ensure that other people can access it.

<p class=para>
Finally,
if all goes well, a thank-you message is displayed, as well as links
to view the guestbook.

<div class=screen>
<p>
<pre>
        &amp;MIME_header ("text/html", "Thank You!");
        
        print &lt;&lt;End_of_Thanks;
        
Thanks for visiting my guestbook. If you would like to see the guestbook,
click &lt;A HREF="$guest_file"&gt;here&lt;/A&gt; (actual guestbook HTML file),
or &lt;A HREF="$script"&gt;here&lt;/A&gt; (guestbook script without a query).
End_of_Thanks
</PRE>
</DIV>

<p class=para>
If the program cannot write to the guestbook file, an error
message is generated. Another error is sent if an invalid request
method is used to access this CGI program.

<div class=screen>
<p>
<pre>
     } else {
        &amp;return_error (500, "Guestbook File Error",
                    "Cannot write to the guestbook file [$full_path].")
    }
} else {
    &amp;return_error (500, "Server Error",
                        "Server uses unsupported method");
}
exit(0);
</PRE>
</DIV>

<p class=para>
The <i class=emphasis>MIME_header</I> subroutine simply displays
a <tt class=literal>MIME</tt> header, as well as a title and heading
for the document. If the third argument is not specified, the heading
will be the same as the title.

<div class=screen>
<p>
<pre>
sub MIME_header
{
    local ($mime_type, $title_string, $header) = @_;
    if (!$header) {
        $header = $title_string;
    }
    print "Content-type: ", $mime_type, "\n\n";
    print "&lt;HTML&gt;", "\n";
    print "&lt;HEAD&gt;&lt;TITLE&gt;", $title_string, "&lt;/TITLE&gt;&lt;/HEAD&gt;", "\n";
    print "&lt;BODY&gt;", "\n";
    print "&lt;H1&gt;", $header, "&lt;/H1&gt;";
    print "&lt;HR&gt;";
}
</PRE>
</DIV>

<p class=para>
The <i class=emphasis>get_date_time</I>
subroutine returns the current date and time.

<div class=screen>
<p>
<pre>
sub get_date_time 
{
    local ($months, $weekdays, $ampm, $time_string);
    $months = "January/February/March/April/May/June/July/" . 
              "August/September/October/November/December";
    $weekdays = "Sunday/Monday/Tuesday/Wednesday/Thursday/Friday/Saturday";
    local ($sec, $min, $hour, $day, $nmonth, $year, $wday, $yday, $isdst) 
	          = localtime(time);
</PRE>
</DIV>

<p class=para>
The <i class=emphasis>localtime</I> function returns a nine-element
array, which consists of the time, the date, and the present time
zone. In previous examples, we were using only the first three elements
of this array; in this example, we're assigning all nine.

<div class=screen>
<p>
<pre>
    if ($hour &gt; 12) {
        $hour -= 12;
        $ampm = "pm";
    } else {
        $ampm = "am";
    }
    if ($hour == 0) {
	       $hour = 12;
    }
    $year += 1900;
    $week  = (split("/", $weekdays))[$wday];
    $month = (split("/", $months))[$nmonth];
</PRE>
</DIV>

<p class=para>
The week
and the numerical month returned by the <i class=emphasis>localtime</I>
function are zero based. The <i class=emphasis>week</I> variable
is set to the alphanumeric weekday name by retrieving the string
corresponding to the numerical weekday from the variable <i class=emphasis>weekdays</I>.
The same process is repeated to determine the alphanumeric month
name.

<div class=screen>
<p>
<pre>
    $time_string = sprintf("%s, %s %s, %s - %02d:%02d:%02d %s", 
                                $week, $month, $day, $year, 
                                $hour, $min, $sec, $ampm);
    return ($time_string);
}
</PRE>
</DIV>

<p class=para>
Finally, the date returned by the <i class=emphasis>get_date_time</I>
subroutine is in the form of:

<div class=screen>
<p>
<pre>
Friday, August 18, 1995 - 02:07:45 pm
</PRE>
</DIV>

<p class=para>
The last subroutine in the guestbook application is <i class=emphasis>parse_form_data</I>.

<div class=screen>
<p>
<pre>
sub parse_form_data
{
    local (*FORM_DATA) = @_;
	
    local ( $request_method, $post_info, @key_value_pairs,
		          $key_value, $key, $value);
    read (STDIN, $post_info, $ENV{'CONTENT_LENGTH'});
    @key_value_pairs = split (/&amp;/, $post_info);
    foreach $key_value (@key_value_pairs) {
        ($key, $value) = split (/=/, $key_value);
        $value =~ tr/+/ /;
        $value =~ s/%([\dA-Fa-f][\dA-Fa-f])/pack ("C", hex ($1))/eg;
        if (defined($FORM_DATA{$key})) {
            $FORM_DATA{$key} = join ("\0", $FORM_DATA{$key}, $value);
        } else {
            $FORM_DATA{$key} = $value;
        }
    }
}
</PRE>
</DIV>

<p class=para>
As mentioned earlier,
this subroutine does not check for <tt class=literal>GET</tt> requests.
There is no need to do so, because the loop in the main program
does the needed checking. 

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch06_06.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src="gifs/txthome.gif" alt="Home" border=0></a></td>
<td width=172 align=right valign=top><a href="ch07_02.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Figure -: Animation using client pull</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td>
<td width=172 align=right valign=top>Survey/Poll and Pie Graphs</td>
</tr>
</table>

<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
</DIV>

</BODY>
</HTML>
