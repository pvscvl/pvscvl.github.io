<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 9] 9.4 Search/Index Gateway</TITLE>
<meta name="author" content="Shishir Gundavaram">
<meta name="date" content="Mon Mar 17 13:34:07 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="cgi programming">
<meta name="title" content="CGI Programming on the World Wide Web">
<!-- JavaScript: pathcont.js -->

</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><img src="gifs/smbanner.gif" alt="CGI Programming on the World Wide Web"></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch09_03.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b>Chapter 9</b></td>
<td width=172 align=right valign=top><a href="ch10_01.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>
<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="CGI-CHP-9-SECT-4">9.4 Search/Index Gateway</A></h2>

<p class=para>
One
of the most useful CGI applications is a web server search/index
gateway. This allows a user to search all of the files on the server
for particular information. Here is a very simple gateway to do
just that. We rely on the UNIX command <i class=emphasis>fgrep
[1]</I> to search all our
files, and then filter its output to something attractive and useful.
First, let's look at the form's front end:

<blockquote class=footnote>
<p class=para>[1] 
The <i class=filename>fgrep</i> used in the example
is GNU <i class=filename>fgrep</i> version 2.0, which supports the
-A and -B options.
</blockquote>
<div class=screen>
<p>
<pre>
&lt;HTML&gt;
&lt;HEAD&gt;&lt;TITLE&gt;Search Gateway&lt;/TITLE&gt;&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;H1&gt;Search Gateway&lt;/H1&gt;
&lt;HR&gt;
&lt;FORM ACTION="/cgi-bin/search.pl" METHOD="POST"&gt;
What would you like to search for:
&lt;BR&gt;
&lt;INPUT TYPE="text" NAME="query" SIZE=40&gt;
&lt;P&gt;
&lt;INPUT TYPE="submit" VALUE="Start Searching!"&gt;
&lt;INPUT TYPE="reset"  VALUE="Clear your form"&gt;
&lt;/FORM&gt;
&lt;HR&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>
</DIV>

<p class=para>
Nothing fancy. The form contains just one field to hold the
search query. Now, here is the program:

<div class=screen>
<p>
<pre>
#!/usr/local/bin/perl
$webmaster = "Shishir Gundavaram (shishir\@bu\.edu)";
$fgrep = "/usr/local/bin/fgrep";
$document_root = $ENV{'DOCUMENT_ROOT'};
</PRE>
</DIV>

<p class=para>
The <i class=emphasis>fgrep</I> UNIX command
is used to perform the actual searching in the directory pointed
to by the variable <i class=emphasis>document_root</I>. <i class=emphasis>fgrep</I>
searches for fixed strings; in other words, wildcards and regular
expressions are not evaluated.

<div class=screen>
<p>
<pre>
&amp;parse_form_data (*SEARCH);
$query = $SEARCH{'query'};
</PRE>
</DIV>

<p class=para>
The form data (or one field) is decoded and stored in the
SEARCH associative array.

<div class=screen>
<p>
<pre>
if ($query eq "") {
    &amp;return_error (500, "Search Error", "Please enter a search query.");
} elsif ($query !~ /^(\w+)$/) {
    &amp;return_error (500, "Search Error", "Invalid characters in query.");
} else {
</PRE>
</DIV>

<p class=para>
If the query entered by the user contains a non-alphanumeric
character (A-Z, a-z, 0-9, _), or is empty, an error message is returned.

<div class=screen>
<p>
<pre>
    print "Content-type: text/html", "\n\n";
		print "&lt;HTML&gt;", "\n";
    print "&lt;HEAD&gt;&lt;TITLE&gt;Search Results&lt;/TITLE&gt;&lt;/HEAD&gt;";
		print "&lt;BODY&gt;", "\n";
    print "&lt;H1&gt;Results of searching for: ", $query, "&lt;/H1&gt;";
    print "&lt;HR&gt;";
    open (SEARCH, "$fgrep -A2 -B2 -i -n -s $query $document_root/* |");
</PRE>
</DIV>

<p class=para>
The pipe is opened to the <i class=emphasis>fgrep</I> command
for output. We use the following command-line options:

<p>
<ul class=itemizedlist>
<li class=listitem><i class=emphasis>-A2</I> and <i class=emphasis>-B2</I>
display two lines before and after the match

<p>
<li class=listitem><i class=emphasis>-i</I> indicates case insensitivity

<p>
<li class=listitem><i class=emphasis>-n</I> displays the line numbers

<p>
<li class=listitem><i class=emphasis>-s</I> instructs fgrep to suppress
all error messages.

<p>
</UL>
<p class=para>
Here is what the output format looks like:

<div class=screen>
<p>
<pre>
/abc/cde/filename.abc-57-Previous, previous line
/abc/cde/filename.abc-58-Previous line
/abc/cde/filename.abc-59:Matched line 
/abc/cde/filename.abc-60-Following line 
/abc/cde/filename.abc-61-Following, following line
</PRE>
</DIV>

<p class=para>
As you can see, a total of five or more lines are output for
each match. If the query string is found in multiple files, <i class=emphasis>fgrep</I>
returns the "--" boundary string to separate the output from the
different files.

<div class=screen>
<p>
<pre>
    $count = 0;
    $matches = 0;
    %accessed_files = ();
</PRE>
</DIV>

<p class=para>
Three important variables are initialized. The first one,
<i class=emphasis>count</I>, is used to keep track of the number
of lines returned per match. The <i class=emphasis>matches</I> variable
stores the number of different files that contain the specified
query. And finally, the <i class=emphasis>accessed_files</I> associative
array keeps track of the filenames that contain a match.

<p class=para>
We could have used another grep
command that returned just filenames, and then our processing would
be much easier. But I want to display the actual text found, so
I chose more complicated output. Thus, I have to do a little fancy
parsing and text substitution to change the lines of <i class=emphasis>fgrep</I>
output into something that looks good on a web browser. What we
want to display is:

<p>
<ul class=itemizedlist>
<li class=listitem>The name of each file found, with
a hypertext link so the user can go directly to a file

<p>
<li class=listitem>The text found with the search string highlighted

<p>
<li class=listitem>A summary of the files found

<p>
</UL>
<p class=para>
The following code performs these steps.

<div class=screen>
<p>
<pre>
    while (&lt;SEARCH&gt;) {
        if ( ($file, $type, $line) = m|^(/\S+)([\-:])\d+\2(.*)| ) {
</PRE>
</DIV>

<p class=para>
The <i class=emphasis>while</I> loop iterates through the data
returned by <i class=emphasis>fgrep</I>. If a line resembles the
format presented above, this block of code is executed. The regular
expression is explained below.


<p>
<img align=middle index.htmlwebstripperattrwas="src" webstripperlinkwas="http://rtfm.vn.ua/prog/perl/orb/books/web/cgi/figs/exp0903.gif" alt="[Graphic: Figure from the text]" width=502 height=182>

<div class=screen>
<p>
<pre>
             unless ($count) {
                if ( defined ($accessed_files{$file}) ) {
                    next;
                } else {
                    $accessed_files{$file} = 1;
                }
                $file =~ s/^$document_root\/(.*)/$1/;
                $matches++;
                print qq|&lt;A HREF="/$file"&gt;$file&lt;/A&gt;&lt;BR&gt;&lt;BR&gt;|;
            }
</PRE>
</DIV>

<p class=para>
If <i class=emphasis>count</I> is equal to zero (which means
we are either on line 1 or on the line right after the boundary),
the associative array is checked to see if an element exists for
the current filename. If it exists, there is a premature break from
the conditional, and the <i class=emphasis>while</I> loop executes
again. If not, the <i class=emphasis>matches</I> variable is incremented,
and a hypertext anchor is linked to the relative pathname of the
matched file.

<p class=para>
Remember, if there is more than one match per file, <i class=emphasis>fgrep</I>
returns the matched lines as separate entities (separated by the
"--" string). Since we want only one link per filename, the associative
array has to be used to "cache" the filename.

<div class=screen>
<p>
<pre>
            $count++;
            $line =~ s/&lt;(([^&gt;]|\n)*)&gt;/&amp;lt;$1&amp;gt;/g;
</PRE>
</DIV>

<p class=para>
The <i class=emphasis>count</I> variable is incremented so
that the next time through the loop, the previous block of code
will not be executed, and therefore a hypertext link will not be
created. Also, all HTML tags are "escaped" by
the regular expression illustrated below, so that they appear as
regular text when this dynamic document is displayed. If we did
not escape these tags, the browser would interpret them as regular
HTML statements, and display formatted output.


<p>
<img align=middle index.htmlwebstripperattrwas="src" webstripperlinkwas="http://rtfm.vn.ua/prog/perl/orb/books/web/cgi/figs/exp0904.gif" alt="[Graphic: Figure from the text]" width=502 height=282>

<p class=para>
We could totally remove all tags by using:

<div class=screen>
<p>
<pre>
$line =~ s/&lt;(([^&gt;]|\n)*)&gt;//g;
</PRE>
</DIV>

<p class=para>
Let's continue with the program:

<div class=screen>
<p>
<pre>
            if ($line =~ /^[^A-Za-z0-9]*$/) {
                next;
            }
</PRE>
</DIV>

<p class=para>
If a line consists of any characters besides the subset of
alphanumeric characters (A-Z, a-z, 0-9), the line will not be displayed.

<div class=screen>
<p>
<pre>
            if ($type eq ":") {
                $line =~ s/($query)/&lt;B&gt;$1&lt;\/B&gt;/ig;
            }
            print $line, "&lt;BR&gt;";
</PRE>
</DIV>

<p class=para>
For the matched line, the query is emboldened using the &lt;B&gt;
... &lt;/B&gt; HTML tags, and printed.

<div class=screen>
<p>
<pre>
        } else {
            if ($count) {
                print "&lt;HR&gt;";
                $count = 0;
            }
        }
    }
</PRE>
</DIV>

<p class=para>
This conditional is executed if the line contains the boundary
string, in which case a horizontal rule is output and the counter
is initialized.

<div class=screen>
<p>
<pre>
    print "&lt;P&gt;", "&lt;HR&gt;";
    print "Total number of files containing matches: ", $matches, "&lt;BR&gt;";
    print "&lt;HR&gt;";
		print "&lt;/BODY&gt;&lt;/HTML&gt;", "\n";
    close (SEARCH);
}
exit (0);
</PRE>
</DIV>

<p class=para>
Finally, the total number of files that contained matches
to the query are displayed, as shown in <a href="#CGI-CHP-9-FIG-11">Figure 9.11</A>.

<div class=figure>
<h4 class=figure><a class="TITLE" name="CGI-CHP-9-FIG-11">Figure 9-11: Search results</A></h4>


<p>
<img aligindex.htmln=middle webstripperattrwas="src" webstripperlinkwas="http://rtfm.vn.ua/prog/perl/orb/books/web/cgi/figs/exp0905.gif" alt="[Graphic: Figure 9-11]" width=502 height=223>

</DIV>

<p class=para>
This is a very simple example of a search/index utility. It
can be quite slow if you need to search hundreds (or thousands)
of documents. However, there are numerous indexing engines (as well
as corresponding CGI gateways) that are extremely fast and powerful.
These include Swish and Glimpse. See <a href="appe_01.htm">Appendix E, <i>Applications, Modules, Utilities, and Documentation</i></A>
for information on where to retrieve those packages.

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch09_03.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src="gifs/txthome.gif" alt="Home" border=0></a></td>
<td width=172 align=right valign=top><a href="ch10_01.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Relational Databases</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td>
<td width=172 align=right valign=top>Gateways to Internet Information Servers</td>
</tr>
</table>

<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
</DIV>

</BODY>
</HTML>
