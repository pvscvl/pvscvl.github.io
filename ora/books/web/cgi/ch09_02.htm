<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 9] 9.2 Mail Gateway</TITLE>
<meta name="author" content="Shishir Gundavaram">
<meta name="date" content="Mon Mar 17 13:33:42 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="cgi programming">
<meta name="title" content="CGI Programming on the World Wide Web">
<!-- JavaScript: pathcont.js -->

</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><img src="gifs/smbanner.gif" alt="CGI Programming on the World Wide Web"></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch09_01.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b>Chapter 9</b></td>
<td width=172 align=right valign=top><a href="ch09_03.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>
<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="CGI-CHP-9-SECT-2">9.2 Mail Gateway</A></h2>

<p class=para>
Ever
wish you could send electronic mail from your web browser? This
gateway allows you to do just that.

<div class=screen>
<p>
<pre>
#!/usr/local/bin/perl
$webmaster = "shishir\@bu\.edu";
$gateway = "CGI Mail Gateway [v1.0]";
$request_method = $ENV{'REQUEST_METHOD'};
$sendmail = "/usr/lib/sendmail -t -n -oi";
</PRE>
</DIV>

<p class=para>
This program uses the UNIX <i class=emphasis>
sendmail</I> utility
to actually send the message. The <i class=emphasis>-t </I>option
instructs <i class=emphasis>sendmail</I> to scan the message for
the "To:" mail header, and the <i class=emphasis>-n</I>
option prevents the user from entering aliases for the recipient's
email address; you would not want some remote user to use your system's
internal aliases, would you?

<div class=screen>
<p>
<pre>
$address_file = "/home/shishir/httpd_1.4.2/cgi-bin/address.dat";
</PRE>
</DIV>

<p class=para>
The address file consists of a list of recipients' mail addresses
from which the user is required to select one. The user cannot enter
an address that is not included in the address file. The <i class=emphasis>address.dat</I>
file should be formatted as follows:

<div class=screen>
<p>
<pre>
Webmaster,webmaster@bu.edu
Author,shishir@bu.edu
.
.
.
</PRE>
</DIV>

<p class=para>
I have chosen a comma to separate nicknames from addresses
because Internet standards prohibit a comma from being used in an
address.

<p class=para>
When the mail form is displayed, the program inserts all of
the descriptive names in a scrolled list. If you do not want to
have such a file, remove or comment out the line defining <i class=emphasis>$address_file</I>.

<div class=screen>
<p>
<pre>
$exclusive_lock = 2;
$unlock = 8;
if ( defined ($address_file) &amp;&amp; (-e $address_file) ) {
    &amp;load_address (*address);
}
</PRE>
</DIV>

<p class=para>
If the <i class=emphasis>address_file</I> variable is defined
and the file exists, the <i class=emphasis>load_address</I> subroutine
is called to load the list of addresses into the <i class=emphasis>address</I>
associative array (for easy retrieval).

<div class=screen>
<p>
<pre>
&amp;parse_form_data (*MAIL);
</PRE>
</DIV>

<p class=para>
The form information is stored in the <i class=emphasis>MAIL</I>
associative array. The <i class=emphasis>parse_form_data</I> subroutine
is the same as the one used at the beginning of <a href="ch07_01.htm">Chapter 7, <i>Advanced Form Applications</i></A>. Like the guestbook application I presented in <a href="ch07_01.htm">Chapter 7, <i>Advanced Form Applications</i></A>, this program is two in one: Half of the program
displays a form, and the other half retrieves the data after the
user submits the form, and sends the mail.

<div class=screen>
<p>
<pre>
if ($request_method eq "GET") {
    &amp;display_form ();
</PRE>
</DIV>

<p class=para>
If the GET method was used to access this
program, the display_form
subroutine displays the form. This gateway can be accessed without
any query information:

<div class=screen>
<p>
<pre>
http://your.machine/cgi-bin/mail.pl
</PRE>
</DIV>

<p class=para>
in which case, a mail form is displayed. Or, you can also
access it by passing query information:

<div class=screen>
<p>
<pre>
http://your.machine/cgi-bin/mail.pl?to=shishir@bu.edu&amp;url=/thanks.html
</PRE>
</DIV>

<p class=para>
In this case, the "to" and "url" fields in the form will contain
the information passed to it. If an address file is being used,
the address specified by the "to" field has to match one of the
addresses in the list. Instead of specifying the full email address,
you can also use the descriptive title from the address file:

<div class=screen>
<p>
<pre>
http://your.machine/cgi-bin/mail.pl?to=Author&amp;url=/thanks.html
</PRE>
</DIV>

<p class=para>
The advantage of passing queries like this is that you can
create links within a document, such as:

<div class=screen>
<p>
<pre>
.
.
If you want to contact me, click &lt;A HREF="/cgi-bin/mail.pl?to=Author"&gt;here.&lt;/A&gt;
.
.
</PRE>
</DIV>

<p class=para>
All of the fields in the form, including "to" and "url," will
be explained later in this section.

<div class=screen>
<p>
<pre>
} elsif ($request_method eq "POST") {
    
    if ( defined (%address) ) {
        $check_status = &amp;check_to_address ();
        if (!$check_status) {
            &amp;return_error (500, "$gateway Error",
                "The address you specified is not allowed.");
        }
    }
</PRE>
</DIV>

<p class=para>
This block will be executed if the POST
method was used to access this gateway (which means that the user
filled out the form and submitted it). If the <i class=emphasis>address</I>
associative array is defined, the <i class=emphasis>check_to_address</I>
subroutine is called to check for the validity of the user- specified
address. In other words, the address has to be listed in the address
file. This subroutine returns a TRUE or FALSE
value. If the address is not valid, an error message is returned.

<div class=screen>
<p>
<pre>
    if ( (!$MAIL{'from'}) || (!$MAIL{'email'}) ) {
        &amp;return_error (500, "$gateway Error", "Who are you ?");
    } else {
        &amp;send_mail ();        
        &amp;return_thanks ();
    }
</PRE>
</DIV>

<p class=para>
If the user failed to enter any information into the "from"
and "email" fields in the form, an error message is returned (which
I will show later). Otherwise, the mail message is sent, and a thank-you
note is returned.

<div class=screen>
<p>
<pre>
} else {
    &amp;return_error (500, "Server Error",
                    "Server uses unsupported method");
}
exit(0);
</PRE>
</DIV>

<p class=para>
Now for the <i class=emphasis>load_address</I> subroutine,
which reads your address file:

<div class=screen>
<p>
<pre>
sub load_address
{
    local (*ADDRESS_DATA) = @_;
    local ($name, $address);
    open (FILE, $address_file) || &amp;return_error (500, "$gateway Error",
            "Cannot open the address file [$address_file].");
    
    flock (FILE, $exclusive_lock);
</PRE>
</DIV>

<p class=para>
This subroutine opens the address file, and loads all of the
entries into an associative array. Note that <i class=emphasis>$exclusive_lock</I>
and <i class=emphasis>$unlock</I> are global variables.

<div class=screen>
<p>
<pre>
    while (&lt;FILE&gt;) {
        chop if (/\n$/);
        ($name, $address) = split (/,/, $_, 2);
        $ADDRESS_DATA{$name} = $address;
    }
</PRE>
</DIV>

<p class=para>
The <i class=emphasis>while</I> loop iterates through the file
one line at a time. If a line ends with a newline character, it
is removed with the <i class=emphasis>chop</I> function. The <i class=emphasis>chop</I>
function removes the last character of the line. The <i class=emphasis>if</I>
clause is there as a precaution, because the last line of the file
may not have a newline character, in which case part of the data
would be lost. The <i class=emphasis>split</I> command, which should
be familiar by now, separates the name from the address. Then, an
entry in the associative array is created to hold the address.

<div class=screen>
<p>
<pre>
    flock (FILE, $unlock);
    close (FILE);
}
</PRE>
</DIV>

<p class=para>
The <i class=emphasis>display_form</I> subroutine is executed
when the client invokes the program without a query.

<div class=screen>
<p>
<pre>
sub display_form
{
    local ($address_to);
    print "Content-type: text/html", "\n\n";
    
    $address_to = &amp;determine_to_field ();
</PRE>
</DIV>

<p class=para>
The determine_to_field
subroutine creates a scrolled list if the address file is defined.
See <a href="#CGI-CHP-9-FIG-4">Figure 9.4</A> for a snapshot of what this looks like. Otherwise,
a simple text field is used. The HTML needed
to accomplish these functions is returned by the subroutine, and
is stored in the <i class=emphasis>address_to</I> variable.

<div class=figure>
<h4 class=figure><a class="TITLE" name="CGI-CHP-9-FIG-4">Figure 9-4: Scrolled-down list of addresses</A></h4>


<p>
<img aligindex.htmln=middle webstripperattrwas="src" webstripperlinkwas="http://rtfm.vn.ua/prog/perl/orb/books/web/cgi/figs/cgi0906.gif" alt="[Graphic: Figure 9-4]" width=502 height=293>

</DIV>

<div class=screen>
<p>
<pre>
    print &lt;&lt;End_of_Mail_Form;
&lt;HTML&gt;
&lt;HEAD&gt;&lt;TITLE&gt;A WWW Gateway to Mail&lt;/TITLE&gt;&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;H1&gt;$gateway&lt;/H1&gt;
This form can be used to send mail through the World Wide Web.
Please fill out all the necessary information.
&lt;HR&gt;
&lt;FORM METHOD="POST"&gt;
&lt;PRE&gt;
Full Name:  &lt;INPUT TYPE="text" NAME="from" VALUE="$MAIL{'from'}" SIZE=40&gt;
E-Mail:     &lt;INPUT TYPE="text" NAME="email" VALUE="$MAIL{'email'}" SIZE=40&gt;
To:         $address_to
CC:         &lt;INPUT TYPE="text" NAME="cc" VALUE="$MAIL{'cc'}" SIZE=40&gt;
Subject:    &lt;INPUT TYPE="text" NAME="subject" VALUE="$MAIL{'subject'}" SIZE=40&gt;
&lt;HR&gt;
</PRE>
</DIV>

<p class=para>
Notice the use of the VALUE attributes in the INPUT
statements. These values represent the query information that is
passed to this program with a GET request.

<div class=screen>
<p>
<pre>
Please type the message below:
&lt;TEXTAREA ROWS=10 COLS=60 NAME="message"&gt;&lt;/TEXTAREA&gt;
&lt;/PRE&gt;
&lt;INPUT TYPE="hidden" NAME="url" VALUE="$MAIL{'url'}"&gt;
&lt;INPUT TYPE="submit" VALUE="Send the Message"&gt;
&lt;INPUT TYPE="reset"  VALUE="Clear the Message"&gt;
&lt;/FORM&gt;
&lt;HR&gt;
&lt;/BODY&gt;&lt;/HTML&gt;
End_of_Mail_Form
}
</PRE>
</DIV>

<p class=para>
The "url" field is defined as a hidden field. This consists
of the URL of the document that is displayed after the user completes
the form.

<p class=para>
The <i class=emphasis>determine_to_field</I> subroutine either
creates a scrolled list of all the addresses in the file, or a simple
text field in which the user can enter the recipient's address.

<div class=screen>
<p>
<pre>
sub determine_to_field
{
    local ($to_field, $key, $selected);
    if (%address) {
        $to_field = '&lt;SELECT NAME="to"&gt;';
        foreach $key (keys %address) {
</PRE>
</DIV>

<p class=para>
The <i class=emphasis>keys</I> function returns a normal array
consisting of all of the keys of the associative array. The <i class=emphasis>foreach</I>
construct then iterates through each key.

<div class=screen>
<p>
<pre>
            if ( ($MAIL{'to'} eq $key) ||
                 ($MAIL{'to'} eq $address{$key}) ) {
        
                $selected = "&lt;OPTION SELECTED&gt;";
            } else {
                $selected = "&lt;OPTION&gt;";
            }
</PRE>
</DIV>

<p class=para>
If the recipient specified by the user (through a query string)
matches either the descriptive title in the address file-the key-or
the actual address, it is highlighted. Remember, this is how you
can access this program with a query:

<div class=screen>
<p>
<pre>
http://your.machine/cgi-bin/mail.pl?to=shishir@bu.edu&amp;url=/thanks.html
</PRE>
</DIV>

<p class=para>
Now, the rest of the subroutine:

<div class=screen>
<p>
<pre>
            $to_field = join ("\n", $to_field,
                        $selected, $key);
        }
        $to_field = join ("\n", $to_field, "&lt;/SELECT&gt;");
</PRE>
</DIV>

<p class=para>
Finally, all of the &lt;OPTION&gt; tags are concatenated to
create the kind of scrolled list shown above.

<div class=screen>
<p>
<pre>
    } else {
        $to_field = 
        qq/&lt;INPUT TYPE="text" NAME="to" VALUE="$MAIL{'to'}" SIZE=40&gt;/;
    }
    return ($to_field);
}
</PRE>
</DIV>

<p class=para>
If an address file
is not used, a simple text field is displayed. The <i class=emphasis>qq/../</I>
construct builds a double-quoted string. It should be used when
there are many double quotation marks within the string. The same
string can be expressed inside the traditional double quotes:

<div class=screen>
<p>
<pre>
$to_field = "&lt;INPUT TYPE=\"text\" NAME=\"to\" VALUE=\"$MAIL{'to'}\" SIZE=40&gt;";
</PRE>
</DIV>

<p class=para>
As you can see, all of the other double quotation marks within
the string have to be escaped by putting backslashes in front of
them. Using the <i class=emphasis>qq</I> notation in the regular
expression is much easier.

<p class=para>
Finally, the HTML needed to display the "to" field is returned.

<p class=para>
The <i class=emphasis>check_to_address</I> subroutine checks
the user-specified recipient to make sure that it is valid. If it
is valid, the variable <i class=emphasis>$MAIL{' to' }</I> will be
set to the corresponding email address. Finally, a status indicating
success or failure is returned.

<div class=screen>
<p>
<pre>
sub check_to_address
{    
    local ($status, $key);
    $status = 0;
    foreach $key (keys %address) {
         if ( ($MAIL{'to'} eq $key) || ($MAIL{'to'} eq $address{$key}) ) {
            $status = 1;
            $MAIL{'to'} = $address{$key};
         }
    }
    return ($status);
}
</PRE>
</DIV>

<p class=para>
In this next subroutine, the mail is sent using the UNIX 
sendmail utility.

<div class=screen>
<p>
<pre>
sub send_mail
{
    open (SENDMAIL, "| $sendmail");
</PRE>
</DIV>

<p class=para>
A pipe to the sendmail utility is opened for input. We do
not need to check any of the form values for shell metacharacters
because none of the values are "exposed" on the command line. The
<i class=emphasis>sendmail</I> utility allows you to place the recipient's
name in the input stream, rather than on the command-line.

<p class=para>
If the regular <i class=emphasis>mail</I> utility is used,
the form information must be checked for metacharacters. This is
how we can send mail with the <i class=emphasis>mail</I> utility:

<div class=screen>
<p>
<pre>
if ($MAIL{'to'} =~ /([\w\-\+]+)@([\w\-\+\.]+)/) {
    open (SENDMAIL, "/usr/ucb/mail $MAIL{'to'} |");
} else {
    &amp;return_error (500, "$gateway Error", "Address is not valid.");
}
</PRE>
</DIV>

<p class=para>
The regular expression is described by the figure below. Of
course, this allows only Internet-style mail addresses; UUCP
addresses are not recognized.


<p>
<img aligindex.htmln=middle webstripperattrwas="src" webstripperlinkwas="http://rtfm.vn.ua/prog/perl/orb/books/web/cgi/figs/cgi0907.gif" alt="[Graphic: Figure from the text]" width=446 height=236>

<div class=screen>
<p>
<pre>
    print SENDMAIL &lt;&lt;Mail_Headers;
From: $MAIL{'from'} &lt;$MAIL{'email'}&gt;
To: $MAIL{'to'}
Reply-To: $MAIL{'email'}
Subject: $MAIL{'subject'}
X-Mailer: $gateway
X-Remote-Host: $ENV{'REMOTE_ADDR'}
Mail_Headers
</PRE>
</DIV>

<p class=para>
Various 
mail
headers are output. Any headers starting with "X-" are user/program
specified, and are usually ignored by mail readers. The remote IP
address of the user (the environment variable REMOTE_ADDRESS)
is output for possible security reasons. Imagine a situation where
someone fills out a form with obnoxious information, and includes
a "fake" address. This header will at least tell you where the message
came from.

<div class=screen>
<p>
<pre>
    if ($MAIL{'cc'}) {
        print SENDMAIL "Cc: ", $MAIL{'cc'}, "\n";
    }
    print SENDMAIL "\n", $MAIL{'message'}, "\n";      
    close (MAIL);
}
</PRE>
</DIV>

<p class=para>
If the user entered an address in the "Cc:" field, a mail
header is output. Finally, the body of the message is displayed,
and the pipe is closed.

<p class=para>
It is courteous to output a thank-you message:

<div class=screen>
<p>
<pre>
sub return_thanks
{
    if ($MAIL{'url'}) {
        print "Location: ", $MAIL{'url'}, "\n\n";
    } else {
        print "Content-type: text/html", "\n\n";
        print &lt;&lt;Thanks;
&lt;HTML&gt;
&lt;HEAD&gt;&lt;TITLE&gt;$gateway&lt;/TITLE&gt;&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;H1&gt;Thank You!&lt;/H1&gt;
&lt;HR&gt;
Thanks for using the mail gateway. Please feel free to use it again.
&lt;/BODY&gt;&lt;/HTML&gt;
Thanks
    }
}
</PRE>
</DIV>

<p class=para>
If a URL was specified as part of the GET
request, a server redirect is done with the "Location" HTTP header.
In other words, the server will get and display the specified document
after the user submits the form. Otherwise, a simple thank-you note
is issued.

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch09_01.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src="gifs/txthome.gif" alt="Home" border=0></a></td>
<td width=172 align=right valign=top><a href="ch09_03.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>UNIX Manual Page Gateway</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td>
<td width=172 align=right valign=top>Relational Databases</td>
</tr>
</table>

<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
</DIV>

</BODY>
</HTML>
