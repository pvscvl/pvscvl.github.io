<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 2] 2.3 Accessing Form Input</TITLE>
<meta name="author" content="Shishir Gundavaram">
<meta name="date" content="Mon Mar 17 13:21:08 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="cgi programming">
<meta name="title" content="CGI Programming on the World Wide Web">
<!-- JavaScript: pathcont.js -->

</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><img src="gifs/smbanner.gif" alt="CGI Programming on the World Wide Web"></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch02_02.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b>Chapter 2</b></td>
<td width=172 align=right valign=top><a href="ch02_04.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>
<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="CGI-CHP-2-SECT-3">2.3 Accessing Form Input</A></h2>

<p class=para>
Finally, let's
get to form input. We mentioned forms briefly in <a href="ch02_01.htm">Chapter 2, <i>Input to the Common Gateway Interface</i></A>, and we'll cover
them in more detail in <a href="ch04_01.htm">Chapter 4, <i>Forms and CGI</i></A>.
But here, we just want to introduce you to the basic concepts behind
forms.

<p class=para>
As we described in Chapter 1, forms provide a way to get input
from users and supply it to a CGI program, as shown in <a href="#CGI-CHP-2-FIG-1">Figure 2.1</A>.
The Web browser allows the user to select or type in information,
and then sends it to the server when the Submit button is pressed.
In this chapter, we'll talk a little about how the CGI program accesses
the form input.

<div class=figure>
<h4 class=figure><a class="TITLE" name="CGI-CHP-2-FIG-1">Figure 2-1: Form interaction with CGI</A></h4>


<p>
<img aligindex.htmln=middle webstripperattrwas="src" webstripperlinkwas="http://rtfm.vn.ua/prog/perl/orb/books/web/cgi/figs/cgi0201.gif" alt="[Graphic: Figure 2-1]" width=502 height=423>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="CGI-CHP-2-SECT-3.1">Query Strings</A></h3>

<p class=para>
One
way to send form data to a CGI program is by appending the form
information to the URL, after a question mark. You may have seen
URLs like the following:

<div class=screen>
<p>
<pre>
http://some.machine/cgi-bin/name.pl?fortune
</PRE>
</DIV>

<p class=para>
Up to the 
question mark (?), the URL should look
familiar. It is merely a CGI script being called, by the name name.pl.

<p class=para>
What's new here is the part after the "?". The information
after the "?" character is known as a <i class=emphasis>query string</I>.
When the server is passed a URL with a query string, it calls the
CGI program identified in the first part of the URL (before the
"?") and then stores the part after the "?" in the environment 
variable QUERY_STRING. The
following is a CGI program called name.pl that uses query information
to execute one of three possible UNIX commands.

<div class=screen>
<p>
<pre>
#!/usr/local/bin/perl
print "Content-type: text/plain", "\n\n";
$query_string = $ENV{'QUERY_STRING'};
if ($query_string eq "fortune") {
    print `/usr/local/bin/fortune`;
} elsif ($query_string eq "finger") {
    print `/usr/ucb/finger`;
} else {
    print `/usr/local/bin/date`;
}
exit (0);
</PRE>
</DIV>

<p class=para>
You can execute this script as either:

<div class=screen>
<p>
<pre>
http://some.machine/cgi-bin/name.pl?fortune
http://some.machine/cgi-bin/name.pl?finger
</PRE>
</DIV>

<p class=para>
or

<div class=screen>
<p>
<pre>
http://some.machine/cgi-bin/name.pl
</PRE>
</DIV>

<p class=para>
and you will get different output. The CGI program executes
the appropriate system command (using backtics) and the results
are sent to standard output. In Perl, you can use backtics to capture
the output from a system command.

<div class=note>
<p class=note><blockquote><p><b>NOTE:</B> 

<p class=para>
You
should always be very careful when executing any type of system
commands in CGI applications, because of possible security problems.
You should never do something like this:
</blockquote><p>
</DIV>

<div class=screen>
<p>
<pre>
print `$query_string`;
</PRE>
</DIV>

<div class=note>
<p class=note><blockquote><p><b>NOTE:</B> 

<p class=para>
The danger is that a diabolical user can enter a dangerous
system command, such as:
</blockquote><p>
</DIV>

<div class=screen>
<p>
<pre>
rm -fr /
</PRE>
</DIV>

<div class=note>
<p class=note><blockquote><p><b>NOTE:</B> 

<p class=para>
which can delete everything on your system.

<p class=para>
Nor should you expose any system data, such as a list of system
processes, to the outside world.
</blockquote><p>
</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="CGI-CHP-2-SECT-3.2">A Simple Form</A></h3>

<p class=para>
Although the previous example will work, the following example
is a more realistic illustration of how forms work with CGI. Instead
of supplying the information directly as part of the URL, we'll
use a form to solicit it from the user.

<p class=para>
(Don't worry about the HTML tags needed
to create the form; they are covered in detail in <a href="ch04_01.htm">Chapter 4, <i>Forms and CGI</i></A>.)

<div class=screen>
<p>
<pre>
&lt;HTML&gt;
&lt;HEAD&gt;&lt;TITLE&gt;Simple Form!&lt;/TITLE&gt;&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;H1&gt;Simple Form!&lt;/H1&gt;
&lt;HR&gt;
&lt;FORM ACTION="/cgi-bin/unix.pl" METHOD="GET"&gt;
Command: &lt;INPUT TYPE="text" NAME="command" SIZE=40&gt;
&lt;P&gt;
&lt;INPUT TYPE="submit" VALUE="Submit Form!"&gt;
&lt;INPUT TYPE="reset"  VALUE="Clear Form"&gt;
&lt;/FORM&gt;
&lt;HR&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>
</DIV>

<p class=para>
Since this is HTML, the appearance of the
form depends on what browser is being used. <a href="#CGI-CHP-2-FIG-2">Figure 2.2</A> shows what
the form looks like in Netscape.

<div class=figure>
<h4 class=figure><a class="TITLE" name="CGI-CHP-2-FIG-2">Figure 2-2: Simple form in Netscape</A></h4>


<p>
<img aligindex.htmln=middle webstripperattrwas="src" webstripperlinkwas="http://rtfm.vn.ua/prog/perl/orb/books/web/cgi/figs/cgi0202.gif" alt="[Graphic: Figure 2-2]" width=500 height=235>

</DIV>

<p class=para>
This form consists of one text field titled "Command:" and
two buttons. The Submit Form! button is used to send the information
in the form to the CGI program specified by the ACTION
attribute. The Clear Form button clears the information in the field.

<p class=para>
The METHOD=GET attribute
to the &lt;FORM&gt; tag in part determines how the data is passed
to the server. We'll talk more about different methods soon, but
for now, we'll use the default method, GET. Now,
assuming that the user enters "fortune" into the text field, when
the Submit Form! button is pressed the browser sends the following
request to the server:

<div class=screen>
<p>
<pre>
GET /cgi-bin/unix.pl?command=fortune HTTP/1.0
.
. (header information)
.
</PRE>
</DIV>

<p class=para>
The server executes the script called <i class=emphasis>unix.pl</I>
in the cgi-bin directory, and places the string "command=fortune"
into the QUERY_STRING environment variable. Think
of this as assigning the variable "command" (specified by the NAME
attribute to the &lt;INPUT&gt; tag) with the string supplied by the
user, "fortune".

<div class=screen>
<p>
<pre>
command=fortune
</PRE>
</DIV>

<p class=para>
Let's go through the simple unix.pl CGI program that handles
this form:

<div class=screen>
<p>
<pre>
#!/usr/local/bin/perl
print "Content-type: text/plain", "\n\n";
$query_string = $ENV{'QUERY_STRING'};
($field_name, $command) = split (/=/, $query_string);
</PRE>
</DIV>

<p class=para>
After printing the content type (<i class=command>text/plain</i>
in this case, since the UNIX programs are unlikely
to produce HTML output) and getting the query
string from the <i class=emphasis>%ENV</I> array, we use the <i class=emphasis>split</I>
function to separate the query string on the "=" character into
two parts, with the first part before the equal sign in <i class=emphasis>$field_name</I>,
and the second part in <i class=emphasis>$command</I>. In this case,
<i class=emphasis>$field_name</I> will contain "command" and <i class=emphasis>$command</I>
will contain "fortune." Now, we're ready to execute the UNIX
command:

<div class=screen>
<p>
<pre>
if ($command eq "fortune") {
    print `/usr/local/bin/fortune`;
} elsif ($command eq "finger") {
    print `/usr/ucb/finger`;
} else {
    print `/usr/local/bin/date`;
}
exit (0);
</PRE>
</DIV>

<p class=para>
Since we used the GET method, all the form
data is included in the URL. So we can directly access this program
without the form, by using the following URL:

<div class=screen>
<p>
<pre>
http://some.machine/cgi-bin/unix.pl?command=fortune
</PRE>
</DIV>

<p class=para>
It will work exactly as if you had filled out the form and
submitted it.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="CGI-CHP-2-SECT-3.3">The GET and POST Methods</A></h3>

<p class=para>
In the previous example, we used the GET
method to process the form. However, there is another method we
can use, called POST. Using the POST method, the server sends the data
as an input stream to the program. That is, if in the previous example
the &lt;FORM&gt; tag had read:

<div class=screen>
<p>
<pre>
&lt;FORM ACTION="unix.pl" METHOD="POST"&gt;
</PRE>
</DIV>

<p class=para>
the following request would be sent to the server:

<div class=screen>
<p>
<pre>
POST /cgi-bin/unix.pl HTTP/1.0
.
. (header information)
.
Content-length: 15
command=fortune
</PRE>
</DIV>

<p class=para>
The version of unix.pl that handles the form with POST
data follows. First, since the server passes information to this
program as an input stream, it sets the environment variable 
CONTENT_LENGTH to the size
of the data in number of bytes (or characters). We can use this
to read exactly that much data from standard input.

<div class=screen>
<p>
<pre>
#!/usr/local/bin/perl
$size_of_form_information = $ENV{'CONTENT_LENGTH'};
</PRE>
</DIV>

<p class=para>
Second, we read the number of bytes, specified by <i class=emphasis>$size_of_form_information</I>,
from standard input into the variable <i class=emphasis>$form_info</I>.

<div class=screen>
<p>
<pre>
read (STDIN, $form_info, $size_of_form_information);
</PRE>
</DIV>

<p class=para>
Now we can split the <i class=emphasis>$form_info</I> variable
into a <i class=emphasis>$field_name</I> and <i class=emphasis>$command</I>,
as we did in the GET version of this example.
As with the GET version, <i class=emphasis>$field_name</I>
will contain "command," and <i class=emphasis>$command</I> will contain
"fortune" (or whatever the user typed in the text field). The rest
of the example remains unchanged:

<div class=screen>
<p>
<pre>
($field_name, $command) = split (/=/, $form_info);
print "Content-type: text/plain", "\n\n";
if ($command eq "fortune") {
    print `/usr/local/bin/fortune`;
} elsif ($command eq "finger") {
    print `/usr/ucb/finger`;
} else {
    print `/usr/local/bin/date`;
}
exit (0);
</PRE>
</DIV>

<p class=para>
Since it's the form that determines whether the GET
or POST method is used, the CGI programmer can't
control which method the program will be called by. So scripts are
often written to support both methods. The following example will
work with both methods:

<div class=screen>
<p>
<pre>
#!/usr/local/bin/perl
$request_method = $ENV{'REQUEST_METHOD'};
if ($request_method eq "GET") {
	      $form_info = $ENV{'QUERY_STRING'};
} else {
      $size_of_form_information = $ENV{'CONTENT_LENGTH'};
      read (STDIN, $form_info, $size_of_form_information);
}
($field_name, $command) = split (/=/, $form_info);
print "Content-type: text/plain", "\n\n";
if ($command eq "fortune") {
    print `/usr/local/bin/fortune`;
} elsif ($command eq "finger") {
    print `/usr/ucb/finger`;
} else {
    print `/usr/local/bin/date`;
 }
exit (0);
</PRE>
</DIV>

<p class=para>
The environment variable 
REQUEST_METHOD
contains the request method used by the form. In this example, the
only new thing we did was check the request method and then assign
the <i class=emphasis>$form_info</I> variable as needed. 

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="CGI-CHP-2-SECT-3.4">Encoded Data</A></h3>

<p class=para>
So far, we've
shown an example for retrieving very simple form information. However,
form information can get complicated. Since under the GET
method the form information is sent as part of the URL, there can't
be any spaces or other special characters that are not allowed in
URLs. Therefore, some special encoding is used. We'll talk more
about this in <a href="ch04_01.htm">Chapter 4, <i>Forms and CGI</i></A>, but for now
we'll show a very simple example. First the HTML
needed to create a form:

<div class=screen>
<p>
<pre>
&lt;HTML&gt;
&lt;HEAD&gt;&lt;TITLE&gt;When's your birthday?&lt;/TITLE&gt;&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;H1&gt;When's your birthday?&lt;/H1&gt;
&lt;HR&gt;
&lt;FORM ACTION="/cgi-bin/birthday.pl" METHOD="POST"&gt;
Birthday (in the form of mm/dd/yy): &lt;INPUT TYPE="text" NAME="birthday" SIZE=40&gt;
&lt;P&gt;
&lt;INPUT TYPE="submit" VALUE="Submit Form!"&gt;
&lt;INPUT TYPE="reset"  VALUE="Clear Form"&gt;
&lt;/FORM&gt;
&lt;HR&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>
</DIV>

<p class=para>
When the user submits the form, the client issues the following
request to the server (assuming the user entered 11/05/73):

<div class=screen>
<p>
<pre>
POST /cgi-bin/birthday.pl HTTP/1.0
.
. (information)
.
Content-length: 21
birthday=11%2F05%2F73
</PRE>
</DIV>

<p class=para>
In the encoded form, certain characters, such as spaces and
other character symbols, are replaced by their hexadecimal equivalents.
In this example, our program needs to "decode" this data, by converting
the "%2F" to "/".

<p class=para>
Here is the CGI program-<i class=emphasis>birthday.pl</I>-that
handles this form:

<div class=screen>
<p>
<pre>
#!/usr/local/bin/perl
$size_of_form_information = $ENV{'CONTENT_LENGTH'};
read (STDIN, $form_info, $size_of_form_information);
</PRE>
</DIV>

<p class=para>
The following complicated-looking regular expression is used
to "decode" the data (see <a href="ch04_01.htm">Chapter 4, <i>Forms and CGI</i></A> for
a comprehensive explanation of how this works).

<div class=screen>
<p>
<pre>
$form_info =~ s/%([\dA-Fa-f][\dA-Fa-f])/pack ("C", hex ($1))/eg;
</PRE>
</DIV>

<p class=para>
In the case of this example, it will turn "%2F" into "/".
The rest of the program should be easy to follow:

<div class=screen>
<p>
<pre>
($field_name, $birthday) = split (/=/, $form_info);
print "Content-type: text/plain", "\n\n";
print "Hey, your birthday is on: $birthday. That's what you told me, right?", "\n";
  
exit (0);  
</PRE>
</DIV>

</DIV>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch02_02.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src="gifs/txthome.gif" alt="Home" border=0></a></td>
<td width=172 align=right valign=top><a href="ch02_04.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Using Environment Variables</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td>
<td width=172 align=right valign=top>Extra Path Information</td>
</tr>
</table>

<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
</DIV>

</BODY>
</HTML>
