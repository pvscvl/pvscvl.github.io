<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 8] Multiple Form Interaction</TITLE>
<meta name="author" content="Shishir Gundavaram">
<meta name="date" content="Mon Mar 17 13:32:21 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="cgi programming">
<meta name="title" content="CGI Programming on the World Wide Web">
<!-- JavaScript: pathcont.js -->

</HEAD>
<body bgcolor="#FFFFFF" text="#000000">

<div class=htmlnav>
<h1><img src="gifs/smbanner.gif" alt="CGI Programming on the World Wide Web"></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch07_04.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b>Chapter 8</b></td>
<td width=172 align=right valign=top><a href="ch08_02.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>
<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
<hr align=left width=515>
</DIV>
<h1 class=chapter><a class="TITLE" name="CGI-CHP-8">Multiple Form Interaction</A></H1>

<div class=htmltoc>

<p>
<b>Contents:</b><br>
Hidden Fields<br>
<a href="ch08_02.htm">CGI Side Includes</A><br>
<a href="ch08_03.htm">Netscape Persistent Cookies</A><br>

</DIV>

<p class=para>
One
of the problems with the current HTTP protocol
is its inability to maintain state. In other words, the protocol
provides no way to access data from previous requests.

<p class=para>
Imagine an ordering (or "shopping cart") system on the Web.
You present the user with several forms listing the numerous products
that can be ordered. The system keeps track of what the user ordered.
Finally, it displays all of the user's selections. This type of
system needs to somehow store the information-or "state"-so that
it can be accessed at a later time.

<p class=para>
For example, suppose you ask the user for his or her address
in the first form. If you need this information in a later form,
you don't want to ask all over again. Instead, you want to find
a way for that address to be accessible to a later form, but transparent
to the user. This is the most basic problem of using multiple forms-maintaining
"state" from one form to another-and thus deserves special attention
in this book.

<p class=para>
There are several different strategies we'll explore for maintaining
state. They include:

<p>
<ul class=itemizedlist>
<li class=listitem>Hidden fields. Using hidden fields,
you can embed information into a form that the user won't see, but
which will be sent back to the CGI program when the form is submitted.

<p>
<li class=listitem>CGI Side Includes. This is a mechanism by which
we embed special tags into the HTML document that pass CGI variables
invisibly.

<p>
<li class=listitem>Netscape Persistent Cookies. The Netscape browser
supplies a method for storing and retrieving information via CGI.

<p>
</UL>
<p class=para>
In <a href="ch10_01.htm">Chapter 10, <i>Gateways to Internet Information Servers</i></A>, we also discuss
a fourth approach, which is to develop a specialized "cookie server"
to maintain information associated with a single user. In this chapter,
however, we'll restrict ourselves to the more straightforward mechanisms.

<div class=sect1>
<h2 class=sect1><a class="TITLE" name="CGI-CHP-8-SECT-1">8.1 Hidden Fields</A></h2>

<p class=para>
As mentioned in <a href="ch04_01.htm">Chapter 4, <i>Forms and CGI</i></A>, hidden fields allow you to store "hidden" information
within a form. These fields are not displayed by the client. However,
if the user selects the "View Source" option in the browser, the
entire form is visible, including the hidden fields. Hidden fields
are therefore not meant for security (since anyone can see them),
but just for passing information to and from forms transparently.

<p class=para>
Here is an example of two hidden fields that store author
information within a form:

<div class=screen>
<p>
<pre>
&lt;FORM ACTION="/cgi-bin/test.pl" METHOD="POST"&gt;
.
.
&lt;INPUT TYPE="hidden" NAME="author"  VALUE="Larry Bird"&gt;
&lt;INPUT TYPE="hidden" NAME="company" VALUE="Boston Celtics"&gt;
.
.
&lt;/FORM&gt;
</PRE>
</DIV>

<p class=para>
When the form is submitted, the information within the hidden
fields is encoded, as the client passes all the fields to the server
in the same exact manner. As far as the CGI program is concerned,
there is no difference between hidden fields and regular, visible
fields.

<p class=para>
One thing to note is that certain browsers may not be able
to handle hidden fields correctly.

<p class=para>
A simple way to use hidden fields for maintaing state involves
writing the information from a form as hidden field information
into its successive form. Here is a simple first form:

<div class=screen>
<p>
<pre>
&lt;FORM ACTION="/cgi-bin/test.pl" METHOD="POST"&gt;
Name: &lt;INPUT TYPE="text"  NAME="01 Full Name" SIZE=40&gt;
&lt;BR&gt;
EMail: &lt;INPUT TYPE="text" NAME="02 EMail" SIZE=40&gt;
&lt;BR&gt;
&lt;INPUT TYPE="submit" VALUE="Submit the survey"&gt;
&lt;INPUT TYPE="reset"  VALUE="Clear all fields"&gt;
&lt;/FORM&gt;
</PRE>
</DIV>

<p class=para>
When this form is submitted, the program retrieves the information
and creates a dynamic second form, based on the first form, like
this:

<div class=screen>
<p>
<pre>
&lt;FORM ACTION="/cgi-bin/test.pl" METHOD="POST"&gt;
&lt;INPUT TYPE="hidden" NAME="01 Full Name" VALUE="Shishir Gundavaram"&gt;
&lt;INPUT TYPE="hidden" NAME="02 EMail" VALUE="shishir@acs.bu.edu"&gt;
What is your favorite WWW browser?
&lt;BR&gt;
Browser: &lt;INPUT TYPE="text" NAME="03 Browser" SIZE=40&gt;
&lt;BR&gt;
&lt;INPUT TYPE="submit" VALUE="Submit the survey"&gt;
&lt;INPUT TYPE="reset"  VALUE="Clear all fields"&gt;
&lt;/FORM&gt;
</PRE>
</DIV>

<p class=para>
As you can see, the two fields, along with the user information,
are inserted into the second form. The main advantage of such a
process is that there is no need for magic cookies and temporary
files. On the other hand, the disadvantage is that the form information
is appended repeatedly to successive forms, creating large forms.
This could result in possible 
performance problems.

<p class=para>
Let's look at an example using this technique. Here is the
first form:

<div class=screen>
<p>
<pre>
&lt;HTML&gt;
&lt;HEAD&gt;&lt;TITLE&gt;Welcome to the CGI Shopping Cart&lt;/TITLE&gt;&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;H1&gt;CGI Shopping Cart&lt;/H1&gt;
Welcome! Thanks for stopping by the CGI Shopping Cart. Here is a list
of some of our products. We hope you like them, and please visit again.
&lt;FORM ACTION="/cgi-bin/shopping.pl/catalog.html" METHOD="POST"&gt;
&lt;HR&gt;
What is your full name: &lt;BR&gt;
&lt;INPUT TYPE="text" NAME="01 Full Name" SIZE=40&gt;
&lt;P&gt;
What is your e-mail address: &lt;BR&gt;
&lt;INPUT TYPE="text" NAME="02 Email" SIZE=40&gt;
&lt;P&gt;
&lt;INPUT TYPE="submit" VALUE="Submit and Retrieve Catalog"&gt;
&lt;INPUT TYPE="reset"  VALUE="Clear all fields"&gt;
&lt;/FORM&gt;
&lt;/BODY&gt;&lt;/HTML&gt;
</PRE>
</DIV>

<p class=para>
The most important thing to note here is the 
extra path
information passed to the program. This filename represents the
next form to be displayed. The two fields in this form will be "hidden"
in <i class=emphasis>/catalog.html</I>. Now, here is the second form:

<div class=screen>
<p>
<pre>
&lt;HTML&gt;
&lt;HEAD&gt;&lt;TITLE&gt;Welcome to the CGI Shopping Cart&lt;/TITLE&gt;&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;H1&gt;CGI Shopping Cart&lt;/H1&gt;
Thanks for visiting out server. Here is a catalog of some of our books.
Make your selections and press the submit buttons. Note: multiple
selections are allowed.
&lt;HR&gt;
&lt;FORM ACTION="/cgi-bin/shopping.pl" METHOD="POST"&gt;
&lt;H2&gt;Books on Networking&lt;/H2&gt;
&lt;SELECT NAME="03 Networking Books" SIZE=3 MULTIPLE&gt;
&lt;OPTION SELECTED&gt;Managing Internet Information Services
&lt;OPTION&gt;TCP/IP Network Administration
&lt;OPTION&gt;Linux Network Administrator's Guide
&lt;OPTION&gt;Managing UUCP and Usenet
&lt;OPTION&gt;The USENET Handbook
&lt;/SELECT&gt;
&lt;HR&gt;
&lt;H2&gt;UNIX related Books&lt;/H2&gt;
&lt;SELECT NAME="04 UNIX Books" SIZE=3 MULTIPLE&gt;
&lt;OPTION SELECTED&gt;Learning the UNIX Operating System
&lt;OPTION&gt;Learning the Korn Shell
&lt;OPTION&gt;UNIX Power Tools
&lt;OPTION&gt;Learning Perl
&lt;OPTION&gt;Programming Perl
&lt;OPTION&gt;Learning the GNU Emacs
&lt;/SELECT&gt;
&lt;INPUT TYPE="submit" VALUE="Submit the selection"&gt;
&lt;INPUT TYPE="reset"  VALUE="Clear all fields"&gt;
&lt;/FORM&gt;
&lt;/BODY&gt;&lt;/HTML&gt;
</PRE>
</DIV>

<p class=para>
The ACTION attribute does not contain
extra path information. This represents the last form in the "shopping
cart." Also note the fact that there is a scrolled list that allows
multiple selections. The program displays any form element that
has multiple selection in a unique way.

<p class=para>
The program begins as follows:

<div class=screen>
<p>
<pre>
#!/usr/local/bin/perl
$webmaster = "shishir\@bu\.edu";
$document_root = "/home/shishir/httpd_1.4.2/public";
$request_method = $ENV{'REQUEST_METHOD'};
$form_file = $ENV{'PATH_INFO'};
$full_path = $document_root . $form_file;
$exclusive_lock = 2;
$unlock = 8;
if ($request_method eq "GET") {
    if ($form_file) {
        &amp;display_file ();
    } else {
        &amp;return_error (500, "CGI Shopping Cart Error",
                            "An initial form must be specified.");
    }
</PRE>
</DIV>

<p class=para>
If the program was requested with the GET
protocol and extra path information, the <i class=emphasis>display_file</I>
subroutine is called to output the form. The program should be accessed
with the following URL:

<div class=screen>
<p>
<pre>
http://your.machine/cgi-bin/shopping.pl/start.html
</PRE>
</DIV>

<p class=para>
where <i class=emphasis>/start.html</I> represents the first
form. If no path information is specified, an error message is returned.

<div class=screen>
<p>
<pre>
} elsif ($request_method eq "POST") {
    &amp;parse_form_data (*STATE);
    if ($form_file) {
        &amp;parse_file ();
    } else {
        &amp;thank_you ();
    }
</PRE>
</DIV>

<p class=para>
If extra path information is passed to this program with the
POST method, the <i class=emphasis>parse_file</I>
subroutine is invoked.
 This subroutine inserts the information
from the previous form(s) into the current form as hidden fields.
Remember, the form information is stored in the <i class=emphasis>STATE</I>
associative array. On the other hand, if no path information is
specified, it is the end of the data collection process. The <i class=emphasis>thank_you</I>subroutine displays the information from all the forms.

<div class=screen>
<p>
<pre>
} else {
    &amp;return_error (500, "Server Error",
                        "Server uses unsupported method");
}
exit (0);
</PRE>
</DIV>

<p class=para>
The <i class=emphasis>display_file</I> subroutine simply outputs
the first form to standard output.

<div class=screen>
<p>
<pre>
sub display_file
{
    open (FILE, "&lt;" . $full_path) || 
        &amp;return_error (500, "CGI Shopping Cart Error",
            "Cannot read from the form file [$full_path].");
    flock (FILE, $exclusive_lock);
    print "Content-type: text/html", "\n\n";
    while (&lt;FILE&gt;) {
        print;
    }
    flock (FILE, $unlock);
    close (FILE);    
}
</PRE>
</DIV>

<p class=para>
The <i class=emphasis>parse_file</I> subroutine inserts information
from previous forms into the current form, as hidden fields.

<div class=screen>
<p>
<pre>
sub parse_file
{
    local ($key, $value);
    open (FILE, "&lt;" . $full_path) ||
        &amp;return_error (500, "CGI Shopping Cart Error",
            "Cannot read from the form file [$full_path].");
    flock (FILE, $exclusive_lock);
    print "Content-type: text/html", "\n\n";
    while (&lt;FILE&gt;) {
        if (/&lt;\s*form\s*.*&gt;/i) {
            print;
            foreach $key (sort (keys %STATE)) {
                $value = $STATE{$key};
                print &lt;&lt;End_of_Hidden;
&lt;INPUT TYPE="hidden" NAME="$key" VALUE="$value"&gt;    
End_of_Hidden
            }
</PRE>
</DIV>

<p class=para>
The file specified by PATH_INFO is opened.
The <i class=emphasis>while</I> loop iterates through the file one
line at a time. The regular expression checks for the &lt;FORM&gt;
tag within the document. If it is found, the line containing the
tag is displayed. Also, the <i class=emphasis>foreach</I> construct
iterates through all of the key-value form pairs, and outputs a
hidden field for each one.

<div class=screen>
<p>
<pre>
        } else {
            print;
        }
    }    
</PRE>
</DIV>

<p class=para>
If the &lt;FORM&gt; tag is not found, the
line from the file is output verbatim.

<div class=screen>
<p>
<pre>
    flock (FILE, $unlock);
    close (FILE);
}
</PRE>
</DIV>

<p class=para>
The<i class=emphasis> thank_you</I> subroutine thanks the user
and displays the data he or she selected.

<div class=screen>
<p>
<pre>
sub thank_you
{
    local ($key, $value, @all_values);
    print &lt;&lt;Thanks;
Content-type: text/html
&lt;HTML&gt;
&lt;HEAD&gt;&lt;TITLE&gt;Thank You!&lt;/TITLE&gt;&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;H1&gt;Thank You!&lt;/H1&gt;
Thank you again for using our service. Here are the items
that you selected: 
&lt;HR&gt;
&lt;P&gt;
Thanks
</PRE>
</DIV>

<p class=para>
This subroutine formats and displays the information stored
in the STATE associative array, which represents
the combined data from all the forms.

<div class=screen>
<p>
<pre>
    foreach $key (sort (keys %STATE)) {
        $value = $STATE{$key};
        $key =~ s/^\d+\s//;
        if ($value =~ /\0/) {
            print "&lt;B&gt;", $key, "&lt;/B&gt;", "&lt;BR&gt;", "\n";
            $value =~ s/\0/&lt;BR&gt;\n/g;
            print $value, "&lt;BR&gt;", "\n";
</PRE>
</DIV>

<p class=para>
If a particular value contains a null string, it is replaced
with "
&lt;BR&gt;" followed by a newline
character. As a result, the multiple values are displayed properly.

<div class=screen>
<p>
<pre>
        } else {
            print $key, ": ", $value, "&lt;BR&gt;", "\n";
        }
    }
    print "&lt;HR&gt;", "\n";
    print "&lt;/BODY&gt;&lt;/HTML&gt;", "\n";
}
</PRE>
</DIV>

<p class=para>
The <i class=emphasis>parse_form_data</I> subroutine is similar
to the one used in the "survey" program above, except it does not
handle any query information.

<div class=screen>
<p>
<pre>
sub parse_form_data
{
    local (*FORM_DATA) = @_;
    
    local ($query_string, @key_value_pairs, $key_value, $key, $value);
    
    read (STDIN, $query_string, $ENV{'CONTENT_LENGTH'});
    @key_value_pairs = split (/&amp;/, $query_string);
    foreach $key_value (@key_value_pairs) {
        ($key, $value) = split (/=/, $key_value);
        $key   =~ tr/+/ /;
        $value =~ tr/+/ /;
        $key   =~ s/%([\dA-Fa-f][\dA-Fa-f])/pack ("C", hex ($1))/eg;
        $value =~ s/%([\dA-Fa-f][\dA-Fa-f])/pack ("C", hex ($1))/eg;
        if (defined($FORM_DATA{$key})) {
            $FORM_DATA{$key} = join ("\0", $FORM_DATA{$key}, $value);
        } else {
            $FORM_DATA{$key} = $value;
        }
    }
}  
</PRE>
</DIV>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch07_04.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src="gifs/txthome.gif" alt="Home" border=0></a></td>
<td width=172 align=right valign=top><a href="ch08_02.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Security</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td>
<td width=172 align=right valign=top>CGI Side Includes</td>
</tr>
</table>

<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
</DIV>

</BODY>
</HTML>
