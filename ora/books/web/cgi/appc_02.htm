<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Appendix C] C.2 Form Creation and Parsing</TITLE>
<meta name="author" content="Shishir Gundavaram">
<meta name="date" content="Mon Mar 17 13:38:41 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="cgi programming">
<meta name="title" content="CGI Programming on the World Wide Web">
<!-- JavaScript: pathcont.js -->

</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><img src="gifs/smbanner.gif" alt="CGI Programming on the World Wide Web"></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="appc_01.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b>Appendix C</b></td>
<td width=172 align=right valign=top><a href="appd_01.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>
<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="CGI-APP-C-SECT-2">C.2 Form Creation and Parsing</A></h2>

<p class=para>
Here is a simple example that creates a form and
parses the data using the modules that we've just discussed. The
dynamic form that is output by the program is shown in Figure C-1.

<div class=figure>
<h4 class=figure><a class="TITLE" name="CGI-APP-C-FIG-1">Figure C-1: Form created from Perl 5 modules</A></h4>


<p>
<img alignindex.html=middle webstripperattrwas="src" webstripperlinkwas="http://rtfm.vn.ua/prog/perl/orb/books/web/cgi/figs/cgic01.gif" alt="[Graphic: Figure C-1]" width=500 height=492>

</DIV>

<p class=para>
Now, let's look at the program:

<div class=screen>
<p>
<pre>
#!/usr/local/bin/perl5
use CGI::Form;
use CGI::Response qw(:Simple);
use CGI::Carp;
</PRE>
</DIV>

<p class=para>
Before we can use any of the methods in the CGI modules, we
have to import them into our program. In the case of <i class=emphasis>CGI::Response</I>,
some of the "simple" methods, such as those that output the <i class=command>Content-type</i>
and <i class=command>Pragma</i> HTTP headers, are
not exported by the module so we have to literally specify it.

<div class=screen>
<p>
<pre>
print NoCache ();
</PRE>
</DIV>

<p class=para>
The <i class=emphasis>NoCache</I>
method from the <i class=emphasis>CGI::Response</I> class outputs
the following header information:

<div class=screen>
<p>
<pre>
Pragma: no-cache
Content-Type: text/html
Expires: Mon, 29 Jan 1996 00:53:49 GMT
</PRE>
</DIV>

<p class=para>
which instructs the server that HTML data
is about to follow, and that it should not cache the document.

<div class=screen>
<p>
<pre>
$cgi_form = new CGI::Form ();
$user = $cgi_form-&gt;param ('name');	
</PRE>
</DIV>

<p class=para>
We create a new instance of the <i class=emphasis>Form</I>
object and store it in <i class=emphasis>$cgi_form</I>. Then, we
retrieve the value for the form field labeled <i class=emphasis>name</I>
so that we can use it to personalize the title of the document for
successive forms.

<p class=para>
Here we see an example of inheritance. The <i class=emphasis>param</I> method is implemented in the
<i class=emphasis>CGI::Request</I> module, which is inherited by
<i class=emphasis>CGI::Form</I>. As a result, we can access the method
as though it was part of <i class=emphasis>CGI::Form</I>.

<div class=screen>
<p>
<pre>
if ($user) {
    $remote_user = "Welcomes $user";
} else {
    $remote_user = join (" ", "- Welcome from", $cgi_form-&gt;cgi-&gt;var ("REMOTE_HOST"));
}
</PRE>
</DIV>

<p class=para>
Here, we set the <i class=emphasis>$remote_user</I> variable
to a welcome message. If the <i class=emphasis>$user</I> variable
is not defined, we use the remote host name instead. Here is another
interesting call. The <i class=emphasis>cgi</I> method is implemented
in the <i class=emphasis>CGI::Request</I> module and interfaces with
<i class=emphasis>CGI::Base</I>. The <i class=emphasis>var</I> method
is defined in <i class=emphasis>CGI::Base</I> and returns the value
of a specific environment variable.

<div class=screen>
<p>
<pre>
print &lt;&lt;Start_HTML;
&lt;HTML&gt;
&lt;HEAD&gt;&lt;TITLE&gt;Welcome to Shishir's Track &amp; Field Emporium&lt;/TITLE&gt;&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;H1&gt;Track and Field $remote_user&lt;/H1&gt;
&lt;HR&gt;
Start_HTML
&amp;display_form ($cgi_form);
print &lt;&lt;End_HTML;
&lt;HR&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
End_HTML
exit (0);
</PRE>
</DIV>

<p class=para>
We output the header and footer with a form in between. The
form is created by the <i class=emphasis>display_form</I> subroutine,
which expects an instance of the <i class=emphasis>CGI::Form</I>
class.

<p class=para>
The <i class=emphasis>display_form</I> subroutine creates a
form by calling several methods in the <i class=emphasis>CGI::Form</I>
class. Not only do these methods output the necessary HTML
to create the form, but they also check to see if there is any form
data that is being passed to the program, and use that data as default
information for the various fields-providing that the field (names)
are the same. This is actually an example that saves state, and
works as a result of setting the ACTION attribute
on the form to point back to this script; there is always data passed
to the program if the user submits the form.

<div class=screen>
<p>
<pre>
sub display_form 
{
    local ($form) = @_;
</PRE>
</DIV>

<p class=para>
Here the <i class=emphasis>$form</I> refers to an instance
of the <i class=emphasis>CGI::Form</I> object that we created earlier.

<div class=screen>
<p>
<pre>
    print $form-&gt;startform ();
    print "Name: ";
    print $form-&gt;textfield ('name'), "&lt;BR&gt;", "\n";
    print "E-Mail Address: ";
    print $form-&gt;textfield ('email'), "&lt;BR&gt;", "\n";
</PRE>
</DIV>

<p class=para>
The <i class=emphasis>startform</I>
method outputs the necessary &lt;FORM&gt; tag to
start the form. The <i class=emphasis>startform</I> method uses a
default ACTION of the current script, and a default
METHOD of POST.

<p class=para>
The <i class=emphasis>textfield</I>
method creates a text field. If the form data passed to this program
has a field titled <i class=emphasis>name</I>, the method will use
the passed-in value as a default. In other words, this is what it
does (assume that form data is stored in the <i class=emphasis>%FORM</I>
associative array):

<div class=screen>
<p>
<pre>
$value = $FORM{'email'};
print qq|&lt;INPUT TYPE="text" NAME="email" VALUE="$value"&gt;|;
</PRE>
</DIV>

<p class=para>
This results in form fields containing data from the previous
request (or state). The <i class=emphasis>CGI::Form</I> object uses
the <i class=emphasis>param</I> method from the <i class=emphasis>CGI::Request</I>
module to retrieve the value for a specific form field.

<div class=screen>
<p>
<pre>
    print "&lt;P&gt;", "Snail Mail Address: ";
    print $form-&gt;textarea ('address', undef, 5, 40);
</PRE>
</DIV>

<p class=para>
Here we create a <i class=emphasis>textarea</I> titled "address"
with a size of 5 rows and 40 columns. The second argument to the
<i class=emphasis>textarea</I> method is used for placing default
information within a text area.

<div class=screen>
<p>
<pre>
    print "&lt;P&gt;", "What would you like to receive: ", "&lt;BR&gt;";
    print $form-&gt;checkbox_group (-name      =&gt; 'want',
                                 -values    =&gt; ['Latest Catalog',
                                              'Up-to-date Track News',
                                              'Catalog Specials'],
                                 -default   =&gt; 'Latest Catalog',
                                 -linebreak =&gt; 'true');
</PRE>
</DIV>

<p class=para>
See how easy it is to create a group of 
checkboxes?
The labels for each checkbox default to the specified values. However,
you can pass a "-labels" argument if you want the labels to be different
than the values.

<div class=screen>
<p>
<pre>
    print "&lt;P&gt;", "Where do you live: ", "&lt;BR&gt;";
    print $form-&gt;radio_group (-name      =&gt; 'where',
                              -values    =&gt; ['North America', 
                                             'South America', 
                                             'Europe',
                                             'Australia',
                                             'Antartica'],
                               -default   =&gt; 'North America',
                               -linebreak =&gt; 'true');
   print "&lt;P&gt;", "What type of events do you participate in: ", "&lt;BR&gt;";
   print $form-&gt;popup_menu (-name    =&gt; 'events',
                            -values  =&gt; ['Sprints', 
                                         'Middle Distance', 
                                         'Distance',
                                         'Field Events', 
                                         'Throws'],
                             -default =&gt; 'Sprints');
</PRE>
</DIV>

<p class=para>
<p class=para>
Radio buttons and popup menus are created in much the same
way as checkboxes.

<div class=screen>
<p>
<pre>
    if ( ($form-&gt;param ('events') eq "Sprints") &amp;&amp; ($form-&gt;param ('send_entry')) ) {
        if ($user) {
	            warn "Shishir, $user is a sprinter!! Yahoo!\n";
	        } else {
	            warn "Shishir, we have an *anonymous* sprinter here!\n";
       	 }
    }
</PRE>
</DIV>

<p class=para>
We use the <i class=emphasis>param</I> method to check the
value of the events and <i class=emphasis>send_entry</I> fields.
If our check is successful, we call the <i class=emphasis>warn</I>
statement, which will output a message to the server log file in
the following format:

<div class=screen>
<p>
<pre>
[Mon Jan 29 15:07:25 1996] simple.pl: Shishir, Jan Apell is a sprinter!! Yahoo!
</PRE>
</DIV>

<p class=para>
Now, let's finish off the program.

<div class=screen>
<p>
<pre>
    print "&lt;P&gt;";
    print $form-&gt;reset ();
    print $form-&gt;defaults ();
    print $form-&gt;submit ('send_entry', 'Submit');
    print $form-&gt;endform ();
}
</PRE>
</DIV>

<p class=para>
The <i class=emphasis>reset</I>, <i class=emphasis>defaults,</I>
and <i class=emphasis>submit</I> methods create different type of
buttons. <i class=emphasis>reset</I> allows you to clear the values
in the current form and display values from the previous state (or
session). The <i class=emphasis>defaults</I> button clears the form
entirely. And the submit
method creates a Submit button for you to send the data to the server.

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="appc_01.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src="gifs/txthome.gif" alt="Home" border=0></a></td>
<td width=172 align=right valign=top><a href="appd_01.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Overview of Modules</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td>
<td width=172 align=right valign=top>CGI Lite</td>
</tr>
</table>

<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
</DIV>

</BODY>
</HTML>
