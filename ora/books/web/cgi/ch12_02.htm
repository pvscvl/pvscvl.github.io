<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 12] 12.2 Programming/System Errors</TITLE>
<meta name="author" content="Shishir Gundavaram">
<meta name="date" content="Mon Mar 17 13:36:59 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="cgi programming">
<meta name="title" content="CGI Programming on the World Wide Web">
<!-- JavaScript: pathcont.js -->

</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><img src="gifs/smbanner.gif" alt="CGI Programming on the World Wide Web"></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch12_01.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b>Chapter 12</b></td>
<td width=172 align=right valign=top><a href="ch12_03.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>
<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="CGI-CHP-12-SECT-2">12.2 Programming/System Errors</A></h2>

<p class=para>
Now
that we have looked at some of the common errors in CGI application
design, let's focus on programming errors that can cause unexpected
results. There is one extremely important point that you should
be aware of:

<p class=para>
<i class=emphasis>Always check the return value of all the system
commands, including eval, open, and system. </I>

<p class=para>
What does this mean? The next few sections will describe some
of the programming errors that occur frequently if you are not careful.

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="CGI-CHP-12-SECT-2.1">Opening, Reading, and Writing Files</A></h3>

<p class=para>
Since the server is running as a user that
has minimal privileges (usually "nobody"), you must be careful when
reading from or writing to files. Here is an example:

<div class=screen>
<p>
<pre>
open (FILE, "&lt;" . "/usr/local/httpd_1.4.2/data");
while (&lt;FILE&gt;) {
    print;
}
close (FILE);
</PRE>
</DIV>

<p class=para>
Now, what if the file that you are trying to read is not accessible?
The file handle FILE will not be created, but
the while loop tries to iterate through that file handle. Fortunately,
Perl does not get upset, but you will not have any data. So, it
is always better to check the status of the <i class=emphasis>open</I>
command, like this:

<div class=screen>
<p>
<pre>
open (FILE, "&lt;" . "/usr/local/httpd_1.4.2/data") || 
    &amp;call_some_subroutine ("Oops! The read failed. We need to do something.");
</PRE>
</DIV>

<p class=para>
This will ensure that the subroutine <i class=emphasis>call_some_subroutine</I>
gets called if the script cannot open the file. Now, say you want
to write to an output file:

<div class=screen>
<p>
<pre>
open (FILE, "&gt;" . "/usr/local/httpd_1.4.2/data");
print FILE "Line 1", "\n;
print FILE "Line 2", "\n";
close (FILE);
</PRE>
</DIV>

<p class=para>
Again, you should check for the status of the <i class=emphasis>open</I>
command:

<div class=screen>
<p>
<pre>
open (FILE, "&gt;" . "/usr/local/httpd_1.4.2/data") ||
		&amp;call_some_subroutine ("Oops! The write failed. We need to do something.");
</PRE>
</DIV>

<p class=para>
This is true when doing such tasks as updating a database
or creating a counter data file. In order for the server to write
to a file, it has to have write privileges on the file as well as
the directories in which the file is located.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="CGI-CHP-12-SECT-2.2">Pipes and the open Command</A></h3>

<p class=para>
We used pipes to
perform data redirection in numerous examples in this book. Unlike
files, there is no easy way to check to see if the contents of the
pipe have been successfully executed. Let's take a look at a simple
example:

<div class=screen>
<p>
<pre>
open (FILE, "/usr/bin/cat /home/shishir/.login |") 
				|| &amp;call_some_subroutine ("Error opening pipe!");
while (&lt;FILE&gt;) {
    print;
}
close (FILE);
</PRE>
</DIV>

<p class=para>
If the <i class=emphasis>cat</I>
command cannot be found by the shell, you might expect that an error
status will be returned by the <i class=emphasis>open</I> command,
and thus the <i class=emphasis>call_some_subroutine</I> function
will be called. However, this is not the case. An error status will
be returned only if a pipe cannot be created (which is almost never
the case). Due to the way the shell operates, the status of the
command is available only after the file handle is closed. Here
is an example:

<div class=screen>
<p>
<pre>
open (FILE, "/usr/bin/cat /home/shishir/.login |") 
    || &amp;call_some_subroutine ("Error opening pipe!");
while (&lt;FILE&gt;) {
    print;
}
close (FILE);
if ($?) {
    &amp;call_some_subroutine ("Error in executing command!");
} 
</PRE>
</DIV>

<p class=para>
Once the file handle is closed, Perl saves the return status
in the variable <i class=emphasis>$?</I>. This is the method that
you should use for all system commands.

<p class=para>
There is another method for determining the status of the
pipe before the file handle is closed, though it is not always 100%
reliable. It involves checking the process ID (PID) of the process
that is spawned by the open command:

<div class=screen>
<p>
<pre>
$pid = open (FILE, "/usr/bin/cat /home/shishir/.login |");
sleep (2);
$status = kill 0, $pid;
if ($status) {
    while (&lt;FILE&gt;) {
        print;
    }
    close (FILE);
} else {
    &amp;call_some_subroutine ("Error opening pipe!");
}
</PRE>
</DIV>

<p class=para>
This is a neat trick! The <i class=emphasis>kill</I> statement with an argument of
0 checks the status of the process. If the process is alive, a value
of 1 is returned. Otherwise, a 0 is returned, which indicates that
the process is no longer alive. The <i class=emphasis>sleep</I> command
ensures a delay so that the value returned by <i class=emphasis>kill</I>
reflects the status of the process.

</DIV>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch12_01.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src="gifs/txthome.gif" alt="Home" border=0></a></td>
<td width=172 align=right valign=top><a href="ch12_03.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Common Errors</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td>
<td width=172 align=right valign=top>Environment Variables</td>
</tr>
</table>

<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
</DIV>

</BODY>
</HTML>
