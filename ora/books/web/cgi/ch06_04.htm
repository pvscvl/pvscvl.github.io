<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 6] 6.4 CGI Examples with gnuplot</TITLE>
<meta name="author" content="Shishir Gundavaram">
<meta name="date" content="Mon Mar 17 13:27:45 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="cgi programming">
<meta name="title" content="CGI Programming on the World Wide Web">
<!-- JavaScript: pathcont.js -->

</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><img src="gifs/smbanner.gif" alt="CGI Programming on the World Wide Web"></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch06_03.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b>Chapter 6</b></td>
<td width=172 align=right valign=top><a href="ch06_05.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>
<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="CGI-CHP-6-SECT-4">6.4 CGI Examples with gnuplot</A></h2>

<p class=para>
<i class=emphasis>gnuplot</I>
is a software application suited for graphing simple numerical information.
It has the ability to take raw data and create various types of
graphs, including point and line graphs and histograms. Let's take
a look at an example that illustrates the ease with which we can
produce graphs, especially when compared to PostScript and the <i class=emphasis>gd</I>
graphics library.

<p class=para>
You can get <i class=emphasis>gnuplot</I> from <i class=emphasis>ftp://prep.ai.mit.edu/pub/gnu/gnuplot-3.5.tar.gz.</I>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="CGI-CHP-6-SECT-4.1">Web Server Accesses</A></h3>

<p class=para>
The following
example plots the number of Web server accesses for every hour as
a histogram. The program parses through the server log file, keeping
track of the accesses for each hour of the day in an array. The
information stored in this array is written to a file in a format
that <i class=emphasis>gnuplot</I> can understand. We then call <i class=emphasis>gnuplot</I>
to graph the data in the file and output the resulting graphic to
a file.

<div class=screen>
<p>
<pre>
#!/usr/local/bin/perl
$webmaster = "shishir\@bu\.edu";
$gnuplot  = "/usr/local/bin/gnuplot";
$ppmtogif = "/usr/local/bin/pbmplus/ppmtogif";
$access_log = "/usr/local/bin/httpd_1.4.2/logs/access_log";
</PRE>
</DIV>

<p class=para>
The <i class=emphasis>gnuplot</I> utility, as of version v3.5,
cannot produce GIF images, but can output PBM (portable bitmap)
format files. We'll use the <i class=emphasis>ppmtogif</I> utility
to convert the output image from PBM to GIF. The <i class=emphasis>$access_log</I>
variable points to the NCSA server log file,
which we'll parse.

<div class=screen>
<p>
<pre>
$process_id = $$;
$output_ppm = join ("", "/tmp/", $process_id, ".ppm");
$datafile = join ("", "/tmp/", $process_id, ".txt");
</PRE>
</DIV>

<p class=para>
These variables are used to store the temporary files. The
<i class=emphasis>$$</I> variable refers to the number of the process
running this program, as it does in a shell script. I don't care
what process is running my program, but I can use the number to
create a filename that I know will be unique, even if multiple instances
of my program run. (Use of the process number for this purpose is
a trick that shell programmers have used for decades.) The process
identification is prefixed to each filename.

<div class=screen>
<p>
<pre>
$x = 0.6;
$y = 0.6;
$color = 1; 
</PRE>
</DIV>

<p class=para>
The size of the plot is defined to be 60% of the original
image in both the x and y directions. All lines in the graph will
be red (indicated by a value of 1).

<div class=screen>
<p>
<pre>
if ( open (FILE, "&lt;" . $access_log) ) {
    for ($loop=0; $loop &lt; 24; $loop++) {
    $time[$loop] = 0;
	}
</PRE>
</DIV>

<p class=para>
We open the NCSA server access log for
input. The format of each entry in the log is:

<div class=screen>
<p>
<pre>
host rfc931 authuser [DD/Mon/YY:hh:mm:ss] "request" status_code bytes
</PRE>
</DIV>

<p class=para>
where:

<p>
<ul class=itemizedlist>
<li class=listitem><i class=emphasis>host</I> is either
the DNS name or the IP address of the remote client

<p>
<li class=listitem><i class=emphasis>rfc931</I> is the remote user (only
if rfc931 authentication is enabled)

<p>
<li class=listitem><i class=emphasis>authuser</I> is the remote user
(only if NCSA server authentication is enabled)

<p>
<li class=listitem><i class=emphasis>DD/Mon/YY</I> is the day, month,
and year

<p>
<li class=listitem><i class=emphasis>hh:mm:ss</I> is 24 hour based time

<p>
<li class=listitem><i class=emphasis>"request"</I> is the first line
of the HTTP request

<p>
<li class=listitem><i class=emphasis>status_code</I> is the status identification
returned by the server

<p>
<li class=listitem><i class=emphasis>bytes</I> is the total number of
bytes sent (not including the HTTP header)

<p>
</UL>
<p class=para>
A 24-element array called <i class=emphasis>@time</I> is initialized.
This array will contain the number of accesses for each hour.

<div class=screen>
<p>
<pre>
	while (&lt;FILE&gt;) {
		if (m|\[\d+/\w+/\d+:([^:]+)|) {
			 $time[$1]++;
		}
	}
	close (FILE);
</PRE>
</DIV>

<p class=para>
In case you didn't believe me when I said in <a href="ch06_01.htm">Chapter 6, <i>Hypermedia Documents</i></A> that Perl offered superb facilities for CGI programming,
this tiny loop contains some proof of what I'm talking about. The
regular expression (containing some enhancements that only Perl
offers) neatly picks the hour out of the date/time string in the
access log by searching for the pattern "[DD/Mon/YY:h:", as follows:


<p>
<img aligindex.htmln=middle webstripperattrwas="src" webstripperlinkwas="http://rtfm.vn.ua/prog/perl/orb/books/web/cgi/figs/cgi0605.gif" alt="[Graphic: Figure from the text]" width=414 height=368>

<p class=para>
Back to the program. If a line matches the pattern, the array
element corresponding to the particular hour is incremented.

<div class=screen>
<p>
<pre>
	&amp;create_output_file();
</PRE>
</DIV>

<p class=para>
The subroutine <i class=emphasis>create_output_file</I> is
called to create and display the plot.

<div class=screen>
<p>
<pre>
} else {
    &amp;return_error (500, "Server Log File Error", "Cannot open NCSA server access log!");
}
exit(0);
</PRE>
</DIV>

<p class=para>
If the log file can't be opened, the return_error subroutine is called
to output an error.

<p class=para>
The <i class=emphasis>create_output_file</I> subroutine is
now defined. It creates a data file consisting of the information
in the <i class=emphasis>@time</I> array.

<div class=screen>
<p>
<pre>
sub create_output_file 
{
    local ($loop);
    if ( (open (FILE, "&gt;" . $datafile)) ) {
        for ($loop=0; $loop &lt; 24; $loop++) {
        print FILE $loop, " ", $time[$loop], "\n";
        }
        close (FILE);
		
        &amp;send_data_to_gnuplot();
    } else {
        &amp;return_error (500, "Server Log File Error", "Cannot write to data file!");
	}
}
</PRE>
</DIV>

<p class=para>
The file specified by the variable <i class=emphasis>$datafile</I>
is opened for output. The hour and the number of accesses for that
hour are written to the file. The hour represents the x coordinate,
while the number of accesses represents the y coordinate. The subroutine
<i class=emphasis>send_data_to_gnuplot</I> is called to execute <i class=emphasis>gnuplot</I>.

<div class=screen>
<p>
<pre>
sub send_data_to_gnuplot
{
    open (GNUPLOT, "|$gnuplot");
    print GNUPLOT &lt;&lt;gnuplot_Commands_Done;
</PRE>
</DIV>

<p class=para>
We're going to use the same technique we've used throughout
the chapter to embed a "language" within a Perl script: We'll open
a pipe to a program and write out commands in the language recognized
by the program. The <i class=emphasis>open</I> command starts <i class=emphasis>gnuplot</I>,
and the <i class=emphasis>print</I> command sends the data to <i class=emphasis>gnuplot</I>
through the pipe.

<div class=screen>
<p>
<pre>
    set term pbm color small
    set output "$output_ppm"
    set size $x, $y
    set title "WWW Server Usage"
    set xlabel "Time (Hours)"
    set ylabel "No. of Requests" 
    set xrange [-1:24]
    set xtics 0, 2, 23
    set noxzeroaxis
    set noyzeroaxis
    set border
    set nogrid
    set nokey
    plot "$datafile" w boxes $color
gnuplot_Commands_Done
close (GNUPLOT);
</PRE>
</DIV>

<p class=para>
Let's take a closer look at the commands that we send to <i class=emphasis>gnuplot</I>
through the pipe. The <i class=emphasis>set term</I> command sets
the format for the output file. In this case, the format is a color
PBM file with a small font for titles. You can even instruct <i class=emphasis>gnuplot</I>
to produce text graphs by setting the <i class=emphasis>term</I>
to "dumb."

<p class=para>
The output file is set to the filename stored in the variable
<i class=emphasis>$output_ppm</I>. The size of the image is set using
the <i class=emphasis>size</I> command. The title of the graph and
the labels for the x and y axes are specified with the <i class=emphasis>title</I>,
<i class=emphasis>xlabel</I>, and <i class=emphasis>ylabel</I> commands,
respectively. The range on the x axis is -1 to 24. Even though we
are dealing with data from 0 to 23 hours, the range is increased
because <i class=emphasis>gnuplot</I> graphs data near the axes abnormally.
The tick marks on the x axis range from 0 to 23 in increments of
two. The line representing the y axis is removed by the <i class=emphasis>noyzeroaxis</I>
command, which makes the graph appear neater. The same is true for
the <i class=emphasis>noxzeroaxis</I> command.

<p class=para>
The graph is drawn with a border, but without a grid or a
legend. Finally, the <i class=emphasis>plot</I> command graphs the
data in the file specified by the <i class=emphasis>$datafile</I>
variable with red boxes. Several different types of graphs are possible;
instead of boxes, you can try "lines" or "points."

<div class=screen>
<p>
<pre>
		&amp;print_gif_file_and_cleanup();
}
</PRE>
</DIV>

<p class=para>
The <i class=emphasis>print_gif_file_and_cleanup</I> subroutine
displays this image, and removes the temporary files.

<div class=screen>
<p>
<pre>
sub print_gif_file_and_cleanup
{
	$| = 1;
	print "Content-type: image/gif", "\n\n";
	system ("$ppmtogif $output_ppm 2&gt; /dev/null");
	unlink $output_ppm, $datafile;
}
</PRE>
</DIV>

<p class=para>
The <i class=emphasis>system</I>
command executes the <i class=emphasis>ppmtogif</I> utility to convert
the PBM image to GIF. This utility writes the output directly to
standard output.

<p class=para>
You might wonder what the <i class=emphasis>2&gt;</I> signifies.
Like most utilities, <i class=emphasis>ppmtogif</I>
prints some diagnostic information to standard error when transforming
the image. The <i class=emphasis>2&gt;</I> redirects standard error
to the null device (<i class=emphasis>/dev/null</I>), basically throwing
it away.

<p class=para>
Finally, we use the <i class=emphasis>unlink</I> command to
remove the temporary files that we've created.

<p class=para>
The image produced by this program is shown in
 <a href="#CGI-CHP-6-FIG-5">Figure 6.5</A>.

<div class=figure>
<h4 class=figure><a class="TITLE" name="CGI-CHP-6-FIG-5">Figure 6-5: gnuplot graph</A></h4>


<p>
<img aligindex.htmln=middle webstripperattrwas="src" webstripperlinkwas="http://rtfm.vn.ua/prog/perl/orb/books/web/cgi/figs/cgi0606.gif" alt="[Graphic: Figure 6-5]" width=414 height=368>

</DIV>

</DIV>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch06_03.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src="gifs/txthome.gif" alt="Home" border=0></a></td>
<td width=172 align=right valign=top><a href="ch06_05.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>The <i class=emphasis>gd</I> Graphics Library</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td>
<td width=172 align=right valign=top>CGI Examples with pgperl</td>
</tr>
</table>

<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
</DIV>

</BODY>
</HTML>
