<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 10] 10.9 Maintaining State with a Server</TITLE>
<meta name="author" content="Shishir Gundavaram">
<meta name="date" content="Mon Mar 17 13:35:09 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="cgi programming">
<meta name="title" content="CGI Programming on the World Wide Web">
<!-- JavaScript: pathcont.js -->

</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><img src="gifs/smbanner.gif" alt="CGI Programming on the World Wide Web"></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch10_08.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b>Chapter 10</b></td>
<td width=172 align=right valign=top><a href="ch10_10.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>
<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="CGI-CHP-10-SECT-9">10.9 Maintaining State with a Server</A></h2>

<p class=para>
In
<a href="ch08_01.htm">Chapter 8, <i>Multiple Form Interaction</i></A>,
we looked at several techniques for keeping track of information
between multiple forms. They involved using temporary files, hidden
variables, and Netscape Persistent Cookies. Now, we will look at
yet another method to keep state. This involves communicating with
a server-The Cookie Server-to store and retrieve information.

<p class=para>
It will help you understand how cookies work if you see real
programs use them. So we will examine a CGI program that displays
two forms, and that stores the information returned by calling the
cookie server. Here is the first form:

<div class=screen>
<p>
<pre>
&lt;HTML&gt;
&lt;HEAD&gt;&lt;TITLE&gt;College/School Survey&lt;/TITLE&gt;&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;H1&gt;Interests&lt;/H1&gt;
&lt;HR&gt;
&lt;FORM ACTION="/cgi-bin/cookie_client.pl?next=/location.html" METHOD="POST"&gt;
</PRE>
</DIV>

<p class=para>
The ACTION attribute specifies the next
form in the series as a query string. The filename is relative to
the document root directory.

<div class=screen>
<p>
<pre>
&lt;INPUT TYPE="hidden" NAME="Magic_Cookie" VALUE="-*Cookie*-"&gt;
</PRE>
</DIV>

<p class=para>
The string "-*Cookie*-" will be replaced by a random cookie
identifier when this form is parsed by the CGI program. This cookie
is used to uniquely identify the form information.

<div class=screen>
<p>
<pre>
What subject are you interested in? &lt;BR&gt;
&lt;INPUT TYPE="text" NAME="subject" SIZE=40&gt;
&lt;P&gt;
What extra-curricular activity do you enjoy the most? &lt;BR&gt;
&lt;INPUT TYPE="text" NAME="interest" SIZE=40&gt;
&lt;P&gt;
&lt;INPUT TYPE="submit" VALUE="See Next Form!"&gt;
&lt;INPUT TYPE="reset"  VALUE="Clear the form"&gt;
&lt;/FORM&gt;
&lt;HR&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>
</DIV>

<p class=para>
Here is the second form in the series. It should be stored
in a file named <i class=emphasis>location.html</I> because that
name was specified in the ACTION attribute of
the first form.

<div class=screen>
<p>
<pre>
&lt;HTML&gt;
&lt;HEAD&gt;&lt;TITLE&gt;College/School Survey&lt;/TITLE&gt;&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;H1&gt;Location&lt;/H1&gt;
&lt;HR&gt;
&lt;FORM ACTION="/cgi-bin/cookie_client.pl" METHOD="POST"&gt;
</PRE>
</DIV>

<p class=para>
Since this is the last form in the series, no query information
is passed to the program.

<div class=screen>
<p>
<pre>
&lt;INPUT TYPE="hidden" NAME="Magic_Cookie" VALUE="-*Cookie*-"&gt;
Where would you like to go to school? &lt;BR&gt;
&lt;INPUT TYPE="text" NAME="city" SIZE=40&gt;
&lt;P&gt;
What type of college do you prefer? &lt;BR&gt;
&lt;INPUT TYPE="text" NAME="type" SIZE=40&gt;
&lt;P&gt;
&lt;INPUT TYPE="submit" VALUE="Get Summary!"&gt;
&lt;INPUT TYPE="reset"  VALUE="Clear the form"&gt;
&lt;/FORM&gt;
&lt;HR&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>
</DIV>

<p class=para>
We will do something unusual in this example by not looking
at the program that handles these programs right away. Instead,
we will examine the cookie server-the continuously running program
that maintains state for CGI programs. Then, we will return to the
program that parses the forms-the cookie client-and see how it interacts
with the server.

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="CGI-CHP-10-SECT-9.1">Cookie Server</A></h3>

<p class=para>
Here I will show a general purpose server for CGI programs
running on the local systems. Each CGI program is a cookie client.
When it connects, this server enters a long loop accepting commands,
as we will see in a moment. Please note that this is not a CGI script.
Instead, it provides a data storage service for CGI scripts.

<div class=screen>
<p>
<pre>
#!/usr/local/bin/perl
require "sockets.pl";
srand (time|$$);
</PRE>
</DIV>

<p class=para>
The <i class=emphasis>srand</I>
function sets the random number seed. A logical OR of the current
time and the process identification number (PID) creates a very
good seed.

<div class=screen>
<p>
<pre>
$HTTP_server = "128.197.27.7";
</PRE>
</DIV>

<p class=para>
The IP address of the HTTP server from
where the CGI scripts will connect to this server is specified.
This is used to prevent CGI programs running on other HTTP
servers on the Web to communicate with this server.

<div class=screen>
<p>
<pre>
$separator = "\034";
$expire_time = 15 * 60;
</PRE>
</DIV>

<p class=para>
The <i class=emphasis>expire_time</I> variable sets the time
(in seconds) for which a cookie is valid. In this case, a cookie
is valid for 15 minutes.

<div class=screen>
<p>
<pre>
%DATA = ();
$max_cookies = 10;
$no_cookies = 0;
</PRE>
</DIV>

<p class=para>
The DATA associative array is used to hold
the form information. The <i class=emphasis>max_cookies</I> variable
sets the limit for the number of cookies that can be active at one
time. And the <i class=emphasis>no_cookies</I> variable is a counter
that keeps track of the number of active cookies.

<div class=screen>
<p>
<pre>
$error = 500;
$success = 200;
</PRE>
</DIV>

<p class=para>
These two variables hold the status codes for error and success,
respectively.

<div class=screen>
<p>
<pre>
$port = 5000;
&amp;listen_to_port (SOCKET, $port) || die "Cannot create socket.", "\n";
</PRE>
</DIV>

<p class=para>
The <i class=emphasis>listen_to_port</I>
function is part of the socket library. It "listens" on the specified
port for possible connections. In this case, port number 5000 is
used. However, if you do not know what port to set the server on,
you can ask the socket library to do it for you:

<div class=screen>
<p>
<pre>
( ($port) = &amp;listen_to_port (SOCKET) ) || die "Cannot create socket.", "\n";
print "The Cookie Server is running on port number: $port", "\n";
</PRE>
</DIV>

<p class=para>
If the <i class=emphasis>listen_to_port</I> function is called
in this manner (with one argument), an empty port is selected. You
will then have to modify the cookie client (see the next section)
to reflect the correct port number. Or, you can ask your system
administrator to create an entry in the <i class=emphasis>/etc/services</I>
file for the cookie server, after which the client can simply use
the name "cookie" to refer to the server.

<div class=screen>
<p>
<pre>
while (1) {
    ( ($ip_name, $ip_address) = &amp;accept_connection (COOKIE, SOCKET) )
        || die "Could not accept connection.", "\n";
</PRE>
</DIV>

<p class=para>
This starts an infinite loop that continually accepts connections.
When a connection is established, a new socket handle, COOKIE,
is created to deal with it, while the original file handle, SOCKET,
goes back to accept more connections. The <i class=emphasis>accept_connection</I>
subroutine returns the IP name and address of the remote host. In
our case, this will always point to the address of the HTTP
server, because the CGI program (or the client) is being executed
from that server.

<p class=para>
This cookie server, as implemented, can only "talk" to one
connection at a time. All other connections are queued up, and handled
in the order in which they are received. (Later on, we'll discuss
how to implement a server that can handle multiple connections simultaneously.)

<div class=screen>
<p>
<pre>
    select (COOKIE);
    $cookie = undef;
</PRE>
</DIV>

<p class=para>
The default output file handle is set to COOKIE.
The <i class=emphasis>cookie</I> variable is used to hold the current
cookie identifier.

<div class=screen>
<p>
<pre>
    if ($ip_address ne $HTTP_server) {
        &amp;print_status ($error, "You are not allowed to connect to server.");
</PRE>
</DIV>

<p class=para>
If the IP address of the remote host does not match the address
of the HTTP server, the connection is coming
from a host somewhere else. We do not want servers running on other
hosts connecting to this server and storing information, which could
result in a massive system overload! However, you can set this up
so that all machines within your domain can access this server to
store information.

<div class=screen>
<p>
<pre>
    } else {
        &amp;print_status ($success, "Welcome from $ip_name ($ip_address)");
</PRE>
</DIV>

<p class=para>
A welcome message is displayed if the connection is coming
from the right place (our HTTP server). The <i class=emphasis>print_status</I>
subroutine simply outputs the status number and the message to standard
output.

<div class=screen>
<p>
<pre>
        while (&lt;COOKIE&gt;) {
            s/[\000-\037]//g;
            s/^\s*(.*)\b\s*/$1/;
</PRE>
</DIV>

<p class=para>
The while loop accepts input from the socket continuously.
All control characters, as well as leading and trailing spaces,
are removed from the input. This server accepts the following commands:

<div class=screen>
<p>
<pre>
new remote-address
cookie cookie-identifier remote-address
key = value
list
delete
</PRE>
</DIV>

<p class=para>
We will discuss each of these in a moment.

<div class=screen>
<p>
<pre>
            if ( ($remote_address) = /^new\s*(\S+)$/) {
</PRE>
</DIV>

<p class=para>
The <i class=emphasis>new</I>
command creates a new and unique cookie and outputs it to the socket.
The remote address of the host that is connected to the HTTP
server should be passed as an argument to this command. This makes
it difficult for intruders to break the server, as you will see
in a minute. Here is an example of how this command is used, and
its typical output (with the client's command in bold):

<div class=screen>
<p>
<pre>
new www.test.net
200: 13fGK7KIlZSF2
</PRE>
</DIV>

<p class=para>
The status along with a unique cookie identifier is output.
The client should parse this line, get the cookie, and insert it
in the form, either as a query or a hidden variable.

<div class=screen>
<p>
<pre>
                if ($cookie) {
                    &amp;print_status ($error, 
									"You already have a cookie!");
</PRE>
</DIV>

<p class=para>
If the <i class=emphasis>cookie</I> variable is defined, an
error message is displayed. This would only occur if you try to
call the <i class=emphasis>new</I> command multiple times in the
same session.

<div class=screen>
<p>
<pre>
                } else {
                    if ($no_cookies &gt;= $max_cookies) {
                        &amp;print_status ($error, 
									    "Cookie limit reached.");
                    } else {
                        do {
                            $cookie = &amp;generate_new_cookie 
						            ($remote_address);
                        } until (!$DATA{$cookie});
</PRE>
</DIV>

<p class=para>
If a cookie is not defined for this session, and the number
of cookies is not over the pre-defined limit, the <i class=emphasis>generate_new_cookie</I>
subroutine is called to create a unique cookie.

<div class=screen>
<p>
<pre>
                        $no_cookies++;
                        $DATA{$cookie} = join("::", $remote_address,
                                                    $cookie, time);
                        &amp;print_status ($success, $cookie);
                    }
                }    
</PRE>
</DIV>

<p class=para>
Once a cookie is successfully created, the counter is incremented,
and a new key is inserted into the DATA associative
array. The value for this key is a string containing the remote
address (so we can check against it later), the cookie, and the
time (for expiration purposes).

<div class=screen>
<p>
<pre>
            } elsif ( ($check_cookie, $remote_address) = 
                /^cookie\s*(\S+)\s*(\S+)/) {
</PRE>
</DIV>

<p class=para>
The <i class=emphasis>cookie</I> command sets the cookie for
the session. Once you set a cookie, you can store information, list
the stored information, and delete the cookie. The cookie command
is generally used once you have a valid cookie (by using the <i class=emphasis>new</I>
command). Here is a typical cookie command:

<div class=screen>
<p>
<pre>
cookie 13fGK7KIlZSF2 www.test.net
200: Cookie 13fGK7KIlZSF2 set.
</PRE>
</DIV>

<p class=para>
The server will return a status indicating either success
or failure. If you try to set a cookie that does not exist, you
will get the following error message:

<div class=screen>
<p>
<pre>
cookie 6bseVEbhf74 www.test.net
500: Cookie does not exist.
</PRE>
</DIV>

<p class=para>
And if the IP address is not the same as the one that was
used when creating the cookie, this is what is displayed:

<div class=screen>
<p>
<pre>
cookie 13fGK7KIlZSF2 www.joe.net
500: Incorrect IP address.
</PRE>
</DIV>

<p class=para>
The program continues:

<div class=screen>
<p>
<pre>
                if ($cookie) {
                    &amp;print_status ($error, "You already specified a cookie.");
</PRE>
</DIV>

<p class=para>
If the <i class=emphasis>cookie</I> command is specified multiple
times in a session, an error message is output.

<div class=screen>
<p>
<pre>
            } else {
                if ($DATA{$check_cookie}) {
                    ($old_address) = split(/::/, $DATA{$check_cookie});
                             
                    if ($old_address ne $remote_address) {
                        &amp;print_status ($error, "Incorrect IP address.");
                    } else {
                        $cookie = $check_cookie;
                        &amp;print_status ($success, "Cookie $cookie set.");
                    }
                } else {
                    &amp;print_status ($error, "Cookie does not exist.");
                 }
            }
</PRE>
</DIV>

<p class=para>
If the cookie exists, the specified address is compared to
the original IP address. If everything is valid, the <i class=emphasis>cookie</I>
variable will contain the cookie.

<div class=screen>
<p>
<pre>
            } elsif ( ($variable, $value) = /^(\w+)\s*=\s*(.*)$/) {
</PRE>
</DIV>

<p class=para>
The regular expression checks for a statement that contains
a key and a value that is used to store the information.


<p>
<iindex.htmlmg align=middle webstripperattrwas="src" webstripperlinkwas="http://rtfm.vn.ua/prog/perl/orb/books/web/cgi/figs/exp1004.gif" alt="[Graphic: Figure from the text]" width=502 height=223>

<p class=para>
Here is a sample session where two variables are stored:

<div class=screen>
<p>
<pre>
cookie 13fGK7KIlZSF2 www.test.net
200: Cookie 13fGK7KIlZSF2 set.
name = Joe Test
200: name=Joe Test
organization = Test Net
200: organization=Test Net
</PRE>
</DIV>

<p class=para>
The server is stringent, and allows only variables composed
of alphanumeric characters (A-Z, a-z, 0-9, _).

<div class=screen>
<p>
<pre>
                if ($cookie) {
                    $key = join ($separator, $cookie, $variable);
                    $DATA{$key} = $value;
                    &amp;print_status ($success, "$variable=$value");
                } else {
                    &amp;print_status ($error, "You must specify a cookie.");
                }
</PRE>
</DIV>

<p class=para>
The variable name is concatenated with the cookie and the
separator to create the key for the associative array.

<div class=screen>
<p>
<pre>
            } elsif (/^list$/) {
                if ($cookie) {
                    foreach $key (keys %DATA) {
                        $string = join ("", $cookie, $separator);
                        if ( ($variable) = $key =~ /^$string(.*)$/) {
                            &amp;print_status ($success, "$variable=$DATA{$key}");
                        }
                    }
                    print ".", "\n";
                } else {
                    &amp;print_status ($error, "You don't have a cookie yet.");
                }
</PRE>
</DIV>

<p class=para>
The 
<i class=emphasis>list</I>
command displays all of the stored information by iterating through
the DATA associative array. Only keys that contain
the separator are output. In other words, the initial key containing
the cookie, the remote address, and the time is not displayed. Here
is the output from a <i class=emphasis>list</I> command:

<div class=screen>
<p>
<pre>
cookie 13fGK7KIlZSF2 www.test.net
200: Cookie 13fGK7KIlZSF2 set.
list
200: name=Joe Test
200: organization=Test Net
.
</PRE>
</DIV>

<p class=para>
The data ends with the "." character, so that the client can
stop reading at that point and an infinite loop is not created.

<div class=screen>
<p>
<pre>
            } elsif (/^delete$/) {
                if ($cookie) {
                    &amp;remove_cookie ($cookie);
                    &amp;print_status ($success, "Cookie $cookie deleted.");
                } else {
                    &amp;print_status ($error, "Select a cookie to delete.");
                }
</PRE>
</DIV>

<p class=para>
The <i class=emphasis>delete</I>
command removes the cookie from its internal database. The <i class=emphasis>remove_cookie</I>
subroutine is called to remove all information associated with the
cookie. Here is an example that shows the effect of the <i class=emphasis>delete</I>
command:

<div class=screen>
<p>
<pre>
cookie 13fGK7KIlZSF2 www.test.net
200: Cookie 13fGK7KIlZSF2 set.
list
200: name=Joe Test
200: organization=Test Net
.
delete
200: Cookie 13fGK7KIlZSF2 deleted.
list
.
</PRE>
</DIV>

<p class=para>
The program continues:

<div class=screen>
<p>
<pre>
            } elsif (/^exit|quit$/) {
                $cookie = undef;
                &amp;print_status ($success, "Bye.");
                last;
</PRE>
</DIV>

<p class=para>
The <i class=emphasis>exit</I> and <i class=emphasis>quit</I>
commands are used to exit from the server. The <i class=emphasis>cookie</I>
variable is cleared. This is very important! If it is not cleared,
the server will incorrectly assume that a cookie is already set
when a new connection is established. This can be dangerous, as
the new session can see the variables stored by the previous connection
by executing the <i class=emphasis>list</I> command.

<div class=screen>
<p>
<pre>
            } elsif (!/^\s*$/) {
                &amp;print_status ($error, "Invalid command.");
            }
        }
    }
</PRE>
</DIV>

<p class=para>
An error message is output if the specified command is not
among the ones listed.

<div class=screen>
<p>
<pre>
    &amp;close_connection (COOKIE);
    &amp;expire_old_cookies();
}
exit(0);
</PRE>
</DIV>

<p class=para>
The
connection between the server and the client is closed. The <i class=emphasis>expire_old_cookies</I>
subroutine removes any cookies (and the information associated with
them) that have expired. In reality, the cookies are not necessarily
expired after the predefined amount of time, but are checked (and
removed) when a connection terminates.

<p class=para>
The <i class=emphasis>print_status</I> subroutine simply displays
a status and the message.

<div class=screen>
<p>
<pre>
sub print_status
{
    local ($status, $message) = @_;
    print $status, ": ", $message, "\n";
}
</PRE>
</DIV>

<p class=para>
The generate_new_cookie subroutine generates a random and
unique cookie by using the <i class=emphasis>crypt</I> function to
encrypt a string that is based on the current time and the remote
address. The algorithm used in creating a cookie is arbitrary; you
can use just about any algorithm to generate random cookies.

<div class=screen>
<p>
<pre>
sub generate_new_cookie
{
    local ($remote) = @_;
    local ($random, $temp_address, $cookie_string, $new_cookie);
    $random = rand (time);
    ($temp_address = $remote) =~ s/\.//g;
    $cookie_string = join ("", $temp_address, time) / $random;
    $new_cookie = crypt ($cookie_string, $random);
    return ($new_cookie);
}
</PRE>
</DIV>

<p class=para>
The expire_old_cookies subroutine removes cookies after a
pre-defined period of time. The foreach loop iterates through the
associative array, searching for keys that do not contain the separator
(i.e., the original key). For each original key, the sum of the
creation time and the expiration time (in seconds) is compared with
the current time. If the cookie has expired, the <i class=emphasis>remove_cookie</I>
subroutine is called to delete the cookie.

<div class=screen>
<p>
<pre>
sub expire_old_cookies
{
    local ($current_time, $key, $cookie_time);
    $current_time = time;
    foreach $key (keys %DATA) {
        if ($key !~ /$separator/) {
            $cookie_time = (split(/::/, $DATA{$key}))[2];
            if ( $current_time &gt;= ($cookie_time + $expire_time) ) {
               &amp;remove_cookie ($key);
            }
        }
    }
}
</PRE>
</DIV>

<p class=para>
The remove_cookie subroutine deletes the cookie:

<div class=screen>
<p>
<pre>
sub remove_cookie
{
    local ($cookie_key) = @_;
    local ($key, $exact_cookie);
    $exact_cookie = (split(/::/, $DATA{$cookie_key}))[1];
    
    foreach $key (keys %DATA) {
        if ($key =~ /$exact_cookie/) {
            delete $DATA{$key};
        }
    }
    $no_cookies--;
}
</PRE>
</DIV>

<p class=para>
The loop iterates through the array, searches for all keys
that contain the cookie identifier, and deletes them. The counter
is decremented when a cookie is removed.

<p class=para>
Now, let's look at the CGI program that communicates with
this server to keep state.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="CGI-CHP-10-SECT-9.2">Cookie Client</A></h3>

<p class=para>
Let's
review what a cookie client is, and what it needs from a server.
A client is a CGI program that has to run many times for each user
(usually because it displays multiple forms and is invoked each
time by each form). The program needs to open a connection to the
cookie server, create a cookie, and store information in it. The
information stored for one form is retrieved later when the user
submits another form.

<div class=screen>
<p>
<pre>
#!/usr/local/bin/perl
require "sockets.pl";
$webmaster = "Shishir Gundavaram (shishir\@bu\.edu)";
$remote_address = $ENV{'REMOTE_ADDR'};
</PRE>
</DIV>

<p class=para>
The remote address of the host that is connected to this HTTP
server is stored. This information will be used to create unique
cookies.

<div class=screen>
<p>
<pre>
$cookie_server = "cgi.bu.edu";
$cookie_port = 5000;
$document_root = "/usr/local/bin/httpd_1.4.2/public";
$error = "Cookie Client Error";
&amp;parse_form_data (*FORM);
$start_form = $FORM{'start'};
$next_form = $FORM{'next'};
$cookie = $FORM{'Magic_Cookie'};
</PRE>
</DIV>

<p class=para>
Initially, the browser needs to pass a query to this program,
indicating the first form:

<div class=screen>
<p>
<pre>
http://some.machine/cgi-bin/cookie_client.pl?start=/interests.html
</PRE>
</DIV>

<p class=para>
All forms after that must contain a next query in the &lt;FORM&gt;
tag:

<div class=screen>
<p>
<pre>
&lt;FORM ACTION="/cgi-bin/cookie_client.pl?next=/location.html" METHOD="POST"&gt;
</PRE>
</DIV>

<p class=para>
The filename passed in the name query can be different for
each form. That is how the forms let the user navigate.

<p class=para>
Finally, there must be a hidden field in each form that contains
the cookie:

<div class=screen>
<p>
<pre>
&lt;INPUT TYPE="hidden" NAME="Magic_Cookie" VALUE="-*Cookie*-"&gt;
</PRE>
</DIV>

<p class=para>
This script will replace the string "-*Cookie*-" with a unique
cookie, retrieved from the cookie server. This identifier allows
one form to retrieve what another form has stored.

<p class=para>
One way to think of this cookie technique is this: The cookie
server stores all the data this program wants to save. To retrieve
the data, each run of the program just needs to know the cookie.
One instance of the program passes this cookie to the next instance
by placing it in the form. The form then sends the cookie to the
new instance of the program.

<div class=screen>
<p>
<pre>
if ($start_form) {
    $cookie = &amp;get_new_cookie ();
    &amp;parse_form ($start_form, $cookie);
</PRE>
</DIV>

<p class=para>
If the specified form is the first one in the series, the
<i class=emphasis>get_new_cookie</I> subroutine is called to retrieve
a new cookie identifier. And the <i class=emphasis>parse_form</I>
subroutine is responsible for placing the actual cookie in the hidden
field.

<div class=screen>
<p>
<pre>
} elsif ($next_form) {
    &amp;save_current_form ($cookie);
    &amp;parse_form ($next_form, $cookie);
</PRE>
</DIV>

<p class=para>
Either <i class=emphasis>$start_form</I> or <i class=emphasis>$next_form</I>
will be set, but the browser should not set both. There is only
one start to a session! If the form contains the next query, the
information within it is stored on the cookie server, which is accomplished
by the <i class=emphasis>save_current_form</I> subroutine.

<div class=screen>
<p>
<pre>
} else {
    if ($cookie) {
        &amp;last_form ($cookie);
    } else {
        &amp;return_error (500, $error,
                "You have executed this script in an invalid manner.");
    }
}
exit (0);
</PRE>
</DIV>

<p class=para>
Finally, if the form does not contain any query information,
but does contain a cookie identifier, the <i class=emphasis>last_form</I>
subroutine is called to display all of the stored information.

<p class=para>
That is the end of the main program. It simply lays out a
structure. If each form contains the correct start or next query,
the program will display everything when the user wants it.

<p class=para>
The open_and_check subroutine simply connects to the cookie
server and reads the first line (remove the trailing newline character)
that is output by the server. It then checks this line to make sure
that the server is functioning properly.

<div class=screen>
<p>
<pre>
sub open_and_check
{
    local ($first_line);
    &amp;open_connection (COOKIE, $cookie_server, $cookie_port)
        || &amp;return_error (500, $error, "Could not connect to cookie server.");
    chop ($first_line = &lt;COOKIE&gt;);
    if ($first_line !~ /^200/) {
        &amp;return_error (500, $error, "Cookie server returned an error.");
    }
}
</PRE>
</DIV>

<p class=para>
The get_new_cookie subroutine issues the <i class=emphasis>new</I>
command to the server and then checks the status to make sure that
a unique cookie identifier was output by the server.

<div class=screen>
<p>
<pre>
sub get_new_cookie
{
    local ($cookie_line, $new_cookie);
    &amp;open_and_check ();
    print COOKIE "new ", $remote_address, "\n";
    chop ($cookie_line = &lt;COOKIE&gt;);
    &amp;close_connection (COOKIE);
    if ( ($new_cookie) = $cookie_line =~ /^200: (\S+)$/) {
        return ($new_cookie);
    } else {
        &amp;return_error (500, $error, "New cookie was not created.");
    }
}
</PRE>
</DIV>

<p class=para>
The <i class=emphasis>parse_form</I> subroutine constructs
and displays a dynamic form. It reads the entire contents of the
form from a file, such as <i class=emphasis>location.html</I>. The
only change this subroutine makes is to replace the string "-*Cookie*-"
with the unique cookie returned by the cookie server. The form passes
the cookie as input data to the program, and the program passes
the cookie to the server to set and list data.

<div class=screen>
<p>
<pre>
sub parse_form
{
    local ($form, $magic_cookie) = @_;
    local ($path_to_form);
    if ($form =~ /\.\./){
        &amp;return_error (500, $error, "What are you trying to do?");
    }
    $path_to_form = join ("/", $document_root, $form);
    open (FILE, "&lt;" . $path_to_form)
        || &amp;return_error (500, $error, "Could not open form.");
    print "Content-type: text/html", "\n\n";
    while (&lt;FILE&gt;) {
        if (/-\*Cookie\*-/) {
            s//$magic_cookie/g;
        }
        print;
    }
    close (FILE);
}
</PRE>
</DIV>

<p class=para>
The save_current_form subroutine stores the form information
on the cookie server.

<div class=screen>
<p>
<pre>
sub save_current_form
{
    local ($magic_cookie) = @_;
    local ($ignore_fields, $cookie_line, $key);
    $ignore_fields = '(start|next|Magic_Cookie)';
    &amp;open_and_check ();
    print COOKIE "cookie $magic_cookie $remote_address", "\n";
    chop ($cookie_line = &lt;COOKIE&gt;);
</PRE>
</DIV>

<p class=para>
The <i class=emphasis>cookie</I> command is issued to the server
to set the cookie for subsequent add, delete, and list operations.

<div class=screen>
<p>
<pre>
    if ($cookie_line =~ /^200/) {
        foreach $key (keys %FORM) {
            next if ($key =~ /\b$ignore_fields\b/o);
        
            print COOKIE $key, "=", $FORM{$key}, "\n";
            chop ($cookie_line = &lt;COOKIE&gt;);
            if ($cookie_line !~ /^200/) {
                &amp;return_error (500, $error, "Form info. could not be stored.");
            }
        }
    } else {
        &amp;return_error (500, $error, "The cookie could not be set.");
    }
    &amp;close_connection (COOKIE);
}
</PRE>
</DIV>

<p class=para>
The foreach loop iterates through the associative array containing
the form information. All fields, with the exception of <i class=emphasis>start</I>,
<i class=emphasis>next</I>, and <i class=emphasis>Magic_Cookie</I>,
are stored on the cookie server. These fields are used internally
by this program, and are not meant to be stored. If the server cannot
store the information, it returns an error.

<p class=para>
The last_form subroutine is executed when the last form in
the series is being processed. The <i class=emphasis>list</I> command
is sent to the server. The <i class=emphasis>display_all_items</I>
subroutine reads and displays the server output in response to this
command. Finally, the cookie is deleted.

<div class=screen>
<p>
<pre>
sub last_form
{
    local ($magic_cookie) = @_;
    local ($cookie_line, $key_value, $key, $value);
    &amp;open_and_check ();
    print COOKIE "cookie $magic_cookie $remote_address", "\n";
    chop ($cookie_line = &lt;COOKIE&gt;);
    if ($cookie_line =~ /^200/) {
        print COOKIE "list", "\n";
        &amp;display_all_items ();
        print COOKIE "delete", "\n";
    } else {
        &amp;return_error (500, $error, "The cookie could not be set.");
    }
    &amp;close_connection (COOKIE);
}
</PRE>
</DIV>

<p class=para>
The display_all_items subroutine prints a summary of the user's
responses.

<div class=screen>
<p>
<pre>
sub display_all_items
{
    local ($key_value, $key, $value);
    print "Content-type: text/html", "\n\n";
    print "&lt;HTML&gt;", "\n";
    print "&lt;HEAD&gt;&lt;TITLE&gt;Summary&lt;/TITLE&gt;&lt;/HEAD&gt;", "\n";
    print "&lt;BODY&gt;", "\n";
    print "&lt;H1&gt;Summary and Results&lt;/H1&gt;", "\n";
    print "Here are the items/options that you selected:", "&lt;HR&gt;", "\n";
    while (&lt;COOKIE&gt;) {
        chop;
        last if (/^\.$/);
        $key_value = (split (/\s/, $_, 2))[1];
        ($key, $value) = split (/=/, $key_value);
        
        print "&lt;B&gt;", $key, " = ", $value, "&lt;/B&gt;", "&lt;BR&gt;", "\n";
    }
</PRE>
</DIV>

<p class=para>
The while loop reads the output from the server, and parses
and displays the key-value pair.

<div class=screen>
<p>
<pre>
    foreach $key (keys %FORM) {
        next if ($key =~ /^Magic_Cookie$/);
        print "&lt;B&gt;", $key, " = ", $FORM{$key}, "&lt;/B&gt;", "&lt;BR&gt;", "\n";
    }
        print "&lt;/BODY&gt;&lt;/HTML", "\n";
}
</PRE>
</DIV>

<p class=para>
The key-value pairs from this last form are also displayed,
since they are not stored on the server.

<p class=para>
Finally, the familiar <i class=emphasis>parse_form_data</I>
subroutine concatenates the key-value pairs from both the query
string (GET) and from standard input (POST),
and stores them in an associative array.

<div class=screen>
<p>
<pre>
sub parse_form_data
{
    local (*FORM_DATA) = @_;
    local ($query_string, @key_value_pairs, $key_value, $key, $value);
    read (STDIN, $query_string, $ENV{'CONTENT_LENGTH'});
    if ($ENV{'QUERY_STRING'}) {
            $query_string = join("&amp;", $query_string, $ENV{'QUERY_STRING'});
    }
    @key_value_pairs = split (/&amp;/, $query_string);
    foreach $key_value (@key_value_pairs) {
        ($key, $value) = split (/=/, $key_value);
        $key   =~ tr/+/ /;
        $value =~ tr/+/ /;
        $key   =~ s/%([\dA-Fa-f][\dA-Fa-f])/pack ("C", hex ($1))/eg;
        $value =~ s/%([\dA-Fa-f][\dA-Fa-f])/pack ("C", hex ($1))/eg;
        if (defined($FORM_DATA{$key})) {
            $FORM_DATA{$key} = join ("\0", $FORM_DATA{$key}, $value);
        } else {
            $FORM_DATA{$key} = $value;
        }
    }
}  
</PRE>
</DIV>

</DIV>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch10_08.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src="gifs/txthome.gif" alt="Home" border=0></a></td>
<td width=172 align=right valign=top><a href="ch10_10.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Magic Cookies</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td>
<td width=172 align=right valign=top>Forking/Spawning Child Processes</td>
</tr>
</table>

<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
</DIV>

</BODY>
</HTML>
