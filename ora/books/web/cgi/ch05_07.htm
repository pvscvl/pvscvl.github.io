<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 5] 5.7 Executing CGI Programs</TITLE>
<meta name="author" content="Shishir Gundavaram">
<meta name="date" content="Mon Mar 17 13:25:53 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="cgi programming">
<meta name="title" content="CGI Programming on the World Wide Web">
<!-- JavaScript: pathcont.js -->

</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><img src="gifs/smbanner.gif" alt="CGI Programming on the World Wide Web"></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch05_06.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b>Chapter 5</b></td>
<td width=172 align=right valign=top><a href="ch05_08.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>
<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="CGI-CHP-5-SECT-7">5.7 Executing CGI Programs</A></h2>

<p class=para>
You can use Server Side Includes to embed
the results of an entire CGI program into a static HTML
document, using the exec cgi directive.

<p class=para>
Why would you want to do this? There are many times when you
want to display just one piece of dynamic data, such as:

<div class=screen>
<p>
<pre>
This page has been accessed 4883 times since December 10, 1995. 
</PRE>
</DIV>

<p class=para>
Surely, you've seen this type of information in many documents
around the Web. Obviously, this information is being generated dynamically
(since it changes every time you access the document). We'll show
you a few examples of embedded CGI programs using SSI.

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="CGI-CHP-5-SECT-7.1">User Access Counter</A></h3>

<p class=para>
Suppose you have a simple CGI
program that keeps track of the number of visitors, called by the
<i class=emphasis>exec</I> SSI command in an HTML
document:

<div class=screen>
<p>
<pre>
This page has been accessed &lt;!--#exec cgi="/cgi-bin/counter.pl"--&gt; times.
</PRE>
</DIV>

<p class=para>
The idea behind an access counter is simple. A data file on
the server contains a count of the number of visitors that have
accessed a particular document. Whenever a user visits the document,
the SSI command in that document calls a CGI program that reads
the numerical value stored in the file, increments it, and writes
the new information back to the file and outputs it. Let's look
at the program:

<div class=screen>
<p>
<pre>
#!/usr/local/bin/perl
print "Content-type: text/plain", "\n\n";
$count_file = "/usr/local/bin/httpd_1.4.2/count.txt";
if (open (FILE, "&lt;" . $count_file)) {
		$no_accesses = &lt;FILE&gt;;
		close (FILE);
		if (open (FILE, "&gt;" . $count_file)) {
			$no_accesses++;
			print FILE $no_accesses;
			close (FILE);
			print $no_accesses;
		} else {
			print "[ Can't write to the data file! Counter not incremented! ]", "\n";
		}
} else {
		print "[ Sorry! Can't read from the counter data file ]", "\n";
}
exit (0);
</PRE>
</DIV>

<p class=para>
Since we are opening the data file from this program, we need
the full path to the file. We can then proceed to try to read from
the file. If the file cannot be opened, an error message is returned.
Otherwise, we read one line from the file using the 
&lt;FILE&gt;
notation, and store it in the variable <i class=emphasis>$no_accesses</I>.
Then, the file is closed. This is very important because you cannot
write to the file that was opened for reading.

<p class=para>
Once that's done, the file is opened again, but this time
in write mode, which creates a new file with no data. If that's
not successful, probably due to permission problems, an error message
stating that information cannot be written to the file is output.
If there are no problems, we increment the value stored in <i class=emphasis>$no_accesses</I>.
This new value is written to the file and printed to standard output.

<p class=para>
Notice how this program, like other CGI programs we've covered
up to this point, also outputs a <i class=command>Content-type</i>
HTTP header. In this case, a <i class=command>text/plain</i>
MIME content type is output by the program.

<p class=para>
An important thing to note is that a CGI program called by
an SSI directive cannot output anything other than text because
this data is embedded within an HTML or plain
document that invoked the directive. As a result, it doesn't matter
whether you output a content type of <i class=command>text/plain</i>
or <i class=command>text/html</i>, as the browser will interpret the
data within the scope of the calling document. Needless to say,
your CGI program cannot output graphic images or other binary data.

<p class=para>
This CGI program is not as sophisticated as it should be.
First, if the file does not exist, you will get an error if you
open it in read mode. So, you must put some initial value in the
file manually, and set permissions on the file so that the CGI program
can write to it:

<div class=screen>
<p>
<pre>
% echo "0" &gt; /usr/local/bin/httpd_1.4.2/count.txt
% chmod 666 /usr/local/bin/httpd_1.4.2/count.txt
</PRE>
</DIV>

<p class=para>
These shell commands write an initial value of "0" to the
<i class=emphasis>count.txt</I> file, and set the permissions so
that all processes can read from and write to the file. Remember,
the HTTP server is usually run by a process with
minimal privileges (e.g., "nobody" or "www"), so the permissions
on the data file have to be set so that this process can read and
write to it.

<p class=para>
The other major problem with this CGI program is that it does
not lock and unlock the counter data file. This is extremely important
when you are dealing with concurrent users accessing your document
at the same time. A good CGI program must try to lock a data file
when in use, and unlock it after it is done with processing. A more
advanced CGI program that outputs a graphic counter is presented
in <a href="ch06_01.htm">Chapter 6, <i>Hypermedia Documents</i></A>.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="CGI-CHP-5-SECT-7.2">Random Links</A></h3>

<p class=para>
You
can use the following CGI program to create a "random" hypertext
link. In other words, the link points to a different WWW site every
time you reload.

<p class=para>
Why do you want to do this? Well, for kicks. Also, if the
sites are actually mirrors of each other, so it doesn't matter which
one you refer people to. By changing the link each time, you're
helping to spread out the traffic generated from your site.

<p class=para>
Place the following line in your HTML document:

<div class=screen>
<p>
<pre>
&lt;!--#exec cgi="/cgi-bin/random.pl"--&gt;
</PRE>
</DIV>

<p class=para>
Here's the program:

<div class=screen>
<p>
<pre>
#!/usr/local/bin/perl
@URL = ("http://www.ora.com",
        "http://www.digital.com",
        "http://www.ibm.com",
        "http://www.radius.com");
srand (time | $$);
</PRE>
</DIV>

<p class=para>
The @URL array (or table) contains a list of the sites that
the program will choose from. The <i class=emphasis>srand</I> function
sets a seed based on the current time and the process identification
for the random number generator. This ensures a truly random distribution.

<div class=screen>
<p>
<pre>
$number_of_URL = scalar (@URL);
$random = int (rand ($number_of_URL));
</PRE>
</DIV>

<p class=para>
The <i class=emphasis>$number_of_URL</I> contains the index
(or position) of the last URL in the array. In Perl, arrays are
zero-based, meaning that the first element has an index of zero.
We then use the <i class=emphasis>rand</I> function to get a random
number from 0 to the index number of the last URL in the array.
In this case, the variable <i class=emphasis>$random</I> will contain
a random integer from 0 to 3.

<div class=screen>
<p>
<pre>
$random_URL = $URL[$random];
print "Content-type: text/html", "\n\n";
print qq|&lt;A HREF="$random_URL"&gt;Click here for a random Web site!&lt;/A&gt;|, "\n";
exit (0);
</PRE>
</DIV>

<p class=para>
A random URL is retrieved from the array and displayed as
a hypertext link. Users can simply click on the link to travel to
a random location.

<p class=para>
Before we finish, let's look at one final example: a CGI program
that calculates the number of days until a certain event.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="CGI-CHP-5-SECT-7.3">Counting Days Until . . .</A></h3>

<p class=para>
Remember we talked
about query strings as a way of passing information to a CGI program
in <a href="ch02_01.htm">Chapter 2, <i>Input to the Common Gateway Interface</i></A>? Unfortunately, you cannot
pass query information as part of an SSI <i class=emphasis>exec cgi</I>
directive. For example, you cannot do the following:

<div class=screen>
<p>
<pre>
&lt;!--#exec cgi="/cgi-bin/count_days.pl?4/1/96"--&gt;
</PRE>
</DIV>

<p class=para>
The server will return an error.[1]

<blockquote class=footnote>
<p class=para>[1] 
However, a
CGI program called by the <i class=emphasis>exec</I> SSI directive
from a static HTML document has access to the
query string passed to this document. For example, if you access
an HTML document in the following manner:
<div class=screen>
<p>
<pre>
http://some.machine/test.html?name=john
</PRE>
</DIV>

and
this document contains an SSI directive, then the CGI program can
access the query string ("name=john") by reading the QUERY_STRING
environment variable.
</blockquote>
<p class=para>
However, we can create a regular Perl program (<i class=emphasis>not</I>
a CGI program) that takes a date as an argument, and calculates
the number of days until/since that date:

<div class=screen>
<p>
<pre>
&lt;!--#exec cmd="/usr/local/bin/httpd_1.4.2/count_days.pl  4/1/96"--&gt;
</PRE>
</DIV>

<p class=para>
In the Perl script, we can access this command-line data (i.e.,
"4/1/96") through the <i class=emphasis>@ARGV</I> array. Now, the
script:

<div class=screen>
<p>
<pre>
#!/usr/local/bin/perl
require "timelocal.pl";
require "bigint.pl";
</PRE>
</DIV>

<p class=para>
The <i class=emphasis>require</I> command makes the functions
within these two default Perl libraries available to our program.

<div class=screen>
<p>
<pre>
($chosen_date = $ARGV[0]) =~ s/\s*//g;
</PRE>
</DIV>

<p class=para>
The variable <i class=emphasis>$chosen_date</I> contains the
date passed to this program, minus any whitespace that may have
been inserted accidently.

<div class=screen>
<p>
<pre>
if ($chosen_date =~ m|^(\d+)/(\d+)/(\d+)$|) {
    ($month, $day, $year) = ($1, $2, $3);
</PRE>
</DIV>

<p class=para>
This is another example of a regular expression, or <i class=emphasis>regexp</I>.
We use the regexp to make sure that the date passed to the program
is in a valid format (i.e., <i class=emphasis>mm/dd/yyyy</I>). If
it is valid, then <i class=emphasis>$month</I>, <i class=emphasis>$day</I>,
and <i class=emphasis>$year</I> will contain the separated month,
day, and year from the initial date.

<div class=screen>
<p>
<pre>
    $month -= 1;
    if ($year &gt; 1900) {
        $year -= 1900; 
    }
    $chosen_secs = &amp;timelocal (undef, undef, undef, $day, $month, $year);
</PRE>
</DIV>

<p class=para>
We will use the <i class=emphasis>timelocal</I> subroutine (notice the
&amp; in front) to convert the specified date to the number of seconds
since 1970. This subroutine expects month numbers to be in the range
of 0-11 and years to be from 00-99. This conversion makes it easy
for us to subtract dates. An important thing to remember is that
this program will not calculate dates correctly if you pass in a
date before 1970.

<div class=screen>
<p>
<pre>
    $seconds_in_day = 60 * 60 * 24;   
    $difference = &amp;bsub ($chosen_secs, time);
    $no_days = &amp;bdiv ($difference, $seconds_in_day);
    $no_days =~ s/^(\+|-)//;
</PRE>
</DIV>

<p class=para>
The <i class=emphasis>bsub</I>
subroutine subtracts the current time (in seconds since 1970) from
the specified time. We used this subroutine because we are dealing
with very large numbers, and a regular subtraction will give incorrect
results. Then, we call the <i class=emphasis>bdiv</I>
subroutine to calculate the number of days until/since the specified
date by dividing the previously calculated difference with the number
of seconds in a day. The <i class=emphasis>bdiv</I> subroutine prefixes
the values with either a "+" or a "-" to indicate positive or negative
values, respectively, so we remove the extra character.

<div class=screen>
<p>
<pre>
    print $no_days;
    exit(0);
</PRE>
</DIV>

<p class=para>
Once we're done with the calculations, we output the calculated
value and exit.

<div class=screen>
<p>
<pre>
} else {
    print " [Error in date format] ";
    exit(1);
}
</PRE>
</DIV>

<p class=para>
If the date is not in a valid format, an error message is
returned.

</DIV>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch05_06.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src="gifs/txthome.gif" alt="Home" border=0></a></td>
<td width=172 align=right valign=top><a href="ch05_08.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Executing External Programs</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td>
<td width=172 align=right valign=top>Tailoring SSI Output</td>
</tr>
</table>

<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
</DIV>

</BODY>
</HTML>
