<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 8] 8.3 Netscape Persistent Cookies</TITLE>
<meta name="author" content="Shishir Gundavaram">
<meta name="date" content="Mon Mar 17 13:32:35 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="cgi programming">
<meta name="title" content="CGI Programming on the World Wide Web">
<!-- JavaScript: pathcont.js -->

</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><img src="gifs/smbanner.gif" alt="CGI Programming on the World Wide Web"></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch08_02.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b>Chapter 8</b></td>
<td width=172 align=right valign=top><a href="ch09_01.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>
<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="CGI-CHP-8-SECT-3">8.3 Netscape Persistent Cookies</A></h2>

<p class=para>
A third way of maintaining state is
to use Netscape persistent cookies. One of the features of the Netscape
Navigator browser is the capability to store information on the
client side. It does this by accepting a new <i class=command>Set-Cookie</i> header from CGI programs,
and passing that information back using a HTTP_COOKIE environment variable.
We won't show a complete example, but we'll illustrate briefly.

<p class=para>
A program that stores the information on the client side might
begin as follows:

<div class=screen>
<p>
<pre>
#!/usr/local/bin/perl
($key, $value) = split(/=/, $ENV{'QUERY_STRING'});
print "Content-type: text/html", "\n";
print "Set-Cookie: $key=$value; expires=Sat, 26-Aug-95 15:45:30 GMT; path=/; domain=bu.edu", "\n\n";
</PRE>
</DIV>

<p class=para>
The cookie header requires the key/value information to be
encoded.

<div class=screen>
<p>
<pre>
.
.
.
exit (0);
</PRE>
</DIV>

<p class=para>
The <i class=command>Set-Cookie</i> header sets one cookie on
the client side, where a key is equal to a value. The <i class=command>expires</i>
attribute allows you to set an expiration date for the cookie. The
<i class=command>path</i> attribute specifies the subset of URLs that
the cookie is valid for. In this case, the cookie is valid and can
be retrieved by any program served from the document root hierarchy.
Finally, the <i class=command>domain</i> attribute sets the domain
for which the cookie is valid. For example, say a cookie labeled
"Parts" is set with a <i class=command>domain</i> attribute of "bu.edu".
If the user accesses a URL in another domain that tries to retrieve
the cookie "Parts," it will be unable to do so. You can also use
the attribute <i class=command>secure</i> to instruct the browser
to send a cookie only on a secure channel (e.g., Netscape's HTTPS
server). All of these attributes are optional.

<p class=para>
Now, how does a program access the stored cookies? When a
certain document is accessed by the user, the browser will send
the cookie information-provided that it is valid to do so-as the
environment variable HTTP_COOKIE. For example,
if the user requests a document for which the cookie is valid before
the cookie expiration date, the following information might be stored
in HTTP_COOKIE:

<div class=screen>
<p>
<pre>
Full%20Name=Shishir%20Gundavaram; Specification=CGI%20Book
</PRE>
</DIV>

<p class=para>
Cookies are separated from the next by the "
; " delimiter. To decode this information
and place it into an associative array, we can use the following
subroutine:

<div class=screen>
<p>
<pre>
sub parse_client_cookies
{
    local (*COOKIE_DATA) = @_;
    
    local (@key_value_pairs, $key_value, $key, $value);
    @key_value_pairs = split (/;\s/, $ENV{'HTTP_COOKIE'});
    foreach $key_value (@key_value_pairs) {
        ($key, $value) = split (/=/, $key_value);
        $key   =~ tr/+/ /;
        $value =~ tr/+/ /;
        $key   =~ s/%([\dA-Fa-f][\dA-Fa-f])/pack ("C", hex ($1))/eg;
        $value =~ s/%([\dA-Fa-f][\dA-Fa-f])/pack ("C", hex ($1))/eg;
        if (defined($FORM_DATA{$key})) {
            $FORM_DATA{$key} = join ("\0", $FORM_DATA{$key}, $value);
        } else {
            $FORM_DATA{$key} = $value;
        }
    }
}
</PRE>
</DIV>

<p class=para>
This subroutine is very similar to the one we have been using
to decode form information. You can set more than one cookie at
a time, for example:

<div class=screen>
<p>
<pre>
print "Set-Cookie: Computer=SUN; path=/", "\n";
print "Set-Cookie: Computer=AIX; path=/images", "\n";
</PRE>
</DIV>

<p class=para>
Now, if the user requests the URL in the path <i class=emphasis>/images</I>,
HTTP_COOKIE will contain:

<div class=screen>
<p>
<pre>
Computer=SUN; Computer=AIX
</PRE>
</DIV>

<p class=para>
There are a couple of disadvantages with this client-side
approach to storing information. First, the technique only works
for Netscape Navigator browsers. Second, there are restrictions
placed on the cookie size and number of cookies. The information
contained in each cookie cannot exceed 4KB, and only 20 cookies
are allowed per domain. A total of 300 cookies can be stored by
each user. 

<p class=para>
</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch08_02.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src="gifs/txthome.gif" alt="Home" border=0></a></td>
<td width=172 align=right valign=top><a href="ch09_01.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>CGI Side Includes</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td>
<td width=172 align=right valign=top>Gateways, Databases, and Search/Index Utilities</td>
</tr>
</table>

<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
</DIV>

</BODY>
</HTML>
