<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 3] 3.5 Server Redirection</TITLE>
<meta name="author" content="Shishir Gundavaram">
<meta name="date" content="Mon Mar 17 13:22:10 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="cgi programming">
<meta name="title" content="CGI Programming on the World Wide Web">
<!-- JavaScript: pathcont.js -->

</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><img src="gifs/smbanner.gif" alt="CGI Programming on the World Wide Web"></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch03_04.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b>Chapter 3</b></td>
<td width=172 align=right valign=top><a href="ch03_06.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>
<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="CGI-CHP-3-SECT-5">3.5 Server Redirection</A></h2>

<p class=para>
Thus far we've seen CGI examples
that return virtual documents created on the fly. However, another
thing CGI programs can do is to instruct the server to retrieve
an existing document and return that document instead. This is known
as server redirection.

<p class=para>
To perform server redirection, you need to send a <i class=command>Location</i>
header to tell the server what document to send. The server will
retrieve the specified document from the Web, giving the appearance
that the client had <i class=emphasis>not</I> requested your CGI
program, but that document (see <a href="#CGI-CHP-3-FIG-1">Figure 3.1</A>).

<div class=figure>
<h4 class=figure><a class="TITLE" name="CGI-CHP-3-FIG-1">Figure 3-1: Server redirection</A></h4>


<p>
<img aligindex.htmln=middle webstripperattrwas="src" webstripperlinkwas="http://rtfm.vn.ua/prog/perl/orb/books/web/cgi/figs/cgi0301.gif" alt="[Graphic: Figure 3-1]" width=502 height=382>

</DIV>

<p class=para>
A common use for this feature is to return a generic document
that contains static information. For example, say you have a form
for users to fill out, and you want to display a thank-you message
after someone completes the form. You can have the CGI program create
and display the message each time it is called. But a more efficient
way would be for the program to send instructions to the server
to redirect and retrieve a file that contains a generic thank-you
message.

<p class=para>
Suppose you have an HTML file (<i class=emphasis>thanks.html</I>)
like the one below, that you want to display after the user fills
out one of your forms:

<div class=screen>
<p>
<pre>
&lt;HTML&gt;
&lt;HEAD&gt;&lt;TITLE&gt;Thank You!&lt;/TITLE&gt;&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;H1&gt;Thank You!&lt;/H1&gt;
&lt;HR&gt;
Thank You for filling out this form. We will be using your
input to improve our products.
Thanks again,
WWW Software, Inc.
&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>
</DIV>

<p class=para>
You could use the programs discussed earlier to return static
documents, but it would be counterproductive to do it in that manner.
Instead, it is much quicker and simpler to do the following:

<div class=screen>
<p>
<pre>
#!/usr/local/bin/perl
print "Location: /thanks.html", "\n\n";
exit (0);
</PRE>
</DIV>

<p class=para>
The server will return the HTML file <i class=emphasis>thanks.html</I>
located in the document root directory. You don't have to worry
about returning the MIME content type for the document; it is taken
care of by the server. An important thing to note is that you cannot
return any content type headers when you are using server redirection.

<p class=para>
You
can use server redirection to your advantage and design CGI applications
like the following:

<div class=screen>
<p>
<pre>
#!/usr/local/bin/perl
$uptime = `/usr/ucb/uptime`;
($load_average) = ($uptime =~ /average: ([^,]*)/);
$load_limit = 10.0;
$simple_document = "/simple.html";
$complex_document = "/complex.html";
if ($load_average &gt;= $load_limit) {
		print "Location: $simple_document", "\n\n";
} else {
		print "Location: $complex_document", "\n\n";
}
exit (0);
</PRE>
</DIV>

<p class=para>
This program checks the load average of the host system with
the <i class=emphasis>uptime</I>
command (see <a href="ch03_01.htm">Chapter 3, <i>Output from the Common Gateway Interface</i></A> for an explanation
of the regular expression). Depending on the load average, one of
two documents is returned; a rich, complicated HTML document with
graphics if the system is not "busy," or a simple text-only document
otherwise.

<p class=para>
And
the last thing to note is that you are not limited to returning
documents on your own server. You can also return a document (static
or virtual) located elsewhere on the Internet, so long as it has
a valid URL:

<div class=screen>
<p>
<pre>
print "Location: http://www.ora.com", "\n\n";
</PRE>
</DIV>

<p class=para>
For example, this statement will return the home page for
O'Reilly and Associates.

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch03_04.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src="gifs/txthome.gif" alt="Home" border=0></a></td>
<td width=172 align=right valign=top><a href="ch03_06.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>The Content-length Header</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td>
<td width=172 align=right valign=top>The "Expires" and "Pragma" Headers</td>
</tr>
</table>

<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
</DIV>

</BODY>
</HTML>
