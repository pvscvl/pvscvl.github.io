<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 6] 6.6 Animation</TITLE>
<meta name="author" content="Shishir Gundavaram">
<meta name="date" content="Mon Mar 17 13:27:50 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="cgi programming">
<meta name="title" content="CGI Programming on the World Wide Web">
<!-- JavaScript: pathcont.js -->

</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><img src="gifs/smbanner.gif" alt="CGI Programming on the World Wide Web"></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch06_05.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b>Chapter 6</b></td>
<td width=172 align=right valign=top><a href="ch07_01.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>
<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="CGI-CHP-6-SECT-6">6.6 Animation</A></h2>

<p class=para>
Although
Java is being touted as the best way to do animation on the Web,
you can also write CGI programs to produce animation. There are
two mechanisms for creating animation: client pull and server push.
In client pull, a new HTTP connection is opened
every time a document is requested. In server push, however, the
connection is kept open until all the data is received by the client.
That is the main difference between the two mechanisms. As a result,
you can have an animation in an otherwise static document by using
the HTML &lt;IMG&gt; tag to access the CGI program
instead of a URL to an image, as introduced in <a href="ch06_02.htm#CGI-CHP-6-SECT-2.1">the section called "Inserting Multiple Dynamic Images"</A>.

<p class=para>
Client pull requires a special directive either in the HTML
document header or as a part of the CGI program's HTTP
response. This directive instructs the client to retrieve a specified
document after a certain amount of time. In other words, the client
opens a new connection to the server for each updated image (see
<a href="#CGI-CHP-6-FIG-7">Figure 6.7</A>).

<div class=figure>
<h4 class=figure><a class="TITLE" name="CGI-CHP-6-FIG-7">Figure 6-7: Animation using client pull</A></h4>


<p>
<img aligindex.htmln=middle webstripperattrwas="src" webstripperlinkwas="http://rtfm.vn.ua/prog/perl/orb/books/web/cgi/figs/cgi0608.gif" alt="[Graphic: Figure 6-7]" width=502 height=332>

</DIV>

<p class=para>
<p class=para>
Server push involves sending packets of data to the client
periodically, as shown in <a href="#CGI-CHP-6-FIG-8">Figure 6.8</A>.
The HTTP connection between the client and the
server is kept open indefinitely. Server push can be implemented
in a CGI program through the use of the <i class=command>multipart/x-mixed-replace</i> MIME
type.

<p class=para>
Both client pull and server push are supported only by Netscape
Navigator (version 1.1 and higher) and Internet Explorer.

<div class=figure>
<h4 class=figure><a class="TITLE" name="CGI-CHP-6-FIG-8">Figure 6-8: Animation using server push</A></h4>


<p>
<img aligindex.htmln=middle webstripperattrwas="src" webstripperlinkwas="http://rtfm.vn.ua/prog/perl/orb/books/web/cgi/figs/exp0601.gif" alt="[Graphic: Figure 6-8]" width=502 height=203>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="CGI-CHP-6-SECT-6.1">Client Pull</A></h3>

<p class=para>
Here is a simple example of an HTML document
that displays the time continuously:

<div class=screen>
<p>
<pre>
&lt;META HTTP-EQUIV="Refresh" CONTENT=5&gt;
&lt;!--#echo var="DATE_LOCAL"--&gt;
</PRE>
</DIV>

<p class=para>
Animation
depends on updating the browser's window at regular intervals with
new material from the server. Browsers provide a way to update their
windows called <i class=emphasis>refreshing</I>.
In the example shown above, we trick the browser into issuing its
refresh command every five seconds, so that it retrieves the document.
The document simply uses server side includes to display the current
time. (See <a href="ch05_01.htm">Chapter 5, <i>Server Side Includes</i></A> for more information
on Server Side Includes.)

<p class=para>
The META tag is part of
the HTML 3.0 specification used to simulate HTTP
response headers in HTML documents. In this case,
it is used to simulate the "Refresh:" HTTP header
with a delay of five seconds.

<p class=para>
The "Refresh:" header is non-repeating; it does not load the
document repeatedly. However, in this example, "Refresh:" is specified
on each retrieval, creating a continuous display.

<p class=para>
Here is an example of a CGI program that performs the same
operation as the previous HTML code:

<div class=screen>
<p>
<pre>
#!/usr/local/bin/perl
$delay = 5;
$date = "/bin/date";
print "Refresh: ", $delay, "\n";
print "Content-type: text/plain", "\n\n";
print `$date`;
exit(0);
</PRE>
</DIV>

<p class=para>
Remember, SSI directives cannot be included in a CGI program.
So, the <i class=emphasis>date</I> command is used to output the
current date and time.

<p class=para>
Now, let's look at the directive used to load a different
document after a specified time:

<div class=screen>
<p>
<pre>
&lt;META HTTP-EQUIV="Refresh" CONTENT="5; URL=http://your.machine/name.html"&gt;
</PRE>
</DIV>

<p class=para>
This example loads the file specified by the URL after five
seconds. If the file <i class=emphasis>name.html</I> does not contain
another "Refresh:" header, there is no animation, because "Refresh:"
is non-repeating. The corresponding CGI statement would be:

<div class=screen>
<p>
<pre>
print "Refresh: 5; URL=http://your.machine/name.html", "\n";
</PRE>
</DIV>

<p class=para>
As a final example of client pull, here's a CGI program that
loads a document with a random fortune message every ten seconds.

<div class=screen>
<p>
<pre>
#!/usr/local/bin/perl
$fortune = "/usr/local/bin/fortune";
$refresh_time = 10;
print "Refresh: ", $refresh_time, "\n";
print "Content-type: text/plain", "\n\n";
print "Here is another fortune...", "\n";
print `$fortune`;
exit(0);
</PRE>
</DIV>

<p class=para>
This is a repeating document, because a "Refresh:" header
is specified every time the program is executed. The program uses
the UNIX <i class=emphasis>fortune</I> command,
which generates a random fortune each time it is invoked.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="CGI-CHP-6-SECT-6.2">Server Push</A></h3>

<p class=para>
Server push
animations can be created using the <i class=command>multipart/x-mixed-replace</i>
MIME type. The "replace" indicates that each
data packet replaces the previous data packet. As a result, you
can make smooth animations. Here is the format in which this MIME
type is used:

<div class=screen>
<p>
<pre>
Content-type: multipart/x-mixed-replace;boundary=End
--End
Content-type: image/gif
<i class=emphasis>Image #1</I>
--End
Content-type: image/gif
<i class=emphasis>Image #2</I>
--End
Content-type: image/gif
<i class=emphasis>Image #3</I>
--End--
</PRE>
</DIV>

<p class=para>
In the first <i class=command>Content-type</i> declaration,
we declare the <i class=command>multipart/x-mixed-replace</i> content
types and establish "End" as the boundary string. We then repeatedly
display new images (declaring new content types of <i class=command>image/gif</i>),
ending each image with the "--End" string. The result is that the
images are displayed one after another.

<p class=para>
Let's look at an example that utilizes the server push mechanism.

<div class=screen>
<p>
<pre>
#!/usr/local/bin/perl
$| = 1;
$webmaster = "shishir\@bu\.edu";
$boundary_string = "\n" . "--End" . "\n";
$end_of_data = "\n" . "--End--" . "\n";
$delay_time = 1;
</PRE>
</DIV>

<p class=para>
First, we define the boundary strings that need to be sent
to the client. We also set the delay time between images-in this
case, one second.

<div class=screen>
<p>
<pre>
@image_list = (	"image_1.gif", 
                 "image_2.gif",
                 "image_3.gif",
                 "image_4.gif",
                 "image_5.gif"	);
</PRE>
</DIV>

<p class=para>
All of the images that will be used in the animation are stored
in the <i class=emphasis>@image_list</I> array. In this simple example,
we use only 5 images.

<div class=screen>
<p>
<pre>
$browser = $ENV{'HTTP_USER_AGENT'};
if ($browser =~ m#^Mozilla/(1\.[^0]|[2-9])#) {
	print "Content-type: multipart/x-mixed-replace;boundary=End", "\n";
</PRE>
</DIV>

<p class=para>
The name of the client browser is obtained using the environment
variable HTTP_USER_AGENT. If the browser is Netscape
version 1.1 or higher, the multipart MIME type
is sent to it, along with the initial boundary string. (Netscape
uses "Mozilla" as its user agent string.)

<div class=screen>
<p>
<pre>
	for ($loop=0; $loop &lt; scalar (@image_list); $loop++) {
		&amp;open_and_display_GIF ($image_list[$loop]);
		print $boundary_string;
		sleep ($delay_time);
	}
	print $end_of_data;
</PRE>
</DIV>

<p class=para>
A loop is used to iterate through the<i class=emphasis> image_list</I>
array. Each image is displayed using the <i class=emphasis>open_and_display_GIF</I>
subroutine. A boundary is then sent to the client, and the program
proceeds to sleep for the specified amount of time. It is important
to print the boundary after the image <i class=emphasis>and</I> before
the <i class=emphasis>sleep</I> command to ensure that the server
"pushes" the entire image to the client. The process is repeated
for all the images in the array. Finally, the terminating boundary
string is sent to the client.

<div class=screen>
<p>
<pre>
} else {
	&amp;open_and_display_GIF ($image_list[0]);
}
exit(0);
</PRE>
</DIV>

<p class=para>
If the browser is not Netscape version 1.1 or higher, only
the first image stored in the array is displayed.

<div class=screen>
<p>
<pre>
sub open_and_display_GIF
{
		   local ($file) = @_;
		   local ($content_length);
	  	   if ( (open (FILE, "&lt;" . $file)) ) {
		   $content_length = (stat (FILE))[7];
		   print "Content-type: image/gif", "\n";
		   print "Content-length: ", $content_length, "\n\n";
		   print &lt;FILE&gt;;
		   close (FILE);
	   } else {
		   &amp;return_error (500, "File Access Error", 
							 "Cannot open graphic file $file!");
	   }
}
</PRE>
</DIV>

<p class=para>
This routine should be very familiar to you. First, it sends
the <i class=command>image/gif</i> MIME type, along
with the length of the image. Then, the image is printed to standard
output.

<p class=para>
One final note: If you are using an NCSA
server, it is better to create the CGI server push animation program
as a non-parsed header ("nph") script, as described in <a href="ch03_01.htm">Chapter 3, <i>Output from the Common Gateway Interface</i></A>. That
way the server will not parse the HTTP headers,
and instead will send the information directly to the client. The
main advantage of this is reduced "jerkiness" in the animation.
Just to refresh your memory, you need to name the script with an
"nph-" prefix, and the first lines that are output from your script
should be:

<div class=screen>
<p>
<pre>
	print "HTTP/1.0 200 OK", "\n";
	print "Content-type: multipart/x-mixed-replace;boundary=End", "\n";  
</PRE>
</DIV>

</DIV>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch06_05.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src="gifs/txthome.gif" alt="Home" border=0></a></td>
<td width=172 align=right valign=top><a href="ch07_01.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>CGI Examples with pgperl</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td>
<td width=172 align=right valign=top>Advanced Form Applications</td>
</tr>
</table>

<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
</DIV>

</BODY>
</HTML>
