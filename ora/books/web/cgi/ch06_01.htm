<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 6] Hypermedia Documents</TITLE>
<meta name="author" content="Shishir Gundavaram">
<meta name="date" content="Mon Mar 17 13:27:29 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="cgi programming">
<meta name="title" content="CGI Programming on the World Wide Web">
<!-- JavaScript: pathcont.js -->

</HEAD>
<body bgcolor="#FFFFFF" text="#000000">

<div class=htmlnav>
<h1><img src="gifs/smbanner.gif" alt="CGI Programming on the World Wide Web"></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch05_09.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b>Chapter 6</b></td>
<td width=172 align=right valign=top><a href="ch06_02.htm#CGI-CHP-6-SECT-2.1"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>
<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
<hr align=left width=515>
</DIV>
<h1 class=chapter><a class="TITLE" name="CGI-CHP-6">Hypermedia Documents</A></H1>

<div class=htmltoc>

<p>
<b>Contents:</b><br>
Creating Dynamic Home Pages<br>
<a href="ch06_02.htm#CGI-CHP-6-SECT-2.1">CGI Examples with PostScript</A><br>
<a href="ch06_03.htm">The <i class=emphasis>gd</I> Graphics Library</A><br>
<a href="ch06_04.htm">CGI Examples with gnuplot</A><br>
<a href="ch06_05.htm">CGI Examples with pgperl</A><br>
<a href="ch06_06.htm">Animation</A><br>

</DIV>

<p class=para>
When you're
looking around on the Web, going from site to site, you may have
seen virtual documents that greet you, pages with graphics that
are created "on the fly," or sizzling animations. These are all
examples of graphic creation and manipulation using CGI. There are
numerous tools and utilities that allow you to create documents
such as these very quickly and easily.

<div class=sect1>
<h2 class=sect1><a class="TITLE" name="CGI-CHP-6-SECT-1">6.1 Creating Dynamic Home Pages</A></h2>

<p class=para>
What is a dynamic (or virtual)
home page? It's a document that looks different when viewed at different
times or by different people. For example, you may want to display
a random fortune cookie when someone visits your home page. If you
conduct business on the Web, you might want to use a dynamic document
to advertise different products when someone accesses the document.

<p class=para>
In order to set up a virtual home page, you have to modify
certain configuration settings to ask the server to execute a CGI
program instead of displaying a static HTML file.
Normally, the NCSA server looks for the file
<i class=emphasis>index.html</I> in the document root directory and
displays it.

<p class=para>
The following line when added to the server resource configuration
file (<i class=emphasis>srm.conf</I>) forces the server to execute
the CGI program <i class=emphasis>index.html</I> (a Perl program
doesn't have to end with a <i class=emphasis>.pl</I> extension):

<div class=screen>
<p>
<pre>
AddType application/x-httpd-cgi index.html
</PRE>
</DIV>

<p class=para>
The <i class=command>AddType</i>
server directive was originally introduced in <a href="ch06_01.htm">Chapter 6, <i>Hypermedia Documents</i></A>. It allows you
to execute CGI programs located outside the <i class=emphasis>cgi-bin</I>
directory.

<p class=para>
Under the CERN server, you can do something
similar by adding the following line to httpd.conf:

<div class=screen>
<p>
<pre>
Exec /index.html /usr/local/etc/httpd/cgi-bin/index.pl
</PRE>
</DIV>

<p class=para>
Now, let's create a simple virtual home page that displays
a greeting, based on the time of the access, and a message indicating
whether the webmaster is currently logged in. Of course, this is
a very simple example that illustrates the creation of a home page
with dynamic information. You can also create a virtual home page
using Server Side Includes, as shown in <a href="ch05_01.htm">Chapter 5, <i>Server Side Includes</i></A>.

<div class=screen>
<p>
<pre>
#!/usr/local/bin/perl
print "Content-type: text/html", "\n\n";
$webmaster = "shishir";
($seconds, $minutes, $hour) = localtime (time);
</PRE>
</DIV>

<p class=para>
The <i class=emphasis>localtime</I> function takes the current
time (in seconds since 1970) and returns a nine-element array consisting
of the date and time for the current time zone. We will be using
only the first three elements of the array, which contain the seconds,
minutes, and hour values (in the military 24-hour format).

<p class=para>
If your system's time zone is not configured properly, you
will get the date and time for the Greenwich time zone (GMT). In
such a case, you will need to use the TZ environment variable to
set the proper time zone before you call the <i class=emphasis>localtime</I>
function:

<div class=screen>
<p>
<pre>
$ENV{'TZ'} = 'EST';
</PRE>
</DIV>

<p class=para>
This sets your 
time zone
to Eastern Standard Time (EST). You can see some of the other time
zones by looking at the following document:

<div class=screen>
<p>
<pre>
http://wwwcrasys.anu.edu.au/reference/world.timezones.html
</PRE>
</DIV>

<p class=para>
To return to the program:

<div class=screen>
<p>
<pre>
if ( ($hour &gt;= 23) || ($hour &lt;= 6) ) {
		$greeting = "Wow, you are up late";
} elsif ( ($hour &gt; 6) &amp;&amp; ($hour &lt; 12) ) {
		$greeting = "Good Morning";
} elsif ( ($hour &gt;= 12) &amp;&amp; ($hour &lt;= 18) ) {
		$greeting = "Good Afternoon";
} else {
		$greeting = "Good Evening";
}
</PRE>
</DIV>

<p class=para>
<p class=para>
Since the <i class=emphasis>localtime</I> function returns
the hour in a 24-hour format, we can use this to our advantage.
It is much easier to select a greeting based on this format because
the time scale is continuous from 0-23, and we don't have to worry
about determining whether an hour value of "12" indicates 12:00
A.M. or 12:00 P.M.

<div class=screen>
<p>
<pre>
if ($hour &gt; 12) {
		$hour -= 12;
} elsif ($hour == 0) {
		hour = 12;
}
$time = sprintf ("%02d:%02d:%02d", $hour, $minutes, $seconds);
</PRE>
</DIV>

<p class=para>
For display purposes, however, the hour is converted into
the regular 12-hour format. The <i class=emphasis>sprintf</I>
function formats a string according to the field specifiers. In
this case, we want the hours, minutes, and seconds to be two digits
in length, so a minute value of "9" will be displayed as "09". The
formatted string is stored in the <i class=emphasis>$time</I> variable.

<div class=screen>
<p>
<pre>
open(CHECK, "/usr/bin/w -h -s $webmaster |");
if (&lt;CHECK&gt; =~ /$webmaster/) {
		$in_out = "I am currently logged in.";
} else {
		$in_out = "I just stepped out.";
}
</PRE>
</DIV>

<p class=para>
This <i class=emphasis>open</I>
command might look strange to you if you're new to Perl. Instead
of opening a file, it opens a pipe for input. In other words, Perl
executes the UNIX program <i class=emphasis>/usr/bin/w</I>
and redirects its output to the file handle <i class=emphasis>CHECK</I>.
As you'll see throughout the book, this technique allows us to communicate
with other utilities and programs by sending and receiving data
through a pipe.

<p class=para>
We pass the value stored in <i class=emphasis>$webmaster</I>
as the argument to <i class=emphasis>/usr/bin/w</I>, which returns
all of the system processes "owned" by<i class=emphasis> $webmaster</I>.
We don't really need to know much about the processes. The only
thing we're concerned about is whether any processes for <i class=emphasis>$webmaster</I>
exist, indicating that he/she is logged in. Depending on this, the
<i class=emphasis>$in_out</I> variable is set to a specific message.

<div class=screen>
<p>
<pre>
  close (CHECK);
</PRE>
</DIV>

<p class=para>
Once we're done, we close the file handle. It's a good practice
to clean up all resources when you're done with them. Now, we're
ready to output the information that we've gathered so far.

<p class=para>
Instead of using a <i class=emphasis>print</I> statement to send each line
to standard output, we'll use a "here" document. What is that, you
may ask? See for yourself:

<div class=screen>
<p>
<pre>
print &lt;&lt;End_of_Homepage;
</PRE>
</DIV>

<p class=para>
This statement outputs everything below it to standard output
until it reaches the string "End_of_Homepage." This saves us from
typing <i class=emphasis>print</I> before each line that we want
to output.

<p class=para>
Since we output a MIME content type of
<i class=command>text/html</i>, we need to output some HTML
information:

<div class=screen>
<p>
<pre>
&lt;HTML&gt;
&lt;HEAD&gt;&lt;TITLE&gt;Welcome to my home page&lt;/TITLE&gt;&lt;/HEAD&gt;
&lt;BODY&gt;
$greeting! It is $time. Here are some of my favorite links:
.
. (some information)
.
&lt;ADDRESS&gt;
Shishir Gundavaram ($in_out)
&lt;/ADDRESS&gt;
&lt;/BODY&gt;&lt;/HTML&gt;
End_of_Homepage
exit(0);
</PRE>
</DIV>

<p class=para>
The whole point of this exercise is that you can "embed" another
language (like HTML) into a CGI script. But the
variables from the enclosing script can be used within the HTML-Perl
substitutes the right value for each variable. That's what makes
this page dynamic rather than static. An important thing to note
about "here" documents is that they follow the same conventions
as the regular <i class=emphasis>print</I> statement, in that Perl
will evaluate only variables, and not function calls and other expressions.

<p class=para>
In this program, we output a MIME content
type of <i class=command>text/html</i> and followed that with the
HTML code. But we're not limited to just creating
dynamic HTML documents; we can create dynamic
graphics as well, as we'll see next.

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch05_09.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src="gifs/txthome.gif" alt="Home" border=0></a></td>
<td width=172 align=right valign=top><a href="ch06_02.htm#CGI-CHP-6-SECT-2.1"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Common Errors</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td>
<td width=172 align=right valign=top>CGI Examples with PostScript</td>
</tr>
</table>

<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
</DIV>

</BODY>
</HTML>
