<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 7] 7.2 Survey/Poll and Pie Graphs</TITLE>
<meta name="author" content="Shishir Gundavaram">
<meta name="date" content="Mon Mar 17 13:31:03 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="cgi programming">
<meta name="title" content="CGI Programming on the World Wide Web">
<!-- JavaScript: pathcont.js -->

</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><img src="gifs/smbanner.gif" alt="CGI Programming on the World Wide Web"></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch07_01.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b>Chapter 7</b></td>
<td width=172 align=right valign=top><a href="ch07_03.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>
<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="CGI-CHP-7-SECT-2">7.2 Survey/Poll and Pie Graphs</A></h2>

<p class=para>
Forms and CGI programs
make it easier to conduct surveys and polls on the Web. Let's look
at an application that tabulates poll data and dynamically creates
a pie graph illustrating the results.

<p class=para>
This application
actually consists of three distinct parts:

<p>
<ul class=itemizedlist>
<li class=listitem>The <tt class=literal>HTML</tt> document
with the form for conducting the poll

<p>
<li class=listitem>The CGI program, <i class=emphasis>ice_cream.pl</I>,
that processes the form results and places them in a data file

<p>
<li class=listitem>The CGI program, <i class=emphasis>pie.pl</I>, that
reads the data file and displays the tabulated results either as
a pie graph or as a text table

<p>
</UL>
<p class=para>
Here
is the form that the user will see:

<div class=screen>
<p>
<pre>
&lt;HTML&gt;&lt;HEAD&gt;&lt;TITLE&gt;Ice Cream Survey&lt;/TITLE&gt;&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;H1&gt;Favorite Ice Cream Survey&lt;/H1&gt;
&lt;HR&gt;
&lt;FORM ACTION="/cgi-bin/ice_cream.pl" METHOD="POST"&gt;
What is your favorite flavor of ice cream?
&lt;P&gt;
&lt;INPUT TYPE="radio" NAME="ice_cream" VALUE="Vanilla" CHECKED&gt;Vanilla&lt;BR&gt;
&lt;INPUT TYPE="radio" NAME="ice_cream" VALUE="Strawberry"&gt;Strawberry&lt;BR&gt;
&lt;INPUT TYPE="radio" NAME="ice_cream" VALUE="Chocolate"&gt;Chocolate&lt;BR&gt;
&lt;INPUT TYPE="radio" NAME="ice_cream" VALUE="Other"&gt;Other&lt;BR&gt;
&lt;P&gt;
&lt;INPUT TYPE="submit" VALUE="Submit the survey"&gt;
&lt;INPUT TYPE="reset"  VALUE="Clear your choice"&gt;
&lt;/FORM&gt;
&lt;HR&gt;
If you would like to see the current results, click
&lt;A HREF="/cgi-bin/pie.pl/ice_cream.dat"&gt;here&lt;/A&gt;.
&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>
</DIV>

<p class=para>
It is a simple form that asks a single question. The form
is shown in <a href="#CGI-CHP-7-FIG-3">Figure 7.3</A>.

<div class=figure>
<h4 class=figure><a class="TITLE" name="CGI-CHP-7-FIG-3">Figure 7-3: Ice cream form</A></h4>


<p>
<img aligindex.htmln=middle webstripperattrwas="src" webstripperlinkwas="http://rtfm.vn.ua/prog/perl/orb/books/web/cgi/figs/cgi0703.gif" alt="[Graphic: Figure 7-3]" width=414 height=295>

</DIV>

<p class=para>
Notice the use of extra path information
in the <tt class=literal>HREF</tt> anchor at the bottom of the form
(see code above). This path information represents the data file
for this survey, <i class=emphasis>ice.cream.dat</I>, and will be
stored in the environment variable <tt class=literal>PATH_INFO</tt>.
We could have also used a query in the form of:

<div class=screen>
<p>
<pre>
&lt;A HREF="/cgi-bin/pie.pl?/ice_cream.dat"&gt;here&lt;/A&gt;.
</PRE>
</DIV>

<p class=para>
But since we are passing a filename, it seems more logical
to pass the information as an extra path. If we were passing the
information as a query string, we would have had to encode some
of the characters.[1] Let's look at the format of the data
file:

<blockquote class=footnote>
<p class=para>[1] 
There is also a potential security
risk if the CGI program accepts a filename as a query. For example,
a malicious user could access the program with a URL like:
<div class=screen>
<p>
<pre>
http://your.machine/cgi-bin/pie.pl?%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd
</PRE>
</DIV>

The
query string decodes to "../../../etc/passwd". This could be a problem
if the hacker guessed correctly, and the CGI program displays information
from the file. A CGI programmer has to be very careful when evaluating
queries.
</blockquote>
<div class=screen>
<p>
<pre>
Vanilla::Strawberry::Chocolate::Other
0::0::0::0
red::yellow::blue::green
</PRE>
</DIV>

<p class=para>
As you can see, the string "::" separates each entity throughout
the file. A unique separator should be used whenever you are dealing
with data to ensure that it does not get mixed up with the data.

<p class=para>
The first line contains all of the selections within the poll.
The second line contains the actual data (initially, all values
should be zero). And the last line represents the colors to be used
to graph the options. In other words, red is used to draw the slice
representing Vanilla in the pie graph. The range of colors is limited
to the ones defined in the CGI pie graphics program, as you will
see.

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="CGI-CHP-7-SECT-2.1">Processing the Form</A></h3>

<p class=para>
The CGI program (<i class=emphasis>ice_cream.pl</I>)
decodes the form information, tabulates it, and adds it to the data
file. The program does not contain the form.

<p class=para>
The program
begins as follows:

<div class=screen>
<p>
<pre>
#!/usr/local/bin/perl
$webmaster = "shishir\@bu\.edu";
$document_root = "/usr/local/bin/httpd_1.4.2/public";
$ice_cream_file = "/ice_cream.dat";
$full_path = $document_root . $ice_cream_file;
$exclusive_lock = 2;
$unlock = 8;
&amp;parse_form_data(*poll);
$user_selection = $poll{'ice_cream'};
</PRE>
</DIV>

<p class=para>
The form information
is placed in the <i class=emphasis>poll</I> associative array. The
<i class=emphasis>parse_form_data</I> subroutine is the same one
we used previously. Since <i class=emphasis>parse_form_data</I> decodes
both <tt class=literal>GET</tt> and <tt class=literal>POST</tt> submissions,
users can submit their favorite flavor either with a <tt class=literal>GET</tt>
query or through a form. The <i class=emphasis>ice_cream</I> field,
which represents the user's selection, is stored in the <i class=emphasis>user_selection</I>
variable.

<div class=screen>
<p>
<pre>
if ( open (POLL, "&lt;" . $full_path) ) {
    flock (POLL, $exclusive_lock);
    for ($loop=0; $loop &lt; 3; $loop++) {
        $line[$loop] = &lt;POLL&gt;;
        $line[$loop] =~ s/\n$//;
    }
</PRE>
</DIV>

<p class=para>
The data file
is opened in read mode, and exclusively locked. The loop retrieves
the first three lines from the file and stores it in the <i class=emphasis>line</I>
array. Newline characters at the end of each line are removed. We
use a regular expression to remove the last character rather than
using the <i class=emphasis>chop</I> operator, because the third
line may or may not have a newline character initially, and <i class=emphasis>chop</I>
would automatically remove the last character, creating a potential
problem.

<div class=screen>
<p>
<pre>
    @options = split ("::", $line[0]);
    @data    = split ("::", $line[1]);
    $colors  = $line[2];
    flock (POLL, $unlock);
    close (POLL);
</PRE>
</DIV>

<p class=para>
The first line of the file
is split on the "::" delimiter and stored in the <i class=emphasis>options</I>
array. Each element in this array represents a separate decision
(or flavor) within the poll. The same process is repeated for the
second line of the data file as well. The main reason for doing
this is to find and increment the user-selected flavor, and write
the information back to the file. However, the third line, which
contains the color information, is not modified in any way.

<div class=screen>
<p>
<pre>
    $item_no = 3;
    for ($loop=0; $loop &lt;= $#options; $loop++) {
        if ($options[$loop] eq $user_selection) {
            $item_no = $loop;
            last;
        }
    }
</PRE>
</DIV>

<p class=para>
The loop iterates through each flavor and compares it to the
user selection. If there is a match, the <i class=emphasis>item_no</I>
variable will point to the flavor in the array. If there is no match,
<i class=emphasis>item_no</I> will have the default value of three,
in which case, it equals "Other." The only reason it might not match
is if the user accessed the script through a <tt class=literal>GET</tt>
query and passed a flavor which is not included in the survey.

<div class=screen>
<p>
<pre>
    $data[$item_no]++;
</PRE>
</DIV>

<p class=para>
The
data that represents the flavor is incremented.

<div class=screen>
<p>
<pre>
    if ( open (POLL, "&gt;" . $full_path) ) {
        flock (POLL, $exclusive_lock);
</PRE>
</DIV>

<p class=para>
The
file is opened in write, and not append, mode. As a result, the
file will be overwritten.

<div class=screen>
<p>
<pre>
        print POLL join ("::", @options), "\n";
        print POLL join ("::", @data), "\n";
        print POLL $colors, "\n";
</PRE>
</DIV>

<p class=para>
Each element within
the options and data arrays are joined with the "::" separator and
written to the file. The color information is also written to the
file.

<div class=screen>
<p>
<pre>
        flock (POLL, $unlock);
        close (POLL);
        print "Content-type: text/html", "\n\n";
        
        print &lt;&lt;End_of_Thanks;
&lt;HTML&gt;
&lt;HEAD&gt;&lt;TITLE&gt;Thank You!&lt;/TITLE&gt;&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;H1&gt;Thank You!&lt;/H1&gt;
&lt;HR&gt;        
Thanks for participating in the Ice Cream survey. If you would like to see the
current results, click &lt;A HREF="/cgi-bin/pie.pl${ice_cream_file}"&gt;here &lt;/A&gt;.
&lt;/BODY&gt;&lt;/HTML&gt;
End_of_Thanks
</PRE>
</DIV>

<p class=para>
The file is unlocked and closed. A thank-you message, along
with a link to the CGI program that graphs the data, is displayed.

<div class=screen>
<p>
<pre>
    } else {
        &amp;return_error (500, "Ice Cream Poll File Error",
                     	      "Cannot write to the poll data file [$full_path].");
    }
} else {
    &amp;return_error (500, "Ice Cream Poll File Error",
                 	      "Cannot read from the poll data file [$full_path].");
}
exit (0);
</PRE>
</DIV>

<p class=para>
If the file could not be opened successfully,
error messages are sent to the client. Since both subroutines used
by the <i class=emphasis>ice_cream.pl</I> program (<i class=emphasis>return_error</I>
and <i class=emphasis>parse_form_data</I>) should be familiar to
you by now, we won't bother to show them.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="CGI-CHP-7-SECT-2.2">Drawing the Pie Chart</A></h3>

<p class=para>
The <i class=emphasis>pie.pl</I>
program reads the poll data file and outputs the results, as either
a pie graph, or a simple text table, depending on the browser capabilities.
The program can be accessed with the following URL:

<div class=screen>
<p>
<pre>
http://your.machine/cgi-bin/pie.pl/ice_cream.dat
</PRE>
</DIV>

<p class=para>
where we use extra path information to specify <i class=emphasis>ice_cream.dat</I>
as the data file, located in the document root directory. On a graphic
browser such as Netscape Navigator, the pie graph will look like
<a href="#CGI-CHP-7-FIG-4">Figure 7.4</A>.

<div class=figure>
<h4 class=figure><a class="TITLE" name="CGI-CHP-7-FIG-4">Figure 7-4: Pie graph</A></h4>


<p>
<img aligindex.htmln=middle webstripperattrwas="src" webstripperlinkwas="http://rtfm.vn.ua/prog/perl/orb/books/web/cgi/figs/cgi0704.gif" alt="[Graphic: Figure 7-4]" width=414 height=277>

</DIV>

<p class=para>
The program begins as follows:

<div class=screen>
<p>
<pre>
#!/usr/local/bin/perl5
use GD;
$webmaster = "shishir\@bu\.edu";
$document_root = "/usr/local/bin/httpd_1.4.2/public";
&amp;read_data_file (*slices, *slices_color, *slices_message);
$no_slices = &amp;remove_empty_slices();
</PRE>
</DIV>

<p class=para>
The <i class=emphasis>
gd</I>
graphics library is used to create the pie graph. The <i class=emphasis>read_data_file</I>
subroutine reads the information from the data file and places the
corresponding values in <i class=emphasis>slices</I>, <i class=emphasis>slices_color</I>,
and <i class=emphasis>slices_message</I> arrays. The <i class=emphasis>remove_empty_slices</I>
subroutine checks these three arrays for any zero values within
the data, and returns the number of non-zero data values into the
<i class=emphasis>no_slices</I> variable.

<div class=screen>
<p>
<pre>
if ($no_slices == -1) {
    &amp;no_data ();
</PRE>
</DIV>

<p class=para>
When all of the values in the data file
are zeros, the<i class=emphasis> remove_empty_slices</I> subroutine
returns a value of -1. If a -1 is returned into the <i class=emphasis>no_slices</I>
variable, the <i class=emphasis>no_data</I> subroutine is called
to output a message explaining that there are no results in the
data file.

<div class=screen>
<p>
<pre>
} else {
    $nongraphic_browsers = 'Lynx|CERN-LineMode';
    $client_browser = $ENV{'HTTP_USER_AGENT'};
    if ($client_browser =~ /$nongraphic_browsers/) {
            &amp;text_results();
        } else {
            &amp;draw_pie ();
       }
}
exit(0);
</PRE>
</DIV>

<p class=para>
If the client browser supports graphics, the <i class=emphasis>draw_pie</I>
subroutine is called to display a pie graph. Otherwise, the <i class=emphasis>text_results</I>
subroutine is called to display the results as text.

<p class=para>
That's
it for the main body of the program. The subroutines that do all
the work follow.

<p class=para>
The <i class=emphasis>no_data</I> subroutine
displays a simple message explaining that there is no information
in the data file.

<div class=screen>
<p>
<pre>
sub no_data
{
    print "Content-type: text/html", "\n\n";
	
    print &lt;&lt;End_of_Message;
&lt;HTML&gt;
&lt;HEAD&gt;&lt;TITLE&gt;Results&lt;/TITLE&gt;&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;H1&gt;No Results Available&lt;/H1&gt;
&lt;HR&gt;
Sorry, no one has participated in this survey up to this point.
As a result, there is no data available. Try back later.
&lt;HR&gt;
&lt;/BODY&gt;&lt;/HTML&gt;
End_of_Message
}
</PRE>
</DIV>

<p class=para>
The <i class=emphasis>draw_pie</I> subroutine is responsible
for drawing the actual pie graph.

<div class=screen>
<p>
<pre>
sub draw_pie 
{
    local ( $legend_rect_size, $legend_rect, $max_length, $max_height,
            $pie_indent, $pie_length, $pie_height, $radius, @origin,
            $legend_indent, $legend_rect_to_text, $deg_to_rad, $image,
            $white, $black, $red, $yellow, $green, $blue, $orange,
            $percent, $loop, $degrees, $x, $y, $legend_x, $legend_y,
            $legend_rect_y, $text, $message);
</PRE>
</DIV>

<p class=para>
The
pie graph consists of various colored slices representing the different
choices, and a legend that points out the color that represents
each choice. All of the local variables needed to create the graph
are defined.

<div class=screen>
<p>
<pre>
    $legend_rect_size = 10;
    $legend_rect = $legend_rect_size * 2;
</PRE>
</DIV>

<p class=para>
The <i class=emphasis>legend_rect_size</I>
variable represents the length and height of each rectangle (actually
a square) in the legend. <i class=emphasis>legend_rect</I> is simply
the number of pixels from one rectangle to another, taking into
account the spacing between adjacent rectangles.

<div class=screen>
<p>
<pre>
    $max_length = 450;
    if ($no_slices &gt; 8) {
        $max_height = 200 + ( ($no_slices - 8) * $legend_rect );
    } else {
        $max_height = 200;
    }
</PRE>
</DIV>

<p class=para>
The length of the image is set to 450 pixels. However, the
height of the image is based on the number of options (or flavors)
within a poll. This is because the legend rectangles are drawn vertically.
If there are eight options or less, the height is set to 200 pixels.
On the other hand, if the number of options is greater than eight,
the excess amount is multiplied by <i class=emphasis>legend_rect</I>
and added to 200 to determine the height of the image.

<div class=screen>
<p>
<pre>
    $pie_indent = 10;
    $pie_length = $pie_height = 200;
    $radius = $pie_height / 2;
</PRE>
</DIV>

<p class=para>
The process of actually drawing the pie is very similar to
drawing a clock (see <a href="ch06_01.htm">Chapter 6, <i>Hypermedia Documents</i></A>).
The pie is indented from the left and top edges by the value stored
in <i class=emphasis>pie_indent</I>. The length and height of the
pie graph is 200 pixels, and is constant. The radius of the pie
is the diameter of the circle-represented by <i class=emphasis>pie_length</I>
and <i class=emphasis>pie_height </I>-divided by two.

<div class=screen>
<p>
<pre>
    @origin = ($radius + $pie_indent, $max_height / 2);
    $legend_indent = $pie_length + 40;
    $legend_rect_to_text = 25;
    $deg_to_rad = (atan2 (1, 1) * 4) / 180;
</PRE>
</DIV>

<p class=para>
The origin is defined to
be the center of the pie graph. The legend is spaced 40 pixels from
the right edge of the graph. The <i class=emphasis>legend_rect_to_text</I>
variable determines the amount of pixels from a legend rectangle
to the start of the explanatory text.

<div class=screen>
<p>
<pre>
    $image = new GD::Image ($max_length, $max_height);
    $white = $image-&gt;colorAllocate (255, 255, 255);
    $black = $image-&gt;colorAllocate(0, 0, 0);
    $red = $image-&gt;colorAllocate (255, 0, 0);
    $yellow = $image-&gt;colorAllocate (255, 255, 0);
    $green = $image-&gt;colorAllocate(0, 255, 0);
    $blue = $image-&gt;colorAllocate(0, 0, 255);
    $orange = $image-&gt;colorAllocate(255, 165, 0);
</PRE>
</DIV>

<p class=para>
A new image is created, and some
colors are allocated. As mentioned earlier, the colors that are
specified in the data file are limited to the ones defined in the
preceding code.

<div class=screen>
<p>
<pre>
    grep ($_ = eval("\$$_"), @slices_color);
</PRE>
</DIV>

<p class=para>
This is a new construct you have not seen before. It takes
each element within the <i class=emphasis>slices_color</I> array,
evaluates it at run-time, and stores the corresponding RGB index
back in the index. It is equivalent to the following code:

<div class=screen>
<p>
<pre>
for ($loop=0; $loop &lt;= $no_slices; $loop++) {
    $temp_color = $slices_color[$loop];
    $slices_color[$loop] = eval("\$$temp_color");
}
</PRE>
</DIV>

<p class=para>
As
you can clearly see, the <i class=emphasis>grep</I> equivalent is
so much more compact. The <i class=emphasis>slices_color</I> array
contains the colors specified in the data file. And the colors above
are also defined with English names. As a result, we can take a
color from the data file, such as "yellow," and determine the RGB
index by evaluating <i class=emphasis>$yellow</I>. This is exactly
what the <i class=emphasis>eval</I> statement does.

<div class=screen>
<p>
<pre>
    $image-&gt;arc (@origin, $pie_length, $pie_height, 0, 360, $black);
</PRE>
</DIV>

<p class=para>
A black circle is drawn from
the origin, i.e., the center of the pie graph.

<div class=screen>
<p>
<pre>
    $percent = 0;
    for ($loop=0; $loop &lt;= $no_slices; $loop++) {
        $percent += $slices[$loop];
        $degrees = int ($percent * 360) * $deg_to_rad;
        $image-&gt;line (  $origin[0],
                        $origin[1],
                        $origin[0] + ($radius * cos ($degrees)),
                        $origin[1] + ($radius * sin ($degrees)),
                        $slices_color[$loop] );
    }
</PRE>
</DIV>

<p class=para>
The <i class=emphasis>read_data_file</I>
subroutine, called at the beginning of the program, also calculates
percentages for each option and stores them in the <i class=emphasis>slices</I>
array. The proportion of votes that go to each flavor is called
the "percentage" here, although it's actually a fraction of 1, not
100. For example, if there were a total of five votes cast with
two votes for "Vanilla," the value for "Vanilla" would be 0.4.

<p class=para>
The loop iterates through each percentage value and draws
a line from the origin to the outer edge of the circle. Initially,
the first percentage value is multiplied by 360 degrees to determine
the angle at which the first line should be drawn. On each successive
iteration through the loop, the percentage value represents the
sum of all the percentage values up to that point. Then, this percentage
value is used to draw the next line, until the sum of the total
percentage values equal 100%.

<div class=screen>
<p>
<pre>
    $percent = 0;
    for ($loop=0; $loop &lt;= $no_slices; $loop++) {
        $percent += $slices[$loop];
        $degrees = int (($percent * 360) - 1) * $deg_to_rad;
	
        $x = $origin[0] + ( ($radius - 10) * cos ($degrees) );
        $y = $origin[1] + ( ($radius - 10) * sin ($degrees) );
	
        $image-&gt;fill ($x, $y, $slices_color[$loop]);
    }
</PRE>
</DIV>

<p class=para>
This fills the areas represented by the
various colored lines produced by the previous loop. The <i class=emphasis>fill</I>
function in the <i class=emphasis>gd</I> library works in the same
manner as the "paint bucket" operation in most drawing programs.
It colors an area pixel by pixel until it reaches a pixel that contains
a different color than that of the starting pixel. That is the reason
why this loop and the previous one cannot be combined, as different
colored lines must be drawn first. The starting pixel is calculated
so that its angle-from the origin-is slightly less than that of
the previously drawn line. As a result, when the <i class=emphasis>fill</I>
function is called, the area between two differently colored lines
is flooded with color.

<div class=screen>
<p>
<pre>
    $legend_x = $legend_indent;
    $legend_y = ( $max_height - ($no_slices * $legend_rect) - 
                ($legend_rect * 0.75) ) / 2;
</PRE>
</DIV>

<p class=para>
The
legend's x coordinate is simply defined by the <i class=emphasis>legend_indent</I>
variable. However, the y coordinate is calculated in such a way
that the legend will be centered with respect to the pie graph.

<div class=screen>
<p>
<pre>
    for ($loop=0; $loop &lt;= $no_slices; $loop++) {
        $legend_rect_y = $legend_y + ($loop * $legend_rect);
        $text = pack ("A18", $slices_message[$loop]);
</PRE>
</DIV>

<p class=para>
This loop draws the rectangles and the corresponding text.
The y coordinate is incremented each time through the loop. The
<i class=emphasis>text</I> variable reserves 18 characters for the
explanatory text. If the text exceeds this limit, it is truncated.
Otherwise, it is padded to the limit with spaces.

<div class=screen>
<p>
<pre>
         $message = sprintf ("%s (%4.2f%%)", $text, $slices[$loop] * 100);
</PRE>
</DIV>

<p class=para>
The <i class=emphasis>message</I>
variable is formatted to display the text and the corresponding
percentage value.

<div class=screen>
<p>
<pre>
        $image-&gt;filledRectangle (   $legend_x, 
                                    $legend_rect_y,
                                    $legend_x + $legend_rect_size,
                                    $legend_rect_y + $legend_rect_size, 
                                    $slices_color[$loop] );
        $image-&gt;string ( gdSmallFont,
                         $legend_x + $legend_rect_to_text,
                         $legend_rect_y,
                         $message,
                         $black );
        }
</PRE>
</DIV>

<p class=para>
The rectangle
is drawn, and the text is displayed.

<div class=screen>
<p>
<pre>
    $image-&gt;transparent($white);
	
    $| = 1;
    print "Content-type: image/gif", "\n\n";
    print $image-&gt;gif;
}
</PRE>
</DIV>

<p class=para>
Finally,
white is chosen as the transparent color to create a transparent
image.

<p class=para>
The <i class=emphasis>draw_pie</I> subroutine
ends by printing the <i class=command>Content-type</i> header (using
a content type of <i class=command>image/gif</i>) and then the image
itself.

<p class=para>
For non-graphic browsers, we want to be able
to generate the results in text format. The <i class=emphasis>text_results</I>
subroutine does just that.

<div class=screen>
<p>
<pre>
sub text_results
{
    local ($text, $message, $loop);
    print "Content-type: text/html", "\n\n";
	
    print &lt;&lt;End_of_Results;
&lt;HTML&gt;
&lt;HEAD&gt;&lt;TITLE&gt;Results&lt;/TITLE&gt;&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;H1&gt;Results&lt;/H1&gt;
&lt;HR&gt;
&lt;PRE&gt;
End_of_Results
    for ($loop=0; $loop &lt;= $no_slices; $loop++) {
        $text = pack ("A18", $slices_message[$loop]);
        $message = sprintf ("%s (%4.2f%%)", $text, $slices[$loop] * 100);
        print $message, "\n";
    }
    print "&lt;/PRE&gt;&lt;HR&gt;", "\n";
    print "&lt;/BODY&gt;&lt;/HTML&gt;", "\n";
}
</PRE>
</DIV>

<p class=para>
The data is formatted using the <i class=emphasis>sprintf</I>
function and displayed. The string representing the flavor is limited
to 18 characters.

<p class=para>
The <i class=emphasis>read_data_file</I>
subroutine opens and reads the <i class=emphasis>ice_cream.dat</I>
file and returns the results.

<div class=screen>
<p>
<pre>
sub read_data_file
{
    local (*slices, *slices_color, *slices_message) = @_;
    local (@line, $total_votes, $poll_file, $loop, $exclusive_lock, $unlock);
    
    $exclusive_lock = 2;
    $unlock = 8;
    if ($ENV{'PATH_INFO'}) {
        $poll_file = $document_root . $ENV{'PATH_INFO'};
    } else {
        &amp;return_error (500, "Poll Data File Error",
                 "A poll data file has to be specified.");
    }
</PRE>
</DIV>

<p class=para>
The environment variable <tt class=literal>PATH_INFO</tt>
is checked to see if it contains any information. If a null string
is returned, an error message is output. If a filename is specified,
the server root directory is concatenated to the data file. Unlike
a query, the leading "/" is returned as part of the variable.

<div class=screen>
<p>
<pre>
    if ( open (POLL, "&lt;" . $poll_file) ) {
        flock (POLL, $exclusive_lock);
</PRE>
</DIV>

<p class=para>
The
data file is opened in read mode. If the file cannot be opened,
an error message is returned.

<div class=screen>
<p>
<pre>
        for ($loop=0; $loop &lt; 3; $loop++) {
            $line[$loop] = &lt;POLL&gt;;
            $line[$loop] =~ s/\n$//;
        }        
        @slices_message = split ("::", $line[0]);
        @slices         = split ("::", $line[1]);
        @slices_color   = split ("::", $line[2]);
       
        flock (POLL, $unlock);
        close (POLL);
</PRE>
</DIV>

<p class=para>
Three lines are read
from the data file. The lines are split on the "::" character and
stored in arrays. The file is unlocked and closed.

<div class=screen>
<p>
<pre>
        $total_votes = 0;
        for ($loop=0; $loop &lt;= $#slices; $loop++) {
            $total_votes += $slices[$loop];
        }
</PRE>
</DIV>

<p class=para>
The total number of votes is determined by adding each element
of the <i class=emphasis>slices</I> array.

<div class=screen>
<p>
<pre>
        if ($total_votes &gt; 0) {
            grep ($_ = ($_ / $total_votes), @slices);
        }
</PRE>
</DIV>

<p class=para>
Each element of the <i class=emphasis>slices</I>
array is modified to contain the percentage value, instead of the
number of votes. You should always check to see that the divisor
is greater than zero, as Perl will return an "Illegal 
division by zero" error.

<div class=screen>
<p>
<pre>
    } else {
        &amp;return_error (500, "Poll Data File Error",
                 "Cannot read from the poll data file [$poll_file].");
    }
}
</PRE>
</DIV>

<p class=para>
If the program cannot open
the data file, an error message is displayed.

<p class=para>
The final
subroutine in <i class=emphasis>pie.pl</I> is <i class=emphasis>remove_empty_slices</I>.

<div class=screen>
<p>
<pre>
sub remove_empty_slices
{
    local ($loop) = 0;
    while (defined ($slices[$loop])) {
        if ($slices[$loop] &lt;= 0.0) {
            splice(@slices, $loop, 1);
            splice(@slices_color, $loop, 1);
            splice(@slices_message, $loop, 1);
        } else {
            $loop++;
        }
    }
    return ($#slices);
}
</PRE>
</DIV>

<p class=para>
In order to save the program from processing choices (or flavors)
that have zero votes, those elements and their corresponding colors
and text are removed. The <i class=emphasis>splice</I> function removes
an element from the array. 

</DIV>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch07_01.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src="gifs/txthome.gif" alt="Home" border=0></a></td>
<td width=172 align=right valign=top><a href="ch07_03.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Guestbook</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td>
<td width=172 align=right valign=top>Quiz/Test Form Application</td>
</tr>
</table>

<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
</DIV>

</BODY>
</HTML>
