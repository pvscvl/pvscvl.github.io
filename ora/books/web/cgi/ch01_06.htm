<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 1] 1.6 Programming in CGI</TITLE>
<meta name="author" content="Shishir Gundavaram">
<meta name="date" content="Mon Mar 17 13:19:44 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="cgi programming">
<meta name="title" content="CGI Programming on the World Wide Web">
<!-- JavaScript: pathcont.js -->

</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><img src="gifs/smbanner.gif" alt="CGI Programming on the World Wide Web"></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch01_05.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b>Chapter 1</b></td>
<td width=172 align=right valign=top><a href="ch01_07.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>
<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="CGI-CHP-1-SECT-6">1.6 Programming in CGI</A></h2>

<p class=para>
You
might wonder, <i class=emphasis>"Now that I know how CGI works, what programming
language can I use?"</I> The answer to that question is very
simple: You can use whatever language you want, although certain
languages are more suited for CGI programming than others. Before
choosing a language, you must consider the following features:

<p>
<ul class=itemizedlist>
<li class=listitem>Ease of text manipulation

<p>
<li class=listitem>Ability to interface with other software libraries
and utilities

<p>
<li class=listitem>Ability to access environment variables (in UNIX)

<p>
</UL>
<p class=para>
Let's look at each of these features in more detail. Most
CGI applications involve manipulating text (as you will see throughout
this book) some way or another, so inherent 
pattern
matching is very important. For example, form information is usually
"decoded" by splitting the string on certain delimiters.

<p class=para>
The
ability of a language to interface with other 
software, such as databases, is also
very important. This greatly enhances the power of the Web by allowing
you to write gateways to other information sources, such as database
engines or graphic manipulation libraries.

<p class=para>
Finally,
the last attribute that must be taken into account is the ease with
which the language can access 
environmental
variables. These variables constitute the input to the CGI program,
and thus are very important.

<p class=para>
Some of the more popular
languages for CGI programming include AppleScript, C/C++, C Shell,
Perl, Tcl, and Visual Basic. Here is a quick review of the advantages
and, in some cases, disadvantages of each one.

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="CGI-CHP-1-SECT-6.1">AppleScript (Macintosh Only)</A></h3>

<p class=para>
Since
the advent of System 7.5, AppleScript is an integral part of the
Macintosh operating system (OS). Though AppleScript lacks inherent
pattern-matching operators, certain extensions have been written
to make it easy to handle various types of data. AppleScript also
has the power to interface with other Macintosh applications through
AppleEvents. For example, a Mac CGI programmer can write a program
that presents a form to the user, decode the contents of the form,
and query and search a Microsoft FoxPro database directly through
AppleScript.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="CGI-CHP-1-SECT-6.2">C/C++ (UNIX, Windows, Macintosh)</A></h3>

<p class=para>
C
and C++ are very popular with programmers, and some use them to
do CGI programming. These languages are not recommended for the
novice programmer; C and C++ impose strict rules for variable and
memory declarations, and type checking. In addition, these languages
lack database extensions and inherent pattern-matching abilities,
although modules and functions can be written to achieve these functions.

<p class=para>
However, C and C++ have a major advantage in that you can
compile your CGI application to create a binary executable, which
takes up fewer system resources than using interpreters (like Perl
or Tcl) to run CGI scripts.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="CGI-CHP-1-SECT-6.3">C Shell (UNIX Only)</A></h3>

<p class=para>
C Shell lacks pattern-matching
operators, and so other UNIX utilities, such
as sed or awk, must be used whenever you want to manipulate string
information. However, there is a software tool, called <i class=filename>uncgi</i>
and written in C, that decodes form data and stores the information
into shell environment variables, which can be accessed rather easily.
Obviously, communicating with a database directly is impossible,
unless it is done through a foreign application<i class=filename>. </i>Finally,
the C Shell has some serious bugs and limitations that make using
it a dangerous proposition for the beginner.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="CGI-CHP-1-SECT-6.4">Perl (UNIX, Windows, Macintosh)</A></h3>

<p class=para>
Perl is by far the most widely
used language for CGI programming! It contains many powerful features,
and is very easy for the novice programmer to learn. The advantages
of Perl include:

<p>
<ul class=itemizedlist>
<li class=listitem>It is highly portable and readily
available.

<p>
<li class=listitem>It contains extremely powerful string manipulation
operators, as well as functions to deal with binary data.

<p>
<li class=listitem>It contains very simple and concise constructs.

<p>
<li class=listitem>It makes calling shell commands very easy, and provides
some useful equivalents of certain UNIX system
functions.

<p>
<li class=listitem>There are numerous extensions built on top of Perl
for specialized functions; for example, there is <i class=filename>oraperl</i>(or the DBI Extensions), which contains functions for
interfacing with the Oracle database.

<p>
</UL>
<p class=para>
Because of these overwhelming advantages, Perl is the language
used for most of the examples throughout this book.

<p class=para>
To
whet your appetite slightly, here is an example of a CGI Perl program
that creates the simple virtual document presented in the 
<a href="ch01_02.htm">the section called "Virtual Documents"</A> 
section that appeared earlier in this chapter:

<div class=screen>
<p>
<pre>
#!/usr/local/bin/perl
print "Content-type: text/plain","\n\n";
print "Welcome to Shishir's WWW Server!", "\n";
$remote_host = $ENV{'REMOTE_HOST'};
print "You are visiting from ", $remote_host, ". ";
$uptime = `/usr/ucb/uptime` ;
($load_average) = ($uptime =~ /average: ([^,]*)/);
print "The load average on this machine is: ", $load_average, ".", "\n";
print "Happy navigating!", "\n";
exit (0);
</PRE>
</DIV>

<p class=para>
The first line of the program is very important. It tells
the server to run the Perl interpreter located in <i class=filename>/usr/local/bin</i>
to execute the program.

<p class=para>
Simple <i class=emphasis>print</I> statements are used to display
information to the standard output. This CGI program outputs a partial
HTTP header (the one <i class=command>Content-type</i>
header). Since this script generates plain text and not HTML,
the content type is <i class=command>text/plain</i>.

<p class=para>
Two

newlines (<i class=command>\n</i>)
are output after the header. This is because HTTP
requires a blank line between the header and body. Depending on
the platform, you may need to output two carriage-return and newline
combinations (<i class=command>\r\n\r\n</i>).

<p class=para>
The first
print statement after the header is a greeting. The second print
statement after the header displays the remote host of the user
accessing the server. This information is retrieved from the environmental
variable REMOTE_HOST.

<p class=para>
As you peruse the next bit of code, you will see what
looks like a mess! However, it is a combination of very powerful
search operators, and is called a <i class=emphasis>regular expression</I> (or commonly known
as <i class=emphasis>regexp</I>)-see the expression below. In this
case, the expression is used to search the output from the UNIX
command <i class=filename>uptime</i> for a numeric value that is
located between the string "average:" and the next comma.


<p>
<img alindex.htmlign=middle webstripperattrwas="src" webstripperlinkwas="http://rtfm.vn.ua/prog/perl/orb/books/web/cgi/figs/exp0101.gif" alt="[Graphic: Figure from the text]" width=502 height=203>

<p class=para>
Finally,
the last statement displays a good luck message.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="CGI-CHP-1-SECT-6.5">Tcl (UNIX Only)</A></h3>

<p class=para>
Tcl is gaining
popularity as a CGI programming language. Tcl consists of a shell,
<i class=emphasis>tclsh</I>, which can be used to execute your scripts.
Like Perl, <i class=emphasis>tclsh</I> also contains simple constructs,
but is a bit more difficult to learn and use for the novice programmer.
Like Perl, Tcl contains extensions to databases and graphic libraries.
It also supports regular expressions, but is quite inefficient in
handling these expressions at compile time, especially when compared
to Perl.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="CGI-CHP-1-SECT-6.6">Visual Basic (Windows Only)</A></h3>

<p class=para>
Visual Basic
is to Windows what AppleScript is to the Macintosh OS as far as
CGI programming is concerned. With Visual Basic, you can communicate
with other Windows applications such as databases and spreadsheets.
This makes Visual Basic a very powerful tool for developing CGI
applications on a PC, and it is very easy to learn. However, Visual
Basic lacks powerful string manipulation operators. 

</DIV>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch01_05.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src="gifs/txthome.gif" alt="Home" border=0></a></td>
<td width=172 align=right valign=top><a href="ch01_07.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Configuring the Server</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td>
<td width=172 align=right valign=top>CGI Considerations</td>
</tr>
</table>

<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
</DIV>

</BODY>
</HTML>
