<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 4] Forms and CGI</TITLE>
<meta name="author" content="Shishir Gundavaram">
<meta name="date" content="Mon Mar 17 13:23:56 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="cgi programming">
<meta name="title" content="CGI Programming on the World Wide Web">
<!-- JavaScript: pathcont.js -->

</HEAD>
<body bgcolor="#FFFFFF" text="#000000">

<div class=htmlnav>
<h1><img src="gifs/smbanner.gif" alt="CGI Programming on the World Wide Web"></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch03_08.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b>Chapter 4</b></td>
<td width=172 align=right valign=top><a href="ch04_02.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>
<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
<hr align=left width=515>
</DIV>
<h1 class=chapter><a class="TITLE" name="CGI-CHP-4">Forms and CGI</A></H1>

<div class=htmltoc>

<p>
<b>Contents:</b><br>
HTML Tags<br>
<a href="ch04_02.htm">Sending Data to the Server</A><br>
<a href="ch04_03.htm">Designing Applications Using Forms in Perl</A><br>
<a href="ch04_04.htm">Decoding Forms in Other Languages</A><br>

</DIV>

<p class=para>
As we discussed briefly
in <a href="ch04_01.htm">Chapter 4, <i>Forms and CGI</i></A>,
forms are generally used for two purposes: data collection and interactive
communication. You can conduct surveys or polls, and present registration
or online ordering information through the use of forms. They are
also used to create an interactive medium between the user and the
Web server. For example, a form can ask the user to select a document
out of a menu, whereby the server returns the chosen document.

<p class=para>
The main advantage of forms is that you can use them to create
a front end for numerous gateways (such as databases or other information
servers) that can be accessed by any client without worrying about
platform dependency. On the other hand, there are some shortcomings
with the current implementation:

<p>
<ul class=itemizedlist>
<li class=listitem>The interface does not support any
data types besides the general "text" type. The next HTML
specification could contain other data types, such as "int," "date,"
"float," and "url."

<p>
<li class=listitem>User input cannot be checked on the client side;
the user has to press the Submit button and the CGI program on the
server side has to make sure the input is valid.

<p>
</UL>
<p class=para>
This chapter covers:

<p>
<ul class=itemizedlist>
<li class=listitem>The HTML tags for
writing forms

<p>
<li class=listitem>How form data is sent to the server

<p>
<li class=listitem>Examples of designing form-based CGI applications,
both in Perl and other languages

<p>
</UL>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="CGI-CHP-4-SECT-1">4.1 HTML Tags</A></h2>

<p class=para>
A form consists
of two distinct parts: the HTML code and the
CGI program. HTML tags create the visual representation
of the form, while the CGI program decodes (or processes) the information
contained within the form. Before we look at how CGI programs process
form information, let's understand how a form is created. In this
section, we'll cover the form tags and show examples of their use.

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="CGI-CHP-4-SECT-1.1">The FORM Tag</A></h3>

<p class=para>
Here
is the beginning of a simple form:

<div class=screen>
<p>
<pre>
&lt;FORM ACTION="/cgi-bin/program.pl" METHOD="POST"&gt;
</PRE>
</DIV>

<p class=para>
The <tt>&lt;FORM&gt;</TT> tag starts the form. A document can consist
of multiple forms, but forms cannot be nested; a form cannot be
placed inside another form.

<p class=para>
The two attributes within the <tt>&lt;FORM&gt;</TT> tag (
ACTION
and METHOD) are very important. The ACTION
attribute specifies the URL of the CGI program that will process
the form information. You are not limited to using a CGI program
on your server to decode form information; you can specify a URL
of a remote host if a program that does what you want is available
elsewhere.

<p class=para>
The
METHOD attribute specifies how the server will
send the form information to the program. POST
sends the data through standard input, while GET
passes the information through environment variables. If no method
is specified, the server defaults to GET. Both
methods have their own advantages and disadvantages, which will
be covered in detail later in the chapter.

<p class=para>
In addition, another attribute, ENCTYPE,
can be specified. This represents the MIME type
(or encoding scheme) for the POST data, since
the information is sent to the program as a data stream. Currently,
only two ENCTYPES are allowed: <i class=command>application/x-www-form-urlencoded</i>
and <i class=command>multipart/form-data</i>. If one is not specified,
the browser defaults to <i class=command>application/x-www-form-urlencoded</i>.
<a href="appd_01.htm">Appendix D, <i>CGI Lite</i></A>, shows an example
of using <i class=command>multipart/form-data</i>, while this chapter
is devoted to <i class=command>application/x-www-form-urlencoded</i>.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="CGI-CHP-4-SECT-1.2">Text and Password Fields</A></h3>

<p class=para>
Most form
elements are implemented using the <tt>&lt;INPUT&gt;</TT> tag. The <i class=command>TYPE</i>
attribute to <tt>&lt;INPUT&gt;</TT> determines what type of input is being
requested. Several different types of elements are available: text
and password fields, radio buttons, and checkboxes. The following
lines are examples of simple text input.

<div class=screen>
<p>
<pre>
Name: &lt;INPUT TYPE="text" NAME="user" SIZE=40&gt;&lt;BR&gt;
Age: &lt;INPUT TYPE="text" NAME="age"  SIZE=3 MAXLENGTH=3&gt;&lt;BR&gt;
Password: &lt;INPUT TYPE="password" NAME="pass" SIZE=10&gt;&lt;BR&gt;
</PRE>
</DIV>

<p class=para>
In this case, two text fields and one password field are created
using the "text" and "password" arguments, respectively. The password
field is basically the same as a text field except the characters
entered will be displayed as asterisks or bullets. If you skip the
TYPE attribute, a text field will be created
by default.

<p class=para>
The NAME
attribute defines the name of the particular input element. It is
not displayed by the browser, but is used to label the data when
transferred to the CGI program. For example, the first input field
has a NAME="user" attribute. If someone types
"andy" into the first input field, then part of the data sent by
the browser will read:

<div class=screen>
<p>
<pre>
	user=andy 
</PRE>
</DIV>

<p class=para>
The CGI program can later retrieve this information (as we
talked about briefly in <a href="ch02_01.htm">Chapter 2, <i>Input to the Common Gateway Interface</i></A>, and will discuss in more detail
later in this chapter) and parse it as needed.

<p class=para>
The optional VALUE
attribute can be used to insert an initial "default" value into
the field. This string can be overwritten by the user.

<p class=para>
Other optional attributes are SIZE and
MAXLENGTH. SIZE
is the physical size of the input element; the field will scroll
if the input exceeds the size. The default size is 20 characters.
MAXLENGTH defines the maximum number of characters
that will be accepted by the browser; by default there is no limit.

<p class=para>
In the following line, the initial text field size is expanded
to 40 characters, the maximum length is specified as 40 as well
(so the field will not scroll), and the initial value string is
"Shishir Gundavaram."

<div class=screen>
<p>
<pre>
&lt;INPUT TYPE="text"  NAME="user"  SIZE=40 MAXLENGTH=40 VALUE="Shishir Gundavaram"  &gt;
</PRE>
</DIV>

<p class=para>
Before
we move on, there is still another type of text field. It is called
a "hidden" field and allows you to store information in the form.
The client will not display the field. For example:

<div class=screen>
<p>
<pre>
&lt;INPUT TYPE="hidden" NAME="publisher" VALUE="ORA"&gt;
</PRE>
</DIV>

<p class=para>
Hidden fields are most useful for transferring information
from one CGI application to another. See <a href="ch08_01.htm">Chapter 8, <i>Multiple Form Interaction</i></A>, for an example of using
hidden fields.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="CGI-CHP-4-SECT-1.3">Submit and Reset Buttons</A></h3>

<p class=para>
Two more
important "types" of the &lt;INPUT&gt; tag are Submit and Reset.

<div class=screen>
<p>
<pre>
&lt;INPUT TYPE="submit" VALUE="Submit the form"&gt;
&lt;INPUT TYPE="reset"  VALUE="Clear all fields"&gt;
</PRE>
</DIV>

<p class=para>
Nearly all forms offer Submit and Reset buttons. The Submit
button sends all of the form information to the CGI program specified
by the ACTION attribute. Without this button,
the form will be useless since it will never reach the CGI program.

<p class=para>
Browsers supply a default label on Submit and Reset buttons
(generally, the unimaginative labels "Submit" and "Reset," of course).
However, you can override the default labels using the VALUE
attribute.

<p class=para>
You can have multiple Submit buttons:

<div class=screen>
<p>
<pre>
&lt;INPUT TYPE="submit" NAME="option" VALUE="Option 1"&gt;
&lt;INPUT TYPE="submit" NAME="option" VALUE="Option 2"&gt;
</PRE>
</DIV>

<p class=para>
If the user clicked on "Option 1", the CGI program would get
the following data:

<div class=screen>
<p>
<pre>
option=Option 1
</PRE>
</DIV>

<p class=para>
You can also have images 
as
buttons:

<div class=screen>
<p>
<pre>
	&lt;INPUT TYPE="image" SRC="/icons/button.gif" NAME="install" VALUE="Install Program"&gt; 
</PRE>
</DIV>

<p class=para>
When you click on an image button, the browser will send the
coordinates of the click:

<div class=screen>
<p>
<pre>
install.x=250&amp;install.y=20
</PRE>
</DIV>

<p class=para>
Note that each field information is delimited by the "
&amp;" character. We will discuss this in
detail later in the chapter. On the other hand, if you are using
a text browser, and you select this button, the browser will send
the following data:

<div class=screen>
<p>
<pre>
install=Install Program
</PRE>
</DIV>

<p class=para>
The Reset button clears all the information entered by the
user. Users can press Reset if they want to erase all their entries
and start all over again.

<p class=para>
<a href="#CGI-CHP-4-FIG-1">Figure 4.1</A> shows how the form will look in Netscape Navigator.

<div class=figure>
<h4 class=figure><a class="TITLE" name="CGI-CHP-4-FIG-1">Figure 4-1: Form with text input fields</A></h4>


<p>
<img aligindex.htmln=middle webstripperattrwas="src" webstripperlinkwas="http://rtfm.vn.ua/prog/perl/orb/books/web/cgi/figs/cgi0401.gif" alt="[Graphic: Figure 4-1]" width=414 height=288>

</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="CGI-CHP-4-SECT-1.4">Radio Buttons and Checkboxes</A></h3>

<p class=para>
Radio buttons and checkboxes are typically used
to present the user with several options.

<p class=para>
A checkbox creates square buttons (or boxes) that can be toggled
on or off. In the example below, it is used to create four square
checkboxes.

<div class=screen>
<p>
<pre>
   	&lt;FORM ACTION="/cgi-bin/program.pl" METHOD="POST"&gt;
Which movies do you want to order: &lt;BR&gt;
Amadeus &lt;INPUT TYPE="checkbox" NAME="amadeus"&gt;
The Last Emperor &lt;INPUT TYPE="checkbox" NAME="emperor"&gt;
Gandhi &lt;INPUT TYPE="checkbox" NAME="gandhi"&gt;
Schindler's List &lt;INPUT TYPE="checkbox" NAME="schindler"&gt;
&lt;BR&gt;
</PRE>
</DIV>

<p class=para>
If a user toggles a checkbox "on" and then submits the form,
the browser uses the value "on" for that variable name. For example,
if someone clicks on the "Gandhi" box in the above example, the
browser will send:

<div class=screen>
<p>
<pre>
gandhi=on
</PRE>
</DIV>

<p class=para>
You can override the value "on" using the VALUE
attribute:

<div class=screen>
<p>
<pre>
Gandhi &lt;INPUT TYPE="checkbox" NAME="gandhi" VALUE="yes"&gt;
</PRE>
</DIV>

<p class=para>
Now when the "Gandhi" checkbox is checked, the browser will
send:

<div class=screen>
<p>
<pre>
gandhi=yes
</PRE>
</DIV>

<p class=para>
One checkbox is not related to another. Any number of them
can be checked at the same time. A radio button differs from a checkbox
in that only one radio button can be enabled at a time. For example:

<div class=screen>
<p>
<pre>
How do you want to pay for this product: &lt;BR&gt;
Master Card: &lt;INPUT TYPE="radio" NAME="payment" VALUE="MC" CHECKED&gt;&lt;BR&gt;
Visa: &lt;INPUT TYPE="radio" NAME="payment" VALUE="Visa"&gt;&lt;BR&gt;
American Express: &lt;INPUT TYPE="radio" NAME="payment" VALUE="AMEX"&gt;&lt;BR&gt;
Discover: &lt;INPUT TYPE="radio" NAME="payment" VALUE="Discover"&gt;&lt;BR&gt;
&lt;/FORM&gt;
</PRE>
</DIV>

<p class=para>
Here are a few
guidelines for making a radio button work properly:

<p>
<ul class=itemizedlist>
<li class=listitem>All options must have the same NAME
(in this example, "payment"). This is how the browser knows that
they should be grouped together, and can therefore ensure that only
one radio button using the same NAME can be selected
at a time.

<p>
<li class=listitem>Whereas with checkboxes supplying a different VALUE
is only a matter of taste, with radio buttons different VALUEs
are crucial to getting meaningful results. Without a specified VALUE,
no matter which item is checked, the browser will assign the string
"on" to the "payment" NAME variable. The CGI
program therefore has no way to know which item was actually checked.
So each item in a radio button needs to be assigned a different
VALUE to make sure that the CGI program knows
which one was selected.

<p>
</UL>
<p class=para>
For both radio buttons and checkboxes, the CHECKED
attribute determines whether the item should be enabled by default.
In the radio button example, the "Master Card" option is given a
CHECKED value, effectively making it the default
value.

<p class=para>
<a href="#CGI-CHP-4-FIG-2">Figure 4.2</A> shows how this example will be 
rendered
 by the 
browser.

<div class=figure>
<h4 class=figure><a class="TITLE" name="CGI-CHP-4-FIG-2">Figure 4-2: Form with radio buttons and checkboxes</A></h4>


<p>
<img aligindex.htmln=middle webstripperattrwas="src" webstripperlinkwas="http://rtfm.vn.ua/prog/perl/orb/books/web/cgi/figs/cgi0402.gif" alt="[Graphic: Figure 4-2]" width=414 height=331>

</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="CGI-CHP-4-SECT-1.5">Menus and Scrolled Lists</A></h3>

<p class=para>
Menus and scrolled lists are generally
used to present a large number of options or choices to the user.
The following is an example of a menu:

<div class=screen>
<p>
<pre>
&lt;FORM ACTION="/cgi-bin/program.pl" METHOD="POST"&gt;
Choose a method of payment: 
&lt;SELECT NAME="card" SIZE=1&gt;
&lt;OPTION SELECTED&gt;Master Card
&lt;OPTION&gt;Visa
&lt;OPTION&gt;American Express
&lt;OPTION&gt;Discover
&lt;/SELECT&gt;
</PRE>
</DIV>

<p class=para>
Option menus and scrolled lists are created using the 
SELECT
tag, which has an opening and a closing tag. The SIZE
attribute determines if a menu or a list is displayed. A value of
1 produces a menu, and a value greater than 2 produces a scrolled
list, in which case the number represents the number of items that
will be visible at one time.

<p class=para>
A selection in a menu or scrolled list is added using the
OPTION
tag. The SELECTED attribute to OPTION
allows you to set a default selection.

<p class=para>
Now for an example of a scrolled list (a list with a scrollbar):

<div class=screen>
<p>
<pre>
&lt;SELECT NAME="books" SIZE=3 MULTIPLE&gt;
&lt;OPTION SELECTED&gt;TCP/IP Network Administration
&lt;OPTION&gt;Linux Network Administrators Guide
&lt;OPTION&gt;DNS and BIND
&lt;OPTION&gt;Computer Security Basics
&lt;OPTION&gt;System Performance Tuning
&lt;/SELECT&gt;
&lt;/FORM&gt;
</PRE>
</DIV>

<p class=para>
The example above creates a scrolled list with three visible
items and the ability to select multiple options. (The 
MULTIPLE attribute specifies that
more than one item can be selected.)

<p class=para>
<a href="#CGI-CHP-4-FIG-3">Figure 4.3</A> shows what the menus and scrolled list look like.

<div class=figure>
<h4 class=figure><a class="TITLE" name="CGI-CHP-4-FIG-3">Figure 4-3: Form with menus and scrolled lists</A></h4>


<p>
<img aligindex.htmln=middle webstripperattrwas="src" webstripperlinkwas="http://rtfm.vn.ua/prog/perl/orb/books/web/cgi/figs/cgi0403.gif" alt="[Graphic: Figure 4-3]" width=414 height=255>

</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="CGI-CHP-4-SECT-1.6">Multiline Text Fields</A></h3>

<p class=para>
You must have seen numerous
guestbooks on the Web that ask for your comments or opinions, where
you can enter a lot of information. This is accomplished by using
a multiline text field. Here is an example:

<div class=screen>
<p>
<pre>
  &lt;FORM ACTION="/cgi-bin/program.pl" METHOD="POST"&gt;
&lt;TEXTAREA ROWS=10 COLS=40 NAME="comments"&gt;
&lt;/TEXTAREA&gt;
</PRE>
</DIV>

<p class=para>
This creates a scrolled text field with 10 rows and 40 columns.
(10 rows and 40 columns designates only the visible text area; the
text area will scroll if the user types further).

<p class=para>
Notice that you need both the beginning <tt>&lt;TEXTAREA&gt;</TT> and
the ending <tt>&lt;/TEXTAREA&gt;</TT> tags. You can enter default information
between these tags.

<div class=screen>
<p>
<pre>
&lt;TEXTAREA ROWS=10 COLS=40 NAME="comments_2"&gt;
This is some default information.
Some more...
And some more...
&lt;/TEXTAREA&gt;
&lt;/FORM&gt;
</PRE>
</DIV>

<p class=para>
You have to remember that newlines (or carriage returns) are
not ignored in this field-unlike HTML. In the
preceding example, the three separate lines will be displayed just
as you typed them.

<p class=para>
The multiline examples will be rendered by the browser as
shown in <a href="#CGI-CHP-4-FIG-4">Figure 4.4</A>.

<div class=figure>
<h4 class=figure><a class="TITLE" name="CGI-CHP-4-FIG-4">Figure 4-4: Form with multiline text input</A></h4>


<p>
<img aligindex.htmln=middle webstripperattrwas="src" webstripperlinkwas="http://rtfm.vn.ua/prog/perl/orb/books/web/cgi/figs/cgi0404.gif" alt="[Graphic: Figure 4-4]" width=414 height=368>

</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="CGI-CHP-4-SECT-1.7">Quick Reference to Form Tags</A></h3>

<p class=para>
Before we get going, here's a short list of all the available
form tags:

<p>
<div class=table>
<table>
<caption><a class="TITLE" name="CGI-CHP-4-TBL-1">Table 4-1: Form Tags</A></CAPTION>
<tr class=row>
<th align="left">

<p class=para>
Form Tag</TH>
<th align="left">

<p class=para>
Description</TH>
</TR>
<tr class=row>
<td align="left">

<p class=para>
<tt class=literal>&lt;FORM ACTION="/cgi-bin/prog.pl" METHOD="POST"&gt;</tt></TD>
<td align="left">

<p class=para>
Start the form</TD>
</TR>
<tr class=row>
<td align="left">

<p class=para>
<tt class=literal>&lt;INPUT TYPE="text" NAME="name"
                   VALUE="value" SIZE="size"&gt;</tt></TD>
<td align="left">

<p class=para>
Text field</TD>
</TR>
<tr class=row>
<td align="left">

<p class=para>
<tt class=literal>&lt;INPUT TYPE="password" NAME="value"
                       VALUE="value" SIZE="size"&gt;</tt></TD>
<td align="left">

<p class=para>
Password field</TD>
</TR>
<tr class=row>
<td align="left">

<p class=para>
<tt class=literal>&lt;INPUT TYPE="hidden" NAME="name" VALUE="value"&gt;</tt></TD>
<td align="left">

<p class=para>
Hidden field</TD>
</TR>
<tr class=row>
<td align="left">

<p class=para>
<tt class=literal>&lt;INPUT TYPE="checkbox" NAME="name" VALUE="value"&gt;</tt></TD>
<td align="left">

<p class=para>
Checkbox</TD>
</TR>
<tr class=row>
<td align="left">

<p class=para>
<tt class=literal>&lt;INPUT TYPE="radio" NAME="name" VALUE="value"&gt;</tt></TD>
<td align="left">

<p class=para>
Radio button</TD>
</TR>
<tr class=row>
<td align="left">

<p class=para>
<tt class=literal>&lt;SELECT NAME="name" SIZE=1&gt;
&lt;OPTION SELECTED&gt;One
&lt;OPTION&gt;Two
    :
&lt;/SELECT&gt;</tt></TD>
<td align="left">

<p class=para>
Menu</TD>
</TR>
<tr class=row>
<td align="left">

<p class=para>
<tt class=literal>&lt;SELECT NAME="name" SIZE=n MULTIPLE&gt;</tt></TD>
<td align="left">

<p class=para>
Scrolled list</TD>
</TR>
<tr class=row>
<td align="left">

<p class=para>
<tt class=literal>&lt;TEXTAREA ROWS=yy COLS=xx NAME="name"&gt;
.
.
&lt;/TEXTAREA&gt;</tt></TD>
<td align="left">

<p class=para>
Multiline text fields</TD>
</TR>
<tr class=row>
<td align="left">

<p class=para>
<tt class=literal>&lt;INPUT TYPE="submit" VALUE="Message!"&gt;
&lt;INPUT TYPE="submit" NAME="name" VALUE="value"&gt;
&lt;INPUT TYPE="image" SRC="/image" 
                    NAME="name" VALUE="value"&gt;</tt></TD>
<td align="left">

<p class=para>
Submit buttons</TD>
</TR>
<tr class=row>
<td align="left">

<p class=para>
<tt class=literal>&lt;INPUT TYPE="reset" VALUE="Message!"&gt;</tt></TD>
<td align="left">

<p class=para>
Reset button</TD>
</TR>
<tr class=row>
<td align="left">

<p class=para>
<tt class=literal>&lt;/FORM&gt;</tt></TD>
<td align="left">

<p class=para>
Ends 
form</TD>
</TR>
</TABLE>
<p>
</DIV>
</DIV>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch03_08.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src="gifs/txthome.gif" alt="Home" border=0></a></td>
<td width=172 align=right valign=top><a href="ch04_02.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Complete (Non-Parsed) Headers</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td>
<td width=172 align=right valign=top>Sending Data to the Server</td>
</tr>
</table>

<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
</DIV>

</BODY>
</HTML>
