<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 11] 11.2 Game of Concentration</TITLE>
<meta name="author" content="Shishir Gundavaram">
<meta name="date" content="Mon Mar 17 13:36:07 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="cgi programming">
<meta name="title" content="CGI Programming on the World Wide Web">
<!-- JavaScript: pathcont.js -->

</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><img src="gifs/smbanner.gif" alt="CGI Programming on the World Wide Web"></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch11_01.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b>Chapter 11</b></td>
<td width=172 align=right valign=top><a href="ch11_03.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>
<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="CGI-CHP-11-SECT-2">11.2 Game of Concentration</A></h2>

<p class=para>
Up to this point, we have discussed reasonably
useful applications. So it is time now to look at some pure entertainment:
the game of Concentration (also called Memory). The game consists
of an arbitrary number of tiles, where each tile exactly matches
one other tile. The value (or picture) "under" each tile is hidden
from the user. <a href="#CGI-CHP-11-FIG-1">Figure 11.1</A> shows what the initial screen looks like.

<div class=figure>
<h4 class=figure><a class="TITLE" name="CGI-CHP-11-FIG-1">Figure 11-1: First game screen</A></h4>


<p>
<img aligindex.htmln=middle webstripperattrwas="src" webstripperlinkwas="http://rtfm.vn.ua/prog/perl/orb/books/web/cgi/figs/cgi1101.gif" alt="[Graphic: Figure 11-1]" width=414 height=368>

</DIV>

<p class=para>
When the user selects a tile, the value is
displayed. The user can select two tiles at a time. If they match,
the values behind the tiles remain displayed. The object of the
game is to find all matching tiles in as few looks as possible.
<a href="#CGI-CHP-11-FIG-2">Figure 11.2</A> shows a successful match.

<div class=figure>
<h4 class=figure><a class="TITLE" name="CGI-CHP-11-FIG-2">Figure 11-2: Game screen with successful match</A></h4>


<p>
<img align=index.htmlmiddle webstripperattrwas="src" webstripperlinkwas="http://rtfm.vn.ua/prog/perl/orb/books/web/cgi/figs/cgi1102.gif" alt="[Graphic: Figure 11-2]" width=414 height=368>

</DIV>

<p class=para>
The new technique introduced by this example
is how to store the entire state of the board in the HTML
code sent to the browser. Each click by the user sends the state
of the tiles back to the server so that a correct new board can
be generated. This is how you access the program for the first time:

<div class=screen>
<p>
<pre>
http://some.machine/cgi-bin/concentration.pl
</PRE>
</DIV>

<p class=para>
This program displays a board, where each tile links back
to this program with a query string like this:

<div class=screen>
<p>
<pre>
http://some.machine/cgi-bin/concentration.pl?
%258%c8%7d0%834%578%4b0%a8c%dac%ce4%bb8%1450%2bc%ea6%960%6a4%708%1%0
</PRE>
</DIV>

<p class=para>
The query string actually contains all of the board information
(encrypted so that you can't cheat!) as well as the user selections.
This is yet another way to store information when multiple sessions
are involved, if you don't want to use temporary files and magic
cookies. It is not a general solution for all applications, because
the length of the query string can be truncated by the browser or
the server-see <a href="ch04_01.htm">Chapter 4, <i>Forms and CGI</i></A>.
But in this case, the size of the data is small, so it is perfect.

<p class=para>
When a certain tile is selected, the program receives a query
like the one above. It processes the query, checks to see if the
two user selections match, and then creates a new series of query
strings for each tile. The process is repeated until the game is
finished.

<p class=para>
Now for the code:

<div class=screen>
<p>
<pre>
#!/usr/local/bin/perl
@BOARD = ();
</PRE>
</DIV>

<p class=para>
The <i class=emphasis>BOARD</I> array
is used to store the board information-the values "under" each tile.
A typical array might look like this:

<div class=screen>
<p>
<pre>
1 4 5 8 7 2 1 6 7 4 6 3 2 8 3 5
</PRE>
</DIV>

<p class=para>
In
this game, the board contains 16 tiles, each containing a number
from 1 to 8. For example, the user has to choose location numbers
2 and 10 to find a match for the value 4.

<div class=screen>
<p>
<pre>
$display = "";
</PRE>
</DIV>

<p class=para>
This variable
will hold the needed HTML to produce a board
layout. The program creates the layout simply by appending information
to this string. If the user's browser does not support graphics,
this string is output as is. However, if a graphic browser is being
used, the program performs some string substitution and inserts
&lt;IMG&gt; tags.

<p class=para>
We will look at the graphic aspects
in more detail after we run through the logic of the game.

<div class=screen>
<p>
<pre>
$spaces = " " x 5;
$images_dir = "/icons";
</PRE>
</DIV>

<p class=para>
The <i class=emphasis>$spaces</I> variable is used to add extra
spaces to the output between each tile. And <i class=emphasis>$images_dir</I>
points to the directory where the images (representing the values
behind the tiles) are stored.

<div class=screen>
<p>
<pre>
$query_string = $ENV{'QUERY_STRING'};
if ($query_string) {
</PRE>
</DIV>

<p class=para>
If a query string is passed
to this program (which happens every time the user clicks on a tile),
this block of code is executed.

<div class=screen>
<p>
<pre>
    ($new_URL_query, $user_selections) = &amp;undecode_query_string (*BOARD);
</PRE>
</DIV>

<p class=para>
The <i class=emphasis>undecode_query_string</I>
subroutine decodes the query string (and also decrypts it), fills
the <i class=emphasis>BOARD</I> array with the board information-based
on the information stored in query string-and returns all the information
needed by the program to interpret the state of the board. The two
strings returned are <i class=emphasis>$new_URL_query</I>, containing
the values of the 16 markers, and <i class=emphasis>$user_selections</I>,
containing the positions of the tiles that the user selected. This
is what <i class=emphasis>$new_URL_query</I> looks like:

<div class=screen>
<p>
<pre>
%1%4%5%8%7%2%1%6%7%4%6%3%2%8%3%5
</PRE>
</DIV>

<p class=para>
in
other words, 16 values separated by percent signs. The position
of each value represents the position of the tile on the board.
The value shown is the actual value under the tile. For example,
the second tile contains the value 4.

<p class=para>
The format of
<i class=emphasis>$user_selections</I> is:

<div class=screen>
<p>
<pre>
1%0
</PRE>
</DIV>

<p class=para>
It contains two values
because the user turns up two tiles in succession, trying to find
two that match. The 1%0 in this case indicates that the user has
clicked on tile number 1 for his or her first selection. The 0 (which
doesn't correspond to any position on the board) indicates that
only one tile has been turned up. Next time, if the user selects
another tile-say tile number 7-the user selection string will look
like this:

<div class=screen>
<p>
<pre>
1%7
</PRE>
</DIV>

<p class=para>
From the board data in
<i class=emphasis>$new_URL_query </I>above, you can see that tiles
number 1 and 7 both contain the value 1, which signifies a match.
In this case, the program changes the query string for each tile
to reflect a match by adding a "+" sign:

<div class=screen>
<p>
<pre>
%1+%4%5%8%7%2%1+%6%7%4%6%3%2%8%3%5
</PRE>
</DIV>

<p class=para>
These tiles will no longer have links (the user cannot "open"
the tile as the value is known), but rather, the values will be
displayed.

<div class=screen>
<p>
<pre>
    &amp;draw_current_board (*BOARD, $new_URL_query, $user_selections);
</PRE>
</DIV>

<p class=para>
The <i class=emphasis>draw_current_board</I>
routine uses the information stored in the <i class=emphasis>BOARD</I>
array, as well as the query information and user selections, to
draw an updated board.

<div class=screen>
<p>
<pre>
} else {
    &amp;create_game (*BOARD);
    $new_URL_query = &amp;build_decoded_query (*BOARD);
    &amp;draw_clear_board ($new_URL_query);
}
</PRE>
</DIV>

<p class=para>
If no query string is passed to this program, the <i class=emphasis>create_game</I>
subroutine is called to fill the <i class=emphasis>BOARD</I> array
with new board information. The values for each tile are randomly
selected, so a person can play over and over again as long as boredom
does not set in. The <i class=emphasis>build_decoded_query</I> subroutine
uses the information in <i class=emphasis>BOARD</I> to create a encrypted
query string. Finally, <i class=emphasis>draw_clear_board</I> uses
the information to draw the board. Actually, the board is not yet
drawn, but rather the HTML needed to draw the
board is stored in the <i class=emphasis>$display</I> variable.

<div class=screen>
<p>
<pre>
&amp;display_board ();
exit(0);
</PRE>
</DIV>

<p class=para>
The <i class=emphasis>display_board</I> subroutine checks the
user's browser type (either text or graphic), performs the appropriate
substitutions, and sends the information to the browser for display.

<p class=para>
The <i class=emphasis>create_game</I> subroutine fills up the
specified array with a random board layout.

<div class=screen>
<p>
<pre>
sub create_game
{
    local (*game_board) = @_;
    local ($loop, @number, $random);
    srand (time | $$);
</PRE>
</DIV>

<p class=para>
A good seed for the random number generator is set by using
the combination of the current time and the process PID.

<div class=screen>
<p>
<pre>
    for ($loop=1; $loop &lt;= 16; $loop++) {
        $game_board[$loop] = 0;
    }
    for ($loop=1; $loop &lt;= 8; $loop++) {
        $number[$loop] = 0;
    }
</PRE>
</DIV>

<p class=para>
The
<i class=emphasis>game_board</I> and <i class=emphasis>number</I>
arrays are initialized. Remember, <i class=emphasis>$game_board</I>
is just a reference to the array that is passed to this subroutine.
Throughout the different subroutines in this program, we will use
<i class=emphasis>$game_board</I> to store the values behind the
16 tiles. Note that the loop begins at 1, because tiles are numbered
from 1 to 16. We never load anything into <i class=emphasis>$game_board[0]</I>.
In fact, we use the number 0 in other parts of the program to indicate
when the user has not yet selected a tile.

<p class=para>
The <i class=emphasis>$number</I>
array keeps track of the values that are already placed in the <i class=emphasis>game_board</I>
array. This is so that a value appears "behind" only two tiles.

<div class=screen>
<p>
<pre>
    for ($loop=1; $loop &lt;= 16; $loop++) {
        do {
            $random = int (rand(8)) + 1;
        } until ($number[$random] &lt; 2);
        $game_board[$loop] = $random;
        $number[$random]++;
    }
}
</PRE>
</DIV>

<p class=para>
First, a random value
from 1 to 8 is selected. If the value is already stored in the <i class=emphasis>$number</I>
array twice, another random value is chosen. On the other hand,
if the value is valid, it is stored in the <i class=emphasis>$game_board</I>
array. This whole process is repeated 16 times, until the board
is completely filled.

<p class=para>
The <i class=emphasis>build_decoded_query</I>
subroutine uses the array we just created to construct a decoded
query string.

<div class=screen>
<p>
<pre>
sub build_decoded_query
{
    local (*game_board) = @_;
    local ($URL_query, $loop, @temp_board);
    for ($loop=1; $loop &lt;= 16; $loop++) {
        ($temp_board[$loop] = $game_board[$loop]) =~
            s/(\w+)/sprintf ("%lx", $1 * (($loop * 50) + 100))/e;
    }
</PRE>
</DIV>

<p class=para>
The loop builds up a string of 16 values, one at a time. These
values come from the BOARD array, which the calling
program passes to this subroutine.

<p class=para>
The <i class=emphasis>$temp_board</I>
array takes on the value of a successive element of the board array
each time through the loop. A series of arithmetic operations are
performed on the value, and then it is converted to a hexadecimal
number. This is an arbitrary encryption scheme. Just about any encryption
technique can be used, as long as you can reverse the process when
you get the string back, and so that the user will not be able to
see the board information by looking at a query string.

<p class=para>
Of
course, if you use the exact algorithm I'm showing here, someone
who's read this book can play your game and figure out what the
values are. Maybe no one would go to such trouble to cheat on a
game that three-year-olds play, but you should be sure to make up
a different encryption algorithm if you're using this subroutine
in a serious CGI application.

<p class=para>
Note the e at the end
of the regular expression, which instructs Perl to execute the second
part of the substitute operator (the <i class=emphasis>sprintf</I>
statement). In fact, we have been using this type of construct throughout
the book; see all the <i class=emphasis>parse_form_data</I> subroutines.

<div class=screen>
<p>
<pre>
    $URL_query = join ("%", @temp_board);
    return ($URL_query);
}
</PRE>
</DIV>

<p class=para>
The
<i class=emphasis>temp_board</I> array is joined to create a string
containing the query string. Notice how the loop starts with the
index of 1, which means that the query will start with a leading
"%". There is no specific reason for doing this; you could omit
it if you want.

<p class=para>
We'll use this short subroutine later
in this section:

<div class=screen>
<p>
<pre>
sub build
{
    local (@string) = @_;
    $display = join ("", $display, @string);
}
</PRE>
</DIV>

<p class=para>
This
subroutine concatenates the string(s) passed to it with the <i class=emphasis>$display</I>
variable. Note that <i class=emphasis>$display</I> is a global variable.

<p class=para>
The <i class=emphasis>draw_clear_board</I> subroutine draws
the board when the program is invoked for the first time.

<div class=screen>
<p>
<pre>
sub draw_clear_board
{
    local ($URL_query) = @_;
    local ($URL, $inner, $outer, $index, $anchor);
    $URL = join ("", $ENV{'SCRIPT_NAME'}, "?", $URL_query);
</PRE>
</DIV>

<p class=para>
The input to this subroutine is the <i class=emphasis>BOARD</I>
array, the elements of which get joined into a string and placed
after a question mark. So the <i class=emphasis>$URL</I> variable
contains a string that looks like this:

<div class=screen>
<p>
<pre>
/cgi-bin/concentration.pl?
%258%c8%7d0%834%578%4b0%a8c%dac%ce4%bb8%1450%2bc%ea6%960%6a4%708
</PRE>
</DIV>

<p class=para>
To continue with the subroutine:

<div class=screen>
<p>
<pre>
    for ($outer=1; $outer &lt;= 4; $outer++) {
        for ($inner=1; $inner &lt;= 4; $inner++) {
            $index = (4 * ($outer - 1)) + $inner;
            $anchor = join("%", "", $index, "0");
</PRE>
</DIV>

<p class=para>
The
loop iterates 16 times to add information about the tile number
for each tile. For example, it will add the string "%1%0" to the
query string for tile number 1, "%2%0" for tile 2, and so on. Later,
when the board is displayed and the user clicks a tile, the program
can look at the string to figure out which tile was clicked.

<p class=para>
You might be wondering why we did not just use a <i class=emphasis>for</I>
loop to iterate 16 times. The reason is that we want to display
four tiles on one line (see the graphic output above or the text
output below).

<div class=screen>
<p>
<pre>
            &amp;build(qq|&lt;A HREF="$URL$anchor"&gt;**&lt;/A&gt;|, $spaces);
        }
        &amp;build ("\n\n");
    }
}
</PRE>
</DIV>

<p class=para>
For
text browsers, the string "**" represents each tile. <a href="#CGI-CHP-11-FIG-3">Figure 11.3</A>
shows how the output will appear on a text browser.

<div class=figure>
<h4 class=figure><a class="TITLE" name="CGI-CHP-11-FIG-3">Figure 11-3: Text browser output</A></h4>


<p>
<img aligindex.htmln=middle webstripperattrwas="src" webstripperlinkwas="http://rtfm.vn.ua/prog/perl/orb/books/web/cgi/figs/cgi1103.gif" alt="[Graphic: Figure 11-3]" width=500 height=338>

</DIV>

<p class=para>
You've probably been wondering how we're
going to untangle the marvelous encrypted garbage that we've stored
in the HTML code for each tile. The next subroutine
we will look at decodes the query information when a tile is selected.

<div class=screen>
<p>
<pre>
sub undecode_query_string
{
    local (*game_board) = @_;
    local ($user_choices, $loop, $original_query, $URL_query);
    $ENV{'QUERY_STRING'} =~ /^((%\w+\+{0,1}){16})%(.*)$/;
    ($original_query, $user_choices) = ($1, $3);
</PRE>
</DIV>

<p class=para>
The
regular expression takes the first 16 strings in the format of <i class=emphasis>%xx</I>
(possibly followed by "+" to indicate a match), stores them in <i class=emphasis>$original_query</I>,
and places the rest of the query (the user selections) in the variable
<i class=emphasis>$user_choices</I>.

<p class=para>
The regular expression
is shown below. Basically, (<i class=command>%\w+\+{0,1}</i>) matches
strings like %258 or %258+ (where the plus sign indicates that the
tile has been successfully matched). So the larger expression (<i class=command>(%\w+\+{0,1}){16}</i>)
matches the whole 16 tiles. This larger expression becomes <i class=emphasis>$1</I>
because it is enclosed in the first set of parentheses.


<p>
<img aligindex.htmln=middle webstripperattrwas="src" webstripperlinkwas="http://rtfm.vn.ua/prog/perl/orb/books/web/cgi/figs/cgi1104.gif" alt="[Graphic: Figure from the text]" width=463 height=357>

<p class=para>
Notice
the second set of parentheses? They're the parentheses in (<i class=command>%\w+\+{0,1}</i>).
This becomes <i class=emphasis>$2</I>, but we don't care about that.
We used the parentheses simply to group an expression so we could
repeat it 16 times.

<p class=para>
After the 16 tiles comes a percent
sign, which we specify explicitly, and then the (<i class=command>.*</i>)
that matches everything else. (We didn't really need the $ to match
the end of the line, because .* always matches everything that's
left.) The (<i class=command>.*</i>) becomes <i class=emphasis>$3</I>,
and we save it as the user selections.

<p class=para>
So now, <i class=emphasis>$original_query</I>
will contain the encrypted values in the tiles, looking something
like this:

<div class=screen>
<p>
<pre>
%258%c8%7d0%834%578%4b0%a8c%dac%ce4%bb8%1450%2bc%ea6%960%6a4%708
</PRE>
</DIV>

<p class=para>
while <i class=emphasis>$user_choices</I> contains the user
selections, like this:

<div class=screen>
<p>
<pre>
	1%7
</PRE>
</DIV>

<p class=para>
We can now operate on
the string of tile values.

<div class=screen>
<p>
<pre>
    @game_board = split (/%/, $original_query);
</PRE>
</DIV>

<p class=para>
The <i class=emphasis>$original_query</I> variable is split
on the "%" delimiter to create a 16-element array consisting of
the board positions.

<div class=screen>
<p>
<pre>
    for ($loop=1; $loop &lt;= 16; $loop++) {
        $game_board[$loop] =~ s|(\w+)|hex ($1) / (($loop * 50) + 100)|e;
    }
</PRE>
</DIV>

<p class=para>
A regular expression
similar to the one used to encode the query string is used to decode
it. The <i class=emphasis>hex</I>
command translates a number from hexadecimal to a format that can
be used in arithmetic calculations.

<div class=screen>
<p>
<pre>
    $URL_query = join ("%", @game_board);
    return ($URL_query, $user_choices);
}
</PRE>
</DIV>

<p class=para>
Finally, the decoded query string and the string consisting
of the user choices are returned.

<p class=para>
Here is the most complicated
part of the program-the <i class=emphasis>draw_current_board</I>
subroutine that checks for tiles that match, and then updates the
board to reflect this. For each tile, the subroutine has to decide
whether to turn it up (display the hidden value) or down (in which
case it has a link so the user can click on it and continue the
game). When a link is added, it must contain the state of the entire
16 tiles, plus information on which tile if any is currently selected.

<div class=screen>
<p>
<pre>
sub draw_current_board
{
    local (*game_board, $URL_query, $user_choices) = @_;
    local ($one, $two, $count, $script, $URL, $outer, $inner, $index, $anchor);
    ($one, $two) = split (/%/, $user_choices);
</PRE>
</DIV>

<p class=para>
The user choice string
(i.e.,"1%2") is split on the "%" delimiter and each choice is stored
in a separate variable.

<div class=screen>
<p>
<pre>
    $count = 0;
</PRE>
</DIV>

<p class=para>
The <i class=emphasis>$count</I>
variable is initialized to zero. It is used to keep track of the
total number of matched tiles on the board. If that is equal to
16, the user has won the game.

<div class=screen>
<p>
<pre>
    if ( int ($game_board[$one]) == int ($game_board[$two]) ) {
        $game_board[$one] = join ("", $game_board[$one], "+");
        $game_board[$two] = join ("", $game_board[$two], "+");
    }
</PRE>
</DIV>

<p class=para>
If the two user
choices match the values stored in the board array, a "+" is added
to each position in the array. Remember, before the user selects
a tile, the query string will look like this (for tile number 1):

<div class=screen>
<p>
<pre>
http://some.machine/cgi-bin/concentration.pl?
%258%c8%7d0%834%578%4b0%a8c%dac%ce4%bb8%1450%2bc%ea6%960%6a4%708%1%0
</PRE>
</DIV>

<p class=para>
And for tile number 2, it will have the following format:

<div class=screen>
<p>
<pre>
http://some.machine/cgi-bin/concentration.pl?
%258%c8%7d0%834%578%4b0%a8c%dac%ce4%bb8%1450%2bc%ea6%960%6a4%708%2%0
</PRE>
</DIV>

<p class=para>
Notice how the next-to-last number indicates the tile number.
After the user selects a second tile (say tile number 4), the query
string for tile number 1 will look like this:

<div class=screen>
<p>
<pre>
http://some.machine/cgi-bin/concentration.pl?
%258%c8%7d0%834%578%4b0%a8c%dac%ce4%bb8%1450%2bc%ea6%960%6a4%708%1%4
</PRE>
</DIV>

<p class=para>
If the values stored under tiles 1 and 4 match, the program
will append a "+" to indicate a match, so that there is no hypertext
link created for these tiles.

<div class=screen>
<p>
<pre>
    $URL_query = &amp;build_decoded_query (*game_board);
</PRE>
</DIV>

<p class=para>
A query based on the current board configuration is created
by calling the <i class=emphasis>build_decoded_query</I> subroutine,
just as we did when the game started.

<div class=screen>
<p>
<pre>
    $script = $ENV{'SCRIPT_NAME'};
    $URL = join ("", $script, "?", $URL_query);
    for ($outer=1; $outer &lt;= 4; $outer++) {
        for ($inner=1; $inner &lt;= 4; $inner++) {
            $index = (4 * ($outer - 1)) + $inner;
</PRE>
</DIV>

<p class=para>
The
two loops iterate through the board array four elements at a time.

<div class=screen>
<p>
<pre>
            if ($game_board[$index] =~ /\+/) {
                $game_board[$index] =~ s/\+//;
                &amp;build (sprintf ("%02d", $game_board[$index]), 
						                   $spaces);
                $count++;
</PRE>
</DIV>

<p class=para>
If the value in the board contains a "+", the count is incremented,
and the actual value behind the tile is displayed. No hypertext
link is attached to the tile, because the user is not supposed to
select the tile again.

<div class=screen>
<p>
<pre>
            } elsif ( ($index == $one) || ($index == $two) ) {
                &amp;build (sprintf ("%02d", $game_board[$index]), 
									      $spaces);
</PRE>
</DIV>

<p class=para>
The value of a tile is displayed if the loop index equals
the tile that is selected by the user. Remember, if the two tiles
that are selected by the user do not match, they are "closed."

<div class=screen>
<p>
<pre>
            } else {
                if ($one &amp;&amp; $two) {
                    $anchor = join("%", "", $index, "0");
                } else {
                    $anchor = join("%", "", $one, $index);
                }
</PRE>
</DIV>

<p class=para>
You have to take a minute to think about when this <i class=emphasis>else</I>
clause executes. The current tile has not been turned up because
of a successful match (that happened during the <i class=emphasis>if</I>
block) nor is it currently selected (that happened during the elsif
block). So we know that the tile is turned down, and that we want
to attach a hypertext link so that the user can select it.

<p class=para>
The only question is what to put in the user selections. If
both <i class=emphasis>$one</I> and <i class=emphasis>$two</I> are
set, we know that the user selected two tiles and that we are starting
over. Therefore, we want to display "1%0" for tile number 1, "2%0"
for tile number 2, and so on. That happens in the if block. If one
tile has been chosen, we want to record that tile and the current
tile. For instance, if the user selects tile 1, we want tile 7 to
contain "1%7" as the user selections. This happens in the else block.

<div class=screen>
<p>
<pre>
                &amp;build(qq|&lt;A HREF="$URL$anchor"&gt;**&lt;/A&gt;|, $spaces);
            }
        }
        &amp;build ("\n\n");
    }
</PRE>
</DIV>

<p class=para>
A
hypertext link is generated for all of the other tiles that are
turned down.

<div class=screen>
<p>
<pre>
    if ($count == 16) {
        &amp;build ("&lt;HR&gt;You Win!\nIf you want to play again, ");
        &amp;build (qq|click &lt;A HREF="$script"&gt;here&lt;/A&gt;&lt;BR&gt;|);
    }
}
</PRE>
</DIV>

<p class=para>
Finally, if the count
is 16, which means that the user has matched all 8 pairs, a victory
message is displayed.

<p class=para>
The last subroutine we will discuss
manipulates the <i class=emphasis>$display</I> variable to show images
if a graphic browser is being used.

<div class=screen>
<p>
<pre>
sub display_board
{
    local ($client_browser, $nongraphic_browsers);
    $client_browser = $ENV{'HTTP_USER_AGENT'};
    $nongraphic_browsers = 'Lynx|CERN-LineMode';
    print "Content-type: text/html", "\n\n";
    if ($client_browser =~ /$nongraphic_browsers/) {
			print "Welcome to the game of Concentration!", "\n";
		} else {
        print qq|&lt;IMG SRC="$images_dir/concentration.gif"&gt;|;
        $display =~ s|\*\*&lt;/A&gt;|&lt;IMG SRC="$images_dir/question.gif"&gt;&lt;/A&gt; |g;
        $display =~ s|(\d+)\s|&lt;IMG SRC="$images_dir/$1.gif"&gt;   |g;
</PRE>
</DIV>

<p class=para>
The string "**" is replaced with the
"question.gif" image, and each number found (indicating either a
match or a selection) is substituted with an appropriate "gif" image
("01.gif" for the value 01, and so on).

<div class=screen>
<p>
<pre>
        $display =~ s|\n\n|\n\n\n|g;
        $display =~ s|You Win!|&lt;IMG SRC="$images_dir/win.gif"&gt;|g;
    } 
    print "&lt;HR&gt;", "&lt;PRE&gt;", "\n";
    print $display, "\n";
    print "&lt;/PRE&gt;", "&lt;HR&gt;", "\n";
}
</PRE>
</DIV>

<p class=para>
The variable <i class=emphasis>$display</I> is sent to the
browser for output. The &lt;PRE&gt; tags allow the formatting to remain
intact. In other words, spaces and newline are preserved.

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch11_01.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src="gifs/txthome.gif" alt="Home" border=0></a></td>
<td width=172 align=right valign=top><a href="ch11_03.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Animated Clock</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td>
<td width=172 align=right valign=top>Introduction to Imagemaps</td>
</tr>
</table>

<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
</DIV>

</BODY>
</HTML>
