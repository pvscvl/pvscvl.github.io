<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 3] 3.3 Accept Types and Content Types</TITLE>
<meta name="author" content="Shishir Gundavaram">
<meta name="date" content="Mon Mar 17 13:22:08 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="cgi programming">
<meta name="title" content="CGI Programming on the World Wide Web">
<!-- JavaScript: pathcont.js -->

</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><img src="gifs/smbanner.gif" alt="CGI Programming on the World Wide Web"></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch03_02.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b>Chapter 3</b></td>
<td width=172 align=right valign=top><a href="ch03_04.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>
<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="CGI-CHP-3-SECT-3">3.3 Accept Types and Content Types</A></h2>

<p class=para>
CGI applications can return
nearly any type of virtual document, as long as the client can handle
it properly. It can return a plain text file, an HTML file ... or
it can send PostScript, PDF, SGML, etc.

<p class=para>
This is why the client sends a list of "accept types" it supports,
both directly and indirectly through helper applications, to the
server when it issues a request. The server stores this information
in the environment variable 
HTTP_ACCEPT,
and the CGI program can check this variable to ensure that it returns
a file in a format the browser can handle.

<p class=para>
It's also why when you are returning a document, the CGI program
needs to use the <i class=command>Content-type</i> header to notify
the client what type of data it is sending, so that the browser
can format and display the document properly.

<p class=para>
Here's
a simple snippet of code that checks to see if the browser accepts
JPEG or GIF images:

<div class=screen>
<p>
<pre>
#!/usr/local/bin/perl
$gif_image = "logo.gif";
$jpeg_image = "logo.jpg";
$plain_text = "logo.txt";
$accept_types = $ENV{'HTTP_ACCEPT'};
if ($accept_types =~ m|image/gif|) {
		$html_document = $gif_image;
} elsif ($accept_types =~ m|image/jpeg|) {
		$html_document = $jpeg_image;
} else {
		$html_document = $plain_text;
}
.
.
.
</PRE>
</DIV>

<p class=para>
We use a regular expression to search the <i class=emphasis>$accept_types</I>
variable for a MIME content type of <i class=command>image/gif</i>
and <i class=command>image/jpeg</i>. Once that's done, you can open
the file, read it, and output the data to standard output, like
we've seen in previous examples.

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch03_02.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src="gifs/txthome.gif" alt="Home" border=0></a></td>
<td width=172 align=right valign=top><a href="ch03_04.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>CGI and Response Headers</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td>
<td width=172 align=right valign=top>The Content-length Header</td>
</tr>
</table>

<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
</DIV>

</BODY>
</HTML>
