<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 8] 8.2 CGI Side Includes</TITLE>
<meta name="author" content="Shishir Gundavaram">
<meta name="date" content="Mon Mar 17 13:32:26 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="cgi programming">
<meta name="title" content="CGI Programming on the World Wide Web">
<!-- JavaScript: pathcont.js -->

</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><img src="gifs/smbanner.gif" alt="CGI Programming on the World Wide Web"></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch08_01.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b>Chapter 8</b></td>
<td width=172 align=right valign=top><a href="ch08_03.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>
<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="CGI-CHP-8-SECT-2">8.2 CGI Side Includes</A></h2>

<p class=para>
Using hidden fields is probably the simplest
way to maintain information across multiple CGI instances. But it
is far from the most efficient.

<p class=para>
In this next example of maintaining state, we embed special
codes into HTML documents that resemble Server
Side Includes (see <a href="ch05_01.htm">Chapter 5, <i>Server Side Includes</i></A> for more
information on Server Side Includes). These codes are actually parsed
by a CGI program which uses the codes to maintain information across
several documents. This algorithim is best illustrated via example.

<p class=para>
Let's
create a multiple survey form system. Here is the first form of
the survey:

<div class=screen>
<p>
<pre>
&lt;HTML&gt;
&lt;HEAD&gt;&lt;TITLE&gt;Television/Movie Survey&lt;/TITLE&gt;&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;H1&gt;Welcome to the CGI Network!&lt;/H1&gt;
&lt;HR&gt;
In order to better serve you, we would like to know what type of
movies and variety shows you like to watch on TV. Over the last couple
of years, you, the viewers, were directly responsible for the lasting
success of many of our shows. Your comments are extremely valuable to
us, so please take a few moments to fill out a survey.
&lt;P&gt;
The current time is: &lt;!--#insert var="DATE_TIME"--&gt;&lt;BR&gt;
</PRE>
</DIV>

<p class=para>
At first glance, the construct in the last line displayed
above looks like a Server Side Include. However, it is not! This
document first gets parsed by a CGI program that looks for statements
like these and replaces them with appropriate information. Let's
refer to these statements as CGI Side Includes (
CSIs), or "pseudo" Server Side Includes. In
this case, the program will insert the current date and time.

<p class=para>
You may ask, what is the advantage of such a process? It allows
you to insert dynamic information in otherwise static documents.
Another alternative to this would be to place the information contained
within the document in the program, such as:

<div class=screen>
<p>
<pre>
print &lt;&lt;End_of_Form;
&lt;HTML&gt;
&lt;HEAD&gt;&lt;TITLE&gt;Sample Form&lt;/TITLE&gt;&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;H1&gt;This is a test of a sample form&lt;/H1&gt;
The current time is: $date_time
&lt;HR&gt;
.
.
.
&lt;/BODY&gt;&lt;/HTML&gt;
End_of_Form
</PRE>
</DIV>

<p class=para>
As you can see, this can be quite cumbersome, especially if
the document is large. Now, let's proceed with the rest of the form.

<div class=screen>
<p>
<pre>
&lt;HR&gt;
&lt;FORM ACTION="/cgi-bin/survey.pl?
			     cgi_cookie=&lt;!--#insert var="COOKIE"--&gt;&amp;
			     cgi_form_num=&lt;!--#insert var="NUMBER"--&gt;" METHOD="POST"&gt;
</PRE>
</DIV>

<p class=para>
As in other examples in this book, a query is passed to the
program as part of the ACTION attribute. Notice
the two CSI statements in the &lt;FORM&gt; tag.
The first one inserts a random number-also referred to as a <i class=emphasis>
magic cookie</I>-for
identification purposes, and the second one inserts the form number.
A cookie is needed to store the information from the various forms
in a unique data file. This cookie is passed to each and every form,
so that the form data is appended to the same data file. A form
number is needed to keep track of the various forms. We will discuss
these statements in detail later in this chapter.

<div class=screen>
<p>
<pre>
&lt;PRE&gt;
Full Name: &lt;INPUT TYPE="text" NAME="01 Full Name" SIZE=40&gt;
E-Mail:    &lt;INPUT TYPE="text" NAME="02 EMail Address" SIZE=40&gt;
</PRE>
</DIV>

<p class=para>
The field names are prefixed with numbers, so that they can
be sorted. This makes it possible to store the form data in the
order in which it is displayed in the form. Remember, you do not
need to encode the field names, as the browser will do so before
it submits the information to the server.

<div class=screen>
<p>
<pre>
&lt;/PRE&gt;
&lt;P&gt;
Which survey would you like to fill out: &lt;BR&gt;
&lt;INPUT TYPE="radio" NAME="cgi_survey" VALUE="Television" CHECKED&gt;Television&lt;BR&gt;
&lt;INPUT TYPE="radio" NAME="cgi_survey" VALUE="Movie"&gt;Movies&lt;BR&gt;
&lt;P&gt;
&lt;INPUT TYPE="submit" VALUE="Submit the survey"&gt;
&lt;INPUT TYPE="reset"  VALUE="Clear all fields"&gt;
&lt;/FORM&gt;
&lt;HR&gt;
&lt;/BODY&gt;&lt;/HTML&gt;
</PRE>
</DIV>

<p class=para>
The document is passed to the CGI program as extra path information.
For example, if you want the program to parse the CSI statements
and display the form, the following URL should be used:

<div class=screen>
<p>
<pre>
http://your.machine/survey.pl/start_survey.html
</PRE>
</DIV>

<p class=para>
where the file "/start_survey.html" contains the first form
of the survey. In the context of this example, if the user opts
to fill out the "Television" survey, the following two forms are
displayed, one after the other:

<div class=screen>
<p>
<pre>
&lt;HTML&gt;
&lt;HEAD&gt;&lt;TITLE&gt;Television/Movie Survey&lt;/TITLE&gt;&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;H1&gt;Television Survey&lt;/H1&gt;
&lt;HR&gt;
Welcome! We are glad that you have decided to fill out our
television survey. Please read all questions carefully. When you are finished,
press the Submit button for Part 2 of the survey.
&lt;P&gt;
The current time is: &lt;!--#insert var="DATE_TIME"--&gt;&lt;BR&gt;
</PRE>
</DIV>

<p class=para>
The date and time are inserted into the form using CGI side
includes.

<div class=screen>
<p>
<pre>

&lt;HR&gt;
&lt;FORM ACTION="/cgi-bin/survey.pl?cgi_cookie=&lt;!--#insert var="COOKIE"--&gt;&amp;cgi_survey=&lt;!--#insert var="SURVEY"--&gt;&amp;cgi_form_num=&lt;!--#insert var="NUMBER"--&gt;" METHOD="POST"&gt;
</PRE>
</DIV>

<p class=para>
The variable "SURVEY" inserts the user-selected
survey type, either "Television" or "Movie." The survey type is
retrieved from the information submitted by the user in the first
form. This ensures that the correct series of forms are displayed.

<div class=screen>
<p>
<pre>
What is your favorite comedy show?
&lt;BR&gt;
&lt;INPUT TYPE="radio" NAME="03 Comedy Show" VALUE="Single Web Dude"&gt;Single Web Dude&lt;BR&gt;
&lt;INPUT TYPE="radio" NAME="03 Comedy Show" VALUE="Gateway Friends"&gt;Gateway Friends&lt;BR&gt;
&lt;INPUT TYPE="radio" NAME="03 Comedy Show" VALUE="Mad About CGI" CHECKED&gt;Mad About CGI&lt;BR&gt;
&lt;INPUT TYPE="radio" NAME="03 Comedy Show" VALUE="Web Time"&gt;Web Time&lt;BR&gt;
&lt;P&gt;
Who is your favorite actor in a comedy show?
&lt;BR&gt;
&lt;INPUT TYPE="radio" NAME="04 TV Comedian" VALUE="John Riser" CHECKED&gt;John Riser&lt;BR&gt;
&lt;INPUT TYPE="radio" NAME="04 TV Comedian" VALUE="Jake LeBlanc"&gt;Jake LeBlanc&lt;BR&gt;
&lt;INPUT TYPE="radio" NAME="04 TV Comedian" VALUE="Mike Cosby"&gt;Mike Cosby&lt;BR&gt;
&lt;INPUT TYPE="radio" NAME="04 TV Comedian" VALUE="Marc Allen"&gt;Marc Allen&lt;BR&gt;
&lt;P&gt;
&lt;INPUT TYPE="submit" VALUE="Submit the survey"&gt;
&lt;INPUT TYPE="reset"  VALUE="Clear all fields"&gt;
&lt;/FORM&gt;
&lt;HR&gt;
&lt;/BODY&gt;&lt;/HTML&gt;
</PRE>
</DIV>

<p class=para>
The field names are prefixed with numerical values. Notice
the long, descriptive names for the field names and values. This
allows us to simply retrieve the names and values, decode them,
and print them out.

<p class=para>
Now, here is the second, and final, form in the "Television"
survey:

<div class=screen>
<p>
<pre>
&lt;HTML&gt;
&lt;HEAD&gt;&lt;TITLE&gt;Television/Movie Survey&lt;/TITLE&gt;&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;H1&gt;Televison Survey&lt;/H1&gt;
&lt;HR&gt;
Thanks for filling out Part 1 of our TV survey. Here is
Part 2... Again, please read all questions carefully. When you are finished,
press the Submit button to wrap up the survey.
&lt;P&gt;
The current time is: &lt;!--#insert var="DATE_TIME"--&gt;&lt;BR&gt;
&lt;HR&gt;
&lt;FORM ACTION="/cgi-bin/survey.pl?cgi_cookie=&lt;!--#insert var="COOKIE"--&gt;&amp;cgi_survey=&lt;!--#insert var="SURVEY"--&gt;&amp;cgi_form_num=&lt;!--#insert var="NUMBER"--&gt;" METHOD="POST"&gt;
What is your favorite action/drama show?
&lt;BR&gt;
&lt;INPUT TYPE="radio" NAME="05 TV Drama" VALUE="Masquerade on the Web"&gt;Masquerade on the Web&lt;BR&gt;
&lt;INPUT TYPE="radio" NAME="05 TV Drama" VALUE="Gateway Voyager"&gt;Gateway Voyager&lt;BR&gt;
&lt;INPUT TYPE="radio" NAME="05 TV Drama" VALUE="EH" CHECKED&gt;EH - Emergency HTTP Server&lt;BR&gt;
&lt;INPUT TYPE="radio" NAME="05 TV Drama" VALUE="W3C Hope"&gt;W3C Hope&lt;BR&gt;
&lt;P&gt;
Who is your favorite actor in an action/drama show?
&lt;BR&gt;
&lt;INPUT TYPE="radio" NAME="06 TV Drama Actor" VALUE="Bill Wyle" CHECKED&gt;Bill Wyle&lt;BR&gt;
&lt;INPUT TYPE="radio" NAME="06 TV Drama Actor" VALUE="John Clooney"&gt;John Clooney&lt;BR&gt;
&lt;INPUT TYPE="radio" NAME="06 TV Drama Actor" VALUE="Mike Strauss"&gt;Mike Strauss&lt;BR&gt;
&lt;INPUT TYPE="radio" NAME="06 TV Drama Actor" VALUE="Eric Wagner"&gt;Eric Wagner&lt;BR&gt;
&lt;P&gt;
&lt;INPUT TYPE="submit" VALUE="Submit the survey"&gt;
&lt;INPUT TYPE="reset"  VALUE="Clear all fields"&gt;
&lt;/FORM&gt;
&lt;HR&gt;
&lt;/BODY&gt;&lt;/HTML&gt;
</PRE>
</DIV>

<p class=para>
The two forms for the "Movie" survey are set up in the same
manner as the ones illustrated above. Let's look at the program:

<div class=screen>
<p>
<pre>
#!/usr/local/bin/perl
$exclusive_lock = 2;
$unlock = 8;
$request_method = $ENV{'REQUEST_METHOD'};
$webmaster = "shishir\@bu\.edu";
$document_root = "/home/shishir/httpd_1.4.2/public";
$survey_dir = "/tmp/";
</PRE>
</DIV>

<p class=para>
The variable <i class=emphasis>survey_dir</I> contains the
directory where the data files are stored. Whenever you are creating
temporary files, you should store them in <i class=emphasis>/tmp</I>
or <i class=emphasis>/var/tmp</I>, as these directories are cleaned
out every few days.

<div class=screen>
<p>
<pre>
@Television_files = ( "/tv_1.html", "/tv_2.html" );
@Movie_files = ( "/movie_1.html", "/movie_2.html" );
</PRE>
</DIV>

<p class=para>
These two arrays store the HTML survey
files that must be parsed for CSI statements. The most important
thing to note here is the way the variables are labeled. The first
part of the variable name-before the "_" character-corresponds to
the value of the <i class=emphasis>cgi_survey</I> field in the initial
form. The program determines the survey type chosen by the user-either
"Television" or "Movie"-and concatenates that string with "_files"
and evaluates the total string at run-time to determine the next
survey file.

<div class=screen>
<p>
<pre>
if ($request_method eq "GET") {
    $form_num = 0;
    $type = "start";
    $form_file = $ENV{'PATH_INFO'};
</PRE>
</DIV>

<p class=para>
Using the GET method indicates that the
user requested the starting form, which will be stored in PATH_INFO.
The <i class=emphasis>form_num</I> variable indicates the current
form number. In this case, zero indicates the starting form.

<p class=para>
The <i class=emphasis>type</I> variable is set to "start".
However, this value is never used because there is no corresponding
CSI in the initial form. It is just defined for clarity. Remember,
the manner in which the starting form must be accessed is a GET
request:

<div class=screen>
<p>
<pre>
http://your.machine/cgi-bin/survey.pl/start_survey.html
</PRE>
</DIV>

<p class=para>
After the first form is submitted, the server will execute
this program with a POST request and an additional
query. The process is repeated for all the forms in the survey.

<div class=screen>
<p>
<pre>
    if ($form_file) {
        $cookie = join ("_", $ENV{'REMOTE_HOST'}, time);
        $cookie = &amp;escape($cookie);
        &amp;pseudo_ssi ($form_file, $cookie, $type, $form_num);
    } else {
        &amp;return_error (500, "CGI Network Survey Error", 
                        "An initial survey form must be specified.");
    }
</PRE>
</DIV>

<p class=para>
Since the starting form was accessed, a new 
cookie
has to be created. This cookie is simply the client's host address
concatenated with the current time. Perl's <i class=emphasis>time</I> command returns the current time
as the number of seconds since 1970. This ensures that every user
has a different cookie.

<p class=para>
The <i class=emphasis>escape</I> subroutine encodes the cookie
string for insertion into the form. Finally, the <i class=emphasis>pseudo_ssi</I>
subroutine reads and parses the file specified by the variable <i class=emphasis>form_file</I>
for CSI statements. The three parameters that are passed to the
subroutine are the new cookie, the dummy form type, and the form
number. If corresponding CSI statements are found, the values stored
in these variables will be inserted appropriately.

<div class=screen>
<p>
<pre>
} elsif ($request_method eq "POST") {
    &amp;parse_form_data(*STATE);
    $form_num = $STATE{'cgi_form_num'};
    $type = $STATE{'cgi_survey'};
    $cookie = $STATE{'cgi_cookie'};
</PRE>
</DIV>

<p class=para>
The form information is retrieved and stored in the STATE
associative array. The <i class=emphasis>parse_form_data </I>subroutine
is slightly different than the one used in the previous examples;
it decodes the form field name, as well as the value.

<p class=para>
Once the initial form is submitted,<i class=emphasis> form_num</I>
variable equals zero, <i class=emphasis>type</I> contains either
"Television" or "Movie," and <i class=emphasis>cookie</I> holds a
string that uniquely identifies a user. After the initial form,
all the other forms will have the same cookie and type information.
However, the <i class=emphasis>form_num</I> variable will be incremented.

<div class=screen>
<p>
<pre>
    if ( ($type eq "Television") || ($type eq "Movie") ) {
</PRE>
</DIV>

<p class=para>
This conditional is executed if the user chose to fill out
either a television or movie survey. Since one of the values is
checked by default on the form, this variable will have to contain
either "Television" or "Movie." However, if someone accesses this
program by bypassing the starting form, and specifies something
other than these two values, an error message is displayed.

<div class=screen>
<p>
<pre>
        $limit = eval ("scalar (\@${type}_files)");
</PRE>
</DIV>

<p class=para>
This run-time evaluation is very important. It uses Perl's
<i class=emphasis>scalar</I>
function to determine the number of elements in the array that corresponds
to the value stored in the variable <i class=emphasis>type</I>. Here
is a simple example of <i class=emphasis>scalar </I>:

<div class=screen>
<p>
<pre>
@test = (1, 2, 3);
$number = scalar (@test);
</PRE>
</DIV>

<p class=para>
The variable <i class=emphasis>number</I> returns 3 to indicate
the existence of three elements.

<div class=screen>
<p>
<pre>
             if ( ($form_num &gt;= 0) &amp;&amp; ($form_num &lt;= $limit) ) {
            &amp;write_data_to_file();
</PRE>
</DIV>

<p class=para>
If the form number is within the limits, the <i class=emphasis>write_data_file</I>
subroutine is called to write the form information to a data file.
Remember, the same data file is used throughout the whole process.
On the other hand, if a user bypasses the forms, and tries to pass
a form number that is not within the limits, an error message is
displayed.

<div class=screen>
<p>
<pre>
            if ($form_num == $limit) {
                &amp;survey_over();
</PRE>
</DIV>

<p class=para>
If the form is the last one in the survey, the <i class=emphasis>survey_over</I>
subroutine is called to display the information stored in the data
file. It also deletes the data file.

<div class=screen>
<p>
<pre>
            } else {
                $form_file = eval("\$${type}_files[$form_num]");
                $form_num++;
                $cookie = &amp;escape($cookie);
                &amp;pseudo_ssi ($form_file, $cookie, $type, 
                             $form_num);
            }
</PRE>
</DIV>

<p class=para>
Again, a run-time evaluation is performed to retrieve the
name of the next file in the survey. If these two run-time <i class=emphasis>evals</I>
were not used, then two separate blocks of code have to be written:
one to handle the television survey, and the other to handle the
movie survey. It is more much efficient to do it this way.

<p class=para>
The form number is incremented, and the cookie value is encoded.
The subroutine <i class=emphasis>pseudo_ssi </I>is called to parse
the form file.

<div class=screen>
<p>
<pre>
        } else {
                &amp;return_error (500, "CGI Network Survey Error",
                    "You have somehow selected an invalid form!");
        }
    } else {
        &amp;return_error (500, "CGI Network Survey Error",
                "You have selected an invalid survey type!");
    }
} else {
    &amp;return_error (500, "Server Error",
                        "Server uses unsupported method");
}
exit(0);
</PRE>
</DIV>

<p class=para>
If the user somehow passed invalid information to the program,
error messages are returned.

<p class=para>
Now for the subroutines. The <i class=emphasis>pseudo_ssi</I>
subroutine parses the CSI statements.

<div class=screen>
<p>
<pre>
sub pseudo_ssi
{
    local ($file, $id, $kind, $number) = @_;
    local ($command, $argument, $parameter, $line);
    $file = $document_root . $file;
    open (FILE, "&lt;" . $file) ||
        &amp;return_error (500, "CGI Network Survey Error",
            "Cannot open: form [$number], file [$file].");
    flock (FILE, $exclusive_lock);
</PRE>
</DIV>

<p class=para>
The subroutine tries to open the specified file. An error
message is returned if the operation fails.

<div class=screen>
<p>
<pre>
    print "Content-type: text/html", "\n\n";
    while (&lt;FILE&gt;) {
        while ( ($command, $argument, $parameter) = 
            (/&lt;!--\s*#\s*(\w+)\s+(\w+)\s*=\s*"?(\w+)"?\s*--&gt;/io) ) {
</PRE>
</DIV>

<p class=para>
The initial loop iterates through each line in the file, and
stores it in the default variable <i class=emphasis>$_</I>. The second
loop uses a regular expression to check for a CSI statement within
the file. Here is the format for the CSI statement:

<div class=screen>
<p>
<pre>
&lt;!--#command argument="parameter"--&gt;
</PRE>
</DIV>

<p class=para>
Whitespace is ignored, and the quotation marks around the
parameter are optional. This is in great contrast to SSI statements,
where a strict format is enforced.

<div class=screen>
<p>
<pre>
            if ($command eq "insert") {
                if ($argument eq "var") {
                    if ($parameter eq "COOKIE") {
                        s//$id/;          
                    } elsif ($parameter eq "DATE_TIME") {
                        local ($time) = &amp;get_date_time();
                        s//$time/;          
                    } elsif ($parameter eq "NUMBER") {
                        s//$number/;
                    } elsif ($parameter eq "SURVEY") {
                        s//$kind/;
                    } else {
                        s///;
                    }
                } else {
                    s///;
                }
            } else {
                s///;
            }
        }
    
        print;
    }
</PRE>
</DIV>

<p class=para>
This block might look very confusing, but it is quite simple.
This program only supports the <i class=emphasis>insert</I>
command and the <i class=emphasis>var</I>
argument. However, four parameters are allowed: COOKIE,
DATE_TIME, NUMBER, and SURVEY.

<p class=para>
Notice the strange substitute command. The initial string
to substitute is not specified. Usually, the format of the substitute
command looks like this:

<div class=screen>
<p>
<pre>
s/initial/replacement/;
</PRE>
</DIV>

<p class=para>
Perl will work on the default variable <i class=emphasis>$_.</I>
However, if no initial string is specified, Perl automatically uses
the last matched regular expression. This just so happens to be
the CSI statement that matched earlier. This is a good trick in
Perl, because it is very efficient.

<p class=para>
The subroutine simply checks to see the parameter of the CSI,
and replaces the information appropriately. The <i class=emphasis>get_date_time</I>
subroutine is the same as the one used previously. If the command,
argument, or parameter specified in the file does not match the
ones listed, the substitute command is used to remove the CSI statement.
Note the following format:

<div class=screen>
<p>
<pre>
s///;
</PRE>
</DIV>

<p class=para>
Perl replaces the last matched regular expression with a null
string. It is very important to remove these unmatched CSI statements,
or else the enclosing <i class=emphasis>while</I> loop will run forever.
The reason for this is that the loop repeatedly checks for CSI statements.

<p class=para>
Finally, the modified line is output. A <i class=emphasis>print</I> command without any parameters
outputs the default variable <i class=emphasis>$_</I>.

<div class=screen>
<p>
<pre>
    flock (FILE, $unlock);
    close (FILE);
}
</PRE>
</DIV>

<p class=para>
Before we quit the subroutine, the file is unlocked and closed.

<p class=para>
The <i class=emphasis>write_data_to_file</I> subroutine opens
the data file and incorporates the survey results into it.

<div class=screen>
<p>
<pre>
sub write_data_to_file
{
    local ($key, $temp_key);
    open (FILE, "&gt;&gt;" . $survey_dir . $cookie) || 
                    &amp;return_error (500, "CGI Network Survey Error",
                        "Cannot write to a data file to store your info.");
    if ($form_num == 0) {
        print FILE $STATE{'cgi_survey'}, " Survey Filled Out", "\n";
    }
</PRE>
</DIV>

<p class=para>
The data file is opened in 
append mode. There is no need to lock the file,
because every user has a unique filename. If the form number indicates
that it is the initial form, a header is output.

<div class=screen>
<p>
<pre>
    foreach $key (sort (keys %STATE)) {
</PRE>
</DIV>

<p class=para>
Let's look at this construct from the innermost parentheses.
The <i class=emphasis>keys</I> command returns an array consisting
of all the keys of the associative array. The <i class=emphasis>sort</I>
function then sorts that array. And <i class=emphasis>foreach</I>
iterates through this array, storing each element in <i class=emphasis>key</I>.

<p class=para>
Information in an associative array is not stored in any order,
because it is based on a string index. As a result, the <i class=emphasis>
keys</I> command returns
the information in a random order. Prefixing numerical values to
the form field <i class=emphasis>names</I> allows us to sort the
information returned by the <i class=emphasis>keys</I> command.

<div class=screen>
<p>
<pre>
        if ($key !~ /^cgi_/) {
</PRE>
</DIV>

<p class=para>
If the key name begins with "cgi_", it is omitted. Internally
used variables are prefixed with "cgi_" to keep them separate from
real form data.

<div class=screen>
<p>
<pre>
            ($temp_key = $key) =~ s/^\d+\s//;
</PRE>
</DIV>

<p class=para>
This regular expression is used to remove the numerical value
from the key. The modified key is stored in <i class=emphasis>temp_key</I>.
The field names in the form were in the format:

<div class=screen>
<p>
<pre>
"01 Variable Name"
</PRE>
</DIV>

<p class=para>
We use the regular expression to search for a string that
starts with a numeric value followed by a space.

<div class=screen>
<p>
<pre>
            print FILE $temp_key, ": ", $STATE{$key}, "\n";
        }
    }
    close (FILE);
}
</PRE>
</DIV>

<p class=para>
The new key, along with the form value, is displayed. If the
form contained a scrolling list that allowed the user to make multiple
selections, then all of the values are stored in one string, separated
by the null character, "\0". This subroutine does not perform any
formatting on such a string. However, the next ordering system example
shows how to split and display these values separately.

<p class=para>
Note that the associative array is still indexed by the "old"
key. The new key was defined just for output purposes. Finally,
the file is closed.

<p class=para>
The <i class=emphasis>survey_over</I> subroutine thanks the
user and prints his or her responses.

<div class=screen>
<p>
<pre>
sub survey_over
{
    local ($file) = $survey_dir . $cookie;
    open (FILE, "&lt;" . $file) || 
                &amp;return_error (500, "CGI Network Survey Error",
                                 "Cannot read the survey data file [$file].");
    print &lt;&lt;Thanks;
Content-type: text/html
&lt;HTML&gt;
&lt;HEAD&gt;&lt;TITLE&gt;Thank You!&lt;/TITLE&gt;&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;H1&gt;Thank You!&lt;/H1&gt;
Thank you again for filling out our survey. Here is the information
that you selected: 
&lt;HR&gt;
&lt;P&gt;
Thanks
    while (&lt;FILE&gt;) {
        print $_, "&lt;BR&gt;";
    }
    print "&lt;HR&gt;";
    print "&lt;/BODY&gt;&lt;/HTML&gt;", "\n";
    close (FILE);
    unlink ($file);
}
</PRE>
</DIV>

<p class=para>
The file is opened in read mode, and the information contained
in it is displayed to standard output. Finally, the <i class=emphasis>
unlink</I> command deletes
the file.

<p class=para>
The <i class=emphasis>escape</I> subroutine encodes the data.
The code is very similar to the program presented at the beginning
of this book.

<div class=screen>
<p>
<pre>
sub escape
{
    local ($string) = @_;
    $string =~ s/(\W)/sprintf("%%%x", ord($1))/eg;
    return($string);
}
</PRE>
</DIV>

<p class=para>
Finally, the <i class=emphasis>parse_form_data</I> subroutine
parses the form field name as well as the form data. That is the
only difference between this version of the subroutine and the one
presented in the earlier examples.

<div class=screen>
<p>
<pre>
sub parse_form_data
{
    local (*FORM_DATA) = @_;
    
    local ($query_string, @key_value_pairs, $key_value, $key, $value);
    
    read (STDIN, $query_string, $ENV{'CONTENT_LENGTH'});
    if ($ENV{'QUERY_STRING'}) {
            $query_string = join("&amp;", $query_string, $ENV{'QUERY_STRING'});
    }     
    @key_value_pairs = split (/&amp;/, $query_string);
    foreach $key_value (@key_value_pairs) {
        ($key, $value) = split (/=/, $key_value);
        $key   =~ tr/+/ /; 
        $value =~ tr/+/ /;
            
        $key   =~ s/%([\dA-Fa-f][\dA-Fa-f])/pack ("C", hex ($1))/eg;
        $value =~ s/%([\dA-Fa-f][\dA-Fa-f])/pack ("C", hex ($1))/eg;
        if (defined($FORM_DATA{$key})) {
            $FORM_DATA{$key} = join ("\0", $FORM_DATA{$key}, $value);
        } else {
            $FORM_DATA{$key} = $value;
        }
    }
}
</PRE>
</DIV>

<p class=para>
There are other ways to accomplish an ordering or "shopping
cart" system like the one illustrated above. However, this is one
of the best way. The only drawback to this approach involves the
temporary files that are created.

<p class=para>
If a user decides to exit midway through the survey, the temporary
file will not be deleted, because there is no way to determine when
the user leaves. The only solution to this problem is to manually
delete files based on modification times. See <a href="ch09_01.htm">Chapter 9, <i>Gateways, Databases, and Search/Index Utilities</i></A>,
for an ordering system that works by communicating with another
network server, specially designed to store and distribute information.

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="CGI-CHP-8-SECT-2.1">CSI Statements and Hidden Fields</A></h3>

<p class=para>
The hidden field technique
we described earlier allows us to modify the ordering system presented
earlier in two ways. The first is to replace the query information
in the ACTION attribute of the &lt;FORM&gt;
tag with hidden fields. Let's look at the starting form again:

<div class=screen>
<p>
<pre>
&lt;HTML&gt;
&lt;HEAD&gt;&lt;TITLE&gt;Television/Movie Survey&lt;/TITLE&gt;&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;H1&gt;Welcome to the CGI Network!&lt;/H1&gt;
&lt;HR&gt;
In order to better serve you, we would like to know what type of
movies and variety shows you like to watch on TV. Over the last couple
of years, you, the viewers, were directly responsible for the lasting
success of many of our shows. Your comments are extremely valuable to
us, so please take a few moments to fill out a survey.
&lt;P&gt;
The current time is: &lt;!--#insert var="DATE_TIME"--&gt;&lt;BR&gt;
</PRE>
</DIV>

<p class=para>
If we want the current time to be displayed in the form, we
need to keep this statement.

<div class=screen>
<p>
<pre>
&lt;HR&gt;
&lt;FORM ACTION="/cgi-bin/survey.pl?cgi_cookie=&lt;!--#insert var="COOKIE"--&gt;&amp;cgi_form_num=" METHOD="POST"&gt;
</PRE>
</DIV>

<p class=para>
This can be modified to:

<div class=screen>
<p>
<pre>
&lt;FORM ACTION="/cgi-bin/survey.pl" METHOD="POST"&gt;
&lt;INPUT TYPE="hidden" NAME="cgi_cookie" VALUE="&lt;!--#insert var="COOKIE"--&gt;"
&lt;INPUT TYPE="hidden" NAME="cgi_form_num" VALUE="&lt;!--#insert var="NUMBER"--&gt;"
</PRE>
</DIV>

<p class=para>
The program described above will replace the CSI statements
with appropriate information.

<div class=screen>
<p>
<pre>
&lt;PRE&gt;
Full Name: &lt;INPUT TYPE="text" NAME="01 Full Name" SIZE=40&gt;
E-Mail:    &lt;INPUT TYPE="text" NAME="02 EMail Address" SIZE=40&gt;
&lt;/PRE&gt;
&lt;P&gt;
Which survey would you like to fill out: &lt;BR&gt;
&lt;INPUT TYPE="radio" NAME="cgi_survey" VALUE="Television" CHECKED&gt;Television&lt;BR&gt;
&lt;INPUT TYPE="radio" NAME="cgi_survey" VALUE="Movie"&gt;Movies&lt;BR&gt;
&lt;P&gt;
&lt;INPUT TYPE="submit" VALUE="Submit the survey"&gt;
&lt;INPUT TYPE="reset"  VALUE="Clear all fields"&gt;
&lt;/FORM&gt;
&lt;HR&gt;
&lt;/BODY&gt;&lt;/HTML&gt;
</PRE>
</DIV>

<p class=para>
There is really no advantage to using this technique over
the original one, as the two are nearly identical. If you use this
method, you can remove the following line from the <i class=emphasis>parse_form_data</I>
subroutine:

<div class=screen>
<p>
<pre>
    if ($ENV{'QUERY_STRING'}) {
            $query_string = join("&amp;", $query_string, $ENV{'QUERY_STRING'});
    }     
</PRE>
</DIV>

<p class=para>
There is no need to store any query
 information. 

</DIV>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch08_01.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src="gifs/txthome.gif" alt="Home" border=0></a></td>
<td width=172 align=right valign=top><a href="ch08_03.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Hidden Fields</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td>
<td width=172 align=right valign=top>Netscape Persistent Cookies</td>
</tr>
</table>

<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
</DIV>

</BODY>
</HTML>
