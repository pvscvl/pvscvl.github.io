<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Appendix B] Summary of Regular Expressions</TITLE>
<meta name="author" content="Shishir Gundavaram">
<meta name="date" content="Mon Mar 17 13:38:19 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="cgi programming">
<meta name="title" content="CGI Programming on the World Wide Web">
<!-- JavaScript: pathcont.js -->

</HEAD>
<body bgcolor="#FFFFFF" text="#000000">

<div class=htmlnav>
<h1><img src="gifs/smbanner.gif" alt="CGI Programming on the World Wide Web"></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="appa_06.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b>Appendix B</b></td>
<td width=172 align=right valign=top><a href="appc_01.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>
<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
<hr align=left width=515>
</DIV>
<h1 class=appendix><a class="TITLE" name="CGI-APP-B">Summary of Regular Expressions</A></H1>

<p class=para>

One of the most powerful features of Perl is its regular expression
handling. Regular expressions are especially useful for CGI
programming, as text manipulation is central to so many CGI
applications. In this appendix, we include a quick reference to
regular expressions in Perl. For more information on Perl, see the
Nutshell Handbooks <i class=citetitle>Learning Perl </i>by Randal
L. Schwartz, <i class=citetitle>Programming Perl </i>by Larry Wall and
Randal L. Schwartz, and <i class=citetitle>Perl 5 Desktop
Reference</i> by Johan Vromans, all published by O'Reilly
&amp; Associates, Inc.

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>/abc/</tt><dd>

<p class=para>
Matches abc anywhere within the string

<p>
<dt class=varlistentry><tt class=literal>/^abc/</tt><dd>

<p class=para>
Matches abc at the beginning of the string

<p>
<dt class=varlistentry><tt class=literal>/abc$/</tt><dd>

<p class=para>
Matches abc at the end of the string

<p>
<dt class=varlistentry><tt class=literal>/a|b/</tt><dd>

<p class=para>
Matches either a or b
Can also be used with words (i.e., /perl|tcl/)

<p>
<dt class=varlistentry><tt class=literal>/ab{2,4}c/</tt><dd>

<p class=para>
Matches an a followed by 2-4 b's, followed by c
If the second number is omitted, such as /ab
{2,}c/, the expression will
match two or more b's.

<p>
<dt class=varlistentry><tt class=literal>/ab*c/</tt><dd>

<p class=para>
Matches an a followed by zero or more b's, followed by c
Expressions are greedy-it will match as many as possible. Same as
/ab{0,}c/

<p>
<dt class=varlistentry><tt class=literal>/ab+c/</tt><dd>

<p class=para>
Matches an a followed by one or more b's followed by c
Same as /ab{1,}c/

<p>
<dt class=varlistentry><tt class=literal>/ab?c/</tt><dd>

<p class=para>
Matches an a followed by an optional b followed by c
Same as /ab{0,1}c/.
This has a different meaning in Perl 5. In Perl 5, the expression:
/ab*?c/matches
an a followed by as few b's as possible (non-greedy)

<p>
<dt class=varlistentry><tt class=literal>/./</tt><dd>

<p class=para>
Matches any single character except a newline (\n)
/p..<i class=emphasis>l</I>
/ matches a p followed by any two characters,
followed by l, so it will match such strings as perl, pall, pdgl,
p3gl, etc.

<p>
<dt class=varlistentry><tt class=literal>/[abc]/</tt><dd>

<p class=para>
A character class-matches any one of the three characters listed.
A pattern of /[abc]+/ matches strings such as
abcab, acbc, abbac, aaa, abcacbac, ccc, etc.

<p>
<dt class=varlistentry><tt class=literal>/\d/</tt><dd>

<p class=para>
Matches a digit
Same as /[0-9]/Multipliers can be used (/\d+/
matches one or more digits)

<p>
<dt class=varlistentry><tt class=literal>/\w/</tt><dd>

<p class=para>
Matches a character classified as a word
Same as /[a-zA-Z0-9_]/

<p>
<dt class=varlistentry><tt class=literal>/\s/</tt><dd>

<p class=para>
Matches a character classified as whitespace
Same as /[ \r\t\n\f]/

<p>
<dt class=varlistentry><tt class=literal>/\b/</tt><dd>

<p class=para>
Matches a word boundary or a backspace/test\b/
matches test, but not testing
However, \b matches a backspace character inside
a class (i.e., [\b])

<p>
<dt class=varlistentry><tt class=literal>/[^abc]/</tt><dd>

<p class=para>
Matches a character that is not in the class/[^abc
]+/ will match such strings as hello, test, perl,
etc.

<p>
<dt class=varlistentry><tt class=literal>/\D/</tt><dd>

<p class=para>
Matches a character that is not a digit
Same as /[^0-9]/

<p>
<dt class=varlistentry><tt class=literal>/\W/</tt><dd>

<p class=para>
Matches a character that is not a word
Same as /[^a-zA-Z0-9_]/

<p>
<dt class=varlistentry><tt class=literal>/\S/</tt><dd>

<p class=para>
Matches a character that is not whitespace
Same as /[^ \r\t\n\f]/

<p>
<dt class=varlistentry><tt class=literal>/\B/</tt><dd>

<p class=para>
Requires that there is no word boundary/hello\B/
matches hello, but not hello there

<p>
<dt class=varlistentry><tt class=literal>/\*/</tt><dd>

<p class=para>
Matches the * character. Use the \ character
to escape characters that have significance in a regular expression.

<p>
<dt class=varlistentry><tt class=literal>/(abc)/</tt><dd>

<p class=para>
Matches abc anywhere within the string, but the parentheses act
as memory, storing abc in the variable $1.

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>Example 1:</tt><dd>

<p class=para>
/name=(.*)/ will store zero or
more characters after name= in variable $1.

<p>
<dt class=varlistentry><tt class=literal>Example 2:</tt><dd>

<p class=para>
/name=(.*)&amp;user=\1/ will
store zero or more characters after name= in
$1. Then, Perl will replace \1
with the value in $1, and check to see if the
pattern matches.

<p>
<dt class=varlistentry><tt class=literal>Example 3:</tt><dd>

<p class=para>
/name=([^&amp;]*)/ will store
zero or more characters after name= but before
the &amp; character in variable $1.

<p>
<dt class=varlistentry><tt class=literal>Example 4:</tt><dd>

<p class=para>
/name=([^&amp;]+)&amp;age=(.*)$/
will store one or more characters after name=
but before &amp; in $1. It
then matches the &amp; character. All characters
after age= but before the end of the line are
stored in $2.</DL>
<p>
<dt class=varlistentry><tt class=literal>/abc/i</tt><dd>

<p class=para>
Ignores case. Matches either abc, Abc, ABC, aBc, aBC, etc.</DL>

<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="appa_06.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src="gifs/txthome.gif" alt="Home" border=0></a></td>
<td width=172 align=right valign=top><a href="appc_01.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>&nbsp;</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td>
<td width=172 align=right valign=top>CGI Modules for Perl 5</td>
</tr>
</table>

<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
</DIV>

</body>
</html>
