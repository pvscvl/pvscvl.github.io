<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 1] 1.4 Internal Workings of CGI</TITLE>
<meta name="author" content="Shishir Gundavaram">
<meta name="date" content="Mon Mar 17 13:19:39 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="cgi programming">
<meta name="title" content="CGI Programming on the World Wide Web">
<!-- JavaScript: pathcont.js -->

</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><img src="gifs/smbanner.gif" alt="CGI Programming on the World Wide Web"></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch01_03.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b>Chapter 1</b></td>
<td width=172 align=right valign=top><a href="ch01_05.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>
<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="CGI-CHP-1-SECT-4">1.4 Internal Workings of CGI</A></h2>

<p class=para>
So how does the
whole interface work? Most servers expect CGI programs and scripts
to reside in a special directory, usually called <i class=emphasis>cgi-bin</I>,
and/or to have a certain file extension. (These configuration parameters
are discussed in the <a href="ch01_05.htm">the section called "Configuring the Server"</A>
section in this chapter.) When a user opens a URL associated with
a CGI program, the client sends a request to the server asking for
the file.

<p class=para>
For the most part, the request for a CGI
program looks the same as it does for all Web documents. The difference
is that when a server recognizes that the address being requested
is a CGI program, the server does not return the file contents verbatim.
Instead, the server tries to execute the program. Here is what a
sample <i class=emphasis>client</I> request might look like:

<div class=screen>
<p>
<pre>
GET /cgi-bin/welcome.pl HTTP/1.0
Accept: www/source
Accept: text/html
Accept: image/gif
User-Agent: Lynx/2.4 libwww/2.14
From: shishir@bu.edu
</PRE>
</DIV>

<p class=para>
This GET
request identifies the file to retrieve as /cgi-bin/welcome.pl.
Since the server is configured to recognize all files in the cgi-bin
directory tree as CGI programs, it understands that it should execute
the program instead of relaying it directly to the browser. The
string <i class=command>HTTP/1.0</i> identifies the communication
protocol to use.

<p class=para>
The client request also passes the
data formats it can accept (<i class=command>www/source</i>, <i class=command>text/html</i>,
and <i class=command>image/gif</i>), identifies itself as a Lynx client,
and sends user information. All this information is made available
to the CGI program, along with additional information from the server.

<p class=para>
The way that
CGI programs get their input depends on the server and on the native
operating system. On a UNIX system, CGI programs
get their input from standard input (STDIN) and
from UNIX 
environment variables. These
variables store such information as the input search string (in
the case of a form), the format of the input, the length of the
input (in bytes), the remote host and user passing the input, and
other client information. They also store the server name, the communication
protocol, and the name of the software running the server.

<p class=para>
Once the CGI program starts running, it can either create
and output a new document, or provide the URL to an existing one.
On UNIX, programs send their output to 
standard output (STDOUT)
as a data stream. The data stream consists of two parts. The first
part is either a full or partial HTTP
header that (at minimum) describes what format the returned data
is in (e.g., HTML, plain text, GIF, etc.). A
blank line signifies the end of the header section. The second part
is the body, which contains the data conforming to the format type
reflected in the header. The body is not modified or interpreted
by the server in any way.

<p class=para>
A CGI program can choose to
send the newly created data directly to the client or to send it
indirectly through the server. If the output consists of a complete
HTTP header, the data is sent directly to the
client without server modification. (It's actually a little more
complicated than this, as we will discuss in <a href="ch03_01.htm">Chapter 3, <i>Output from the Common Gateway Interface</i></A>.) Or,
as is usually the case, the output is sent to the server as a data
stream. The server is then responsible for adding the complete header
information and using the HTTP protocol to transfer
the data to the client.

<p class=para>
Here is the sample output of
a program generating an HTML virtual document,
with the complete HTTP header:

<div class=screen>
<p>
<pre>
HTTP/1.0 200 OK
Date: Thursday, 22-February-96 08:28:00 GMT
Server: NCSA/1.4.2
MIME-version: 1.0
Content-type: text/html
Content-length: 2000
&lt;HTML&gt;
&lt;HEAD&gt;&lt;TITLE&gt;Welcome to Shishir's WWW Server!&lt;/TITLE&gt;&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;H1&gt;Welcome!&lt;/H1&gt;
.
.
&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>
</DIV>

<p class=para>
The header contains the communication protocol, the date and
time of the response, the server name and version, and the revision
of the MIME protocol.[1] Most importantly, it also consists
of the MIME content type and the number of characters
(equivalent to the number of bytes) of the enclosed data, as well
as the data itself. Now, the output with the partial HTTP
header:

<blockquote class=footnote>
<p class=para>[1] 
What is MIME and what does it stand for? MIME (Multipurpose
Internet Mail Extensions) is a specification that was originally
developed for sending multiple types of data through electronic
mail. MIME types are used to identify types of data sent as content
over the Web.
</blockquote>
<div class=screen>
<p>
<pre>
Content-type: text/html
&lt;HTML&gt;
&lt;HEAD&gt;&lt;TITLE&gt;Welcome to Shishir's WWW Server!&lt;/TITLE&gt;&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;H1&gt;Welcome!&lt;/H1&gt;
.
.
&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>
</DIV>

<p class=para>
In this instance, the only header line that is output is the
<i class=command>Content-type</i>
header, which describes the MIME format of the
output. Since the output is in HTML format, <i class=command>text/html</i>
is the content type that is declared.

<p class=para>
Most CGI programmers
prefer to supply only a partial header. It is much simpler to output
the format and the data than to formulate the complete header information,
which can be left to the server. However, there are times when you
need to send the information directly to the client (by outputting
a complete HTTP header), as you will see in <a href="ch03_01.htm">Chapter 3, <i>Output from the Common Gateway Interface</i></A>.

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch01_03.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src="gifs/txthome.gif" alt="Home" border=0></a></td>
<td width=172 align=right valign=top><a href="ch01_05.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Some Working CGI Applications</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td>
<td width=172 align=right valign=top>Configuring the Server</td>
</tr>
</table>

<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
</DIV>

</BODY>
</HTML>
