<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 14] 14.2 The CGI Data File</TITLE>
<meta name="author" content="Stephen Spainhour and Valerie Quercia">
<meta name="date" content="Mon Mar 17 14:30:07 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="Webmaster in a Nutshell">
<meta name="title" content="Webmaster in a Nutshell">
<!-- JavaScript: pathcont.js -->

</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><img src="gifs/smbanner.gif" alt="Webmaster in a Nutshell"></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch14_01.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b>Chapter 14</b></td>
<td width=172 align=right valign=top><a href="ch14_03.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>
<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="WEB-CH-14-SECT-2">14.2 The CGI Data File</A></h2>

<p class=para>
 
The CGI.BAS and CGI32.BAS modules take care of much of the dirty
work in CGI processing for Visual Basic programmers. If you 
are using another programming language or a server other than
WebSite, however, you may need to access the external CGI data
file manually.

<p class=para>
Under WinCGI, the server saves CGI data in an external file
to be processed by the CGI program.
The CGI data file contains the following sections:

<p class=para>
<div class=screen>
<p>
<pre>
[CGI]
[Accept]
[System]
[Extra Headers]
[Form Literal]
[Form External]
[Form File]
[Form Huge]
</PRE>
</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="WEB-CH-14-SECT-2.1">The CGI Section</A></h3>

<p class=para>
The first section of the CGI data file contains most of the CGI data
items (accept types, content, and extra headers are defined in
separate sections). Each item is provided as a string value. If the
value is an empty string, the keyword is omitted. 
The keywords are listed below:

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>Authenticated Password</tt><dd>

<p class=para>
The password that the client used to 
attempt authentication

<p>
<dt class=varlistentry><tt class=literal>Authenticated Username</tt><dd>

<p class=para>
The username (in the indicated realm) that the client used to 
attempt authentication

<p>
<dt class=varlistentry><tt class=literal>Authentication Method</tt><dd>

<p class=para>
The protocol-specific authentication method specified in the
request

<p>
<dt class=varlistentry><tt class=literal>Authentication Realm</tt><dd>

<p class=para>
The method-specific authentication realm

<p>
<dt class=varlistentry><tt class=literal>CGI Version</tt><dd>

<p class=para>
The revision of the CGI specification to which the server complies

<p>
<dt class=varlistentry><tt class=literal>Content File</tt><dd>

<p class=para>
For requests that have attached data (i.e., in a POST request), the 
server makes the
data available to the CGI program by putting it into this file. The value
of this item is the complete pathname of that file.

<p>
<dt class=varlistentry><tt class=literal>Content Length</tt><dd>

<p class=para>
For requests that have attached data, the length of the 
content in bytes

<p>
<dt class=varlistentry><tt class=literal>Content Type</tt><dd>

<p class=para>
For requests that have attached data, the MIME content type 
of that data

<p>
<dt class=varlistentry><tt class=literal>Document Root</tt><dd>

<p class=para>
The physical path to the logical root "/" 

<p>
<dt class=varlistentry><tt class=literal>Executable Path</tt><dd>

<p class=para>
The logical path to the CGI program executable, as needed for
self-referencing URLs

<p>
<dt class=varlistentry><tt class=literal>From</tt><dd>

<p class=para>
The email address of the browser user 

<p>
<dt class=varlistentry><tt class=literal>Logical Path</tt><dd>

<p class=para>
The extra path information supplied in the request

<p>
<dt class=varlistentry><tt class=literal>Physical Path</tt><dd>

<p class=para>
If the request contained logical path information, 
the path in physical (translated) form

<p>
<dt class=varlistentry><tt class=literal>Query String</tt><dd>

<p class=para>
The information that follows the ? in the URL that generated the
request is the "query" information

<p>
<dt class=varlistentry><tt class=literal>Referer</tt><dd>

<p class=para>
The URL of the document that contained the link pointing to this CGI
program

<p>
<dt class=varlistentry><tt class=literal>Remote Host</tt><dd>

<p class=para>
The network host name of the client system, if
available

<p>
<dt class=varlistentry><tt class=literal>Remote Address</tt><dd>

<p class=para>
The network (IP) address of the client system 

<p>
<dt class=varlistentry><tt class=literal>Request Method</tt><dd>

<p class=para>
The method with which the request was made. For HTTP, this is "GET,"
"HEAD," "POST," etc.

<p>
<dt class=varlistentry><tt class=literal>Request Protocol</tt><dd>

<p class=para>
The name and revision of the information protocol this request came
in with. Format: protocol/revision; Example: "HTTP/1.0"

<p>
<dt class=varlistentry><tt class=literal>Request Range</tt><dd>

<p class=para>
Byte-range specification received with request (if any) 

<p>
<dt class=varlistentry><tt class=literal>Server Admin</tt><dd>

<p class=para>
The email address of the server's administrator 

<p>
<dt class=varlistentry><tt class=literal>Server Name</tt><dd>

<p class=para>
The network host name or alias of the server, as needed 
for self-referencing URLs

<p>
<dt class=varlistentry><tt class=literal>Server Port</tt><dd>

<p class=para>
The network port number on which the server is listening, as
needed for self-referencing URLs

<p>
<dt class=varlistentry><tt class=literal>Server Software</tt><dd>

<p class=para>
The name and version of the information server software answering
the request (and running the CGI program). Format: name/version

<p>
<dt class=varlistentry><tt class=literal>User Agent</tt><dd>

<p class=para>
A string description of the client (browser) software</DL>
</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="WEB-CH-14-SECT-2.2">The Accept Section</A></h3>

<p class=para>
The Accept section contains the client's
acceptable data types found in the request header as: 

<p class=para>
<div class=screen>
<p>
<pre>
Accept: <i class=emphasis>type</I>/<i class=emphasis>subtype</I> [<i class=emphasis>parameters</I>]
</PRE>
</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="WEB-CH-14-SECT-2.3">The System Section</A></h3>

<p class=para>
This section contains items that are specific to the Windows
implementation of CGI. The following keys are used: 

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>Content File</tt><dd>

<p class=para>
The full pathname of the file that contains the content (if any) that
came with the request. 

<p>
<dt class=varlistentry><tt class=literal>Debug Mode</tt><dd>

<p class=para>
This is <tt class=literal>No</tt> unless the server's script tracing
mode is enabled, in which case it is <tt class=literal>Yes</tt>. Useful for providing
conditional tracing within the CGI program.

<p>
<dt class=varlistentry><tt class=literal>GMT Offset</tt><dd>

<p class=para>
The number of seconds to be added to GMT to reach
local time. For Pacific Standard time, this number is -28,800. Useful
for computing GMT.

<p>
<dt class=varlistentry><tt class=literal>Output File</tt><dd>

<p class=para>
The full pathname of the file in which the 
server expects to receive the CGI program's results.</DL>
</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="WEB-CH-14-SECT-2.4">The Extra Headers Section</A></h3>

<p class=para>
This section contains the "extra" headers
that were included with the request, in <i class=emphasis>key=value</I> form. The server
must URL-decode both the key and the value prior to writing them to
the CGI data file.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="WEB-CH-14-SECT-2.5">The Form Literal Section</A></h3>

<p class=para>
If the request is a POST request from an HTTP form (with content type of
<tt class=literal>application/x-www-form-urlencoded</tt> or 
<tt class=literal>multipart/form-data</tt>), the server decodes the form
data and puts it into the <tt class=literal>Form Literal</tt> section.

<p class=para>
If the form contains any SELECT MULTIPLE elements, there
will be multiple occurrences of the same key. In this case, the server
generates a normal <i class=emphasis>key=value</I> pair for the first occurrence, and it
appends a sequence number to subsequent occurrences. 

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="WEB-CH-14-SECT-2.6">The Form External Section</A></h3>

<p class=para>
If the decoded value string is more than 254 characters long, or if the
decoded value string contains any control characters or double-quotes,
the server puts the decoded value into an external file and lists
the field into the Form External section as:

<p class=para>
<div class=screen>
<p>
<pre>
<i class=emphasis>key</I>=<i class=emphasis>pathname</I> <i class=emphasis>length</I>
</PRE>
</DIV>

<p class=para>
where <i class=emphasis>pathname</I> is the path and name of the tempfile containing
the decoded value string, and <i class=emphasis>length</I> is the length in bytes
of the decoded value string.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="WEB-CH-14-SECT-2.7">The Form Huge Section</A></h3>

<p class=para>
If the raw value string is more than 65,535 bytes long, the server
does no decoding, but it does get the keyword and mark the location
and size of the value in the content file. 
The server lists the huge field in the Form Huge
section as:

<p class=para>
<div class=screen>
<p>
<pre>
<i class=emphasis>key</I>=<i class=emphasis>offset</I> <i class=emphasis>length</I>
</PRE>
</DIV>

<p class=para>
where <i class=emphasis>offset</I> is the offset from the beginning of the content file
at which the raw value string for this key is located, and <i class=emphasis>length</I>
is the length in bytes of the string. You can use the
offset to perform a "Seek" to the start of the raw value string,
and use the length to know when you have read the entire raw string
into your decoder.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="WEB-CH-14-SECT-2.8">The Form File Section</A></h3>

<p class=para>
If the request is in the <tt class=literal>multipart/form-data</tt> format, it
may contain one or more file uploads. In this case, each file upload
is placed into an external temporary file similar to the form external 
data. Each such file upload is listed in the Form File section as:

<p class=para>
<div class=screen>
<p>
<pre>
<i class=emphasis>key=</I>[<i class=emphasis>pathname</I>] <i class=emphasis>length type xfer</I> [<i class=emphasis>filename</I>]
</PRE>
</DIV>

<p class=para>
where <i class=emphasis>pathname</I> is the pathname of the external tempfile 
containing the uploaded file, <i class=emphasis>length</I> is the length in 
bytes of the uploaded file, <i class=emphasis>type</I> is the MIME content type
of the uploaded file, <i class=emphasis>xfer</I> is
the content-transfer encoding of the uploaded file, and 
<i class=emphasis>filename</I> is the original name of the uploaded file. The
square brackets must be included; they are used to delimit the file and
pathnames, which may contain spaces.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="WEB-CH-14-SECT-2.9">Example of Form Decoding</A></h3>

<p class=para>
In the following sample, the form contains a small field, a SELECT
MULTIPLE with 2 small selections, a field with 300
characters in it, one with line breaks (a text area), and a 230KB field:

<p class=para>
<div class=screen>
<p>
<pre>
[Form Literal]
    smallfield=123 Main St. #122
    multiple=first selection
    multiple_1=second selection
[Form External]
    field300chars=C:\\TEMP\\HS19AF6C.000 300
    fieldwithlinebreaks=C:\\TEMP\\HS19AF6C.001 43
[Form Huge]
    field230K=C:\\TEMP\\HS19AF6C.002 276920
</PRE>
</DIV>

<p class=para>
</DIV>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch14_01.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src="gifs/txthome.gif" alt="Home" border=0></a></td>
<td width=172 align=right valign=top><a href="ch14_03.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>The Windows CGI Framework for Visual Basic</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td>
<td width=172 align=right valign=top>Results Processing</td>
</tr>
</table>

<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
</DIV>

</BODY>
</HTML>
