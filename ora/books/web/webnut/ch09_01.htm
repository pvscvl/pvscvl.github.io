<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 9] CGI Overview</TITLE>
<meta name="author" content="Stephen Spainhour and Valerie Quercia">
<meta name="date" content="Mon Mar 17 14:27:03 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="Webmaster in a Nutshell">
<meta name="title" content="Webmaster in a Nutshell">
<!-- JavaScript: pathcont.js -->

</HEAD>
<body bgcolor="#FFFFFF" text="#000000">

<div class=htmlnav>
<h1><img src="gifs/smbanner.gif" alt="Webmaster in a Nutshell"></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch08_03.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b>Chapter 9</b></td>
<td width=172 align=right valign=top><a href="ch09_02.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>
<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
<hr align=left width=515>
</DIV>
<h1 class=chapter><a class="TITLE" name="WEB-CH-9">CGI Overview</A></H1>

<div class=htmltoc>

<p>
<b>Contents:</b><br>
A Typical CGI Interaction<br>
<a href="ch09_02.htm">URL Encoding</A><br>
<a href="ch09_03.htm">Extra Path Information</A><br>

</DIV>

<p class=para>
The Common Gateway Interface (CGI) is an essential tool for creating
and managing comprehensive Web sites. 
With CGI, you can write scripts that create interactive,
user-driven applications. 
 

<p class=para>
CGI is the part of the Web server that can communicate with
other programs that are running on the server. With CGI, the Web server
can invoke an external program, while passing user-specific data to the
program (such as what host the user is connecting from, or input
the user has supplied through an HTML form). The program
then processes that data and the server passes the program's
response back to the Web browser (see

<div class=figure>
<h4 class=figure>


<p>
<img align=middle src="figs/wm_0901.gif" alt="[Graphic: Figure 9-1]" width=452 height=203>

</DIV>

<p class=para>
Rather than limiting the Web to documents written ahead of time, 
CGI enables Web pages to be created on the fly, based upon the input
of users. You can use CGI scripts to create a wide
range of applications, from surveys to search tools, from Internet
service gateways to quizzes and games. 
You can count the number of users who access a document or
let them sign an electronic guestbook. You can provide users
with all types of information, collect their comments, and respond
to them. 

<p class=para>
Teaching CGI programming from scratch is beyond the scope
of this book--for that, we recommend <i class=emphasis>CGI Programming on the World Wide
Web</I>,
by Shishir Gundavaram (O'Reilly &amp; Associates).

<p class=para>
<a href="ch09_01.htm">Chapter 9, <i>CGI Overview</i></A> through <a href="ch16_01.htm">Chapter 16, <i>Other CGI Resources</i></A> summarize the essential components of CGI:

<p>
<ul class=itemizedlist>
<li class=listitem>The current chapter (<a href="ch09_01.htm">Chapter 9, <i>CGI Overview</i></A>) gives a quick
introduction to the mechanism of CGI.

<p>
<li class=listitem><a href="ch10_01.htm">Chapter 10, <i>HTML Form Tags</i></A>, lists the form tags used as the interface
for many CGI applications, and shows an example of using them.

<p>
<li class=listitem><a href="ch11_01.htm">Chapter 11, <i>CGI Environment Variables</i></A>, lists the environment variables that
are commonly defined by servers for CGI programs.

<p>
<li class=listitem><a href="ch12_01.htm">Chapter 12, <i>Cookies</i></A>,  describes how to use Netscape persistent cookies
to maintain state across multiple connections.

<p>
<li class=listitem><a href="ch13_01.htm">Chapter 13, <i>Server Side Includes</i></A>,  covers Server Side Includes, which are used with many CGI applications.

<p>
<li class=listitem><a href="ch14_01.htm">Chapter 14, <i>Windows CGI</i></A>, covers WinCGI, the CGI interface for
Windows-based servers.

<p>
<li class=listitem><a href="ch15_01.htm">Chapter 15, <i>Perl Quick Reference</i></A>, is a quick reference to the Perl programming
language, the most common language used for writing CGI programs.

<p>
<li class=listitem><a href="ch16_01.htm">Chapter 16, <i>Other CGI Resources</i></A>, lists URLs with other resources for CGI,
such as libraries and modules that can facilitate CGI programming.

<p>
</UL>
<p class=para>
In addition, much of the backbone of CGI resides in the HTTP protocol
itself. Effective CGI programming requires some knowledge of HTTP
headers and status codes, which are presented in this book as follows:  

<p>
<ul class=itemizedlist>
<li class=listitem><a href="ch17_01.htm">Chapter 17, <i>HTTP Overview</i></A>, gives a brief introduction to HTTP.

<p>
<li class=listitem><a href="ch18_01.htm">Chapter 18, <i>Server Response Codes</i></A>, lists HTTP status codes that can be used by CGI programs that provide their own complete headers.

<p>
<li class=listitem><a href="ch19_01.htm">Chapter 19, <i>HTTP Headers</i></A>, lists HTTP headers that CGI programs can
use in their responses.

<p>
<li class=listitem><a href="ch20_01.htm">Chapter 20, <i>Media Types and Subtypes</i></A>, lists the media types commonly used in the <tt class=literal>Content-type</tt> headers output by CGI programs.

<p>
</UL>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="WEB-CH-9-SECT-1">9.1 A Typical CGI Interaction</A></h2>

<p class=para>
For an example of a CGI application, suppose you see a fill-in 
form, such as that in 

<div class=figure>
<h4 class=figure>


<p>
<img align=middle src="figs/wm_0902.gif" alt="[Graphic: Figure 9-2]" width=289 height=249>

</DIV>

<p class=para>
The HTML that produces this form might read as follows:

<p class=para>
<div class=screen>
<p>
<pre>
&lt;HTML&gt;&lt;HEAD&gt;&lt;TITLE&gt;Guestbook&lt;/TITLE&gt;&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;H1&gt;Fill in my guestbook!&lt;/H1&gt;
&lt;FORM METHOD="GET" ACTION="/cgi-bin/guestbook.pl"&gt;
&lt;PRE&gt;
First Name:   &lt;INPUT TYPE="TEXT" NAME="firstname"&gt;
Last Name:    &lt;INPUT TYPE="TEXT" NAME="lastname"&gt;
&lt;INPUT TYPE="SUBMIT"&gt;    &lt;INPUT TYPE="RESET"&gt;
&lt;/FORM&gt;
</PRE>
</DIV>

<p class=para>
The form is written using special "form" tags (discussed in
detail in <a href="ch10_01.htm">Chapter 10, <i>HTML Form Tags</i></A>).

<p>
<ul class=itemizedlist>
<li class=listitem>The <tt class=literal>&lt;form&gt;</tt> tag defines the <i class=emphasis>method</I> used for the form
(either GET or POST) and the <i class=emphasis>action</I> to take when the
form is submitted--that is, the URL of the CGI program to 
pass the parameters to.

<p>
<li class=listitem>The <tt class=literal>&lt;input&gt;</tt> tag can be used in many different ways. In its
first two invocations, it creates a text input field and defines
the variable name to associate with the field's contents when the
form is submitted. The first field is given the variable name
"firstname" and the second field is given the name "lastname."

<p>
<li class=listitem>In its last two invokations, the <tt class=literal>&lt;input&gt;</tt> tag creates a "submit" 
button and a "reset" button. 

<p>
<li class=listitem>The <tt class=literal>&lt;/form&gt;</tt> tag indicates the end of the form.

<p>
</UL>
<p class=para>
When the user presses the "submit" button, the data entered
into the <tt class=literal>&lt;input&gt;</tt> text fields is passed to the CGI program specified
by the <tt class=literal>action</tt> attribute of the <tt class=literal>&lt;form&gt;</tt> tag. 

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="WEB-CH-9-SECT-1.1">Transferring the Form Data</A></h3>

<p class=para>
Parameters to a CGI program are transferred either in the URL
or in the body text of the request. The method used to pass
parameters is determined by the <tt class=literal>method</tt> attribute to the <tt class=literal>&lt;form&gt;</tt>
tag. The GET method says to transfer the data within the URL 
itself;  for
example, under the GET method, the browser might initiate the HTTP 
transaction as follows:

<p class=para>
<div class=screen>
<p>
<pre>
GET HTTP/1.0 /cgi-bin/guestbook.pl?firstname=Joe&amp;lastname=Schmoe
</PRE>
</DIV>

<p class=para>
See <a href="ch17_01.htm">Chapter 17, <i>HTTP Overview</i></A> for more information on HTTP transactions.

<p class=para>
The POST method says to use the body portion of the HTTP request
to pass parameters. The same transaction with the POST method
would read as follows:

<p class=para>
<div class=screen>
<p>
<pre>
POST HTTP/1.0 /cgi-bin/guestbook.pl
	... [More headers here]
firstname=Joe&amp;lastname=Schmoe
</PRE>
</DIV>

<p class=para>
In both these examples, you should recognize the "firstname" and
"lastname" variable names that were defined in the HTML form,
coupled with the values entered by the user. An ampersand (&amp;) is
used to separate the variable=value pairs. 

<p class=para>
The server now passes the variable=value pairs to the CGI program.
It does this either through UNIX environment variables or in
standard input (STDIN). 
If the CGI program is called with the GET method, then parameters 
are expected to be embedded into the URL of the request, and
the server transfers them to the program by assigning them to the
 
QUERY_STRING environment variable. The CGI program can then 
retrieve the parameters from QUERY_STRING as it would read any
environment variable (for example, from the %ENV associative array in Perl).
If the CGI program is called
with the POST method, parameters are expected to be embedded
into the body of the request, and the server passes the body text
to the program as standard input (STDIN). 

<p class=para>
(Other environment variables defined by the server for CGI
programs are listed in
<a href="ch11_01.htm">Chapter 11, <i>CGI Environment Variables</i></A>.
These variables store such information as the format and length 
of the input, the remote host, the user, and various client
information. They also store the server name, the communication
protocol, and the name of the software running the server.)

<p class=para>
The CGI program needs to retrieve the information as appropriate
and then process it. The sky's the limit on what the CGI 
program actually does with the information it retrieves.
It might return
an anagram of the user's name, or tell them how many times their
name uses the letter "t," or it might just compile the name into
a list that the programmer regularly sells to telemarketers. 
Only the programmer knows for sure.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="WEB-CH-9-SECT-1.2">Creating Virtual Documents</A></h3>

<p class=para>
The CGI program must then create a new document to be served
to the browser, or point to an existing document. On UNIX,
programs send their output to standard output (STDOUT) as
a data stream that consists of two parts. The first
part is either a full or
partial HTTP header that (at minimum) describes the format
of the returned data (e.g., HTML, ASCII text, GIF , etc.). A blank line signifies the end of the header section.
The second part is the body of the output, which contains
the data conforming to the format type reflected in the header.
For example:

<p class=para>
<div class=screen>
<p>
<pre>
Content-type: text/html
&lt;HTML&gt;
&lt;HEAD&gt;&lt;TITLE&gt;Thanks!&lt;/TITLE&gt;&lt;/HEAD&gt;
&lt;BODY&gt;&lt;H1&gt;Thanks for signing my guest book!&lt;/H1&gt;
	...
&lt;/BODY&gt;&lt;/HTML&gt;
</PRE>
</DIV>

<p class=para>
In this case, the only header line that is output is the 
<tt class=literal>Content-type</tt>, which gives the media format of the output 
as HTML (<tt class=literal>text/html</tt>).
This line is essential for every CGI program, since 
it tells the browser what kind of format to expect.
The blank line separates the header from the body text (which,
in this case, is in HTML format as advertised). See
<a href="ch20_01.htm">Chapter 20, <i>Media Types and Subtypes</i></A> for a
listing of other media formats that are commonly recognized on the Web.

<p class=para>
(Notice that it does not matter to the Web server what language
the CGI program is written in. On the UNIX platform, the most
popular language for CGI programming is Perl (covered in
<a href="ch15_01.htm">Chapter 15, <i>Perl Quick Reference</i></A>). Other languages used on UNIX 
are C, C++, Tcl, and
Python. On Macintosh computers, programmers use Applescript and
C/C++, and on Microsoft Windows programmers use Visual Basic, Perl,
and C/C++. As long as there's a way in a programming language 
to get data from the server and 
send data back, you can use it for CGI.

<p class=para>
The server transfers the results of the CGI program back to the
browser. 
The body text is not modified or interpreted by the server in 
any way, but
the server generally supplies additional headers 
with information such as the date, the name and version of
the server, etc. (See <a href="ch19_01.htm">Chapter 19, <i>HTTP Headers</i></A> for a listing
of valid HTTP response headers.)  

<p class=para>
CGI programs can also supply a complete HTTP header itself, 
in which case the server does not add any additional headers but
transfers the response verbatim as returned by the CGI program.

<p class=para>
Here is the sample output of a program generating an HTML
virtual document, with a complete HTTP header:

<p class=para>
<div class=screen>
<p>
<pre>
HTTP/1.0 200 OK
Date:  Thursday, 28-June-96 11:12:21 GMT
Server: NCSA/1.4.2
Content-type: text/html
Content-length: 2041
&lt;HTML&gt;
&lt;HEAD&gt;&lt;TITLE&gt;Thanks!&lt;/TITLE&gt;&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;H1&gt;Thanks for signing my guestbook!&lt;/H1&gt;
 	...
&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>
</DIV>

<p class=para>
The header contains the communication protocol, the date and time
of the response, and the server name and version.
(The <tt class=literal>200 OK</tt> is a <i class=emphasis>status code</I> generated by the HTTP
protocol to communicate the status of a request, in this case
successful. See <a href="ch18_01.htm">Chapter 18, <i>Server Response Codes</i></A> for a list of valid HTTP status codes.)
Most importantly, it also contains the  content type and
the number of characters (equivalent to the number of bytes)
of the enclosed data.

<p class=para>
The result is that after the user clicks the "Submit" button, 
he or she sees a response such as that in

<div class=figure>
<h4 class=figure>


<p>
<img align=middle src="figs/wm_0903.gif" alt="[Graphic: Figure 9-3]" width=434 height=207>

</DIV>

</DIV>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch08_03.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src="gifs/txthome.gif" alt="Home" border=0></a></td>
<td width=172 align=right valign=top><a href="ch09_02.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Tags of Contention</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td>
<td width=172 align=right valign=top>URL Encoding</td>
</tr>
</table>

<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
</DIV>

</BODY>
</HTML>
