<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 7] 7.2 Library Modules</TITLE>
<meta name="author" content="Larry Wall, Tom Christiansen, and Randal Schwartz">
<meta name="date" content="Mon Mar 17 13:15:42 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="Perl">
<meta name="title" content="Programming Perl, Second Edition">
<!-- JavaScript: pathcont.js -->

</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><img src="gifs/smbanner.gif" alt="Programming Perl, Second Edition"></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch07_01.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b>Chapter 7</b></td>
<td width=172 align=right valign=top><a href="ch08_01.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>
<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="PERL2-CH-7-SECT-1B">7.2 Library Modules</A></h2>

<p class=para>
As mentioned earlier, the following library modules are arranged in
alphabetical order, for easy reference. 

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch07-SECT2-AUTOID.1">AnyDBM_File--Provide Framework for Multiple DBMs</A></h3>

<div class=programlisting>
<p>
<pre>
use AnyDBM_File;
</PRE>
</DIV>

<p class=para>
<a name="CH07.DBM1"></A><a name="CH07.DBM2"></A>This module is a "pure virtual base class"--it has nothing of its own.
It's just there to inherit from the various DBM packages.  By default it
inherits from NDBM_File for compatibility with earlier versions of
Perl.  If it doesn't find NDBM_File, it looks for DB_File, GDBM_File,
SDBM_File (which is always there--it comes with Perl), and finally
ODBM_File.

<p class=para>
Perl's <a href="ch03_02.htm">dbmopen</A> function (which now exists only for backward
compatibility) actually just calls <a href="ch03_02.htm">tie</A> to bind a hash to AnyDBM_File.
The effect is to bind the hash to one of the specific DBM classes that
AnyDBM_File inherits from.

<p class=para>
You can override the defaults and determine which class <a href="ch03_02.htm">dbmopen</A> will
tie to.  Do this by redefining <b>@ISA</B>:

<div class=programlisting>
<p>
<pre>
@AnyDBM_File::ISA = qw(DB_File GDBM_File NDBM_File);
</PRE>
</DIV>

<p class=para>
Note, however, that an explicit <a href="ch03_02.htm">use</A> takes priority over the ordering
of <b>@ISA</B>, so that:

<div class=programlisting>
<p>
<pre>
use GDBM_File;
</PRE>
</DIV>

<p class=para>
will cause the next <a href="ch03_02.htm">dbmopen</A> to tie your hash to GDBM_File.

<p class=para>
You can tie hash variables directly to the desired class yourself,
without using <a href="ch03_02.htm">dbmopen</A> or AnyDBM_File.  For example,
by using multiple DBM implementations, you can copy a database from one
format to another:

<div class=programlisting>
<p>
<pre>
use Fcntl;         # for O_* values
use NDBM_File;
use DB_File;
tie %oldhash, "NDBM_File", $old_filename, O_RDWR;
tie %newhash, "DB_File",   $new_filename, O_RDWR|O_CREAT|O_EXCL, 0644;
while (($key,$val) = each %oldhash) {
    $newhash{$key} = $val;
}
</PRE>
</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-7-SECT-1.1">DBM comparisons</A></h4>

<p class=para>
Here's a table of the features that the different DBMish packages offer:

<div class=informaltable>
<p>
<a name="PERL2-CH-7-TAB-12"></A>

<table class=INFORMALTABLE>
<tr class=row>
<th align="left">Feature</TH>
<th align="left">ODBM</TH>
<th align="left">NDBM</TH>
<th align="left">SDBM</TH>
<th align="left">GDBM</TH>
<th align="left">BSD-DB</TH>
</TR>
<tr class=row>
<td align="left">Linkage comes with Perl</TD>
<td align="left">Yes</TD>
<td align="left">Yes</TD>
<td align="left">Yes</TD>
<td align="left">Yes</TD>
<td align="left">Yes</TD>
</TR>
<tr class=row>
<td align="left">Source bundled with Perl</TD>
<td align="left">No</TD>
<td align="left">No</TD>
<td align="left">Yes</TD>
<td align="left">No</TD>
<td align="left">No</TD>
</TR>
<tr class=row>
<td align="left">Source redistributable</TD>
<td align="left">No</TD>
<td align="left">No</TD>
<td align="left">Yes</TD>
<td align="left">GPL</TD>
<td align="left">Yes</TD>
</TR>
<tr class=row>
<td align="left">Often comes with UNIX</TD>
<td align="left">Yes</TD>
<td align="left">Yes[1]</TD>
<td align="left">No</TD>
<td align="left">No</TD>
<td align="left">No</TD>
</TR>
<tr class=row>
<td align="left">Builds OK on UNIX</TD>
<td align="left">N/A</TD>
<td align="left">N/A</TD>
<td align="left">Yes</TD>
<td align="left">Yes</TD>
<td align="left">Yes[2]</TD>
</TR>
<tr class=row>
<td align="left">Code size</TD>
<td align="left">Varies[3]</TD>
<td align="left">Varies[3]</TD>
<td align="left">Small</TD>
<td align="left">Big</TD>
<td align="left">Big</TD>
</TR>
<tr class=row>
<td align="left">Disk usage</TD>
<td align="left">Varies[3]</TD>
<td align="left">Varies[3]</TD>
<td align="left">Small</TD>
<td align="left">Big</TD>
<td align="left">OK[4]</TD>
</TR>
<tr class=row>
<td align="left">Speed</TD>
<td align="left">Varies[3]</TD>
<td align="left">Varies[3]</TD>
<td align="left">Slow</TD>
<td align="left">OK</TD>
<td align="left">Fast</TD>
</TR>
<tr class=row>
<td align="left">FTPable</TD>
<td align="left">No</TD>
<td align="left">No</TD>
<td align="left">Yes</TD>
<td align="left">Yes</TD>
<td align="left">Yes</TD>
</TR>
<tr class=row>
<td align="left">Easy to build</TD>
<td align="left">N/A</TD>
<td align="left">N/A</TD>
<td align="left">Yes</TD>
<td align="left">Yes</TD>
<td align="left">OK[5]</TD>
</TR>
<tr class=row>
<td align="left">Block size limits</TD>
<td align="left">1k</TD>
<td align="left">4k</TD>
<td align="left">1k[6]</TD>
<td align="left">None</TD>
<td align="left">None</TD>
</TR>
<tr class=row>
<td align="left">Byte-order independent</TD>
<td align="left">No</TD>
<td align="left">No</TD>
<td align="left">No</TD>
<td align="left">No</TD>
<td align="left">Yes</TD>
</TR>
<tr class=row>
<td align="left">User-defined sort order</TD>
<td align="left">No</TD>
<td align="left">No</TD>
<td align="left">No</TD>
<td align="left">No</TD>
<td align="left">Yes</TD>
</TR>
<tr class=row>
<td align="left">Wildcard lookups</TD>
<td align="left">No</TD>
<td align="left">No</TD>
<td align="left">No</TD>
<td align="left">No</TD>
<td align="left">Yes</TD>
</TR>
<tr>
<td colspan=6>
<p>
<b>Footnotes:</b>
<p>
<blockquote>
[1] <p class=para>
On mixed-universe
machines, may be in the BSD compatibility library, which is often shunned.[2] <p class=para>
Providing you have an ANSI C compiler.[3] <p class=para>
Depends on how much your vendor has "tweaked" it.[4] <p class=para>
Can be trimmed if you compile for one access method.[5] <p class=para>
See the DB_File library module. Requires symbolic links.[6] <p class=para>
By default, but can be redefined (at the expense of compatibility with older files).
</blockquote></td></tr>
</TABLE>
<p>
</DIV>

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-7-SECT-1.2">See also</A></h4>

<p class=para>
Relevant library modules include: DB_File, GDBM_File, NDBM_File, ODBM_File, and
SDBM_File.  Related manpages: <i class=emphasis>dbm</I> (3),
<i class=emphasis>ndbm</I> (3).  Tied variables are discussed extensively
in <a href="ch05_01.htm">Chapter 5, <i>Packages, Modules, and Object Classes</i></A>, and the <a href="ch03_02.htm">dbmopen</A> entry in <a href="ch03_01.htm">Chapter 3, <i>Functions</i></A>, may also be
helpful.  You can pick up the unbundled modules from the
<i class=emphasis>src/misc/</I> directory on your nearest CPAN site.  Here are
the most popular ones, but note that their version numbers may have changed by
the time you read this:

<div class=programlisting>
<p>
<pre>
http://www.perl.com/CPAN/src/misc/db.1.85.tar.gz
http://www.perl.com/CPAN/src/misc/gdbm-1.7.3.tar.gz
</PRE>
</DIV>

</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch07-SECT2-AUTOID.2">AutoLoader--Load Functions Only on Demand</A></h3>

<div class=programlisting>
<p>
<pre>
package GoodStuff;
use Exporter;
use AutoLoader;
@ISA = qw(Exporter AutoLoader);
</PRE>
</DIV>

<p class=para>
The AutoLoader module provides a standard mechanism for 
delayed loading of functions stored in separate files on disk.
Each file has the same name as the function (plus a <i class=emphasis>.al</I> ), and
comes from a directory named after the package (with the <i class=emphasis>auto/</I> directory).
For example, the function named <tt class=literal>GoodStuff::whatever()</tt>
would be loaded from the file
<i class=emphasis>auto/GoodStuff/whatever.al</I>.  

<p class=para>
A module using the AutoLoader should have the special marker <tt class=literal>_ _END_ _</tt>
prior to the actual subroutine declarations.  All code before this
marker is loaded and compiled when the module is used.  At the marker,
Perl stops parsing the file.

<p class=para>
When a subroutine not yet in memory is called, the <tt class=literal>AUTOLOAD</tt> function attempts to
locate it in a directory relative to the location of the module file itself. As
an example, assume <i class=emphasis>POSIX.pm</I> is located in
<i class=emphasis>/usr/local/lib/perl5/POSIX.pm</I>. The AutoLoader will look for
the corresponding subroutines for this package in
<i class=emphasis>/usr/ local/lib/perl5/auto/POSIX/*.al</I>.

<p class=para>
Lexicals declared with <a href="ch03_02.htm">my</A> in the
main block of a package using the AutoLoader will not be visible to autoloaded
functions, because the given lexical scope ends at the
<tt class=literal>_ _END_ _</tt> marker.  A module using such
variables as file-scoped globals will not work properly under the AutoLoader.
Package globals must be used instead.  When running under <tt class=literal>use
strict</tt>, the <tt class=literal>use vars</tt> pragma may be employed in such
situations as an alternative to explicitly qualifying all globals with the
package name.  Package variables predeclared with this pragma will be accessible
to any autoloaded routines, but of course will not be invisible outside the
module file.

<p class=para>
The AutoLoader is a counterpart to the SelfLoader module. Both delay the loading
of subroutines, but the SelfLoader accomplishes this by storing the subroutines
right there in the module file rather than in separate files elsewhere.  While
this avoids the use of a hierarchy of disk files and the associated I/O for each
routine loaded, the SelfLoader suffers a disadvantage in the one-time parsing of
the lines after <tt class=literal>_ _DATA_ _</tt>, after which
routines are cached.  The SelfLoader can also handle multiple packages in a
file.

<p class=para>
AutoLoader, on the other hand, only reads code as it is requested,
and in many cases should be faster.  But it requires a mechanism
like AutoSplit to be used to create the individual files.

<p class=para>
On systems with restrictions on file name length, the file corresponding to a
subroutine may have a shorter name than the routine itself.  This can lead to
conflicting filenames. The AutoSplit module will warn of these potential
conflicts when used to split a module.

<p class=para>
See the discussion of autoloading in <a href="ch05_01.htm">Chapter 5, <i>Packages, Modules, and Object Classes</i></A>.  Also see the
AutoSplit module, a utility that automatically splits a module into a collection
of files for autoloading.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch07-SECT2-AUTOID.3">AutoSplit--Split a Module for Autoloading</A></h3>

<div class=programlisting>
<p>
<pre>
# from a program
use AutoSplit;
autosplit_modules(@ARGV)
# or from the command line
perl -MAutoSplit -e 'autosplit(<tt class=replaceable><i>FILE, DIR, KEEP, CHECK, MODTIME</i></tt>)' ... 
# another interface
perl -MAutoSplit -e 'autosplit_lib_modules(@ARGV)' ...
</PRE>
</DIV>

<p class=para>
<a name="CH07.ASM1"></A><a name="CH07.ASM2"></A><a name="CH07.ASM3"></A>This function splits up your program or module into files that the
AutoLoader module can handle.  It is mainly used to build
autoloading Perl library modules, especially complex ones like POSIX.
It is used by both the standard Perl libraries and by the MakeMaker
module to automatically configure libraries for autoloading.

<p class=para>
The <tt class=literal>autosplit()</tt> interface splits the specified
<tt class=replaceable><i>FILE</i></tt> into a hierarchy rooted at the directory
<tt class=replaceable><i>DIR</i></tt>.  It creates directories as needed to reflect
class hierarchy.  It then creates the file <i class=emphasis>autosplit.ix</I>,
which acts as both a forward declaration for all package routines and also as a
timestamp for when the hierarchy was last updated.

<p class=para>
The remaining three arguments to <tt class=literal>autosplit()</tt> govern other
options to the autosplitter.  If the third argument,
<tt class=replaceable><i>KEEP</i></tt>, is false, then any pre-existing
<i class=emphasis>.al</I> files in the autoload directory are removed if they are
no longer part of the module (obsoleted functions).  The fourth argument,
<tt class=replaceable><i>CHECK</i></tt>, instructs
<tt class=literal>autosplit()</tt> to
check the module currently being split to ensure that it really does include a
<a href="ch03_02.htm">use</A> specification for the AutoLoader module,
and skips the module if AutoLoader is not detected.  Lastly, the
<tt class=replaceable><i>MODTIME</i></tt> argument specifies that
<tt class=literal>autosplit()</tt> is to check the modification time of the module
against that of the <i class=emphasis>autosplit.ix</I> file, and only split the
module if it is newer.

<p class=para>
Here's a typical use of AutoSplit by the MakeMaker utility via the
command line:

<div class=programlisting>
<p>
<pre>
perl -MAutoSplit -e 'autosplit($ARGV[0], $ARGV[1], 0, 1, 1)'
</PRE>
</DIV>

<p class=para>
MakeMaker defines this
as a <i class=emphasis>make</I> macro, and it is invoked with file and directory
arguments.  The <tt class=literal>autosplit()</tt> function splits the named file into
the given directory and deletes obsolete <i class=emphasis>.al</I> files, after checking
first that the module does use the AutoLoader and ensuring that the module
isn't already split in its current form.

<p class=para>
The <tt class=literal>autosplit_lib_modules()</tt> form is used in the building of Perl. It
takes as input a list of files (modules) that are assumed to reside in a
directory <i class=emphasis>lib/</I> relative to the current directory.  Each file is sent
to the autosplitter one at a time, to be split into the directory
<i class=emphasis>lib/auto/</I>.

<p class=para>
In both usages of the autosplitter, only subroutines defined following the
Perl special marker <tt class=literal>_ _END_ _</tt> are split out into separate files.
Routines placed prior to this marker are not autosplit, but are forced to load
when the module is first required.

<p class=para>
Currently, AutoSplit cannot handle multiple package specifications
within one file.

<p class=para>
AutoSplit will inform the user if it is necessary to create the top-level
directory specified in the invocation.  It's better if the script or
installation process that invokes AutoSplit has created the full directory
path ahead of time.  This warning may indicate that the module is being split
into an incorrect path.

<p class=para>
AutoSplit will also warn the user of subroutines whose names cause potential
naming conflicts on machines with severely limited (eight characters or
less) filename length.  Since the subroutine name is used as the filename,
these warnings can aid in portability to such systems.

<p class=para>
Warnings are issued and the file skipped if AutoSplit cannot locate
either the <tt class=literal>_ _END_ _</tt> marker or a specification of the form <tt class=literal>package Name;</tt>.
AutoSplit will also complain if it can't create directories or files.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch07-SECT2-AUTOID.4">Benchmark--Check and Compare Running Times of Code</A></h3><a name="CH07.BMM1"></A><a name="CH07.BMM2"></A><a name="CH07.BMM3"></A>

<div class=programlisting>
<p>
<pre>
use Benchmark;
# timeit():  run $count iterations of the given Perl code, and time it
$t = timeit($count, '<tt class=replaceable><i>CODE</i></tt>');  # $t is now a Benchmark object
# timestr():  convert Benchmark times to printable strings
print "$count loops of '<tt class=replaceable><i>CODE</i></tt>' took:", timestr($t), "\n";
# timediff():  calculate the difference between two times
$t = timediff($t1 - $t2);
# timethis():  run "code" $count times with timeit(); also, print out a
#     header saying "timethis $count: "
$t = timethis($count, "<tt class=replaceable><i>CODE</i></tt>");
# timethese():  run timethis() on multiple chunks of code
@t = timethese($count, {
    'Name1' =&gt; '...<tt class=replaceable><i>CODE1</i></tt>...',
    'Name2' =&gt; '...<tt class=replaceable><i>CODE2</i></tt>...',
});
# new method:  return the current time
$t0 = new Benchmark;
# ... your <tt class=replaceable><i>CODE</i></tt> here ...
$t1 = new Benchmark;
$td = timediff($t1, $t0);
print "the code took: ", timestr($td), "\n";
# debug method:  enable or disable debugging
Benchmark-&gt;debug (1);
$t = timeit(10, ' 5 ** $Global ');
Benchmark-&gt;debug(0);
</PRE>
</DIV>

<p class=para>
The Benchmark module encapsulates a number of routines to help you
figure out how long it takes to execute some code a given number of times
within a loop.

<p class=para>
For the <tt class=literal>timeit()</tt> routine, <tt class=literal>$count</tt> is the
number of times to run the loop.  <tt class=replaceable><i>CODE</i></tt> is a string
containing the code to run.  <tt class=literal>timeit()</tt> runs a null loop with
<tt class=literal>$count</tt> iterations, and then runs the same loop with your code
inserted.  It reports the difference between the times of execution.

<p class=para>
For <tt class=literal>timethese()</tt>, a loop of <tt class=literal>$count</tt> iterations is run on
each code chunk separately, and the results are reported separately.
The code to run is given as a hash with keys that are names and values
that are code.  <tt class=literal>timethese()</tt> is handy for quick tests to determine
which way of doing something is faster.  For example:

<div class=programlisting>
<p>
<pre>
$ perl -MBenchmark -Minteger
timethese(100000, { add =&gt; '$i += 2', inc =&gt; '$i++; $i++' });
_ _END_ _
Benchmark: timing 1000000 iterations of add, inc...
       add:  4 secs ( 4.52 usr  0.00 sys =  4.52 cpu)
       inc:  6 secs ( 5.32 usr  0.00 sys =  5.32 cpu)
</PRE>
</DIV>

<p class=para>
The following routines are exported into your namespace
if you use the Benchmark module:

<div class=programlisting>
<p>
<pre>
timeit()
timethis()
timethese()
timediff()
timestr()
</PRE>
</DIV>

<p class=para>
The following routines will be exported into your namespace
if you specifically ask that they be imported:

<div class=programlisting>
<p>
<pre>
clearcache()     # clear just the cache element indexed by $key
clearallcache()  # clear the entire cache
disablecache()   # do not use the cache
enablecache()    # resume caching
</PRE>
</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-7-SECT-1.3">Notes</A></h4>

<p class=para>
Code is executed in the caller's package.

<p class=para>
The null loop times are cached, the key being the
number of iterations.  You can control caching with calls like these:

<div class=programlisting>
<p>
<pre>
clearcache($key);
clearallcache();
disablecache();
enablecache();
</PRE>
</DIV>

<p class=para>
Benchmark inherits only from the Exporter class.

<p class=para>
The elapsed time is measured using <i class=emphasis>time</I> (2) and the
granularity is therefore only one second.  Times are given in seconds for the
whole loop (not divided by the number of iterations).  Short tests may produce
negative figures because Perl can appear to take longer to execute the empty
loop than a short test.

<p class=para>
The user and system CPU time is measured to millisecond accuracy using
<i class=emphasis>times</I> (3).  In general, you should pay more
attention to the CPU time than to elapsed time, especially if other processes
are running on the system.  Also, elapsed times of five seconds or more are
needed for reasonable accuracy.

<p class=para>
Because you pass in a string to be <a href="ch03_02.htm">eval</A>ed
instead of a closure to be executed, lexical variables declared with <a href="ch03_02.htm">my</A> outside of the <a href="ch03_02.htm">eval</A> are not visible.

</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch07-SECT2-AUTOID.5">Carp--Generate Error Messages</A></h3>

<div class=programlisting>
<p>
<pre>
use Carp;
carp "Be careful!";         # warn of errors (from perspective of caller)
croak "We're outta here!";  # die of errors (from perspective of caller)
confess "Bye!";             # die of errors with stack backtrace
</PRE>
</DIV>

<p class=para>
<tt class=literal>carp()</tt> and <tt class=literal>croak()</tt> behave like <a href="ch03_02.htm">warn</A> and <a href="ch03_02.htm">die</A>,
respectively, except that they report the error as occurring not at the
line of code where they are invoked, but at a line in one of the calling
routines.  Suppose, for example, that you have a routine <tt class=literal>goo()</tt>
containing an invocation of <tt class=literal>carp()</tt>.  In that case--and assuming
that the current stack shows no callers from a package other than the
current one--<tt class=literal>carp()</tt> will report the error as occurring where
<tt class=literal>goo()</tt> was called.  If, on the other hand, callers from different
packages are found on the stack, then the error is reported as occurring
in the package immediately preceding the package in which the
<tt class=literal>carp()</tt> invocation occurs.
The intent is to let library modules act a little more like built-in
functions, which always report errors where you call them from.

<p class=para>
<tt class=literal>confess()</tt> is like <a href="ch03_02.htm">die</A> except that it prints out a stack
backtrace.  The error is reported at the line where <tt class=literal>confess()</tt> is
invoked, not at a line in one of the calling routines.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch07-SECT2-AUTOID.6">Config--Access Perl Configuration Information</A></h3>

<div class=programlisting>
<p>
<pre>
use Config;
if ($Config{cc} =~ /gcc/) {
    print "built by gcc\n";
}
use Config qw(myconfig config_sh config_vars);
print myconfig();
print config_sh();
config_vars(qw(osname archname));
</PRE>
</DIV>

<p class=para>
The Config module contains all the information that the
<i class=emphasis>Configure</I> script had to figure out at Perl build
time (over 450
values).[1]

<blockquote class=footnote>
<p class=para>[1] 
 Perl was written in C, not because it's a portable
language, but because it's a ubiquitous language.  A bare C program is about as
portable as Chuck Yeager on foot.  
</blockquote>
<p class=para>
Shell variables from the <i class=emphasis>config.sh</I> file (written by
<i class=emphasis>Configure</I>) are stored in a readonly hash, <tt class=literal>%Config</tt>, indexed
by their names.  Values set to the string <tt class=literal>"undef"</tt> in
<i class=emphasis>config.sh</I> are returned as undefined values.  The Perl <a href="ch03_02.htm">exists</A>
function should be used to check whether a named variable exists.

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>myconfig</tt><dd>

<p class=para>
Returns a textual summary of the major Perl configuration values.
See also the explanation of Perl's <b>-V</B> command-line switch in <a href="ch06_01.htm">Chapter 6, <i>Social Engineering</i></A>.

<p>
<dt class=varlistentry><tt class=literal>config_sh</tt><dd>

<p class=para>
Returns the entire Perl configuration information in the form of the
original <i class=emphasis>config.sh</I> shell variable assignment script.

<p>
<dt class=varlistentry><tt class=literal>config_vars(@names)</tt><dd>

<p class=para>
Prints to <tt class=literal>STDOUT</tt> the values of the named configuration variables.  Each is
printed on a separate line in the form:

<div class=programlisting>
<p>
<pre>
name='value';
</PRE>
</DIV>

<p class=para>
Names that are unknown are output as <tt class=literal>name='UNKNOWN';</tt>.</DL>
<p class=para>
Here's a more sophisticated example using <tt class=literal>%Config</tt>:

<div class=programlisting>
<p>
<pre>
use Config;
defined $Config{sig_name} or die "No sigs?";
foreach $name (split(' ', $Config{sig_name})) {
    $signo{$name} = $i;
    $signame[$i] = $name;
    $i++;
}
print "signal #17 = $signame[17]\n";
if ($signo{ALRM}) {
    print "SIGALRM is $signo{ALRM}\n";
}
</PRE>
</DIV>

<p class=para>
Because configuration information is not stored within the Perl executable
itself, it is possible (but unlikely) that the information might not
relate to the actual Perl binary that is being used to access it.
The Config module checks the Perl version number when loaded to try
to prevent gross mismatches, but can't detect subsequent rebuilds of
the same version.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch07-SECT2-AUTOID.7">Cwd--Get Pathname of Current Working Directory</A></h3>

<div class=programlisting>
<p>
<pre>
use Cwd;
$dir = cwd();           # get current working directory safest way
$dir = getcwd();        # like getcwd(3) or getwd(3)
$dir = fastcwd();       # faster and more dangerous
use Cwd 'chdir';        # override chdir; keep PWD up to date
chdir "/tmp";
print $ENV{PWD};        # prints "/tmp"
</PRE>
</DIV>

<p class=para>
<tt class=literal>cwd()</tt> gets the current working directory
using the most natural and safest form for the current
architecture.  For most systems it is identical to <tt class=literal>`pwd`</tt> (but without
the trailing line terminator).

<p class=para>
<tt class=literal>getcwd()</tt> does the same thing by re-implementing <i class=emphasis>getcwd</I> (3)
or <i class=emphasis>getwd</I> (3) in Perl.

<p class=para>
<tt class=literal>fastcwd()</tt> looks the same as <tt class=literal>getcwd()</tt>, but runs faster.
It's also more dangerous because you might <a href="ch03_02.htm">chdir</A> out of a
directory that you can't <a href="ch03_02.htm">chdir</A> back into.

<p class=para>
It is recommended that one of these functions be used in <i class=emphasis>all</I> code
to ensure portability because the <i class=emphasis>pwd</I> program probably only exists
on UNIX systems.

<p class=para>
If you consistently override your <a href="ch03_02.htm">chdir</A> built-in function in all
packages of your program, then your <tt class=literal>PWD</tt> environment variable will
automatically be kept up to date.  Otherwise, you shouldn't rely on it.
(Which means you probably shouldn't rely on it.)

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch07-SECT2-AUTOID.8">DB_File--Access to Berkeley DB</A></h3>

<div class=programlisting>
<p>
<pre>
use DB_File;
# brackets in following code indicate optional arguments
[$X =] tie %hash,  "DB_File", $filename [, $flags, $mode, $DB_HASH];
[$X =] tie %hash,  "DB_File", $filename, $flags, $mode, $DB_BTREE;
[$X =] tie @array, "DB_File", $filename, $flags, $mode, $DB_RECNO;
$status = $X-&gt;del($key [, $flags]);
$status = $X-&gt;put($key, $value [, $flags]);
$status = $X-&gt;get($key, $value [, $flags]);
$status = $X-&gt;seq($key, $value [, $flags]);
$status = $X-&gt;sync([$flags]);
$status = $X-&gt;fd;
untie %hash;
untie @array;
</PRE>
</DIV>

<p class=para>
<a name="CH07.DBF1"></A><a name="CH07.DBF2"></A>DB_File is the most flexible of the DBM-style tie modules.  It
allows Perl programs to make use of the
facilities provided by Berkeley DB (not included).  If you intend to use this
module you should really have a copy of the Berkeley DB manual page at
hand.  The interface defined here mirrors the Berkeley DB interface
closely.

<p class=para>
Berkeley DB is a C library that provides a consistent interface to a
number of database formats.  DB_File provides an interface to all
three of the database (file) types currently supported by Berkeley DB.

<p class=para>
The file types are:

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>DB_HASH</tt><dd>

<p class=para>
Allows arbitrary key/data pairs to be stored in data files.  This is
equivalent to the functionality provided by other hashing packages like
DBM, NDBM, ODBM, GDBM, and SDBM.  Remember, though, the files created
using <tt class=literal>DB_HASH</tt> are not binary compatible with any of the other
packages mentioned.
A default hashing algorithm that will be adequate for most
applications is built into Berkeley DB.  If you do need to use your own
hashing algorithm, it's possible to write your own and have
DB_File use it instead.

<p>
<dt class=varlistentry><tt class=literal>DB_BTREE</tt><dd>

<p class=para>
The btree format allows arbitrary key/data pairs to be stored in a
sorted, balanced binary tree.
It is possible to provide a user-defined
Perl routine to perform the comparison of keys.  By default, though, the
keys are stored in lexical order.  This is useful for providing 
an ordering for your hash keys, and may be used on hashes that are 
only in memory and never go to disk.

<p>
<dt class=varlistentry><tt class=literal>DB_RECNO</tt><dd>

<p class=para>
<tt class=literal>DB_RECNO</tt> allows both fixed-length and variable-length flat text files
to be manipulated using the same key/value pair interface as in <tt class=literal>DB_HASH</tt>
and <tt class=literal>DB_BTREE</tt>.  In this case the key will consist of a record (line)
number.</DL>
<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-7-SECT-1.4">How does DB_File interface to Berkeley DB?</A></h4>

<p class=para>
DB_File gives access to Berkeley DB files using Perl's <a href="ch03_02.htm">tie</A>
function.  This allows DB_File to access Berkeley DB files using either a
hash (for <tt class=literal>DB_HASH</tt> and <tt class=literal>DB_BTREE</tt> file types) or
an ordinary array (for the <tt class=literal>DB_RECNO</tt> file type).

<p class=para>
In addition to the <a href="ch03_02.htm">tie</A> interface, it is also possible to use most of
the functions provided in the Berkeley DB API.

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-7-SECT-1.5">Differences from Berkeley DB</A></h4>

<p class=para>
Berkeley DB uses the function <i class=emphasis>dbopen</I> (3) to open or create a database.
Below is the C prototype for <i class=emphasis>dbopen</I> (3).

<div class=programlisting>
<p>
<pre>
DB *
dbopen (const char *file, int flags, int mode,
        DBTYPE type, const void *openinfo)
</PRE>
</DIV>

<p class=para>
The <tt class=literal>type</tt> parameter is an enumeration selecting one of the
three interface methods, <tt class=literal>DB_HASH</tt>, <tt class=literal>DB_BTREE</tt> or
<tt class=literal>DB_RECNO</tt>.
Depending on which of these is actually chosen, the final parameter,
<tt class=literal>openinfo</tt>, points to a data structure that allows tailoring of the
specific interface method.

<p class=para>
This interface is handled slightly differently in DB_File.  Here is
an equivalent call using DB_File.

<div class=programlisting>
<p>
<pre>
tie %array, "DB_File", $filename, $flags, $mode, $DB_HASH;
</PRE>
</DIV>

<p class=para>
The <tt class=literal>filename</tt>, <tt class=literal>flags</tt>, and <tt class=literal>mode</tt> parameters are the direct
equivalent of their <i class=emphasis>dbopen</I> (3) counterparts.  The final parameter
<tt class=literal>$DB_HASH</tt> performs the function of both the <tt class=literal>type</tt> and
<tt class=literal>openinfo</tt> parameters in <i class=emphasis>dbopen</I> (3).

<p class=para>
In the example above <tt class=literal>$DB_HASH</tt> is actually a reference to a hash
object.  DB_File has three of these predefined references.  Apart
from <tt class=literal>$DB_HASH</tt>, there are also <tt class=literal>$DB_BTREE</tt> and <tt class=literal>$DB_RECNO</tt>.

<p class=para>
The keys allowed in each of these predefined references are limited to
the names used in the equivalent C structure.  So, for example, the
<tt class=literal>$DB_HASH</tt> reference will only allow keys called <tt class=literal>bsize</tt>,
<tt class=literal>cachesize</tt>, <tt class=literal>ffactor</tt>, <tt class=literal>hash</tt>, <tt class=literal>lorder</tt>, and
<tt class=literal>nelem</tt>.

<p class=para>
To change one of these elements, just assign to it like this:

<div class=programlisting>
<p>
<pre>
$DB_HASH-&gt;{cachesize} = 10_000;
</PRE>
</DIV>

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-7-SECT-1.6">Array offsets</A></h4>

<p class=para>
In order to make <tt class=literal>RECNO</tt> more compatible with Perl,
the array offset for all
<tt class=literal>RECNO</tt> arrays begins at 0 rather than 1 as in Berkeley DB.

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-7-SECT-1.7">In-memory databases</A></h4>

<p class=para>
Berkeley DB allows the creation of in-memory databases by using <tt class=literal>NULL</tt>
(that is, a <tt class=literal>(char *)0</tt> in C) in place of the filename.  <tt class=literal>DB_File</tt>
uses <a href="ch03_02.htm">undef</A> instead of <tt class=literal>NULL</tt> to provide this functionality.

<div class=programlisting>
<p>
<pre>
use strict;
use Fcntl;
use DB_File;
my ($k, $v, %hash);
tie(%hash, 'DB_File', undef, O_RDWR|O_CREAT, 0, $DB_BTREE)
    or die "can't tie DB_File: $!":
foreach $k (keys %ENV) {
    $hash{$k} = $ENV{$k};
}
# this will now come out in sorted lexical order 
# without the overhead of sorting the keys
while  (($k,$v) = each %hash) {
    print "$k=$v\n";
}
</PRE>
</DIV>

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-7-SECT-1.8">Using the Berkeley DB interface directly</A></h4>

<p class=para>
In addition to accessing Berkeley DB using a tied hash or array, you can
also make direct use of most functions defined in the
Berkeley DB documentation.

<p class=para>
To do this you need to remember the return value from <a href="ch03_02.htm">tie</A>, or
use the <a href="ch03_02.htm">tied</A> function to get at it yourself later on.

<div class=programlisting>
<p>
<pre>
$db = tie %hash, "DB_File", "filename";
</PRE>
</DIV>

<p class=para>
Once you have done that, you can access the Berkeley DB API functions
directly.

<div class=programlisting>
<p>
<pre>
$db-&gt;put($key, $value, R_NOOVERWRITE);  # invoke the DB "put" function
</PRE>
</DIV>

<p class=para>
All the functions defined in the <i class=emphasis>dbopen</I> (3) manpage are available
except for
<tt class=literal>close()</tt> and <tt class=literal>dbopen()</tt> itself.  The DB_File interface to these
functions mirrors the way Berkeley DB
works.  In particular, note that all these functions return only a status
value.  Whenever a Berkeley DB function returns data via one of its
parameters, the DB_File equivalent does exactly the same thing.

<p class=para>
All the constants defined in the <i class=emphasis>dbopen</I> manpage are also available.

<p class=para>
Below is a list of the functions available.  (The comments only tell you
the differences from the C version.)

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>get</tt><dd>

<p class=para>
The <tt class=literal>$flags</tt> parameter is optional.
The value associated with the key you request is returned in
the <tt class=literal>$value</tt> parameter.

<p>
<dt class=varlistentry><tt class=literal>put</tt><dd>

<p class=para>
As usual the <tt class=literal>flags</tt> parameter is optional.
If you use either the <tt class=literal>R_IAFTER</tt> or <tt class=literal>R_IBEFORE</tt> flags, the
<tt class=literal>$key</tt> parameter will be set to the record number of the inserted
key/value pair.

<p>
<dt class=varlistentry><tt class=literal>del</tt><dd>

<p class=para>
The <tt class=literal>$flags</tt> parameter is optional.

<p>
<dt class=varlistentry><tt class=literal>fd    </tt><dd>

<p class=para>
No differences encountered.

<dt class=varlistentry><tt class=literal>seq</tt><dd>

<p class=para>
The <tt class=literal>$flags</tt> parameter is optional.  Both the <tt class=literal>$key</tt> and
<tt class=literal>$value</tt> parameters will be set.

<p>
<dt class=varlistentry><tt class=literal>sync</tt><dd>

<p class=para>
The <tt class=literal>$flags</tt> parameter is optional.</DL>
</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-7-SECT-1.9">Examples</A></h4>

<p class=para>
Here are a few examples.  First, using <tt class=literal>$DB_HASH</tt>:

<div class=programlisting>
<p>
<pre>
use DB_File;
use Fcntl;
tie %h,  "DB_File", "hashed", O_RDWR|O_CREAT, 0644, $DB_HASH;
# Add a key/value pair to the file
$h{apple} = "orange";
# Check for value of a key
print "No, we have some bananas.\n" if $h{banana};
# Delete
delete $h{"apple"};
untie %h;
</PRE>
</DIV>

<p class=para>
Here is an example using <tt class=literal>$DB_BTREE</tt>.  Just to make life more
interesting, the default comparison function is not used.  Instead,
a Perl subroutine, <tt class=literal>Compare()</tt>, does a case-insensitive comparison.

<div class=programlisting>
<p>
<pre>
use DB_File;
use Fcntl;
sub Compare {
    my ($key1, $key2) = @_;
    "\L$key1" cmp "\L$key2";
}
$DB_BTREE-&gt;{compare} = 'Compare';
tie %h,  'DB_File', "tree", O_RDWR|O_CREAT, 0644, $DB_BTREE;
# Add a key/value pair to the file
$h{Wall}  = 'Larry';
$h{Smith} = 'John';
$h{mouse} = 'mickey';
$h{duck}  = 'donald';
# Delete
delete $h{duck};
# Cycle through the keys printing them in order.
# Note it is not necessary to sort the keys as
# the btree will have kept them in order automatically.
while ($key = each %h) { print "$key\n" }
untie %h;
</PRE>
</DIV>

<p class=para>
The preceding code yields this output:

<div class=programlisting>
<p>
<pre>
mouse
Smith
Wall
</PRE>
</DIV>

<p class=para>
Next, an example using <tt class=literal>$DB_RECNO</tt>.  You may access a regular textfile as 
an array of lines.  But the first line of the text file is the
zeroth element of the array, and so on.  This provides a clean 
way to seek to a particular line in a text file.

<div class=programlisting>
<p>
<pre>
my(@line, $number);
$number = 10;
use Fcntl;
use DB_File;
tie(@line, "DB_File", "/tmp/text", O_RDWR|O_CREAT, 0644, $DB_RECNO)
    or die "can't tie file: $!";
$line[$number - 1] = "this is a new line $number";
</PRE>
</DIV>

<p class=para>
Here's an example of updating a file in place:

<div class=programlisting>
<p>
<pre>
use Fcntl;
use DB_File;
tie(@file, 'DB_File', "/tmp/sample", O_RDWR, 0644, $DB_RECNO)
    or die "can't update /tmp/sample: $!";
print "line #3 was ", $file[2], "\n";
$file[2] = `date`;
untie @file;
</PRE>
</DIV>

<p class=para>
Note that the tied array interface is incomplete, causing
some operations on the resulting array to fail in strange ways.  See the
discussion of tied arrays in <a href="ch05_01.htm">Chapter 5, <i>Packages, Modules, and Object Classes</i></A>.  Some object methods are provided 
to avoid this.  
Here's an example of reading a file backward:

<div class=programlisting>
<p>
<pre>
use DB_File;
use Fcntl;
$H = tie(@h, "DB_File", $file, O_RDWR, 0640, $DB_RECNO)
        or die "Cannot open file $file: $!\n";
# print the records in reverse order
for ($i = $H-&gt;length - 1; $i &gt;= 0; --$i) { 
    print "$i: $h[$i]\n";
}
untie @h;
</PRE>
</DIV>

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-7-SECT-1.10">Locking databases</A></h4>

<p class=para>
Concurrent access of a read-write database by several parties requires
that each use some kind of locking.  Here's an example that uses the
<tt class=literal>fd()</tt> method to get the file descriptor, and then a careful
<a href="ch03_02.htm">open</A> to give something Perl will <a href="ch03_02.htm">flock</A> for you.  Run this
repeatedly in the background to watch the locks granted in proper order.
You have to call the <tt class=literal>sync()</tt> method to ensure that the writes make
it to disk between access, or else the library would normally hold some
in its own cache.

<div class=programlisting>
<p>
<pre>
use Fcntl;
use DB_File;
</PRE>
</DIV>

<div class=programlisting>
<p>
<pre>
use strict;
</PRE>
</DIV>

<div class=programlisting>
<p>
<pre>
sub LOCK_SH { 1 }
sub LOCK_EX { 2 }
sub LOCK_NB { 4 }
sub LOCK_UN { 8 }
</PRE>
</DIV>

<div class=programlisting>
<p>
<pre>
my($oldval, $fd, $db_obj, %db_hash, $value, $key);
</PRE>
</DIV>

<div class=programlisting>
<p>
<pre>
$key   = shift || 'default';
$value = shift || 'magic';
</PRE>
</DIV>

<div class=programlisting>
<p>
<pre>
$value .= " $$";
</PRE>
</DIV>

<div class=programlisting>
<p>
<pre>
$db_obj = tie(%db_hash, 'DB_File', '/tmp/foo.db', O_CREAT|O_RDWR, 0644)
                    or die "dbcreat /tmp/foo.db $!";
$fd = $db_obj-&gt;fd;
print "$$: db fd is $fd\n";
open(DB_FH, "+&lt;&amp;=$fd") or die "fdopen $!";
</PRE>
</DIV>

<div class=programlisting>
<p>
<pre>
unless (flock (DB_FH, LOCK_SH | LOCK_NB)) {
    print "$$: CONTENTION; can't read during write update!
                Waiting for read lock ($!) ....";
    unless (flock (DB_FH, LOCK_SH)) { die "flock: $!" }
}
print "$$: Read lock granted\n";
</PRE>
</DIV>

<div class=programlisting>
<p>
<pre>
$oldval = $db_hash{$key};
print "$$: Old value was $oldval\n";
flock(DB_FH, LOCK_UN);
</PRE>
</DIV>

<div class=programlisting>
<p>
<pre>
unless (flock (DB_FH, LOCK_EX | LOCK_NB)) {
    print "$$: CONTENTION; must have exclusive lock!
                Waiting for write lock ($!) ....";
    unless (flock (DB_FH, LOCK_EX)) { die "flock: $!" }
}
</PRE>
</DIV>

<div class=programlisting>
<p>
<pre>
print "$$: Write lock granted\n";
$db_hash{$key} = $value;
sleep 10;
</PRE>
</DIV>

<div class=programlisting>
<p>
<pre>
$db_obj-&gt;sync();                   # to flush
flock(DB_FH, LOCK_UN);
untie %db_hash;
undef $db_obj;                     # removing the last reference to the DB
                                   # closes it. Closing DB_FH is implicit.
print "$$: Updated db to $key=$value\n";
</PRE>
</DIV>

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-7-SECT-1.11">See also</A></h4>

<p class=para>
Related manpages: <i class=emphasis>dbopen</I> (3),
<i class=emphasis>hash</I> (3), <i class=emphasis>recno</I> (3),
<i class=emphasis>btree</I> (3).

<p class=para>
Berkeley DB is available from these locations:

<p>
<ul class=itemizedlist>
<li class=listitem><i class=emphasis>ftp://ftp.cs.berkeley.edu/ucb/4bsd/db.1.85.tar.gz</I>

<p>
<li class=listitem><i class=emphasis>http://www.perl.com/CPAN/src/misc/db.1.85.tar.gz</I>

<p>
</UL>
</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch07-SECT2-AUTOID.9">Devel::SelfStubber--Generate Stubs for a SelfLoading Module</A></h3>

<div class=programlisting>
<p>
<pre>
use Devel::SelfStubber;
$modulename = "Mystuff::Grok";  # no .pm suffix or slashes
$lib_dir = "";                  # defaults to current directory
Devel::SelfStubber-&gt;stub($modulename, $lib_dir);   # stubs only
# to generate the whole module with stubs inserted correctly
use Devel::SelfStubber;
$Devel::SelfStubber::JUST_STUBS = 0;
Devel::SelfStubber-&gt;stub($modulename, $lib_dir);
</PRE>
</DIV>

<p class=para>
Devel::SelfStubber supports inherited, autoloaded methods by printing the stubs
you need to put in your module before the
<tt class=literal>_ _DATA_ _</tt> token.  A subroutine stub looks like
this:

<div class=programlisting>
<p>
<pre>
sub moo;
</PRE>
</DIV>

<p class=para>
The stub ensures that if a method is called, it will get loaded.
This is best explained using the following example:

<p class=para>
Assume four classes, A, B, C, and D.
A is the root class, B is a subclass of A, C is a subclass of B,
and D is another subclass of A.

<p class=para>
<div class=screen>
<p>
<pre>
                    A
                   / \
                  B   D
                 /
                C
</PRE>
</DIV>

<p class=para>
If D calls an autoloaded method <tt class=literal>moo()</tt> which is defined in class A,
then the method is loaded into class A, and executed.  If C then calls
method <tt class=literal>moo()</tt>, and that method was reimplemented in class B, but
set to be autoloaded, then the lookup mechanism never gets to the
<tt class=literal>AUTOLOAD</tt> mechanism in B because it first finds the <tt class=literal>moo()</tt>
method already loaded in A, and so erroneously uses that.  If the method
<tt class=literal>moo()</tt> had been stubbed in B, then the lookup mechanism would have
found the stub, and correctly loaded and used the subroutine from B.

<p class=para>
So, to get autoloading to work right with classes and subclasses,
you need to make sure the stubs are loaded.

<p class=para>
The SelfLoader can load stubs automatically at module initialization
with:

<div class=programlisting>
<p>
<pre>
SelfLoader-&gt;load_stubs();
</PRE>
</DIV>

<p class=para>
But you may wish to avoid having the stub-loading overhead associated
with your initialization.[2]
In this case, you can put the subroutine stubs before the
<tt class=literal>_ _DATA_ _</tt> token.  This can be done manually, by inserting the
output of the first call to the <tt class=literal>stub()</tt> method above.  But the module
also allows automatic insertion of the stubs.
By default the <tt class=literal>stub()</tt> method just prints the stubs, but you can set the
global <tt class=literal>$Devel::SelfStubber::JUST_STUBS</tt> to <tt class=literal>0</tt> and it will
print out the entire module with the stubs positioned correctly, as in
the second call to <tt class=literal>stub()</tt>.

<blockquote class=footnote>
<p class=para>[2] 
Although note that the <tt class=literal>load_stubs()</tt> method will be called sooner
or later, at latest when the first subroutine is being autoloaded--which
may be too late, if you're trying to <tt class=literal>moo()</tt>.
</blockquote>
<p class=para>
At the very least, this module is useful for seeing what the SelfLoader
thinks are stubs; in order to ensure that future versions of the
SelfStubber remain in step with the SelfLoader, the
SelfStubber actually uses the SelfLoader to determine which
stubs are needed.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch07-SECT2-AUTOID.10">diagnostics--Force Verbose Warning Diagnostics</A></h3>

<div class=programlisting>
<p>
<pre>
# As a pragma:
use diagnostics;
use diagnostics -verbose;
enable  diagnostics;
disable diagnostics;
# As a program:
$ perl program 2&gt;diag.out
$ splain [-v] [-p] diag.out
</PRE>
</DIV>

<p class=para>
<a name="CH07.DIAG1"></A><a name="CH07.DIAG2"></A><a name="CH07.DIAG3"></A><a name="CH07.DIAG4"></A><a name="CH07.DIAG5"></A>The diagnostics module extends the terse diagnostics normally emitted by
both the Perl compiler and the Perl interpreter, augmenting them with the more
explicative and endearing descriptions found in <a href="ch09_01.htm">Chapter 9, <i>Diagnostic Messages</i></A>.
It affects the compilation phase of your program rather than merely the
execution phase.

<p class=para>
To use in your program as a pragma, merely say:

<div class=programlisting>
<p>
<pre>
use diagnostics;
</PRE>
</DIV>

<p class=para>
at the start (or near the start) of your program.  (Note
that this enables Perl's <b>-w</B> flag.)  Your whole
compilation will then be subject to the enhanced diagnostics.
These are still issued to <tt class=literal>STDERR</tt>.

<p class=para>
Due to the interaction between run-time and compile-time issues,
and because it's probably not a very good idea anyway,
you may <i class=emphasis>not</I> use:

<div class=programlisting>
<p>
<pre>
no diagnostics
</PRE>
</DIV>

<p class=para>
to turn diagnostics off at compile time.  However, you can turn diagnostics on or
off at run-time by invoking <tt class=literal>diagnostics::enable()</tt> and
<tt class=literal>diagnostics::disable()</tt>, respectively.

<p class=para>
The <tt class=literal>-verbose</tt> argument first prints out the <i class=emphasis>perldiag</I> (1) manpage
introduction before any other diagnostics.  The <tt class=literal>$diagnostics::PRETTY</tt>
variable, if set in a <tt class=literal>BEGIN</tt> block, results in nicer escape sequences
for pagers:

<div class=programlisting>
<p>
<pre>
BEGIN { $diagnostics::PRETTY = 1 }
</PRE>
</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-7-SECT-1.12">The standalone program</A></h4>

<p class=para>
While apparently a whole other program, <i class=emphasis>splain</I> is actually nothing
more than a link to the (executable) <i class=emphasis>diagnostics.pm</I> module.
It acts upon the standard error output of a Perl program, which you may
have treasured up in a file, or piped directly to <i class=emphasis>splain</I>.

<p class=para>
The <b>-v</B> flag has the same effect as:

<div class=programlisting>
<p>
<pre>
use diagnostics -verbose
</PRE>
</DIV>

<p class=para>
The <b>-p</B> flag sets
<tt class=literal>$diagnostics::PRETTY</tt> to true.  Since you're post-processing
with <i class=emphasis>splain</I>, there's no sense in being able to
<tt class=literal>enable()</tt> or <tt class=literal>disable()</tt> diagnostics.

<p class=para>
Output from <i class=emphasis>splain</I> (unlike the pragma) is directed to <tt class=literal>STDOUT</tt>.

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-7-SECT-1.13">Examples</A></h4>

<p class=para>
The following file is certain to trigger a few errors at both
run-time and compile-time:

<div class=programlisting>
<p>
<pre>
use diagnostics;
print NOWHERE "nothing\n";
print STDERR "\n\tThis message should be unadorned.\n";
warn "\tThis is a user warning";
print "\nDIAGNOSTIC TESTER: Please enter a &lt;CR&gt; here: ";
my $a, $b = scalar &lt;STDIN&gt;;
print "\n";
print $x/$y;
</PRE>
</DIV>

<p class=para>
If you prefer to run your program first and look at its problems
afterward, do this while talking to a Bourne-like shell:

<div class=programlisting>
<p>
<pre>
perl -w test.pl 2&gt;test.out
./splain &lt; test.out
</PRE>
</DIV>

<p class=para>
If you don't want to modify your source code, but still want on-the-fly
warnings, do this:

<div class=programlisting>
<p>
<pre>
perl -w -Mdiagnostics test.pl
</PRE>
</DIV>

<p class=para>
If you want to control warnings on the fly, do something like this.
(Make sure the <a href="ch03_02.htm">use</A> comes first, 
or you won't be able to get at the <tt class=literal>enable()</tt> or 
<tt class=literal>disable()</tt> methods.)

<div class=programlisting>
<p>
<pre>
use diagnostics; # checks entire compilation phase
print "\ntime for 1st bogus diags: SQUAWKINGS\n";
print BOGUS1 'nada';
print "done with 1st bogus\n";
disable diagnostics; # only turns off run-time warnings
print "\ntime for 2nd bogus: (squelched)\n";
print BOGUS2 'nada';
print "done with 2nd bogus\n";
enable diagnostics; # turns back on run-time warnings
print "\ntime for 3rd bogus: SQUAWKINGS\n";
print BOGUS3 'nada';
print "done with 3rd bogus\n";
disable diagnostics;
print "\ntime for 4th bogus: (squelched)\n";
print BOGUS4 'nada';
print "done with 4th bogus\n";
</PRE>
</DIV>

</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch07-SECT2-AUTOID.11">DirHandle--Supply Object Methods for Directory Handles</A></h3>

<div class=programlisting>
<p>
<pre>
use DirHandle;
my $d = new DirHandle ".";   # open the current directory
if (defined $d) {
    while (defined($_ = $d-&gt;read)) { something($_); }
    $d-&gt;rewind;
    while (defined($_ = $d-&gt;read)) { something_else($_); }
}
</PRE>
</DIV>

<p class=para>
DirHandle provides an alternative interface to Perl's
<a href="ch03_02.htm">opendir</A>, <a href="ch03_02.htm">closedir</A>, <a href="ch03_02.htm">readdir</A>, and <a href="ch03_02.htm">rewinddir</A> functions.

<p class=para>
The only objective benefit to using DirHandle is that it avoids
name-space pollution by creating anonymous globs to hold directory
handles.  Well, and it also closes the DirHandle automatically when the
last reference goes out of scope.  But since most people only keep a
directory handle open long enough to slurp in all the filenames, this is
of dubious value.  But hey, it's object-oriented.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch07-SECT2-AUTOID.12">DynaLoader--Automatic Dynamic Loading of Perl Modules</A></h3>

<div class=programlisting>
<p>
<pre>
package YourModule;
require DynaLoader;
@ISA = qw(... DynaLoader ...);
bootstrap YourModule;
</PRE>
</DIV>

<p class=para>
<a name="CH07.DYNA1"></A><a name="CH07.DYNA2"></A><a name="CH07.DYNA3"></A><a name="CH07.DYNA4"></A>This module defines the standard Perl interface to the dynamic linking
mechanisms available on many platforms.  A common theme throughout the
module system is that <i class=emphasis>using</I> a module should be easy, even if the
module itself (or the installation of the module) is more complicated as
a result.  This applies particularly to the DynaLoader.  To use it in
your own module, all you need are the incantations listed above in the
synopsis.  This will work whether YourModule is statically or
dynamically linked into Perl.  (This is a <i class=emphasis>Configure</I> option for each
module.) The <tt class=literal>bootstrap()</tt> method will either 
call YourModule's bootstrap routine directly if YourModule is statically 
linked into Perl, or if not, YourModule will inherit the <tt class=literal>bootstrap()</tt> method from DynaLoader, which will do everything necessary to load in your module, and then call YourModule's <tt class=literal>bootstrap()</tt> method for you, as
if it were there all the time and you called it yourself.  Piece of cake,
of the have-it-and-eat-it-too variety.

<p class=para>
The rest of this description talks about the DynaLoader from the
viewpoint of someone who wants to extend the DynaLoader module to a new
architecture.  The <i class=emphasis>Configure</I> process selects which kind of dynamic
loading to use by choosing to link in one of several C implementations,
which must be linked into <i class=emphasis>perl</I> statically.  (This is unlike other
C extensions, which provide a single implementation, which may be linked
in either statically or dynamically.)

<p class=para>
The DynaLoader is designed to be a very simple, high-level interface that
is sufficiently general to cover the requirements of SunOS, HP-UX,
NeXT, Linux, VMS, Win-32, and other platforms.  By itself, though,
DynaLoader is practically useless for accessing non-Perl libraries
because it provides almost no Perl-to-C "glue".  There is, for example,
no mechanism for calling a C library function or supplying its arguments
in any sort of portable form.  This job is delegated to the other
extension modules that you may load in by using DynaLoader.

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="ch07-SECT3-AUTOID.1">Internal interface summary</A></h4>

<div class=programlisting>
<p>
<pre>
<i class=emphasis>Variables:</I>
    @dl_library_path
    @dl_resolve_using
    @dl_require_symbols
    $dl_debug

<i class=emphasis>Subroutines:</I>
    bootstrap($modulename);
    @filepaths = dl_findfile(@names);
    $filepath = dl_expandspec($spec);
    $libref  = dl_load_file($filename);
    $symref  = dl_find_symbol($libref, $symbol);
    @symbols = dl_undef_symbols();
    dl_install_xsub($name, $symref [, $filename]);
    $message = dl_error;
</PRE>
</DIV>

<p class=para>
The <tt class=literal>bootstrap()</tt> and <tt class=literal>dl_findfile()</tt> routines
are standard across all platforms, and so are defined in
<i class=emphasis>DynaLoader.pm</I>.  The rest of the functions are supplied by
the particular <i class=emphasis>.xs</I> file that supplies the implementation
for the platform.  (You can examine the existing implementations in the
<i class=emphasis>ext/DynaLoader/</I> *<i class=emphasis>.xs</I> files in the Perl
source directory.  You should also read <i class=emphasis>DynaLoader.pm</I>, of
course.)  These implementations may also tweak the default values of the
variables listed below.

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>@dl_library_path</tt><dd>

<p class=para>
<a name="CH07.DYNA6"></A>The default list of directories in which <tt class=literal>dl_findfile()</tt> will
search for libraries.  Directories are searched in the order they are
given in this array variable, beginning with subscript 0.
<tt class=literal>@dl_library_path</tt> is initialized to hold the list of "normal"
directories (<i class=emphasis>/usr/lib</I> and so on) determined by the Perl installation
script, <i class=emphasis>Configure</I>, and given by 
<tt class=literal>$Config{'libpth'}</tt>.  This
is to ensure portability across a wide range of platforms.
<tt class=literal>@dl_library_path</tt> should also be initialized with any other directories
that can be determined from the environment at run-time (such as
<tt class=literal>LD_LIBRARY_PATH</tt> for SunOS).
After initialization, <tt class=literal>@dl_library_path</tt> can be manipulated by an
application using <a href="ch03_02.htm">push</A> and <a href="ch03_02.htm">unshift</A> before calling
<tt class=literal>dl_findfile()</tt>.
<a href="ch03_02.htm">unshift</A> can be used to add directories to the front of the search order
either to save search time or to override standard libraries with the same
name.
The load function that <tt class=literal>dl_load_file()</tt> calls might require an absolute
pathname.  The <tt class=literal>dl_findfile()</tt> function and <tt class=literal>@dl_library_path</tt>
can be used to search for and return the absolute pathname for the
library/object that you wish to load.

<dt class=varlistentry><tt class=literal>@dl_resolve_using</tt><dd>

<p class=para>
A list of additional libraries or other shared objects that can be
used to resolve any undefined symbols that might be generated by a
later call to <tt class=literal>dl_load_file()</tt>.
This is only required on some platforms that do not handle dependent
libraries automatically.  For example, the Socket extension shared library
(<i class=emphasis>auto/Socket/Socket.so</I>) contains references to many socket functions
that need to be resolved when it's loaded.  Most platforms will
automatically know where to find the "dependent" library (for example,
<i class=emphasis>/usr/lib/libsocket.so</I>). A few platforms 
need to be told the location
of the dependent library explicitly.  Use <tt class=literal>@dl_resolve_using</tt> for this.
Example:

<div class=programlisting>
<p>
<pre>
@dl_resolve_using = dl_findfile('-lsocket');
</PRE>
</DIV>

<p>
<dt class=varlistentry><tt class=literal>@dl_require_symbols</tt><dd>

<p class=para>
A list of one or more symbol names that are in the library/object file
to be dynamically loaded.  This is only required on some platforms.

<p>
<dt class=varlistentry><tt class=literal>dl_error</tt><dd>

<div class=programlisting>
<p>
<pre>
$message = dl_error();
</PRE>
</DIV>

<p class=para>
Error message text from the last failed DynaLoader function.  Note that, similar
to <tt class=literal>errno</tt> in UNIX, a successful function call does not reset
this message.  Implementations should detect the error as soon as it occurs in
any of the other functions and save the corresponding message for later
retrieval.  This will avoid problems on some platforms (such as SunOS) where the
error message is very temporary (see, for example, <i class=emphasis>dlerror</I> (3)).

<p>
<dt class=varlistentry><tt class=literal>$dl_debug</tt><dd>

<p class=para>
Internal debugging messages are enabled when <tt class=literal>$dl_debug</tt> is set
true.  Currently, setting <tt class=literal>$dl_debug</tt> only affects the Perl side
of the DynaLoader.  These messages should help an application
developer to resolve any DynaLoader usage problems.
<tt class=literal>$dl_debug</tt> is set to <tt class=literal>$ENV{'PERL_DL_DEBUG'}</tt> if defined.
For the DynaLoader developer and porter there is a similar debugging
variable added to the C code (see <i class=emphasis>dlutils.c</I>) and enabled if Perl was
built with the <tt class=literal>-DDEBUGGING</tt> flag.  This can also be set via the
<tt class=literal>PERL_DL_DEBUG</tt> environment variable.  Set to 1 for minimal information or
higher for more.

<p>
<dt class=varlistentry><tt class=literal>dl_findfile</tt><dd>

<div class=programlisting>
<p>
<pre>
@filepaths = dl_findfile(@names)
</PRE>
</DIV>

<p class=para>
Determines the full paths (including file suffix) of one or more loadable files,
given their generic names and optionally one or more directories.  Searches
directories in <tt class=literal>@dl_library_path</tt> by default and returns an
empty list if no files were found.  Names can be specified in a variety of
platform-independent forms.  Any names in the form <tt class=literal>-lname</tt> are
converted into <i class=emphasis>libname.</I>*, where .* is an appropriate suffix
for the platform.  If a name does not already have a suitable prefix or suffix,
then the corresponding file will be sought by trying prefix and suffix
combinations appropriate to the platform: <i class=emphasis>$name.o</I>,
<i class=emphasis>lib$name.</I>* and <i class=emphasis>$name</I>.  If any
directories are included in <tt class=literal>@names</tt>, they are searched before
<tt class=literal>@dl_library_path</tt>.  Directories may be specified as
<tt class=literal>-Ldir</tt>.  Any other names are treated as filenames to be
searched for.  
Using arguments of the form <tt class=literal>-Ldir</tt> and
<tt class=literal>-lname</tt> is recommended.  Example:

<div class=programlisting>
<p>
<pre>
@dl_resolve_using = dl_findfile(qw(-L/usr/5lib -lposix));
</PRE>
</DIV>

<p>
<dt class=varlistentry><tt class=literal>dl_expandspec</tt><dd>

<div class=programlisting>
<p>
<pre>
$filepath = dl_expandspec($spec)
</PRE>
</DIV>

<p class=para>
Some unusual systems such as VMS require special filename handling in order to
deal with symbolic names for files (that is, VMS's Logical Names).  To support
these systems a <tt class=literal>dl_expandspec()</tt> function can be implemented
either in the <i class=emphasis>dl_</I>*<i class=emphasis>.xs</I> file or code can
be added to the autoloadable <tt class=literal>dl_expandspec()</tt> function in
<i class=emphasis>DynaLoader.pm</I>.

<p>
<dt class=varlistentry><tt class=literal>dl_load_file</tt><dd>

<div class=programlisting>
<p>
<pre>
$libref = dl_load_file($filename)
</PRE>
</DIV>

<p class=para>
Dynamically load <tt class=literal>$filename</tt>, which must be the path to a shared object
or library.  An opaque "library reference" is returned as a handle for
the loaded object.  <tt class=literal>dl_load_file()</tt> returns the undefined value on error.
(On systems that provide a handle for the loaded object such as SunOS
and HP-UX, the returned handle will be <tt class=literal>$libref</tt>.  On other systems
<tt class=literal>$libref</tt> will typically be <tt class=literal>$filename</tt> or a pointer to a
buffer containing <tt class=literal>$filename</tt>.
The application should not examine or alter <tt class=literal>$libref</tt> in any way.)
Below are some of the functions that do the real work.  Such functions
should use the current values of <tt class=literal>@dl_require_symbols</tt> and
<tt class=literal>@dl_resolve_using</tt> if required.

<div class=programlisting>
<p>
<pre>
SunOS:  dlopen($filename)
HP-UX:  shl_load($filename)
Linux:  dld_create_reference(@dl_require_symbols); dld_link($filename)
NeXT:   rld_load($filename, @dl_resolve_using)
VMS:    lib$find_image_symbol($filename, $dl_require_symbols[0])
</PRE>
</DIV>

<p>
<dt class=varlistentry><tt class=literal>dl_find_symbol</tt><dd>

<div class=programlisting>
<p>
<pre>
$symref = dl_find_symbol($libref, $symbol)
</PRE>
</DIV>

<p class=para>
Returns the address of the symbol <tt class=literal>$symbol</tt>, or the undefined value
if not found.  If the
target system has separate functions to search for symbols of different
types, then <tt class=literal>dl_find_symbol()</tt> should search for function symbols first
and then search for other types.
The exact manner in which the address is returned in <tt class=literal>$symref</tt> is not
currently defined.  The only initial requirement is that <tt class=literal>$symref</tt> can
be passed to, and understood by, <tt class=literal>dl_install_xsub()</tt>.  Here are some
current implementations:

<div class=programlisting>
<p>
<pre>
SunOS:  dlsym($libref, $symbol)
HP-UX:  shl_findsym($libref, $symbol)
Linux:  dld_get_func($symbol) and/or dld_get_symbol($symbol)
NeXT:   rld_lookup("_$symbol")
VMS:    lib$find_image_symbol($libref, $symbol)
</PRE>
</DIV>

<p>
<dt class=varlistentry><tt class=literal>dl_undef_symbols</tt><dd>

<div class=programlisting>
<p>
<pre>
@symbols = dl_undef_symbols()
</PRE>
</DIV>

<p class=para>
Returns a list of symbol names which remain undefined after
<tt class=literal>dl_load_file()</tt>.  It returns <tt class=literal>()</tt> if these
names are not known.  Don't worry if your platform does not provide a mechanism
for this.  Most platforms do not need it and hence do not provide it; they just
return an empty list.

<p>
<dt class=varlistentry><tt class=literal>dl_install_xsub</tt><dd>

<div class=programlisting>
<p>
<pre>
dl_install_xsub($perl_name, $symref [, $filename])
</PRE>
</DIV>

<p class=para>
Creates a new Perl external subroutine named <tt class=literal>$perl_name</tt> using
<tt class=literal>$symref</tt> as a pointer to the function that implements the routine.
This is simply a direct call to <tt class=literal>newXSUB()</tt>. It returns a reference to
the installed function.
The <tt class=literal>$filename</tt> parameter is used by Perl to identify the source file for
the function if required by <a href="ch03_02.htm">die</A>, <a href="ch03_02.htm">caller</A>, or the debugger.  If
<tt class=literal>$filename</tt> is not defined, then <i class=emphasis>DynaLoader</I> will be used.

<p>
<dt class=varlistentry><tt class=literal>bootstrap()</tt><dd>

<div class=programlisting>
<p>
<pre>
bootstrap($module);
</PRE>
</DIV>

<p class=para>
This is the normal entry point for automatic dynamic loading in Perl.

<p class=para>
It performs the following actions:

<p>
<ul class=itemizedlist>
<li class=listitem>Locates an <i class=emphasis>auto/$module</I> directory by searching <tt class=literal>@INC</tt>

<p>
<li class=listitem>Uses <tt class=literal>dl_findfile()</tt> to determine the filename to load

<p>
<li class=listitem>Sets <tt class=literal>@dl_require_symbols</tt> to <tt class=literal>(`boot_$module`)</tt>

<p>
<li class=listitem>Executes an <i class=emphasis>auto/$module/$module.bs</I> file if it exists
(typically used to add to <tt class=literal>@dl_resolve_using</tt> any files that
are required to load the module on the current platform)

<p>
<li class=listitem>Calls <tt class=literal>dl_load_file()</tt> to load the file

<p>
<li class=listitem>Calls <tt class=literal>dl_undef_symbols()</tt> and warns if any symbols are undefined

<p>
<li class=listitem>Calls <tt class=literal>dl_find_symbol()</tt> for <tt class=literal>"boot_$module"</tt>

<p>
<li class=listitem>Calls <tt class=literal>dl_install_xsub()</tt> to install it as <tt class=literal>${module}::bootstrap</tt>

<p>
<li class=listitem>Calls <tt class=literal>&amp;{"${module}::bootstrap"}</tt> to bootstrap the module (actually
it uses the function reference returned by <tt class=literal>dl_install_xsub()</tt> for speed)

<p>
</UL>
</DL>
</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch07-SECT2-AUTOID.13">English--Use English or awk Names for Punctuation Variables</A></h3>

<div class=programlisting>
<p>
<pre>
use English;
...
if ($ERRNO =~ /denied/) { ... }
</PRE>
</DIV>

<p class=para>
This module provides aliases for the built-in "punctuation" variables.
Variables with side effects
that get triggered merely by accessing them (like <b>$0</B>) will still
have the same effects under the aliases.

<p class=para>
For those variables that have an <i class=emphasis>awk</I> (1) version, both long
and short English alternatives are provided.  For example,
the <tt class=literal>$/</tt> variable can be referred to either as <tt class=literal>$RS</tt> or as
<tt class=literal>$INPUT_RECORD_SEPARATOR</tt> if you are using the English module.

<p class=para>
Here is the list of variables along with their English alternatives:

<div class=informaltable>
<p>
<a name="PERL2-CH-7-TAB-13"></A>

<table class=INFORMALTABLE>
<tr class=row>
<th align="left">Perl</TH>
<th align="left">English</TH>
<th align="left">Perl</TH>
<th align="left">English</TH>
</TR>
<tr class=row>
<td align="left"><b>@_</B></TD>
<td align="left"><tt class=literal>@ARG</tt></TD>
<td align="left"><b>$?</B></TD>
<td align="left"><tt class=literal>$CHILD_ERROR</tt></TD>
</TR>
<tr class=row>
<td align="left"><b>$_</B></TD>
<td align="left"><tt class=literal>$ARG</tt></TD>
<td align="left"><b>$!</B></TD>
<td align="left"><tt class=literal>$OS_ERROR</tt></TD>
</TR>
<tr class=row>
<td align="left"><b>$&amp;</B></TD>
<td align="left"><tt class=literal>$MATCH</tt></TD>
<td align="left"><b>$!</B></TD>
<td align="left"><tt class=literal>$ERRNO</tt></TD>
</TR>
<tr class=row>
<td align="left"><b>$</B><tt class=literal>`</tt></TD>
<td align="left"><tt class=literal>$PREMATCH</tt></TD>
<td align="left"><b>$@</B></TD>
<td align="left"><tt class=literal>$EVAL_ERROR</tt></TD>
</TR>
<tr class=row>
<td align="left"><b>$</B><tt class=literal>'</tt></TD>
<td align="left"><tt class=literal>$POSTMATCH</tt></TD>
<td align="left"><b>$$</B></TD>
<td align="left"><tt class=literal>$PROCESS_ID</tt></TD>
</TR>
<tr class=row>
<td align="left"><b>$+</B></TD>
<td align="left"><tt class=literal>$LAST_PAREN_MATCH</tt></TD>
<td align="left"><b>$$</B></TD>
<td align="left"><tt class=literal>$PID</tt></TD>
</TR>
<tr class=row>
<td align="left"><b>$.</B></TD>
<td align="left"><tt class=literal>$INPUT_LINE_NUMBER</tt></TD>
<td align="left"><b>$&lt;</B></TD>
<td align="left"><tt class=literal>$REAL_USER_ID</tt></TD>
</TR>
<tr class=row>
<td align="left"><b>$.</B></TD>
<td align="left"><tt class=literal>$NR</tt></TD>
<td align="left"><b>$&lt;</B></TD>
<td align="left"><tt class=literal>$UID</tt></TD>
</TR>
<tr class=row>
<td align="left"><b>$/</B></TD>
<td align="left"><tt class=literal>$INPUT_RECORD_SEPARATOR</tt></TD>
<td align="left"><b>$&gt;</B></TD>
<td align="left"><tt class=literal>$EFFECTIVE_USER_ID</tt></TD>
</TR>
<tr class=row>
<td align="left"><b>$/</B></TD>
<td align="left"><tt class=literal>$RS</tt></TD>
<td align="left"><b>$&gt;</B></TD>
<td align="left"><tt class=literal>$EUID</tt></TD>
</TR>
<tr class=row>
<td align="left"><b>$|</B></TD>
<td align="left"><tt class=literal>$OUTPUT_AUTOFLUSH</tt></TD>
<td align="left"><b>$(</B></TD>
<td align="left"><tt class=literal>$REAL_GROUP_ID</tt></TD>
</TR>
<tr class=row>
<td align="left"><b>$,</B></TD>
<td align="left"><tt class=literal>$OUTPUT_FIELD_SEPARATOR</tt></TD>
<td align="left"><b>$(</B></TD>
<td align="left"><tt class=literal>$GID</tt></TD>
</TR>
<tr class=row>
<td align="left"><b>$,</B></TD>
<td align="left"><tt class=literal>$OFS</tt></TD>
<td align="left"><b>$)</B></TD>
<td align="left"><tt class=literal>$EFFECTIVE_GROUP_ID</tt></TD>
</TR>
<tr class=row>
<td align="left"><b>$\</B></TD>
<td align="left"><tt class=literal>$OUTPUT_RECORD_SEPARATOR</tt></TD>
<td align="left"><b>$)</B></TD>
<td align="left"><tt class=literal>$EGID</tt></TD>
</TR>
<tr class=row>
<td align="left"><b>$\</B></TD>
<td align="left"><tt class=literal>$ORS</tt></TD>
<td align="left"><b>$0</B></TD>
<td align="left"><tt class=literal>$PROGRAM_NAME</tt></TD>
</TR>
<tr class=row>
<td align="left"><b>$"</B></TD>
<td align="left"><tt class=literal>$LIST_SEPARATOR</tt></TD>
<td align="left"><b>$]</B></TD>
<td align="left"><tt class=literal>$PERL_VERSION</tt></TD>
</TR>
<tr class=row>
<td align="left"><b>$;</B></TD>
<td align="left"><tt class=literal>$SUBSCRIPT_SEPARATOR</tt></TD>
<td align="left"><b>$^A</B></TD>
<td align="left"><tt class=literal>$ACCUMULATOR</tt></TD>
</TR>
<tr class=row>
<td align="left"><b>$;</B></TD>
<td align="left"><tt class=literal>$SUBSEP</tt></TD>
<td align="left"><b>$^D</B></TD>
<td align="left"><tt class=literal>$DEBUGGING</tt></TD>
</TR>
<tr class=row>
<td align="left"><b>$%</B></TD>
<td align="left"><tt class=literal>$FORMAT_PAGE_NUMBER</tt></TD>
<td align="left"><b>$^F</B></TD>
<td align="left"><tt class=literal>$SYSTEM_FD_MAX</tt></TD>
</TR>
<tr class=row>
<td align="left"><b>$=</B></TD>
<td align="left"><tt class=literal>$FORMAT_LINES_PER_PAGE</tt></TD>
<td align="left"><b>$^I</B></TD>
<td align="left"><tt class=literal>$INPLACE_EDIT</tt></TD>
</TR>
<tr class=row>
<td align="left"><b>$-</B></TD>
<td align="left"><tt class=literal>$FORMAT_LINES_LEFT</tt></TD>
<td align="left"><b>$^P</B></TD>
<td align="left"><tt class=literal>$PERLDB</tt></TD>
</TR>
<tr class=row>
<td align="left"><b>$~</B></TD>
<td align="left"><tt class=literal>$FORMAT_NAME</tt></TD>
<td align="left"><b>$^T</B></TD>
<td align="left"><tt class=literal>$BASETIME</tt></TD>
</TR>
<tr class=row>
<td align="left"><b>$^</B></TD>
<td align="left"><tt class=literal>$FORMAT_TOP_NAME</tt></TD>
<td align="left"><b>$^W</B></TD>
<td align="left"><tt class=literal>$WARNING</tt></TD>
</TR>
<tr class=row>
<td align="left"><b>$:</B></TD>
<td align="left"><tt class=literal>$FORMAT_LINE_BREAK_CHARACTERS</tt></TD>
<td align="left"><b>$^X</B></TD>
<td align="left"><tt class=literal>$EXECUTABLE_NAME</tt></TD>
</TR>
<tr class=row>
<td align="left"><b>$^L</B></TD>
<td align="left"><tt class=literal>$FORMAT_LINEFEED</tt></TD>
<td align="left"><b>$^O</B></TD>
<td align="left"><tt class=literal>$OSNAME</tt></TD>
</TR>
</TABLE>
<p>
</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch07-SECT2-AUTOID.14">Env--Import Environment Variables</A></h3>

<div class=programlisting>
<p>
<pre>
use Env;                     # import all possible variables
use Env qw(PATH HOME TERM);  # import only specified variables
</PRE>
</DIV>

<p class=para>
<a name="CH07.IMPORT"></A>Perl maintains environment variables in a pseudo-associative array
named <tt class=literal>%ENV</tt>.  Since this access method is sometimes inconvenient,
the Env module allows environment variables to be treated as
simple variables.

<p class=para>
The <tt class=literal>Env::import()</tt> routine ties environment variables to global Perl
variables with the same names.  By default it ties suitable, existing
environment variables (that is, variables yielded by <tt class=literal>keys %ENV</tt>).
An environmental
variable is considered suitable if its name begins with an alphabetic
character, and if it consists of nothing but alphanumeric characters plus
underscore.

<p class=para>
If you supply arguments when invoking <tt class=literal>use Env</tt>, they are taken to
be a list of environment variables to tie.  It's OK if the variables
don't yet exist.

<p class=para>
After an environment variable is tied, you can use it like a normal variable.
You may access its value:

<div class=programlisting>
<p>
<pre>
@path = split(/:/, $PATH);
</PRE>
</DIV>

<p class=para>
or modify it any way you like:

<div class=programlisting>
<p>
<pre>
$PATH .= ":.";
</PRE>
</DIV>

<p class=para>
To remove a tied environment variable from
the environment, make it the undefined value:

<div class=programlisting>
<p>
<pre>
undef $PATH;
</PRE>
</DIV>

<p class=para>
Note that the corresponding operation performed directly against
<tt class=literal>%ENV</tt> is not <a href="ch03_02.htm">undef</A>, but <a href="ch03_02.htm">delete</A>:

<div class=programlisting>
<p>
<pre>
delete $ENV{PATH};
</PRE>
</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch07-SECT2-AUTOID.15">Exporter--Default Import Method for Modules</A></h3>

<div class=programlisting>
<p>
<pre>
# in module YourModule.pm:
package YourModule;
use Exporter ();
@ISA = qw(Exporter);
@EXPORT = qw(...);              # Symbols to export by default.
@EXPORT_OK = qw(...);           # Symbols to export on request.
%EXPORT_TAGS = (tag =&gt; [...]);  # Define names for sets of symbols.
# in other files that wish to use YourModule:
use YourModule;                 # Import default symbols into my package.
use YourModule qw(...);         # Import listed symbols into my package.
use YourModule ();              # Do not import any symbols!
</PRE>
</DIV>

<p class=para>
<a name="CH07.EXP1"></A><a name="CH07.EXP2"></A><a name="CH07.EXP3"></A>Any module may define a class method called <tt class=literal>import()</tt>.  Perl
automatically calls a module's <tt class=literal>import()</tt> method when processing the
<a href="ch03_02.htm">use</A> statement for the module.  The module itself doesn't have to
define the <tt class=literal>import()</tt> method, though.  The Exporter module implements
a default <tt class=literal>import()</tt> method that many modules choose to inherit
instead.  The Exporter module supplies the customary import semantics,
and any other <tt class=literal>import()</tt> methods will tend to deviate from the
normal import semantics in various (hopefully documented) ways.
Now we'll talk about the normal import semantics.

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-7-SECT-1.14">Specialized import lists</A></h4>

<p class=para>
Ignoring the class name, which is always the first argument to a class
method, the arguments that are passed into the <tt class=literal>import()</tt> method are
known as an <i class=emphasis>import list</I>.  Usually the import list is nothing more than a
list of subroutine or variable names, but occasionally you may want to
get fancy.  If the first entry in an import list begins with
<tt class=literal>!</tt>, <tt class=literal>:</tt>, or <tt class=literal>/</tt>, the list is treated as a
series of specifications that either add to or delete from the list of
names to import.  They are processed left to right.  Specifications are
in the form:

<div class=informaltable>
<p>
<a name="PERL2-CH-7-TAB-14"></A>

<table class=INFORMALTABLE>
<tr class=row>
<th align="left">Symbol</TH>
<th align="left">Meaning</TH>
</TR>
<tr class=row>
<td align="left"><tt class=literal>[!]</tt><tt class=replaceable><i>name</i></tt></TD>
<td align="left">This <tt class=replaceable><i>name</i></tt> only</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>[!]:DEFAULT</tt></TD>
<td align="left">All names in <tt class=literal>@EXPORT</tt></TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>[!]:</tt><tt class=replaceable><i>tag</i></tt></TD>
<td align="left">All names in <tt class=literal>$EXPORT_TAGS{</tt><tt class=replaceable><i>tag</i></tt><tt class=literal>}</tt> anonymous list</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>[!]/</tt><tt class=replaceable><i>pattern</i></tt><tt class=literal>/</tt></TD>
<td align="left">All names in <tt class=literal>@EXPORT</tt> and <tt class=literal>@EXPORT_OK</tt> that match <tt class=replaceable><i>pattern</i></tt></TD>
</TR>
</TABLE>
<p>
</DIV>

<p class=para>
A leading <tt class=literal>!</tt> indicates that matching names should be deleted from the
list of names to import.  If the first specification is a deletion, it
is treated as though preceded by <tt class=literal>:DEFAULT</tt>.  If you just want to import
extra names in addition to the default set, you will still need to
include <tt class=literal>:DEFAULT</tt> explicitly.

<p class=para>
For example, suppose that <i class=emphasis>YourModule.pm</I> says:

<div class=programlisting>
<p>
<pre>
@EXPORT      = qw(A1 A2 A3 A4 A5);
@EXPORT_OK   = qw(B1 B2 B3 B4 B5);
%EXPORT_TAGS = (
    T1 =&gt; [qw(A1 A2 B1 B2)],
    T2 =&gt; [qw(A1 A2 B3 B4)]
);
</PRE>
</DIV>

<p class=para>
Individual names in <tt class=literal>EXPORT_TAGS</tt> must also appear in
<tt class=literal>@EXPORT</tt> or <tt class=literal>@EXPORT_OK</tt>.  Note that you cannot use the
tags directly within either <tt class=literal>@EXPORT</tt> or <tt class=literal>@EXPORT_OK</tt>
(though you could preprocess tags into either of those arrays, and in
fact, the <tt class=literal>export_tags()</tt> and <tt class=literal>export_ok_tags()</tt> functions below
do precisely that).

<p class=para>
An application using YourModule can then say something like this:

<div class=programlisting>
<p>
<pre>
use YourModule qw(:DEFAULT :T2 !B3 A3);
</PRE>
</DIV>

<p class=para>
The <tt class=literal>:DEFAULT</tt> adds in <tt class=literal>A1</tt>, <tt class=literal>A2</tt>, <tt class=literal>A3</tt>,
<tt class=literal>A4</tt>, and <tt class=literal>A5</tt>.  The <tt class=literal>:T2</tt> adds in only <tt class=literal>B3</tt> and
<tt class=literal>B4</tt>, since <tt class=literal>A1</tt> and <tt class=literal>A2</tt> were already added.  The
<tt class=literal>!B3</tt> then deletes <tt class=literal>B3</tt>, and the <tt class=literal>A3</tt> does nothing
because <tt class=literal>A3</tt> was already included.
Other examples include:

<div class=programlisting>
<p>
<pre>
use Socket qw(!/^[AP]F_/ !SOMAXCONN !SOL_SOCKET);
use POSIX  qw(:errno_h :termios_h !TCSADRAIN !/^EXIT/);
</PRE>
</DIV>

<p class=para>
Remember that most patterns (using <tt class=literal>//</tt>) will need to be anchored
with a leading ^, for example, <tt class=literal>/^EXIT/</tt> rather than <tt class=literal>/EXIT/</tt>.

<p class=para>
You can say:

<div class=programlisting>
<p>
<pre>
BEGIN { $Exporter::Verbose=1 }
</PRE>
</DIV>

<p class=para>
in order to see how the
specifications are being processed and what is actually being imported
into modules.

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-7-SECT-1.15">Module version checking</A></h4>

<p class=para>
The Exporter module will convert an attempt to import a number from a
module into a call to <tt class=literal>$module_name-&gt;require_version($value)</tt>.
This can be used to validate that the version of the module being used
is greater than or equal to the required version.  The Exporter module
also supplies a default <tt class=literal>require_version()</tt> method, which checks the
value of <tt class=literal>$VERSION</tt> in the exporting module.

<p class=para>
Since the default <tt class=literal>require_version()</tt> method treats the
<tt class=literal>$VERSION</tt> number as a simple numeric value, it will regard version
1.10 as lower than
1.9.  For this reason it is strongly recommended that the module developer use
numbers
with at least two decimal places; for example, 1.09.

<p class=para>
Prior to release 5.004 or so of Perl, this only worked with modules that
use the Exporter module; in particular, this means that you can't check the
version of a class module that doesn't require the Exporter module.

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-7-SECT-1.16">Managing unknown symbols</A></h4>

<p class=para>
In some situations you may want to prevent certain symbols from being
exported.  Typically this applies to extensions with functions
or constants that may not exist on some systems.

<p class=para>
The names of any symbols that cannot be exported should be listed
in the <tt class=literal>@EXPORT_FAIL</tt> array.

<p class=para>
If a module attempts to import any of these symbols, the Exporter
will give the module an opportunity to handle the situation before
generating an error.  The Exporter will call an <tt class=literal>export_fail()</tt> method
with a list of the failed symbols:

<div class=programlisting>
<p>
<pre>
@failed_symbols = $module_name-&gt;export_fail(@failed_symbols);
</PRE>
</DIV>

<p class=para>
If the <tt class=literal>export_fail()</tt> method returns an empty list, then no error is
recorded and all requested symbols are exported.  If the returned
list is not empty, then an error is generated for each symbol and the
export fails.  The Exporter provides a default <tt class=literal>export_fail()</tt> method that
simply returns the list unchanged.

<p class=para>
Uses for the <tt class=literal>export_fail()</tt> method include giving better error messages
for some symbols and performing lazy architectural checks.  Put more
symbols into <tt class=literal>@EXPORT_FAIL</tt> by default and then take them out if someone
actually tries to use them and an expensive check shows that they are
usable on that platform.

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-7-SECT-1.17">Tag handling utility functions</A></h4>

<p class=para>
Since the symbols listed within <tt class=literal>%EXPORT_TAGS</tt> must also appear in either
<tt class=literal>@EXPORT</tt> or <tt class=literal>@EXPORT_OK</tt>, two utility functions are provided
that allow you to easily add tagged sets of symbols to <tt class=literal>@EXPORT</tt> or
<tt class=literal>@EXPORT_OK:</tt>

<div class=programlisting>
<p>
<pre>
%EXPORT_TAGS = (Bactrian =&gt; [qw(aa bb cc)], Dromedary =&gt; [qw(aa cc dd)]);
</PRE>
</DIV>

<div class=programlisting>
<p>
<pre>
Exporter::export_tags('Bactrian');     # add aa, bb and cc to @EXPORT
Exporter::export_ok_tags('Dromedary'); # add aa, cc and dd to @EXPORT_OK
</PRE>
</DIV>

<p class=para>
Any names that are not tags are added to <tt class=literal>@EXPORT</tt> or
<tt class=literal>@EXPORT_OK</tt> unchanged, but will trigger a warning (with
<b>-w</B>) to avoid misspelt tag names being
silently added to <tt class=literal>@EXPORT</tt> or <tt class=literal>@EXPORT_OK</tt>.
Future versions may regard this as a fatal error.

</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch07-SECT2-AUTOID.16">ExtUtils::Install--Install Files from Here to There</A></h3>

<div class=programlisting>
<p>
<pre>
use ExtUtils::Install;
install($hashref, $verbose, $nonono);
uninstall($packlistfile, $verbose, $nonono);
</PRE>
</DIV>

<p class=para>
<tt class=literal>install()</tt> and <tt class=literal>uninstall()</tt> are specific to
the way ExtUtils::MakeMaker handles the platform-dependent installation
and deinstallation of Perl extensions.  They are not designed as
general-purpose tools.  If you're reading this chapter straight through
(brave soul), you probably want to take a glance at the MakeMaker entry
first.  (Or just skip over everything in the ExtUtils package until you
start writing an Ext.)

<p class=para>
<tt class=literal>install()</tt> takes three arguments:  a reference to a hash, a verbose
switch, and a don't-really-do-it switch.  The hash reference contains a
mapping of directories; each key/value pair is a combination of
directories to be copied.  The key is a directory to copy from, and
the value is a
directory to copy to.  The whole tree below the "from" directory will
be copied, preserving timestamps and permissions.

<p class=para>
There are two keys with a special meaning in the
hash: <tt class=literal>`read`</tt>
and <tt class=literal>`write`</tt>.  After the copying is done, install will write the list of
target files to the file named by <tt class=literal>$hashref-&gt;{write}</tt>.  If there is
another file named by <tt class=literal>$hashref-&gt;{read}</tt>, the contents of this file will
be merged into the written file.  The read and the written file may be
identical, but on the Andrew File System (AFS) it is fairly likely that people are installing to a
different directory than the one where the files later appear.

<p class=para>
<tt class=literal>uninstall()</tt> takes as first argument a file containing filenames
to be unlinked.  The second argument is a verbose switch, the third is
a no-don't-really-do-it-now switch (useful to know what
will happen without actually doing it).

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch07-SECT2-AUTOID.17">ExtUtils::Liblist--Determine Libraries to Use and How to Use Them</A></h3>

<div class=programlisting>
<p>
<pre>
require ExtUtils::Liblist;
ExtUtils::Liblist::ext($potential_libs, $Verbose);
</PRE>
</DIV>

<p class=para>
This utility takes a list of libraries in the form <tt class=literal>-llib1 -llib2
-llib3</tt> and returns lines suitable for inclusion in a Perl
extension <i class=emphasis>Makefile</I> on the current platform.  Extra library paths may be
included with the form <tt class=literal>-L/another/path</tt>.  This will affect the
searches for all subsequent libraries.

<p class=para>
<tt class=literal>ExtUtils::Liblist::ext()</tt> returns a list of four scalar
values, which Makemaker will eventually use in constructing a
<i class=emphasis>Makefile</I>, among other things.  The values are:

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>EXTRALIBS</tt><dd>

<p class=para>
List of libraries that need to be linked with <i class=emphasis>ld</I> (1) when linking a
Perl binary that includes a static extension.  Only those libraries that
actually exist are included.

<p>
<dt class=varlistentry><tt class=literal>LDLOADLIBS</tt><dd>

<p class=para>
List of those libraries that can or must be linked
when creating a shared library using <i class=emphasis>ld</I> (1).  These may be static
or dynamic libraries.

<dt class=varlistentry><tt class=literal>LD_RUN_PATH</tt><dd>

<p class=para>
A colon-separated list of the
directories in <tt class=literal>LDLOADLIBS</tt>.  It is passed as an environment variable
to the process that links the shared library.

<p>
<dt class=varlistentry><tt class=literal>BSLOADLIBS</tt><dd>

<p class=para>
List of those libraries that are needed but can be linked in dynamically
with the DynaLoader at run-time on this platform.  This list is used to
create a <i class=emphasis>.bs</I> (bootstrap) file.  SunOS/Solaris does not need
this because <i class=emphasis>ld</I> (1) records the information (from <tt class=literal>LDLOADLIBS</tt>)
into the object file.</DL>
<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-7-SECT-1.18">Portability</A></h4>

<p class=para>
This module deals with a lot of system dependencies and has quite a
few architecture-specific <b>if</B>s in the code.

</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch07-SECT2-AUTOID.18">ExtUtils::MakeMaker--Create a Makefile for a Perl Extension</A></h3>

<div class=programlisting>
<p>
<pre>
use ExtUtils::MakeMaker;
WriteMakefile( <tt class=replaceable><i>ATTRIBUTE</i></tt> =&gt; <tt class=replaceable><i>VALUE</i></tt>, ... );
# which internally is really more like...
%att = (<tt class=replaceable><i>ATTRIBUTE</i></tt> =&gt; <tt class=replaceable><i>VALUE</i></tt>, ...);
MM-&gt;new(\%att)-&gt;flush;
</PRE>
</DIV>

<p class=para>
<a name="CH07.MM1"></A><a name="CH07.MM2"></A><a name="CH07.MM3"></A><a name="CH07.MM4"></A><a name="CH07.MM5"></A>When you build an extension to Perl, you need to have an appropriate
<i class=emphasis>Makefile</I>[3]
in the extension's source directory.  And
while you could conceivably write one by hand, this would be rather tedious. 
So you'd like a program to write it for you.

<blockquote class=footnote>
<p class=para>[3] 
If you don't know what a
<i class=emphasis>Makefile</I> is, or what the
<i class=emphasis>make</I> (1) program does with one, you
<i class=emphasis>really</I> shouldn't be reading this section.  We will be
assuming that you know what happens when you type a command like
<tt class=literal>make foo</tt>.
</blockquote>
<p class=para>
Originally, this was done using a shell script (actually, one for each
extension) called <i class=emphasis>Makefile.SH</I>, much like the one that
writes the <i class=emphasis>Makefile</I> for Perl itself.  But somewhere along
the line, it occurred to the perl5-porters that, by the time you want to compile
your extensions, there's already a bare-bones version of the Perl executable
called <i class=emphasis>miniperl</I>, if not a fully installed
<i class=emphasis>perl</I>.  And for some strange reason, Perl programmers prefer
programming in Perl to programming in shell.  So they wrote MakeMaker, just so
that you can write <i class=emphasis>Makefile.PL</I> instead of
<i class=emphasis>Makefile.SH</I>.

<p class=para>
MakeMaker isn't a program; it's a module (or it wouldn't be in this chapter).
The module provides the routines you need; you just need to <a href="ch03_02.htm">use</A> the module, and then call the routines.  As with any
programming job, there are many degrees of freedom; but your typical
<i class=emphasis>Makefile.PL</I> is pretty simple.  For example, here's
<i class=emphasis>ext/POSIX/Makefile.PL</I> from the Perl distribution's POSIX
extension (which is by no means a trivial extension):

<div class=programlisting>
<p>
<pre>
use ExtUtils::MakeMaker;
WriteMakefile(
    NAME         =&gt; 'POSIX',
    LIBS         =&gt; ["-lm -lposix -lcposix"],
    MAN3PODS     =&gt; ' ',    # Pods will be built by installman.
    XSPROTOARG   =&gt; '-noprototypes',       # XXX remove later?
    VERSION_FROM =&gt; 'POSIX.pm', 
);
</PRE>
</DIV>

<p class=para>
Several things are apparent from this example, but the most important is
that the <tt class=literal>WriteMakefile()</tt> function uses named parameters.  This
means that you can pass many potential parameters, but you're only required to
pass the ones you want to be different from the default values.  (And when we
say "many", we mean "many"--there are about 75 of them.  See the
Attributes section later.)

<p class=para>
As the synopsis above indicates, the <tt class=literal>WriteMakefile()</tt> function
actually constructs an object.  This object has attributes that are set
from various sources, including the parameters you pass to the function.
It's this object that actually writes your <i class=emphasis>Makefile</I>,
meshing together the demands of your extension with the demands of the
architecture on which the extension is being installed.  Like many
craftily crafted objects, this MakeMaker object delegates as much of its
work as possible to various other subroutines and methods.  Many of
these may be overridden in your <i class=emphasis>Makefile.PL</I> if you need to do some
fine tuning.  (Generally you don't.)

<p class=para>
But let's not lose track of the goal, which is to write a <i class=emphasis>Makefile</I>
that will know how to do anything to your extension that needs doing.
Now as you can imagine, the <i class=emphasis>Makefile</I> that MakeMaker writes is
quite, er, full-featured.  It's easy to get lost in all the
details.  If you look at the POSIX <i class=emphasis>Makefile</I> generated
by the bit of code above, you will find a file containing about 122
macros and 77 targets.  You will want to go off into a corner and curl
up into a little ball, saying, "Never mind, I didn't really want to
know."

<p class=para>
Well, the fact of the matter is, you really <i class=emphasis>don't</I> want to know,
nor do you have to.  Most of these items take care of themselves--that's
what MakeMaker is there for, after all.  We'll lay out the various
attributes and targets for you, but you can just pick and choose, like
in a cafeteria.  We'll talk about the <i class=emphasis>make</I> targets first, because they're
the actions you eventually want to perform, and then work backward
to the macros and attributes that feed the targets.

<p class=para>
But before we do that, you need to know just a few more architectural
features of MakeMaker to make sense of some of the things we'll say.
The targets at the end of your <i class=emphasis>Makefile</I> depend on the macro
definitions that are interpolated into them.  Those macro definitions in
turn come from any of several places.  Depending on how you count, there
are about five sources of information for these attributes.  Ordered by
increasing precedence and (more or less) decreasing permanence, they are:

<p>
<ul class=itemizedlist>
<li class=listitem>Platform-specific values in Perl's Config module, provided by
the <i class=emphasis>Configure</I> program that was run when Perl was installed on this machine.

<p>
<li class=listitem>The <tt class=literal>WriteMakefile()</tt> function call arguments in <i class=emphasis>Makefile.Pl</I>,
supplied by the extension writer.  (You saw some of those above.)

<p>
<li class=listitem>Platform-specific hints in the extension's <i class=emphasis>hints/</I> directory, also
provided by extension writer.  We'll talk about those later.

<p>
<li class=listitem>Overriding values from the command line for <i class=emphasis>Makefile.PL</I> script,
supplied by the person who runs the script.  These look like <tt class=literal>KEY=VALUE</tt>.

<p>
<li class=listitem>Overriding values from the command line for <i class=emphasis>make</I> itself,
supplied by the person who runs the <i class=emphasis>make</I>.  These also look like <tt class=literal>KEY=VALUE</tt>.

<p>
</UL>
<p class=para>
The first four of these turn into attributes of the object we mentioned,
and are eventually written out as macro definitions in your
<i class=emphasis>Makefile</I>.  In most cases, the names of the values are consistent
from beginning to end.  (Except that the Config database keeps the names
in lowercase, as they come from Perl's <i class=emphasis>config.sh</I> file.  The names
are translated to uppercase when they become attributes of the object.)
In any case, we'll tend to use the term <i class=emphasis>attributes</I> to mean both
attributes and the <i class=emphasis>Makefile</I> macros derived from them.

<p class=para>
The <i class=emphasis>Makefile.PL</I> and the <i class=emphasis>hints</I> may also provide overriding
methods for the object, if merely changing an attribute isn't good
enough.

<p class=para>
The hints files are expected to be named
like their counterparts in <i class=emphasis>PERL_SRC/hints</I>, but with a <i class=emphasis>.pl</I>
filename extension (for example, <i class=emphasis>next_3_2.pl</I> ), because the file
consists of Perl code to be evaluated.  Apart from that, the rules
governing which hintsfile is chosen are the same as in <i class=emphasis>Configure</I>.
The hintsfile is <a href="ch03_02.htm">eval</A>ed within a routine that is a method of our
MakeMaker object, so if you want to
override or create an attribute, you would say something like:

<div class=programlisting>
<p>
<pre>
$self-&gt;{LIBS} = ['-ldbm -lucb -lc'];
</PRE>
</DIV>

<p class=para>
By and large, if your <i class=emphasis>Makefile</I> isn't doing what you want, you just
trace back the name of the misbehaving attribute to its source, and either
change it there or override it downstream.

<p class=para>
Extensions may be built using the contents of either the Perl source
directory tree or the installed Perl library.  The recommended way
is to build extensions after you have run <i class=emphasis>make install</I> on Perl
itself.  You can then build your extension in any directory on your hard disk that is not
below the Perl source tree.  The support for extensions below the
<i class=emphasis>ext/</I>
directory of the Perl distribution is only good for the standard
extensions that come with Perl.

<p class=para>
If an extension is being built below the <i class=emphasis>ext/</I> directory of
the Perl source, then MakeMaker will set <tt class=literal>PERL_SRC</tt>
automatically (usually to <tt class=literal>../..</tt>).  If
<tt class=literal>PERL_SRC</tt> is defined and the extension is recognized as a
standard extension, then other variables default to the following:

<div class=programlisting>
<p>
<pre>
PERL_INC     = PERL_SRC
PERL_LIB     = PERL_SRC/lib
PERL_ARCHLIB = PERL_SRC/lib
INST_LIB     = PERL_LIB
INST_ARCHLIB = PERL_ARCHLIB
</PRE>
</DIV>

<p class=para>
If an extension is being built away from the Perl source, then MakeMaker
will leave <tt class=literal>PERL_SRC</tt> undefined and default to using the installed copy
of the Perl library.  The other variables default to the following:

<div class=programlisting>
<p>
<pre>
PERL_INC     = $archlibexp/CORE
PERL_LIB     = $privlibexp
PERL_ARCHLIB = $archlibexp
INST_LIB     = ./blib/lib
INST_ARCHLIB = ./blib/arch
</PRE>
</DIV>

<p class=para>
If Perl has not yet been installed, then <tt class=literal>PERL_SRC</tt> can be defined as
an override on the command line.

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-7-SECT-1.19">Targets</A></h4>

<p class=para>
Far and away the most commonly used <i class=emphasis>make</I> targets are those used by
the installer to install the extension.  So we aim to make the normal
installation very easy:

<div class=programlisting>
<p>
<pre>
perl Makefile.PL  # generate the <i class=emphasis>Makefile</I>
make              # compile the extension
make test         # test the extension
make install      # install the extension
</PRE>
</DIV>

<p class=para>
This assumes that the installer has dynamic linking available.  If not,
a couple of additional commands are also necessary:

<div class=programlisting>
<p>
<pre>
make perl         # link a new <i class=emphasis>perl</I> statically with this extension
make inst_perl    # install that new <i class=emphasis>perl</I> appropriately
</PRE>
</DIV>

<p class=para>
Other interesting targets in the generated <i class=emphasis>Makefile</I> are:

<div class=programlisting>
<p>
<pre>
make config       # check whether the <i class=emphasis>Makefile</I> is up-to-date
make clean        # delete local temp files (<tt class=replaceable><i>Makefile</i></tt> gets renamed)
make realclean    # delete derived files (including <tt class=replaceable><i>./blib</i></tt>)
make ci           # check in all files in the <i class=emphasis>MANIFEST</I> file
make dist         # see the "Distribution Support" section below
</PRE>
</DIV>

<p class=para>
Now we'll talk about some of these commands, and how each of them is
related to MakeMaker.  So we'll not only be talking about things that
happen when you invoke the <i class=emphasis>make</I> target, but also about what
MakeMaker has to do to generate that <i class=emphasis>make</I> target.  So brace
yourself for some temporal whiplash.

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-7-SECT-1.20">Running MakeMaker</A></h4>

<p class=para>
This command is the one most closely related to MakeMaker because it's the
one in which you actually run MakeMaker.  No temporal whiplash here.
As we mentioned earlier, some of the 
default attribute values may be
overridden by adding arguments of the form <tt class=literal>KEY=VALUE</tt>.  For
example:

<div class=programlisting>
<p>
<pre>
perl Makefile.PL PREFIX=/tmp/myperl5
</PRE>
</DIV>

<p class=para>
To get a more detailed view of what MakeMaker is doing, say:

<div class=programlisting>
<p>
<pre>
perl Makefile.PL verbose
</PRE>
</DIV>

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-7-SECT-1.21">Making whatever is needed</A></h4>

<p class=para>
A <i class=emphasis>make</I> command without arguments performs any compilation needed
and puts any generated files into staging directories that are named by the
attributes <tt class=literal>INST_LIB</tt>, <tt class=literal>INST_ARCHLIB</tt>, <tt class=literal>INST_EXE</tt>,
<tt class=literal>INST_MAN1DIR</tt>, and <tt class=literal>INST_MAN3DIR</tt>.
These directories default to
something below <i class=emphasis>.&nbsp;/blib</I> if you are <i class=emphasis>not</I> building below the
Perl source directory.  If you <i class=emphasis>are</I> building below the Perl source,
<tt class=literal>INST_LIB</tt> and <tt class=literal>INST_ARCHLIB</tt> default to <i class=emphasis>..&nbsp;/..&nbsp;/lib</I>,
and <tt class=literal>INST_EXE</tt> is not defined.

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-7-SECT-1.22">Running tests</A></h4>

<p class=para>
The goal of this command is to run any regression tests supplied with the
extension, so MakeMaker checks for the existence of a file named
<i class=emphasis>test.pl</I> in the current directory and, if it exists, adds
commands to the <tt class=literal>test</tt> target of the
<i class=emphasis>Makefile</I> that will execute the script with the proper set
of Perl <b>-I</B> options (since the 
files haven't been installed into their final location yet).

<p class=para>
MakeMaker also checks for any files matching
<tt class=literal>glob(`t/*.t`)</tt>.  It will add commands to the
<tt class=literal>test</tt> target that execute all matching files via the
Test::Harness module with the <b>-I</B> switches
set correctly.  If you pass <tt class=literal>TEST_VERBOSE=1</tt>, the
<tt class=literal>test</tt> target will run the tests verbosely.

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-7-SECT-1.23">Installing files</A></h4>

<p class=para>
Once the installer has tested the extension, the various generated files
need to get put into their final resting places.  The <tt class=literal>install</tt>
target copies the files found below each of the <tt class=literal>INST_*</tt>
directories to their <tt class=literal>INSTALL*</tt> counterparts.

<div class=informaltable>
<p>
<a name="PERL2-CH-7-TAB-14.5"></A>

<table class=INFORMALTABLE>
<tr class=row>
<td align="left"><tt class=literal>INST_LIB</tt></TD>
<td align="left">-></TD>
<td align="LEFT"><tt class=literal>INSTALLPRIVLIB</tt>[1]<tt class=literal>or
INSTALLSITELIB</tt>[2]</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>INST_ARCHLIB</tt></TD>
<td align="left">-></TD>
<td align="LEFT"><tt class=literal>INSTALLARCHLIB</tt>[1]<tt class=literal>or INSTALLSITEARCH</tt>[2]</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>INST_EXE</tt></TD>
<td align="left">-></TD>
<td align="LEFT"><tt class=literal>INSTALLBIN</tt></TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>INST_MAN1DIR</tt></TD>
<td align="left">-></TD>
<td align="LEFT"><tt class=literal>INSTALLMAN1DIR</tt></TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>INST_MAN3DIR</tt></TD>
<td align="left">-></TD>
<td align="LEFT"><tt class=literal>INSTALLMAN3DIR</tt></TD>
</TR>
<tr>
<td colspan=3>
<p>
<b>Footnotes:</b>
<p>
<blockquote>
[1] <p class=para>
if <tt class=literal>INSTALLDIRS</tt> set to
"<tt class=literal>perl</tt>"[2] <p class=para>
if
<tt class=literal>INSTALLDIRS</tt> set to
"<tt class=literal>site</tt>"
</blockquote></td></tr>
</TABLE>
<p>
</DIV>

<p class=para>
The <tt class=literal>INSTALL*</tt> attributes in turn default to their <tt class=literal>%Config</tt>
counterparts, <tt class=literal>$Config{installprivlib}</tt>,
<tt class=literal>$Config{installarchlib}</tt>, and so on.

<p class=para>
If you don't set <tt class=literal>INSTALLARCHLIB</tt> or <tt class=literal>INSTALLSITEARCH</tt>,
MakeMaker will
assume you want them to be subdirectories of <tt class=literal>INSTALLPRIVLIB</tt>
and <tt class=literal>INSTALLSITELIB</tt>,
respectively.  The exact relationship is determined by <i class=emphasis>Configure</I>.  But
you can usually just go with the defaults for all these attributes.

<p class=para>
The <tt class=literal>PREFIX</tt> attribute can be used to redirect all the <tt class=literal>INSTALL*</tt>
attributes in one go.  Here's the quickest way to install a module in a
nonstandard place:

<div class=programlisting>
<p>
<pre>
perl Makefile.PL PREFIX=~
</PRE>
</DIV>

<p class=para>
The value you specify for <tt class=literal>PREFIX</tt> replaces one or more
leading pathname components in all <tt class=literal>INSTALL*</tt> attributes.  The
prefix to be replaced is determined by the value of
<tt class=literal>$Config{prefix}</tt>, which typically has a value like <i class=emphasis>/usr</I>.
(Note that the tilde expansion above is done by MakeMaker, not by
<i class=emphasis>perl</I> or <i class=emphasis>make</I>.)

<p class=para>
If the user has superuser privileges and is not working under the
Andrew File System (AFS) or relatives, then the defaults for
<tt class=literal>INSTALLPRIVLIB</tt>, <tt class=literal>INSTALLARCHLIB</tt>, <tt class=literal>INSTALLBIN</tt>, and so
on should be appropriate.

<p class=para>
By default, <i class=emphasis>make install</I> writes some documentation of what has been
done into the file given by <tt class=literal>$(INSTALLARCHLIB)/perllocal.pod</tt>.
This feature can be bypassed by calling <i class=emphasis>make pure_install</I>.

<p class=para>
If you are using AFS, you must
specify the installation directories, since these most
probably have changed since Perl itself was installed.
Do this by issuing these commands:

<div class=programlisting>
<p>
<pre>
perl Makefile.PL INSTALLSITELIB=/afs/here/today
    INSTALLBIN=/afs/there/now INSTALLMAN3DIR=/afs/for/manpages
make
</PRE>
</DIV>

<p class=para>
Be careful to repeat this procedure every time you recompile an
extension, unless you are sure the AFS installation directories are
still valid.

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-7-SECT-1.24">Static linking of a new Perl binary</A></h4>

<p class=para>
The steps above are sufficient on a system supporting dynamic loading.
On systems that do not support dynamic loading, however, the extension
has to be linked together statically with everything else you might want
in your <i class=emphasis>perl</I> executable.  MakeMaker supports the linking process
by creating appropriate targets in the <i class=emphasis>Makefile</I>.  If you say:

<div class=programlisting>
<p>
<pre>
make perl
</PRE>
</DIV>

<p class=para>
it will produce a new <i class=emphasis>perl</I> binary in the current directory with
all extensions linked in that can be found in <tt class=literal>INST_ARCHLIB</tt>,
<tt class=literal>SITELIBEXP</tt>, and <tt class=literal>PERL_ARCHLIB</tt>.  To do that, MakeMaker
writes a new <i class=emphasis>Makefile</I>&nbsp;; on UNIX it is called <i class=emphasis>Makefile.aperl</I>,
but the name may be system-dependent.  When you want to force the
creation of a new <i class=emphasis>perl</I>, we recommend that you delete this
<i class=emphasis>Makefile.aperl</I> so the directories are searched for linkable
libraries again.

<p class=para>
The binary can be installed in the directory where Perl normally
resides on your machine with:

<div class=programlisting>
<p>
<pre>
make inst_perl
</PRE>
</DIV>

<p class=para>
To produce a Perl binary with a different filename than <i class=emphasis>perl</I>, either say:

<div class=programlisting>
<p>
<pre>
perl Makefile.PL MAP_TARGET=myperl
make myperl
make inst_perl
</PRE>
</DIV>

<p class=para>
or say:

<div class=programlisting>
<p>
<pre>
perl Makefile.PL
make myperl MAP_TARGET=myperl
make inst_perl MAP_TARGET=myperl
</PRE>
</DIV>

<p class=para>
In either case, you will be asked to confirm the invocation of the
<tt class=literal>inst_perl</tt> target, since this invocation is likely to overwrite
your existing Perl binary in <tt class=literal>INSTALLBIN</tt>.

<p class=para>
By default <i class=emphasis>make inst_perl</I> documents what has been
done in the file given by <tt class=literal>$(INSTALLARCHLIB)/perllocal.pod</tt>.  This
behavior can be bypassed by calling <i class=emphasis>make pure_inst_perl</I>.

<p class=para>
Sometimes you might want to build a statically linked Perl even though
your system supports dynamic loading.  In this case you may explicitly
set the linktype:

<div class=programlisting>
<p>
<pre>
perl Makefile.PL LINKTYPE=static
</PRE>
</DIV>

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-7-SECT-1.25">Attributes you can set</A></h4>

<p class=para>
The following attributes can be specified as arguments to
<tt class=literal>WriteMakefile()</tt> or as <tt class=literal>NAME=VALUE</tt> pairs on the command
line.  We give examples below in the form they would appear in your
<i class=emphasis>Makefile.PL</I>, that is, as though passed as a named parameter to
<tt class=literal>WriteMakefile()</tt> (including the comma that comes after it).

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>C</tt>      <dd>

<p class=para>
A reference to an array of *<i class=emphasis>.c</I> filenames.  It's initialized by doing a
directory scan and by derivation from the values of the <tt class=literal>XS</tt>
attribute hash.  This is not currently used by MakeMaker but may be
handy in <i class=emphasis>Makefile.PL</I>s.

<p>
<dt class=varlistentry><tt class=literal>CONFIG</tt><dd>

<p class=para>
An array reference containing a list of attributes to fetch from
<tt class=literal>%Config</tt>.  For example:

<div class=programlisting>
<p>
<pre>
CONFIG =&gt; [qw(archname manext)],
</PRE>
</DIV>

<p class=para>
defines
<tt class=literal>ARCHNAME</tt> and <tt class=literal>MANEXT</tt> from <i class=emphasis>config.sh</I>.  MakeMaker will
automatically add the following values to <tt class=literal>CONFIG</tt>:

<div class=programlisting>
<p>
<pre>
ar            dlext        ldflags     ranlib
cc            dlsrc        libc        sitelibexp
cccdlflags    ld           lib_ext     sitearchexp
ccdlflags     lddlflags    obj_ext     so
</PRE>
</DIV>

<p>
<dt class=varlistentry><tt class=literal>CONFIGURE</tt><dd>

<p class=para>
A reference to a subroutine returning a hash reference.  The
hash may contain further attributes, for example, <tt class=literal>{LIBS =&gt; ...}</tt>,
that have to be determined by some evaluation method.  Be careful,
because any attributes defined this way will override hints and
<tt class=literal>WriteMakefile( )</tt> parameters (but not command-line arguments).

<p>
<dt class=varlistentry><tt class=literal>DEFINE</tt><dd>

<p class=para>
An attribute containing additional defines, such as <tt class=literal>-DHAVE_UNISTD_H</tt>.

<p>
<dt class=varlistentry><tt class=literal>DIR</tt><dd>

<p class=para>
A reference to an array of subdirectories containing
<i class=emphasis>Makefile.PL</I>s.  For example, SDBM_FILE has:

<div class=programlisting>
<p>
<pre>
DIR =&gt; ['sdbm'],
</PRE>
</DIV>

<p class=para>
MakeMaker will automatically do recursive MakeMaking if subdirectories
contain <i class=emphasis>Makefile.PL</I> files.  A separate MakeMaker class is
generated for each subdirectory, so each MakeMaker object can override
methods using the fake <tt class=literal>MY::</tt> class (see below) without
interfering with other MakeMaker objects.  You don't even need a
<i class=emphasis>Makefile.PL</I> in the top level directory if you pass one in via
<b>-M</B> and <b>-e</B>:

<div class=programlisting>
<p>
<pre>
perl -MExtUtils::MakeMaker -e 'WriteMakefile()'
</PRE>
</DIV>

<p>
<dt class=varlistentry><tt class=literal>DISTNAME</tt><dd>

<p class=para>
Your name for distributing the package (by <i class=emphasis>tar</I> file).  This defaults to
<tt class=literal>NAME</tt> below.

<p>
<dt class=varlistentry><tt class=literal>DL_FUNCS</tt><dd>

<p class=para>
A reference to a hash of symbol names for routines to be made available
as universal symbols.  Each key/value pair consists of the package name
and an array of routine names in that package.  This attribute is used
only under AIX (export lists) and VMS (linker options) at present.  The
routine names supplied will be expanded in the same way as <tt class=literal>XSUB</tt>
names are expanded by the <tt class=literal>XS</tt> attribute.

<p class=para>
The default key/value pair
looks like this:

<div class=programlisting>
<p>
<pre>
"$PKG" =&gt; ["boot_$PKG"]
</PRE>
</DIV>

<p class=para>
For a pair of packages named RPC and NetconfigPtr, you might, for
example, set it to this:

<div class=programlisting>
<p>
<pre>
DL_FUNCS =&gt; {
    RPC          =&gt; [qw(boot_rpcb rpcb_gettime getnetconfigent)],
    NetconfigPtr =&gt; ['DESTROY'],
},
</PRE>
</DIV>

<p>
<dt class=varlistentry><tt class=literal>DL_VARS</tt><dd>

<p class=para>
An array of symbol names for variables to be made available as
universal symbols.  It's used only under AIX (export lists) and VMS
(linker options) at present.  Defaults to <tt class=literal>[]</tt>.  A typical
value might look like this:

<div class=programlisting>
<p>
<pre>
DL_VARS =&gt; [ qw( Foo_version Foo_numstreams Foo_tree ) ],
</PRE>
</DIV>

<p>
<dt class=varlistentry><tt class=literal>EXE_FILES</tt><dd>

<p class=para>
A reference to an array of executable files.  The files will be copied to the
<tt class=literal>INST_EXE</tt> directory.  A <i class=emphasis>make realclean</I> command will delete
them from there again.

<p>
<dt class=varlistentry><tt class=literal>FIRST_MAKEFILE</tt><dd>

<p class=para>
The name of the <i class=emphasis>Makefile</I> to be produced.  Defaults to the contents
of <tt class=literal>MAKEFILE</tt>, but can be overridden.  This is used for the second
<i class=emphasis>Makefile</I> that will be produced for the <tt class=literal>MAP_TARGET</tt>.

<p>
<dt class=varlistentry><tt class=literal>FULLPERL</tt><dd>

<p class=para>
A Perl binary able to run this extension.

<p>
<dt class=varlistentry><tt class=literal>H</tt>      <dd>

<p class=para>
A reference to an array of *<i class=emphasis>.h</I> filenames.  Similar to <tt class=literal>C</tt>.

<p>
<dt class=varlistentry><tt class=literal>INC</tt><dd>

<p class=para>
Directories containing include files, in <b>-I</B> form.  For example:

<div class=programlisting>
<p>
<pre>
INC =&gt; "-I/usr/5include -I/path/to/inc",
</PRE>
</DIV>

<p>
<dt class=varlistentry><tt class=literal>INSTALLARCHLIB</tt><dd>

<p class=para>
Used by <i class=emphasis>make install</I>, which copies files from
<tt class=literal>INST_ARCHLIB</tt> to this directory if
<tt class=literal>INSTALLDIRS</tt> is set to "<tt class=literal>perl</tt>".

<dt class=varlistentry><tt class=literal>INSTALLBIN</tt><dd>

<p class=para>
Used by <i class=emphasis>make install</I>, which copies files from
<tt class=literal>INST_EXE</tt> to this directory.

<p>
<dt class=varlistentry><tt class=literal>INSTALLDIRS</tt><dd>

<p class=para>
Determines which of the two sets of installation directories to
choose: <i class=emphasis>installprivlib</I> and <i class=emphasis>installarchlib</I> versus
<i class=emphasis>installsitelib</I> and <i class=emphasis>installsitearch</I>.  The first pair is chosen
with <tt class=literal>INSTALLDIRS=perl</tt>, the second with <tt class=literal>INSTALLDIRS=site</tt>.
The default is "<tt class=literal>site</tt>".

<p>
<dt class=varlistentry><tt class=literal>INSTALLMAN1DIR</tt><dd>

<p class=para>
This directory gets the command manpages at <i class=emphasis>make
install</I> time. It defaults to
<tt class=literal>$Config{installman1dir}</tt>.

<p>
<dt class=varlistentry><tt class=literal>INSTALLMAN3DIR</tt><dd>

<p class=para>
This directory gets the library manpages at <i class=emphasis>make
install</I> time. It defaults to
<tt class=literal>$Config{installman3dir}</tt>.

<p>
<dt class=varlistentry><tt class=literal>INSTALLPRIVLIB</tt><dd>

<p class=para>
Used by <i class=emphasis>make install</I>, which copies files from
<tt class=literal>INST_LIB</tt> to this directory if <tt class=literal>INSTALLDIRS</tt>
is set to "<tt class=literal>perl</tt>".

<p>
<dt class=varlistentry><tt class=literal>INSTALLSITELIB</tt><dd>

<p class=para>
Used by <i class=emphasis>make install</I>, which copies files from
<tt class=literal>INST_LIB</tt> to this directory if <tt class=literal>INSTALLDIRS</tt>
is set to "<tt class=literal>site</tt>" (default).

<p>
<dt class=varlistentry><tt class=literal>INSTALLSITEARCH</tt><dd>

<p class=para>
Used by <i class=emphasis>make install</I>, which copies files from
<tt class=literal>INST_ARCHLIB</tt> to this directory if
<tt class=literal>INSTALLDIRS</tt> is set to "<tt class=literal>site</tt>"
(default).

<p>
<dt class=varlistentry><tt class=literal>INST_ARCHLIB</tt><dd>

<p class=para>
Same as <tt class=literal>INST_LIB</tt>, but for architecture-dependent files.

<p>
<dt class=varlistentry><tt class=literal>INST_EXE</tt><dd>

<p class=para>
Directory where executable scripts should be staged during running of
<i class=emphasis>make</I>.  Defaults to <tt class=literal>./blib/bin</tt>, just to
have a dummy location during testing.  <i class=emphasis>make install</I> will
copy the files in <tt class=literal>INST_EXE</tt> to <tt class=literal>INSTALLBIN</tt>.

<p>
<dt class=varlistentry><tt class=literal>INST_LIB</tt><dd>

<p class=para>
Directory where we put library files of this extension while building
it.

<p>
<dt class=varlistentry><tt class=literal>INST_MAN1DIR</tt><dd>

<p class=para>
Directory to hold the command manpages at <i class=emphasis>make</I> time.

<p>
<dt class=varlistentry><tt class=literal>INST_MAN3DIR</tt><dd>

<p class=para>
Directory to hold the library manpages at <i class=emphasis>make</I> time

<p>
<dt class=varlistentry><tt class=literal>LDFROM</tt><dd>

<p class=para>
Defaults to <tt class=literal>$(OBJECT)</tt> and is used in the <i class=emphasis>ld</I> (1) command to specify
what files to link/load from.  (Also see <tt class=literal>dynamic_lib</tt> later for how to
specify <i class=emphasis>ld</I> flags.)

<dt class=varlistentry><tt class=literal>LIBPERL_A</tt><dd>

<p class=para>
The filename of the Perl library that will be used together with this
extension.  Defaults to <i class=emphasis>libperl.a</I>.

<p>
<dt class=varlistentry><tt class=literal>LIBS</tt><dd>

<p class=para>
An anonymous array of alternative library
specifications to be searched for (in order) until
at least one library is found. 

<p class=para>
For example:

<div class=programlisting>
<p>
<pre>
LIBS =&gt; ["-lgdbm", "-ldbm -lfoo", "-L/path -ldbm.nfs"],
</PRE>
</DIV>

<p class=para>
Note that any element of the array
contains a complete set of arguments for the <i class=emphasis>ld</I>
command.  So do not specify:

<div class=programlisting>
<p>
<pre>
LIBS =&gt; ["-ltcl", "-ltk", "-lX11"],
</PRE>
</DIV>

<p class=para>
See <i class=emphasis>NDBM_File/Makefile.PL</I> for an example where an array is needed.  If
you specify a scalar as in:

<div class=programlisting>
<p>
<pre>
LIBS =&gt; "-ltcl -ltk -lX11",
</PRE>
</DIV>

<p class=para>
MakeMaker will turn it into an array with one element.

<p>
<dt class=varlistentry><tt class=literal>LINKTYPE</tt><dd>

<p class=para>
"<tt class=literal>static</tt>" or
"<tt class=literal>dynamic</tt>" (the latter is the default unless
<tt class=literal>usedl=undef</tt> in <i class=emphasis>config.sh</I>).  Should only
be used to force static linking.  (Also see <tt class=literal>linkext</tt>, later in
this chapter).

<p>
<dt class=varlistentry><tt class=literal>MAKEAPERL</tt><dd>

<p class=para>
Boolean that tells MakeMaker to include the rules for
making a Perl binary. This is handled automatically as a switch by
MakeMaker. The user normally does not need it.

<p>
<dt class=varlistentry><tt class=literal>MAKEFILE</tt><dd>

<p class=para>
The name of the <i class=emphasis>Makefile</I> to be produced.

<p>
<dt class=varlistentry><tt class=literal>MAN1PODS</tt><dd>

<p class=para>
A reference to a hash of POD-containing files.  MakeMaker will default
this to all <tt class=literal>EXE_FILES</tt> files that include POD directives.  The
files listed here will be converted to manpages and installed as
requested at <i class=emphasis>Configure</I> time.

<p>
<dt class=varlistentry><tt class=literal>MAN3PODS</tt><dd>

<p class=para>
A reference to a hash of <i class=emphasis>.pm</I> and <i class=emphasis>.pod</I> files.  MakeMaker will
default this to all <i class=emphasis>.pod</I> and any <i class=emphasis>.pm</I> files that include
POD directives.  The files listed here will be converted to manpages
and installed as requested at <i class=emphasis>Configure</I> time.

<p>
<dt class=varlistentry><tt class=literal>MAP_TARGET</tt><dd>

<p class=para>
If it is intended that a new Perl binary be produced, this variable
holds the name for that binary.  Defaults to <i class=emphasis>perl</I>.

<p>
<dt class=varlistentry><tt class=literal>MYEXTLIB</tt><dd>

<p class=para>
If the extension links to a library that it builds, set this to the
name of the library (see SDBM_File).

<p>
<dt class=varlistentry><tt class=literal>NAME</tt><dd>

<p class=para>
Perl module name for this extension (for example, <tt class=literal>DBD::Oracle</tt>).
This will default to the directory name, but should really be explicitly
defined in the <i class=emphasis>Makefile.PL</I>.

<p>
<dt class=varlistentry><tt class=literal>NEEDS_LINKING</tt><dd>

<p class=para>
MakeMaker will figure out whether an extension contains linkable code
anywhere down the directory tree, and will set this variable
accordingly.  But you can speed it up a very little bit if you define
this Boolean variable yourself.

<p>
<dt class=varlistentry><tt class=literal>NOECHO</tt><dd>

<p class=para>
Governs <i class=emphasis>make</I>&nbsp;'s <tt class=literal>@</tt> (echoing) feature.  By setting <tt class=literal>NOECHO</tt>
to an empty string, you can generate a
<i class=emphasis>Makefile</I> that echos all commands.  Mainly used in debugging MakeMaker
itself.

<p>
<dt class=varlistentry><tt class=literal>NORECURS</tt><dd>

<p class=para>
A Boolean that inhibits the automatic descent into subdirectories (see
<tt class=literal>DIR</tt> above).  For example:

<div class=programlisting>
<p>
<pre>
NORECURS =&gt; 1,
</PRE>
</DIV>

<p>
<dt class=varlistentry><tt class=literal>OBJECT</tt><dd>

<p class=para>
A string containing a list of object files, defaulting to
<tt class=literal>$(BASEEXT)$(OBJ_EXT)</tt>.  But it can be a long string containing
all object files.  For example:

<div class=programlisting>
<p>
<pre>
OBJECT =&gt; "tkpBind.o tkpButton.o tkpCanvas.o",
</PRE>
</DIV>

<p>
<dt class=varlistentry><tt class=literal>PERL</tt><dd>

<p class=para>
Perl binary for tasks that can be done by <i class=emphasis>miniperl</I>.

<p>
<dt class=varlistentry><tt class=literal>PERLMAINCC</tt><dd>

<p class=para>
The command line that is able to compile <i class=emphasis>perlmain.c</I>.  Defaults
to <tt class=literal>$(CC)</tt>.

<p>
<dt class=varlistentry><tt class=literal>PERL_ARCHLIB</tt><dd>

<p class=para>
Same as <tt class=literal>PERL_LIB</tt> for architecture-dependent files.

<p>
<dt class=varlistentry><tt class=literal>PERL_LIB</tt><dd>

<p class=para>
The directory containing the Perl library to use.

<p>
<dt class=varlistentry><tt class=literal>PERL_SRC</tt><dd>

<p class=para>
The directory containing the Perl source code.  Use of this should be
avoided, since it may be undefined.

<p>
<dt class=varlistentry><tt class=literal>PL_FILES</tt><dd>

<p class=para>
A reference to hash of files to be processed as Perl programs.  By default
MakeMaker will turn the names of any *<i class=emphasis>.PL</I> files it finds (except
<i class=emphasis>Makefile.PL</I>) into keys, and use the basenames of these files as values.
For example:

<div class=programlisting>
<p>
<pre>
PL_FILES =&gt; {'whatever.PL' =&gt; 'whatever'},
</PRE>
</DIV>

<p class=para>
This turns into a Makefile entry resembling:

<div class=programlisting>
<p>
<pre>
all :: whatever
whatever :: whatever.PL
        $(PERL) -I$(INST_ARCHLIB) -I$(INST_LIB) \
                -I$(PERL_ARCHLIB) -I$(PERL_LIB) whatever.PL
</PRE>
</DIV>

<p class=para>
You'll note that there's no I/O redirection into <i class=emphasis>whatever</I> there.
The *<i class=emphasis>.PL</I> files are expected to produce output to the target files
themselves.

<p>
<dt class=varlistentry><tt class=literal>PM</tt>      <dd>

<p class=para>
A reference to a hash of <i class=emphasis>.pm</I> files and
<i class=emphasis>.pl</I> files to be installed. For example:

<div class=programlisting>
<p>
<pre>
PM =&gt; {'name_of_file.pm' =&gt; '$(INST_LIBDIR)/install_as.pm'},
</PRE>
</DIV>

<p class=para>
By default this includes *<i class=emphasis>.pm</I> and
*<i class=emphasis>.pl</I>.  If a <i class=emphasis>lib/</I> subdirectory exists
and is not listed in <tt class=literal>DIR</tt> (above) then any
*<i class=emphasis>.pm</I> and *<i class=emphasis>.pl</I> files it contains will
also be included by default.  Defining <tt class=literal>PM</tt> in the
<i class=emphasis>Makefile.PL</I> will override <tt class=literal>PMLIBDIRS</tt>.

<p>
<dt class=varlistentry><tt class=literal>PMLIBDIRS</tt><dd>

<p class=para>
A reference to an array of subdirectories that contain library files.
Defaults to:

<div class=programlisting>
<p>
<pre>
PMLIBDIRS =&gt; [ 'lib', '$(BASEEXT)' ],
</PRE>
</DIV>

<p class=para>
The directories will be scanned and any files
they contain will be installed in the corresponding location in the
library.  A <tt class=literal>libscan()</tt> method may be used to alter the behavior.
Defining <tt class=literal>PM</tt> in the <i class=emphasis>Makefile.PL</I> will override <tt class=literal>PMLIBDIRS</tt>.

<p>
<dt class=varlistentry><tt class=literal>PREFIX</tt><dd>

<p class=para>
May be used to set the three <tt class=literal>INSTALL*</tt> attributes in one go (except for
probably <tt class=literal>INSTALLMAN1DIR</tt> if it is not below <tt class=literal>PREFIX</tt> according to
<tt class=literal>%Config</tt>).  They will have <tt class=literal>PREFIX</tt> as a common directory node
and will branch from that node into <tt class=literal>lib/</tt>, <tt class=literal>lib/ARCHNAME</tt>
or whatever <i class=emphasis>Configure</I> decided at the build time of your Perl (unless
you override one of them, of course).

<p>
<dt class=varlistentry><tt class=literal>PREREQ</tt><dd>

<p class=para>
A placeholder, not yet implemented.  Will eventually be a hash
reference: the keys of the hash are names of modules that need to be
available to run this extension (for example, Fcntl for SDBM_File); the
values of the hash are the desired versions of the modules.

<p>
<dt class=varlistentry><tt class=literal>SKIP</tt><dd>

<p class=para>
An array reference specifying the names of sections of the
<i class=emphasis>Makefile</I> not to write.  For example:

<div class=programlisting>
<p>
<pre>
SKIP =&gt; [qw(name1 name2)],
</PRE>
</DIV>

<p>
<dt class=varlistentry><tt class=literal>TYPEMAPS</tt><dd>

<p class=para>
A reference to an array of typemap filenames.  (Typemaps are used by the
XS preprocessing system.)  Use this when the typemaps are
in some directory other than the current directory or when they are
not named <i class=emphasis>typemap</I>.  The last typemap in the list takes
precedence.  A typemap in the current directory has highest
precedence, even if it isn't listed in <tt class=literal>TYPEMAPS</tt>.  The default system
typemap has lowest precedence.

<p>
<dt class=varlistentry><tt class=literal>VERSION</tt><dd>

<p class=para>
Your version number for distributing the package.  This number defaults to
0.1.

<p>
<dt class=varlistentry><tt class=literal>VERSION_FROM</tt><dd>

<p class=para>
Instead of specifying the <tt class=literal>VERSION</tt> in the <i class=emphasis>Makefile.PL</I>, you can let
MakeMaker parse a file to determine the version number.  The parsing
routine requires that the file named by <tt class=literal>VERSION_FROM</tt> contain one
single line to compute the version number.  The first line in the file
that contains the regular expression:

<div class=programlisting>
<p>
<pre>
/(\$[\w:]*\bVERSION)\b.*=/
</PRE>
</DIV>

<p class=para>
will be evaluated with <a href="ch03_02.htm">eval</A> and the value of the named variable
after the <a href="ch03_02.htm">eval</A> will be assigned to the <tt class=literal>VERSION</tt> attribute of the
MakeMaker object.  The following lines will be parsed satisfactorily:

<div class=programlisting>
<p>
<pre>
$VERSION = '1.00';
( $VERSION ) = '$Revision: 1.52 $ ' =~ /\$Revision:\s+([^\s]+)/;
$FOO::VERSION = '1.10';
</PRE>
</DIV>

<p class=para>
but these will fail:

<div class=programlisting>
<p>
<pre>
my $VERSION = '1.01';
local $VERSION = '1.02';
local $FOO::VERSION = '1.30';
</PRE>
</DIV>

<p class=para>
The file named in <tt class=literal>VERSION_FROM</tt> is added as a dependency to the
<i class=emphasis>Makefile</I> in order to guarantee that the <i class=emphasis>Makefile</I> contains
the correct <tt class=literal>VERSION</tt> attribute after a change of the file.

<p>
<dt class=varlistentry><tt class=literal>XS</tt>      <dd>

<p class=para>
A hash reference of <i class=emphasis>.xs</I> files.  MakeMaker will default this.
For example:

<div class=programlisting>
<p>
<pre>
XS =&gt; {'name_of_file.xs' =&gt; 'name_of_file.c'},
</PRE>
</DIV>

<p class=para>
The *<i class=emphasis>.c</I> files will automatically be included in the list of files
deleted by a <i class=emphasis>make clean</I>.

<p>
<dt class=varlistentry><tt class=literal>XSOPT</tt><dd>

<p class=para>
A string of options to pass to <i class=emphasis>xsubpp</I> (the XS preprocessor).  This
might include <tt class=literal>-C++</tt> or <tt class=literal>-extern</tt>.  Do not include typemaps
here; the <tt class=literal>TYPEMAP</tt> parameter exists for that purpose.

<p>
<dt class=varlistentry><tt class=literal>XSPROTOARG</tt><dd>

<p class=para>
May be set to an empty string, which is identical to <tt class=literal>-prototypes</tt>, or
<tt class=literal>-noprototypes</tt>.
MakeMaker defaults to the empty string.

<p>
<dt class=varlistentry><tt class=literal>XS_VERSION</tt><dd>

<p class=para>
Your version number for the <i class=emphasis>.xs</I> file of this package.  This defaults
to the value of the <tt class=literal>VERSION</tt> attribute.</DL>
</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-7-SECT-1.26">Additional lowercase attributes</A></h4>

<p class=para>
There are additional lowercase attributes that you can use to pass
parameters to the methods that spit out particular portions
of the <i class=emphasis>Makefile</I>. These attributes are not normally required.

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>clean</tt><dd>

<p class=para>
Extra files to clean.

<div class=programlisting>
<p>
<pre>
clean =&gt; {FILES =&gt; "*.xyz foo"},
</PRE>
</DIV>

<p>
<dt class=varlistentry><tt class=literal>depend</tt><dd>

<p class=para>
Extra dependencies.

<div class=programlisting>
<p>
<pre>
depend =&gt; {<tt class=replaceable><i>ANY_TARGET</i></tt> =&gt; <tt class=replaceable><i>ANY_DEPENDENCY</i></tt>, ...},
</PRE>
</DIV>

<p>
<dt class=varlistentry><tt class=literal>dist</tt><dd>

<p class=para>
Options for distribution (see "Distribution Support" below).

<div class=programlisting>
<p>
<pre>
dist =&gt; {
    TARFLAGS =&gt; 'cvfF',
    COMPRESS =&gt; 'gzip',
    SUFFIX =&gt; 'gz',
    SHAR =&gt; 'shar -m',
    DIST_CP =&gt; 'ln',
},
</PRE>
</DIV>

<p class=para>
If you specify <tt class=literal>COMPRESS</tt>, then <tt class=literal>SUFFIX</tt>
should also be altered, since it is needed in order to specify for
<i class=emphasis>make</I> the target file of the compression.  Setting
<tt class=literal>DIST_CP</tt> to "<tt class=literal>ln</tt>" can
be useful if you need to
preserve the timestamps on your files.  <tt class=literal>DIST_CP</tt> can take the
values "<tt class=literal>cp</tt>" (copy the file),
"<tt class=literal>ln</tt>" (link the file), or
"<tt class=literal>best</tt>" (copy symbolic links and link the rest).
Default is "<tt class=literal>best</tt>".

<p>
<dt class=varlistentry><tt class=literal>dynamic_lib</tt><dd>

<p class=para>
Options for dynamic library support.

<div class=programlisting>
<p>
<pre>
dynamic_lib =&gt; {
    ARMAYBE =&gt; 'ar',
    OTHERLDFLAGS =&gt; '...',
    INST_DYNAMIC_DEP =&gt; '...',
},
</PRE>
</DIV>

<p>
<dt class=varlistentry><tt class=literal>installpm</tt><dd>

<p class=para>
Some installation options having to do with AutoSplit.

<div class=programlisting>
<p>
<pre>
{SPLITLIB =&gt; '$(INST_LIB)' (default) or '$(INST_ARCHLIB)'}
</PRE>
</DIV>

<p>
<dt class=varlistentry><tt class=literal>linkext</tt><dd>

<p class=para>
Linking style.

<div class=programlisting>
<p>
<pre>
linkext =&gt; {LINKTYPE =&gt; 'static', 'dynamic', or ""},
</PRE>
</DIV>

<p class=para>
Extensions that have nothing but <i class=emphasis>*.pm</I> files used to have to say:

<div class=programlisting>
<p>
<pre>
linkext =&gt; {LINKTYPE =&gt; ""},
</PRE>
</DIV>

<p class=para>
with Pre-5.0 MakeMakers.  With Version 5.00 of MakeMaker such a line
can be deleted safely.  MakeMaker recognizes when there's nothing to
be linked.

<p>
<dt class=varlistentry><tt class=literal>macro</tt><dd>

<p class=para>
Extra macros to define.

<div class=programlisting>
<p>
<pre>
macro =&gt; {ANY_MACRO =&gt; ANY_VALUE, ...},
</PRE>
</DIV>

<p>
<dt class=varlistentry><tt class=literal>realclean</tt><dd>

<p class=para>
Extra files to really clean.

<div class=programlisting>
<p>
<pre>
{FILES =&gt; '$(INST_ARCHAUTODIR)/*.xyz'}
</PRE>
</DIV>

</DL>
</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-7-SECT-1.27">Useful Makefile macros</A></h4>

<p class=para>
Here are some useful macros that you probably shouldn't redefine because
they're derivative.

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>FULLEXT</tt><dd>

<p class=para>
Pathname for extension directory (for example, <i class=emphasis>DBD/Oracle</I>).

<dt class=varlistentry><tt class=literal>BASEEXT</tt><dd>

<p class=para>
Basename part of <tt class=literal>FULLEXT</tt>.  May be just equal to <tt class=literal>FULLEXT</tt>.

<p>
<dt class=varlistentry><tt class=literal>ROOTEXT</tt><dd>

<p class=para>
Directory part of <tt class=literal>FULLEXT</tt> with leading slash (for example, <i class=emphasis>/DBD</I>)

<p>
<dt class=varlistentry><tt class=literal>INST_LIBDIR</tt><dd>

<p class=para>
<tt class=literal>$(INST_LIB)$(ROOTEXT)</tt>

<p>
<dt class=varlistentry><tt class=literal>INST_AUTODIR</tt><dd>

<p class=para>
<tt class=literal>$(INST_LIB)/auto/$(FULLEXT)</tt>

<p>
<dt class=varlistentry><tt class=literal>INST_ARCHAUTODIR</tt><dd>

<p class=para>
<tt class=literal>$(INST_ARCHLIB)/auto/$(FULLEXT)</tt></DL>
</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-7-SECT-1.28">Overriding MakeMaker methods</A></h4>

<p class=para>
If you cannot achieve the desired <i class=emphasis>Makefile</I> behavior by specifying
attributes, you may define private subroutines in the <i class=emphasis>Makefile.PL</I>.
Each subroutine returns the text it wishes to have written to
the <i class=emphasis>Makefile</I>.  To override a section of the <i class=emphasis>Makefile</I> you can
use one of two styles.  You can just return a new value:

<div class=programlisting>
<p>
<pre>
sub MY::c_o { "new literal text" }
</PRE>
</DIV>

<p class=para>
or you can edit the default by saying something like:

<div class=programlisting>
<p>
<pre>
sub MY::c_o {
    my $self = shift;
    local *c_o;
    $_=$self-&gt;MM::c_o;
    s/old text/new text/;
    $_;
}
</PRE>
</DIV>

<p class=para>
Both methods above are available for backward compatibility with
older <i class=emphasis>Makefile.PL</I>s.

<p class=para>
If you still need a different solution, try to develop another subroutine that
better fits your needs and then submit the diffs to either
<i class=emphasis>perl5-porters@nicoh.com</I> or
<i class=emphasis>comp.lang.perl.modules</I> as appropriate.

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-7-SECT-1.29">Distribution support</A></h4>

<p class=para>
For authors of extensions, MakeMaker provides several
<i class=emphasis>Makefile</I> targets.  Most of the support comes from the
ExtUtils::Manifest module, where additional documentation can be found.  Note
that a <i class=emphasis>MANIFEST</I> file is basically just a list of filenames
to be shipped with the kit to build the extension.

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>make distcheck</I><dd>

<p class=para>
Reports which files are below the build directory but not in the
<i class=emphasis>MANIFEST</I> file and vice versa.  (See
<tt class=literal>ExtUtils::Manifest::fullcheck()</tt> for details.)

<p>
<dt class=varlistentry><i class=emphasis>make skipcheck</I><dd>

<p class=para>
Reports which files are skipped due to the entries in the
<i class=emphasis>MANIFEST.SKIP</I> file.  (See <tt class=literal>ExtUtils::Manifest::skipcheck()</tt> for
details).

<p>
<dt class=varlistentry><i class=emphasis>make distclean</I><dd>

<p class=para>
Does a <i class=emphasis>realclean</I> first and then the <i class=emphasis>distcheck</I>.
Note that this is not
needed to build a new distribution as long as you are sure that the
<i class=emphasis>MANIFEST</I> file is OK.

<p>
<dt class=varlistentry><i class=emphasis>make manifest</I><dd>

<p class=para>
Rewrites the <i class=emphasis>MANIFEST</I> file, adding all remaining files found.  (See
<tt class=literal>ExtUtils::Manifest::mkmanifest()</tt> for details.)

<p>
<dt class=varlistentry><i class=emphasis>make distdir</I><dd>

<p class=para>
Copies all files that are in the <i class=emphasis>MANIFEST</I> file to a newly created
directory with the name <tt class=literal>$(DISTNAME)-$(VERSION)</tt>.  If that directory
exists, it will be removed first.

<p>
<dt class=varlistentry><i class=emphasis>make disttest</I><dd>

<p class=para>
Makes <i class=emphasis>distdir</I> first, and runs <i class=emphasis>perl
Makefile.PL</I>, <i class=emphasis>make</I>, and <i class=emphasis>make
test</I> in that directory.

<p>
<dt class=varlistentry><i class=emphasis>make tardist</I><dd>

<p class=para>
First does a command <tt class=literal>$(PREOP)</tt>, which defaults to a null
command.  Does a <i class=emphasis>make distdir</I> next and runs
<i class=emphasis>tar</I> (1) on that directory into a tarfile.  Then
deletes the <i class=emphasis>distdir</I>.  Finishes with a command
<tt class=literal>$(POSTOP)</tt>, which defaults to a null command.

<p>
<dt class=varlistentry><i class=emphasis>make dist</I><dd>

<p class=para>
Defaults to <tt class=literal>$(DIST_DEFAULT)</tt>, which in turn defaults to
<i class=emphasis>tardist</I>.

<p>
<dt class=varlistentry><i class=emphasis>make uutardist</I><dd>

<p class=para>
Runs a <i class=emphasis>tardist</I> first and <i class=emphasis>uuencode</I>&nbsp;s the tarfile.

<p>
<dt class=varlistentry><i class=emphasis>make shdist</I><dd>

<p class=para>
First does a command <tt class=literal>$(PREOP)</tt>, which defaults to a null
command.  Does a <i class=emphasis>distdir</I> next and runs
<i class=emphasis>shar</I> on that directory into a sharfile.  Then deletes the
<i class=emphasis>distdir</I>.  Finishes with a command <tt class=literal>$(POSTOP)</tt>, which defaults
to a null command.  Note:  for <i class=emphasis>shdist</I> to work properly, a
<i class=emphasis>shar</I> program that can handle directories is mandatory.

<p>
<dt class=varlistentry><i class=emphasis>make ci</I><dd>

<p class=para>
Does a <tt class=literal>$(CI)</tt> and a <tt class=literal>$(RCS_LABEL)</tt> on all files in the
<i class=emphasis>MANIFEST</I> file.</DL>
<p class=para>
Customization of the distribution targets can be done by specifying a hash
reference to the <tt class=literal>dist</tt> attribute of the
<tt class=literal>WriteMakefile()</tt> call.  The following parameters are
recognized:

<div class=informaltable>
<p>
<a name="PERL2-CH-7-TAB-15"></A>

<table class=INFORMALTABLE>
<tr class=row>
<th align="left">Parameter</TH>
<th align="left">Default</TH>
</TR>
<tr class=row>
<td align="left"><tt class=literal>CI</tt></TD>
<td align="left"><tt class=literal>('ci -u')</tt></TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>COMPRESS</tt></TD>
<td align="left"><tt class=literal>('compress')</tt></TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>POSTOP</tt></TD>
<td align="left"><tt class=literal>('@ :')</tt></TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>PREOP</tt></TD>
<td align="left"><tt class=literal>('@ :')</tt></TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>RCS_LABEL</tt></TD>
<td align="left"><tt class=literal>('rcs -q -Nv$(VERSION_SYM):')</tt></TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>SHAR</tt></TD>
<td align="left"><tt class=literal>('shar')</tt></TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>SUFFIX</tt></TD>
<td align="left"><tt class=literal>('Z')</tt></TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>TAR</tt></TD>
<td align="left"><tt class=literal>('tar')</tt></TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>TARFLAGS</tt></TD>
<td align="left"><tt class=literal>('cvf')</tt></TD>
</TR>
</TABLE>
<p>
</DIV>

<p class=para>
An example:

<div class=programlisting>
<p>
<pre>
WriteMakefile( 'dist' =&gt; { COMPRESS=&gt;"gzip", SUFFIX=&gt;"gz" })
</PRE>
</DIV>

</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch07-SECT2-AUTOID.19">ExtUtils::Manifest--Utilities to Write and Check a MANIFEST File</A></h3>

<div class=programlisting>
<p>
<pre>
require ExtUtils::Manifest;
ExtUtils::Manifest::mkmanifest();
ExtUtils::Manifest::manicheck();
ExtUtils::Manifest::filecheck();
ExtUtils::Manifest::fullcheck();
ExtUtils::Manifest::skipcheck();
ExtUtild::Manifest::manifind();
ExtUtils::Manifest::maniread($file);
ExtUtils::Manifest::manicopy($read, $target, $how);
</PRE>
</DIV>

<p class=para>
<a name="CH07.MANIF1"></A><a name="CH07.MANIF2"></A><a name="CH07.MANIF3"></A><a name="CH07.MANIF4"></A>These routines automate the maintenance and use of a <i class=emphasis>MANIFEST</I>
file.  A <i class=emphasis>MANIFEST</I> file is essentially just a list of filenames,
one per line, with an optional comment on each line, separated by
whitespace (usually one or more tabs).  The idea is simply that you can
extract the filenames by saying:

<div class=programlisting>
<p>
<pre>
awk '{print $1}' MANIFEST
</PRE>
</DIV>

<p class=para>
<tt class=literal>mkmanifest()</tt> writes the names of all files in and below the
current directory to a file named in the global variable
<tt class=literal>$ExtUtils::Manifest::MANIFEST</tt> (which defaults to <i class=emphasis>MANIFEST</I>)
in the current directory.  As the counterpart to the <i class=emphasis>awk</I> command
above, it works much like:

<div class=programlisting>
<p>
<pre>
find . -type f -print &gt; MANIFEST
</PRE>
</DIV>

<p class=para>
except that it also checks the existing <i class=emphasis>MANIFEST</I> file (if any) and
copies over any comments that are found there.
Also, all filenames that match any regular expression in a file
<i class=emphasis>MANIFEST.SKIP</I> (if such a file exists) are ignored.

<p class=para>
<tt class=literal>manicheck()</tt> checks whether all files listed in a <i class=emphasis>MANIFEST</I>
file in the current directory really do exist.

<p class=para>
<tt class=literal>filecheck()</tt> finds files below the current directory that are not
mentioned in the <i class=emphasis>MANIFEST</I> file.  An optional <i class=emphasis>MANIFEST.SKIP</I>
file will be consulted, and any filename matching a regular expression
in such a file will not be reported as missing in the <i class=emphasis>MANIFEST</I> file.

<p class=para>
<tt class=literal>fullcheck()</tt> does both a <tt class=literal>manicheck()</tt> and a <tt class=literal>filecheck()</tt>.

<p class=para>
<tt class=literal>skipcheck()</tt> lists all files that are skipped due to your
<i class=emphasis>MANIFEST.SKIP</I> file.

<p class=para>
<tt class=literal>manifind()</tt> returns a hash reference.  The keys of the hash are the
files found below the current directory.  The values are null strings,
representing all the <i class=emphasis>MANIFEST</I> comments that aren't there.

<p class=para>
<tt class=literal>maniread($file)</tt> reads a named <i class=emphasis>MANIFEST</I> file (defaults to
<i class=emphasis>MANIFEST</I> in the current directory) and returns a hash reference,
the keys of which are the filenames, and the values of which are the
comments that <i class=emphasis>are</I> there.  Er, which may be null if the
comments aren't there. . . .

<p class=para>
<tt class=literal>manicopy($read, $target, $how)</tt> copies the files that are the
keys in the hash <tt class=literal>%$read</tt> to the named target directory.  The
hash reference <tt class=literal>$read</tt> is typically returned by the
<tt class=literal>maniread()</tt> function.  <tt class=literal>manicopy()</tt> is useful
for producing a directory tree identical to the intended distribution tree.  The
third parameter <tt class=literal>$how</tt> can be used to specify a different
method of "copying".  Valid values are "<tt class=literal>cp</tt>",
which actually copies the files, "<tt class=literal>ln</tt>", which
creates hard links, and "<tt class=literal>best</tt>", which mostly
links the files but copies any symbolic link to make a tree without any symbolic
link.  "<tt class=literal>best</tt>" is the default, though it may not
be the best default.

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-7-SECT-1.30">Ignoring files</A></h4>

<p class=para>
The <i class=emphasis>MANIFEST.SKIP</I> file may contain regular expressions of
files that should be ignored by <tt class=literal>mkmanifest()</tt> and
<tt class=literal>filecheck()</tt>.  The regular expressions should appear one on
each line.  A typical example:

<div class=programlisting>
<p>
<pre>
\bRCS\b
^MANIFEST\.
(?i)^makefile$
~$
\.html$
\.old$
^blib/
^MakeMaker-\d
</PRE>
</DIV>

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-7-SECT-1.31">Exportability</A></h4>

<p class=para>
<tt class=literal>mkmanifest()</tt>, <tt class=literal>manicheck()</tt>, <tt class=literal>filecheck()</tt>, <tt class=literal>fullcheck()</tt>,
<tt class=literal>maniread()</tt>, and <tt class=literal>manicopy()</tt> are exportable.

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-7-SECT-1.32">Global variables</A></h4>

<p class=para>
<tt class=literal>$ExtUtils::Manifest::MANIFEST</tt> defaults to <tt class=literal>MANIFEST</tt>.  Changing it
results in both a different <i class=emphasis>MANIFEST</I> and a different
<i class=emphasis>MANIFEST.SKIP</I> file.  This is useful if you want to maintain
different distributions for different audiences (say a user version
and a developer version including RCS).

<p class=para>
<tt class=literal>$ExtUtils::Manifest::Quiet</tt> defaults to 0.  You can set it to a true
value to get all the functions to shutup already.

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-7-SECT-1.33">Diagnostics</A></h4>

<p class=para>
All diagnostic output is sent to <tt class=literal>STDERR</tt>.

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>Not in MANIFEST:</tt> <tt class=replaceable><i>file</i></tt><dd>

<p class=para>
A file excluded by a regular expression in <i class=emphasis>MANIFEST.SKIP</I> was
missing from the <i class=emphasis>MANIFEST</I> file.

<p>
<dt class=varlistentry><tt class=literal>No such file:</tt> <tt class=replaceable><i>file</i></tt><dd>

<p class=para>
A file mentioned in a <i class=emphasis>MANIFEST</I> file does not
exist.

<p>
<dt class=varlistentry><tt class=literal>MANIFEST:</tt> <i class=emphasis>$!</I><dd>

<p class=para>
The <i class=emphasis>MANIFEST</I> file could not be opened.

<p>
<dt class=varlistentry><tt class=literal>Added to MANIFEST:</tt> <tt class=replaceable><i>file</i></tt><dd>

<p class=para>
Reported by <tt class=literal>mkmanifest()</tt> if <tt class=literal>$Verbose</tt> is set and a file is added
to <i class=emphasis>MANIFEST</I>. <tt class=literal>$Verbose</tt> is set to 1 by default.</DL>
</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-7-SECT-1.34">See also</A></h4>

<p class=para>
The <i class=emphasis>ExtUtils::MakeMaker</I> library module generates a <i class=emphasis>Makefile</I> with
handy targets for most of this functionality.

</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch07-SECT2-AUTOID.20">ExtUtils::Miniperl--Write the C Code for perlmain.c</A></h3>

<div class=programlisting>
<p>
<pre>
use ExtUtils::Miniperl;
writemain(@directories);
</PRE>
</DIV>

<p class=para>
<tt class=literal>writemain()</tt> takes an argument list of directories containing
archive libraries that are needed by Perl modules and that should be
linked into a new Perl binary.  It correspondingly writes to
<tt class=literal>STDOUT</tt> a file intended to be compiled as <i class=emphasis>perlmain.c</I> that
contains all the bootstrap code to make the modules associated with the
libraries available from within Perl.

<p class=para>
The typical usage is from within a <i class=emphasis>Makefile</I> generated by
ExtUtils::MakeMaker.  So under normal circumstances you won't have to
deal with this module directly.

<div class=warning>
<p class=warning><blockquote><p><b>WARNING:</B>

<p class=para>
This entire module is automatically generated from a script called
<i class=emphasis>minimod.PL</I> when Perl itself is built.  So if you want to patch it,
please patch <i class=emphasis>minimod.PL</I> in the Perl distribution instead.
</blockquote><p>
</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch07-SECT2-AUTOID.21">ExtUtils::Mkbootstrap--Make a Bootstrap File for Use by DynaLoader</A></h3>

<div class=programlisting>
<p>
<pre>
use ExtUtils::Mkbootstrap;
mkbootstrap();
</PRE>
</DIV>

<p class=para>
<tt class=literal>mkbootstrap()</tt> typically gets called from an extension's
<i class=emphasis>Makefile</I>.  It writes a <i class=emphasis>*.bs</I> file that is needed by some
architectures to do dynamic loading.  It is otherwise unremarkable, and
MakeMaker usually handles the details.  If you need to know more about
it, you've probably already read the module.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch07-SECT2-AUTOID.22">ExtUtils::Mksymlists--Write Linker Option Files for Dynamic Extension</A></h3>

<div class=programlisting>
<p>
<pre>
use ExtUtils::Mksymlists;
Mksymlists(  NAME     =&gt; $name,
             DL_FUNCS =&gt; { $pkg1 =&gt; [$func1, $func2], $pkg2 =&gt; [$func3] },
             DL_VARS  =&gt; [$var1, $var2, $var3]);
</PRE>
</DIV>

<p class=para>
<tt class=literal>ExtUtils::Mksymlists()</tt> produces files used by the linker
under some OSes during the creation of shared libraries for dynamic extensions.
It is normally called from a MakeMaker-generated <i class=emphasis>Makefile</I>
when the extension is built.  The linker option file is generated by calling the
function <tt class=literal>Mksymlists()</tt>, which is exported by default from
ExtUtils::Mksymlists.  It takes one argument, a list of key/value pairs, in
which the following keys are recognized:

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>NAME</tt><dd>

<p class=para>
This gives the name of the extension (for example, <tt class=literal>Tk::Canvas</tt>)
for which
the linker option file will be produced.

<p>
<dt class=varlistentry><tt class=literal>DL_FUNCS</tt><dd>

<p class=para>
This is identical to the <tt class=literal>DL_FUNCS</tt> attribute available via MakeMaker,
from which it is usually taken.  Its value is a reference to a hash,
in which each key is the name of a package, and
each value is a reference to an array of function names, which
should be exported by the extension. So, one might say:

<div class=programlisting>
<p>
<pre>
DL_FUNCS =&gt; {
     Homer::Iliad   =&gt; [ qw(trojans greeks) ],
     Homer::Odyssey =&gt; [ qw(travelers family suitors) ],
},
</PRE>
</DIV>

<p class=para>
The function names should be identical to those in the
<tt class=literal>XSUB</tt> code; <tt class=literal>Mksymlists()</tt> will
alter the names written to the linker option file to match the changes
made by <i class=emphasis>xsubpp</I>.  In addition, if none of the
functions in a list begins with the string "<tt class=literal>boot_</tt>",
<tt class=literal>Mksymlists()</tt> will add a bootstrap function for that
package, just as <i class=emphasis>xsubpp</I> does.  (If a
<tt class=literal>boot_</tt><tt class=replaceable><i>pkg</i></tt> function is present
in the list, it is passed through unchanged.)  If
<tt class=literal>DL_FUNCS</tt> is not specified, it defaults to the
bootstrap function for the extension specified in
<tt class=literal>NAME</tt>.

<p>
<dt class=varlistentry><tt class=literal>DL_VARS</tt><dd>

<p class=para>
This is identical to the <tt class=literal>DL_VARS</tt> attribute available via MakeMaker,
and, like <tt class=literal>DL_FUNCS</tt>, it is usually specified via MakeMaker.  Its
value is a reference to an array of variable names that should
be exported by the extension.

<p>
<dt class=varlistentry><tt class=literal>FILE</tt><dd>

<p class=para>
This key can be used to specify the name of the linker option file
(minus the OS-specific extension) if for some reason you do not
want to use the default value, which is the last word of the <tt class=literal>NAME</tt>
attribute (for example, for <tt class=literal>Tk::Canvas</tt>,
<tt class=literal>FILE</tt> defaults to <tt class=literal>Canvas</tt>).

<p>
<dt class=varlistentry><tt class=literal>FUNCLIST</tt><dd>

<p class=para>
This provides an alternate means to specify function names to be
exported from the extension.  Its value is a reference to an
array of function names to be exported.  These
names are passed through unaltered to the linker options file.

<p>
<dt class=varlistentry><tt class=literal>DLBASE</tt><dd>

<p class=para>
This item specifies the name by which the linker knows the
extension, which may be different from the name of the
extension itself (for instance, some linkers add an "_" to the
name of the extension).  If it is not specified, it is derived
from the <tt class=literal>NAME</tt> attribute.  It is presently used only by OS/2.</DL>
<p class=para>
When calling <tt class=literal>Mksymlists()</tt>, one should always specify the <tt class=literal>NAME</tt>
attribute.  In most cases, this is all that's necessary.  In
the case of unusual extensions, however, the other attributes
can be used to provide additional information to the linker.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch07-SECT2-AUTOID.23">ExtUtils::MM_OS2--Methods to Override UNIX Behavior in ExtUtils::MakeMaker</A></h3>

<div class=programlisting>
<p>
<pre>
use ExtUtils::MM_OS2; # Done internally by ExtUtils::MakeMaker if needed
</PRE>
</DIV>

<p class=para>
See ExtUtils::MM_Unix for documentation of the methods provided
there.  This package overrides the implementation of the methods, not
the interface.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch07-SECT2-AUTOID.24">ExtUtils::MM_Unix--Methods Used by ExtUtils::MakeMaker</A></h3>

<div class=programlisting>
<p>
<pre>
require ExtUtils::MM_Unix;
</PRE>
</DIV>

<p class=para>
<a name="CH07.OS1"></A><a name="CH07.OS2"></A>The methods provided by this package (and by the other MM_* packages)
are designed to be used in conjunction with ExtUtils::MakeMaker.  You
will never <a href="ch03_02.htm">require</A> this module yourself.  You would only define methods
in this or a similar module if you're working on improving the porting
capabilities of MakeMaker.  Nevertheless, this is a laudable goal, so
we'll talk about it here.

<p class=para>
When MakeMaker writes a <i class=emphasis>Makefile</I>, it creates one or more
objects that inherit their methods from package MM. MM itself doesn't provide
any methods, but it inherits from the ExtUtils::MM_Unix class. However, for
certain platforms, it also inherits from an OS-specific module such as MM_VMS,
and it does this <i class=emphasis>before</I> it inherits from the MM_Unix module
in the <b>@ISA</B> list.  The inheritance tree of MM
therefore lets the OS-specific package override any of the methods listed here.
In a sense, the MM_Unix package is slightly misnamed, since it provides
fundamental methods on non-UNIX systems too, to the extent that the system is
like UNIX.

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-7-SECT-1.35">MM methods</A></h4>

<p class=para>
We've avoided listing deprecated methods here, as well as any private methods
you're unlikely to want to override.

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>catdir</tt> <tt class=replaceable><i>LIST</i></tt><dd>

<p class=para>
Concatenates two or more directory names to form a complete path ending
with a directory.  On UNIX it just glues it together with a <tt class=literal>/</tt>
character.

<p>
<dt class=varlistentry><tt class=literal>catfile</tt> <tt class=replaceable><i>LIST</i></tt><dd>

<p class=para>
Concatenates one or more directory names and a filename to form a
complete path ending with a filename.  Also uses <tt class=literal>/</tt> on UNIX.

<p>
<dt class=varlistentry><tt class=literal>dir_target</tt><dd>

<p class=para>
Takes an array of directories that need to exist and returns a
<i class=emphasis>Makefile</I> entry for a <i class=emphasis>.exists</I> file in these directories.  Returns
nothing if the entry has already been processed.  We're helpless,
though, if the same directory comes as <tt class=literal>$(FOO)</tt> and as <tt class=literal>bar</tt>.
Both of them get an entry; that's why we use "<tt class=literal>::</tt>".

<p>
<dt class=varlistentry><tt class=literal>file_name_is_absolute</tt> <tt class=replaceable><i>FILENAME</i></tt><dd>

<p class=para>
Takes as argument a path and returns true if it is an absolute path.

<p>
<dt class=varlistentry><tt class=literal>find_perl</tt> <tt class=replaceable><i>VERSION, NAMES, DIRS, TRACE</i></tt><dd>

<p class=para>
Searches for an executable Perl that is at least the specified
<tt class=replaceable><i>VERSION</i></tt>, named by one of the entries in <tt class=replaceable><i>NAMES</i></tt> (an array
reference), and located in one of the entries of <tt class=replaceable><i>DIRS</i></tt> (also an
array reference). It prints debugging info if <tt class=replaceable><i>TRACE</i></tt> is true.

<p>
<dt class=varlistentry><tt class=literal>guess_name</tt><dd>

<p class=para>
Guesses the name of this package by examining the working directory's
name.  MakeMaker calls this only if the developer has not supplied a
<tt class=literal>NAME</tt> attribute.  Shame on you.

<p>
<dt class=varlistentry><tt class=literal>has_link_code</tt><dd>

<p class=para>
Returns true if <tt class=literal>C</tt>, <tt class=literal>XS</tt>, <tt class=literal>MYEXTLIB</tt> or similar
objects exist within this object that need a compiler.  Does not descend
into subdirectories as <tt class=literal>needs_linking()</tt> does.

<p>
<dt class=varlistentry><tt class=literal>libscan</tt> <tt class=replaceable><i>FILENAME</i></tt><dd>

<p class=para>
Takes a path to a file that is found by <tt class=literal>init_dirscan()</tt> and returns false
if we don't want to include this file in the library. It is mainly used to
exclude <i class=emphasis>RCS/</I>, <i class=emphasis>CVS/</I>, and <i class=emphasis>SCCS/</I> directories from installation.

<p>
<dt class=varlistentry><tt class=literal>lsdir</tt> <tt class=replaceable><i>DIR</i></tt>, <tt class=replaceable><i>REGEXP</i></tt><dd>

<p class=para>
Takes as arguments a directory name and a regular expression.  Returns
all entries in the directory that match the regular expression.

<p>
<dt class=varlistentry><tt class=literal>maybe_command_in_dirs</tt><dd>

<p class=para>
Method under development.  Not yet used.

<p>
<dt class=varlistentry><tt class=literal>maybe_command</tt> <tt class=replaceable><i>FILENAME</i></tt><dd>

<p class=para>
Returns true if the argument is likely to be a command.

<p>
<dt class=varlistentry><tt class=literal>needs_linking</tt><dd>

<p class=para>
Does this module need linking?  Looks into subdirectory objects, if any.  (See
also <tt class=literal>has_link_code()</tt>.)

<p>
<dt class=varlistentry><tt class=literal>nicetext</tt> <tt class=replaceable><i>TARGET</i></tt><dd>

<p class=para>
(A misnamed method.)  The MM_Unix version of the method just
returns the argument without further processing.
On VMS, this method ensures that colons marking targets are preceded by
space.  Most UNIX <i class=emphasis>makes</I> don't need this, but it's necessary under VMS
to distinguish the target delimiter from a colon appearing as part of
a filespec.

<p>
<dt class=varlistentry><tt class=literal>path</tt><dd>

<p class=para>
Takes no argument.  Returns the environment variable <tt class=literal>PATH</tt> as an array.

<p>
<dt class=varlistentry><tt class=literal>perl_script</tt> <tt class=replaceable><i>FILENAME</i></tt><dd>

<p class=para>
Returns true if the argument is likely to be a Perl script.  With
MM_Unix this is true for any ordinary, readable file.

<p>
<dt class=varlistentry><tt class=literal>prefixify</tt> <tt class=replaceable><i>ATTRNAME, OLDPREFIX, NEWPREFIX</i></tt><dd>

<p class=para>
Processes a path attribute in
<tt class=literal>$self-&gt;{ </tt><tt class=replaceable><i>ATTRNAME</i></tt><tt class=literal> }</tt>.  First
it looks it up for you in <tt class=literal>%Config</tt> if it doesn't have a value
yet.  Then it replaces (in-place) the <tt class=replaceable><i>OLDPREFIX</i></tt> with the
<tt class=replaceable><i>NEWPREFIX</i></tt> (if it matches).

<p>
<dt class=varlistentry><tt class=literal>replace_manpage_separator</tt> <tt class=replaceable><i>FILENAME</i></tt><dd>

<p class=para>
Takes the filename of a package, which if it's a nested package will
have a name of the form "<tt class=literal>Foo/Bar</tt>" (under UNIX),
and replaces the
subdirectory delimiter with "<tt class=literal>::</tt>".  Returns the altered name.</DL>
</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-7-SECT-1.36">Methods to produce chunks of text for the Makefile</A></h4>

<p class=para>
When MakeMaker thinks it has all its ducks in a row, it calls a special
sequence of methods to produce the Makefile for a given MakeMaker
object.  The list of methods it calls is specified in the array
<tt class=literal>@ExtUtils::MakeMaker::MM_Sections</tt>, one method per section.
Since these routines are all called the same way, we won't document
each of them separately, except to list them.

<p class=para>
By far the most accurate and up-to-date documentation for what each
method does is actually the <i class=emphasis>Makefile</I> that MakeMaker produces.
Each section of the file is labeled with the name of the method that
produces it, so once you see how you want to change the <i class=emphasis>Makefile</I>,
it's a trivial matter to work back from the proposed change and find the
method responsible for it.

<p class=para>
You've plowed through a lot of ugly things to get here, but since you've
read this far, we'll reward you by pointing out something incredibly
beautiful in MakeMaker.  The arguments (if any) that are passed to each
method are simply the pseudo-attributes of the same name that you
already saw documented under "Additional Lowercase Attributes" in the
section on ExtUtils::MakeMaker.  You'll recall that those
pseudo-attributes were specified as anonymous hashes, which Just Happen
to have exactly the same syntax inside as named parameters.  Fancy that.
So the arguments just come right into your method as ordinary named
parameters.  Assign the arguments to a hash, and off you go.  And it's
completely forward and backward compatible.  Even if you override a
method that didn't have arguments before, there's no problem.  Since it's
all driven off the method name, just name your new pseudo-attribute
after your method, and your method will get its arguments.

<p class=para>
The return values are also easy to understand: each method simply
returns the string it wants to put into its section of the
<i class=emphasis>Makefile</I>.

<p class=para>
Two special methods are <tt class=literal>post_initialize()</tt> and <tt class=literal>postamble()</tt>,
each of which returns an empty string by default.  You can define them in your
<i class=emphasis>Makefile.PL</I> to insert customized text near the beginning or end of
the <i class=emphasis>Makefile</I>.

<p class=para>
Here are the methods.  They're called in this order (reading down the columns):

<div class=informaltable>
<p>
<table class=INFORMALTABLE>
<tr class=row>
<td align="LEFT"><tt class=literal>post_initialize()</tt></TD>
<td align="LEFT"><tt class=literal>top_targets()</tt></TD>
<td align="LEFT"><tt class=literal>realclean()</tt></TD>
</TR>
<tr class=row>
<td align="LEFT"><tt class=literal>const_config()</tt></TD>
<td align="LEFT"><tt class=literal>linkext()</tt></TD>
<td align="LEFT"><tt class=literal>dist_basics()</tt></TD>
</TR>
<tr class=row>
<td align="LEFT"><tt class=literal>constants()</tt></TD>
<td align="LEFT"><tt class=literal>dlsyms()</tt></TD>
<td align="LEFT"><tt class=literal>dist_core()</tt></TD>
</TR>
<tr class=row>
<td align="LEFT"><tt class=literal>const_loadlibs()</tt></TD>
<td align="LEFT"><tt class=literal>dynamic()</tt></TD>
<td align="LEFT"><tt class=literal>dist_dir()</tt></TD>
</TR>
<tr class=row>
<td align="LEFT"><tt class=literal>const_cccmd()</tt></TD>
<td align="LEFT"><tt class=literal>dynamic_bs()</tt></TD>
<td align="LEFT"><tt class=literal>dist_test()</tt></TD>
</TR>
<tr class=row>
<td align="LEFT"><tt class=literal>tool_autosplit()</tt></TD>
<td align="LEFT"><tt class=literal>dynamic_lib()</tt></TD>
<td align="LEFT"><tt class=literal>dist_ci()</tt></TD>
</TR>
<tr class=row>
<td align="LEFT"><tt class=literal>tool_xsubpp()</tt></TD>
<td align="LEFT"><tt class=literal>static()</tt></TD>
<td align="LEFT"><tt class=literal>install()</tt></TD>
</TR>
<tr class=row>
<td align="LEFT"><tt class=literal>tools_other()</tt></TD>
<td align="LEFT"><tt class=literal>static_lib()</tt></TD>
<td align="LEFT"><tt class=literal>force()</tt></TD>
</TR>
<tr class=row>
<td align="LEFT"><tt class=literal>dist()</tt></TD>
<td align="LEFT"><tt class=literal>installpm()</tt></TD>
<td align="LEFT"><tt class=literal>perldepend()</tt></TD>
</TR>
<tr class=row>
<td align="LEFT"><tt class=literal>macro()</tt></TD>
<td align="LEFT"><tt class=literal>installpm_x()</tt></TD>
<td align="LEFT"><tt class=literal>makefile()</tt></TD>
</TR>
<tr class=row>
<td align="LEFT"><tt class=literal>depend()</tt></TD>
<td align="LEFT"><tt class=literal>manifypods()</tt></TD>
<td align="LEFT"><tt class=literal>staticmake()</tt></TD>
</TR>
<tr class=row>
<td align="LEFT"><tt class=literal>post_constants()</tt></TD>
<td align="LEFT"><tt class=literal>processPL()</tt></TD>
<td align="LEFT"><tt class=literal>test()</tt></TD>
</TR>
<tr class=row>
<td align="LEFT"><tt class=literal>pasthru()</tt></TD>
<td align="LEFT"><tt class=literal>installbin()</tt></TD>
<td align="LEFT"><tt class=literal>test_via_harness()</tt></TD>
</TR>
<tr class=row>
<td align="LEFT"><tt class=literal>c_o()</tt></TD>
<td align="LEFT"><tt class=literal>subdirs()</tt></TD>
<td align="LEFT"><tt class=literal>test_via_script()</tt></TD>
</TR>
<tr class=row>
<td align="LEFT"><tt class=literal>xs_c()</tt></TD>
<td align="LEFT"><tt class=literal>subdir_x()</tt></TD>
<td align="LEFT"><tt class=literal>postamble()</tt></TD>
</TR>
<tr class=row>
<td align="LEFT"><tt class=literal>xs_o()</tt></TD>
<td align="LEFT"><tt class=literal>clean()</tt></TD>
<td align="LEFT">&nbsp;</TD>
</TR>
</TABLE>
<p>
</DIV>

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-7-SECT-1.37">See also</A></h4>

<p class=para>
ExtUtils::MakeMaker library module.

</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch07-SECT2-AUTOID.25">ExtUtils::MM_VMS--Methods to Override UNIX Behavior in ExtUtils::MakeMaker</A></h3>

<div class=programlisting>
<p>
<pre>
use ExtUtils::MM_VMS; # Done internally by ExtUtils::MakeMaker if needed
</PRE>
</DIV>

<p class=para>
See ExtUtils::MM_Unix for documentation of the methods provided
there.  This package overrides the implementation of the methods, not
the interface.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch07-SECT2-AUTOID.26">Fcntl--Load the C fcntl.h Defines</A></h3>

<div class=programlisting>
<p>
<pre>
use Fcntl;
$nonblock_flag = O_NDELAY();
$create_flag = O_CREAT();
$read_write_flag = O_RDWR();
</PRE>
</DIV>

<p class=para>
This module is just a translation of the C <i class=emphasis>fcntl.h</I> file.
Unlike the old mechanism which required a translated <i class=emphasis>fcntl.ph</I>
file, <i class=emphasis>fcntl</I> uses the <i class=emphasis>h2xs</I> program (see the Perl source distribution)
and your native C compiler.  This means that it has a
much better chance of getting the numbers right.

<p class=para>
Note that only <tt class=literal>#define</tt> symbols get translated; you must still correctly
pack up your own arguments to pass as arguments for locking functions and
so on.

<p class=para>
The following routines are exported by default, and each routine returns the value
of the <tt class=literal>#define</tt> that is the same as the routine name:

<div class=informaltable>
<p>
<table class=INFORMALTABLE>
<tr class=row>
<td align="LEFT"><tt class=literal>FD_CLOEXEC</tt></TD>
<td align="LEFT"><tt class=literal>F_DUPFD</tt></TD>
<td align="LEFT"><tt class=literal>F_GETFD</tt></TD>
<td align="LEFT"><tt class=literal>F_GETFL</tt></TD>
<td align="LEFT"><tt class=literal>F_GETLK</tt></TD>
<td align="LEFT"><tt class=literal>F_RDLCK</tt></TD>
</TR>
<tr class=row>
<td align="LEFT"><tt class=literal>F_SETFD</tt></TD>
<td align="LEFT"><tt class=literal>F_SETFL</tt></TD>
<td align="LEFT"><tt class=literal>F_SETLK</tt></TD>
<td align="LEFT"><tt class=literal>F_SETLKW</tt></TD>
<td align="LEFT"><tt class=literal>F_UNLCK</tt></TD>
<td align="LEFT"><tt class=literal>F_WRLCK</tt></TD>
</TR>
<tr class=row>
<td align="LEFT"><tt class=literal>O_APPEND</tt></TD>
<td align="LEFT"><tt class=literal>O_CREAT</tt></TD>
<td align="LEFT"><tt class=literal>O_EXCL</tt></TD>
<td align="LEFT"><tt class=literal>O_NDELAY</tt></TD>
<td align="LEFT"><tt class=literal>O_NOCTTY</tt></TD>
<td align="LEFT">&nbsp;</TD>
</TR>
<tr class=row>
<td align="LEFT"><tt class=literal>O_NONBLOCK</tt></TD>
<td align="LEFT"><tt class=literal>O_RDONLY</tt></TD>
<td align="LEFT"><tt class=literal>O_RDWR</tt></TD>
<td align="LEFT"><tt class=literal>O_TRUNC</tt></TD>
<td align="LEFT"><tt class=literal>O_WRONLY</tt></TD>
<td align="LEFT">&nbsp;</TD>
</TR>
</TABLE>
<p>
</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch07-SECT2-AUTOID.27">File::Basename--Parse File Specifications</A></h3>

<div class=programlisting>
<p>
<pre>
use File::Basename;
($name, $path, $suffix) = fileparse($fullname, @suffixlist)
fileparse_set_fstype($os_string);  # $os_string specifies OS type
$basename = basename($fullname, @suffixlist);
$dirname = dirname($fullname);
($name, $path, $suffix) = fileparse("lib/File/Basename.pm", '\.pm');
fileparse_set_fstype("VMS");
$basename = basename("lib/File/Basename.pm", ".pm");
$dirname = dirname("lib/File/Basename.pm");
</PRE>
</DIV>

<p class=para>
<a name="CH07.BASE1"></A><a name="CH07.BASE2"></A><a name="CH07.BASE3"></A>These routines allow you to parse file specifications into useful
pieces using the syntax of different operating systems.

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>fileparse_set_fstype</tt><dd>

<p class=para>
You select the syntax via the routine
<tt class=literal>fileparse_set_fstype()</tt>. If the argument passed to it contains
one of the substrings "<tt class=literal>VMS</tt>",
"<tt class=literal>MSDOS</tt>", or
"<tt class=literal>MacOS</tt>", the file specification syntax of that
operating system is used in future calls to <tt class=literal>fileparse()</tt>,
<tt class=literal>basename()</tt>, and <tt class=literal>dirname()</tt>.  If it contains
none of these substrings, UNIX syntax is used.  This pattern matching is
case-insensitive.  If you've selected VMS syntax and the file specification you
pass to one of these routines contains a <tt class=literal>/</tt>, it assumes you
are using UNIX emulation and applies the UNIX syntax rules instead for that
function call only. If you haven't called
<tt class=literal>fileparse_set_fstype()</tt>, the syntax is chosen by
examining the <tt class=literal>osname</tt> entry from the Config package
according to these rules.

<p>
<dt class=varlistentry><tt class=literal>fileparse</tt><dd>

<p class=para>
The <tt class=literal>fileparse()</tt> routine divides a file specification into
three parts: a leading <tt class=replaceable><i>path</i></tt>, a file
<tt class=replaceable><i>name</i></tt>, and a <tt class=replaceable><i>suffix</i></tt>.  The
<tt class=replaceable><i>path</i></tt> contains everything up to and including the last
directory separator in the input file specification.  The remainder of the input
file specification is then divided into <tt class=replaceable><i>name</i></tt> and
<tt class=replaceable><i>suffix</i></tt> based on the optional patterns you specify in
<tt class=literal>@suffixlist</tt>.  Each element of this list is interpreted as a
regular expression, and is matched against the end of
<tt class=replaceable><i>name</i></tt>.  If this succeeds, the matching portion of
<tt class=replaceable><i>name</i></tt> is removed and prepended to
<tt class=replaceable><i>suffix</i></tt>.  By proper use of
<tt class=literal>@suffixlist</tt>, you can remove file types or versions for
examination.  You are guaranteed that if you concatenate
<tt class=replaceable><i>path</i></tt>, <tt class=replaceable><i>name</i></tt>, and
<tt class=replaceable><i>suffix</i></tt> together in that order, the result will be
identical to the input file specification.  Using UNIX file syntax:

<div class=programlisting>
<p>
<pre>
($name, $path, $suffix) = fileparse('/virgil/aeneid/draft.book7',
                                                  '\.book\d+');
</PRE>
</DIV>

<p class=para>
would yield:

<div class=programlisting>
<p>
<pre>
$name   eq 'draft'
$path   eq '/virgil/aeneid',
$suffix eq '.book7'
</PRE>
</DIV>

<p class=para>
(Note that the suffix pattern is in single quotes.  You'd have to double the
backslashes if you used double quotes, since double quotes do backslash
interpretation.)
Similarly, using VMS syntax:

<div class=programlisting>
<p>
<pre>
($name, $path, $suffix) = fileparse('Doc_Root:[Help]Rhetoric.Rnh', '\..*');
</PRE>
</DIV>

<p class=para>
would yield:

<div class=programlisting>
<p>
<pre>
$name   eq 'Rhetoric'
$path   eq 'Doc_Root:[Help]'
$suffix eq '.Rnh'
</PRE>
</DIV>

<p>
<dt class=varlistentry><tt class=literal>basename</tt><dd>

<p class=para>
The <tt class=literal>basename()</tt> routine returns the first element of the list produced
by calling <tt class=literal>fileparse()</tt> with the same arguments.  It is provided for
compatibility with the UNIX shell command <i class=emphasis>basename</I> (1).

<p>
<dt class=varlistentry><tt class=literal>dirname</tt><dd>

<p class=para>
The <tt class=literal>dirname()</tt> routine returns the directory portion of the input file
specification.  When using VMS or MacOS syntax, this is identical to the
second element of the list produced by calling <tt class=literal>fileparse()</tt> with the same
input file specification.  When using UNIX or MS-DOS syntax, the return
value conforms to the behavior of the UNIX shell command <i class=emphasis>dirname</I> (1).  This
is usually the same as the behavior of <tt class=literal>fileparse()</tt>, but differs in some
cases.  For example, for the input file specification <tt class=literal>lib/</tt>,
<tt class=literal>fileparse()</tt>
considers the directory name to be <i class=emphasis>lib/</I>, while <tt class=literal>dirname()</tt> considers
the directory name to be <b>.</B> (dot).</DL>
</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch07-SECT2-AUTOID.28">File::CheckTree--Run Many Tests on a Collection of Files</A></h3>

<div class=programlisting>
<p>
<pre>
use File::CheckTree;
$warnings += validate( q{
    /vmunix                 -e || die
    /boot                   -e || die
    /bin                    cd
        csh                 -ex
        csh                 !-ug
        sh                  -ex
        sh                  !-ug
    /usr                    -d || warn "What happened to $file?\n"
});
</PRE>
</DIV>

<p class=para>
The <tt class=literal>validate()</tt> routine takes a single multi-line string, each
line of which contains a filename plus a file test to try on it.  (The file test
may be given as "<tt class=literal>cd</tt>", causing subsequent relative
filenames to be interpreted relative to that directory.)  After the file test
you may put "<tt class=literal>|| die</tt>" to make it a fatal error if
the file test fails.  The default is:

<div class=programlisting>
<p>
<pre>
|| warn
</PRE>
</DIV>

<p class=para>
You can reverse the sense of the test by prepending "!".  If you specify
"<tt class=literal>cd</tt>" and then list some relative filenames, you
may want to indent them slightly for readability.  If you supply your own <a href="ch03_02.htm">die</A> or <a href="ch03_02.htm">warn</A>
message, you can use <tt class=literal>$file</tt> to interpolate the filename.

<p class=para>
File tests may be grouped:  <tt class=literal>-rwx</tt> tests for all of <tt class=literal>-r</tt>,
<tt class=literal>-w</tt>, and <tt class=literal>-x</tt>.
Only the first failed test of the group will produce a warning.

<p class=para>
<tt class=literal>validate()</tt> returns the number of warnings issued, presuming it
didn't <a href="ch03_02.htm">die</A>.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch07-SECT2-AUTOID.29">File::Copy--Copy Files or Filehandles</A></h3>

<div class=programlisting>
<p>
<pre>
use File::Copy;
copy("<tt class=replaceable><i>src-file</i></tt>", "<tt class=replaceable><i>dst-file</i></tt>");
copy("Copy.pm", \*STDOUT);
use POSIX;
use File::Copy 'cp';
$fh = FileHandle-&gt;new("/dev/null", "r");
cp($fh, "<tt class=replaceable><i>dst-file</i></tt>");'
</PRE>
</DIV>

<p class=para>
The Copy module provides one function, <tt class=literal>copy()</tt>, that takes two
parameters: a file to copy from and a file to copy to.  Either
argument may be a string, a FileHandle reference, or a FileHandle
glob.  If the first argument is a filehandle of some
sort, it will be read from; if it is a filename, it will
be opened for reading.  Likewise, the second argument will be
written to (and created if need be).

<p class=para>
An optional third parameter is a hint that requests the buffer size to
be used for copying.  This is the number of bytes from the first file
that will be held in memory at any given time, before being written to
the second file.  The default buffer size depends upon the file and the
operating system, but will generally be the whole file (up to 2Mb), or
1kb for filehandles that do not reference files (for example, sockets).

<p class=para>
When running under VMS, this routine performs an RMS copy of
the file, in order to preserve file attributes, indexed file
structure, and so on.  The buffer size parameter is ignored.

<p class=para>
You may use the syntax:

<div class=programlisting>
<p>
<pre>
use File::Copy "cp"
</PRE>
</DIV>

<p class=para>
to get at the <tt class=literal>cp()</tt> alias for the <tt class=literal>copy()</tt> function.
The syntax is exactly
the same.

<p class=para>
<tt class=literal>copy()</tt> returns <tt class=literal>1</tt> on success, <tt class=literal>0</tt> on failure;
<b>$!</B> will be set if an error was encountered.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch07-SECT2-AUTOID.30">File::Find--Traverse a File Tree</A></h3>

<div class=programlisting>
<p>
<pre>
use File::Find;
find(\&amp;wanted, '<tt class=replaceable><i>dir1</i></tt>', '<tt class=replaceable><i>dir2</i></tt>'...);
sub wanted { ... }
use File::Find;
finddepth(\&amp;wanted, '<tt class=replaceable><i>dir1</i></tt>', '<tt class=replaceable><i>dir2</i></tt>'...);  # traverse depth-first
sub wanted { ... }
</PRE>
</DIV>

<p class=para>
<tt class=literal>find()</tt> is similar to the UNIX
<i class=emphasis>find</I> (1) command in that it traverses the specified
directories, performing whatever tests or other actions you request.  However,
these actions are given in the subroutine, <tt class=literal>wanted()</tt>, which
you must define (but see <i class=emphasis>find2perl</I> below).  For example, to
print out the names of all executable files, you could define
<tt class=literal>wanted()</tt> this way:

<div class=programlisting>
<p>
<pre>
sub wanted {
    print "$File::Find::name\n" if -x;
}
</PRE>
</DIV>

<p class=para>
<tt class=literal>$File::Find::dir</tt> contains the current directory name, and
<b>$_</B> the current filename within that directory.
<tt class=literal>$File::Find::name</tt> contains
<tt class=literal>"$File::Find::dir/$_"</tt>.  You are <a href="ch03_02.htm">chdir</A>ed to <tt class=literal>$File::Find::dir</tt> when
<tt class=literal>find()</tt> is called.  You can set
<tt class=literal>$File::Find::prune</tt> to true in <tt class=literal>wanted()</tt> in
order to prune the tree; that is, <tt class=literal>find()</tt> will not descend
into any directory when <tt class=literal>$File::Find::prune</tt> is set.

<p class=para>
This library is primarily for use with the <i class=emphasis>find2perl</I> (1) command,
which is supplied with the standard Perl distribution and converts a
<i class=emphasis>find</I> (1) invocation to an appropriate <tt class=literal>wanted()</tt> subroutine.
The command:

<div class=programlisting>
<p>
<pre>
find2perl / -name .nfs\* -mtime +7 \
             -exec rm -f {} \; -o -fstype nfs -prune
</PRE>
</DIV>

<p class=para>
produces something like:

<div class=programlisting>
<p>
<pre>
sub wanted {
    /^\.nfs.*$/ &amp;&amp;
    (($dev, $ino, $mode, $nlink, $uid, $gid) = lstat($_)) &amp;&amp;
    int(-M _) &gt; 7 &amp;&amp;
    unlink($_)
    ||
    ($nlink || (($dev, $ino, $mode, $nlink, $uid, $gid) = lstat($_))) &amp;&amp;
    $dev &lt; 0 &amp;&amp;
    ($File::Find::prune = 1);
}
</PRE>
</DIV>

<p class=para>
Set the variable <tt class=literal>$File::Find::dont_use_nlink</tt> if
you're using the AFS.

<p class=para>
<tt class=literal>finddepth()</tt> is just like <tt class=literal>find()</tt>, except that it does a
depth-first search.

<p class=para>
Here's another interesting <tt class=literal>wanted()</tt> function.  It will find all
symbolic links that don't resolve:

<div class=programlisting>
<p>
<pre>
sub wanted {
    -l and not -e and print "bogus link: $File::Find::name\n";
}
</PRE>
</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch07-SECT2-AUTOID.31">File::Path--Create or Remove a Series of Directories</A></h3>

<div class=programlisting>
<p>
<pre>
use File::Path
mkpath(['/foo/bar/baz', 'blurfl/quux'], 1, 0711);
rmtree(['/foo/bar/baz', 'blurfl/quux'], 1, 1);
</PRE>
</DIV>

<p class=para>
The <tt class=literal>mkpath()</tt> function provides a convenient way to create directories,
even if
your <i class=emphasis>mkdir</I> (2) won't create more than one level of directory at a
time.  <tt class=literal>mkpath()</tt> takes three arguments:

<p>
<ul class=itemizedlist>
<li class=listitem>The name of the path to create, or a reference
to a list of paths to create

<p>
<li class=listitem>A Boolean value, which if true will cause <tt class=literal>mkpath()</tt>
to print the name of each directory as it is created
(defaults to false)

<p>
<li class=listitem>The numeric mode to use when creating the directories
(defaults to <tt class=literal>0777</tt>)

<p>
</UL>
<p class=para>
It returns a list of all directories created, including intermediate
directories, which are assumed to be delimited by
the UNIX path separator, <tt class=literal>/</tt>.

<p class=para>
Similarly, the <tt class=literal>rmtree()</tt> function provides a convenient way to delete a
subtree from the directory structure, much like the UNIX <i class=emphasis>rm -r</I>
command.  <tt class=literal>rmtree()</tt> takes three arguments:

<p>
<ul class=itemizedlist>
<li class=listitem>The root of the subtree to delete, or a reference to
a list of roots.  All of the files and directories
below each root, as well as the roots themselves,
will be deleted.

<p>
<li class=listitem>A Boolean value, which if true will cause <tt class=literal>rmtree()</tt> to
print a message each time it examines a file, giving the
name of the file and indicating whether it's using <i class=emphasis>rmdir</I> (2)
or <i class=emphasis>unlink</I> (2) to remove it, or whether it's skipping it.
(This argument defaults to false.)

<p>
<li class=listitem>A Boolean value, which if true will cause <tt class=literal>rmtree()</tt> to
skip any files to which you do not have delete access
(if running under VMS) or write access (if running
under another operating system).  This will change in the future when
a criterion for "delete permission" under operating systems other
than VMS is settled. (This argument defaults to false.)

<p>
</UL>
<p class=para>
<tt class=literal>rmtree()</tt> returns the number of files successfully deleted.
Symbolic links are treated as ordinary files.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch07-SECT2-AUTOID.32">FileCache--Keep More Files Open Than the System Permits</A></h3>

<div class=programlisting>
<p>
<pre>
use FileCache;
cacheout $path;         # open the file whose path name is $path
print $path "stuff\n";  # print stuff to file given by $path
</PRE>
</DIV>

<p class=para>
The <tt class=literal>cacheout()</tt> subroutine makes sure that the file whose name is
<tt class=literal>$path</tt> is created and accessible through the filehandle also named
<tt class=literal>$path</tt>.  It permits you to write to more files than your system allows
to be open at once, performing the necessary opens and closes in the
background.  By preceding each file access with:

<div class=programlisting>
<p>
<pre>
cacheout $path;
</PRE>
</DIV>

<p class=para>
you can be sure that the named file will be open and ready to do business.
However, you do not need to invoke <tt class=literal>cacheout()</tt> between successive
accesses to the same file.

<p class=para>
<tt class=literal>cacheout()</tt> does not create directories for you.  If you use it to
open an existing file that FileCache is seeing for the first time, the
file will be truncated to zero length with no questions asked.  (However,
in its opening and closing of files in the background, <tt class=literal>cacheout()</tt>
keeps track of which files it has opened before and does not overwrite
them, but appends to them instead.)

<p class=para>
<tt class=literal>cacheout()</tt> checks the value of <tt class=literal>NOFILE</tt> in <i class=emphasis>sys/param.h</I>
to determine the number of open files allowed.  This value is incorrect on
some systems, in which case you should set <tt class=literal>$FileCache::maxopen</tt> to
be four less than the correct value for <tt class=literal>NOFILE</tt>.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch07-SECT2-AUTOID.33">FileHandle--Supply Object Methods for Filehandles</A></h3><a name="CH07.FILEH1"></A><a name="CH07.FILEH2"></A><a name="CH07.FILEH3"></A>

<div class=programlisting>
<p>
<pre>
use FileHandle;
$fh = new FileHandle;
if ($fh-&gt;open "&lt; <tt class=replaceable><i>file</i></tt>") {
    print &lt;$fh&gt;;
    $fh-&gt;close;
}
$fh = new FileHandle "&gt; <tt class=replaceable><i>file</i></tt>";
if (defined $fh) {
    print $fh "bar\n";
    $fh-&gt;close;
}
$fh = new FileHandle "<tt class=replaceable><i>file</i></tt>", "r";
if (defined $fh) {
    print &lt;$fh&gt;;
    undef $fh;       # automatically closes the file
}
$fh = new FileHandle "<tt class=replaceable><i>file</i></tt>", O_WRONLY|O_APPEND;
if (defined $fh) {
    print $fh "stuff\n";
    undef $fh;       # automatically closes the file
}
$pos = $fh-&gt;getpos;
$fh-&gt;setpos $pos;
$fh-&gt;setvbuf($buffer_var, _IOLBF, 1024);
($readfh, $writefh) = FileHandle::pipe;
autoflush STDOUT 1;
</PRE>
</DIV>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>new</tt><dd>

<p class=para>
Creates a FileHandle, which is a reference to a
newly created symbol (see the Symbol library module).  If it receives any
parameters, they are passed to <tt class=literal>open()</tt>.  If the open fails,
the FileHandle object is destroyed.  Otherwise, it is returned to
the caller.

<p>
<dt class=varlistentry><tt class=literal>new_from_fd</tt><dd>

<p class=para>
Creates a FileHandle like <tt class=literal>new()</tt> does.
It requires two parameters, which are passed to <tt class=literal>fdopen()</tt>;
if the <tt class=literal>fdopen()</tt> fails, the FileHandle object is destroyed.
Otherwise, it is returned to the caller.

<p>
<dt class=varlistentry><tt class=literal>open</tt><dd>

<p class=para>
Accepts one parameter or two.  With one parameter, it is just a front end for
the built-in <a href="ch03_02.htm">open</A> function.  With two
parameters, the first parameter is a filename that may include whitespace or
other special characters, and the second parameter is the open mode in either
Perl form (<tt class=literal>"&gt;"</tt>, <tt class=literal>"+&lt;"</tt>, and so on) or
POSIX form (<tt class=literal>"w"</tt>, <tt class=literal>"r+"</tt>, and so on).

<p>
<dt class=varlistentry><tt class=literal>fdopen</tt><dd>

<p class=para>
Like <tt class=literal>open()</tt> except that its first parameter is not a filename
but rather a filehandle name, a FileHandle object, or a file descriptor number.

<p>
<dt class=varlistentry><tt class=literal>getpos</tt><dd>

<p class=para>
If the C functions <i class=emphasis>fgetpos</I> (3) and
<i class=emphasis>fsetpos</I> (3) are available, then
<tt class=literal>getpos()</tt> returns an opaque value that represents the current
position of the FileHandle, and <tt class=literal>setpos()</tt> uses that value to
return to a previously visited position.

<p>
<dt class=varlistentry><tt class=literal>setvbuf</tt><dd>

<p class=para>
If the C function <i class=emphasis>setvbuf</I> (3) is available, then
<tt class=literal>setvbuf()</tt> sets the buffering policy for the FileHandle.  The
calling sequence for the Perl function is the same as its C counterpart,
including the macros <tt class=literal>_IOFBF</tt>, <tt class=literal>_IOLBF</tt>, and
<tt class=literal>_IONBF</tt>, except that the buffer parameter specifies a scalar
variable to use as a buffer.

<div class=warning>
<p class=warning><blockquote><p><b>WARNING:</B>

<p class=para>
A variable used as a buffer by <tt class=literal>setvbuf()</tt> must not be
modified in any way until the FileHandle is closed or until
<tt class=literal>setvbuf()</tt> is called again, or memory corruption may
result!
</blockquote><p>
</DIV>

</DL>
<p class=para>
The following supported FileHandle methods are just front ends for the
corresponding built-in Perl functions:

<div class=informaltable>
<p>
<table class=INFORMALTABLE>
<tr class=row>
<td align="LEFT"><tt class=literal>clearerr</tt></TD>
<td align="LEFT"><tt class=literal>getc</tt></TD>
</TR>
<tr class=row>
<td align="LEFT"><tt class=literal>close</tt></TD>
<td align="LEFT"><tt class=literal>gets</tt></TD>
</TR>
<tr class=row>
<td align="LEFT"><tt class=literal>eof</tt></TD>
<td align="LEFT"><tt class=literal>seek</tt></TD>
</TR>
<tr class=row>
<td align="LEFT"><tt class=literal>fileno</tt></TD>
<td align="LEFT"><tt class=literal>tell</tt></TD>
</TR>
</TABLE>
<p>
</DIV>

<p class=para>
The following supported FileHandle methods correspond to Perl special
variables:

<div class=informaltable>
<p>
<table class=INFORMALTABLE>
<tr class=row>
<td align="LEFT"><tt class=literal>autoflush</tt></TD>
<td align="LEFT"><tt class=literal>format_page_number</tt></TD>
</TR>
<tr class=row>
<td align="LEFT"><tt class=literal>format_formfeed</tt></TD>
<td align="LEFT"><tt class=literal>format_top_name</tt></TD>
</TR>
<tr class=row>
<td align="LEFT"><tt class=literal>format_line_break_characters</tt></TD>
<td align="LEFT"><tt class=literal>input_line_number</tt></TD>
</TR>
<tr class=row>
<td align="LEFT"><tt class=literal>format_lines_left</tt></TD>
<td align="LEFT"><tt class=literal>input_record_separator</tt></TD>
</TR>
<tr class=row>
<td align="LEFT"><tt class=literal>format_lines_per_page</tt></TD>
<td align="LEFT"><tt class=literal>output_field_separator</tt></TD>
</TR>
<tr class=row>
<td align="LEFT"><tt class=literal>format_name</tt></TD>
<td align="LEFT"><tt class=literal>output_record_separator</tt></TD>
</TR>
</TABLE>
<p>
</DIV>

<p class=para>
Furthermore, for doing normal I/O you might need these methods:

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>$fh-&gt;print</tt><dd>

<p class=para>
See Perl's built-in <a href="ch03_02.htm">print</A> function.

<p>
<dt class=varlistentry><tt class=literal>$fh-&gt;printf</tt><dd>

<p class=para>
See Perl's built-in <a href="ch03_02.htm">printf</A> function.

<p>
<dt class=varlistentry><tt class=literal>$fh-&gt;getline</tt><dd>

<p class=para>
This method works like Perl's <tt class=literal>&lt;FILEHANDLE&gt;</tt> construct,
except that it can be safely called in an
array context, where it still returns just one line.

<p>
<dt class=varlistentry><tt class=literal>$fh-&gt;getlines</tt><dd>

<p class=para>
This method works like Perl's <tt class=literal>&lt;FILEHANDLE&gt;</tt> construct when called in an
array context to read all remaining lines in a file.
It will also <tt class=literal>croak()</tt> if accidentally called in a scalar context.</DL>
<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-7-SECT-1.38">Bugs</A></h4>

<p class=para>
Due to backward compatibility, all filehandles resemble objects
of class FileHandle, or actually classes derived from that class.
But they aren't.  Which means you can't derive your own
class from FileHandle and inherit those methods.

<p class=para>
While it may look as though the filehandle methods corresponding
to the built-in variables are unique to a particular
filehandle, currently some of them are not, including the following:<tt class=literal>input_line_number()</tt>, <tt class=literal>input_record_separator()</tt>, and <tt class=literal>output_record_separator()</tt>

</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch07-SECT2-AUTOID.34">GDBM_File--Tied Access to GDBM Library</A></h3>

<div class=programlisting>
<p>
<pre>
use GDBM_File;
tie %hash, "GDBM_File", $filename, &amp;GDBM_WRCREAT, 0644);
# read/writes of %hash are now read/writes of $filename
untie %hash;
</PRE>
</DIV>

<p class=para>
GDBM_File is a module that allows Perl programs to make use of the
facilities provided by the GNU <i class=emphasis>gdbm</I> library.  If you intend to use this
module, you should have a copy of the <i class=emphasis>gdbm</I> (3) manpage at hand.

<p class=para>
Most of the <i class=emphasis>libgdbm.a</I> functions are available as methods of the
<tt class=literal>GDBM_File</tt> interface.

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-7-SECT-1.39">Availability</A></h4>

<p class=para>
<i class=emphasis>gdbm</I> is available from any GNU archive.  The master site is
prep.ai.mit.edu, but you are strongly urged to use one of the many
mirrors.   You can obtain a list of mirror sites by issuing the
command, <i class=emphasis>finger fsf@prep.ai.mit.edu</I>.  A copy is also stored
on CPAN:

<div class=programlisting>
<p>
<pre>
http://www.perl.com/CPAN/src/misc/gdbm-1.7.3.tar.gz
</PRE>
</DIV>

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-7-SECT-1.40">See also</A></h4>

<p class=para>
DB_File library module.

</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch07-SECT2-AUTOID.35">Getopt::Long--Extended Processing of Command-Line Options</A></h3>

<div class=programlisting>
<p>
<pre>
use Getopt::Long;
$result = GetOptions(<tt class=replaceable><i>option-descriptions</i></tt>);
</PRE>
</DIV>

<p class=para>
<a name="CH07.LONG1"></A><a name="CH07.LONG2"></A><a name="CH07.LONG3"></A><a name="CH07.LONG4"></A>The Getopt::Long module implements an extended function called
<tt class=literal>GetOptions()</tt>.  This function retrieves and processes the
command-line options with which your Perl program was invoked, based on the
description of valid options that you provide.

<p class=para>
<tt class=literal>GetOptions()</tt> adheres to the POSIX syntax for command-line
options, with GNU extensions.  In general, this means that options have long
names instead of single letters, and are introduced with a double hyphen
<tt class=literal>- -</tt>.  (A single hyphen can also be used,
but implies restrictions on functionality.  See later in the chapter.)  There is
no bundling of command-line options, as was the case with the more traditional
single-letter approach.  For example, the UNIX
<i class=emphasis>ps</I> (1) command can be given the command-line
argument:

<div class=programlisting>
<p>
<pre>
-vax
</PRE>
</DIV>

<p class=para>
which means the combination of <tt class=literal>-v</tt>, <tt class=literal>-a</tt> and <tt class=literal>-x</tt>.
With the Getopt::Long syntax, <tt class=literal>-vax</tt> would be a single option.

<p class=para>
Command-line options can be used to set values.  These values can be
specified in one of two ways:

<div class=programlisting>
<p>
<pre>
- -size 24
- -size=24
</PRE>
</DIV>

<p class=para>
<tt class=literal>GetOptions()</tt> is called with a list of option descriptions, each of which
consists of two elements:  the option specifier and the option linkage.
The option specifier defines the name of the option and, optionally,
the value it can take.  The option linkage is usually a reference to a
variable that will be set when the option is used.  For example, the
following call to <tt class=literal>GetOptions()</tt>:

<div class=programlisting>
<p>
<pre>
&amp;GetOptions("size=i" =&gt; \$offset);
</PRE>
</DIV>

<p class=para>
will accept a command-line option "<tt class=literal>size</tt>" that must have an
integer value.  With a command line of <tt class=literal>- -size
24</tt> this will cause the variable <tt class=literal>$offset</tt> to be
assigned the value 24.

<p class=para>
Alternatively, the first argument to GetOptions may be a reference to
a hash describing the linkage for the options.  The following call is
equivalent to the example above:

<div class=programlisting>
<p>
<pre>
%optctl = (size =&gt; \$offset);
&amp;GetOptions(\%optctl, "size=i");
</PRE>
</DIV>

<p class=para>
Linkage may be specified using either of the above methods, or both.
The linkage specified in the argument list takes precedence over the
linkage specified in the hash.

<p class=para>
The command-line options are implicitly taken from array <tt class=literal>@ARGV</tt>.  Upon completion
of <tt class=literal>GetOptions()</tt>, <tt class=literal>@ARGV</tt> will contain only the command-line
arguments that were not options.  (But see below for a way to process
non-option arguments.)  Each option specifier handed to
<tt class=literal>GetOptions()</tt> designates the name of an option, possibly
followed by an argument specifier.  Values for argument specifiers are:

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>&lt;none&gt;</tt><dd>

<p class=para>
Option does not take an argument.  If the user invokes the option,
the option variable will be set to 1.

<p>
<dt class=varlistentry><tt class=literal>!      </tt><dd>

<p class=para>
Option does not take an argument and may be negated, that is, prefixed by
"<tt class=literal>no</tt>".  For example, <tt class=literal>foo!</tt> will allow <tt class=literal>- -foo</tt> (with value 1
being assigned to the option variable) and
<tt class=literal>-nofoo</tt>
(with value 0).

<p>
<dt class=varlistentry><tt class=literal>=s      </tt><dd>

<p class=para>
Option takes a mandatory string argument.
This string will be assigned to the option variable.
Even if the string argument starts with <tt class=literal>-</tt> or <tt class=literal>- -</tt>, it
will be assigned to the option variable rather than taken as a separate
option.

<p>
<dt class=varlistentry><tt class=literal>:s      </tt><dd>

<p class=para>
Option takes an optional string argument.
This string will be assigned to the option variable.  If the string is
omitted from the command invocation, <tt class=literal>""</tt> (an empty string) will be
assigned to the option variable.
If the string argument starts with <tt class=literal>-</tt> or <tt class=literal>- -</tt>, it
will be taken as another option rather than assigned to the option variable.

<p>
<dt class=varlistentry><tt class=literal>=i      </tt><dd>

<p class=para>
Option takes a mandatory integer argument.
This value will be assigned to the option variable.
Note that the value may start with <tt class=literal>-</tt> to indicate a negative
value.

<p>
<dt class=varlistentry><tt class=literal>:i      </tt><dd>

<p class=para>
Option takes an optional integer argument.
This integer value will be assigned to the option variable.
If the optional argument is omitted, the value 0 will be assigned to the
option variable.  The value may start with <tt class=literal>-</tt> to indicate a negative
value.

<p>
<dt class=varlistentry><tt class=literal>=f      </tt><dd>

<p class=para>
Option takes a mandatory floating-point argument.
This value will be assigned to the option variable.
Note that the value may start with <tt class=literal>-</tt> to indicate a negative
value.

<p>
<dt class=varlistentry><tt class=literal>:f      </tt><dd>

<p class=para>
Option takes an optional floating-point argument.
This value will be assigned to the option variable.
If the optional argument is omitted, the value 0 will be assigned to the
option variable.
The value may start with <tt class=literal>-</tt> to indicate a negative value.</DL>
<p class=para>
A lone hyphen <tt class=literal>-</tt> is considered an option; the corresponding option
name is the empty string.

<p class=para>
A lone double hyphen <tt class=literal>- -</tt> terminates the
processing of options and arguments.  Any options following the double hyphen
will remain in <tt class=literal>@ARGV</tt> when <tt class=literal>GetOptions()</tt>
returns.

<p class=para>
If an argument specifier concludes with <tt class=literal>@</tt> (as in <tt class=literal>=s@</tt>),
then the option is treated as an array.  That is, multiple invocations of
the same option, each with a particular value, will result in the list of
values being assigned to the option variable, which is an array.  See the
following section for an example.

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-7-SECT-1.41">Linkage specification</A></h4>

<p class=para>
The linkage specifier is optional.  If no linkage is explicitly
specified but a hash reference is passed, <tt class=literal>GetOptions()</tt>
will place the value in the hash.  For example:

<div class=programlisting>
<p>
<pre>
%optctl = ();
&amp;GetOptions (\%optctl, "size=i");
</PRE>
</DIV>

<p class=para>
will perform the equivalent of the assignment:

<div class=programlisting>
<p>
<pre>
$optctl{"size"} = 24;
</PRE>
</DIV>

<p class=para>
For array options, a reference to an anonymous array is generated.  For example:

<div class=programlisting>
<p>
<pre>
%optctl = ();
&amp;GetOptions (\%optctl, "sizes=i@");
</PRE>
</DIV>

<p class=para>
with command-line arguments:

<div class=programlisting>
<p>
<pre>
-sizes 24 -sizes 48
</PRE>
</DIV>

<p class=para>
will perform the equivalent of the assignment:

<div class=programlisting>
<p>
<pre>
$optctl{"sizes"} = [24, 48];
</PRE>
</DIV>

<p class=para>
If no linkage is explicitly specified and no hash reference is passed,
<tt class=literal>GetOptions()</tt> will put the value in a global variable named
after the option, prefixed by <tt class=literal>opt_</tt>.  To yield a usable Perl
variable, characters that are not part of the syntax for variables are
translated to underscores.  For example,
<tt class=literal>- -fpp-struct-return</tt> will set the variable
<tt class=literal>$opt_fpp_struct_return</tt>.  (Note that this variable resides in
the namespace of the calling program, not necessarily main.)  For example:

<div class=programlisting>
<p>
<pre>
&amp;GetOptions ("size=i", "sizes=i@");
</PRE>
</DIV>

<p class=para>
with command line:

<div class=programlisting>
<p>
<pre>
-size 10 -sizes 24 -sizes 48
</PRE>
</DIV>

<p class=para>
will perform the
equivalent of the assignments:

<div class=programlisting>
<p>
<pre>
$opt_size = 10;
@opt_sizes = (24, 48);
</PRE>
</DIV>

<p class=para>
A lone hyphen (<tt class=literal>-</tt>) is considered an option; the corresponding
identifier is <tt class=literal>$opt_</tt> .

<p class=para>
The linkage specifier can be a reference to a scalar, a reference to
an array, or a reference to a subroutine:

<p>
<ul class=itemizedlist>
<li class=listitem>If a scalar reference is supplied, the new value is stored in the referenced
variable.  If the option occurs more than once, the previous value is
overwritten.

<p>
<li class=listitem>If an array reference is supplied, the new value is appended (pushed) to the
referenced array.

<p>
<li class=listitem>If a code reference is supplied, the referenced subroutine is called with
two arguments: the option name and the option value.
The option name is always the true name, not an abbreviation or alias.

<p>
</UL>
</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-7-SECT-1.42">Aliases and abbreviations</A></h4>

<p class=para>
The option specifier may actually include a "<tt class=literal>|</tt>"-separated list of option names:

<div class=programlisting>
<p>
<pre>
foo|bar|blech=s
</PRE>
</DIV>

<p class=para>
In this example, <tt class=literal>foo</tt> is the true name of the option.  If no
linkage is specified, options <tt class=literal>-foo</tt>, <tt class=literal>-bar</tt> and
<tt class=literal>-blech</tt> all will set <tt class=literal>$opt_foo</tt>.

<p class=para>
Options may be invoked as unique abbreviations, depending on
configuration variable <tt class=literal>$Getopt::Long::autoabbrev</tt>.

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-7-SECT-1.43">Non-option callback routine</A></h4>

<p class=para>
A special option specifier <tt class=literal>&lt;&gt;</tt> can be used to designate a subroutine
to handle non-option arguments.  For example:

<div class=programlisting>
<p>
<pre>
&amp;GetOptions(..."&lt;&gt;", \&amp;mysub...);
</PRE>
</DIV>

<p class=para>
In this case <tt class=literal>GetOptions()</tt> will immediately call
<tt class=literal>&amp;mysub</tt> for every non-option it encounters in the options
list.  This subroutine gets the name of the non-option passed.  This feature
requires <tt class=literal>$Getopt::Long::order</tt> to have the value of the
predefined and exported variable, <tt class=literal>$PERMUTE</tt>.  See also the
examples.

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-7-SECT-1.44">Option starters</A></h4>

<p class=para>
On the command line, options can start with <tt class=literal>-</tt> (traditional),
<tt class=literal>- -</tt> (POSIX), and <tt class=literal>+</tt> (GNU,
now being phased out).  The latter is not allowed if the environment variable
<tt class=literal>POSIXLY_CORRECT</tt> has been defined.

<p class=para>
Options that start with <tt class=literal>- -</tt> may have an
argument appended, following an equals sign (<tt class=literal>=</tt>). For
example: <tt class=literal>- -foo=bar</tt>.

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-7-SECT-1.45">Return value</A></h4>

<p class=para>
A return status of <tt class=literal>0</tt> (false) indicates that the function detected
one or more errors.

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-7-SECT-1.46">Configuration variables</A></h4>

<p class=para>
The following variables can be set to change the default behavior of
<tt class=literal>GetOptions()</tt>:

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>$Getopt::Long::autoabbrev</tt><dd>

<p class=para>
If true, then allow option names to be invoked with unique abbreviations.
Default is <tt class=literal>1</tt> unless environment variable
<tt class=literal>POSIXLY_CORRECT</tt> has been set.

<p>
<dt class=varlistentry><tt class=literal>$Getopt::Long::getopt_compat</tt><dd>

<p class=para>
If true, then allow "<tt class=literal>+</tt>" to start options.
Default is 1 unless environment variable
<tt class=literal>POSIXLY_CORRECT</tt> has been set.

<p>
<dt class=varlistentry><tt class=literal>$Getopt::Long::order</tt><dd>

<p class=para>
If set to <tt class=literal>$PERMUTE</tt>, then non-options are allowed to be mixed with
options on the command line.  If set to <tt class=literal>$REQUIRE_ORDER</tt>, then
mixing is not allowed.  Default is <tt class=literal>$REQUIRE_ORDER</tt> if environment
variable <tt class=literal>POSIXLY_CORRECT</tt> has been set, <tt class=literal>$PERMUTE</tt> otherwise.
Both <tt class=literal>$PERMUTE</tt> and <tt class=literal>$REQUIRE_ORDER</tt> are defined in the library
module and automatically exported.
<tt class=literal>$PERMUTE</tt> means that:

<div class=programlisting>
<p>
<pre>
-foo arg1 -bar arg2 arg3
</PRE>
</DIV>

<p class=para>
is equivalent to:

<div class=programlisting>
<p>
<pre>
-foo -bar arg1 arg2 arg3
</PRE>
</DIV>

<p class=para>
If a non-option callback routine is specified, <tt class=literal>@ARGV</tt> will always be
empty upon successful return of <tt class=literal>GetOptions()</tt> since all options have been
processed, except when <tt class=literal>- -</tt> is used.  So, for example:

<div class=programlisting>
<p>
<pre>
-foo arg1 -bar arg2 -- arg3
</PRE>
</DIV>

<p class=para>
will call the callback routine for <tt class=literal>arg1</tt> and
<tt class=literal>arg2</tt>, and then terminate, leaving <tt class=literal>arg3</tt> in
<tt class=literal>@ARGV</tt>.  If <tt class=literal>$Getopt::Long::order</tt> is
<tt class=literal>$REQUIRE_ORDER</tt>, option processing terminates when the first
non-option is encountered.

<div class=programlisting>
<p>
<pre>
-foo arg1 -bar arg2 arg3
</PRE>
</DIV>

<p class=para>
is equivalent to:

<div class=programlisting>
<p>
<pre>
-foo -- arg1 -bar arg2 arg3
</PRE>
</DIV>

<p>
<dt class=varlistentry><tt class=literal>$Getopt::Long::ignorecase</tt><dd>

<p class=para>
If true, then ignore case when matching options.  Default is <tt class=literal>1</tt>.

<p>
<dt class=varlistentry><tt class=literal>$Getopt::Long::VERSION</tt><dd>

<p class=para>
The version number of this Getopt::Long implementation is in the format
<tt class=literal>major.minor</tt>. This can be used to have Exporter check the
version. Example:

<div class=programlisting>
<p>
<pre>
use Getopt::Long 2.00;
</PRE>
</DIV>

<p class=para>
<tt class=literal>$Getopt::Long::major_version</tt> and
<tt class=literal>$Getopt::Long::minor_version</tt> may be inspected for the
individual components.

<p>
<dt class=varlistentry><tt class=literal>$Getopt::Long::error</tt><dd>

<p class=para>
Internal error flag.  May be incremented from a callback routine to
cause options parsing to fail.

<p>
<dt class=varlistentry><tt class=literal>$Getopt::Long::debug</tt><dd>

<p class=para>
Enable copious debugging output.  Default is <tt class=literal>0</tt>.</DL>
</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-7-SECT-1.47">Examples</A></h4>

<p class=para>
If the option specifier is <tt class=literal>one:i</tt> (which takes an optional integer
argument), then the following situations are handled:

<div class=programlisting>
<p>
<pre>
-one -two            # $opt_one = "", -two is next option
-one -2              # $opt_one = -2
</PRE>
</DIV>

<p class=para>
Also, assume specifiers <tt class=literal>foo=s</tt> and <tt class=literal>bar:s</tt>:

<div class=programlisting>
<p>
<pre>
-bar -xxx            # $opt_bar = "", -xxx is next option
-foo -bar            # $opt_foo = '-bar'
-foo --              # $opt_foo = '--'
</PRE>
</DIV>

<p class=para>
In GNU or POSIX format, option names and values can be combined:

<div class=programlisting>
<p>
<pre>
+foo=blech           # $opt_foo = 'blech'
--bar=               # $opt_bar = ""
--bar=--             # $opt_bar = '--'
</PRE>
</DIV>

<p class=para>
Example using variable references:

<div class=programlisting>
<p>
<pre>
$ret = &amp;GetOptions ('foo=s', \$foo, 'bar=i', 'ar=s', \@ar);
</PRE>
</DIV>

<p class=para>
With command-line options <tt class=literal>-foo blech -bar 24 -ar xx -ar yy</tt>
this will result in:

<div class=programlisting>
<p>
<pre>
$bar = 'blech'
$opt_bar = 24
@ar = ('xx', 'yy')
</PRE>
</DIV>

<p class=para>
Example of using the <tt class=literal>&lt;&nbsp;&gt;</tt> option specifier:

<div class=programlisting>
<p>
<pre>
@ARGV = qw(-foo 1 bar -foo 2 blech);
&amp;GetOptions("foo=i", \$myfoo, "&lt;&gt;", \&amp;mysub);
</PRE>
</DIV>

<p class=para>
Results:

<div class=programlisting>
<p>
<pre>
&amp;mysub("bar") <i class=emphasis>will be called (with</I> $myfoo <i class=emphasis>being</I> 1<i class=emphasis>)</I>
&amp;mysub("blech") <i class=emphasis>will be called (with</I> $myfoo <i class=emphasis>being</I> 2<i class=emphasis>)</I>
</PRE>
</DIV>

<p class=para>
Compare this with:

<div class=programlisting>
<p>
<pre>
@ARGV = qw(-foo 1 bar -foo 2 blech);
&amp;GetOptions("foo=i", \$myfoo);
</PRE>
</DIV>

<p class=para>
This will leave the non-options in <tt class=literal>@ARGV:</tt>

<div class=programlisting>
<p>
<pre>
$myfoo <i class=emphasis>becomes</I> 2
@ARGV  <i class=emphasis>becomes</I> qw(bar blech)
</PRE>
</DIV>

<p class=para>
If you're using the <tt class=literal>use strict</tt> pragma, which requires you to employ
only lexical variables or else globals that are fully declared, you 
will have to use the double-colon package delimiter or else the 
<tt class=literal>use vars</tt> pragma.  For example:

<div class=programlisting>
<p>
<pre>
use strict;
use vars qw($opt_rows $opt_cols);
use Getopt::Long;
</PRE>
</DIV>

</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch07-SECT2-AUTOID.36">Getopt::Std--Process Single-Character Options with Option Clustering</A></h3>

<div class=programlisting>
<p>
<pre>
use Getopt::Std;
getopt('oDI');    # -o, -D &amp; -I take arg.  Sets opt_* as a side effect.
getopts('oif:');  # -o &amp; -i are boolean flags, -f takes an argument.
                  # Sets opt_* as a side effect.
</PRE>
</DIV>

<p class=para>
The <tt class=literal>getopt()</tt> and <tt class=literal>getopts()</tt> functions give
your program simple mechanisms for processing single-character options.  These
options can be clustered (for example, <tt class=literal>-bdLc</tt> might be
interpreted as four single-character options), and you can specify individual
options that require an accompanying argument.  When you invoke
<tt class=literal>getopt()</tt> or <tt class=literal>getopts()</tt>, you pass along
information about the kinds of options your program expects.  These functions
then analyze <tt class=literal>@ARGV</tt>, extract information about the options,
and return this information to your program in a set of variables.  The
processing of <tt class=literal>@ARGV</tt> stops when an argument without a leading
"<tt class=literal>-</tt>" is encountered, if that argument is not
associated with a preceding option.  Otherwise, <tt class=literal>@ARGV</tt> is
processed to its end and left empty.

<p class=para>
For each option in your program's invocation, both <tt class=literal>getopt()</tt> and
<tt class=literal>getopts()</tt> define a variable <tt class=literal>$opt_</tt><tt class=replaceable><i>x</i></tt> where <tt class=replaceable><i>x</i></tt> is the
option name.  If the option takes an argument, then the argument is read
and assigned to <tt class=literal>$opt_</tt><tt class=replaceable><i>x</i></tt> as its value; otherwise, a value of 1 is
assigned to the variable.

<p class=para>
Invoke <tt class=literal>getopt()</tt> with one argument, which should contain all
options that require a following argument.  For example:

<div class=programlisting>
<p>
<pre>
getopt('dV');
</PRE>
</DIV>

<p class=para>
If your program is then invoked as:

<div class=programlisting>
<p>
<pre>
myscr -bfd January -V 10.4
</PRE>
</DIV>

<p class=para>
then these variables will be set in the program:

<div class=programlisting>
<p>
<pre>
$opt_b = 1;
$opt_f = 1;
$opt_d = "January";
$opt_V = 10.4;
</PRE>
</DIV>

<p class=para>
Space between an option and its following argument is unnecessary.  The
previous command line could have been given this way:

<div class=programlisting>
<p>
<pre>
myscr -bfdJanuary -V10.4
</PRE>
</DIV>

<p class=para>
In general, your program can be invoked with options given in any order.
All options not "declared" in the invocation of <tt class=literal>getopt()</tt> are
assumed to be without accompanying argument.

<p class=para>
Where <tt class=literal>getopt()</tt> allows any single-character option,
<tt class=literal>getopts()</tt> allows only those options you declare explicitly.  For
example, this invocation:

<div class=programlisting>
<p>
<pre>
getopts('a:bc:');
</PRE>
</DIV>

<p class=para>
legitimizes only the options <tt class=literal>-a</tt>, <tt class=literal>-b</tt>, and <tt class=literal>-c</tt>.  The
colon following the <tt class=literal>a</tt> and <tt class=literal>c</tt> means that these two options
require an accompanying argument; <tt class=literal>b</tt> is not allowed to have an
argument.  Accordingly, here are some ways to invoke the program:

<div class=programlisting>
<p>
<pre>
myscr -abc              # WRONG unless bc is really the argument to -a
myscr -a -bc            # WRONG, with same qualification
myscr -a foo -bc bar    # $opt_a = "foo"; $opt_b = 1; $opt_c = "bar"
myscr -bafoo -cbar      # same as previous
</PRE>
</DIV>

<p class=para>
<tt class=literal>getopts()</tt> returns false if it encounters errors during option
processing.  However, it continues to process arguments and assign values
as best it can to <tt class=literal>$opt_</tt><tt class=replaceable><i>x</i></tt>
variables.  You should always check for
errors before assuming that the variables hold meaningful values.

<p class=para>
<tt class=literal>getopt()</tt> does not return a meaningful value.

<p class=para>
Remember that both <tt class=literal>getopt()</tt> and <tt class=literal>getopts()</tt> halt argument
processing upon reading an argument (without leading "<tt class=literal>-</tt>") where
none was called for.  This is not considered an error.  So a user might
invoke your program with invalid arguments, without your being notified of
the fact.  However, you can always check to see whether <tt class=literal>@ARGV</tt> has
been completely emptied or not--that is, whether all arguments have been
processed.
If you're using the <tt class=literal>use strict</tt> pragma, which requires you to employ
only lexical variables or else globals that are fully declared, you 
will have to use the double-colon package delimiter or else the 
<tt class=literal>use vars</tt> pragma.  For example:

<div class=programlisting>
<p>
<pre>
use strict;
use vars qw($opt_o $opt_i $opt_D);
use Getopt::Std;
</PRE>
</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch07-SECT2-AUTOID.37">I18N::Collate--Compare 8-bit Scalar Data According to the Current Locale</A></h3>

<div class=programlisting>
<p>
<pre>
use I18N::Collate;
setlocale(LC_COLLATE, $locale);         # uses POSIX::setlocale
$s1 = new I18N::Collate "<tt class=replaceable><i>scalar_data_1</i></tt>";
$s2 = new I18N::Collate "<tt class=replaceable><i>scalar_data_2</i></tt>";
</PRE>
</DIV>

<p class=para>
This module provides you with objects that can be collated (ordered)
according to your national character set, provided that Perl's POSIX
module and the POSIX <i class=emphasis>setlocale</I> (3) and <i class=emphasis>strxfrm</I> (3) functions are
available on your system.  <tt class=literal>$locale</tt> in the <tt class=literal>setlocale()</tt>
invocation shown above must be an argument acceptable to
<i class=emphasis>setlocale</I> (3) on your system.  See the <i class=emphasis>setlocale</I> (3) manpage
for further information.  Available locales depend upon your operating
system.

<p class=para>
Here is an example of collation within the standard `C' locale:

<div class=programlisting>
<p>
<pre>
use I18N::Collate;
setlocale(LC_COLLATE, 'C');
$s1 = new I18N::Collate "Hello";
$s2 = new I18N::Collate "Goodbye";
# following line prints "Hello comes before Goodbye"
print "$$s1 comes before $$s2" if $s2 le $s1;
</PRE>
</DIV>

<p class=para>
The objects returned by the <tt class=literal>new()</tt> method are references.  You can
get at their values by dereferencing them--for example, <tt class=literal>$$s1</tt> and
<tt class=literal>$$s2</tt>.  However, Perl's built-in comparison operators are
overloaded by I18N::Collate, so that they operate on the objects returned
by <tt class=literal>new()</tt> without the necessity of dereference.  The <a href="ch03_02.htm">print</A> line
above dereferences <tt class=literal>$s1</tt> and <tt class=literal>$s2</tt>
to access their values
directly, but does not dereference the variables passed to the <b>le</B>
operator.  The comparison operators you can use in this way are the
following:

<div class=screen>
<p>
<pre>
&lt;   &lt;=  &gt;   &gt;=  ==  !=  &lt;=&gt;
lt  le  gt  ge  eq  ne  cmp
</PRE>
</DIV>

<p class=para>
I18N::Collate uses <tt class=literal>POSIX::setlocale()</tt> and <tt class=literal>POSIX::strxfrm()</tt>
to perform the collation.  Unlike <tt class=literal>strxfrm()</tt>, however,
I18N::Collate handles embedded <tt class=literal>NULL</tt> characters gracefully.

<p class=para>
To determine which locales are available with your operating system,
check whether the command:

<div class=programlisting>
<p>
<pre>
locale -a
</PRE>
</DIV>

<p class=para>
lists them.  You can also check the <i class=emphasis>locale</I> (5) or
<i class=emphasis>nlsinfo</I> manpages, or look at the filenames within one of
these directories (or their subdirectories): <i class=emphasis>/usr/lib/nls</I>,
<i class=emphasis>/usr/share/lib/locale</I>, or <i class=emphasis>/etc/locale</I>.
Not all locales your vendor supports are necessarily installed.  Please consult
your operating system's documentation and possibly your local system
administrator.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch07-SECT2-AUTOID.38">integer--Do Arithmetic in Integer Instead of Double</A></h3>

<div class=programlisting>
<p>
<pre>
use integer;
$x = 10/3;   # $x is now 3, not 3.33333333333333333
</PRE>
</DIV>

<p class=para>
This module tells the compiler to use integer operations
from here to the end of the enclosing block.  On many machines,
this doesn't matter a great deal for most computations, but on those
without floating point hardware, it can make a big difference.

<p class=para>
This pragma does not automatically cast everything to an
integer; it only forces integer operations on arithmetic.  For example:

<div class=programlisting>
<p>
<pre>
use integer; 
print sin(3);           # 0.141120008059867
print sin(3) + 4;       # 4
</PRE>
</DIV>

<p class=para>
You can turn off the integer pragma within an inner block by using the
<tt class=literal>no integer</tt> directive.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch07-SECT2-AUTOID.39">IPC::Open2--Open a Process for Both Reading and Writing</A></h3>

<div class=programlisting>
<p>
<pre>
use IPC::Open2;
# with named filehandles
$pid = open2(\*RDR, \*WTR, $cmd_with_args);
$pid = open2(\*RDR, \*WTR, $cmd, "<tt class=replaceable><i>arg1</i></tt>", "<tt class=replaceable><i>arg2</i></tt>", ...);
</PRE>
</DIV>

<div class=programlisting>
<p>
<pre>
# with object-oriented handles
use FileHandle;
my($rdr, $wtr) = (FileHandle-&gt;new, FileHandle-&gt;new);
$pid = open2($rdr, $wtr, $cmd_with_args);
</PRE>
</DIV>

<p class=para>
<a name="CH07.OPEN21"></A><a name="CH07.OPEN22"></A><a name="CH07.OPEN23"></A><a name="CH07.OPEN24"></A><a name="CH07.OPEN25"></A>The <tt class=literal>open2()</tt> function forks a child process to execute the
specified command.  The first two arguments represent filehandles, one
way or another.  They can be FileHandle objects, or they can be
references to typeglobs, which can either be explicitly named as above,
or generated by the Symbol package, as in the example below.  Whichever
you choose, they represent handles through which your program can read
from the command's standard output and write to the command's standard
input, respectively.  <tt class=literal>open2()</tt> differs from Perl's built-in
<a href="ch03_02.htm">open</A> function in that it allows your program to communicate in
both directions with the child process.

<p class=para>
<tt class=literal>open2()</tt> returns the process ID of the child process.  On failure it
reports a fatal error.

<p class=para>
Here's a simple use of <tt class=literal>open2()</tt> by which you can give the program
user interactive access to the <i class=emphasis>bc</I> (1) command.  (<i class=emphasis>bc</I> is an
arbitrary-precision arithmetic package.)  In this case we use the Symbol
module to produce "anonymous" symbols:

<div class=programlisting>
<p>
<pre>
use IPC::Open2;
use Symbol;
$WTR = gensym();  # get a reference to a typeglob
$RDR = gensym();  # and another one
$pid = open2($RDR, $WTR, 'bc');
while (&lt;STDIN&gt;) {            # read commands from user
     print $WTR $_;          # write a command to bc(1)
     $line = &lt;$RDR&gt;;         # read the output of bc(1)
     print STDOUT "$line";   # send the output to the user
}
</PRE>
</DIV>

<p class=para>
<tt class=literal>open2()</tt> establishes unbuffered output for <tt class=literal>$WTR</tt>.  However,
it cannot control buffering of output from the designated command.
Therefore, be sure to heed the following warning.

<div class=warning>
<p class=warning><blockquote><p><b>WARNING:</B>

<p class=para>
It is extremely easy for your program to hang while waiting
to read the next line of output from the command.  In the example just
shown, <i class=emphasis>bc</I> is known to read and write one line at a time, so it is
safe.  But utilities like <i class=emphasis>sort</I> (1) that read their entire input
stream before offering any output will cause a deadlock when used in the
manner we have illustrated.  You might do something like this instead:

<div class=programlisting>
<p>
<pre>
$pid = open2($RDR, $WTR, 'sort');
while (&lt;STDIN&gt;) {
     print $WTR $_;
}
close($WTR);    # finish sending all output to sort(1)
while (&lt;$RDR&gt;) {     # now read the output of sort(1)
     print STDOUT "$_";
}
</PRE>
</DIV>

<p class=para>
More generally, you may have to use <b>select</B> to determine which file
descriptors are ready to read, and then <a href="ch03_02.htm">sysread</A> for the actual
reading.
</blockquote><p>
</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-7-SECT-1.48">See also</A></h4>

<p class=para>
The IPC::open3 module shows an alternative that handles <tt class=literal>STDERR</tt>
as well.

</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch07-SECT2-AUTOID.40">IPC::Open3--Open a Process for Reading, Writing, and Error Handling</A></h3>

<div class=programlisting>
<p>
<pre>
use IPC::Open3;
$pid = open3($WTR, $RDR, $ERR, $cmd_with_args);
$pid = open3($WTR, $RDR, $ERR, $cmd, "<tt class=replaceable><i>arg1</i></tt>", "<tt class=replaceable><i>arg2</i></tt>", ...);
</PRE>
</DIV>

<p class=para>
IPC::Open3 works like IPC::Open2, with the following differences:

<p>
<ul class=itemizedlist>
<li class=listitem>The first two arguments (<tt class=literal>$WTR</tt> and <tt class=literal>$RDR</tt>) are given in
reverse order compared to IPC::Open2.

<p>
<li class=listitem>A third filehandle can be given, for standard error.  If this argument is
given as <tt class=literal>""</tt>, then <tt class=literal>STDERR</tt> and <tt class=literal>STDOUT</tt> for <tt class=literal>$cmd</tt>
will be on the same filehandle.

<p>
<li class=listitem>If <tt class=literal>$WTR</tt> begins with
<tt class=literal>&lt;&amp;</tt>, then the leading <tt class=literal>&lt;&amp;</tt> is
stripped from the name and the remainder is assumed to be a regular filehandle
for an open file, rather than a reference to a typeglob.
<tt class=literal>open3()</tt> opens this file as <tt class=literal>STDIN</tt> for
<tt class=literal>$cmd</tt> and closes it in the parent.  Likewise, if
<tt class=literal>$RDR</tt> or <tt class=literal>$ERR</tt> begins with
<tt class=literal>&gt;&amp;</tt>, then <tt class=literal>$cmd</tt> directs
<tt class=literal>STDOUT</tt> or <tt class=literal>STDERR</tt> directly to that file
rather than to the parent.

<p>
</UL>
<p class=para>
Warnings given for IPC::Open2 regarding possible program hangs apply to
IPC::Open3 as well.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch07-SECT2-AUTOID.41">lib--Manipulate @INC at Compile-Time</A></h3>

<div class=programlisting>
<p>
<pre>
use lib <tt class=replaceable><i>LIST</i></tt>;
no lib <tt class=replaceable><i>LIST</i></tt>;
</PRE>
</DIV>

<p class=para>
This module simplifies the manipulation of Perl's special <b>@INC</B>
variable at compile-time.  It is used to add extra directories
to Perl's search path so that later <a href="ch03_02.htm">use</A> or <a href="ch03_02.htm">require</A> statements
will find modules not located along Perl's default search path.

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-7-SECT-1.49">Adding directories</A></h4>

<p class=para>
Directories itemized in <tt class=replaceable><i>LIST</i></tt> are added to the start of the
Perl search path.  Saying:

<div class=programlisting>
<p>
<pre>
use lib <tt class=replaceable><i>LIST</i></tt>;
</PRE>
</DIV>

<p class=para>
is <i class=emphasis>almost</I> the same as saying:

<div class=programlisting>
<p>
<pre>
BEGIN { unshift(@INC, <tt class=replaceable><i>LIST</i></tt> ) }
</PRE>
</DIV>

<p class=para>
The difference is that, for each directory in <tt class=replaceable><i>LIST</i></tt> (called
<tt class=literal>$dir</tt> here), the lib module also
checks to see whether a directory called <tt class=literal>$dir</tt>/<tt class=literal>$archname</tt>/<i class=emphasis>auto</I> exists,
where <tt class=literal>$archname</tt> is derived from Perl's configuration information:

<div class=programlisting>
<p>
<pre>
use Config;
$archname = $Config{'archname'};
</PRE>
</DIV>

<p class=para>
If so, the <tt class=literal>$dir/$archname</tt> directory is assumed to be an
architecture-specific directory and is added to <b>@INC</B> in front of <tt class=literal>$dir</tt>.

<p class=para>
If <tt class=replaceable><i>LIST</i></tt> includes both <tt class=literal>$dir</tt> and
<tt class=literal>$dir</tt>/<tt class=literal>$archname</tt>, then
<tt class=literal>$dir</tt>/<tt class=literal>$archname</tt> will be added to <b>@INC</B> twice (assuming
<tt class=literal>$dir</tt>/<tt class=literal>$archname</tt>/<i class=emphasis>auto</I>
exists).

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-7-SECT-1.50">Deleting directories</A></h4>

<p class=para>
You should normally only add directories to <b>@INC</B>.  If you need to
delete directories from <b>@INC</B>, take care to delete only those you
yourself added.  Otherwise, be certain that the directories you delete are
not needed by other modules directly or indirectly invoked by your script.
Other modules may have added directories they need for correct operation.

<p class=para>
By default the statement:

<div class=programlisting>
<p>
<pre>
no lib <tt class=replaceable><i>LIST</i></tt>
</PRE>
</DIV>

<p class=para>
deletes the first instance of
each named directory from <b>@INC</B>.  To delete multiple instances of the
same name from <b>@INC</B> you can specify the name multiple times.

<p class=para>
To delete all instances of all the specified names from
<b>@INC</B> you can specify <tt class=literal>:ALL</tt> as the first parameter of
<tt class=replaceable><i>LIST</i></tt>.  For example:

<div class=programlisting>
<p>
<pre>
no lib qw(:ALL .);
</PRE>
</DIV>

<p class=para>
For each directory in <tt class=replaceable><i>LIST</i></tt> (called
<tt class=literal>$dir</tt> here) the lib module also checks to see whether a
directory called
<tt class=literal>$dir</tt>/<tt class=literal>$archname</tt>/<i class=emphasis>auto</I>
exists.  If so, the <tt class=literal>$dir</tt>/<tt class=literal>$archname</tt>
directory is assumed to be a corresponding architecture-specific directory and
is also deleted from <b>@INC</B>.

<p class=para>
If <tt class=replaceable><i>LIST</i></tt> includes both <tt class=literal>$dir</tt> and
<tt class=literal>$dir</tt>/<tt class=literal>$archname</tt> then
<tt class=literal>$dir</tt>/<tt class=literal>$archname</tt> will be deleted from
<b>@INC</B> twice (assuming
<tt class=literal>$dir</tt>/<tt class=literal>$archname</tt>/<i class=emphasis>auto</I>
exists).

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-7-SECT-1.51">Restoring the original directory list</A></h4>

<p class=para>
When the lib module is first loaded, it records the current value of <b>@INC</B> in an array <tt class=literal>@lib::ORIG_INC</tt>.  To
restore <b>@INC</B> to that value you can say:

<div class=programlisting>
<p>
<pre>
@INC = @lib::ORIG_INC;
</PRE>
</DIV>

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-7-SECT-1.52">See also</A></h4>

<p class=para>
The AddINC module (not in the standard Perl library, but available from
CPAN) deals with paths relative to the source file.

</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch07-SECT2-AUTOID.42">Math::BigFloat--Arbitrary-Length, Floating-Point Math Package</A></h3>

<div class=programlisting>
<p>
<pre>
use Math::BigFloat;
$f = Math::BigFloat-&gt;new($string);
# <tt class=replaceable><i>NSTR</i></tt> is a number string; <tt class=replaceable><i>SCALE</i></tt> is an integer value.
# In all following cases $f remains unchanged.
# All methods except fcmp() return a number string.
$f-&gt;fadd(<tt class=replaceable><i>NSTR</i></tt>);          # return sum of <tt class=replaceable><i>NSTR</i></tt> and $f
$f-&gt;fsub(<tt class=replaceable><i>NSTR</i></tt>);          # return $f minus <tt class=replaceable><i>NSTR</i></tt>
$f-&gt;fmul(<tt class=replaceable><i>NSTR</i></tt>);          # return $f multiplied by <tt class=replaceable><i>NSTR</i></tt>
$f-&gt;fdiv(<tt class=replaceable><i>NSTR</i></tt>[,<tt class=replaceable><i>SCALE</i></tt>]);  # return $f divided by <tt class=replaceable><i>NSTR</i></tt> to <tt class=replaceable><i>SCALE</i></tt> places
$f-&gt;fneg();              # return negative of $f
$f-&gt;fabs();              # return absolute value of $f
$f-&gt;fcmp(<tt class=replaceable><i>NSTR</i></tt>);          # compare $f to <tt class=replaceable><i>NSTR</i></tt>; see below for return value
$f-&gt;fround(<tt class=replaceable><i>SCALE</i></tt>);       # return rounded value of $f to <tt class=replaceable><i>SCALE</i></tt> digits
$f-&gt;ffround(<tt class=replaceable><i>SCALE</i></tt>);      # return rounded value of $f at <tt class=replaceable><i>SCALEth</i></tt> place
$f-&gt;fnorm();             # return normalization of $f
$f-&gt;fsqrt([<tt class=replaceable><i>SCALE</i></tt>]);      # return sqrt of $f to <tt class=replaceable><i>SCALE</i></tt> places
</PRE>
</DIV>

<p class=para>
This module allows you to use floating-point numbers of arbitrary length.
For example:

<div class=programlisting>
<p>
<pre>
$float = new Math::BigFloat "2.123123123123123123123123123123123";
</PRE>
</DIV>

<p class=para>
Number strings (<tt class=replaceable><i>NSTR</i></tt>s) have the form, <tt class=literal>/[+-]\d*\.?\d*E[+-]\d+/</tt>.
Embedded white space is ignored, so that the number strings used in the
following two lines are identical:

<div class=programlisting>
<p>
<pre>
$f = Math::BigFloat-&gt;new("-20.0    0732");
$g = $f-&gt;fmul("-20.00732");
</PRE>
</DIV>

<p class=para>
The return value <tt class=literal>NaN</tt> indicates either that an input parameter was "Not
a Number", or else that you tried to divide by zero or take the square
root of a negative number.  The <tt class=literal>fcmp()</tt> method returns <tt class=literal>-1</tt>,
<tt class=literal>0</tt>, or <tt class=literal>1</tt> depending on whether <tt class=literal>$f</tt> is less than,
equal to, or greater than the number string given as an argument.  If
the number string is undefined or null, the undefined value is returned.

<p class=para>
If <tt class=replaceable><i>SCALE</i></tt> is unspecified,
division is computed to the number of digits given by:

<div class=programlisting>
<p>
<pre>
max($div_scale, length(dividend)+length(divisor))
</PRE>
</DIV>

<p class=para>
A similar default scale value is computed for square roots.

<p class=para>
When you use this module, Perl's basic math operations are overloaded
with routines from Math::BigFloat.  Therefore, you don't have to employ the
methods shown above to multiply, divide, and so on.  You can rely instead
on the usual operators.  Given this code:

<div class=programlisting>
<p>
<pre>
$f = Math::BigFloat-&gt;new("20.00732");
$g = Math::BigFloat-&gt;new("1.7");
</PRE>
</DIV>

<p class=para>
the following six lines all yield the corresponding values for <tt class=literal>$h</tt>:

<div class=programlisting>
<p>
<pre>
$h = -20.00732 * 1.7;   # 34.012444 (ordinary math--$h is not an object)
$h = $f * $g;           # "34.012444" ($h is now a BigFloat object)
$h = $f * 1.7;          # "34.012444" ($h is now a BigFloat object)
$h = -20.00732 * $g;    # "34.012444" ($h is now a BigFloat object)
$h = $f-&gt;fmul($g);      # "+34012444E-6" ($h is now a BigFloat object)
$h = $f-&gt;fmul(1.7);     # "+34012444E-6" ($h is now a BigFloat object)
</PRE>
</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch07-SECT2-AUTOID.43">Math::BigInt--Arbitrary-Length Integer Math Package</A></h3>

<div class=programlisting>
<p>
<pre>
use Math::BigInt;
$i = Math::BigInt-&gt;new($string);
# <tt class=replaceable><i>BINT</i></tt> is a big integer string; in all following cases $i remains unchanged.
# All methods except bcmp() return a big integer string, or strings.
$i-&gt;bneg;       # return negative of $i
$i-&gt;babs        # return absolute value of $i
$i-&gt;bcmp(<tt class=replaceable><i>BINT</i></tt>)  # compare $i to <tt class=replaceable><i>BINT</i></tt>; see below for return value
$i-&gt;badd(<tt class=replaceable><i>BINT</i></tt>)  # return sum of <tt class=replaceable><i>BINT</i></tt> and $i
$i-&gt;bsub(<tt class=replaceable><i>BINT</i></tt>)  # return $i minus <tt class=replaceable><i>BINT</i></tt>
$i-&gt;bmul(<tt class=replaceable><i>BINT</i></tt>)  # return $i multiplied by <tt class=replaceable><i>BINT</i></tt>
$i-&gt;bdiv(<tt class=replaceable><i>BINT</i></tt>)  # return $i divided by <tt class=replaceable><i>BINT</i></tt>; see below for return value
$i-&gt;bmod(<tt class=replaceable><i>BINT</i></tt>)  # return $i modulus <tt class=replaceable><i>BINT</i></tt>
$i-&gt;bgcd(<tt class=replaceable><i>BINT</i></tt>)  # return greatest common divisor of $i and <tt class=replaceable><i>BINT</i></tt>
$i-&gt;bnorm       # return normalization of $i
</PRE>
</DIV>

<p class=para>
This module allows you to use integers of arbitrary length.  Integer
strings (<tt class=replaceable><i>BINT</i></tt>s) have the form <tt class=literal>/^\s*[+-]?[\d\s]+$/</tt>.
Embedded whitespace is ignored.  Output values are always in the
canonical form: <tt class=literal>/^[+-]\d+$/</tt> .  For example:

<div class=programlisting>
<p>
<pre>
'+0'                # canonical zero value
'   -123 123 123'   # canonical value:  '-123123123'
'1 23 456 7890'     # canonical value:  '+1234567890'
</PRE>
</DIV>

<p class=para>
The return value <tt class=literal>NaN</tt> results when an input argument is not a
number, or when a divide by zero is attempted.  The <tt class=literal>bcmp()</tt> method
returns <tt class=literal>-1</tt>, <tt class=literal>0</tt>, or <tt class=literal>1</tt> depending on whether
<tt class=literal>$f</tt> is less than, equal to, or greater than the number string
given as an argument.  If the number string is undefined or null, the
undefined value is returned.  In a list context the <tt class=literal>bdiv()</tt> method
returns a two-element array containing the quotient of the division and
the remainder; in a scalar context only the quotient is returned.

<p class=para>
When you use this module, Perl's basic math operations are overloaded
with routines from Math::BigInt.  Therefore, you don't have to employ the
methods shown above to multiply, divide, and so on.  You can rely instead
on the usual operators.  Given this code:

<div class=programlisting>
<p>
<pre>
$a = Math::BigInt-&gt;new("42 000 000 000 000");
$b = Math::BigInt-&gt;new("-111111");
</PRE>
</DIV>

<p class=para>
the following five lines yield these string values for <tt class=literal>$c</tt>:

<div class=programlisting>
<p>
<pre>
$c = 42000000000000 - -111111;
                          # 42000000111111; ordinary math--$c is a double
$c = $a - $b;             # "+42000000111111"; $c is now a BigInt object
$c = $a - -111111;        # "+42000000111111"; $c is now a BigInt object
$c = $a-&gt;bsub($b);        # "+42000000111111"; $c is just a string
$c = $a-&gt;bsub(-111111);   # "+42000000111111"; $c is just a string
</PRE>
</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch07-SECT2-AUTOID.44">Math::Complex--Complex Numbers Package</A></h3>

<div class=programlisting>
<p>
<pre>
use Math::Complex;
$cnum = new Math::Complex;
</PRE>
</DIV>

<p class=para>
When you use this module, complex numbers declared as:

<div class=programlisting>
<p>
<pre>
$cnum = Math::Complex-&gt;new(1, 1);
</PRE>
</DIV>

<p class=para>
can be manipulated with overloaded math operators.  The operators:

<div class=screen>
<p>
<pre>
+ - * / neg ~ abs cos sin exp sqrt
</PRE>
</DIV>

<p class=para>
are supported, and return references to new objects.  Also,

<div class=screen>
<p>
<pre>
"" (stringify)
</PRE>
</DIV>

<p class=para>
is available to convert complex numbers to strings.  In addition, the
methods:

<div class=screen>
<p>
<pre>
Re Im arg
</PRE>
</DIV>

<p class=para>
are available.  Given a complex number, <tt class=literal>$cnum</tt>:

<div class=programlisting>
<p>
<pre>
$cnum = Math::Complex-&gt;new($x, $y);
</PRE>
</DIV>

<p class=para>
then <tt class=literal>$cnum-&gt;Re()</tt> returns <tt class=literal>$x</tt>,
<tt class=literal>$cnum-&gt;Im()</tt> returns <tt class=literal>$y</tt>, and
<tt class=literal>$cnum-&gt;arg()</tt> returns <tt class=literal>atan2($y, $x)</tt>.

<p class=para>
<tt class=literal>sqrt()</tt>, which should return two roots, returns only one.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch07-SECT2-AUTOID.45">NDBM_File--Tied Access to NDBM Files</A></h3>

<div class=programlisting>
<p>
<pre>
use Fcntl;
use NDBM_File;
tie(%hash, NDBM_File, 'Op.dbmx', O_RDWR|O_CREAT, 0644);
# read/writes of %hash are now read/writes of the file, Op.dmx.pag
untie %hash;
</PRE>
</DIV>

<p class=para>
See Perl's built-in <a href="ch03_02.htm">tie</A> function.  Also see under DB_File in this
chapter for a description of a closely related module.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch07-SECT2-AUTOID.46">Net::Ping--Check Whether a Host Is Online</A></h3>

<div class=programlisting>
<p>
<pre>
use Net::Ping;
$hostname = 'elvis';       # host to check
$timeout = 10;             # how long to wait for a response
print "elvis is alive\n"    if pingecho($hostname, $timeout);
</PRE>
</DIV>

<p class=para>
<tt class=literal>pingecho()</tt> uses a TCP echo (not an ICMP one) to determine whether
a remote host is reachable.  This is usually adequate to tell whether a remote
host is available to <i class=emphasis>rsh</I> (1), <i class=emphasis>ftp</I> (1), or <i class=emphasis>telnet</I> (1).

<p class=para>
The parameters for <tt class=literal>pingecho()</tt> are:

<p>
<dl class=variablelist>
<dt class=varlistentry>hostname<dd>

<p class=para>
The remote host to check, specified either as a hostname or as an IP address.

<p>
<dt class=varlistentry>timeout<dd>

<p class=para>
The timeout in seconds.  If not specified it will default to 5 seconds.</DL>
<div class=warning>
<p class=warning><blockquote><p><b>WARNING:</B>

<p class=para>
<tt class=literal>pingecho()</tt> uses <a href="ch03_02.htm">alarm</A> to implement the timeout, so don't set
another alarm while you are using it.
</blockquote><p>
</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch07-SECT2-AUTOID.47">ODBM_File--Tied Access to ODBM Files</A></h3>

<div class=programlisting>
<p>
<pre>
use Fcntl;
use ODBM_File;
tie(%hash, ODBM_File, 'Op.dbmx', O_RDWR|O_CREAT, 0644);
# read/writes of %hash are now read/writes of the file, Op.dmx
untie %h;
</PRE>
</DIV>

<p class=para>
See Perl's built-in <a href="ch03_02.htm">tie</A> function.  Also see under DB_File in this
chapter for a description of a closely related module.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch07-SECT2-AUTOID.48">overload--Overload Perl's Mathematical Operations</A></h3>

<div class=programlisting>
<p>
<pre>
# In the SomeThing module:
package SomeThing;
use overload
    '+' =&gt; \&amp;myadd,
    '-' =&gt; \&amp;mysub;
# In your other code:
use SomeThing;
$a = SomeThing-&gt;new(57);
$b=5+$a;
if (overload::Overloaded $b) {...}  # is $b subject to overloading?
$strval = overload::StrVal $b;
</PRE>
</DIV>

<p class=para>
<a name="CH07.OVER1"></A><a name="CH07.OVER2"></A><a name="CH07.OVER3"></A><i class=emphasis>Caveat Scriptor:</I>  This interface is the subject of ongoing
research.  Feel free to play with it, but don't be too surprised if the
interface changes subtly (or not so subtly) as it is developed further.
If you rely on it for a mission-critical application, please be sure to
write some good regression tests.  (Or perhaps in this case we should
call them "progression" tests.)

<p class=para>
This module allows you to substitute class methods or your own subroutines
for standard Perl operators.  For example, the code:

<div class=programlisting>
<p>
<pre>
package Number;
use overload
    "+"  =&gt; \&amp;add,
    "*=" =&gt; "muas";
</PRE>
</DIV>

<p class=para>
declares function <tt class=literal>add()</tt> for addition, and method
<tt class=literal>muas()</tt> in the Number class (or one of its base classes) for
the assignment form <tt class=literal>*=</tt> of multiplication.

<p class=para>
Arguments to <tt class=literal>use overload</tt> come in key/value pairs.  Legal values
are values permitted inside a <tt class=literal>&amp;{ ... }</tt> call, so the name of a
subroutine, a reference to a subroutine, or an anonymous subroutine will
all work.  Legal keys are listed below.

<p class=para>
The subroutine <tt class=literal>add()</tt> will be called to execute
<tt class=literal>$a+$b</tt> if <tt class=literal>$a</tt> is a reference to an object
blessed into the package <tt class=literal>Number</tt>, or if <tt class=literal>$a</tt>
is not an object from a package with overloaded addition, but
<tt class=literal>$b</tt> is a reference to a <tt class=literal>Number</tt>.  It can
also be called in other situations, like <tt class=literal>$a+=7</tt>, or
<tt class=literal>$a++</tt>.  See the section on "Autogeneration".

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-7-SECT-1.54">Calling conventions for binary operations</A></h4>

<p class=para>
The functions specified with the <tt class=literal>use overload</tt> directive are
typically called with three arguments.  (See the "No Method" section later in
this chapter for the four-argument case.)  If the corresponding operation is
binary, then the first two arguments are the two arguments of the operation.
However, due to general object-calling conventions, the first argument should
always be an object in the package, so in the situation of
<tt class=literal>7+$a</tt>, the order of the arguments gets interchanged before the
method is called.  It probably does not matter when implementing the addition
method, but whether the arguments are reversed is vital to the subtraction
method.  The method can query this information by examining the third argument,
which can take three different values:

<p>
<dl class=variablelist>
<dt class=varlistentry>false (0)<dd>

<p class=para>
The order of arguments is as in the current operation.

<p>
<dt class=varlistentry>true (1)<dd>

<p class=para>
The arguments are reversed.

<p>
<dt class=varlistentry>undefined<dd>

<p class=para>
The current operation is an assignment variant (as in
<tt class=literal>$a+=7</tt>), but the usual function is called instead.  This additional
information can be used to generate some optimizations.</DL>
</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-7-SECT-1.55">Calling conventions for unary operations</A></h4>

<p class=para>
Unary operations are considered binary operations with the second argument being
<a href="ch03_02.htm">undef</A>.  Thus the function that overloads
<tt class=literal>{"++"}</tt> is called with arguments <tt class=literal>($a, undef,
``)</tt> when <tt class=literal>$a</tt>++ is executed.

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-7-SECT-1.56">Overloadable operations</A></h4>

<p class=para>
The following operations can be specified with <tt class=literal>use overload</tt>:

<p>
<ul class=itemizedlist>
<li class=listitem><i class=emphasis>Arithmetic operations</I>

<div class=screen>
<p>
<pre>
+    -    *    /    %    **    &lt;&lt;    &gt;&gt;    x    .
+=   -=   *=   /=   %=   **=   &lt;&lt;=   &gt;&gt;=   x=   .=
</PRE>
</DIV>

<p class=para>
For these operations a substituted non-assignment variant can be called if
the assignment variant is not available.  Methods for operations "<tt class=literal>+</tt>",
"<tt class=literal>-</tt>", "<tt class=literal>+=</tt>", and "<tt class=literal>-=</tt>" can be called to automatically generate
increment and decrement methods.  The operation "<tt class=literal>-</tt>" can be used to
autogenerate missing methods for unary minus or <tt class=literal>abs()</tt>.

<p>
<li class=listitem><i class=emphasis>Comparison operations</I>

<div class=screen>
<p>
<pre>
&lt;   &lt;=  &gt;   &gt;=  ==  !=  &lt;=&gt;
lt  le  gt  ge  eq  ne  cmp
</PRE>
</DIV>

<p class=para>
The <tt class=literal>&lt;=&gt;</tt> operator can substitute for any of the other numeric compare
operators, and <b>cmp</B> can substitute for any missing string compare
operators.  When using <a href="ch03_02.htm">sort</A> on
arrays, <tt class=literal>cmp</tt> is used to compare values subject to <tt class=literal>use overload</tt>.

<p>
<li class=listitem><i class=emphasis>Bit and unary operations</I>

<div class=screen>
<p>
<pre>
&amp;   ^   |   neg   !   ~
</PRE>
</DIV>

<p class=para>
"<tt class=literal>neg</tt>" stands for unary minus.  If the method for <tt class=literal>neg</tt> is not
specified, it can be autogenerated using the method for subtraction.

<p>
<li class=listitem><i class=emphasis>Increment and decrement</I>

<div class=screen>
<p>
<pre>
++   --
</PRE>
</DIV>

<p class=para>
If undefined, addition and subtraction methods can be
used instead.  These operations are called both in prefix and
postfix form.

<p>
<li class=listitem><i class=emphasis>Transcendental functions</I>

<div class=screen>
<p>
<pre>
atan2   cos   sin   exp   abs   log   sqrt
</PRE>
</DIV>

<p class=para>
If <tt class=literal>abs</tt> is unavailable, it can be autogenerated using methods
for "<tt class=literal>&lt;</tt>" or "<tt class=literal>&lt;=&gt;</tt>" combined with either unary minus or subtraction.

<p>
<li class=listitem><i class=emphasis>Boolean, string and numeric conversion</I>

<div class=screen>
<p>
<pre>
bool   ""   0+
</PRE>
</DIV>

<p class=para>
(Yes, that really is two double-quotes in a row.)  If one or two of these
operations are unavailable, the remaining ones can be used instead.
<tt class=literal>bool</tt> is used in the flow control operators (like <b>while</B> and <b>if</B>) and for the
trinary "<tt class=literal>?:</tt>" operation.  These functions can return any
arbitrary Perl value.  If the corresponding operation for this value is
overloaded, too, then that operation will be called again with this value.

<p>
<li class=listitem><i class=emphasis>Special</I>

<div class=screen>
<p>
<pre>
nomethod  fallback  =
</PRE>
</DIV>

<p class=para>
The following sections provide explanation.

<p>
</UL>
<p class=para>
Three keys are recognized by Perl that are not covered by the above
descriptions: "<tt class=literal>nomethod</tt>",
"<tt class=literal>fallback</tt>", and
"<tt class=literal>=</tt>".

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-7-SECT-1.57">No method</A></h4>

<p class=para>
"<tt class=literal>nomethod</tt>" should be followed by a reference to a
function of four parameters.  If defined, it is called when the overloading
mechanism cannot find a method for some operation.  The first three arguments of
this function coincide with the arguments for the corresponding method if it
were found; the fourth argument is the symbol corresponding to the missing
method.  If several methods are tried, the last one is used.  

<p class=para>
For example,
<tt class=literal>1-$a</tt> can be equivalent to:

<div class=programlisting>
<p>
<pre>
&amp;nomethodMethod($a, 1, 1, "-")
</PRE>
</DIV>

<p class=para>
if the pair <tt class=literal>`nomethod` =&gt; `nomethodMethod`</tt> was specified in the <tt class=literal>use
overload</tt> directive.

<p class=para>
If some operation cannot be resolved and there is no function assigned to
"<tt class=literal>nomethod</tt>", then an exception will be raised via
<a href="ch03_02.htm">die</A> unless
"<tt class=literal>fallback</tt>" was specified as a key in a
<tt class=literal>use overload</tt> directive.

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-7-SECT-1.58">Fallback</A></h4>

<p class=para>
The "<tt class=literal>fallback</tt>" key governs what to do if a method for a
particular operation is not found.  Three different cases are possible depending
on the value of "<tt class=literal>fallback</tt>":

<p>
<dl class=variablelist>
<dt class=varlistentry>undefined<dd>

<p class=para>
Perl tries to use a substituted method (see the section later on
"Autogeneration".  If this fails, it then tries to call the method
specified for "<tt class=literal>nomethod</tt>"; if missing, an exception will be
raised.

<p>
<dt class=varlistentry>true<dd>

<p class=para>
The same as for the undefined value, but no exception is raised.  Instead,
Perl silently reverts to what it would have done were there no <tt class=literal>use
overload</tt> present.

<p>
<dt class=varlistentry>defined, but false<dd>

<p class=para>
No autogeneration is tried.  Perl tries to call the method specified
for "<tt class=literal>nomethod</tt>", and if this is missing, raises an exception.</DL>
</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-7-SECT-1.59">Copy constructor</A></h4>

<p class=para>
The value for "<tt class=literal>=</tt>" is a reference to a function with three
arguments; that is, it looks like the other values in <tt class=literal>use
overload</tt>.  However, it does not overload the Perl assignment
operator.  This would rub Camel hair the wrong way.

<p class=para>
This operation is called when a <i class=emphasis>mutator</I> is applied
to a reference that shares its object with some other reference, such
as:

<div class=programlisting>
<p>
<pre>
$a=$b;
$a++;
</PRE>
</DIV>

<p class=para>
In order to change <tt class=literal>$a</tt> but not <tt class=literal>$b</tt>, a copy
of <tt class=literal>$$a</tt> is made, and <tt class=literal>$a</tt> is assigned a
reference to this new object.  This operation is done during execution of the
<tt class=literal>$a++</tt>, and not during the assignment, (so before the increment
<tt class=literal>$$a</tt> coincides with <tt class=literal>$$b</tt>).  This is only
done if <tt class=literal>++</tt> is expressed via a method for
"<tt class=literal>++</tt>" or "<tt class=literal>+=</tt>".
Note that if this operation is expressed via "<tt class=literal>+</tt>" (a nonmutator):

<div class=programlisting>
<p>
<pre>
$a=$b;
$a=$a+1;
</PRE>
</DIV>

<p class=para>
then <tt class=literal>$a</tt> does not reference a new copy of <tt class=literal>$$a</tt>, since
<tt class=literal>$$a</tt> does not
appear as an lvalue when the above code is executed.

<p class=para>
If the copy constructor is required during the execution of some mutator, but a
method for "<tt class=literal>=</tt>" was not specified, it can be
autogenerated as a string copy if the object is a plain scalar.

<p class=para>
As an example, the actually executed code for:

<div class=programlisting>
<p>
<pre>
$a=$b;
# Something else which does not modify $a or $b...
++$a;
</PRE>
</DIV>

<p class=para>
may be:

<div class=programlisting>
<p>
<pre>
$a=$b;
# Something else which does not modify $a or $b...
$a = $a-&gt;clone(undef, "");
$a-&gt;incr(undef, "");
</PRE>
</DIV>

<p class=para>
This assumes <tt class=literal>$b</tt> is subject to overloading,
"<tt class=literal>++</tt>" was overloaded with
<tt class=literal>\&amp;incr</tt>, and "<tt class=literal>=</tt>" was
overloaded with <tt class=literal>\&amp;clone</tt>.

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-7-SECT-1.60">Autogeneration</A></h4>

<p class=para>
If a method for an operation is not found, and the value for
"<tt class=literal>fallback</tt>" is true or undefined, Perl tries to
autogenerate a substitute method for the missing operation based on the defined
operations.  Autogenerated method substitutions are possible for the following
operations:

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>Assignment forms of arithmetic operations</I><dd>

<p class=para>
<tt class=literal>$a+=$b</tt> can use the method for
"<tt class=literal>+</tt>" if the method for
"<tt class=literal>+=</tt>" is not defined.

<p>
<dt class=varlistentry><i class=emphasis>Conversion operations</I> <dd>

<p class=para>
String, numeric, and Boolean conversion are calculated in terms of one
another if not all of them are defined.

<p>
<dt class=varlistentry><i class=emphasis>Increment and decrement</I><dd>

<p class=para>
The <tt class=literal>++$a</tt> operation can be expressed in terms of
<tt class=literal>$a+=1</tt> or <tt class=literal>$a+1</tt>, and
<tt class=literal>$a- -</tt> in terms of <tt class=literal>$a-=1</tt>
and <tt class=literal>$a-1</tt>.

<p>
<dt class=varlistentry><tt class=literal>abs($a)</tt><dd>

<p class=para>
Can be expressed in terms of <tt class=literal>$a&lt;0</tt> and <tt class=literal>-$a</tt> (or <tt class=literal>0-$a</tt>).

<p>
<dt class=varlistentry><i class=emphasis>Unary minus</I><dd>

<p class=para>
Can be expressed in terms of subtraction.

<p>
<dt class=varlistentry><i class=emphasis>Concatenation</I><dd>

<p class=para>
Can be expressed in terms of string conversion.

<p>
<dt class=varlistentry><i class=emphasis>Comparison operations</I> <dd>

<p class=para>
Can be expressed in terms of its three-valued counterpart: either
<tt class=literal>&lt;=&gt;</tt> or <tt class=literal>cmp</tt>:

<div class=screen>
<p>
<pre>
&lt;,  &gt;,  &lt;=, &gt;=, ==, !=    <i class=emphasis>in terms of </I>&lt;=&gt;
lt, gt, le, ge, eq, ne    <i class=emphasis>in terms of </I>cmp
</PRE>
</DIV>

<p>
<dt class=varlistentry><i class=emphasis>Copy operator</I><dd>

<p class=para>
Can be expressed in terms of an assignment to the dereferenced value if this
value is a scalar and not a reference.</DL>
<div class=warning>
<p class=warning><blockquote><p><b>WARNING:</B>

<p class=para>
One restriction for the comparison operation is that even if, for example,
<tt class=literal>cmp</tt> returns a blessed reference, the autogenerated <tt class=literal>lt</tt>
function will produce only a standard logical value based on the
numerical value of the result of <tt class=literal>cmp</tt>.  In particular, a working
numeric conversion is needed in this case (possibly expressed in terms of
other conversions).

<p class=para>
Similarly, <tt class=literal>.=</tt>  and <tt class=literal>x=</tt> operators lose their overloaded
properties if the string conversion substitution is applied.

<p class=para>
When you <a href="ch03_02.htm">chop</A> an object that is subject to overloaded operations, the
object is promoted to a string and its overloading properties are lost.
The same can happen with other operations as well.
</blockquote><p>
</DIV>

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-7-SECT-1.62">Run-time overloading</A></h4>

<p class=para>
Since all <a href="ch03_02.htm">use</A> directives are executed at compile-time, the only way to
change overloading during run-time is:

<div class=programlisting>
<p>
<pre>
eval 'use overload "+" =&gt; \&amp;addmethod';
</PRE>
</DIV>

<p class=para>
You can also say:

<div class=programlisting>
<p>
<pre>
eval 'no overload "+", "--", "&lt;="';
</PRE>
</DIV>

<p class=para>
although the use of these constructs during run-time is questionable.

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-7-SECT-1.63">Public functions</A></h4>

<p class=para>
The <tt class=literal>overload</tt> module provides the following public functions:

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>overload::StrVal(</tt><tt class=replaceable><i>arg</i></tt><tt class=literal>)</tt><dd>

<p class=para>
Gives string value of <tt class=replaceable><i>arg</i></tt> if stringify overloading is absent.

<p>
<dt class=varlistentry><tt class=literal>overload::Overloaded(</tt><tt class=replaceable><i>arg</i></tt><tt class=literal>)</tt><dd>

<p class=para>
Returns true if <tt class=replaceable><i>arg</i></tt> is subject to overloading of some operations.

<p>
<dt class=varlistentry><tt class=literal>overload::Method(</tt><tt class=replaceable><i>obj</i></tt>, <tt class=replaceable><i>op</i></tt>)<dd>

<p class=para>
Returns the undefined value or a reference to the method that implements
<tt class=replaceable><i>op</i></tt>.</DL>
</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-7-SECT-1.64">Diagnostics</A></h4>

<p class=para>
When Perl is run with the <tt class=literal>-Do</tt> switch or its equivalent, overloading
induces diagnostic messages.

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-7-SECT-1.0.65">Bugs</A></h4>

<p class=para>
Because it is used for overloading, the per-package associative array
<tt class=literal>%OVERLOAD</tt> now has a special meaning in Perl.

<p class=para>
Overloading is not yet inherited via the <b>@ISA</B> tree, though
individual methods may be.

</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch07-SECT2-AUTOID.49">POSIX--Perl Interface to IEEE Std 1003.1</A></h3>

<div class=programlisting>
<p>
<pre>
use POSIX;                        # import all symbols
use POSIX qw(setsid);             # import one symbol
use POSIX qw(:errno_h :fcntl_h);  # import sets of symbols
printf "EINTR is %d\n", EINTR;
$sess_id = POSIX::setsid();
$fd = POSIX::open($path, O_CREAT|O_EXCL|O_WRONLY, 0644);
# note: $fd is a filedescriptor, *NOT* a filehandle
</PRE>
</DIV>

<p class=para>
<a name="CH07.POSIX1"></A>The POSIX module permits you to access all (or nearly all) the standard
POSIX 1003.1 identifiers.  Many of these identifiers have been given
Perl-ish interfaces.

<p class=para>
This description gives a condensed list of the features available in the POSIX
module.  Consult your operating system's manpages for general information on
most features.  Consult the appropriate Perl built-in function whenever a
POSIX routine is noted as being identical to the function.

<p class=para>
The "Classes" section later in this chapter describes some classes for signal
objects, TTY objects, and other miscellaneous objects.  The "Functions" section
later in this chapter describes POSIX functions from the 1003.1 specification.
The remaining sections list various constants and macros in an organization that
roughly follows IEEE Std 1003.1b-1993.

<div class=warning>
<p class=warning><blockquote><p><b>WARNING:</B>

<p class=para>
A few functions are not implemented because they are C-specific.[4]
If you attempt to call one of these functions, it will print a message
telling you that it isn't implemented, and will suggest using the Perl
equivalent, should one exist.  For example, trying to access the
<tt class=literal>setjmp()</tt> call will elicit the message: "<tt class=literal>setjmp() is
C-specific: use eval {} instead</tt>".

<blockquote class=footnote>
<p class=para>[4] 
The 1003.1 standard wisely recommends that other language bindings
should avoid duplicating the idiosyncracies of C.  This is something we
were <i class=emphasis>glad</I> to comply with.
</blockquote>
<p class=para>
Furthermore, some vendors will claim 1003.1 compliance without passing the POSIX
Compliance Test Suites (PCTS).  For example, one vendor may not define
<tt class=literal>EDEADLK</tt>, or may incorrectly define the semantics of the
<i class=emphasis>errno</I> values set by <i class=emphasis>open</I> (2).
Perl does not attempt to verify POSIX compliance.  That means you can currently
say "<tt class=literal>use POSIX</tt>" successfully, and then later in
your program find that your vendor has been lax and there's no usable
<tt class=literal>ICANON</tt> macro after all.  This could be construed to be a bug.
Whose bug, we won't venture to guess.
</blockquote><p>
</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-7-SECT-1.66">Classes</A></h4>

<p class=para>
<b>POSIX::SigAction</B>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>new</tt><dd>

<p class=para>
Creates a new POSIX::SigAction object that corresponds to the C
<tt class=literal>struct sigaction</tt>.  This object will be destroyed automatically when
it is no longer needed.  The first parameter is the fully qualified name of a
subroutine which is a signal handler.  The second parameter is a
POSIX::SigSet
object.  The third parameter contains the <tt class=literal>sa_flags</tt>.

<div class=programlisting>
<p>
<pre>
$sigset = POSIX::SigSet-&gt;new;
$sigaction = POSIX::SigAction-&gt;new('main::handler', $sigset,
                 &amp;POSIX::SA_NOCLDSTOP);
</PRE>
</DIV>

<p class=para>
This POSIX::SigAction
object should be used with the POSIX::sigaction()
function.</DL>
<p class=para>
<b>POSIX::SigSet</B>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>new</tt><dd>

<p class=para>
Creates a new SigSet object.
This object will be destroyed automatically
when it is no longer needed.  Arguments may be supplied to initialize the
set. Create an empty set:

<div class=programlisting>
<p>
<pre>
$sigset = POSIX::SigSet-&gt;new;
</PRE>
</DIV>

<p class=para>
Create a set with <tt class=literal>SIGUSR1</tt>:

<div class=programlisting>
<p>
<pre>
$sigset = POSIX::SigSet-&gt;new(&amp;POSIX::SIGUSR1);
</PRE>
</DIV>

<p>
<dt class=varlistentry><tt class=literal>addset</tt><dd>

<p class=para>
Adds a signal to a SigSet object.  Returns <a href="ch03_02.htm">undef</A> on failure.

<div class=programlisting>
<p>
<pre>
$sigset-&gt;addset(&amp;POSIX::SIGUSR2);
</PRE>
</DIV>

<p>
<dt class=varlistentry><tt class=literal>delset</tt><dd>

<p class=para>
Removes a signal from the SigSet object.  Returns <a href="ch03_02.htm">undef</A> on
failure.

<div class=programlisting>
<p>
<pre>
$sigset-&gt;delset(&amp;POSIX::SIGUSR2);
</PRE>
</DIV>

<p>
<dt class=varlistentry><tt class=literal>emptyset</tt><dd>

<p class=para>
Initializes the SigSet object to be empty.  Returns <a href="ch03_02.htm">undef</A> on
failure.

<div class=programlisting>
<p>
<pre>
$sigset-&gt;emptyset();
</PRE>
</DIV>

<p>
<dt class=varlistentry><tt class=literal>fillset</tt><dd>

<p class=para>
Initializes the SigSet object to include all signals.
Returns <a href="ch03_02.htm">undef</A> on failure.

<div class=programlisting>
<p>
<pre>
$sigset-&gt;fillset();
</PRE>
</DIV>

<p>
<dt class=varlistentry><tt class=literal>ismember</tt><dd>

<p class=para>
Tests the SigSet object to see whether it contains a specific signal.

<div class=programlisting>
<p>
<pre>
if ($sigset-&gt;ismember(&amp;POSIX::SIGUSR1 ) ){
    print "contains SIGUSR1\n";
}
</PRE>
</DIV>

</DL>
<p class=para>
<b>POSIX::Termios</B>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>new</tt><dd>

<p class=para>
Creates a new Termios object.  This object will be destroyed automatically
when it is no longer needed.

<div class=programlisting>
<p>
<pre>
$termios = POSIX::Termios-&gt;new;
</PRE>
</DIV>

<p>
<dt class=varlistentry><tt class=literal>getattr</tt><dd>

<p class=para>
Gets terminal control attributes for a given <i class=emphasis>fd</I>, 0 by default.
Returns <a href="ch03_02.htm">undef</A> on failure.
Obtain the attributes for standard input:

<div class=programlisting>
<p>
<pre>
$termios-&gt;getattr()
</PRE>
</DIV>

<p class=para>
Obtain the attributes for standard output:

<div class=programlisting>
<p>
<pre>
$termios-&gt;getattr(1)
</PRE>
</DIV>

<dt class=varlistentry><tt class=literal>getcc</tt><dd>

<p class=para>
Retrieves a value from the <tt class=literal>c_cc</tt> field of a Termios object.
The <tt class=literal>c_cc</tt> field is an array, so an index must be specified.

<div class=programlisting>
<p>
<pre>
$c_cc[1] = $termios-&gt;getcc(&amp;POSIX::VEOF);
</PRE>
</DIV>

<p>
<dt class=varlistentry><tt class=literal>getcflag</tt><dd>

<p class=para>
Retrieves the <tt class=literal>c_cflag</tt> field of a Termios object.

<div class=programlisting>
<p>
<pre>
$c_cflag = $termios-&gt;getcflag;
</PRE>
</DIV>

<p>
<dt class=varlistentry><tt class=literal>getiflag</tt><dd>

<p class=para>
Retrieves the <tt class=literal>c_iflag</tt> field of a Termios object.

<div class=programlisting>
<p>
<pre>
$c_iflag = $termios-&gt;getiflag;
</PRE>
</DIV>

<p>
<dt class=varlistentry><tt class=literal>getispeed</tt><dd>

<p class=para>
Retrieves the input baud rate.

<div class=programlisting>
<p>
<pre>
$ispeed = $termios-&gt;getispeed;
</PRE>
</DIV>

<p>
<dt class=varlistentry><tt class=literal>getlflag</tt><dd>

<p class=para>
Retrieves the <tt class=literal>c_lflag</tt> field of a Termios object.

<div class=programlisting>
<p>
<pre>
$c_lflag = $termios-&gt;getlflag;
</PRE>
</DIV>

<p>
<dt class=varlistentry><tt class=literal>getoflag</tt><dd>

<p class=para>
Retrieves the <tt class=literal>c_oflag</tt> field of a Termios object.

<div class=programlisting>
<p>
<pre>
$c_oflag = $termios-&gt;getoflag;
</PRE>
</DIV>

<p>
<dt class=varlistentry><tt class=literal>getospeed</tt><dd>

<p class=para>
Retrieves the output baud rate.

<div class=programlisting>
<p>
<pre>
$ospeed = $termios-&gt;getospeed;
</PRE>
</DIV>

<p>
<dt class=varlistentry><tt class=literal>setattr</tt><dd>

<p class=para>
Sets terminal control attributes for a given <i class=emphasis>fd</I>.  Returns
<a href="ch03_02.htm">undef</A> on failure.  The following sets attributes immediately for
standard output.

<div class=programlisting>
<p>
<pre>
$termios-&gt;setattr(1, &amp;POSIX::TCSANOW);
</PRE>
</DIV>

<p>
<dt class=varlistentry><tt class=literal>setcc</tt><dd>

<p class=para>
Sets a value in the <tt class=literal>c_cc</tt> field of a Termios object.
The <tt class=literal>c_cc</tt> field is an array, so an index must be specified.

<div class=programlisting>
<p>
<pre>
$termios-&gt;setcc(&amp;POSIX::VEOF, 4);
</PRE>
</DIV>

<p>
<dt class=varlistentry><tt class=literal>setcflag</tt><dd>

<p class=para>
Sets the <tt class=literal>c_cflag</tt> field of a Termios object.

<div class=programlisting>
<p>
<pre>
$termios-&gt;setcflag(&amp;POSIX::CLOCAL);
</PRE>
</DIV>

<p>
<dt class=varlistentry><tt class=literal>setiflag</tt><dd>

<p class=para>
Sets the <tt class=literal>c_iflag</tt> field of a Termios object.

<div class=programlisting>
<p>
<pre>
$termios-&gt;setiflag(&amp;POSIX::BRKINT);
</PRE>
</DIV>

<p>
<dt class=varlistentry><tt class=literal>setispeed</tt><dd>

<p class=para>
Sets the input baud rate.  Returns <a href="ch03_02.htm">undef</A> on failure.

<div class=programlisting>
<p>
<pre>
$termios-&gt;setispeed(&amp;POSIX::B9600);
</PRE>
</DIV>

<p>
<dt class=varlistentry><tt class=literal>setlflag</tt><dd>

<p class=para>
Sets the <tt class=literal>c_lflag</tt> field of a Termios object.

<div class=programlisting>
<p>
<pre>
$termios-&gt;setlflag(&amp;POSIX::ECHO);
</PRE>
</DIV>

<p>
<dt class=varlistentry><tt class=literal>setoflag</tt><dd>

<p class=para>
Set the <tt class=literal>c_oflag</tt> field of a Termios object.

<div class=programlisting>
<p>
<pre>
$termios-&gt;setoflag(&amp;POSIX::OPOST);
</PRE>
</DIV>

<p>
<dt class=varlistentry><tt class=literal>setospeed</tt><dd>

<p class=para>
Sets the output baud rate.  Returns <a href="ch03_02.htm">undef</A> on failure.

<div class=programlisting>
<p>
<pre>
$termios-&gt;setospeed(&amp;POSIX::B9600);
</PRE>
</DIV>

<p>
<dt class=varlistentry>Baud rate values<dd>

<p class=para>
<tt class=literal>B0 B50 B75 B110 B134 B150 B200 B300 B600 B1200 B1800 B2400 B4800 B9600
B19200 B38400</tt>

<p>
<dt class=varlistentry>Terminal interface values<dd>

<p class=para>
<tt class=literal>TCSADRAIN TCSANOW TCOON TCIOFLUSH TCOFLUSH TCION TCIFLUSH TCSAFLUSH
TCIOFF TCOOFF</tt>

<p>
<dt class=varlistentry><tt class=literal>c_cc</tt> index values<dd>

<p class=para>
<tt class=literal>VEOF VEOL VERASE VINTR VKILL VQUIT VSUSP VSTART VSTOP VMIN VTIME NCCS</tt>

<p>
<dt class=varlistentry><tt class=literal>c_cflag</tt> field values<dd>

<p class=para>
<tt class=literal>CLOCAL CREAD CSIZE CS5 CS6 CS7 CS8 CSTOPB HUPCL PARENB PARODD</tt>

<p>
<dt class=varlistentry><tt class=literal>c_iflag</tt> field values<dd>

<p class=para>
<tt class=literal>BRKINT ICRNL IGNBRK IGNCR IGNPAR INLCR INPCK ISTRIP IXOFF IXON PARMRK</tt>

<p>
<dt class=varlistentry><tt class=literal>c_lflag</tt> field values<dd>

<p class=para>
<tt class=literal>ECHO ECHOE ECHOK ECHONL ICANON IEXTEN ISIG NOFLSH TOSTOP</tt>

<p>
<dt class=varlistentry><tt class=literal>c_oflag</tt> field values<dd>

<p class=para>
<tt class=literal>OPOST</tt></DL>
<p class=para>
While these constants are associated with the Termios class, note that they are
actually symbols in the POSIX package. 

<p class=para>
Here's an example of a complete program
for getting unbuffered, single-character input on a POSIX system:

<div class=programlisting>
<p>
<pre>
#!/usr/bin/perl -w
use strict;
$| = 1;
for (1..4) {
    my $got;
    print "gimme: ";
    $got = getone();
    print "--&gt; $got\n";
}
exit;
BEGIN {
    use POSIX qw(:termios_h);
    my ($term, $oterm, $echo, $noecho, $fd_stdin);
    $fd_stdin = fileno(STDIN);
    $term     = POSIX::Termios-&gt;new();
    $term-&gt;getattr($fd_stdin);
    $oterm    = $term-&gt;getlflag();
    $echo     = ECHO | ECHOK | ICANON;
    $noecho   = $oterm &amp; ~$echo;
    sub cbreak {
        $term-&gt;setlflag($noecho);
        $term-&gt;setcc(VTIME, 1);
        $term-&gt;setattr($fd_stdin, TCSANOW);
    }
    sub cooked {
        $term-&gt;setlflag($oterm);
        $term-&gt;setcc(VTIME, 0);
        $term-&gt;setattr($fd_stdin, TCSANOW);
    }
    sub getone {
        my $key = "";
        cbreak();
        sysread(STDIN, $key, 1);
        cooked();
        return $key;
    }
}
END { cooked() }
</PRE>
</DIV>

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-7-SECT-1.67">Functions</A></h4><a name="CH07.POSIX2"></A>

<p>
<div class=table>
<table>
<caption><a class="TITLE" name="PERL2-CH-7-TAB-16">Table 7-12: Functions</A></CAPTION>
<tr class=row>
<th align="left">Function Name</TH>
<th align="LEFT">Definition</TH>
</TR>
<tr class=row>
<td align="left"><tt class=literal>_exit</tt></TD>
<td align="LEFT">

<p class=para>
Identical to the C function <i class=emphasis>_exit</I> (2).</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>abort</tt></TD>
<td align="LEFT">

<p class=para>
Identical to the C function <i class=emphasis>abort</I> (3).</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>abs</tt></TD>
<td align="LEFT">

<p class=para>
Identical to Perl's built-in <a href="ch03_02.htm">abs</A> function.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>access</tt></TD>
<td align="LEFT">

<p class=para>
Determines the accessibility of a file.  Returns <a href="ch03_02.htm">undef</A> on failure.
<div class=programlisting>
<p>
<pre>
if (POSIX::access("/", &amp;POSIX::R_OK ) ){
    print "have read permission\n";
}
</PRE>
</DIV>

</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>acos</tt></TD>
<td align="LEFT">

<p class=para>
Identical to the C function <i class=emphasis>acos</I> (3).</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>alarm</tt></TD>
<td align="LEFT">

<p class=para>
Identical to Perl's built-in <a href="ch03_02.htm">alarm</A> function.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>asctime</tt></TD>
<td align="LEFT">

<p class=para>
Identical to the C function <i class=emphasis>asctime</I> (3).</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>asin</tt></TD>
<td align="LEFT">

<p class=para>
Identical to the C function <i class=emphasis>asin</I> (3).</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>assert</tt></TD>
<td align="LEFT">

<p class=para>
Similar to C macro <i class=emphasis>assert</I> (3).</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>atan</tt></TD>
<td align="LEFT">

<p class=para>
Identical to the C function <i class=emphasis>atan</I> (3).</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>atan2</tt></TD>
<td align="LEFT">

<p class=para>
Identical to Perl's built-in <a href="ch03_02.htm">atan2</A> function.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>atexit</tt></TD>
<td align="LEFT">

<p class=para>
C-specific: use <tt class=literal>END {}</tt> instead.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>atof</tt></TD>
<td align="LEFT">

<p class=para>
C-specific.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>atoi</tt></TD>
<td align="LEFT">

<p class=para>
C-specific.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>atol</tt></TD>
<td align="LEFT">

<p class=para>
C-specific.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>bsearch</tt></TD>
<td align="LEFT">

<p class=para>
Not supplied.  You should probably be using a hash anyway.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>calloc</tt></TD>
<td align="LEFT">

<p class=para>
C-specific.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>ceil</tt></TD>
<td align="LEFT">

<p class=para>
Identical to the C function <i class=emphasis>ceil</I> (3).</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>chdir</tt></TD>
<td align="LEFT">

<p class=para>
Identical to Perl's built-in <a href="ch03_02.htm">chdir</A> function.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>chmod</tt></TD>
<td align="LEFT">

<p class=para>
Identical to Perl's built-in <a href="ch03_02.htm">chmod</A> function.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>chown</tt></TD>
<td align="LEFT">

<p class=para>
Identical to Perl's built-in <a href="ch03_02.htm">chown</A> function.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>clearerr</tt></TD>
<td align="LEFT">

<p class=para>
Use method <tt class=literal>FileHandle::clearerr()</tt> instead.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>clock</tt></TD>
<td align="LEFT">

<p class=para>
Identical to the C function <i class=emphasis>clock</I> (3).</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>close</tt></TD>
<td align="LEFT">

<p class=para>
Closes a file.  This uses file descriptors such as those obtained by calling
<tt class=literal>POSIX::open()</tt>.  Returns <a href="ch03_02.htm">undef</A> on failure.
<div class=programlisting>
<p>
<pre>
$fd = POSIX::open("foo", &amp;POSIX::O_RDONLY);
POSIX::close($fd);
</PRE>
</DIV>

</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>closedir</tt></TD>
<td align="LEFT">

<p class=para>
Identical to Perl's built-in <a href="ch03_02.htm">closedir</A> function.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>cos</tt></TD>
<td align="LEFT">

<p class=para>
Identical to Perl's built-in <a href="ch03_02.htm">cos</A> function.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>cosh</tt></TD>
<td align="LEFT">

<p class=para>
Identical to the C function <i class=emphasis>cosh</I> (3).</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>creat</tt></TD>
<td align="LEFT">

<p class=para>
Creates a new file.  This returns a file descriptor like the ones returned by
<tt class=literal>POSIX::open()</tt>.  Use <tt class=literal>POSIX::close()</tt> to close the file.
<div class=programlisting>
<p>
<pre>
$fd = POSIX::creat("foo", 0611);
POSIX::close($fd);
</PRE>
</DIV>

</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>ctermid</tt></TD>
<td align="LEFT">

<p class=para>
Generates the path name for the controlling terminal.
<div class=programlisting>
<p>
<pre>
$path = POSIX::ctermid();
</PRE>
</DIV>

</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>ctime</tt></TD>
<td align="LEFT">

<p class=para>
Identical to the C function <i class=emphasis>ctime</I> (3)</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>cuserid</tt></TD>
<td align="LEFT">

<p class=para>
Gets the character login name of the user.
<div class=programlisting>
<p>
<pre>
$name = POSIX::cuserid();
</PRE>
</DIV>

</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>difftime</tt></TD>
<td align="LEFT">

<p class=para>
Identical to the C function <i class=emphasis>difftime</I> (3).</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>div</tt></TD>
<td align="LEFT">

<p class=para>
C-specific.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>dup</tt></TD>
<td align="LEFT">

<p class=para>
Similar to the C function <i class=emphasis>dup</I> (2).
Uses file descriptors such as those obtained by calling
<tt class=literal>POSIX::open()</tt>.  Returns <a href="ch03_02.htm">undef</A> on failure.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>dup2</tt></TD>
<td align="LEFT">

<p class=para>
Similar to the C function <i class=emphasis>dup2</I> (2).
Uses file descriptors such as those obtained by calling
<tt class=literal>POSIX::open()</tt>.  Returns <a href="ch03_02.htm">undef</A> on failure.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>errno</tt></TD>
<td align="LEFT">

<p class=para>
Returns the value of <i class=emphasis>errno</I>.
<div class=programlisting>
<p>
<pre>
$errno = POSIX::errno();
</PRE>
</DIV>

</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>execl</tt></TD>
<td align="LEFT">

<p class=para>
C-specific; use Perl's <a href="ch03_02.htm">exec</A> instead.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>execle</tt></TD>
<td align="LEFT">

<p class=para>
C-specific; use Perl's <a href="ch03_02.htm">exec</A> instead.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>execlp</tt></TD>
<td align="LEFT">

<p class=para>
C-specific; use Perl's <a href="ch03_02.htm">exec</A> instead.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>execv</tt></TD>
<td align="LEFT">

<p class=para>
C-specific; use Perl's <a href="ch03_02.htm">exec</A> instead.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>execve</tt></TD>
<td align="LEFT">

<p class=para>
C-specific; use Perl's <a href="ch03_02.htm">exec</A> instead.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>execvp</tt></TD>
<td align="LEFT">

<p class=para>
C-specific; use Perl's <a href="ch03_02.htm">exec</A> instead.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>exit</tt></TD>
<td align="LEFT">

<p class=para>
Identical to Perl's built-in <a href="ch03_02.htm">exit</A> function.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>exp</tt></TD>
<td align="LEFT">

<p class=para>
Identical to Perl's built-in <a href="ch03_02.htm">exp</A> function.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>fabs</tt></TD>
<td align="LEFT">

<p class=para>
Identical to Perl's built-in <a href="ch03_02.htm">abs</A> function.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>fclose</tt></TD>
<td align="LEFT">

<p class=para>
Use method <tt class=literal>FileHandle::close()</tt> instead.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>fcntl</tt></TD>
<td align="LEFT">

<p class=para>
Identical to Perl's built-in <a href="ch03_02.htm">fcntl</A> function.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>fdopen</tt></TD>
<td align="LEFT">

<p class=para>
Use method <tt class=literal>FileHandle::new_from_fd()</tt> instead.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>feof</tt></TD>
<td align="LEFT">

<p class=para>
Use method <tt class=literal>FileHandle::eof()</tt> instead.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>ferror</tt></TD>
<td align="LEFT">

<p class=para>
Use method <tt class=literal>FileHandle::error()</tt> instead.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>fflush</tt></TD>
<td align="LEFT">

<p class=para>
Use method <tt class=literal>FileHandle::flush()</tt> instead.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>fgetc</tt></TD>
<td align="LEFT">

<p class=para>
Use method <tt class=literal>FileHandle::getc()</tt> instead.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>fgetpos</tt></TD>
<td align="LEFT">

<p class=para>
Use method <tt class=literal>FileHandle::getpos()</tt> instead.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>fgets</tt></TD>
<td align="LEFT">

<p class=para>
Use method <tt class=literal>FileHandle::gets()</tt> instead.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>fileno</tt></TD>
<td align="LEFT">

<p class=para>
Use method <tt class=literal>FileHandle::fileno()</tt> instead.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>floor</tt></TD>
<td align="LEFT">

<p class=para>
Identical to the C function <i class=emphasis>floor</I> (3).</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>fmod</tt></TD>
<td align="LEFT">

<p class=para>
Identical to the C function <i class=emphasis>fmod</I> (3).</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>fopen</tt></TD>
<td align="LEFT">

<p class=para>
Use method <tt class=literal>FileHandle::open()</tt> instead.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>fork</tt></TD>
<td align="LEFT">

<p class=para>
Identical to Perl's built-in <a href="ch03_02.htm">fork</A> function.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>fpathconf</tt></TD>
<td align="LEFT">

<p class=para>
Retrieves the value of a configurable limit on a file or directory.  This
uses file descriptors such as those obtained by calling <tt class=literal>POSIX::open()</tt>.
Returns <a href="ch03_02.htm">undef</A> on failure. The following will determine the maximum length of the longest allowable
pathname on the filesystem that holds <i class=emphasis>/tmp/foo</I>.
<div class=programlisting>
<p>
<pre>
$fd = POSIX::open("/tmp/foo", &amp;POSIX::O_RDONLY);
$path_max = POSIX::fpathconf($fd, &amp;POSIX::_PC_PATH_MAX);
</PRE>
</DIV>

</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>fprintf</tt></TD>
<td align="LEFT">

<p class=para>
C-specific; use Perl's built-in <a href="ch03_02.htm">printf</A> function instead.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>fputc</tt></TD>
<td align="LEFT">

<p class=para>
C-specific; use Perl's built-in <a href="ch03_02.htm">print</A> function instead.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>fputs</tt></TD>
<td align="LEFT">

<p class=para>
C-specific; use Perl's built-in <a href="ch03_02.htm">print</A> function instead.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>fread</tt></TD>
<td align="LEFT">

<p class=para>
C-specific; use Perl's built-in <a href="ch03_02.htm">read</A> function instead.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>free</tt></TD>
<td align="LEFT">

<p class=para>
C-specific</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>freopen</tt></TD>
<td align="LEFT">

<p class=para>
C-specific; use Perl's built-in <a href="ch03_02.htm">open</A> function instead.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>frexp</tt></TD>
<td align="LEFT">

<p class=para>
Returns the mantissa and exponent of a floating-point number.
<div class=programlisting>
<p>
<pre>
($mantissa, $exponent) = POSIX::frexp(3.14);
</PRE>
</DIV>

</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>fscanf</tt></TD>
<td align="LEFT">

<p class=para>
C-specific; use <tt class=literal>&lt;&gt;</tt> and regular expressions instead.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>fseek</tt></TD>
<td align="LEFT">

<p class=para>
Use method <tt class=literal>FileHandle::seek()</tt> instead.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>fsetpos</tt></TD>
<td align="LEFT">

<p class=para>
Use method <tt class=literal>FileHandle::setpos()</tt> instead.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>fstat</tt></TD>
<td align="LEFT">

<p class=para>
Gets file status.  This uses file descriptors such as those obtained by
calling <tt class=literal>POSIX::open()</tt>.  The data returned is identical to the data from
Perl's built-in <a href="ch03_02.htm">stat</A> function.  Odd how that happens...
<div class=programlisting>
<p>
<pre>
$fd = POSIX::open("foo", &amp;POSIX::O_RDONLY);
@stats = POSIX::fstat($fd);
</PRE>
</DIV>

</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>ftell</tt></TD>
<td align="LEFT">

<p class=para>
Use method <tt class=literal>FileHandle::tell()</tt> instead.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>fwrite</tt></TD>
<td align="LEFT">

<p class=para>
C-specific; use Perl's built-in <a href="ch03_02.htm">print</A> function instead.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>getc</tt></TD>
<td align="LEFT">

<p class=para>
Identical to Perl's built-in <a href="ch03_02.htm">getc</A> function.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>getchar</tt></TD>
<td align="LEFT">

<p class=para>
Returns one character from <tt class=literal>STDIN</tt>.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>getcwd</tt></TD>
<td align="LEFT">

<p class=para>
Returns the name of the current working directory.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>getegid</tt></TD>
<td align="LEFT">

<p class=para>
Returns the effective group ID (gid).</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>getenv</tt></TD>
<td align="LEFT">

<p class=para>
Returns the value of the specified environment variable.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>geteuid</tt></TD>
<td align="LEFT">

<p class=para>
Returns the effective user ID (uid).</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>getgid</tt></TD>
<td align="LEFT">

<p class=para>
Returns the user's real group ID (gid).</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>getgrgid</tt></TD>
<td align="LEFT">

<p class=para>
Identical to Perl's built-in <a href="ch03_02.htm">getgrgid</A> function.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>getgrnam</tt></TD>
<td align="LEFT">

<p class=para>
Identical to Perl's built-in <a href="ch03_02.htm">getgrnam</A> function.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>getgroups</tt></TD>
<td align="LEFT">

<p class=para>
Returns the ids of the user's supplementary groups.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>getlogin</tt></TD>
<td align="LEFT">

<p class=para>
Identical to Perl's built-in <a href="ch03_02.htm">getlogin</A> function.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>getpgrp</tt></TD>
<td align="LEFT">

<p class=para>
Identical to Perl's built-in <a href="ch03_02.htm">getpgrp</A> function.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>getpid</tt></TD>
<td align="LEFT">

<p class=para>
Returns the process's ID (pid).</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>getppid</tt></TD>
<td align="LEFT">

<p class=para>
Identical to Perl's built-in <a href="ch03_02.htm">getppid</A> function.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>getpwnam</tt></TD>
<td align="LEFT">

<p class=para>
Identical to Perl's built-in <a href="ch03_02.htm">getpwnam</A> function.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>getpwuid</tt></TD>
<td align="LEFT">

<p class=para>
Identical to Perl's built-in <a href="ch03_02.htm">getpwuid</A> function.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>gets</tt></TD>
<td align="LEFT">

<p class=para>
Returns one line from <tt class=literal>STDIN</tt>.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>getuid</tt></TD>
<td align="LEFT">

<p class=para>
Returns the user's ID (uid).</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>gmtime</tt></TD>
<td align="LEFT">

<p class=para>
Identical to Perl's built-in <a href="ch03_02.htm">gmtime</A> function.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>isalnum</tt></TD>
<td align="LEFT">

<p class=para>
Identical to the C function, except that it can apply to a single
character or to a whole string.  (If applied to a whole string, all characters
must be of the indicated category.)</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>isalpha</tt></TD>
<td align="LEFT">

<p class=para>
Identical to the C function, except that it can apply to a single
character or to a whole string.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>isatty</tt></TD>
<td align="LEFT">

<p class=para>
Returns a Boolean indicating whether the specified filehandle is connected
to a TTY.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>iscntrl</tt></TD>
<td align="LEFT">

<p class=para>
Identical to the C function, except that it can apply to a single
character or to a whole string.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>isdigit</tt></TD>
<td align="LEFT">

<p class=para>
Identical to the C function, except that it can apply to a single
character or to a whole string.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>isgraph</tt></TD>
<td align="LEFT">

<p class=para>
Identical to the C function, except that it can apply to a single
character or to a whole string.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>islower</tt></TD>
<td align="LEFT">

<p class=para>
Identical to the C function, except that it can apply to a single
character or to a whole string.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>isprint</tt></TD>
<td align="LEFT">

<p class=para>
Identical to the C function, except that it can apply to a single
character or to a whole string.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>ispunct</tt></TD>
<td align="LEFT">

<p class=para>
Identical to the C function, except that it can apply to a single
character or to a whole string.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>isspace</tt></TD>
<td align="LEFT">

<p class=para>
Identical to the C function, except that it can apply to a single
character or to a whole string.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>isupper</tt></TD>
<td align="LEFT">

<p class=para>
Identical to the C function, except that it can apply to a single
character or to a whole string.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>isxdigit</tt></TD>
<td align="LEFT">

<p class=para>
Identical to the C function, except that it can apply to a single
character or to a whole string.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>kill</tt></TD>
<td align="LEFT">

<p class=para>
Identical to Perl's built-in <a href="ch03_02.htm">kill</A> function.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>labs</tt></TD>
<td align="LEFT">

<p class=para>
C-specific; use Perl's built-in <a href="ch03_02.htm">abs</A> function instead.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>ldexp</tt></TD>
<td align="LEFT">

<p class=para>
Identical to the C function <i class=emphasis>ldexp</I> (3).</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>ldiv</tt></TD>
<td align="LEFT">

<p class=para>
C-specific; use the division operator <tt class=literal>/</tt> 
and Perl's built-in <a href="ch03_02.htm">int</A>
function instead.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>link</tt></TD>
<td align="LEFT">

<p class=para>
Identical to Perl's built-in <a href="ch03_02.htm">link</A> function.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>localeconv</tt></TD>
<td align="LEFT">

<p class=para>
Gets numeric formatting information.  Returns a reference to a hash
containing the current locale formatting values.
The database for the <tt class=literal>de</tt> (Deutsch or German) locale:</TD>
</TR>
<tr class=row>
<td align="left">&nbsp;</TD>
<td align="LEFT">

<p class=para>
<div class=programlisting>
<p>
<pre>
$loc = POSIX::setlocale(&amp;POSIX::LC_ALL, "de");
print "Locale = $loc\n";
$lconv = POSIX::localeconv();
print "decimal_point     = ", $lconv-&gt;{decimal_point},     "\n";
print "thousands_sep     = ", $lconv-&gt;{thousands_sep},     "\n";
print "grouping          = ", $lconv-&gt;{grouping},          "\n";
print "int_curr_symbol   = ", $lconv-&gt;{int_curr_symbol},   "\n";
print "currency_symbol   = ", $lconv-&gt;{currency_symbol},   "\n";
print "mon_decimal_point = ", $lconv-&gt;{mon_decimal_point}, "\n";
print "mon_thousands_sep = ", $lconv-&gt;{mon_thousands_sep}, "\n";
print "mon_grouping      = ", $lconv-&gt;{mon_grouping},      "\n";
print "positive_sign     = ", $lconv-&gt;{positive_sign},     "\n";
print "negative_sign     = ", $lconv-&gt;{negative_sign},     "\n";
</PRE>
</DIV>
</TD>
</TR>
<tr class=row>
<td align="left">&nbsp;</TD>
<td align="LEFT">

<p class=para>
<div class=programlisting>
<p>
<pre>
print "int_frac_digits   = ", $lconv-&gt;{int_frac_digits},   "\n";
print "frac_digits       = ", $lconv-&gt;{frac_digits},       "\n";
print "p_cs_precedes     = ", $lconv-&gt;{p_cs_precedes},     "\n";
print "p_sep_by_space    = ", $lconv-&gt;{p_sep_by_space},    "\n";
print "n_cs_precedes     = ", $lconv-&gt;{n_cs_precedes},     "\n";
print "n_sep_by_space    = ", $lconv-&gt;{n_sep_by_space},    "\n";
print "p_sign_posn       = ", $lconv-&gt;{p_sign_posn},       "\n";
print "n_sign_posn       = ", $lconv-&gt;{n_sign_posn},       "\n";
</PRE>
</DIV>
</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>localtime</tt></TD>
<td align="LEFT">

<p class=para>
Identical to Perl's built-in <a href="ch03_02.htm">localtime</A> function.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>log</tt></TD>
<td align="LEFT">

<p class=para>
Identical to Perl's built-in <a href="ch03_02.htm">log</A> function.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>log10</tt></TD>
<td align="LEFT">

<p class=para>
Identical to the C function <i class=emphasis>log10</I> (3).</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>longjmp</tt></TD>
<td align="LEFT">

<p class=para>
C-specific; use Perl's built-in <a href="ch03_02.htm">die</A> function instead.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>lseek</tt></TD>
<td align="LEFT">

<p class=para>
Moves the read/write file pointer.  This uses file descriptors such as
those obtained by calling <tt class=literal>POSIX::open()</tt>.
<div class=programlisting>
<p>
<pre>
$fd = POSIX::open("foo", &amp;POSIX::O_RDONLY);
$off_t = POSIX::lseek($fd, 0, &amp;POSIX::SEEK_SET);
</PRE>
</DIV>

Returns <a href="ch03_02.htm">undef</A> on failure.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>malloc</tt></TD>
<td align="LEFT">

<p class=para>
C-specific.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>mblen</tt></TD>
<td align="LEFT">

<p class=para>
Identical to the C function <i class=emphasis>mblen</I> (3).</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>mbstowcs</tt></TD>
<td align="LEFT">

<p class=para>
Identical to the C function <i class=emphasis>mbstowcs</I> (3).</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>mbtowc</tt></TD>
<td align="LEFT">

<p class=para>
Identical to the C function <i class=emphasis>mbtowc</I> (3).</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>memchr</tt></TD>
<td align="LEFT">

<p class=para>
C-specific; use Perl's built-in <a href="ch03_02.htm">index</A> instead.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>memcmp</tt></TD>
<td align="LEFT">

<p class=para>
C-specific; use <b>eq</B> instead.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>memcpy</tt></TD>
<td align="LEFT">

<p class=para>
C-specific; use <b>=</B> instead.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>memmove</tt></TD>
<td align="LEFT">

<p class=para>
C-specific; use <b>=</B> instead.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>memset</tt></TD>
<td align="LEFT">

<p class=para>
C-specific; use <b>x</B> instead.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>mkdir</tt></TD>
<td align="LEFT">

<p class=para>
Identical to Perl's built-in <a href="ch03_02.htm">mkdir</A> function.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>mkfifo</tt></TD>
<td align="LEFT">

<p class=para>
Similar to the C function <i class=emphasis>mkfifo</I> (2).
Returns <a href="ch03_02.htm">undef</A> on failure.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>mktime</tt></TD>
<td align="LEFT">

<p class=para>
Converts date/time information to a calendar time.  Returns <a href="ch03_02.htm">undef</A> on failure.
Synopsis:</TD>
</TR>
<tr class=row>
<td align="left">&nbsp;</TD>
<td align="LEFT">

<p class=para>
<div class=programlisting>
<p>
<pre>
mktime(<tt class=replaceable><i>sec</i></tt>, <tt class=replaceable><i>min</i></tt>, <tt class=replaceable><i>hour</i></tt>, <tt class=replaceable><i>mday</i></tt>, <tt class=replaceable><i>mon</i></tt>, <tt class=replaceable><i>year</i></tt>, <tt class=replaceable><i>wday</i></tt> = 0,
                                     <tt class=replaceable><i>yday</i></tt> = 0, <tt class=replaceable><i>isdst</i></tt> = 0)
</PRE>
</DIV>
</TD>
</TR>
<tr class=row>
<td align="left">&nbsp;</TD>
<td align="LEFT">

<p class=para>
The month (<tt class=replaceable><i>mon</i></tt>), weekday (<tt class=replaceable><i>wday</i></tt>), and yearday
(<tt class=replaceable><i>yday</i></tt>) begin at zero.
That is, January is 0, not 1; Sunday is 0, not 1; January 1st is 0, not 1.  The
year (<tt class=literal>year</tt>) is given in years since 1900.  That is, the year
1995 is 95; the
year 2001 is 101.  Consult your system's <i class=emphasis>mktime</I> (3) manpage for details
about these and the other arguments.
Calendar time for December 12, 1995, at 10:30 am.</TD>
</TR>
<tr class=row>
<td align="left">&nbsp;</TD>
<td align="LEFT">

<p class=para>
<div class=programlisting>
<p>
<pre>
$time_t = POSIX::mktime(0, 30, 10, 12, 11, 95);
print "Date = ", POSIX::ctime($time_t);
</PRE>
</DIV>
</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>modf</tt></TD>
<td align="LEFT">

<p class=para>
Returns the integral and fractional parts of a floating-point number.
<div class=programlisting>
<p>
<pre>
($fractional, $integral) = POSIX::modf(3.14);
</PRE>
</DIV>

</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>nice</tt></TD>
<td align="LEFT">

<p class=para>
Similar to the C function <i class=emphasis>nice</I> (3).
Returns <a href="ch03_02.htm">undef</A> on failure.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>offsetof</tt></TD>
<td align="LEFT">

<p class=para>
C-specific.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>open</tt></TD>
<td align="LEFT">

<p class=para>
Opens a file for reading or writing.  This returns file descriptors, not
Perl filehandles.  Returns <a href="ch03_02.htm">undef</A> on failure.
Use <tt class=literal>POSIX::close()</tt> to close the file.
Open a file read-only:
<div class=programlisting>
<p>
<pre>
$fd = POSIX::open("foo");
</PRE>
</DIV>

Open a file for reading and writing:
<div class=programlisting>
<p>
<pre>
$fd = POSIX::open("foo", &amp;POSIX::O_RDWR);
</PRE>
</DIV>

Open a file for writing, with truncation:
<div class=programlisting>
<p>
<pre>
$fd = POSIX::open("foo", &amp;POSIX::O_WRONLY | &amp;POSIX::O_TRUNC);
</PRE>
</DIV>

Create a new file with mode 0644; set up the file for writing:
<div class=programlisting>
<p>
<pre>
$fd = POSIX::open("foo", &amp;POSIX::O_CREAT | &amp;POSIX::O_WRONLY, 
        0644);
</PRE>
</DIV>

</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>opendir</tt></TD>
<td align="LEFT">

<p class=para>
Opens a directory for reading.  Returns <a href="ch03_02.htm">undef</A> on failure.
<div class=programlisting>
<p>
<pre>
$dir = POSIX::opendir("/tmp");
@files = POSIX::readdir($dir);
POSIX::closedir($dir);
</PRE>
</DIV>

</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>pathconf</tt></TD>
<td align="LEFT">

<p class=para>
Retrieves the value of a configurable limit on a file or directory.
Returns <a href="ch03_02.htm">undef</A> on failure.
The following will determine the maximum length of the longest allowable
pathname on the filesystem that holds <i class=emphasis>/tmp</I>&nbsp;:
<div class=programlisting>
<p>
<pre>
$path_max = POSIX::pathconf("/tmp", &amp;POSIX::_PC_PATH_MAX);
</PRE>
</DIV>

</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>pause</tt></TD>
<td align="LEFT">

<p class=para>
Similar to the C function <i class=emphasis>pause</I> (3).
Returns <a href="ch03_02.htm">undef</A> on failure.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>perror</tt></TD>
<td align="LEFT">

<p class=para>
Identical to the C function <i class=emphasis>perror</I> (3).</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>pipe</tt></TD>
<td align="LEFT">

<p class=para>
Creates an interprocess channel.  Returns file descriptors like those
returned by <tt class=literal>POSIX::open()</tt>.
<div class=programlisting>
<p>
<pre>
($fd0, $fd1) = POSIX::pipe();
POSIX::write($fd0, "hello", 5);
POSIX::read($fd1, $buf, 5);
</PRE>
</DIV>

</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>pow</tt></TD>
<td align="LEFT">

<p class=para>
Computes <tt class=literal>$x</tt> raised to the power <tt class=literal>$exponent</tt>.
<div class=programlisting>
<p>
<pre>
$ret = POSIX::pow($x, $exponent);
</PRE>
</DIV>

</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>printf</tt></TD>
<td align="LEFT">

<p class=para>
Prints the specified arguments to <tt class=literal>STDOUT</tt>.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>putc</tt></TD>
<td align="LEFT">

<p class=para>
C-specific; use Perl's built-in <a href="ch03_02.htm">print</A> function instead.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>putchar</tt></TD>
<td align="LEFT">

<p class=para>
C-specific; use Perl's built-in <a href="ch03_02.htm">print</A> function instead.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>puts</tt></TD>
<td align="LEFT">

<p class=para>
C-specific; use Perl's built-in <a href="ch03_02.htm">print</A> function instead.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>qsort</tt></TD>
<td align="LEFT">

<p class=para>
C-specific; use Perl's built-in <a href="ch03_02.htm">sort</A> function instead.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>raise</tt></TD>
<td align="LEFT">

<p class=para>
Sends the specified signal to the current process.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>rand</tt></TD>
<td align="LEFT">

<p class=para>
Non-portable; use Perl's built-in <a href="ch03_02.htm">rand</A> function instead.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>read</tt></TD>
<td align="LEFT">

<p class=para>
Reads from a file.  This uses file descriptors such as those obtained by
calling <tt class=literal>POSIX::open()</tt>.  If the buffer <tt class=literal>$buf</tt> is not large
enough for the read, then Perl will extend it to make room for the request.
Returns <a href="ch03_02.htm">undef</A> on failure.
<div class=programlisting>
<p>
<pre>
$fd = POSIX::open("foo", &amp;POSIX::O_RDONLY);
$bytes = POSIX::read($fd, $buf, 3);
</PRE>
</DIV>

</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>readdir</tt></TD>
<td align="LEFT">

<p class=para>
Identical to Perl's built-in <a href="ch03_02.htm">readdir</A> function.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>realloc</tt></TD>
<td align="LEFT">

<p class=para>
C-specific.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>remove</tt></TD>
<td align="LEFT">

<p class=para>
Identical to Perl's built-in <a href="ch03_02.htm">unlink</A> function.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>rename</tt></TD>
<td align="LEFT">

<p class=para>
Identical to Perl's built-in <a href="ch03_02.htm">rename</A> function.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>rewind</tt></TD>
<td align="LEFT">

<p class=para>
Seeks to the beginning of the file.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>rewinddir</tt></TD>
<td align="LEFT">

<p class=para>
Identical to Perl's built-in <a href="ch03_02.htm">rewinddir</A> function.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>rmdir</tt></TD>
<td align="LEFT">

<p class=para>
Identical to Perl's built-in <a href="ch03_02.htm">rmdir</A> function.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>scanf</tt></TD>
<td align="LEFT">

<p class=para>
C-specific; use <tt class=literal>&lt;&gt;</tt> and regular expressions instead.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>setgid</tt></TD>
<td align="LEFT">

<p class=para>
Sets the real group id for this process, like assigning to the
special variable <b>$(</B>.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>setjmp</tt></TD>
<td align="LEFT">

<p class=para>
C-specific; use <tt class=literal>eval {}</tt> instead.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>setlocale</tt></TD>
<td align="LEFT">

<p class=para>
Modifies and queries program's locale.
The following will set the traditional UNIX system locale behavior.
<div class=programlisting>
<p>
<pre>
$loc = POSIX::setlocale(&amp;POSIX::LC_ALL, "C");
</PRE>
</DIV>

</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>setpgid</tt></TD>
<td align="LEFT">

<p class=para>
Similar to the C function <i class=emphasis>setpgid</I> (2).
Returns <a href="ch03_02.htm">undef</A> on failure.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>setsid</tt></TD>
<td align="LEFT">

<p class=para>
Identical to the C function <i class=emphasis>setsid</I> (8).</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>setuid</tt></TD>
<td align="LEFT">

<p class=para>
Sets the real user ID for this process, like assigning to the
special variable <b>$&lt;</B>.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>sigaction</tt></TD>
<td align="LEFT">

<p class=para>
Detailed signal management.  This uses POSIX::SigAction objects for the
<tt class=literal>$action</tt> and <tt class=literal>$oldaction</tt> arguments.  Consult your system's
<i class=emphasis>sigaction</I> (3) manpage for details.
Returns <a href="ch03_02.htm">undef</A> on failure.
<div class=programlisting>
<p>
<pre>
POSIX::sigaction($sig, $action, $oldaction)
</PRE>
</DIV>

</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>siglongjmp</tt></TD>
<td align="LEFT">

<p class=para>
C-specific; use Perl's built-in <a href="ch03_02.htm">die</A> function instead.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>sigpending</tt></TD>
<td align="LEFT">

<p class=para>
Examine signals that are blocked and pending.  This uses POSIX::SigSet
objects for the <tt class=literal>$sigset</tt> argument.  Consult your system's
<i class=emphasis>sigpending</I> (2) manpage for details.
Returns <a href="ch03_02.htm">undef</A> on failure.
<div class=programlisting>
<p>
<pre>
POSIX::sigpending($sigset)
</PRE>
</DIV>

</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>sigprocmask</tt></TD>
<td align="LEFT">

<p class=para>
Changes and/or examines this process's signal mask.  This uses
POSIX::SigSet objects for the <tt class=literal>$sigset</tt> and <tt class=literal>$oldsigset</tt>
arguments.  Consult your system's
<i class=emphasis>sig&nbsp;procmask</I> (2) manpage for details.
Returns <a href="ch03_02.htm">undef</A> on failure.
<div class=programlisting>
<p>
<pre>
POSIX::sigprocmask($how, $sigset, $oldsigset)
</PRE>
</DIV>

</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>sigsetjmp</tt></TD>
<td align="LEFT">

<p class=para>
C-specific; use <tt class=literal>eval {}</tt> instead.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>sigsuspend</tt></TD>
<td align="LEFT">

<p class=para>
Install a signal mask and suspend process until signal arrives.  This uses
POSIX::SigSet objects for the <tt class=literal>$signal_mask</tt> argument.
Consult your system's <i class=emphasis>sigsuspend</I> (2) manpage for details.
Returns <a href="ch03_02.htm">undef</A> on failure.
<div class=programlisting>
<p>
<pre>
POSIX::sigsuspend($signal_mask)
</PRE>
</DIV>

</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>sin</tt></TD>
<td align="LEFT">

<p class=para>
Identical to Perl's built-in <a href="ch03_02.htm">sin</A> function.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>sinh</tt></TD>
<td align="LEFT">

<p class=para>
Identical to the C function <i class=emphasis>sinh</I> (3).</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>sleep</tt></TD>
<td align="LEFT">

<p class=para>
Identical to Perl's built-in <a href="ch03_02.htm">sleep</A> function.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>sprintf</tt></TD>
<td align="LEFT">

<p class=para>
Identical to Perl's built-in <a href="ch03_02.htm">sprintf</A> function.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>sqrt</tt></TD>
<td align="LEFT">

<p class=para>
Identical to Perl's built-in <a href="ch03_02.htm">sqrt</A> function.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>srand</tt></TD>
<td align="LEFT">

<p class=para>
Identical to Perl's built-in <a href="ch03_02.htm">srand</A> function.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>sscanf</tt></TD>
<td align="LEFT">

<p class=para>
C-specific; use regular expressions instead.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>stat</tt></TD>
<td align="LEFT">

<p class=para>
Identical to Perl's built-in <a href="ch03_02.htm">stat</A> function.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>strcat</tt></TD>
<td align="LEFT">

<p class=para>
C-specific; use <tt class=literal>.=</tt> instead.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>strchr</tt></TD>
<td align="LEFT">

<p class=para>
C-specific; use <a href="ch03_02.htm">index</A> instead.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>strcmp</tt></TD>
<td align="LEFT">

<p class=para>
C-specific; use <b>eq</B> instead.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>strcoll</tt></TD>
<td align="LEFT">

<p class=para>
Identical to the C function <i class=emphasis>strcoll</I> (3).</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>strcpy</tt></TD>
<td align="LEFT">

<p class=para>
C-specific; use <tt class=literal>=</tt> instead.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>strcspn</tt></TD>
<td align="LEFT">

<p class=para>
C-specific; use regular expressions instead.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>strerror</tt></TD>
<td align="LEFT">

<p class=para>
Returns the error string for the specified <i class=emphasis>errno</I>.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>strftime</tt></TD>
<td align="LEFT">

<p class=para>
Converts date and time information to string.  Returns the string.
<div class=programlisting>
<p>
<pre>
strftime(<tt class=replaceable><i>fmt</i></tt>, <tt class=replaceable><i>sec</i></tt>, <tt class=replaceable><i>min</i></tt>, <tt class=replaceable><i>hour</i></tt>, <tt class=replaceable><i>mday</i></tt>, <tt class=replaceable><i>mon</i></tt>, <tt class=replaceable><i>year</i></tt>, 
            <tt class=replaceable><i>wday</i></tt> = 0, <tt class=replaceable><i>yday</i></tt> = 0, <tt class=replaceable><i>isdst</i></tt> = 0)
</PRE>
</DIV>

The month (<tt class=replaceable><i>mon</i></tt>), weekday (<tt class=replaceable><i>wday</i></tt>), and yearday (<tt class=replaceable><i>yday</i></tt>)
begin at zero.  That is, January is 0, not 1; Sunday is 0, not 1;
January 1st is 0, not 1.  The year (<tt class=replaceable><i>year</i></tt>) is given in years since
1900.  That is, the year 1995 is 95; the year 2001 is 101.  Consult your
system's <i class=emphasis>strftime</I> (3) manpage for details about these and the
other arguments.
The string for Tuesday, December 12, 1995:
<div class=programlisting>
<p>
<pre>
$str = POSIX::strftime("%A, %B %d, %Y", 0, 0, 0, 12, 
                        11, 95, 2);
print "$str\n";
</PRE>
</DIV>

</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>strlen</tt></TD>
<td align="LEFT">

<p class=para>
C-specific; use <a href="ch03_02.htm">length</A> instead.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>strncat</tt></TD>
<td align="LEFT">

<p class=para>
C-specific; use <tt class=literal>.=</tt> and/or <a href="ch03_02.htm">substr</A> instead.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>strncmp</tt></TD>
<td align="LEFT">

<p class=para>
C-specific; use <b>eq</B> and/or <a href="ch03_02.htm">substr</A> instead.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>strncpy</tt></TD>
<td align="LEFT">

<p class=para>
C-specific; use <tt class=literal>=</tt> and/or <a href="ch03_02.htm">substr</A> instead.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>strpbrk</tt></TD>
<td align="LEFT">

<p class=para>
C-specific.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>strrchr</tt></TD>
<td align="LEFT">

<p class=para>
C-specific; use <a href="ch03_02.htm">rindex</A> and/or <a href="ch03_02.htm">substr</A> instead.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>strspn</tt></TD>
<td align="LEFT">

<p class=para>
C-specific.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>strstr</tt></TD>
<td align="LEFT">

<p class=para>
Identical to Perl's built-in <a href="ch03_02.htm">index</A> function.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>strtod</tt></TD>
<td align="LEFT">

<p class=para>
C-specific.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>strtok</tt></TD>
<td align="LEFT">

<p class=para>
C-specific.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>strtol</tt></TD>
<td align="LEFT">

<p class=para>
C-specific.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>strtoul</tt></TD>
<td align="LEFT">

<p class=para>
C-specific.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>strxfrm</tt></TD>
<td align="LEFT">

<p class=para>
String transformation.  Returns the transformed string.
<div class=programlisting>
<p>
<pre>
$dst = POSIX::strxfrm($src);
</PRE>
</DIV>

</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>sysconf</tt></TD>
<td align="LEFT">

<p class=para>
Retrieves values of system configurable variables.
Returns <a href="ch03_02.htm">undef</A> on failure.
The following will get the machine's clock speed.
<div class=programlisting>
<p>
<pre>
$clock_ticks = POSIX::sysconf(&amp;POSIX::_SC_CLK_TCK);
</PRE>
</DIV>
</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>system</tt></TD>
<td align="LEFT">

<p class=para>
Identical to Perl's built-in <a href="ch03_02.htm">system</A> function.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>tan</tt></TD>
<td align="LEFT">

<p class=para>
Identical to the C function <i class=emphasis>tan</I> (3).</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>tanh</tt></TD>
<td align="LEFT">

<p class=para>
Identical to the C function <i class=emphasis>tanh</I> (3).</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>tcdrain</tt></TD>
<td align="LEFT">

<p class=para>
Similar to the C function <i class=emphasis>tcdrain</I> (3).
Returns <a href="ch03_02.htm">undef</A> on failure.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>tcflow</tt></TD>
<td align="LEFT">

<p class=para>
Similar to the C function <i class=emphasis>tcflow</I> (3).
Returns <a href="ch03_02.htm">undef</A> on failure.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>tcflush</tt></TD>
<td align="LEFT">

<p class=para>
Similar to the C function <i class=emphasis>tcflush</I> (3).
Returns <a href="ch03_02.htm">undef</A> on failure.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>tcgetpgrp</tt></TD>
<td align="LEFT">

<p class=para>
Identical to the C function <i class=emphasis>tcgetpgrp</I> (3).</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>tcsendbreak</tt></TD>
<td align="LEFT">

<p class=para>
Similar to the C function <i class=emphasis>tcsendbreak</I> (3).
Returns <a href="ch03_02.htm">undef</A> on failure.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>tcsetpgrp</tt></TD>
<td align="LEFT">

<p class=para>
Similar to the C function <i class=emphasis>tcsetpgrp</I> (3).
Returns <a href="ch03_02.htm">undef</A> on failure.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>time</tt></TD>
<td align="LEFT">

<p class=para>
Identical to Perl's built-in <a href="ch03_02.htm">time</A> function.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>times</tt></TD>
<td align="LEFT">

<p class=para>
Returns elapsed realtime since some point in the past
(such as system startup), user and system times for this process, and user
and system times for child processes.  All times are returned in clock
ticks.
<div class=programlisting>
<p>
<pre>
($realtime, $user, $system, $cuser, $csystem) = POSIX::times();
</PRE>
</DIV>

Note: Perl's built-in <a href="ch03_02.htm">times</A> function returns four values, measured in
seconds.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>tmpfile</tt></TD>
<td align="LEFT">

<p class=para>
Use method <tt class=literal>FileHandle::new_tmpfile()</tt> instead.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>tmpnam</tt></TD>
<td align="LEFT">

<p class=para>
Returns a name for a temporary file.
<div class=programlisting>
<p>
<pre>
$tmpfile = POSIX::tmpnam();
</PRE>
</DIV>

</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>tolower</tt></TD>
<td align="LEFT">

<p class=para>
Identical to Perl's built-in <a href="ch03_02.htm">lc</A> function.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>toupper</tt></TD>
<td align="LEFT">

<p class=para>
Identical to Perl's built-in <a href="ch03_02.htm">uc</A> function.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>ttyname</tt></TD>
<td align="LEFT">

<p class=para>
Identical to the C function <i class=emphasis>ttyname</I> (3).</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>tzname</tt></TD>
<td align="LEFT">

<p class=para>
Retrieves the time conversion information from the <tt class=literal>tzname</tt> variable.
<div class=programlisting>
<p>
<pre>
POSIX::tzset();
($std, $dst) = POSIX::tzname();
</PRE>
</DIV>

</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>tzset</tt></TD>
<td align="LEFT">

<p class=para>
Identical to the C function <i class=emphasis>tzset</I> (3).</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>umask</tt></TD>
<td align="LEFT">

<p class=para>
Identical to Perl's built-in <a href="ch03_02.htm">umask</A> function.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>uname</tt></TD>
<td align="LEFT">

<p class=para>
Gets name of current operating system.
<div class=programlisting>
<p>
<pre>
($sysname, $nodename, $release, 
     $version, $machine) = POSIX::uname();
</PRE>
</DIV>

</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>ungetc</tt></TD>
<td align="LEFT">

<p class=para>
Use method <tt class=literal>FileHandle::ungetc()</tt> instead.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>unlink</tt></TD>
<td align="LEFT">

<p class=para>
Identical to Perl's built-in <a href="ch03_02.htm">unlink</A> function.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>utime</tt></TD>
<td align="LEFT">

<p class=para>
Identical to Perl's built-in <a href="ch03_02.htm">utime</A> function.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>vfprintf</tt></TD>
<td align="LEFT">

<p class=para>
C-specific.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>vprintf</tt></TD>
<td align="LEFT">

<p class=para>
C-specific.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>vsprintf</tt></TD>
<td align="LEFT">

<p class=para>
C-specific.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>wait</tt></TD>
<td align="LEFT">

<p class=para>
Identical to Perl's built-in <a href="ch03_02.htm">wait</A> function.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>waitpid</tt></TD>
<td align="LEFT">

<p class=para>
Wait for a child process to change state.  This is identical 
to Perl's built-in <a href="ch03_02.htm">waitpid</A> function.
<div class=programlisting>
<p>
<pre>
$pid = POSIX::waitpid(-1, &amp;POSIX::WNOHANG);
print "status = ", ($? / 256), "\n";
</PRE>
</DIV>

</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>wcstombs</tt></TD>
<td align="LEFT">

<p class=para>
Identical to the C function <i class=emphasis>wcstombs</I> (3).</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>wctomb</tt></TD>
<td align="LEFT">

<p class=para>
Identical to the C function <i class=emphasis>wctomb</I> (3).</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>write</tt></TD>
<td align="LEFT">

<p class=para>
Writes to a file.  Uses file descriptors such as those obtained by
calling <tt class=literal>POSIX::open()</tt>.  Returns <a href="ch03_02.htm">undef</A> on failure.
<div class=programlisting>
<p>
<pre>
$fd = POSIX::open("foo", &amp;POSIX::O_WRONLY);
$buf = "hello";
$bytes = POSIX::write($b, $buf, 5);
</PRE>
</DIV>

</TD>
</TR>
</TABLE>
<p>
</DIV>
</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-7-SECT-1.68">Pathname constants</A></h4><tt class=literal>_PC_CHOWN_RESTRICTED</tt>, <tt class=literal>_PC_LINK_MAX</tt>, <tt class=literal>_PC_MAX_CANON</tt>, <tt class=literal>_PC_MAX_INPUT</tt>, <tt class=literal>_PC_NAME_MAX</tt>, <tt class=literal>_PC_NO_TRUNC</tt>, <tt class=literal>_PC_PATH_MAX</tt>, <tt class=literal>_PC_PIPE_BUF</tt>, and <tt class=literal>_PC_VDISABLE</tt>

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-7-SECT-1.69">POSIX constants</A></h4><tt class=literal>_POSIX_ARG_MAX</tt>, <tt class=literal>_POSIX_CHILD_MAX</tt>, <tt class=literal>_POSIX_CHOWN_RESTRICTED</tt>, <tt class=literal>_POSIX_JOB_CONTROL</tt>, <tt class=literal>_POSIX_LINK_MAX</tt>, <tt class=literal>_POSIX_MAX_CANON</tt>, <tt class=literal>_POSIX_MAX_INPUT</tt>, <tt class=literal>_POSIX_NAME_MAX</tt>, <tt class=literal>_POSIX_NGROUPS_MAX</tt>, <tt class=literal>_POSIX_NO_TRUNC</tt>, <tt class=literal>_POSIX_OPEN_MAX</tt>, <tt class=literal>_POSIX_PATH_MAX</tt>, <tt class=literal>_POSIX_PIPE_BUF</tt>, <tt class=literal>_POSIX_SAVED_IDS</tt>, <tt class=literal>_POSIX_SSIZE_MAX</tt>, <tt class=literal>_POSIX_STREAM_MAX</tt>, <tt class=literal>_POSIX_TZNAME_MAX</tt>, <tt class=literal>_POSIX_VDISABLE</tt>, and <tt class=literal>_POSIX_VERSION</tt>

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-7-SECT-1.70">System configuration</A></h4><tt class=literal>_SC_ARG_MAX</tt>, <tt class=literal>_SC_CHILD_MAX</tt>, <tt class=literal>_SC_CLK_TCK</tt>, <tt class=literal>_SC_JOB_CONTROL</tt>, <tt class=literal>_SC_NGROUPS_MAX</tt>, <tt class=literal>_SC_OPEN_MAX</tt>, <tt class=literal>_SC_SAVED_IDS</tt>, <tt class=literal>_SC_STREAM_MAX</tt>, <tt class=literal>_SC_TZNAME_MAX</tt>, and <tt class=literal>_SC_VERSION</tt>

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-7-SECT-1.71">Error constants</A></h4><tt class=literal>E2BIG</tt>, <tt class=literal>EACCES</tt>, <tt class=literal>EAGAIN</tt>, <tt class=literal>EBADF</tt>, <tt class=literal>EBUSY</tt>, <tt class=literal>ECHILD</tt>, <tt class=literal>EDEADLK</tt>, <tt class=literal>EDOM</tt>, <tt class=literal>EEXIST</tt>, <tt class=literal>EFAUL</tt>, <tt class=literal>EFBIG</tt>, <tt class=literal>EINTR</tt>, <tt class=literal>EINVAL</tt>, <tt class=literal>EIO</tt>, <tt class=literal>EISDIR</tt>, <tt class=literal>EMFILE</tt>, <tt class=literal>EMLINK</tt>, <tt class=literal>ENAMETOOLONG</tt>, <tt class=literal>ENFILE</tt>, <tt class=literal>ENODE</tt>, <tt class=literal>ENOENT</tt>, <tt class=literal>ENOEXEC</tt>, <tt class=literal>ENOLCK</tt>, <tt class=literal>ENOMEM</tt>, <tt class=literal>ENOSPC</tt>, <tt class=literal>ENOSYS</tt>, <tt class=literal>ENOTDIR</tt>, <tt class=literal>ENOTEMPTY</tt>, <tt class=literal>ENOTTY</tt>, <tt class=literal>ENXIO</tt>, <tt class=literal>EPERM</tt>, <tt class=literal>EPIPE</tt>, <tt class=literal>ERANGE</tt>, <tt class=literal>EROFS</tt>, <tt class=literal>ESPIPE</tt>, <tt class=literal>ESRCH</tt>, and <tt class=literal>EXDEV</tt>

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-7-SECT-1.72">File control constants</A></h4><tt class=literal>FD_CLOEXEC</tt>, <tt class=literal>F_DUPFD</tt>, <tt class=literal>F_GETFD</tt>, <tt class=literal>F_GETFL</tt>, <tt class=literal>F_GETLK</tt>, <tt class=literal>F_OK</tt>, <tt class=literal>F_RDLCK</tt>, <tt class=literal>F_SETFD</tt>, <tt class=literal>F_SETFL</tt>, <tt class=literal>F_SETLK</tt>, <tt class=literal>F_SETLKW</tt>, <tt class=literal>F_UNLCK</tt>, <tt class=literal>F_WRLCK</tt>, <tt class=literal>O_ACCMODE</tt>, <tt class=literal>O_APPEND</tt>, <tt class=literal>O_CREAT</tt>, <tt class=literal>O_EXCL</tt>, <tt class=literal>O_NOCTTY</tt>, <tt class=literal>O_NONBLOCK</tt>, <tt class=literal>O_RDONLY</tt>, <tt class=literal>O_RDWR</tt>, <tt class=literal>O_TRUNC</tt>, and <tt class=literal>O_WRONLY</tt>

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-7-SECT-1.73">Floating-point constants</A></h4><tt class=literal>DBL_DIG</tt>, <tt class=literal>DBL_EPSILON</tt>, <tt class=literal>DBL_MANT_DIG</tt>, <tt class=literal>DBL_MAX</tt>, <tt class=literal>DBL_MAX_10_EXP</tt>, <tt class=literal>DBL_MAX_EXP</tt>, <tt class=literal>DBL_MIN</tt>, <tt class=literal>DBL_MIN_10_EXP</tt>, <tt class=literal>DBL_MIN_EXP</tt>, <tt class=literal>FLT_DIG</tt>, <tt class=literal>FLT_EPSILON</tt>, <tt class=literal>FLT_MANT_DIG</tt>, <tt class=literal>FLT_MAX</tt>, <tt class=literal>FLT_MAX_10_EXP</tt>, <tt class=literal>FLT_MAX_EXP</tt>, <tt class=literal>FLT_MIN</tt>, <tt class=literal>FLT_MIN_10_EXP</tt>, <tt class=literal>FLT_MIN_EXP</tt>, <tt class=literal>FLT_RADIX</tt>, <tt class=literal>FLT_ROUNDS</tt>, <tt class=literal>LDBL_DIG</tt>, <tt class=literal>LDBL_EPSILON</tt>, <tt class=literal>LDBL_MANT_DIG</tt>, <tt class=literal>LDBL_MAX</tt>, <tt class=literal>LDBL_MAX_10_EXP</tt>, <tt class=literal>LDBL_MAX_EXP</tt>, <tt class=literal>LDBL_MIN</tt>, <tt class=literal>LDBL_MIN_10_EXP</tt>, and <tt class=literal>LDBL_MIN_EXP</tt>

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-7-SECT-1.74">Limit constants</A></h4><tt class=literal>ARG_MAX</tt>, <tt class=literal>CHAR_BIT</tt>, <tt class=literal>CHAR_MAX</tt>, <tt class=literal>CHAR_MIN</tt>, <tt class=literal>CHILD_MAX</tt>, <tt class=literal>INT_MAX</tt>, <tt class=literal>INT_MIN</tt>, <tt class=literal>LINK_MAX</tt>, <tt class=literal>LONG_MAX</tt>, <tt class=literal>LONG_MIN</tt>, <tt class=literal>MAX_CANON</tt>, <tt class=literal>MAX_INPUT</tt>, <tt class=literal>MB_LEN_MAX</tt>, <tt class=literal>NAME_MAX</tt>, <tt class=literal>NGROUPS_MAX</tt>, <tt class=literal>OPEN_MAX</tt>, <tt class=literal>PATH_MAX</tt>, <tt class=literal>PIPE_BUF</tt>, <tt class=literal>SCHAR_MAX</tt>, <tt class=literal>SCHAR_MIN</tt>, <tt class=literal>SHRT_MAX</tt>, <tt class=literal>SHRT_MIN</tt>, <tt class=literal>SSIZE_MAX</tt>, <tt class=literal>STREAM_MAX</tt>, <tt class=literal>TZNAME_MAX</tt>, <tt class=literal>UCHAR_MAX</tt>, <tt class=literal>UINT_MAX</tt>, and <tt class=literal>ULONG_MAX USHRT_MAX</tt>

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-7-SECT-1.75">Locale constants</A></h4><tt class=literal>LC_ALL</tt>, <tt class=literal>LC_COLLATE</tt>, <tt class=literal>LC_CTYPE</tt>, <tt class=literal>LC_MONETARY</tt>, <tt class=literal>LC_NUMERIC</tt>, and <tt class=literal>LC_TIME</tt>

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-7-SECT-1.76">Math constants</A></h4>, and <tt class=literal>HUGE_VAL</tt>

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-7-SECT-1.77">Signal constants</A></h4><tt class=literal>SA_NOCLDSTOP</tt>, <tt class=literal>SIGABRT</tt>, <tt class=literal>SIGALRM</tt>, <tt class=literal>SIGCHLD</tt>, <tt class=literal>SIGCONT</tt>, <tt class=literal>SIGFPE</tt>, <tt class=literal>SIGHUP</tt>, <tt class=literal>SIGILL</tt>, <tt class=literal>SIGINT</tt>, <tt class=literal>SIGKILL</tt>, <tt class=literal>SIGPIPE</tt>, <tt class=literal>SIGQUIT</tt>, <tt class=literal>SIGSEGV</tt>, <tt class=literal>SIGSTOP</tt>, <tt class=literal>SIGTERM</tt>, <tt class=literal>SIGTSTP</tt>, <tt class=literal>SIGTTIN</tt>, <tt class=literal>SIGTTOU</tt>, <tt class=literal>SIGUSR1</tt>, <tt class=literal>SIGUSR2</tt>, <tt class=literal>SIG_BLOCK</tt>, <tt class=literal>SIG_DFL</tt>, <tt class=literal>SIG_ERR</tt>, <tt class=literal>SIG_IGN</tt>, <tt class=literal>SIG_SETMASK</tt>, and <tt class=literal>SIG_UNBLOCK</tt>

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-7-SECT-1.78">Stat constants</A></h4><tt class=literal>S_IRGRP</tt>, <tt class=literal>S_IROTH</tt>, <tt class=literal>S_IRUSR</tt>, <tt class=literal>S_IRWXG</tt>, <tt class=literal>S_IRWXO</tt>, <tt class=literal>S_IRWXU</tt>, <tt class=literal>S_ISGID</tt>, <tt class=literal>S_ISUID</tt>, <tt class=literal>S_IWGRP</tt>, <tt class=literal>S_IWOTH</tt>, <tt class=literal>S_IWUSR</tt>, <tt class=literal>S_IXGRP</tt>, <tt class=literal>S_IXOTH</tt>, and <tt class=literal>S_IXUSR</tt>

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-7-SECT-1.79">Stat macros</A></h4><tt class=literal>S_ISBLK</tt>, <tt class=literal>S_ISCHR</tt>, <tt class=literal>S_ISDIR </tt>, <tt class=literal>S_ISFIFO</tt>, and <tt class=literal>S_ISREG</tt>

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-7-SECT-1.80">Stdlib constants</A></h4><tt class=literal>EXIT_FAILURE</tt>, <tt class=literal>EXIT_SUCCESS</tt>, <tt class=literal>MB_CUR_MAX</tt>, and <tt class=literal>RAND_MAX</tt>

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-7-SECT-1.81">Stdio constants</A></h4><tt class=literal>BUFSIZ</tt>, <tt class=literal>EOF</tt>, <tt class=literal>FILENAME_MAX</tt>, <tt class=literal>L_ctermid</tt>, <tt class=literal>L_cuserid</tt>, <tt class=literal>L_tmpname</tt>, and <tt class=literal>TMP_MAX</tt>

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-7-SECT-1.82">Time constants</A></h4><tt class=literal>CLK_TCK</tt>, and <tt class=literal>CLOCKS_PER_SEC</tt>

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-7-SECT-1.83">Unistd constants</A></h4><tt class=literal>R_OK</tt>, <tt class=literal>SEEK_CUR</tt>, <tt class=literal>SEEK_END</tt>, <tt class=literal>SEEK_SET</tt>, <tt class=literal>STDIN_FILENO</tt>, <tt class=literal>STDOUT_FILENO</tt>, <tt class=literal>STRERR_FILENO</tt>, <tt class=literal>W_OK</tt>, and <tt class=literal>X_OK</tt>

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-7-SECT-1.84">Wait constants</A></h4><tt class=literal>WNOHANG</tt>, and <tt class=literal>WUNTRACED</tt>

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-7-SECT-1.85">Wait macros</A></h4><tt class=literal>WIFEXITED</tt>, <tt class=literal>WEXITSTATUS</tt>, <tt class=literal>WIFSIGNALED</tt>, <tt class=literal>WTERMSIG</tt>, <tt class=literal>WIFSTOPPED</tt>, and <tt class=literal>WSTOPSIG</tt>

</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch07-SECT2-AUTOID.50">Pod::Text--Convert POD Data to Formatted ASCII Text</A></h3>

<div class=programlisting>
<p>
<pre>
use Pod::Text;
pod2text("perlfunc.pod", *<tt class=replaceable><i>filehandle</i></tt>);  # send formatted output to file
$text = pod2text("perlfunc.pod");       # assign formatted output to $text
</PRE>
</DIV>

<p class=para>
Pod::Text converts documentation in the POD format (such
as can be found throughout the Perl distribution) into formatted ASCII text.
Termcap is optionally supported for boldface/underline, and can be enabled
with:

<div class=programlisting>
<p>
<pre>
$Pod::Text::termcap=1
</PRE>
</DIV>

<p class=para>
If termcap is not enabled, backspaces are used to simulate bold and
underlined text.

<p class=para>
The <tt class=literal>pod2text()</tt> subroutine can take one or two arguments.  The first
is the name of a file to read the POD from, or <tt class=literal>"&lt;&amp;STDIN"</tt> to read
from <tt class=literal>STDIN</tt>.  The second argument, if provided, is a filehandle glob
where output should be sent.  (Use <tt class=literal>*STDOUT</tt> to write to <tt class=literal>STDOUT</tt>.)

<p class=para>
A separate <i class=emphasis>pod2text</I> program is included as part of the standard Perl
distribution.  Primarily, a wrapper for Pod::Text, it can be
invoked this way:

<div class=programlisting>
<p>
<pre>
pod2text &lt; input.pod
</PRE>
</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch07-SECT2-AUTOID.51">Safe--Create Safe Namespaces for Evaluating Perl Code</A></h3>

<div class=programlisting>
<p>
<pre>
use Safe;
$cpt = new Safe;  # create a new safe compartment
</PRE>
</DIV>

<p class=para>
<a name="CH07.SAFE1"></A><a name="CH07.SAFE2"></A><a name="CH07.SAFE3"></A><a name="CH07.SAFE4"></A><a name="CH07.SAFE5"></A>The Safe extension module allows the creation of compartments in which
untrusted Perl code can be evaluated.  Each compartment provides a new
namespace and has an associated operator mask.

<p class=para>
The root of the namespace (that is, <tt class=literal>main::</tt>) is changed to a
different package, and code evaluated in the compartment cannot
refer to variables outside this namespace, even with run-time
glob lookups and other tricks.  Code that is compiled outside
the compartment can choose to place variables into (or share
variables with) the compartment's namespace, and only that
data will be visible to code evaluated in the compartment.

<p class=para>
By default, the only variables shared with compartments are the
underscore variables <b>$_</B> and <b>@_</B> (and, technically, the much less
frequently used <tt class=literal>%_</tt>, the <tt class=literal>_</tt> filehandle and so on).  This is because
otherwise Perl operators that default to <tt class=literal>$_</tt> would not work and neither
would the assignment of arguments to <tt class=literal>@_</tt> on subroutine entry.

<p class=para>
<a name="CH07.SAFE6"></A>Each compartment has an associated operator mask with which you can exclude
particular Perl operators from the compartment.  (The mask syntax is explained
below.)  Recall that Perl code is compiled into an internal format before
execution.  Evaluating Perl code (for example, via <tt class=literal>eval</tt>
<tt class=replaceable><i>STRING</i></tt> or <tt class=literal>do</tt>
<tt class=replaceable><i>FILE</i></tt>) causes the code to be compiled into an internal
format and then, provided there was no error in the compilation, executed.  Code
evaluated in a compartment is compiled subject to the compartment's operator
mask.  Attempting to evaluate compartmentalized code that contains a masked
operator will cause the compilation to fail with an error.  The code will not be
executed.

<p class=para>
By default, the operator mask for a newly created compartment masks out all
operations that give access to the system in some sense.  This includes masking
off operators such as <a href="ch03_02.htm">system</A>, <a href="ch03_02.htm">open</A>, <a href="ch03_02.htm">chown</A>, and <a href="ch03_02.htm">shmget</A>, but operators such as <a href="ch03_02.htm">print</A>, <a href="ch03_02.htm">sysread</A>, and
<tt class=literal>&lt;FILEHANDLE&gt;</tt> are not masked off.  These file operators
are allowed since, in order for the code in the compartment to have access to a
filehandle, the code outside the compartment must have explicitly placed the
filehandle variable inside the compartment.

<p class=para>
Since it is only at the compilation stage that the operator mask applies,
controlled access to potentially unsafe operations can be achieved by having a
handle to a wrapper subroutine (written outside the compartment) placed into the
compartment. For example:

<div class=programlisting>
<p>
<pre>
$cpt = new Safe;
sub wrapper {
    ;# vet arguments and perform potentially unsafe operations
}
$cpt-&gt;share('&amp;wrapper');  # see share method below
</PRE>
</DIV>

<p class=para>
An operator mask exists at user-level as a string of bytes of length
<tt class=literal>MAXO</tt>, each of which is either <tt class=literal>0x00</tt> or
<tt class=literal>0x01</tt>.  Here, <tt class=literal>MAXO</tt> is the number of
operators in the current version of Perl.  The subroutine
<tt class=literal>MAXO</tt> (available for export by package Safe) returns the
number of operators in the currently running Perl executable.  The presence of a
<tt class=literal>0x01</tt> byte at offset <tt class=replaceable><i>n</i></tt> of the
string indicates that operator number <tt class=replaceable><i>n</i></tt> should be
masked (that is, disallowed).  The Safe extension makes available routines for
converting from operator names to operator numbers (and vice versa) and for
converting from a list of operator names to the corresponding mask (and vice
versa).

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-7-SECT-1.86">Methods in class Safe</A></h4>

<p class=para>
To create a new compartment, use:

<div class=programlisting>
<p>
<pre>
$cpt = new Safe <tt class=replaceable><i>NAMESPACE</i></tt>, <tt class=replaceable><i>MASK</i></tt>;
</PRE>
</DIV>

<p class=para>
where <tt class=replaceable><i>NAMESPACE</i></tt> is the root namespace to use for the
compartment (defaults to <tt class=literal>Safe::Root000000000</tt>, auto-incremented
for each new compartment).  <tt class=replaceable><i>MASK</i></tt> is the operator mask to use.
Both arguments are optional.

<p class=para>
The following methods can then be used on the compartment
object returned by the above constructor.  The object argument
is implicit in each case.

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>root</tt>(<tt class=replaceable><i>NAMESPACE</i></tt><tt class=literal>)</tt><dd>

<p class=para>
A get-or-set method for the compartment's namespace.  With the
<tt class=replaceable><i>NAMESPACE</i></tt> argument present, it sets the root namespace for the
compartment.  With no <tt class=replaceable><i>NAMESPACE</i></tt> argument present, it returns the
current root namespace of the compartment.

<p>
<dt class=varlistentry><tt class=literal>mask</tt>(<tt class=replaceable><i>MASK</i></tt><tt class=literal>)</tt><dd>

<p class=para>
A get-or-set method for the compartment's operator mask.
With the <tt class=replaceable><i>MASK</i></tt> argument present, it sets the operator mask for the
compartment.  With no <tt class=replaceable><i>MASK</i></tt> argument present, it returns the
current operator mask of the compartment.

<p>
<dt class=varlistentry><tt class=literal>trap</tt>(<tt class=replaceable><i>OP</i></tt><tt class=literal>, ...)</tt><dd>

<p class=para>
Sets bits in the compartment's operator mask corresponding
to each operator named in the list of arguments.  Each <tt class=replaceable><i>OP</i></tt> can be
either the name of an operation or its number.  See <i class=emphasis>opcode.h</I> or
<i class=emphasis>opcode.pl</I> in the main Perl distribution for a canonical list of
operator names.

<p>
<dt class=varlistentry><tt class=literal>untrap(</tt><tt class=replaceable><i>OP</i></tt><tt class=literal>, ...)</tt><dd>

<p class=para>
Resets bits in the compartment's operator mask corresponding
to each operator named in the list of arguments.  Each <tt class=replaceable><i>OP</i></tt> can be
either the name of an operation or its number.  See <i class=emphasis>opcode.h</I> or
<i class=emphasis>opcode.pl</I> in the main Perl distribution for a canonical list of
operator names.

<p>
<dt class=varlistentry><tt class=literal>share(</tt><tt class=replaceable><i>VARNAME</i></tt><tt class=literal>, ...)</tt><dd>

<p class=para>
Shares the variables in the argument list with the compartment.  Each
<tt class=replaceable><i>VARNAME</i></tt> must be a string containing the name of a variable with
a leading type identifier included.  Examples of legal variable names
are <tt class=literal>$foo</tt> for a scalar, <tt class=literal>@foo</tt> for an array, <tt class=literal>%foo</tt>
for a hash, <tt class=literal>&amp;foo</tt> for a subroutine and <tt class=literal>*foo</tt> for a
typeglob.  (A typeglob results in the sharing of all symbol table
entries associated with <tt class=literal>foo</tt>, including scalar, array, hash,
subroutine, and filehandle.)

<p>
<dt class=varlistentry><tt class=literal>varglob(</tt><tt class=replaceable><i>VARNAME</i></tt><tt class=literal>)</tt><dd>

<p class=para>
Returns a typeglob for the symbol table entry of <tt class=replaceable><i>VARNAME</i></tt> in the package
of the compartment. <tt class=replaceable><i>VARNAME</i></tt> must be the name of a variable without
any leading type marker. For example:

<div class=programlisting>
<p>
<pre>
$cpt = new Safe 'Root';
$Root::foo = "Hello world";
# Equivalent version which doesn't need to know $cpt's package name:
${$cpt-&gt;varglob('foo')} = "Hello world";
</PRE>
</DIV>

<p>
<dt class=varlistentry><tt class=literal>reval(</tt><tt class=replaceable><i>STRING</i></tt><tt class=literal>)</tt><dd>

<p class=para>
Evaluates <tt class=replaceable><i>STRING</i></tt> as Perl code inside the compartment.
The code can only see the compartment's namespace (as returned by the
<tt class=literal>root()</tt> method).  Any attempt by code in
<tt class=replaceable><i>STRING</i></tt> to use an operator which is in the
compartment's mask will cause an error (at run-time of the main program, but at
compile-time for the code in <tt class=replaceable><i>STRING</i></tt>).  If the code in
<tt class=replaceable><i>STRING</i></tt> includes an <a href="ch03_02.htm">eval</A> (and the <a href="ch03_02.htm">eval</A> operator is permitted) then the
error can occur at run-time for <tt class=replaceable><i>STRING</i></tt> (although it
is at compile-time for the <a href="ch03_02.htm">eval</A> within
<tt class=replaceable><i>STRING</i></tt>).  The error is of the form "<tt class=literal>%s
trapped by operation mask operation....</tt>"  If an operation
is trapped in this way, then the code in <tt class=replaceable><i>STRING</i></tt> will
not be executed.  If such a trapped operation occurs, or if any other
compile-time or return error occurs, then <b>$@</B> is
set to the error message, just as with an <a href="ch03_02.htm">eval</A>.  If there is no error, then the
method returns the value of the last expression evaluated, or a return statement
may be used, just as with subroutines and <a href="ch03_02.htm">eval</A>.

<p>
<dt class=varlistentry><tt class=literal>rdo(</tt><tt class=replaceable><i>FILENAME</i></tt><tt class=literal>)</tt><dd>

<p class=para>
Evaluates the contents of file <tt class=replaceable><i>FILENAME</i></tt> inside the compartment.
See the <tt class=literal>reval()</tt> method earlier for further details.</DL>
</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-7-SECT-1.87">Subroutines in package Safe</A></h4>

<p class=para>
The Safe package contains subroutines for manipulating operator
names and operator masks.  All are available for export by the package.
The canonical list of operator names is contained in the array
<tt class=literal>op_name</tt> defined and initialized in file <i class=emphasis>opcode.h</I> of the Perl
source distribution.

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>ops_to_mask(</tt><tt class=replaceable><i>OP</i></tt><tt class=literal>, ...)</tt><dd>

<p class=para>
Takes a list of operator names and returns an operator mask
with precisely those operators masked.

<p>
<dt class=varlistentry><tt class=literal>mask_to_ops(</tt><tt class=replaceable><i>MASK</i></tt><tt class=literal>)</tt><dd>

<p class=para>
Takes an operator mask and returns a list of operator names
corresponding to those operators which are masked in <tt class=replaceable><i>MASK</i></tt>.

<p>
<dt class=varlistentry><tt class=literal>opcode(</tt><tt class=replaceable><i>OP</i></tt><tt class=literal>, ...)</tt><dd>

<p class=para>
Takes a list of operator names and returns the corresponding
list of opcodes (which can then be used as byte offsets into a mask).

<p>
<dt class=varlistentry><tt class=literal>opname(</tt><tt class=replaceable><i>OP</i></tt><tt class=literal>, ...)</tt><dd>

<p class=para>
Takes a list of opcodes and returns the corresponding list of
operator names.

<p>
<dt class=varlistentry><tt class=literal>fullmask</tt><dd>

<p class=para>
Returns a mask with all operators masked.
It returns the string <tt class=literal>`\001` x MAXO()</tt>.

<p>
<dt class=varlistentry><tt class=literal>emptymask</tt><dd>

<p class=para>
Returns a mask with all operators unmasked.
It returns the string <tt class=literal>`\0` x MAXO()</tt>.  This is useful if you
want a compartment to make use of the name-space protection
features but do not want the default restrictive mask.

<p>
<dt class=varlistentry><tt class=literal>MAXO</tt><dd>

<p class=para>
This returns the number of operators (hence the length of an
operator mask).

<p>
<dt class=varlistentry><tt class=literal>op_mask</tt><dd>

<p class=para>
This returns the operator mask that is actually in effect at the
time the invocation to the subroutine is compiled.
This is probably not terribly useful.</DL>
</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch07-SECT2-AUTOID.52">SDBM_File--Tied Access to SDBM Files</A></h3>

<div class=programlisting>
<p>
<pre>
use Fcntl;
use SDBM_File;
tie(%hash, SDBM_File, 'Op.dbmx', O_RDWR|O_CREAT, 0644);
# read/writes of %hash are now read/writes of the file, Op.dmx.pag
untie %h;
</PRE>
</DIV>

<p class=para>
See Perl's built-in <a href="ch03_02.htm">tie</A> function.  Also see the DB_File module in this
chapter for a description of a closely related module.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch07-SECT2-AUTOID.53">Search::Dict--Search for Key in Dictionary File</A></h3>

<div class=programlisting>
<p>
<pre>
use Search::Dict;
look *FILEHANDLE, $key, $dict, $fold;
</PRE>
</DIV>

<p class=para>
The <tt class=literal>look()</tt> routine sets the file position in <tt class=literal>FILEHANDLE</tt>
to be the first line greater than or equal (stringwise) to <tt class=literal>$key</tt>.
It returns the new file position, or -1 if an error occurs.

<p class=para>
If <tt class=literal>$dict</tt> is true, the search is in dictionary order (ignoring
everything but word characters and whitespace).  If <tt class=literal>$fold</tt> is
true, then case is ignored.  The file must be sorted into the appropriate order,
using the <b>-d</B> and <b>-f</B> flags of UNIX
<i class=emphasis>sort</I> (1), or the equivalent command on non-UNIX
machines.  Unpredictable results will otherwise ensue.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch07-SECT2-AUTOID.54">SelectSaver--Save and Restore Selected Filehandle</A></h3>

<div class=programlisting>
<p>
<pre>
use SelectSaver;
select $fh_old;
{
    my $saver = new SelectSaver($fh_new); # selects $fh_new
}
# block ends; object pointed to by "my" $saver is destroyed
# previous handle, $fh_old is now selected
# alternative invocation, without filehandle argument
my $saver = new SelectSaver; # selected filehandle remains unchanged
</PRE>
</DIV>

<p class=para>
A SelectSaver object contains a reference to the filehandle that
was selected when the object was created.  If its <tt class=literal>new()</tt> method is
given a filehandle as an argument, then that filehandle is selected;
otherwise, the selected filehandle remains unchanged.

<p class=para>
When a SelectSaver object is destroyed, the filehandle that
was selected immediately prior to the object's creation is re-selected.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch07-SECT2-AUTOID.55">SelfLoader--Load Functions Only on Demand</A></h3>

<div class=programlisting>
<p>
<pre>
package GoodStuff;
use SelfLoader;
<i class=emphasis>[initializing code]</I>
_ _DATA_ _
sub {...};
</PRE>
</DIV>

<p class=para>
<a name="CH07.SELF"></A>This module is used for delayed loading of Perl functions
that (unlike AutoLoader functions) are packaged within your script file.
This gives the <i class=emphasis>appearance</I>
of faster loading.

<p class=para>
In the example above, SelfLoader tells its user (GoodStuff) that
functions in the GoodStuff package are to
be autoloaded from after the <tt class=literal>_ _DATA_ _</tt> token.

<p class=para>
The <tt class=literal>_ _DATA_ _</tt> token tells Perl that the code
for compilation is finished.  Everything after the
<tt class=literal>_ _DATA_ _</tt> token is available for reading via
the filehandle <tt class=literal>GoodStuff::DATA</tt>, where

GoodStuff is the name of the current package when the
<tt class=literal>_ _DATA_ _</tt> token is reached. This token works
just the same as <tt class=literal>_ _END_ _</tt> does in package
main, except that data after <tt class=literal>_ _END_ _</tt> is
retrievable only in package main, whereas data after
<tt class=literal>_ _DATA_ _</tt> is retrievable in whatever the
current package is.

<p class=para>
Note that it is possible to have <tt class=literal>_ _DATA_ _</tt>
tokens in the same package in multiple files, and that the last
<tt class=literal>_ _DATA_ _</tt> token in a given package that is
encountered by the compiler is the one accessible by the filehandle.  That is,
whenever the <tt class=literal>_ _DATA_ _</tt> token is parsed, any
<tt class=literal>DATA</tt> filehandle previously open in the current package
(opened in a different file, presumably) is closed so that the new one can be
opened. (This also applies to <tt class=literal>_ _END_ _</tt>
and the <tt class=literal>main::DATA</tt> filehandle:
<tt class=literal>main::DATA</tt> is reopened whenever
<tt class=literal>_ _END_ _</tt> is encountered, so
any former association is lost.)

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-7-SECT-1.88">SelfLoader autoloading</A></h4>

<p class=para>
The SelfLoader will read from the <tt class=literal>GoodStuff::DATA</tt> filehandle
to get definitions for functions placed after
<tt class=literal>_ _DATA_ _</tt>, and then
<a href="ch03_02.htm">eval</A> the requested
subroutine the first time
it's called. The costs
are the one-time parsing of the data after
<tt class=literal>_ _DATA_ _</tt>, and a load
delay for the first call
of any autoloaded function. The benefits are a speeded up
compilation phase, with no need to load functions that are never used.

<p class=para>
You can use <tt class=literal>_ _END_ _</tt> after
<tt class=literal>_ _DATA_ _</tt>.  The SelfLoader will stop reading
from <tt class=literal>DATA</tt> if it encounters the
<tt class=literal>_ _END_ _</tt> token, just as you might expect.  If
the <tt class=literal>_ _END_ _</tt> token is present, and is followed
by the token <tt class=literal>DATA</tt>, then the SelfLoader leaves the
<tt class=literal>GoodStuff::DATA</tt> filehandle open on the line after that token.

<p class=para>
The SelfLoader exports the <tt class=literal>AUTOLOAD</tt> subroutine to the package using the
SelfLoader, and this triggers the automatic loading of an undefined
subroutine out of its <tt class=literal>DATA</tt> portion the first time that subroutine is
called.

<p class=para>
There is no advantage to putting subroutines that will always
be called after the <tt class=literal>_ _DATA_ _</tt> token.

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-7-SECT-1.89">Autoloading and file-scoped lexicals</A></h4>

<p class=para>
A <tt class=literal>my $pack_lexical</tt> statement makes the variable
<tt class=literal>$pack_lexical</tt> visible <i class=emphasis>only</I> up to the
<tt class=literal>_ _DATA_ _</tt> token.  That means that subroutines
declared elsewhere cannot see lexical variables.  Specifically, autoloaded
functions cannot see such lexicals (this applies to both the SelfLoader and
the Autoloader).  The <tt class=literal>use vars</tt> pragma (see later in this
chapter) provides a way to declare package-level globals that will be visible to
autoloaded routines.

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-7-SECT-1.90">SelfLoader and AutoLoader</A></h4>

<p class=para>
The SelfLoader can replace the AutoLoader--just change <tt class=literal>use AutoLoader</tt>
to <tt class=literal>use SelfLoader</tt>[5]
and the <tt class=literal>_ _END_ _</tt> token to <tt class=literal>_ _DATA_ _</tt>.

<blockquote class=footnote>
<p class=para>[5] 
Be aware, however, that the SelfLoader exports
an <tt class=literal>AUTOLOAD</tt> function into your package.  But if you have your own <tt class=literal>AUTOLOAD</tt> and
are using the AutoLoader too, you probably know what you're doing.
</blockquote>
<p class=para>
There is no need to inherit from the SelfLoader.

<p class=para>
The SelfLoader works similarly to the AutoLoader, but picks up the subroutine
definitions from after the <tt class=literal>_ _DATA_ _</tt> instead
of in the <i class=emphasis>lib/auto/</I> directory.  SelfLoader needs less
maintenance at the time the module is installed, since there's no need to run
AutoSplit.  And it can run faster at load time because it doesn't need to keep
opening and closing files to load subroutines.  On the other hand, it can run
slower because it needs to parse the code after the
<tt class=literal>_ _DATA_ _</tt>. Details of the AutoLoader and
another view of these distinctions can be found in that module's documentation.

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-7-SECT-1.91">How to read DATA from your Perl program</A></h4>

<p class=para>
(This section is only relevant if you want to use
the <tt class=literal>GoodStuff::DATA</tt> together with the SelfLoader.)

<p class=para>
The SelfLoader reads from wherever the current position of the
<tt class=literal>GoodStuff::DATA</tt> filehandle is, until EOF or the
<tt class=literal>_ _END_ _</tt> token.  This means that if you want
to use that filehandle (and <i class=emphasis>only</I> if you want to), you
should either

<p>
<ul class=itemizedlist>
<li class=listitem>Put all your subroutine declarations immediately
after the <tt class=literal>_ _DATA_ _</tt> token and put your own data after those
declarations, using the <tt class=literal>_ _END_ _</tt> token to mark
the end of subroutine
declarations.  You must also ensure that the SelfLoader first reads its
stubs by calling <tt class=literal>SelfLoader-&gt;load_stubs();</tt>, or by using a function
which is selfloaded; or

<p>
</UL>
<p>
<ul class=itemizedlist>
<li class=listitem>You should read the <tt class=literal>GoodStuff::DATA</tt>
filehandle first, leaving the handle open and positioned at the first line
of subroutine declarations.

<p>
</UL>
<p class=para>
You could even conceivably do both.

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-7-SECT-1.92">Classes and inherited methods</A></h4>

<p class=para>
This section is only relevant if your module is a class, and has methods
that could be inherited.

<p class=para>
A subroutine stub (or forward declaration) looks like:

<div class=programlisting>
<p>
<pre>
sub <tt class=replaceable><i>stub</i></tt>;
</PRE>
</DIV>

<p class=para>
That is, it is a subroutine declaration without the body of the subroutine.  For
modules that aren't classes, there is no real need for stubs as far as
autoloading is concerned.

<p class=para>
For modules that <i class=emphasis>are</I> classes, and need to handle inherited
methods, stubs are needed to ensure that the method inheritance mechanism works
properly. You can load the stubs into the module at <a href="ch03_02.htm">require</A> time, by adding the statement
<tt class=literal>SelfLoader-&gt;load_stubs();</tt> to the module to do this.

<p class=para>
The alternative is to put the stubs in before the
<tt class=literal>_ _DATA_ _</tt> token before releasing the module,
and for this purpose the Devel::SelfStubber module is available.  However this
does require the extra step of ensuring that the stubs are in the module.  If
you do this, we strongly recommended that you do it before releasing the module
and <i class=emphasis>not</I> at install time.

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-7-SECT-1.93">Multiple packages and fully qualified subroutine names</A></h4>

<p class=para>
Subroutines in multiple packages within the same file are supported--but
you should note that this requires exporting
<tt class=literal>SelfLoader::AUTOLOAD</tt> to every package which requires it. This
is done automatically by the SelfLoader when it first loads the subs into the
cache, but you should really specify it in the initialization before the
<tt class=literal>_ _DATA_ _</tt> by putting a <tt class=literal>use
SelfLoader</tt> statement in each package.

<p class=para>
Fully qualified subroutine names are also supported. For example:

<div class=programlisting>
<p>
<pre>
<tt class=literal>_ _DATA_ _</tt>
sub foo::bar {23}
package baz;
sub dob {32}
</PRE>
</DIV>

<p class=para>
will all be loaded correctly by the SelfLoader, and the SelfLoader will ensure
that the packages "foo" and "baz" correctly have the
<tt class=literal>SelfLoader::AUTOLOAD</tt> method when the data after
<tt class=literal>_ _DATA_ _</tt> is first parsed.

<p class=para>
See the discussion of autoloading in <a href="ch05_01.htm">Chapter 5, <i>Packages, Modules, and Object Classes</i></A>.
Also see the AutoLoader module, a
utility that handles modules that have been into a collection of files for
autoloading.

</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch07-SECT2-AUTOID.56">Shell--Run Shell Commands Transparently Within Perl</A></h3>

<div class=programlisting>
<p>
<pre>
use Shell qw(date cp ps);  # list shell commands you want to use
$date = date();   # put the output of the date(1) command into $date
cp("-p" "/etc/passwd", "/tmp/passwd");  # copy password file to a tmp file
print ps("-ww");  # print the results of a "ps -ww" command
</PRE>
</DIV>

<p class=para>
This module allows you to invoke UNIX utilities accessible from the
shell command line as if they were Perl subroutines.  Arguments (including
switches) are passed to the utilities as strings.

<p class=para>
The Shell module essentially duplicates the built-in backtick
functionality of Perl.  The module was written so that its implementation
could serve as a demonstration of autoloading.  It also shows how function
calls can be mapped to subprocesses.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch07-SECT2-AUTOID.57">sigtrap--Enable Stack Backtrace on Unexpected Signals</A></h3>

<div class=programlisting>
<p>
<pre>
use sigtrap;       # initialize default signal handlers
use sigtrap <tt class=replaceable><i>LIST</i></tt>;  # <tt class=replaceable><i>LIST</i></tt> example:  qw(BUS SEGV PIPE SYS ABRT TRAP)
</PRE>
</DIV>

<p class=para>
The <tt class=literal>sigtrap</tt> pragma initializes a signal handler for the signals
specified in <tt class=replaceable><i>LIST</i></tt>, or (if no list is given) for a set of default
signals.  The signal handler prints a stack dump of the program and then
issues a (non-trapped) ABRT signal.

<p class=para>
In the absence of <tt class=replaceable><i>LIST</i></tt>, the signal handler is set up to deal with
the <tt class=literal>ABRT</tt>, <tt class=literal>BUS</tt>, <tt class=literal>EMT</tt>, <tt class=literal>FPE</tt>, <tt class=literal>ILL</tt>, <tt class=literal>PIPE</tt>, <tt class=literal>QUIT</tt>, <tt class=literal>SEGV</tt>, <tt class=literal>SYS</tt>, <tt class=literal>TERM</tt>, and <tt class=literal>TRAP</tt> signals.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch07-SECT2-AUTOID.58">Socket--Load the C socket.h Defines and Structure Manipulators</A></h3><a name="CH07.SOCK"></A>

<div class=programlisting>
<p>
<pre>
use Socket;
$proto = getprotobyname('udp');
socket(Socket_Handle, PF_INET, SOCK_DGRAM, $proto);
$iaddr = gethostbyname('hishost.com');
$port = getservbyname('time', 'udp');
$sin = sockaddr_in($port, $iaddr);
send(Socket_Handle, 0, 0, $sin);
$proto = getprotobyname('tcp');
socket(Socket_Handle, PF_INET, SOCK_STREAM, $proto);
$port = getservbyname('smtp');
$sin = sockaddr_in($port, inet_aton("127.1"));
$sin = sockaddr_in(7, inet_aton("localhost"));
$sin = sockaddr_in(7, INADDR_LOOPBACK);
connect(Socket_Handle, $sin);
($port, $iaddr) = sockaddr_in(getpeername(Socket_Handle));
$peer_host = gethostbyaddr($iaddr, AF_INET);
$peer_addr = inet_ntoa($iaddr);
socket(Socket_Handle, PF_UNIX, SOCK_STREAM, 0);
unlink('/tmp/usock');
$sun = sockaddr_un('/tmp/usock');
bind(Socket_Handle, $sun);
</PRE>
</DIV>

<p class=para>
This module is just a translation of the C <i class=emphasis>socket.h</I> file.
Unlike the old mechanism of requiring a translated <i class=emphasis>socket.ph</I>
file, this uses the <i class=emphasis>h2xs</I> program (see the Perl source distribution)
and your native C compiler.  This means that it has a
far more likely chance of getting the numbers right.  This includes
all of the commonly used preprocessor-defined constants like <tt class=literal>AF_INET</tt>,
<tt class=literal>SOCK_STREAM</tt>, and so on.

<p class=para>
In addition, some structure manipulation functions are available:

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>inet_aton</tt> <tt class=replaceable><i>HOSTNAME</i></tt><dd>

<p class=para>
Takes a string giving the name of a host, and translates that
to a four-byte, packed string (structure).  Takes arguments of both
the <tt class=literal>rtfm.mit.edu</tt> and <tt class=literal>18.181.0.24</tt> types.  If the host name
cannot be resolved, returns the undefined value.

<p>
<dt class=varlistentry><tt class=literal>inet_ntoa</tt> <tt class=replaceable><i>IP_ADDRESS</i></tt><dd>

<p class=para>
Takes a four-byte IP address (as returned by <tt class=literal>inet_aton()</tt>)
and translates it into a string of the form <i class=emphasis>d.d.d.d</I>
where the <i class=emphasis>d</I>s are numbers less than 256 (the normal,
readable, dotted-quad notation for Internet addresses).

<p>
<dt class=varlistentry><tt class=literal>INADDR_ANY</tt><dd>

<p class=para>
Note: This function does not return a number, but a packed string.
Returns the four-byte wildcard IP address that specifies any
of the host's IP addresses. (A particular machine can have
more than one IP address, each address corresponding to
a particular network interface.  This wildcard address
allows you to bind to all of them simultaneously.)
Normally equivalent to <tt class=literal>inet_aton('0.0.0.0')</tt>.

<p>
<dt class=varlistentry><tt class=literal>INADDR_LOOPBACK</tt><dd>

<p class=para>
Note:  does not return a number, but a packed string.
Returns the four-byte loopback address.  Normally equivalent
to <tt class=literal>inet_aton('localhost')</tt>.

<p>
<dt class=varlistentry><tt class=literal>INADDR_NONE</tt><dd>

<p class=para>
Note:  does not return a number, but a packed string.
Returns the four-byte invalid IP address.  Normally equivalent
to <tt class=literal>inet_aton('255.255.255.255')</tt>.

<p>
<dt class=varlistentry><tt class=literal>sockaddr_in</tt> <tt class=replaceable><i>PORT, ADDRESS</i></tt><dd>

<p class=para>
<p>
<dt class=varlistentry><tt class=literal>sockaddr_in</tt> <tt class=replaceable><i>SOCKADDR_IN</i></tt><dd>

<p class=para>
In a list context, unpacks its <tt class=replaceable><i>SOCKADDR_IN</i></tt> argument and returns
a list consisting of <tt class=literal>(</tt><tt class=replaceable><i>PORT</i></tt><tt class=literal>, </tt><tt class=replaceable><i>ADDRESS</i></tt><tt class=literal>)</tt>.
In a scalar context, packs its <tt class=literal>(</tt><tt class=replaceable><i>PORT</i></tt><tt class=literal>, </tt><tt class=replaceable><i>ADDRESS</i></tt><tt class=literal>)</tt>
arguments as a <tt class=replaceable><i>SOCKADDR_IN</i></tt> and
returns it.  If this is confusing, use <tt class=literal>pack_sockaddr_in()</tt> and
<tt class=literal>unpack_sockaddr_in()</tt> explicitly.

<p>
<dt class=varlistentry><tt class=literal>pack_sockaddr_in</tt> <tt class=replaceable><i>PORT, IP_ADDRESS</i></tt><dd>

<p class=para>
Takes two arguments, a port number and a four-byte <tt class=replaceable><i>IP_ADDRESS</i></tt>
(as returned by <tt class=literal>inet_aton()</tt>).  Returns the <tt class=literal>sockaddr_in</tt>
structure with those arguments packed in with <tt class=literal>AF_INET</tt> filled in.
For Internet domain sockets, this
structure is normally what you need for the arguments in <a href="ch03_02.htm">bind</A>,
<a href="ch03_02.htm">connect</A>, and <a href="ch03_02.htm">send</A>, and is also returned by <a href="ch03_02.htm">getpeername</A>,
<a href="ch03_02.htm">getsockname</A>, and <a href="ch03_02.htm">recv</A>.

<p>
<dt class=varlistentry><tt class=literal>unpack_sockaddr_in</tt> <tt class=replaceable><i>SOCKADDR_IN</i></tt><dd>

<p class=para>
Takes a <tt class=literal>sockaddr_in</tt> structure (as returned by <tt class=literal>pack_sockaddr_in()</tt>)
and returns a list of two elements: the port and the four-byte IP address.
This function will croak if the structure does not have <tt class=literal>AF_INET</tt> in the right place.

<p>
<dt class=varlistentry><tt class=literal>sockaddr_un</tt> <tt class=replaceable><i>PATHNAME</i></tt><dd>

<p class=para>
<p>
<dt class=varlistentry><tt class=literal>sockaddr_un</tt> <tt class=replaceable><i>SOCKADDR_UN</i></tt><dd>

<p class=para>
In a list context, it unpacks its <tt class=replaceable><i>SOCKADDR_UN</i></tt> argument and returns
a list consisting of <tt class=literal>(</tt><tt class=replaceable><i>PATHNAME</i></tt><tt class=literal>)</tt>.  In a scalar context, it packs its
<tt class=replaceable><i>PATHNAME</i></tt> argument as a <tt class=literal>SOCKADDR_UN</tt> and returns it.  If
this is confusing, use
<tt class=literal>pack_sockaddr_un()</tt> and <tt class=literal>unpack_sockaddr_un()</tt> explicitly.
These functions are only supported if your system has &lt;<i class=emphasis>sys/un.h</I>&gt;.

<p>
<dt class=varlistentry><tt class=literal>pack_sockaddr_un</tt> <tt class=replaceable><i>PATH</i></tt><dd>

<p class=para>
Takes one argument, a pathname.  Returns the <tt class=literal>sockaddr_un</tt> structure with
that path packed in with <tt class=literal>AF_UNIX</tt> filled in.  For UNIX domain sockets,
this structure is normally what you need for the arguments in <a href="ch03_02.htm">bind</A>,
<a href="ch03_02.htm">connect</A>, and <a href="ch03_02.htm">send</A>, and is also returned by <a href="ch03_02.htm">getpeername</A>,
<a href="ch03_02.htm">getsockname</A> and <a href="ch03_02.htm">recv</A>.

<p>
<dt class=varlistentry><tt class=literal>unpack_sockaddr_un</tt> <tt class=replaceable><i>SOCKADDR_UN</i></tt><dd>

<p class=para>
Takes a <tt class=literal>sockaddr_un</tt> structure (as returned by <tt class=literal>pack_sockaddr_un()</tt>)
and returns the pathname.  Will croak if the structure does not
have <tt class=literal>AF_UNIX</tt> in the right place.</DL>
</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch07-SECT2-AUTOID.59">strict--Restrict Unsafe Constructs</A></h3>

<div class=programlisting>
<p>
<pre>
use strict;        # apply all possible restrictions
use strict 'vars'; # restrict unsafe use of variables for rest of block
use strict 'refs'; # restrict unsafe use of references for rest of block
use strict 'subs'; # restrict unsafe use of barewords for rest of block
no strict 'vars';  # relax restrictions on variables for rest of block
no strict 'refs';  # relax restrictions on references for rest of block
no strict 'subs';  # relax restrictions on barewords for rest of block
</PRE>
</DIV>

<p class=para>
If no import list is given to <tt class=literal>use strict</tt>, all possible restrictions
upon unsafe Perl constructs are imposed.  (This is the safest mode to
operate in, but is sometimes too
strict for casual programming.)  Currently, there are three possible things
to be strict about:  <tt class=literal>refs</tt>, <tt class=literal>vars</tt>, and <tt class=literal>subs</tt>.

<p class=para>
In all cases the restrictions apply only until the end of the immediately
enclosing block.

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>strict 'refs'</tt><dd>

<p class=para>
This generates a run-time error if you
use symbolic references.

<div class=programlisting>
<p>
<pre>
use strict 'refs';
$ref = \$foo;
print $$ref;        # ok
$ref = "foo";
print $$ref;        # run-time error; normally ok
</PRE>
</DIV>

<p>
<dt class=varlistentry><tt class=literal>strict 'vars'</tt><dd>

<p class=para>
This generates a compile-time error if you access a variable that wasn't
declared via <a href="ch03_02.htm">my</A>, or fully qualified, or imported.

<div class=programlisting>
<p>
<pre>
use strict 'vars';
use vars '$foe';
$SomePack::fee = 1;  # ok, fully qualified
my $fie = 10;        # ok, my() var
$foe = 7;            # ok, pseudo-imported by 'use vars'
$foo = 9;            # blows up--did you mistype $foe maybe?
</PRE>
</DIV>

<p class=para>
The last line generates a compile-time error because you're touching a
global name without fully qualifying it.  Since the purpose of this
pragma is to encourage use of <a href="ch03_02.htm">my</A> variables, using <a href="ch03_02.htm">local</A> on a
variable isn't good enough to declare it.  You can, however, use
<a href="ch03_02.htm">local</A> on a variable that you declared with <tt class=literal>use vars</tt>.

<p>
<dt class=varlistentry><tt class=literal>strict 'subs'</tt><dd>

<p class=para>
This generates a compile-time error if
you try to use a bareword identifier that's not a predeclared subroutine.

<div class=programlisting>
<p>
<pre>
use strict 'subs';
$SIG{PIPE} = Plumber;     # blows up (assuming Plumber sub not declared yet)
$SIG{PIPE} = "Plumber";   # okay, means "main::Plumber" really
$SIG{PIPE} = \&amp;Plumber;   # preferred form
</PRE>
</DIV>

</DL>
<p class=para>
The <tt class=literal>no strict 'vars'</tt> statement negates any preceding <tt class=literal>use strict
vars</tt> for the remainder of the innermost enclosing block.  Likewise,
<tt class=literal>no strict 'refs'</tt> negates any preceding invocation of <tt class=literal>use strict
refs</tt>, and <tt class=literal>no strict 'subs'</tt> negates <tt class=literal>use strict 'subs'</tt>.

<p class=para>
The arguments to <tt class=literal>use strict</tt> are sometimes given as barewords--that is,
without surrounding quotes.  Be aware, however, that the following
sequence will not work:

<div class=programlisting>
<p>
<pre>
use strict;      # or just:  use strict subs;
...
no strict subs;  # WRONG!  Should be:  no strict 'subs';
...
</PRE>
</DIV>

<p class=para>
The problem here is that giving <tt class=literal>subs</tt> as a bareword is no longer allowed
after the <tt class=literal>use strict</tt> statement.  <tt class=literal>:-)</tt>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch07-SECT2-AUTOID.60">subs--Predeclare Subroutine Names</A></h3>

<div class=programlisting>
<p>
<pre>
use subs qw(<tt class=replaceable><i>sub1 sub2 sub3</i></tt>);
<tt class=replaceable><i>sub1</i></tt> $arg1, $arg2;
</PRE>
</DIV>

<p class=para>
This predeclares the subroutines whose names are
in the list, allowing you to use them without parentheses
even before they're defined.  It has the additional benefit of allowing
you to override built-in functions, since you may only override built-ins
via an import, and this pragma does a pseudo-import.

<p class=para>
See also the vars module.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch07-SECT2-AUTOID.61">Symbol--Generate Anonymous Globs; Qualify Variable Names</A></h3>

<div class=programlisting>
<p>
<pre>
use Symbol;
$sym = gensym;
open($sym, "<tt class=replaceable><i>filename</i></tt>");
$_ = &lt;$sym&gt;;
ungensym $sym;      # no effect
print qualify("x");              # "main::x"
print qualify("x", "FOO");       # "FOO::x"
print qualify("BAR::x");         # "BAR::x"
print qualify("BAR::x", "FOO");  # "BAR::x"
print qualify("STDOUT", "FOO");  # "main::STDOUT" (global)
print qualify(\*x);              # \*x--for example: GLOB(0x99530)
print qualify(\*x, "FOO");       # \*x--for example: GLOB(0x99530)
</PRE>
</DIV>

<p class=para>
<tt class=literal>gensym()</tt> creates an anonymous glob and returns a reference
to it.  Such a glob reference can be used as a filehandle or directory
handle.

<p class=para>
For backward compatibility with older implementations that didn't
support anonymous globs, <tt class=literal>ungensym()</tt> is also provided.
But it doesn't do anything.

<p class=para>
<tt class=literal>qualify()</tt> turns unqualified symbol names into qualified
variable names (for example, <tt class=literal>myvar</tt> becomes
<tt class=literal>MyPackage::myvar</tt>).  If it is given a second parameter,
<tt class=literal>qualify()</tt> uses it as the default package; otherwise, it uses
the package of its caller.  Regardless, global variable names (for example,
<tt class=literal>STDOUT</tt>, <tt class=literal>%ENV</tt>, <tt class=literal>%SIG</tt>) are
always qualified with <tt class=literal>main::</tt>.

<p class=para>
Qualification applies only to symbol names (strings).  References are
left unchanged under the assumption that they are glob references,
which are qualified by their nature.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch07-SECT2-AUTOID.62">Sys::Hostname--Try Every Conceivable Way to Get Hostname</A></h3>

<div class=programlisting>
<p>
<pre>
use Sys::Hostname;
$host = hostname();
</PRE>
</DIV>

<p class=para>
Attempts several methods of getting the system hostname and
then caches the result.  It tries <tt class=literal>syscall(SYS_gethostname)</tt>,
<tt class=literal>`hostname`</tt>, <tt class=literal>`uname -n`</tt>, and the file <i class=emphasis>/com/host</I>.
If all that fails, it <tt class=literal>croak()</tt>s.

<p class=para>
All nulls, returns, and newlines are removed from the result.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch07-SECT2-AUTOID.63">Sys::Syslog--Perl Interface to UNIX syslog(3) Calls</A></h3>

<div class=programlisting>
<p>
<pre>
use Sys::Syslog;
openlog $ident, $logopt, $facility;
syslog $priority, $mask, $format, @args;
$oldmask = setlogmask $mask_priority;
closelog;
</PRE>
</DIV>

<p class=para>
Sys::Syslog is an interface to the UNIX <i class=emphasis>syslog</I> (3) program.
Call <tt class=literal>syslog()</tt> with a string priority and a list of <a href="ch03_02.htm">printf</A> args
just like <i class=emphasis>syslog</I> (3).  Sys::Syslog needs <i class=emphasis>syslog.ph</I>,
which must be created with <i class=emphasis>h2ph</I> by your system administrator.

<p class=para>
Sys::Syslog provides these functions:

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>openlog $ident, $logopt, $facility</tt><dd>

<p class=para>
<tt class=literal>$ident</tt> is prepended to every message.
<tt class=literal>$logopt</tt> contains one or more of the words <tt class=literal>pid</tt>,
<tt class=literal>ndelay</tt>, <tt class=literal>cons</tt>, <tt class=literal>nowait</tt>.
<tt class=literal>$facility</tt> specifies the part of the system making the log entry.

<p>
<dt class=varlistentry><tt class=literal>syslog $priority, $mask, $format, @args</tt><dd>

<p class=para>
If <tt class=literal>$priority</tt> and <tt class=literal>$mask</tt> permit, logs a message formed as if by
<tt class=literal>sprintf($format, @args)</tt>, with the addition that <tt class=literal>%m</tt>
is replaced with <tt class=literal>"$!"</tt> (the latest error message).

<p>
<dt class=varlistentry><tt class=literal>setlogmask $mask_priority</tt><dd>

<p class=para>
Sets log mask to <tt class=literal>$mask_priority</tt> and returns the old mask.

<p>
<dt class=varlistentry><tt class=literal>closelog</tt><dd>

<p class=para>
Closes the log file.</DL>
<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-7-SECT-1.94">Examples</A></h4>

<div class=programlisting>
<p>
<pre>
openlog($program, 'cons, pid', 'user');
syslog('info', 'this is another test');
syslog('mail|warning', 'this is a better test: %d', time);
closelog();

syslog('debug', 'this is the last test');
openlog("$program $$", 'ndelay', 'user');
syslog('notice', 'fooprogram: this is really done');
$! = 55;
syslog('info', 'problem was %m'); # %m == $! in syslog (3)
</PRE>
</DIV>

</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch07-SECT2-AUTOID.64">Term::Cap--Terminal Capabilities Interface</A></h3>

<div class=programlisting>
<p>
<pre>
require Term::Cap;
$terminal = Tgetent Term::Cap { TERM =&gt; undef, OSPEED =&gt; $ospeed };
$terminal-&gt;Trequire(qw/ce ku kd/);
$terminal-&gt;Tgoto('cm', $col, $row, $FH);
$terminal-&gt;Tputs('dl', $count, $FH);
</PRE>
</DIV>

<p class=para>
<a name="CH07.TERM1"></A><a name="CH07.TERM2"></A><a name="CH07.TERM3"></A>These are low-level functions to extract and use capabilities from
a terminal capability (termcap) database.  For general information about
the use of this database, see the <i class=emphasis>termcap</I> (5) manpage.

<p class=para>
The "<tt class=literal>new</tt>" function of Term::Cap is
<tt class=literal>Tgetent()</tt>, which extracts the termcap entry for the specified
terminal type and returns a reference to a terminal object.  If the value
associated with the <tt class=literal>TERM</tt> key in the
<tt class=literal>Tgetent()</tt> argument list is false or undefined, then it
defaults to the environment variable <tt class=literal>TERM</tt>.

<p class=para>
<tt class=literal>Tgetent()</tt> looks in the environment for a <tt class=literal>TERMCAP</tt> variable.
If it finds one, and if the value does not begin with a slash and looks
like a termcap entry in which the terminal type name is the same as the
environment string <tt class=literal>TERM</tt>, then the <tt class=literal>TERMCAP</tt> string is used
directly as the termcap entry and there is no search for an entry in a termcap
file somewhere.

<p class=para>
Otherwise, <tt class=literal>Tgetent()</tt> looks in a sequence of files for the
termcap entry.  The sequence consists of the filename in
<tt class=literal>TERMCAP</tt>, if any, followed by either the files listed in the
<tt class=literal>TERMPATH</tt> environment variable, if any, or otherwise the files
<i class=emphasis>$HOME/.termcap</I>, <i class=emphasis>/etc/termcap</I>, and
<i class=emphasis>/usr/share/misc/termcap</I>, in that order.  (Filenames in
<tt class=literal>TERMPATH</tt> may be separated by either a colon or a space.)
Whenever multiple files are searched and a <tt class=literal>tc</tt> field occurs in
the requested entry, the entry named in the <tt class=literal>tc</tt> field must be
found in the same file or one of the succeeding files.  If there is a
<tt class=literal>tc</tt> field in the <tt class=literal>TERMCAP</tt> environment
variable string, <tt class=literal>Tgetent()</tt> continues searching as indicated
above.

<p class=para>
<tt class=literal>OSPEED</tt> is the terminal output bit rate (often mistakenly
called the baud rate).  <tt class=literal>OSPEED</tt> can be specified as either a
POSIX termios/SYSV termio speed (where 9600 equals 9600) or an old BSD-style
speed (where 13 equals 9600).  See the next section, "Getting Terminal Output
Speed", for code illustrating how to obtain the output speed.

<p class=para>
<tt class=literal>Tgetent()</tt> returns a reference to a blessed object
(<tt class=literal>$terminal</tt> in the examples above).  The actual termcap entry
is available as <tt class=literal>$terminal-&gt;{TERMCAP}</tt>.  Failure to find an
appropriate termcap entry results in a call to <tt class=literal>Carp::croak()</tt>.

<p class=para>
Once you have invoked <tt class=literal>Tgetent()</tt>, you can manage a terminal by
sending control strings to it with <tt class=literal>Tgoto()</tt> and
<tt class=literal>Tputs()</tt>.  You can also test for the existence of particular
terminal capabilities with <tt class=literal>Trequire()</tt>.

<p class=para>
<tt class=literal>Trequire()</tt> checks to see whether the named capabilities have been
specified in the terminal's termcap entry.  For example, this line:

<div class=programlisting>
<p>
<pre>
$terminal-&gt;Trequire(qw/ce ku kd/);
</PRE>
</DIV>

<p class=para>
checks whether the <tt class=literal>ce</tt> (clear to end of line), <tt class=literal>ku</tt>
(keypad up-arrow), and <tt class=literal>kd</tt> (keypad down-arrow) capabilities have
been defined.  Any undefined capabilities will result in a listing of
those capabilities and a call to <tt class=literal>Carp::croak()</tt>.

<p class=para>
<tt class=literal>Tgoto()</tt> produces a control string to move the cursor relative to
the screen.  For example, to move the cursor to the fifth line and
forty-fifth column on the screen, you can say:

<div class=programlisting>
<p>
<pre>
$row = 5; $col = 45;
$terminal-&gt;Tgoto('cm', $row, $col, STDOUT);
</PRE>
</DIV>

<p class=para>
The first argument in this call must always be <tt class=literal>cm</tt>.  If a file
handle is given as the final argument, then <tt class=literal>Tgoto()</tt> sends
the appropriate control string to that handle.  With or without a handle,
the routine returns the control string, so you could achieve the same
effect this way:

<div class=programlisting>
<p>
<pre>
$str = $terminal-&gt;Tgoto('cm', $row, $col);
print STDOUT $str;
</PRE>
</DIV>

<p class=para>
<tt class=literal>Tgoto()</tt> performs the necessary % interpolation on the control
strings.  (See the <i class=emphasis>termcap</I> (5) manpage for details.)

<p class=para>
The <tt class=literal>Tputs()</tt> routine allows you to exercise other terminal
capabilities.  For example, the following code deletes one line at the cursor's
present position, and then turns on the bold text attribute:

<div class=programlisting>
<p>
<pre>
$count = 1;
$terminal-&gt;Tputs('dl', $count, $FILEHANDLE);  # delete one line
$terminal-&gt;Tputs('md', $count, $FILEHANDLE);  # turn on bold attribute
</PRE>
</DIV>

<p class=para>
Again, <tt class=literal>Tputs()</tt> returns the terminal control string, and the file
handle can be omitted.  The <tt class=literal>$count</tt> for such calls should normally be
<tt class=literal>1</tt>, unless padding is required.  (Padding involves the output of
"no-op" characters in order to effect a delay required by the terminal
device.  It is most commonly required for hardcopy devices.)  A count
greater than <tt class=literal>1</tt> is taken to specify the amount of padding.
See the <i class=emphasis>termcap</I> (5) manpage for more about padding.

<p class=para>
<tt class=literal>Tputs()</tt> does <i class=emphasis>not</I> perform % interpolation.  This means that the following will not work:

<div class=programlisting>
<p>
<pre>
$terminal-&gt;Tputs('DC', 1, $FILEHANDLE);  # delete one character (WRONG!)
</PRE>
</DIV>

<p class=para>
If the terminal control string requires numeric parameters, then you must
do the interpolation yourself:

<div class=programlisting>
<p>
<pre>
$str = $terminal-&gt;Tputs('DC', 1);
$str =~ s/%d/7/;
print STDOUT $str;        # delete seven characters
</PRE>
</DIV>

<p class=para>
The output strings for <tt class=literal>Tputs()</tt> are cached for counts of 1.
<tt class=literal>Tgoto()</tt> does not cache.  <tt class=literal>$terminal-&gt;{_</tt><tt class=replaceable><i>xx</i></tt><tt class=literal>}</tt>
is the raw termcap data and <tt class=literal>$terminal-&gt;{</tt><tt class=replaceable><i>xx</i></tt><tt class=literal>}</tt> is the cached
version (where <tt class=replaceable><i>xx</i></tt> is the two-character terminal capability code).

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-7-SECT-1.95">Getting terminal output speed</A></h4>

<p class=para>
You can use the POSIX module to get your terminal's output speed for use
in the <tt class=literal>Tgetent()</tt> call:

<div class=programlisting>
<p>
<pre>
require POSIX;
my $termios = new POSIX::Termios;
$termios-&gt;getattr;
my $ospeed = $termios-&gt;getospeed;
</PRE>
</DIV>

<p class=para>
The method using <i class=emphasis>ioctl</I> (2) works like this:

<div class=programlisting>
<p>
<pre>
require 'ioctl.pl';
ioctl(TTY, $TIOCGETP, $sgtty);
($ispeed, $ospeed) = unpack('cc', $sgtty);
</PRE>
</DIV>

</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch07-SECT2-AUTOID.65">Term::Complete--Word Completion Module</A></h3>

<div class=programlisting>
<p>
<pre>
use Term::Complete;
$input = Complete('prompt_string', \@completion_list);
$input = Complete('prompt_string', @completion_list);
</PRE>
</DIV>

<p class=para>
The <tt class=literal>Complete()</tt> routine sends the indicated prompt
string to the currently selected filehandle, reads the user's response,
and places the response in <tt class=literal>$input</tt>.  What the user types is read
one character at a time, and certain characters result in special
processing as follows:

<p>
<dl class=variablelist>
<dt class=varlistentry>TAB<dd>

<p class=para>
The tab character causes <tt class=literal>Complete()</tt> to match what the user has
typed so far against the list of strings in <tt class=literal>@completion_list</tt>.  If
the user's partial input uniquely matches one of these strings, then the
rest of the matched string is output.  However, input is still not finished
until the user presses the return key.  If the user's partial input does not
uniquely match one string in <tt class=literal>@completion_list</tt> when the tab
character is pressed, then the partial input remains unchanged and the
bell character is output.

<p>
<dt class=varlistentry>CTRL-D<dd>

<p class=para>
If the user types CTRL-D, the current matches between the user's partial
input string and the completion list are printed out.  If the partial input
string is null, then the entire completion list is printed.  In any case,
the prompt string is then reissued, along with the partial input.
You can substitute a different character for CTRL-D by defining
<tt class=literal>$Term::Complete::complete</tt>.  For example:

<div class=programlisting>
<p>
<pre>
$Term::Complete::complete = "\001";  # use ctrl-a instead of ctrl-d
</PRE>
</DIV>

<p>
<dt class=varlistentry>CTRL-U<dd>

<p class=para>
Typing CTRL-U erases any partial input.  You can substitute a different
character for CTRL-U by defining <tt class=literal>$Term::Complete::kill</tt>.

<p>
<dt class=varlistentry>DEL, BS<dd>

<p class=para>
The delete and backspace characters both erase one character from the
partial input string.  You can redefine them by assigning a different
character value to <tt class=literal>$Term::Complete::erase1</tt> and
<tt class=literal>$Term::Complete::erase2</tt>.</DL>
<p class=para>
The user is not prevented from providing input that differs from all
strings in the completion list, or from adding to input that has been
completed from the list.  The final input (determined when the user
presses the return key) is the string returned by <tt class=literal>Complete()</tt>.

<p class=para>
The TTY driver is put into raw mode using the system command
<tt class=literal>stty raw -echo</tt> and restored using <tt class=literal>stty -raw echo</tt>.
When <tt class=literal>Complete()</tt> is called multiple times, it offers
the user's immediately previous response as the default response to each prompt.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch07-SECT2-AUTOID.66">Test::Harness--Run Perl Standard Test Scripts with Statistics</A></h3>

<div class=programlisting>
<p>
<pre>
use Test::Harness;
runtests(@tests);
</PRE>
</DIV>

<p class=para>
This module is used by MakeMaker.  If you're building a Perl extension
and if you have test scripts with filenames matching <i class=emphasis>t/*.t</I> in the
extension's subdirectory, then you can run those tests by executing the
shell command, <tt class=literal>make test</tt>.

<p class=para>
<tt class=literal>runtests(@tests)</tt> runs all test scripts named as arguments and
checks standard output for the expected "<tt class=literal>ok</tt>
<tt class=replaceable><i>n</i></tt>" strings.  (Standard Perl test scripts print
"<tt class=literal>ok</tt> <tt class=replaceable><i>n</i></tt>" for each single test, where
<tt class=replaceable><i>n</i></tt> is an integer incremented by one each time around.)
After all tests have been performed, <tt class=literal>runtests()</tt> prints some
performance statistics that are computed by the Benchmark module.

<p class=para>
<tt class=literal>runtests()</tt> is exported by Test::Harness by default.

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-7-SECT-1.97">The test script output</A></h4>

<p class=para>
The first line output by a standard test script should be
<tt class=literal>1..</tt><tt class=replaceable><i>m</i></tt> with
<tt class=replaceable><i>m</i></tt> being the number of tests that the test script
attempts to run.  Any output from the test script to standard error is ignored
and bypassed, and thus will be seen by the user.  Lines written to standard
output that look like Perl comments (starting with <tt class=literal>/^\s*\#/</tt>)
are discarded.  Lines containing <tt class=literal>/^(not\s+)?ok\b/</tt> are
interpreted as feedback for <tt class=literal>runtests()</tt>.

<p class=para>
The global variable <tt class=literal>$Test::Harness::verbose</tt> is exportable and
can be used to let <tt class=literal>runtests()</tt> display the standard output of
the script without altering the behavior otherwise.

<p class=para>
It is tolerated if the script omits test numbers after <tt class=literal>ok</tt>.
In this case Test::Harness maintains its own counter.  So the following script
output:

<p class=para>
<div class=screen>
<p>
<pre>
1..6
not ok
ok
not ok
ok
ok
</PRE>
</DIV>

<p class=para>
will generate:

<p class=para>
<div class=screen>
<p>
<pre>
FAILED tests 1, 3, 6
Failed 3/6 tests, 50.00% okay
</PRE>
</DIV>

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-7-SECT-1.98">Diagnostics</A></h4>

<dl class=variablelist>
<dt class=varlistentry><tt class=literal>All tests successful.\nFiles=%d,  Tests=%d, %s</tt><dd>

<p class=para>
If all tests are successful, some statistics about the performance are
printed.

<p>
<dt class=varlistentry><tt class=literal>FAILED tests %s\n\tFailed %d/%d tests, %.2f%% okay.</tt><dd>

<p class=para>
For any single script that has failing subtests, these statistics
are printed.

<p>
<dt class=varlistentry><tt class=literal>Test returned status %d (wstat %d)</tt><dd>

<p class=para>
Scripts that return a non-zero exit status, both <tt class=literal>$?&gt;&gt;8</tt> and <tt class=literal>$?</tt>,
are printed in a message similar to the above.

<p>
<dt class=varlistentry><tt class=literal>Failed 1 test, %.2f%% okay.</tt><dd>

<p class=para>
<p>
<dt class=varlistentry><tt class=literal>Failed %d/%d tests, %.2f%% okay.</tt><dd>

<p class=para>
If not all tests were successful, the script dies with one of the
above messages.</DL>
</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-7-SECT-1.99">Notes</A></h4>

<p class=para>
Test::Harness uses <b>$^X</B> to determine which Perl binary to run
the tests
with.  Test scripts running via the shebang (<tt class=literal>#!</tt>) line may not be
portable because <b>$^X</B> is not consistent for shebang scripts across
platforms.  This is no problem when Test::Harness is run with an
absolute path to the Perl binary or when <b>$^X</B> can be found in the path.

</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch07-SECT2-AUTOID.67">Text::Abbrev--Create an Abbreviation Table from a List</A></h3>

<div class=programlisting>
<p>
<pre>
use Text::Abbrev;
%hash = ();
abbrev(*hash, <tt class=replaceable><i>LIST</i></tt>);
</PRE>
</DIV>

<p class=para>
The <tt class=literal>abbrev()</tt> routine takes each string in <tt class=replaceable><i>LIST</i></tt> and
constructs all unambiguous abbreviations (truncations) of the string
with respect to the other strings in <tt class=replaceable><i>LIST</i></tt>.  Each such truncation
(including the null truncation consisting of the entire string) is used as
a key in <tt class=literal>%hash</tt> for which the associated value is the non-truncated
string.

<p class=para>
So, if <tt class=literal>good</tt> is the only string in <tt class=replaceable><i>LIST</i></tt> beginning with
<tt class=literal>g</tt>, the following key/value pairs will be created:

<p class=para>
<div class=screen>
<p>
<pre>
g    =&gt; good,
go   =&gt; good,
goo  =&gt; good,
good =&gt; good
</PRE>
</DIV>

<p class=para>
If, on the other hand, the string <tt class=literal>go</tt> is also in the list, then
<tt class=literal>good</tt> yields these key/value pairs:

<p class=para>
<div class=screen>
<p>
<pre>
goo  =&gt; good,
good =&gt; good
</PRE>
</DIV>

<p class=para>
and <tt class=literal>go</tt> yields only:

<p class=para>
<div class=screen>
<p>
<pre>
go =&gt; go
</PRE>
</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch07-SECT2-AUTOID.68">Text::ParseWords--Parse Text into a List of Tokens</A></h3>

<div class=programlisting>
<p>
<pre>
use Text::ParseWords;
@words = quotewords($delim, $keep, @lines);
</PRE>
</DIV>

<p class=para>
<tt class=literal>quotewords()</tt> accepts a delimiter (which can be a regular expression)
and a list of lines, and then breaks those lines up into a list of
delimiter-separated words.  It ignores delimiters that appear inside
single or double quotes.

<p class=para>
The <tt class=literal>$keep</tt> argument is a Boolean flag.  If it is false, then quotes
are removed from the list of words returned by <tt class=literal>quotewords()</tt>;
otherwise, quotes are retained.

<p class=para>
The value of <tt class=literal>$keep</tt> also affects the interpretation of backslashes.
If <tt class=literal>$keep</tt> is true, then backslashes are fully preserved in the
returned list of words.  Otherwise, a single backslash disappears and a
double backslash is returned as a single backslash.  (Be aware, however,
that, regardless of the value of <tt class=literal>$keep</tt>, a single backslash occurring
within quotes causes a Perl syntax error--presumably a bug.)

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch07-SECT2-AUTOID.69">Text::Soundex--The Soundex Algorithm Described by Knuth</A></h3>

<div class=programlisting>
<p>
<pre>
use Text::Soundex;
$code = soundex $string;  # get soundex code for a string
@codes = soundex @list;   # get list of codes for list of strings
# set value to be returned for strings without soundex code
$soundex_nocode = 'Z000';
</PRE>
</DIV>

<p class=para>
This module implements the soundex algorithm as described by Donald Knuth
in Volume 3 of <i class=emphasis>The Art of Computer Programming</I>.  The algorithm is
intended to hash words (in particular surnames) into a small space using a
simple model that approximates the sound of the word when spoken by an English
speaker.  Each word is reduced to a four-character string, the first
character being an uppercase letter and the remaining three being digits.

<p class=para>
If there is no soundex code representation for a string, then the value of
<tt class=literal>$soundex_nocode</tt> is returned.  This variable is initially set to the
undefined value, but
many people seem to prefer an unlikely value like <tt class=literal>Z000</tt>.
(How unlikely this is depends on the data set being dealt with.)  Any value
can be assigned to <tt class=literal>$soundex_nocode</tt>.

<p class=para>
In a scalar context <tt class=literal>soundex()</tt> returns the soundex code of its first
argument, and in an array context a list is returned in which each element
is the soundex code for the corresponding argument passed to
<tt class=literal>soundex()</tt>.

<p class=para>
For example:

<div class=programlisting>
<p>
<pre>
@codes = soundex qw(Mike Stok);
</PRE>
</DIV>

<p class=para>
leaves <tt class=literal>@codes</tt> containing 
<tt class=literal>('M200', 'S320')</tt>.

<p class=para>
Here are Knuth's examples of various names and the soundex codes they map to:

<div class=informaltable>
<p>
<a name="PERL2-CH-7-TAB-17"></A>

<table class=INFORMALTABLE>
<tr class=row>
<th align="left">Names</TH>
<th align="left">Code</TH>
</TR>
<tr class=row>
<td align="left">Euler, Ellery</TD>
<td align="left"><tt class=literal>E460</tt></TD>
</TR>
<tr class=row>
<td align="left">Gauss, Ghosh</TD>
<td align="left"><tt class=literal>G200</tt></TD>
</TR>
<tr class=row>
<td align="left">Hilbert, Heilbronn</TD>
<td align="left"><tt class=literal>H416</tt></TD>
</TR>
<tr class=row>
<td align="left">Knuth, Kant</TD>
<td align="left"><tt class=literal>K530</tt></TD>
</TR>
<tr class=row>
<td align="left">Lloyd, Ladd</TD>
<td align="left"><tt class=literal>L300</tt></TD>
</TR>
<tr class=row>
<td align="left">Lukasiewicz, Lissajous</TD>
<td align="left"><tt class=literal>L222</tt></TD>
</TR>
</TABLE>
<p>
</DIV>

<p class=para>
So we have:

<div class=programlisting>
<p>
<pre>
$code = soundex 'Knuth';              # $code contains 'K530'
@list = soundex qw(Lloyd Gauss);      # @list contains 'L300', 'G200'
</PRE>
</DIV>

<p class=para>
As the soundex algorithm was originally used a <i class=emphasis>long</I> time ago in the United States,
it considers only the English alphabet and pronunciation.

<p class=para>
As it is mapping a large space (arbitrary-length strings) onto a small
space (single letter plus three digits), no inference can be made about the
similarity of two strings that end up with the same soundex code.  For
example, both <tt class=literal>Hilbert</tt> and <tt class=literal>Heilbronn</tt> end up with a soundex code
of <tt class=literal>H416</tt>.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch07-SECT2-AUTOID.70">Text::Tabs--Expand and Unexpand Tabs</A></h3>

<div class=programlisting>
<p>
<pre>
use Text::Tabs;
$tabstop = 8;                            # set tab spacing to 8 (default)
print expand("Hello\tworld");            # convert tabs to spaces in output
print unexpand("Hello,        world");   # convert spaces to tabs in output
$tabstop = 4;                            # set tab spacing to 4
print join("\n", expand(split(/\n/,
                "Hello\tworld, \nit's a nice day.\n")));
</PRE>
</DIV>

<p class=para>
This module expands tabs into spaces and "unexpands" spaces into tabs,
in the manner of the UNIX <i class=emphasis>expand</I> (1) and <i class=emphasis>unexpand</I> (1) programs.
All tabs and spaces--not only leading ones--are subject to being expanded
and unexpanded.

<p class=para>
Both <tt class=literal>expand()</tt> and <tt class=literal>unexpand()</tt> take as argument an array of
strings, which are returned with tabs or spaces transformed.  Newlines
may not be included in the strings, and should be used to split
strings into separate elements before they are passed to <tt class=literal>expand()</tt>
and <tt class=literal>unexpand()</tt>.

<p class=para>
<tt class=literal>expand()</tt>, <tt class=literal>unexpand()</tt>, and <tt class=literal>$tabstop</tt> are imported into
your program when you <a href="ch03_02.htm">use</A> this module.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch07-SECT2-AUTOID.71">Text::Wrap--Wrap Text into a Paragraph</A></h3>

<div class=programlisting>
<p>
<pre>
use Text::Wrap;
$Text::Wrap::columns = 20; # default is 76
$pre1 = "\t";              # prepend this to first line of paragraph
$pre2 = "";                # prepend this to subsequent lines
print wrap($pre1, $pre2, "Hello, world, it's a nice day, isn't it?");
</PRE>
</DIV>

<p class=para>
This module is a simple paragraph formatter that wraps text into a paragraph
and indents each line.  The single exported function, <tt class=literal>wrap()</tt>, takes three
arguments:  a string to prepend to the first output line; a string to
prepend to each subsequent output line; and the text to be wrapped.

<p class=para>
<tt class=literal>$columns</tt> is exported on request.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch07-SECT2-AUTOID.72">Tie::Hash, Tie::StdHash--Base Class Definitions for Tied Hashes</A></h3>

<div class=programlisting>
<p>
<pre>
package NewHash;
require Tie::Hash;
@ISA = (Tie::Hash);
sub DELETE { ... }          # Provides additional method
sub CLEAR { ... }           # Overrides inherited method
package NewStdHash;
require Tie::Hash;
@ISA = (Tie::StdHash);
sub DELETE { ... }
package main;
tie %new_hash, "NewHash";
tie %new_std_hash, "NewStdHash";
</PRE>
</DIV>

<p class=para>
This module provides some skeletal methods for hash-tying classes.  (See
<a href="ch05_01.htm">Chapter 5, <i>Packages, Modules, and Object Classes</i></A> for a list of the functions required in order to tie a hash to
a package.)  The basic Tie::Hash package provides a <tt class=literal>new()</tt> method,
as well as methods <tt class=literal>TIEHASH()</tt>, <tt class=literal>EXISTS()</tt> and <tt class=literal>CLEAR()</tt>.  The
Tie::StdHash package provides most methods required for hashes.  It
inherits from Tie::Hash, and causes tied hashes to behave exactly like
standard hashes, allowing for selective overloading of methods.  The
<tt class=literal>new()</tt> method is provided as grandfathering in case a class forgets
to include a <tt class=literal>TIEHASH()</tt> method.

<p class=para>
For developers wishing to write their own tied hashes, the required methods
are briefly defined below.  (<a href="ch05_01.htm">Chapter 5, <i>Packages, Modules, and Object Classes</i></A> not only documents these methods, but also
has sample code.)

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>TIEHASH</tt> <tt class=replaceable><i>ClassName</i></tt>, <tt class=replaceable><i>LIST</i></tt><dd>

<p class=para>
The method invoked by the command:

<div class=programlisting>
<p>
<pre>
tie %hash, <tt class=replaceable><i>ClassName</i></tt>, <tt class=replaceable><i>LIST</i></tt>
</PRE>
</DIV>

<p class=para>
Associates a new
hash instance with the specified class. <tt class=replaceable><i>LIST</i></tt> would represent additional
arguments (along the lines of AnyDBM_File and compatriots) needed to
complete the association.

<p>
<dt class=varlistentry><tt class=literal>STORE</tt> <tt class=replaceable><i>this, key, value</i></tt><dd>

<p class=para>
Store <tt class=replaceable><i>value</i></tt> into <tt class=replaceable><i>key</i></tt> for the tied hash <tt class=replaceable><i>this</i></tt>.

<p>
<dt class=varlistentry><tt class=literal>FETCH</tt> <tt class=replaceable><i>this, key</i></tt><dd>

<p class=para>
Retrieve the value associated with <tt class=replaceable><i>key</i></tt> for the tied hash <tt class=replaceable><i>this</i></tt>.

<p>
<dt class=varlistentry><tt class=literal>FIRSTKEY</tt> <tt class=replaceable><i>this</i></tt><dd>

<p class=para>
Return the key/value pair for the first key in hash <tt class=replaceable><i>this</i></tt>.

<p>
<dt class=varlistentry><tt class=literal>NEXTKEY</tt> <tt class=replaceable><i>this, lastkey</i></tt><dd>

<p class=para>
Return the next key/value pair for the hash.

<p>
<dt class=varlistentry><tt class=literal>EXISTS</tt> <tt class=replaceable><i>this, key</i></tt><dd>

<p class=para>
Verify that <tt class=replaceable><i>key</i></tt> exists with the tied hash <tt class=replaceable><i>this</i></tt>.

<p>
<dt class=varlistentry><tt class=literal>DELETE</tt> <tt class=replaceable><i>this, key</i></tt><dd>

<p class=para>
Delete <tt class=replaceable><i>key</i></tt> from the tied hash <tt class=replaceable><i>this</i></tt>.

<p>
<dt class=varlistentry><tt class=literal>CLEAR</tt> <tt class=replaceable><i>this</i></tt><dd>

<p class=para>
Clear all values from the tied hash <tt class=replaceable><i>this</i></tt>.</DL>
<p class=para>
<a href="ch05_01.htm">Chapter 5, <i>Packages, Modules, and Object Classes</i></A> includes a method called <tt class=literal>DESTROY()</tt> as a "necessary" method
for tied hashes.  However, it is not actually required, and neither
Tie::Hash nor Tie::StdHash defines a default for this method.

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-7-SECT-1.100">See also</A></h4>

<p class=para>
The library modules relating to various DBM-related implementations
(DB_File, GDBM_File, NDBM_File, ODBM_File, and SDBM_File) show examples
of general tied hashes, as does the Config module.  While these modules
do not utilize Tie::Hash, they serve as good working examples.

</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch07-SECT2-AUTOID.73">Tie::Scalar, Tie::StdScalar--Base Class Definitions for Tied Scalars</A></h3>

<div class=programlisting>
<p>
<pre>
package NewScalar;
require Tie::Scalar;
@ISA = (Tie::Scalar);
sub FETCH { ... }           # Provides additional method
sub TIESCALAR { ... }       # Overrides inherited method
package NewStdScalar;
require Tie::Scalar;
@ISA = (Tie::StdScalar);
sub FETCH { ... }
package main;
tie $new_scalar, "NewScalar";
tie $new_std_scalar, "NewStdScalar";
</PRE>
</DIV>

<p class=para>
This module provides some skeletal methods for scalar-tying classes.
(See <a href="ch05_01.htm">Chapter 5, <i>Packages, Modules, and Object Classes</i></A> for a list of the functions required in tying a scalar to
a package.)  The basic Tie::Scalar package provides a <tt class=literal>new()</tt>
method, as well
as methods <tt class=literal>TIESCALAR()</tt>, <tt class=literal>FETCH()</tt> and <tt class=literal>STORE()</tt>.  The
Tie::StdScalar package provides all methods specified in <a href="ch05_01.htm">Chapter 5, <i>Packages, Modules, and Object Classes</i></A>.
It inherits from
Tie::Scalar and causes scalars tied to it to behave exactly like the
built-in scalars, allowing for selective overloading of methods.  The <tt class=literal>new()</tt>
method is provided as a means of grandfathering for classes that forget to
provide their own <tt class=literal>TIESCALAR()</tt> method.

<p class=para>
For developers wishing to write their own tied-scalar classes, methods
are summarized below.
(<a href="ch05_01.htm">Chapter 5, <i>Packages, Modules, and Object Classes</i></A> not only documents these, but
also has sample code.)

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>TIESCALAR</tt> <tt class=replaceable><i>ClassName</i></tt>, <tt class=replaceable><i>LIST</i></tt><dd>

<p class=para>
The method invoked by the command:

<div class=programlisting>
<p>
<pre>
tie $scalar, ClassName, <tt class=replaceable><i>LIST</i></tt>
</PRE>
</DIV>

<p class=para>
Associates a new
scalar instance with the specified class. <tt class=replaceable><i>LIST</i></tt> would represent
additional arguments (along the lines of the AnyDBM_File library module and
associated modules) needed to complete the association.

<p>
<dt class=varlistentry><tt class=literal>FETCH</tt> <tt class=replaceable><i>this</i></tt><dd>

<p class=para>
Retrieve the value of the tied scalar referenced by <tt class=replaceable><i>this</i></tt>.

<p>
<dt class=varlistentry><tt class=literal>STORE</tt> <tt class=replaceable><i>this, value</i></tt><dd>

<p class=para>
Store <tt class=replaceable><i>value</i></tt> in the tied scalar referenced by <tt class=replaceable><i>this</i></tt>.

<p>
<dt class=varlistentry><tt class=literal>DESTROY</tt> <tt class=replaceable><i>this</i></tt><dd>

<p class=para>
Free the storage associated with the tied scalar referenced by <tt class=replaceable><i>this</i></tt>.
This is rarely needed, since Perl manages its memory well.  But the
option exists, should a class wish to perform specific actions upon the
destruction of an instance.</DL>
<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-7-SECT-1.101">See also</A></h4>

<p class=para>
<a href="ch05_01.htm">Chapter 5, <i>Packages, Modules, and Object Classes</i></A> has a good example using tied scalars to
associate process IDs with priority.

</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch07-SECT2-AUTOID.74">Tie::SubstrHash--Fixed-table-size, Fixed-key-length Hashing</A></h3>

<div class=programlisting>
<p>
<pre>
require Tie::SubstrHash;
tie %myhash, "Tie::SubstrHash", $key_len, $value_len, $table_size;
</PRE>
</DIV>

<p class=para>
The Tie::SubstrHash package provides a hash table-like interface to
an array of determinate size, with constant key size and record size.

<p class=para>
Upon tying a new hash to this package, the developer must specify the
size of the keys that will be used, the size of the value fields that the
keys will index, and the size of the overall table (in terms of the number
of key/value pairs, not hard memory). <i class=emphasis>These values will not change for the
duration of the tied hash</I>.  The newly allocated hash table may now have
data stored and retrieved.  Efforts to store more than <tt class=literal>$table_size</tt>
elements will result in a fatal error, as will efforts to store a value
not exactly <tt class=literal>$value_len</tt> characters in length, or to reference through a
key not exactly <tt class=literal>$key_len</tt> characters in length.  While these constraints
may seem excessive, the result is a hash table using much less internal
memory than an equivalent freely allocated hash table.

<p class=para>
Because the current implementation uses the table and key sizes for the
hashing algorithm, there is no means by which to dynamically change the
value of any of the initialization parameters.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch07-SECT2-AUTOID.75">Time::Local--Efficiently Compute Time from Local and GMT Time</A></h3>

<div class=programlisting>
<p>
<pre>
use Time::Local;
$time = timelocal($sec, $min, $hours, $mday, $mon, $year);
$time = timegm($sec, $min, $hours, $mday, $mon, $year);
</PRE>
</DIV>

<p class=para>
These routines take a series of arguments specifying a local
(<tt class=literal>timelocal()</tt>) or Greenwich (<tt class=literal>timegm()</tt>) time, and return the
number of seconds elapsed between January 1, 1970, and the specified time.
The arguments are defined like the corresponding arguments returned by
Perl's <a href="ch03_02.htm">gmtime</A> and <a href="ch03_02.htm">localtime</A> functions.

<p class=para>
The routines are very efficient and yet are always guaranteed to agree
with the <a href="ch03_02.htm">gmtime</A> and <a href="ch03_02.htm">localtime</A> functions.  That is,
if you pass the value returned by <a href="ch03_02.htm">time</A> to <a href="ch03_02.htm">localtime</A>, and if
you then pass the values returned by <a href="ch03_02.htm">localtime</A> to
<tt class=literal>timelocal()</tt>, the returned value from <tt class=literal>timelocal()</tt> will be
the same as the value originally returned from <a href="ch03_02.htm">time</A>.

<p class=para>
Both routines return <tt class=literal>-1</tt> if the integer limit is hit.  On most
machines this applies to dates after January 1, 2038.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch07-SECT2-AUTOID.76">vars--Predeclare Global Variable Names</A></h3>

<div class=programlisting>
<p>
<pre>
use vars qw($frob @mung %seen);
</PRE>
</DIV>

<p class=para>
This module predeclares all variables whose names are
in the list, allowing you to use them under <tt class=literal>use strict</tt>, and
disabling any typo warnings.

<p class=para>
Packages such as the AutoLoader and SelfLoader that delay loading
of subroutines within packages can create problems with file-scoped lexicals
defined using <a href="ch03_02.htm">my</A>.  This is because they move the subroutines outside
the scope of the lexical variables.
While the <tt class=literal>use vars</tt> pragma cannot duplicate the
effect of file-scoped lexicals (total transparency outside of the file),
it can act as an acceptable substitute by pre-declaring global symbols,
ensuring their availability to the routines whose loading was delayed.

<p class=para>
See also the <tt class=literal>subs</tt> module.

</DIV>

</DIV>


<div class=htmlnav>
<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch07_01.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src="gifs/txthome.gif" alt="Home" border=0></a></td>
<td width=172 align=right valign=top><a href="ch08_01.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Beyond the Standard Library</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td>
<td width=172 align=right valign=top>Other Oddments</td>
</tr>
</table>

<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
</DIV>
</BODY>
</HTML>
