<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 6] 6.4 Cooperating with Other Languages</TITLE>
<meta name="author" content="Larry Wall, Tom Christiansen, and Randal Schwartz">
<meta name="date" content="Mon Mar 17 13:12:05 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="Perl">
<meta name="title" content="Programming Perl, Second Edition">
<!-- JavaScript: pathcont.js -->

</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><img src="gifs/smbanner.gif" alt="Programming Perl, Second Edition"></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch06_03.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b>Chapter 6</b></td>
<td width=172 align=right valign=top><a href="ch07_01.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>
<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="PERL2-CH-6-SECT-4">6.4 Cooperating with Other Languages</A></h2>

<p class=para>
Just as there are many levels on which languages can compete, so too
there are many levels on which languages can cooperate.  Here we'll talk
primarily about generation, translation and embedding (via linking).

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CH-6-SECT-4.1">Program Generation</A></h3>

<p class=para>
Almost from the time people first figured out that they could write programs,
they started writing programs that write other programs.  These are called
<i class=emphasis>program generators</I>.  (If you're a history buff, you might know that
RPG stood for Report Program Generator long before it stood for Role
Playing Game.)  Now, anyone who has written a program generator knows that it
can make your eyes go crossed even when you're wide awake.  The problem
is simply that much of your program's data looks like real code, but
isn't (at least not yet).  The same text file contains both stuff that does
something and similar looking stuff that doesn't.  Perl has various
features that make it easier to mix it together with other languages,
textually speaking.

<p class=para>
Of course, these features also make it easier to write Perl in Perl,
but it's rather expected that Perl would cooperate with itself.

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-6-SECT-4.1.1">Generating other languages in Perl</A></h4>

<p class=para>
Perl is, of course, a text-processing language, and most computer
languages are textual.  Beyond that, the lack of arbitrary limits together 
with the various quoting and interpolation mechanisms make it pretty easy to 
visually isolate the code of the other language you're spitting out.
For example, here is a small chunk of <i class=emphasis>s2p</I>, the
<i class=emphasis>sed</I>-to-<i class=emphasis>perl</I> translator:

<div class=programlisting>
<p>
<pre>
print &amp;q(&lt;&lt;"EOT");
:       #!$bin/perl
:       eval 'exec $bin/perl -S \$0 \${1+"\$@"}'
:               if \$running_under_some_shell;
:       
EOT
</PRE>
</DIV>

<p class=para>
Here the enclosed text happens to be legal in two languages, both Perl
and shell.  We've used the trick of putting a colon and a tab on the
front of every line, which visually isolates the enclosed code.  One
variable, <tt class=literal>$bin</tt>, is interpolated in the multi-line quote in two
places, and then the string is passed through a function to strip the
colon and tab.

<p class=para>
Of course, you aren't required to use multi-line quotes.  One often sees
CGI scripts containing millions of <a href="ch03_02.htm">print</A> statements, one per line.
It seems a bit like driving to church in an F-16, but hey, if it gets
you there. . . . 

<p class=para>
When you are embedding a large, multi-line quote containing some other
language (such as HTML), it's sometimes helpful to pretend you're
enclosing Perl into the other language instead:

<div class=programlisting>
<p>
<pre>
print &lt;&lt;"END";
stuff
blah blah blah ${ \( <tt class=replaceable><i>EXPR</i></tt> ) } blah blah blah
blah blah blah @{[ <tt class=replaceable><i>LIST</i></tt> ]} blah blah blah
nonsense
END
</PRE>
</DIV>

<p class=para>
You can use either of those two tricks to interpolate the value of any
scalar <tt class=replaceable><i>EXPR</i></tt> or <tt class=replaceable><i>LIST</i></tt> into a longer string.

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-6-SECT-4.1.2">Generating Perl in other languages</A></h4>

<p class=para>
Perl can easily be generated in other languages because it's both concise
and malleable.  You can pick your quotes not to interfere with the other
language's quoting mechanisms.  You don't have to worry about
indentation, or where you put your line breaks, or whether to backslash
your backslashes yet again.  You aren't forced to define a package as a
single string in advance, since you can slide into your package's namespace
repeatedly, whenever you want to evaluate more code in that package.

</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CH-6-SECT-4.2">Translation from Other Languages</A></h3>

<p class=para>
One of the very first Perl applications was the <i class=emphasis>sed</I>-to-<i class=emphasis>perl</I> translator,
<i class=emphasis>s2p</I>.  In fact, Larry delayed the initial release of Perl in order to
complete <i class=emphasis>s2p</I> and <i class=emphasis>awk-to-perl</I> (<i class=emphasis>a2p</I>), because he thought they'd improve the
acceptance of Perl.  Hmm, maybe they did.

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-6-SECT-4.2.1">s2p</A></h4>

<p class=para>
The <i class=emphasis>s2p</I> program takes a <i class=emphasis>sed</I> script specified on the command line
(or from standard input) and produces a comparable Perl script on the
standard output.

<p class=para>
Options include:

<p>
<dl class=variablelist>
<dt class=varlistentry><b>-D</B><i class=emphasis>number</I><dd>

<p class=para>
Sets debugging flags.

<p>
<dt class=varlistentry><b>-n</B>      <dd>

<p class=para>
Specifies that this <i class=emphasis>sed</I> script was <i class=emphasis>always</I> invoked as <i class=emphasis>sed -n</I>.
Otherwise a switch parser is prepended to the front of the script.

<p>
<dt class=varlistentry><b>-p</B>      <dd>

<p class=para>
Specifies that this <i class=emphasis>sed</I> script was <i class=emphasis>never</I> invoked as <i class=emphasis>sed -n</I>.
Otherwise a switch parser is prepended to the front of the script.</DL>
<p class=para>
The Perl script produced looks very <i class=emphasis>sed</I>-like, and there may very well
be better ways to express what you want to do in Perl.  For instance,
<i class=emphasis>s2p</I> does not make any use of the <a href="ch03_02.htm">split</A> operator, but you might
want to.

<p class=para>
The Perl script you end up with may be either faster or slower than the
original <i class=emphasis>sed</I> script.  If you're only interested in speed you'll just
have to try it both ways.  Of course, if you want to do something <i class=emphasis>sed</I>
doesn't do, you have no choice.  It's often possible to speed up the
Perl script by various methods, such as deleting all references to <b>$\</B>
and <a href="ch03_02.htm">chop</A>.

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-6-SECT-4.2.2">a2p</A></h4>

<p class=para>
<a name="CH06.AWK1"></A><a name="CH06.AWK2"></A>The <i class=emphasis>a2p</I> program takes an <i class=emphasis>awk</I> script specified on the command line
(or from standard input) and produces a comparable Perl script on the
standard output.

<p class=para>
Options include:

<p>
<dl class=variablelist>
<dt class=varlistentry><b>-D</B><i class=emphasis>number</I><dd>

<p class=para>
Sets debugging flags.

<p>
<dt class=varlistentry><b>-F</B><i class=emphasis>character</I><dd>

<p class=para>
Tells <i class=emphasis>a2p</I> that this <i class=emphasis>awk</I> script is always invoked with a <b>-F</B>
switch specifying <i class=emphasis>character</I>.

<p>
<dt class=varlistentry><b>-n</B><i class=emphasis>fieldlist</I><dd>

<p class=para>
Specifies the names of the input fields if input does not have to be
split into an array for some programmatic reason.  If you were
translating an <i class=emphasis>awk</I> script that processes the password file, you might
say:

<div class=programlisting>
<p>
<pre>
a2p -7 -nlogin.password.uid.gid.gcos.shell.home
</PRE>
</DIV>

<p class=para>
Any delimiter may be used to separate the field names.

<p>
<dt class=varlistentry><b>-</B><i class=emphasis>number</I><dd>

<p class=para>
Causes <i class=emphasis>a2p</I> to assume that input will always have that many fields.</DL>
<p class=para>
<i class=emphasis>a2p</I> cannot do as good a job translating as a human would, but it
usually does pretty well.  There are some areas where you may want to
examine the Perl script produced and tweak it some.  Here are some of
them, in no particular order.

<p class=para>
There is an <i class=emphasis>awk</I> idiom of putting <tt class=literal>int(...)</tt> around a string expression to
force numeric interpretation, even though the argument is always an integer
anyway.  This is generally unneeded in Perl, but <i class=emphasis>a2p</I> can't tell if
the argument is always going to be an integer, so it leaves it in.  You may
wish to remove it.

<p class=para>
Perl differentiates numeric comparison from string comparison.  <i class=emphasis>awk</I> has
one operator for both that decides at run-time which comparison to do.
<i class=emphasis>a2p</I> does not try to do a complete job of <i class=emphasis>awk</I> emulation at this
point.  Instead it guesses which one you want.  It's almost always
right, but it can be spoofed.  All such guesses are marked with the
comment <tt class=literal>#???</tt>.  You should go through and check them.  You might want
to run at least once with Perl's <b>-w</B> switch, which warns you if
you use <tt class=literal>==</tt> where you should have used <b>eq</B>.

<p class=para>
It would be possible to emulate <i class=emphasis>awk</I>&nbsp;'s behavior in selecting string
versus numeric operations at run-time by inspection of the operands, but
it would be gross and inefficient.  Besides, <i class=emphasis>a2p</I> almost always
guesses right.

<p class=para>
Perl does not attempt to emulate the behavior of <i class=emphasis>awk</I> in which
nonexistent array elements spring into existence simply by being
referenced.  If somehow you are relying on this mechanism to create null
entries for a subsequent <tt class=literal>for</tt> . . . <tt class=literal>in</tt>, they won't be there in Perl.

<p class=para>
If <i class=emphasis>a2p</I> makes a <a href="ch03_02.htm">split</A> command that assigns to a list of variables
that looks like <tt class=literal>($Fld1, $Fld2, $Fld3...)</tt> you may want to rerun <i class=emphasis>a2p</I>
using the <b>-n</B> option mentioned above.  This will let you name the
fields throughout the script.  If it splits to an array instead, the
script is probably referring to the number of fields somewhere.

<p class=para>
The "exit" statement in <i class=emphasis>awk</I> doesn't necessarily exit; it
goes to the <tt class=literal>END</tt> block if there is one.  <i class=emphasis>awk</I> scripts that
do contortions within the <tt class=literal>END</tt> block to bypass the block
under such circumstances can be simplified by removing the
conditional in the <tt class=literal>END</tt> block and just exiting directly
from the Perl script.

<p class=para>
Perl has two kinds of arrays, numerically indexed and associative.
<i class=emphasis>awk</I> arrays are usually translated to associative arrays, but if you
happen to know that the index is always going to be numeric, you could
change the <tt class=literal>{ . . . }</tt> to <tt class=literal>[ . . . ]</tt>.  Remember that iteration over an
associative array is done using the <a href="ch03_02.htm">keys</A> function, but iteration over
a numeric array isn't.  You might need to modify any loop that is
iterating over the array in question.

<p class=para>
<i class=emphasis>awk</I> starts by assuming OFMT has the value <tt class=literal>%.6g</tt>.  Perl starts by
assuming its equivalent, <b>$#</B>, to have the value <tt class=literal>%.20g</tt>.  You'll want to
set <b>$#</B> explicitly if you use the default value of OFMT.  (Actually,
you probably don't want to set <b>$#</B>, but rather put in <a href="ch03_02.htm">printf</A> formats
everywhere it matters.)

<p class=para>
Near the top of the line loop will be the <a href="ch03_02.htm">split</A> operator that is
implicit in the <i class=emphasis>awk</I> script.  There are times when you can move this operator
down past some conditionals that test the entire record, so that the
<a href="ch03_02.htm">split</A> is not done as often.

<p class=para>
For aesthetic reasons you may wish to change the array base <b>$[</B> from <tt class=literal>1</tt>
back to Perl's default of <tt class=literal>0</tt>, but remember to change all array subscripts
and all <a href="ch03_02.htm">substr</A> and <a href="ch03_02.htm">index</A> operations to match.

<p class=para>
Cute comments that say:

<div class=programlisting>
<p>
<pre>
# Here's a workaround because awk is so dumb.
</PRE>
</DIV>

<p class=para>
are, of course, passed through unmodified.

<p class=para>
<i class=emphasis>awk</I> scripts are often embedded in a shell script that pipes stuff
into and out of <i class=emphasis>awk</I>.  Often the shell script wrapper can be
incorporated into the Perl script, since Perl can start up pipes into
and out of itself, and can do other things that <i class=emphasis>awk</I> can't do by
itself.

<p class=para>
Scripts that refer to the special variables <tt class=literal>RSTART</tt> and <tt class=literal>RLENGTH</tt> can often
be simplified by referring to the variables <b>$</B><tt class=userinput>`</tt>, <b>$&amp;</B>, and <b>$</B><tt class=userinput>'</tt>, as
long as they are within the scope of the pattern match that sets them.

<p class=para>
The produced Perl script may have subroutines defined to
deal with <i class=emphasis>awk</I>&nbsp;'s semantics regarding "getline" and "print".
Since <i class=emphasis>a2p</I> usually picks correctness over efficiency, it
is almost always possible to rewrite such code to be more
efficient by discarding the semantic sugar.

<p class=para>
<tt class=literal>ARGV[0]</tt> translates to <b>$0</B>, but <tt class=literal>ARGV[n]</tt> translates to
<tt class=literal>$ARGV[$n]</tt>.  A loop that tries to iterate over <tt class=literal>ARGV[0]</tt> won't find it.

<div class=note>
<p class=note><blockquote><p><b>NOTE:</B> 

<p class=para>
Storage for the <i class=emphasis>awk</I> syntax tree is currently static, and can run out.
You'll need to recompile <i class=emphasis>a2p</I> if that happens.
</blockquote><p>
</DIV>

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-6-SECT-4.2.3">find2perl</A></h4>

<p class=para>
The <i class=emphasis>find2perl</I> program is really easy to understand if you already
understand the UNIX <i class=emphasis>find</I> (1) program.  Just type <i class=emphasis>find2perl</I> instead
of <i class=emphasis>find</I>, and give it the same arguments you would give to <i class=emphasis>find</I>.  It
will spit out an equivalent Perl script.

<p class=para>
There are a couple of options you can use that your ordinary <i class=emphasis>find</I> (1)
command probably doesn't support:

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>-tar</tt> <i class=emphasis>tarfile</I><dd>

<p class=para>
Outputs a tar file much like the <tt class=literal>-cpio</tt> switch of some versions of <i class=emphasis>find</I>.

<p>
<dt class=varlistentry><tt class=literal>-eval</tt> <i class=emphasis>string</I><dd>

<p class=para>
Evaluates the string as a Perl expression, and continues if true.</DL>
</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-6-SECT-4.2.4">Source filters</A></h4>

<p class=para>
The notion of a source filter started with the idea that a script or
module should be able to decrypt itself on the fly, like this:

<div class=programlisting>
<p>
<pre>
#!/usr/bin/perl
use MyDecryptFilter;
@*x$]`0uN&amp;k^Zx02jZ^X{.?s!(f;9Q/^A^@~~8H]|,%@^P:q-=
...
</PRE>
</DIV>

<p class=para>
But the idea grew from there, and now a source filter can be defined to
do any transformation on the input text you like.  One can now even do
things like this:

<div class=programlisting>
<p>
<pre>
#!/usr/bin/perl
use Filter::exec "a2p";
1,30{print $1}
</PRE>
</DIV>

<p class=para>
Put that together with the notion of the <b>-x</B> switch mentioned at the
beginning of this chapter, and you have a general mechanism for pulling
any chunk of program out of an article and executing it, regardless of
whether it's written in Perl or not.  Now that's cooperation.

<p class=para>
The Filter module is available from CPAN.

</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CH-6-SECT-4.3">Translation to Other Languages</A></h3>

<p class=para>
Historically, the Perl interpreter has been rather self-contained.  When
Perl was redesigned for Version 5, however, one of the requirements was
that it be possible to write extension modules that could traverse the
parsed syntax tree and emit code in other languages, either low-level
or high-level.  This has now come to pass.

<p class=para>
More precisely, this is now coming to pass.  Malcolm Beattie has been
developing a "real compiler" for Perl.  As of this writing, it's in
Alpha 2 state, which means it mostly works, except for the really hard
bits.  The compiler consists of an ordinary Perl parser and
interpreter (since you need to be able to execute <tt class=literal>BEGIN</tt> blocks to
compile Perl), plus a set of modules under the name of B, which is short
for both "Backend" and "Beattie".  You don't actually invoke the B
module directly though.  Instead you invoke a particular backend via the
O module, which pulls in the B module for you.  Typically you invoke the
O module right on the command line with the <b>-M</B> switch, so a
compilation command might look like this:

<div class=programlisting>
<p>
<pre>
perl -MO=C foo.pl &gt;foo.c
</PRE>
</DIV>

<p class=para>
There are three backends at the moment.  The C backend rather woodenly
spits out C calls into the ordinary Perl interpreter, but it can
translate almost anything except the most egregious abuses of the
dynamic capabilities of the interpreter.  The Bytecode module is also
fairly complete, and spits out an external Perl bytecode representation,
which can then be read back in and executed by a suitably clued version
of Perl.  Finally, the CC backend attempts to translate into more
idiomatic C with a lot of optimization.  Obviously, that's a bit harder
to do than the other thing.  Nevertheless, it already works on a majority of
the Perl regression tests.  It's possible with some care to get C code
that runs considerably faster than Perl 5's interpreter, which is no
slouch to begin with.  And Malcolm hasn't put in all the optimizations
he wants to yet.

<p class=para>
This is an ongoing topic of research, but you'll want to keep track of
it.  You are quite likely to be using this someday soon, if you aren't
already.  Look for it on CPAN of course, if it's not already a part
of the standard Perl distribution by the time you read this.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CH-6-SECT-4.4">Embedding Perl in C and C++</A></h3>

<p class=para>
Another part of the design of Perl 5 was that it be possible to embed a
Perl interpreter in a C or C++ program.  And in fact, the ordinary
<i class=emphasis>perl</I> executable pretends to have an embedded interpreter in it; the
<tt class=literal>main( )</tt> function essentially does this:

<div class=programlisting>
<p>
<pre>
PerlInterpreter *my_perl;
int main(int argc, char **argv)
{
    int exitstatus;
    my_perl = perl_alloc();
    perl_construct( my_perl );
    exitstatus = perl_parse( my_perl, xs_init, argc, argv,
                                          (char **) NULL );
    if (exitstatus)
        exit( exitstatus );
    exitstatus = perl_run( my_perl );
    perl_destruct( my_perl );
    perl_free( my_perl );
    exit(exitstatus);
}
</PRE>
</DIV>

<p class=para>
The important parts are the calls to <tt class=literal>perl_parse()</tt> and <tt class=literal>perl_run()</tt>, which
respectively compile and run the program.  If you were embedding Perl in
your own program, you might replace the call to <tt class=literal>perl_run()</tt> with calls to
<tt class=literal>perl_call_sv()</tt> function, which calls individual subroutines rather than
the program as a whole.  Or you can do both, if the main script contains
initialization code as well as subroutine definitions.

<p class=para>
There are many other useful entry points into the interpreter, such as
<tt class=literal>perl_eval_sv()</tt>, which evaluates a string, but this chapter is already
getting pretty long, and the fact of the matter is that there is
extensive online documentation for the internals of Perl.  To include it
here would make this book even more unwieldy than it is, and most people
who would be embedding Perl aren't scared of online documentation.  See
the <i class=emphasis>perlembed</I> (3) manpage for more on embedding Perl interpreters in your
program.

<p class=para>
A number of programs in the real world already have Perl embedded in
them--the authors know of several proprietary products shipping with
embedded Perl interpreters.  There are also a couple of modules for the
<i class=emphasis>Apache</I> HTTP servers that use an embedded Perl interpreter to avoid
process startup costs on CGI-like scripting.  And then there's the version
of Berkeley's <i class=emphasis>nvi</I> editor with a Perl engine in it.  Watch out,
<i class=emphasis>emacs</I>, you've got company. <tt class=literal>:-)</tt>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CH-6-SECT-4.5">Embedding C and C++ in Perl</A></h3>

<p class=para>
If a respectable number of programs embed a Perl interpreter, then a
veritable flood of extension modules embed C and C++ into Perl.  Again,
the Perl distribution itself does this with many of its standard
extension modules, including DB_File, DynaLoader, Fcntl, FileHandle,
GDBM_File, NDBM_File, ODBM_File, POSIX, Safe, SDBM_File, and Socket.
And many of the modules on CPAN do this.  So if you decide to do it
yourself, you won't feel like you're researching a Ph.D. dissertation.

<p class=para>
And again, we only have space to give you teasers for the online
documentation, which is exhaustively extensive.  We recommend you start
with the <i class=emphasis>perlxstut</I> (3) manpage, which is a tutorial on the XS
language, a preprocessor that spits out the glue routines you need to do
the "impedance matching" between Perl and C or C++.  You'll also be
interested in <i class=emphasis>perlxs</I> (3), <i class=emphasis>perlguts</I> (3), and <i class=emphasis>perlcall</I> (3).

<p class=para>
And once again, let us reiterate that your best resource is the Perl
community itself.  They invented a lot of this stuff, and are emotionally
committed to making you like it, whether you like it or not.  You'd better
cooperate.

</DIV>

</DIV>


<div class=htmlnav>
<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch06_03.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src="gifs/txthome.gif" alt="Home" border=0></a></td>
<td width=172 align=right valign=top><a href="ch07_01.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Cooperating with Strangers</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td>
<td width=172 align=right valign=top>The Standard Perl Library</td>
</tr>
</table>

<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
</DIV>
</BODY>
</HTML>
