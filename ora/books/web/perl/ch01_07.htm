<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 1] 1.7 Regular Expressions</TITLE>
<meta name="author" content="Larry Wall, Tom Christiansen, and Randal Schwartz">
<meta name="date" content="Mon Mar 17 12:59:30 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="Perl">
<meta name="title" content="Programming Perl, Second Edition">
<!-- JavaScript: pathcont.js -->

</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><img src="gifs/smbanner.gif" alt="Programming Perl, Second Edition"></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch01_06.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b>Chapter 1</b></td>
<td width=172 align=right valign=top><a href="ch01_08.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>
<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="PERL2-CH-1-SECT-7">1.7 Regular Expressions</A></h2>

<p class=para>
<a name="CH01.RE"></A><i class=emphasis>Regular expressions</I> (aka regexps, regexes or REs) are used by many
UNIX programs, such as <i class=emphasis>grep</I>, <i class=emphasis>sed</I> and <i class=emphasis>awk</I>,[24]
editors like <i class=emphasis>vi</I> and <i class=emphasis>emacs</I>, and even some of the shells.  A
regular expression is a way of describing a set of strings without
having to list all the strings in your set.

<blockquote class=footnote>
<p class=para>[24] 
A good source of information on regular expression concepts is
the Nutshell Handbook <i class=emphasis>sed &amp; awk</I> by Dale
Dougherty (O'Reilly &amp; Associates). You might also keep an eye out
for Jeffrey Friedl's forthcoming book, <i class=emphasis>Mastering Regular
Expressions</I> (O'Reilly &amp; Associates).
</blockquote>
<p class=para>
Regular expressions are used several ways in Perl.  First and
foremost, they're used in conditionals to determine whether a string
matches a particular pattern.  So when you see something that looks like
<tt class=literal>/foo/</tt>, you know you're looking at an ordinary <i class=emphasis>pattern-matching</I> operator.

<p class=para>
Second, if you can locate patterns within a string, you can replace them
with something else.  So when you see something that looks like
<tt class=literal>s/foo/bar/</tt>, you know it's asking Perl to substitute "bar" for "foo", if
possible.  We call that the <i class=emphasis>substitution</I> operator.

<p class=para>
Finally, patterns can specify not only where something is, but also
where it isn't.  So the <a href="ch03_02.htm">split</A> operator uses a regular expression
to specify where the data isn't.  That is, the regular expression
defines the <i class=emphasis>delimiters</I> that separate the fields of data.  Our grade
example has a couple of trivial examples of this.  Lines 5 and 12 each
split strings on the space character in order to return a list of words.
But you can split on any delimiter you can specify with a regular
expression.

<p class=para>
(There are various modifiers you can use in each of these situations to do
exotic things like ignore case when matching alphabetic characters, but
these are the sorts of gory details that we'll cover in <a href="ch02_01.htm">Chapter 2, <i>The Gory Details</i></A>.)

<p class=para>
The simplest use of regular expressions is to match a literal
expression.  In the case of the splits we just mentioned, we matched on
a single space.  But if you match on several characters in a row, they
all have to match sequentially.  That is, the pattern looks for a
substring, much as you'd expect.  Let's say we want to show all the
lines of an HTML file that are links to other HTML files (as opposed to
FTP links).  Let's imagine we're working with HTML for the first time,
and we're being a little naive yet.  We know that these links will
always have "http:" in them somewhere.  We could loop through our file
with this:[25]

<blockquote class=footnote>
<p class=para>[25] 
This is very similar to what the UNIX command <tt class=literal>grep 'http:' file</tt> would
do.  On MS-DOS you could use the <i class=emphasis>find</I> command, but it doesn't know
how to do more complicated regular expressions.  (However, the misnamed
<i class=emphasis>findstr</I> program of Windows NT does know about regular expressions.)
</blockquote>
<p class=para>
<div class=programlisting>
<p>
<pre>
while ($line = &lt;FILE&gt;) {
    if ($line =~ /http:/) {
        print $line;
    }
}
</PRE>
</DIV>

<p class=para>
Here, the <tt class=literal>=~</tt> (pattern binding operator) is telling
Perl to look for a match of
the regular expression <tt class=literal>http:</tt> in the variable <tt class=literal>$line</tt>.  If it finds the
expression, the operator returns a true value and the block (a <b>print</B>
command) is executed.  By the way, if you don't use the <tt class=literal>=~</tt> binding
operator, then Perl will search a default variable instead of <tt class=literal>$line</tt>.
This default space is really just a special variable that goes by
the odd name of <b>$_</B>.  In fact, many of the operators in Perl
default to using the <b>$_</B> variable, so an expert Perl programmer might
write the above as:

<p class=para>
<div class=programlisting>
<p>
<pre>
while (&lt;FILE&gt;) {
    print if /http:/;
}
</PRE>
</DIV>

<p class=para>
(Hmm, another one of those statement modifiers seems to have snuck in
there.  Insidious little beasties.)

<p class=para>
This stuff is pretty handy, but what if we wanted to find all the links,
not just the HTTP links?  We could give a list of links, like "<tt class=literal>http:</tt>",
"<tt class=literal>ftp:</tt>", "<tt class=literal>mailto:</tt>", and so on.  But that list could get long, and what would we
do when a new kind of link was added?

<p class=para>
<div class=programlisting>
<p>
<pre>
while (&lt;FILE&gt;) {
    print if /http:/;
    print if /ftp:/;
    print if /mailto:/;
    # What next?
}
</PRE>
</DIV>

<p class=para>
Since regular expressions are descriptive of a set of strings, we can
just describe what we are looking for: a number of alphabetic characters
followed by a colon.  In regular expression talk (Regexpese?), that
would be <tt class=literal>/[a-zA-Z]+:/</tt>, where the brackets define a <i class=emphasis>character
class</I>.  The <tt class=literal>a-z</tt> and <tt class=literal>A-Z</tt> represent all alphabetic characters (the
dash means the range of all characters between the starting and ending
character, inclusive).  And the <tt class=literal>+</tt> is a special character which says
"one or more of whatever was before me".  It's what we call a
<i class=emphasis>quantifier</I>, meaning a gizmo that says how many times something is
allowed to repeat.  (The slashes aren't really part of the regular
expression, but rather part of the pattern match operator.   The slashes
are acting like quotes that just happen to contain a regular
expression.)

<p class=para>
Because certain classes like the alphabetics are so commonly used, Perl
defines special cases for them.  See <a href="#PERL2-CH-1-TAB-7">Table 1.7</A> for these special cases.

<p>
<div class=table>
<table>
<caption><a class="TITLE" name="PERL2-CH-1-TAB-7">Table 1-7: Regular Expression Character Classes</A></CAPTION>
<tr class=row>
<th align="left">Name</TH>
<th align="left">Definition</TH>
<th align="left">Code</TH>
</TR>
<tr class=row>
<td align="left">Whitespace</TD>
<td align="left"><tt class=literal>[ \t\n\r\f]</tt></TD>
<td align="left"><tt class=literal>\s</tt></TD>
</TR>
<tr class=row>
<td align="left">Word character</TD>
<td align="left"><tt class=literal>[a-zA-Z_0-9]</tt></TD>
<td align="left"><tt class=literal>\w</tt></TD>
</TR>
<tr class=row>
<td align="left">Digit</TD>
<td align="left"><tt class=literal>[0-9]</tt></TD>
<td align="left"><tt class=literal>\d</tt></TD>
</TR>
</TABLE>
<p>
</DIV>
<p class=para>
Note that these match <i class=emphasis>single</I> characters.  A <tt class=literal>\w</tt> will match any single
word character, not an entire word.  (Remember that <tt class=literal>+</tt> quantifier?  You
can say <tt class=literal>\w+</tt> to match a word.)  Perl also provides the negation of
these classes by using the uppercased character, such as <tt class=literal>\D</tt> for a
non-digit character.

<p class=para>
(We should note that <tt class=literal>\w</tt> is not always equivalent to <tt class=literal>[a-zA-Z_0-9]</tt>.
Some locales define additional alphabetic characters outside the ASCII
sequence, and <tt class=literal>\w</tt> respects them.)

<p class=para>
There is one other very special character class, written with a "<tt class=literal>.</tt>",
that will match any character whatsoever.[26]
For example, <tt class=literal>/a./</tt> will match any string containing an "<tt class=literal>a</tt>" that is not
the last character in the string.  Thus it will match "<tt class=literal>at</tt>" or "<tt class=literal>am</tt>" or
even "<tt class=literal>a+</tt>", but not "<tt class=literal>a</tt>", since there's nothing after the "<tt class=literal>a</tt>" for the dot
to match.  Since it's searching for the pattern anywhere in the string,
it'll match "<tt class=literal>oasis</tt>" and "<tt class=literal>camel</tt>", but not "<tt class=literal>sheba</tt>".  It matches "<tt class=literal>caravan</tt>"
on the first "<tt class=literal>a</tt>".  It could match on the second "<tt class=literal>a</tt>", but it stops after
it finds the first suitable match, searching from left to right.

<blockquote class=footnote>
<p class=para>[26] 
Except that it won't normally match a newline.  When you think about it,
a "<tt class=literal>.</tt>" doesn't normally match a newline in <i class=emphasis>grep</I> (1) either.
</blockquote>
<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CH-1-SECT-7.1">Quantifiers</A></h3>

<p class=para>
The characters and character classes we've talked about all match single
characters.  We mentioned that you could match multiple "word"
characters with <tt class=literal>\w+</tt> in order to match an entire word.  The <tt class=literal>+</tt>
is one kind of quantifier, but there are others.  (All of them are placed
after the item being quantified.)

<p class=para>
The most general form of quantifier specifies both the minimum and
maximum number of times an item can match.  You put the two numbers in
braces, separated by a comma.  For example, if you were trying
to match North American phone numbers, <tt class=literal>/ \d{7,11}/</tt> would match at least seven digits,
but no more than eleven digits.  If you put a single number in the braces,
the number specifies both the minimum and the maximum; that is, the
number specifies the exact number of times the item can match.  (If you
think about it, all unquantified items have an implicit <tt class=literal>{1}</tt>
quantifier.)

<p class=para>
If you put the minimum and the comma but omit the maximum, then the
maximum is taken to be infinity.  In other words, it will match at least
the minimum number of times, plus as many as it can get after that.
For example, <tt class=literal>/ \d{7}/</tt> will only match a local (North American) phone number (seven
digits), while <tt class=literal>/ \d{7,}/</tt> will match any phone number, even an
international one (unless it happens to be shorter than seven digits).  There is no
special way of saying "at most" a certain number of times.  Just
say <tt class=literal>/.{0,5}/</tt>, for example, to find at most five arbitrary characters.

<p class=para>
Certain combinations of minimum and maximum occur frequently, so Perl
defines special quantifiers for them.  We've already seen <tt class=literal>+</tt>, which is
the same as <tt class=literal>{1,}</tt>, or "at least one of the preceding item".  There is
also <tt class=literal>*</tt>, which is the same as <tt class=literal>{0,}</tt>, or "zero or more of the
preceding item", and <tt class=literal>?</tt>, which is the same as <tt class=literal>{0,1}</tt>, or "zero or
one of the preceding item" (that is, the preceding item is optional).

<p class=para>
There are a couple things about quantification that you need
to be careful of.  First of all, Perl quantifiers are by default
<i class=emphasis>greedy</I>.  This means that they will attempt to match as much as they
can as long as the entire expression still matches.  For example, if you
are matching <tt class=literal>/ \d+/</tt> against "<tt class=literal>1234567890</tt>", it will match the entire
string.  This is something to especially watch out for when you are using
"<tt class=literal>.</tt>", any character.  Often, someone will have a string like:

<p class=para>
<div class=programlisting>
<p>
<pre>
spp:Fe+H20=FeO2;H:2112:100:Stephen P Potter:/home/spp:/bin/tcsh
</PRE>
</DIV>

<p class=para>
and try to match "<tt class=literal>spp</tt>" with
<tt class=literal>/.+:/</tt>.  However, since the <tt class=literal>+</tt>
quantifier is greedy, this pattern will match everything up to and
including "<tt class=literal>/home/spp</tt>".  Sometimes you can avoid
this by using a negated character class, that is, by saying <tt class=literal>/[^:]+:/</tt>, which says
to match one or more non-colon characters (as many as possible), up to
the first colon.  It's that little caret in there that negates the sense
of the character class.[27]
The other point to be careful about is that regular expressions will try
to match as <i class=emphasis>early</I> as possible.  This even takes precedence over being
greedy.  Since scanning happens left-to-right, this means that the
pattern will match as far left as possible, even if there is some other
place where it could match longer.  (Regular expressions are greedy, but
they aren't into delayed gratification.)  For example, suppose you're
using the substitution command (<tt class=literal>s///</tt>) on the default variable space
(variable <b>$_</B>, that is), and you want to remove a string of x's from
the middle of the string.  If you say:

<blockquote class=footnote>
<p class=para>[27] 
Sorry, we didn't pick that notation, so don't blame us.  That's just how
regular expressions are customarily written in UNIX culture.
</blockquote>
<p class=para>
<div class=programlisting>
<p>
<pre>
$_ = "fred xxxxxxx barney";
s/x*//;
</PRE>
</DIV>

<p class=para>
it will have absolutely no effect.  This is because the <tt class=literal>x*</tt> (meaning zero or
more "<tt class=literal>x</tt>" characters) will be able to match the "nothing" at the beginning of the
string, since the null string happens to be zero characters wide and there's
a null string just sitting there plain as day before the "<tt class=literal>f</tt>" of "<tt class=literal>fred</tt>".[28]

<blockquote class=footnote>
<p class=para>[28] 
Even the authors get caught by this from time to time.
</blockquote>
<p class=para>
There's one other thing you need to know.  By default quantifiers apply
to a single preceding character, so <tt class=literal>/bam{2}/</tt> will match "<tt class=literal>bamm</tt>" but not
"<tt class=literal>bambam</tt>".  To apply a quantifier to more than one character, use parentheses.
So to match "<tt class=literal>bambam</tt>", use the pattern <tt class=literal>/(bam){2}/</tt>.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CH-1-SECT-7.2">Minimal Matching</A></h3>

<p class=para>
If you were using an ancient version of Perl and you didn't want greedy
matching, you had to use a negated character class.  (And really,
you were still getting greedy matching of a constrained variety.)

<p class=para>
In modern versions of Perl, you can force nongreedy, minimal
matching by use of a question mark after any quantifier.  Our same
username match would now be <tt class=literal>/.*?:/</tt>.  That <tt class=literal>.*?</tt> will now try to
match as few characters as possible, rather than as many as possible,
so it stops at the first colon rather than the last.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CH-1-SECT-7.3">Nailing Things Down</A></h3>

<p class=para>
Whenever you try to match a pattern, it's going to try to match in every
location till it finds a match.  An <i class=emphasis>anchor</I> allows you to restrict
where the pattern can match.  Essentially, an anchor is something that
matches a "nothing", but a special kind of nothing that depends on its
surroundings.  You could also call it a rule, or a constraint, or an
assertion.  Whatever you care to call it, it tries to match something of
zero width, and either succeeds or fails.  (If it fails, it merely means
that the pattern can't match that particular way.  The pattern will go
on trying to match some other way, if there are any other ways to try.)

<p class=para>
The special character string <tt class=literal>\b</tt> matches at a word boundary, which is
defined as the "nothing" between a word character (<tt class=literal>\w</tt>) and a non-word
character (<tt class=literal>\W</tt>), in either order.  (The characters that don't exist off the
beginning and end of your string are considered to be non-word characters.)
For example,

<p class=para>
<div class=programlisting>
<p>
<pre>
/\bFred\b/
</PRE>
</DIV>

<p class=para>
would match both "<tt class=literal>The Great Fred</tt>" and
"<tt class=literal>Fred the Great</tt>", but would not match
"<tt class=literal>Frederick the Great</tt>" because the "<tt class=literal>de</tt>" in "<tt class=literal>Frederick</tt>" does not contain a
word boundary.

<p class=para>
In a similar vein, there are also anchors for the beginning of the
string and the end of the string.  If it is the first character of a
pattern, the caret (<tt class=literal>^</tt>) matches the "nothing" at the beginning of the
string.  Therefore, the pattern <tt class=literal>/^Fred/</tt> would match "Frederick the
Great" and not "The Great Fred", whereas <tt class=literal>/Fred^/</tt> wouldn't match
either.  (In fact, it doesn't even make much sense.)  The dollar sign
(<tt class=literal>$</tt>) works like the caret, except that it matches the "nothing" at the
end of the string instead of the beginning.[29]

<blockquote class=footnote>
<p class=para>[29] 
This is a bit oversimplified, since we're assuming here that your string
contains only one line.  <tt class=literal>^</tt> and <tt class=literal>$</tt> are actually anchors for the
beginnings and endings of lines rather than strings.  We'll try to
straighten this all out in <a href="ch02_01.htm">Chapter 2, <i>The Gory Details</i></A> (to the extent that it can
be straightened out).
</blockquote>
<p class=para>
So now you can probably figure out that when we said:

<p class=para>
<div class=programlisting>
<p>
<pre>
next LINE if $line =~ /^#/;
</PRE>
</DIV>

<p class=para>
we meant "Go to the next iteration of <tt class=literal>LINE</tt> loop if this line happens to
begin with a <tt class=literal>#</tt> character."

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CH-1-SECT-7.4">Backreferences</A></h3>

<p class=para>
We mentioned earlier that you can use parentheses to group things
for quantifiers, but you can also use parentheses to remember bits and
pieces of what you matched.  A pair of parentheses around a part of a
regular expression causes whatever was matched by that part to be
remembered for later use.  It doesn't change what the part matches, so
<tt class=literal>/ \d+/</tt> and <tt class=literal>/(\d+)/</tt> will still match as many digits as possible, but
in the latter case they will be remembered in a special variable to be
backreferenced later.

<p class=para>
How you refer back to the remembered part of the string depends on where
you want to do it from.  Within the same regular expression, you
use a backslash followed by an integer.  The integer corresponding to a
given pair of parentheses is determined by counting left parentheses
from the beginning of the pattern, starting with one.  So for example, to
match something similar to an HTML tag (like "<tt class=literal>&lt;B&gt;Bold&lt;/B&gt;</tt>", you might
use <tt class=literal>/&lt;(.*?)&gt;.*?&lt;\/\1&gt;/</tt>.  This forces the two parts of the
pattern to match the exact same string, such as the "<tt class=literal>B</tt>" above.

<p class=para>
Outside the regular expression itself, such as in the replacement
part of a substitution, the special variable is used as if it were a
normal scalar variable named by the integer.  So, if you wanted to swap
the first two words of a string, for example, you could use:

<p class=para>
<div class=programlisting>
<p>
<pre>
s/(\S+)\s+(\S+)/$2 $1/
</PRE>
</DIV>

<p class=para>
The right side of the substitution is really just a funny kind of
double-quoted string, which is why you can interpolate variables there,
including backreference variables.  This is a powerful concept:
interpolation (under controlled circumstances) is one of the reasons
Perl is a good text-processing language.  The other reason is the pattern
matching, of course.  Regular expressions are good for picking things apart,
and interpolation is good for putting things back together again.  Perhaps
there's hope for Humpty Dumpty after all.

</DIV>

</DIV>


<div class=htmlnav>
<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch01_06.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src="gifs/txthome.gif" alt="Home" border=0></a></td>
<td width=172 align=right valign=top><a href="ch01_08.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Control Structures</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td>
<td width=172 align=right valign=top>List Processing</td>
</tr>
</table>

<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
</DIV>
</BODY>
</HTML>
