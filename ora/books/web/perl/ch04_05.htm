<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 4] 4.5 Braces, Brackets, and Quoting</TITLE>
<meta name="author" content="Larry Wall, Tom Christiansen, and Randal Schwartz">
<meta name="date" content="Mon Mar 17 13:09:05 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="Perl">
<meta name="title" content="Programming Perl, Second Edition">
<!-- JavaScript: pathcont.js -->

</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><img src="gifs/smbanner.gif" alt="Programming Perl, Second Edition"></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch04_04.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b>Chapter 4</b></td>
<td width=172 align=right valign=top><a href="ch04_06.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>
<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="PERL2-CH-4-SECT-5">4.5 Braces, Brackets, and Quoting</A></h2>

<p class=para>
In the previous section we pointed out that <tt class=literal>${identifier}</tt> is not treated as
a symbolic reference.  Now you might wonder how this interacts with
reserved words.  The short answer is, it doesn't.  Despite the fact
that <a href="ch03_02.htm">push</A> is a reserved word, these two
statements:

<div class=programlisting>
<p>
<pre>
$push = "pop on ";
print "${push}over";
</PRE>
</DIV>

<p class=para>
print out "<tt class=literal>pop on over</tt>".  The reason is that, historically, this use of
braces is how UNIX shells have delimited a variable name from subsequent
alphanumeric text that would otherwise be interpreted as part of the
variable name.  It's how many people expect variable interpolation to
work, so we made it work the same way in Perl.  But with Perl, the
notion extends further and applies to any braces used in generating
references, whether or not they're inside quotes.  This means that:

<div class=programlisting>
<p>
<pre>
print ${push} . 'over';
</PRE>
</DIV>

<p class=para>
or even:

<div class=programlisting>
<p>
<pre>
print ${ push } . 'over';
</PRE>
</DIV>

<p class=para>
will also print "<tt class=literal>pop on over</tt>", even though the braces are outside of
double quotes.  The same rule applies to any identifier that is used for
subscripting a hash.  So, instead of writing:

<div class=programlisting>
<p>
<pre>
$hash{ "aaa" }{ "bbb" }{ "ccc" }
</PRE>
</DIV>

<p class=para>
you can just write:

<div class=programlisting>
<p>
<pre>
$hash{ aaa }{ bbb }{ ccc }
</PRE>
</DIV>

<p class=para>
and not worry about whether the subscripts are reserved words.  In the
rare event that you do wish to do something like:

<div class=programlisting>
<p>
<pre>
$hash{ shift }
</PRE>
</DIV>

<p class=para>
you can force interpretation as a reserved word by adding anything that
makes it more than a mere identifier:

<div class=programlisting>
<p>
<pre>
$hash{ shift() }
$hash{ +shift }
$hash{ shift @_ }
</PRE>
</DIV>

<p class=para>
The <b>-w</B> switch will warn you if it
interprets a reserved word as a string, since you may have
<i class=emphasis>meant</I> the reserved word.  (That's why we
recommend you use <tt class=literal>${pkg}</tt> instead of
<tt class=literal>${package}</tt> or <tt class=literal>${pack}</tt>, since
you'll avoid some warnings that way.)

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CH-4-SECT-5.1">Hard References Don't Work as Hash Keys</A></h3>

<p class=para>
Consistent with the foregoing, hash keys are stored internally as strings.[7]
If you try to store a hard reference as a key in a hash, the key value will be
converted into a string:

<blockquote class=footnote>
<p class=para>[7] 
They're also stored externally as strings, such as when you put them into
a DBM file.  In fact, DBM files <i class=emphasis>require</I> that their keys (and values) be strings.
</blockquote>
<div class=programlisting>
<p>
<pre>
$x{ \$a } = $a;
($key, $value) = each %x;
print $$key;   # WRONG
</PRE>
</DIV>

<p class=para>
We mentioned earlier that you can't convert a string back to a hard
reference.  So if you try to dereference <tt class=literal>$key</tt>, which contains a
mere string, it won't do a hard dereference, but rather a symbolic
dereference, and since you probably don't have a variable named
<tt class=literal>SCALAR(0x1fc0e)</tt>, you won't accomplish what you're attempting.  You
might want to do something more like:

<div class=programlisting>
<p>
<pre>
$r = \@a;
$x{ $r } = $r;
</PRE>
</DIV>

<p class=para>
And then at least you can use the hash <i class=emphasis>value</I>, which will be a
hard reference, instead of the key, which won't.

<p class=para>
Although you can't store a hard reference as a key, if you use a hard
reference in a string context, it <i class=emphasis>is</I> guaranteed to produce a
unique string, since the address of the reference is included as part of
the resulting string.  So you can in fact use a hard reference as a
unique hash key.  You just can't dereference it later.

</DIV>

</DIV>


<div class=htmlnav>
<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch04_04.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src="gifs/txthome.gif" alt="Home" border=0></a></td>
<td width=172 align=right valign=top><a href="ch04_06.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Symbolic References</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td>
<td width=172 align=right valign=top>A Brief Tutorial: Manipulating Lists of Lists</td>
</tr>
</table>

<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
</DIV>
</BODY>
</HTML>
