<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 9] Diagnostic Messages</TITLE>
<meta name="author" content="Larry Wall, Tom Christiansen, and Randal Schwartz">
<meta name="date" content="Mon Mar 17 13:22:56 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="Perl">
<meta name="title" content="Programming Perl, Second Edition">
<!-- JavaScript: pathcont.js -->

</HEAD>
<body bgcolor="#FFFFFF" text="#000000">

<div class=htmlnav>
<h1><img src="gifs/smbanner.gif" alt="Programming Perl, Second Edition"></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch08_07.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b>Chapter 9</b></td>
<td width=172 align=right valign=top><a href="gloss_01.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>
<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
<hr align=left width=515>
</DIV>
<h1 class=chapter><a class="TITLE" name="PERL2-CH-9">Diagnostic Messages</A></H1>

<p class=para>
These messages are classified as follows (listed in increasing order of
desperation):<a name="CH09.MESS1"></A><a name="CH09.MESS2"></A>

<div class=informaltable>
<p>
<a name="PERL2-CH-9-TAB-1"></A>

<table class=INFORMALTABLE>
<tr class=row>
<th align="left">Class</TH>
<th align="left">Meaning</TH>
</TR>
<tr class=row>
<td align="left">(W)</TD>
<td align="left">A warning (optional)</TD>
</TR>
<tr class=row>
<td align="left">(D)</TD>
<td align="left">A deprecation (optional)</TD>
</TR>
<tr class=row>
<td align="left">(S)</TD>
<td align="left">A severe warning (mandatory)</TD>
</TR>
<tr class=row>
<td align="left">(F)</TD>
<td align="left">A fatal error (trappable)</TD>
</TR>
<tr class=row>
<td align="left">(P)</TD>
<td align="left">An internal error (panic) that you should never see (trappable)</TD>
</TR>
<tr class=row>
<td align="left">(X)</TD>
<td align="left">A very fatal error (non-trappable)</TD>
</TR>
<tr class=row>
<td align="left">(A)</TD>
<td align="left">An alien error message (not generated by Perl)</TD>
</TR>
</TABLE>
<p>
</DIV>

<p class=para>
Optional warnings are enabled by using the <b>-w</B> switch.  Warnings may be captured by setting
<tt class=literal>$SIG{_ _WARN_ _}</tt> to a reference to a routine
that will be called on each warning before printing it.  Trappable errors may be
trapped using <a href="ch03_02.htm">eval</A>.  You can also capture
control before a trappable error "dies" by setting
<tt class=literal>$SIG{_ _DIE_ _}</tt> to a subroutine reference, but
if you don't call <a href="ch03_02.htm">die</A> within that handler,
the fatal exception is still thrown when you return from it.  In other words,
you're not allowed to "de-fatalize" an exception that way.  You must use an
<a href="ch03_02.htm">eval</A> wrapper for that.

<p class=para>
In the following messages <i class=emphasis>%s</I> stands for an
interpolated string that is determined only when the message is
generated.  (Similarly, <i class=emphasis>%d</I> stands for an
interpolated number--think <a href="ch03_02.htm">printf</A>
formats, but we use <i class=emphasis>%d</I> to mean a number in any
base here.)  Note that some messages begin with
<i class=emphasis>%s</I> --which means that listing them
alphabetically is problematical.  You should search among these
messages if the one you are looking for does not appear in the
expected place.  The symbols
<tt class=literal>" % - ? @</tt> sort before
alphabetic characters, while <tt class=literal>[</tt> and
<tt class=literal>\</tt> sort after.

<p class=para>
References of the form, "See <a href="ch03_02.htm">unpack</A>,"
refer to entries in <a href="ch03_01.htm">Chapter 3, <i>Functions</i></A>.

<p class=para>
If you decide a bug is a Perl bug and not your bug, you should try to
reduce it to a minimal test case and then report it with the
<i class=emphasis>perlbug</I> program that comes with Perl.

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>`my` variable </tt><i class=emphasis>%s</I><tt class=literal> can't be in a package</tt><dd>

<p class=para>
(F) Lexically scoped variables aren't in a package, so it doesn't make sense
to try to declare one with a package qualifier on the front.  Use <a href="ch03_02.htm">local</A>
if you want to localize a package variable.

<p>
<dt class=varlistentry><tt class=literal>`no` not allowed in expression</tt><dd>

<p class=para>
(F) The <a href="ch03_02.htm">no</A> keyword is recognized and executed at compile time, and returns
no useful value.

<p>
<dt class=varlistentry><tt class=literal>`use` not allowed in expression</tt><dd>

<p class=para>
(F) The <a href="ch03_02.htm">use</A> keyword is recognized and executed at compile time, and returns
no useful value.

<p>
<dt class=varlistentry><tt class=literal>% may only be used in unpack</tt><dd>

<p class=para>
(F) You can't pack a string by supplying a checksum, since the
checksumming process loses information, and you can't go the other
way.  See <a href="ch03_02.htm">unpack</A>.

<p>
<dt class=varlistentry><i class=emphasis>%s</I><tt class=literal> (...) interpreted as function</tt><dd>

<p class=para>
(W) You've run afoul of the rule that says that any list operator followed
by parentheses turns into a function, with all the list operator's arguments 
found inside the parens.  
See the section "Terms and List Operators (Leftward)" in <a href="ch02_01.htm">Chapter 2, <i>The Gory Details</i></A>.

<p>
<dt class=varlistentry><i class=emphasis>%s</I><tt class=literal> argument is not a HASH element</tt><dd>

<p class=para>
(F) The argument to <a href="ch03_02.htm">delete</A> or <a href="ch03_02.htm">exists</A> must be a hash element, such as

<div class=programlisting>
<p>
<pre>
$foo{$bar}
$ref-&gt;[12]-&gt;{"susie"}
</PRE>
</DIV>

<p class=para>
<p>
<dt class=varlistentry><i class=emphasis>%s</I><tt class=literal> did not return a true value</tt><dd>

<p class=para>
(F) A <a href="ch03_02.htm">require</A>d (or <a href="ch03_02.htm">use</A>d) file must return a true value to
indicate that it compiled correctly and ran its initialization code
correctly.  It's traditional to end such a file with a "<tt class=literal>1;</tt>",
though any true value would do.  See <a href="ch03_02.htm">require</A>.

<dt class=varlistentry><i class=emphasis>%s</I><tt class=literal> found where operator expected</tt><dd>

<p class=para>
(S) The Perl lexer knows whether to expect a term or an operator.  If it
sees what it knows to be a term when it was expecting to see an operator,
it gives you this warning.  Usually it indicates that an operator or
delimiter was omitted, such as a semicolon.

<p>
<dt class=varlistentry><i class=emphasis>%s</I><tt class=literal> had compilation errors.</tt><dd>

<p class=para>
(F) The final summary message when a <i class=emphasis>perl -c</I> command fails.

<p>
<dt class=varlistentry><i class=emphasis>%s</I><tt class=literal> has too many errors.</tt><dd>

<p class=para>
(F) The parser has given up trying to parse the program after 10 errors.
Further error messages would likely be uninformative.

<p>
<dt class=varlistentry><i class=emphasis>%s</I><tt class=literal> matches null string many times</tt><dd>

<p class=para>
(W) The pattern you've specified would be an infinite loop if the
regular expression engine didn't specifically check for that.

<p>
<dt class=varlistentry><i class=emphasis>%s</I><tt class=literal> never introduced</tt><dd>

<p class=para>
(S) The symbol in question was declared but somehow went out of scope
before it could possibly have been used.

<p>
<dt class=varlistentry><i class=emphasis>%s</I><tt class=literal> syntax OK</tt><dd>

<p class=para>
(F) The final summary message when a <i class=emphasis>perl -c</I> command succeeds.

<p>
<dt class=varlistentry><i class=emphasis>%s</I><tt class=literal>: Command not found.</tt><dd>

<p class=para>
(A) You've accidentally run your script through <i class=emphasis>csh</I> instead
of <i class=emphasis>perl</I>.  Check the <tt class=literal>#!</tt> line, or manually feed your script
into <i class=emphasis>perl</I> yourself.

<p>
<dt class=varlistentry><i class=emphasis>%s</I><tt class=literal>: Expression syntax.</tt><dd>

<p class=para>
(A) You've accidentally run your script through <i class=emphasis>csh</I> instead
of <i class=emphasis>perl</I>.  Check the <tt class=literal>#!</tt> line, or manually feed your script
into <i class=emphasis>perl</I> yourself.

<p>
<dt class=varlistentry><i class=emphasis>%s</I><tt class=literal>: Undefined variable.</tt><dd>

<p class=para>
(A) You've accidentally run your script through <i class=emphasis>csh</I> instead
of <i class=emphasis>perl</I>.  Check the <tt class=literal>#!</tt> line, or manually feed your script
into <i class=emphasis>perl</I> yourself.

<p>
<dt class=varlistentry><i class=emphasis>%s</I><tt class=literal>: not found</tt><dd>

<p class=para>
(A) You've accidentally run your script through the Bourne shell instead
of <i class=emphasis>perl</I>.  Check the <tt class=literal>#!</tt> line, or manually feed your script
into <i class=emphasis>perl</I> yourself.

<p>
<dt class=varlistentry><tt class=literal>-P not allowed for setuid/setgid script</tt><dd>

<p class=para>
(F) The script would have to be opened by the C preprocessor by name,
which provides a race condition that breaks security.

<p>
<dt class=varlistentry><tt class=literal>-T and -B not implemented on filehandles</tt><dd>

<p class=para>
(F) Perl can't peek at the <tt class=literal>stdio</tt> buffer of filehandles when it doesn't
know about your kind of <tt class=literal>stdio</tt>.  You'll have to use a filename instead.

<p>
<dt class=varlistentry><tt class=literal>500 Server error</tt><dd>

<p class=para>
See <tt class=literal>Server error</tt>.

<p>
<dt class=varlistentry><tt class=literal>?+* follows nothing in regexp</tt><dd>

<p class=para>
(F) You started a regular expression with a quantifier.  Backslash it
if you meant it literally.

<p>
<dt class=varlistentry><tt class=literal>@ outside of string</tt><dd>

<p class=para>
(F) You had a <a href="ch03_02.htm">pack</A> template that specified an absolute position outside
the string being unpacked.  See <a href="ch03_02.htm">pack</A>.

<p>
<dt class=varlistentry><tt class=literal>accept() on closed fd</tt><dd>

<p class=para>
(W) You tried to do an <a href="ch03_02.htm">accept</A> on a closed socket.  Did you forget to check
the return value of your <a href="ch03_02.htm">socket</A> call?  See <a href="ch03_02.htm">accept</A>.

<p>
<dt class=varlistentry><tt class=literal>Allocation too large: </tt><i class=emphasis>%d</I><dd>

<p class=para>
(F) You can't allocate more than 64K on an MS-DOS machine.

<p>
<dt class=varlistentry><tt class=literal>Arg too short for msgsnd</tt><dd>

<p class=para>
(F) <a href="ch03_02.htm">msgsnd</A> requires a string at least as
long as <tt class=literal>sizeof(long)</tt>.

<p>
<dt class=varlistentry><tt class=literal>Ambiguous use of </tt><i class=emphasis>%s</I><tt class=literal> resolved as </tt><i class=emphasis>%s</I><dd>

<p class=para>
(W)(S) You said something that may not be interpreted the way
you thought.  Normally it's pretty easy to disambiguate it by supplying
a missing quote, operator, pair of parentheses, or declaration.

<p>
<dt class=varlistentry><tt class=literal>Args must match #! line</tt><dd>

<p class=para>
(F) The setuid emulator requires that the switches <i class=emphasis>perl</I> was invoked
with match the switches specified on the <tt class=literal>#!</tt> line.

<p>
<dt class=varlistentry><tt class=literal>Argument `</tt><i class=emphasis>%s</I><tt class=literal>` isn't numeric</tt><dd>

<p class=para>
(W) The indicated string was fed as an argument to an operator that
expected a numeric value instead.  If you're fortunate the message
will identify which operator was so unfortunate.

<p>
<dt class=varlistentry><tt class=literal>Array @</tt><i class=emphasis>%s</I><tt class=literal> missing the @ in argument </tt><i class=emphasis>%d</I><tt class=literal> of </tt><i class=emphasis>%s</I><tt class=literal>()</tt><dd>

<p class=para>
(D) Really old Perl let you omit the <tt class=literal>@</tt> on array names in some
spots.  This is now heavily deprecated.

<p>
<dt class=varlistentry><tt class=literal>assertion botched: </tt><i class=emphasis>%s</I><dd>

<p class=para>
(P) The <i class=emphasis>malloc</I> (3) package that comes with Perl had an internal failure.

<p>
<dt class=varlistentry><tt class=literal>Assertion failed: file `</tt><i class=emphasis>%s</I><tt class=literal>`</tt><dd>

<p class=para>
(P) A general assertion failed.  The file in question must be examined.

<p>
<dt class=varlistentry><tt class=literal>Assignment to both a list and a scalar</tt><dd>

<p class=para>
(F) If you assign to a conditional operator, the second and third arguments
must either both be scalars or both be lists.  Otherwise Perl won't
know which context to supply to the right side.

<p>
<dt class=varlistentry><tt class=literal>Attempt to free non-arena SV: </tt><i class=emphasis>%d</I><dd>

<p class=para>
(P) All SV objects are supposed to be allocated from arenas that will
be garbage collected upon exit.  An SV was discovered to be outside any
of those arenas.  This probably means that someone screwed up in a C
extension module.

<p>
<dt class=varlistentry><tt class=literal>Attempt to free temp prematurely</tt><dd>

<p class=para>
(W) Mortalized values are supposed to be freed by the internal
<tt class=literal>free_tmps()</tt> routine.  This indicates that something else is
freeing the SV before the <tt class=literal>free_tmps()</tt> routine gets a chance, which
means that the <tt class=literal>free_tmps()</tt> routine will be freeing an unreferenced
scalar when it does try to free it.

<p>
<dt class=varlistentry><tt class=literal>Attempt to free unreferenced glob pointers</tt><dd>

<p class=para>
(P) The reference counts got screwed up on symbol aliases.

<p>
<dt class=varlistentry><tt class=literal>Attempt to free unreferenced scalar</tt><dd>

<p class=para>
(W) Perl went to decrement the reference count of a scalar to see if it
would go to <tt class=literal>0</tt>, and discovered that it had already gone to
<tt class=literal>0</tt> earlier, and should have been freed, and in fact, probably was
freed.  This could indicate that <tt class=literal>SvREFCNT_dec()</tt>
was called too
many times, or that <tt class=literal>SvREFCNT_inc()</tt> was called too few times, or
that the SV was mortalized when it shouldn't have been, or that memory
has been corrupted.  In any event, it's likely a problem with the C
extension module you're developing.

<p>
<dt class=varlistentry><tt class=literal>Bad arg length for </tt><i class=emphasis>%s</I><tt class=literal>, is </tt><i class=emphasis>%d</I><tt class=literal>, should be </tt><i class=emphasis>%d</I><dd>

<p class=para>
(F) You passed a buffer of the wrong size to one of <a href="ch03_02.htm">msgctl</A>,
<a href="ch03_02.htm">semctl</A> or <a href="ch03_02.htm">shmctl</A>.  In C parlance, the correct sizes are
<tt class=literal>sizeof(struct msqid_ds *)</tt>, <tt class=literal>sizeof(struct semid_ds *)</tt> and
<tt class=literal>sizeof(struct shmid_ds *)</tt>, respectively.

<p>
<dt class=varlistentry><tt class=literal>Bad associative array</tt><dd>

<p class=para>
(P) One of the internal hash routines was passed a null HV pointer.

<p>
<dt class=varlistentry><tt class=literal>Bad filehandle: </tt><i class=emphasis>%s</I><dd>

<p class=para>
(F) A symbol was passed to something wanting a filehandle, but the symbol
has no filehandle associated with it.  Perhaps you didn't do an <a href="ch03_02.htm">open</A>, or
did it in another package.

<p>
<dt class=varlistentry><tt class=literal>Bad free() ignored</tt><dd>

<p class=para>
(S) An internal routine called <i class=emphasis>free</I> (3) on something that had never been
<i class=emphasis>malloc</I> (3)ed in the first place.

<p>
<dt class=varlistentry><tt class=literal>Bad name after </tt><i class=emphasis>%s</I><tt class=literal>::</tt><dd>

<p class=para>
(F) You started to name a symbol by using a package prefix, and then didn't
finish the symbol.  In particular, you can't interpolate outside of quotes,
so

<div class=programlisting>
<p>
<pre>
$var = 'myvar';
$sym = mypack::$var;
</PRE>
</DIV>

<p class=para>
is not the same as

<div class=programlisting>
<p>
<pre>
$var = 'myvar';
$sym = "mypack::$var";
</PRE>
</DIV>

<p class=para>
<p>
<dt class=varlistentry><tt class=literal>Bad symbol for array</tt><dd>

<p class=para>
(P) An internal request asked to add an array entry to something that
wasn't a symbol table entry.

<p>
<dt class=varlistentry><tt class=literal>Bad symbol for filehandle</tt><dd>

<p class=para>
(P) An internal request asked to add a filehandle entry to something that
wasn't a symbol table entry.

<p>
<dt class=varlistentry><tt class=literal>Bad symbol for hash</tt><dd>

<p class=para>
(P) An internal request asked to add a hash entry to something that
wasn't a symbol table entry.

<p>
<dt class=varlistentry><tt class=literal>Badly placed ()'s</tt><dd>

<p class=para>
(A) You've accidentally run your script through <i class=emphasis>csh</I> instead
of <i class=emphasis>perl</I>.  Check the <tt class=literal>#!</tt> line, or manually
feed your script into <i class=emphasis>perl</I> yourself.

<p>
<dt class=varlistentry><tt class=literal>BEGIN failed- -compilation aborted</tt><dd>

<p class=para>
(F) An untrapped exception was raised while executing a BEGIN subroutine.
Compilation stops immediately and the interpreter is exited.

<p>
<dt class=varlistentry><tt class=literal>bind() on closed fd</tt><dd>

<p class=para>
(W) You tried to do a <a href="ch03_02.htm">bind</A> on a closed socket.  Did you forget to check
the return value of your <a href="ch03_02.htm">socket</A> call?  See <a href="ch03_02.htm">bind</A>.

<p>
<dt class=varlistentry><tt class=literal>Bizarre copy of </tt><i class=emphasis>%s</I><tt class=literal> in </tt><i class=emphasis>%s</I><dd>

<p class=para>
(P) Perl detected an attempt to copy an internal value that is not copiable.

<p>
<dt class=varlistentry><tt class=literal>Callback called exit</tt><dd>

<p class=para>
(F) A subroutine invoked from an external package via <tt class=literal>perl_call_sv()</tt>
exited by calling <a href="ch03_02.htm">exit</A>.

<p>
<dt class=varlistentry><tt class=literal>Can't `last` outside a block</tt><dd>

<p class=para>
(F) A <a href="ch03_02.htm">last</A> statement was executed to break out of the current block,
except that there's this itty bitty problem called there isn't a
current block.  See note on the next entry.

<p>
<dt class=varlistentry><tt class=literal>Can't `next` outside a block</tt><dd>

<p class=para>
(F) A <a href="ch03_02.htm">next</A> statement was executed to
reiterate the current block, but 
there isn't a current block.  Note that an <b>if</B> or
<b>else</B> block doesn't 
count as a "loopish" block.  You can usually double the curly brackets to get
the same effect though, since the inner brackets will be considered a block
that loops once.  See <a href="ch03_02.htm">last</A>.

<p>
<dt class=varlistentry><tt class=literal>Can't `redo` outside a block</tt><dd>

<p class=para>
(F) A <a href="ch03_02.htm">redo</A> statement was executed to restart the current block, but
there isn't a current block.  See note on the previous entry.

<p>
<dt class=varlistentry><tt class=literal>Can't bless non-reference value</tt><dd>

<p class=para>
(F) Only hard references may be blessed.  This is how Perl "enforces"
encapsulation of objects.

<p>
<dt class=varlistentry><tt class=literal>Can't break at that line</tt><dd>

<p class=para>
(S) A debugger warning indicating
the line number specified wasn't the location of a statement that could
be stopped at.

<p>
<dt class=varlistentry><tt class=literal>Can't call method `</tt><i class=emphasis>%s</I><tt class=literal>` in empty package `</tt><i class=emphasis>%s</I><tt class=literal>`</tt><dd>

<p class=para>
(F) You called a method correctly, and it correctly indicated a package
functioning as a class, but that package doesn't have anything at all
defined in it, let alone methods.

<p>
<dt class=varlistentry><tt class=literal>Can't call method `</tt><i class=emphasis>%s</I><tt class=literal>` on unblessed reference</tt><dd>

<p class=para>
(F) A method call must know what package it's supposed to run in.  It
ordinarily finds this out from the object reference you supply, but
you didn't supply an object reference in this case.  A reference isn't
an object reference until it has been blessed.

<p>
<dt class=varlistentry><tt class=literal>Can't call method `</tt><i class=emphasis>%s</I><tt class=literal>` without a package or object reference</tt><dd>

<p class=para>
(F) You used the syntax of a method call, but the slot filled by the
object reference or package name contains an expression that returns
neither an object reference nor a package name.  (Perhaps it's null?)
Something like this will reproduce the error:

<div class=programlisting>
<p>
<pre>
$BADREF = undef;
process $BADREF 1,2,3;
$BADREF-&gt;process(1,2,3);
</PRE>
</DIV>

<p class=para>
<p>
<dt class=varlistentry><tt class=literal>Can't chdir to </tt><i class=emphasis>%s</I><dd>

<p class=para>
(F) You called <tt class=literal>perl -x/foo/bar</tt>, but
<i class=emphasis>/foo/bar</I> is not a directory that you can
<i class=emphasis>chdir</I>&nbsp;(2) to, possibly because it doesn't exist.

<p>
<dt class=varlistentry><tt class=literal>Can't coerce </tt><i class=emphasis>%s</I><tt class=literal> to integer in </tt><i class=emphasis>%s</I><dd>

<p class=para>
(F) Certain types of SVs, in particular real symbol table entries
(type GLOB), can't be forced to stop being what they are.  So you can't
say things like:

<div class=programlisting>
<p>
<pre>
*foo += 1;     # ERROR
</PRE>
</DIV>

<p class=para>
You <i class=emphasis>can</I> say

<div class=programlisting>
<p>
<pre>
$foo = *foo;   # make a "fake" glob value
$foo += 1;
</PRE>
</DIV>

<p class=para>
but then <tt class=literal>$foo</tt> no longer contains a glob.

<p>
<dt class=varlistentry><tt class=literal>Can't coerce </tt><i class=emphasis>%s</I><tt class=literal> to number in </tt><i class=emphasis>%s</I><dd>

<p class=para>
(F) Certain types of SVs, in particular real symbol table entries
(type GLOB), can't be forced to stop being what they are.  See preceding entry.

<p>
<dt class=varlistentry><tt class=literal>Can't coerce </tt><i class=emphasis>%s</I><tt class=literal> to string in </tt><i class=emphasis>%s</I><dd>

<p class=para>
(F) Certain types of SVs, in particular real symbol table entries
(type GLOB), can't be forced to stop being what they are.  See
previous two entries.

<p>
<dt class=varlistentry><tt class=literal>Can't create pipe mailbox</tt><dd>

<p class=para>
(P) An error peculiar to VMS.  The process is suffering from exhausted quotas
or other plumbing problems.

<p>
<dt class=varlistentry><tt class=literal>Can't declare </tt><i class=emphasis>%s</I><tt class=literal> in my</tt><dd>

<p class=para>
(F) Only scalar, array and hash variables may be declared as lexical variables.
They must have ordinary identifiers as names, since lexical variables don't
live in a symbol table, and can't be package qualified.

<p>
<dt class=varlistentry><tt class=literal>Can't do inplace edit on </tt><i class=emphasis>%s</I><tt class=literal>: </tt><i class=emphasis>%s</I><dd>

<p class=para>
(S) The creation of the new file failed for the indicated reason.

<p>
<dt class=varlistentry><tt class=literal>Can't do inplace edit without backup</tt><dd>

<p class=para>
(F) You're on a system such as MS-DOS that gets confused if you try
reading from a deleted (but still opened) file.  You have to use the switch,
<tt class=literal>-i.bak</tt>, or some such.

<p>
<dt class=varlistentry><tt class=literal>Can't do inplace edit: </tt><i class=emphasis>%s</I><tt class=literal> &gt; 14 characters</tt><dd>

<p class=para>
(S) There isn't enough room in the filename to make a backup name for the file.
Perhaps you should get a system with longer filenames.  <tt class=literal>:-)</tt>

<p>
<dt class=varlistentry><tt class=literal>Can't do inplace edit: </tt><i class=emphasis>%s</I><tt class=literal> is not a regular file</tt><dd>

<p class=para>
(S) You tried to use the <b>-i</B> switch on a special file, such as a file in
<i class=emphasis>/dev</I>, or a FIFO.  The file was ignored.

<p>
<dt class=varlistentry><tt class=literal>Can't do setegid!</tt><dd>

<p class=para>
(P) The <tt class=literal>setegid()</tt> call failed for some reason in the setuid emulator
of <i class=emphasis>suidperl</I>.

<p>
<dt class=varlistentry><tt class=literal>Can't do seteuid!</tt><dd>

<p class=para>
(P) The setuid emulator of <i class=emphasis>suidperl</I> failed for some reason.

<p>
<dt class=varlistentry><tt class=literal>Can't do setuid</tt><dd>

<p class=para>
(F) This typically means that ordinary <i class=emphasis>perl</I> tried to exec
<i class=emphasis>suidperl</I> to do setuid emulation, but couldn't exec it.
If you're running <i class=emphasis>/usr/local/bin/perl5.003</I>, it looks for a
corresponding <i class=emphasis>/usr/local/bin/sperl5.003</I>.  (Note the "s".)
If the file is there, check the execute permissions.  If it isn't, ask
your sysadmin why he and/or she removed it.

<p>
<dt class=varlistentry><tt class=literal>Can't do waitpid with flags</tt><dd>

<p class=para>
(F) This machine doesn't have either <i class=emphasis>waitpid</I> (2) or <i class=emphasis>wait4</I> (2),
so only <a href="ch03_02.htm">waitpid</A> without flags is emulated.

<p>
<dt class=varlistentry><tt class=literal>Can't do {n,m} with n &gt; m</tt><dd>

<p class=para>
(F) Minima must be less than or equal to maxima.  If you really want
your regular expression to match something <tt class=literal>0</tt> times, just put
<tt class=literal>{0}</tt>.

<p>
<dt class=varlistentry><tt class=literal>Can't emulate -</tt><i class=emphasis>%s</I><tt class=literal> on #! line</tt><dd>

<p class=para>
(F) The <tt class=literal>#!</tt> line specifies a switch that doesn't make sense at this point.
For example, it'd be kind of silly to put a <b>-x</B> on the <tt class=literal>#!</tt> line.

<p>
<dt class=varlistentry><tt class=literal>Can't exec `</tt><i class=emphasis>%s</I><tt class=literal>`: </tt><i class=emphasis>%s</I><dd>

<p class=para>
(W) A <a href="ch03_02.htm">system</A>, <a href="ch03_02.htm">exec</A> or piped <a href="ch03_02.htm">open</A> call could not execute the named
program for the indicated reason.  Typical reasons include: the permissions
were wrong on the file, the file wasn't found in <tt class=literal>$ENV{PATH}</tt>, the
executable in question was compiled for another architecture, or the
<tt class=literal>#!</tt> line in a script points to an interpreter that can't be run for
similar reasons.  (Or maybe your system doesn't support <tt class=literal>#!</tt> at all.)

<p>
<dt class=varlistentry><tt class=literal>Can't exec </tt><i class=emphasis>%s</I><dd>

<p class=para>
(F) Perl was trying to execute the indicated program for you because that's
what the <tt class=literal>#!</tt> line said.  If that's not what you wanted, you may need to
mention "<tt class=literal>perl</tt>" on the <tt class=literal>#!</tt> line somewhere.

<p>
<dt class=varlistentry><tt class=literal>Can't execute </tt><i class=emphasis>%s</I><dd>

<p class=para>
(F) You used the <b>-S</B> switch, but the script to execute could not be found
in the PATH, or at least not with the correct permissions.

<p>
<dt class=varlistentry><tt class=literal>Can't find label </tt><i class=emphasis>%s</I><dd>

<p class=para>
(F) You said to <a href="ch03_02.htm">goto</A> a label that isn't mentioned anywhere that it's
possible for us to go to.  See <a href="ch03_02.htm">goto</A>.

<p>
<dt class=varlistentry><tt class=literal>Can't find string terminator </tt><i class=emphasis>%s</I><tt class=literal> anywhere before EOF</tt><dd>

<p class=para>
(F) Perl strings can stretch over multiple lines.  This message means that
the closing delimiter was omitted.  Since bracketed quotes count nesting
levels, the following is missing its final parenthesis:

<div class=programlisting>
<p>
<pre>
print q(The character '(' starts a s(n)ide comment.)
</PRE>
</DIV>

<p class=para>
<p>
<dt class=varlistentry><tt class=literal>Can't fork</tt><dd>

<p class=para>
(F) A fatal error occurred while trying to fork while opening a pipeline.

<dt class=varlistentry><tt class=literal>Can't get filespec - stale stat buffer?</tt><dd>

<p class=para>
(S) A warning peculiar to VMS.  This arises because of the difference between
access checks under VMS and under the UNIX model Perl assumes.  Under VMS,
access checks are done by filename, rather than by bits in the stat buffer, so
that ACLs and other protections can be taken into account.  Unfortunately, Perl
assumes that the stat buffer contains all the necessary information, and passes
it, instead of the filespec, to the access-checking routine.  It will try to
retrieve the filespec using the device name and FID present in the stat buffer,
but this works only if you haven't made a subsequent call to the CRTL
<tt class=literal>stat</tt>
routine, since the device name is overwritten with each call.  If this warning
appears, the name lookup failed, and the access-checking routine gave up and
returned FALSE, just to be conservative.  (Note: The access-checking routine
knows about the Perl <a href="ch03_02.htm">stat</A> operator and file tests, so you shouldn't ever
see this warning in response to a Perl command; it arises only if some internal
code takes stat buffers lightly.)

<p>
<dt class=varlistentry><tt class=literal>Can't get pipe mailbox device name</tt><dd>

<p class=para>
(P) An error peculiar to VMS.  After creating a mailbox to act as a pipe, Perl
can't retrieve its name for later use.

<p>
<dt class=varlistentry><tt class=literal>Can't get SYSGEN parameter value for MAXBUF</tt><dd>

<p class=para>
(P) An error peculiar to VMS.  Perl asked <tt class=literal>$GETSYI</tt> how big you want your
mailbox buffers to be, and didn't get an answer.

<p>
<dt class=varlistentry><tt class=literal>Can't goto subroutine outside a subroutine</tt><dd>

<p class=para>
(F) The deeply magical <tt class=literal>goto</tt>
<tt class=replaceable><i>SUBROUTINE</i></tt> call can only replace one subroutine
call for another.  It can't manufacture one out of whole cloth.  In general
you should only be calling it out of an <tt class=literal>AUTOLOAD</tt> routine anyway.  See
<a href="ch03_02.htm">goto</A>.

<p>
<dt class=varlistentry><tt class=literal>Can't localize a reference</tt><dd>

<p class=para>
(F) You said something like <tt class=literal>local $$ref</tt>, which is not allowed
because the compiler can't determine whether <tt class=literal>$ref</tt> will end up
pointing to anything with a symbol table entry, and a symbol table entry
is necessary to do a <a href="ch03_02.htm">local</A>.

<p>
<dt class=varlistentry><tt class=literal>Can't localize lexical variable </tt><i class=emphasis>%s</I><dd>

<p class=para>
(F) You used <a href="ch03_02.htm">local</A> on a variable name that was previous declared as a
lexical variable using <a href="ch03_02.htm">my</A>.  This is not allowed.  If you want to
localize a package variable of the same name, qualify it with the
package name.

<dt class=varlistentry><tt class=literal>Can't locate </tt><i class=emphasis>%s</I><tt class=literal> in @INC</tt><dd>

<p class=para>
(F) You said to <a href="ch03_02.htm">use</A> (or <a href="ch03_02.htm">require</A>, or <a href="ch03_02.htm">do</A>) a file that
couldn't be found in any of the libraries mentioned in <tt class=literal>@INC</tt>.
Perhaps you need to set the <tt class=literal>PERL5LIB</tt> environment variable to say where
the extra library is, or maybe the script needs to add the library name
to <tt class=literal>@INC</tt> with the <tt class=literal>use lib</tt> directive.  Or maybe you just
misspelled the name of the file.  See <a href="ch03_02.htm">require</A>.

<p>
<dt class=varlistentry><tt class=literal>Can't locate object method `</tt><i class=emphasis>%s</I><tt class=literal>` via package `</tt><i class=emphasis>%s</I><tt class=literal>`</tt><dd>

<p class=para>
(F) You called a method correctly, and it correctly indicated a package
functioning as a class, but the package doesn't define that
method name, nor do any of its base classes (which is why the message
says "via" rather than "in").

<p>
<dt class=varlistentry><tt class=literal>Can't locate package </tt><i class=emphasis>%s</I><tt class=literal> for @</tt><i class=emphasis>%s</I><tt class=literal>::ISA</tt><dd>

<p class=para>
(W) The <tt class=literal>@ISA</tt> array contained the name of another package that
doesn't seem to exist.

<p>
<dt class=varlistentry><tt class=literal>Can't mktemp()</tt><dd>

<p class=para>
(F) The <tt class=literal>mktemp</tt> routine failed for some reason while trying to process
a <b>-e</B> switch.  Maybe your <i class=emphasis>/tmp</I> partition is full, or clobbered.

<p>
<dt class=varlistentry><tt class=literal>Can't modify </tt><i class=emphasis>%s</I><tt class=literal> in </tt><i class=emphasis>%s</I><dd>

<p class=para>
(F) You aren't allowed to assign to the item indicated, or otherwise try to
change it, such as with an autoincrement.

<p>
<dt class=varlistentry><tt class=literal>Can't modify non-existent substring</tt><dd>

<p class=para>
(P) The internal routine that does assignment to a <a href="ch03_02.htm">substr</A> was handed
a NULL pointer.

<p>
<dt class=varlistentry><tt class=literal>Can't msgrcv to readonly var</tt><dd>

<p class=para>
(F) The target of a <a href="ch03_02.htm">msgrcv</A> must be modifiable in order to be used as
a receive buffer.

<p>
<dt class=varlistentry><tt class=literal>Can't open </tt><i class=emphasis>%s</I><tt class=literal>: </tt><i class=emphasis>%s</I><dd>

<p class=para>
(S) An inplace edit couldn't open the original file for the indicated reason.
Usually this is because you don't have read permission for the file.

<p>
<dt class=varlistentry><tt class=literal>Can't open bidirectional pipe</tt><dd>

<p class=para>
(W) You tried to say <tt class=literal>open(CMD, `|cmd|`)</tt>, which is
not supported.
You can try any of several modules in the Perl library to do this, such
as Open2.  Alternately, direct the pipe's output to a file using
"<tt class=literal>&gt;</tt>", and then read it in under a different filehandle.

<p>
<dt class=varlistentry><tt class=literal>Can't open error file </tt><i class=emphasis>%s</I><tt class=literal> as stderr</tt><dd>

<p class=para>
(F) An error peculiar to VMS.  Perl does its own command-line redirection, and
couldn't open for writing the file specified after <tt class=literal>2&gt;</tt> or
<tt class=literal>2&gt;&gt;</tt> on the command line.

<p>
<dt class=varlistentry><tt class=literal>Can't open input file </tt><i class=emphasis>%s</I><tt class=literal> as stdin</tt><dd>

<p class=para>
(F) An error peculiar to VMS.  Perl does its own command-line redirection, and
couldn't open for reading the file specified after <tt class=literal>&lt;</tt> on
the command line.

<p>
<dt class=varlistentry><tt class=literal>Can't open output file </tt><i class=emphasis>%s</I><tt class=literal> as stdout</tt><dd>

<p class=para>
(F) An error peculiar to VMS.  Perl does its own command-line
redirection, and couldn't open for writing the file specified after
<tt class=literal>&gt;</tt> or 
<tt class=literal>&gt;&gt;</tt> on the command line.

<p>
<dt class=varlistentry><tt class=literal>Can't open output pipe (name: </tt><i class=emphasis>%s</I><tt class=literal>)</tt><dd>

<p class=para>
(P) An error peculiar to VMS.  Perl does its own command-line redirection, and
couldn't open the pipe into which to send data destined for <tt class=literal>STDOUT</tt>.

<p>
<dt class=varlistentry><tt class=literal>Can't open perl script `</tt><i class=emphasis>%s</I><tt class=literal>`: </tt><i class=emphasis>%s</I><dd>

<p class=para>
(F) The script you specified can't be opened for the indicated reason.

<p>
<dt class=varlistentry><tt class=literal>Can't rename </tt><i class=emphasis>%s</I><tt class=literal> to </tt><i class=emphasis>%s</I><tt class=literal>: </tt><i class=emphasis>%s</I><tt class=literal>, skipping file</tt><dd>

<p class=para>
(S) The rename done by the <b>-i</B> switch failed
for some reason, probably because you don't have write permission to the
directory.

<p>
<dt class=varlistentry><tt class=literal>Can't reopen input pipe (name: </tt><i class=emphasis>%s</I><tt class=literal>) in binary mode</tt><dd>

<p class=para>
(P) An error peculiar to VMS.  Perl thought <tt class=literal>STDIN</tt>
was a pipe, and tried to
reopen it to accept binary data.  Alas, it failed.

<p>
<dt class=varlistentry><tt class=literal>Can't reswap uid and euid</tt><dd>

<p class=para>
(P) The <b>setreuid</B> call failed for some reason in the setuid emulator
of <i class=emphasis>suidperl</I>.

<p>
<dt class=varlistentry><tt class=literal>Can't return outside a subroutine</tt><dd>

<p class=para>
(F) The <a href="ch03_02.htm">return</A> statement was executed in mainline code, that is, where
there was no subroutine call to return out of.

<p>
<dt class=varlistentry><tt class=literal>Can't stat script `</tt><i class=emphasis>%s</I><tt class=literal>`</tt><dd>

<p class=para>
(P) For some reason you can't <i class=emphasis>fstat</I> (2) the script even though you have
it open already.  Bizarre.

<p>
<dt class=varlistentry><tt class=literal>Can't swap uid and euid</tt><dd>

<p class=para>
(P) The <b>setreuid</B> call failed for some reason in the setuid emulator
of <i class=emphasis>suidperl</I>.

<p>
<dt class=varlistentry><tt class=literal>Can't take log of </tt><i class=emphasis>%d</I><dd>

<p class=para>
(F) Logarithms are only defined on positive real numbers.

<p>
<dt class=varlistentry><tt class=literal>Can't take sqrt of </tt><i class=emphasis>%d</I><dd>

<p class=para>
(F) For ordinary real numbers, you can't take the square root of a
negative number.  There's a Complex module available for Perl, though,
if you really want to do that.

<p>
<dt class=varlistentry><tt class=literal>Can't undef active subroutine</tt><dd>

<p class=para>
(F) You can't undefine a routine that's currently running.  You can,
however, redefine it while it's running, and you can even <a href="ch03_02.htm">undef</A> the
redefined subroutine while the old routine is running.  Go figure.

<p>
<dt class=varlistentry><tt class=literal>Can't unshift</tt><dd>

<p class=para>
(F) You tried to <a href="ch03_02.htm">unshift</A> an "unreal" array that can't be
unshifted, such as the main Perl stack.

<p>
<dt class=varlistentry><tt class=literal>Can't upgrade that kind of scalar</tt><dd>

<p class=para>
(P) The internal <tt class=literal>sv_upgrade</tt>( ) routine adds "members" to an SV, making
it into a more specialized kind of SV.  The top several SV types are
so specialized, however, that they cannot be interconverted.  This
message indicates that such a conversion was attempted.

<p>
<dt class=varlistentry><tt class=literal>Can't upgrade to undef</tt><dd>

<p class=para>
(P) The undefined SV is the bottom of the totem pole, in the scheme
of upgradability.  Upgrading to undef indicates an error in the
code calling <tt class=literal>sv_upgrade()</tt>.

<p>
<dt class=varlistentry><tt class=literal>Can't use `my </tt><i class=emphasis>%s</I><tt class=literal>` in sort comparison</tt><dd>

<p class=para>
(F) The global variables <b>$a</B> and <b>$b</B> are reserved for sort
comparisons.  You mentioned <b>$a</B> or <b>$b</B> in the same line as the
<tt class=literal>&lt;=&gt;</tt> or <b>cmp</B> operator,
and the variable had earlier been declared as a lexical variable.
Either qualify the sort variable with the package name, or rename the
lexical variable.

<p>
<dt class=varlistentry><tt class=literal>Can't use </tt><i class=emphasis>%s</I><tt class=literal> for loop variable</tt><dd>

<p class=para>
(F) Only a simple scalar variable may be used as a loop variable on a
<b>foreach</B>.

<p>
<dt class=varlistentry><tt class=literal>Can't use </tt><i class=emphasis>%s</I><tt class=literal> ref as </tt><i class=emphasis>%s</I><tt class=literal> ref</tt><dd>

<p class=para>
(F) You've mixed up your reference types.  You have to dereference a
reference of the type needed.  You can use the <a href="ch03_02.htm">ref</A> function to
test the type of the reference, if need be.

<p>
<dt class=varlistentry><tt class=literal>Can't use \1 to mean $1 in expression</tt><dd>

<p class=para>
(W) In an ordinary expression, backslash is a unary operator that creates
a reference to its argument.  The use of backslash to indicate a backreference
to a matched substring is only valid as part of a regular expression pattern.
Trying to do this in ordinary Perl code produces a value that prints
out looking like <tt class=literal>SCALAR(0xdecaf)</tt>.  Use the <b>$1</B> form instead.

<p>
<dt class=varlistentry><tt class=literal>Can't use string (`</tt><i class=emphasis>%s</I><tt class=literal>`) as </tt><i class=emphasis>%s</I><tt class=literal> ref while `strict refs` in use</tt><dd>

<p class=para>
(F) Only hard references are allowed by <tt class=literal>use strict refs</tt>.
Symbolic references are disallowed.

<p>
<dt class=varlistentry><tt class=literal>Can't use an undefined value as </tt><i class=emphasis>%s</I><tt class=literal> reference</tt><dd>

<p class=para>
(F) A value used as either a hard reference or a symbolic reference must
be a defined value.  This helps to de-lurk some insidious errors.

<p>
<dt class=varlistentry><tt class=literal>Can't use global </tt><i class=emphasis>%s</I><tt class=literal> in `my`</tt><dd>

<p class=para>
(F) You tried to declare a magical variable as a lexical variable.  This is
not allowed, because the magic can only be tied to one location (namely
the global variable) and it would be incredibly confusing to have
variables in your program that looked like magical variables but
weren't.

<p>
<dt class=varlistentry><tt class=literal>Can't use subscript on </tt><i class=emphasis>%s</I><dd>

<p class=para>
(F) The compiler tried to interpret a bracketed expression as a
subscript, but to the left of the brackets was an expression that
didn't look like an array reference, or anything else subscriptable.

<p>
<dt class=varlistentry><tt class=literal>Can't write to temp file for -e: </tt><i class=emphasis>%s</I><dd>

<p class=para>
(F) The <i class=emphasis>write</I> (2) routine failed for some reason while trying to process
a <b>-e</B> switch.  Maybe your <i class=emphasis>/tmp</I> partition is full, or clobbered.

<p>
<dt class=varlistentry><tt class=literal>Can't x= to readonly value</tt><dd>

<p class=para>
(F) You tried to repeat a constant value (perhaps the undefined value) with
an assignment operator, which implies modifying the value itself.
Perhaps you need to copy the value to a temporary, and repeat that.

<p>
<dt class=varlistentry><tt class=literal>Cannot open temporary file</tt><dd>

<p class=para>
(F) The <i class=emphasis>creat</I> (2) routine failed for some reason
while trying to process a <b>-e</B> switch.  Maybe
your <i class=emphasis>/tmp</I> partition is full, or clobbered.

<p>
<dt class=varlistentry><tt class=literal>chmod: mode argument is missing initial 0</tt><dd>

<p class=para>
(W) A novice will sometimes say

<div class=programlisting>
<p>
<pre>
chmod 777, $filename
</PRE>
</DIV>

<p class=para>
not realizing that <tt class=literal>777</tt> will be interpreted as a decimal number,
equivalent to <tt class=literal>01411</tt>.  Octal constants are introduced with a
leading <tt class=literal>0</tt> in Perl, as in C.

<p>
<dt class=varlistentry><tt class=literal>Close on unopened file</tt> <i class=emphasis>%s</I><dd>

<p class=para>
(W) You tried to <a href="ch03_02.htm">close</A> a filehandle that was never opened.

<p>
<dt class=varlistentry><tt class=literal>connect() on closed fd</tt><dd>

<p class=para>
(W) You tried to do a <a href="ch03_02.htm">connect</A> on a closed socket.  Did you forget
to check the return value of your <a href="ch03_02.htm">socket</A> call?  See <a href="ch03_02.htm">connect</A>.

<p>
<dt class=varlistentry><tt class=literal>Corrupt malloc ptr </tt><i class=emphasis>%d</I><tt class=literal> at </tt><i class=emphasis>%d</I><dd>

<p class=para>
(P) The <i class=emphasis>malloc</I> (3) package that comes with Perl had an internal failure.

<p>
<dt class=varlistentry><tt class=literal>corrupted regexp pointers</tt><dd>

<p class=para>
(P) The regular expression engine got confused by what the regular
expression compiler gave it.

<p>
<dt class=varlistentry><tt class=literal>corrupted regexp program</tt><dd>

<p class=para>
(P) The regular expression engine got passed a regular expression program
without a valid magic number.

<dt class=varlistentry><tt class=literal>Deep recursion on subroutine `</tt><i class=emphasis>%s</I><tt class=literal>`</tt><dd>

<p class=para>
(W) This subroutine has called itself (directly or indirectly) 100
more times than it has returned.  This probably indicates an infinite
recursion, unless you're writing strange benchmark programs, in which
case it indicates something else.

<p>
<dt class=varlistentry><tt class=literal>Did you mean &amp;</tt><i class=emphasis>%s</I><tt class=literal> instead?</tt><dd>

<p class=para>
(W) You probably referred to an imported subroutine <tt class=literal>&amp;FOO</tt> as
<tt class=literal>$FOO</tt> or some such.

<p>
<dt class=varlistentry><tt class=literal>Did you mean $ or @ instead of %?</tt><dd>

<p class=para>
(W) You probably said <tt class=literal>%hash{$key}</tt> when you meant <tt class=literal>$hash{$key}</tt>
or <tt class=literal>@hash{@keys}</tt>.
On the other hand, maybe you just meant <tt class=literal>%hash</tt> and got carried away.

<p>
<dt class=varlistentry><tt class=literal>Do you need to predeclare </tt><i class=emphasis>%s</I><tt class=literal>?</tt><dd>

<p class=para>
(S) This is an educated guess made in conjunction with the message "<i class=emphasis>%s</I>
<tt class=literal>found where operator expected</tt>".  It often means a subroutine or module
name is being referenced that hasn't been declared yet.  This may be
because of ordering problems in your file, or because of a missing
<a href="ch03_02.htm">sub</A>, <a href="ch03_02.htm">package</A>, <a href="ch03_02.htm">require</A>, or <a href="ch03_02.htm">use</A> statement.  If you're
referencing something that isn't defined yet, you don't actually have
to define the subroutine or package before the current location.  You
can use an empty <tt class=literal>sub foo;</tt> or <tt class=literal>package FOO;</tt> to enter
a "forward" declaration.

<p>
<dt class=varlistentry><tt class=literal>Don't know how to handle magic of type '</tt><i class=emphasis>%s</I><tt class=literal>'</tt><dd>

<p class=para>
(P) The internal handling of magical variables has been cursed.

<p>
<dt class=varlistentry><tt class=literal>do_study: out of memory</tt><dd>

<p class=para>
(P) This should have been caught by <tt class=literal>safemalloc()</tt> instead.

<p>
<dt class=varlistentry><tt class=literal>Duplicate free() ignored</tt><dd>

<p class=para>
(S) An internal routine has called <tt class=literal>free()</tt> on something that had already
been freed.

<p>
<dt class=varlistentry><tt class=literal>elseif should be elsif</tt><dd>

<p class=para>
(S) There is no keyword <b>elseif</B> in Perl because Larry thinks it's
ugly.  Your code will be interpreted as an attempt to call a method
named <tt class=literal>elseif()</tt> for the class returned by the following block.
This is unlikely to do what you want.

<p>
<dt class=varlistentry><tt class=literal>END failed- -cleanup aborted</tt><dd>

<p class=para>
(F) An untrapped exception was raised while executing an <tt class=literal>END</tt> subroutine.
The interpreter is immediately exited.

<p>
<dt class=varlistentry><tt class=literal>Error converting file specification </tt><i class=emphasis>%s</I><dd>

<p class=para>
(F) An error peculiar to VMS.  Since Perl may have to deal with file
specifications in either VMS or UNIX syntax, it converts them to a
single form when it must operate on them directly.  Either you've
passed an invalid file specification to Perl, or you've found a
case the conversion routines don't handle.  Drat.

<dt class=varlistentry><tt class=literal>Execution of </tt><i class=emphasis>%s</I><tt class=literal> aborted due to compilation errors.</tt><dd>

<p class=para>
(F) The final summary message when a Perl compilation fails.

<p>
<dt class=varlistentry><tt class=literal>Exiting eval via </tt><i class=emphasis>%s</I><dd>

<p class=para>
(W) You are exiting an <a href="ch03_02.htm">eval</A> by unconventional means, such as
a <a href="ch03_02.htm">goto</A>, or a loop control statement.

<p>
<dt class=varlistentry><tt class=literal>Exiting subroutine via </tt><i class=emphasis>%s</I><dd>

<p class=para>
(W) You are exiting a subroutine by unconventional means, such as
a <a href="ch03_02.htm">goto</A>, or a loop control statement.

<p>
<dt class=varlistentry><tt class=literal>Exiting substitution via </tt><i class=emphasis>%s</I><dd>

<p class=para>
(W) You are exiting a substitution by unconventional means, such as
a <a href="ch03_02.htm">return</A>, a <a href="ch03_02.htm">goto</A>, or a loop control statement.

<p>
<dt class=varlistentry><tt class=literal>Fatal VMS error at </tt><i class=emphasis>%s</I><tt class=literal>, line </tt><i class=emphasis>%d</I><dd>

<p class=para>
(P) An error peculiar to VMS.  Something untoward happened in a VMS
system service or RTL routine; Perl's exit status should provide more
details.  The filename in <i class=emphasis>%s</I> and the line number in
<i class=emphasis>%d</I> tell you which section of the Perl source code is
distressed.

<p>
<dt class=varlistentry><tt class=literal>fcntl is not implemented</tt><dd>

<p class=para>
(F) Your machine apparently doesn't implement <i class=emphasis>fcntl</I> (2).  What is this, a
PDP-11 or something?

<p>
<dt class=varlistentry><tt class=literal>Filehandle </tt><i class=emphasis>%s</I><tt class=literal> never opened</tt><dd>

<p class=para>
(W) An I/O operation was attempted on a filehandle that was never initialized.
You need to do an <a href="ch03_02.htm">open</A> or a <a href="ch03_02.htm">socket</A> call, or call a constructor from
the FileHandle package.

<p>
<dt class=varlistentry><tt class=literal>Filehandle </tt><i class=emphasis>%s</I><tt class=literal> opened only for input</tt><dd>

<p class=para>
(W) You tried to write on a read-only filehandle.  If you intended it to
be a read-write filehandle, you needed to open it with <tt class=literal>+&lt;</tt> or
<tt class=literal>+&gt;</tt> or <tt class=literal>+&gt;&gt;</tt> instead of with <tt class=literal>&lt;</tt> or nothing.  If you
only intended to write the file, use <tt class=literal>&gt;</tt> or <tt class=literal>&gt;&gt;</tt>.  See
<a href="ch03_02.htm">open</A>.

<p>
<dt class=varlistentry><tt class=literal>Filehandle only opened for input</tt><dd>

<p class=para>
(W) You tried to write on a read-only filehandle.  If you intended it to
be a read-write filehandle, you needed to open it with <tt class=literal>+&lt;</tt> or
<tt class=literal>+&gt;</tt> or <tt class=literal>+&gt;&gt;</tt> instead of with <tt class=literal>&lt;</tt> or nothing.  If you
only intended to write the file, use <tt class=literal>&gt;</tt> or <tt class=literal>&gt;&gt;</tt>.  See
<a href="ch03_02.htm">open</A>.

<p>
<dt class=varlistentry><tt class=literal>Final $ should be \$ or $name</tt><dd>

<p class=para>
(F) You must now decide whether the final <tt class=literal>$</tt> in a string was meant to be
a literal dollar sign, or was meant to introduce a variable name
that happens to be missing.  So you have to add either the backslash or
the name.

<p>
<dt class=varlistentry><tt class=literal>Final @ should be \@ or @name</tt><dd>

<p class=para>
(F) You must now decide whether the final <tt class=literal>@</tt> in a string was
meant to be a literal "at" sign, or was meant to introduce a variable
name that happens to be missing.  So you have to add either the
backslash or the name.

<p>
<dt class=varlistentry><tt class=literal>Format </tt><i class=emphasis>%s</I><tt class=literal> redefined</tt><dd>

<p class=para>
(W) You redefined a format.  To suppress this warning, say

<div class=programlisting>
<p>
<pre>
{
    local $^W = 0;
    eval "format <tt class=replaceable><i>NAME</i></tt> =...";
}
</PRE>
</DIV>

<p class=para>
<p>
<dt class=varlistentry><tt class=literal>Format not terminated</tt><dd>

<p class=para>
(F) A format must be terminated by a line with a solitary dot.  Perl got
to the end of your file without finding such a line.  If you think you
have such a line, make sure there are no spaces or tabs on either side
of the dot.

<p>
<dt class=varlistentry><tt class=literal>Found = in conditional, should be ==</tt><dd>

<p class=para>
(W) You said

<div class=programlisting>
<p>
<pre>
if ($foo = 123)
</PRE>
</DIV>

<p class=para>
when you meant

<div class=programlisting>
<p>
<pre>
if ($foo == 123)
</PRE>
</DIV>

<p class=para>
(or something like that).

<p>
<dt class=varlistentry><tt class=literal>gdbm store returned </tt><i class=emphasis>%d</I><tt class=literal>, errno </tt><i class=emphasis>%d</I><tt class=literal>, key `</tt><i class=emphasis>%s</I><tt class=literal>`</tt><dd>

<p class=para>
(S) A warning from the GDBM_File extension module that a <tt class=literal>store()</tt> failed.

<p>
<dt class=varlistentry><tt class=literal>gethostent not implemented</tt><dd>

<p class=para>
(F) Your C library apparently doesn't implement <i class=emphasis>gethostent</I> (3), probably
because if it did, it'd feel morally obligated to return every hostname
on the Internet.  DNS tends to give machines a sense of grandeur.

<p>
<dt class=varlistentry><tt class=literal>get{sock,peer}name() on closed fd</tt><dd>

<p class=para>
(W) You tried to get a socket or peer socket name on a closed socket.
Did you forget to check the return value of your <a href="ch03_02.htm">socket</A> call?

<p>
<dt class=varlistentry><tt class=literal>getpwnam returned invalid UIC </tt><i class=emphasis>%d</I><tt class=literal> for user `</tt><i class=emphasis>%s</I><tt class=literal>`</tt><dd>

<p class=para>
(S) A warning peculiar to VMS.  The call to <tt class=literal>sys$getuai</tt>
underlying the <a href="ch03_02.htm">getpwnam</A> function
returned an invalid UIC.

<p>
<dt class=varlistentry><tt class=literal>Glob not terminated</tt><dd>

<p class=para>
(F) The lexer saw a left angle bracket in a place where it was expecting
a term, so it's looking for the corresponding right angle bracket, and not
finding it.  Chances are you left out some needed parentheses earlier in
the line, and you really meant a "less than".

<p>
<dt class=varlistentry><tt class=literal>Global symbol `</tt><i class=emphasis>%s</I><tt class=literal>` requires explicit package name</tt><dd>

<p class=para>
(F) You've said <tt class=literal>use strict vars</tt>, which indicates that all
variables must either be lexically scoped (using <a href="ch03_02.htm">my</A>), or explicitly
qualified to say which package the global variable is in (using <tt class=literal>::</tt>).

<p>
<dt class=varlistentry><tt class=literal>goto must have label</tt><dd>

<p class=para>
(F) Unlike <a href="ch03_02.htm">next</A> or <a href="ch03_02.htm">last</A>, you're not allowed to <a href="ch03_02.htm">goto</A> an unspecified destination, the opinions
of Elizabethans nothwithstanding.  Go to <a href="ch03_02.htm">goto</A>.

<p>
<dt class=varlistentry><tt class=literal>Had to create </tt><i class=emphasis>%s</I><tt class=literal> unexpectedly</tt><dd>

<p class=para>
(S) A routine asked for a symbol from a symbol table that ought to have
existed already, but for some reason it didn't, and had to be created on
an emergency basis to prevent a core dump.  This probably indicates
a typo in an extension module.

<p>
<dt class=varlistentry><tt class=literal>Hash %</tt><i class=emphasis>%s</I><tt class=literal> missing the % in argument </tt><i class=emphasis>%d</I><tt class=literal> of </tt><i class=emphasis>%s</I><tt class=literal>()</tt><dd>

<p class=para>
(D) Really old Perl let you omit the <tt class=literal>%</tt> on hash names in some
spots.  This is now heavily deprecated.

<p>
<dt class=varlistentry><tt class=literal>Illegal division by zero</tt><dd>

<p class=para>
(F) You tried to divide a number by <tt class=literal>0</tt>.  Either something was
wrong in your logic, or you need to put a conditional in to guard
against meaningless input.  Maybe both.

<p>
<dt class=varlistentry><tt class=literal>Illegal modulus zero</tt><dd>

<p class=para>
(F) You tried to divide a number by <tt class=literal>0</tt> to get the remainder.
Most numbers don't take to this kindly.

<p>
<dt class=varlistentry><tt class=literal>Illegal octal digit</tt><dd>

<p class=para>
(F) You used an <tt class=literal>8</tt> or <tt class=literal>9</tt> in a octal number.

<p>
<dt class=varlistentry><tt class=literal>Illegal octal digit ignored</tt><dd>

<p class=para>
(W) You may have tried to use an <tt class=literal>8</tt> or <tt class=literal>9</tt> in a octal
number.  Interpretation of the octal number stopped before the <tt class=literal>8</tt>
or <tt class=literal>9</tt>.

<dt class=varlistentry><tt class=literal>Insecure dependency in </tt><i class=emphasis>%s</I><dd>

<p class=para>
(F) You tried to do something that the tainting mechanism didn't like. 
The tainting mechanism is turned on when you're running setuid or setgid,
or when you specify <b>-T</B> to turn it on explicitly.  The tainting mechanism
labels all data that's derived directly or indirectly from the user,
who is considered to be unworthy of your trust.  If any such data is
used in a "dangerous" operation, you get this error.

<p>
<dt class=varlistentry><tt class=literal>Insecure directory in </tt><i class=emphasis>%s</I><dd>

<p class=para>
(F) You can't use <a href="ch03_02.htm">system</A>, <a href="ch03_02.htm">exec</A>, or a piped <a href="ch03_02.htm">open</A> in a
setuid or setgid script if <tt class=literal>$ENV{PATH}</tt> contains a directory that
is writable by the world.

<p>
<dt class=varlistentry><tt class=literal>Insecure PATH</tt><dd>

<p class=para>
(F) You can't use <a href="ch03_02.htm">system</A>, <a href="ch03_02.htm">exec</A>, or a piped <a href="ch03_02.htm">open</A> in a
setuid or setgid script if <tt class=literal>$ENV{PATH}</tt> is derived from data
supplied (or potentially supplied) by the user.  The script must set the
path to a known value, using trustworthy data.

<p>
<dt class=varlistentry><tt class=literal>Internal inconsistency in tracking vforks</tt><dd>

<p class=para>
(S) A warning peculiar to VMS.  Perl keeps track of the number
of times you've called <a href="ch03_02.htm">fork</A> and <a href="ch03_02.htm">exec</A>, in order to determine
whether the current call to <a href="ch03_02.htm">exec</A> should affect the current
script or a subprocess (see <a href="ch03_02.htm">exec</A>).  Somehow, this count
has become scrambled, so Perl is making a guess and treating
this <a href="ch03_02.htm">exec</A> as a request to terminate the Perl script
and execute the specified command.

<p>
<dt class=varlistentry><tt class=literal>internal disaster in regexp</tt><dd>

<p class=para>
(P) Something went badly wrong in the regular expression parser.

<p>
<dt class=varlistentry><tt class=literal>internal urp in regexp at /</tt><i class=emphasis>%s</I><tt class=literal>/</tt><dd>

<p class=para>
(P) Something went badly awry in the regular expression parser.

<p>
<dt class=varlistentry><tt class=literal>invalid [] range in regexp</tt><dd>

<p class=para>
(F) The range specified in a character class had a minimum character
greater than the maximum character.

<p>
<dt class=varlistentry><tt class=literal>ioctl is not implemented</tt><dd>

<p class=para>
(F) Your machine apparently doesn't implement <i class=emphasis>ioctl</I> (2), which is pretty
strange for a machine that supports C.

<p>
<dt class=varlistentry><tt class=literal>junk on end of regexp</tt><dd>

<p class=para>
(P) The regular expression parser is confused.

<p>
<dt class=varlistentry><tt class=literal>Label not found for `last </tt><i class=emphasis>%s</I><tt class=literal>`</tt><dd>

<p class=para>
(F) You named a loop to break out of, but you're not currently in a
loop of that name, not even if you count where you were called from.
See <a href="ch03_02.htm">last</A>.

<p>
<dt class=varlistentry><tt class=literal>Label not found for `next </tt><i class=emphasis>%s</I><tt class=literal>`</tt><dd>

<p class=para>
(F) You named a loop to continue, but you're not currently in a loop of
that name, not even if you count where you were called from.  See
<a href="ch03_02.htm">last</A>.

<p>
<dt class=varlistentry><tt class=literal>Label not found for `redo </tt><i class=emphasis>%s</I><tt class=literal>`</tt><dd>

<p class=para>
(F) You named a loop to restart, but you're not currently in a loop of
that name, not even if you count where you were called from.  See
<a href="ch03_02.htm">last</A>.

<p>
<dt class=varlistentry><tt class=literal>listen() on closed fd</tt><dd>

<p class=para>
(W) You tried to do a <a href="ch03_02.htm">listen</A> on a closed socket.  Did you forget to check
the return value of your <a href="ch03_02.htm">socket</A> call?  See <a href="ch03_02.htm">listen</A>.

<p>
<dt class=varlistentry><tt class=literal>Literal @</tt><i class=emphasis>%s</I><tt class=literal> now requires backslash</tt><dd>

<p class=para>
(F) It used to be that Perl would try to guess whether you wanted an
array interpolated or a literal <tt class=literal>@</tt>.  It did this when the string was
first used at run-time.  Now strings are parsed at compile time, and
ambiguous instances of <tt class=literal>@</tt> must be disambiguated, either by putting a
backslash to indicate a literal, or by declaring (or using) the array
within the program before the string (lexically).  (Someday it will simply
assume that any unbackslashed <tt class=literal>@</tt> interpolates an array.)

<p>
<dt class=varlistentry><tt class=literal>Method for operation </tt><i class=emphasis>%s</I><tt class=literal> not found in package </tt><i class=emphasis>%s</I><tt class=literal> during blessing</tt><dd>

<p class=para>
(F) An attempt was made to specify an entry in an overloading table that
somehow doesn't point to a valid method.

<p>
<dt class=varlistentry><tt class=literal>Might be a runaway multi-line </tt><i class=emphasis>%s</I><tt class=literal> string starting on line </tt><i class=emphasis>%d</I><dd>

<p class=para>
(S) This is an advisory indicating that the previously reported error
may have been caused by a missing delimiter on a string or pattern,
because it eventually ended earlier on the current line.

<p>
<dt class=varlistentry><tt class=literal>Misplaced _ in number</tt><dd>

<p class=para>
(W) An underline in a decimal constant wasn't on a three-digit boundary.

<p>
<dt class=varlistentry><tt class=literal>Missing $ on loop variable</tt><dd>

<p class=para>
(F) Apparently you've been programming in <i class=emphasis>csh</I> too much.  Scalar
variables are always introduced with a <tt class=literal>$</tt> in Perl, unlike in the
shells, where it can vary from one line to the next.

<p>
<dt class=varlistentry><tt class=literal>Missing comma after first argument to </tt><i class=emphasis>%s</I><tt class=literal> function</tt><dd>

<p class=para>
(F) While certain functions allow you to specify a filehandle or an
"indirect object" before the argument list, this ain't one of 'em.

<p>
<dt class=varlistentry><tt class=literal>Missing operator before </tt><i class=emphasis>%s</I><tt class=literal>?</tt><dd>

<p class=para>
(S) This is an educated guess made in conjunction with the message "<i class=emphasis>%s</I>
<tt class=literal>found where operator expected</tt>".  Often the missing operator is a comma.

<p>
<dt class=varlistentry><tt class=literal>Missing right bracket</tt><dd>

<p class=para>
(F) The lexer counted more opening curly brackets (braces) than closing ones.
Hint: you'll find the missing one near the place you were last editing.

<p>
<dt class=varlistentry><tt class=literal>Missing semicolon on previous line?</tt><dd>

<p class=para>
(S) This is an educated guess made in conjunction with the message "<i class=emphasis>%s</I>
<tt class=literal>found where operator expected</tt>".  Don't automatically put a semicolon on
the previous line just because you saw this message.

<p>
<dt class=varlistentry><tt class=literal>Modification of a read-only value attempted</tt><dd>

<p class=para>
(F) You tried, directly or indirectly, to change the value of a
constant.  You didn't, of course, try <tt class=literal>2 = 1</tt>, since the compiler
catches that.  But an easy way to do the same thing is:

<div class=programlisting>
<p>
<pre>
sub mod { $_[0] = 1 }
mod(2);
</PRE>
</DIV>

<p class=para>
Another way is to assign to a <a href="ch03_02.htm">substr</A> that's off the end of the string.

<p>
<dt class=varlistentry><tt class=literal>Modification of non-creatable array value attempted, subscript </tt><i class=emphasis>%d</I><dd>

<p class=para>
(F) You tried to make an array value spring into existence, and the
subscript was probably negative, even counting from end of the array
backwards.

<p>
<dt class=varlistentry><tt class=literal>Modification of non-creatable hash value attempted, subscript `</tt><i class=emphasis>%s</I><tt class=literal>`</tt><dd>

<p class=para>
(F) You tried to make a hash value spring into existence, and it couldn't
be created for some peculiar reason.

<p>
<dt class=varlistentry><tt class=literal>Module name must be constant</tt><dd>

<p class=para>
(F) Only a bare module name is allowed as the first argument to a <a href="ch03_02.htm">use</A>.
If you want to get fancier than that, call <a href="ch03_02.htm">require</A> within a <tt class=literal>BEGIN</tt> block.

<p>
<dt class=varlistentry><tt class=literal>msg</tt><i class=emphasis>%s</I><tt class=literal> not implemented</tt><dd>

<p class=para>
(F) You don't have System V message IPC on your system.

<p>
<dt class=varlistentry><tt class=literal>Multidimensional syntax </tt><i class=emphasis>%s</I><tt class=literal> not supported</tt><dd>

<p class=para>
(W) Multidimensional arrays aren't written like <tt class=literal>$foo[1,2,3]</tt>.  They're written
like <tt class=literal>$foo</tt>[1][2][3], as in C.

<p>
<dt class=varlistentry><tt class=literal>Negative length</tt><dd>

<p class=para>
(F) You tried to do a <a href="ch03_02.htm">read</A>/<a href="ch03_02.htm">write</A>/<a href="ch03_02.htm">send</A>/<a href="ch03_02.htm">recv</A>
operation with a buffer length that is less than <tt class=literal>0</tt>.  This is
difficult to imagine.

<p>
<dt class=varlistentry><tt class=literal>nested *?+ in regexp</tt><dd>

<p class=para>
(F) You can't quantify a quantifier without intervening parens.  So things like
<tt class=literal>**</tt> or <tt class=literal>+*</tt> or <tt class=literal>?*</tt> are
illegal, because you can't match things as many times
as you want.

<p class=para>
Note, however, that the minimal matching quantifiers, <tt class=literal>*?</tt>,
<tt class=literal>+?</tt>, and <tt class=literal>??</tt>, appear to be nested quantifiers,
but aren't.

<p>
<dt class=varlistentry><tt class=literal>No #! line</tt><dd>

<p class=para>
(F) The setuid emulator requires that scripts have a well-formed <tt class=literal>#!</tt> line
even on machines that don't support the <tt class=literal>#!</tt> construct.

<p>
<dt class=varlistentry><tt class=literal>No </tt><i class=emphasis>%s</I><tt class=literal> allowed while running setuid</tt><dd>

<p class=para>
(F) Certain operations are deemed to be too insecure for a setuid or setgid
script to even be allowed to attempt.  Generally speaking there will be
another way to do what you want that is, if not secure, at least securable.

<p>
<dt class=varlistentry><tt class=literal>No -e allowed in setuid scripts</tt><dd>

<p class=para>
(F) A setuid script can't be specified by the user.

<p>
<dt class=varlistentry><tt class=literal>No comma allowed after </tt><i class=emphasis>%s</I><dd>

<p class=para>
(F) A list operator that has a filehandle or "indirect object" is not
allowed to have a comma between that and the following arguments.
Otherwise it'd be just another one of the arguments.

<p>
<dt class=varlistentry><tt class=literal>No command into which to pipe on command line</tt><dd>

<p class=para>
(F) An error peculiar to VMS.  Perl handles its own command-line redirection,
and found a | at the end of the command line, so it doesn't know whither
to pipe the output from this command.

<p>
<dt class=varlistentry><tt class=literal>No DB::DB routine defined</tt><dd>

<p class=para>
(F) The currently executing code was compiled with the <b>-d</B> switch,
but for some reason the <i class=emphasis>perl5db.pl</I> file (or some facsimile thereof)
didn't define a routine to be called at the beginning of each
statement.  Which is odd, because the file should have been <a href="ch03_02.htm">require</A>d
automatically, and should have blown up the <a href="ch03_02.htm">require</A> if it didn't parse
right.

<p>
<dt class=varlistentry><tt class=literal>No dbm on this machine</tt><dd>

<p class=para>
(P) This is counted as an internal error, because every machine should
supply dbm nowadays, since Perl comes with SDBM.

<p>
<dt class=varlistentry><tt class=literal>No DBsub routine</tt><dd>

<p class=para>
(F) The currently executing code was compiled with the <b>-d</B> switch,
but for some reason the <i class=emphasis>perl5db.pl</I> file (or some facsimile thereof)
didn't define a <tt class=literal>DB::sub</tt> routine to be called at the beginning of each
ordinary subroutine call.

<p>
<dt class=varlistentry><tt class=literal>No error file after 2&gt; or 2&gt;&gt; on command line</tt><dd>

<p class=para>
(F) An error peculiar to VMS.  Perl handles its own command-line redirection,
and found a <tt class=literal>2&gt;</tt> or a <tt class=literal>2&gt;&gt;</tt> on the command line, but can't find the name of the
file to which to write data destined for <tt class=literal>STDERR</tt>.

<p>
<dt class=varlistentry><tt class=literal>No input file after &lt; on command line</tt><dd>

<p class=para>
(F) An error peculiar to VMS.  Perl handles its own command-line redirection,
and found a <tt class=literal>&lt;</tt> on the command line, but can't find the name of the file from
which to read data for <tt class=literal>STDIN</tt>.

<p>
<dt class=varlistentry><tt class=literal>No output file after &gt; on command line</tt><dd>

<p class=para>
(F) An error peculiar to VMS.  Perl handles its own command-line redirection,
and found a lone <tt class=literal>&gt;</tt> at the end of the command line, so it doesn't know whither
you wanted to redirect <tt class=literal>STDOUT</tt>.

<p>
<dt class=varlistentry><tt class=literal>No output file after &gt; or &gt;&gt; on command line</tt><dd>

<p class=para>
(F) An error peculiar to VMS.  Perl handles its own command-line redirection,
and found a <tt class=literal>&gt;</tt> or a <tt class=literal>&gt;&gt;</tt> on the command line, but can't find the name of the
file to which to write data destined for <tt class=literal>STDOUT</tt>.

<p>
<dt class=varlistentry><tt class=literal>No Perl script found in input</tt><dd>

<p class=para>
(F) You called <tt class=literal>perl -x</tt>, but no line was found in the file beginning
with <tt class=literal>#!</tt> and containing the word "<tt class=literal>perl</tt>".

<p>
<dt class=varlistentry><tt class=literal>No setregid available</tt><dd>

<p class=para>
(F) <i class=emphasis>Configure</I> didn't find anything resembling the <i class=emphasis>setregid</I> (2) call for
your system.

<p>
<dt class=varlistentry><tt class=literal>No setreuid available</tt><dd>

<p class=para>
(F) <i class=emphasis>Configure</I> didn't find anything resembling the <i class=emphasis>setreuid</I> (2) call for
your system.

<p>
<dt class=varlistentry><tt class=literal>No space allowed after -I</tt><dd>

<p class=para>
(F) The argument to <b>-I</B> must follow the
<b>-I</B> immediately with no intervening space.

<p>
<dt class=varlistentry><tt class=literal>No such pipe open</tt><dd>

<p class=para>
(P) An error peculiar to VMS.  The internal routine <tt class=literal>my_pclose()</tt>
tried to close a pipe that hadn't been opened.  This should have been
caught earlier as an attempt to close an unopened filehandle.

<p>
<dt class=varlistentry><tt class=literal>No such signal: SIG</tt><i class=emphasis>%s</I><dd>

<p class=para>
(W) You specified a signal name as a subscript to <b>%SIG</B> that was
not recognized.  Say <tt class=literal>kill -l</tt> in your shell to see the valid
signal names on your system.

<p>
<dt class=varlistentry><tt class=literal>Not a CODE reference</tt><dd>

<p class=para>
(F) Perl was trying to evaluate a reference to a code value (that is, a
subroutine), but found a reference to something else instead.  You can
use the <a href="ch03_02.htm">ref</A> function to find out what kind of reference it really was.

<p>
<dt class=varlistentry><tt class=literal>Not a format reference</tt><dd>

<p class=para>
(F) I'm not sure how you managed to generate a reference to an anonymous
format, but this indicates you did, and that it didn't exist.

<p>
<dt class=varlistentry><tt class=literal>Not a GLOB reference</tt><dd>

<p class=para>
(F) Perl was trying to evaluate a reference to a typeglob (that is,
a symbol table entry that looks like <tt class=literal>*foo</tt>), but found a reference to
something else instead.  You can use the <a href="ch03_02.htm">ref</A> function to find out
what kind of reference it really was.

<p>
<dt class=varlistentry><tt class=literal>Not a HASH reference</tt><dd>

<p class=para>
(F) Perl was trying to evaluate a reference to a hash value, but
found a reference to something else instead.  You can use the <a href="ch03_02.htm">ref</A>
function to find out what kind of reference it really was.

<p>
<dt class=varlistentry><tt class=literal>Not a perl script</tt><dd>

<p class=para>
(F) The setuid emulator requires that scripts have a well-formed <tt class=literal>#!</tt> line
even on machines that don't support the <tt class=literal>#!</tt> construct.  The line must
mention "<tt class=literal>perl</tt>".

<p>
<dt class=varlistentry><tt class=literal>Not a SCALAR reference</tt><dd>

<p class=para>
(F) Perl was trying to evaluate a reference to a scalar value, but
found a reference to something else instead.  You can use the <a href="ch03_02.htm">ref</A>
function to find out what kind of reference it really was.

<p>
<dt class=varlistentry><tt class=literal>Not a subroutine reference</tt><dd>

<p class=para>
(F) Perl was trying to evaluate a reference to a code value (that is, a
subroutine), but found a reference to something else instead.  You can
use the <a href="ch03_02.htm">ref</A> function to find out what kind of reference it really was.

<p>
<dt class=varlistentry><tt class=literal>Not a subroutine reference in %OVERLOAD</tt><dd>

<p class=para>
(F) An attempt was made to specify an entry in an overloading table that
somehow doesn't point to a valid subroutine.

<p>
<dt class=varlistentry><tt class=literal>Not an ARRAY reference</tt><dd>

<p class=para>
(F) Perl was trying to evaluate a reference to an array value, but
found a reference to something else instead.  You can use the <a href="ch03_02.htm">ref</A>
function to find out what kind of reference it really was.

<p>
<dt class=varlistentry><tt class=literal>Not enough arguments for </tt><i class=emphasis>%s</I><dd>

<p class=para>
(F) The function requires more arguments than you specified.

<p>
<dt class=varlistentry><tt class=literal>Not enough format arguments</tt><dd>

<p class=para>
(W) A format specified more picture fields than the subsequent values
line supplied.

<p>
<dt class=varlistentry><tt class=literal>Null filename used</tt><dd>

<p class=para>
(F) You can't <a href="ch03_02.htm">require</A> the null filename, especially since on many machines
that means the current directory!  See <a href="ch03_02.htm">require</A>.

<p>
<dt class=varlistentry><tt class=literal>NULL OP IN RUN</tt><dd>

<p class=para>
(P) Some internal routine called <tt class=literal>run()</tt> with a null opcode pointer.

<p>
<dt class=varlistentry><tt class=literal>Null realloc</tt><dd>

<p class=para>
(P) An attempt was made to <i class=emphasis>realloc</I> (3) <tt class=literal>NULL</tt>.

<p>
<dt class=varlistentry><tt class=literal>NULL regexp argument</tt><dd>

<p class=para>
(P) The internal pattern-matching routines blew it bigtime.

<p>
<dt class=varlistentry><tt class=literal>NULL regexp parameter</tt><dd>

<p class=para>
(P) The internal pattern-matching routines are out of their gourd.

<p>
<dt class=varlistentry><tt class=literal>Odd number of elements in hash list</tt><dd>

<p class=para>
(S) You specified an odd number of elements to a hash list, which is odd,
since hash lists come in key/value pairs.

<p>
<dt class=varlistentry><tt class=literal>oops: oopsAV</tt><dd>

<p class=para>
(S) An internal warning that the grammar is screwed up.

<p>
<dt class=varlistentry><tt class=literal>oops: oopsHV</tt><dd>

<p class=para>
(S) An internal warning that the grammar is screwed up.

<p>
<dt class=varlistentry><tt class=literal>Operation `</tt><i class=emphasis>%s</I><tt class=literal>' </tt><i class=emphasis>%s</I><tt class=literal>: no method found</tt><dd>

<p class=para>
(F) An attempt was made to use an entry in an overloading table that
somehow no longer points to a valid method.

<p>
<dt class=varlistentry><tt class=literal>Operator or semicolon missing before </tt><i class=emphasis>%s</I><dd>

<p class=para>
(S) You used a variable or subroutine call where the parser was
expecting an operator.  The parser has assumed you really meant
to use an operator, but this is highly unlikely to be correct.
For example, if you say <tt class=literal>*foo *foo</tt> it will be interpreted as
if you said <tt class=literal>*foo * 'foo'</tt>.

<p>
<dt class=varlistentry><tt class=literal>Out of memory for yacc stack</tt><dd>

<p class=para>
(F) The <i class=emphasis>byacc</I> parser wanted to grow its stack so it could continue
parsing, but <i class=emphasis>realloc</I> (3) wouldn't give it more memory, virtual or
otherwise.

<p>
<dt class=varlistentry><tt class=literal>Out of memory!</tt><dd>

<p class=para>
(X) <i class=emphasis>malloc</I> (3) returned <tt class=literal>0</tt>, indicating there was insufficient
remaining memory (or virtual memory) to satisfy the request.

<p>
<dt class=varlistentry><tt class=literal>page overflow</tt><dd>

<p class=para>
(W) A single call to <a href="ch03_02.htm">write</A> produced more lines than can fit on a page.

<p>
<dt class=varlistentry><tt class=literal>panic: ck_grep</tt><dd>

<p class=para>
(P) Failed an internal consistency check trying to compile a <a href="ch03_02.htm">grep</A>.

<p>
<dt class=varlistentry><tt class=literal>panic: ck_split</tt><dd>

<p class=para>
(P) Failed an internal consistency check trying to compile a <a href="ch03_02.htm">split</A>.

<p>
<dt class=varlistentry><tt class=literal>panic: corrupt saved stack index</tt><dd>

<p class=para>
(P) The savestack was requested to restore more localized values than there
are in the savestack.

<p>
<dt class=varlistentry><tt class=literal>panic: die </tt><i class=emphasis>%s</I><dd>

<p class=para>
(P) We popped the context stack to an <a href="ch03_02.htm">eval</A> context, and then discovered
it wasn't an <a href="ch03_02.htm">eval</A> context.

<p>
<dt class=varlistentry><tt class=literal>panic: do_match</tt><dd>

<p class=para>
(P) The internal <tt class=literal>pp_match()</tt> routine was called with invalid
operational data.

<p>
<dt class=varlistentry><tt class=literal>panic: do_split</tt><dd>

<p class=para>
(P) Something terrible went wrong in setting up for the <a href="ch03_02.htm">split</A>.

<p>
<dt class=varlistentry><tt class=literal>panic: do_subst</tt><dd>

<p class=para>
(P) The internal <tt class=literal>pp_subst()</tt> routine was called with invalid
operational data.

<p>
<dt class=varlistentry><tt class=literal>panic: do_trans</tt><dd>

<p class=para>
(P) The internal <tt class=literal>do_trans()</tt> routine was called with invalid
operational data.

<p>
<dt class=varlistentry><tt class=literal>panic: goto</tt><dd>

<p class=para>
(P) We popped the context stack to a context with the specified label,
and then discovered it wasn't a context we know how to do a <a href="ch03_02.htm">goto</A> in.

<p>
<dt class=varlistentry><tt class=literal>panic: INTERPCASEMOD</tt><dd>

<p class=para>
(P) The lexer got into a bad state at a character case modifier like
<tt class=literal>\u</tt>.

<p>
<dt class=varlistentry><tt class=literal>panic: INTERPCONCAT</tt><dd>

<p class=para>
(P) The lexer got into a bad state parsing a string with brackets.

<p>
<dt class=varlistentry><tt class=literal>panic: last</tt><dd>

<p class=para>
(P) We popped the context stack to a block context, and then discovered
it wasn't a block context.

<p>
<dt class=varlistentry><tt class=literal>panic: leave_scope clearsv</tt><dd>

<p class=para>
(P) A writable lexical variable became read-only somehow within the scope.

<p>
<dt class=varlistentry><tt class=literal>panic: leave_scope inconsistency</tt><dd>

<p class=para>
(P) The savestack probably got out of sync.  At any rate, there was an
invalid enum on the top of it.

<p>
<dt class=varlistentry><tt class=literal>panic: malloc</tt><dd>

<p class=para>
(P) Something requested a negative number of bytes of <i class=emphasis>malloc</I> (3).

<p>
<dt class=varlistentry><tt class=literal>panic: mapstart</tt><dd>

<p class=para>
(P) The compiler is screwed up with respect to the <a href="ch03_02.htm">map</A> function.

<p>
<dt class=varlistentry><tt class=literal>panic: null array</tt><dd>

<p class=para>
(P) One of the internal array routines was passed a null AV pointer.

<p>
<dt class=varlistentry><tt class=literal>panic: pad_alloc</tt><dd>

<p class=para>
(P) The compiler got confused about which scratchpad it was allocating
and freeing temporaries and lexicals from.

<p>
<dt class=varlistentry><tt class=literal>panic: pad_free curpad</tt><dd>

<p class=para>
(P) The compiler got confused about which scratchpad it was allocating
and freeing temporaries and lexicals from.

<p>
<dt class=varlistentry><tt class=literal>panic: pad_free po</tt><dd>

<p class=para>
(P) An invalid scratchpad offset was detected internally.

<p>
<dt class=varlistentry><tt class=literal>panic: pad_reset curpad</tt><dd>

<p class=para>
(P) The compiler got confused about which scratchpad it was allocating
and freeing temporaries and lexicals from.

<p>
<dt class=varlistentry><tt class=literal>panic: pad_sv po</tt><dd>

<p class=para>
(P) An invalid scratchpad offset was detected internally.

<p>
<dt class=varlistentry><tt class=literal>panic: pad_swipe curpad</tt><dd>

<p class=para>
(P) The compiler got confused about which scratchpad it was allocating
and freeing temporaries and lexicals from.

<p>
<dt class=varlistentry><tt class=literal>panic: pad_swipe po</tt><dd>

<p class=para>
(P) An invalid scratchpad offset was detected internally.

<p>
<dt class=varlistentry><tt class=literal>panic: pp_iter</tt><dd>

<p class=para>
(P) The <b>foreach</B> iterator got called in a non-loop context frame.

<p>
<dt class=varlistentry><tt class=literal>panic: realloc</tt><dd>

<p class=para>
(P) Something requested a negative number of bytes of <i class=emphasis>realloc</I> (3).

<p>
<dt class=varlistentry><tt class=literal>panic: restartop</tt><dd>

<p class=para>
(P) Some internal routine requested a <a href="ch03_02.htm">goto</A> (or something like it), and
didn't supply the destination.

<p>
<dt class=varlistentry><tt class=literal>panic: return</tt><dd>

<p class=para>
(P) We popped the context stack to a subroutine or <a href="ch03_02.htm">eval</A> context, and
then discovered it wasn't a subroutine or <a href="ch03_02.htm">eval</A> context.

<p>
<dt class=varlistentry><tt class=literal>panic: scan_num</tt><dd>

<p class=para>
(P) <tt class=literal>scan_num()</tt> got called on something that wasn't a number.

<p>
<dt class=varlistentry><tt class=literal>panic: sv_insert</tt><dd>

<p class=para>
(P) The <tt class=literal>sv_insert()</tt> routine was told to remove more string than there
was string.

<p>
<dt class=varlistentry><tt class=literal>panic: top_env</tt><dd>

<p class=para>
(P) The compiler attempted to do a <a href="ch03_02.htm">goto</A>, or something weird like that.

<p>
<dt class=varlistentry><tt class=literal>panic: yylex</tt><dd>

<p class=para>
(P) The lexer got into a bad state while processing a character case
modifier like <tt class=literal>\u</tt>.

<p>
<dt class=varlistentry><tt class=literal>Parens missing around `</tt><i class=emphasis>%s</I><tt class=literal>` list</tt><dd>

<p class=para>
(W) You said something like

<div class=programlisting>
<p>
<pre>
my $foo, $bar = @_;
</PRE>
</DIV>

<p class=para>
when you meant

<div class=programlisting>
<p>
<pre>
my ($foo, $bar) = @_;
</PRE>
</DIV>

<p class=para>
Remember that <a href="ch03_02.htm">my</A> and <a href="ch03_02.htm">local</A> bind closer than comma.

<p>
<dt class=varlistentry><tt class=literal>Perl </tt><i class=emphasis>%s</I><tt class=literal> required- -this is only version </tt><i class=emphasis>%s</I><tt class=literal>, stopped</tt><dd>

<p class=para>
(F) The module in question uses features of a version of Perl more recent
than the currently running version.  How long has it been since you upgraded,
anyway?  See <a href="ch03_02.htm">require</A>.

<p>
<dt class=varlistentry><tt class=literal>Permission denied</tt><dd>

<p class=para>
(F) The setuid emulator in <i class=emphasis>suidperl</I> decided you were up to no good.

<p>
<dt class=varlistentry><tt class=literal>pid </tt><i class=emphasis>%d</I><tt class=literal> not a child</tt><dd>

<p class=para>
(W) A warning peculiar to VMS.  <a href="ch03_02.htm">waitpid</A> was asked to wait for a
process which isn't a subprocess of the current process.  While this is
fine from VMS's perspective, it's probably not what you intended.

<p>
<dt class=varlistentry><tt class=literal>POSIX getpgrp can't take an argument</tt><dd>

<p class=para>
(F) Your C compiler uses POSIX <i class=emphasis>getpgrp</I> (2), which takes no
argument, unlike the BSD version, which takes a <i class=emphasis>pid</I>.

<p>
<dt class=varlistentry><tt class=literal>Possible memory corruption: </tt><i class=emphasis>%s</I><tt class=literal> overflowed 3rd argument</tt><dd>

<p class=para>
(F) An <i class=emphasis>ioctl</I> (2) or <i class=emphasis>fcntl</I> (2) returned more than Perl was
bargaining for.  Perl guesses a reasonable buffer size, but puts a
sentinel byte at the end of the buffer just in case.  This sentinel byte
got clobbered, and Perl assumes that memory is now corrupted.  You can
try to trap this with <a href="ch03_02.htm">eval</A>, but remember your <i class=emphasis>malloc</I> arena
may have been clobbered.  Expect your program to dump core soon.  If
you're lucky, it won't set fire to the laser printer first.  See
<a href="ch03_02.htm">ioctl</A>.

<p>
<dt class=varlistentry><tt class=literal>Precedence problem: open </tt><i class=emphasis>%s</I><tt class=literal> should be open(</tt><i class=emphasis>%s</I><tt class=literal>)</tt><dd>

<p class=para>
(S) The old irregular construct

<div class=programlisting>
<p>
<pre>
open FOO || die;
</PRE>
</DIV>

<p class=para>
is now misinterpreted as

<div class=programlisting>
<p>
<pre>
open(FOO || die);
</PRE>
</DIV>

<p class=para>
because of the strict regularization of Perl 5's grammar into unary and
list operators.  (The old <a href="ch03_02.htm">open</A> was a little of both.) You must put
parens around the filehandle, or use the new <b>or</B> operator instead of
<tt class=literal>||</tt>.

<p>
<dt class=varlistentry><tt class=literal>print on closed filehandle </tt><i class=emphasis>%s</I><dd>

<p class=para>
(W) The filehandle you're printing on got itself closed sometime before now.
Check your logic flow.  It may have flowed away.

<p>
<dt class=varlistentry><tt class=literal>printf on closed filehandle </tt><i class=emphasis>%s</I><dd>

<p class=para>
(W) The filehandle you're writing to got itself closed sometime before now.
Check your logic flow.  See previous joke.

<p>
<dt class=varlistentry><tt class=literal>Probable precedence problem on </tt><i class=emphasis>%s</I><dd>

<p class=para>
(W) The compiler found a bare word where it expected a conditional,
which often indicates that an <tt class=literal>||</tt> or <tt class=literal>&amp;&amp;</tt> was parsed as part of the
last argument of the previous construct, for example:

<div class=programlisting>
<p>
<pre>
open FOO || die;
</PRE>
</DIV>

<p class=para>
<p>
<dt class=varlistentry><tt class=literal>Prototype mismatch: (</tt><i class=emphasis>%s</I><tt class=literal>) vs (</tt><i class=emphasis>%s</I><tt class=literal>)</tt><dd>

<p class=para>
(S) The subroutine being defined had a predeclared (forward) declaration
with a different function prototype.  The prototypes must match.

<p>
<dt class=varlistentry><tt class=literal>Read on closed filehandle &lt;</tt><i class=emphasis>%s</I><tt class=literal>&gt;</tt><dd>

<p class=para>
(W) The filehandle you're reading from got itself closed sometime before now.
Check your logic flow.  Don't see the previous joke.

<p>
<dt class=varlistentry><tt class=literal>Reallocation too large: </tt><i class=emphasis>%d</I><dd>

<p class=para>
(F) You can't allocate more than 64K on an MS-DOS machine.

<p>
<dt class=varlistentry><tt class=literal>Recompile perl with -DDEBUGGING to use -D switch</tt><dd>

<p class=para>
(F) You can't use the <b>-D</B> option unless the
code to produce the 
desired output is compiled into <i class=emphasis>perl</I>, which entails some overhead,
which is why it's currently left out of your copy.

<p>
<dt class=varlistentry><tt class=literal>Recursive inheritance detected</tt><dd>

<p class=para>
(F) More than 100 levels of inheritance were used.  Probably indicates
an unintended loop in your inheritance hierarchy.  Use <tt class=literal>-Do</tt> to trace
object method lookups.  (But see previous entry.)

<p>
<dt class=varlistentry><tt class=literal>Reference miscount in sv_replace()</tt><dd>

<p class=para>
(W) The internal <tt class=literal>sv_replace()</tt> function was handed a new SV with a
reference count of other than <tt class=literal>1</tt>.

<p>
<dt class=varlistentry><tt class=literal>regexp memory corruption</tt><dd>

<p class=para>
(P) The regular expression engine got confused by what the regular
expression compiler gave it.

<p>
<dt class=varlistentry><tt class=literal>regexp out of space</tt><dd>

<p class=para>
(P) A "can't happen" error, because <tt class=literal>safemalloc()</tt> should have
caught it earlier.  If it didn't, your Perl is misconfigured.

<p>
<dt class=varlistentry><tt class=literal>regexp too big</tt><dd>

<p class=para>
(F) The current implementation of regular expression uses 16-bit shorts as
address offsets within a string.  Unfortunately this means that if
the regular expression compiles to longer than 32767 bytes, it'll blow up.
Usually when you want a regular expression this big, there is a better
way to do it with multiple statements.

<p>
<dt class=varlistentry><tt class=literal>Reversed </tt><i class=emphasis>%s</I><tt class=literal>= operator</tt><dd>

<p class=para>
(W) You wrote your assignment operator backward.  The <tt class=literal>=</tt> must always
come last, to avoid ambiguity with subsequent unary operators.

<p>
<dt class=varlistentry><tt class=literal>Runaway format</tt><dd>

<p class=para>
(F) Your format contained the <tt class=literal>~~</tt> repeat-until-blank sequence,
but it produced 200 lines at once, and the 200th line looked exactly
like the 199th line.  Apparently you didn't arrange for the arguments to
exhaust themselves, either by using <tt class=literal>^</tt> instead of <tt class=literal>@</tt> (for
scalar variables), or by shifting or popping (for array variables).

<p>
<dt class=varlistentry><tt class=literal>Scalar value @</tt><i class=emphasis>%s</I><tt class=literal>[</tt><i class=emphasis>%s</I><tt class=literal>] better written as $</tt><i class=emphasis>%s</I><tt class=literal>[</tt><i class=emphasis>%s</I><tt class=literal>]</tt><dd>

<p class=para>
(W) You've used an array slice (indicated by <tt class=literal>@</tt>) to select a
single value of an array.  Generally it's better to ask for a scalar
value (indicated by <tt class=literal>$</tt>).  The difference is that
<tt class=literal>$foo[&amp;bar]</tt> always behaves like a scalar, both when assigning to
it and when evaluating its argument, while <tt class=literal>@foo[&amp;bar]</tt> behaves
like a list when you assign to it, and provides a list context to its
subscript, which can do weird things if you're only expecting one
subscript.
On the other hand, if you were actually hoping to treat the array
element as a list, you need to look into how references work, since
Perl will not magically convert between scalars and lists for you.

<p>
<dt class=varlistentry><tt class=literal>Script is not setuid/setgid in suidperl</tt><dd>

<p class=para>
(F) Oddly, the <i class=emphasis>suidperl</I> program was invoked on a script with its setuid
or setgid bit unset.  This doesn't make much sense.

<p>
<dt class=varlistentry><tt class=literal>Search pattern not terminated</tt><dd>

<p class=para>
(F) The lexer couldn't find the final delimiter of a <tt class=literal>//</tt> or <tt class=literal>m{}</tt>
construct.  Remember that bracketing delimiters count nesting level.

<p>
<dt class=varlistentry><tt class=literal>seek() on unopened file</tt><dd>

<p class=para>
(W) You tried to use the <a href="ch03_02.htm">seek</A> function on a filehandle that was either
never opened or has been closed since.

<p>
<dt class=varlistentry><tt class=literal>select not implemented</tt><dd>

<p class=para>
(F) This machine doesn't implement the <i class=emphasis>select</I> (2) system call.

<p>
<dt class=varlistentry><tt class=literal>sem</tt><i class=emphasis>%s</I><tt class=literal> not implemented</tt><dd>

<p class=para>
(F) You don't have System V semaphore IPC on your system.

<p>
<dt class=varlistentry><tt class=literal>semi-panic: attempt to dup freed string</tt><dd>

<p class=para>
(S) The internal <tt class=literal>newSVsv()</tt> routine was called to duplicate a scalar
that had previously been marked as free.

<p>
<dt class=varlistentry><tt class=literal>Semicolon seems to be missing</tt><dd>

<p class=para>
(W) A nearby syntax error was probably caused by a missing semicolon,
or possibly some other missing operator, such as a comma.

<p>
<dt class=varlistentry><tt class=literal>Send on closed socket</tt><dd>

<p class=para>
(W) The filehandle you're sending to got itself closed sometime before now.
Check your logic flow.

<p>
<dt class=varlistentry><tt class=literal>Sequence (?#... not terminated</tt><dd>

<p class=para>
(F) A regular expression comment must be terminated by a closing
parenthesis.  Embedded parentheses aren't allowed.  But with the <b>/x</B> modifier you can use an ordinary
comment starting with <tt class=literal>#</tt>, which doesn't care.

<p>
<dt class=varlistentry><tt class=literal>Sequence (?</tt><i class=emphasis>%s</I><tt class=literal>...) not implemented</tt><dd>

<p class=para>
(F) A proposed regular expression extension has the character reserved
but has not yet been written.

<p>
<dt class=varlistentry><tt class=literal>Sequence (?</tt><i class=emphasis>%s</I><tt class=literal>...) not recognized</tt><dd>

<p class=para>
(F) You used a regular expression extension that doesn't make sense.

<p>
<dt class=varlistentry><tt class=literal>Server error</tt><dd>

<p class=para>
(A) Also known as "<tt class=literal>500 Server error</tt>".  This is a CGI
error, not a Perl
error.  You need to make sure your script is executable, is accessible
by the user CGI is running the script under (which is probably not
the user account you tested it under), does not rely on any environment
variables (like <tt class=literal>PATH</tt>) from the user it isn't running under, and isn't
in a location where the CGI server can't find it, basically, more or less.

<p>
<dt class=varlistentry><tt class=literal>setegid() not implemented</tt><dd>

<p class=para>
(F) You tried to assign to <b>$)</B>, and your operating system doesn't support
the <i class=emphasis>setegid</I> (2) system call (or equivalent), or at least <i class=emphasis>Configure</I> didn't
think so.

<p>
<dt class=varlistentry><tt class=literal>seteuid() not implemented</tt><dd>

<p class=para>
(F) You tried to assign to <b>$&gt;</B>, and your operating system doesn't support
the <i class=emphasis>seteuid</I> (2) system call (or equivalent), or at least <i class=emphasis>Configure</I> didn't
think so.

<p>
<dt class=varlistentry><tt class=literal>setrgid() not implemented</tt><dd>

<p class=para>
(F) You tried to assign to <b>$(</B>, and your operating system doesn't support
the <i class=emphasis>setrgid</I> (2) system call (or equivalent), or at least <i class=emphasis>Configure</I> didn't
think so.

<p>
<dt class=varlistentry><tt class=literal>setruid() not implemented</tt><dd>

<p class=para>
(F) You tried to assign to <b>$&lt;</B>, and your operating system doesn't support
the <i class=emphasis>setruid</I> (2) system call (or equivalent), or at least <i class=emphasis>Configure</I> didn't
think so.

<p>
<dt class=varlistentry><tt class=literal>Setuid/gid script is writable by world</tt><dd>

<p class=para>
(F) The setuid emulator won't run a script that is writable by the world,
because the world might have written on it already.

<p>
<dt class=varlistentry><tt class=literal>shm</tt><i class=emphasis>%s</I><tt class=literal> not implemented</tt><dd>

<p class=para>
(F) You don't have System V shared memory IPC on your system.

<p>
<dt class=varlistentry><tt class=literal>shutdown() on closed fd</tt><dd>

<p class=para>
(W) You tried to do a <a href="ch03_02.htm">shutdown</A> on a closed socket.  Seems a bit
superfluous.

<p>
<dt class=varlistentry><tt class=literal>SIG</tt><i class=emphasis>%s</I><tt class=literal> handler `</tt><i class=emphasis>%s</I><tt class=literal>` not defined.</tt><dd>

<p class=para>
(W) The signal handler named in <b>%SIG</B> doesn't, in
fact, exist. Perhaps you put it into the wrong package?

<p>
<dt class=varlistentry><tt class=literal>sort is now a reserved word</tt><dd>

<p class=para>
(F) An ancient error message that almost nobody ever runs into anymore.
But before <a href="ch03_02.htm">sort</A> was a keyword, people sometimes used it as a filehandle.

<p>
<dt class=varlistentry><tt class=literal>Sort subroutine didn't return a numeric value</tt><dd>

<p class=para>
(F) A <a href="ch03_02.htm">sort</A> comparison routine must return a number.  You probably blew
it by not using <tt class=literal>&lt;=&gt;</tt> or <b>cmp</B>, or by not using them correctly.
See <a href="ch03_02.htm">sort</A>.

<p>
<dt class=varlistentry><tt class=literal>Sort subroutine didn't return single value</tt><dd>

<p class=para>
(F) A <a href="ch03_02.htm">sort</A> comparison subroutine may not return a list value with more
or less than one element.  See <a href="ch03_02.htm">sort</A>.

<p>
<dt class=varlistentry><tt class=literal>Split loop</tt><dd>

<p class=para>
(P) The <a href="ch03_02.htm">split</A> was looping infinitely.  (Obviously, a <a href="ch03_02.htm">split</A>
shouldn't iterate more times than there are characters of input, which
is what happened.)  See <a href="ch03_02.htm">split</A>.

<p>
<dt class=varlistentry><tt class=literal>Stat on unopened file </tt><i class=emphasis>%s</I><dd>

<p class=para>
(W) You tried to use the <a href="ch03_02.htm">stat</A> function (or an equivalent file test)
on a filehandle that was either never opened or has been closed since.

<p>
<dt class=varlistentry><tt class=literal>Statement unlikely to be reached</tt><dd>

<p class=para>
(W) You did an <a href="ch03_02.htm">exec</A> with some statement after it other than a <a href="ch03_02.htm">die</A>.
This is almost always an error, because <a href="ch03_02.htm">exec</A> never returns unless
there was a failure.  You probably wanted to use <a href="ch03_02.htm">system</A> instead,
which does return.  To suppress this warning, put the <a href="ch03_02.htm">exec</A> in a block
by itself.  Or put a <a href="ch03_02.htm">die</A> after it.

<p>
<dt class=varlistentry><tt class=literal>Subroutine </tt><i class=emphasis>%s</I><tt class=literal> redefined</tt><dd>

<p class=para>
(W) You redefined a subroutine.  To suppress this warning, say

<div class=programlisting>
<p>
<pre>
{
    local $^W = 0;
    eval "sub name { ... }";
}
</PRE>
</DIV>

<p class=para>
<p>
<dt class=varlistentry><tt class=literal>Substitution loop</tt><dd>

<p class=para>
(P) The substitution was looping infinitely.  (Obviously, a
substitution shouldn't iterate more times than there are characters of
input, which is what happened.)
See the discussion of substitution in the section "Pattern-Matching Operators" in <a href="ch02_01.htm">Chapter 2, <i>The Gory Details</i></A>.

<p>
<dt class=varlistentry><tt class=literal>Substitution pattern not terminated</tt><dd>

<p class=para>
(F) The lexer couldn't find the interior delimiter of an <tt class=literal>s///</tt> or
<tt class=literal>s{}{}</tt> construct.  Remember that bracketing delimiters count
nesting level.

<p>
<dt class=varlistentry><tt class=literal>Substitution replacement not terminated</tt><dd>

<p class=para>
(F) The lexer couldn't find the final delimiter of an <tt class=literal>s///</tt> or
<tt class=literal>s{}{}</tt> construct.  Remember that bracketing delimiters count
nesting level.

<p>
<dt class=varlistentry><tt class=literal>substr outside of string</tt><dd>

<p class=para>
(W) You tried to reference a <a href="ch03_02.htm">substr</A> that pointed outside of a string.
That is, the absolute value of the offset was larger than the length of
the string.  See <a href="ch03_02.htm">substr</A>.

<p>
<dt class=varlistentry><tt class=literal>suidperl is no longer needed since...</tt><dd>

<p class=para>
(F) Your <i class=emphasis>perl</I> was compiled with <tt class=literal>-DSETUID_SCRIPTS_ARE_SECURE_NOW</tt>,
but a version of the setuid emulator somehow got run anyway.

<dt class=varlistentry><tt class=literal>syntax error</tt><dd>

<p class=para>
(F) Probably means you had a syntax error.  Common reasons include:

<p>
<ul class=itemizedlist>
<li class=listitem>A keyword is misspelled.

<p>
<li class=listitem>A semicolon is missing.

<p>
<li class=listitem>A comma is missing.

<p>
<li class=listitem>An opening or closing parenthesis is missing.

<p>
<li class=listitem>An opening or closing brace is missing.

<p>
<li class=listitem>A closing quote is missing.

<p>
</UL>
<p class=para>
Often there will be another error message associated with the syntax
error giving more information.  (Sometimes it helps to turn on <b>-w</B>.)
The error message itself often tells you where it was in the line when
it decided to give up.  Sometimes the actual error is several tokens
before this, since Perl is good at understanding random input.
Occasionally the line number may be misleading, and once in a blue moon
the only way to figure out what's triggering the error is to call
<i class=emphasis>perl -c</I> repeatedly, chopping away half the program each time to see
if the error went away.  Sort of the cybernetic version of 20 Questions.

<p>
<dt class=varlistentry><tt class=literal>syntax error at line </tt><i class=emphasis>%d</I><tt class=literal>: `</tt><i class=emphasis>%s</I><tt class=literal>' unexpected</tt><dd>

<p class=para>
(A) You've accidentally run your script through the Bourne shell instead
of <i class=emphasis>perl</I>.  Check the <tt class=literal>#!</tt> line, or manually feed your script
into <i class=emphasis>perl</I> yourself.

<p>
<dt class=varlistentry><tt class=literal>System V IPC is not implemented on this machine</tt><dd>

<p class=para>
(F) You tried to do something with a function beginning with <b>sem</B>,
<b>shm</B> or <b>msg</B>.  See <a href="ch03_02.htm">semctl</A>, for example.

<p>
<dt class=varlistentry><tt class=literal>Syswrite on closed filehandle</tt><dd>

<p class=para>
(W) The filehandle you're writing to got itself closed sometime before now.
Check your logic flow.  If you're tired of that, check someone else's.

<p>
<dt class=varlistentry><tt class=literal>tell() on unopened file</tt><dd>

<p class=para>
(W) You tried to use the <a href="ch03_02.htm">tell</A> function on a filehandle that was either
never opened or has been closed since.

<p>
<dt class=varlistentry><tt class=literal>Test on unopened file </tt><i class=emphasis>%s</I><dd>

<p class=para>
(W) You tried to invoke a file test operator on a filehandle that isn't
open.  Check your logic.

<p>
<dt class=varlistentry><tt class=literal>That use of $[ is unsupported</tt><dd>

<p class=para>
(F) Assignment to <b>$[</B> is now strictly circumscribed, and interpreted as
a compiler directive.  You may only say one of

<div class=programlisting>
<p>
<pre>
$[ = 0;
$[ = 1;
...
local $[ = 0;
local $[ = 1;
...
</PRE>
</DIV>

<p class=para>
This is to prevent the problem of one module changing the array base
out from under another module inadvertently.
See the section on <b>$[</B> in <a href="ch02_01.htm">Chapter 2, <i>The Gory Details</i></A>.

<p>
<dt class=varlistentry><tt class=literal>The </tt><i class=emphasis>%s</I><tt class=literal> function is unimplemented</tt><dd>

<p class=para>
(F) The function indicated isn't implemented on this architecture, according
to the probings of <i class=emphasis>Configure</I>.

<p>
<dt class=varlistentry><tt class=literal>The crypt() function is unimplemented due to excessive paranoia.</tt><dd>

<p class=para>
(F) <i class=emphasis>Configure</I> couldn't find the <i class=emphasis>crypt</I> (3) function on your machine,
probably because your vendor didn't supply it, probably because they
think the U.S. government thinks it's a secret, or at least that they
will continue to pretend that it is.  And if you quote me on that, I
will deny it.

<p>
<dt class=varlistentry><tt class=literal>The stat preceding -l _ wasn't an lstat</tt><dd>

<p class=para>
(F) It makes no sense to test the current stat buffer for symbolic linkhood
if the last <a href="ch03_02.htm">stat</A> that wrote to the stat buffer already went past
the symlink to get to the real file.  Use an actual filename instead.

<p>
<dt class=varlistentry><tt class=literal>times not implemented</tt><dd>

<p class=para>
(F) Your version of the C library apparently doesn't do <i class=emphasis>times</I> (3).
I suspect you're not running on UNIX.

<p>
<dt class=varlistentry><tt class=literal>Too few args to syscall</tt><dd>

<p class=para>
(F) There has to be at least one argument to <a href="ch03_02.htm">syscall</A> to specify the
system call to call, silly dilly.

<p>
<dt class=varlistentry><tt class=literal>Too many ('s</tt><dd>

<p class=para>
<p>
<dt class=varlistentry><tt class=literal>Too many )'s</tt><dd>

<p class=para>
(A) You've accidentally run your script through <i class=emphasis>csh</I> instead
of <i class=emphasis>perl</I>.  Check the <tt class=literal>#!</tt> line, or manually feed your script
into <i class=emphasis>perl</I> yourself.

<p>
<dt class=varlistentry><tt class=literal>Too many args to syscall</tt><dd>

<p class=para>
(F) Perl supports a maximum of 14 args to <a href="ch03_02.htm">syscall</A>.

<p>
<dt class=varlistentry><tt class=literal>Too many arguments for </tt><i class=emphasis>%s</I><dd>

<p class=para>
(F) The function requires fewer arguments than you specified.

<p>
<dt class=varlistentry><tt class=literal>trailing \ in regexp</tt><dd>

<p class=para>
(F) The regular expression ends with an unbackslashed backslash.  Backslash
it.

<p>
<dt class=varlistentry><tt class=literal>Translation pattern not terminated</tt><dd>

<p class=para>
(F) The lexer couldn't find the interior delimiter of a <tt class=literal>tr///</tt> or
<tt class=literal>tr[][]</tt> construct.

<dt class=varlistentry><tt class=literal>Translation replacement not terminated</tt><dd>

<p class=para>
(F) The lexer couldn't find the final delimiter of a <tt class=literal>tr///</tt> or
<tt class=literal>tr[][]</tt> construct.

<p>
<dt class=varlistentry><tt class=literal>truncate not implemented</tt><dd>

<p class=para>
(F) Your machine doesn't implement a file truncation mechanism that
<i class=emphasis>Configure</I> knows about.

<p>
<dt class=varlistentry><tt class=literal>Type of arg </tt><i class=emphasis>%d</I><tt class=literal> to </tt><i class=emphasis>%s</I><tt class=literal> must be </tt><i class=emphasis>%s</I><tt class=literal> (not </tt><i class=emphasis>%s</I><tt class=literal>)</tt><dd>

<p class=para>
(F) This function requires the argument in that position to be of a
certain type.  Arrays must be <tt class=literal>@NAME</tt> or
<tt class=literal>@{</tt><tt class=replaceable><i>EXPR</i></tt><tt class=literal>}</tt>.  Hashes must be <tt class=literal>%NAME</tt> or
<tt class=literal>%{</tt><tt class=replaceable><i>EXPR</i></tt><tt class=literal>}</tt>.  No implicit dereferencing is
allowed--use the <tt class=literal>{</tt><tt class=replaceable><i>EXPR</i></tt><tt class=literal>}</tt> forms as an explicit
dereference.

<p>
<dt class=varlistentry><tt class=literal>umask: argument is missing initial 0</tt><dd>

<p class=para>
(W) A umask of <tt class=literal>222</tt> is incorrect.  It should be <tt class=literal>0222</tt>,
since octal literals always start with <tt class=literal>0</tt> in Perl, as in C.

<p>
<dt class=varlistentry><tt class=literal>Unable to create sub named `</tt><i class=emphasis>%s</I><tt class=literal>`</tt><dd>

<p class=para>
(F) You attempted to create or access a subroutine with an illegal name.

<p>
<dt class=varlistentry><tt class=literal>Unbalanced context: </tt><i class=emphasis>%d</I><tt class=literal> more PUSHes than POPs</tt><dd>

<p class=para>
(W) The exit code detected an internal inconsistency in how many execution
contexts were entered and left.

<p>
<dt class=varlistentry><tt class=literal>Unbalanced saves: </tt><i class=emphasis>%d</I><tt class=literal> more saves than restores</tt><dd>

<p class=para>
(W) The exit code detected an internal inconsistency in how many
values were temporarily localized.

<p>
<dt class=varlistentry><tt class=literal>Unbalanced scopes: </tt><i class=emphasis>%d</I><tt class=literal> more ENTERs than LEAVEs</tt><dd>

<p class=para>
(W) The exit code detected an internal inconsistency in how many blocks
were entered and left.

<p>
<dt class=varlistentry><tt class=literal>Unbalanced tmps: </tt><i class=emphasis>%d</I><tt class=literal> more allocs than frees</tt><dd>

<p class=para>
(W) The exit code detected an internal inconsistency in how many mortal
scalars were allocated and freed.

<p>
<dt class=varlistentry><tt class=literal>Undefined format `</tt><i class=emphasis>%s</I><tt class=literal>` called</tt><dd>

<p class=para>
(F) The <a href="ch03_02.htm">format</A> indicated doesn't seem to exist.  Perhaps it's really in
another package?

<p>
<dt class=varlistentry><tt class=literal>Undefined sort subroutine `</tt><i class=emphasis>%s</I><tt class=literal>` called</tt><dd>

<p class=para>
(F) The <a href="ch03_02.htm">sort</A> comparison routine specified doesn't seem to exist.  Perhaps
it's in a different package?  See <a href="ch03_02.htm">sort</A>.

<p>
<dt class=varlistentry><tt class=literal>Undefined subroutine &amp;</tt><i class=emphasis>%s</I><tt class=literal> called</tt><dd>

<p class=para>
(F) The subroutine indicated hasn't been defined, or if it was, it
has since been undefined.

<p>
<dt class=varlistentry><tt class=literal>Undefined subroutine called</tt><dd>

<p class=para>
(F) The anonymous subroutine you're trying to call hasn't been defined,
or if it was, it has since been undefined.

<p>
<dt class=varlistentry><tt class=literal>Undefined subroutine in sort</tt><dd>

<p class=para>
(F) The <a href="ch03_02.htm">sort</A> comparison routine specified is declared but doesn't seem to
have been defined yet.  See <a href="ch03_02.htm">sort</A>.

<p>
<dt class=varlistentry><tt class=literal>Undefined top format `</tt><i class=emphasis>%s</I><tt class=literal>` called</tt><dd>

<p class=para>
(F) The <a href="ch03_02.htm">format</A> indicated doesn't seem to exist.  Perhaps it's really in
another package?

<p>
<dt class=varlistentry><tt class=literal>unexec of </tt><i class=emphasis>%s</I><tt class=literal> into </tt><i class=emphasis>%s</I><tt class=literal> failed!</tt><dd>

<p class=para>
(F) The <tt class=literal>unexec()</tt> routine failed for some reason.
See your local FSF
representative, who probably put it there in the first place.

<p>
<dt class=varlistentry><tt class=literal>Unknown BYTEORDER</tt><dd>

<p class=para>
(F) There are no byteswapping functions for a machine with this byte order.

<p>
<dt class=varlistentry><tt class=literal>unmatched () in regexp</tt><dd>

<p class=para>
(F) Unbackslashed parentheses must always be balanced in regular
expressions.  If you're a <i class=emphasis>vi</I> user, the <tt class=literal>%</tt> key is valuable
for finding the matching parenthesis.

<p>
<dt class=varlistentry><tt class=literal>Unmatched right bracket</tt><dd>

<p class=para>
(F) The lexer counted more closing curly brackets (braces) than opening
ones, so you're probably missing an opening bracket.  As a general
rule, you'll find the missing one (so to speak) near the place you were
last editing.

<p>
<dt class=varlistentry><tt class=literal>unmatched [] in regexp</tt><dd>

<p class=para>
(F) The brackets around a character class must match.  If you wish to
include a closing bracket in a character class, backslash it or put it first.

<p>
<dt class=varlistentry><tt class=literal>Unquoted string `</tt><i class=emphasis>%s</I><tt class=literal>` may clash with future reserved word</tt><dd>

<p class=para>
(W) You used a bareword that might someday be claimed as a reserved word.
It's best to put such a word in quotes, or capitalize it somehow, or insert
an underbar into it.  You might also declare it as a subroutine.

<p>
<dt class=varlistentry><tt class=literal>Unrecognized character \</tt><i class=emphasis>%d</I><tt class=literal> ignored</tt><dd>

<p class=para>
(S) A garbage character was found in the input, and ignored, in case it's
a weird control character on an EBCDIC machine, or some such.

<p>
<dt class=varlistentry><tt class=literal>Unrecognized signal name `</tt><i class=emphasis>%s</I><tt class=literal>`</tt><dd>

<p class=para>
(F) You specified a signal name to the <a href="ch03_02.htm">kill</A> function that was not
recognized.  Say <tt class=literal>kill -l</tt> in your shell to see the valid signal
names on your system.

<p>
<dt class=varlistentry><tt class=literal>Unrecognized switch: -</tt><i class=emphasis>%s</I><dd>

<p class=para>
(F) You specified an illegal option to <i class=emphasis>perl</I>.  Don't do that.
(If you think you <i class=emphasis>didn't</I> do that, check the
<tt class=literal>#!</tt> line to see if it's
supplying the bad switch on your behalf.)

<p>
<dt class=varlistentry><tt class=literal>Unsuccessful </tt><i class=emphasis>%s</I><tt class=literal> on filename containing newline</tt><dd>

<p class=para>
(W) A file operation was attempted on a filename, and that operation
failed, probably because the filename contained a newline, probably
because you forgot to <a href="ch03_02.htm">chop</A> or <a href="ch03_02.htm">chomp</A> it off.
See <a href="ch03_02.htm">chop</A>.

<p>
<dt class=varlistentry><tt class=literal>Unsupported directory function `</tt><i class=emphasis>%s</I><tt class=literal>` called</tt><dd>

<p class=para>
(F) Your machine doesn't support <i class=emphasis>opendir</I> (3) and <i class=emphasis>readdir</I> (3).

<p>
<dt class=varlistentry><tt class=literal>Unsupported function </tt><i class=emphasis>%s</I><dd>

<p class=para>
(F) This machine doesn't implement the indicated function, apparently.
At least, <i class=emphasis>Configure</I> doesn't think so.

<p>
<dt class=varlistentry><tt class=literal>Unsupported socket function `</tt><i class=emphasis>%s</I><tt class=literal>` called</tt><dd>

<p class=para>
(F) Your machine doesn't support the Berkeley socket mechanism, or at
least that's what <i class=emphasis>Configure</I> thought.

<p>
<dt class=varlistentry><tt class=literal>Unterminated &lt;&gt; operator</tt><dd>

<p class=para>
(F) The lexer saw a left angle bracket in a place where it was expecting
a term, so it's looking for the corresponding right angle bracket, and not
finding it.  Chances are you left out some needed parentheses earlier in
the line, and you really meant a "less than".

<p>
<dt class=varlistentry><tt class=literal>Use of $# is deprecated</tt><dd>

<p class=para>
(D) This was an ill-advised attempt to emulate a poorly defined <i class=emphasis>awk</I>
feature.  Use an explicit <a href="ch03_02.htm">printf</A> or <a href="ch03_02.htm">sprintf</A> instead.

<p>
<dt class=varlistentry><tt class=literal>Use of $* is deprecated</tt><dd>

<p class=para>
(D) This variable magically turned on multiline pattern matching, both for
you and for any luckless subroutine that you happen to call.  You should
use the new <b>/m</B> and <b>/s</B> modifiers now to do
that without the dangerous action-at-a-distance effects of <b>$*</B>.

<p>
<dt class=varlistentry><tt class=literal>Use of </tt><i class=emphasis>%s</I><tt class=literal> in printf format not supported</tt><dd>

<p class=para>
(F) You attempted to use a feature of <a href="ch03_02.htm">printf</A> that is accessible only
from C.  This usually means there's a better way to do it in Perl.

<p>
<dt class=varlistentry><tt class=literal>Use of </tt><i class=emphasis>%s</I><tt class=literal> is deprecated</tt><dd>

<p class=para>
(D) The construct indicated is no longer recommended for use, generally
because there's a better way to do it, and also because the old way has
bad side effects.

<p>
<dt class=varlistentry><tt class=literal>Use of bare &lt;&lt; to mean &lt;&lt;`` is deprecated</tt><dd>

<p class=para>
(D) You are now encouraged to use the explicitly quoted form if you
wish to use a blank line as the terminator of the here-document.

<p>
<dt class=varlistentry><tt class=literal>Use of implicit split to @_ is deprecated</tt><dd>

<p class=para>
(D) It makes a lot of work for the compiler when you clobber a
subroutine's argument list, so it's better if you assign the results of
a <a href="ch03_02.htm">split</A> explicitly to an array (or list).

<p>
<dt class=varlistentry><tt class=literal>Use of uninitialized value</tt><dd>

<p class=para>
(W) An undefined value was used as if it were already defined.  It was
interpreted as a <tt class=literal>""</tt> or a <tt class=literal>0</tt>, but maybe it was a mistake.
To suppress this warning, assign an initial value to your variables.

<p>
<dt class=varlistentry><tt class=literal>Useless use of </tt><i class=emphasis>%s</I><tt class=literal> in void context</tt><dd>

<p class=para>
(W) You did something without a side effect in a context that does nothing
with the return value, such as a statement that doesn't return a value
from a block, or the left side of a scalar comma operator.  Very often
this points not to stupidity on your part, but a failure of Perl to parse
your program the way you thought it would.  For example, you'd get this
if you mixed up your C precedence with Python precedence and said

<div class=programlisting>
<p>
<pre>
$one, $two = 1, 2;
</PRE>
</DIV>

<p class=para>
when you meant to say

<div class=programlisting>
<p>
<pre>
($one, $two) = (1, 2);
</PRE>
</DIV>

<p class=para>
Another common error is to use ordinary parentheses to construct a list
reference when you should be using square or curly brackets, for
example, if you say

<div class=programlisting>
<p>
<pre>
$array = (1,2);
</PRE>
</DIV>

<p class=para>
when you should have said

<div class=programlisting>
<p>
<pre>
$array = [1,2];
</PRE>
</DIV>

<p class=para>
The square brackets explicitly turn a list value into a scalar value,
while parentheses do not.  So when a parenthesized list is evaluated in
a scalar context, the comma is treated like C's comma operator, which
throws away the left argument, which is not what you want.

<dt class=varlistentry><tt class=literal>Variable `</tt><i class=emphasis>%s</I><tt class=literal>` is not exported</tt><dd>

<p class=para>
(F) While <tt class=literal>use strict</tt> in effect, you referred to a global variable
that you thought was imported from another module, because
something else of the same name (usually a subroutine) is exported
by that module.  It usually means you put the wrong funny character
on the front of your variable.

<p>
<dt class=varlistentry><tt class=literal>Variable name `</tt><i class=emphasis>%s</I><tt class=literal>::</tt><i class=emphasis>%s</I><tt class=literal>` used only once: possible typo</tt><dd>

<p class=para>
(W) Typographical errors often show up as unique names.  If you
had a good reason for having a unique name, then just mention it
again somehow to suppress the message.  You might consider declaring
the variable with <tt class=literal>use vars</tt>.

<p>
<dt class=varlistentry><tt class=literal>Variable syntax.</tt><dd>

<p class=para>
(A) You've accidentally run your script through <i class=emphasis>csh</I> instead
of <i class=emphasis>perl</I>.  Check the <tt class=literal>#!</tt> line, or manually feed your script
into <i class=emphasis>perl</I> yourself.

<p>
<dt class=varlistentry><tt class=literal>Warning: unable to close filehandle </tt><i class=emphasis>%s</I><tt class=literal> properly.</tt><dd>

<p class=para>
(S) The implicit <a href="ch03_02.htm">close</A> done by an <a href="ch03_02.htm">open</A> got an error
indication on the <a href="ch03_02.htm">close</A>.  This usually indicates your filesystem ran out
of disk space.

<p>
<dt class=varlistentry><tt class=literal>Warning: Use of `</tt><i class=emphasis>%s</I><tt class=literal>` without parens is ambiguous</tt><dd>

<p class=para>
(S) You wrote a unary operator followed by something that looks like a
binary operator that could also have been interpreted as a term or
unary operator.  For instance, if you know that the <a href="ch03_02.htm">rand</A> function
has a default argument of 1.0, and you write

<div class=programlisting>
<p>
<pre>
rand + 5;
</PRE>
</DIV>

<p class=para>
you may <i class=emphasis>think</I> you wrote the same thing as

<div class=programlisting>
<p>
<pre>
rand() + 5;
</PRE>
</DIV>

<p class=para>
but in actual fact, you got

<div class=programlisting>
<p>
<pre>
rand(+5);
</PRE>
</DIV>

<p class=para>
So put in parentheses to say what you really mean.

<p>
<dt class=varlistentry><tt class=literal>Write on closed filehandle</tt><dd>

<p class=para>
(W) The filehandle you're writing to got itself closed sometime before now.
Check your logic flow.

<p>
<dt class=varlistentry><tt class=literal>X outside of string</tt><dd>

<p class=para>
(F) You had a <a href="ch03_02.htm">pack</A> template that specified a relative position before
the beginning of the string being unpacked.  See <a href="ch03_02.htm">pack</A>.

<p>
<dt class=varlistentry><tt class=literal>x outside of string</tt><dd>

<p class=para>
(F) You had a <a href="ch03_02.htm">pack</A> template that specified a relative position after
the end of the string being unpacked.  See <a href="ch03_02.htm">pack</A>.

<p>
<dt class=varlistentry><tt class=literal>Xsub `</tt><i class=emphasis>%s</I><tt class=literal>` called in sort</tt><dd>

<p class=para>
(F) The use of an external subroutine as a <a href="ch03_02.htm">sort</A>
comparison is not yet supported.

<dt class=varlistentry><tt class=literal>Xsub called in sort</tt><dd>

<p class=para>
(F) The use of an external subroutine as a <a href="ch03_02.htm">sort</A>
comparison is not yet supported.

<p>
<dt class=varlistentry><tt class=literal>You can't use -l on a filehandle</tt><dd>

<p class=para>
(F) A filehandle represents an opened file, and when you opened the file it
already went past any symlink you are presumably trying to look for.
Use a filename instead.

<p>
<dt class=varlistentry><tt class=literal>YOU HAVEN'T DISABLED SET-ID SCRIPTS IN THE KERNEL YET!</tt><dd>

<p class=para>
(F) And you probably never will, since you probably don't have the
sources to your kernel, and your vendor probably doesn't give a rip
about what you want.  Your best bet is to use the wrapsuid script in
the <i class=emphasis>eg/</I> directory to put a setuid C wrapper around your script.

<p>
<dt class=varlistentry><tt class=literal>You need to quote `</tt><i class=emphasis>%s</I><tt class=literal>`</tt><dd>

<p class=para>
(W) You assigned a bareword as a signal handler name.  Unfortunately, you
already have a subroutine of that name declared, which means that Perl 5
will try to call the subroutine when the assignment is executed, which is
probably not what you want.  (If it IS what you want, put an
<tt class=literal>&amp;</tt> in front.)

<p>
<dt class=varlistentry><tt class=literal>[gs]etsockopt() on closed fd</tt><dd>

<p class=para>
(W) You tried to get or set a socket option on a closed socket.
Did you forget to check the return value of your <a href="ch03_02.htm">socket</A> call?
See <a href="ch03_02.htm">getsockopt</A>.

<p>
<dt class=varlistentry><tt class=literal>\1 better written as $1</tt><dd>

<p class=para>
(W) Outside of patterns, backreferences live on as variables.  The use
of backslashes is grandfathered on the righthand side of a
substitution, but stylistically it's better to use the variable form
because other Perl programmers will expect it, and it works better
if there are more than nine backreferences.

<p>
<dt class=varlistentry><tt class=literal>'|' and '&lt;' may not both be specified on command line</tt><dd>

<p class=para>
(F) An error peculiar to VMS.  Perl does its own command-line redirection, and
found that <tt class=literal>STDIN</tt> was a pipe, and that you also tried to redirect
<tt class=literal>STDIN</tt> using <tt class=literal>&lt;</tt>.  Only one <tt class=literal>STDIN</tt> stream to a customer,
please.

<p>
<dt class=varlistentry><tt class=literal>'|' and '&gt;' may not both be specified on command line</tt><dd>

<p class=para>
(F) An error peculiar to VMS.  Perl does its own command-line redirection, and
thinks you tried to redirect <tt class=literal>STDOUT</tt>
both to a file and into a pipe to another
command.  You need to choose one or the other, though nothing's stopping you
from piping into a program or Perl script which "splits" output into two
streams, such as

<div class=programlisting>
<p>
<pre>
open(OUT,"&gt;$ARGV[0]") or die "Can't write to $ARGV[0]: $!";
while (&lt;STDIN&gt;) {
    print STDOUT;
    print OUT;
}
close OUT;
</PRE>
</DIV>

</DL>

<div class=htmlnav>
<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch08_07.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src="gifs/txthome.gif" alt="Home" border=0></a></td>
<td width=172 align=right valign=top><a href="gloss_01.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>History Made Practical</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td>
<td width=172 align=right valign=top>Glossary</td>
</tr>
</table>

<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
</DIV>
</body>
</html>
