<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 3] 3.2 Perl Functions in Alphabetical Order</TITLE>
<meta name="author" content="Larry Wall, Tom Christiansen, and Randal Schwartz">
<meta name="date" content="Mon Mar 17 13:06:49 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="Perl">
<meta name="title" content="Programming Perl, Second Edition">
<!-- JavaScript: pathcont.js -->

</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><img src="gifs/smbanner.gif" alt="Programming Perl, Second Edition"></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch03_01.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b>Chapter 3</b></td>
<td width=172 align=right valign=top><a href="ch04_01.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>
<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="PERL2-CMD-ALPH">3.2 Perl Functions in Alphabetical Order</A></h2>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-SPATTERNS">/PATTERN/</A></h3>

<div class=programlisting>
<p>
<pre>
/<tt class=replaceable><i>PATTERN</i></tt>/
m/<tt class=replaceable><i>PATTERN</i></tt>/
</PRE>
</DIV>

<p class=para>
The match operator.  See "Regular Expressions" in <a href="ch02_01.htm">Chapter 2, <i>The Gory Details</i></A>.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-QPATTERNQ">?PATTERN?</A></h3>

<div class=programlisting>
<p>
<pre>
?<tt class=replaceable><i>PATTERN</i></tt>?
</PRE>
</DIV>

<p class=para>
This is just like the
<tt class=literal>/</tt><tt class=replaceable><i>PATTERN</i></tt><tt class=literal>/</tt>
search, except that it matches only once between
calls to <a href="#PERL2-CMD-RESET">reset</A>, so
it finds only the first occurrence of something rather than all occurrences.
(In other words, the operator works repeatedly until it actually matches
something, then it turns itself off until you explicitly turn it back
on with <a href="#PERL2-CMD-RESET">reset</A>.)
This may be useful (and efficient) if you want to see only the first
occurrence of the pattern in each file of a set of files. Note that 
<tt class=literal>m??</tt> is equivalent to <tt class=literal>??</tt>.

<p class=para>
The <a href="#PERL2-CMD-RESET">reset</A> operator will only reset
instances of <tt class=literal>??</tt> that were compiled in
the same package that it was.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-ABS">abs</A></h3>

<div class=programlisting>
<p>
<pre>
abs <tt class=replaceable><i>VALUE</i></tt>
</PRE>
</DIV>

<p class=para>
This function returns the absolute value of its argument (or
<b>$_</B> if omitted).

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-ACCEPT">accept</A></h3>

<div class=programlisting>
<p>
<pre>
accept <tt class=replaceable><i>NEWSOCKET</i></tt>, <tt class=replaceable><i>GENERICSOCKET</i></tt>
</PRE>
</DIV>

<p class=para>
This function does the same thing as the
<a href="#PERL2-CMD-ACCEPT">accept</A>
system call--see
<i class=emphasis>accept</I> (2).
It is used by server processes that wish to accept socket connections
from clients.
Execution is suspended until a connection is made, at which time
the <tt class=replaceable><i>NEWSOCKET</i></tt>
filehandle is opened and attached to the newly made connection.
The function returns the connected address if the call
succeeded, false otherwise
(and puts the error code into
<b>$!</B>).
<tt class=replaceable><i>GENERICSOCKET</i></tt>
must be a filehandle already opened via the
<a href="#PERL2-CMD-SOCKET">socket</A>
operator and bound to one of the server's network addresses.
For example:

<div class=programlisting>
<p>
<pre>
unless ($peer = accept NS, S) {
    die "Can't accept a connection: $!\n";
}
</PRE>
</DIV>

<p class=para>
See also the example in the section "Sockets" in <a href="ch06_01.htm">Chapter 6, <i>Social Engineering</i></A>.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-ALARM">alarm</A></h3>

<div class=programlisting>
<p>
<pre>
alarm <tt class=replaceable><i>EXPR</i></tt>
</PRE>
</DIV>

<p class=para>
This function sends a <tt class=literal>SIGALRM</tt> signal to the executing Perl program after
<tt class=replaceable><i>EXPR</i></tt>
seconds.
On some older systems, alarms go off at the "top of the second,"
so, for instance, an
<tt class=literal>alarm 1</tt>
may go off anywhere between 0 to 1 second from now,
depending on when in the current second it is.  An
<tt class=literal>alarm 2</tt>
may go off anywhere from 1 to 2 seconds from now.  And so on.
For better resolution, you may be able to use
<a href="#PERL2-CMD-SYSCALL">syscall</A>
to call the <i class=emphasis>itimer</I>
routines that some UNIX systems support.
Or you can use the timeout feature of the <b>select</B> function.

<p class=para>
Each call disables the previous timer, and an argument of 0 may be
supplied to cancel the previous timer without starting a new one.  The
return value is the number of seconds remaining on the previous timer.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-ATAN2">atan2</A></h3>

<div class=programlisting>
<p>
<pre>
atan2 <tt class=replaceable><i>Y</i></tt>, <tt class=replaceable><i>X</i></tt>
</PRE>
</DIV>

<p class=para>
This function returns the arctangent of
<tt class=replaceable><i>Y</i></tt><tt class=literal>/</tt><tt class=replaceable><i>X</i></tt> in
the range -pi to pi.
A quick way to get an approximate value of pi is to say:

<div class=programlisting>
<p>
<pre>
$pi = atan2(1,1) * 4;
</PRE>
</DIV>

<p class=para>
For the tangent operation, you may use the <tt class=literal>POSIX::tan()</tt>
function, or use the familiar relation:

<div class=programlisting>
<p>
<pre>
sub tan { sin($_[0]) / cos($_[0]) }
</PRE>
</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-BIND">bind</A></h3>

<div class=programlisting>
<p>
<pre>
bind <tt class=replaceable><i>SOCKET</i></tt>, <tt class=replaceable><i>NAME</i></tt>
</PRE>
</DIV>

<p class=para>
This function does the same thing as the <a href="#PERL2-CMD-BIND">bind</A> system call--see
<i class=emphasis>bind</I> (2).  It attaches an address (a name) to an
already opened socket specified by the <tt class=replaceable><i>SOCKET</i></tt> filehandle.
The function returns true if it succeeded, false otherwise (and puts
the error code into <b>$!</B>).
<tt class=replaceable><i>NAME</i></tt> should be 
a packed address of the proper type for the socket.

<div class=programlisting>
<p>
<pre>
bind S, $sockaddr or die "Can't bind address: $!\n";
</PRE>
</DIV>

<p class=para>
See also the example in the section "Sockets" in <a href="ch06_01.htm">Chapter 6, <i>Social Engineering</i></A>.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-BINMODE">binmode</A></h3>

<div class=programlisting>
<p>
<pre>
binmode <tt class=replaceable><i>FILEHANDLE</i></tt>
</PRE>
</DIV>

<p class=para>
This function arranges for the file to be treated in binary mode on
operating systems that distinguish between binary and text files.
It should be called after the <b>open</B> but before any
I/O is done on the filehandle.
The only way to reset binary mode on a filehandle is to reopen the file.

<p class=para>
On systems that distinguish binary mode from text mode,
files that are read in text mode have
<tt class=literal>\r\n</tt> sequences translated to <tt class=literal>\n</tt>
on input and <tt class=literal>\n</tt> translated to <tt class=literal>\r\n</tt>
on output.  <a href="#PERL2-CMD-BINMODE">binmode</A>
has no effect under UNIX or Plan9.  If
<tt class=replaceable><i>FILEHANDLE</i></tt>
is an expression, the value is taken as the name of
the filehandle.
The following example shows how a Perl script might prepare to
read a word processor file with embedded control codes:

<div class=programlisting>
<p>
<pre>
open WP, "$file.wp" or die "Can't open $file.wp: $!\n";
binmode WP;
while (read WP, $buf, 1024) {...}
</PRE>
</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-BLESS">bless</A></h3>

<div class=programlisting>
<p>
<pre>
bless <tt class=replaceable><i>REF</i></tt>, <tt class=replaceable><i>CLASSNAME</i></tt>
bless <tt class=replaceable><i>REF</i></tt>
</PRE>
</DIV>

<p class=para>
This function looks up the item pointed to by reference <tt class=replaceable><i>REF</i></tt> and tells
the item that it is now
an object in the <tt class=replaceable><i>CLASSNAME</i></tt> package--or the current package if no
<tt class=replaceable><i>CLASSNAME</i></tt>
is specified, which is often the case.  It returns the reference for
convenience, since a <a href="#PERL2-CMD-BLESS">bless</A> is often the last thing in a constructor
function.  (Always use the two-argument version if the constructor doing
the blessing might be inherited by a derived class.  In such cases,
the class you want to bless your object into will normally be found as the
first argument to the constructor in question.)
See "Objects" in <a href="ch05_01.htm">Chapter 5, <i>Packages, Modules, and Object Classes</i></A> for more about the
blessing (and blessings) of objects.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-CALLER">caller</A></h3>

<div class=programlisting>
<p>
<pre>
caller <tt class=replaceable><i>EXPR</i></tt>
caller
</PRE>
</DIV>

<p class=para>
This function returns information about the stack of current subroutine calls.
Without an argument
it returns the package name, filename, and line number that the currently
executing subroutine was called from:

<div class=programlisting>
<p>
<pre>
($package, $filename, $line) = caller;
</PRE>
</DIV>

<p class=para>
With an argument it evaluates
<tt class=replaceable><i>EXPR</i></tt>
as the number of stack frames to go back
before the current one.
It also reports some additional information.

<div class=programlisting>
<p>
<pre>
$i = 0;
while (($pack, $file, $line, $subname, $hasargs, $wantarray) = caller($i++)) {
    ...
}
</PRE>
</DIV>

<p class=para>
Furthermore, when called from within the DB package,
<a href="#PERL2-CMD-CALLER">caller</A> returns more detailed information: it sets the list
variable <tt class=literal>@DB::args</tt> to be the arguments passed in the given stack frame.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-CHDIR">chdir</A></h3>

<div class=programlisting>
<p>
<pre>
chdir <tt class=replaceable><i>EXPR</i></tt>
</PRE>
</DIV>

<p class=para>
This function changes the working directory to
<tt class=replaceable><i>EXPR</i></tt>,
if possible.
If
<tt class=replaceable><i>EXPR</i></tt>
is omitted, it changes to the home directory.
The function returns 1 upon success, 0 otherwise (and puts the error
code into <b>$!</B>).

<div class=programlisting>
<p>
<pre>
chdir "$prefix/lib" or die "Can't cd to $prefix/lib: $!\n";
</PRE>
</DIV>

<p class=para>
The following code can be used to move to the user's home directory,
one way or another:

<div class=programlisting>
<p>
<pre>
$ok = chdir($ENV{"HOME"} || $ENV{"LOGDIR"} || (getpwuid($&lt;))[7]);
</PRE>
</DIV>

<p class=para>
Alternately, taking advantage of the default, you could say this:

<div class=programlisting>
<p>
<pre>
$ok = chdir() || chdir((getpwuid($&lt;))[7]);
</PRE>
</DIV>

<p class=para>
See also the Cwd module, described in <a href="ch07_01.htm">Chapter 7, <i>The Standard Perl Library</i></A>, which lets you
keep track of your current directory.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-CHMOD">chmod</A></h3>

<div class=programlisting>
<p>
<pre>
chmod <tt class=replaceable><i>LIST</i></tt>
</PRE>
</DIV>

<p class=para>
This function changes the permissions of a list of files.
The first element of the list must be the numerical mode, as in
<i class=emphasis>chmod</I> (2).
(When using nonliteral mode data, you may need to convert 
an octal string
to a decimal number using the <a href="#PERL2-CMD-OCT">oct</A> function.)
The function returns the number of files successfully changed.
For example:

<div class=programlisting>
<p>
<pre>
$cnt = chmod 0755, 'file1', 'file2';
</PRE>
</DIV>

<p class=para>
will set <tt class=literal>$cnt</tt> to <tt class=literal>0</tt>, <tt class=literal>1</tt>, or <tt class=literal>2</tt>, depending on how
many files got changed (in the sense that the operation succeeded, not
in the sense that the bits were different afterward).  Here's a more
typical usage:

<div class=programlisting>
<p>
<pre>
chmod 0755, @executables;
</PRE>
</DIV>

<p class=para>
If you need to know which files didn't allow the change, use something like this:

<div class=programlisting>
<p>
<pre>
@cannot = grep {not chmod 0755, $_} 'file1', 'file2', 'file3';
die "$0: could not chmod @cannot\n" if @cannot;
</PRE>
</DIV>

<p class=para>
This idiom makes use of the <a href="#PERL2-CMD-GREP">grep</A> function to select only those
elements of the list for which the <a href="#PERL2-CMD-CHMOD">chmod</A> function failed.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-CHOMP">chomp</A></h3>

<div class=programlisting>
<p>
<pre>
chomp <tt class=replaceable><i>VARIABLE</i></tt>
chomp <tt class=replaceable><i>LIST</i></tt>
chomp
</PRE>
</DIV>

<p class=para>
This is a slightly safer version of <a href="#PERL2-CMD-CHOP">chop</A> (see below) in that it
removes only any line ending corresponding to the current value of
<b>$/</B>, and not just any last character.  Unlike <a href="#PERL2-CMD-CHOP">chop</A>,
<a href="#PERL2-CMD-CHOMP">chomp</A> returns the number of characters deleted. If <b>$/</B> is
empty (in paragraph mode), <a href="#PERL2-CMD-CHOMP">chomp</A> removes all trailing newlines
from the selected string (or strings, if chomping a <tt class=replaceable><i>LIST</i></tt>).

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-CHOP">chop</A></h3>

<div class=programlisting>
<p>
<pre>
chop <tt class=replaceable><i>VARIABLE</i></tt>
chop <tt class=replaceable><i>LIST</i></tt>
chop
</PRE>
</DIV>

<p class=para>
This function chops off the last character of a string and returns the
character chopped.  The <a href="#PERL2-CMD-CHOP">chop</A> operator is used primarily to
remove the newline from the end of an input record, but is more
efficient than <tt class=literal>s/\n$//</tt>.
If <tt class=replaceable><i>VARIABLE</i></tt> is omitted, the function chops the <b>$_</B> variable.  For
example:

<div class=programlisting>
<p>
<pre>
while (&lt;PASSWD&gt;) {
    chop;   # avoid \n on last field
    @array = split /:/;
    ...
}
</PRE>
</DIV>

<p class=para>
If you chop a <tt class=replaceable><i>LIST</i></tt>, each string in the list is chopped:

<div class=programlisting>
<p>
<pre>
@lines = `cat myfile`;
chop @lines;
</PRE>
</DIV>

<p class=para>
You can actually chop anything that is an lvalue, including an
assignment:

<div class=programlisting>
<p>
<pre>
chop($cwd = `pwd`);
chop($answer = &lt;STDIN&gt;);
</PRE>
</DIV>

<p class=para>
Note that this is different from:

<div class=programlisting>
<p>
<pre>
$answer = chop($tmp = &lt;STDIN&gt;);  # WRONG
</PRE>
</DIV>

<p class=para>
which puts a newline into <tt class=literal>$answer</tt>, because <a href="#PERL2-CMD-CHOP">chop</A> returns the
character chopped, not the remaining string (which is in <tt class=literal>$tmp</tt>).  One way
to get the result intended here is with <a href="#PERL2-CMD-SUBSTR">substr</A>:

<div class=programlisting>
<p>
<pre>
$answer = substr &lt;STDIN&gt;, 0, -1;
</PRE>
</DIV>

<p class=para>
But this is more commonly written as:

<div class=programlisting>
<p>
<pre>
chop($answer = &lt;STDIN&gt;);
</PRE>
</DIV>

<p class=para>
To chop more than one character, use
<a href="#PERL2-CMD-SUBSTR">substr</A>
as an lvalue, assigning a null string.
The following removes the last
five characters of
<tt class=literal>$caravan</tt>:

<div class=programlisting>
<p>
<pre>
substr($caravan, -5) = "`;
</PRE>
</DIV>

<p class=para>
The negative subscript causes
<a href="#PERL2-CMD-SUBSTR">substr</A>
to count from the end of the string instead of the beginning.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-CHOWN">chown</A></h3>

<div class=programlisting>
<p>
<pre>
chown <tt class=replaceable><i>LIST</i></tt>
</PRE>
</DIV>

<p class=para>
This function changes the owner (and group) of a list of files.
The first two elements of the list must be the
<i class=emphasis>numerical</I>
uid and gid, in that order.
The function returns the number of files successfully changed.
For example:

<div class=programlisting>
<p>
<pre>
$cnt = chown $uid, $gid, 'file1', 'file2';
</PRE>
</DIV>

<p class=para>
will set <tt class=literal>$cnt</tt> to <tt class=literal>0</tt>, <tt class=literal>1</tt>, or <tt class=literal>2</tt>, depending on how
many files got changed (in the sense that the operation succeeded, not
in the sense that the owner was different afterward).  Here's a more
typical usage:

<div class=programlisting>
<p>
<pre>
chown $uid, $gid, @filenames;
</PRE>
</DIV>

<p class=para>
Here's a subroutine that looks everything up for you, 
and then does the <b>chown</B>:

<div class=programlisting>
<p>
<pre>
sub chown_by_name {
    local($user, $pattern) = @_;
    chown((getpwnam($user))[2,3], glob($pattern));
}
&amp;chown_by_name("fred", "*.c");
</PRE>
</DIV>

<p class=para>
Notice that this forces the group of each file to be the gid fetched from the
<i class=emphasis>passwd</I>
file.  An alternative is to pass a -1 for the gid, which
leaves the group of the file unchanged.

<p class=para>
On most systems, you are not allowed to change the ownership of the 
file unless you're the superuser, although you should be able to change
the group to any of your secondary groups.  On insecure systems, these
restrictions may be relaxed, but this is not a portable assumption.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-CHR">chr</A></h3>

<div class=programlisting>
<p>
<pre>
chr <tt class=replaceable><i>NUMBER</i></tt>
</PRE>
</DIV>

<p class=para>
This function returns the character represented by that
<tt class=replaceable><i>NUMBER</i></tt> in the character set.
For example, <tt class=literal>chr(65)</tt> is "A" in ASCII.
To convert multiple characters, use <tt class=literal>pack(`C*`,</tt>
<tt class=replaceable><i>LIST</i></tt><tt class=literal>)</tt> instead.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-CHROOT">chroot</A></h3>

<div class=programlisting>
<p>
<pre>
chroot <tt class=replaceable><i>FILENAME</i></tt>
</PRE>
</DIV>

<p class=para>
This function does the same operation as the <a href="#PERL2-CMD-CHROOT">chroot</A> system
call--see <i class=emphasis>chroot</I> (2).  If successful, <tt class=replaceable><i>FILENAME</i></tt> becomes the new
root directory for the current process--the starting point for
pathnames beginning with "<tt class=literal>/</tt>".  This directory is inherited
across <i class=emphasis>exec</I> calls and by all subprocesses.  There is no way to
undo a <a href="#PERL2-CMD-CHROOT">chroot</A>.  Only the superuser can use this function.
Here's some code that approximates what many FTP servers do:

<div class=programlisting>
<p>
<pre>
chroot +(getpwnam('ftp'))[7]
    or die "Can't do anonymous ftp: $!\n";
</PRE>
</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-CLOSE">close</A></h3>

<div class=programlisting>
<p>
<pre>
close <tt class=replaceable><i>FILEHANDLE</i></tt>
</PRE>
</DIV>

<p class=para>
This function closes the file, socket, or pipe associated with the filehandle.
You don't have to close <tt class=replaceable><i>FILEHANDLE</i></tt> if you are immediately going to do
another <a href="#PERL2-CMD-OPEN">open</A> on it, since the next <a href="#PERL2-CMD-OPEN">open</A> will close it for
you.  (See <a href="#PERL2-CMD-OPEN">open</A>.)  However, an explicit <b>close</B> on an input file
resets the line counter (<b>$.</B>), while the implicit close done by
<a href="#PERL2-CMD-OPEN">open</A> does not.
Also, closing a pipe will wait for the process executing on the pipe
to complete (in case you want to look at the output of the pipe
afterward), and it prevents the script from exiting before the pipeline is
finished.[1]
Closing a pipe explicitly also puts the status value of the command
executing on the pipe into
<b>$?</B>.
For example:

<blockquote class=footnote>
<p class=para>[1] 
Note, however, that a
<i class=emphasis>dup</I>'ed
pipe is treated as an ordinary filehandle,
and <b>close</B> will not wait for the child on that filehandle.
You have to wait for the child by closing the filehandle on which
it was originally opened.
</blockquote>
<div class=programlisting>
<p>
<pre>
open OUTPUT, '|sort &gt;foo';     # pipe to sort
...                            # print stuff to output
close OUTPUT;                  # wait for sort to finish
die "sort failed" if $?;       # check for sordid sort
open INPUT, 'foo';             # get sort's results
</PRE>
</DIV>

<p class=para>
<tt class=replaceable><i>FILEHANDLE</i></tt>
may be an expression whose value gives the real filehandle name.
It may also be a reference to a filehandle object returned by some of
the newer object-oriented I/O packages.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-CLOSEDIR">closedir</A></h3>

<div class=programlisting>
<p>
<pre>
closedir <tt class=replaceable><i>DIRHANDLE</i></tt>
</PRE>
</DIV>

<p class=para>
This function closes a directory opened by
<a href="#PERL2-CMD-OPENDIR">opendir</A>.
See the examples under
<a href="#PERL2-CMD-OPENDIR">opendir</A>.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-CONNECT">connect</A></h3>

<div class=programlisting>
<p>
<pre>
connect <tt class=replaceable><i>SOCKET</i></tt>, <tt class=replaceable><i>NAME</i></tt>
</PRE>
</DIV>

<p class=para>
This function does the same thing as the
<a href="#PERL2-CMD-CONNECT">connect</A>
system call--see
<i class=emphasis>connect</I> (2).
The function initiates a connection with another process
that is waiting at an
<i class=emphasis>accept</I> (2).
The function returns true if it succeeded, false otherwise (and puts
the error code into
<b>$!</B>).
<tt class=replaceable><i>NAME</i></tt>
should be a packed network address of the proper type for the socket.
For example:

<div class=programlisting>
<p>
<pre>
connect S, $destadd
    or die "Can't connect to $hostname: $!\n";
</PRE>
</DIV>

<p class=para>
To disconnect a socket, either <b>close</B> or
<b>shutdown</B>.
See also the example in the section "Sockets" in <a href="ch06_01.htm">Chapter 6, <i>Social Engineering</i></A>.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-COS">cos</A></h3>

<div class=programlisting>
<p>
<pre>
cos <tt class=replaceable><i>EXPR</i></tt>
</PRE>
</DIV>

<p class=para>
This function returns the cosine of <tt class=replaceable><i>EXPR</i></tt> (expressed in radians).  For
example, the following script will print a cosine table of angles
measured in degrees:

<div class=programlisting>
<p>
<pre>
# Here's the lazy way of getting degrees-to-radians.
$pi = atan2(1,1) * 4;
$piover180 = $pi/180;
# Print table.
for ($_ = 0; $_ &lt;= 90; $_++) {
    printf "%3d %7.5f\n", $_, cos($_ * $piover180);
}
</PRE>
</DIV>

<p class=para>
For the inverse cosine operation, you may use the <tt class=literal>POSIX::acos()</tt>
function, or use this relation:

<div class=programlisting>
<p>
<pre>
sub acos { atan2( sqrt(1 - $_[0] * $_[0]), $_[0] ) }
</PRE>
</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-CRYPT">crypt</A></h3>

<div class=programlisting>
<p>
<pre>
crypt <tt class=replaceable><i>PLAINTEXT</i></tt>, <tt class=replaceable><i>SALT</i></tt>
</PRE>
</DIV>

<p class=para>
This function encrypts a string exactly in the manner of <i class=emphasis>crypt</I> (3).
This is useful for checking the password file for lousy passwords.[2]
Only the guys wearing white hats are allowed to do this.

<blockquote class=footnote>
<p class=para>[2] 
What you really want to do is prevent people from adding
the bad passwords in the first place.
</blockquote>
<p class=para>
To see whether a typed-in password
<tt class=literal>$guess</tt>
matches the password
<tt class=literal>$pass</tt>
obtained from a file
(such as
<i class=emphasis>/etc/passwd</I>),
try something like the following:

<div class=programlisting>
<p>
<pre>
if (crypt($guess, $pass) eq $pass) {
    # guess is correct
}
</PRE>
</DIV>

<p class=para>
Note that there is no easy way to decrypt an encrypted password apart
from guessing.
Also, truncating the salt to two characters is a waste of CPU time,
although the manpage for
<i class=emphasis>crypt</I> (3)
would have you believe otherwise.

<p class=para>
Here's an example that makes sure that whoever runs this program knows
their own password:

<div class=programlisting>
<p>
<pre>
$pwd = (getpwuid $&lt;)[1];
$salt = substr $pwd, 0, 2;
system "stty -echo";
print "Password: ";
chop($word = &lt;STDIN&gt;);
print "\n";
system "stty echo";
if (crypt($word, $salt) ne $pwd) {
    die "Sorry...\n";
} else {
    print "ok\n";
}
</PRE>
</DIV>

<p class=para>
Of course, typing in your own password to whoever asks for it is unwise.

<p class=para>
The <a href="#PERL2-CMD-CRYPT">crypt</A> function is unsuitable for
encrypting large quantities of data.  Find a library module for PGP (or
something like that) for something like that.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-DBMCLOSE">dbmclose</A></h3>

<div class=programlisting>
<p>
<pre>
dbmclose <tt class=replaceable><i>HASH</i></tt>
</PRE>
</DIV>

<p class=para>
This function breaks the binding between a DBM file and a hash.

<p class=para>
This function is actually just a call to <a href="#PERL2-CMD-UNTIE">untie</A> with the proper
arguments, but is provided for backward compatibility with older
versions of Perl.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-DBMOPEN">dbmopen</A></h3>

<div class=programlisting>
<p>
<pre>
dbmopen <tt class=replaceable><i>HASH</i></tt>, <tt class=replaceable><i>DBNAME</i></tt>, <tt class=replaceable><i>MODE</i></tt>
</PRE>
</DIV>

<p class=para>
This binds a DBM file to a hash (that is, an associative array).
(DBM stands for Data Base Management, and consists of a set of C library
routines that allow random access to records via a hashing algorithm.)
<tt class=replaceable><i>HASH</i></tt> is the name of the hash (with a <tt class=literal>%</tt>).  <tt class=replaceable><i>DBNAME</i></tt>
is the name of the database (without the <tt class=literal>.dir</tt> or <tt class=literal>.pag</tt>
extension).  If the database does not exist, and a valid <tt class=replaceable><i>MODE</i></tt> is
specified, the database is created with the protection specified by
<tt class=replaceable><i>MODE</i></tt> (as modified by the umask).  To prevent creation of the database
if it doesn't exist, you may specify a <tt class=replaceable><i>MODE</i></tt> of <a href="#PERL2-CMD-UNDEF">undef</A>, and the
function will return a false value if it can't find an existing
database.  If your system supports only the older DBM functions, you
may have only one <a href="#PERL2-CMD-DBMOPEN">dbmopen</A> in your program.

<p class=para>
Values assigned to the hash prior to the
<a href="#PERL2-CMD-DBMOPEN">dbmopen</A>
are not accessible.

<p class=para>
If you don't have write access to the DBM file, you can only read the
hash variables, not set them.
If you want to test whether you can write, either use file tests or
try setting a dummy array entry inside an <a href="#PERL2-CMD-EVAL">eval</A>, which will trap
the error.

<p class=para>
Note that functions such as <a href="#PERL2-CMD-KEYS">keys</A> and <a href="#PERL2-CMD-VALUES">values</A> may
return huge list values when used on large DBM files.
You may prefer to use the <a href="#PERL2-CMD-EACH">each</A> function to iterate over
large DBM files.
This example prints out the mail aliases on a system using <i class=emphasis>sendmail</I>:

<div class=programlisting>
<p>
<pre>
dbmopen %ALIASES, "/etc/aliases", 0666
    or die "Can't open aliases: $!\n";
while (($key,$val) = each %ALIASES) {
    print $key, ' = ', $val, "\n";
}
dbmclose %ALIASES;
</PRE>
</DIV>

<p class=para>
Hashes bound to DBM files have the same limitations as DBM
files, in particular the restrictions on how much you can put into a
bucket.  If you stick to short keys and values, it's rarely a problem.
Another thing you should bear in mind is that many existing DBM
databases contain null-terminated keys and values because they were
set up with C programs in mind.  The B News history file
and the old <i class=emphasis>sendmail</I> aliases file are examples.  Just use
<tt class=literal>"$key\0"</tt> instead of <tt class=literal>$key</tt>.

<p class=para>
There is currently no built-in way to lock generic DBM files.  Some would
consider this a bug.  The DB_File module does provide locking at the
granularity of the entire file, however.  See the documentation on that
module in <a href="ch07_01.htm">Chapter 7, <i>The Standard Perl Library</i></A> for details.

<p class=para>
This function is actually just a call to <a href="#PERL2-CMD-TIE">tie</A> with the proper
arguments, but is provided for backward compatibility with older
versions of Perl.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-DEFINED">defined</A></h3>

<div class=programlisting>
<p>
<pre>
defined <tt class=replaceable><i>EXPR</i></tt>
</PRE>
</DIV>

<p class=para>
This function returns a Boolean value saying whether <tt class=replaceable><i>EXPR</i></tt> has a real
value or not.  A scalar that contains no valid string, numeric, or reference
value is known as the undefined value, or
<a href="#PERL2-CMD-UNDEF">undef</A> for short.
Many operations return the undefined value under exceptional
conditions, such as end of file, uninitialized variable, system error,
and such.  This function allows you to distinguish between an
undefined null string and a defined null string when you're using operators
that might return a real null string.

<p class=para>
You may also check to see whether arrays, hashes, or subroutines have been
allocated any memory yet.  Arrays and hashes are allocated when you first
put something into them, whereas subroutines are allocated when a
definition has been successfully parsed.
Using <a href="#PERL2-CMD-DEFINED">defined</A> on the predefined special variables is not
guaranteed to produce intuitive results.

<p class=para>
Here is a fragment that tests a scalar value from a hash:

<div class=programlisting>
<p>
<pre>
print if defined $switch{'D'};
</PRE>
</DIV>

<p class=para>
When used on a hash element like this, <a href="#PERL2-CMD-DEFINED">defined</A> only
tells you whether the value is defined, not whether the key has
an entry in the hash table.  It's possible to have an undefined scalar value
for an existing hash key.  Use <a href="#PERL2-CMD-EXISTS">exists</A> to determine
whether the hash key exists.

<p class=para>
In the next example we use the fact that some operations return
the undefined value when you run out of data:

<div class=programlisting>
<p>
<pre>
print "$val\n" while defined($val = pop(@ary));
</PRE>
</DIV>

<p class=para>
The same thing goes for error returns from system calls:

<div class=programlisting>
<p>
<pre>
die "Can't readlink $sym: $!"
    unless defined($value = readlink $sym);
</PRE>
</DIV>

<p class=para>
Since symbol tables for packages are stored as hashes (associative arrays),
it's possible to check for the existence of a package like this:

<div class=programlisting>
<p>
<pre>
die "No XYZ package defined" unless defined %XYZ::;
</PRE>
</DIV>

<p class=para>
Finally, it's possible to avoid blowing up on nonexistent subroutines:

<div class=programlisting>
<p>
<pre>
sub saymaybe {
   if (defined &amp;say) {
       say(@_);
   }
   else {
       warn "Can't say";
   }
}
</PRE>
</DIV>

<p class=para>
See also <a href="#PERL2-CMD-UNDEF">undef</A>.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-DELETE">delete</A></h3>

<div class=programlisting>
<p>
<pre>
delete <tt class=replaceable><i>EXPR</i></tt>
</PRE>
</DIV>

<p class=para>
This function deletes the specified key and associated value from the specified hash.
(It doesn't delete a file.  See <a href="#PERL2-CMD-UNLINK">unlink</A> for that.)
Deleting from
<tt class=literal>$ENV{}</tt>
modifies the environment.
Deleting from a hash that is bound to a (writable) DBM file deletes the entry
from the DBM file.

<p class=para>
The following na&iuml;ve
example inefficiently deletes all the values of a hash:

<div class=programlisting>
<p>
<pre>
foreach $key (keys %HASH) {
    delete $HASH{$key};
}
</PRE>
</DIV>

<p class=para>
(It would be faster to use the <a href="#PERL2-CMD-UNDEF">undef</A> command.)
<tt class=replaceable><i>EXPR</i></tt> can be arbitrarily complicated as long as the final
operation is a hash key lookup:

<div class=programlisting>
<p>
<pre>
delete $ref-&gt;[$x][$y]{$key};
</PRE>
</DIV>

<p class=para>
For normal hashes, the <b>delete</B> function happens
to return the value (not the key) that was deleted, but this behavior is
not guaranteed for tied hashes, such as those bound to DBM files.

<p class=para>
To test whether a hash element has been deleted, use <a href="#PERL2-CMD-EXISTS">exists</A>.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-DIE">die</A></h3>

<div class=programlisting>
<p>
<pre>
die <tt class=replaceable><i>LIST</i></tt>
</PRE>
</DIV>

<p class=para>
Outside of an <a href="#PERL2-CMD-EVAL">eval</A>, this function prints the concatenated value
of <tt class=replaceable><i>LIST</i></tt> to <tt class=literal>STDERR</tt> and exits with the current value of <b>$!</B>
(<tt class=literal>errno</tt>).
If <b>$!</B> is 0, it exits with the value of <tt class=literal>($? &gt;&gt; 8)</tt>
(which is the status of the last reaped child from a <a href="#PERL2-CMD-SYSTEM">system</A>, <a href="#PERL2-CMD-WAIT">wait</A>, 
<a href="#PERL2-CMD-CLOSE">close</A> on a pipe, or `command`).
If <tt class=literal>($? &gt;&gt; 8)</tt> is 0, it exits with 255.  If <tt class=replaceable><i>LIST</i></tt> is unspecified,
the current value of the <tt class=literal>$@</tt> variable is propagated, if any.
Otherwise the string <tt class=literal>"Died"</tt> is used as the default.

<p class=para>
Equivalent examples:

<div class=programlisting>
<p>
<pre>

die "Can't cd to spool: $!\n" unless chdir '/usr/spool/news';
chdir '/usr/spool/news' or die "Can't cd to spool: $!\n"
</PRE>
</DIV>

<p class=para>
(The second form is generally preferred, since the important part is
the <a href="#PERL2-CMD-CHDIR">chdir</A>.)

<p class=para>
Within an <a href="#PERL2-CMD-EVAL">eval</A>, the function sets the
<b>$@</B> variable equal to the error message that would
have been produced otherwise, and aborts the <a href="#PERL2-CMD-EVAL">eval</A>, which then returns the undefined value.  The <a href="#PERL2-CMD-DIE">die</A> function can thus be used to raise named
exceptions that can be caught at a higher level in the program.  See the section
on the <a href="#PERL2-CMD-EVAL">eval</A> function later in this chapter.

<p class=para>
If the final value of <tt class=replaceable><i>LIST</i></tt> does not end in a newline, the current
script filename, line number, and input line number (if any) are
appended to the message, as well as a newline.  Hint: sometimes
appending <tt class=literal>`, stopped"</tt> to your message will cause it to
make better sense when the string <tt class=literal>"at scriptname line 123"</tt> is
appended.  Suppose you are running script <i class=emphasis>canasta</I>:

<div class=programlisting>
<p>
<pre>
die "/etc/games is no good";
die "/etc/games is no good, stopped";
</PRE>
</DIV>

<p class=para>
which produces, respectively:

<div class=programlisting>
<p>
<pre>
/etc/games is no good at canasta line 123.
/etc/games is no good, stopped at canasta line 123.
</PRE>
</DIV>

<p class=para>
If you want your own error messages reporting the filename and linenumber, use
the <tt class=literal>_  _FILE_  _</tt> and
<tt class=literal>_  _LINE_  _</tt> special tokens:

<div class=programlisting>
<p>
<pre>
die '"', _  _FILE_  _, '", line ', _  _LINE_  _, ", phooey on you!\n";
</PRE>
</DIV>

<p class=para>
This produces output like:

<div class=programlisting>
<p>
<pre>
"canasta", line 38, phooey on you!
</PRE>
</DIV>

<p class=para>
See also <a href="#PERL2-CMD-EXIT">exit</A> and <a href="#PERL2-CMD-WARN">warn</A>.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-DO">do</A></h3>

<div class=programlisting>
<p>
<pre>
do <tt class=replaceable><i>BLOCK</i></tt>
do <tt class=replaceable><i>SUBROUTINE</i></tt>(<tt class=replaceable><i>LIST</i></tt>)
do <tt class=replaceable><i>EXPR</i></tt>
</PRE>
</DIV>

<p class=para>
The <tt class=literal>do</tt> <tt class=replaceable><i>BLOCK</i></tt> form executes the
sequence of commands in 
the <tt class=replaceable><i>BLOCK</i></tt>, and returns the value of the last
expression evaluated in the block.  
When modified by a loop modifier, Perl
executes the <tt class=replaceable><i>BLOCK</i></tt> once before testing the loop
condition.  (On other statements the loop modifiers test the
conditional first.)  

<p class=para>
The <tt class=literal>do</tt>
<tt class=replaceable><i>SUBROUTINE</i></tt><tt class=literal>(</tt><tt class=replaceable><i>LIST</i></tt><tt class=literal>)</tt>
is a deprecated form of a subroutine
call.  See "Subroutines" in <a href="ch02_01.htm">Chapter 2, <i>The Gory Details</i></A>.

<p class=para>
The
<tt class=literal>do</tt> <tt class=replaceable><i>EXPR</i></tt>,
form uses the value of
<tt class=replaceable><i>EXPR</i></tt>
as a filename and executes the contents of the file
as a Perl script.
Its primary use is (or rather was) to include subroutines from a
Perl subroutine library, so that:

<div class=programlisting>
<p>
<pre>
do 'stat.pl';
</PRE>
</DIV>

<p class=para>
is rather like:

<div class=programlisting>
<p>
<pre>
eval `cat stat.pl`;
</PRE>
</DIV>

<p class=para>
except that it's more efficient, more concise, keeps track of the current
filename for error messages, and searches all the directories listed
in the <b>@INC</B> array.
(See the section on "Special Variables" in <a href="ch02_01.htm">Chapter 2, <i>The Gory Details</i></A>.)
It's the same, however, in that it does reparse the file every time
you call it, so you probably don't want to do this inside a loop.

<p class=para>
Note that inclusion of library modules is better done with the
<a href="#PERL2-CMD-USE">use</A> and <a href="#PERL2-CMD-REQUIRE">require</A> operators, which also do error checking
and raise an exception if there's a problem.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-DUMP">dump</A></h3>

<div class=programlisting>
<p>
<pre>
dump <tt class=replaceable><i>LABEL</i></tt>
dump
</PRE>
</DIV>

<p class=para>
This function causes an immediate core dump.
Primarily this is so that you can use <i class=emphasis>undump</I> (1) to turn
your core dump into an executable binary after having initialized all
your variables at the beginning of the program.
(The <i class=emphasis>undump</I> program is not supplied with the Perl distribution,
and is not even possible on some architectures.  There are hooks in
the code for using the GNU <tt class=literal>unexec()</tt> routine as an alternative.
Other methods may be supported in the future.)  When the new binary is
executed it will begin by executing a <tt class=literal>goto LABEL</tt> (with all the
restrictions that <a href="#PERL2-CMD-GOTO">goto</A> suffers).  Think of the operation as a
<a href="#PERL2-CMD-GOTO">goto</A>
with an intervening core dump and reincarnation.
If <tt class=replaceable><i>LABEL</i></tt> is omitted, the function arranges for the program to restart
from the top.  Please note that any files opened at the time of the
dump will not be open any more when the program is reincarnated,
with possible confusion resulting on the part of Perl.  See also the
<b>-u</B> command-line switch.
For example:

<div class=programlisting>
<p>
<pre>
#!/usr/bin/perl
use Getopt::Std;
use MyHorridModule;
%days = (
    Sun =&gt; 1,
    Mon =&gt; 2,
    Tue =&gt; 3,
    Wed =&gt; 4,
    Thu =&gt; 5,
    Fri =&gt; 6,
    Sat =&gt; 7,
);
dump QUICKSTART if $ARGV[0] eq '-d';
QUICKSTART:
Getopts('f:');
...
</PRE>
</DIV>

<p class=para>
This startup code does some slow initialization code, and then calls
the <a href="#PERL2-CMD-DUMP">dump</A> function to take a snapshot of the program's state.
When the dumped version of the program is run, it bypasses all the
startup code and goes directly to the <tt class=literal>QUICKSTART</tt> label.  If the
original script is invoked without the <b>-d</B> switch, it just falls
through and runs normally.

<p class=para>
If you're looking to use <a href="#PERL2-CMD-DUMP">dump</A> to
speed up your program, check out the discussion of efficiency matters in
<a href="ch08_01.htm">Chapter 8, <i>Other Oddments</i></A>, as well the
Perl native-code compiler in <a href="ch06_01.htm">Chapter 6, <i>Social Engineering</i></A>.  You might also consider autoloading, 
which at least makes it <i class=emphasis>appear</I> to run faster.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-EACH">each</A></h3>

<div class=programlisting>
<p>
<pre>
each <tt class=replaceable><i>HASH</i></tt>
</PRE>
</DIV>

<p class=para>
This function returns a two-element list consisting of the key and
value for the next value of a hash.  With successive
calls to <a href="#PERL2-CMD-EACH">each</A> you can iterate over the entire hash.
Entries are returned in an apparently random order.  When the hash is
entirely read, a null list is returned (which, when used in a list assignment,
produces a false value).  The next call to <a href="#PERL2-CMD-EACH">each</A> after that
will start a new iteration.  The iterator can be reset either by reading
all the elements from the hash, or by calling the <a href="#PERL2-CMD-KEYS">keys</A> function in
scalar context.  You must not add elements to the
hash while iterating over it, although you are permitted to use
<a href="#PERL2-CMD-DELETE">delete</A>.  In a scalar context, 
<b>each</B> returns just the key, but watch out for
false keys.

<p class=para>
There is a single iterator for each hash, shared by all
<a href="#PERL2-CMD-EACH">each</A>, <a href="#PERL2-CMD-KEYS">keys</A>, and <a href="#PERL2-CMD-VALUES">values</A> function calls in
the program.  This means that after a <a href="#PERL2-CMD-KEYS">keys</A> or <a href="#PERL2-CMD-VALUES">values</A> call, the
next <a href="#PERL2-CMD-EACH">each</A> call will start again from the beginning.
The following example prints out your environment like
the <i class=emphasis>printenv</I> (1) program, only in a different order:

<div class=programlisting>
<p>
<pre>
while (($key,$value) = each %ENV) {
    print "$key=$value\n";
}
</PRE>
</DIV>

<p class=para>
See also <a href="#PERL2-CMD-KEYS">keys</A> and <a href="#PERL2-CMD-VALUES">values</A>.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-EOF">eof</A></h3>

<div class=programlisting>
<p>
<pre>
eof <tt class=replaceable><i>FILEHANDLE</i></tt>
eof()
eof
</PRE>
</DIV>

<p class=para>
This function returns true if the next read on <tt class=replaceable><i>FILEHANDLE</i></tt> will return
end of file, or if <tt class=replaceable><i>FILEHANDLE</i></tt> is not open.
<tt class=replaceable><i>FILEHANDLE</i></tt> may be an expression whose value gives the real filehandle
name.
An <a href="#PERL2-CMD-EOF">eof</A> without an argument returns the end-of-file
status for the last file read.
Empty parentheses <tt class=literal>()</tt> may be used in connection with the
combined files listed on the command line.  That is, inside a
<tt class=literal>while (&lt;&gt;)</tt> loop <tt class=literal>eof()</tt> will detect the
end of only the last of a group of files.
Use <tt class=literal>eof(ARGV)</tt> or <tt class=literal>eof</tt> (without the parentheses) to test
<i class=emphasis>each</I> file in a <tt class=literal>while (&lt;&gt;)</tt> loop.  For example, the
following code inserts dashes just before the last line of
the <i class=emphasis>last</I>
file:

<div class=programlisting>
<p>
<pre>
while (&lt;&gt;) {
    if (eof()) {
        print "-" x 30, "\n";
    }
    print;
}
</PRE>
</DIV>

<p class=para>
On the other hand, this script resets line numbering on <i class=emphasis>each</I>
input file:

<div class=programlisting>
<p>
<pre>
while (&lt;&gt;) {
    print "$.\t$_";
    if (eof) {       # Not eof().
        close ARGV;  # reset $.
    }
}
</PRE>
</DIV>

<p class=para>
Like "<tt class=literal>$</tt>" in a <i class=emphasis>sed</I> program, <a href="#PERL2-CMD-EOF">eof</A> tends to show up in
line number ranges.  Here's a script that prints lines from
<tt class=literal>/pattern/</tt> to end of each input file:

<div class=programlisting>
<p>
<pre>
while (&lt;&gt;) {
    print if /pattern/ .. eof;
}
</PRE>
</DIV>

<p class=para>
Here, the flip-flop operator (<tt class=literal>..</tt>) evaluates the regular expression
match for each line.  Until the pattern matches, the operator returns
false.  When it finally matches, the operator starts returning true,
causing the lines to be printed.  When the <a href="#PERL2-CMD-EOF">eof</A> operator finally
returns true (at the end of the file being examined), the flip-flop
operator resets, and starts returning false again.

<p class=para>
Note that the <a href="#PERL2-CMD-EOF">eof</A> function actually reads a byte and then
pushes it back on the input stream with
<i class=emphasis>ungetc</I> (3), so it is not very useful in an interactive context.
In fact, experienced Perl programmers rarely use <a href="#PERL2-CMD-EOF">eof</A>, since the various
input operators already behave quite nicely in <b>while</B>-loop conditionals.
See the example in the description of <b>foreach</B> in <a href="ch02_01.htm">Chapter 2, <i>The Gory Details</i></A>.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-EVAL">eval</A></h3>

<div class=programlisting>
<p>
<pre>
eval <tt class=replaceable><i>EXPR</i></tt>
eval <tt class=replaceable><i>BLOCK</i></tt>
</PRE>
</DIV>

<p class=para>
<a name="CH03.EVAL"></A>The value expressed by <tt class=replaceable><i>EXPR</i></tt> is parsed and executed as though it were a
little Perl program.  It is executed in the context of the current
Perl program, so that any variable settings remain afterward, as do
any subroutine or format definitions.  The code of the <a href="#PERL2-CMD-EVAL">eval</A> is treated as a
block, so any locally scoped variables declared within the <a href="#PERL2-CMD-EVAL">eval</A> last
only until the <a href="#PERL2-CMD-EVAL">eval</A> is done.
(See <a href="#PERL2-CMD-LOCAL">local</A> and <a href="#PERL2-CMD-MY">my</A>.)
As with any code in a block, a final semicolon is not required.
If <tt class=replaceable><i>EXPR</i></tt> is omitted, the operator evaluates <b>$_</B>.

<p class=para>
The value returned from an <a href="#PERL2-CMD-EVAL">eval</A> is the value of the last expression evaluated, just
as with subroutines.  Similarly, you may use the <a href="#PERL2-CMD-RETURN">return</A> operator to
return a value from the middle of the <a href="#PERL2-CMD-EVAL">eval</A>.
If there is a syntax error or run-time error
(including any produced by the <a href="#PERL2-CMD-DIE">die</A> operator), <a href="#PERL2-CMD-EVAL">eval</A> returns
the undefined value and puts the error message in <b>$@</B>.
If there is no error, <b>$@</B> is guaranteed to be set to the null
string, so you can test it reliably afterward for errors.

<p class=para>
Here's a statement that
assigns an element to a hash chosen at run-time:

<div class=programlisting>
<p>
<pre>
eval "\$$arrayname{\$key} = 1";
</PRE>
</DIV>

<p class=para>
(You can accomplish that more simply with soft references--see
"Symbolic References" in <a href="ch04_01.htm">Chapter 4, <i>References and Nested Data Structures</i></A>.)
And here is a simple Perl shell:

<div class=programlisting>
<p>
<pre>
while (&lt;&gt;) { eval; print $@; }
</PRE>
</DIV>

<p class=para>
Since <a href="#PERL2-CMD-EVAL">eval</A> traps otherwise-fatal errors, it is useful
for determining whether a particular feature (such as <a href="#PERL2-CMD-SOCKET">socket</A> or
<a href="#PERL2-CMD-SYMLINK">symlink</A>) is implemented.
In fact, <a href="#PERL2-CMD-EVAL">eval</A> is the way to do all
exception handling in Perl. If the code to be executed doesn't vary,
you should use the
<tt class=literal>eval</tt> <tt class=replaceable><i>BLOCK</i></tt> form to trap
run-time errors; 
the code in the block is
compiled only once rather than on each execution, yielding greater
efficiency.  The error, if any, is still
returned in <b>$@</B>.  Examples:

<div class=programlisting>
<p>
<pre>
# make divide-by-zero non-fatal
eval { $answer = $a / $b; }; warn $@ if $@;
# same thing, but less efficient
eval '$answer = $a / $b'; warn $@ if $@;
# a compile-time error (not trapped)
eval { $answer = };
# a run-time error
eval '$answer =';  # sets $@
</PRE>
</DIV>

<p class=para>
Here, the code in the <tt class=replaceable><i>BLOCK</i></tt> has to be valid Perl code
to make it past the compilation phase.  The code in the string doesn't get
examined until run-time, and so doesn't cause an error until run-time.

<p class=para>
With an <a href="#PERL2-CMD-EVAL">eval</A> you should be careful
to remember what's being looked at when:

<div class=programlisting>
<p>
<pre>
eval $x;          # CASE 1
eval "$x";        # CASE 2
eval '$x';        # CASE 3
eval { $x };      # CASE 4
eval "\$$x++";    # CASE 5
$$x++;            # CASE 6
</PRE>
</DIV>

<p class=para>
Cases 1 and 2 above behave identically: they run the code contained in
the variable <tt class=literal>$x</tt>.  (Case 2 has misleading double quotes,
making the reader wonder what else might be happening, when nothing is.
The contents of <tt class=literal>$x</tt> would in any event have to be converted to
a string for parsing.)
Cases 3 and 4 likewise behave in the same way: they run the code
<tt class=literal>$x</tt>, which does nothing at all except return the value of <tt class=literal>$x</tt>.
(Case 4 is preferred since the expression doesn't need to recompiled each time.)
Case 5 is a place where normally you <i class=emphasis>would</I> like to use double quotes
to let you interpolate the variable name, except that in this particular
situation you can just use symbolic references instead, as in case 6.

<p class=para>
A frequently asked question is how to set up an exit routine.
One common way is to use an <tt class=literal>END</tt> block.
But you can also do it with an <a href="#PERL2-CMD-EVAL">eval</A>, like this:

<div class=programlisting>
<p>
<pre>
#!/usr/bin/perl
eval &lt;&lt;'EndOfEval';  $start = __LINE__;
   .
   .           # your ad here
   .
EndOfEval
# Cleanup
unlink "/tmp/myfile$$";
$@ &amp;&amp; ($@ =~ s/\(eval \d+\) at line (\d+)/$0 .
    " line " . ($1+$start)/e, die $@);
exit 0;
</PRE>
</DIV>

<p class=para>
Note that the code supplied for an <b>eval</B> might not
be recompiled if the text hasn't changed.  On the rare occasions when you want
to force a recompilation (because you want to reset a <tt class=literal>..</tt> operator, for instance), you could say something like
this:

<div class=programlisting>
<p>
<pre>
eval $prog . '#' . ++$seq;
</PRE>
</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-EXEC">exec</A></h3>

<div class=programlisting>
<p>
<pre>
exec <tt class=replaceable><i>LIST</i></tt>
</PRE>
</DIV>

<p class=para>
This function terminates the currently running Perl script by
executing another program in place of itself.  If there is more than
one argument in <tt class=replaceable><i>LIST</i></tt> (or if <tt class=replaceable><i>LIST</i></tt>
is an array with more than one value)
the function calls C's <i class=emphasis>execvp</I> (3) routine with the arguments in
<tt class=replaceable><i>LIST</i></tt>.  This bypasses any shell processing of the command.
If there is only one scalar argument, the argument is checked
for shell metacharacters.  If metacharacters are found, the entire argument is
passed to "<tt class=literal>/bin/sh -c</tt>" for parsing.[3]
If there are no metacharacters, the argument is split into words and passed
directly to <i class=emphasis>execvp</I> (3) in the interests of efficiency, since
this bypasses all the overhead of shell processing.
Ordinarily <a href="#PERL2-CMD-EXEC">exec</A> never returns--if it does return, it always
returns false, and you should check <b>$!</B> to find out what went
wrong.
Note that <a href="#PERL2-CMD-EXEC">exec</A> (and <a href="#PERL2-CMD-SYSTEM">system</A>) do not flush your output
buffer, so you may need to enable command buffering by setting
<b>$|</B> on one or more filehandles to avoid lost output.
This statement runs the <i class=emphasis>echo</I> program to print the current argument list:

<blockquote class=footnote>
<p class=para>[3] 
Under UNIX, that is.  Other operating systems may use other command interpreters.
</blockquote>
<div class=programlisting>
<p>
<pre>
exec 'echo', 'Your arguments are: ', @ARGV;
</PRE>
</DIV>

<p class=para>
This example shows that you can <a href="#PERL2-CMD-EXEC">exec</A> a pipeline:

<div class=programlisting>
<p>
<pre>
exec "sort $outfile | uniq"
  or die "Can't do sort/uniq: $!\n";
</PRE>
</DIV>

<p class=para>
The UNIX <i class=emphasis>execv</I> (3) call provides the ability to tell a
program the name it was invoked as.  This name might have nothing to
do with the name of the program you actually gave the operating system
to run.  By default, Perl simply replicates the first element of <tt class=replaceable><i>LIST</i></tt>
and uses it for both purposes.  If, however, you don't really want to
execute the first argument of <tt class=replaceable><i>LIST</i></tt>, but you want to lie to the program
you are executing about its own name, you can do so.
Put the real name of the program
you want to run into a variable and
then put that variable out in front of the <tt class=replaceable><i>LIST</i></tt> <i class=emphasis>without</I> a comma,
kind of like a filehandle for a <a href="#PERL2-CMD-PRINT">print</A> statement.  (This always
forces interpretation of the <tt class=replaceable><i>LIST</i></tt> as a multi-valued list, even if
there is only a single scalar in the list.)  Then the first element of
<tt class=replaceable><i>LIST</i></tt> will be used only to mislead the executing program as to its
name.  For example:

<div class=programlisting>
<p>
<pre>
$shell = '/bin/csh';
exec $shell '-sh', @args;      # pretend it's a login shell
die "Couldn't execute csh: $!\n";
</PRE>
</DIV>

<p class=para>
You can also replace the simple scalar holding the program name with a
block containing arbitrary code, which simplifies the above example
to:

<div class=programlisting>
<p>
<pre>
exec {'/bin/csh'} '-sh', @args; # pretend it's a login shell
</PRE>
</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-EXISTS">exists</A></h3>

<div class=programlisting>
<p>
<pre>
exists <tt class=replaceable><i>EXPR</i></tt>
</PRE>
</DIV>

<p class=para>
This function returns true if the specified hash key exists in its hash, even
if the corresponding value is undefined.

<div class=programlisting>
<p>
<pre>
print "Exists\n" if exists $hash{$key};
print "Defined\n" if defined $hash{$key};
print "True\n" if $hash{$key};
</PRE>
</DIV>

<p class=para>
A hash element can only be true if it's defined, and can only be defined if
it exists, but the reverse doesn't necessarily hold true in either case.

<p class=para>
<tt class=replaceable><i>EXPR</i></tt> can be arbitrarily complicated as long as the final
operation is a hash key lookup:

<div class=programlisting>
<p>
<pre>
if (exists $ref-&gt;[$x][$y]{$key}) { ... }
</PRE>
</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-EXIT">exit</A></h3>

<div class=programlisting>
<p>
<pre>
exit <tt class=replaceable><i>EXPR</i></tt>
</PRE>
</DIV>

<p class=para>
This function evaluates <tt class=replaceable><i>EXPR</i></tt> and exits immediately with that value.
Here's a fragment that lets a user exit the program by typing <tt class=literal>x</tt>
or <tt class=literal>X</tt>:

<div class=programlisting>
<p>
<pre>
$ans = &lt;STDIN&gt;;
exit 0 if $ans =~ /^[Xx]/;
</PRE>
</DIV>

<p class=para>
If <tt class=replaceable><i>EXPR</i></tt> is omitted, the function exits with 0 status.  You shouldn't
use <a href="#PERL2-CMD-EXIT">exit</A> to abort a subroutine if there's any chance that
someone might want to trap whatever error happened.  Use <a href="#PERL2-CMD-DIE">die</A>
instead, which can be trapped by an <a href="#PERL2-CMD-EVAL">eval</A>.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-EXP">exp</A></h3>

<div class=programlisting>
<p>
<pre>
exp <tt class=replaceable><i>EXPR</i></tt>
</PRE>
</DIV>

<p class=para>
This function returns <i class=emphasis>e</I> to the power of
<tt class=replaceable><i>EXPR</i></tt>.  If <tt class=replaceable><i>EXPR</i></tt> is
omitted, it gives <tt class=literal>exp($_)</tt>.
To do general exponentiation, use the <tt class=literal>**</tt> operator.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-FCNTL">fcntl</A></h3>

<div class=programlisting>
<p>
<pre>
fcntl <tt class=replaceable><i>FILEHANDLE</i></tt>, <tt class=replaceable><i>FUNCTION</i></tt>, <tt class=replaceable><i>SCALAR</i></tt>
</PRE>
</DIV>

<p class=para>
This function calls UNIX's <i class=emphasis>fcntl</I> (2) function.
(<i class=emphasis>fcntl</I> stands for "file control".)
You'll probably have to say:

<div class=programlisting>
<p>
<pre>
use Fcntl;
</PRE>
</DIV>

<p class=para>
first to get the correct function definitions.
<tt class=replaceable><i>SCALAR</i></tt> will be read and/or written depending on the
<tt class=replaceable><i>FUNCTION</i></tt>--a pointer to the string value of
<tt class=replaceable><i>SCALAR</i></tt> will be passed as the third argument of the
actual <i class=emphasis>fcntl</I> call.  (If <tt class=replaceable><i>SCALAR</i></tt>
has no string value but does have a numeric value, that value will be passed
directly rather than a pointer to the string value.)

<p class=para>
The return value of <a href="#PERL2-CMD-FCNTL">fcntl</A> (and <a href="#PERL2-CMD-IOCTL">ioctl</A>) is as follows:

<div class=informaltable>
<p>
<a name="PERL2-CH-3-TAB-1"></A>

<table class=INFORMALTABLE>
<tr class=row>
<th align="left">System call returns</TH>
<th align="left">Perl returns</TH>
</TR>
<tr class=row>
<td align="left">-1</TD>
<td align="left">undefined value</TD>
</TR>
<tr class=row>
<td align="left">0</TD>
<td align="left">string "<tt class=literal>0 but true</tt>"</TD>
</TR>
<tr class=row>
<td align="left">anything else</TD>
<td align="left">that number</TD>
</TR>
</TABLE>
<p>
</DIV>

<p class=para>
Thus Perl returns true on success and false on failure, yet you can still
easily determine the actual value returned by the operating system:

<div class=programlisting>
<p>
<pre>
$retval = fcntl(...) or $retval = -1;
printf "System returned %d\n", $retval;
</PRE>
</DIV>

<p class=para>
Here, even the string "<tt class=literal>0 but true</tt>" prints as 0, thanks to the
<tt class=literal>%d</tt> format.

<p class=para>
For example, since Perl always sets the close-on-exec flag for file
descriptors above 2, if you wanted to pass file descriptor 3 to a
subprocess, you might want to clear the flag like this:

<div class=programlisting>
<p>
<pre>
use Fcntl;
open TTY,"+&gt;/dev/tty" or die "Can't open /dev/tty: $!\n";
fileno TTY == 3 or die "Internal error: fd mixup";
fcntl TTY, &amp;F_SETFL, 0
    or die "Can't clear the close-on-exec flag: $!\n";
</PRE>
</DIV>

<p class=para>
<a href="#PERL2-CMD-FCNTL">fcntl</A> will produce a fatal error if used on a machine
that doesn't implement <i class=emphasis>fcntl</I> (2).  On machines that do implement
it, you can do such things as modify the close-on-exec flags, modify
the non-blocking I/O flags, emulate the <i class=emphasis>lockf</I> (3) function, and
arrange to receive the <tt class=literal>SIGIO</tt> signal when I/O is pending.  You
might even have record-locking facilities.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-FILENO">fileno</A></h3>

<div class=programlisting>
<p>
<pre>
fileno <tt class=replaceable><i>FILEHANDLE</i></tt>
</PRE>
</DIV>

<p class=para>
This function returns the file descriptor for a filehandle.
(A <i class=emphasis>file descriptor</I> is a small integer, unlike the filehandle, which
is a symbol.)  It returns <a href="#PERL2-CMD-UNDEF">undef</A> if the handle is not open.
It's useful for constructing bitmaps for <b>select</B>, and for
passing to certain obscure system calls if <i class=emphasis>syscall</I> (2) is
implemented.
It's also useful for double-checking that the <a href="#PERL2-CMD-OPEN">open</A> function
gave you the file descriptor you wanted--see the example under
<a href="#PERL2-CMD-FCNTL">fcntl</A>.

<p class=para>
If <tt class=replaceable><i>FILEHANDLE</i></tt> is an expression, its value is taken
to represent a filehandle, either indirectly by name, or directly
as a reference to a filehandle object.

<p class=para>
A caution: don't count on the association of a Perl filehandle and a
numeric file descriptor throughout the life of the program.  If a file
has been closed and reopened, the file descriptor may change.
Filehandles <tt class=literal>STDIN</tt>, <tt class=literal>STDOUT</tt>, and <tt class=literal>STDERR</tt> start with
file descriptors of 0, 1, and 2 (the UNIX standard convention),
but even they can change if you start closing and opening them with
wild abandon.
But you can't get into trouble with 0, 1, and 2 as long as you always
reopen immediately after closing, since the basic rule on UNIX
systems is to pick the lowest available descriptor, and that'll be the
one you just closed.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-FLOCK">flock</A></h3>

<div class=programlisting>
<p>
<pre>
flock <tt class=replaceable><i>FILEHANDLE</i></tt>, <tt class=replaceable><i>OPERATION</i></tt>
</PRE>
</DIV>

<p class=para>
This function calls <i class=emphasis>flock</I> (2) on <tt class=replaceable><i>FILEHANDLE</i></tt>.
See the manual page for <i class=emphasis>flock</I> (2) for the definition of <tt class=replaceable><i>OPERATION</i></tt>.
Invoking <a href="#PERL2-CMD-FLOCK">flock</A> will produce a fatal error if used on a machine
that doesn't implement <i class=emphasis>flock</I> (2) or emulate it 
through some other
locking mechanism.  Here's a mailbox appender for some BSD-based systems:

<div class=programlisting>
<p>
<pre>
$LOCK_SH = 1;
$LOCK_EX = 2;
$LOCK_NB = 4;
$LOCK_UN = 8;
sub lock {
    flock MBOX, $LOCK_EX;
    # and, in case someone appended
    # while we were waiting...
    seek MBOX, 0, 2;
}
sub unlock {
    flock MBOX, $LOCK_UN;
}
open MBOX, "&gt;&gt;/usr/spool/mail/$ENV{'USER'}"
    or die "Can't open mailbox: $!";
lock();
print MBOX $msg, "\n\n";
unlock();
</PRE>
</DIV>

<p class=para>
Note that <a href="#PERL2-CMD-FLOCK">flock</A> is unlikely to work on a file being accessed
through a network file system.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-FORK">fork</A></h3>

<div class=programlisting>
<p>
<pre>
fork
</PRE>
</DIV>

<p class=para>
This function does a <i class=emphasis>fork</I> (2) call.  If it succeeds, the
function returns the child pid to the parent process and 0 to the
child process.  (If it fails, it returns the undefined value to the
parent process. There is no child process.)
Note that unflushed buffers remain unflushed in both
processes, which means you may need to set <b>$|</B> on one or more
filehandles earlier in the program to avoid duplicate output.

<p class=para>
A nearly bulletproof way to launch a child process while checking for
"cannot fork" errors would be:

<div class=programlisting>
<p>
<pre>
FORK: {
    if ($pid = fork) {
        # parent here
        # child process pid is available in $pid
    } elsif (defined $pid) { # $pid is zero here if defined
        # child here
        # parent process pid is available with getppid
    } elsif ($! =~ /No more process/) {     
        # EAGAIN, supposedly recoverable fork error
        sleep 5;
        redo FORK;
    } else {
        # weird fork error
        die "Can't fork: $!\n";
    }
}
</PRE>
</DIV>

<p class=para>
These precautions are not necessary on operations which do an implicit
<i class=emphasis>fork</I> (2), such as <a href="#PERL2-CMD-SYSTEM">system</A>, backquotes, or opening a process
as a filehandle, because Perl automatically retries a fork on a temporary
failure in these cases.
Be very careful to end the child code with an
<a href="#PERL2-CMD-EXIT">exit</A>, or your child may inadvertently leave the conditional and
start executing code intended only for the parent process.

<p class=para>
If you <a href="#PERL2-CMD-FORK">fork</A> your child processes, you'll have to <a href="#PERL2-CMD-WAIT">wait</A> on their
zombies when they die.  See the <a href="#PERL2-CMD-WAIT">wait</A> function for examples of
doing this.

<p class=para>
The <a href="#PERL2-CMD-FORK">fork</A> function is unlikely to be implemented on any operating system
not resembling UNIX, unless it purports POSIX compliance.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-FORMAT">format</A></h3>

<div class=programlisting>
<p>
<pre>
format <tt class=replaceable><i>NAME</i></tt> =
    <tt class=replaceable><i>picture line</i></tt>
    <tt class=replaceable><i>value list</i></tt>
    ...
.
</PRE>
</DIV>

<p class=para>
Declares a named sequence of picture lines (with associated values) for
use by the <a href="#PERL2-CMD-WRITE">write</A> function.  If <tt class=replaceable><i>NAME</i></tt> is omitted, the name
defaults to <tt class=literal>STDOUT,</tt> which happens to be the default format name for the
<tt class=literal>STDOUT</tt> filehandle.  Since, like a <a href="#PERL2-CMD-SUB">sub</A> declaration, this is a
global declaration that happens at compile time, any variables used
in the value list need to be visible at the point of the format's
declaration.  That is, lexically scoped variables must be declared
earlier in the file, while dynamically scoped variables merely need to
be set in the routine that calls <a href="#PERL2-CMD-WRITE">write</A>.  Here's an example (which
assumes we've already calculated <tt class=literal>$cost</tt> and <tt class=literal>$quantity</tt>:

<div class=programlisting>
<p>
<pre>
my $str = "widget";               # A lexically scoped variable.
format Nice_Output =
Test: @&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; @||||| @&gt;&gt;&gt;&gt;&gt;
      $str,     $%,    '$' . int($num)
.
$~ = "Nice_Output";               # Select our format.
local $num = $cost * $quantity;   # Dynamically scoped variable.
write;
</PRE>
</DIV>

<p class=para>
Like filehandles, format names are identifiers that exist in a symbol table
(package) and may be fully qualified by package name.  Within the typeglobs of a
symbol table's entries, formats reside in their own namespace, which is distinct
from filehandles, directory handles, scalars, arrays, hashes, or subroutines.
Like those other six types, however, a format named <tt class=literal>Whatever</tt>
would also be affected by a <a href="#PERL2-CMD-LOCAL">local</A> on the
<tt class=literal>*Whatever</tt> typeglob.  In other words, a format is just another
gadget contained in a typeglob, independent of the other gadgets.

<p class=para>
The "Formats" section in <a href="ch02_01.htm">Chapter 2, <i>The Gory Details</i></A> contains numerous details
and examples of their use.  The "Per Filehandle Special Variables" and "Global
Special Variables" sections in <a href="ch02_01.htm">Chapter 2, <i>The Gory Details</i></A> describe the internal
format-specific variables, and the English and FileHandle modules in <a href="ch07_01.htm">Chapter 7, <i>The Standard Perl Library</i></A> provide easier access to them.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-FORMLINE">formline</A></h3>

<div class=programlisting>
<p>
<pre>
formline <tt class=replaceable><i>PICTURE</i></tt>, <tt class=replaceable><i>LIST</i></tt>
</PRE>
</DIV>

<p class=para>
This is an internal function used by formats, although you may
also call it.  It formats a
list of values according to the contents of <tt class=replaceable><i>PICTURE</i></tt>, placing the
output into the format output accumulator, <b>$^A</B>.  Eventually,
when a <a href="#PERL2-CMD-WRITE">write</A> is done, the contents of <b>$^A</B> are written to
some filehandle, but you could also read <b>$^A</B> yourself and then
set <b>$^A</B> back to <tt class=literal>""</tt>.  Note that a format typically does
one <a href="#PERL2-CMD-FORMLINE">formline</A> per line of form, but the <a href="#PERL2-CMD-FORMLINE">formline</A> function
itself doesn't care how many newlines are embedded in the <tt class=replaceable><i>PICTURE</i></tt>.
This means that the <tt class=literal>~</tt> and <tt class=literal>~~</tt> tokens will treat the
entire <tt class=replaceable><i>PICTURE</i></tt> as a single line.  You may therefore need to use
multiple formlines to implement a single record-format, just like the
format compiler.

<p class=para>
Be careful if you put double quotes around the picture, since an <tt class=literal>@</tt>
character may be taken to mean the beginning of an array name.
<a href="#PERL2-CMD-FORMLINE">formline</A> always returns true.
See "Formats" in <a href="ch02_01.htm">Chapter 2, <i>The Gory Details</i></A> for other examples.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-GETC">getc</A></h3>

<div class=programlisting>
<p>
<pre>
getc <tt class=replaceable><i>FILEHANDLE</i></tt>
getc
</PRE>
</DIV>

<p class=para>
This function returns the next byte from the input file attached
to <tt class=replaceable><i>FILEHANDLE</i></tt>.  At end-of-file, it returns a null string.  If
<tt class=replaceable><i>FILEHANDLE</i></tt> is
omitted, the function reads from <tt class=literal>STDIN</tt>.  This operator is
very slow, but is occasionally useful for single-character,
buffered input from the keyboard.  This does <i class=emphasis>not</I> enable single-character
input.  For unbuffered input, you have
to be slightly more clever, in an operating-system-dependent fashion.
Under UNIX you might say this:

<div class=programlisting>
<p>
<pre>
if ($BSD_STYLE) {
  system "stty cbreak &lt;/dev/tty &gt;/dev/tty 2&gt;&amp;1";
} else {
  system "stty", "-icanon", "eol", "\001";
}
$key = getc;
if ($BSD_STYLE) {
  system "stty -cbreak &lt;/dev/tty &gt;/dev/tty 2&gt;&amp;1";
} else {
  system "stty", "icanon", "eol", "^@"; # ASCII NUL
}
print "\n";
</PRE>
</DIV>

<p class=para>
This code puts the next character typed on the terminal in the string
<tt class=literal>$key</tt>.  If your <i class=emphasis>stty</I> program has options like <tt class=literal>cbreak</tt>,
you'll need to use the code where <tt class=literal>$BSD_STYLE</tt> is true,
otherwise, you'll need to use the code where it is false.  Determining
the options for <i class=emphasis>stty</I> is left as an exercise to the reader.

<p class=para>
The POSIX module in <a href="ch07_01.htm">Chapter 7, <i>The Standard Perl Library</i></A> provides a more portable version of
this using the <tt class=literal>POSIX::getattr()</tt> function.
See also the TERM::ReadKey module from your nearest CPAN site.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-GETGRENT">getgrent</A></h3>

<div class=programlisting>
<p>
<pre>
getgrent
setgrent
endgrent
</PRE>
</DIV>

<p class=para>
These functions do the same thing as their like-named system library
routines--see <i class=emphasis>getgrent</I> (3).  These routines iterate through your
<i class=emphasis>/etc/group</I> file (or its moral equivalent coming from some server
somewhere).  The return value from <a href="#PERL2-CMD-GETGRENT">getgrent</A>
in list context is:

<div class=programlisting>
<p>
<pre>
($name, $passwd, $gid, $members)
</PRE>
</DIV>

<p class=para>
where
<tt class=literal>$members</tt>
contains a space-separated list of the login names of the members of the group.
To set up a hash for translating group names to gids,
say this:

<div class=programlisting>
<p>
<pre>
while (($name, $passwd, $gid) = getgrent) {
    $gid{$name} = $gid;
}
</PRE>
</DIV>

<p class=para>
In scalar context, <a href="#PERL2-CMD-GETGRENT">getgrent</A> returns only the group name.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-GETGRGID">getgrgid</A></h3>

<div class=programlisting>
<p>
<pre>
getgrgid <tt class=replaceable><i>GID</i></tt>
</PRE>
</DIV>

<p class=para>
This function does the same thing as
<i class=emphasis>getgrgid</I> (3):  it looks
up a group file entry by group number.
The return value in list context is:

<div class=programlisting>
<p>
<pre>
($name, $passwd, $gid, $members)
</PRE>
</DIV>

<p class=para>
where
<tt class=literal>$members</tt>
contains a space-separated list of the login names of the members of the group.
If you want to do this repeatedly, consider caching the data in a hash
(associative array) using
<a href="#PERL2-CMD-GETGRENT">getgrent</A>.

<p class=para>
In scalar context, <a href="#PERL2-CMD-GETGRGID">getgrgid</A> returns only the group name.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-GETGRNAM">getgrnam</A></h3>

<div class=programlisting>
<p>
<pre>
getgrnam <tt class=replaceable><i>NAME</i></tt>
</PRE>
</DIV>

<p class=para>
This function does the same thing as
<i class=emphasis>getgrnam</I> (3):  it looks
up a group file entry by group name.
The return value in list context is:

<div class=programlisting>
<p>
<pre>
($name, $passwd, $gid, $members)
</PRE>
</DIV>

<p class=para>
where
<tt class=literal>$members</tt>
contains a space-separated list of the login names of the members of the group.
If you want to do this repeatedly, consider slurping the data into a hash
(associative array) using
<a href="#PERL2-CMD-GETGRENT">getgrent</A>.

<p class=para>
In scalar context, <a href="#PERL2-CMD-GETGRNAM">getgrnam</A> returns only the numeric group ID.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-GETHOSTBYADDR">gethostbyaddr</A></h3>

<div class=programlisting>
<p>
<pre>
gethostbyaddr <tt class=replaceable><i>ADDR</i></tt>, <tt class=replaceable><i>ADDRTYPE</i></tt>
</PRE>
</DIV>

<p class=para>
This function does the same thing as
<i class=emphasis>gethostbyaddr</I> (3):  it translates
a packed binary network address to its corresponding
names (and alternate addresses).
The return value in list context is:

<div class=programlisting>
<p>
<pre>
($name, $aliases, $addrtype, $length, @addrs)
</PRE>
</DIV>

<p class=para>
where
<tt class=literal>@addrs</tt>
is a list of packed binary addresses.  In the Internet domain, each address is
four bytes long, and can be unpacked by saying something like:

<div class=programlisting>
<p>
<pre>
($a, $b, $c, $d) = unpack('C4', $addrs[0]);
</PRE>
</DIV>

<p class=para>
In scalar context, <a href="#PERL2-CMD-GETHOSTBYADDR">gethostbyaddr</A> returns only the host name.
See the section on "Sockets" in <a href="ch06_01.htm">Chapter 6, <i>Social Engineering</i></A> for another approach.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-GETHOSTBYNAME">gethostbyname</A></h3>

<div class=programlisting>
<p>
<pre>
gethostbyname <tt class=replaceable><i>NAME</i></tt>
</PRE>
</DIV>

<p class=para>
This function does the same thing as
<i class=emphasis>gethostbyname</I> (3):  it translates
a network hostname to its corresponding
addresses (and other names).
The return value in list context is:

<div class=programlisting>
<p>
<pre>
($name, $aliases, $addrtype, $length, @addrs)
</PRE>
</DIV>

<p class=para>
where
<tt class=literal>@addrs</tt>
is a list of raw addresses.  In the Internet domain, each address is
four bytes long, and can be unpacked by saying something like:

<div class=programlisting>
<p>
<pre>
($a, $b, $c, $d) = unpack('C4', $addrs[0]);
</PRE>
</DIV>

<p class=para>
In scalar context, <a href="#PERL2-CMD-GETHOSTBYNAME">gethostbyname</A> returns only the host address.
See the section on "Sockets" in <a href="ch06_01.htm">Chapter 6, <i>Social Engineering</i></A> for another approach.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-GETHOSTENT">gethostent</A></h3>

<div class=programlisting>
<p>
<pre>
gethostent
sethostent <tt class=replaceable><i>STAYOPEN</i></tt>
endhostent
</PRE>
</DIV>

<p class=para>
These functions do the same thing as their like-named system library
routines--see <i class=emphasis>gethostent</I> (3).

<p class=para>
They iterate through your <i class=emphasis>/etc/hosts</I>
file and return each entry one at a time.
The return value from <a href="#PERL2-CMD-GETHOSTENT">gethostent</A> is:

<div class=programlisting>
<p>
<pre>
($name, $aliases, $addrtype, $length, @addrs)
</PRE>
</DIV>

<p class=para>
where
<tt class=literal>@addrs</tt>
is a list of raw addresses.  In the Internet domain, each address is
four bytes long, and can be unpacked by saying something like:

<div class=programlisting>
<p>
<pre>
($a, $b, $c, $d) = unpack('C4', $addrs[0]);
</PRE>
</DIV>

<p class=para>
Scripts that use these routines should not be considered portable.
If a machine uses
a nameserver, it would interrogate most of the Internet to try
to satisfy a request for all the addresses of every machine on the
planet.  So these routines are unimplemented on such machines.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-GETLOGIN">getlogin</A></h3>

<div class=programlisting>
<p>
<pre>
getlogin
</PRE>
</DIV>

<p class=para>
This function returns the current login from <i class=emphasis>/etc/utmp</I>, if any.
If null, use <a href="#PERL2-CMD-GETPWUID">getpwuid</A>.  For example:

<div class=programlisting>
<p>
<pre>
$login = getlogin || (getpwuid($&lt;))[0] || "Intruder!!";
</PRE>
</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-GETNETBYADDR">getnetbyaddr</A></h3>

<div class=programlisting>
<p>
<pre>
getnetbyaddr <tt class=replaceable><i>ADDR</i></tt>, <tt class=replaceable><i>ADDRTYPE</i></tt>
</PRE>
</DIV>

<p class=para>
This function does the same thing as <i class=emphasis>getnetbyaddr</I> (3):  it translates
a network address to the corresponding network name or names.  The
return value in list context is:

<div class=programlisting>
<p>
<pre>
($name, $aliases, $addrtype, $net)
</PRE>
</DIV>

<p class=para>
In scalar context, <a href="#PERL2-CMD-GETNETBYADDR">getnetbyaddr</A> returns only the network name.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-GETNETBYNAME">getnetbyname</A></h3>

<div class=programlisting>
<p>
<pre>
getnetbyname <tt class=replaceable><i>NAME</i></tt>
</PRE>
</DIV>

<p class=para>
This function does the same thing as
<i class=emphasis>getnetbyname</I> (3):  it translates
a network name to its corresponding
network address.
The return value in list context is:

<div class=programlisting>
<p>
<pre>
($name, $aliases, $addrtype, $net)
</PRE>
</DIV>

<p class=para>
In scalar context, <a href="#PERL2-CMD-GETNETBYNAME">getnetbyname</A> returns only the network address.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-GETNETENT">getnetent</A></h3>

<div class=programlisting>
<p>
<pre>
getnetent
setnetent <tt class=replaceable><i>STAYOPEN</i></tt>
endnetent
</PRE>
</DIV>

<p class=para>
These functions do the same thing as their like-named system library
routines--see
<i class=emphasis>getnetent</I> (3). They iterate through your
<i class=emphasis>/etc/networks</I> file, or moral equivalent.
The return value in list context is:

<div class=programlisting>
<p>
<pre>
($name, $aliases, $addrtype, $net)
</PRE>
</DIV>

<p class=para>
In scalar context, <a href="#PERL2-CMD-GETNETENT">getnetent</A> returns only the network name.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-GETPEERNAME">getpeername</A></h3>

<div class=programlisting>
<p>
<pre>
getpeername <tt class=replaceable><i>SOCKET</i></tt>
</PRE>
</DIV>

<p class=para>
This function returns the packed socket address of other end of the
<tt class=replaceable><i>SOCKET</i></tt> connection.
For example:

<div class=programlisting>
<p>
<pre>
use Socket;
$hersockaddr = getpeername SOCK;
($port, $heraddr) = unpack_sockaddr_in($hersockaddr);
$herhostname = gethostbyaddr($heraddr, AF_INET);
$herstraddr = inet_ntoa($heraddr);
</PRE>
</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-GETPGRP">getpgrp</A></h3>

<div class=programlisting>
<p>
<pre>
getpgrp <tt class=replaceable><i>PID</i></tt>
</PRE>
</DIV>

<p class=para>
This function returns the current process group for the specified <tt class=replaceable><i>PID</i></tt>
(use a <tt class=replaceable><i>PID</i></tt> of 0 for the current process).
Invoking <a href="#PERL2-CMD-GETPGRP">getpgrp</A> will produce a fatal error if used on a machine
that doesn't implement <i class=emphasis>getpgrp</I> (2).  If <tt class=replaceable><i>PID</i></tt> is omitted, the
function returns the process group of the current process (the same as
using a <tt class=replaceable><i>PID</i></tt> of 0).  On systems implementing this operator with the
POSIX <i class=emphasis>getpgrp</I> (2) system call, <tt class=replaceable><i>PID</i></tt> must be omitted or, if
supplied, must be 0.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-GETPPID">getppid</A></h3>

<div class=programlisting>
<p>
<pre>
getppid
</PRE>
</DIV>

<p class=para>
This function returns the process ID of the parent process.
On the typical UNIX system, if your parent process ID changes
to 1, your parent process has died and you've been adopted by the
<i class=emphasis>init</I> program.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-GETPRIORITY">getpriority</A></h3>

<div class=programlisting>
<p>
<pre>
getpriority <tt class=replaceable><i>WHICH</i></tt>, <tt class=replaceable><i>WHO</i></tt>
</PRE>
</DIV>

<p class=para>
This function returns the current priority for a process, a process
group, or a user.  See <i class=emphasis>getpriority</I> (2).  Invoking
<a href="#PERL2-CMD-GETPRIORITY">getpriority</A> will produce a fatal error if used on a machine that
doesn't implement <i class=emphasis>getpriority</I> (2).  For example, to get the
priority of the current process, use:

<div class=programlisting>
<p>
<pre>
$curprio = getpriority(0, 0);
</PRE>
</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-GETPROTOBYNAME">getprotobyname</A></h3>

<div class=programlisting>
<p>
<pre>
getprotobyname <tt class=replaceable><i>NAME</i></tt>
</PRE>
</DIV>

<p class=para>
This function does the same thing as
<i class=emphasis>getprotobyname</I> (3):  it translates
a protocol name to its corresponding number.
The return value in list context is:

<div class=programlisting>
<p>
<pre>
($name, $aliases, $protocol_number)
</PRE>
</DIV>

<p class=para>
In scalar context, <a href="#PERL2-CMD-GETPROTOBYNAME">getprotobyname</A> returns only the protocol number.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-GETPROTOBYNUMBER">getprotobynumber</A></h3>

<div class=programlisting>
<p>
<pre>
getprotobynumber <tt class=replaceable><i>NUMBER</i></tt>
</PRE>
</DIV>

<p class=para>
This function does the same thing as
<i class=emphasis>getprotobynumber</I> (3):  it translates
a protocol number to its corresponding name.
The return value in list context is:

<div class=programlisting>
<p>
<pre>
($name, $aliases, $protocol_number)
</PRE>
</DIV>

<p class=para>
In scalar context, <a href="#PERL2-CMD-GETPROTOBYNUMBER">getprotobynumber</A> returns only the protocol name.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-GETPROTOENT">getprotoent</A></h3>

<div class=programlisting>
<p>
<pre>
getprotoent
setprotoent <tt class=replaceable><i>STAYOPEN</i></tt>
endprotoent
</PRE>
</DIV>

<p class=para>
These functions do the same thing as their like-named system library
routines--see
<i class=emphasis>getprotent</I> (3).
The return value from
<a href="#PERL2-CMD-GETPROTOENT">getprotoent</A>
is:

<div class=programlisting>
<p>
<pre>
($name, $aliases, $protocol_number)
</PRE>
</DIV>

<p class=para>
In scalar context, <a href="#PERL2-CMD-GETPROTOENT">getprotoent</A> returns only the protocol name.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-GETPWENT">getpwent</A></h3>

<div class=programlisting>
<p>
<pre>
getpwent
setpwent
endpwent
</PRE>
</DIV>

<p class=para>
These functions do the same thing as their like-named system library
routines--see
<i class=emphasis>getpwent</I> (3).
They iterate through your
<i class=emphasis>/etc/passwd</I>
file (or its moral equivalent coming from some server somewhere).
The return value in list context is:

<div class=programlisting>
<p>
<pre>
($name,$passwd,$uid,$gid,$quota,$comment,$gcos,$dir,$shell)
</PRE>
</DIV>

<p class=para>
Some machines may use the quota and comment fields for other purposes,
but the remaining fields will always be the same.
To set up a hash for translating login names to uids,
say this:

<div class=programlisting>
<p>
<pre>
while (($name, $passwd, $uid) = getpwent) {
    $uid{$name} = $uid;
}
</PRE>
</DIV>

<p class=para>
In scalar context, <a href="#PERL2-CMD-GETPWENT">getpwent</A> returns only the username.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-GETPWNAM">getpwnam</A></h3>

<div class=programlisting>
<p>
<pre>
getpwnam <tt class=replaceable><i>NAME</i></tt>
</PRE>
</DIV>

<p class=para>
This function does the same thing as <i class=emphasis>getpwnam</I> (3):  it translates a
username to the corresponding <i class=emphasis>passwd</I> file entry.
The return value in list context is:

<div class=programlisting>
<p>
<pre>
($name,$passwd,$uid,$gid,$quota,$comment,$gcos,$dir,$shell)
</PRE>
</DIV>

<p class=para>
If you want to do this repeatedly, consider caching the data in a hash
(associative array) using <a href="#PERL2-CMD-GETPWENT">getpwent</A>.

<p class=para>
In scalar context, <a href="#PERL2-CMD-GETPWNAM">getpwnam</A> returns only the numeric user ID.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-GETPWUID">getpwuid</A></h3>

<div class=programlisting>
<p>
<pre>
getpwuid <tt class=replaceable><i>UID</i></tt>
</PRE>
</DIV>

<p class=para>
This function does the same thing as <i class=emphasis>getpwuid</I> (3):  it translates a
numeric user id to the corresponding <i class=emphasis>passwd</I> file entry.
The return value in list context is:

<div class=programlisting>
<p>
<pre>
($name,$passwd,$uid,$gid,$quota,$comment,$gcos,$dir,$shell)
</PRE>
</DIV>

<p class=para>
If you want to do this repeatedly, consider slurping the data into a
hash using <a href="#PERL2-CMD-GETPWENT">getpwent</A>.

<p class=para>
In scalar context, <a href="#PERL2-CMD-GETPWUID">getpwuid</A> returns the username.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-GETSERVBYNAME">getservbyname</A></h3>

<div class=programlisting>
<p>
<pre>
getservbyname <tt class=replaceable><i>NAME</i></tt>, <tt class=replaceable><i>PROTO</i></tt>
</PRE>
</DIV>

<p class=para>
This function does the same thing as
<i class=emphasis>getservbyname</I> (3):  it translates
a service (port) name to its corresponding port number.
<tt class=replaceable><i>PROTO</i></tt>
is a protocol name such as
<tt class=literal>"tcp"</tt>.
The return value in list context is:

<div class=programlisting>
<p>
<pre>
($name, $aliases, $port_number, $protocol_name)
</PRE>
</DIV>

<p class=para>
In scalar context, <a href="#PERL2-CMD-GETSERVBYNAME">getservbyname</A> returns only the service port number.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-GETSERVBYPORT">getservbyport</A></h3>

<div class=programlisting>
<p>
<pre>
getservbyport <tt class=replaceable><i>PORT</i></tt>, <tt class=replaceable><i>PROTO</i></tt>
</PRE>
</DIV>

<p class=para>
This function does the same thing as
<i class=emphasis>getservbyport</I> (3):  it translates
a service (port) number to its corresponding names.
<tt class=replaceable><i>PROTO</i></tt>
is a protocol name such as
<tt class=literal>"tcp"</tt>.
The return value in list context is:

<div class=programlisting>
<p>
<pre>
($name, $aliases, $port_number, $protocol_name)
</PRE>
</DIV>

<p class=para>
In scalar context, <a href="#PERL2-CMD-GETSERVBYPORT">getservbyport</A> returns only the service port name.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-GETSERVENT">getservent</A></h3>

<div class=programlisting>
<p>
<pre>
getservent
setservent <tt class=replaceable><i>STAYOPEN</i></tt>
endservent
</PRE>
</DIV>

<p class=para>
These functions do the same thing as their like-named system library
routines--see
<i class=emphasis>getservent</I> (3).
They iterate through the
<i class=emphasis>/etc/services</I>
file or its equivalent.
The return value in list context is:

<div class=programlisting>
<p>
<pre>
($name, $aliases, $port_number, $protocol_name)
</PRE>
</DIV>

<p class=para>
In scalar context, <a href="#PERL2-CMD-GETSERVENT">getservent</A> returns only the service port name.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-GETSOCKNAME">getsockname</A></h3>

<div class=programlisting>
<p>
<pre>
getsockname <tt class=replaceable><i>SOCKET</i></tt>
</PRE>
</DIV>

<p class=para>
This function returns the packed sockaddr address of this end of the
<tt class=replaceable><i>SOCKET</i></tt> connection.
(And why wouldn't you know your own address already?  Because you might
have bound an address containing wildcards to the generic socket
before doing an <a href="#PERL2-CMD-ACCEPT">accept</A>.  Or because you
might have been passed a
socket by your parent process--for example, <i class=emphasis>inetd</I>.)

<div class=programlisting>
<p>
<pre>
use Socket;
$mysockaddr = getsockname(SOCK);
($port, $myaddr) = unpack_sockaddr_in($mysockaddr);
</PRE>
</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-GETSOCKOPT">getsockopt</A></h3>

<div class=programlisting>
<p>
<pre>
getsockopt <tt class=replaceable><i>SOCKET</i></tt>, <tt class=replaceable><i>LEVEL</i></tt>, <tt class=replaceable><i>OPTNAME</i></tt>
</PRE>
</DIV>

<p class=para>
This function returns the socket option requested, or the undefined value if
there is an error.  See <a href="#PERL2-CMD-SETSOCKOPT">setsockopt</A> for more.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-GLOB">glob</A></h3>

<div class=programlisting>
<p>
<pre>
glob <tt class=replaceable><i>EXPR</i></tt>
</PRE>
</DIV>

<p class=para>
This function returns the value of <tt class=replaceable><i>EXPR</i></tt> with filename expansions such as a shell
would do.  (If <tt class=replaceable><i>EXPR</i></tt> is omitted, <b>$_</B> is globbed instead.)  This is
the internal function implementing the <tt class=literal>&lt;*&gt;</tt> operator, except
that it may be easier to type this way.  For example, compare these
two:

<div class=programlisting>
<p>
<pre>
@result = map { glob($_) } "*.c", "*.c,v";
@result = map &lt;${_}&gt;, "*.c", "*.c,v";
</PRE>
</DIV>

<p class=para>
The <a href="#PERL2-CMD-GLOB">glob</A> function is not related to the Perl notion of typeglobs,
other than that they both use a <tt class=literal>*</tt> to represent multiple items.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-GMTIME">gmtime</A></h3>

<div class=programlisting>
<p>
<pre>
gmtime <tt class=replaceable><i>EXPR</i></tt>
</PRE>
</DIV>

<p class=para>
This function converts a time as returned by the <b>time</B> function to a
9-element list with
the time correct for the Greenwich time zone (aka GMT, or UTC, or even
Zulu in certain cultures, not including the Zulu culture, oddly enough).
Typically used as follows:

<div class=programlisting>
<p>
<pre>
($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) =
        gmtime(time);
</PRE>
</DIV>

<p class=para>
All list elements are numeric, and come straight out of a
<tt class=literal>struct tm</tt> (that's a C programming structure--don't sweat it).  In
particular this means that <tt class=literal>$mon</tt> has the range <tt class=literal>0..11</tt>,
<tt class=literal>$wday</tt> has the range <tt class=literal>0..6</tt>,
and the year has had 1,900 subtracted from
it.  (You can remember which ones are
0-based because those are the ones you're always using as subscripts
into 0-based arrays containing month and day names.)  If <tt class=replaceable><i>EXPR</i></tt> is
omitted, it does <tt class=literal>gmtime(time)</tt>.  For example, to print the
current month in London:

<div class=programlisting>
<p>
<pre>
$london_month = (qw(Jan Feb Mar Apr May Jun
        Jul Aug Sep Oct Nov Dec))[(gmtime)[4]];
</PRE>
</DIV>

<p class=para>
The Perl library module Time::Local contains a subroutine, <tt class=literal>timegm( )</tt>,
that can convert in the opposite direction.

<p class=para>
In scalar context, <a href="#PERL2-CMD-GMTIME">gmtime</A> returns a <i class=emphasis>ctime</I> (3)-like string
based on the
GMT time value.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-GOTO">goto</A></h3>

<div class=programlisting>
<p>
<pre>
goto <tt class=replaceable><i>LABEL</i></tt>
goto <tt class=replaceable><i>EXPR</i></tt>
goto <i class=emphasis>&amp;NAME</I>
</PRE>
</DIV>

<p class=para>
<tt class=literal>goto</tt> <tt class=replaceable><i>LABEL</i></tt> finds the statement labeled with
<tt class=replaceable><i>LABEL</i></tt> and resumes execution there.  It may not be used to go into any
construct that requires initialization, such as a subroutine or a
<b>foreach</B> loop.  It also can't be used to go into a construct that is
optimized away.  It can be used to go almost anywhere else within the
dynamic scope,[4]
including out of subroutines, but for that purpose it's
usually better to use some other construct such as <a href="#PERL2-CMD-LAST">last</A> or <a href="#PERL2-CMD-DIE">die</A>.
The author of Perl
has never felt the need to use this form of <b>goto</B> (in Perl, that is--C
is another matter).

<blockquote class=footnote>
<p class=para>[4] 
This means that if it doesn't find the label in the current routine,
it looks back through the routines that called the current routine
for the label, thus making it nearly impossible to maintain your program.
</blockquote>
<p class=para>
Going to even greater heights of orthogonality (and depths of idiocy),
Perl allows <tt class=literal>goto</tt> <tt class=replaceable><i>EXPR</i></tt>, which expects <tt class=replaceable><i>EXPR</i></tt>
to evaluate to a label name, whose scope is <i class=emphasis>guaranteed</I> to be unresolvable
until run-time since the label is unknown when the statement is compiled.
This allows for computed gotos per FORTRAN, but isn't necessarily
recommended[5]
if you're optimizing for maintainability:

<blockquote class=footnote>
<p class=para>[5] 
Understatement is reputed to be funny, so we thought we'd try one here.
</blockquote>
<div class=programlisting>
<p>
<pre>
goto +("FOO", "BAR", "GLARCH")[$i];
</PRE>
</DIV>

<p class=para>
<tt class=literal>goto</tt> <tt class=literal>&amp;</tt><tt class=replaceable><i>NAME</i></tt> is highly magical, substituting a
call to the named subroutine for the currently running subroutine.
This is used by <tt class=literal>AUTOLOAD</tt> subroutines that wish to load another
subroutine and then pretend that this subroutine--and not the original
one--had been called
in the first place (except that any modifications to <tt class=literal>@_</tt> in the
original subroutine are propagated to the replacement subroutine).  After the
<a href="#PERL2-CMD-GOTO">goto</A>, not even <a href="#PERL2-CMD-CALLER">caller</A> will be able to tell that the original
routine was called first.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-GREP">grep</A></h3>

<div class=programlisting>
<p>
<pre>
grep <tt class=replaceable><i>EXPR</i></tt>, <tt class=replaceable><i>LIST</i></tt>
grep <tt class=replaceable><i>BLOCK</i></tt> <tt class=replaceable><i>LIST</i></tt>
</PRE>
</DIV>

<p class=para>
This function evaluates <tt class=replaceable><i>EXPR</i></tt> or <tt class=replaceable><i>BLOCK</i></tt> in a Boolean context
for each element of <tt class=replaceable><i>LIST</i></tt>,
temporarily setting <b>$_</B> to each element in turn.
In list context, it returns a list of those elements
for which the expression is true.
(The operator is named after a beloved UNIX program that
extracts lines out of a file that match a particular pattern.
In Perl the expression is often a pattern, but doesn't have to be.)
In scalar context, <a href="#PERL2-CMD-GREP">grep</A> returns the number of times the
expression was true.

<p class=para>
Presuming <tt class=literal>@all_lines</tt> contains lines of code, this example weeds out
comment lines:

<div class=programlisting>
<p>
<pre>
@code_lines = grep !/^#/, @all_lines;
</PRE>
</DIV>

<p class=para>
Since <b>$_</B> is a reference into the list value, altering
<b>$_</B> will modify the elements of the original list.
While this is useful and supported, it can occasionally cause bizarre
results if you aren't expecting it.  For example:

<div class=programlisting>
<p>
<pre>
@list = qw(barney fred dino wilma);
@greplist = grep { s/^[bfd]// } @list;
</PRE>
</DIV>

<p class=para>
<tt class=literal>@greplist</tt> is now "<tt class=literal>arney</tt>",
"<tt class=literal>red</tt>", "<tt class=literal>ino</tt>", but
<tt class=literal>@list</tt> is now "<tt class=literal>arney</tt>",
"<tt class=literal>red</tt>", "<tt class=literal>ino</tt>",
"<tt class=literal>wilma</tt>"!  Caveat Programmor.

<p class=para>
See also <a href="#PERL2-CMD-MAP">map</A>.  The following two statements
are functionally equivalent:

<div class=programlisting>
<p>
<pre>
@out = grep { <tt class=replaceable><i>EXPR</i></tt> } @in;
@out = map { <tt class=replaceable><i>EXPR</i></tt> ? $_ : () } @in
</PRE>
</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-HEX">hex</A></h3>

<div class=programlisting>
<p>
<pre>
hex <tt class=replaceable><i>EXPR</i></tt>
</PRE>
</DIV>

<p class=para>
This function interprets <tt class=replaceable><i>EXPR</i></tt> as a hexadecimal string and returns the
equivalent decimal value.
(To interpret strings that might start with <tt class=literal>0</tt> or <tt class=literal>0x</tt> see
<a href="#PERL2-CMD-OCT">oct</A>.)  If <tt class=replaceable><i>EXPR</i></tt> is omitted, it interprets <b>$_</B>.  The
following code sets <tt class=literal>$number</tt> to 4,294,906,560:

<div class=programlisting>
<p>
<pre>
$number = hex("ffff12c0");
</PRE>
</DIV>

<p class=para>
To do the inverse function, use:

<div class=programlisting>
<p>
<pre>
sprintf "%lx", $number;         # (That's an ell, not a one.)
</PRE>
</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-IMPORT">import</A></h3>

<div class=programlisting>
<p>
<pre>
import <tt class=replaceable><i>CLASSNAME</i></tt> <tt class=replaceable><i>LIST</i></tt>
import <tt class=replaceable><i>CLASSNAME</i></tt>
</PRE>
</DIV>

<p class=para>
There is no built-in <a href="#PERL2-CMD-IMPORT">import</A> function.  It is merely an ordinary
class method defined (or inherited) by modules that wish to export names
to another module through the <a href="#PERL2-CMD-USE">use</A> operator.  See <a href="#PERL2-CMD-USE">use</A> for
details.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-INDEX">index</A></h3>

<div class=programlisting>
<p>
<pre>
index <tt class=replaceable><i>STR</i></tt>, <tt class=replaceable><i>SUBSTR</i></tt>, <tt class=replaceable><i>POSITION</i></tt>
index <tt class=replaceable><i>STR</i></tt>, <tt class=replaceable><i>SUBSTR</i></tt>
</PRE>
</DIV>

<p class=para>
This function returns the position of the first occurrence of <tt class=replaceable><i>SUBSTR</i></tt>
in <tt class=replaceable><i>STR</i></tt>.  The <tt class=replaceable><i>POSITION</i></tt>, if specified, says where to start
looking.
Positions are based at 0 (or whatever you've set the <b>$[</B> variable
to--but don't do that).
If the substring is not found, the function returns one less 
than the base, ordinarily -1.  To work your way through a string, you might
say:

<div class=programlisting>
<p>
<pre>
$pos = -1;
while (($pos = index($string, $lookfor, $pos)) &gt; -1) {
    print "Found at $pos\n";
    $pos++;
}
</PRE>
</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-INT">int</A></h3>

<div class=programlisting>
<p>
<pre>
int <tt class=replaceable><i>EXPR</i></tt>
</PRE>
</DIV>

<p class=para>
This function returns the integer portion of <tt class=replaceable><i>EXPR</i></tt>.  If <tt class=replaceable><i>EXPR</i></tt> is
omitted, it uses <b>$_</B>.  If you're a C programmer, you'll often
forget to use <a href="#PERL2-CMD-INT">int</A> in conjunction with division, which is a
floating-point operation in Perl:

<div class=programlisting>
<p>
<pre>
$average_age = 939/16;      # yields 58.6875 (58 in C)
$average_age = int 939/16;  # yields 58
</PRE>
</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-IOCTL">ioctl</A></h3>

<div class=programlisting>
<p>
<pre>
ioctl <tt class=replaceable><i>FILEHANDLE</i></tt>, <tt class=replaceable><i>FUNCTION</i></tt>, <tt class=replaceable><i>SCALAR</i></tt>
</PRE>
</DIV>

<p class=para>
This function implements the <i class=emphasis>ioctl</I> (2) system call.
You'll probably have to say:

<div class=programlisting>
<p>
<pre>
require "ioctl.ph";
    # probably /usr/local/lib/perl/ioctl.ph
</PRE>
</DIV>

<p class=para>
first to get the correct function definitions.  If <i class=emphasis>ioctl.ph</I>
doesn't exist or doesn't have the correct definitions you'll have to
roll your own, based on your C header files such as
<i class=emphasis>&lt;sys/ioctl.h&gt;</I>.  (The Perl distribution includes a script called
<i class=emphasis>h2ph</I> to help you do this, but it's non-trivial.)
<tt class=replaceable><i>SCALAR</i></tt> will be read and/or written depending on the <tt class=replaceable><i>FUNCTION</i></tt>--a
pointer to the string value of <tt class=replaceable><i>SCALAR</i></tt> will be passed as the third
argument of the actual <i class=emphasis>ioctl</I> (2) call. (If <tt class=replaceable><i>SCALAR</i></tt> has no string value but
does have a numeric value, that value will be passed directly rather
than a pointer to the string value.)  The <a href="#PERL2-CMD-PACK">pack</A> and
<a href="#PERL2-CMD-UNPACK">unpack</A> functions are useful for manipulating the values of
structures used by <a href="#PERL2-CMD-IOCTL">ioctl</A>.
The following example sets the erase character to DEL on many UNIX systems
(see the POSIX module in <a href="ch07_01.htm">Chapter 7, <i>The Standard Perl Library</i></A> for a slightly more portable interface):

<div class=programlisting>
<p>
<pre>
require 'ioctl.ph';
$getp = &amp;TIOCGETP or die "NO TIOCGETP";
$sgttyb_t = "ccccs";            # 4 chars and a short
if (ioctl STDIN, $getp, $sgttyb) {
    @ary = unpack $sgttyb_t, $sgttyb;
    $ary[2] = 127;
    $sgttyb = pack $sgttyb_t, @ary;
    ioctl STDIN, &amp;TIOCSETP, $sgttyb
        or die "Can't ioctl TIOCSETP: $!";
}
</PRE>
</DIV>

<p class=para>
The return value of <a href="#PERL2-CMD-IOCTL">ioctl</A> (and <a href="#PERL2-CMD-FCNTL">fcntl</A>) is as follows:

<div class=informaltable>
<p>
<a name="PERL2-CH-3-TAB-2"></A>

<table class=INFORMALTABLE>
<tr class=row>
<th align="left">System call returns</TH>
<th align="left">Perl returns</TH>
</TR>
<tr class=row>
<td align="left">-1</TD>
<td align="left">undefined value</TD>
</TR>
<tr class=row>
<td align="left">0</TD>
<td align="left">string "<tt class=literal>0 but true</tt>"</TD>
</TR>
<tr class=row>
<td align="left">anything else</TD>
<td align="left">that number</TD>
</TR>
</TABLE>
<p>
</DIV>

<p class=para>
Thus Perl returns true on success and false on failure, yet you can still
easily determine the actual value returned by the operating system:

<div class=programlisting>
<p>
<pre>
$retval = ioctl(...) or $retval = -1;
printf "System returned %d\n", $retval;
</PRE>
</DIV>

<p class=para>
Calls to <b>ioctl</B> should not be considered portable.  If, say, you're
merely turning off echo once for the whole script, it's much more
portable (and not much slower) to say:

<div class=programlisting>
<p>
<pre>
system "stty -echo";   # Works on most UNIX boxen.
</PRE>
</DIV>

<p class=para>
Just because you <i class=emphasis>can</I> do something in Perl doesn't mean you
<i class=emphasis>ought</I> to.  To quote the Apostle Paul, "Everything is
permissible--but not everything is beneficial."

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-JOIN">join</A></h3>

<div class=programlisting>
<p>
<pre>
join <tt class=replaceable><i>EXPR</i></tt>, <tt class=replaceable><i>LIST</i></tt>
</PRE>
</DIV>

<p class=para>
This function joins the separate strings of <tt class=replaceable><i>LIST</i></tt>
into a single string with fields separated by the
value of <tt class=replaceable><i>EXPR</i></tt>, and returns the string.  For example:

<div class=programlisting>
<p>
<pre>
$_ = join ':', $login,$passwd,$uid,$gid,$gcos,$home,$shell;
</PRE>
</DIV>

<p class=para>
To do the opposite, see <a href="#PERL2-CMD-SPLIT">split</A>.  To join things together into
fixed-position fields, see <a href="#PERL2-CMD-PACK">pack</A>.

<p class=para>
The most efficient way to concatenate many strings together is to <b>join</B> them with a null string.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-KEYS">keys</A></h3>

<div class=programlisting>
<p>
<pre>
keys <tt class=replaceable><i>HASH</i></tt>
</PRE>
</DIV>

<p class=para>
This function returns a list consisting of all the keys of the
named hash.
The keys are returned in an apparently random order, but it is the
same order as either the <a href="#PERL2-CMD-VALUES">values</A> or <a href="#PERL2-CMD-EACH">each</A> function
produces (assuming 
that the hash has not been modified between calls).
Here is yet another way to print your environment:

<div class=programlisting>
<p>
<pre>
@keys = keys %ENV;
@values = values %ENV;
while (@keys) {
    print pop(@keys), '=', pop(@values), "\n";
}
</PRE>
</DIV>

<p class=para>
or how about sorted by key:

<div class=programlisting>
<p>
<pre>
foreach $key (sort keys %ENV) {
    print $key, '=', $ENV{$key}, "\n";
}
</PRE>
</DIV>

<p class=para>
To sort an array by value, you'll need to provide a comparison
function.  Here's a descending numeric sort of a hash by its values:

<div class=programlisting>
<p>
<pre>
foreach $key (sort { $hash{$b} &lt;=&gt; $hash{$a} } keys %hash)) {
    printf "%4d %s\n", $hash{$key}, $key;
}
</PRE>
</DIV>

<p class=para>
Note that using <a href="#PERL2-CMD-KEYS">keys</A> on a hash bound to a
largish DBM file will produce a largish list, causing you to have a
largish process.  You might prefer to use the <a href="#PERL2-CMD-EACH">each</A> function in
this case, which will iterate over the hash entries one-by-one
without slurping them all into a single gargantuan list.

<p class=para>
In scalar context, <a href="#PERL2-CMD-KEYS">keys</A> returns the number of elements of the
hash (and resets the <b>each</B> iterator). 
However, to get this information for tied hashes, including DBM files,
Perl must still walk the entire hash, so it's not very efficient in that
case.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-KILL">kill</A></h3>

<div class=programlisting>
<p>
<pre>
kill <tt class=replaceable><i>LIST</i></tt>
</PRE>
</DIV>

<p class=para>
This function sends a signal to a list of processes.
The first element of the list must be the signal to send.
You may use a signal name in quotes (without a <tt class=literal>SIG</tt> on the front).
The function returns the number of processes successfully signaled.
If the signal is negative, the function kills process groups instead
of processes.
(On System V, a negative process
number will also kill process groups,
but that's not portable.)
Examples:

<div class=programlisting>
<p>
<pre>
$cnt = kill 1, $child1, $child2;
kill 9, @goners;
kill 'STOP', getppid;  # Can *so* suspend my login shell...
</PRE>
</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-LAST">last</A></h3>

<div class=programlisting>
<p>
<pre>
last <tt class=replaceable><i>LABEL</i></tt>
last
</PRE>
</DIV>

<p class=para>
The <a href="#PERL2-CMD-LAST">last</A> command is like the <tt class=literal>break</tt> statement in C (as used
in loops); it immediately exits the loop in question.
If the <tt class=replaceable><i>LABEL</i></tt>
is omitted, the command refers to the innermost enclosing loop.
The <b>continue</B> block, if any, is not executed.

<div class=programlisting>
<p>
<pre>
LINE: while (&lt;STDIN&gt;) {
    last LINE if /^$/; # exit when done with header
    # rest of loop here
}
</PRE>
</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-LC">lc</A></h3>

<div class=programlisting>
<p>
<pre>
lc <tt class=replaceable><i>EXPR</i></tt>
</PRE>
</DIV>

<p class=para>
This function returns a lowercased version of <tt class=replaceable><i>EXPR</i></tt> (or <b>$_</B> if omitted).
This is the internal function implementing the <tt class=literal>\L</tt> escape in double-quoted
strings.
POSIX <i class=emphasis>setlocale</I> (3) settings are respected.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-LCFIRST">lcfirst</A></h3>

<div class=programlisting>
<p>
<pre>
lcfirst <tt class=replaceable><i>EXPR</i></tt>
</PRE>
</DIV>

<p class=para>
This function returns a version of <tt class=replaceable><i>EXPR</i></tt>
(or <b>$_</B> if omitted) with the first character
lowercased.
This is the internal function implementing the <tt class=literal>\l</tt> escape in double-quoted
strings.
POSIX <i class=emphasis>setlocale</I> (3) settings are respected.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-LENGTH">length</A></h3>

<div class=programlisting>
<p>
<pre>
length <tt class=replaceable><i>EXPR</i></tt>
</PRE>
</DIV>

<p class=para>
This function returns the length in bytes of the scalar value
<tt class=replaceable><i>EXPR</i></tt>.
If <tt class=replaceable><i>EXPR</i></tt> is omitted, the function returns the length of <b>$_</B>, but be
careful that the next thing doesn't look like the start of an <tt class=replaceable><i>EXPR</i></tt>, or
the tokener will get confused.  When in doubt, always put in
parentheses.

<p class=para>
Do not try to use <a href="#PERL2-CMD-LENGTH">length</A> to find the size of an array or hash.  Use
<tt class=literal>scalar @array</tt> for the size of an array, and <tt class=literal>scalar keys %hash</tt>
for the size of a hash.  (The <tt class=literal>scalar</tt> is typically
dropped when redundant, which is typical.)

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-LINK">link</A></h3>

<div class=programlisting>
<p>
<pre>
link <tt class=replaceable><i>OLDFILE</i></tt>, <tt class=replaceable><i>NEWFILE</i></tt>
</PRE>
</DIV>

<p class=para>
This function creates a new filename linked to the old filename.  The function
returns 1 for success, 0 otherwise (and puts the error code into <b>$!</B>).  See also <a href="#PERL2-CMD-SYMLINK">symlink</A>
later in this chapter.  
This function is unlikely to be implemented on non-UNIX
systems.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-LISTEN">listen</A></h3>

<div class=programlisting>
<p>
<pre>
listen <tt class=replaceable><i>SOCKET</i></tt>, <tt class=replaceable><i>QUEUESIZE</i></tt>
</PRE>
</DIV>

<p class=para>
This function does the same thing as the
<i class=emphasis>listen</I> (2) system call.  It tells the system that
you're going to be accepting connections on this socket and that the system can
queue the number of waiting connections specified by
<tt class=replaceable><i>QUEUESIZE</i></tt>.  Imagine having call-waiting on your
phone, with up to five callers queued.  (Gives me the willies!)  The function
returns true if it succeeded, false otherwise (and puts the error code into
<b>$!</B>).  See the section "Sockets" in <a href="ch06_01.htm">Chapter 6, <i>Social Engineering</i></A>.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-LOCAL">local</A></h3>

<div class=programlisting>
<p>
<pre>
local <tt class=replaceable><i>EXPR</i></tt>
</PRE>
</DIV>

<p class=para>
This operator declares one or more global variables to have locally scoped
values within the innermost enclosing block, subroutine, <a href="#PERL2-CMD-EVAL">eval</A>, or file.
If more than one variable is listed, the list must be placed in parentheses,
because the operator binds more tightly than comma.
All the listed variables must be legal lvalues, that is, something
you could assign to.  This operator works by
saving the current values of those variables on a hidden stack
and restoring them upon exiting the block, subroutine, or <a href="#PERL2-CMD-EVAL">eval</A>,
or file.
After the <a href="#PERL2-CMD-LOCAL">local</A> is executed, but before the scope is exited, any
called subroutines will see the local, inner value, not the previous, outer
value, because the variable is still a global variable, despite
having a localized value.  The technical term for this is "dynamic scoping".

<p class=para>
The <tt class=replaceable><i>EXPR</i></tt> may be assigned to if desired, which allows you to initialize
your local variables.  (If no initializer is given, all scalars are
initialized to the undefined value and all arrays and hashes
to empty.)  Commonly, this is used to name the
formal arguments to a subroutine.  As with ordinary assignment, if you
use parentheses around the variables on the left (or if the variable is
an array or hash), the expression on
the right is evaluated in list context.  Otherwise the expression
on the right is evaluated in scalar context.

<p class=para>
Here is a routine that executes some random piece of code that depends
on <tt class=literal>$i</tt> running through a range of numbers.  Note that the scope
of <tt class=literal>$i</tt> propagates into the <a href="#PERL2-CMD-EVAL">eval</A> code.

<div class=programlisting>
<p>
<pre>
&amp;RANGEVAL(20, 30, '$foo[$i] = $i');
sub RANGEVAL {
    local($min, $max, $thunk) = @_;
    local $result = "";
    local $i;
    # Presumably $thunk makes reference to $i
    for ($i = $min; $i &lt; $max; $i++) {
        $result .= eval $thunk;
    }
    $result;
}
</PRE>
</DIV>

<p class=para>
This code demonstrates how to make a temporary modification to
a global array:

<div class=programlisting>
<p>
<pre>
if ($sw eq '-v') {
    # init local array with global array
    local @ARGV = @ARGV;
    unshift @ARGV, 'echo';
    system @ARGV;
}
# @ARGV restored
</PRE>
</DIV>

<p class=para>
You can also temporarily modify hashes:

<div class=programlisting>
<p>
<pre>
# temporarily add a couple of entries to the %digits hash
if ($base12) {
    # (NOTE: not claiming this is efficient!)
    local(%digits) = (%digits, T =&gt; 10, E =&gt; 11);
    parse_num();
}
</PRE>
</DIV>

<p class=para>
But you probably want to be using <a href="#PERL2-CMD-MY">my</A> instead, because
<a href="#PERL2-CMD-LOCAL">local</A> isn't really what most people think of as local.
See the section on <a href="#PERL2-CMD-MY">my</A> later.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-LOCALTIME">localtime</A></h3>

<div class=programlisting>
<p>
<pre>
localtime <tt class=replaceable><i>EXPR</i></tt>
</PRE>
</DIV>

<p class=para>
This function converts the value returned by <a href="#PERL2-CMD-TIME">time</A> to a
nine-element list with the time corrected for the local time zone.
It's typically used as follows:

<div class=programlisting>
<p>
<pre>
($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) =
        localtime(time);
</PRE>
</DIV>

<p class=para>
All list elements are numeric, and come straight out of a
<tt class=literal>struct tm</tt>.
(That's a bit of C programming lingo--don't worry about it.)
In particular this means that
<tt class=literal>$mon</tt>
has the range <tt class=literal>0..11</tt>,
<tt class=literal>$wday</tt>
has the
range <tt class=literal>0..6</tt>, and the year has had 1,900 subtracted from it.
(You can remember which ones are 0-based because those are the ones
you're always using as subscripts into 0-based arrays containing
month and day names.)
If
<tt class=replaceable><i>EXPR</i></tt>
is omitted, it does
<tt class=literal>localtime(time)</tt>.
For example, to get the name of the current day of the week:

<div class=programlisting>
<p>
<pre>
$thisday = (Sun,Mon,Tue,Wed,Thu,Fri,Sat)[(localtime)[6]];
</PRE>
</DIV>

<p class=para>
The Perl library module Time::Local contains a subroutine, <tt class=literal>timelocal()</tt>,
that can convert in the opposite direction.

<p class=para>
In scalar context, <a href="#PERL2-CMD-LOCALTIME">localtime</A> returns a <i class=emphasis>ctime</I> (3)-like string
based on the localtime value.  For example, the <i class=emphasis>date</I> command can
be emulated with:

<div class=programlisting>
<p>
<pre>
perl -e 'print scalar localtime'
</PRE>
</DIV>

<p class=para>
See also <tt class=literal>POSIX::strftime()</tt> in <a href="ch07_01.htm">Chapter 7, <i>The Standard Perl Library</i></A> for
a more fine-grained approach to formatting times.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-LOG">log</A></h3>

<div class=programlisting>
<p>
<pre>
log <tt class=replaceable><i>EXPR</i></tt>
</PRE>
</DIV>

<p class=para>
This function returns logarithm (base <i class=emphasis>e</I>) of
<tt class=replaceable><i>EXPR</i></tt>.  If <tt class=replaceable><i>EXPR</i></tt> is omitted,
the function returns the logarithm of <b>$_</B>.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-LSTAT">lstat</A></h3>

<div class=programlisting>
<p>
<pre>
lstat <tt class=replaceable><i>EXPR</i></tt>
</PRE>
</DIV>

<p class=para>
This function does the same thing as the <a href="#PERL2-CMD-STAT">stat</A> function, but if the
last component of the filename is a symbolic link, stats a symbolic link
instead of the file the symbolic link points to.  (If symbolic links are
unimplemented on your system, a normal <a href="#PERL2-CMD-STAT">stat</A> is done instead.)

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-MAP">map</A></h3>

<div class=programlisting>
<p>
<pre>
map <tt class=replaceable><i>BLOCK</i></tt> <tt class=replaceable><i>LIST</i></tt>
map <tt class=replaceable><i>EXPR</i></tt>, <tt class=replaceable><i>LIST</i></tt>
</PRE>
</DIV>

<p class=para>
This function evaluates the <tt class=replaceable><i>BLOCK</i></tt> or <tt class=replaceable><i>EXPR</i></tt> for each
element of <tt class=replaceable><i>LIST</i></tt> (locally setting <b>$_</B> to each element) and
returns the list value composed of the results of each such evaluation.
It evaluates <tt class=replaceable><i>BLOCK</i></tt> or <tt class=replaceable><i>EXPR</i></tt> in a list context, so each
element of <tt class=replaceable><i>LIST</i></tt> may produce zero, one, or more elements in the
returned value.  These are all flattened into one list.  For instance:

<div class=programlisting>
<p>
<pre>
@words = map { split ' ' } @lines;
</PRE>
</DIV>

<p class=para>
splits a list of lines into a list of words.  Often, though, there is a
one-to-one mapping between input values and output values:

<div class=programlisting>
<p>
<pre>
@chars = map chr, @nums;
</PRE>
</DIV>

<p class=para>
translates a list of numbers to the corresponding characters.  And
here's an example of a one-to-two mapping:

<div class=programlisting>
<p>
<pre>
%hash = map { genkey($_), $_ } @array;
</PRE>
</DIV>

<p class=para>
which is just a funny functional way to write this:

<div class=programlisting>
<p>
<pre>
%hash = ();
foreach $_ (@array) {
    $hash{genkey($_)} = $_;
}
</PRE>
</DIV>

<p class=para>
See also <a href="#PERL2-CMD-GREP">grep</A>.  <a href="#PERL2-CMD-MAP">map</A> differs from <a href="#PERL2-CMD-GREP">grep</A>
in that <a href="#PERL2-CMD-MAP">map</A> returns a list consisting of the
results of each successive evaluation of <tt class=replaceable><i>EXPR</i></tt>,
whereas <a href="#PERL2-CMD-GREP">grep</A> returns a list consisting of
each value of <tt class=replaceable><i>LIST</i></tt> for which
<tt class=replaceable><i>EXPR</i></tt> evaluates to true.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-MKDIR">mkdir</A></h3>

<div class=programlisting>
<p>
<pre>
mkdir <tt class=replaceable><i>FILENAME</i></tt>, <tt class=replaceable><i>MODE</i></tt>
</PRE>
</DIV>

<p class=para>
This function creates the directory specified by <tt class=replaceable><i>FILENAME</i></tt>, with
permissions specified by the numeric <tt class=replaceable><i>MODE</i></tt> (as modified by the
current umask).
If it succeeds it returns 1, otherwise it returns 0 and sets <b>$!</B>
(from the value of <tt class=literal>errno</tt>).

<p class=para>
If <i class=emphasis>mkdir</I> (2) is not built in to your C library, Perl emulates it by
calling the <i class=emphasis>mkdir</I> (1) program.  If you are creating a long list of
directories on such a system it will be more efficient to call the
<i class=emphasis>mkdir</I> program yourself with the list of directories to avoid
starting zillions of subprocesses.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-MSGCTL">msgctl</A></h3>

<div class=programlisting>
<p>
<pre>
msgctl <tt class=replaceable><i>ID</i></tt>, <tt class=replaceable><i>CMD</i></tt>, <tt class=replaceable><i>ARG</i></tt>
</PRE>
</DIV>

<p class=para>
This function calls the <i class=emphasis>msgctl</I> (2) system call.
See <i class=emphasis>msgctl</I> (2) for details.
If <tt class=replaceable><i>CMD</i></tt> is <tt class=literal>&amp;IPC_STAT</tt>, then <tt class=replaceable><i>ARG</i></tt> must be a
variable that will hold the returned <tt class=literal>msqid_ds</tt> structure.  The
return value works like <a href="#PERL2-CMD-IOCTL">ioctl</A>'s: the undefined value for error,
"<tt class=literal>0 but true</tt>" for zero, or the actual return value otherwise.
On error, it puts the error code into <b>$!</B>.  Before calling, you
should say:

<div class=programlisting>
<p>
<pre>
require "ipc.ph";
require "msg.ph";
</PRE>
</DIV>

<p class=para>
This function is available only on machines supporting System V IPC, which 
turns out to be far fewer than those supporting sockets.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-MSGGET">msgget</A></h3>

<div class=programlisting>
<p>
<pre>
msgget <tt class=replaceable><i>KEY</i></tt>, <tt class=replaceable><i>FLAGS</i></tt>
</PRE>
</DIV>

<p class=para>
This function calls the System V IPC <i class=emphasis>msgget</I> (2) system call.
See <i class=emphasis>msgget</I> (2) for details.
The function returns the message queue ID, or the
undefined value if there is an error.  On error, it puts the error
code into <b>$!</B>.  Before calling, you should say:

<div class=programlisting>
<p>
<pre>
require "ipc.ph";
require "msg.ph";
</PRE>
</DIV>

<p class=para>
This function is available only on machines supporting System V IPC.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-MSGRCV">msgrcv</A></h3>

<div class=programlisting>
<p>
<pre>
msgrcv <tt class=replaceable><i>ID</i></tt>, <tt class=replaceable><i>VAR</i></tt>, <tt class=replaceable><i>SIZE</i></tt>, <tt class=replaceable><i>TYPE</i></tt>, <tt class=replaceable><i>FLAGS</i></tt>
</PRE>
</DIV>

<p class=para>
This function calls
the <i class=emphasis>msgrcv</I> (2) system call to receive a message from
message queue ID into variable <tt class=replaceable><i>VAR</i></tt> with a maximum
message size of <tt class=replaceable><i>SIZE</i></tt>.  See
<i class=emphasis>msgrcv</I> (2) for details.  When a message is received,
the message type will be the first thing in <tt class=replaceable><i>VAR</i></tt>, and
the maximum length of <tt class=replaceable><i>VAR</i></tt> is
<tt class=replaceable><i>SIZE</i></tt> plus the size of the message type.  The function
returns true if successful, or false if there is an error.  On error, it puts
the error code into <b>$!</B>.  Before calling, you
should say:

<div class=programlisting>
<p>
<pre>
require "ipc.ph";
require "msg.ph";
</PRE>
</DIV>

<p class=para>
This function is available only on machines supporting System V IPC.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-MSGSND">msgsnd</A></h3>

<div class=programlisting>
<p>
<pre>
msgsnd <tt class=replaceable><i>ID</i></tt>, <tt class=replaceable><i>MSG</i></tt>, <tt class=replaceable><i>FLAGS</i></tt>
</PRE>
</DIV>

<p class=para>
This function calls the <i class=emphasis>msgsnd</I> (2) system call to send the
message <tt class=replaceable><i>MSG</i></tt> to the message queue <tt class=replaceable><i>ID</i></tt>.
See <i class=emphasis>msgsnd</I> (2) for details.  <tt class=replaceable><i>MSG</i></tt> must
begin with the long integer message type.  You can create a message
like this:

<div class=programlisting>
<p>
<pre>
$msg = pack "L a*", $type, $text_of_message;
</PRE>
</DIV>

<p class=para>
The function returns true if successful, or false if there is an
error.  On error, it puts the error code into <b>$!</B>.  Before
calling, you should say:

<div class=programlisting>
<p>
<pre>
require "ipc.ph";
require "msg.ph";
</PRE>
</DIV>

<p class=para>
This function is available only on machines supporting System V IPC.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-MY">my</A></h3>

<div class=programlisting>
<p>
<pre>
my <tt class=replaceable><i>EXPR</i></tt>
</PRE>
</DIV>

<p class=para>
This operator declares
one or more private variables to exist only within the innermost enclosing
block, subroutine, <a href="#PERL2-CMD-EVAL">eval</A>, or file.  If more
than one variable is listed, the list must be placed in parentheses, because the
operator binds more tightly than comma.  Only simple scalars or complete arrays
and hashes may be declared this way.  The variable name may not be package
qualified, because package variables are all global, and private variables are
not related to any package.  Unlike <a href="#PERL2-CMD-LOCAL">local</A>,
this operator has nothing to do with global variables, other than hiding any
other variable of the same name from view within its scope.  (A global variable
can always be accessed through its package-qualified form, however.)  A private
variable is not visible until the statement <i class=emphasis>after</I> its
declaration.  Subroutines 
called from within the scope of such a private variable cannot see the private
variable unless the subroutine is also textually declared within the scope of
the variable.  The technical term for this is "lexical scoping", so we often
call these "lexical variables".  In C culture they're called "auto" variables,
since they're automatically allocated and deallocated at scope entry and exit.

<p class=para>
The <tt class=replaceable><i>EXPR</i></tt> may be assigned to if desired, which allows you to initialize
your lexical variables.  (If no initializer is given, all scalars are
initialized to the undefined value and all arrays and hashes
to empty arrays.)  As with ordinary assignment, if you
use parentheses around the variables on the left (or if the variable is
an array or hash), the expression on
the right is evaluated in list context.  Otherwise the expression
on the right is evaluated in scalar context.  You can name your formal
subroutine parameters with a list assignment, like this:

<div class=programlisting>
<p>
<pre>
my ($friends, $romans, $countrymen) = @_;
</PRE>
</DIV>

<p class=para>
Be careful not to omit the parentheses indicating list assignment, like this:

<div class=programlisting>
<p>
<pre>
my $country = @_;  # right or wrong?
</PRE>
</DIV>

<p class=para>
This assigns the length of the array (that is, the number of the
subroutine's arguments)
to the variable, since the array is being evaluated in scalar context.
You can profitably use scalar assignment for a formal parameter though,
as long as you use the <a href="#PERL2-CMD-SHIFT">shift</A> operator.  In fact, since object methods
are passed the object as the first argument, many such method subroutines
start off like this:

<div class=programlisting>
<p>
<pre>
sub simple_as {
    my $self = shift;   # scalar assignment
    my ($a,$b,$c) = @_; # list assignment
    ...
}
</PRE>
</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-NEW">new</A></h3>

<div class=programlisting>
<p>
<pre>
new <tt class=replaceable><i>CLASSNAME</i></tt> <tt class=replaceable><i>LIST</i></tt>
new <tt class=replaceable><i>CLASSNAME</i></tt>
</PRE>
</DIV>

<p class=para>
There is no built-in <a href="#PERL2-CMD-NEW">new</A> function.  It is merely an ordinary
constructor method (subroutine) defined (or inherited) by the
<tt class=replaceable><i>CLASSNAME</i></tt> module to let you construct objects of type
<tt class=replaceable><i>CLASSNAME</i></tt>.  Most constructors are named "new", but
only by convention, just to delude C++ programmers into thinking they
know what's going on.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-NEXT">next</A></h3>

<div class=programlisting>
<p>
<pre>
next <tt class=replaceable><i>LABEL</i></tt>
next
</PRE>
</DIV>

<p class=para>
The <a href="#PERL2-CMD-NEXT">next</A> command is like the 
<b>continue</B> statement in C: it starts
the next iteration of the loop designated by <tt class=replaceable><i>LABEL</i></tt>:

<div class=programlisting>
<p>
<pre>
LINE: while (&lt;STDIN&gt;) {
    next LINE if /^#/;     # discard comments
    ...
}
</PRE>
</DIV>

<p class=para>
Note that if there were a <b>continue</B> block in this example, it would
execute immediately following the invocation of <a href="#PERL2-CMD-NEXT">next</A>.
When <tt class=replaceable><i>LABEL</i></tt> is omitted, the command
refers to the innermost enclosing loop.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-NO">no</A></h3>

<div class=programlisting>
<p>
<pre>
no <tt class=replaceable><i>Module</i></tt> <tt class=replaceable><i>LIST</i></tt>
</PRE>
</DIV>

<p class=para>
See the <a href="#PERL2-CMD-USE">use</A> operator, 
which <a href="#PERL2-CMD-NO">no</A> is the opposite of, kind of.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-OCT">oct</A></h3>

<div class=programlisting>
<p>
<pre>
oct <tt class=replaceable><i>EXPR</i></tt>
</PRE>
</DIV>

<p class=para>
This function interprets <tt class=replaceable><i>EXPR</i></tt> as an octal string and returns the
equivalent decimal value.
(If <tt class=replaceable><i>EXPR</i></tt> happens to start off with <tt class=literal>0x</tt>,
it is interpreted as a hex
string instead.)  The following will handle decimal, octal, and hex in
the standard notation:

<div class=programlisting>
<p>
<pre>
$val = oct $val if $val =~ /^0/;
</PRE>
</DIV>

<p class=para>
If <tt class=replaceable><i>EXPR</i></tt> is omitted, the function interprets <b>$_</B>.
To perform the inverse function on octal numbers,
use:

<div class=programlisting>
<p>
<pre>
$oct_string = sprintf "%lo", $number;
</PRE>
</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-OPEN">open</A></h3>

<div class=programlisting>
<p>
<pre>
open <tt class=replaceable><i>FILEHANDLE</i></tt>, <tt class=replaceable><i>EXPR</i></tt>
open <tt class=replaceable><i>FILEHANDLE</i></tt>
</PRE>
</DIV>

<p class=para>
<a name="CH03.OPEN1"></A><a name="CH03.OPEN2"></A><a name="CH03.OPEN3"></A>This function opens the file whose filename is given by <tt class=replaceable><i>EXPR</i></tt>, and
associates it with <tt class=replaceable><i>FILEHANDLE</i></tt>.  If <tt class=replaceable><i>EXPR</i></tt> is omitted, the
scalar variable of the same name as the <tt class=replaceable><i>FILEHANDLE</i></tt> must contain the
filename.  (And you must also be careful to use "<tt class=literal>or die</tt>" after the
statement rather than "<tt class=literal>|| die</tt>", because the precedence of <tt class=literal>||</tt>
is higher than list operators like <a href="#PERL2-CMD-OPEN">open</A>.)
<tt class=replaceable><i>FILEHANDLE</i></tt> may be a directly specified filehandle name, or an
expression whose value will be used for the filehandle.  The latter is
called an indirect filehandle.  If you supply an undefined variable for the indirect
filehandle, Perl will not automatically fill it in for you--you
have to make sure the expression returns something unique, either
a string specifying the actual filehandle name, or a filehandle
object from one of the object-oriented I/O packages.  (A filehandle
object is unique because you call a constructor to generate the object.
See the example later in this section.)

<p class=para>
After the filehandle is determined, the filename string is processed.  First,
any leading and trailing whitespace is removed from the string.
Then the string is examined on both ends for characters specifying how
the file is to be opened.  (By an amazing coincidence, these characters
look just like the characters you'd use to indicate I/O redirection to the
Bourne shell.)  If the filename begins with <tt class=literal>&lt;</tt> or nothing, the file
is opened for input.  If the filename begins with <tt class=literal>&gt;</tt>, the file
is truncated and opened for output.  If the filename begins with <tt class=literal>&gt;&gt;</tt>, the
file is opened for appending.
(You can also put a <tt class=literal>+</tt> in front of the <tt class=literal>&gt;</tt> or <tt class=literal>&lt;</tt> to
indicate that you want both read and write access to the file.)
If the filename begins with <tt class=literal>|</tt>, the filename is interpreted as
a command to which output is to be piped, and if the filename ends
with a <tt class=literal>|</tt>, the filename is interpreted as command which pipes
input to us.
You may not have an <b>open</B> command that pipes both
in and out, although 
the IPC::Open2 and IPC::Open3 library routines give you a close
equivalent.  See the section "Bidirectional Communication" in <a href="ch06_01.htm">Chapter 6, <i>Social Engineering</i></A>.

<p class=para>
Any pipe command containing shell metacharacters is passed to
<i class=emphasis>/bin/sh</I> for execution; otherwise it is executed directly by
Perl.  The filename "<tt class=literal>-</tt>" refers to
<tt class=literal>STDIN</tt>, and "<tt class=literal>&gt;-</tt>" refers to
<tt class=literal>STDOUT</tt>.  <a href="#PERL2-CMD-OPEN">open</A> returns
non-zero upon success, the undefined value otherwise.  If the <b>open</B> involved a pipe, the return value happens to be the
process ID of the subprocess.

<p class=para>
If you're unfortunate enough to be running Perl on a system that
distinguishes between text files and binary files (modern operating
systems don't care), then you should check out <a href="#PERL2-CMD-BINMODE">binmode</A> for tips
for dealing with this.  The key distinction between systems that need
<a href="#PERL2-CMD-BINMODE">binmode</A> and those that don't is their text file formats.
Systems like UNIX and Plan9 that delimit lines with a single
character, and that encode that character in C as <tt class=literal>'\n'</tt>, do
not need <a href="#PERL2-CMD-BINMODE">binmode</A>.  The rest need it.

<p class=para>
Here is some code that shows the relatedness of a filehandle and a
variable of the same name:

<div class=programlisting>
<p>
<pre>
$ARTICLE = "/usr/spool/news/comp/lang/perl/misc/38245";
open ARTICLE or die "Can't find article $ARTICLE: $!\n";
while (&lt;ARTICLE&gt;) {...
</PRE>
</DIV>

<p class=para>
Append to a file like this:

<div class=programlisting>
<p>
<pre>
open LOG, '&gt;&gt;/usr/spool/news/twitlog'; # (`log' is reserved)
</PRE>
</DIV>

<p class=para>
Pipe your data from a process:

<div class=programlisting>
<p>
<pre>
open ARTICLE, "caesar &lt;$article |";   # decrypt article with rot13
</PRE>
</DIV>

<p class=para>
Here <tt class=literal>&lt;</tt> does not indicate that Perl should open the file for input,
because <tt class=literal>&lt;</tt>
is not the first character of <tt class=replaceable><i>EXPR</i></tt>.  Rather, the concluding
<tt class=literal>|</tt> indicates that input is to be piped from <tt class=literal>caesar &lt;$article</tt> (from
the program <i class=emphasis>caesar</I>, which takes <i class=emphasis>$article</I> as its standard
input).
The <tt class=literal>&lt;</tt> is interpreted by the subshell that Perl uses to start
the pipe, because <tt class=literal>&lt;</tt> is a shell metacharacter.

<p class=para>
Or pipe your data to a process:

<div class=programlisting>
<p>
<pre>
open EXTRACT, "|sort &gt;/tmp/Tmp$$";    # $$ is our process number
</PRE>
</DIV>

<p class=para>
In this next example we show one way to do recursive opens, via
indirect filehandles.  The files will be opened on filehandles
<tt class=literal>fh01</tt>, <tt class=literal>fh02</tt>, <tt class=literal>fh03</tt>, and so on.  Because <tt class=literal>$input</tt> is
a local variable, it is preserved through recursion, allowing us to
close the correct file before we return.

<div class=programlisting>
<p>
<pre>
# Process argument list of files along with any includes.
foreach $file (@ARGV) {
    process($file, 'fh00');
}
sub process {
    local($filename, $input) = @_;
    $input++;               # this is a string increment
    unless (open $input, $filename) {
        print STDERR "Can't open $filename: $!\n";
        return;
    }
    while (&lt;$input&gt;) {      # note the use of indirection
        if (/^#include "(.*)"/) {
            process($1, $input);
            next;
        }
        ...               # whatever
    }
    close $input;
}
</PRE>
</DIV>

<p class=para>
You may also, in the Bourne shell tradition, specify an <tt class=replaceable><i>EXPR</i></tt> beginning
with <tt class=literal>&gt;&amp;</tt>, in which case the rest of the string is interpreted
as the name of a filehandle (or file descriptor, if numeric) which is
to be duped and opened.[6]
You may use <tt class=literal>&amp;</tt> after <tt class=literal>&gt;</tt>, <tt class=literal>&gt;&gt;</tt>, <tt class=literal>&lt;</tt>, <tt class=literal>+&gt;</tt>,
<tt class=literal>+&gt;&gt;</tt>, and <tt class=literal>+&lt;</tt>.  The mode you specify should match the mode
of the original filehandle.  Here is a script that saves, redirects,
and restores <tt class=literal>STDOUT</tt> and <tt class=literal>STDERR</tt>:

<blockquote class=footnote>
<p class=para>[6] 
The word "dup" is UNIX-speak for "duplicate".  We're not really trying
to dupe you.  Trust us.
</blockquote>
<div class=programlisting>
<p>
<pre>
#!/usr/bin/perl
open SAVEOUT, "&gt;&amp;STDOUT";
open SAVEERR, "&gt;&amp;STDERR";
open STDOUT, "&gt;foo.out" or die "Can't redirect stdout";
open STDERR, "&gt;&amp;STDOUT" or die "Can't dup stdout";
select STDERR; $| = 1;         # make unbuffered
select STDOUT; $| = 1;         # make unbuffered
print STDOUT "stdout 1\n";     # this propagates to
print STDERR "stderr 1\n";     # subprocesses too
close STDOUT;
close STDERR;
open STDOUT, "&gt;&amp;SAVEOUT";
open STDERR, "&gt;&amp;SAVEERR";
print STDOUT "stdout 2\n";
print STDERR "stderr 2\n";
</PRE>
</DIV>

<p class=para>
If you specify <tt class=literal>&lt;&amp;=</tt><tt class=replaceable><i>N</i></tt>, where
<tt class=replaceable><i>N</i></tt> is a number, then Perl will do an equivalent of C's
<i class=emphasis>fdopen</I> (3) of that file descriptor; this is more
parsimonious with file descriptors than the dup form described earlier.  (On the
other hand, it's more dangerous, since two filehandles may now be sharing the
same file descriptor, and a close on one filehandle may prematurely close the
other.)  For example:

<div class=programlisting>
<p>
<pre>
open <tt class=replaceable><i>FILEHANDLE</i></tt>, "&lt;&amp;=$fd";
</PRE>
</DIV>

<p class=para>
If you open a
pipe to or from the command "<tt class=literal>-</tt>" (that is, either
<tt class=literal>|-</tt> or <tt class=literal>-|</tt>), then an implicit fork is done,
and the return value of <b>open</B> is the pid of the
child within the parent process, and <tt class=literal>0</tt> within the child
process.  (Use <tt class=literal>defined($pid)</tt> in either the parent or child to
determine whether the <b>open</B> was successful.)  The
filehandle behaves normally for the parent, but input and output to that
filehandle is piped from or to the <tt class=literal>STDOUT</tt> or
<tt class=literal>STDIN</tt> of the child process.  In the child process the
filehandle isn't opened--I/O happens from or to the new
<tt class=literal>STDIN</tt> or <tt class=literal>STDOUT</tt>.  Typically this is used
like the normal piped <b>open</B> when you want to
exercise more control over just how the pipe command gets executed, such as when
you are running setuid, and don't want to have to scan shell commands for
metacharacters.  The following pairs are equivalent:

<div class=programlisting>
<p>
<pre>
open FOO, "|tr '[a-z]' '[A-Z]'";
open FOO, "|-" or exec 'tr', '[a-z]', '[A-Z]';
open FOO, "cat -n file|";
open FOO, "-|" or exec 'cat', '-n', 'file';
</PRE>
</DIV>

<p class=para>
Explicitly closing any piped filehandle causes the parent process to
wait for the child to finish, and returns the status value in
<b>$?</B>.  On any operation which may do a fork, unflushed
buffers remain unflushed in both processes, which means you may need
to set <b>$|</B> on one or more filehandles to avoid duplicate output
(and then do output to flush them).

<p class=para>
Filehandles <tt class=literal>STDIN</tt>, <tt class=literal>STDOUT</tt>, and <tt class=literal>STDERR</tt> remain open
following an exec.  Other filehandles do not.  (However, on systems
supporting the <a href="#PERL2-CMD-FCNTL">fcntl</A> function, you may modify the
close-on-exec flag for a filehandle. See <a href="#PERL2-CMD-FCNTL">fcntl</A> earlier in
this chapter.  See also the special <b>$^F</B> variable.)

<p class=para>
Using the constructor from the
FileHandle module, described in <a href="ch07_01.htm">Chapter 7, <i>The Standard Perl Library</i></A>,
you can generate anonymous filehandles which have the scope of whatever
variables hold references to them, and automatically close whenever
and however you leave that scope:

<div class=programlisting>
<p>
<pre>
use FileHandle;
...
sub read_myfile_munged {
    my $ALL = shift;
    my $handle = new FileHandle;
    open $handle, "myfile" or die "myfile: $!";
    $first = &lt;$handle&gt; or return ();      # Automatically closed here.
    mung $first or die "mung failed";     # Or here.
    return $first, &lt;$handle&gt; if $ALL;     # Or here.
    $first;                               # Or here.
}
</PRE>
</DIV>

<p class=para>
In order to open a file with arbitrary weird characters in it, it's necessary
to protect any leading and trailing whitespace, like this:

<div class=programlisting>
<p>
<pre>
$file =~ s#^\s#./$&amp;#;
open FOO, "&lt; $file\0";
</PRE>
</DIV>

<p class=para>
But we've never actually seen anyone use that in a script . . .

<p class=para>
If you want a real C <i class=emphasis>open</I> (2), then
you should use the <a href="#PERL2-CMD-SYSOPEN">sysopen</A> function.  This is another way to
protect your filenames from interpretation.  For example:

<div class=programlisting>
<p>
<pre>
use FileHandle;
sysopen HANDLE, $path, O_RDWR|O_CREAT|O_EXCL, 0700
    or die "sysopen $path: $!";
HANDLE-&gt;autoflush(1);
HANDLE-&gt;print("stuff $$\n");
seek HANDLE, 0, 0;
print "File contains: ", &lt;HANDLE&gt;;
</PRE>
</DIV>

<p class=para>
See <a href="#PERL2-CMD-SEEK">seek</A> for some details about mixing reading and writing.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-OPENDIR">opendir</A></h3>

<div class=programlisting>
<p>
<pre>
opendir <tt class=replaceable><i>DIRHANDLE</i></tt>, <tt class=replaceable><i>EXPR</i></tt>
</PRE>
</DIV>

<p class=para>
This function opens a directory named <tt class=replaceable><i>EXPR</i></tt> for processing by
<a href="#PERL2-CMD-READDIR">readdir</A>,
<a href="#PERL2-CMD-TELLDIR">telldir</A>,
<a href="#PERL2-CMD-SEEKDIR">seekdir</A>,
<a href="#PERL2-CMD-REWINDDIR">rewinddir</A>, and
<a href="#PERL2-CMD-CLOSEDIR">closedir</A>.  The function returns
true if successful.  Directory handles have their own namespace separate from
filehandles.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-ORD">ord</A></h3>

<div class=programlisting>
<p>
<pre>
ord <tt class=replaceable><i>EXPR</i></tt>
</PRE>
</DIV>

<p class=para>
This function returns the numeric ASCII value of the first character
of <tt class=replaceable><i>EXPR</i></tt>.
If <tt class=replaceable><i>EXPR</i></tt> is omitted, it uses <b>$_</B>.  The return value is always
unsigned.
If you want a signed value, use <tt class=literal>unpack('c',</tt> <tt class=replaceable><i>EXPR</i></tt><tt class=literal>)</tt>.
If you want all the characters of the string converted to a list of numbers, use
<tt class=literal>unpack('C*',</tt> <tt class=replaceable><i>EXPR</i></tt><tt class=literal>)</tt> instead.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-PACK">pack</A></h3>

<div class=programlisting>
<p>
<pre>
pack <tt class=replaceable><i>TEMPLATE</i></tt>, <tt class=replaceable><i>LIST</i></tt>
</PRE>
</DIV>

<p class=para>
<a name="CH03.PACK1"></A><a name="CH03.PACK2"></A>This function takes a list of values and packs it into a
binary structure, returning the string containing the structure.
The <tt class=replaceable><i>TEMPLATE</i></tt> is a sequence of characters that give the order and type
of values, as follows:

<div class=informaltable>
<p>
<a name="PERL2-CH-3-TAB-3"></A>

<table class=INFORMALTABLE>
<tr class=row>
<th align="CENTER">Character</TH>
<th align="left">Meaning</TH>
</TR>
<tr class=row>
<td align="CENTER"><tt class=literal>a</tt></TD>
<td align="left">An ASCII string, will be null padded</TD>
</TR>
<tr class=row>
<td align="CENTER"><tt class=literal>A</tt></TD>
<td align="left">An ASCII string, will be space padded</TD>
</TR>
<tr class=row>
<td align="CENTER"><tt class=literal>b</tt></TD>
<td align="left">A bit string, low-to-high order (like <b>vec</B>( ))</TD>
</TR>
<tr class=row>
<td align="CENTER"><tt class=literal>B</tt></TD>
<td align="left">A bit string, high-to-low order</TD>
</TR>
<tr class=row>
<td align="CENTER"><tt class=literal>c</tt></TD>
<td align="left">A signed char value</TD>
</TR>
<tr class=row>
<td align="CENTER"><tt class=literal>C</tt></TD>
<td align="left">An unsigned char value</TD>
</TR>
<tr class=row>
<td align="CENTER"><tt class=literal>d</tt></TD>
<td align="left">A double-precision float in the native format</TD>
</TR>
<tr class=row>
<td align="CENTER"><tt class=literal>f</tt></TD>
<td align="left">A single-precision float in the native format</TD>
</TR>
<tr class=row>
<td align="CENTER"><tt class=literal>h</tt></TD>
<td align="left">A hexadecimal string, low nybble first</TD>
</TR>
<tr class=row>
<td align="CENTER"><tt class=literal>H</tt></TD>
<td align="left">A hexadecimal string, high nybble first</TD>
</TR>
<tr class=row>
<td align="CENTER"><tt class=literal>i</tt></TD>
<td align="left">A signed integer value</TD>
</TR>
<tr class=row>
<td align="CENTER"><tt class=literal>I</tt></TD>
<td align="left">An unsigned integer value</TD>
</TR>
<tr class=row>
<td align="CENTER"><tt class=literal>l</tt></TD>
<td align="left">A signed long value</TD>
</TR>
<tr class=row>
<td align="CENTER"><tt class=literal>L</tt></TD>
<td align="left">An unsigned long value      <i class=emphasis>(continued)</I></TD>
</TR>
<tr class=row>
<td align="CENTER"><tt class=literal>n</tt></TD>
<td align="left">A short in "network" (big-endian) order</TD>
</TR>
<tr class=row>
<td align="CENTER"><tt class=literal>N</tt></TD>
<td align="left">A long in "network" (big-endian) order</TD>
</TR>
<tr class=row>
<td align="CENTER"><tt class=literal>p</tt></TD>
<td align="left">A pointer to a string</TD>
</TR>
<tr class=row>
<td align="CENTER"><tt class=literal>P</tt></TD>
<td align="left">A pointer to a structure (fixed-length string)</TD>
</TR>
<tr class=row>
<td align="CENTER"><tt class=literal>s</tt></TD>
<td align="left">A signed short value</TD>
</TR>
<tr class=row>
<td align="CENTER"><tt class=literal>S</tt></TD>
<td align="left">An unsigned short value</TD>
</TR>
<tr class=row>
<td align="CENTER"><tt class=literal>v</tt></TD>
<td align="left">A short in "VAX" (little-endian) order</TD>
</TR>
<tr class=row>
<td align="CENTER"><tt class=literal>V</tt></TD>
<td align="left">A long in "VAX" (little-endian) order</TD>
</TR>
<tr class=row>
<td align="CENTER"><tt class=literal>u</tt></TD>
<td align="left">A uuencoded string</TD>
</TR>
<tr class=row>
<td align="CENTER"><tt class=literal>x</tt></TD>
<td align="left">A null byte</TD>
</TR>
<tr class=row>
<td align="CENTER"><tt class=literal>X</tt></TD>
<td align="left">Back up a byte</TD>
</TR>
<tr class=row>
<td align="CENTER"><tt class=literal>@</tt></TD>
<td align="left">Null-fill to absolute position</TD>
</TR>
</TABLE>
<p>
</DIV>

<p class=para>
Each character may optionally be followed by a number which gives a repeat
count.  Together the character and the repeat count make a field specifier.
Field specifiers may be separated by whitespace, which will be ignored.  With
all types except <tt class=literal>"a"</tt> and <tt class=literal>"A"</tt>, the <a href="#PERL2-CMD-PACK">pack</A> function will gobble up that many values from
the <tt class=replaceable><i>LIST</i></tt>.  Saying <tt class=literal>"*"</tt> for the
repeat count means to use however many items are left.  The
<tt class=literal>"a"</tt> and <tt class=literal>"A"</tt> types gobble just one value,
but pack it as a string of length <i class=emphasis>count</I>, padding with nulls
or spaces as necessary.  (When unpacking, <tt class=literal>"A"</tt> strips trailing
spaces and nulls, but <tt class=literal>"a"</tt> does not.)  Real numbers (floats
and doubles) are in the native machine format only; due to the multiplicity of
floating formats around, and the lack of a standard network representation, no
facility for interchange has been made.  This means that packed floating-point
data written on one machine may not be readable on another--even if both
use IEEE floating-point arithmetic (as the endian-ness of the memory
representation is not part of the IEEE spec).  Also, Perl uses doubles
internally for all numeric calculation, and converting from double to float to
double will lose precision; that is, <tt class=literal>unpack(`f`,
pack(`f`,$num))</tt> will not in general equal <tt class=literal>$num</tt>.

<p class=para>
This first pair of examples packs numeric values into bytes:

<div class=programlisting>
<p>
<pre>
$out = pack "cccc", 65, 66, 67, 68;      # $out eq "ABCD"
$out = pack "c4", 65, 66, 67, 68;        # same thing
</PRE>
</DIV>

<p class=para>
This does a similar thing, with a couple of nulls thrown in:

<div class=programlisting>
<p>
<pre>
$out = pack "ccxxcc", 65, 66, 67, 68;    # $out eq "AB\0\0CD"
</PRE>
</DIV>

<p class=para>
Packing your shorts doesn't imply that you're portable:

<div class=programlisting>
<p>
<pre>
$out = pack "s2", 1, 2;    # "\1\0\2\0" on little-endian
                           # "\0\1\0\2" on big-endian
</PRE>
</DIV>

<p class=para>
On binary and hex packs, the count refers to the number of bits or nybbles,
not the number of bytes produced:

<div class=programlisting>
<p>
<pre>
$out = pack "B32", "01010000011001010111001001101100";
$out = pack "H8", "5065726c";    # both produce "Perl"
</PRE>
</DIV>

<p class=para>
The length on an <tt class=literal>"a"</tt> field applies only to one string:

<div class=programlisting>
<p>
<pre>
$out = pack "a4", "abcd", "x", "y", "z";      # "abcd"
</PRE>
</DIV>

<p class=para>
To get around that limitation, use multiple specifiers:

<div class=programlisting>
<p>
<pre>
$out = pack "aaaa",  "abcd", "x", "y", "z";   # "axyz"
$out = pack "a" x 4, "abcd", "x", "y", "z";   # "axyz"
</PRE>
</DIV>

<p class=para>
The <tt class=literal>"a"</tt> format does null filling:

<div class=programlisting>
<p>
<pre>
$out = pack "a14", "abcdefg";   # "abcdefg\0\0\0\0\0\0\0"
</PRE>
</DIV>

<p class=para>
This template packs a C <tt class=literal>struct tm</tt> record (at least on some
systems):

<div class=programlisting>
<p>
<pre>
$out = pack "i9pl", gmtime, $tz, $toff;
</PRE>
</DIV>

<p class=para>
The same template may generally also be used in the <a href="#PERL2-CMD-UNPACK">unpack</A> function.  If you want to join variable length
fields with a delimiter, use the <a href="#PERL2-CMD-JOIN">join</A>
function.

<p class=para>
Note that, although all of our examples use literal strings as templates,
there is no reason you couldn't pull in your templates from a disk file.
You could, in fact, build an entire relational database system around this
function.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-PACKAGE">package</A></h3>

<div class=programlisting>
<p>
<pre>
package <tt class=replaceable><i>NAMESPACE</i></tt>
</PRE>
</DIV>

<p class=para>
This is not really a function, but a declaration that says that the rest of the
innermost enclosing block, subroutine, <a href="#PERL2-CMD-EVAL">eval</A>
or file belongs to the indicated namespace.  (The scope of a <a href="#PERL2-CMD-PACKAGE">package</A> declaration is thus the same as the scope of a
<a href="#PERL2-CMD-LOCAL">local</A> or <a href="#PERL2-CMD-MY">my</A> declaration.)  All subsequent references to unqualified
global identifiers will be resolved by looking them up in the declared package's
symbol table.  A <a href="#PERL2-CMD-PACKAGE">package</A> declaration affects
only global variables--including those you've used <a href="#PERL2-CMD-LOCAL">local</A> on--but not lexical variables created with <a href="#PERL2-CMD-MY">my</A>.

<p class=para>
Typically you would put a <b>package</B> declaration as the first thing in a file that
is to be included by the <a href="#PERL2-CMD-REQUIRE">require</A> or <a href="#PERL2-CMD-USE">use</A> operator, but you can put one anywhere that a
statement would be legal.  When defining a class or a module file, it is
customary to name the package the same name as the file, to avoid confusion.
(It's also customary to name such packages beginning with a capital letter,
because lowercase modules are by convention interpreted as pragmas.)

<p class=para>
You can switch into a given package in more than one place; it merely influences
which symbol table is used by the compiler for the rest of that block.  (If it
sees another <b>package</B> declaration at the same
level, the new one overrides the previous one.)  Your main program is assumed to
start with a <tt class=literal>package main</tt> declaration.

<p class=para>
You can refer to variables and filehandles in other packages by qualifying the
identifier with the package name and a double colon:
<tt class=literal>$Package::Variable</tt>.  If the package name is null, the main
package as assumed.  That is, <tt class=literal>$::sail</tt> is equivalent to
<tt class=literal>$main::sail</tt>.

<p class=para>
The symbol table for a package is stored in a hash with a name ending in a
double colon.  The main package's symbol table is named
<tt class=literal>%main::</tt> for example.  So the package symbol
<tt class=literal>*main::sail</tt> can also be accessed as
<tt class=literal>$main::{"sail"}</tt>.

<p class=para>
See "Packages" in <a href="ch05_01.htm">Chapter 5, <i>Packages, Modules, and Object Classes</i></A>, for more information about
packages, modules, and classes.  See <a href="#PERL2-CMD-MY">my</A> in
<a href="ch03_01.htm">Chapter 3, <i>Functions</i></A>, for other scoping issues.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-PIPE">pipe</A></h3>

<div class=programlisting>
<p>
<pre>
pipe <tt class=replaceable><i>READHANDLE</i></tt>, <tt class=replaceable><i>WRITEHANDLE</i></tt>
</PRE>
</DIV>

<p class=para>
Like the corresponding
system call, this function opens a pair of connected pipes--see
<i class=emphasis>pipe</I> (2).  This call is almost always used right
before a <a href="#PERL2-CMD-FORK">fork</A>, after which the pipe's reader
should close <tt class=replaceable><i>WRITEHANDLE</i></tt>, and the writer close
<tt class=replaceable><i>READHANDLE</i></tt>.  (Otherwise the pipe won't indicate EOF
to the reader when the writer closes it.)  Note that if you set up a loop of
piped processes, deadlock can occur unless you are very careful.  In addition,
note that Perl's pipes use standard I/O buffering, so you may need to set
<b>$|</B> on your <tt class=replaceable><i>WRITEHANDLE</i></tt>
to flush after each output command, depending on the application--see <b>select</B> (<i class=emphasis>output filehandle</I>).

<p class=para>
See also the section on "Pipes" in <a href="ch06_01.htm">Chapter 6, <i>Social Engineering</i></A>.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-POP">pop</A></h3>

<div class=programlisting>
<p>
<pre>
pop <tt class=replaceable><i>ARRAY</i></tt>
pop
</PRE>
</DIV>

<p class=para>
This function treats an array like a stack--it pops
and returns the last value of the array, shortening the array by 1.
If
<tt class=replaceable><i>ARRAY</i></tt> is omitted, the function pops <b>@ARGV</B> (in the main program),
or <b>@_</B> (in subroutines).
It has the same effect as:

<div class=programlisting>
<p>
<pre>
$tmp = $ARRAY[$#ARRAY--];
</PRE>
</DIV>

<p class=para>
or:

<div class=programlisting>
<p>
<pre>
$tmp = splice @ARRAY, -1;
</PRE>
</DIV>

<p class=para>
If there are no elements in the array, <a href="#PERL2-CMD-POP">pop</A>
returns the undefined value.  See also <a href="#PERL2-CMD-PUSH">push</A>
and <a href="#PERL2-CMD-SHIFT">shift</A>.  If you want to pop more than one
element, use <a href="#PERL2-CMD-SPLICE">splice</A>.

<p class=para>
Note that <a href="#PERL2-CMD-POP">pop</A> requires its first argument to
be an array, not a list.  If you just want the last element of a list, use this:

<div class=programlisting>
<p>
<pre>
(something_returning_a_list)[-1]
</PRE>
</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-POS">pos</A></h3>

<div class=programlisting>
<p>
<pre>
pos <tt class=replaceable><i>SCALAR</i></tt>
</PRE>
</DIV>

<p class=para>
Returns the location in <tt class=replaceable><i>SCALAR</i></tt> where the last <tt class=literal>m//g</tt> search
over <tt class=replaceable><i>SCALAR</i></tt> left off.  It returns the offset of
the character <i class=emphasis>after</I> the last one matched.  (That is, it's equivalent to
<tt class=literal>length($`) + length($&amp;)</tt>.)  This is the offset where the next
<tt class=literal>m//g</tt> search on that string will start.  Remember that
the offset of the beginning of the string is <tt class=literal>0</tt>.  For example:

<div class=programlisting>
<p>
<pre>
$grafitto = "fee fie foe foo";
while ($grafitto =~ m/e/g) {
    print pos $grafitto, "\n";
}
</PRE>
</DIV>

<p class=para>
prints <tt class=literal>2</tt>, <tt class=literal>3</tt>, <tt class=literal>7</tt>, and
<tt class=literal>11</tt>, the offsets of each of the characters following an "e".
The <a href="#PERL2-CMD-POS">pos</A> function may be assigned a value to
tell the next <tt class=literal>m//g</tt> where to start:

<div class=programlisting>
<p>
<pre>
$grafitto = "fee fie foe foo";
pos $grafitto = 4;  # Skip the fee, start at fie
while ($grafitto =~ m/e/g) {
        print pos $grafitto, "\n";
}
</PRE>
</DIV>

<p class=para>
This prints only <tt class=literal>7</tt> and <tt class=literal>11</tt>.  (Thank
heaven.)  The regular expression assertion, <tt class=literal>\G</tt>, matches only
at the location currently specified by <a href="#PERL2-CMD-POS">pos</A>
for the string being searched.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-PRINT">print</A></h3>

<div class=programlisting>
<p>
<pre>
print <tt class=replaceable><i>FILEHANDLE</i></tt> <tt class=replaceable><i>LIST</i></tt>
print <tt class=replaceable><i>LIST</i></tt>
print
</PRE>
</DIV>

<p class=para>
This function prints a string or a comma-separated list of strings.
The function returns 1 if successful, 0 otherwise.  <tt class=replaceable><i>FILEHANDLE</i></tt> may be
a scalar variable name (unsubscripted), in which case the variable
contains either the name of the actual filehandle or a reference to
a filehandle object from one of the object-oriented filehandle packages.
<tt class=replaceable><i>FILEHANDLE</i></tt> may also be a block that returns either kind of value:

<div class=programlisting>
<p>
<pre>
print { $OK ? "STDOUT" : "STDERR" } "stuff\n";
print { $iohandle[$i] } "stuff\n";
</PRE>
</DIV>

<p class=para>
Note that if <tt class=replaceable><i>FILEHANDLE</i></tt> is a variable and the next
token is a term, it may be misinterpreted as an operator unless you
interpose a <b>+</B> or put parentheses around the arguments.
For example:

<div class=programlisting>
<p>
<pre>
print $a - 2;   # prints $a - 2 to default filehandle (usually STDOUT)
print $a (- 2); # prints -2 to filehandle specified in $a
print $a -2;    # ditto (weird parsing rules :-)
</PRE>
</DIV>

<p class=para>
If <tt class=replaceable><i>FILEHANDLE</i></tt> is omitted, the function prints to the currently
selected output filehandle, initially <tt class=literal>STDOUT</tt>.
To set the default output filehandle to something other than
<tt class=literal>STDOUT</tt> use the <tt class=literal>select</tt>(<tt class=replaceable><i>FILEHANDLE</i></tt>) operation.[7]
If <tt class=replaceable><i>LIST</i></tt> is also omitted, prints <b>$_</B>.  Note that, because
<a href="#PERL2-CMD-PRINT">print</A> takes a <tt class=replaceable><i>LIST</i></tt>, anything in the <tt class=replaceable><i>LIST</i></tt>
is evaluated in
list context, and any subroutine that you call will likely have one or more
of its own internal expressions evaluated in list context.
Thus, when you say:

<blockquote class=footnote>
<p class=para>[7] 
Thus, <tt class=literal>STDOUT</tt> isn't really the default filehandle for
<a href="#PERL2-CMD-PRINT">print</A>.  It's merely the default default filehandle.
</blockquote>
<div class=programlisting>
<p>
<pre>
print OUT &lt;STDIN&gt;;
</PRE>
</DIV>

<p class=para>
it is not going to print out the next line from standard input, but all the rest
of the lines from standard input up to end-of-file, since that's what
<tt class=literal>&lt;STDIN&gt;</tt> returns in list context.  Also, remembering the
if-it-looks-like-a-function-it-is-a-function rule, be careful not to follow the
<a href="#PERL2-CMD-PRINT">print</A> keyword with a left parenthesis unless
you want the corresponding right parenthesis to terminate the arguments to the
<a href="#PERL2-CMD-PRINT">print</A>--interpose a <b>+</B> or put parens around all the arguments:

<div class=programlisting>
<p>
<pre>
print (1+2)*3, "\n";            # WRONG
print +(1+2)*3, "\n";           # ok
print ((1+2)*3, "\n");          # ok
</PRE>
</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-PRINTF">printf</A></h3>

<div class=programlisting>
<p>
<pre>
printf <tt class=replaceable><i>FILEHANDLE</i></tt> <tt class=replaceable><i>LIST</i></tt>
printf <tt class=replaceable><i>LIST</i></tt>
</PRE>
</DIV>

<p class=para>
This function prints a
formatted string to <tt class=replaceable><i>FILEHANDLE</i></tt> or, if omitted, the
currently selected output filehandle, initially <tt class=literal>STDOUT</tt>.  This
is similar to the C library's <i class=emphasis>printf</I> (3) and
<i class=emphasis>fprintf</I> (3) function, except that the
<tt class=literal>*</tt> field width specifier is not supported.  The function is
exactly equivalent to:

<div class=programlisting>
<p>
<pre>
print <tt class=replaceable><i>FILEHANDLE</i></tt> sprintf <tt class=replaceable><i>LIST</i></tt>
</PRE>
</DIV>

<p class=para>
See <a href="#PERL2-CMD-PRINT">print</A> and <a href="#PERL2-CMD-SPRINTF">sprintf</A>.  The description of <a href="#PERL2-CMD-SPRINTF">sprintf</A> includes the list of acceptable specifications for
the format string.

<p class=para>
Don't fall into the trap of using a <a href="#PERL2-CMD-PRINTF">printf</A>
when a simple <a href="#PERL2-CMD-PRINT">print</A> would do.  The <a href="#PERL2-CMD-PRINT">print</A> is more efficient, and less error prone.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-PUSH">push</A></h3>

<div class=programlisting>
<p>
<pre>
push <tt class=replaceable><i>ARRAY</i></tt>, <tt class=replaceable><i>LIST</i></tt>
</PRE>
</DIV>

<p class=para>
This function treats
<tt class=replaceable><i>ARRAY</i></tt> as a stack, and pushes the values of
<tt class=replaceable><i>LIST</i></tt> onto the end of
<tt class=replaceable><i>ARRAY</i></tt>.  The length of
<tt class=replaceable><i>ARRAY</i></tt> increases by the length of
<tt class=replaceable><i>LIST</i></tt>.  The function returns this new length.  The
<a href="#PERL2-CMD-PUSH">push</A> function has the same effect as:

<div class=programlisting>
<p>
<pre>
foreach $value (<tt class=replaceable><i>LIST</i></tt>) {
    $ARRAY[++$#ARRAY] = $value;
}
</PRE>
</DIV>

<p class=para>
or:

<div class=programlisting>
<p>
<pre>
splice @ARRAY, @ARRAY, 0, <tt class=replaceable><i>LIST</i></tt>;
</PRE>
</DIV>

<p class=para>
but is more efficient (for both you and your computer).  You can use <a href="#PERL2-CMD-PUSH">push</A> in combination with <a href="#PERL2-CMD-SHIFT">shift</A> to make a fairly time-efficient shift register or
queue:

<div class=programlisting>
<p>
<pre>
for (;;) {
    push @ARRAY, shift @ARRAY;
    ...
}
</PRE>
</DIV>

<p class=para>
See also <a href="#PERL2-CMD-POP">pop</A> and <a href="#PERL2-CMD-UNSHIFT">unshift</A>.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-QSSTRINGS">q/STRING/</A></h3>

<div class=programlisting>
<p>
<pre>
q/<tt class=replaceable><i>STRING</i></tt>/
qq/<tt class=replaceable><i>STRING</i></tt>/
qx/<tt class=replaceable><i>STRING</i></tt>/
qw/<tt class=replaceable><i>STRING</i></tt>/
</PRE>
</DIV>

<p class=para>
Generalized quotes.  See <a href="ch02_01.htm">Chapter 2, <i>The Gory Details</i></A>.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-QUOTEMETA">quotemeta</A></h3>

<div class=programlisting>
<p>
<pre>
quotemeta <tt class=replaceable><i>EXPR</i></tt>
</PRE>
</DIV>

<p class=para>
This function returns the value of <tt class=replaceable><i>EXPR</i></tt> (or <b>$_</B> if not
specified) with all non-alphanumeric characters backslashed.
This is the internal function implementing the <tt class=literal>\Q</tt> escape
in interpolative contexts (including double-quoted strings, backticks, and patterns).

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-RAND">rand</A></h3>

<div class=programlisting>
<p>
<pre>
rand <tt class=replaceable><i>EXPR</i></tt>
rand
</PRE>
</DIV>

<p class=para>
This function returns a random fractional number between 0 and the
value of <tt class=replaceable><i>EXPR</i></tt>.  (<tt class=replaceable><i>EXPR</i></tt> should be positive.)
If <tt class=replaceable><i>EXPR</i></tt> is omitted, the function returns a value between 0 and 1
(including 0, but excluding 1).  See
also <a href="#PERL2-CMD-SRAND">srand</A>.

<p class=para>
To get an integral value, combine this with <a href="#PERL2-CMD-INT">int</A>, as in:

<div class=programlisting>
<p>
<pre>
$roll = int(rand 6) + 1;       # $roll is now an integer between 1 and 6
</PRE>
</DIV>

<p class=para>
</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-READ">read</A></h3>

<div class=programlisting>
<p>
<pre>
read <tt class=replaceable><i>FILEHANDLE</i></tt>, <tt class=replaceable><i>SCALAR</i></tt>, <tt class=replaceable><i>LENGTH</i></tt>, <tt class=replaceable><i>OFFSET</i></tt>
read <tt class=replaceable><i>FILEHANDLE</i></tt>, <tt class=replaceable><i>SCALAR</i></tt>, <tt class=replaceable><i>LENGTH</i></tt>
</PRE>
</DIV>

<p class=para>
This function attempts to read <tt class=replaceable><i>LENGTH</i></tt> bytes of data into variable
<tt class=replaceable><i>SCALAR</i></tt> from the specified <tt class=replaceable><i>FILEHANDLE</i></tt>.
The function returns the number
of bytes actually read, 0 at end-of-file.  It returns the undefined
value on error.  <tt class=replaceable><i>SCALAR</i></tt> will be grown or shrunk to the length actually
read.  The <tt class=replaceable><i>OFFSET</i></tt>, if specified, says where in the variable to start
putting bytes, so that you can do a read into the middle of a string.

<p class=para>
To copy data from filehandle <tt class=literal>FROM</tt> into filehandle <tt class=literal>TO</tt>, you could
say:

<div class=programlisting>
<p>
<pre>
while (read FROM, $buf, 16384) {
    print TO $buf;
}
</PRE>
</DIV>

<p class=para>
Note that the opposite of <a href="#PERL2-CMD-READ">read</A> is simply a
<a href="#PERL2-CMD-PRINT">print</A>, which already knows the length of the
string you want to write, and can write a string of any length.

<p class=para>
Perl's <a href="#PERL2-CMD-READ">read</A> function is actually implemented
in terms of standard I/O's <i class=emphasis>fread</I> (3) function, so
the actual <i class=emphasis>read</I> (2) system call may read more than
<tt class=replaceable><i>LENGTH</i></tt> bytes to fill the input buffer, and
<i class=emphasis>fread</I> (3) may do more than one system
<i class=emphasis>read</I> (2) in order to fill the buffer.  To gain
greater control, specify the real system call using <a href="#PERL2-CMD-SYSREAD">sysread</A>.  Calls to <a href="#PERL2-CMD-READ">read</A>
and <a href="#PERL2-CMD-SYSREAD">sysread</A> should not be intermixed unless
you are into heavy wizardry (or pain).

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-READDIR">readdir</A></h3>

<div class=programlisting>
<p>
<pre>
readdir <tt class=replaceable><i>DIRHANDLE</i></tt>
</PRE>
</DIV>

<p class=para>
This function reads directory entries from a directory handle opened
by <a href="#PERL2-CMD-OPENDIR">opendir</A>.
In scalar context, this function returns the next directory entry, if any,
otherwise an undefined value.
In list context, it returns all the rest of the entries in the
directory, which will of course be a null list if there are none.
For example:

<div class=programlisting>
<p>
<pre>
opendir THISDIR, "." or die "serious dainbramage: $!";
@allfiles = readdir THISDIR;
closedir THISDIR;
print "@allfiles\n";
</PRE>
</DIV>

<p class=para>
prints all the files in the current directory on one line.  If you want to avoid
the "<tt class=literal>.</tt>" and "<tt class=literal>..</tt>"
entries, use this instead:

<div class=programlisting>
<p>
<pre>
@allfiles = grep !/^\.\.?$/, readdir THISDIR;
</PRE>
</DIV>

<p class=para>
And to avoid all <tt class=literal>.*</tt> files (like the <i class=emphasis>ls</I> program):

<div class=programlisting>
<p>
<pre>
@allfiles = grep !/^\./, readdir THISDIR;
</PRE>
</DIV>

<p class=para>
To get just text files, say this:

<div class=programlisting>
<p>
<pre>
@textfiles = grep -T, readdir THISDIR;
</PRE>
</DIV>

<p class=para>
But watch out on that last one, because the result of <a href="#PERL2-CMD-READDIR">readdir</A>
needs to have the directory part glued back on if it's not the current
directory--like this:

<div class=programlisting>
<p>
<pre>
opendir THATDIR, $thatdir;
@text_of_thatdir = grep -T, map "$thatdir/$_", readdir THATDIR;
closedir THATDIR;
</PRE>
</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-READLINK">readlink</A></h3>

<div class=programlisting>
<p>
<pre>
readlink <tt class=replaceable><i>EXPR</i></tt>
</PRE>
</DIV>

<p class=para>
This function returns the name of a file pointed to by a symbolic link.
<tt class=replaceable><i>EXPR</i></tt> should evaluate to a filename, the last component of which
is a symbolic link.
If it is not a symbolic link, or if symbolic links
are not implemented, or if some system error occurs, the undefined
value is returned, and you should check the error code in <tt class=literal>$!</tt>.
If <tt class=replaceable><i>EXPR</i></tt> is omitted, the function uses <b>$_</B>.

<p class=para>
Be aware that the returned symlink may be relative
to the location you specified.  For instance, you may say:

<div class=programlisting>
<p>
<pre>
readlink "/usr/local/src/express/yourself.h"
</PRE>
</DIV>

<p class=para>
and <a href="#PERL2-CMD-READLINK">readlink</A> might return:

<div class=programlisting>
<p>
<pre>
../express.1.23/includes/yourself.h
</PRE>
</DIV>

<p class=para>
which is not directly usable as a filename unless your current directory happens to
be <tt class=literal>/usr/local/src/express</tt>.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-RECV">recv</A></h3>

<div class=programlisting>
<p>
<pre>
recv <tt class=replaceable><i>SOCKET</i></tt>, <tt class=replaceable><i>SCALAR</i></tt>, <tt class=replaceable><i>LEN</i></tt>, <tt class=replaceable><i>FLAGS</i></tt>
</PRE>
</DIV>

<p class=para>
This function receives a message on a socket.
It attempts to receive <tt class=replaceable><i>LENGTH</i></tt>
bytes of data into variable <tt class=replaceable><i>SCALAR</i></tt> from
the specified <tt class=replaceable><i>SOCKET</i></tt> filehandle.  The function returns the address of
the sender, or the undefined value if there's an error.  <tt class=replaceable><i>SCALAR</i></tt> will
be grown or shrunk to the length actually read.  The function takes
the same flags as <i class=emphasis>recv</I> (2).  See the section "Sockets" in <a href="ch06_01.htm">Chapter 6, <i>Social Engineering</i></A>.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-REDO">redo</A></h3>

<div class=programlisting>
<p>
<pre>
redo <tt class=replaceable><i>LABEL</i></tt>
redo
</PRE>
</DIV>

<p class=para>
The <a href="#PERL2-CMD-REDO">redo</A> command restarts a loop block without evaluating the
conditional again.  The <b>continue</B> block, if any, is not executed.  If
the <tt class=replaceable><i>LABEL</i></tt> is omitted, the command refers to the innermost enclosing
loop.  This command is normally used by programs that wish to deceive
themselves about what was just input:

<div class=programlisting>
<p>
<pre>
# A loop that joins lines continued with a backslash.
LINE: while (&lt;STDIN&gt;) {
    if (s/\\\n$// and $nextline = &lt;STDIN&gt;) {
        $_ .= $nextline;
        redo LINE;
    }
    print;  # or whatever...
}
</PRE>
</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-REF">ref</A></h3>

<div class=programlisting>
<p>
<pre>
ref <tt class=replaceable><i>EXPR</i></tt>
</PRE>
</DIV>

<p class=para>
The <a href="#PERL2-CMD-REF">ref</A> operator returns a true value if <tt class=replaceable><i>EXPR</i></tt> is a reference,
the null string otherwise.  The value returned depends on the type of thing the
reference is a reference to.  Built-in types include:

<div class=programlisting>
<p>
<pre>
REF
SCALAR
ARRAY
HASH
CODE
GLOB
</PRE>
</DIV>

<p class=para>
If the referenced object has been blessed into a package, then that package name
is returned instead.  You can think of <a href="#PERL2-CMD-REF">ref</A>
as a "typeof" operator.

<div class=programlisting>
<p>
<pre>
if (ref($r) eq "HASH") {
    print "r is a reference to a hash.\n";
} 
elsif (ref($r) eq "Hump") {
    print "r is a reference to a Hump object.\n";
} 
elsif (not ref $r) {
    print "r is not a reference at all.\n";
}
</PRE>
</DIV>

<p class=para>
See <a href="ch04_01.htm">Chapter 4, <i>References and Nested Data Structures</i></A> for more details.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-RENAME">rename</A></h3>

<div class=programlisting>
<p>
<pre>
rename <tt class=replaceable><i>OLDNAME</i></tt>, <tt class=replaceable><i>NEWNAME</i></tt>
</PRE>
</DIV>

<p class=para>
This function changes the name of a file.
It returns 1 for success, 0 otherwise (and puts the error code into
<b>$!</B>).  It will not work across filesystem boundaries.  If there
is already a file named <tt class=replaceable><i>NEWNAME</i></tt>, it will be destroyed.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-REQUIRE">require</A></h3>

<div class=programlisting>
<p>
<pre>
require <tt class=replaceable><i>EXPR</i></tt>
require
</PRE>
</DIV>

<p class=para>
This function asserts a dependency of some kind on its argument.
(If <tt class=replaceable><i>EXPR</i></tt> is not supplied, <b>$_</B> is used as the argument.)

<p class=para>
If the argument is a string, this function includes and executes the Perl code
found in the separate file whose name is given by the string.  This is similar
to performing an <a href="#PERL2-CMD-EVAL">eval</A> on the contents of the
file, except that <a href="#PERL2-CMD-REQUIRE">require</A> checks to see that
the library file has not been included already.  (It can thus be used to express
file dependencies without worrying about duplicate compilation.)  The function
also knows how to search the include path stored in the <b>@INC</B> array (see the section "Special Variables" in <a href="ch02_01.htm">Chapter 2, <i>The Gory Details</i></A>).

<p class=para>
This form of the <a href="#PERL2-CMD-REQUIRE">require</A> function behaves
much like this subroutine:

<div class=programlisting>
<p>
<pre>
sub require {
    my($filename) = @_;
    return 1 if $INC{$filename};
    my($realfilename, $result);
    ITER: {
        foreach $prefix (@INC) {
            $realfilename = "$prefix/$filename";
            if (-f $realfilename) {
                $result = eval `cat $realfilename`;
                last ITER;
            }
        }
        die "Can't find $filename in \@INC";
    }
    die $@ if $@;
    die "$filename did not return true value" unless $result;
    $INC{$filename} = $realfilename;
    return $result;
}
</PRE>
</DIV>

<p class=para>
Note that the file must return true as the last value to indicate
successful execution of any initialization code, so it's customary to
end such a file with <tt class=literal>1;</tt> unless you're sure it'll return true
otherwise.

<p class=para>
This operator differs from the now somewhat obsolete <tt class=literal>do</tt>
<tt class=replaceable><i>EXPR</i></tt> operator in that the file will not be included
again if it was included previously with either a <a href="#PERL2-CMD-REQUIRE">require</A> or <tt class=literal>do</tt>
<tt class=replaceable><i>EXPR</i></tt> command, and any difficulties will be detected
and reported as fatal errors (which may be trapped by use of <a href="#PERL2-CMD-EVAL">eval</A>).  The <a href="#PERL2-CMD-DO">do</A> command
does know how to do the <b>@INC</B> path search,
however.

<p class=para>
If <a href="#PERL2-CMD-REQUIRE">require</A>'s argument is a number, the
version number of the currently executing Perl binary (as known by <b>$]</B>) is compared to <tt class=replaceable><i>EXPR</i></tt>, and if
smaller, execution is immediately aborted. Thus, a script that requires Perl
version 5.003 can have as its first line:

<div class=programlisting>
<p>
<pre>
require 5.003;
</PRE>
</DIV>

<p class=para>
and earlier versions of Perl will abort.

<p class=para>
If <a href="#PERL2-CMD-REQUIRE">require</A>'s argument is a package name (see
<a href="#PERL2-CMD-PACKAGE">package</A>), <a href="#PERL2-CMD-REQUIRE">require</A> assumes an automatic <tt class=literal>.pm</tt> suffix,
making it easy to load standard modules.  This is like <a href="#PERL2-CMD-USE">use</A>, except that it happens at run-time, not compile time,
and the <a href="#PERL2-CMD-IMPORT">import</A> routine is not called.  For
example, to pull in Socket.pm without introducing any symbols into the current
package, say this:

<div class=programlisting>
<p>
<pre>
require Socket; # instead of "use Socket;"
</PRE>
</DIV>

<p class=para>
However, one can get the same effect with the following, which has the
advantage of giving a compile-time warning if Socket.pm can't be located:

<div class=programlisting>
<p>
<pre>
use Socket ();
</PRE>
</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-RESET">reset</A></h3>

<div class=programlisting>
<p>
<pre>
reset <tt class=replaceable><i>EXPR</i></tt>
reset
</PRE>
</DIV>

<p class=para>
This function is generally used at the top of a loop or in a <b>continue</B> block at the end of a loop, to clear global
variables or reset <tt class=literal>??</tt> searches so that they work again.  The
expression is interpreted as a list of single characters (hyphens are allowed
for ranges).  All scalar variables, arrays, and hashes beginning with one of
those letters are reset to their pristine state.  If the expression is omitted,
one-match searches
(<tt class=literal>?</tt><tt class=replaceable><i>PATTERN</i></tt><tt class=literal>?</tt>) are
reset to match again.  The function resets variables or searches for the current
package only.  It always returns 1.

<p class=para>
To reset all "<tt class=literal>X</tt>" variables, say this:

<div class=programlisting>
<p>
<pre>
reset 'X';
</PRE>
</DIV>

<p class=para>
To reset all lowercase variables, say this:

<div class=programlisting>
<p>
<pre>
reset 'a-z';
</PRE>
</DIV>

<p class=para>
Lastly, to just reset <tt class=literal>??</tt> searches, say:

<div class=programlisting>
<p>
<pre>
reset;
</PRE>
</DIV>

<p class=para>
Note that resetting "<tt class=literal>A-Z</tt>" is not recommended since you'll
wipe out your <b>ARGV</B>, <b>INC</B>, <b>ENV</B>, and <b>SIG</B> arrays.

<p class=para>
Lexical variables (created by <a href="#PERL2-CMD-MY">my</A>) are not
affected.  Use of <a href="#PERL2-CMD-RESET">reset</A> is vaguely
deprecated.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-RETURN">return</A></h3>

<div class=programlisting>
<p>
<pre>
return <tt class=replaceable><i>EXPR</i></tt>
</PRE>
</DIV>

<p class=para>
This function returns from a subroutine (or <a href="#PERL2-CMD-EVAL">eval</A>) with the value specified.  (In the absence of an
explicit <b>return</B>, the value of the last expression evaluated is returned.)  Use
of <b>return</B> outside of a subroutine or <a href="#PERL2-CMD-EVAL">eval</A> is verboten, and results in a fatal error.
Note also that an <a href="#PERL2-CMD-EVAL">eval</A> cannot do a <a href="#PERL2-CMD-RETURN">return</A> on behalf of the subroutine that
called the <a href="#PERL2-CMD-EVAL">eval</A>.

<p class=para>
The supplied expression will be evaluated in the context of the subroutine
invocation.  That is, if the subroutine was called in a scalar context,
<tt class=replaceable><i>EXPR</i></tt> is also evaluated in scalar context.  If the
subroutine was invoked in a list context, then <tt class=replaceable><i>EXPR</i></tt>
is also evaluated in list context, and can return a list value.  A return with
no argument returns the undefined value in scalar context, and a null list in
list context.  The context of the subroutine call can be determined from within
the subroutine by using the (misnamed) <a href="#PERL2-CMD-WANTARRAY">wantarray</A> function.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-REVERSE">reverse</A></h3>

<div class=programlisting>
<p>
<pre>
reverse <tt class=replaceable><i>LIST</i></tt>
</PRE>
</DIV>

<p class=para>
In list context, this function returns a list value consisting
of the elements of <tt class=replaceable><i>LIST</i></tt> in the opposite order.  This is fairly
efficient because it just swaps the pointers around.  The function can
be used to create descending sequences:

<div class=programlisting>
<p>
<pre>
for (reverse 1 .. 10) { ... }
</PRE>
</DIV>

<p class=para>
Because of the way hashes flatten into lists when passed to (non-hash-aware)
functions, <a href="#PERL2-CMD-REVERSE">reverse</A> can also be used to
invert a hash, presuming the values are unique:

<div class=programlisting>
<p>
<pre>
%barfoo = reverse %foobar;
</PRE>
</DIV>

<p class=para>
In scalar context, the function concatenates all the elements of <tt class=replaceable><i>LIST</i></tt>
together and then returns the reverse of that, character by character.

<p class=para>
A small hint: reversing a list sorted earlier by a user-defined function can
sometimes be achieved more easily by simply sorting in the opposite
direction in the first place.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-REWINDDIR">rewinddir</A></h3>

<div class=programlisting>
<p>
<pre>
rewinddir <tt class=replaceable><i>DIRHANDLE</i></tt>
</PRE>
</DIV>

<p class=para>
This function sets the current position to the beginning of the
directory for the <a href="#PERL2-CMD-READDIR">readdir</A> routine on
<tt class=replaceable><i>DIRHANDLE</i></tt>.  The 
function may not be available on all machines that support
<a href="#PERL2-CMD-READDIR">readdir</A>.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-RINDEX">rindex</A></h3>

<div class=programlisting>
<p>
<pre>
rindex <tt class=replaceable><i>STR</i></tt>, <tt class=replaceable><i>SUBSTR</i></tt>, <tt class=replaceable><i>POSITION</i></tt>
rindex <tt class=replaceable><i>STR</i></tt>, <tt class=replaceable><i>SUBSTR</i></tt>
</PRE>
</DIV>

<p class=para>
This function works just like <a href="#PERL2-CMD-INDEX">index</A> except
that it returns the position of the last occurrence of
<tt class=replaceable><i>SUBSTR</i></tt> in <tt class=replaceable><i>STR</i></tt> (a reverse
<a href="#PERL2-CMD-INDEX">index</A>).  The function returns
<tt class=literal>$[-1</tt> if not found.  Since <tt class=literal>$[</tt> is almost
always <tt class=literal>0</tt> nowadays, the function almost always returns -1.
<tt class=replaceable><i>POSITION</i></tt>, if specified, is the rightmost position
that may be returned.  To work your way through a string backward, say:

<div class=programlisting>
<p>
<pre>
$pos = length $string;
while (($pos = rindex $string, $lookfor, $pos) &gt;= 0) {
    print "Found at $pos\n";
    $pos--;
}
</PRE>
</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-RMDIR">rmdir</A></h3>

<div class=programlisting>
<p>
<pre>
rmdir <tt class=replaceable><i>FILENAME</i></tt>
</PRE>
</DIV>

<p class=para>
This function deletes the directory specified by <tt class=replaceable><i>FILENAME</i></tt> if it is
empty.
If it succeeds, it returns 1, otherwise it returns 0 and puts the
error code into <b>$!</B>.  If <tt class=literal>FILENAME</tt> is omitted, the function uses
<b>$_</B>.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-SSSS">s///</A></h3>

<div class=programlisting>
<p>
<pre>
s///
</PRE>
</DIV>

<p class=para>
The substitution operator.  See "Pattern Matching Operators" in <a href="ch02_01.htm">Chapter 2, <i>The Gory Details</i></A>.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-SCALAR">scalar</A></h3>

<div class=programlisting>
<p>
<pre>
scalar <tt class=replaceable><i>EXPR</i></tt>
</PRE>
</DIV>

<p class=para>
This pseudo-function may be used within a <tt class=replaceable><i>LIST</i></tt> to force <tt class=replaceable><i>EXPR</i></tt>
to be
evaluated in scalar context when evaluation in list context
would produce a different result.

<p class=para>
For example:

<div class=programlisting>
<p>
<pre>
local($nextvar) = scalar &lt;STDIN&gt;;
</PRE>
</DIV>

<p class=para>
prevents <tt class=literal>&lt;STDIN&gt;</tt> from reading all the lines from
standard input before doing the assignment, since assignment to a <b>local</B> list provides a list context.  (Without the use of
<a href="#PERL2-CMD-SCALAR">scalar</A> in this example, the first line from
<tt class=literal>&lt;STDIN&gt;</tt> would still be assigned to
<tt class=literal>$nextvar</tt>, but the subsequent lines would be read and thrown
away.  This is because the assignment is being made to a list--one that
happens to be able to receive only a single, scalar value.)

<p class=para>
Of course, a simpler way with less typing would be to simply leave the
parentheses off, thereby changing the list context to a scalar one:

<div class=programlisting>
<p>
<pre>
local $nextvar = &lt;STDIN&gt;;
</PRE>
</DIV>

<p class=para>
Since a <a href="#PERL2-CMD-PRINT">print</A> function is a
<tt class=replaceable><i>LIST</i></tt> operator, you have to say:

<div class=programlisting>
<p>
<pre>
print "Length is ", scalar(@ARRAY), "\n";
</PRE>
</DIV>

<p class=para>
if you want the length of <tt class=literal>@ARRAY</tt> to be printed out.

<p class=para>
One never needs to force evaluation in a list context, because any operation
that wants a list already provides a list context to its list arguments for
free.  So there's no <b>list</B> function corresponding
to <a href="#PERL2-CMD-SCALAR">scalar</A>.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-SEEK">seek</A></h3>

<div class=programlisting>
<p>
<pre>
seek <tt class=replaceable><i>FILEHANDLE</i></tt>, <tt class=replaceable><i>OFFSET</i></tt>, <tt class=replaceable><i>WHENCE</i></tt>
</PRE>
</DIV>

<p class=para>
This function positions the file pointer for <tt class=replaceable><i>FILEHANDLE</i></tt>, just
like the <i class=emphasis>fseek</I> (3) call of standard I/O.  The first position in a
file is at offset 0, not offset 1, and offsets refer to byte positions,
not line numbers.  (In general, since line lengths vary, it's not
possible to access a particular line number without examining the whole
file up to that line number, unless all your lines are known to be of a
particular length, or you've built an index that translates line numbers
into byte offsets.)  <tt class=replaceable><i>FILEHANDLE</i></tt> may be an expression
whose value gives the name of the filehandle or a reference to a filehandle
object.  The function returns 1 upon success, 0 otherwise.
For handiness, the function can calculate offsets from various file
positions for you.  The value of <tt class=replaceable><i>WHENCE</i></tt> specifies which file
position your <tt class=replaceable><i>OFFSET</i></tt> is relative to: <tt class=literal>0</tt>, the beginning of
the file; <tt class=literal>1</tt>, the current position in the file; or <tt class=literal>2</tt>, the
end of the file.  <tt class=replaceable><i>OFFSET</i></tt> may be negative for a <tt class=replaceable><i>WHENCE</i></tt> of
<tt class=literal>1</tt> or <tt class=literal>2</tt>.

<p class=para>
One interesting use for this function is to allow you to follow
growing files, like this:

<div class=programlisting>
<p>
<pre>
for (;;) {
    while (&lt;LOG&gt;) {
        ...           # Process file.
    }
    sleep 15;
    seek LOG,0,1;      # Reset end-of-file error.
}
</PRE>
</DIV>

<p class=para>
The final <a href="#PERL2-CMD-SEEK">seek</A> clears the end-of-file error without moving the
pointer.
If that doesn't work (depending on your C library's standard I/O
implementation), then
you may need something more like this:

<div class=programlisting>
<p>
<pre>
for (;;) {
    for ($curpos = tell FILE; $_ = &lt;FILE&gt;; $curpos = tell FILE) {
        # search for some stuff and put it into files
    }
    sleep $for_a_while;
    seek FILE, $curpos, 0;
}
</PRE>
</DIV>

<p class=para>
Similar strategies could be used to remember the <a href="#PERL2-CMD-SEEK">seek</A> addresses 
of each line in an array.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-SEEKDIR">seekdir</A></h3>

<div class=programlisting>
<p>
<pre>
seekdir <tt class=replaceable><i>DIRHANDLE</i></tt>, <tt class=replaceable><i>POS</i></tt>
</PRE>
</DIV>

<p class=para>
This function sets the current position for the <a href="#PERL2-CMD-READDIR">readdir</A>
routine on <tt class=replaceable><i>DIRHANDLE</i></tt>.  <tt class=replaceable><i>POS</i></tt>
must be a value returned by 
<a href="#PERL2-CMD-TELLDIR">telldir</A>.  This function has the same caveats about possible
directory compaction as the corresponding system library routine.  The
function may not be implemented everywhere that <a href="#PERL2-CMD-READDIR">readdir</A> is.
It's certainly not implemented where <a href="#PERL2-CMD-READDIR">readdir</A> isn't.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-SELECT-OUT">select (output filehandle)</A></h3>

<div class=programlisting>
<p>
<pre>
select <tt class=replaceable><i>FILEHANDLE</i></tt>
select
</PRE>
</DIV>

<p class=para>
For historical reasons, there are two <b>select</B>
operators that are totally unrelated to each other.  See the next section for
the other one.  This <b>select</B> operator returns
the currently selected output filehandle, and if
<tt class=replaceable><i>FILEHANDLE</i></tt> is supplied, sets the current default
filehandle for output.  This has two effects: first, a <a href="#PERL2-CMD-WRITE">write</A> or a <a href="#PERL2-CMD-PRINT">print</A>
without a filehandle will default to this <tt class=replaceable><i>FILEHANDLE</i></tt>.
Second, special variables related to output will refer to this output
filehandle.  For example, if you have to set the same top-of-form format for
more than one output filehandle, you might do the following:

<div class=programlisting>
<p>
<pre>
select REPORT1;
$^ = 'MyTop';
select REPORT2;
$^ = 'MyTop';
</PRE>
</DIV>

<p class=para>
But note that this leaves <tt class=literal>REPORT2</tt> as the currently selected
filehandle.  This could be construed as antisocial, since it could really foul
up some other routine's <a href="#PERL2-CMD-PRINT">print</A> or <a href="#PERL2-CMD-WRITE">write</A> statements.  Properly written library
routines leave the currently selected filehandle the same on exit as it was upon
entry. To support this, <tt class=replaceable><i>FILEHANDLE</i></tt> may be an
expression whose value gives the name of the actual filehandle.  Thus, you can
save and restore the currently selected filehandle:

<div class=programlisting>
<p>
<pre>
my $oldfh = select STDERR; $| = 1; select $oldfh;
</PRE>
</DIV>

<p class=para>
or (being bizarre and obscure):

<div class=programlisting>
<p>
<pre>
select((select(STDERR), $| = 1)[0])
</PRE>
</DIV>

<p class=para>
This example works by building a list consisting of the returned value from
<tt class=literal>select(STDERR)</tt> (which selects <tt class=literal>STDERR</tt> as a
side effect) and <tt class=literal>$| = 1</tt> (which is always 1), but sets
autoflushing on the now-selected <tt class=literal>STDERR</tt> as a side effect.
The first element of that list (the previously selected filehandle) is now used
as an argument to the outer <b>select</B>.
Bizarre, right?  That's what you get for knowing just enough Lisp to be
dangerous.

<p class=para>
However, now that we've explained all that, we should point out that you rarely
need to use this form of <b>select</B> nowadays,
because most of the special variables you would want to set have object-oriented
wrapper methods to do it for you.  So instead of setting <tt class=literal>$|</tt>
directly, you might say:

<div class=programlisting>
<p>
<pre>
use FileHandle;
STDOUT-&gt;autoflush (1);
</PRE>
</DIV>

<p class=para>
And the earlier format example might be coded as:

<div class=programlisting>
<p>
<pre>
use FileHandle;
REPORT1-&gt;format_top_name("MyTop");
REPORT2-&gt;format_top_name("MyTop");
</PRE>
</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-SELECT">select (ready file descriptors)</A></h3>

<div class=programlisting>
<p>
<pre>
select <tt class=replaceable><i>RBITS</i></tt>, <tt class=replaceable><i>WBITS</i></tt>, <tt class=replaceable><i>EBITS</i></tt>, <tt class=replaceable><i>TIMEOUT</i></tt>
</PRE>
</DIV>

<p class=para>
The four-argument <b>select</B> operator is totally unrelated to the
previously described operator.  This operator is for discovering which
(if any) of your file descriptors are ready to do input or output, or to
report an exceptional condition.  (This helps you avoid having to do
polling.)  It calls the <i class=emphasis>select</I> (2) system call with the bitmasks
you've specified, which you can construct using <a href="#PERL2-CMD-FILENO">fileno</A> and
<a href="#PERL2-CMD-VEC">vec</A>, like this:

<div class=programlisting>
<p>
<pre>
$rin = $win = $ein = "";
vec($rin, fileno(STDIN), 1) = 1;
vec($win, fileno(STDOUT), 1) = 1;
$ein = $rin | $win;
</PRE>
</DIV>

<p class=para>
If you want to <b>select</B> on many filehandles you
might wish to write a subroutine:

<div class=programlisting>
<p>
<pre>
sub fhbits {
    my @fhlist = @_;
    my $bits;
    for (@fhlist) {
        vec($bits, fileno($_), 1) = 1;
    }
    return $bits;
}
$rin = fhbits(qw(STDIN TTY MYSOCK));
</PRE>
</DIV>

<p class=para>
If you wish to use the same bitmasks repeatedly (and it's more efficient
if you do), the usual idiom is:

<div class=programlisting>
<p>
<pre>
($nfound, $timeleft) =
    select($rout=$rin, $wout=$win, $eout=$ein, $timeout);
</PRE>
</DIV>

<p class=para>
Or to block until any file descriptor becomes ready:

<div class=programlisting>
<p>
<pre>
$nfound = select($rout=$rin, $wout=$win, $eout=$ein, undef);
</PRE>
</DIV>

<p class=para>
The <tt class=literal>$wout=$win</tt> trick works because the value of an assignment is
its left side, so <tt class=literal>$wout</tt> gets clobbered first by the assignment,
and then by the <b>select</B>, while <tt class=literal>$win</tt> remains unchanged.

<p class=para>
Any of the bitmasks can also be <a href="#PERL2-CMD-UNDEF">undef</A>.  The
timeout, if specified, is in seconds, which may be fractional.  (A timeout of
<tt class=literal>0</tt> effects a poll.)  Not many implementations are capable of
returning the <tt class=literal>$timeleft</tt>.  If not, they always return
<tt class=literal>$timeleft</tt> equal to the supplied <tt class=literal>$timeout</tt>.

<p class=para>
One use for <b>select</B> is to sleep with a finer
resolution than <a href="#PERL2-CMD-SLEEP">sleep</A> allows.  To do this,
specify <a href="#PERL2-CMD-UNDEF">undef</A> for all the bitmasks. So, to sleep for (at least) 4.75 seconds, use:

<div class=programlisting>
<p>
<pre>
select undef, undef, undef, 4.75;
</PRE>
</DIV>

<p class=para>
(On some non-UNIX systems this may not work, and you may need to fake up
at least one bitmask for a valid descriptor that won't ever be ready.)

<p class=para>
Mixing buffered I/O (like <a href="#PERL2-CMD-READ">read</A> or
<tt class=literal>&lt;HANDLE&gt;</tt>) with four-argument <b>select</B> is asking for trouble.  Use <a href="#PERL2-CMD-SYSREAD">sysread</A> instead.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-SEMCTL">semctl</A></h3>

<div class=programlisting>
<p>
<pre>
semctl <tt class=replaceable><i>ID</i></tt>, <tt class=replaceable><i>SEMNUM</i></tt>, <tt class=replaceable><i>CMD</i></tt>, <tt class=replaceable><i>ARG</i></tt>
</PRE>
</DIV>

<p class=para>
This function calls the System V IPC system call <i class=emphasis>semctl</I> (2).  If
<tt class=replaceable><i>CMD</i></tt> is <tt class=literal>&amp;IPC_STAT</tt> or <tt class=literal>&amp;GETALL</tt>, then <tt class=replaceable><i>ARG</i></tt> must
be a variable
which will hold the returned <tt class=literal>semid_ds</tt> structure or semaphore
value array.  The function returns like <a href="#PERL2-CMD-IOCTL">ioctl</A>: the undefined
value for error, "<tt class=literal>0 but true</tt>" for zero, or the actual return
value otherwise.  On error, it puts the error code into <b>$!</B>.
Before calling, you should say:

<div class=programlisting>
<p>
<pre>
require "ipc.ph";
require "sem.ph";
</PRE>
</DIV>

<p class=para>
This function is available only on machines supporting System V IPC.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-SEMGET">semget</A></h3>

<div class=programlisting>
<p>
<pre>
semget <tt class=replaceable><i>KEY</i></tt>, <tt class=replaceable><i>NSEMS</i></tt>, <tt class=replaceable><i>SIZE</i></tt>, <tt class=replaceable><i>FLAGS</i></tt>
</PRE>
</DIV>

<p class=para>
This function calls the System V IPC system call <i class=emphasis>semget</I> (2).
The function returns the semaphore ID, or the
undefined value if there is an error.  On error, it puts the error
code into <b>$!</B>.  Before calling, you should say:

<div class=programlisting>
<p>
<pre>
require "ipc.ph";
require "sem.ph";
</PRE>
</DIV>

<p class=para>
This function is available only on machines supporting System V IPC.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-SEMOP">semop</A></h3>

<div class=programlisting>
<p>
<pre>
semop <tt class=replaceable><i>KEY</i></tt>, <tt class=replaceable><i>OPSTRING</i></tt>
</PRE>
</DIV>

<p class=para>
This function calls the System V IPC system call <i class=emphasis>semop</I> (2) to perform
semaphore operations such as signaling and waiting.
<tt class=replaceable><i>OPSTRING</i></tt> must be a packed array of <tt class=literal>semop</tt>
structures.  You can make each <a href="#PERL2-CMD-SEMOP">semop</A> structure by saying
<tt class=literal>pack(`s*`, $semnum, $semop, $semflag)</tt>.  The number of
semaphore operations is implied by the length of <tt class=replaceable><i>OPSTRING</i></tt>.  The
function returns true if successful, or false if there is an error.
On error, it puts the error code into <b>$!</B>.  Before calling, you
should say:

<div class=programlisting>
<p>
<pre>
require "ipc.ph";
require "sem.ph";
</PRE>
</DIV>

<p class=para>
The following code waits on semaphore <tt class=literal>$semnum</tt> of semaphore id
<tt class=literal>$semid</tt>:

<div class=programlisting>
<p>
<pre>
$semop = pack "s*", $semnum, -1, 0;
die "Semaphore trouble: $!\n" unless semop $semid, $semop;
</PRE>
</DIV>

<p class=para>
To signal the semaphore, simply replace <tt class=literal>-1</tt> with <tt class=literal>1</tt>.

<p class=para>
This function is available only on machines supporting System V IPC.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-SEND">send</A></h3>

<div class=programlisting>
<p>
<pre>
send <tt class=replaceable><i>SOCKET</i></tt>, <tt class=replaceable><i>MSG</i></tt>, <tt class=replaceable><i>FLAGS</i></tt>, <tt class=replaceable><i>TO</i></tt>
send <tt class=replaceable><i>SOCKET</i></tt>, <tt class=replaceable><i>MSG</i></tt>, <tt class=replaceable><i>FLAGS</i></tt>
</PRE>
</DIV>

<p class=para>
This function sends a message on a socket.
It takes the same flags as the system call of the same name--see
<i class=emphasis>send</I> (2).  On unconnected sockets you must specify a destination
to send <tt class=replaceable><i>TO</i></tt>, in which case <a href="#PERL2-CMD-SEND">send</A> works like
<i class=emphasis>sendto</I> (2).
The function returns the number of bytes sent, or
the undefined value if there is an error.  On error, it puts the error
code into <b>$!</B>.

<p class=para>
(Some non-UNIX systems improperly treat sockets as different objects than
ordinary file descriptors, with the result that you must always use <a href="#PERL2-CMD-SEND">send</A> and <a href="#PERL2-CMD-RECV">recv</A>
on sockets rather than the handier standard I/O operators.)

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-SETPGRP">setpgrp</A></h3>

<div class=programlisting>
<p>
<pre>
setpgrp <tt class=replaceable><i>PID</i></tt>, <tt class=replaceable><i>PGRP</i></tt>
</PRE>
</DIV>

<p class=para>
This function sets the current process group (pgrp) for the specified
<tt class=replaceable><i>PID</i></tt> (use a <tt class=replaceable><i>PID</i></tt> of 0 for
the current process).  Invoking <a href="#PERL2-CMD-SETPGRP">setpgrp</A> will
produce a fatal error if used on a machine that doesn't implement
<i class=emphasis>setpgrp</I> (2).  Beware: some systems will ignore the
arguments you provide and always do <tt class=literal>setpgrp(0, $$)</tt>.
Fortunately, those are the arguments one usually provides.  (For better
portability (by some definition), use the <tt class=literal>setpgid()</tt> function in
the POSIX module, or if you're really just trying to daemonize your script, consider
the <tt class=literal>POSIX::setsid()</tt> function as well.)

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-SETPRIORITY">setpriority</A></h3>

<div class=programlisting>
<p>
<pre>
setpriority <tt class=replaceable><i>WHICH</i></tt>, <tt class=replaceable><i>WHO</i></tt>, <tt class=replaceable><i>PRIORITY</i></tt>
</PRE>
</DIV>

<p class=para>
This function sets the current priority for a process, a process
group, or a user.  See <i class=emphasis>setpriority</I> (2).
Invoking <a href="#PERL2-CMD-SETPRIORITY">setpriority</A> will produce a fatal error if used on a
machine that doesn't implement <i class=emphasis>setpriority</I> (2).  To "nice" your
process down by four units (the same as executing your program with
<i class=emphasis>nice</I> (1)), try:

<div class=programlisting>
<p>
<pre>
setpriority 0, 0, getpriority(0, 0) + 4;
</PRE>
</DIV>

<p class=para>
The interpretation of a given priority may vary from one operating system to
the next.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-SETSOCKOPT">setsockopt</A></h3>

<div class=programlisting>
<p>
<pre>
setsockopt <tt class=replaceable><i>SOCKET</i></tt>, <tt class=replaceable><i>LEVEL</i></tt>, <tt class=replaceable><i>OPTNAME</i></tt>, <tt class=replaceable><i>OPTVAL</i></tt>
</PRE>
</DIV>

<p class=para>
This function sets the socket option requested.
The function returns undefined if there is an error.  <tt class=replaceable><i>OPTVAL</i></tt> may be
specified as <a href="#PERL2-CMD-UNDEF">undef</A> if you don't want to pass an argument.
A common option to set on a socket is <tt class=literal>SO_REUSEADDR</tt>,
to get around the problem
of not being able to bind to a particular address while the previous TCP
connection on that port is still making up its mind to shut down.  That
would look like this:

<div class=programlisting>
<p>
<pre>
use Socket;
...
setsockopt(<tt class=replaceable><i>MYSOCK</i></tt>, SOL_SOCKET, SO_REUSEADDR, 1)
        or warn "Can't do setsockopt: $!\n";
</PRE>
</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-SHIFT">shift</A></h3>

<div class=programlisting>
<p>
<pre>
shift <tt class=replaceable><i>ARRAY</i></tt>
shift
</PRE>
</DIV>

<p class=para>
This function shifts the first value of the array off and returns it, shortening
the array by 1 and moving everything down.  (Or up, or left, depending on how
you visualize the array list.)  If there are no elements in the array, the
function returns the undefined value.  If <tt class=replaceable><i>ARRAY</i></tt> is
omitted, the function shifts <b>@ARGV</B> (in the main
program), or <b>@_</B> (in subroutines).  See also <a href="#PERL2-CMD-UNSHIFT">unshift</A>, <a href="#PERL2-CMD-PUSH">push</A>,
<a href="#PERL2-CMD-POP">pop</A>, and <a href="#PERL2-CMD-SPLICE">splice</A>.  The <a href="#PERL2-CMD-SHIFT">shift</A> and
<a href="#PERL2-CMD-UNSHIFT">unshift</A> functions do the same thing to the
left end of an array that <a href="#PERL2-CMD-POP">pop</A> and <a href="#PERL2-CMD-PUSH">push</A> do to the right end.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-SHMCTL">shmctl</A></h3>

<div class=programlisting>
<p>
<pre>
shmctl <tt class=replaceable><i>ID</i></tt>, <tt class=replaceable><i>CMD</i></tt>, <tt class=replaceable><i>ARG</i></tt>
</PRE>
</DIV>

<p class=para>
This function calls the System V IPC system call,
<i class=emphasis>shmctl</I> (2).  If <tt class=replaceable><i>CMD</i></tt> is <tt class=literal>&amp;IPC_STAT</tt>, then <tt class=replaceable><i>ARG</i></tt>
must be a
variable which will hold the returned <tt class=literal>shmid_ds</tt> structure.  The
function returns like <a href="#PERL2-CMD-IOCTL">ioctl</A>: the undefined value for error,
"<tt class=literal>0 but true</tt>" for zero, or the actual return value otherwise.
On error, it puts the error code into <b>$!</B>.  Before calling, you
should say:

<div class=programlisting>
<p>
<pre>
require "ipc.ph";
require "shm.ph";
</PRE>
</DIV>

<p class=para>
This function is available only on machines supporting System V IPC.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-SHMGET">shmget</A></h3>

<div class=programlisting>
<p>
<pre>
shmget <tt class=replaceable><i>KEY</i></tt>, <tt class=replaceable><i>SIZE</i></tt>, <tt class=replaceable><i>FLAGS</i></tt>
</PRE>
</DIV>

<p class=para>
This function calls the System V IPC system call,
<i class=emphasis>shmget</I> (2).  The function returns the shared memory segment ID,
or the undefined value if there is an error.  On error, it puts the
error code into <b>$!</B>.  Before calling, you should say:

<div class=programlisting>
<p>
<pre>
require "ipc.ph";
require "shm.ph";
</PRE>
</DIV>

<p class=para>
This function is available only on machines supporting System V IPC.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-SHMREAD">shmread</A></h3>

<div class=programlisting>
<p>
<pre>
shmread <tt class=replaceable><i>ID</i></tt>, <tt class=replaceable><i>VAR</i></tt>, <tt class=replaceable><i>POS</i></tt>, <tt class=replaceable><i>SIZE</i></tt>
</PRE>
</DIV>

<p class=para>
This function reads from the shared memory segment <tt class=replaceable><i>ID</i></tt> starting at
position <tt class=replaceable><i>POS</i></tt> for size <tt class=replaceable><i>SIZE</i></tt> (by attaching to it, copying out, and
detaching from it).  <tt class=replaceable><i>VAR</i></tt> must be a variable that will hold the data
read.  The function returns true if successful, or false if there is
an error.  On error, it puts the error code into <b>$!</B>.  This
function is available only on machines supporting System V IPC.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-SHMWRITE">shmwrite</A></h3>

<div class=programlisting>
<p>
<pre>
shmwrite <tt class=replaceable><i>ID</i></tt>, <tt class=replaceable><i>STRING</i></tt>, <tt class=replaceable><i>POS</i></tt>, <tt class=replaceable><i>SIZE</i></tt>
</PRE>
</DIV>

<p class=para>
This function writes to the shared memory segment ID starting at
position <tt class=replaceable><i>POS</i></tt> for size <tt class=replaceable><i>SIZE</i></tt> (by attaching to it, copying in, and
detaching from it).  If <tt class=replaceable><i>STRING</i></tt> is too long, only <tt class=replaceable><i>SIZE</i></tt>
bytes are used;
if <tt class=replaceable><i>STRING</i></tt> is too short, nulls are written to fill out <tt class=replaceable><i>SIZE</i></tt>
bytes.  The
function returns true if successful, or false if there is an error.
On error, it puts the error code into <b>$!</B>.  This function is
available only on machines supporting System V IPC.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-SHUTDOWN">shutdown</A></h3>

<div class=programlisting>
<p>
<pre>
shutdown <tt class=replaceable><i>SOCKET</i></tt>, <tt class=replaceable><i>HOW</i></tt>
</PRE>
</DIV>

<p class=para>
This function shuts down a socket connection in the manner indicated by
<tt class=replaceable><i>HOW</i></tt>.  If <tt class=replaceable><i>HOW</i></tt> is 0, further receives are disallowed.  If
<tt class=replaceable><i>HOW</i></tt> is 1, further sends are disallowed.  If <tt class=replaceable><i>HOW</i></tt> is 2,
everything is disallowed.

<p class=para>
(If you came here trying to figure out how to shut down your system, you'll have
to execute an external program to do that.  See <a href="#PERL2-CMD-SYSTEM">system</A>.)

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-SIN">sin</A></h3>

<div class=programlisting>
<p>
<pre>
sin <tt class=replaceable><i>EXPR</i></tt>
</PRE>
</DIV>

<p class=para>
Sorry, there's nothing wicked about this operator.  It merely returns the sine
of <tt class=replaceable><i>EXPR</i></tt> (expressed in radians).  If
<tt class=replaceable><i>EXPR</i></tt> is omitted, it returns sine of <b>$_</B>.

<p class=para>
For the inverse sine operation, you may use the <tt class=literal>POSIX::asin()</tt>
function, or use this relation:

<div class=programlisting>
<p>
<pre>
sub asin { atan2($_[0], sqrt(1 - $_[0] * $_[0])) }
</PRE>
</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-SLEEP">sleep</A></h3>

<div class=programlisting>
<p>
<pre>
sleep <tt class=replaceable><i>EXPR</i></tt>
sleep
</PRE>
</DIV>

<p class=para>
This function causes the script to sleep for <tt class=replaceable><i>EXPR</i></tt>
seconds, or forever if no <tt class=replaceable><i>EXPR</i></tt>.  It may be
interrupted by sending the process a <tt class=literal>SIGALRM</tt>.  The function
returns the number of seconds actually slept.  On some systems, the function
sleeps till the "top of the second," so, for instance, a <tt class=literal>sleep
1</tt> may sleep anywhere from 0 to 1 second, depending on when in the
current second you started sleeping.  A <tt class=literal>sleep 2</tt> may sleep
anywhere from 1 to 2 seconds.  And so on.  If available, the <b>select</B> (ready file descriptors) call can give you better
resolution.  You may also be able to use <a href="#PERL2-CMD-SYSCALL">syscall</A> to call the
<i class=emphasis>getitimer</I> (2) and
<i class=emphasis>setitimer</I> (2) routines that some UNIX systems
support.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-SOCKET">socket</A></h3>

<div class=programlisting>
<p>
<pre>
socket <tt class=replaceable><i>SOCKET</i></tt>, <tt class=replaceable><i>DOMAIN</i></tt>, <tt class=replaceable><i>TYPE</i></tt>, <tt class=replaceable><i>PROTOCOL</i></tt>
</PRE>
</DIV>

<p class=para>
This function opens a socket of the specified kind and attaches it to
filehandle <tt class=replaceable><i>SOCKET</i></tt>.  <tt class=replaceable><i>DOMAIN</i></tt>, <tt class=replaceable><i>TYPE</i></tt>, and
<tt class=replaceable><i>PROTOCOL</i></tt> are specified the same
as for <i class=emphasis>socket</I> (2).  Before using this function, your program should
contain the line:

<div class=programlisting>
<p>
<pre>
use Socket;
</PRE>
</DIV>

<p class=para>
This gives you the proper constants.  The function returns true
if successful.  See the examples in the section "Sockets" in <a href="ch06_01.htm">Chapter 6, <i>Social Engineering</i></A>.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-SOCKETPAIR">socketpair</A></h3>

<div class=programlisting>
<p>
<pre>
socketpair <tt class=replaceable><i>SOCKET1</i></tt>, <tt class=replaceable><i>SOCKET2</i></tt>, <tt class=replaceable><i>DOMAIN</i></tt>, <tt class=replaceable><i>TYPE</i></tt>, <tt class=replaceable><i>PROTOCOL</i></tt>
</PRE>
</DIV>

<p class=para>
This function creates an unnamed pair of sockets in the specified
domain, of the specified type.  <tt class=replaceable><i>DOMAIN</i></tt>, <tt class=replaceable><i>TYPE</i></tt>, and
<tt class=replaceable><i>PROTOCOL</i></tt> are
specified the same as for <i class=emphasis>socketpair</I> (2).  If <i class=emphasis>socketpair</I> (2)
is unimplemented,
invoking this function yields a fatal error.  The function returns
true if successful.

<p class=para>
This function is typically used just before a <b>fork</B>.  One of the resulting processes should close
<tt class=replaceable><i>SOCKET1</i></tt>, and the other should close
<tt class=replaceable><i>SOCKET2</i></tt>.  You can use these sockets bidirectionally,
unlike the filehandles created by the <a href="#PERL2-CMD-PIPE">pipe</A>
function.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-SORT">sort</A></h3>

<div class=programlisting>
<p>
<pre>
sort <tt class=replaceable><i>SUBNAME</i></tt> <tt class=replaceable><i>LIST</i></tt>
sort <tt class=replaceable><i>BLOCK</i></tt> <tt class=replaceable><i>LIST</i></tt>
sort <tt class=replaceable><i>LIST</i></tt>
</PRE>
</DIV>

<p class=para>
This function sorts the <tt class=replaceable><i>LIST</i></tt> and returns the sorted
list value.  By default, it sorts in standard string comparison order (undefined
values sorting before defined null strings, which sort before everything else).
<tt class=replaceable><i>SUBNAME</i></tt>, if given, is the name of a subroutine that
returns an integer less than, equal to, or greater than 0, depending on how the
elements of the list are to be ordered.  (The handy <tt class=literal>&lt;=&gt;</tt>
and <tt class=literal>cmp</tt> operators can be used to perform three-way numeric
and string comparisons.)  In the interests of efficiency, the normal calling
code for subroutines is bypassed, with the following effects: the subroutine may
not be a recursive subroutine, and the two elements to be compared are passed
into the subroutine not via <tt class=literal>@_</tt> but as <b>$a</B> and <b>$b</B> (see the examples
below).  The variables <b>$a</B> and <b>$b</B> are passed by reference, so don't modify them in the
subroutine.  <tt class=replaceable><i>SUBNAME</i></tt> may be a scalar variable name
(unsubscripted), in which case the value provides the name of (or a reference
to) the actual subroutine to use.  In place of a
<tt class=replaceable><i>SUBNAME</i></tt>, you can provide a
<tt class=replaceable><i>BLOCK</i></tt> as an anonymous, in-line sort subroutine.

<p class=para>
To do an ordinary numeric sort, say this:

<div class=programlisting>
<p>
<pre>
sub numerically { $a &lt;=&gt; $b; }
@sortedbynumber = sort numerically 53,29,11,32,7;
</PRE>
</DIV>

<p class=para>
To sort in descending order, simply reverse the <tt class=literal>$a</tt>
and <tt class=literal>$b</tt>. To sort a list value by some associated value, use a hash
lookup in the sort routine:

<div class=programlisting>
<p>
<pre>
sub byage {
    $age{$a} &lt;=&gt; $age{$b};
}
@sortedclass = sort byage @class;
</PRE>
</DIV>

<p class=para>
As an extension of that notion, you can cascade several different
comparisons using the handy comparison operators, which work nicely for
this because when they return <tt class=literal>0</tt> they fall through to the next
case.  The routine below sorts to the front of the list those people who are
first richer, then taller, then younger, then less alphabetically
challenged.  We also put a final comparison between <tt class=literal>$a</tt> and
<tt class=literal>$b</tt> to make sure the ordering is always well defined.

<div class=programlisting>
<p>
<pre>
sub prospects {
    $money{$b} &lt;=&gt; $money{$a}
       or
    $height{$b} &lt;=&gt; $height{$a}
       or
    $age{$a} &lt;=&gt; $age{$b}
       or
    $lastname{$a} cmp $lastname{$b}
       or
    $a cmp $b;
}
@sortedclass = sort prospects @class;
</PRE>
</DIV>

<p class=para>
To sort fields without regard to case, say:

<div class=programlisting>
<p>
<pre>
@sorted = sort { lc($a) cmp lc($b) } @unsorted;
</PRE>
</DIV>

<p class=para>
And finally, note the equivalence of the two ways to sort in
reverse:

<div class=programlisting>
<p>
<pre>
sub backwards { $b cmp $a; }
@harry = qw(dog cat x Cain Abel);
@george = qw(gone chased yz Punished Axed);
print sort @harry;                   # prints AbelCaincatdogx
print sort backwards @harry;         # prints xdogcatCainAbel
print reverse sort @harry;           # prints xdogcatCainAbel
print sort @george, "to", @harry;    # Remember, it's one LIST.
        # prints AbelAxedCainPunishedcatchaseddoggonetoxyz
</PRE>
</DIV>

<p class=para>
Do not declare <b>$a</B> and <b>$b</B> as lexical
variables (with <a href="#PERL2-CMD-MY">my</A>). They are package
globals (though they're exempt from the usual restrictions on globals when
you're using <tt class=literal>use strict</tt>).  You do need to make sure your sort
routine is in the same package though, or qualify <tt class=literal>$a</tt> and
<tt class=literal>$b</tt> with the package name of the caller.

<p class=para>
One last caveat. Perl's <a href="#PERL2-CMD-SORT">sort</A> is
implemented in terms of C's <i class=emphasis>qsort</I> (3) function.
Some <i class=emphasis>qsort</I> (3) versions will dump core if your
sort subroutine provides inconsistent ordering of values.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-SPLICE">splice</A></h3>

<div class=programlisting>
<p>
<pre>
splice <tt class=replaceable><i>ARRAY</i></tt>, <tt class=replaceable><i>OFFSET</i></tt>, <tt class=replaceable><i>LENGTH</i></tt>, <tt class=replaceable><i>LIST</i></tt>
splice <tt class=replaceable><i>ARRAY</i></tt>, <tt class=replaceable><i>OFFSET</i></tt>, <tt class=replaceable><i>LENGTH</i></tt>
splice <tt class=replaceable><i>ARRAY</i></tt>, <tt class=replaceable><i>OFFSET</i></tt>
</PRE>
</DIV>

<p class=para>
This function removes the elements designated by <tt class=replaceable><i>OFFSET</i></tt> and
<tt class=replaceable><i>LENGTH</i></tt>
from an array, and replaces them with the elements of <tt class=replaceable><i>LIST</i></tt>, if any.
The function returns the elements removed from the array.  The array
grows or shrinks as necessary.
If <tt class=replaceable><i>LENGTH</i></tt> is omitted, the function removes everything from
<tt class=replaceable><i>OFFSET</i></tt>
onward.  The following equivalences hold (assuming <b>$[</B> is 0):

<div class=informaltable>
<p>
<a name="PERL2-CH-3-TAB-4"></A>

<table class=INFORMALTABLE>
<tr class=row>
<th align="left">Direct Method</TH>
<th align="left">Splice Equivalent</TH>
</TR>
<tr class=row>
<td align="left"><tt class=literal>push(@a, $x, $y)</tt></TD>
<td align="left"><tt class=literal>splice(@a, $#a+1, 0, $x, $y)</tt></TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>pop(@a)</tt></TD>
<td align="left"><tt class=literal>splice(@a, -1)</tt></TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>shift(@a)</tt></TD>
<td align="left"><tt class=literal>splice(@a, 0, 1)</tt></TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>unshift(@a, $x, $y)</tt></TD>
<td align="left"><tt class=literal>splice(@a, 0, 0, $x, $y)</tt></TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>$a[$x] = $y</tt></TD>
<td align="left"><tt class=literal>splice(@a, $x, 1, $y);</tt></TD>
</TR>
</TABLE>
<p>
</DIV>

<p class=para>
The <a href="#PERL2-CMD-SPLICE">splice</A> function is also handy for
carving up the argument list passed to a subroutine.  For example, assuming list
lengths are passed before lists:

<div class=programlisting>
<p>
<pre>
sub list_eq {       # compare two list values
    my @a = splice(@_, 0, shift);
    my @b = splice(@_, 0, shift);
    return 0 unless @a == @b;       # same len?
    while (@a) {
        return 0 if pop(@a) ne pop(@b);
    }
    return 1;
}
if (list_eq($len, @foo[1..$len], scalar(@bar), @bar)) { ... }
</PRE>
</DIV>

<p class=para>
It would probably be cleaner just to use references for this, however.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-SPLIT">split</A></h3>

<div class=programlisting>
<p>
<pre>
split /<tt class=replaceable><i>PATTERN</i></tt>/, <tt class=replaceable><i>EXPR</i></tt>, <tt class=replaceable><i>LIMIT</i></tt>
split /<tt class=replaceable><i>PATTERN</i></tt>/, <tt class=replaceable><i>EXPR</i></tt>
split /<tt class=replaceable><i>PATTERN</i></tt>/
split
</PRE>
</DIV>

<p class=para>
<a name="CH03.SPLIT"></A><a name="CH03.STRSPL"></A><a name="CH03.PAT"></A>This function scans a string given by <tt class=replaceable><i>EXPR</i></tt> for delimiters, and
splits the string into a list of substrings, returning the resulting
list value in list context, or the count of substrings in scalar
context. The delimiters are determined by repeated pattern matching,
using the regular expression given in <tt class=replaceable><i>PATTERN</i></tt>, so the delimiters
may be of any size, and need not be the same string on every match.
(The delimiters are not ordinarily returned, but see below.)  If the
<tt class=replaceable><i>PATTERN</i></tt> doesn't match at all, <a href="#PERL2-CMD-SPLIT">split</A> returns the original
string as a single substring.  If it matches once, you get two
substrings, and so on.

<p class=para>
If <tt class=replaceable><i>LIMIT</i></tt> is specified and is not negative, the function splits into no
more than that many fields (though it may split into fewer if it runs out of
delimiters).  If <tt class=replaceable><i>LIMIT</i></tt> is negative, it is
treated as if an arbitrarily large <tt class=replaceable><i>LIMIT</i></tt> has
been specified.  If <tt class=replaceable><i>LIMIT</i></tt> is omitted, trailing null
fields are stripped from the result (which potential users of <a href="#PERL2-CMD-POP">pop</A> would do well to remember).  If
<tt class=replaceable><i>EXPR</i></tt> is omitted, the function splits the <b>$_</B> string.  If <tt class=replaceable><i>PATTERN</i></tt> is also
omitted, the function splits on whitespace, <tt class=literal>/\s+/</tt>, after
skipping any leading whitespace.

<p class=para>
Strings of any length can be split:

<div class=programlisting>
<p>
<pre>
@chars = split //, $word;
@fields = split /:/, $line;
@words = split ' ', $paragraph;
@lines = split /^/m, $buffer;
</PRE>
</DIV>

<p class=para>
A pattern capable of matching either the null string or something longer than
the null string (for instance, a pattern consisting of
any single character modified by a <tt class=literal>*</tt> or <tt class=literal>?</tt>) will split the
value of <tt class=replaceable><i>EXPR</i></tt>
into separate characters wherever it is the null string that
produces the match; non-null matches will skip over occurrences of the
delimiter in the usual fashion.  (In other words, a pattern won't match
in one spot more than once, even if it matched with a zero width.)
For example:

<div class=programlisting>
<p>
<pre>
print join ':', split / */, 'hi there';
</PRE>
</DIV>

<p class=para>
produces the output <tt class=literal>"h:i:t:h:e:r:e"</tt>.
The space disappears because it matched as part of the delimiter.
As a trivial case, the null
pattern <b>//</B> simply splits into separate
characters (and spaces do not disappear).

<p class=para>
The <tt class=replaceable><i>LIMIT</i></tt> parameter is used to split only part of a string:

<div class=programlisting>
<p>
<pre>
($login, $passwd, $remainder) = split /:/, $_, 3;
</PRE>
</DIV>

<p class=para>
We encourage you to split to lists of names like this in order to make your code
self-documenting.  (For purposes of error checking, note that
<tt class=literal>$remainder</tt> would be undefined if there were fewer than three
fields.)  When assigning to a list, if <tt class=replaceable><i>LIMIT</i></tt> is
omitted, Perl supplies a <tt class=replaceable><i>LIMIT</i></tt> one larger than the
number of variables in the list, to avoid unnecessary work.  For the split
above, <tt class=replaceable><i>LIMIT</i></tt> would have been 4 by default, and
<tt class=literal>$remainder</tt> would have received only the third field, not all
the rest of the fields.  In time-critical applications it behooves you not to
split into more fields than you really need.

<p class=para>
We said earlier that the delimiters are not returned, but if
the <tt class=replaceable><i>PATTERN</i></tt> contains parentheses, then the substring matched
by each pair of parentheses is included in the resulting list,
interspersed with the fields that are ordinarily returned.
Here's a simple case:

<div class=programlisting>
<p>
<pre>
split /([-,])/, "1-10,20";
</PRE>
</DIV>

<p class=para>
produces the list value:

<div class=programlisting>
<p>
<pre>
(1, '-', 10, ',', 20)
</PRE>
</DIV>

<p class=para>
With more parentheses, a field is returned for each pair, even if some
of the pairs don't match, in which case undefined values are returned
in those positions.  So if you say:

<div class=programlisting>
<p>
<pre>
split /(-)|(,)/, "1-10,20";
</PRE>
</DIV>

<p class=para>
you get the value:

<div class=programlisting>
<p>
<pre>
(1, '-', undef, 10, undef, ',', 20)
</PRE>
</DIV>

<p class=para>
The <tt class=literal>/</tt><tt class=replaceable><i>PATTERN</i></tt><tt class=literal>/</tt>
argument may be replaced with an expression to specify patterns that vary at
run-time.  (To do run-time compilation only once, use
<tt class=literal>/$variable/o</tt>.)  As a special case, specifying a space
<tt class=literal>` `</tt> will split on whitespace just as <a href="#PERL2-CMD-SPLIT">split</A> with no arguments does.  Thus, <tt class=literal>split(`
`)</tt> can be used to emulate <i class=emphasis>awk</I> 's default
behavior, whereas <tt class=literal>split(/ /)</tt> will give you as many null
initial fields as there are leading spaces.  (Other than this special case, if
you supply a string instead of a regular expression, it'll be interpreted as a
regular expression anyway.)

<p class=para>
The following example splits an RFC-822 message header into a hash
containing <tt class=literal>$head{Date}</tt>, <tt class=literal>$head{Subject}</tt>, and so on.  It
uses the trick of assigning a list of pairs to a hash, based on the fact
that delimiters alternate with delimited fields.  It makes use of
parentheses to return part of each delimiter as part of the returned
list value.  Since the <a href="#PERL2-CMD-SPLIT">split</A> pattern is guaranteed to return
things in pairs by virtue of containing one set of parentheses, the hash
assignment is guaranteed to receive a list consisting of key/value
pairs, where each key is the name of a header field.  (Unfortunately
this technique loses information for multiple lines with the same key
field, such as Received-By lines.  Ah, well. . . .)

<div class=programlisting>
<p>
<pre>
$header =~ s/\n\s+/ /g;      # Merge continuation lines.
%head = ('FRONTSTUFF', split /^([-\w]+):/m, $header);
</PRE>
</DIV>

<p class=para>
The following example processes the entries in a UNIX
<i class=emphasis>passwd</I> file.  You could leave out the <a href="#PERL2-CMD-CHOP">chop</A>, in which case <tt class=literal>$shell</tt> would have a
newline on the end of it.

<div class=programlisting>
<p>
<pre>
open PASSWD, '/etc/passwd';
while (&lt;PASSWD&gt;) {
    chop;        # remove trailing newline
    ($login, $passwd, $uid, $gid, $gcos, $home, $shell) =
            split /:/;
    ...
}
</PRE>
</DIV>

<p class=para>
The inverse of <a href="#PERL2-CMD-SPLIT">split</A> is performed by <a href="#PERL2-CMD-JOIN">join</A> (except that <a href="#PERL2-CMD-JOIN">join</A> can only join with the same delimiter between all
fields).  To break apart a string with fixed-position fields, use <a href="#PERL2-CMD-UNPACK">unpack</A>.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-SPRINTF">sprintf</A></h3>

<div class=programlisting>
<p>
<pre>
sprintf <tt class=replaceable><i>FORMAT</i></tt>, <tt class=replaceable><i>LIST</i></tt>
</PRE>
</DIV>

<p class=para>
This function returns a string formatted by the usual <a href="#PERL2-CMD-PRINTF">printf</A>
conventions.  The <tt class=replaceable><i>FORMAT</i></tt> string contains text with embedded field
specifiers into which the elements of <tt class=replaceable><i>LIST</i></tt> are substituted, one per
field.  Field specifiers are roughly of the form:

<div class=programlisting>
<p>
<pre>
%<tt class=replaceable><i>m.nx</i></tt>
</PRE>
</DIV>

<p class=para>
where the <tt class=replaceable><i>m</i></tt> and <tt class=replaceable><i>n</i></tt> are
optional sizes whose interpretation depends on the type of field, and
<tt class=replaceable><i>x</i></tt> is one of:

<div class=informaltable>
<p>
<a name="PERL2-CH-3-TAB-5"></A>

<table class=INFORMALTABLE>
<tr class=row>
<th align="left">Code</TH>
<th align="left">Meaning</TH>
</TR>
<tr class=row>
<td align="left"><tt class=literal>c</tt></TD>
<td align="left">Character</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>d</tt></TD>
<td align="left">Decimal integer</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>e</tt></TD>
<td align="left">Exponential format floating-point number</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>f</tt></TD>
<td align="left">Fixed point format floating-point number</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>g</tt></TD>
<td align="left">Compact format floating-point number</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>ld</tt></TD>
<td align="left">Long decimal integer</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>lo</tt></TD>
<td align="left">Long octal integer</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>lu</tt></TD>
<td align="left">Long unsigned decimal integer</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>lx</tt></TD>
<td align="left">Long hexadecimal integer</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>o</tt></TD>
<td align="left">Octal integer</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>s</tt></TD>
<td align="left">String</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>u</tt></TD>
<td align="left">Unsigned decimal integer</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>x</tt></TD>
<td align="left">Hexadecimal integer</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>X</tt></TD>
<td align="left">Hexadecimal integer with upper-case letters</TD>
</TR>
</TABLE>
<p>
</DIV>

<p class=para>
The various combinations are fully documented in the manpage for
<i class=emphasis>printf (3)</I>, but we'll mention that
<tt class=replaceable><i>m</i></tt> is typically the minimum length of the field
(negative for left justified), and <tt class=replaceable><i>n</i></tt> is precision for
exponential formats and the maximum length for other formats.  Padding is
typically done with spaces for strings and zeroes for numbers.  The
<tt class=literal>*</tt> character as a length specifier is not supported. But,
you can easily get around this by including the length expression directly into
<tt class=replaceable><i>FORMAT</i></tt>, as in:

<div class=programlisting>
<p>
<pre>
$width = 20; $value = sin 1.0;
foreach $precision (0..($width-2)) {
    printf "%${width}.${precision}f\n", $value;
}
</PRE>
</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-SQRT">sqrt</A></h3>

<div class=programlisting>
<p>
<pre>
sqrt <tt class=replaceable><i>EXPR</i></tt>
sqrt
</PRE>
</DIV>

<p class=para>
This function returns the square root of <tt class=replaceable><i>EXPR</i></tt>.  If <tt class=replaceable><i>EXPR</i></tt>
is omitted, it
returns the square root of <b>$_</B>.
For other roots such as cube roots, you can use the <tt class=literal>**</tt> operator
to raise something to a fractional power.[8]

<blockquote class=footnote>
<p class=para>[8] 
Don't try either of these approaches with negative numbers, 
as that poses a slightly more complex problem.
</blockquote>
</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-SRAND">srand</A></h3>

<div class=programlisting>
<p>
<pre>
srand <tt class=replaceable><i>EXPR</i></tt>
</PRE>
</DIV>

<p class=para>
This function sets the random number seed for the <a href="#PERL2-CMD-RAND">rand</A> operator.  If <tt class=replaceable><i>EXPR</i></tt> is
omitted, it does <tt class=literal>srand(time)</tt>, which is pretty predictable, so
don't use it for security-type things, such as random password generation. Try
something like this instead:[9]

<blockquote class=footnote>
<p class=para>[9] 
 Frequently called programs (like
CGI scripts) that simply use
<div class=programlisting>
<p>
<pre>
time ^ $$
</PRE>
</DIV>
<p class=para>
for a seed can fall prey to the mathematical property that
<div class=programlisting>
<p>
<pre>
a^b == (a+1)^(b+1)
</PRE>
</DIV>
<p class=para>
one-third of the time.  
If you're particularly concerned with this, see the Math::TrulyRandom
module in CPAN.
</blockquote>
<div class=programlisting>
<p>
<pre>
srand( time() ^ ($$ + ($$ &lt;&lt; 15)) );
</PRE>
</DIV>

<p class=para>
Of course, you'd need something much more random than that for
serious cryptographic purposes, since it's easy to guess the current time.
Checksumming the compressed output of one or more rapidly changing operating
system status programs is the usual method. For example:

<div class=programlisting>
<p>
<pre>
srand (time ^ $$ ^ unpack "%32L*", `ps axww | gzip`);
</PRE>
</DIV>

<p class=para>
Do <i class=emphasis>not</I> call <a href="#PERL2-CMD-SRAND">srand</A>
multiple times in your program unless you know exactly what you're doing and why
you're doing it.  The point of the function is to "seed" the <a href="#PERL2-CMD-RAND">rand</A> function so that <a href="#PERL2-CMD-RAND">rand</A> can produce a different sequence each time you run
your program.  Just do it once at the top of your program, or you won't get
random numbers out of <a href="#PERL2-CMD-RAND">rand</A>!

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-STAT">stat</A></h3>

<div class=programlisting>
<p>
<pre>
stat <tt class=replaceable><i>FILEHANDLE</i></tt>
stat <tt class=replaceable><i>EXPR</i></tt>
</PRE>
</DIV>

<p class=para>
This function returns a 13-element list giving the statistics for a
file, either the file opened via <tt class=replaceable><i>FILEHANDLE</i></tt>, or named by <tt class=replaceable><i>EXPR</i></tt>.
It's typically used as follows:

<div class=programlisting>
<p>
<pre>
($dev,$ino,$mode,$nlink,$uid,$gid,$rdev,$size,
    $atime,$mtime,$ctime,$blksize,$blocks)
            = stat $filename;
</PRE>
</DIV>

<p class=para>
Not all fields are supported on all filesystem types.
Here are the meanings of the fields:

<div class=informaltable>
<p>
<a name="PERL2-CH-3-TAB-6"></A>

<table class=INFORMALTABLE>
<tr class=row>
<th align="left">Field</TH>
<th align="left">Meaning</TH>
</TR>
<tr class=row>
<td align="left"><tt class=literal>dev</tt></TD>
<td align="left">Device number of filesystem </TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>ino</tt></TD>
<td align="left">Inode number</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>mode</tt></TD>
<td align="left">File mode  (type and permissions)</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>nlink</tt></TD>
<td align="left">Number of (hard) links to the file </TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>uid</tt></TD>
<td align="left">Numeric user ID of file's owner </TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>gid</tt></TD>
<td align="left">Numeric group ID of file's owner </TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>rdev</tt></TD>
<td align="left">The device identifier (special files only)</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>size</tt></TD>
<td align="left">Total size of file, in bytes </TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>atime</tt></TD>
<td align="left">Last access time since the epoch</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>mtime</tt></TD>
<td align="left">Last modify time since the epoch</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>ctime</tt></TD>
<td align="left">Inode change time (NOT creation time!) since the epoch</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>blksize</tt></TD>
<td align="left">Preferred blocksize for file system I/O</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>blocks</tt></TD>
<td align="left">Actual number of blocks allocated</TD>
</TR>
</TABLE>
<p>
</DIV>

<p class=para>
<tt class=literal>$dev</tt> and <tt class=literal>$ino</tt>, taken together, uniquely
identify a file.  The <tt class=literal>$blksize</tt> and <tt class=literal>$blocks</tt>
are likely defined only on BSD-derived filesystems.  The
<tt class=literal>$blocks</tt> field (if defined) is reported in 512-byte blocks.
Note that <tt class=literal>$blocks*512</tt> can differ greatly from
<tt class=literal>$size</tt> for files containing unallocated blocks, or "holes",
which aren't counted in <tt class=literal>$blocks</tt>.

<p class=para>
If <a href="#PERL2-CMD-STAT">stat</A> is passed the special filehandle
consisting of an underline, no actual <i class=emphasis>stat</I> (2) is done, but the current contents of
the stat structure from the last <b>stat</B> or <b>stat</B>-based file test (the <tt class=literal>-x</tt> operators) are returned.

<p class=para>
The following example first stats <tt class=literal>$file</tt> to see whether it is
executable.  If it is, it then pulls the device number out of the existing stat
structure and tests it to see whether it looks like a Network File System
(NFS). Such filesystems tend to have negative device numbers.

<div class=programlisting>
<p>
<pre>
if (-x $file and ($d) = stat(_) and $d &lt; 0) {
    print "$file is executable NFS file\n";
}
</PRE>
</DIV>

<p class=para>
Hint: if you need only the size of the file, check out the <tt class=literal>-s</tt> file test operator, which returns the size in
bytes directly.  There are also file tests that return the ages of files in
days.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-STUDY">study</A></h3>

<div class=programlisting>
<p>
<pre>
study <tt class=replaceable><i>SCALAR</i></tt>
study
</PRE>
</DIV>

<p class=para>
This function takes extra time to study <tt class=replaceable><i>SCALAR</i></tt>
(<b>$_</B> if
unspecified) in anticipation of doing many pattern matches on the
string before it is next modified.  This may or may not save time,
depending on the nature and number of patterns you are searching on,
and on the distribution of character frequencies in the string to be
searched--you probably want to compare run-times with and without it to
see which runs faster.  Those loops that scan for many short constant
strings (including the constant parts of more complex patterns) will
benefit most.  If all your pattern matches are constant strings,
anchored at the front, <a href="#PERL2-CMD-STUDY">study</A> won't help at all, because no
scanning is done.  You may have only one <a href="#PERL2-CMD-STUDY">study</A> active at a time--if
you study a different scalar the first is "unstudied".

<p class=para>
The way <a href="#PERL2-CMD-STUDY">study</A>
works is this: a linked list of every character in the string to be
searched is made, so we know, for example, where all the "<tt class=literal>k</tt>"
characters are.  From each search string, the rarest character is
selected, based on some static frequency tables constructed from some
C programs and English text.  Only those places that contain this rarest character are examined.

<p class=para>
For example, here is a loop that inserts index-producing entries
before any line containing a certain pattern:

<div class=programlisting>
<p>
<pre>
while (&lt;&gt;) {
    study;
    print ".IX foo\n" if /\bfoo\b/;
    print ".IX bar\n" if /\bbar\b/;
    print ".IX blurfl\n" if /\bblurfl\b/;
    ...
    print;
}
</PRE>
</DIV>

<p class=para>
In searching for <tt class=literal>/\bfoo\b/</tt>, only those locations in <b>$_</B> that contain "<tt class=literal>f</tt>" will be looked at,
because "<tt class=literal>f</tt>" is rarer than "<tt class=literal>o</tt>".  In
general, this is a big win except in pathological cases.  The only question is
whether it saves you more time than it took to build the linked list in the
first place.

<p class=para>
If you have to look for strings that you don't know until run-time, you can
build an entire loop as a string and <a href="#PERL2-CMD-EVAL">eval</A>
that to avoid recompiling all your patterns all the time.  Together with setting
<b>$/</B> to input entire files as one record, this can
be very fast, often faster than specialized programs like
<i class=emphasis>fgrep</I>.  The following scans a list of files
(<tt class=literal>@files</tt>) for a list of words (<tt class=literal>@words</tt>), and
prints out the names of those files that contain a match:

<div class=programlisting>
<p>
<pre>
$search = 'while (&lt;&gt;) { study;';
foreach $word (@words) {
    $search .= "++\$seen{\$ARGV} if /\\b$word\\b/;\n";
}
$search .= "}";
@ARGV = @files;
undef $/;               # slurp each entire file
eval $search;           # this screams
die $@ if $@;           # in case eval failed
$/ = "\n";              # put back to normal input delim
foreach $file (sort keys(%seen)) {
    print $file, "\n";
}
</PRE>
</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-SUB">sub</A></h3>

<div class=programlisting>
<p>
<pre>
sub <tt class=replaceable><i>NAME</i></tt> <tt class=replaceable><i>BLOCK</i></tt>
sub <tt class=replaceable><i>NAME</i></tt>
sub <tt class=replaceable><i>BLOCK</i></tt>
sub <tt class=replaceable><i>NAME</i></tt> <tt class=replaceable><i>PROTO</i></tt> <tt class=replaceable><i>BLOCK</i></tt>
sub <tt class=replaceable><i>NAME</i></tt> <tt class=replaceable><i>PROTO</i></tt>
sub <tt class=replaceable><i>PROTO</i></tt> <tt class=replaceable><i>BLOCK</i></tt>
</PRE>
</DIV>

<p class=para>
The first two of these are not really operators, but rather they
declare the existence of named subroutines, which is why the
syntax includes a <tt class=replaceable><i>NAME</i></tt>, after all.  (As declarations, they
return no value.)  The first one additionally defines the
subroutine with a <tt class=replaceable><i>BLOCK</i></tt>, which contains the code for the
subroutine.  The second one (the one without the <tt class=replaceable><i>BLOCK</i></tt>) is
just a forward declaration, that is, a declaration that introduces the
subroutine name without defining it, with the expectation that the real
definition will come later.  (This is useful because the parser treats a
word specially if it knows it's a user-defined subroutine.  You can call
such a subroutine as if it were a list operator, for instance.)

<p class=para>
The third form really <i class=emphasis>is</I> an operator, in that it can be
used within expressions to generate an anonymous subroutine at run-time.  (More
specifically, it returns a reference to an anonymous subroutine, since you can't
talk about something anonymous without some kind of reference to it.)  If the
anonymous subroutine refers to any lexical variables declared outside its
<tt class=replaceable><i>BLOCK</i></tt>, it functions as a
<i class=emphasis>closure</I>, which means that different calls to the same <a href="#PERL2-CMD-SUB">sub</A> operator will do the bookkeeping necessary to
keep the correct "version" of each such lexical variable in sight for the life
of the closure, even if the original scope of the lexical variable has been
destroyed.

<p class=para>
The final three forms are identical to the first three, except that they
also supply a prototype that lets you specify how calls to your
subroutine should be parsed and analyzed, so you can make your
routines act more like some of Perl's built-in functions.  See
"Subroutines" in <a href="ch02_01.htm">Chapter 2, <i>The Gory Details</i></A> and "Anonymous Subroutines" in <a href="ch04_01.htm">Chapter 4, <i>References and Nested Data Structures</i></A>
for more details.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-SUBSTR">substr</A></h3>

<div class=programlisting>
<p>
<pre>
substr <tt class=replaceable><i>EXPR</i></tt>, <tt class=replaceable><i>OFFSET</i></tt>, <tt class=replaceable><i>LENGTH</i></tt>
substr <tt class=replaceable><i>EXPR</i></tt>, <tt class=replaceable><i>OFFSET</i></tt>
</PRE>
</DIV>

<p class=para>
This function extracts a substring out of the string given by <tt class=replaceable><i>EXPR</i></tt> and
returns it.  The substring is extracted starting at <tt class=replaceable><i>OFFSET</i></tt> characters
from the front of the string.
(Note: if you've messed with <tt class=literal>$[</tt>, the beginning of the string isn't at 0,
but since you haven't messed with it (have you?), it is.)
If <tt class=replaceable><i>OFFSET</i></tt> is negative, the substring starts that far from the
end of the string instead.  If <tt class=replaceable><i>LENGTH</i></tt> is omitted, everything to
the end of the string is returned.  If <tt class=replaceable><i>LENGTH</i></tt> is negative, the
length is calculated to leave that many characters off the end of the
string.  Otherwise, <tt class=replaceable><i>LENGTH</i></tt> indicates the length of the substring
to extract, which is sort of what you'd expect.

<p class=para>
You can use <a href="#PERL2-CMD-SUBSTR">substr</A> as an lvalue (something
to assign to), in which case <tt class=replaceable><i>EXPR</i></tt> must also be a
legal lvalue.  If you assign something shorter than the length of your
substring, the string will shrink, and if you assign something longer than the
length, the string will grow to accommodate it.  To keep the string the same
length you may need to pad or chop your value using <a href="#PERL2-CMD-SPRINTF">sprintf</A> or the <b>x</B> operator.

<p class=para>
To prepend the string <tt class=literal>"Larry"</tt> to the
current value of <b>$_</B>, use:

<div class=programlisting>
<p>
<pre>
substr($_, 0, 0) = "Larry";
</PRE>
</DIV>

<p class=para>
To instead replace the first character of <b>$_</B> with <tt class=literal>"Moe"</tt>,
use:

<div class=programlisting>
<p>
<pre>
substr($_, 0, 1) = "Moe";
</PRE>
</DIV>

<p class=para>
and finally, to replace the last character of <b>$_</B> with
<tt class=literal>"Curly"</tt>, use:

<div class=programlisting>
<p>
<pre>
substr($_, -1, 1) = "Curly";
</PRE>
</DIV>

<p class=para>
These last few examples presume you haven't messed with the value of <b>$[</B>.
You haven't, have you?  Good.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-SYMLINK">symlink</A></h3>

<div class=programlisting>
<p>
<pre>
symlink <tt class=replaceable><i>OLDFILE</i></tt>, <tt class=replaceable><i>NEWFILE</i></tt>
</PRE>
</DIV>

<p class=para>
This function creates a new filename symbolically linked to the old filename.
The function returns 1 for success, 0 otherwise.  On systems that
don't support symbolic links, it produces a fatal error at run-time.
To check for that, use <a href="#PERL2-CMD-EVAL">eval</A> to trap the potential error:

<div class=programlisting>
<p>
<pre>
$can_symlink = (eval { symlink("", ""); }, $@ eq "");
</PRE>
</DIV>

<p class=para>
Or use the Config module.  Be careful if you supply a relative symbolic
link, since it'll be interpreted relative to the location of the
symbolic link itself, not your current working directory.

<p class=para>
See also <a href="#PERL2-CMD-LINK">link</A> and <a href="#PERL2-CMD-READLINK">readlink</A> earlier in this chapter.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-SYSCALL">syscall</A></h3>

<div class=programlisting>
<p>
<pre>
syscall <tt class=replaceable><i>LIST</i></tt>
</PRE>
</DIV>

<p class=para>
This function calls the system call specified as the first element of
the list, passing the remaining elements as arguments to the system
call.  (Many of these are now more readily available through the POSIX
module, and others.)  The function produces a fatal error if
<i class=emphasis>syscall</I> (2) is unimplemented.  The arguments are interpreted as
follows: if a given argument is numeric, the argument is passed as a
C integer.  If not, a pointer to the string value is
passed.  You are responsible for making sure the string is long enough
to receive any result that might be written into it.  Otherwise you're
looking at a coredump.  If your integer arguments are not literals and
have never been interpreted in a numeric context, you may need to add 0
to them to force them to look like numbers.  (See the following
example.)

<p class=para>
This example calls the <i class=emphasis>setgroups</I> (2) system call to add to the
group list of the current process.  (It will only work on machines
that support multiple group membership.)

<div class=programlisting>
<p>
<pre>
require 'syscall.ph';
syscall &amp;SYS_setgroups, @groups+0, pack("i*", @groups);
</PRE>
</DIV>

<p class=para>
Note that you may have to run <i class=emphasis>h2ph</I> as indicated in the
Perl installation instructions for <i class=emphasis>syscall.ph</I> to exist.
Some systems may require a <a href="#PERL2-CMD-PACK">pack</A> template of
<tt class=literal>"s*"</tt> instead.
Best of all, the <a href="#PERL2-CMD-SYSCALL">syscall</A> function assumes the size equivalence of the
C types <tt class=literal>int</tt>, <tt class=literal>long</tt>, and <tt class=literal>char</tt>&nbsp;*.

<p class=para>
Try not to think of <a href="#PERL2-CMD-SYSCALL">syscall</A> as the epitome of portability.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-SYSOPEN">sysopen</A></h3>

<div class=programlisting>
<p>
<pre>
sysopen <tt class=replaceable><i>FILEHANDLE</i></tt>, <tt class=replaceable><i>FILENAME</i></tt>, <tt class=replaceable><i>MODE</i></tt>
sysopen <tt class=replaceable><i>FILEHANDLE</i></tt>, <tt class=replaceable><i>FILENAME</i></tt>, <tt class=replaceable><i>MODE</i></tt>, <tt class=replaceable><i>PERMS</i></tt>
</PRE>
</DIV>

<p class=para>
This function opens the file whose filename is given by <tt class=replaceable><i>FILENAME</i></tt>, and
associates it
with <tt class=replaceable><i>FILEHANDLE</i></tt>.  If <tt class=replaceable><i>FILEHANDLE</i></tt> is an expression,
its value is used as the name of (or reference to) the filehandle.
This function calls <i class=emphasis>open</I> (2) with the
parameters <tt class=replaceable><i>FILENAME</i></tt>, <tt class=replaceable><i>MODE</i></tt>, <tt class=replaceable><i>PERMS</i></tt>.

<p class=para>
The possible values and flag bits of the <tt class=replaceable><i>MODE</i></tt> parameter are
system-dependent; they are available via the Fcntl library module.
However, for historical reasons, some values are
universal: zero means read-only, one means write-only, and two means
read/write.

<p class=para>
If the file named by <tt class=replaceable><i>FILENAME</i></tt> does not exist and
<b>sysopen</B> creates it (typically because
<tt class=replaceable><i>MODE</i></tt> includes the <tt class=literal>O_CREAT</tt> flag),
then the value of <tt class=replaceable><i>PERMS</i></tt> specifies the permissions of
the newly created file.  If <tt class=replaceable><i>PERMS</i></tt> is omitted, the
default value is <tt class=literal>0666</tt>, which allows read and write for all.
This default is reasonable: see <a href="#PERL2-CMD-UMASK">umask</A>.

<p class=para>
The FileHandle module described in <a href="ch07_01.htm">Chapter 7, <i>The Standard Perl Library</i></A> provides a more
object-oriented approach to <a href="#PERL2-CMD-SYSOPEN">sysopen</A>.  See
also <b>open</B> earlier in this chapter.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-SYSREAD">sysread</A></h3>

<div class=programlisting>
<p>
<pre>
sysread <tt class=replaceable><i>FILEHANDLE</i></tt>, <tt class=replaceable><i>SCALAR</i></tt>, <tt class=replaceable><i>LENGTH</i></tt>, <tt class=replaceable><i>OFFSET</i></tt>
sysread <tt class=replaceable><i>FILEHANDLE</i></tt>, <tt class=replaceable><i>SCALAR</i></tt>, <tt class=replaceable><i>LENGTH</i></tt>
</PRE>
</DIV>

<p class=para>
This function attempts to read <tt class=replaceable><i>LENGTH</i></tt> bytes of data
into variable <tt class=replaceable><i>SCALAR</i></tt> from the specified
<tt class=replaceable><i>FILEHANDLE</i></tt> using
<i class=emphasis>read</I> (2).  The function returns the number of bytes
actually read, or 0 at EOF.  It returns the undefined value on error.
<tt class=replaceable><i>SCALAR</i></tt> will be grown or shrunk to the length actually
read.  The <tt class=replaceable><i>OFFSET</i></tt>, if specified, says where in the
string to start putting the bytes, so that you can read into the middle of a
string that's being used as a buffer.  For an example, see <a href="#PERL2-CMD-SYSWRITE">syswrite</A>.  You should be prepared to handle the problems
(like interrupted system calls) that standard I/O normally handles for you.
Also, do not mix calls to <a href="#PERL2-CMD-READ">read</A> and <a href="#PERL2-CMD-SYSREAD">sysread</A> on the same filehandle unless you are into
heavy wizardry (and/or pain).

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-SYSTEM">system</A></h3>

<div class=programlisting>
<p>
<pre>
system <tt class=replaceable><i>LIST</i></tt>
</PRE>
</DIV>

<p class=para>
This function executes any program on the system for you.  It does exactly the
same thing as <tt class=literal>exec</tt> <tt class=replaceable><i>LIST</i></tt> except
that it does a <a href="#PERL2-CMD-FORK">fork</A> first, and then, after
the exec, it waits for the exec'd program to complete.  That is (in non-UNIX
terms), it runs the program for you, and returns when it's done, unlike <a href="#PERL2-CMD-EXEC">exec</A>, which never returns (if it succeeds).  Note
that argument processing varies depending on the number of arguments, as
described for <a href="#PERL2-CMD-EXEC">exec</A>.  The return value is the
exit status of the program as returned by the
<i class=emphasis>wait</I> (2) call.  To get the actual exit value, divide
by 256.  (The lower 8 bits are set if the process died from a signal.)  See
<a href="#PERL2-CMD-EXEC">exec</A>.

<p class=para>
Because <a href="#PERL2-CMD-SYSTEM">system</A> and backticks block
<tt class=literal>SIGINT</tt> and <tt class=literal>SIGQUIT</tt>, killing the program
they're running with one of those signals doesn't actually interrupt your
program.

<div class=programlisting>
<p>
<pre>
@args = ("command", "arg1", "arg2");
system(@args) == 0 
     or die "system @args failed: $?"
</PRE>
</DIV>

<p class=para>
Here's a more elaborate example of analyzing the return value from <a href="#PERL2-CMD-SYSTEM">system</A> on a UNIX system to check for all
possibilities, including for signals and coredumps.

<div class=programlisting>
<p>
<pre>
$rc = 0xffff &amp; system @args;
printf "system(%s) returned %#04x: ", "@args", $rc;
if ($rc == 0) {
    print "ran with normal exit\n";
} 
elsif ($rc == 0xff00) {
    print "command failed: $!\n";
} 
elsif ($rc &gt; 0x80) {
    $rc &gt;&gt;= 8;
    print "ran with non-zero exit status $rc\n";
} 
else {
    print "ran with ";
    if ($rc &amp;   0x80) {
        $rc &amp;= ~0x80;
        print "coredump from ";
    } 
    print "signal $rc\n"
} 
$ok = ($rc != 0);
</PRE>
</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-SYSWRITE">syswrite</A></h3>

<div class=programlisting>
<p>
<pre>
syswrite <tt class=replaceable><i>FILEHANDLE</i></tt>, <tt class=replaceable><i>SCALAR</i></tt>, <tt class=replaceable><i>LENGTH</i></tt>, <tt class=replaceable><i>OFFSET</i></tt>
syswrite <tt class=replaceable><i>FILEHANDLE</i></tt>, <tt class=replaceable><i>SCALAR</i></tt>, <tt class=replaceable><i>LENGTH</i></tt>
</PRE>
</DIV>

<p class=para>
This function attempts to write <tt class=replaceable><i>LENGTH</i></tt> bytes of data from
variable <tt class=replaceable><i>SCALAR</i></tt> to the specified <tt class=replaceable><i>FILEHANDLE</i></tt> using
<i class=emphasis>write</I> (2).  The function returns the number of bytes actually
written, or the undefined value on error.  You should be prepared to
handle the problems that standard I/O normally handles for you, such as
partial writes.  The <tt class=replaceable><i>OFFSET</i></tt>, if specified, says where in the
string to start writing from, in case you're using the string as a
buffer, for instance, or you need to recover from a partial write.  To
copy data from filehandle <tt class=literal>FROM</tt> into filehandle <tt class=literal>TO</tt>, use
something like:

<div class=programlisting>
<p>
<pre>
$blksize = (stat FROM)[11] || 16384;  # preferred block size?
while ($len = sysread FROM, $buf, $blksize) {
    if (!defined $len) {
        next if $! =~ /^Interrupted/;
        die "System read error: $!\n";
    }
    $offset = 0;
    while ($len) {          # Handle partial writes.
        $written = syswrite TO, $buf, $len, $offset;
        die "System write error: $!\n"
            unless defined $written;
        $len -= $written;
        $offset += $written;
    };
}
</PRE>
</DIV>

<p class=para>
Do not mix calls to (<a href="#PERL2-CMD-PRINT">print</A> or <a href="#PERL2-CMD-WRITE">write</A>) and <a href="#PERL2-CMD-SYSWRITE">syswrite</A> on
the same filehandle unless you are into heavy wizardry.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-TELL">tell</A></h3>

<div class=programlisting>
<p>
<pre>
tell <tt class=replaceable><i>FILEHANDLE</i></tt>
tell
</PRE>
</DIV>

<p class=para>
This function returns the current file position (in bytes, 0-based) for
<tt class=replaceable><i>FILEHANDLE</i></tt>.
This value is typically fed to the <a href="#PERL2-CMD-SEEK">seek</A> function at some future time
to get back to the current position.
<tt class=replaceable><i>FILEHANDLE</i></tt> may be an expression whose value gives the name of the
actual filehandle, or a reference to a filehandle object.
If <tt class=replaceable><i>FILEHANDLE</i></tt> is omitted, the function returns the
position of the file last read.  File positions are only meaningful on
regular files.  Devices, pipes, and sockets have no file position.

<p class=para>
See <a href="#PERL2-CMD-SEEK">seek</A> for an example.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-TELLDIR">telldir</A></h3>

<div class=programlisting>
<p>
<pre>
telldir <tt class=replaceable><i>DIRHANDLE</i></tt>
</PRE>
</DIV>

<p class=para>
This function returns the current position of the <a href="#PERL2-CMD-READDIR">readdir</A> routines on <tt class=replaceable><i>DIRHANDLE</i></tt>.
This value may be given to <a href="#PERL2-CMD-SEEKDIR">seekdir</A> to access
a particular location in a directory.  The function has the same caveats about
possible directory compaction as the corresponding system library routine.  This
function may not be implemented everywhere that <a href="#PERL2-CMD-READDIR">readdir</A> is.  Even if it is, no calculation may be done with
the return value.  It's just an opaque value, meaningful only to <a href="#PERL2-CMD-SEEKDIR">seekdir</A>.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-TIE">tie</A></h3>

<div class=programlisting>
<p>
<pre>
tie <tt class=replaceable><i>VARIABLE</i></tt>, <tt class=replaceable><i>CLASSNAME</i></tt>, <tt class=replaceable><i>LIST</i></tt>
</PRE>
</DIV>

<p class=para>
This function binds a variable to a package class that will provide
the implementation for the variable.  <tt class=replaceable><i>VARIABLE</i></tt> is the name of the
variable to be tied.  <tt class=replaceable><i>CLASSNAME</i></tt> is the name of a class
implementing objects of an appropriate type.  Any additional arguments are
passed to the "new" method of the class (meaning <tt class=literal>TIESCALAR</tt>,
<tt class=literal>TIEARRAY</tt>, or <tt class=literal>TIEHASH</tt>).  Typically these are arguments such
as might be passed to the <i class=emphasis>dbm_open</I> (3) function of C, but this is
package dependent.  The object
returned by the "new" method is also returned by the <a href="#PERL2-CMD-TIE">tie</A>
function, which can be useful if you want to access other methods in
<tt class=replaceable><i>CLASSNAME</i></tt>.  (The object can also be accessed through the <a href="#PERL2-CMD-TIED">tied</A>
function.) So, a class for tying a hash to an ISAM implementation
might provide an extra method to traverse a set of keys sequentially
(the "S" of ISAM), since your typical DBM implementation can't do that.

<p class=para>
Note that functions such as <a href="#PERL2-CMD-KEYS">keys</A> and <a href="#PERL2-CMD-VALUES">values</A> may return huge list values when used on
large objects like DBM files.  You may prefer to use the <a href="#PERL2-CMD-EACH">each</A> function to iterate over such.  For example:

<div class=programlisting>
<p>
<pre>
use NDBM_File;
tie %ALIASES, "NDBM_File", "/etc/aliases", 1, 0
    or die "Can't open aliases: $!\n";
while (($key,$val) = each %ALIASES) {
    print $key, ' = ', $val, "\n";
}
untie %ALIASES;
</PRE>
</DIV>

<p class=para>
A class implementing a hash should provide the following
methods:

<div class=programlisting>
<p>
<pre>
TIEHASH $class, <tt class=replaceable><i>LIST</i></tt>
DESTROY $self
FETCH $self, $key
STORE $self, $key, $value
DELETE $self, $key
EXISTS $self, $key
FIRSTKEY $self
NEXTKEY $self, $lastkey
</PRE>
</DIV>

<p class=para>
A class implementing an ordinary array should provide the following methods:

<div class=programlisting>
<p>
<pre>
TIEARRAY $classname, <tt class=replaceable><i>LIST</i></tt>
DESTROY $self
FETCH $self, $subscript
STORE $self, $subscript, $value
</PRE>
</DIV>

<p class=para>
(As of this writing, other methods are still being designed.  Check the
online documentation for additions.)

<p class=para>
A class implementing a scalar should provide the following methods:

<div class=programlisting>
<p>
<pre>
TIESCALAR $classname, <tt class=replaceable><i>LIST</i></tt>
DESTROY $self
FETCH $self, 
STORE $self, $value
</PRE>
</DIV>

<p class=para>
See "Using Tied Variables" in <a href="ch05_01.htm">Chapter 5, <i>Packages, Modules, and Object Classes</i></A> for detailed discussion of all these methods.
Unlike <a href="#PERL2-CMD-DBMOPEN">dbmopen</A>, the <a href="#PERL2-CMD-TIE">tie</A> function will not <a href="#PERL2-CMD-USE">use</A> or <a href="#PERL2-CMD-REQUIRE">require</A> a module
for you--you need to do that explicitly yourself.  See the DB_File and
Config modules for interesting <a href="#PERL2-CMD-TIE">tie</A>
implementations.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-TIED">tied</A></h3>

<div class=programlisting>
<p>
<pre>
tied <tt class=replaceable><i>VARIABLE</i></tt>
</PRE>
</DIV>

<p class=para>
This function returns a reference to the object underlying
<tt class=replaceable><i>VARIABLE</i></tt> (the same value that was originally returned
by the <a href="#PERL2-CMD-TIE">tie</A> call which bound the variable to
a package.)  It returns the undefined value if
<tt class=replaceable><i>VARIABLE</i></tt> isn't tied to a package.  So, for example,
you can use:

<div class=programlisting>
<p>
<pre>
ref tied %hash
</PRE>
</DIV>

<p class=para>
to find out which package your hash is currently tied to.  (Presuming
you've forgotten.)

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-TIME">time</A></h3>

<div class=programlisting>
<p>
<pre>
time
</PRE>
</DIV>

<p class=para>
This function returns the number of non-leap seconds since January 1, 1970,
UTC.[10] The
returned value is suitable for feeding to <a href="#PERL2-CMD-GMTIME">gmtime</A> and <a href="#PERL2-CMD-LOCALTIME">localtime</A>,
and for comparison with file modification and access times returned by <a href="#PERL2-CMD-STAT">stat</A>, and for feeding to <a href="#PERL2-CMD-UTIME">utime</A>--see the examples under <a href="#PERL2-CMD-UTIME">utime</A>.

<blockquote class=footnote>
<p class=para>[10] 
 Also known as the "epoch", not to be confused with the
"epic", which is about the making of UNIX.  (Other operating systems may have a
different epoch, not to mention a different epic.)  
</blockquote>
</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-TIMES">times</A></h3>

<div class=programlisting>
<p>
<pre>
times
</PRE>
</DIV>

<p class=para>
This function returns a four-element list giving the user and system
CPU times, in seconds (possibly fractional), for this process and the
children of this process.

<div class=programlisting>
<p>
<pre>
($user, $system, $cuser, $csystem) = times;
</PRE>
</DIV>

<p class=para>
For example, to time the execution speed of a section of Perl code:

<div class=programlisting>
<p>
<pre>
$start = (times)[0];
...
$end = (times)[0];
printf "that took %.2f CPU seconds\n", $end - $start;
</PRE>
</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-TR">tr///</A></h3>

<div class=programlisting>
<p>
<pre>
tr///
y///
</PRE>
</DIV>

<p class=para>
This is the translation operator, which is like the one in the UNIX
<i class=emphasis>sed</I> program, only better, in everybody's humble opinion.  See
<a href="ch02_01.htm">Chapter 2, <i>The Gory Details</i></A>.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-TRUNCATE">truncate</A></h3>

<div class=programlisting>
<p>
<pre>
truncate <tt class=replaceable><i>FILEHANDLE</i></tt>, <tt class=replaceable><i>LENGTH</i></tt>
truncate <tt class=replaceable><i>EXPR</i></tt>, <tt class=replaceable><i>LENGTH</i></tt>
</PRE>
</DIV>

<p class=para>
This function truncates the file opened on <tt class=replaceable><i>FILEHANDLE</i></tt>, or named by
<tt class=replaceable><i>EXPR</i></tt>, to the specified length.  The function produces a fatal error if
<i class=emphasis>truncate</I> (2) or an equivalent isn't implemented on your system.  (You
can always truncate a file by copying the front of it, if you have the
disk space.)

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-UC">uc</A></h3>

<div class=programlisting>
<p>
<pre>
uc <tt class=replaceable><i>EXPR</i></tt>
</PRE>
</DIV>

<p class=para>
This function returns an uppercased version of <tt class=replaceable><i>EXPR</i></tt> (or <b>$_</B> if
<tt class=replaceable><i>EXPR</i></tt>
is omitted).
This is the internal function implementing the <tt class=literal>\U</tt>
escape in double-quoted
strings.
POSIX <i class=emphasis>setlocale</I> (3) settings are respected.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-UCFIRST">ucfirst</A></h3>

<div class=programlisting>
<p>
<pre>
ucfirst <tt class=replaceable><i>EXPR</i></tt>
</PRE>
</DIV>

<p class=para>
This function returns a version of <tt class=replaceable><i>EXPR</i></tt> (or <b>$_</B> if <tt class=replaceable><i>EXPR</i></tt>
is omitted) with the first
character uppercased, that is, capitalized.
This is the internal function implementing the \u escape in double-quoted
strings.
POSIX <i class=emphasis>setlocale</I> (3) settings are respected.

<p class=para>
To force initial caps, and everything else lowercase, use:

<div class=programlisting>
<p>
<pre>
ucfirst lc $word
</PRE>
</DIV>

<p class=para>
which is equivalent to <tt class=literal>"\u\L$word"</tt>.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-UMASK">umask</A></h3>

<div class=programlisting>
<p>
<pre>
umask <tt class=replaceable><i>EXPR</i></tt>
umask
</PRE>
</DIV>

<p class=para>
This function sets the umask for the process and returns the old one.
(The umask tells UNIX which permission bits to disallow when
creating a file.)  If <tt class=replaceable><i>EXPR</i></tt> is omitted, the function merely returns
the current umask.  For example, to ensure that the "other" bits are
turned on, and the "user" bits are turned off, try something like:

<div class=programlisting>
<p>
<pre>
umask((umask() &amp; 077) | 7);
</PRE>
</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-UNDEF">undef</A></h3>

<div class=programlisting>
<p>
<pre>
undef <tt class=replaceable><i>EXPR</i></tt>
undef
</PRE>
</DIV>

<p class=para>
This function undefines the value of <tt class=replaceable><i>EXPR</i></tt>, which must
be an lvalue.  Use only on a scalar value, an entire array or hash, or a
subroutine name (using the <tt class=literal>&amp;</tt> prefix).  Any storage
associated with the object will be recovered for reuse (though not returned to
the system, for most versions of UNIX).  The <a href="#PERL2-CMD-UNDEF">undef</A> function will probably not do what you expect on most
special variables.

<p class=para>
The function always returns the undefined value.
This is useful because you can omit the <tt class=replaceable><i>EXPR</i></tt>, in which case
nothing gets undefined, but you still get an undefined value that you
could, for instance, return from a subroutine to indicate an error.
Here are some uses of <a href="#PERL2-CMD-UNDEF">undef</A> as a unary operator:

<div class=programlisting>
<p>
<pre>
undef $foo;
undef $bar{'blurfl'};
undef @ary;
undef %assoc;
undef &amp;mysub;
</PRE>
</DIV>

<p class=para>
Without an argument, <a href="#PERL2-CMD-UNDEF">undef</A> is just used for its value:

<div class=programlisting>
<p>
<pre>
return (wantarray ? () : undef) if $they_blew_it;
select(undef, undef, undef, $naptime);
</PRE>
</DIV>

<p class=para>
You may use <b>undef</B> as a placeholder on the
left side of a list assignment, in which case the corresponding value
from the right side is simply discarded.  Apart from that, you may not
use <b>undef</B> as an lvalue.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-UNLINK">unlink</A></h3>

<div class=programlisting>
<p>
<pre>
unlink <tt class=replaceable><i>LIST</i></tt>
</PRE>
</DIV>

<p class=para>
This function deletes a list of files.[11]
If <tt class=replaceable><i>LIST</i></tt> is omitted, it unlinks the file given in <b>$_</B>.
The function returns the number of files successfully deleted.
Some sample commands:

<blockquote class=footnote>
<p class=para>[11] 
Actually, under UNIX, it removes the directory entries that
refer to the real files.  Since a file may be referenced (linked) from
more than one directory, the file isn't actually removed until the
last reference to it is removed.
</blockquote>
<div class=programlisting>
<p>
<pre>
$cnt = unlink 'a', 'b', 'c';
unlink @goners;
unlink &lt;*.bak&gt;;
</PRE>
</DIV>

<p class=para>
Note that <a href="#PERL2-CMD-UNLINK">unlink</A> will not delete directories
unless you are superuser and the <b>-U</B> flag is
supplied to Perl.  Even if these conditions are met, be warned that unlinking a
directory can inflict Serious Damage on your filesystem.  Use <a href="#PERL2-CMD-RMDIR">rmdir</A> instead.

<p class=para>
Here's a very simple <i class=emphasis>rm</I> command with very simple error checking:

<div class=programlisting>
<p>
<pre>
#!/usr/bin/perl
@cannot = grep {not unlink} @ARGV;
die "$0: could not unlink @cannot\n" if @cannot;
</PRE>
</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-UNPACK">unpack</A></h3>

<div class=programlisting>
<p>
<pre>
unpack <tt class=replaceable><i>TEMPLATE</i></tt>, <tt class=replaceable><i>EXPR</i></tt>
</PRE>
</DIV>

<p class=para>
This function does the reverse of <a href="#PERL2-CMD-PACK">pack</A>: it
takes a string (<tt class=replaceable><i>EXPR</i></tt>) representing a data structure
and expands it out into a list value, returning the list value.  (In a scalar
context, it can be used to unpack a single value.)  The
<tt class=replaceable><i>TEMPLATE</i></tt> has much the same format as in the <a href="#PERL2-CMD-PACK">pack</A> function--it specifies the order and
type of the values to be unpacked.  (See <a href="#PERL2-CMD-PACK">pack</A> for a more detailed description of
<tt class=replaceable><i>TEMPLATE</i></tt>.)

<p class=para>
Here's a subroutine that does (some of) <a href="#PERL2-CMD-SUBSTR">substr</A>, only slower:

<div class=programlisting>
<p>
<pre>
sub substr {
    my($what, $where, $howmuch) = @_;
    if ($where &lt; 0) {
        $where = -$where;
        return unpack "\@* X$where a$howmuch", $what;
    }
    else {
        return unpack "x$where a$howmuch", $what;
    }
}
</PRE>
</DIV>

<p class=para>
and then there's:

<div class=programlisting>
<p>
<pre>
sub signed_ord { unpack "c", shift }
</PRE>
</DIV>

<p class=para>
Here's a complete
<i class=emphasis>uudecode</I>
program:

<div class=programlisting>
<p>
<pre>
#!/usr/bin/perl
$_ = &lt;&gt; until ($mode,$file) = /^begin\s*(\d*)\s*(\S*)/;
open(OUT,"&gt; $file") if $file ne "";
while (&lt;&gt;) {
    last if /^end/;
    next if /[a-z]/;
    next unless int((((ord() - 32) &amp; 077) + 2) / 3) ==
                int(length() / 4);
    print OUT unpack "u", $_;
}
chmod oct $mode, $file;
</PRE>
</DIV>

<p class=para>
In addition, you may prefix a field with 
<tt class=literal>%</tt><tt class=replaceable><i>number</i></tt> to
indicate that you want it to return a
<tt class=replaceable><i>number</i></tt>-bit 
checksum of the items
instead of the items themselves.
Default is a 16-bit checksum.  For example, the following computes the
same number as the System V <i class=emphasis>sum</I> program:

<div class=programlisting>
<p>
<pre>
undef $/;
$checksum = unpack ("%32C*", &lt;&gt;) % 32767;
</PRE>
</DIV>

<p class=para>
The following efficiently counts the number of set bits in a bit vector:

<div class=programlisting>
<p>
<pre>
$setbits = unpack "%32b*", $selectmask;
</PRE>
</DIV>

<p class=para>
Here's a simple MIME decoder:

<div class=programlisting>
<p>
<pre>
while (&lt;&gt;) {
  tr#A-Za-z0-9+/##cd;                   # remove non-base64 chars
  tr#A-Za-z0-9+/# -_#;                  # convert to uuencoded format
  $len = pack("c", 32 + 0.75*length);   # compute length byte
  print unpack("u", $len . $_);         # uudecode and print
}
</PRE>
</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-UNSHIFT">unshift</A></h3>

<div class=programlisting>
<p>
<pre>
unshift <tt class=replaceable><i>ARRAY</i></tt>, <tt class=replaceable><i>LIST</i></tt>
</PRE>
</DIV>

<p class=para>
This function does the opposite of a <a href="#PERL2-CMD-SHIFT">shift</A>.
(Or the opposite of a <a href="#PERL2-CMD-PUSH">push</A>, depending on how
you look at it.)  It prepends <tt class=replaceable><i>LIST</i></tt> to the front of
the array, and returns the new number of elements in the array:

<div class=programlisting>
<p>
<pre>
unshift @ARGV, '-e', $cmd unless $ARGV[0] =~ /^-/;
</PRE>
</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-UNTIE">untie</A></h3>

<div class=programlisting>
<p>
<pre>
untie <tt class=replaceable><i>VARIABLE</i></tt>
</PRE>
</DIV>

<p class=para>
Breaks the binding between a variable and a package.  See <a href="#PERL2-CMD-TIE">tie</A>.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-USE">use</A></h3>

<div class=programlisting>
<p>
<pre>
use <tt class=replaceable><i>Module</i></tt> <tt class=replaceable><i>LIST</i></tt>
use <tt class=replaceable><i>Module</i></tt>
</PRE>
</DIV>

<p class=para>
The <a href="#PERL2-CMD-USE">use</A> declaration imports some semantics into
the current package
from the named module, generally by aliasing certain subroutine or
variable names into your package.  It is exactly equivalent to the following:

<div class=programlisting>
<p>
<pre>
BEGIN { require <tt class=replaceable><i>Module</i></tt>; import <tt class=replaceable><i>Module</i></tt> <tt class=replaceable><i>LIST</i></tt>; }
</PRE>
</DIV>

<p class=para>
The <tt class=literal>BEGIN</tt> forces the <a href="#PERL2-CMD-REQUIRE">require</A> and <a href="#PERL2-CMD-IMPORT">import</A> to
happen at compile time.  The <a href="#PERL2-CMD-REQUIRE">require</A> makes
sure the module is loaded into memory if it hasn't been yet.  The <a href="#PERL2-CMD-IMPORT">import</A> is not a built-in--it's just an ordinary static
method call into the package named by <tt class=replaceable><i>Module</i></tt> to tell
the module to import the list of features back into the current package.  The
module can implement its import method any way it likes, though most modules
just choose to derive their import method via inheritance from the Exporter
class that is defined in the Exporter module.  See <a href="ch05_01.htm">Chapter 5, <i>Packages, Modules, and Object Classes</i></A>
for more information.

<p class=para>
If you don't want your namespace altered, explicitly supply an empty list:

<div class=programlisting>
<p>
<pre>
use Module ();
</PRE>
</DIV>

<p class=para>
That is exactly equivalent to the following:

<div class=programlisting>
<p>
<pre>
BEGIN { require Module; }
</PRE>
</DIV>

<p class=para>
Because this is a wide-open interface, pragmas (compiler directives)
are also implemented this way.  Currently implemented pragmas include:

<div class=programlisting>
<p>
<pre>
use integer;
use diagnostics;
use sigtrap qw(SEGV BUS);
use strict  qw(subs vars refs);
</PRE>
</DIV>

<p class=para>
These pseudomodules typically import semantics into the current block scope, unlike
ordinary modules, which import symbols into the current package.  (The
latter are
effective through the end of the file.)

<p class=para>
There's a corresponding declaration, <b>no</B>,
that "unimports" any meanings
originally imported by <a href="#PERL2-CMD-USE">use</A>, but that have since become, er, unimportant:

<div class=programlisting>
<p>
<pre>
no integer;
no strict 'refs';
</PRE>
</DIV>

<p class=para>
See <a href="ch07_01.htm">Chapter 7, <i>The Standard Perl Library</i></A> for a list of standard modules and pragmas.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-UTIME">utime</A></h3>

<div class=programlisting>
<p>
<pre>
utime <tt class=replaceable><i>LIST</i></tt>
</PRE>
</DIV>

<p class=para>
This function changes the access and modification times on each file
of a list of files.
The first two elements of the list must be the <i class=emphasis>numerical</I> access
and modification times, in that order. The function returns the
number of files successfully changed. The inode change time of
each file is set to the current time. Here's an example of a
<i class=emphasis>touch</I> command:

<div class=programlisting>
<p>
<pre>
#!/usr/bin/perl
$now = time;
utime $now, $now, @ARGV;
</PRE>
</DIV>

<p class=para>
and here's a more sophisticated
<i class=emphasis>touch</I>
command with a bit of error checking:

<div class=programlisting>
<p>
<pre>
#!/usr/bin/perl
$now = time;
@cannot = grep {not utime $now, $now, $_} @ARGV;
die "$0: Could not touch @cannot.\n" if @cannot;
</PRE>
</DIV>

<p class=para>
The standard <i class=emphasis>touch</I> command will actually create missing files, something
like this:

<div class=programlisting>
<p>
<pre>
$now = time;
foreach $file (@ARGV) {
    utime $now, $now, $file
        or open TMP, "&gt;&gt;$file"
        or warn "Couldn't touch $file: $!\n";
}
</PRE>
</DIV>

<p class=para>
To read the times from existing files, use <a href="#PERL2-CMD-STAT">stat</A>.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-VALUES">values</A></h3>

<div class=programlisting>
<p>
<pre>
values <tt class=replaceable><i>HASH</i></tt>
</PRE>
</DIV>

<p class=para>
This function returns a list consisting of all the values of
the named hash.
The values are returned in an apparently random order, but it is the
same order as either the <a href="#PERL2-CMD-KEYS">keys</A> or <a href="#PERL2-CMD-EACH">each</A> function
would produce on the same hash.
To sort the hash by its values, see the example under <a href="#PERL2-CMD-KEYS">keys</A>.
Note that using <a href="#PERL2-CMD-VALUES">values</A> on a hash that is
bound to a humongous DBM file is bound to produce a humongous list,
causing you to have a humongous process, leaving you in a bind.
You might prefer to use the <a href="#PERL2-CMD-EACH">each</A> function,
which will iterate over the hash entries one by one without slurping
them all into a single gargantuan (that is, humongous) list.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-VEC">vec</A></h3>

<div class=programlisting>
<p>
<pre>
vec <tt class=replaceable><i>EXPR</i></tt>, <tt class=replaceable><i>OFFSET</i></tt>, <tt class=replaceable><i>BITS</i></tt>
</PRE>
</DIV>

<p class=para>
This function treats a string (the value of <tt class=replaceable><i>EXPR</i></tt>) as a vector of
unsigned integers, and returns the value of the element specified by
<tt class=replaceable><i>OFFSET</i></tt> and <tt class=replaceable><i>BITS</i></tt>.
The function may also be assigned to, which causes the element to be
modified.
The purpose of the function is to provide very compact storage of lists of
small integers.  The integers may be very small--vectors can hold
numbers that are as small as one bit, resulting in a bitstring.

<p class=para>
The <tt class=replaceable><i>OFFSET</i></tt> specifies how many elements to skip over to find the one you
want.  <tt class=replaceable><i>BITS</i></tt> is the number of bits per element in the vector, so each
element can contain an unsigned integer in the range
<tt class=literal>0..(2**</tt><tt class=replaceable><i>BITS</i></tt>)<tt class=literal>-1</tt>.
<tt class=replaceable><i>BITS</i></tt> must be one of <tt class=literal>1</tt>, <tt class=literal>2</tt>, <tt class=literal>4</tt>, <tt class=literal>8</tt>,
<tt class=literal>16</tt>, or
<tt class=literal>32</tt>.  As many elements as possible are packed into each byte, and
the ordering is such that <tt class=literal>vec($vectorstring,0,1)</tt> is guaranteed
to go into the lowest bit of the first byte of the string.  To find
out the position of the byte in which an element is going to be put,
you have to multiply the <tt class=replaceable><i>OFFSET</i></tt> by the number of elements per
byte.  When <tt class=replaceable><i>BITS</i></tt> is 1, there are eight elements per byte.  When
<tt class=replaceable><i>BITS</i></tt> is 2,
there are four elements per byte.  When <tt class=replaceable><i>BITS</i></tt>
is 4, there are two elements (called nybbles)
per byte.  And so on.

<p class=para>
Regardless of whether your machine is big-endian or little-endian,
<tt class=literal>vec($foo, 0, 8)</tt> always refers to the first byte of string
<tt class=literal>$foo</tt>.  See <b>select</B> for
examples of bitmaps generated with <a href="#PERL2-CMD-VEC">vec</A>.

<p class=para>
Vectors created with <a href="#PERL2-CMD-VEC">vec</A> can also be
manipulated with the logical operators <tt class=literal>|</tt>,
<tt class=literal>&amp;</tt>, <tt class=literal>^</tt>, and <tt class=literal>~</tt>, which
will assume a bit vector operation is desired when the operands are strings.

<p class=para>
A bit vector (<tt class=replaceable><i>BITS == 1</i></tt>) can be translated to or from
a string of 1s and 0s by supplying a <tt class=literal>b*</tt> template to <a href="#PERL2-CMD-UNPACK">unpack</A> or <a href="#PERL2-CMD-PACK">pack</A>.  Similarly, a vector of nybbles (<tt class=replaceable><i>BITS ==
4</i></tt>) can be translated with an <tt class=literal>h*</tt> template.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-WAIT">wait</A></h3>

<div class=programlisting>
<p>
<pre>
wait
</PRE>
</DIV>

<p class=para>
This function waits for a child process to terminate and returns the
pid of the deceased process, or -1 if there are no child processes.
The status is returned in <b>$?</B>.
If you get zombie child processes, you should be calling this function,
or <a href="#PERL2-CMD-WAITPID">waitpid</A>.  A common strategy to avoid such zombies is:

<div class=programlisting>
<p>
<pre>
$SIG{CHLD} = sub { wait };
</PRE>
</DIV>

<p class=para>
If you expected a child and didn't find it, you probably had a call to <a href="#PERL2-CMD-SYSTEM">system</A>, a close on a pipe, or backticks between
the <a href="#PERL2-CMD-FORK">fork</A> and the <a href="#PERL2-CMD-WAIT">wait</A>.  These constructs also do a
<i class=emphasis>wait</I> (2) and may have harvested your child process.
Use <a href="#PERL2-CMD-WAITPID">waitpid</A> to avoid this problem.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-WAITPID">waitpid</A></h3>

<div class=programlisting>
<p>
<pre>
waitpid <tt class=replaceable><i>PID</i></tt>, <tt class=replaceable><i>FLAGS</i></tt>
</PRE>
</DIV>

<p class=para>
This function waits for a particular child process to terminate and
returns the pid when the process is dead, or -1 if there are no child
processes, or if the <tt class=replaceable><i>FLAGS</i></tt> specify non-blocking and the process isn't
dead yet.  The status of the dead process is returned in <b>$?</B>.
To get valid flag values say this:

<div class=programlisting>
<p>
<pre>
use POSIX "sys_wait_h";
</PRE>
</DIV>

<p class=para>
On systems that implement neither the <i class=emphasis>waitpid</I> (2) nor
<i class=emphasis>wait4</I> (2) system call, <tt class=replaceable><i>FLAGS</i></tt> may be specified only as 0.  In
other words, you can wait for a specific <tt class=replaceable><i>PID</i></tt>, but you can't do it in
non-blocking mode.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-WANTARRAY">wantarray</A></h3>

<div class=programlisting>
<p>
<pre>
wantarray
</PRE>
</DIV>

<p class=para>
This function returns true if the context of the currently executing subroutine
is looking for a list value.
The function returns false if the context is looking for a scalar.
Here's a typical usage, demonstrating an "unsuccessful" return:

<div class=programlisting>
<p>
<pre>
return wantarray ? () : undef;
</PRE>
</DIV>

<p class=para>
See also <a href="#PERL2-CMD-CALLER">caller</A>.  This function should
really have been named "wantlist", but we named it back when list contexts were
still called array contexts.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-WARN">warn</A></h3>

<div class=programlisting>
<p>
<pre>
warn <tt class=replaceable><i>LIST</i></tt>
</PRE>
</DIV>

<p class=para>
This function produces a message on <tt class=literal>STDERR</tt> just like <a href="#PERL2-CMD-DIE">die</A>, but doesn't try to exit or throw an
exception.  For example:

<div class=programlisting>
<p>
<pre>
warn "Debug enabled" if $debug;
</PRE>
</DIV>

<p class=para>
If the message supplied is null, the message "Something's wrong" is used.  As
with <b>die</B>, a message not ending with a newline
will have file and line number information automatically appended.
The <a href="#PERL2-CMD-WARN">warn</A> operator is unrelated to the
<b>-w</B> switch.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-WRITE">write</A></h3>

<div class=programlisting>
<p>
<pre>
write <tt class=replaceable><i>FILEHANDLE</i></tt>
write
</PRE>
</DIV>

<p class=para>
This function writes a formatted record (possibly multi-line) to the
specified filehandle, using the format associated with that filehandle--see the
section "Formats" in <a href="ch02_01.htm">Chapter 2, <i>The Gory Details</i></A>.  By default the format for a filehandle is
the one having the same name as the filehandle.  However, the format for
a filehandle may be changed by saying:

<div class=programlisting>
<p>
<pre>
use FileHandle;
HANDLE-&gt;format_name("NEWNAME");
</PRE>
</DIV>

<p class=para>
Top-of-form processing is handled automatically: if there is insufficient room
on the current page for the formatted record, the page is advanced by writing a
form feed, a special top-of-page format is used to format the new page header,
and then the record is written.  The number of lines remaining on the current
page is in variable <b>$-</B>, which can be set to 0 to
force a new page on the next <a href="#PERL2-CMD-WRITE">write</A>.  (You
may need to <b>select</B> the filehandle first.)
By default the name of the top-of-page format is the name of the filehandle with
"<tt class=literal>_TOP</tt>" appended, but the format for a filehandle
may be changed by saying:

<div class=programlisting>
<p>
<pre>
use FileHandle;
HANDLE-&gt;format_top_name("NEWNAME_TOP");
</PRE>
</DIV>

<p class=para>
If <tt class=replaceable><i>FILEHANDLE</i></tt> is unspecified, output goes to the
current default output filehandle, which starts out as <tt class=literal>STDOUT</tt>
but may be changed by the <b>select</B> operator.
If the <tt class=replaceable><i>FILEHANDLE</i></tt> is an expression, then the
expression is evaluated to determine the actual
<tt class=replaceable><i>FILEHANDLE</i></tt> at run-time.

<p class=para>
Note that <a href="#PERL2-CMD-WRITE">write</A> is <i class=emphasis>not</I>
the opposite of <a href="#PERL2-CMD-READ">read</A>.  Use <a href="#PERL2-CMD-PRINT">print</A> for simple string output.  If you looked up this
entry because you wanted to bypass standard I/O, see <a href="#PERL2-CMD-SYSWRITE">syswrite</A>.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CMD-YSSS">y///</A></h3>

<div class=programlisting>
<p>
<pre>
y///
</PRE>
</DIV>

<p class=para>
The translation operator, also known as <tt class=literal>tr///</tt>.
See <a href="ch02_01.htm">Chapter 2, <i>The Gory Details</i></A>.

</DIV>

</DIV>


<div class=htmlnav>
<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch03_01.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src="gifs/txthome.gif" alt="Home" border=0></a></td>
<td width=172 align=right valign=top><a href="ch04_01.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Perl Functions by Category</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td>
<td width=172 align=right valign=top>References and Nested Data Structures</td>
</tr>
</table>

<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
</DIV>
</BODY>
</HTML>
