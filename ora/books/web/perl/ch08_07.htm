<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 8] 8.7 History Made Practical</TITLE>
<meta name="author" content="Larry Wall, Tom Christiansen, and Randal Schwartz">
<meta name="date" content="Mon Mar 17 13:20:35 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="Perl">
<meta name="title" content="Programming Perl, Second Edition">
<!-- JavaScript: pathcont.js -->

</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><img src="gifs/smbanner.gif" alt="Programming Perl, Second Edition"></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch08_06.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b>Chapter 8</b></td>
<td width=172 align=right valign=top><a href="ch09_01.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>
<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="PERL2-CH-8-SECT-7">8.7 History Made Practical</A></h2>

<p class=para>
In order to understand why Perl is defined the way it is (or isn't), one
must first understand why Perl even exists.  So, let's drag out the old dusty
history book.  ...

<p class=para>
Way back in 1986, Larry was a systems programmer on a project that was
developing multi-level-secure wide-area networks.  He was in charge of
an installation consisting of three Vaxen and three Suns on the West
Coast, connected over an encrypted, 1200-baud serial line to a similar
configuration on the East Coast.  Since Larry's primary job was support
(he wasn't a programmer on the project, just the system guru), he was
able to exploit his three virtues (laziness, impatience, and hubris) to
develop and enhance all sorts of useful tools--such as <i class=emphasis>rn</I>,
<i class=emphasis>patch</I>, and <i class=emphasis>warp</I>.
[5]

<blockquote class=footnote>
<p class=para>[5] 
It was about this time that Larry latched onto the phrase "feeping
creaturism" in a desperate attempt to justify on the basis of biological
necessity his overwhelming urge to add "just one more feature".  After
all, if Life Is Simply Too Complicated, why not programs too?
Especially programs like <i class=emphasis>rn</I> that really ought to be treated as
advanced Artificial Intelligence projects so that they can read your
news for you.  Of course, some people say that the <i class=emphasis>patch</I> program
is already <i class=emphasis>too</I> smart.
</blockquote>
<p class=para>
One day, after Larry had just finished ripping <i class=emphasis>rn</I> to shreds,
leaving it in pieces on the floor of his directory, the great Manager
came to him and said, "Larry, we need a configuration management and
control system for all six Vaxen and all six Suns.  We need it in a month.
Go to it!"

<p class=para>
So, Larry, never being one to shirk work, asked himself what was the
best way to have a bi-coastal CM system, without writing it from
scratch, that would allow viewing of problem reports on both coasts,
with approvals and control.  The answer came to him in one word:
B-news.

<p class=para>
Larry went off and installed news on these machines, and added two
control commands: an "append" command to append to an existing article,
and a "synchronize" command to keep the article numbers the same on both
coasts.  CM would be done using RCS, and approvals and submissions would
be done using news and <i class=emphasis>rn</I>.  Fine so far.

<p class=para>
Then the great Manager asked him to produce reports.  News was
maintained in separate files on a master machine, with lots of cross
references between files.  Larry's first thought was "Let's use
<i class=emphasis>awk</I>."  Unfortunately, the <i class=emphasis>awk</I> of that day couldn't handle
opening and closing of multiple files based on information in the files.
Larry didn't want to have to code a special-purpose tool.  As a result,
a new language was born.

<p class=para>
This new tool wasn't originally called Perl.  Larry bandied about a number of names
with his officemates and cohorts (Dan Faigin, who wrote this history,
and Mark Biggar, his brother-in-law, who also helped greatly with the
initial design).  Larry actually considered and rejected every three or four
letter word in the dictionary.  One of the earliest names was "Gloria",
after his sweetheart (and wife).

<p class=para>
He soon decided that this would cause too much domestic confusion.  The
name then became "Pearl", which mutated into our present-day "Perl",
partly because Larry saw a reference to a graphics language called
"pearl", but mostly because he's too lazy to type five letters all the
time.  And, of course, so that Perl could be used as a four letter word.
(You'll note, however, the vestiges of the former spelling in the
acronym's gloss: "Practical Extraction <i class=emphasis>And</I> Report Language".)

<p class=para>
This early Perl lacked many of the features of today's Perl.  Pattern
matching and filehandles were there, scalars were there, and formats
were there, but there were very few functions, no associative arrays,
and only a crippled implementation of regular expressions, borrowed from
<i class=emphasis>rn</I>.  The manpage was only 15 pages long.  But Perl was faster
than <i class=emphasis>sed</I> and <i class=emphasis>awk</I>, and began to be used on other applications
on the project.

<p class=para>
But Larry was needed elsewhere.  Another great Manager came over one day
and said "Larry, support R&amp;D."  And Larry said, OK.  He took Perl with
him and discovered that it was turning into a good tool for system
administration.  He borrowed Henry Spencer's beautiful regular
expression package and butchered it into something Henry would prefer
not to think about during dinner.  Then Larry added most of the goodies
he wanted, and a few goodies other people wanted.  He released it on the
network.[6]
The rest, as they say, is history.[7]

<blockquote class=footnote>
<p class=para>[6] 
More astonishingly, he kept on releasing it as he went to work at
Jet Propulsion Lab, then at NetLabs, Seagate, and now O'Reilly &amp; Associates (a small
company that publishes pamphlets about computers and stuff).

<p class=para>[7] 
And this, so to speak, is a footnote to history.  When Perl was started,
<i class=emphasis>rn</I> had just been ripped to pieces in anticipation of a major
rewrite.  Since he started work on Perl, Larry hasn't touched <i class=emphasis>rn</I>.
It is still in pieces.  Occasionally Larry threatens to rewrite <i class=emphasis>rn</I> in
Perl.
</blockquote>
</DIV>


<div class=htmlnav>
<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch08_06.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src="gifs/txthome.gif" alt="Home" border=0></a></td>
<td width=172 align=right valign=top><a href="ch09_01.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Perl Poetry</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td>
<td width=172 align=right valign=top>Diagnostic Messages</td>
</tr>
</table>

<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
</DIV>
</BODY>
</HTML>
