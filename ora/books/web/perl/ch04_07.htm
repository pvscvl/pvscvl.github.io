<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 4] 4.7 Data Structure Code Examples</TITLE>
<meta name="author" content="Larry Wall, Tom Christiansen, and Randal Schwartz">
<meta name="date" content="Mon Mar 17 13:09:11 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="Perl">
<meta name="title" content="Programming Perl, Second Edition">
<!-- JavaScript: pathcont.js -->

</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><img src="gifs/smbanner.gif" alt="Programming Perl, Second Edition"></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch04_06.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b>Chapter 4</b></td>
<td width=172 align=right valign=top><a href="ch05_01.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>
<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="PERL2-CH-4-SECT-7">4.7 Data Structure Code Examples</A></h2>

<p class=para>
<a name="CH04.NEST2"></A><a name="CH04.NEST1"></A>Once you've mastered creating and using multi-dimensional arrays (lists of lists),
you'll want to be able to make more complex data structures.  If you're
looking for C structures or Pascal records, you won't find any special 
reserved words in Perl to set these up for you.  What you get instead
is a more flexible system.[8]
Perl has just two ways of organizing data:
either as ordered lists stored in arrays and accessed by position,
or as unordered key/value pairs stored in hashes and accessed by name.

<blockquote class=footnote>
<p class=para>[8] 
If your idea of a record structure
is less flexible than this, or if you'd like to provide your users with 
something more opaque and rigid, then you can use the object-oriented
features detailed in <a href="ch05_01.htm">Chapter 5, <i>Packages, Modules, and Object Classes</i></A>.
</blockquote>
<p class=para>
The best way to represent a record in Perl is using a hash reference, but how you
choose to organize such records will vary.  You may wish to keep an ordered list of
these records around that you can look up by number, in which case you'd
use an array to store the records (hash references).  But you might wish to look up
the records by name, in which case you'd store them in another hash.
You could even do both at once: the array and the hash could each hold
references to the same records, which are after all just anonymous hash
thingies, and each one
can have as many references to it as you want, within reason.[9]

<blockquote class=footnote>
<p class=para>[9] 
Where reason is defined as 2**32 references, minus one.  That's probably
sufficient for most folks.
</blockquote>
<p class=para>
In the following sections you will find code examples detailing how to compose,
generate, access, and print out each of five data structures.  The
first four examples are straightforward homogeneous combinations of arrays and hashes, while
the last one demonstrates how to use a less regular data structure.  These examples,
presented with little comment, assume that you have already familiarized
yourself with the earlier explanations set forth in this chapter.

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CH-4-SECT-7.1">Arrays of Arrays</A></h3>

<p class=para>
Use an array of arrays when you want a basic two-dimensional matrix. 
One application might include making a list of all the hosts on your network, 
but each of these hosts would have several possible aliases.  Another 
might be a list of daily menus, each of which would itself be a list of foods 
served in it.  For our example, we'll keep several lists of 
famous television characters, all stored together in one large list of lists.

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-4-SECT-7.1.1">Composition of an array of arrays</A></h4>

<div class=programlisting>
<p>
<pre>
@LoL = (
    [ "fred", "barney" ],
    [ "george", "jane", "elroy" ],
    [ "homer", "marge", "bart" ],
);
</PRE>
</DIV>

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-4-SECT-7.1.2">Generation of an array of arrays</A></h4>

<div class=programlisting>
<p>
<pre>
# reading from a file
while ( &lt;&gt; ) {
    push @LoL, [ split ];
}
# calling a function
for $i ( 1 .. 10 ) {
    $LoL[$i] = [ somefunc($i) ];
}
# using temp vars
for $i ( 1 .. 10 ) {
    @tmp = somefunc($i);
    $LoL[$i] = [ @tmp ];
}
# add to an existing row
push @{ $LoL[0] }, "wilma", "betty";
</PRE>
</DIV>

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-4-SECT-7.1.3">Access and printing of an array of arrays</A></h4>

<div class=programlisting>
<p>
<pre>
# one element
$LoL[0][0] = "Fred";
# another element
$LoL[1][1] =~ s/(\w)/\u$1/;
# print the whole thing with refs
for $array_ref ( @LoL ) {
    print "\t [ @$array_ref ],\n";
}
# print the whole thing with indices
for $i ( 0 .. $#LoL ) {
    print "\t [ @{$LoL[$i]} ],\n";
}
# print the whole thing one at a time
for $i ( 0 .. $#LoL ) {
    for $j ( 0 .. $#{$LoL[$i]} ) {
        print "element $i $j is $LoL[$i][$j]\n";
    }
}
</PRE>
</DIV>

</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CH-4-SECT-7.2">Hashes of Arrays</A></h3>

<p class=para>
Use a hash of arrays when you want to look up each array by 
a particular string rather than merely by an index number.  In our 
example of television characters, rather than merely looking up the
list of names by the zeroth show, the first show, and so on, 
we'll set it up so we can look up the cast list according to 
the name of the show.

<p class=para>
Because our outer data structure is a hash, we've lost all ordering of its
contents.  That means when you print it out, you can't predict the order
things will come out.  You can call the <a href="ch03_02.htm">sort</A> function and
print its result if you'd like a particular output order.

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-4-SECT-7.2.1">Composition of a hash of arrays</A></h4>

<div class=programlisting>
<p>
<pre>
# we customarily omit quotes when keys are identifiers
%HoL = (
    flintstones    =&gt; [ "fred", "barney" ],
    jetsons        =&gt; [ "george", "jane", "elroy" ],
    simpsons       =&gt; [ "homer", "marge", "bart" ],
);
</PRE>
</DIV>

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-4-SECT-7.2.2">Generation of a hash of arrays</A></h4>

<div class=programlisting>
<p>
<pre>
# reading from file with the following format:
# flintstones: fred barney wilma dino
while ( &lt;&gt; ) {
    next unless s/^(.*?):\s*//;
    $HoL{$1} = [ split ];
}
# reading from file; more temporary variables
# flintstones: fred barney wilma dino
while ( $line = &lt;&gt; ) {
    ($who, $rest) = split /:\s*/, $line, 2;
    @fields = split ' ', $rest;
    $HoL{$who} = [ @fields ];
}
# calling a function that returns an array
for $group ( "simpsons", "jetsons", "flintstones" ) {
    $HoL{$group} = [ get_family($group) ];
}
# likewise, but using temporary variables
for $group ( "simpsons", "jetsons", "flintstones" ) {
    @members = get_family($group);
    $HoL{$group} = [ @members ];
}
# append new members to an existing family
push @{ $HoL{flintstones} }, "wilma", "betty";
</PRE>
</DIV>

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-4-SECT-7.2.3">Access and printing of a hash of arrays</A></h4>

<div class=programlisting>
<p>
<pre>
# one element
$HoL{flintstones}[0] = "Fred";
# another element
$HoL{simpsons}[1] =~ s/(\w)/\u$1/;
# print the whole thing
foreach $family ( keys %HoL ) {
    print "$family: @{ $HoL{$family} }\n";
}
# print the whole thing with indices
foreach $family ( keys %HoL ) {
    print "$family: ";
    foreach $i ( 0 .. $#{ $HoL{$family} } ) {
        print " $i = $HoL{$family}[$i]";
    }
}
print "\n";
# print the whole thing sorted by number of members
foreach $family ( sort { @{$HoL{$b}} &lt;=&gt; @{$HoL{$a}} } keys %HoL ) {
    print "$family: @{ $HoL{$family} }\n"
}
# print the whole thing sorted by number of members and name
foreach $family ( sort { @{$HoL{$b}} &lt;=&gt; @{$HoL{$a}} } keys %HoL ) {
    print "$family: ", join(", ", sort @{ $HoL{$family} }), "\n";
}
</PRE>
</DIV>

</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CH-4-SECT-7.3">Arrays of Hashes</A></h3>

<p class=para>
An array of hashes is called for when you have a bunch of records
that you'd like to access sequentially, but each record itself contains
key/value pairs.  These arrays tend to be used less frequently than the
other homogeneous data structures.

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-4-SECT-7.3.1">Composition of an array of hashes</A></h4>

<div class=programlisting>
<p>
<pre>
@LoH = (
    {
       lead     =&gt; "fred",
       friend   =&gt; "barney",
    },
    {
       lead    =&gt; "george",
       wife    =&gt; "jane",
       son     =&gt; "elroy",
    },
    {
       lead    =&gt; "homer",
       wife    =&gt; "marge",
       son     =&gt; "bart",
    },
  );
</PRE>
</DIV>

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-4-SECT-7.3.2">Generation of an array of hashes</A></h4>

<div class=programlisting>
<p>
<pre>
# reading from file
# format: lead=fred friend=barney
while ( &lt;&gt; ) {
    $rec = {};
    for $field ( split ) {
        ($key, $value) = split /=/, $field;
        $rec-&gt;{$key} = $value;
    }
    push @LoH, $rec;
}
# reading from file
# format: lead=fred friend=barney
# no temp
while ( &lt;&gt; ) {
    push @LoH, { split /[\s=]+/ };
}
# calling a function that returns a key,value array, like
# "lead","fred","daughter","pebbles"
while ( %fields = getnextpairset() ) {
    push @LoH, { %fields };
}
# likewise, but using no temp vars
while (&lt;&gt;) {
    push @LoH, { parsepairs($_) };
}
# add key/value to an element
$LoH[0]{pet} = "dino";
$LoH[2]{pet} = "santa's little helper";
</PRE>
</DIV>

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-4-SECT-7.3.3">Access and printing of an array of hashes</A></h4>

<div class=programlisting>
<p>
<pre>
# one element
$LoH[0]{lead} = "fred";
# another element
$LoH[1]{lead} =~ s/(\w)/\u$1/;
# print the whole thing with refs
for $href ( @LoH ) {
    print "{ ";
    for $role ( keys %$href ) {
         print "$role=$href-&gt;{$role} ";
    }
    print "}\n";
}
# print the whole thing with indices
for $i ( 0 .. $#LoH ) {
    print "$i is { ";
    for $role ( keys %{ $LoH[$i] } ) {
         print "$role=$LoH[$i]{$role} ";
    }
    print "}\n";
}
# print the whole thing one at a time
for $i ( 0 .. $#LoH ) {
    for $role ( keys %{ $LoH[$i] } ) {
         print "element $i $role is $LoH[$i]{$role}\n";
    }
}
</PRE>
</DIV>

</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CH-4-SECT-7.4">Hashes of Hashes</A></h3>

<p class=para>
A multi-dimensional hash is the most flexible of Perl's 
homogeneous structures.  It's like building up a record 
that itself contains other records.  At each level you index
into the hash with a string (quoted if it contains spaces).  Remember,
however, that the key/value pairs in the hash won't come out in any
particular order.  You must do your own sorting if the order matters.

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-4-SECT-7.4.1">Composition of a hash of hashes</A></h4>

<div class=programlisting>
<p>
<pre>
%HoH = (
    flintstones =&gt; {
        lead      =&gt; "fred",
        pal       =&gt; "barney",
    },
    jetsons =&gt; {
        lead      =&gt; "george",
        wife      =&gt; "jane",
        "his boy" =&gt; "elroy",  # key quotes needed
    },
    simpsons =&gt; {
        lead      =&gt; "homer",
        wife      =&gt; "marge",
        kid       =&gt; "bart",
    },
);
</PRE>
</DIV>

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-4-SECT-7.4.2">Generation of a hash of hashes</A></h4>

<div class=programlisting>
<p>
<pre>
# reading from file
# flintstones: lead=fred pal=barney wife=wilma pet=dino
while ( &lt;&gt; ) {
    next unless s/^(.*?):\s*//;
    $who = $1;
    for $field ( split ) {
        ($key, $value) = split /=/, $field;
        $HoH{$who}{$key} = $value;
    }
}
# reading from file; more temporary variables
while ( &lt;&gt; ) {
    next unless s/^(.*?):\s*//;
    $who = $1;
    $rec = {};
    $HoH{$who} = $rec;
    for $field ( split ) {
        ($key, $value) = split /=/, $field;
        $rec-&gt;{$key} = $value;
    }
}
# calling a function that returns a key,value for the inner hash
for $group ( "simpsons", "jetsons", "flintstones" ) {
    $HoH{$group} = { get_family($group) };
}
# likewise, but using temporary variables
for $group ( "simpsons", "jetsons", "flintstones" ) {
    %members = get_family($group);
    $HoH{$group} = { %members };
}
# calling a function that returns the outer hash, including
# references to the created inner hashes
sub hash_families {
    my @ret;
    foreach $group ( @_ ) {
        push @ret, $group, { get_family($group) };
    }
    @ret;
}
%HoH = hash_families( "simpsons", "jetsons", "flintstones" );
# append new members to an existing family
%new_folks = (
    wife =&gt; "wilma",
    pet  =&gt; "dino";
);
for $what (keys %new_folks) {
    $HoH{flintstones}{$what} = $new_folks{$what};
}
</PRE>
</DIV>

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-4-SECT-7.4.3">Access and printing of a hash of hashes</A></h4>

<div class=programlisting>
<p>
<pre>
# one element
$HoH{flintstones}{wife} = "wilma";
# another element
$HoH{jetsons}{'his boy'} =~ s/(\w)/\u$1/;
# print the whole thing
foreach $family ( keys %HoH ) {
    print "$family: ";
    foreach $role ( keys %{ $HoH{$family} } ) {
         print "$role=$HoH{$family}{$role} ";
    }
    print "\n";
}
# print the whole thing, using temporaries
while ( ($family,$roles) = each %HoH ) {
    print "$family: ";
    while ( ($role,$person) = each %$roles ) {  # using each precludes sorting
        print "$role=$person ";
    }
    print "\n";
}
# print the whole thing somewhat sorted
foreach $family ( sort keys %HoH ) {
    print "$family: ";
    foreach $role ( sort keys %{ $HoH{$family} } ) {
         print "$role=$HoH{$family}{$role} ";
    }
    print "\n";
}
# print the whole thing sorted by number of members
foreach $family ( sort { keys %{$HoH{$a}} &lt;=&gt; keys %{$HoH{$b}} } keys %HoH ) {
    print "$family: ";
    foreach $role ( sort keys %{ $HoH{$family} } ) {
         print "$role=$HoH{$family}{$role} ";
    }
    print "\n";
}
# establish a sort order (rank) for each role
$i = 0;
for ( qw(lead wife son daughter pal pet) ) { $rank{$_} = ++$i }
# now print the whole thing sorted by number of members
foreach $family ( sort { keys %{$HoH{$a}} &lt;=&gt; keys %{$HoH{$b}} } keys %HoH ) {
    print "$family: ";
    # and print these according to rank order
    foreach $role ( sort { $rank{$a} &lt;=&gt; $rank{$b} } keys %{ $HoH{$family} } ) {
        print "$role=$HoH{$family}{$role} ";
    }
    print "\n";
}
</PRE>
</DIV>

</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CH-4-SECT-7.5">More Elaborate Records</A></h3>

<p class=para>
<a name="CH04.REC"></A>Those were simple, two-level, homogeneous data structures: each
element contains the same kind of thingy as all the other elements do.
It certainly doesn't have to be that way.  Any element can hold any
kind of scalar, which means that it could be a string, a number, or a
reference to anything at all, including more exotic things than just
array or hash references, such as references to named or anonymous
functions or opaque objects.  The only thing you
can't do is to put more than one kind of thingy
into a given scalar simultaneously.  If you find yourself trying to do
that, it's a signal that you need to establish an array or hash at the
next lower level to handle the different types of thingy you're trying
to overlay.

<p class=para>
Below you will find code examples designed to illustrate
all the possible kinds of things you might want to keep in 
a record.  For our base structure, we'll use a hash reference.
The keys are uppercase strings, a convention sometimes employed 
when the hash is being used as a specific record type rather than 
as a more generic associative array.

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-4-SECT-7.5.1">Composition of more elaborate records</A></h4>

<p class=para>
This shows how to create and use a record whose fields are of
many sorts:

<div class=programlisting>
<p>
<pre>
$rec = {
    TEXT      =&gt; $string,
    SEQUENCE  =&gt; [ @old_values ],
    LOOKUP    =&gt; { %some_table },
    THATCODE  =&gt; \&amp;some_function,
    THISCODE  =&gt; sub { $_[0] ** $_[1] },
    HANDLE    =&gt; \*STDOUT,
};
print $rec-&gt;{TEXT};
print $rec-&gt;{SEQUENCE}[0];
$last = pop @{ $rec-&gt;{SEQUENCE} };
print $rec-&gt;{LOOKUP}{"key"};
($first_k, $first_v) = each %{ $rec-&gt;{LOOKUP} };
# no difference calling named or anonymous subs
$answer = &amp;{ $rec-&gt;{THATCODE} }($arg);
$answer = &amp;{ $rec-&gt;{THISCODE} }($arg1, $arg2);
# must have extra braces on indirect object slot
print { $rec-&gt;{HANDLE} } "a string\n";
use FileHandle;
$rec-&gt;{HANDLE}-&gt;autoflush(1);
$rec-&gt;{HANDLE}-&gt;print("a string\n");
</PRE>
</DIV>

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-4-SECT-7.5.2">Composition of more elaborate records</A></h4>

<div class=programlisting>
<p>
<pre>
%TV = (
    flintstones =&gt; {
        series   =&gt; "flintstones",
        nights   =&gt; [ qw(monday thursday friday) ],
        members  =&gt; [
            { name =&gt; "fred",    role =&gt; "lead", age  =&gt; 36, },
            { name =&gt; "wilma",   role =&gt; "wife", age  =&gt; 31, },
            { name =&gt; "pebbles", role =&gt; "kid",  age  =&gt;  4, },
        ],
    },
    jetsons     =&gt; {
        series   =&gt; "jetsons",
        nights   =&gt; [ qw(wednesday saturday) ],
        members  =&gt; [
            { name =&gt; "george",  role =&gt; "lead", age  =&gt; 41, },
            { name =&gt; "jane",    role =&gt; "wife", age  =&gt; 39, },
            { name =&gt; "elroy",   role =&gt; "kid",  age  =&gt;  9, },
        ],
     },
    simpsons    =&gt; {
        series   =&gt; "simpsons",
        nights   =&gt; [ qw(monday) ],
        members  =&gt; [
            { name =&gt; "homer", role =&gt; "lead", age =&gt; 34, },
            { name =&gt; "marge", role =&gt; "wife", age =&gt; 37, },
            { name =&gt; "bart",  role =&gt; "kid",  age =&gt; 11, },
        ],
     },
  );
</PRE>
</DIV>

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="PERL2-CH-4-SECT-7.5.3">Generation of a hash of complex records</A></h4>

<p class=para>
Because Perl is quite good at parsing complex data structures, you
might just put your data declarations in a separate file as regular
Perl code and then load them in with <a href="ch03_02.htm">do</A>
or <a href="ch03_02.htm">require</A>.  See <a href="ch03_01.htm">Chapter 3, <i>Functions</i></A>, for details on those functions.

<div class=programlisting>
<p>
<pre>
# here's a piece by piece build up
$rec = {};
$rec-&gt;{series} = "flintstones";
$rec-&gt;{nights} = [ find_days() ];
@members = ();
# assume this file is in field=value syntax
while (&lt;&gt;) {
     %fields = split /[\s=]+/;
     push @members, { %fields };
}
$rec-&gt;{members} = [ @members ];
# now remember the whole thing
$TV{ $rec-&gt;{series} } = $rec;
</PRE>
</DIV>

<p class=para>
You can use extra pointer fields to avoid duplicate data.  For example,
you might want a <tt class=literal>"kids"</tt> field included in a person's record.
This could be a reference
to a list consisting of references to the kids' own records.
That way you avoid the update problems that result from having the
same data in two places.

<div class=programlisting>
<p>
<pre>
foreach $family (keys %TV) {
    my $rec = $TV{$family}; # temp pointer
    @kids = ();
    for $person ( @{$rec-&gt;{members}} ) {
        if ($person-&gt;{role} =~ /kid|son|daughter/) {
            push @kids, $person;
        }
    }
    # REMEMBER: $rec and $TV{$family} point to same data!!
    $rec-&gt;{kids} = [ @kids ];
}
# you copied the array, but the array itself contains pointers to
# uncopied objects. this means that if you make bart get older via
$TV{simpsons}{kids}[0]{age}++;
# then this would also change here
print $TV{simpsons}{members}[2]{age};
# because $TV{simpsons}{kids}[0] and $TV{simpsons}{members}[2]
# both point to the same underlying anonymous hash table
# print the whole thing
foreach $family ( keys %TV ) {
    print "the $family";
    print " is on during @{ $TV{$family}{nights} }\n";
    print "its members are:\n";
    for $who ( @{ $TV{$family}{members} } ) {
        print " $who-&gt;{name} ($who-&gt;{role}), age $who-&gt;{age}\n";
    }
    print "it turns out that $TV{$family}{'lead'} has ";
    print scalar ( @{ $TV{$family}{kids} } ), " kids named ";
    print join (", ", map { $_-&gt;{name} } @{ $TV{$family}{kids} } );
    print "\n";
}
</PRE>
</DIV>

</DIV>

</DIV>

</DIV>


<div class=htmlnav>
<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch04_06.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src="gifs/txthome.gif" alt="Home" border=0></a></td>
<td width=172 align=right valign=top><a href="ch05_01.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>A Brief Tutorial: Manipulating Lists of Lists</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td>
<td width=172 align=right valign=top>Packages, Modules, and Object Classes</td>
</tr>
</table>

<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
</DIV>
</BODY>
</HTML>
