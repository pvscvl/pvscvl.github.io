<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 8] Other Oddments</TITLE>
<meta name="author" content="Larry Wall, Tom Christiansen, and Randal Schwartz">
<meta name="date" content="Mon Mar 17 13:19:32 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="Perl">
<meta name="title" content="Programming Perl, Second Edition">
<!-- JavaScript: pathcont.js -->

</HEAD>
<body bgcolor="#FFFFFF" text="#000000">

<div class=htmlnav>
<h1><img src="gifs/smbanner.gif" alt="Programming Perl, Second Edition"></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch07_02.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b>Chapter 8</b></td>
<td width=172 align=right valign=top><a href="ch08_02.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>
<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
<hr align=left width=515>
</DIV>
<h1 class=chapter><a class="TITLE" name="PERL2-CH-8">Other Oddments</A></H1>

<div class=htmltoc>

<p>
<b>Contents:</b><br>
The Perl Debugger<br>
<a href="ch08_02.htm">Common Goofs for Novices</A><br>
<a href="ch08_03.htm">Efficiency</A><br>
<a href="ch08_04.htm">Programming with Style</A><br>
<a href="ch08_05.htm">Distribution and Installation</A><br>
<a href="ch08_06.htm">Perl Poetry</A><br>
<a href="ch08_07.htm">History Made Practical</A><br>

</DIV>

<p class=para>
Did you ever have a junk drawer?  You know, one of those drawers
where you put everything important enough to keep (like the spare key
to the back door), but not important enough to have a place of its own
(like the back door itself).

<p class=para>
Well, this chapter is the junk drawer of the book.  We stuffed many
important (and a few not-so-important) things in this chapter.  Read on.

<div class=sect1>
<h2 class=sect1><a class="TITLE" name="PERL2-CH-8-SECT-1">8.1 The Perl Debugger</A></h2>

<p class=para>
<a name="CH08.DEBUG1"></A><a name="CH08.DEBUG2"></A><a name="CH08.DEBUG3"></A>First of all, have you tried using the <b>-w</B> switch?

<p class=para>
If you invoke Perl with the <b>-d</B> switch,
your script runs under the Perl debugger.  This works like an
interactive Perl environment, prompting for debugger commands that let
you examine source code, set breakpoints, dump out your function-call
stack, change the values of variables, and so on.  Any command not
recognized by the debugger[1] is directly executed
(<a href="ch03_02.htm">eval</A>'d) as Perl code in the current
package.[2] This is so wonderfully
convenient that you often fire up the debugger all by itself just to
test out Perl constructs interactively to see what they do.  Here's a
common way to get that:

<blockquote class=footnote>
<p class=para>[1] 
 Leading whitespace before
a command would cause the debugger to think it's
<i class=emphasis>not</I> a command for it, but rather for Perl, so be
careful not to do that.  

<p class=para>[2] 
 The debugger uses the DB package for its
own state information.  
</blockquote>
<div class=programlisting>
<p>
<pre>
perl -d -e 42
</PRE>
</DIV>

<p class=para>
In Perl, the debugger is not a separate program as it usually is in a
typical programming environment.  Instead, the <b>-d</B> flag tells the compiler to insert source
information into the parse trees it's about to hand off to the
interpreter.  That means your 
code must first compile correctly for
the debugger to work on it.  Then when the interpreter starts up, it
pre-loads a Perl library file containing the debugger itself.

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CH-8-SECT-1.1">Debugger Commands</A></h3>

<p class=para>
The debugger understands the following commands:

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>h</tt> [<tt class=replaceable><i>command</i></tt> ]<dd>

<p class=para>
Prints out a help message.  

<p class=para>
If you supply another debugger command as an argument to the <tt class=literal>h</tt>
command, it prints out the description for just that command.  The command "<tt class=literal>h h</tt>" produces a more compact help listing designed to
fit on one screen.  If the output of the <tt class=literal>h</tt> command (or any command,
for that matter) scrolls past your screen, just precede the command with a
leading pipe symbol so it's run through your pager:

<div class=programlisting>
<p>
<pre>
DB&lt;1&gt; |h
</PRE>
</DIV>

<p>
<dt class=varlistentry><tt class=literal>p</tt> <tt class=replaceable><i>expr</i></tt><dd>

<p class=para>
Same as "<tt class=literal>print DB::OUT</tt> <tt class=replaceable><i>expr</i></tt>" in the current package.  In particular,
since this is just Perl's own <a href="ch03_02.htm">print</A> function, this means that nested
data structures and objects are not dumped, unlike with the <tt class=literal>x</tt> command.
The <tt class=literal>DB::OUT</tt> handle is opened to <i class=emphasis>/dev/tty</I> (or perhaps an editor
window) no matter where standard output may have been redirected to.

<p>
<dt class=varlistentry><tt class=literal>x</tt> <tt class=replaceable><i>expr</i></tt><dd>

<p class=para>
Evals its expression in a list context and dumps out the result 
in a pretty-printed fashion.  Nested data structures are printed out
recursively, unlike with the print command above.

<p>
<dt class=varlistentry><tt class=literal>V</tt> [<tt class=replaceable><i>pkg</i></tt> [<tt class=replaceable><i>vars</i></tt>]]<dd>

<p class=para>
Display all (or some) variables in package (defaulting to the main
package) using a data pretty-printer.  (Hashes show their keys and values so
you see what's what, control characters are made printable, nested data
structures print out in a legible fashion, and so on.)  Make sure you type
the identifiers without a type specifier such as <tt class=literal>$</tt> or
<tt class=literal>@</tt>, like this:

<div class=programlisting>
<p>
<pre>
V DB filename line
</PRE>
</DIV>

<p class=para>
In place of a variable name, you can use
<tt class=literal>~</tt><tt class=replaceable><i>pattern</i></tt> or
<tt class=literal>!</tt><tt class=replaceable><i>pattern</i></tt> to print existing variables
whose names either match or don't match the specified regular
expression.

<p>
<dt class=varlistentry><tt class=literal>X</tt> [<tt class=replaceable><i>vars</i></tt>]<dd>

<p class=para>
Same as <tt class=literal>V</tt> <tt class=replaceable><i>currentpackage</i></tt>
[<tt class=replaceable><i>vars</i></tt>].  

<p>
<dt class=varlistentry><tt class=literal>T</tt>      <dd>

<p class=para>
Produce a stack backtrace.  See below for details on its output.

<p>
<dt class=varlistentry><tt class=literal>s</tt> [<tt class=replaceable><i>expr</i></tt>]<dd>

<p class=para>
Single step.  Executes until it reaches the beginning of another
statement, descending into subroutine calls.  If an expression is
supplied that includes function calls, it, too, will be single-stepped.

<p>
<dt class=varlistentry><tt class=literal>n</tt>      <dd>

<p class=para>
Next.  Executes over subroutine calls, until it reaches the beginning
of the next statement at this same level.

<p>
<dt class=varlistentry><tt class=literal>&lt;CR&gt;</tt><dd>

<p class=para>
Repeat last <tt class=literal>n</tt> or <tt class=literal>s</tt> command.

<p>
<dt class=varlistentry><tt class=literal>c</tt> [<tt class=replaceable><i>line</i></tt>]<dd>

<p class=para>
Continue, optionally inserting a one-time-only breakpoint
at the specified line.

<p>
<dt class=varlistentry><tt class=literal>l</tt>      <dd>

<p class=para>
List next few lines.

<p>
<dt class=varlistentry><tt class=literal>l</tt> <tt class=replaceable><i>min+incr</i></tt><dd>

<p class=para>
List <tt class=replaceable><i>incr</i></tt><tt class=literal>+1</tt> lines starting at
<tt class=replaceable><i>min</i></tt>.

<p>
<dt class=varlistentry><tt class=literal>l</tt> <tt class=replaceable><i>min-max</i></tt><dd>

<p class=para>
List lines <tt class=replaceable><i>min</i></tt> through <tt class=replaceable><i>max</i></tt>.

<p>
<dt class=varlistentry><tt class=literal>l</tt> <tt class=replaceable><i>line</i></tt><dd>

<p class=para>
List a single line.

<p>
<dt class=varlistentry><tt class=literal>l</tt> <tt class=replaceable><i>subname</i></tt><dd>

<p class=para>
List first few lines from subroutine.

<p>
<dt class=varlistentry><tt class=literal>-</tt>      <dd>

<p class=para>
List previous few lines.

<p>
<dt class=varlistentry><tt class=literal>w</tt> [<tt class=replaceable><i>line</i></tt>]<dd>

<p class=para>
List window (a few lines) around the given <tt class=replaceable><i>line</i></tt>, or
the current one if no <tt class=replaceable><i>line</i></tt> is supplied.

<p>
<dt class=varlistentry>.      <dd>

<p class=para>
Return debugger pointer to the last-executed line and
print it out.

<p>
<dt class=varlistentry><tt class=literal>f</tt> <tt class=replaceable><i>filename</i></tt><dd>

<p class=para>
Switch to viewing a different file.

<p>
<dt class=varlistentry>/<tt class=replaceable><i>pattern</i></tt>/<dd>

<p class=para>
Search forward for <tt class=replaceable><i>pattern</i></tt>; final / is optional.

<p>
<dt class=varlistentry>?<tt class=replaceable><i>pattern</i></tt>?<dd>

<p class=para>
Search backward for <tt class=replaceable><i>pattern</i></tt>; final ? is optional.

<p>
<dt class=varlistentry><tt class=literal>L</tt>      <dd>

<p class=para>
List all breakpoints and actions for the current file.

<p>
<dt class=varlistentry><tt class=literal>S</tt> [&nbsp;[&nbsp;!&nbsp;]&nbsp;<tt class=replaceable><i>pattern</i></tt>]<dd>

<p class=para>
List subroutine names matching (or not matching with "!") <tt class=replaceable><i>pattern</i></tt>.
If no <tt class=replaceable><i>pattern</i></tt> is given, all subroutines are listed.

<p>
<dt class=varlistentry><tt class=literal>t</tt>      <dd>

<p class=para>
Toggle trace mode.

<p>
<dt class=varlistentry><tt class=literal>t</tt> <tt class=replaceable><i>expr</i></tt><dd>

<p class=para>
Trace through execution of <tt class=replaceable><i>expr</i></tt>.  

<p>
<dt class=varlistentry><tt class=literal>b</tt> [<tt class=replaceable><i>line</i></tt>] [<tt class=replaceable><i>condition</i></tt>]<dd>

<p class=para>
Set a breakpoint at <tt class=replaceable><i>line</i></tt>.  If <tt class=replaceable><i>line</i></tt> is omitted, set a
breakpoint on the line that is about to be executed.  <tt class=replaceable><i>condition</i></tt>,
if given, is evaluated each time the statement is reached, and a
breakpoint is taken only if <tt class=replaceable><i>condition</i></tt> is true.  Breakpoints
may only be set on lines
that begin an executable statement.  Conditions don't use <b>if</B>:

<div class=programlisting>
<p>
<pre>
b 237 $x &gt; 30
b 33 /pattern/i
</PRE>
</DIV>

<p class=para>
<p>
<dt class=varlistentry><tt class=literal>b</tt> <tt class=replaceable><i>subname</i></tt> [<tt class=replaceable><i>condition</i></tt>]<dd>

<p class=para>
Set a (possibly conditional) breakpoint at the first line of the named
subroutine.

<p>
<dt class=varlistentry><tt class=literal>d</tt> [<tt class=replaceable><i>line</i></tt>]<dd>

<p class=para>
Delete a breakpoint at the specified <tt class=replaceable><i>line</i></tt>.  If
<tt class=replaceable><i>line</i></tt> is omitted, deletes the breakpoint on the line
that is about to be executed.

<p>
<dt class=varlistentry><tt class=literal>D</tt>      <dd>

<p class=para>
Delete all installed breakpoints.

<dt class=varlistentry><tt class=literal>a</tt> [<tt class=replaceable><i>line</i></tt>] <tt class=replaceable><i>command</i></tt><dd>

<p class=para>
Set an action to be done before the <tt class=replaceable><i>line</i></tt> is
executed.  The sequence of steps taken by the debugger is:

<p>
<ul class=itemizedlist>
<li class=listitem>Check for a breakpoint at this line.

<p>
<li class=listitem>Print the line if necessary (tracing).

<p>
<li class=listitem>Do any actions associated with that line.

<p>
<li class=listitem>Prompt the user if at a breakpoint or in single-step.

<p>
<li class=listitem>Evaluate the line.

<p>
</UL>
<p class=para>
For example, this will print out <tt class=literal>$foo</tt> every time line
53 is passed:

<div class=programlisting>
<p>
<pre>
a 53 print "DB FOUND $foo\n"
</PRE>
</DIV>

<p class=para>
<p>
<dt class=varlistentry><tt class=literal>A</tt>      <dd>

<p class=para>
Delete all installed actions.

<p>
<dt class=varlistentry><tt class=literal>O</tt><tt class=literal> [</tt><tt class=replaceable><i>opt</i></tt><tt class=literal>[=</tt><tt class=replaceable><i>val</i></tt><tt class=literal>]]</tt><dd>

<p class=para>
Set or query values of options.  <tt class=replaceable><i>val</i></tt> defaults to
1.  <tt class=replaceable><i>opt</i></tt> can be abbreviated to the shortest unique
string, which is why some options are uppercase and others are
lowercase.  Options are:

<div class=informaltable>
<p>
<a name="PERL2-CH-8-TAB-1"></A>

<table class=INFORMALTABLE>
<tr class=row>
<th align="left">Option</TH>
<th align="LEFT">Value</TH>
</TR>
<tr class=row>
<td align="left"><tt class=literal>recallCommand ShellBang</tt></TD>
<td align="LEFT">

<p class=para>
The characters used to recall command or spawn shell.  By
default, these are both set to "!" (see below).</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>pager</tt></TD>
<td align="LEFT">

<p class=para>
Program to use for output of pager-piped commands (those
beginning with a <tt class=literal>|</tt> character). By default,
<tt class=literal>$ENV{PAGER}</tt> will be used.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>PrintRet</tt></TD>
<td align="LEFT">

<p class=para>
Enables printing of return value after <tt class=literal>r</tt> command.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>frame</tt></TD>
<td align="LEFT">

<p class=para>
Enables printing messages on entry and exit from subroutines.</TD>
</TR>
</TABLE>
<p>
</DIV>

<p class=para>
The following options affect what happens with <tt class=literal>V</tt>,
<tt class=literal>X</tt>, and <tt class=literal>x</tt> commands:

<div class=informaltable>
<p>
<a name="PERL2-CH-8-TAB-2"></A>

<table class=INFORMALTABLE>
<tr class=row>
<th align="left">Option</TH>
<th align="LEFT">Value</TH>
</TR>
<tr class=row>
<td align="left"><tt class=literal>arrayDepth hashDepth</tt></TD>
<td align="LEFT">

<p class=para>
Print only to depth <tt class=replaceable><i>n</i></tt> (`` for all).</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>compactDump veryCompact</tt></TD>
<td align="LEFT">

<p class=para>
Change style of array and hash dump.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>globPrint</tt></TD>
<td align="LEFT">

<p class=para>
Whether to print contents of globs.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>DumpDBFiles</tt></TD>
<td align="LEFT">

<p class=para>
Dump arrays holding debugged files.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>DumpPackages</tt></TD>
<td align="LEFT">

<p class=para>
Dump symbol tables of packages.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>quote HighBit undefPrint</tt></TD>
<td align="LEFT">

<p class=para>
Change style of string dump.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>tkRunning</tt></TD>
<td align="LEFT">

<p class=para>
Run Tk while prompting (with ReadLine).[1]</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>signalLevel warnLevel dieLevel</tt></TD>
<td align="LEFT">

<p class=para>
Level of verbosity.</TD>
</TR>
<tr>
<td colspan=2>
<p>
<b>Footnotes:</b>
<p>
<blockquote>
[1] <p class=para>
A Perl application is
usually frozen when sitting at the debugger prompt. Tk
support keeps the event loop of Tk running while reading the prompt.
</blockquote></td></tr>
</TABLE>
<p>
</DIV>

<p class=para>
During startup, options are initialized from
<tt class=literal>$ENV{PERLDB_OPTS}</tt>.  You can put additional
initialization options <tt class=literal>TTY</tt>,
<tt class=literal>noTTY</tt>, <tt class=literal>ReadLine</tt>, and
<tt class=literal>NonStop</tt> there.  Here's an example using the
<tt class=literal>$ENV{PERLDB_OPTS}</tt> variable:

<div class=programlisting>
<p>
<pre>
$ PERLDB_OPTS="N f=2" perl -d myprogram
</PRE>
</DIV>

<p class=para>
This will run the script <tt class=literal>myprogram</tt> without human intervention,
printing out the call tree with entry and exit points.  Note that
"<tt class=literal>N f=2</tt>" is equivalent to
"<tt class=literal>NonStop=1 frame=2</tt>".

<p>
<dt class=varlistentry>&lt; <tt class=replaceable><i>command</i></tt><dd>

<p class=para>
Set an action to happen before every debugger prompt.  A multi-line
<tt class=replaceable><i>command</i></tt> may be entered by backslashing the newlines.  <tt class=replaceable><i>command</i></tt>
should be Perl code.

<p>
<dt class=varlistentry>&gt; <tt class=replaceable><i>command</i></tt><dd>

<p class=para>
Set an action to happen after the prompt when you've just given a
command to return to executing the script.  A multi-line <tt class=replaceable><i>command</i></tt> may be
entered by backslashing the newlines.  <tt class=replaceable><i>command</i></tt> should be Perl
code.

<p>
<dt class=varlistentry>! <tt class=replaceable><i>number</i></tt><dd>

<p class=para>
Redo a previous command (defaults to previous command).

<p>
<dt class=varlistentry>! -<tt class=replaceable><i>number</i></tt><dd>

<p class=para>

Redo <tt class=replaceable><i>number</i></tt>'th-to-last command.

<p>
<dt class=varlistentry>! <tt class=replaceable><i>pattern</i></tt><dd>

<p class=para>
Redo last command that started with <tt class=replaceable><i>pattern</i></tt>.
See "<tt class=literal>O recallCommand</tt>", too.

<p>
<dt class=varlistentry>!! <tt class=replaceable><i>cmd</i></tt><dd>

<p class=para>
Run <tt class=replaceable><i>cmd</i></tt> in a subprocess (which will read from
<tt class=literal>DB::IN</tt>, write to <tt class=literal>DB::OUT</tt>).
See "<tt class=literal>O shellBang</tt>", too.

<p>
<dt class=varlistentry><tt class=literal>H -</tt><tt class=replaceable><i>number</i></tt><dd>

<p class=para>
Display last <tt class=replaceable><i>number</i></tt> commands.  Only commands longer
than one character are listed.  If <tt class=replaceable><i>number</i></tt> is omitted,
lists them all.

<p>
<dt class=varlistentry><tt class=literal>q</tt> or <tt class=literal>^D</tt><dd>

<p class=para>
Quit.  ("<tt class=literal>quit</tt>" doesn't quite work for this.)

<p>
<dt class=varlistentry><tt class=literal>R</tt>      <dd>

<p class=para>
Restart the debugger by <a href="ch03_02.htm">exec</A>ing a new session.  It tries to maintain
your history across this, but internal settings and command line options
may be lost.

<p>
<dt class=varlistentry>|<tt class=replaceable><i>dbcmd</i></tt><dd>

<p class=para>
Run debugger command, piping <tt class=literal>DB::OUT</tt> to <tt class=literal>$ENV{PAGER}</tt>.

<p>
<dt class=varlistentry>||<tt class=replaceable><i>dbcmd</i></tt><dd>

<p class=para>
Same as |<tt class=replaceable><i>dbcmd</i></tt> but <tt class=literal>DB::OUT</tt>
is temporarily <b>select</B>ed as well.
Often used with commands that would otherwise produce long
output, such as

<div class=programlisting>
<p>
<pre>
|V main
</PRE>
</DIV>

<p class=para>
<p>
<dt class=varlistentry><tt class=literal>= [</tt><tt class=replaceable><i>alias value</i></tt><tt class=literal>]</tt><dd>

<p class=para>
Define a command alias, or list current aliases.

<p>
<dt class=varlistentry><tt class=replaceable><i>command</i></tt><dd>

<p class=para>
Execute <tt class=replaceable><i>command</i></tt> as a Perl statement.  A semicolon is
not needed at the end.</DL>
</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CH-8-SECT-1.2">Using the Debugger</A></h3>

<p class=para>
If you have any compile-time executable statements (code within a
<tt class=literal>BEGIN</tt> block or a <tt class=literal>use</tt> statement),
they will not be stopped by the debugger,
although <a href="ch03_02.htm">require</A>s will.

<p class=para>
The debugger prompt is something like:

<div class=programlisting>
<p>
<pre>
DB&lt;8&gt;
</PRE>
</DIV>

<p class=para>
or even:

<div class=programlisting>
<p>
<pre>
DB&lt;&lt;17&gt;&gt;
</PRE>
</DIV>

<p class=para>
where that number is the command number.  A <i class=emphasis>csh</I>-like history
mechanism allows you to access previous commands by number.  For example,
<tt class=literal>!17</tt> would repeat
command number 17.  The number of angle brackets indicates the depth of
the debugger.  You get more than one set of brackets, for example, if
you're already at a breakpoint and then print out the result of a
function call that itself also has a breakpoint.

<p class=para>
If you want to enter a multi-line command, such as a subroutine
definition with several statements, you may escape the newline that would
normally end the debugger command with a backslash.  Here's an example:

<div class=programlisting>
<p>
<pre>
DB&lt;1&gt; <b>for (1..4) {         \</B>
  cont:     <b>print "ok\n";    \</B>
  cont: <b>}</B>
  ok
  ok
  ok
  ok
</PRE>
</DIV>

<p class=para>
Note that this business of escaping a newline is specific to interactive
commands typed into the debugger.

<p class=para>
Let's say you want to fire up the debugger on a little program 
of yours (let's call it <i class=emphasis>camel_flea</I>), and stop it as soon 
as it gets down to a function named <tt class=literal>infested</tt>.  Here's how
you'd do that:
<div class=programlisting>
<p>
<pre>
<tt class=replaceable><i>shell_prompt%</i></tt> <b>perl -d camel_flea</B>
Stack dump during die enabled outside of evals.
Loading DB routines from perl5db.pl patch level 0.94
Emacs support available.
Enter h or `h h' for help.
main::(camel_flea:3):   $a = 1;
  DB&lt;1&gt;
</PRE>
</DIV>

<p class=para>
The debugger halts your program right before the first run-time
executable statement (but see above regarding compile-time statements) and
asks you to enter a command.  Contrary to popular expectations,
whenever the debugger stops to show you a line of code, it 
displays the line it's <i class=emphasis>about</I> to execute, not the one it
just executed.

<p class=para>
Now, you'd like to stop as soon as your program gets to the
<tt class=literal>infested</tt> function, so you enter a breakpoint there like so:

<div class=programlisting>
<p>
<pre>
DB&lt;1&gt; <b>b infested</B>
DB&lt;2&gt; <b>c</B>
</PRE>
</DIV>

<p class=para>
The debugger now continues until it hits that function, at which point
it does this:

<div class=programlisting>
<p>
<pre>
main::infested(camel_flea:12):      my bugs;
</PRE>
</DIV>

<p class=para>
It might be nice to look at a window of source code around the
breakpoint, so you use the <tt class=literal>w</tt> command:

<div class=programlisting>
<p>
<pre>
DB&lt;2&gt; <b>w</B>
9:      } 
10:
11:     sub infested {
12==&gt;b      my $bugs;
13:         return 3.5;
14:     } 
DB&lt;2&gt;
</PRE>
</DIV>

<p class=para>
As you see, your current line is line 12, and it has a breakpoint
on it.

<p class=para>
Now, you'd like to see who called whom, so you ask for a stack 
backtrace:

<div class=programlisting>
<p>
<pre>
DB&lt;2&gt; <b>T</B>
$ = main::infested called from file `Ambulation.pm' line 10
@ = Ambulation::legs(1, 2, 3, 4) called from file `camel_flea' line 7
$ = main::pests('bactrian', 4) called from file `camel_flea' line 4
</PRE>
</DIV>

<p class=para>
The left-hand character up there (<tt class=literal>$</tt> or <tt class=literal>@</tt>)
tells whether the function was called in a scalar or list context (we bet you
can tell which is which).  There are three lines because you were three
functions deep when you ran the stack backtrace.  Here's what each line means:

<p>
<ul class=itemizedlist>
<li class=listitem>Line number one says you were in the function <tt class=literal>main::infested</tt> when
you ran the stack dump.  It tells you the function was called in a scalar
context from line 10 of the file <i class=emphasis>Ambulation.pm</I>.  It also shows that
it was called without any arguments whatsoever, meaning it was called as
<tt class=literal>&amp;infested</tt>.

<p>
<li class=listitem>Line number two shows that the function <tt class=literal>Ambulation::legs</tt> was
called in a list context from the <i class=emphasis>camel_flea</I> file with four
arguments.

<p>
<li class=listitem>Line number three shows that <tt class=literal>main::pests</tt> was called in a scalar
context, also from <i class=emphasis>camel_flea</I>, but from line 4.

<p>
</UL>
<p class=para>
Limited control over the Perl debugger can also be managed from within your Perl
script itself.  You might do this, for example, to set an automatic breakpoint
at a certain subroutine whenever a particular program is run under the debugger.
Setting <tt class=literal>$DB::single</tt> to 1 will stop at the next statement as
though you'd used the debugger's <tt class=literal>s</tt> command.  If you set
<tt class=literal>$DB::single</tt> to 2, it's equivalent to having just typed the
<tt class=literal>n</tt> command.  The <tt class=literal>$DB::trace</tt> variable can be
set to 1 to simulate having typed the <tt class=literal>t</tt> command.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CH-8-SECT-1.3">Debugger Customization</A></h3>

<p class=para>
To modify the debugger, copy <i class=emphasis>perl5db.pl</I> from the Perl
library to another file and modify it as necessary.  You'll also want
to set your <tt class=literal>PERL5DB</tt> environment variable to say something like this:

<div class=programlisting>
<p>
<pre>
BEGIN { require "myperl5db.pl" }
</PRE>
</DIV>

<p class=para>
You can do some customization by setting up a <i class=emphasis>.perldb</I> file with
initialization code.  For instance, you could make aliases
like these (the last one is one people expect to be there):

<div class=programlisting>
<p>
<pre>
$DB::alias{'len'}  = 's/^len(.*)/p length($1)/';
$DB::alias{'stop'} = 's/^stop (at|in)/b/';
$DB::alias{'ps'}   = 's/^ps\b/p scalar /';
$DB::alias{'quit'} = 's/^quit\b.*/exit/';
</PRE>
</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CH-8-SECT-1.4">Readline Support</A></h3>

<p class=para>
As shipped, the only command-line history mechanism supplied is a simplistic one
that checks for leading exclamation points.  This is fine for casual use.
However, if you install the Term::ReadKey and Term::ReadLine modules from CPAN,
you will have full editing capabilities much like GNU
<i class=emphasis>readline</I> (3) provides.  Look for these in the
<i class=emphasis>modules/by-module/Term</I> directory on CPAN.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CH-8-SECT-1.5">Editor Support for Debugging</A></h3>

<p class=para>
If you have GNU <i class=emphasis>emacs</I> installed on your system, it can
interact with the Perl debugger to provide an integrated software development
environment reminiscent of its interactions with C debuggers.

<p class=para>
Perl is also delivered with a start file for making <i class=emphasis>emacs</I>
act like a syntax-directed editor that understands (some of) Perl's syntax.
Look in the <i class=emphasis>emacs/</I> directory of the Perl source
distribution.

<p class=para>
(Historically, a similar setup for interacting with <i class=emphasis>vi</I> and the
X11 window system had also been available, but at the time of this
writing, no debugger support for <i class=emphasis>vi</I> currently exists.)
 
 

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CH-8-SECT-1.6">Debugger Internals</A></h3>

<p class=para>
When you call the <a href="ch03_02.htm">caller</A> function from
package DB, Perl sets the <tt class=literal>@DB::args</tt> array to the arguments
that stack frame was called with.  It also maintains other magical internal
variables, such as <tt class=literal>@DB::dbline</tt>, an array of the source code
lines for the currently selected (with the debugger's <tt class=literal>f</tt>
command) file.  Perl effectively inserts a call to the function
<tt class=literal>DB::DB</tt>(<tt class=replaceable><i>linenum</i></tt>) in front of every
place that can have a breakpoint. Instead of a subroutine call it calls
<tt class=literal>DB::sub</tt>, setting <tt class=literal>$DB::sub</tt> to the name of
the called subroutine. It also inserts a <tt class=literal>BEGIN {require
'perl5db.pl'}</tt> before the first line, since no subroutine call is
possible until <tt class=literal>&amp;DB::sub</tt> is defined (for subroutines
defined outside this file).  In fact, the same is true if
<tt class=literal>$DB::deep</tt> (how many levels of recursion deep into the
debugger you are) is not defined.

<p class=para>
At the start, the debugger reads your config file
(<i class=emphasis>.&nbsp;/.perldb</I> or <i class=emphasis>~/.perldb</I> under
UNIX), which can set important options.  This file may define a subroutine
<tt class=literal>&amp;afterinit</tt> to be executed after the debugger is
initialized.

<p class=para>
After the config file is processed, the debugger consults the environment variable
PERLDB_OPTS and parses it as arguments to the <tt class=literal>O</tt>
<tt class=replaceable><i>opt=val</i></tt> debugger command.

<p class=para>
The following options can only be specified at startup.  To set them in your
config file, call <tt class=literal>&amp;parse_options(`</tt><tt class=replaceable><i>opt</i></tt><tt class=literal>=</tt><tt class=replaceable><i>val</i></tt><tt class=literal>`)</tt>.

<p>
<dl class=variablelist>
<dt class=varlistentry>TTY<dd>

<p class=para>
The TTY to use for debugging I/O.

<p>
<dt class=varlistentry>noTTY<dd>

<p class=para>
If set, goes in <tt class=literal>NonStop</tt> mode.  On an interrupt, if TTY is
not set, it uses the value of <tt class=literal>noTTY</tt> or <i class=emphasis>/tmp/perldbtty$$</I> to find
TTY using <tt class=literal>Term::Rendezvous</tt>.  The current variant is to have the
name of TTY in this file.

<p>
<dt class=varlistentry>ReadLine<dd>

<p class=para>
If false, a dummy ReadLine is used so that you can debug
ReadLine applications.

<p>
<dt class=varlistentry>NonStop<dd>

<p class=para>
If true, no interaction is performed until an interrupt.

<p>
<dt class=varlistentry>LineInfo<dd>

<p class=para>
File or pipe to print line number info to.  If it's a
pipe, then a short, <i class=emphasis>emacs</I>-like message is used.
Example config file:

<div class=programlisting>
<p>
<pre>
&amp;parse_options("NonStop=1 LineInfo=db.out");
sub afterinit { $trace = 1; }
</PRE>
</DIV>

<p class=para>
The script will run without human intervention, putting trace information
into the file <i class=emphasis>db.out</I>.  (If you interrupt it, you had better reset
<tt class=literal>LineInfo</tt> to something "interactive"!)</DL>
</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CH-8-SECT-1.7">Debugger Bugs</A></h3>

<p class=para>
If your program <a href="ch03_02.htm">exit</A>s or 
<a href="ch03_02.htm">die</A>s, so too does the debugger.

<p class=para>
You cannot get the stack frame information or otherwise debug functions
that were not compiled by Perl, such as C or C++ extensions.

<p class=para>
If you alter your <b>@_</B> arguments in a
subroutine (such as with <a href="ch03_02.htm">shift</A> or
<a href="ch03_02.htm">pop</A>), the stack backtrace will not show
the original values.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CH-8-SECT-1.8">Alternative Debuggers: The Perl Profiler</A></h3>

<p class=para>
If you wish to supply an alternative debugger for Perl to run, just invoke
your script with the <tt class=literal>-d:</tt><i class=emphasis>module</I> switch.
One of the most popular alternative debuggers for Perl is
DProf, the Perl profiler.   As of this writing, DProf was not
included with the standard Perl distribution, but it is expected to be
included "real soon now."

<p class=para>
Meanwhile, you can fetch the Devel::DProf module from CPAN.  Assuming
it's properly installed on your system, you can use it to profile the
Perl program in <i class=emphasis>mycode.pl</I> by typing:

<div class=programlisting>
<p>
<pre>
perl -d:DProf mycode.pl
</PRE>
</DIV>

<p class=para>
When the script terminates, the profiler will dump the profile
information to a file called <i class=emphasis>tmon.out</I>.  A tool
like <i class=emphasis>dprofpp</I> (also supplied with the Devel::DProf
package) interprets the profile.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CH-8-SECT-1.9">Other Debugging Resources</A></h3>

<p class=para>
You did try the <b>-w</B> switch, didn't you?

</DIV>

</DIV>


<div class=htmlnav>
<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch07_02.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src="gifs/txthome.gif" alt="Home" border=0></a></td>
<td width=172 align=right valign=top><a href="ch08_02.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>DBM comparisons</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td>
<td width=172 align=right valign=top>Common Goofs for Novices</td>
</tr>
</table>

<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
</DIV>
</BODY>
</HTML>
