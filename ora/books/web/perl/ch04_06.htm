<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 4] 4.6 A Brief Tutorial: Manipulating Lists of Lists</TITLE>
<meta name="author" content="Larry Wall, Tom Christiansen, and Randal Schwartz">
<meta name="date" content="Mon Mar 17 13:09:07 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="Perl">
<meta name="title" content="Programming Perl, Second Edition">
<!-- JavaScript: pathcont.js -->

</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><img src="gifs/smbanner.gif" alt="Programming Perl, Second Edition"></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch04_05.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b>Chapter 4</b></td>
<td width=172 align=right valign=top><a href="ch04_07.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>
<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="PERL2-CH-4-SECT-6">4.6 A Brief Tutorial: Manipulating Lists of Lists</A></h2>

<p class=para>
<a name="CH04.TUT1"></A><a name="CH04.TUT2"></A><a name="CH04.TUT3"></A><a name="CH04.TUT4"></A><a name="CH04.TUT5"></A>There are many kinds of nested data structures.
The simplest kind to build is a list of lists (also called an array
of arrays, or a multi-dimensional array).  It's reasonably easy to
understand, and almost everything that applies here will also be applicable
to the fancier data structures.

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CH-4-SECT-6.1">Composition and Access</A></h3>

<p class=para>
Here's how to put together a two-dimensional array value:

<div class=programlisting>
<p>
<pre>
# assign to an array a list of list references
@LoL = ( 
       [ "fred", "barney" ],
       [ "george", "jane", "elroy" ],
       [ "homer", "marge", "bart" ],
);
print $LoL[2][2];   # prints "bart"
</PRE>
</DIV>

<p class=para>
The overall list is enclosed by parentheses, not brackets.
That's because you're assigning a list to an array.  If you didn't want
the result to be a list, but rather a reference to an array, then you
would use brackets on the outside:

<div class=programlisting>
<p>
<pre>
# assign to a scalar variable a reference to a list of list references
$ref_to_LoL = [
    [ "fred", "barney", "pebbles", "bambam", "dino", ],
    [ "homer", "bart", "marge", "maggie", ],
    [ "george", "jane", "elroy", "judy", ],
];
print $ref_to_LoL-&gt;[2][2];   # prints "elroy"
</PRE>
</DIV>

<p class=para>
<tt class=literal>$ref_to_LoL</tt> is a reference to an array, whereas
<tt class=literal>@LoL</tt> is an array proper.  The parentheses
(indicating a list) have changed to brackets (indicating the creation
of a reference to an array).  Unlike C, Perl doesn't allow you to
freely interchange arrays with references to arrays.  This is a
feature.

<p class=para>
Remember that there is an implied <tt class=literal>-&gt;</tt> between every pair of
adjacent braces or brackets.  Therefore these two lines:

<div class=programlisting>
<p>
<pre>
$LoL[2][2]
$ref_to_LoL-&gt;[2][2]
</PRE>
</DIV>

<p class=para>
are equivalent to these two lines:

<div class=programlisting>
<p>
<pre>
$LoL[2]-&gt;[2]
$ref_to_LoL-&gt;[2]-&gt;[2]
</PRE>
</DIV>

<p class=para>
There is, however, no implied
<tt class=literal>-&gt;</tt> before the first pair of brackets, which is
why the dereference of <tt class=literal>$ref_to_LoL</tt> requires the
<tt class=literal>-&gt;</tt>.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CH-4-SECT-6.2">Growing Your Own</A></h3>

<p class=para>
Now those big list assignments are well and good for creating a fixed
data structure, but what if you want to calculate each element on the
fly, or otherwise build the structure piecemeal?

<p class=para>
First, let's look at reading a data structure in from a file.  We'll
assume that there's a flat file in which each line is a row of the
structure, and each word an element.  Here's how to proceed:

<div class=programlisting>
<p>
<pre>
while (&lt;&gt;) {
    @tmp = split;
    push @LoL, [ @tmp ];
}
</PRE>
</DIV>

<p class=para>
You can also load the array from a function:

<div class=programlisting>
<p>
<pre>
for $i ( 1 .. 10 ) {
    @tmp = somefunc($i);
    $LoL[$i] = [ @tmp ];
}
</PRE>
</DIV>

<p class=para>
Of course, you don't need to name the temporary array:

<div class=programlisting>
<p>
<pre>
while (&lt;&gt;) {
    push @LoL, [ split ];
}
</PRE>
</DIV>

<p class=para>
and:

<div class=programlisting>
<p>
<pre>
for $i ( 1 .. 10 ) {
    $LoL[$i] = [ somefunc($i) ];
}
</PRE>
</DIV>

<p class=para>
You also don't have to use <a href="ch03_02.htm">push</A>.  You
could keep track of where you are in the array, and assign each line
of the file to the appropriate row of the array:

<div class=programlisting>
<p>
<pre>
my (@LoL, $i, $line);
for $i ( 0 .. 10 ) { # just first 11 lines 
    $line = &lt;&gt;;
    $LoL[$i] = [ split ' ', $line ];
}
</PRE>
</DIV>

<p class=para>
Simplifying, you can avoid the assignment of the line to a
mediating variable:

<div class=programlisting>
<p>
<pre>
my (@LoL, $i);
for $i ( 0 .. 10 ) { # just first 11 lines
    $LoL[$i] = [ split ' ', &lt;&gt; ];
}
</PRE>
</DIV>

<p class=para>
In general, you should be leery of using potential list functions like
<tt class=literal>&lt;&gt;</tt> in a scalar context without explicitly stating such.  
The following example would be clearer to the casual reader:

<div class=programlisting>
<p>
<pre>
my (@LoL, $i);
for $i ( 0 .. 10 ) { # just first 11 lines
    $LoL[$i] = [ split ' ', scalar(&lt;&gt;) ];
}
</PRE>
</DIV>

<p class=para>
If you want a <tt class=literal>$ref_to_LoL</tt> variable as a reference
to an array, do something like:

<div class=programlisting>
<p>
<pre>
my $ref_to_LoL;
while (&lt;&gt;) {
    push @$ref_to_LoL, [ split ];
}
</PRE>
</DIV>

<p class=para>
So much for adding new rows to the list of lists.  What about adding new
columns? If you're just dealing with matrices, it's often easiest to use
simple assignment:

<div class=programlisting>
<p>
<pre>
for $x (1 .. 10) {
    for $y (1 .. 10) {
        $LoL[$x][$y] = func($x, $y);
    }
}
for $x ( 3, 7, 9 ) {
    $LoL[$x][20] += func2($x);
}
</PRE>
</DIV>

<p class=para>
It doesn't matter whether the subscripted elements of <tt class=literal>@LoL</tt> are already 
there or not; Perl will gladly create them for you, setting
intervening elements to the undefined value as need be. If you just want to append to a row, you have
to do something a bit funnier looking:

<div class=programlisting>
<p>
<pre>
# add new columns to an existing row
push @{ $LoL[0] }, "wilma", "betty";
</PRE>
</DIV>

<p class=para>
Notice that this wouldn't work:

<div class=programlisting>
<p>
<pre>
push $LoL[0], "wilma", "betty";  # WRONG!
</PRE>
</DIV>

<p class=para>
In fact, that wouldn't even compile, because the argument to <a href="ch03_02.htm">push</A> must be a real array, not just a reference
to an array.  Therefore, the first argument absolutely must begin
with an <tt class=literal>@</tt> character.  What comes after the
<tt class=literal>@</tt> is somewhat negotiable.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CH-4-SECT-6.3">Access and Printing</A></h3>

<p class=para>
Now it's time to print your data structure.  If you only want one element, do this:

<div class=programlisting>
<p>
<pre>
print $LoL[0][0];
</PRE>
</DIV>

<p class=para>
If you want to print the whole thing, though, you can't just say:

<div class=programlisting>
<p>
<pre>
print @LoL;         # WRONG
</PRE>
</DIV>

<p class=para>
because you'll get references listed, and Perl will never
automatically dereference thingies for you.  Instead, you have to roll
yourself a loop or two.  The following code prints the whole
structure, using the shell-style <b>for</B>
construct to loop through the outer set of subscripts:

<div class=programlisting>
<p>
<pre>
for $array_ref ( @LoL ) {
    print "\t [ @$array_ref ],\n";
}
</PRE>
</DIV>

<p class=para>
Beware of the brackets.  In this and the following example, the
(non-subscripting) brackets do not indicate the creation of a
reference.  The brackets occur inside a quoted string, not in a place
where a term is expected, and therefore lose their special meaning.
They are just part of the string that <a href="ch03_02.htm">print</A> outputs.

<p class=para>
If you want to keep track of subscripts, you might do this:

<div class=programlisting>
<p>
<pre>
for $i ( 0 .. $#LoL ) {
    print "\t element $i is [ @{$LoL[$i]} ],\n";
}
</PRE>
</DIV>

<p class=para>
or maybe even this (notice the inner loop):

<div class=programlisting>
<p>
<pre>
for $i ( 0 .. $#LoL ) {
    for $j ( 0 .. $#{$LoL[$i]} ) {
        print "element $i $j is $LoL[$i][$j]\n";
    }
}
</PRE>
</DIV>

<p class=para>
As you can see, things are getting a bit complicated.  That's why 
sometimes it's easier to use a temporary variable on your way through:

<div class=programlisting>
<p>
<pre>
for $i ( 0 .. $#LoL ) {
    $aref = $LoL[$i];
    for $j ( 0 .. $#{$aref} ) {
        print "element $i $j is $aref-&gt;[$j]\n";
    }
}
</PRE>
</DIV>

<p class=para>
But that's still a bit ugly.  How about this:

<div class=programlisting>
<p>
<pre>
for $i ( 0 .. $#LoL ) {
    $aref = $LoL[$i];
    $n = @$aref - 1;
    for $j ( 0 .. $n ) {
        print "element $i $j is $aref-&gt;[$j]\n";
    }
}
</PRE>
</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CH-4-SECT-6.4">Slices</A></h3>

<p class=para>
If you want to get at a slice (part of a row) in a multi-dimensional
array, you're going to have to do some fancy subscripting.  That's
because, while we have a nice synonym for a single element via the
pointer arrow, no such convenience exists for slices.
However, you can always write a loop to do a slice operation.

<p class=para>
Here's how to create a one-dimensional slice of one subarray of a
two-dimensional array, using a loop.  We'll assume a list-of-lists
variable (rather than a reference to a list of lists):

<div class=programlisting>
<p>
<pre>
@part = ();
$x = 4;     
for ($y = 7; $y &lt; 13; $y++) {
    push @part, $LoL[$x][$y];
}
</PRE>
</DIV>

<p class=para>
That same loop could be replaced with a slice operation:

<div class=programlisting>
<p>
<pre>
@part = @{ $LoL[4] } [ 7..12 ];
</PRE>
</DIV>

<p class=para>
If you want a <i class=emphasis>two-dimensional slice</I>, say, with
<tt class=literal>$x</tt> running from <tt class=literal>4..8</tt> and
<tt class=literal>$y</tt> from <tt class=literal>7..12</tt>, here's one way to
do it:

<div class=programlisting>
<p>
<pre>
@newLoL = ();
for ($startx = $x = 4; $x &lt;= 8; $x++) {
    for ($starty = $y = 7; $y &lt;= 12; $y++) {
        $newLoL[$x - $startx][$y - $starty] = $LoL[$x][$y];
    }
}
</PRE>
</DIV>

<p class=para>
In this example, the individual values within each subarray of
<tt class=literal>@newLoL</tt> are assigned one by one, taken from the
appropriate locations in <tt class=literal>@LoL</tt>.  An alternative is
to create anonymous arrays, each consisting of a desired slice of a
subarray of <tt class=literal>@LoL</tt>, and then put references to these
anonymous arrays into <tt class=literal>@newLoL</tt>.  So we are writing
references into <tt class=literal>@newLoL</tt> (subscripted once, so to
speak) instead of subarray values into a twice-subscripted
<tt class=literal>@newLol</tt>.  This method eliminates the innermost loop:

<div class=programlisting>
<p>
<pre>
for ($x = 4; $x &lt;= 8; $x++) {
    push @newLoL, [ @{ $LoL[$x] } [ 7..12 ] ];
}
</PRE>
</DIV>

<p class=para>
Of course, if you do this very often, you should probably write a
subroutine called something like <tt class=literal>extract_rectangle()</tt>.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="PERL2-CH-4-SECT-6.5">Common Mistakes</A></h3>

<p class=para>
<a name="CH04.TROUBLE"></A>As mentioned previously, every array or hash in Perl is implemented in
one dimension.  "Multi-dimensional" arrays, too, are one-dimensional, but
the values in this one-dimensional array are references to other data
structures.  If you print these values out without
dereferencing them, you will get the references rather than the data
referenced.  For example, these two lines:

<div class=programlisting>
<p>
<pre>
@LoL = ( [2, 3], [4, 5, 7], [0] );
print "@LoL";
</PRE>
</DIV>

<p class=para>
result in:

<div class=programlisting>
<p>
<pre>
ARRAY(0x83c38) ARRAY(0x8b194) ARRAY(0x8b1d0)
</PRE>
</DIV>

<p class=para>
On the other hand, this line:

<div class=programlisting>
<p>
<pre>
print $LoL[1][2];
</PRE>
</DIV>

<p class=para>
yields <tt class=literal>7</tt> as output.

<p class=para>
Perl dereferences your variables only when you employ one of the
dereferencing mechanisms.  But remember that
<tt class=literal>$LoL[1][2]</tt> is just a convenient way to write
<tt class=literal>$LoL[1]-&gt;[2]</tt>, which in turn is a convenient way to write
<tt class=literal>${$LoL[1]}[2]</tt>.  Indeed, you could write all your dereferencing
operations with braces, but that would be uglier than ugly.
Use the syntactic sugar Perl provides to sweeten your program.

<p class=para>
<tt class=literal>@LoL</tt> was defined as an array whose values happened to be
references.  Here's a similar-looking, but very different case:

<div class=programlisting>
<p>
<pre>
my $listref = [
    [ "fred", "barney", "pebbles", "bambam", "dino", ],
    [ "homer", "bart", "marge", "maggie", ],
    [ "george", "jane", "elroy", "judy", ],
];
print $listref[2][2];   # WRONG!
</PRE>
</DIV>

<p class=para>
Here, <tt class=literal>$listref</tt> is not an array, but a scalar
variable <i class=emphasis>referring</I> to an array--in this
case, referring to an anonymous, multi-dimensional array, the one
created by the outer brackets.  Therefore, to print
<tt class=literal>elroy</tt> in this example, we should have said:

<div class=programlisting>
<p>
<pre>
print $listref-&gt;[2][2];
</PRE>
</DIV>

<p class=para>
By contrast, <tt class=literal>$listref[2]</tt> in the erroneous <b>print</B>
statement is the second element in a not-yet-declared array.  If you
ask to

<div class=programlisting>
<p>
<pre>
use strict 'vars'; # or just use strict
</PRE>
</DIV>

<p class=para>
then the use of the undeclared array will be flagged as an error at compile time.

<p class=para>
In constructing an array of arrays, remember to take a reference for the
daughter arrays.  Otherwise, you will just create an array containing the
element counts of the daughter arrays, like this:

<div class=programlisting>
<p>
<pre>
for $i (1..10) {
    @list = somefunc($i);
    $LoL[$i] = @list;       # WRONG!
}
</PRE>
</DIV>

<p class=para>
Here <tt class=literal>@list</tt> is being accessed in a scalar context, and therefore
yields the a count of its elements, which is assigned to
<tt class=literal>$LoL[$i]</tt>.  The proper way to take the reference will be shown
in a moment.

<p class=para>
Another common error involves taking a reference to the same memory location
over and over again:

<div class=programlisting>
<p>
<pre>
for $i (1..10) {
    @list = somefunc($i);
    $LoL[$i] = \@list;      # WRONG!
}
</PRE>
</DIV>

<p class=para>
Every reference generated by the second line of the <b>for</B> loop is
the same, namely, a reference to the single array <tt class=literal>@list</tt>.  Yes, this
array is being given a different set of values on each pass through the
loop, but when everything is said and done, <tt class=literal>$LoL</tt> contains a set of
identical references to the same array, which now holds the last set of
values that were assigned to it.

<p class=para>
Here's a more successful approach:

<div class=programlisting>
<p>
<pre>
for $i (1..10) {
    @list = somefunc($i);
    $LoL[$i] = [ @list ];
}
</PRE>
</DIV>

<p class=para>
The brackets make a reference to a new array with a <i class=emphasis>copy</I>
of what's in <tt class=literal>@list</tt> at the time of the assignment.

<p class=para>
A similar result--though much more difficult to read--would be produced by:

<div class=programlisting>
<p>
<pre>
for $i (1..10) {
    @list = somefunc($i);
    @{$LoL[$i]} = @list;
}
</PRE>
</DIV>

<p class=para>
Since <tt class=literal>$LoL[$i]</tt> needs to be a reference, the reference springs
into existence.  Then, the preceding <tt class=literal>@</tt> dereferences this new
reference, with the result that the values of <tt class=literal>@list</tt> are assigned 
(in list context) to the array referenced by <tt class=literal>$LoL[$i]</tt>.  For
clarity's sake, you might wish to avoid this construct.

<p class=para>
But there <i class=emphasis>is</I> a situation in which you might use it.
Suppose <tt class=literal>$LoL</tt> is already an array of references to arrays.
That is, suppose you had made assignments like:

<div class=programlisting>
<p>
<pre>
$LoL[3] = \@original_list;
</PRE>
</DIV>

<p class=para>
And now suppose that you want to change <tt class=literal>@original_list</tt> (that is,
you want to change the fourth row of <tt class=literal>$LoL</tt>) so that it
refers to the elements of <tt class=literal>@list</tt>.  This code will work:

<div class=programlisting>
<p>
<pre>
@{$LoL[3]} = @list;
</PRE>
</DIV>

<p class=para>
In this case, the reference itself does not change, but the elements of
the array being referred to do.  You need to be aware, however,
that this approach overwrites the values of <tt class=literal>@original_list</tt>.

<p class=para>
Finally, the following dangerous-looking code actually works fine:

<div class=programlisting>
<p>
<pre>
for $i (1..10) {
    my @list = somefunc($i);
    $LoL[$i] = \@list;
}
</PRE>
</DIV>

<p class=para>
That's because the <a href="ch03_02.htm">my</A> variable is
created afresh each time through the loop.  So even though it looks as
though you stored the same variable reference each time, you actually did
not.  This is a subtle distinction, but the technique can produce more
efficient code, at the risk of misleading less enlightened programmers.  
It's more efficient because there's no copy in the final assignment.
On the other hand, if you have to copy the values anyway (which the
first assignment above is doing), then you might as well use the copy
implied by the brackets and avoid the temporary variable:

<div class=programlisting>
<p>
<pre>
for $i (1..10) {
    $LoL[$i] = [ somefunc($i) ];
}
</PRE>
</DIV>

<p class=para>
In summary:

<div class=programlisting>
<p>
<pre>
$LoL[$i] = [ @list ];   # safest, sometimes fastest
$LoL[$i] = \@list;      # fast but risky, depends on my-ness of list
@{ $LoL[$i] } = @list;  # too tricky for most uses
</PRE>
</DIV>

</DIV>

</DIV>


<div class=htmlnav>
<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch04_05.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src="gifs/txthome.gif" alt="Home" border=0></a></td>
<td width=172 align=right valign=top><a href="ch04_07.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Braces, Brackets, and Quoting</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td>
<td width=172 align=right valign=top>Data Structure Code Examples</td>
</tr>
</table>

<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
</DIV>
</BODY>
</HTML>
