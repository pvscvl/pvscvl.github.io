<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 1] 1.8 List Processing</TITLE>
<meta name="author" content="Larry Wall, Tom Christiansen, and Randal Schwartz">
<meta name="date" content="Mon Mar 17 12:59:37 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="Perl">
<meta name="title" content="Programming Perl, Second Edition">
<!-- JavaScript: pathcont.js -->

</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><img src="gifs/smbanner.gif" alt="Programming Perl, Second Edition"></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch01_07.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b>Chapter 1</b></td>
<td width=172 align=right valign=top><a href="ch01_09.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>
<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="PERL2-CH-1-SECT-8">1.8 List Processing</A></h2>

<p class=para>
<a name="CH01.LC"></A>Much earlier in this chapter, we mentioned that Perl has two main
contexts, scalar context (for dealing with singular things) and list
context (for dealing with plural things).  Many of the traditional
operators we've described so far have been strictly scalar in their
operation.  They always take singular arguments (or pairs of singular
arguments for binary operators), and always produce a singular result,
even in a list context.  So if you write this:

<p class=para>
<div class=programlisting>
<p>
<pre>
@array = (1 + 2, 3 - 4, 5 * 6, 7 / 8);
</PRE>
</DIV>

<p class=para>
you know that the list on the right side contains exactly four values,
because the ordinary math operators always produce scalar values, even
in the list context provided by the assignment to an array.

<p class=para>
However, other Perl operators can produce either a scalar or a
list value, depending on their context.  They just "know" whether a
scalar or a list is expected of them.  But how will you know that?
It turns out to be pretty easy to figure out, once you get your mind
around a few key concepts.

<p class=para>
First, list context has to be provided by something in the
"surroundings".  In the example above, the list assignment provides it.
If you look at the various syntax summaries scattered throughout
<a href="ch02_01.htm">Chapter 2, <i>The Gory Details</i></A> and <a href="ch03_01.htm">Chapter 3, <i>Functions</i></A>, 
you'll see various operators that are defined to take
a <tt class=replaceable><i>LIST</i></tt> as an argument.
Those are the operators that <i class=emphasis>provide</I> a list
context.  Throughout this book, <tt class=replaceable><i>LIST</i></tt> is used as a specific technical
term to mean "a syntactic construct that provides a list context".
For example, if you look up <a href="ch03_02.htm">sort</A>, you'll find the syntax summary:

<p class=para>
<div class=programlisting>
<p>
<pre>
sort <i class=emphasis>LIST</I>
</PRE>
</DIV>

<p class=para>
That means that <a href="ch03_02.htm">sort</A> provides a list context to its arguments.

<p class=para>
Second, at compile time, any operator that takes a <tt class=replaceable><i>LIST</i></tt> provides a list
context to each syntactic element of that <tt class=replaceable><i>LIST</i></tt>.  So every top-level
operator or entity in the <tt class=replaceable><i>LIST</i></tt> knows that it's supposed to produce the
best list it knows how to produce.  This means that if you say:

<p class=para>
<div class=programlisting>
<p>
<pre>
sort @guys, @gals, other();
</PRE>
</DIV>

<p class=para>
then each of <tt class=literal>@guys</tt>, <tt class=literal>@gals</tt>, and <tt class=literal>other()</tt> knows that it's supposed
to produce a list value.

<p class=para>
Finally, at run-time, each of those <tt class=replaceable><i>LIST</i></tt> elements produces its list in
turn, and then (this is important) all the separate lists are joined
together, end to end, into a single list.  And that squashed-flat,
one-dimensional list is what is finally handed off to the
function that wanted a <tt class=replaceable><i>LIST</i></tt> in the first place.  So if <tt class=literal>@guys</tt>
contains <tt class=literal>(Fred,Barney)</tt>, <tt class=literal>@gals</tt> contains <tt class=literal>(Wilma,Betty)</tt>,
and the <tt class=literal>other()</tt> function returns the single-element list
<tt class=literal>(Dino)</tt>, then the <tt class=replaceable><i>LIST</i></tt> that
sort sees is

<p class=para>
<div class=programlisting>
<p>
<pre>
(Fred,Barney,Wilma,Betty,Dino)
</PRE>
</DIV>

<p class=para>
and the <tt class=replaceable><i>LIST</i></tt> that <b>sort</B> returns is

<p class=para>
<div class=programlisting>
<p>
<pre>
(Barney,Betty,Dino,Fred,Wilma)
</PRE>
</DIV>

<p class=para>
Some operators produce lists (like <a href="ch03_02.htm">keys</A>), some consume them (like
<a href="ch03_02.htm">print</A>), and some transform lists into other lists (like <a href="ch03_02.htm">sort</A>).
Operators in the last category can be considered filters; only, unlike
in the shell, the flow of data is from right to left, since list
operators operate on their arguments passed in from the right.  You can
stack up several list operators in a row:

<p class=para>
<div class=programlisting>
<p>
<pre>
print reverse sort map {lc} keys %hash;
</PRE>
</DIV>

<p class=para>
That takes the keys of <tt class=literal>%hash</tt> and returns them to the <a href="ch03_02.htm">map</A> function,
which lowercases all the keys by applying the <a href="ch03_02.htm">lc</A> operator to each of
them, and passes them to the <a href="ch03_02.htm">sort</A> function, which sorts them, and
passes them to the <b>reverse</B> function, which reverses the order of the
list elements, and passes them to the <b>print</B> function, which prints them.

<p class=para>
As you can see, that's much easier to describe in Perl than in English.

</DIV>


<div class=htmlnav>
<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch01_07.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src="gifs/txthome.gif" alt="Home" border=0></a></td>
<td width=172 align=right valign=top><a href="ch01_09.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Regular Expressions</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td>
<td width=172 align=right valign=top>What You Don't Know Won't Hurt You (Much)</td>
</tr>
</table>

<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
</DIV>
</BODY>
</HTML>
