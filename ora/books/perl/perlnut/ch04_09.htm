<html><head>
<title>[Chapter 4] 4.9 Filehandles</TITLE>
<meta name="DC.title" content="Perl in a Nutshell"><meta name="DC.creator" content="Ellen Siever, Stephen Spainhour &amp; Nathan Patwardhan"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:32:28Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-286-7" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch04_01.htm" title="4. The Perl Language"><link rel="prev" href="ch04_08.htm#PNUT-CH-4-SECT-8.2" title="4.8 References and Complex Data Structures"><link rel="next" href="ch04_10.htm" title="4.10 Formats"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl in a Nutshell" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,71" href="index.htm" alt="Perl in a Nutshell"><area shape="RECT" coords="467,0,514,18" href="../search/nsrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch04_08.htm#PNUT-CH-4-SECT-8.2" title="4.8 References and Complex Data Structures"><img src="../gifs/txtpreva.gif" alt="Previous: 4.8 References and Complex Data Structures" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch04_01.htm" title="4. The Perl Language">Chapter 4<br>The Perl Language</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch04_10.htm" title="4.10 Formats"><img src="../gifs/txtnexta.gif" alt="Next: 4.10 Formats" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="PNUT-CH-4-SECT-9">4.9 Filehandles</A
></H2
><p class="para"><a class="indexterm" name="PNUT-CH-4-IX-FILEHANDLES"></A
>A filehandle is the name for an I/O connection between your Perl
process and the operating system.  
Filehandle names are like label names, but use their own namespace.
Like label names, the convention is to use all uppercase letters
for filehandle names.</P
><p class="para"><a class="indexterm" name="AUTOID-6168"></A
><a class="indexterm" name="AUTOID-6170"></A
><a class="indexterm" name="AUTOID-6172"></A
>Every Perl program has three filehandles that are
automatically opened:
STDIN, STDOUT, and STDERR.
By default, the <code class="literal">print</CODE
> and <code class="literal">write</CODE
>
functions write to STDOUT.  <a class="indexterm" name="AUTOID-6176"></A
>
Additional filehandles are created using the <code class="literal">open</CODE
> function:


<blockquote class="screen"><pre class="screen">open (DATA, &quot;numbers.txt&quot;);</PRE
></BLOCKQUOTE
>


DATA is the new filehandle that is attached to the external file,
which is now opened for reading. You can open filehandles for reading,
writing, and appending to external files and devices.
To open a file for writing, prefix the filename with a greater-than sign:


<blockquote class="screen"><pre class="screen">open(OUT, &quot;&gt;outfile&quot;);</PRE
></BLOCKQUOTE
>

<a class="indexterm" name="AUTOID-6181"></A
><a class="indexterm" name="AUTOID-6184"></A
>
To open a file for appending, prefix the filename with two greater-than signs:


<blockquote class="screen"><pre class="screen">open(LOGFILE, &quot;&gt;&gt;error_log&quot;);</PRE
></BLOCKQUOTE
>


The <code class="literal">open</CODE
> function returns true if the file is successfully opened, 
and false if it failed to open. 
Opening a file can fail for any number of reasons: a file does
not exist, is write-protected, or you don't have permission for a file or directory.
However, a filehandle that has not been successfully opened can still be
read from (giving you an immediate EOF) or written to, with no noticeable effects.</P
><p class="para"><a class="indexterm" name="AUTOID-6190"></A
><a class="indexterm" name="AUTOID-6192"></A
>You should always check the result of <code class="literal">open</CODE
> immediately and report an
error if the operation does not succeed. The <code class="literal">warn</CODE
> function can report
an error to standard error if something goes wrong, and <code class="literal">die</CODE
> can terminate
your program and tell you what went wrong. For example:


<blockquote class="screen"><pre class="screen">open(LOGFILE, &quot;/usr/httpd/error_log&quot;) 
	|| warn &quot;Could not open /usr/httpd/error_log.\n&quot;;
open(DATA, &quot;&gt;/tmp/data&quot;) || die &quot;Could not create /tmp/data\n.&quot;;</PRE
></BLOCKQUOTE
>

<a class="indexterm" name="AUTOID-6198"></A
><a class="indexterm" name="AUTOID-6201"></A
><a class="indexterm" name="AUTOID-6204"></A
><a class="indexterm" name="AUTOID-6206"></A
>
Once the file is opened, you can access the data using the 
diamond operator, <code class="literal">&lt;</CODE
><code class="replaceable"><i>filehandle</I
></CODE
>&gt;. This is the line-input operator. 
When used on a filehandle in a scalar context, it will return a
line from a filehandle as a string. Each time it is called it will return
the next line from the filehandle, until it reaches the end-of-file. The
operator keeps track of which line it is on in the file, unless the filehandle
is closed and reopened, resetting the operator to the top-of-file. </P
><p class="para">For example, to print any 
line containing the word &quot;secret.html&quot; from the LOGFILE filehandle:


<blockquote class="screen"><pre class="screen">while (&lt;LOGFILE&gt;) {
	print &quot;$_\n&quot; if /secret\.html/;
}</PRE
></BLOCKQUOTE
>

<a class="indexterm" name="AUTOID-6212"></A
>
In a list context, the line-input operator returns a list in which each
line is an element. The empty <code class="literal">&lt;&gt;</CODE
> operator reads from the ARGV filehandle,
which reads the array of filenames from the Perl command line. If <code class="literal">@ARGV</CODE
> is empty,
the operator resorts to standard input.</P
><p class="para">A number of functions send output to a filehandle. The filehandle
must already be opened for writing, of course. In the previous
example, <code class="literal">print</CODE
> wrote to the STDOUT filehandle, even though it wasn't
specified. Without a filehandle, <code class="literal">print</CODE
> defaults to the currently
selected output filehandle, which will be STDOUT until you open
and select another one in your program. See the <code class="literal">select</CODE
> function
(filehandle version) for more information. </P
><p class="para">If your program involves more than a couple of open filehandles, you should
be safe and specify the filehandles for all of your IO functions:


<blockquote class="screen"><pre class="screen">print LOGFILE &quot;======= Generated report $date =======&quot;</PRE
></BLOCKQUOTE
>
<a class="indexterm" name="AUTOID-6222"></A
>
To close a filehandle, use the <code class="literal">close</CODE
> function. Filehandles 
are also closed when the program exits.<a class="indexterm" name="AUTOID-6225"></A
></P
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch04_08.htm#PNUT-CH-4-SECT-8.2" title="4.8 References and Complex Data Structures"><img src="../gifs/txtpreva.gif" alt="Previous: 4.8 References and Complex Data Structures" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl in a Nutshell"><img src="../gifs/txthome.gif" alt="Perl in a Nutshell" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch04_10.htm" title="4.10 Formats"><img src="../gifs/txtnexta.gif" alt="Next: 4.10 Formats" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">4.8 References and Complex Data Structures</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">4.10 Formats</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
