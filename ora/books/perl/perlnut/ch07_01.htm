<html><head>
<title>[Chapter 7] Packages, Modules, and Objects</TITLE>
<meta name="DC.title" content="Perl in a Nutshell"><meta name="DC.creator" content="Ellen Siever, Stephen Spainhour &amp; Nathan Patwardhan"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:40:29Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-286-7" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="part03.htm" title="III. Modules"><link rel="prev" href="part03.htm" title="III. Modules"><link rel="next" href="ch07_02.htm" title="7.2 Modules"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl in a Nutshell" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,71" href="index.htm" alt="Perl in a Nutshell"><area shape="RECT" coords="467,0,514,18" href="../search/nsrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="PART" href="part03.htm" title="III. Modules"><img src="../gifs/txtpreva.gif" alt="Previous: III. Modules" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 7</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch07_02.htm" title="7.2 Modules"><img src="../gifs/txtnexta.gif" alt="Next: 7.2 Modules" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="CHAPTER"><h1 class="chapter"><a class="title" name="PNUT-CH-7">7. Packages, Modules, and Objects</A
></H1
><div class="htmltoc"><p><b>Contents:</B
><br><a class="SECT1" href="#PNUT-CH-7-SECT-1" title="7.1 Namespaces and Packages">Namespaces and Packages</A
><br><a class="SECT1" href="ch07_02.htm" title="7.2 Modules">Modules</A
><br><a class="SECT1" href="ch07_03.htm" title="7.3 Object-Oriented Perl">Object-Oriented Perl</A
><br><a class="SECT1" href="ch07_04.htm" title="7.4 Object Syntax">Object Syntax</A
></P
><p></P
></DIV
><p class="para"></P
><p class="para">Over the years, Perl has evolved from a utilitarian 
scripting tool into a sophisticated object-oriented 
programming language.  Many people continue to use 
Perl just for simple scripts, and Perl will continue
to make simple tasks easy.  
However, Perl can also make difficult tasks possible,
by writing reusable code and using object-oriented
programming techniques.</P
><p class="para"><a class="indexterm" name="AUTOID-12230"></A
>This chapter explains what Perl modules are and how to use them in your
programs. Modules are written to accomplish tasks that either
aren't implemented by Perl's built-in functions, or that 
could be done better.
We say modules are &quot;reusable&quot; because
anyone who needs to accomplish the same task
can use that module instead of writing the code from scratch. 
As you
write more and more Perl code, you'll undoubtedly find yourself using
many of the modules other Perl programmers have provided.  You may
also find yourself writing modules and making them available for
others to use.</P
><p class="para">The remainder of this book describes a significant portion of the
functionality that's present in publicly available Perl modules. 
You'll find that a number of <em class="emphasis">standard</EM
> or <em class="emphasis">core</EM
> modules are
distributed with Perl; many of these modules are discussed in <a class="xref" href="ch08_01.htm" title="Standard Modules">Chapter 8, <cite class="chapter">Standard Modules</CITE
></A
>. Scores of other modules are available on CPAN, and virtually any
task you'd like to accomplish in Perl is implemented in a module found
there. For unbundled modules, you'll need to install the module on
your system, and then integrate it into your program with the
<code class="literal">use</CODE
> function. </P
><p class="para"><a class="indexterm" name="AUTOID-12238"></A
>The <code class="literal">use</CODE
> function is often the key to working with modules. For
example, to bring the functionality of the popular CGI module into
your program, you need to install the CGI.pm module (the
.pm stands for Perl module) and put this line near the top of your
program:


<blockquote class="screen"><pre class="screen">use CGI;</PRE
></BLOCKQUOTE
>


Now your program can make use of the many functions and variables 
made available by the CGI module.</P
><p class="para">Packages (from which modules are built) are also the mechanism by
which Perl's object-oriented features are implemented. But
object-oriented programming isn't for everyone, and there's nothing in
packages that forces the programmer to work with the object-oriented
paradigm.</P
><div class="sect1"><h2 class="sect1"><a class="title" name="PNUT-CH-7-SECT-1">7.1 Namespaces and Packages</A
></H2
><p class="para"><a class="indexterm" name="PNUT-CH-7-IX-PACKAGES"></A
><a class="indexterm" name="PNUT-CH-7-IX-NAMESPACES"></A
><a class="indexterm" name="PNUT-CH-7-IX-MEMORY"></A
>A namespace does what it says: it <em class="emphasis">stores</EM
> names (or identifiers),
including names of variables, subroutines, filehandles, and formats.<a class="indexterm" name="AUTOID-12253"></A
>
Each namespace has its own <em class="emphasis">symbol table</EM
>, which is basically a
hash with a key for each identifier.</P
><p class="para"><a class="indexterm" name="AUTOID-12257"></A
>The default namespace for programs is <code class="literal">main</CODE
>, but you may
define other namespaces and variables and use them in your program.
Variables in different namespaces can even have the same name, but
they are completely distinct from one another.</P
><p class="para"><a class="indexterm" name="AUTOID-12261"></A
>In Perl, a namespace is held in a <em class="emphasis">package</EM
>. By convention,
package names start with a capital letter, and you should follow that
convention when you create your own packages. <a class="indexterm" name="AUTOID-12265"></A
></P
><p class="para">Each package<a class="indexterm" name="AUTOID-12268"></A
><a class="indexterm" name="AUTOID-12270"></A
>
starts with a <code class="literal">package</CODE
> declaration. The <code class="literal">package</CODE
> call
takes one argument, the name of the package. Within the scope of a
package declaration, all regular identifiers are created within that
package (except for <code class="literal">my</CODE
> variables).</P
><p class="para"><a class="indexterm" name="AUTOID-12277"></A
><a class="indexterm" name="AUTOID-12280"></A
>From inside one package, you can refer to variables from another
package by &quot;qualifying&quot; them with the package name. To do this, place
the name of the package followed by two colons (<code class="literal">::</CODE
>) before the
identifier's name, i.e., <code class="literal">$Package::varname</CODE
>.</P
><p class="para">If the package name is null, the <code class="literal">main</CODE
> package is assumed. For
example, <code class="literal">$var</CODE
> and <code class="literal">$::var</CODE
> are the same 
as <code class="literal">$main::var</CODE
>. </P
><p class="para">Packages may be nested inside other packages. However, the package name
must still be fully qualified. For example, if the package
<code class="literal">Province</CODE
> is declared inside the package <code class="literal">Nation</CODE
>, a
variable in the Province package is called as
<code class="literal">$Nation::Province::var</CODE
>. You cannot use a &quot;relative&quot; package
name such as <code class="literal">$Province::var</CODE
> within the <code class="literal">Nation</CODE
> package
for the same thing. </P
><p class="para">The default <code class="literal">main</CODE
> namespace contains all
other packages within it.<a class="indexterm" name="AUTOID-12298"></A
><a class="indexterm" name="AUTOID-12299"></A
><a class="indexterm" name="AUTOID-12300"></A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="PART" href="part03.htm" title="III. Modules"><img src="../gifs/txtpreva.gif" alt="Previous: III. Modules" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl in a Nutshell"><img src="../gifs/txthome.gif" alt="Perl in a Nutshell" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch07_02.htm" title="7.2 Modules"><img src="../gifs/txtnexta.gif" alt="Next: 7.2 Modules" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">III. Modules</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">7.2 Modules</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
