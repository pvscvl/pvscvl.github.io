<html><head>
<title>[Chapter 8] 8.119 overload</TITLE>
<meta name="DC.title" content="Perl in a Nutshell"><meta name="DC.creator" content="Ellen Siever, Stephen Spainhour &amp; Nathan Patwardhan"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:50:39Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-286-7" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch08_01.htm" title="8. Standard Modules"><link rel="prev" href="ch08_118.htm" title="8.118 ops"><link rel="next" href="ch08_120.htm" title="8.120 Pod::Functions"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl in a Nutshell" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,71" href="index.htm" alt="Perl in a Nutshell"><area shape="RECT" coords="467,0,514,18" href="../search/nsrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch08_118.htm" title="8.118 ops"><img src="../gifs/txtpreva.gif" alt="Previous: 8.118 ops" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch08_01.htm" title="8. Standard Modules">Chapter 8<br>Standard Modules</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch08_120.htm" title="8.120 Pod::Functions"><img src="../gifs/txtnexta.gif" alt="Next: 8.120 Pod::Functions" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="PNUT-CH-SECT-119">8.119 overload</A
></H2
><p class="para"><a class="indexterm" name="AUTOID-20144"></A
>Lets you substitute class methods or your own subroutines
for standard Perl operators.  For example, the code:


<blockquote class="screen"><pre class="screen">package Number;
use overload
    &quot;+&quot;  =&gt; \add,
    &quot;*=&quot; =&gt; &quot;muas&quot;;</PRE
></BLOCKQUOTE
>


declares function <code class="literal">add</CODE
> for addition and method
<code class="literal">muas</CODE
> in the Number class (or one of its base classes) for
the assignment form <code class="literal">*=</CODE
> of multiplication.</P
><p class="para">Arguments to <code class="literal">use overload</CODE
> are key/value pairs,
where the key is the operation being overloaded, and the value is
the function or method that is to be substituted.  Legal values
are values permitted inside a <code class="literal">&amp;{ ... }</CODE
> call, so a
subroutine name, a subroutine reference, or an anonymous subroutine are
all legal.  Legal keys (overloadable operations) are:

</P
><table class="informaltable" border="1" cellpadding="3"><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1">Type</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Operations</TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">Arithmetic</TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">+ - * / % ** &lt;&lt; &gt;&gt; x .</CODE
> 
<code class="literal">+= -= *= /= %= **= &lt;&lt;= &gt;&gt;= x= .=</CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">Comparison</TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">&lt; &lt;= &gt; &gt;= == != &lt;=&gt;</CODE
>
<code class="literal">lt le gt ge eq ne cmp</CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">Bit and unary</TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">% ^ | neg ! ~</CODE
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">Increment, decrement</TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">++ -</CODE
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">Transcendental</TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">atan2 cos sin exp abs log sqrt</CODE
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"> 
Boolean, string, numeric conversion</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">bool</CODE
> <code class="literal">&quot;&quot;</CODE
> <code class="literal">0+</CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">Special</TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">nomethod fallback =</CODE
></TD
></TR
></TBODY
></TABLE
><p class="para">
The functions specified with the <code class="literal">use overload</CODE
> directive are
typically called with three arguments.  If the corresponding operation is
binary, then the first two arguments are the two arguments of the operation.
However, the first argument should
always be an object in the package, so in some cases, the order
of the arguments will be interchanged before the method is called. The
third argument provides information on the order and can have these
values:</P
><dl class="variablelist"><dt class="term">false (<code class="literal">0</CODE
>)</DT
><dd class="listitem"><p class="para">The order of arguments is as in the current operation.</P
></DD
><dt class="term">true (<code class="literal">1</CODE
>)</DT
><dd class="listitem"><p class="para">The arguments are reversed.</P
></DD
><dt class="term">undefined</DT
><dd class="listitem"><p class="para">The current operation is an assignment variant, but the usual 
function is called instead.</P
></DD
></DL
><p class="para">Unary operations are considered binary operations with the second argument 
undefined.</P
><p class="para">The special <code class="literal">nomethod</CODE
> key should be followed by a reference to a
function of four parameters and called when the overloading
mechanism cannot find a method for some operation. The first three arguments
are the arguments for the corresponding method if it
were found; the fourth argument is the symbol corresponding to the missing
method.  If several methods are tried, the last one is used.  </P
><p class="para">For example, <code class="literal">1-$a</CODE
> can be equivalent to:


<blockquote class="screen"><pre class="screen">&amp;nomethodMethod($a, 1, 1, &quot;-&quot;)</PRE
></BLOCKQUOTE
>


if the pair <code class="literal">&quot;nomethod&quot;</CODE
> <code class="literal">=&gt;</CODE
> <code class="literal">&quot;nomethodMethod&quot;</CODE
> was specified 
in the <code class="literal">use overload</CODE
> directive.</P
><p class="para">The special <code class="literal">fallback</CODE
> key governs what to do if a method for a
particular operation is not found.  There are three possible cases,
depending on the value associated with the <code class="literal">fallback</CODE
> key:</P
><dl class="variablelist"><dt class="term">undefined</DT
><dd class="listitem"><p class="para">Tries to use a substituted method.
If that fails, it tries to call the method
specified for <code class="literal">nomethod</CODE
>; if that also fails, an exception is raised.</P
></DD
><dt class="term">true</DT
><dd class="listitem"><p class="para">The same as undefined, but no exception is raised.  Instead,
Perl silently reverts to non-overloaded operation.</P
></DD
><dt class="term">defined, but false</DT
><dd class="listitem"><p class="para">Tries to call the method specified
for <code class="literal">nomethod</CODE
>; if that fails, an exception is raised.</P
></DD
></DL
><p class="para">The overload module provides the following public functions:</P
><ul class="nutlist"><li class="term"><a class="nutentry" href="c08_319.htm" title="Reference: StrVal">StrVal</A
></LI
><li class="term"><a class="nutentry" href="c08_320.htm" title="Reference: Overloaded">Overloaded</A
></LI
><li class="term"><a class="nutentry" href="c08_321.htm" title="Reference: Method">Method</A
></LI
></UL
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch08_118.htm" title="8.118 ops"><img src="../gifs/txtpreva.gif" alt="Previous: 8.118 ops" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl in a Nutshell"><img src="../gifs/txthome.gif" alt="Perl in a Nutshell" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch08_120.htm" title="8.120 Pod::Functions"><img src="../gifs/txtnexta.gif" alt="Next: 8.120 Pod::Functions" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">8.118 ops</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">8.120 Pod::Functions</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
