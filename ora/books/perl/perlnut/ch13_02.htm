<html><head>
<title>[Chapter 13] 13.2 The IO::Socket Module</TITLE>
<meta name="DC.title" content="Perl in a Nutshell"><meta name="DC.creator" content="Ellen Siever, Stephen Spainhour &amp; Nathan Patwardhan"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:56:23Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-286-7" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch13_01.htm" title="13. Sockets"><link rel="prev" href="ch13_01.htm" title="13.1 Built-in Socket Functions"><link rel="next" href="ch14_01.htm" title="14. Email Connectivity"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl in a Nutshell" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,71" href="index.htm" alt="Perl in a Nutshell"><area shape="RECT" coords="467,0,514,18" href="../search/nsrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch13_01.htm" title="13.1 Built-in Socket Functions"><img src="../gifs/txtpreva.gif" alt="Previous: 13.1 Built-in Socket Functions" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch13_01.htm" title="13. Sockets">Chapter 13<br>Sockets</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="CHAPTER" href="ch14_01.htm" title="14. Email Connectivity"><img src="../gifs/txtnexta.gif" alt="Next: 14. Email Connectivity" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="PNUT-CH-13-SECT-2">13.2 The IO::Socket Module</A
></H2
><p class="para"><a class="indexterm" name="PNUT-CH-13-IX-SOCKETS-IOSOCKET-MODULE"></A
><a class="indexterm" name="PNUT-CH-13-IX-NETWORKING-SOCKETS-IOSOCKET-MODULE"></A
><a class="indexterm" name="PNUT-CH-13-IX-IOSOCKET-MODULE"></A
>The IO::Socket module included in the core Perl distribution
provides an object-oriented approach to socket programming.
This module provides a convenient way to handle the large number of options you
have to deal with, and it
handles the laborious task of forming addresses.
IO::Socket is built upon the Socket module 
provided in the standard library. It inherits from IO::Handle, 
which supports a class of filehandle objects for much
of the IO library.  The following IO::Socket functions are simply frontends
for the corresponding built-in functions and use
the same syntax:


<blockquote class="screen"><pre class="screen">socket
socketpair
bind
listen
send
recv
peername (same as getpeername)
sockname (same as getsockname)</PRE
></BLOCKQUOTE
>

<a class="indexterm" name="AUTOID-28454"></A
>
The <code class="literal">accept</CODE
> function in IO::Socket is slightly different from the
equivalent function, however, and is described later in the chapter.</P
><p class="para">IO:Socket contains two subclasses: INET and UNIX. The INET subclass 
is used to create and manipulate
Internet-domain sockets, such as the ones used in the examples. The UNIX 
subclass creates Unix domain sockets.</P
><div class="sect2"><h3 class="sect2"><a class="title" name="PNUT-CH-13-SECT-2.1">13.2.1 Client-Side Sockets</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-28462"></A
><a class="indexterm" name="AUTOID-28464"></A
>IO::Socket greatly simplifies the implementation of a socket for client communications.
The following example creates an Internet-domain socket (using the INET 
subclass) and attempts to connect to the specified server:


<blockquote class="screen"><pre class="screen">use IO::Socket;
$sock = new IO::Socket::INET (PeerAddr =&gt; 'www.ora.com',
                              PeerPort =&gt; 80,
                              Proto    =&gt; 'tcp');
die &quot;$!&quot; unless $sock;</PRE
></BLOCKQUOTE
>


<code class="literal">IO::Socket::INET::new</CODE
> creates an object containing a socket filehandle
and connects it to the host and port specified in
<code class="literal">PeerAddr</CODE
> and <code class="literal">PeerPort</CODE
>. The object <code class="literal">$sock</CODE
> can 
then be written to and read from like other socket filehandles.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PNUT-CH-13-SECT-2.2">13.2.2 Server-Side Sockets</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-28475"></A
><a class="indexterm" name="AUTOID-28477"></A
>On the server side, IO::Socket provides a nice wrapper for creating 
server sockets. The wrapper encompasses
the <code class="literal">socket</CODE
>, <code class="literal">bind</CODE
>, and <code class="literal">listen</CODE
> procedures, while creating a new
IO::Socket object. For example, we can create an Internet-domain socket with
<code class="literal">IO::Socket::INET</CODE
>:


<blockquote class="screen"><pre class="screen">use IO::Socket;
$sock = new IO::Socket::INET (LocalAddr =&gt; 'maude.ora.com',
                              LocalPort =&gt; 8888,
                              Proto     =&gt; 'tcp',
                              Listen    =&gt; 5);
die &quot;$!&quot; unless $sock;</PRE
></BLOCKQUOTE
>


The parameters for the new socket object determine whether it is
a server or a client socket.  Because we're creating a server socket, 
<code class="literal">LocalAddr</CODE
> and <code class="literal">LocalPort</CODE
> 
provide the address and port to bind to the socket. The <code class="literal">Listen</CODE
> parameter
gives the queue size for the number of client requests that can wait for an
<code class="literal">accept</CODE
> at any one time.</P
><p class="para"><a class="indexterm" name="AUTOID-28490"></A
>When the server receives a client request, it calls
the <code class="literal">accept</CODE
> method on the socket
object. This creates a new socket object on which the rest of the communication
can take place:


<blockquote class="screen"><pre class="screen">$new_sock = $sock-&gt;accept();</PRE
></BLOCKQUOTE
>


When communication is finished on both client and server sockets, they should
be destroyed with <code class="literal">close</CODE
>. If a socket is not properly closed, the next
time you attempt to use a socket with the same name, the system will complain
that the socket is already in use.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PNUT-CH-13-SECT-2.3">13.2.3 IO::Socket Methods</A
></H3
><p class="para">The following methods are defined in IO::Socket and can be used on socket objects of 
either the INET or UNIX class:
<ul class="nutlist"><li class="term"><a class="nutentry" href="c13_007.htm" title="Reference: accept">accept</A
></LI
><li class="term"><a class="nutentry" href="c13_008.htm" title="Reference: timeout">timeout</A
></LI
><li class="term"><a class="nutentry" href="c13_009.htm" title="Reference: sockopt">sockopt</A
></LI
><li class="term"><a class="nutentry" href="c13_010.htm" title="Reference: sockdomain">sockdomain</A
></LI
><li class="term"><a class="nutentry" href="c13_011.htm" title="Reference: socktype">socktype</A
></LI
><li class="term"><a class="nutentry" href="c13_012.htm" title="Reference: protocol">protocol</A
></LI
></UL
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PNUT-CH-13-SECT-2.4">13.2.4 IO::Socket::INET Reference</A
></H3
><p class="para"><a class="indexterm" name="PNUT-CH-13-IX-SOCKETS-IOSOCKET-MODULE-IOSOCKETINET-SUBCLASS"></A
><a class="indexterm" name="PNUT-CH-13-IX-NETWORKING-SOCKETS-IOSOCKETINET-SUBCLASS"></A
><a class="indexterm" name="PNUT-CH-13-IX-IOSOCKET-MODULE-IOSOCKETINET-SUBCLASS"></A
>An Internet-domain socket is created with the <code class="literal">new</CODE
> method from
the IO::Socket::INET subclass.
The constructor can take the following options:</P
><dl class="variablelist"><dt class="term"><code class="literal">PeerAddr =&gt;</CODE
> <code class="replaceable"><i>hostname</I
></CODE
><code class="literal">[:</CODE
><code class="replaceable"><i>port</I
></CODE
><code class="literal">]</CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-28582"></A
>Specifies the remote host and optional port number for a client connection.
<code class="replaceable"><i>hostname</I
></CODE
> can be either a name, like <a class="systemitem.sitename" href="../../../../../../../www.oreilly.com/">www.oreilly.com</A
>,
or an IP number of the form 207.44.21.2.</P
></DD
><dt class="term"><code class="literal">PeerPort =&gt;</CODE
> <code class="replaceable"><i>port</I
></CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-28592"></A
>Specifies the port number on the remote host for a client connection. The
name of the service (such as <code class="literal">http</CODE
> or <code class="literal">nntp</CODE
>) 
may be used for the argument if the port number is not known.</P
></DD
><dt class="term"><code class="literal">LocalAddr =&gt; <code class="replaceable"><i>hostname</I
></CODE
>[:<code class="replaceable"><i>port</I
></CODE
>]</CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-28603"></A
>Specifies the local address (and optional port number) to bind to a server-side socket.</P
></DD
><dt class="term"><code class="literal">LocalPort =&gt;</CODE
> <code class="replaceable"><i>port</I
></CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-28611"></A
>Specifies the local port number (or service name) to bind to a server-side socket.</P
></DD
><dt class="term"><code class="literal">Proto =&gt;</CODE
> <code class="replaceable"><i>name</I
></CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-28619"></A
>Specifies the protocol to be run on the socket, i.e., <code class="literal">tcp</CODE
> or <code class="literal">udp</CODE
>.</P
></DD
><dt class="term"><code class="literal">Type =&gt; SOCK_STREAM | SOCK_DGRAM</CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-28628"></A
>Specifies the type of socket. <code class="literal">SOCK_STREAM</CODE
> indicates a stream-based socket connection,
and <code class="literal">SOCK_DGRAM</CODE
> indicates a message-based (datagram) connection.</P
></DD
><dt class="term"><code class="literal">Listen =&gt;</CODE
> <code class="replaceable"><i>n</I
></CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-28639"></A
>Sets the listen-queue size to <code class="replaceable"><i>n</I
></CODE
> number of client requests.</P
></DD
><dt class="term"><code class="literal">Reuse =&gt; 1</CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-28648"></A
>Given a non-zero number, this option allows the local bind address to
be reused should the socket need to be reopened after an error.</P
></DD
><dt class="term"><code class="literal">Timeout =&gt;</CODE
> <code class="replaceable"><i>n</I
></CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-28656"></A
>Sets the timeout.</P
></DD
></DL
><p class="para">Whether a server (receiving) or client (requesting) socket is created depends
on the parameters provided to the constructor. If <code class="literal">Listen</CODE
> is defined, a
server socket is automatically created.  If no protocol is specified, it is 
derived from the service on the given port
number. If no port number is given, <code class="literal">tcp</CODE
> is used by default.</P
><div class="sect3"><h4 class="sect3"><a class="title" name="PNUT-CH-13-SECT-2.4.1">13.2.4.1 IO::Socket::INET methods</A
></H4
><p class="para">The following methods can be used on socket filehandle objects created by
IO::Socket::INET:
<ul class="nutlist"><li class="term"><a class="nutentry" href="c13_013.htm" title="Reference: sockaddr">sockaddr</A
></LI
><li class="term"><a class="nutentry" href="c13_014.htm" title="Reference: sockport">sockport</A
></LI
><li class="term"><a class="nutentry" href="c13_015.htm" title="Reference: sockhost">sockhost</A
></LI
><li class="term"><a class="nutentry" href="c13_016.htm" title="Reference: peeraddr">peeraddr</A
></LI
><li class="term"><a class="nutentry" href="c13_017.htm" title="Reference: peerport">peerport</A
></LI
><li class="term"><a class="nutentry" href="c13_018.htm" title="Reference: peerhost">peerhost</A
></LI
></UL
><a class="indexterm" name="AUTOID-28707"></A
><a class="indexterm" name="AUTOID-28708"></A
><a class="indexterm" name="AUTOID-28709"></A
></P
></DIV
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PNUT-CH-13-SECT-2.5">13.2.5 IO::Socket::UNIX Reference</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-28713"></A
><a class="indexterm" name="AUTOID-28716"></A
><a class="indexterm" name="AUTOID-28720"></A
>The IO::Socket::UNIX subclass creates a Unix-domain socket. 
Unix-domain sockets are local to the current host and are used internally to 
implement pipes, thus providing communication between unrelated processes. 
Using
sockets provides finer control than using named pipes, also 
called FIFO (first-in, first-out) buffers. This is because
receiving sockets can distinguish between different client
connections, which can then be assigned to different sessions 
with the <code class="literal">accept</CODE
> call.</P
><p class="para">The IO::Socket::UNIX constructor (<code class="literal">new()</CODE
>) creates the socket and returns an
object containing a filehandle. The constructor can take the following options:</P
><dl class="variablelist"><dt class="term"><code class="literal">Type =&gt; SOCK_STREAM | SOCK_DGRAM</CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-28732"></A
>Indicates the type of socket: <code class="literal">SOCK_STREAM</CODE
> for streaming, <code class="literal">SOCK_DGRAM</CODE
> for packets or datagrams.</P
></DD
><dt class="term"><code class="literal">Local =&gt;</CODE
> <code class="replaceable"><i>pathname</I
></CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-28743"></A
>Provides the pathname of the FIFO buffer to bind to the socket.</P
></DD
><dt class="term"><code class="literal">Peer =&gt;</CODE
> <code class="replaceable"><i>pathname</I
></CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-28751"></A
>Provides the pathname to the destination FIFO buffer.</P
></DD
><dt class="term"><code class="literal">Listen =&gt;</CODE
> <code class="replaceable"><i>n</I
></CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-28759"></A
>Creates a listen socket and sets the queue size to <code class="replaceable"><i>n</I
></CODE
>.</P
></DD
></DL
><p class="para">The following methods can be used on an object created with IO::Socket::UNIX.
<ul class="nutlist"><li class="term"><a class="nutentry" href="c13_019.htm" title="Reference: hostpath"><b class="emphasis.bold">hostpath</B
></A
></LI
><li class="term"><a class="nutentry" href="c13_020.htm" title="Reference: peerpath"><b class="emphasis.bold">peerpath</B
></A
></LI
></UL
><a class="indexterm" name="AUTOID-28783"></A
><a class="indexterm" name="AUTOID-28784"></A
><a class="indexterm" name="AUTOID-28785"></A
><a class="indexterm" name="AUTOID-28786"></A
><a class="indexterm" name="AUTOID-28787"></A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch13_01.htm" title="13.1 Built-in Socket Functions"><img src="../gifs/txtpreva.gif" alt="Previous: 13.1 Built-in Socket Functions" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl in a Nutshell"><img src="../gifs/txthome.gif" alt="Perl in a Nutshell" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="CHAPTER" href="ch14_01.htm" title="14. Email Connectivity"><img src="../gifs/txtnexta.gif" alt="Next: 14. Email Connectivity" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">13.1 Built-in Socket Functions</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">14. Email Connectivity</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
