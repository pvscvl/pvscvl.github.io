<html><head>
<title>[Chapter 8] 8.123 POSIX</TITLE>
<meta name="DC.title" content="Perl in a Nutshell"><meta name="DC.creator" content="Ellen Siever, Stephen Spainhour &amp; Nathan Patwardhan"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:51:04Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-286-7" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch08_01.htm" title="8. Standard Modules"><link rel="prev" href="ch08_122.htm" title="8.122 Pod::Text"><link rel="next" href="ch08_124.htm" title="8.124 re"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl in a Nutshell" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,71" href="index.htm" alt="Perl in a Nutshell"><area shape="RECT" coords="467,0,514,18" href="../search/nsrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch08_122.htm" title="8.122 Pod::Text"><img src="../gifs/txtpreva.gif" alt="Previous: 8.122 Pod::Text" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch08_01.htm" title="8. Standard Modules">Chapter 8<br>Standard Modules</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch08_124.htm" title="8.124 re"><img src="../gifs/txtnexta.gif" alt="Next: 8.124 re" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="PNUT-CH-SECT-123">8.123 POSIX</A
></H2
><p class="para"><a class="indexterm" name="AUTOID-20321"></A
>Provides access to standard POSIX 1003.1 identifiers: functions,
classes, and constants. Can be <code class="literal">use</CODE
>d to
import one or multiple symbols:


<blockquote class="screen"><pre class="screen">use POSIX;                        # import all symbols
use POSIX qw(setsid);             # import one symbol
use POSIX qw(:errno_h :fcntl_h);  # import sets of symbols</PRE
></BLOCKQUOTE
>


Functions listed as C-specific are not implemented.

</P
><table class="informaltable" border="1" cellpadding="3"><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">_exit</I
></TD
><td class="entry" rowspan="1" colspan="1">Identical to C function <code class="literal">_exit(2)</CODE
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">abort</I
></TD
><td class="entry" rowspan="1" colspan="1">Identical to C function <code class="literal">abort(3)</CODE
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">abs</I
></TD
><td class="entry" rowspan="1" colspan="1">Identical to Perl's <code class="literal">abs</CODE
> function</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">access</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"> 
Determines accessibility of a file; returns <code class="literal">undef</CODE
> on failure</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">acos</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to C function <code class="literal">acos(3)</CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">alarm</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to Perl's <code class="literal">alarm</CODE
> function</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">asctime</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to C function <code class="literal">asctime(3)</CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">asin</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to C function <code class="literal">asin(3)</CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">assert</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Similar to C macro <code class="literal">assert(3)</CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">atan</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to C function <code class="literal">atan(3)</CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">atan2</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to Perl's <code class="literal">atan2</CODE
> function</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">atexit</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">C-specific; use <code class="literal">END {}</CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">atof</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">C-specific</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">atoi</I
></TD
><td class="entry" rowspan="1" colspan="1">C-specific</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">atol</I
></TD
><td class="entry" rowspan="1" colspan="1">C-specific</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">bsearch</I
></TD
><td class="entry" rowspan="1" colspan="1">Not supplied</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">calloc</I
></TD
><td class="entry" rowspan="1" colspan="1">C-specific</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">ceil</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to C function <code class="literal">ceil(3)</CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">chdir</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to Perl's <code class="literal">chdir</CODE
> function</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">chmod</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to Perl's <code class="literal">chmod</CODE
> function</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">chown</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to Perl's <code class="literal">chown</CODE
> function</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">clearerr</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Uses method <code class="literal">FileHandle::clearerr</CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">clock</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to C function <code class="literal">clock(3)</CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">close</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Closes a file; returns <code class="literal">undef</CODE
> on failure</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">closedir</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to Perl's <code class="literal">closedir</CODE
> function</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">cos</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to Perl's <code class="literal">cos</CODE
> function</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">cosh</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to C function <code class="literal">cosh(3)</CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">creat</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Creates a new file</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">ctermid</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Generates path name for the controlling terminal</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">ctime</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to C function <code class="literal">ctime(3)</CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">cuserid</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Gets user's login name</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">difftime</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to C function <code class="literal">difftime(3)</CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">div</I
></TD
><td class="entry" rowspan="1" colspan="1">C-specific</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">dup</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"> 
Similar to C function <code class="literal">dup(2)</CODE
>; returns <code class="literal">undef</CODE
> on failure</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">dup2</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"> 
Similar to C function <code class="literal">dup2(2)</CODE
>; returns <code class="literal">undef</CODE
> on failure</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">errno</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Returns the value of <code class="literal">errno</CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">execl</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">C-specific; use Perl's <code class="literal">exec</CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">execle</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">C-specific; use Perl's <code class="literal">exec</CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">execlp</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">C-specific; use Perl's <code class="literal">exec</CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">execv</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">C-specific; use Perl's <code class="literal">exec</CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">execve</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">C-specific; use Perl's <code class="literal">exec</CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">execvp</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">C-specific; use Perl's <code class="literal">exec</CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">exit</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to Perl's <code class="literal">exit</CODE
> function</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">exp</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to Perl's <code class="literal">exp</CODE
> function</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">fabs</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to Perl's <code class="literal">abs</CODE
> function</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">fclose</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Uses method <code class="literal">FileHandle::close</CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">fcntl</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to Perl's <code class="literal">fcntl</CODE
> function</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">fdopen</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Uses method <code class="literal">FileHandle::new_from_fd</CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">feof</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Uses method <code class="literal">FileHandle::eof</CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">ferror</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Uses method <code class="literal">FileHandle::error</CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">fflush</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Uses method <code class="literal">FileHandle::flush</CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">fgetc</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Uses method <code class="literal">FileHandle::getc</CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">fgetpos</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Uses method <code class="literal">FileHandle::getpos</CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">fgets</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Uses method <code class="literal">FileHandle::gets</CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">fileno</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Uses method <code class="literal">FileHandle::fileno</CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">floor</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to C function <code class="literal">floor(3)</CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">fmod</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to C function <code class="literal">fmod(3)</CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">fopen</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Uses method <code class="literal">FileHandle::open</CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">fork</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to Perl's <code class="literal">fork</CODE
> function</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">fpathconf</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"> 
Returns value of a configurable limit on a file or directory,
or <code class="literal">undef</CODE
> on failure</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">fprintf</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">C-specific; use Perl's <code class="literal">printf</CODE
> function</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">fputc</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">C-specific; use Perl's <code class="literal">print</CODE
> function</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">fputs</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">C-specific; use Perl's <code class="literal">print</CODE
> function</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">fread</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">C-specific; use Perl's <code class="literal">read</CODE
> function</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">free</I
></TD
><td class="entry" rowspan="1" colspan="1">C-specific</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">freopen</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">C-specific; use Perl's <code class="literal">open</CODE
> function</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">frexp</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Returns mantissa and exponent of a floating-point number</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">fscanf</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">C-specific; use <code class="literal">&lt;&gt;</CODE
> and regular expressions</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">fseek</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Uses method <code class="literal">FileHandle::seek</CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">fsetpos</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Uses method <code class="literal">FileHandle::setpos</CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">fstat</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Gets file status</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">ftell</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Uses method <code class="literal">FileHandle::tell</CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">fwrite</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">C-specific; use Perl's <code class="literal">print</CODE
> function</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">getc</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to Perl's <code class="literal">etc</CODE
> function</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">getchar</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Returns one character from STDIN</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">getcwd</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Returns name of current working directory</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">getegid</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Returns effective group ID (<em class="emphasis">gid</EM
>)</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">getenv</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"> 
Returns value of the specified environment variable</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">geteuid</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Returns the effective user ID (<em class="emphasis">uid</EM
>)</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">getgid</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Returns the user's real group ID (<em class="emphasis">gid</EM
>)</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">getgrgid</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to Perl's <code class="literal">getgrgid</CODE
> function</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">getgrnam</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to Perl's <code class="literal">getgrnam</CODE
> function</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">getgroups</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Returns ids of the user's supplementary groups</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">getlogin</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to Perl's <code class="literal">getlogin</CODE
> function</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">getpgrp</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to Perl's <code class="literal">getpgrp</CODE
> function</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">getpid</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Returns ID of the process (<em class="emphasis">pid</EM
>)</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">getppid</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to Perl's <code class="literal">getppid</CODE
> function</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">getpwnam</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to Perl's <code class="literal">getpwnam</CODE
> function</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">getpwuid</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to Perl's <code class="literal">getpwuid</CODE
> function</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">gets</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Returns one line from STDIN</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">getuid</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Returns user's ID (<em class="emphasis">uid</EM
>)</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">gmtime</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to Perl's <code class="literal">gmtime</CODE
> function</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">isalnum</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"> 
Identical to C function, but can apply to one
character or a whole string</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">isalpha</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"> 
Identical to C function, but can apply to one
character or a whole string</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">isatty</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"> 
Returns Boolean indicating whether the specified filehandle is connected
to a TTY</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">iscntrl</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"> 
Identical to C function, but can apply to one
character or a whole string</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">isdigit</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"> 
Identical to C function, but can apply to one
character or a whole string</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">isgraph</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"> 
Identical to C function, but can apply to one
character or a whole string</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">islower</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"> 
Identical to C function, but can apply to one
character or a whole string</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">isprint</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"> 
Identical to C function, but can apply to one
character or a whole string</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">ispunct</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"> 
Identical to C function, but can apply to one
character or a whole string</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">isspace</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"> 
Identical to C function, but can apply to one
character or a whole string</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">isupper</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"> 
Identical to C function, but can apply to one
character or a whole string</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">isxdigit</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"> 
Identical to C function, but can apply to one
character or a whole string</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">kill</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to Perl's <code class="literal">kill</CODE
> function</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">labs</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">C-specific; use Perl's <code class="literal">abs</CODE
> function</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">ldexp</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to C function <code class="literal">ldexp(3)</CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">ldiv</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"> 
C-specific; use division operator (<code class="literal">/</CODE
>) and Perl's <code class="literal">int</CODE
>
function</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">link</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to Perl's <code class="literal">link</CODE
> function</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">localeconv</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"> 
Gets numeric formatting information.  Returns reference to a hash
containing the current locale formatting values.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">localtime</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to Perl's <code class="literal">localtime</CODE
> function</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">log</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to Perl's <code class="literal">log</CODE
> function</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">log10</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to C function <code class="literal">log10(3)</CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">longjmp</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">C-specific; use Perl's <code class="literal">die</CODE
> function</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">lseek</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"> 
Moves the read/write file pointer; returns <code class="literal">undef</CODE
> on failure</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">malloc</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">C-specific</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">mblen</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to C function <code class="literal">mblen(3)</CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">mbstowcs</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to C function <code class="literal">mbstowcs(3)</CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">mbtowc</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to C function <code class="literal">mbtowc(3)</CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">memchr</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">C-specific; use Perl's <code class="literal">index</CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">memcmp</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">C-specific; use <code class="literal">eq</CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">memcpy</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">C-specific; use <code class="literal">=</CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">memmove</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">C-specific; use <code class="literal">=</CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">memset</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">C-specific; use <code class="literal">x</CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">mkdir</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to Perl's <code class="literal">mkdir</CODE
> function</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">mkfifo</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Similar to C function <code class="literal">mkfifo(2)</CODE
>; returns <code class="literal">undef</CODE
> on failure</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">mktime</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"> 
Converts date/time information to a calendar time; returns <code class="literal">undef</CODE
> on failure</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">modf</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"> 
Returns integral and fractional parts of a floating-point number</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">nice</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"> 
Similar to C function <code class="literal">nice(3)</CODE
>; returns <code class="literal">undef</CODE
> on failure</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">offsetof</I
></TD
><td class="entry" rowspan="1" colspan="1">C-specific</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">open</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"> 
Opens file for reading or writing; returns <code class="literal">undef</CODE
> on failure</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">opendir</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"> 
Opens directory for reading; returns <code class="literal">undef</CODE
> on failure</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">pathconf</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"> 
Retrieves value of a configurable limit on a file or directory;
returns <code class="literal">undef</CODE
> on failure</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">pause</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"> 
Similar to C function <code class="literal">pause(3)</CODE
>; returns <code class="literal">undef</CODE
> on failure</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">perror</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to C function <code class="literal">perror(3)</CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">pipe</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Creates an interprocess channel</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">pow</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Computes <code class="literal">$x</CODE
> raised to the power <code class="literal">$exponent</CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">printf</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Prints specified arguments to STDOUT</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">putc</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">C-specific; use Perl's <code class="literal">print</CODE
> function</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">putchar</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">C-specific; use Perl's <code class="literal">print</CODE
> function</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">puts</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">C-specific; use Perl's <code class="literal">print</CODE
> function</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">qsort</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">C-specific; use Perl's <code class="literal">sort</CODE
> function</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">raise</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Sends specified signal to current process</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">rand</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Non-portable; use Perl's <code class="literal">rand</CODE
> function</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">read</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Reads from a file; returns <code class="literal">undef</CODE
> on failure</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">readdir</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to Perl's <code class="literal">readdir</CODE
> function</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">realloc</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">C-specific</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">remove</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to Perl's <code class="literal">unlink</CODE
> function</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">rename</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to Perl's <code class="literal">rename</CODE
> function</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">rewind</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Seeks to beginning of file</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">rewinddir</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to Perl's <code class="literal">rewinddir</CODE
> function</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">rmdir</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to Perl's <code class="literal">rmdir</CODE
> function</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">scanf</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">C-specific; use <code class="literal">&lt;&gt;</CODE
> and regular expressions</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">setgid</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Sets real group id for this process</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">setjmp</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">C-specific; use <code class="literal">eval {}</CODE
> </P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">setlocale</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Modifies and queries program's locale</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">setpgid</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"> 
Similar to C function <code class="literal">setpgid(2)</CODE
>; returns <code class="literal">undef</CODE
> on failure</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">setsid</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to C function <code class="literal">setsid(8)</CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">setuid</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Sets real user ID for this process</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">sigaction</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"> 
Detailed signal management; returns <code class="literal">undef</CODE
> on failure</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">siglongjmp</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">C-specific; use Perl's <code class="literal">die</CODE
> function</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">sigpending</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"> 
Examines blocked, pending signals and returns <code class="literal">undef</CODE
> on failure</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">sigprocmask</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"> 
Changes and/or examines this process's signal mask; returns 
<code class="literal">undef</CODE
> on failure</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">sigsetjmp</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">C-specific; use <code class="literal">eval {}</CODE
> </P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">sigsuspend</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"> 
Installs signal mask and suspends process until signal arrives; 
returns <code class="literal">undef</CODE
> on failure</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">sin</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to Perl's <code class="literal">sin</CODE
> function</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">sinh</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to C function <code class="literal">sinh(3)</CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">sleep</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to Perl's <code class="literal">sleep</CODE
> function</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">sprintf</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to Perl's <code class="literal">sprintf</CODE
> function</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">sqrt</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to Perl's <code class="literal">sqrt</CODE
> function</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">srand</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to Perl's <code class="literal">srand</CODE
> function</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">sscanf</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">C-specific; use regular expressions</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">stat</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to Perl's <code class="literal">stat</CODE
> function</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">strcat</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">C-specific; use <code class="literal">.=</CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">strchr</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">C-specific; use <code class="literal">index</CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">strcmp</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">C-specific; use <code class="literal">eq</CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">strcoll</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to C function <code class="literal">strcoll(3)</CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">strcpy</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">C-specific; use <code class="literal">=</CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">strcspn</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">C-specific; use regular expressions</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">strerror</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Returns error string for the specified <code class="literal">errno</CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">strftime</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"> 
Converts date and time to string and returns the string</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">strlen</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">C-specific; use <code class="literal">length</CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">strncat</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">C-specific; use <code class="literal">.=</CODE
> and/or <code class="literal">substr</CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">strncmp</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">C-specific; use <code class="literal">eq</CODE
> and/or <code class="literal">substr</CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">strncpy</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">C-specific; use <code class="literal">=</CODE
> and/or <code class="literal">substr</CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">stroul</I
></TD
><td class="entry" rowspan="1" colspan="1">C-specific</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">strpbrk</I
></TD
><td class="entry" rowspan="1" colspan="1">C-specific</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">strrchr</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">C-specific; use <code class="literal">rindex</CODE
> and/or <code class="literal">substr</CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">strspn</I
></TD
><td class="entry" rowspan="1" colspan="1">C-specific</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">strstr</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to Perl's <code class="literal">index</CODE
> function</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">strtod</I
></TD
><td class="entry" rowspan="1" colspan="1">C-specific</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">strtok</I
></TD
><td class="entry" rowspan="1" colspan="1">C-specific</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">strtol</I
></TD
><td class="entry" rowspan="1" colspan="1">C-specific</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">strtoul</I
></TD
><td class="entry" rowspan="1" colspan="1">C-specific</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">strxfrm</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">String transformation; returns the transformed string</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">sysconf</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"> 
Retrieves values of system configurable variables; 
returns <code class="literal">undef</CODE
> on failure</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">system</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to Perl's <code class="literal">system</CODE
> function</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">tan</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to C function <code class="literal">tan(3)</CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">tanh</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to C function <code class="literal">tanh(3)</CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">tcdrain</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"> 
Similar to C function <code class="literal">tcdrain(3)</CODE
>; returns <code class="literal">undef</CODE
> on failure</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">tcflow</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"> 
Similar to C function <code class="literal">tcflow(3)</CODE
>; returns <code class="literal">undef</CODE
> on failure</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">tcflush</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"> 
Similar to C function <code class="literal">tcflush(3)</CODE
>; returns <code class="literal">undef</CODE
> on failure</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">tcgetpgrp</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to C function <code class="literal">tcgetpgrp(3)</CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">tcsendbreak</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"> 
Similar to C function <code class="literal">tcsendbreak(3)</CODE
>; 
returns <code class="literal">undef</CODE
> on failure</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">tcsetpgrp</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"> 
Similar to C function <code class="literal">tcsetpgrp(3)</CODE
>;
returns <code class="literal">undef</CODE
> on failure</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">time</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to Perl's <code class="literal">time</CODE
> function</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">times</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"> 
Returns, in clock ticks, elapsed realtime since some point in the past,
user and system times for this process, and user
and system times for child processes</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">tmpfile</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Uses method <code class="literal">FileHandle::new_tmpfile</CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">tmpnam</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Returns a name for a temporary file</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">tolower</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to Perl's <code class="literal">lc</CODE
> function</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">toupper</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to Perl's <code class="literal">uc</CODE
> function</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">ttyname</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to C function <code class="literal">ttyname(3)</CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">tzname</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"> 
Retrieves time conversion information from the <code class="literal">tzname</CODE
> variable</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">tzset</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to C function <code class="literal">tzset(3)</CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">umask</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to Perl's <code class="literal">umask</CODE
> function</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">uname</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Gets name of current operating system</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">ungetc</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Uses method <code class="literal">FileHandle::ungetc</CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">unlink</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to Perl's <code class="literal">unlink</CODE
> function</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">utime</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to Perl's <code class="literal">utime</CODE
> function</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">vfprintf</I
></TD
><td class="entry" rowspan="1" colspan="1">C-specific</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">vprintf</I
></TD
><td class="entry" rowspan="1" colspan="1">C-specific</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">vsprintf</I
></TD
><td class="entry" rowspan="1" colspan="1">C-specific</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">wait</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to Perl's <code class="literal">wait</CODE
> function</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">waitpid</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"> 
Waits for child process to change state; identical 
to Perl's <code class="literal">waitpid</CODE
> function</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">wcstombs</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to C function <code class="literal">wcstombs(3)</CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">wctomb</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to C function <code class="literal">wctomb(3)</CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="function">write</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Writes to file; returns <code class="literal">undef</CODE
> on failure</P
></TD
></TR
></TBODY
></TABLE
><p class="para">
The following sections show the classes that are defined and their methods:</P
><div class="sect2"><h3 class="sect2"><a class="title" name="PNUT-CH-8-SECT-123.1">8.123.1 POSIX::SigAction</A
></H3
><ul class="nutlist"><li class="term"><a class="nutentry" href="c08_323.htm" title="Reference: new">new</A
></LI
></UL
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PNUT-CH-8-SECT-123.2">8.123.2 POSIX::SigSet</A
></H3
><ul class="nutlist"><li class="term"><a class="nutentry" href="c08_324.htm" title="Reference: new">new</A
></LI
><li class="term"><a class="nutentry" href="c08_325.htm" title="Reference: addset">addset</A
></LI
><li class="term"><a class="nutentry" href="c08_326.htm" title="Reference: delset">delset</A
></LI
><li class="term"><a class="nutentry" href="c08_327.htm" title="Reference: emptyset">emptyset</A
></LI
><li class="term"><a class="nutentry" href="c08_328.htm" title="Reference: fillset">fillset</A
></LI
><li class="term"><a class="nutentry" href="c08_329.htm" title="Reference: ismember">ismember</A
></LI
></UL
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PNUT-CH-8-SECT-123.3">8.123.3 POSIX::Termios</A
></H3
><ul class="nutlist"><li class="term"><a class="nutentry" href="c08_330.htm" title="Reference: new">new</A
></LI
><li class="term"><a class="nutentry" href="c08_331.htm" title="Reference: getattr">getattr</A
></LI
><li class="term"><a class="nutentry" href="c08_332.htm" title="Reference: getcc">getcc</A
></LI
><li class="term"><a class="nutentry" href="c08_333.htm" title="Reference: getcflag">getcflag</A
></LI
><li class="term"><a class="nutentry" href="c08_334.htm" title="Reference: getiflag">getiflag</A
></LI
><li class="term"><a class="nutentry" href="c08_335.htm" title="Reference: getispeed">getispeed</A
></LI
><li class="term"><a class="nutentry" href="c08_336.htm" title="Reference: getlflag">getlflag</A
></LI
><li class="term"><a class="nutentry" href="c08_337.htm" title="Reference: getoflag">getoflag</A
></LI
><li class="term"><a class="nutentry" href="c08_338.htm" title="Reference: getospeed">getospeed</A
></LI
><li class="term"><a class="nutentry" href="c08_339.htm" title="Reference: setattr">setattr</A
></LI
><li class="term"><a class="nutentry" href="c08_340.htm" title="Reference: setcc">setcc</A
></LI
><li class="term"><a class="nutentry" href="c08_341.htm" title="Reference: setcflag">setcflag</A
></LI
><li class="term"><a class="nutentry" href="c08_342.htm" title="Reference: setiflag">setiflag</A
></LI
><li class="term"><a class="nutentry" href="c08_343.htm" title="Reference: setispeed">setispeed</A
></LI
><li class="term"><a class="nutentry" href="c08_344.htm" title="Reference: setlflag">setlflag</A
></LI
><li class="term"><a class="nutentry" href="c08_345.htm" title="Reference: setoflag">setoflag</A
></LI
><li class="term"><a class="nutentry" href="c08_346.htm" title="Reference: setospeed">setospeed</A
></LI
></UL
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PNUT-CH-8-SECT-123.4">8.123.4 Constants</A
></H3
><p class="para">The following constants are associated with the Termios class:</P
><p class="para"></P
><dl class="variablelist"><dt class="term">Baud rate values</DT
><dd class="listitem"><p class="para">&#13;
<blockquote class="screen"><pre class="screen">B0  B75  B134 B200 B600  B1800 B4800 B19200
B50 B110 B150 B300 B1200 B2400 B9600 B38400</PRE
></BLOCKQUOTE
>
&#13;</P
></DD
><dt class="term">c_cc index values</DT
><dd class="listitem"><p class="para">&#13;
<blockquote class="screen"><pre class="screen">VEOF VERASE VKILL VSUSP  VSTOP VTIME 
VEOL VINTR  VQUIT VSTART VMIN  NCCS</PRE
></BLOCKQUOTE
>
&#13;</P
></DD
><dt class="term">c_cflag field values</DT
><dd class="listitem"><p class="para">&#13;
<blockquote class="screen"><pre class="screen">CLOCAL CSIZE CS6 CS8    HUPCL  PARODD
CREAD  CS5   CS7 CSTOPS PARENB</PRE
></BLOCKQUOTE
>
&#13;</P
></DD
><dt class="term">c_iflag field values</DT
><dd class="listitem"><p class="para">&#13;
<blockquote class="screen"><pre class="screen">BRKINT IGNBRK IGNPAR INPCK  IXOFF PARMRK
ICRNL  IGNCR  INLCR  ISTRIP IXON</PRE
></BLOCKQUOTE
>
&#13;</P
></DD
><dt class="term">c_lflag field values</DT
><dd class="listitem"><p class="para">&#13;
<blockquote class="screen"><pre class="screen">ECHO  ECHONL ISIG  
ECHOE ICANON NOFLSH
ECHOK IEXTEN TOSTOP</PRE
></BLOCKQUOTE
>
&#13;</P
></DD
><dt class="term">c_oflag field values</DT
><dd class="listitem"><p class="para">&#13;
<blockquote class="screen"><pre class="screen">OPOST</PRE
></BLOCKQUOTE
>
&#13;</P
></DD
><dt class="term">Terminal interface values</DT
><dd class="listitem"><p class="para">&#13;
<blockquote class="screen"><pre class="screen">TCSADRAIN TCIOFLUSH TCIFLUSH 
TCSANOW   TCOFLUSH  TCSAFLUSH 
TCOON     TCION     TCIOFF</PRE
></BLOCKQUOTE
>
&#13;</P
></DD
></DL
><p class="para">The following are other constants defined in the POSIX module:</P
><dl class="variablelist"><dt class="term">Pathname constants</DT
><dd class="listitem"><p class="para">&#13;
<blockquote class="screen"><pre class="screen">_PC_CHOWN_RESTRICTED  _PC_LINK_MAX  _PC_MAX_CANON
_PC_MAX_INPUT         _PC_NAME_MAX  _PC_NO_TRUNC
_PC_PATH_MAX          _PC_PIPE_BUF  _PC_VDISABLE</PRE
></BLOCKQUOTE
>
&#13;</P
></DD
><dt class="term">POSIX constants</DT
><dd class="listitem"><p class="para">&#13;
<blockquote class="screen"><pre class="screen">_POSIX_ARG_MAX      _POSIX_CHILD_MAX  _POSIX_CHOWN_RESTRICTED 
_POSIX_JOB_CONTROL  _POSIX_LINK_MAX   _POSIX_MAX_CANON
_POSIX_MAX_INPUT    _POSIX_NAME_MAX   _POSIX_NGROUPS_MAX
_POSIX_NO_TRUNC     _POSIX_OPEN_MAX   _POSIX_PATH_MAX
_POSIX_PIPE_BUF     _POSIX_SAVED_IDS  _POSIX_SSIZE_MAX
_POSIX_STREAM_MAX   _POSIX_TZNAME_MAX _POSIX_VDISABLE  
_POSIX_VERSION</PRE
></BLOCKQUOTE
>
&#13;</P
></DD
><dt class="term">System configuration</DT
><dd class="listitem"><p class="para">&#13;
<blockquote class="screen"><pre class="screen">_SC_ARG_MAX      _SC_CHILD_MAX  _SC_CLK_TCK    _SC_JOB_CONTROL
_SC_NGROUPS_MAX  _SC_OPEN_MAX   _SC_SAVED_IDS  _SC_STREAM_MAX
_SC_TZNAME_MAX   _SC_VERSION</PRE
></BLOCKQUOTE
>
&#13;</P
></DD
><dt class="term">Error constants</DT
><dd class="listitem"><p class="para">&#13;
<blockquote class="screen"><pre class="screen">E2BIG   EACCES  EAGAIN    EBADF   EBUSY   ECHILD  EDEADLK
EDOM    EEXIST  EFAUL     EFBIG   EINTR   EINVAL  
EIO     EISDIR  EMFILE    EMLINK  ENAMETOOLONG    ENFILE  
ENODE   ENOENT  ENOEXEC   ENOLCK  ENOMEM  ENOSPC  
ENOSYS  ENOTDIR ENOTEMPTY ENOTTY  ENXIO   EPERM  
EPIPE   ERANGE  EROFS     ESPIPE  ESRCH   EXDEV</PRE
></BLOCKQUOTE
>
&#13;</P
></DD
><dt class="term">File control constants</DT
><dd class="listitem"><p class="para">&#13;
<blockquote class="screen"><pre class="screen">FD_CLOEXEC  F_DUPFD    F_GETFD   F_GETFL  F_GETLK   F_OK
F_RDLCK     F_SETFD    F_SETFL   F_SETLK  F_SETLKW  F_UNLCK
F_WRLCK     O_ACCMODE  O_APPEND  O_CREAT  O_EXCL    O_NOCTTY
O_NONBLOCK  O_RDONLY   O_RDWR    O_TRUNC  O_WRONLY</PRE
></BLOCKQUOTE
>
&#13;</P
></DD
><dt class="term">Floating-point constants</DT
><dd class="listitem"><p class="para">&#13;
<blockquote class="screen"><pre class="screen">DBL_DIG         DBL_EPSILON     DBL_MANT_DIG  DBL_MAX
DBL_MAX_10_EXP  DBL_MAX_EXP     DBL_MIN       DBL_MIN_10_EXP
DBL_MIN_EXP     FLT_DIG         FLT_EPSILON   FLT_MANT_DIG
FLT_MAX         FLT_MAX_10_EXP  FLT_MAX_EXP   FLT_MIN
FLT_MIN_10_EXP  FLT_MIN_EXP     FLT_RADIX     FLT_ROUNDS
LDBL_DIG        LDBL_EPSILON    LDBL_MANT_DIG LDBL_MAX
LDBL_MAX_10_EXP LDBL_MAX_EXP    LDBL_MIN      LDBL_MIN_10_EXP
LDBL_MIN_EXP</PRE
></BLOCKQUOTE
>
&#13;</P
></DD
><dt class="term">Limit constants</DT
><dd class="listitem"><p class="para">&#13;
<blockquote class="screen"><pre class="screen">ARG_MAX    CHAR_BIT  CHAR_MAX    CHAR_MIN    CHILD_MAX
INT_MAX    INT_MIN   LINK_MAX    LONG_MAX    LONG_MIN
MAX_CANON  MAX_INPUT MB_LEN_MAX  NAME_MAX    NGROUPS_MAX
OPEN_MAX   PATH_MAX  PIPE_BUF    SCHAR_MAX   SCHAR_MIN
SHRT_MAX   SHRT_MIN  SSIZE_MAX   STREAM_MAX  TZNAME_MAX
UCHAR_MAX  UINT_MAX  ULONG_MAX   USHRT_MAX</PRE
></BLOCKQUOTE
>
&#13;</P
></DD
><dt class="term">Locale constants</DT
><dd class="listitem"><p class="para">&#13;
<blockquote class="screen"><pre class="screen">LC_ALL  LC_COLLATE  LC_CTYPE  LC_MONETARY  LC_NUMERIC  LC_TIME</PRE
></BLOCKQUOTE
>
&#13;</P
></DD
><dt class="term">Math constants</DT
><dd class="listitem"><p class="para">&#13;
<blockquote class="screen"><pre class="screen">HUGE_VAL</PRE
></BLOCKQUOTE
>
&#13;</P
></DD
><dt class="term">Signal constants</DT
><dd class="listitem"><p class="para">&#13;
<blockquote class="screen"><pre class="screen">SA_NOCLDSTOP SIGABRT    SIGALRM    SIGCHLD  SIGCONT  SIGFPE
SIGHUP       SIGILL     SIGINT     SIGKILL  SIGPIPE  SIGQUIT
SIGSEGV      SIGSTOP    SIGTERM    SIGTSTP  SIGTTIN  SIGTTOU
SIGUSR1      SIGUSR2    SIG_BLOCK  SIG_DFL  SIG_ERR  SIG_IGN
SIG_SETMASK  SIG_UNBLOCK</PRE
></BLOCKQUOTE
>
&#13;</P
></DD
><dt class="term">Stat constants</DT
><dd class="listitem"><p class="para">&#13;
<blockquote class="screen"><pre class="screen">S_IRGRP  S_IROTH  S_IRUSR  S_IRWXG  S_IRWXO  S_IRWXU  S_ISGID
S_ISUID  S_IWGRP  S_IWOTH  S_IWUSR  S_IXGRP  S_IXOTH  S_IXUSR</PRE
></BLOCKQUOTE
>
&#13;</P
></DD
><dt class="term">Stat macros</DT
><dd class="listitem"><p class="para">&#13;
<blockquote class="screen"><pre class="screen">S_ISBLK  S_ISCHR  S_ISDIR  S_ISFIFO  S_ISREG</PRE
></BLOCKQUOTE
>
&#13;</P
></DD
><dt class="term">Stdlib constants</DT
><dd class="listitem"><p class="para">&#13;
<blockquote class="screen"><pre class="screen">EXIT_FAILURE  EXIT_SUCCESS  MB_CUR_MAX  RAND_MAX</PRE
></BLOCKQUOTE
>
&#13;</P
></DD
><dt class="term">Stdio constants</DT
><dd class="listitem"><p class="para">&#13;
<blockquote class="screen"><pre class="screen">BUFSIZ  EOF  FILENAME_MAX  L_ctermid  L_cuserid  L_tmpname  TMP_MAX</PRE
></BLOCKQUOTE
>
&#13;</P
></DD
><dt class="term">Time constants</DT
><dd class="listitem"><p class="para">&#13;
<blockquote class="screen"><pre class="screen">CLK_TCK  CLOCKS_PER_SEC</PRE
></BLOCKQUOTE
>
&#13;</P
></DD
><dt class="term">Unistd constants</DT
><dd class="listitem"><p class="para">&#13;
<blockquote class="screen"><pre class="screen">R_OK   SEEK_CUR  SEEK_END       SEEK_SET  STDIN_FILENO
STDOUT_FILENO    STRERR_FILENO  W_OK      X_OK</PRE
></BLOCKQUOTE
>
&#13;</P
></DD
><dt class="term">Wait constants</DT
><dd class="listitem"><p class="para">&#13;
<blockquote class="screen"><pre class="screen">WNOHANG  WUNTRACED</PRE
></BLOCKQUOTE
>
&#13;</P
></DD
><dt class="term">Wait macros</DT
><dd class="listitem"><p class="para">&#13;
<blockquote class="screen"><pre class="screen">WIFEXITED  WEXITSTATUS  WIFSIGNALED  WTERMSIG   WIFSTOPPED   WSTOPSIG</PRE
></BLOCKQUOTE
>&#13;</P
></DD
></DL
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch08_122.htm" title="8.122 Pod::Text"><img src="../gifs/txtpreva.gif" alt="Previous: 8.122 Pod::Text" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl in a Nutshell"><img src="../gifs/txthome.gif" alt="Perl in a Nutshell" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch08_124.htm" title="8.124 re"><img src="../gifs/txtnexta.gif" alt="Next: 8.124 re" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">8.122 Pod::Text</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">8.124 re</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
