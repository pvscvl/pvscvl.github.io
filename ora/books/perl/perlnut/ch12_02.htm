<html><head>
<title>[Chapter 12] 12.2 Design of DBI</TITLE>
<meta name="DC.title" content="Perl in a Nutshell"><meta name="DC.creator" content="Ellen Siever, Stephen Spainhour &amp; Nathan Patwardhan"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:56:09Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-286-7" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch12_01.htm" title="12. Databases and Perl"><link rel="prev" href="ch12_01.htm" title="12.1 DBM Databases and DBM Hashes"><link rel="next" href="ch12_03.htm" title="12.3 DBI Methods"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl in a Nutshell" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,71" href="index.htm" alt="Perl in a Nutshell"><area shape="RECT" coords="467,0,514,18" href="../search/nsrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch12_01.htm" title="12.1 DBM Databases and DBM Hashes"><img src="../gifs/txtpreva.gif" alt="Previous: 12.1 DBM Databases and DBM Hashes" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch12_01.htm" title="12. Databases and Perl">Chapter 12<br>Databases and Perl</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch12_03.htm" title="12.3 DBI Methods"><img src="../gifs/txtnexta.gif" alt="Next: 12.3 DBI Methods" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="PNUT-CH-12-SECT-2">12.2 Design of DBI</A
></H2
><p class="para"><a class="indexterm" name="PNUT-CH-12-IX-DBI-MODULE"></A
><a class="indexterm" name="PNUT-CH-12-IX-DATABASES-DBI-MODULE"></A
>If DBM is too primitive for your database requirements,
you'll have to use a more sophisticated database package. 
Options include the commercial products Oracle, Sybase, and
Informix, and the publically-available <em class="emphasis">msql</EM
> and <em class="emphasis">mysql</EM
>.</P
><p class="para">Prior to Perl Version 5 and DBI, the problem was that
with all the database packages to choose from, 
there was no way to universalize database support
for Perl. You'd have to rebuild the Perl executable itself against
libraries that included subroutines for direct access to the database<a class="indexterm" name="AUTOID-27235"></A
><a class="indexterm" name="AUTOID-27237"></A
>
package. For example, <em class="emphasis">sybperl</EM
> and <em class="emphasis">oraperl</EM
> are both packages for
building Perl Version 4 with Sybase and Oracle calls embedded,
respectively. An application written for <em class="emphasis">sybperl</EM
> would not
be portable to Oracle, or vice-versa.
However, since current versions of Perl support binary
extension loading at runtime, database support can now be
added at runtime, which simplifies adding database interfaces to Perl
programs while keeping the size of the Perl binary to a minimum.</P
><p class="para">Support for binary extensions doesn't mean that database access has
been standardized. There are still many database extensions to
Perl, each with a different API.  However, they all share a strikingly
similar set of commands: connect to the database, 
issue queries, fetch results, and
disconnect.  This consistency has made it
possible to develop a standard set of methods to work with any
database.  DBI defines a set of functions, variables, and 
conventions that provide a consistent database programming
interface for Perl.</P
><p class="para">Although DBI itself is language-independent,
most DBI drivers require applications to use a dialect of SQL 
(structured query language) to interact with the database engine.  
SQL is a standard that
was developed to allow programmers to manipulate relational
databases. There are many implementations of SQL, and each database
server adds nuances that deviate from the standard. </P
><div class="sect2"><h3 class="sect2"><a class="title" name="PNUT-CH-12-SECT-2.1">12.2.1 Database Drivers (DBDs)</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-27247"></A
><a class="indexterm" name="AUTOID-27249"></A
>The success of DBI is that it is only half of the story.
The other half is a DBD, or a database driver.
DBI provides the interface and framework for the
drivers, but it's
the database drivers that do the real work.  
Drivers implement the DBI methods for the private
interface functions of the corresponding database engine.  </P
><p class="para">Unless
you're developing a sophisticated database application, you
probably don't care about the drivers except that you want to install the
correct one.
<a class="xref" href="#PNUT-CH-12-TAB-0" title="Database Servers">Table 12.1</A
>
lists database servers, where you can find them, and
the DBD driver designed for it.
(The freeware or shareware database
servers are available for download,
and some of the commercial servers offer evaluation copies for
download.)</P
><br><table class="table" border="1" cellpadding="3"><caption class="table"><a class="title" name="PNUT-CH-12-TAB-0">Table 12.1: Database Servers</A
></CAPTION
><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1">Server</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">URL</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">DBD</TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">DB2</TD
><td class="entry" rowspan="1" colspan="1"><a class="systemitem.sitename" href="../../../../../../../www.software.ibm.com/data/db2/">http://www.software.ibm.com/data/db2/</A
></TD
><td class="entry" rowspan="1" colspan="1">DBD::DB2</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">Empress</TD
><td class="entry" rowspan="1" colspan="1"><a class="systemitem.sitename" href="../../../../../../../www.empress.com/">http://www.empress.com/</A
></TD
><td class="entry" rowspan="1" colspan="1">DBD::Empress</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">Fulcrum</TD
><td class="entry" rowspan="1" colspan="1"><a class="systemitem.sitename" href="../../../../../../../www.fulcrum.com/">http://www.fulcrum.com</A
></TD
><td class="entry" rowspan="1" colspan="1">DBD::Fulcrum</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">Informix</TD
><td class="entry" rowspan="1" colspan="1"><a class="systemitem.sitename" href="../../../../../../../www.informix.com/">http://www.informix.com/</A
></TD
><td class="entry" rowspan="1" colspan="1">DBD::Informix</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">Ingres</TD
><td class="entry" rowspan="1" colspan="1"><a class="systemitem.sitename" href="../../../../../../../www.cai.com/products/ingres.htm">http://www.cai.com/products/ingres.htm</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1"><a class="systemitem.sitename" href="../../../../../../../epoch.cs.berkeley.edu/postgres/index.html">http://epoch.cs.berkeley.edu:8000/postgres/index.html</A
></TD
><td class="entry" rowspan="1" colspan="1">DBD::Ingres</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">miniSQL</TD
><td class="entry" rowspan="1" colspan="1"><a class="systemitem.sitename" href="../../../../../../../www.hughes.com.au/">http://www.hughes.com.au/</A
></TD
><td class="entry" rowspan="1" colspan="1">DBD::mSQL</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">MySQL</TD
><td class="entry" rowspan="1" colspan="1"><a class="systemitem.sitename" href="../../../../../../../www.tcx.se/">http://www.tcx.se/</A
></TD
><td class="entry" rowspan="1" colspan="1">DBD::mysql</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">Oracle</TD
><td class="entry" rowspan="1" colspan="1"><a class="systemitem.sitename" href="../../../../../../../www.oracle.com/">http://www.oracle.com/</A
></TD
><td class="entry" rowspan="1" colspan="1">DBD::Oracle</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">PostgreSQL</TD
><td class="entry" rowspan="1" colspan="1"><a class="systemitem.sitename" href="../../../../../../../www.postgresql.com/">http://www.postgresql.com/</A
></TD
><td class="entry" rowspan="1" colspan="1">DBD::Pg</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">QuickBase</TD
><td class="entry" rowspan="1" colspan="1"><a class="systemitem.sitename" href="../../../../../../../www.openbase.com/">http://www.openbase.com/</A
></TD
><td class="entry" rowspan="1" colspan="1">DBD::QBase</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">Solid</TD
><td class="entry" rowspan="1" colspan="1"><a class="systemitem.sitename" href="../../../../../../../www.solidtech.com/">http://www.solidtech.com/</A
></TD
><td class="entry" rowspan="1" colspan="1">DBD::Solid</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">Sybase</TD
><td class="entry" rowspan="1" colspan="1"><a class="systemitem.sitename" href="../../../../../../../www.sybase.com/">http://www.sybase.com/</A
></TD
><td class="entry" rowspan="1" colspan="1">DBD::Sybase</TD
></TR
></TBODY
></TABLE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PNUT-CH-12-SECT-2.2">12.2.2 Creating a Database</A
></H3
><p class="para">Before you can open a connection to a database with DBI, you must
create the database.  DBI isn't able to do this step for you, although your
DBD might allow you to.  For example, DBD:mSQL provides a
<code class="literal">msqladmin</CODE
> function.
Your DBD might also support the <code class="literal">func</CODE
> method, which is used to call
private (and often non-portable) methods in the driver.  You
could use a one-liner like this to create the database from the
command line: 


<blockquote class="screen"><pre class="screen">perl -MDBI -e '$db_name = q[<code class="replaceable"><i>database_name_here</I
></CODE
>]; \
     $result = DBD::mysql::dr-&gt;func($db_name, '_CreateDB');'</PRE
></BLOCKQUOTE
>


If your DBD allows to you to create databases via the API, it's
likely that it will allow you to drop them, too.  


<blockquote class="screen"><pre class="screen">perl -MDBI -e '$db_name = q[<code class="replaceable"><i>database_name_here</I
></CODE
>]; \
    $result = DBD::mysql::dr-&gt;func($db_name, '_DropDB');'</PRE
></BLOCKQUOTE
>
&#13;</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PNUT-CH-12-SECT-2.3">12.2.3 Database Handles and Statement Handles</A
></H3
><p class="para"><a class="indexterm" name="PNUT-CH-12-IX-DATABASES-DATABASE-HANDLES-DBI-METHODS"></A
><a class="indexterm" name="PNUT-CH-12-IX-STATEMENT-HANDLES-DBI-METHODS"></A
><a class="indexterm" name="PNUT-CH-12-IX-DBI-MODULE-DATABASE-AND-STATEMENT-HANDLES"></A
>DBI methods work on two different types of handles: database
handles and statement handles.  A database handle is like a
filehandle: <code class="literal">connect</CODE
> is a DBI class method that opens a
connection to a database and returns a database handle object.


<blockquote class="screen"><pre class="screen">$db_handle = DBI-&gt;connect(dbi:mSQL:bookdb, undef, undef)
    || die(&quot;Connect error: $DBI::errstr&quot;);</PRE
></BLOCKQUOTE
>


Statement handles are another thing entirely.  DBI makes a 
distinction between the preparation of SQL statements
and their execution, by allowing you to pre-format a statement
into a statement handle.  <a class="indexterm" name="AUTOID-27350"></A
>
You can prepare a statement with the <code class="literal">prepare</CODE
> method,
which returns a statement handle.  You can then 
assign a SQL statement to the statement handle via various
statement handle methods, and execute it with the <a class="indexterm" name="AUTOID-27353"></A
>
<code class="literal">execute</CODE
> method when you're done.  (You can also 
prepare and execute in the same command with the <code class="literal">do</CODE
> method.)</P
><p class="para">Changes to the database are written to the database <a class="indexterm" name="AUTOID-27358"></A
>
automatically if the 
AutoCommit attribute is turned on.
If AutoCommit is off, then use 
the <code class="literal">commit</CODE
> method
when you're ready to write the changes to the database.</P
><p class="para">AutoCommit is only one of many attributes that can be
set for both database and statement handles.
For example, if <code class="literal">$st_handle</CODE
> is a statement 
handle, then you can set <code class="literal">$st_handle-&gt;{NULLABLE}</CODE
> to
determine if the fields can contain null characters.
<a class="xref" href="#PNUT-CH-12-TAB-1" title="Attributes for Database and Statement Handles">Table 12.2</A
>
is a listing of all the attributes supported by 
database handles, statement handles, or both.</P
><br><table class="table" border="1" cellpadding="3"><caption class="table"><a class="title" name="PNUT-CH-12-TAB-1">Table 12.2: Attributes for Database and Statement Handles</A
></CAPTION
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="2"><em class="emphasis">Attributes for database handles</EM
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">AutoCommit</TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Commit any changes to the database immediately, instead of
waiting for an explicit call to <code class="literal">commit</CODE
>. Default is true.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="2"><em class="emphasis">Attributes for statement handles</EM
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">CursorName</TD
><td class="entry" rowspan="1" colspan="1"><p class="para">The name of the cursor associated with the statement handle.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">NAME</TD
><td class="entry" rowspan="1" colspan="1"><p class="para">A reference to an array of field names.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">NULLABLE</TD
><td class="entry" rowspan="1" colspan="1"><p class="para">A reference to an array describing whether each field can contain a
null character.<a class="indexterm" name="AUTOID-27395"></A
><a class="indexterm" name="AUTOID-27397"></A
><a class="indexterm" name="AUTOID-27399"></A
><a class="indexterm" name="AUTOID-27401"></A
><a class="indexterm" name="AUTOID-27403"></A
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">NUM_OF_FIELDS</TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Number of fields the prepared statement will return.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">NUM_OF_PARAMS</TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Number of placeholders in the prepared statement.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="2"><em class="emphasis">Attributes common to all handles</EM
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">Warn</TD
><td class="entry" rowspan="1" colspan="1">Enables warnings.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">CompatMode</TD
><td class="entry" rowspan="1" colspan="1">Enables compatible behavior for a specific driver.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">InactiveDestroy</TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Destroying a handle does not close prepared statements or
disconnect from the database.<a class="indexterm" name="AUTOID-27426"></A
><a class="indexterm" name="AUTOID-27428"></A
><a class="indexterm" name="AUTOID-27430"></A
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">PrintError</TD
><td class="entry" rowspan="1" colspan="1">Errors generate warnings.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">RaiseError</TD
><td class="entry" rowspan="1" colspan="1">Errors raise exceptions.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">ChopBlanks</TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Truncate trailing space characters in fixed-width character fields.<a class="indexterm" name="AUTOID-27442"></A
><a class="indexterm" name="AUTOID-27444"></A
><a class="indexterm" name="AUTOID-27446"></A
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">LongReadLen</TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Controls the maximum length of long data.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">LongTruncOk</TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Controls whether fetching long data that has been truncated
should fail.<a class="indexterm" name="AUTOID-27456"></A
><a class="indexterm" name="AUTOID-27458"></A
></P
></TD
></TR
></TBODY
></TABLE
><a class="indexterm" name="AUTOID-27460"></A
><a class="indexterm" name="AUTOID-27461"></A
><a class="indexterm" name="AUTOID-27462"></A
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PNUT-CH-12-SECT-2.4">12.2.4 Placeholders database and statement handles</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-27466"></A
><a class="indexterm" name="AUTOID-27468"></A
>Many database drivers allow you to use question marks as
placeholders in SQL statements, and then bind values
to the placeholders before executing them.  This enables
you to prepare a single statement with placeholders and
then reuse it for each row of the database.  For example,
the <code class="literal">prepare</CODE
> statement might read:


<blockquote class="screen"><pre class="screen">$st_handle = $db_handle-&gt;prepare(q{
	insert into books (isbn, title) values (?, ?)
})  || die db_handle-&gt;errstr;</PRE
></BLOCKQUOTE
>


And a subsequent <code class="literal">execute</CODE
> statement might read:


<blockquote class="screen"><pre class="screen">$st_handle-&gt;execute(&quot;1-56592-286-7&quot;, &quot;Perl in a Nutshell&quot;) 
	|| die $db_handle-&gt;errstr;</PRE
></BLOCKQUOTE
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch12_01.htm" title="12.1 DBM Databases and DBM Hashes"><img src="../gifs/txtpreva.gif" alt="Previous: 12.1 DBM Databases and DBM Hashes" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl in a Nutshell"><img src="../gifs/txthome.gif" alt="Perl in a Nutshell" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch12_03.htm" title="12.3 DBI Methods"><img src="../gifs/txtnexta.gif" alt="Next: 12.3 DBI Methods" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">12.1 DBM Databases and DBM Hashes</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">12.3 DBI Methods</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
