<html><head>
<title>Reference: struct</TITLE>
<meta name="DC.title" content="Perl in a Nutshell"><meta name="DC.creator" content="Ellen Siever, Stephen Spainhour &amp; Nathan Patwardhan"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:43:53Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-286-7" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch08_32.htm" title="8.32 Class::Struct"><link rel="prev" href="ch08_32.htm" title="8.32 Class::Struct"><link rel="next" href="ch08_32.htm" title="8.32 Class::Struct"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl in a Nutshell" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,71" href="index.htm" alt="Perl in a Nutshell"><area shape="RECT" coords="467,0,514,18" href="../search/nsrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch08_32.htm" title="8.32 Class::Struct"><img src="../gifs/txtpreva.gif" alt="Previous: 8.32 Class::Struct" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch08_01.htm" title="8. Standard Modules">Chapter 8<br>Standard Modules</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch08_32.htm" title="8.32 Class::Struct"><img src="../gifs/txtnexta.gif" alt="Next: 8.32 Class::Struct" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="NUTENTRY"><h2 class="nutentry"><a class="term" name="AUTOID-14250">struct</A
></H2
><pre class="nutsynopsis">struct (<code class="replaceable"><i>paramlist</I
></CODE
>)</PRE
><dl class="nutentrybody"><p class="para">Creates a class, with object methods for each element of the class. The
parameter list <em class="emphasis">paramlist</EM
> can take one of three forms:


<blockquote class="screen"><pre class="screen">struct( CLASS_NAME =&gt; [ ELEMENT_LIST ]); # object is array-based
struct( CLASS_NAME =&gt; { ELEMENT_LIST }); # object is hash-based
struct( ELEMENT_LIST );     # class name is current package name
                            # and object is array-based</PRE
></BLOCKQUOTE
>


The array-based element lists are faster and smaller, but the hash-based
list is more flexible. The class that is created can be a subclass of
the UNIVERSAL class, but not of any other class.</P
><div class="refsect2"><h3 class="refsect2"><a class="title" name="AUTOID-14258">Element list</A
></H3
><p class="para">The items in the ELEMENT_LIST are of the form:


<blockquote class="screen"><pre class="screen">NAME =&gt; TYPE, ...</PRE
></BLOCKQUOTE
>


where each <code class="literal">NAME=&gt;TYPE</CODE
> pair declares one element of the <code class="literal">struct</CODE
>. Each element
name is defined as an accessor method, unless a method 
is explicitly defined with that name. (In that case, a warning is issued if the
<em class="emphasis">-w</EM
> flag is set.)</P
></DIV
><div class="refsect2"><h3 class="refsect2"><a class="title" name="AUTOID-14265">Element types and accessor methods</A
></H3
><p class="para">There are four possible element types, each represented by a string.
Each string may start with an asterisk (<code class="literal">*</CODE
>), indicating that a reference
to the element is to be returned. The type of an
element determines the accessor method provided. The following list shows
the element types, the strings that represent them, and the accessor:</P
><dl class="variablelist"><dt class="term"><em class="emphasis">array (</EM
><code class="literal">@</CODE
> <em class="emphasis">or</EM
> <code class="literal">*@</CODE
><em class="emphasis">)</EM
></DT
><dd class="listitem"><p class="para">The element is an array, initialized to <code class="literal">()</CODE
>.
With no argument, the accessor returns a reference to the element's
whole array.
With one or two arguments, the first argument is an index specifying
one element of the array; the second argument, if present, is the value
to be assigned to that array element.</P
></DD
><dt class="term"><em class="emphasis">class (</EM
><code class="literal">Class_Name</CODE
> <em class="emphasis">or</EM
> <code class="literal">*Class_Name</CODE
><em class="emphasis">)</EM
></DT
><dd class="listitem"><p class="para">The element's value must be a reference blessed to the named class
or to one of its subclasses. The element is initialized to the
result of calling the <code class="literal">new</CODE
> constructor of the named class.
The accessor's argument, if any, is the value to be 
assigned to the element. The
accessor <code class="literal">croak</CODE
>s if it's not an appropriate object reference.</P
></DD
><dt class="term"><em class="emphasis">hash (</EM
><code class="literal">%</CODE
> <em class="emphasis">or</EM
> <code class="literal">*%</CODE
><em class="emphasis">)</EM
></DT
><dd class="listitem"><p class="para">The element is a hash, initialized to <code class="literal">()</CODE
>.
With no argument, the accessor returns a reference to the element's
whole hash.
With one or two arguments, the first argument is a key specifying
one element of the hash; the second argument, if present, is the value
to be assigned to that hash element.</P
></DD
><dt class="term"><em class="emphasis">scalar (</EM
><code class="literal">$</CODE
> <em class="emphasis">or</EM
> <code class="literal">*$</CODE
><em class="emphasis">)</EM
></DT
><dd class="listitem"><p class="para">The element is a scalar, initialized to <code class="literal">undef</CODE
>.
The accessor's argument, if any, is assigned to the element.</P
></DD
></DL
></DIV
></DL
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch08_32.htm" title="8.32 Class::Struct"><img src="../gifs/txtpreva.gif" alt="Previous: 8.32 Class::Struct" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl in a Nutshell"><img src="../gifs/txthome.gif" alt="Perl in a Nutshell" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch08_32.htm" title="8.32 Class::Struct"><img src="../gifs/txtnexta.gif" alt="Next: 8.32 Class::Struct" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">8.32 Class::Struct</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">8.32 Class::Struct</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
