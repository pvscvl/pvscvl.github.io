<html><head>
<title>[Chapter 14] 14.2 The Mail Modules</TITLE>
<meta name="DC.title" content="Perl in a Nutshell"><meta name="DC.creator" content="Ellen Siever, Stephen Spainhour &amp; Nathan Patwardhan"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:56:39Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-286-7" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch14_01.htm" title="14. Email Connectivity"><link rel="prev" href="ch14_01.htm" title="14.1 The Net Modules"><link rel="next" href="ch15_01.htm" title="15. Usenet News"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl in a Nutshell" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,71" href="index.htm" alt="Perl in a Nutshell"><area shape="RECT" coords="467,0,514,18" href="../search/nsrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch14_01.htm" title="14.1 The Net Modules"><img src="../gifs/txtpreva.gif" alt="Previous: 14.1 The Net Modules" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch14_01.htm" title="14. Email Connectivity">Chapter 14<br>Email Connectivity</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="CHAPTER" href="ch15_01.htm" title="15. Usenet News"><img src="../gifs/txtnexta.gif" alt="Next: 15. Usenet News" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="PNUT-CH-14-SECT-2">14.2 The Mail Modules</A
></H2
><p class="para"><a class="indexterm" name="PNUT-CH-14-IX-EMAIL-MAIL-MODULES"></A
><a class="indexterm" name="PNUT-CH-14-IX-MAIL-MODULES"></A
>The Mail modules operate at a higher level
than the Net modules, interacting with external mail packages
such as <em class="emphasis">mail</EM
>, <em class="emphasis">mailx</EM
>, <em class="emphasis">sendmail</EM
>, or a POP3 server in
the case of POP3Client. This section describes some of the MailTools
modules, Mail::Folder, and Mail::POP3Client.</P
><div class="sect2"><h3 class="sect2"><a class="title" name="PNUT-CH-14-SECT-2.1">14.2.1 Send Email with Mail::Mailer</A
></H3
><p class="para"><a class="indexterm" name="PNUT-CH-14-IX-MAIL-MODULES-MAILMAILER-MODULE"></A
><a class="indexterm" name="PNUT-CH-14-IX-EMAIL-SENDING-MAILMAILER-MODULE"></A
>The Mail::Mailer module interacts with external mail programs. When you 
use Mail::Mailer or create a new Mail::Mailer object, you can specify 
which mail program you want your program to talk to: 


<blockquote class="screen"><pre class="screen">use Mail::Mailer qw(mail);</PRE
></BLOCKQUOTE
>


Another way to specify the mailer is:


<blockquote class="screen"><pre class="screen">use Mail::Mailer;
$type = 'sendmail';
$mailprog = Mail::Mailer-&gt;new($type);</PRE
></BLOCKQUOTE
>


where <code class="literal">$type</CODE
> is the mail program. Once you've created a new object, 
use the <code class="literal">open</CODE
> 
function to send the message headers to the mail program as a hash 
of key/value pairs, where each key represents a header type, 
and where the value is the value of that header: 


<blockquote class="screen"><pre class="screen"># mail headers to use in the message
%headers = (
    'To' =&gt; 'you@mail.somename.com',
    'From' =&gt; 'me@mail.somename.com',
    'Subject' =&gt; 'working?'
);</PRE
></BLOCKQUOTE
>


This code represents headers where the recipient of the mail 
message is <em class="emphasis">you@mail.somename.com</EM
>, the mail was sent from 
<em class="emphasis">me@mail.somename.com</EM
>, and the subject of the mail message is 
&quot;<em class="emphasis">working?</EM
>&quot;</P
><p class="para">Once <code class="literal">%headers</CODE
> has been defined, it is
passed to <code class="literal">open</CODE
>: 


<blockquote class="screen"><pre class="screen">$mailprog-&gt;open(\%headers);</PRE
></BLOCKQUOTE
>


You then send the body of the message to the mail program: 


<blockquote class="screen"><pre class="screen">print $mailprog &quot;This is the message body.\n&quot;;</PRE
></BLOCKQUOTE
>


Now, close the program when the message is finished:


<blockquote class="screen"><pre class="screen">$mailprog-&gt;close;</PRE
></BLOCKQUOTE
>


A practical example of using Mail::Mailer might be 
a command-line-driven application that works much like the Unix <em class="emphasis">mail</EM
> program, 
either reading STDIN until EOF or mailing a file specified on the command line.</P
><p class="para"><a class="indexterm" name="AUTOID-29407"></A
>Mail::Mailer uses the environment variable PERL_MAILERS to augment or
modify the built-in mailer selection. PERL_MAILERS is specified in
the following format:


<blockquote class="screen"><pre class="screen">&quot;type1:mailbinary1;mailbinary2;...:type2:mailbinaryX;...:...&quot;</PRE
></BLOCKQUOTE
>


The possible types are listed for the <code class="literal">new</CODE
> method below.</P
><p class="para">The following methods are defined in Mail::Mailer:
<ul class="nutlist"><li class="term"><a class="nutentry" href="c14_029.htm" title="Reference: new">new</A
></LI
><li class="term"><a class="nutentry" href="c14_030.htm" title="Reference: close">close</A
></LI
><li class="term"><a class="nutentry" href="c14_031.htm" title="Reference: open">open</A
></LI
></UL
><a class="indexterm" name="AUTOID-29475"></A
><a class="indexterm" name="AUTOID-29476"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PNUT-CH-14-SECT-2.2">14.2.2 Better Header Control with Mail::Send</A
></H3
><p class="para"><a class="indexterm" name="PNUT-CH-14-IX-MAIL-MODULES-MAILSEND-MODULE"></A
><a class="indexterm" name="PNUT-CH-14-IX-EMAIL-HEADER-CONTROL-MAILSEND-MODULE"></A
>Mail::Send is built on top of Mail::Mailer, which means that you can 
also choose the mail program that sends the mail. Mail::Send has 
implemented the methods <code class="literal">to</CODE
>, <code class="literal">cc</CODE
>, <code class="literal">bcc</CODE
>, and <code class="literal">subject</CODE
>
to replace the <code class="literal">%headers</CODE
> hash used in Mail::Mailer. </P
><p class="para"><a class="indexterm" name="AUTOID-29492"></A
>Mail::Send uses the <code class="literal">open</CODE
> method to open the mail program for 
output; it is built on Mail::Mailer's <code class="literal">new</CODE
> method, so that: 


<blockquote class="screen"><pre class="screen"># Start mailer and output headers
$fh = $msg-&gt;open('sendmail');</PRE
></BLOCKQUOTE
>


serves the same purpose as: 


<blockquote class="screen"><pre class="screen"># use sendmail for mailing
$mailer = Mail::Mailer-&gt;new('sendmail)';</PRE
></BLOCKQUOTE
>


This code tells Mail::Send to use <em class="emphasis">sendmail</EM
> as the mail program. </P
><p class="para"><a class="indexterm" name="AUTOID-29501"></A
><a class="indexterm" name="AUTOID-29504"></A
>Mail::Send also provides the <code class="literal">set</CODE
> and <code class="literal">add</CODE
>
functions, which assign a value to a header tag and append a value 
to a header tag, respectively. The <code class="literal">set</CODE
> function takes 
two arguments&nbsp;- a header tag and a value&nbsp;- and is used like this: 


<blockquote class="screen"><pre class="screen">$msg-&gt;set($scalar, @array);</PRE
></BLOCKQUOTE
>


Therefore, to address a message to <em class="emphasis">you@mail.somename.com</EM
>: 


<blockquote class="screen"><pre class="screen">$msg-&gt;set('To', 'you@mail.somename.com');</PRE
></BLOCKQUOTE
>


The above sets the <code class="literal">To</CODE
> header to <em class="emphasis">you@mail.somename.com</EM
>; 
however, the following 
sets the <code class="literal">To</CODE
> header to <em class="emphasis">postmaster@mail.somename.com</EM
> and 
<em class="emphasis">you@mail.somename.com</EM
>, because they represent an array of values. 


<blockquote class="screen"><pre class="screen">$msg-&gt;set('To', ('you@mail.somename.com', 'postmaster@mail.somename.com'));</PRE
></BLOCKQUOTE
>


You might think that you could use 
the <code class="literal">set</CODE
> function as follows to add multiple values to a header value: 


<blockquote class="screen"><pre class="screen">$msg-&gt;set('To', 'you@mail.somename.com');
$msg-&gt;set('To', 'someone@their.mailaddress.com');</PRE
></BLOCKQUOTE
>


However, <code class="literal">set</CODE
> doesn't append information from one call to another, and the 
example above would send the mail only to <em class="emphasis">someone@their.mailaddress.com</EM
>.
To append a name to the <code class="literal">To</CODE
> header, use the <code class="literal">add</CODE
> method. For
example:


<blockquote class="screen"><pre class="screen">$msg-&gt;add('To', 'you@mail.somename.com');
$msg-&gt;add('To', 'someone@their.mailaddress.com');</PRE
></BLOCKQUOTE
>
&#13;</P
><p class="para">The following methods are defined for Mail::Send:
<ul class="nutlist"><li class="term"><a class="nutentry" href="c14_032.htm" title="Reference: new">new</A
></LI
><li class="term"><a class="nutentry" href="c14_033.htm" title="Reference: add">add</A
></LI
><li class="term"><a class="nutentry" href="c14_034.htm" title="Reference: bcc">bcc</A
></LI
><li class="term"><a class="nutentry" href="c14_035.htm" title="Reference: cancel">cancel</A
></LI
><li class="term"><a class="nutentry" href="c14_036.htm" title="Reference: cc">cc</A
></LI
><li class="term"><a class="nutentry" href="c14_037.htm" title="Reference: close">close</A
></LI
><li class="term"><a class="nutentry" href="c14_038.htm" title="Reference: delete">delete</A
></LI
><li class="term"><a class="nutentry" href="c14_039.htm" title="Reference: open">open</A
></LI
><li class="term"><a class="nutentry" href="c14_040.htm" title="Reference: set">set</A
></LI
><li class="term"><a class="nutentry" href="c14_041.htm" title="Reference: subject">subject</A
></LI
><li class="term"><a class="nutentry" href="c14_042.htm" title="Reference: to">to</A
></LI
></UL
><a class="indexterm" name="AUTOID-29662"></A
><a class="indexterm" name="AUTOID-29663"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PNUT-CH-14-SECT-2.3">14.2.3 Handle Folders with Mail::Folder</A
></H3
><p class="para"><a class="indexterm" name="PNUT-CH-14-IX-FOLDERS-FOR-EMAIL-MESSAGES"></A
><a class="indexterm" name="PNUT-CH-14-IX-MAIL-MODULES-MAILFOLDER-MODULE"></A
><a class="indexterm" name="PNUT-CH-14-IX-EMAIL-FOLDERS-FOR-MAILFOLDER-MODULE"></A
>Once you've begun downloading and reading your mail from a POP server, you 
might want to save or categorize your messages into folders, which allow you 
to add, delete, save, and move messages easily. You can do this with<a class="indexterm" name="AUTOID-29675"></A
>
Mail::Folder, which was written by Kevin Johnson as an object-oriented, 
folder-independent interface to mail folders.  Mail::Folder supports 
a number of mailbox formats with the following interfaces:</P
><dl class="variablelist"><dt class="term">Mail::Folder::Emaul</DT
><dd class="listitem"><p class="para">A folder interface somewhat similar to MH.</P
></DD
><dt class="term">Mail::Folder::Maildir</DT
><dd class="listitem"><p class="para">An interface to <em class="emphasis">maildir</EM
> folders.</P
></DD
><dt class="term">Mail::Folder::Mbox</DT
><dd class="listitem"><p class="para">Standard Unix mailbox format.</P
></DD
><dt class="term">Mail::Folder::NNTP</DT
><dd class="listitem"><p class="para">The beginnings of an interface to NNTP; not all the methods are
implemented yet.</P
></DD
></DL
><p class="para">If you are interested in writing a folder interface, see the documentation
for the module. The documentation explains the concepts and issues involved,
and describes some of the methods you may need to override.</P
><p class="para">The following methods are defined for Mail::Folder:
<ul class="nutlist"><li class="term"><a class="nutentry" href="c14_043.htm" title="Reference: new">new</A
></LI
><li class="term"><a class="nutentry" href="c14_044.htm" title="Reference: add_label">add_label</A
></LI
><li class="term"><a class="nutentry" href="c14_045.htm" title="Reference: append_message">append_message</A
></LI
><li class="term"><a class="nutentry" href="c14_046.htm" title="Reference: clear_label">clear_label</A
></LI
><li class="term"><a class="nutentry" href="c14_047.htm" title="Reference: close">close</A
></LI
><li class="term"><a class="nutentry" href="c14_048.htm" title="Reference: current_message">current_message</A
></LI
><li class="term"><a class="nutentry" href="c14_049.htm" title="Reference: debug">debug</A
></LI
><li class="term"><a class="nutentry" href="c14_050.htm" title="Reference: debug_print">debug_print</A
></LI
><li class="term"><a class="nutentry" href="c14_051.htm" title="Reference: delete_label">delete_label</A
></LI
><li class="term"><a class="nutentry" href="c14_052.htm" title="Reference: delete_message">delete_message</A
></LI
><li class="term"><a class="nutentry" href="c14_053.htm" title="Reference: dup">dup</A
></LI
><li class="term"><a class="nutentry" href="c14_054.htm" title="Reference: first_labeled_message">first_labeled_message</A
></LI
><li class="term"><a class="nutentry" href="c14_055.htm" title="Reference: first_message">first_message</A
></LI
><li class="term"><a class="nutentry" href="c14_056.htm" title="Reference: foldername">foldername</A
></LI
><li class="term"><a class="nutentry" href="c14_057.htm" title="Reference: get_fields">get_fields</A
></LI
><li class="term"><a class="nutentry" href="c14_058.htm" title="Reference: get_header">get_header</A
></LI
><li class="term"><a class="nutentry" href="c14_059.htm" title="Reference: get_message">get_message</A
></LI
><li class="term"><a class="nutentry" href="c14_060.htm" title="Reference: get_message_file">get_message_file</A
></LI
><li class="term"><a class="nutentry" href="c14_061.htm" title="Reference: get_mime_header">get_mime_header</A
></LI
><li class="term"><a class="nutentry" href="c14_062.htm" title="Reference: get_mime_message">get_mime_message</A
></LI
><li class="term"><a class="nutentry" href="c14_063.htm" title="Reference: get_option">get_option</A
></LI
><li class="term"><a class="nutentry" href="c14_064.htm" title="Reference: inverse_select">inverse_select</A
></LI
><li class="term"><a class="nutentry" href="c14_065.htm" title="Reference: is_readonly">is_readonly</A
></LI
><li class="term"><a class="nutentry" href="c14_066.htm" title="Reference: label_exists">label_exists</A
></LI
><li class="term"><a class="nutentry" href="c14_067.htm" title="Reference: last_labeled_message">last_labeled_message</A
></LI
><li class="term"><a class="nutentry" href="c14_068.htm" title="Reference: last_message">last_message</A
></LI
><li class="term"><a class="nutentry" href="c14_069.htm" title="Reference: list_all_labels">list_all_labels</A
></LI
><li class="term"><a class="nutentry" href="c14_070.htm" title="Reference: list_labels">list_labels</A
></LI
><li class="term"><a class="nutentry" href="c14_071.htm" title="Reference: message_exists">message_exists</A
></LI
><li class="term"><a class="nutentry" href="c14_072.htm" title="Reference: message_list">message_list</A
></LI
><li class="term"><a class="nutentry" href="c14_073.htm" title="Reference: next_labeled_message">next_labeled_message</A
></LI
><li class="term"><a class="nutentry" href="c14_074.htm" title="Reference: next_message">next_message</A
></LI
><li class="term"><a class="nutentry" href="c14_075.htm" title="Reference: open">open</A
></LI
><li class="term"><a class="nutentry" href="c14_076.htm" title="Reference: pack">pack</A
></LI
><li class="term"><a class="nutentry" href="c14_077.htm" title="Reference: prev_labeled_message">prev_labeled_message</A
></LI
><li class="term"><a class="nutentry" href="c14_078.htm" title="Reference: prev_message">prev_message</A
></LI
><li class="term"><a class="nutentry" href="c14_079.htm" title="Reference: qty">qty</A
></LI
><li class="term"><a class="nutentry" href="c14_080.htm" title="Reference: refile">refile</A
></LI
><li class="term"><a class="nutentry" href="c14_081.htm" title="Reference: select">select</A
></LI
><li class="term"><a class="nutentry" href="c14_082.htm" title="Reference: select_label">select_label</A
></LI
><li class="term"><a class="nutentry" href="c14_083.htm" title="Reference: set_option">set_option</A
></LI
><li class="term"><a class="nutentry" href="c14_084.htm" title="Reference: set_readonly">set_readonly</A
></LI
><li class="term"><a class="nutentry" href="c14_085.htm" title="Reference: sort">sort</A
></LI
><li class="term"><a class="nutentry" href="c14_086.htm" title="Reference: sync">sync</A
></LI
><li class="term"><a class="nutentry" href="c14_087.htm" title="Reference: undelete_message">undelete_message</A
></LI
><li class="term"><a class="nutentry" href="c14_088.htm" title="Reference: update_message">update_message</A
></LI
></UL
><a class="indexterm" name="AUTOID-30354"></A
><a class="indexterm" name="AUTOID-30355"></A
><a class="indexterm" name="AUTOID-30356"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PNUT-CH-14-SECT-2.4">14.2.4 Handle Messages with Mail::Internet</A
></H3
><p class="para"><a class="indexterm" name="PNUT-CH-14-IX-MAIL-MODULES-MAILINTERNET-MODULE"></A
><a class="indexterm" name="PNUT-CH-14-IX-EMAIL-HANDLING-MESSAGES-MAILINTERNET-MODULE"></A
>Mail::Internet implements a number of helpful functions for manipulating 
a mail message. These include <code class="literal">body</CODE
>, <code class="literal">print_header</CODE
>, and <code class="literal">head</CODE
>.
Mail::Internet is built on top of Mail::Header, which parses the header of an 
email message, and it inherits the Mail::Header constructor 
style that requires a file descriptor or reference to an array be used. For 
example: 


<blockquote class="screen"><pre class="screen">@lines = &lt;STDIN&gt;;
$mi_obj = new Mail::Internet([@lines]);</PRE
></BLOCKQUOTE
>


reads a mail message from STDIN (using a reference to an array). The 
following example reads a mail message from a filehandle, FILE.


<blockquote class="screen"><pre class="screen">open(FILE, &quot;/home/nvp/Mail/nvp&quot;);
$mi_obj = new Mail::Internet(\*FILE);
close(FILE);</PRE
></BLOCKQUOTE
>


The <code class="literal">print_header</CODE
> function outputs the header of a message to a file 
descriptor; the default is STDOUT. 


<blockquote class="screen"><pre class="screen">open(FILE, &quot;/home/nvp/Mail/nvp&quot;);
$mi_obj = new Mail::Internet(\*FILE);
close(FILE);
$mi_obj-&gt;print_header(\*STDOUT);</PRE
></BLOCKQUOTE
>


The above example might output: 


<blockquote class="screen"><pre class="screen">From nvp Mon Jun  9 00:11:10 1997
Received: (from nvp@localhost) by mail.somename.com (8.8/8.8) id
    AAA03248 for nvp; Mon, 9 Jun 1997 00:11:09 -0500 (EST)
Date: Mon, 9 Jun 1997 00:11:09 -0500 (EST)
From: &quot;Nathan V. Patwardhan&quot; &lt;nvp&gt;
Message-Id: &lt;199706090511.AAA03248@mail.somename.com&gt;
To: nvp
Subject: pop test
X-Status:
X-Uid: 1
Status: RO</PRE
></BLOCKQUOTE
>


where <code class="literal">print_body</CODE
> also takes a file descriptor as an argument, but only 
outputs the body of the message, whereas the <code class="literal">print</CODE
> function outputs an 
entire message.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PNUT-CH-14-SECT-2.5">14.2.5 Mail::Internet Reference</A
></H3
><p class="para"><ul class="nutlist"><li class="term"><a class="nutentry" href="c14_089.htm" title="Reference: new">new</A
></LI
><li class="term"><a class="nutentry" href="c14_090.htm" title="Reference: add_signature">add_signature</A
></LI
><li class="term"><a class="nutentry" href="c14_091.htm" title="Reference: body">body</A
></LI
><li class="term"><a class="nutentry" href="c14_092.htm" title="Reference: escape_from">escape_from</A
></LI
><li class="term"><a class="nutentry" href="c14_093.htm" title="Reference: head">head</A
></LI
><li class="term"><a class="nutentry" href="c14_094.htm" title="Reference: nntppost">nntppost</A
></LI
><li class="term"><a class="nutentry" href="c14_095.htm" title="Reference: print_header">print_header</A
></LI
><li class="term"><a class="nutentry" href="c14_096.htm" title="Reference: remove_sig">remove_sig</A
></LI
><li class="term"><a class="nutentry" href="c14_097.htm" title="Reference: reply">reply</A
></LI
><li class="term"><a class="nutentry" href="c14_098.htm" title="Reference: smtpsend">smtpsend</A
></LI
><li class="term"><a class="nutentry" href="c14_099.htm" title="Reference: tidy_body">tidy_body</A
></LI
><li class="term"><a class="nutentry" href="c14_100.htm" title="Reference: unescape_from">unescape_from</A
></LI
></UL
><a class="indexterm" name="AUTOID-30596"></A
><a class="indexterm" name="AUTOID-30597"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PNUT-CH-14-SECT-2.6">14.2.6 Parse Email Addresses with Mail::Address</A
></H3
><p class="para"><a class="indexterm" name="PNUT-CH-14-IX-ADDRESSES-EMAIL-PARSING"></A
><a class="indexterm" name="PNUT-CH-14-IX-PARSING-EMAIL-ADDRESSES"></A
><a class="indexterm" name="PNUT-CH-14-IX-MAIL-MODULES-MAILADDRESS-MODULE"></A
><a class="indexterm" name="PNUT-CH-14-IX-EMAIL-PARSING-ADDRESSES-MAILADDRESS-MODULE"></A
>Mail::Address parses RFC 822-compliant mail addresses of the form: 


<blockquote class="screen"><pre class="screen">&quot;Full Name or Phrase&quot; &lt;username@host&gt; (Comment Area)</PRE
></BLOCKQUOTE
>


For example, under RFC 822, an address might be represented as: 


<blockquote class="screen"><pre class="screen">&quot;Nathan V. Patwardhan&quot; &lt;nvp@mail.somename.com&gt; (No Comment)</PRE
></BLOCKQUOTE
>


or: 


<blockquote class="screen"><pre class="screen">&quot;Nathan V. Patwardhan&quot; &lt;nvp@mail.somename.com&gt;</PRE
></BLOCKQUOTE
>


The Mail::Address constructor parses an email address into three parts 
based on the categories shown above: 


<blockquote class="screen"><pre class="screen">$addr = Mail::Address-&gt;new(&quot;Full Name or Phrase&quot;,
                           &quot;username@host&quot;,
                           &quot;(Comment Area)&quot;);</PRE
></BLOCKQUOTE
>


Mail::Address also outputs portions of the mail address with the functions 
<code class="literal">phrase</CODE
>, <code class="literal">address</CODE
>, <code class="literal">comment</CODE
>, <code class="literal">format</CODE
>, <code class="literal">name</CODE
>, 
<code class="literal">host</CODE
>, and <code class="literal">user</CODE
>. The <code class="literal">phrase</CODE
>, <code class="literal">address</CODE
>, and <code class="literal">comment</CODE
>
functions represent the first, second, 
and third entities that were passed to the Mail::Address constructor, where 
the <code class="literal">phrase</CODE
> function:<a class="indexterm" name="AUTOID-30626"></A
>


<blockquote class="screen"><pre class="screen">print $addr-&gt;phrase();</PRE
></BLOCKQUOTE
>


outputs: 


<blockquote class="screen"><pre class="screen">Nathan V. Patwardhan</PRE
></BLOCKQUOTE
>


The <code class="literal">address</CODE
> function: 


<blockquote class="screen"><pre class="screen">print $addr-&gt;address();</PRE
></BLOCKQUOTE
>


outputs: 


<blockquote class="screen"><pre class="screen">nvp@mail.somename.com</PRE
></BLOCKQUOTE
>


And the <code class="literal">comment</CODE
> function:


<blockquote class="screen"><pre class="screen">print $addr-&gt;comment();</PRE
></BLOCKQUOTE
>


outputs: 


<blockquote class="screen"><pre class="screen">No Comment</PRE
></BLOCKQUOTE
>

<a class="indexterm" name="AUTOID-30636"></A
><a class="indexterm" name="AUTOID-30639"></A
>
A real mail address can be &quot;unmangled,&quot; or parsed from its 
<em class="emphasis">user@somehost.com</EM
> format, with the <code class="literal">user</CODE
> and <code class="literal">host</CODE
>
functions. The <code class="literal">user</CODE
> 
function removes everything starting with the <code class="literal">@</CODE
> to the
end of the address, and <code class="literal">host</CODE
> removes everything up to and including
the <code class="literal">@</CODE
>. Using the previous example of 
<em class="emphasis">nvp@mail.somename.com</EM
>, the following line: 


<blockquote class="screen"><pre class="screen">print $addr-&gt;user;</PRE
></BLOCKQUOTE
>


outputs: 


<blockquote class="screen"><pre class="screen">nvp</PRE
></BLOCKQUOTE
>


And the following line using the <code class="literal">host</CODE
> function: 


<blockquote class="screen"><pre class="screen">print $addr-&gt;host;</PRE
></BLOCKQUOTE
>


outputs: 


<blockquote class="screen"><pre class="screen">nvp@mail.somename.com</PRE
></BLOCKQUOTE
>
&#13;</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PNUT-CH-14-SECT-2.7">14.2.7 Mail::Address Reference</A
></H3
><p class="para"><ul class="nutlist"><li class="term"><a class="nutentry" href="c14_101.htm" title="Reference: new">new</A
></LI
><li class="term"><a class="nutentry" href="c14_102.htm" title="Reference: parse">parse</A
></LI
><li class="term"><a class="nutentry" href="c14_103.htm" title="Reference: address">address</A
></LI
><li class="term"><a class="nutentry" href="c14_104.htm" title="Reference: canon">canon</A
></LI
><li class="term"><a class="nutentry" href="c14_105.htm" title="Reference: comment">comment</A
></LI
><li class="term"><a class="nutentry" href="c14_106.htm" title="Reference: format">format</A
></LI
><li class="term"><a class="nutentry" href="c14_107.htm" title="Reference: host">host</A
></LI
><li class="term"><a class="nutentry" href="c14_108.htm" title="Reference: name">name</A
></LI
><li class="term"><a class="nutentry" href="c14_109.htm" title="Reference: path">path</A
></LI
><li class="term"><a class="nutentry" href="c14_110.htm" title="Reference: phrase">phrase</A
></LI
><li class="term"><a class="nutentry" href="c14_111.htm" title="Reference: user">user</A
></LI
></UL
><a class="indexterm" name="AUTOID-30774"></A
><a class="indexterm" name="AUTOID-30775"></A
><a class="indexterm" name="AUTOID-30776"></A
><a class="indexterm" name="AUTOID-30777"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PNUT-CH-14-SECT-2.8">14.2.8 Reading Email with Mail::POP3Client</A
></H3
><p class="para"><a class="indexterm" name="PNUT-CH-14-IX-READING-EMAIL-MESSAGES-MAILPOP3CLIENT"></A
><a class="indexterm" name="PNUT-CH-14-IX-MAIL-MODULES-MAILPOP3CLIENT-MODULE"></A
><a class="indexterm" name="PNUT-CH-14-IX-EMAIL-READING-MAILPOP3CLIENT-MODULE"></A
><a class="indexterm" name="PNUT-CH-14-IX-POP3-PROTOCOL-INTERFACE-TO-AGAIN"></A
><a class="indexterm" name="PNUT-CH-14-IX-POST-OFFICE-PROTOCOL-POP3-AGAIN"></A
>Many networks have machines dedicated to sending and receiving email. Since users might hold accounts on <em class="emphasis">foo.bar.com</EM
>, while 
mail is sent to 
<em class="emphasis">pop-server.bar.com</EM
>, there must be a means to transfer the mail from the 
&quot;post office&quot; machine to the host on which the user works. The 
Post Office Protocol, or POP, negotiates this mail transfer.</P
><p class="para">When a user wants to retrieve his 
or her mail, the user's mail client connects to the POP server and 
authenticates the user with a login name and password, as we described earlier.
Once authenticated, the user can list, read, and delete messages from the POP 
server. </P
><p class="para">The Mail::POP3Client module simplifies the process of &quot;talking POP&quot; by 
implementing a number of functions to login, parse, and read mail messages 
held on the POP server. Information that the POP server needs, such as the
user's login name and password, and possibly some optional information
(the name of the POP host, the port, 
and a debugging flag) are passed to the 
constructor when a new POP3Client object is created. For example: 


<blockquote class="screen"><pre class="screen">use Mail::POP3Client;

$pop = Mail::POP3Client-&gt;new(&quot;login&quot;,     # required
                             &quot;password&quot;,  #required
                             &quot;pophost.your.domain&quot;, # not required
                             port,        # default is 110
                             debug_flag); # any positive integer</PRE
></BLOCKQUOTE
>


POP3Client provides functions to perform the following:</P
><div class="sect3"><h4 class="sect3"><a class="title" name="PNUT-CH-14-SECT-2.8.1">14.2.8.1 Counting messages</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-30801"></A
><a class="indexterm" name="AUTOID-30804"></A
>The <code class="literal">Count</CODE
> function returns the number of messages 
in the mailbox.  Once they have been
authenticated, users can list the headers of the messages in their <a class="indexterm" name="AUTOID-30807"></A
>
mailbox using the <code class="literal">Head</CODE
> function in conjunction with the <code class="literal">Count</CODE
>
function, as shown in the following example:


<blockquote class="screen"><pre class="screen">use strict; 
use Mail::POP3Client;
my($pop, $num_mesg, $i);
$pop = Mail::POP3Client-&gt;new(&quot;nvp&quot;,
                            &quot;xxxxxx&quot;);

$num_mesg = $pop-&gt;Count;           # How many messages are there?
print(&quot;You have &quot;.$num_mesg.&quot; new message(s).\n&quot;);

for ($i = 1; $i &lt;= $num_mesg; $i++) {
    print $pop-&gt;Head($i), &quot;\n&quot;;   #print header for each message
}</PRE
></BLOCKQUOTE
>


You can also use a regular expression to parse the headers and display
certain information, such as the sender and subject of each mail message: 


<blockquote class="screen"><pre class="screen">my($pop, $num_mesg, $i);

$pop = Mail::POP3Client-&gt;new(&quot;nvp&quot;,
                            &quot;xxxxxx&quot;);

for ($i = 1; $i &lt;= $pop-&gt;Count; $i++) {
    foreach ($pop-&gt;Head($i)) {
               # output from and subject 
        print $_.&quot; &quot; if /^(From|Subject)/;
   }
    print &quot;\n&quot;;
}</PRE
></BLOCKQUOTE
>
&#13;</P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PNUT-CH-14-SECT-2.8.2">14.2.8.2 Getting and setting the host and port</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-30816"></A
>The <code class="literal">Host</CODE
> method returns or sets the current POP host. For example: 


<blockquote class="screen"><pre class="screen">$obj-&gt;Host;</PRE
></BLOCKQUOTE
>


returns the current POP host. To set the new POP host to 
<em class="emphasis">new-pop.bar.com</EM
>, you could do this: 


<blockquote class="screen"><pre class="screen">$new_host = 'new-pop.bar.com';
$obj-&gt;Host($new_host);</PRE
></BLOCKQUOTE
>


The <code class="literal">Port</CODE
> method works like <code class="literal">Host</CODE
>, returning or 
setting the current port that the POP server is bound to: 


<blockquote class="screen"><pre class="screen">$obj-&gt;Port;            #return the current port for the POP server
$new_port = 7000;      #set the port to 7000
$obj-&gt;Port($new_port);</PRE
></BLOCKQUOTE
>
&#13;</P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PNUT-CH-14-SECT-2.8.3">14.2.8.3 Retrieving the message body</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-30828"></A
><a class="indexterm" name="AUTOID-30831"></A
><a class="indexterm" name="AUTOID-30833"></A
>Naturally, you'll want to read more than the headers of your mail 
messages, so you'll want to use the <code class="literal">Body</CODE
>, <code class="literal">HeadAndBody</CODE
>, 
and <code class="literal">Retrieve</CODE
> methods. <code class="literal">Body</CODE
> outputs the body of the 
message, while <code class="literal">HeadAndBody</CODE
> and <code class="literal">Retrieve</CODE
> are synonyms that
output both the head and the body of the message.</P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PNUT-CH-14-SECT-2.8.4">14.2.8.4 Deleting and undeleting messages</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-30844"></A
>Messages can be deleted from the POP mailbox with the <code class="literal">Delete</CODE
>
method. <code class="literal">Delete</CODE
> marks messages on the server
for deletion; they aren't permanently removed until a QUIT command is received.
<code class="literal">Delete</CODE
> takes one argument&nbsp;- the number of the message to delete: 


<blockquote class="screen"><pre class="screen">$pop-&gt;Delete(1);         #delete the first message</PRE
></BLOCKQUOTE
>


Like most mail programs, Mail::POP3Client can 
undelete messages that have been marked for deletion. Use the<a class="indexterm" name="AUTOID-30851"></A
>
<code class="literal">Reset</CODE
> method to do this:


<blockquote class="screen"><pre class="screen">$pop-&gt;Reset(1);          #undelete the first message</PRE
></BLOCKQUOTE
>
&#13;</P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PNUT-CH-14-SECT-2.8.5">14.2.8.5 Checking the connection</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-30859"></A
>Most programs that require a user to log in will time out after a certain
period of time for security and resource reasons.  The <code class="literal">Alive</CODE
> 
method checks to see if the connection to the POP server is still open; it 
returns true if the connection is good, and false otherwise.</P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PNUT-CH-14-SECT-2.8.6">14.2.8.6 Explicitly opening and closing connections</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-30865"></A
><a class="indexterm" name="AUTOID-30867"></A
>POP connections can be explicitly opened and closed with <code class="literal">Login</CODE
> and 
<code class="literal">Close</CODE
>. <code class="literal">Close</CODE
> takes no arguments and closes 
the connection to the POP server.</P
></DIV
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PNUT-CH-14-SECT-2.9">14.2.9 Mail::POP3Client Methods</A
></H3
><p class="para">The following methods are defined by Mail::POP3Client:
<ul class="nutlist"><li class="term"><a class="nutentry" href="c14_112.htm" title="Reference: new">new</A
></LI
><li class="term"><a class="nutentry" href="c14_113.htm" title="Reference: Alive">Alive</A
></LI
><li class="term"><a class="nutentry" href="c14_114.htm" title="Reference: Body">Body</A
></LI
><li class="term"><a class="nutentry" href="c14_115.htm" title="Reference: Close">Close</A
></LI
><li class="term"><a class="nutentry" href="c14_116.htm" title="Reference: Connect">Connect</A
></LI
><li class="term"><a class="nutentry" href="c14_117.htm" title="Reference: Count">Count</A
></LI
><li class="term"><a class="nutentry" href="c14_118.htm" title="Reference: Delete">Delete</A
></LI
><li class="term"><a class="nutentry" href="c14_119.htm" title="Reference: Head">Head</A
></LI
><li class="term"><a class="nutentry" href="c14_120.htm" title="Reference: HeadAndBody">HeadAndBody</A
></LI
><li class="term"><a class="nutentry" href="c14_121.htm" title="Reference: Host">Host</A
></LI
><li class="term"><a class="nutentry" href="c14_122.htm" title="Reference: Last">Last</A
></LI
><li class="term"><a class="nutentry" href="c14_123.htm" title="Reference: List">List</A
></LI
><li class="term"><a class="nutentry" href="c14_124.htm" title="Reference: Login">Login</A
></LI
><li class="term"><a class="nutentry" href="c14_125.htm" title="Reference: Message">Message</A
></LI
><li class="term"><a class="nutentry" href="c14_126.htm" title="Reference: Pass">Pass</A
></LI
><li class="term"><a class="nutentry" href="c14_127.htm" title="Reference: POPStat">POPStat</A
></LI
><li class="term"><a class="nutentry" href="c14_128.htm" title="Reference: Port">Port</A
></LI
><li class="term"><a class="nutentry" href="c14_129.htm" title="Reference: Reset">Reset</A
></LI
><li class="term"><a class="nutentry" href="c14_130.htm" title="Reference: Retrieve">Retrieve</A
></LI
><li class="term"><a class="nutentry" href="c14_131.htm" title="Reference: Size">Size</A
></LI
><li class="term"><a class="nutentry" href="c14_132.htm" title="Reference: Socket">Socket</A
></LI
><li class="term"><a class="nutentry" href="c14_133.htm" title="Reference: State">State</A
></LI
><li class="term"><a class="nutentry" href="c14_134.htm" title="Reference: User">User</A
></LI
></UL
><a class="indexterm" name="AUTOID-31148"></A
><a class="indexterm" name="AUTOID-31149"></A
><a class="indexterm" name="AUTOID-31150"></A
><a class="indexterm" name="AUTOID-31151"></A
><a class="indexterm" name="AUTOID-31152"></A
><a class="indexterm" name="AUTOID-31153"></A
><a class="indexterm" name="AUTOID-31154"></A
><a class="indexterm" name="AUTOID-31155"></A
><a class="indexterm" name="AUTOID-31156"></A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch14_01.htm" title="14.1 The Net Modules"><img src="../gifs/txtpreva.gif" alt="Previous: 14.1 The Net Modules" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl in a Nutshell"><img src="../gifs/txthome.gif" alt="Perl in a Nutshell" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="CHAPTER" href="ch15_01.htm" title="15. Usenet News"><img src="../gifs/txtnexta.gif" alt="Next: 15. Usenet News" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">14.1 The Net Modules</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">15. Usenet News</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
