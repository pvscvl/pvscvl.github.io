<html><head>
<title>[Chapter 11] 11.4 Running CGI Scripts with mod_perl</TITLE>
<meta name="DC.title" content="Perl in a Nutshell"><meta name="DC.creator" content="Ellen Siever, Stephen Spainhour &amp; Nathan Patwardhan"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:56:04Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-286-7" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch11_01.htm" title="11. Web Server Programming with mod_perl"><link rel="prev" href="ch11_03.htm" title="11.3 mod_perl Handlers"><link rel="next" href="ch11_05.htm" title="11.5 Server-Side Includes with mod_perl"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl in a Nutshell" usemap="#srchmap" border="0"></H1
><map name="srchmap"index.html><area shape="RECT" coords="0,0,466,71" href="index.htm" alt="Perl in a Nutshell"><area shape="RECT" coords="467,0,514,18" href="../search/nsrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch11_03.htm" title="11.3 mod_perl Handlers"><img src="../gifs/txtpreva.gif" alt="Previous: 11.3 mod_perl Handlers" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch11_01.htm" title="11. Web Server Programming with mod_perl">Chapter 11<br>Web Server Programming with mod_perl</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch11_05.htm" title="11.5 Server-Side Includes with mod_perl"><img src="../gifs/txtnexta.gif" alt="Next: 11.5 Server-Side Includes with mod_perl" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="PNUT-CH-11-SECT-4">11.4 Running CGI Scripts with mod_perl</A
></H2
><p class="para"><a class="indexterm" name="PNUT-CH-11-IX-CGI-PROGRAMS-RUNNING-WITH-MOD-PERL"></A
><a class="indexterm" name="PNUT-CH-11-IX-MOD-PERL-MODULE-RUNNING-CGI-SCRIPTS-WITH"></A
><a class="indexterm" name="PNUT-CH-11-IX-PERFORMANCE-CGI-SCRIPTS-WITH-MOD-PERL"></A
>What most people want to do with <em class="emphasis">mod_perl</EM
> is improve
CGI performance.<a class="indexterm" name="AUTOID-26668"></A
><a class="indexterm" name="AUTOID-26670"></A
>
The <em class="emphasis">mod_perl</EM
> installation assumes this request by enabling the <code class="literal">PerlHandler</CODE
>
callback hook by default, and by installing the Apache::Registry module.
<code class="literal">PerlHandler</CODE
> is the handler used for the content retrieval stage of the
server transaction.
Apache::Registry is the
Perl module that emulates the CGI environment so you can use
&quot;standard&quot; Perl CGI scripts with <em class="emphasis">mod_perl</EM
> without
having to rewrite them (much).  This is by far the cheapest way to get
improved CGI performance.</P
><p class="para">With Apache::Registry, 
each individual CGI program is compiled and 
cached the first time it is called (or whenever it 
is changed), and then remains available
for all subsequent instances of that CGI script.  
This process avoids the costs of startup time.  </P
><p class="para"><a class="indexterm" name="AUTOID-26679"></A
>Whereas most CGI scripts are kept in <em class="emphasis">/cgi-bin/</EM
>,
scripts that use Apache::Registry are placed in a
separate directory, e.g., <em class="emphasis">/perl-bin/</EM
>.<a class="indexterm" name="AUTOID-26683"></A
>
The <em class="emphasis">access.conf</EM
> Apache configuration file needs to point
to this directory by setting an alias and defining
a handler for this new location.


<blockquote class="screen"><pre class="screen">Alias /perl-bin/ /usr/local/apache/perl-bin/

&lt;Location /perl-bin&gt;
SetHandler perl-script
PerlHandler Apache::Registry
PerlSendHeader On
Options ExecCGI
&lt;/Location&gt;</PRE
></BLOCKQUOTE
>

<a class="indexterm" name="AUTOID-26687"></A
>
Instead of using the <code class="literal">cgi-script</CODE
> handler, we use
the <code class="literal">perl-script</CODE
> handler to give control to <em class="emphasis">mod_perl</EM
>.
Next, the <code class="literal">PerlHandler</CODE
>
directive tells <em class="emphasis">mod_perl</EM
> that the Apache::Registry module should
be used for serving all files in that directory.<a class="indexterm" name="AUTOID-26694"></A
>
<code class="literal">PerlSendHeader</CODE
> is another <em class="emphasis">mod_perl</EM
>-specific 
directive; in this case, it tells <em class="emphasis">mod_perl</EM
> to send response
lines and common headers&nbsp;- by default, none are sent.  (For NPH scripts,
you'll want to turn this feature off again.)
<code class="literal">Options ExecCGI</CODE
> is a standard Apache header 
needed to tell Apache to treat the script as a CGI script.</P
><p class="para">If you want to load Perl modules in addition to Apache::Registry,
you can use the PerlModule directive:<a class="indexterm" name="AUTOID-26701"></A
>


<blockquote class="screen"><pre class="screen">PerlModule CGI</PRE
></BLOCKQUOTE
>


If you include this line, you shouldn't need to explicitly
<code class="literal">use CGI</CODE
> in each Perl CGI script anymore, as CGI.pm
will be loaded directly from the Apache server.  Up to ten
modules can be listed with the <code class="literal">PerlModule</CODE
> directive.</P
><p class="para">CGI scripts in the new directory should work now.  However,
if you have problems, the <em class="emphasis">mod_perl</EM
> manpage offers some 
words of wisdom:</P
><ul class="itemizedlist"><li class="listitem"><p class="para">Always <code class="literal">use strict</CODE
>.  </P
><p class="para">&quot;Standard&quot; CGI scripts start with a clean slate every time.
When switching to <em class="emphasis">mod_perl</EM
>, CGI programmers are often 
surprised to learn how often
they take advantage of this fact.  <code class="literal">use strict</CODE
> 
tells you when your variables haven't been properly declared
and might inherit values from previous invocations of the script.</P
></LI
><li class="listitem"><p class="para">Don't call <code class="literal">exit()</CODE
>.  <a class="indexterm" name="AUTOID-26718"></A
></P
><p class="para">Calling <code class="literal">exit()</CODE
> at the end of every program is a habit
of many programmers.  While often totally unnecessary, it 
usually doesn't hurt...except with <em class="emphasis">mod_perl</EM
>.
If you're using <em class="emphasis">mod_perl</EM
> without Apache::Registry, 
<code class="literal">exit()</CODE
> kills the server 
process.  If <code class="literal">exit()</CODE
> is the
last function call, you can just remove it.  
If the structure of your program is such that it is called
from the middle of the script, you can just put a label 
at the end of the script and use <code class="literal">goto()</CODE
>.  There's
also an <code class="literal">Apache-&gt;exit()</CODE
> call you can use if you're
really attached to <code class="literal">exit()</CODE
>s.  </P
><p class="para">If you're using Apache::Registry, you don't
have to worry about this problem.  Apache::Registry is
smart enough to override all <code class="literal">exit()</CODE
> calls with
<code class="literal">Apache-&gt;exit()</CODE
>.</P
></LI
></UL
><p class="para">In addition, it is recommended that you should use a recent
version of Perl and of CGI.pm.  You should scan the <em class="emphasis">mod_perl</EM
>
documentation for the very latest compatibility news.</P
><a class="indexterm" name="AUTOID-26734"></A
><a class="indexterm" name="AUTOID-26735"></A
><a class="indexterm" name="AUTOID-26736"></A
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch11_03.htm" title="11.3 mod_perl Handlers"><img src="../gifs/txtpreva.gif" alt="Previous: 11.3 mod_perl Handlers" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl in a Nutshell"><img src="../gifs/txthome.gif" alt="Perl in a Nutshell" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch11_05.htm" title="11.5 Server-Side Includes with mod_perl"><img src="../gifs/txtnexta.gif" alt="Next: 11.5 Server-Side Includes with mod_perl" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">11.3 mod_perl Handlers</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">11.5 Server-Side Includes with mod_perl</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
