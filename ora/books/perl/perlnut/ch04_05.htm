<html><head>
<title>[Chapter 4] 4.5 Operators</TITLE>
<meta name="DC.title" content="Perl in a Nutshell"><meta name="DC.creator" content="Ellen Siever, Stephen Spainhour &amp; Nathan Patwardhan"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:31:30Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-286-7" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch04_01.htm" title="4. The Perl Language"><link rel="prev" href="ch04_04.htm#PNUT-CH-4-SECT-4.2" title="4.4 Special Variables"><link rel="next" href="ch04_06.htm#PNUT-CH-4-SECT-6.3" title="4.6 Regular Expressions"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl in a Nutshell" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,71" href="index.htm" alt="Perl in a Nutshell"><area shape="RECT" coords="467,0,514,18" href="../search/nsrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch04_04.htm#PNUT-CH-4-SECT-4.2" title="4.4 Special Variables"><img src="../gifs/txtpreva.gif" alt="Previous: 4.4 Special Variables" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch04_01.htm" title="4. The Perl Language">Chapter 4<br>The Perl Language</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch04_06.htm#PNUT-CH-4-SECT-6.3" title="4.6 Regular Expressions"><img src="../gifs/txtnexta.gif" alt="Next: 4.6 Regular Expressions" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="PNUT-CH-4-SECT-5">4.5 Operators</A
></H2
><p class="para"><a class="indexterm" name="PNUT-CH-4-IX-OPERATORS"></A
><a class="indexterm" name="AUTOID-3958"></A
>Table 4-3 lists all the Perl operators from highest
to lowest precedence and indicates their associativity.</P
><br><table class="table" border="1" cellpadding="3"><caption class="table"><a class="title" name="PNUT-CH-4-TAB-2">Table 4.3: Perl Associativity and Operators, Listed by Precedence</A
></CAPTION
><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1">Associativity</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Operators</TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">Left</TD
><td class="entry" rowspan="1" colspan="1">Terms and list operators (leftward)</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">Left</TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">-&gt;</CODE
> (method call, dereference)</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">Nonassociative</TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">++ --</CODE
> (autoincrement, autodecrement)</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">Right</TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">**</CODE
> (exponentiation)</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">Right</TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">! ~ \</CODE
> and unary <code class="literal">+</CODE
> and <code class="literal">-</CODE
> (logical not, bit-not,
reference, unary plus, unary minus)</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">Left</TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">=~ !~ </CODE
> (matches, doesn't match)</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">Left</TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">* / % x</CODE
> (multiply, divide, modulus, string replicate)</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">Left</TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">+ - .</CODE
> (addition, subtraction, string concatenation)</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">Left</TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">&lt;&lt; &gt;&gt;</CODE
> (left bit-shift, right bit-shift)</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">Nonassociative</TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Named unary operators and file-test operators</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">Nonassociative</TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">&lt; &gt; &lt;= &gt;= lt gt le ge</CODE
> (less than, greater than, less
than or equal to, greater than or equal to, and their string
equivalents.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">Nonassociative</TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">== != &lt;=&gt; eq ne cmp</CODE
> (equal to, not equal to,
signed comparison, and their string equivalents)</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">Left</TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">&amp;</CODE
> (bit-and)</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">Left</TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">|  ^</CODE
> (bit-or, bit-xor)</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">Left</TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">&amp;&amp;</CODE
> (logical AND)</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">Left</TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">||</CODE
> (logical OR)</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">Nonassociative</TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">..  ...</CODE
> (range)</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">Right</TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">?:</CODE
> (ternary conditional)</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">Right</TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">= += -= *=</CODE
> and so on (assignment operators)</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">Left</TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">, =&gt;</CODE
> (comma, arrow comma)</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">Nonassociative</TD
><td class="entry" rowspan="1" colspan="1">List operators (rightward)</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">Right</TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">not</CODE
> (logical not)</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">Left</TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">and</CODE
> (logical and)</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">Left</TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">or xor</CODE
> (logical or, xor)</TD
></TR
></TBODY
></TABLE
><p class="para"><a class="indexterm" name="AUTOID-4073"></A
><a class="indexterm" name="AUTOID-4076"></A
>You can make your expressions clear by
using parentheses to group any part of an expression. Anything in
parentheses will be evaluated as a single unit within a larger expression.</P
><p class="para">With very few exceptions, Perl operators act upon scalar values
only, not upon list values. </P
><p class="para">Terms that take highest precedence in Perl include variables,
quote and quotelike operators, any expression in parentheses, and any
function whose arguments are in parentheses. </P
><p class="para"><a class="indexterm" name="AUTOID-4082"></A
>A list operator is a function
that can take a list of values as its argument. 
List operators take highest precedence when considering what's to
the left of them. 
They have considerably lower precedence when looking at their
right side, which is the expected result.</P
><p class="para">Also parsed as high-precedence terms are the <code class="literal">do{}</CODE
> and 
<code class="literal">eval{}</CODE
> constructs,
as well as subroutine and method calls, the anonymous array and hash
composers (<code class="literal">[]</CODE
> and <code class="literal">{}</CODE
>), and 
the anonymous subroutine composer <code class="literal">sub{}</CODE
>.</P
><p class="para">A unary operator
is a function that takes a single scalar value as its argument.
Unary operators have a lower precedence than list operators
because they only expect and take one value. </P
><div class="sect2"><h3 class="sect2"><a class="title" name="PNUT-CH-4-SECT-5.1">4.5.1 The Arrow Operator</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-4094"></A
><a class="indexterm" name="AUTOID-4096"></A
><a class="indexterm" name="AUTOID-4098"></A
><a class="indexterm" name="AUTOID-4101"></A
>The arrow operator is a dereference operator.  It can be
used for references to arrays, hashes, code references, or for calling methods
on objects.  See the discussion of references in <a class="xref" href="ch07_01.htm" title="Packages, Modules, and Objects">Chapter 7, <cite class="chapter">Packages, Modules, and Objects</CITE
></A
>.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PNUT-CH-4-SECT-5.2">4.5.2 Unary Operators</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-4108"></A
><a class="indexterm" name="AUTOID-4110"></A
><a class="indexterm" name="AUTOID-4113"></A
>Unary <code class="literal">!</CODE
> performs logical negation, that is, &quot;not.&quot; The 
<code class="literal">not</CODE
> operator
is a lower-precedence version of <code class="literal">!</CODE
>. </P
><p class="para"><a class="indexterm" name="AUTOID-4120"></A
><a class="indexterm" name="AUTOID-4123"></A
>Unary <code class="literal">-</CODE
> performs arithmetic negation if the operand is numeric. If
the operand is an identifier, then a string consisting of a minus sign
concatenated with the identifier is returned. Otherwise, if the string
starts with a plus or minus, a string starting with the opposite sign
is returned. </P
><p class="para"><a class="indexterm" name="AUTOID-4128"></A
><a class="indexterm" name="AUTOID-4131"></A
>Unary <code class="literal">~</CODE
> performs bitwise negation, that is, one's complement.
For example, on a 32-bit machine, <code class="literal">~0xFF</CODE
> is <code class="literal">0xFFFFFF00</CODE
>.
If the argument to <code class="literal">~</CODE
> is
a string instead of a number, a string of identical length is
returned, but with all the bits of the string complemented. </P
><p class="para"><a class="indexterm" name="AUTOID-4139"></A
><a class="indexterm" name="AUTOID-4142"></A
>Unary <code class="literal">+</CODE
> has no semantic effect whatsoever, even on strings. It is
syntactically useful for separating a function name from a parenthesized
expression that would otherwise be interpreted as the complete list of
function arguments.</P
><p class="para"><a class="indexterm" name="AUTOID-4147"></A
><a class="indexterm" name="AUTOID-4150"></A
>Unary <code class="literal">\</CODE
> creates a reference to whatever follows it 
(see &quot;References and Complex Data Structures&quot; later in this chapter).
Do not confuse this behavior with the behavior of backslash within a
string.
The <code class="literal">\</CODE
> operator may also be used on a parenthesized list value in a list
context, in which case it returns references to each element of the list.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PNUT-CH-4-SECT-5.3">4.5.3 Arithmetic Operators</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-4158"></A
><a class="indexterm" name="AUTOID-4160"></A
><a class="indexterm" name="AUTOID-4163"></A
><a class="indexterm" name="AUTOID-4166"></A
>Binary <code class="literal">**</CODE
> is the exponentiation operator. Note that it binds even
more tightly than unary minus, so <code class="literal">-2**4</CODE
> is <code class="literal">-(2**4)</CODE
>, not
<code class="literal">(-2)**4</CODE
>. Note also that <code class="literal">**</CODE
> has right associativity, so:


<blockquote class="screen"><pre class="screen">$e = 2 ** 3 ** 4;</PRE
></BLOCKQUOTE
>


evaluates to 2 to the 81st power, not 8 to the 4th power.</P
><p class="para"><a class="indexterm" name="AUTOID-4175"></A
><a class="indexterm" name="AUTOID-4178"></A
><a class="indexterm" name="AUTOID-4181"></A
><a class="indexterm" name="AUTOID-4183"></A
><a class="indexterm" name="AUTOID-4186"></A
><a class="indexterm" name="AUTOID-4189"></A
>The <code class="literal">*</CODE
> (multiply) and <code class="literal">/</CODE
> (divide) operators
work exactly as you might expect, multiplying or
dividing their two operands. Division is done in floating-point mode,
unless integer mode in enabled (via <code class="literal">use integer</CODE
>).<a class="indexterm" name="AUTOID-4194"></A
></P
><p class="para"><a class="indexterm" name="AUTOID-4198"></A
><a class="indexterm" name="AUTOID-4201"></A
><a class="indexterm" name="AUTOID-4204"></A
>The <code class="literal">%</CODE
> (modulus) operator converts its operands to integers before finding the
remainder according to integer division. For the same operation in
floating-point mode, you may prefer to use the <code class="literal">fmod()</CODE
> 
function from the
POSIX module (see <a class="xref" href="ch08_01.htm" title="Standard Modules">Chapter 8</A
>).</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PNUT-CH-4-SECT-5.4">4.5.4 Comparison Operators</A
></H3
><div class="sect3"><h4 class="sect3"><a class="title" name="PNUT-CH-4-SECT-5.4.1">4.5.4.1 Relational operators</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-4214"></A
><a class="indexterm" name="AUTOID-4216"></A
>Perl has two classes of relational operators. One class operates on
numeric values, and the other operates on string values.<a class="indexterm" name="AUTOID-4218"></A
>
String
comparisons are based on the ASCII collating sequence.
Relational operators are nonassociative, so<a class="indexterm" name="AUTOID-4221"></A
><a class="indexterm" name="AUTOID-4223"></A
><a class="indexterm" name="AUTOID-4225"></A
><a class="indexterm" name="AUTOID-4228"></A
><a class="indexterm" name="AUTOID-4231"></A
><a class="indexterm" name="AUTOID-4233"></A
><a class="indexterm" name="AUTOID-4235"></A
><a class="indexterm" name="AUTOID-4238"></A
><a class="indexterm" name="AUTOID-4241"></A
><a class="indexterm" name="AUTOID-4243"></A
><a class="indexterm" name="AUTOID-4245"></A
><a class="indexterm" name="AUTOID-4248"></A
><a class="indexterm" name="AUTOID-4251"></A
><a class="indexterm" name="AUTOID-4253"></A
><a class="indexterm" name="AUTOID-4255"></A
><a class="indexterm" name="AUTOID-4258"></A
>
<code class="literal">$a &lt; $b &lt; $c</CODE
> is a syntax error.

</P
><table class="informaltable" border="1" cellpadding="3"><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1">Numeric</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">String</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Meaning</TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">&gt;</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">gt</CODE
></TD
><td class="entry" rowspan="1" colspan="1">Greater than</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">&gt;=</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">ge</CODE
></TD
><td class="entry" rowspan="1" colspan="1">Greater than or equal to</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">&lt;</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">lt</CODE
></TD
><td class="entry" rowspan="1" colspan="1">Less than </TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">&lt;=</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">le</CODE
></TD
><td class="entry" rowspan="1" colspan="1">Less than or equal to</TD
></TR
></TBODY
></TABLE
><p class="para"></P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PNUT-CH-4-SECT-5.4.2">4.5.4.2 Equality operators</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-4297"></A
><a class="indexterm" name="AUTOID-4299"></A
><a class="indexterm" name="AUTOID-4302"></A
><a class="indexterm" name="AUTOID-4305"></A
><a class="indexterm" name="AUTOID-4307"></A
><a class="indexterm" name="AUTOID-4310"></A
><a class="indexterm" name="AUTOID-4313"></A
><a class="indexterm" name="AUTOID-4315"></A
><a class="indexterm" name="AUTOID-4318"></A
><a class="indexterm" name="AUTOID-4321"></A
>The equal and not-equal operators return 1 for true, and <code class="literal">&quot;&quot;</CODE
> for false (just as
the relational operators do). The <code class="literal">&lt;=&gt;</CODE
> and <em class="emphasis">cmp</EM
> operators return
-1 if the left operand is less than the right operand, 0 if they are
equal, and +1 if the left operand is greater than the right. 

</P
><table class="informaltable" border="1" cellpadding="3"><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1">Numeric</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">String</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Meaning</TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">==</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">eq</CODE
></TD
><td class="entry" rowspan="1" colspan="1">Equal to</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">!=</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">ne</CODE
></TD
><td class="entry" rowspan="1" colspan="1">Not equal to</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">&lt;=&gt;</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">cmp</CODE
></TD
><td class="entry" rowspan="1" colspan="1">Comparison, with signed result</TD
></TR
></TBODY
></TABLE
><p class="para"></P
></DIV
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PNUT-CH-4-SECT-5.5">4.5.5 Autoincrement and Autodecrement</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-4355"></A
><a class="indexterm" name="AUTOID-4357"></A
><a class="indexterm" name="AUTOID-4359"></A
><a class="indexterm" name="AUTOID-4362"></A
><a class="indexterm" name="AUTOID-4365"></A
><a class="indexterm" name="AUTOID-4368"></A
>If placed before a variable, 
the <code class="literal">++</CODE
> and <code class="literal">--</CODE
> operators 
increment or decrement the variable before returning the value, and if
placed after, they increment or decrement the variable after returning the
value. </P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PNUT-CH-4-SECT-5.6">4.5.6 Assignment Operators</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-4376"></A
>Perl recognizes the following operators for assigning a value to a variable:


<blockquote class="screen"><pre class="screen">=    **=    +=    *=    &amp;=    &lt;&lt;=    &amp;&amp;=
            -=    /=    |=    &gt;&gt;=    ||=
            .=    %=    ^=
                  x=</PRE
></BLOCKQUOTE
>


Each operator requires a variable on the left
side and some expression on the right side. For the simple assignment<a class="indexterm" name="AUTOID-4379"></A
><a class="indexterm" name="AUTOID-4381"></A
><a class="indexterm" name="AUTOID-4384"></A
><a class="indexterm" name="AUTOID-4387"></A
><a class="indexterm" name="AUTOID-4390"></A
><a class="indexterm" name="AUTOID-4393"></A
><a class="indexterm" name="AUTOID-4396"></A
><a class="indexterm" name="AUTOID-4399"></A
><a class="indexterm" name="AUTOID-4402"></A
><a class="indexterm" name="AUTOID-4405"></A
><a class="indexterm" name="AUTOID-4408"></A
><a class="indexterm" name="AUTOID-4411"></A
><a class="indexterm" name="AUTOID-4414"></A
><a class="indexterm" name="AUTOID-4417"></A
><a class="indexterm" name="AUTOID-4420"></A
><a class="indexterm" name="AUTOID-4423"></A
><a class="indexterm" name="AUTOID-4426"></A
><a class="indexterm" name="AUTOID-4429"></A
><a class="indexterm" name="AUTOID-4432"></A
><a class="indexterm" name="AUTOID-4435"></A
><a class="indexterm" name="AUTOID-4438"></A
><a class="indexterm" name="AUTOID-4441"></A
><a class="indexterm" name="AUTOID-4444"></A
><a class="indexterm" name="AUTOID-4447"></A
><a class="indexterm" name="AUTOID-4450"></A
><a class="indexterm" name="AUTOID-4453"></A
><a class="indexterm" name="AUTOID-4456"></A
><a class="indexterm" name="AUTOID-4459"></A
><a class="indexterm" name="AUTOID-4462"></A
><a class="indexterm" name="AUTOID-4465"></A
><a class="indexterm" name="AUTOID-4468"></A
><a class="indexterm" name="AUTOID-4471"></A
>
operator, <code class="literal">=</CODE
>, the value of the expression is stored into the designated
variable. For the other operators, Perl evaluates the expression:


<blockquote class="screen"><pre class="screen">$var <em class="emphasis">OP</EM
>= $value</PRE
></BLOCKQUOTE
>


as if it were written:


<blockquote class="screen"><pre class="screen">$var = $var <em class="emphasis">OP</EM
> $value</PRE
></BLOCKQUOTE
>


except that <code class="literal">$var</CODE
> is evaluated only once.
For example:


<blockquote class="screen"><pre class="screen">$a += 2; # same as $a = $a + 2</PRE
></BLOCKQUOTE
>
&#13;</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PNUT-CH-4-SECT-5.7">4.5.7 Pattern Match Operators</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-4484"></A
><a class="indexterm" name="AUTOID-4487"></A
><a class="indexterm" name="AUTOID-4489"></A
><a class="indexterm" name="AUTOID-4492"></A
>Binary <code class="literal">=~</CODE
> binds a scalar expression to a pattern match, substitution,
or translation. These operations search or modify the string <code class="literal">$_</CODE
> by
default. </P
><p class="para"><a class="indexterm" name="AUTOID-4498"></A
><a class="indexterm" name="AUTOID-4501"></A
>Binary <code class="literal">!~</CODE
> is just like <code class="literal">=~</CODE
> except the return value is negated in
the logical sense. The following expressions are functionally equivalent:


<blockquote class="screen"><pre class="screen">$string !~ /<em class="emphasis">pattern</EM
>/
not $string =~ /<em class="emphasis">pattern</EM
>/</PRE
></BLOCKQUOTE
>


See <a class="xref" href="ch04_06.htm#PNUT-CH-4-SECT-6.3" title="Regular Expressions">Section 4.6</A
>&quot; later in this chapter.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PNUT-CH-4-SECT-5.8">4.5.8 File Test Operators</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-4513"></A
>A file test operator is a unary operator that tests a
filename or a filehandle.<a class="indexterm" name="AUTOID-4515"></A
><a class="indexterm" name="AUTOID-4517"></A
><a class="indexterm" name="AUTOID-4519"></A
><a class="indexterm" name="AUTOID-4521"></A
><a class="indexterm" name="AUTOID-4523"></A
><a class="indexterm" name="AUTOID-4525"></A
><a class="indexterm" name="AUTOID-4527"></A
><a class="indexterm" name="AUTOID-4529"></A
><a class="indexterm" name="AUTOID-4531"></A
><a class="indexterm" name="AUTOID-4533"></A
><a class="indexterm" name="AUTOID-4535"></A
><a class="indexterm" name="AUTOID-4537"></A
><a class="indexterm" name="AUTOID-4539"></A
><a class="indexterm" name="AUTOID-4541"></A
><a class="indexterm" name="AUTOID-4543"></A
><a class="indexterm" name="AUTOID-4545"></A
><a class="indexterm" name="AUTOID-4547"></A
><a class="indexterm" name="AUTOID-4549"></A
><a class="indexterm" name="AUTOID-4551"></A
><a class="indexterm" name="AUTOID-4553"></A
><a class="indexterm" name="AUTOID-4555"></A
><a class="indexterm" name="AUTOID-4557"></A
><a class="indexterm" name="AUTOID-4559"></A
><a class="indexterm" name="AUTOID-4561"></A
><a class="indexterm" name="AUTOID-4563"></A
><a class="indexterm" name="AUTOID-4565"></A
><a class="indexterm" name="AUTOID-4567"></A
>

</P
><table class="informaltable" border="1" cellpadding="3"><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1">Operator</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Meaning</TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">-r</CODE
></TD
><td class="entry" rowspan="1" colspan="1">File is readable by effective uid/gid.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">-w</CODE
></TD
><td class="entry" rowspan="1" colspan="1">File is writable by effective uid/gid.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">-x</CODE
></TD
><td class="entry" rowspan="1" colspan="1">File is executable by effective uid/gid.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">-o</CODE
></TD
><td class="entry" rowspan="1" colspan="1">File is owned by effective uid.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">-R</CODE
></TD
><td class="entry" rowspan="1" colspan="1">File is readable by real uid/gid.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">-W</CODE
></TD
><td class="entry" rowspan="1" colspan="1">File is writable by real uid/gid.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">-X</CODE
></TD
><td class="entry" rowspan="1" colspan="1">File is executable by real uid/gid.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">-O</CODE
></TD
><td class="entry" rowspan="1" colspan="1">File is owned by real uid.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1"></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">-e</CODE
></TD
><td class="entry" rowspan="1" colspan="1">File exists.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">-z</CODE
></TD
><td class="entry" rowspan="1" colspan="1">File has zero size.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">-s</CODE
></TD
><td class="entry" rowspan="1" colspan="1">File has non-zero size (returns size).</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1"></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">-f</CODE
></TD
><td class="entry" rowspan="1" colspan="1">File is a plain file.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">-d</CODE
></TD
><td class="entry" rowspan="1" colspan="1">File is a directory.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">-l</CODE
></TD
><td class="entry" rowspan="1" colspan="1">File is a symbolic link.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">-p</CODE
></TD
><td class="entry" rowspan="1" colspan="1">File is a named pipe (FIFO).</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">-S</CODE
></TD
><td class="entry" rowspan="1" colspan="1">File is a socket.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">-b</CODE
></TD
><td class="entry" rowspan="1" colspan="1">File is a block special file.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">-c</CODE
></TD
><td class="entry" rowspan="1" colspan="1">File is a character special file.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">-t</CODE
></TD
><td class="entry" rowspan="1" colspan="1">Filehandle is opened to a tty.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1"></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">-u</CODE
></TD
><td class="entry" rowspan="1" colspan="1">File has setuid bit set.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">-g</CODE
></TD
><td class="entry" rowspan="1" colspan="1">File has setgid bit set.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">-k</CODE
></TD
><td class="entry" rowspan="1" colspan="1">File has sticky bit set.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1"></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">-T</CODE
></TD
><td class="entry" rowspan="1" colspan="1">File is a text file.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">-B</CODE
></TD
><td class="entry" rowspan="1" colspan="1">File is a binary file (opposite of <code class="literal">-T</CODE
>).</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1"></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">-M</CODE
></TD
><td class="entry" rowspan="1" colspan="1">Age of file (at startup) in days since modification.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">-A</CODE
></TD
><td class="entry" rowspan="1" colspan="1">Age of file (at startup) in days since last access.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">-C</CODE
></TD
><td class="entry" rowspan="1" colspan="1">Age of file (at startup) in days since inode change.</TD
></TR
></TBODY
></TABLE
><p class="para"></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PNUT-CH-4-SECT-5.9">4.5.9 Logical Operators</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-4703"></A
><a class="indexterm" name="AUTOID-4705"></A
><a class="indexterm" name="AUTOID-4708"></A
><a class="indexterm" name="AUTOID-4711"></A
><a class="indexterm" name="AUTOID-4714"></A
><a class="indexterm" name="AUTOID-4717"></A
><a class="indexterm" name="AUTOID-4719"></A
>Perl provides the <code class="literal">&amp;&amp;</CODE
> (logical AND)
and <code class="literal">||</CODE
> (logical OR) operators. They evaluate from
left to right testing the truth of the statement. 

</P
><table class="informaltable" border="1" cellpadding="3"><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1">Example</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Name</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Result</TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">$a &amp;&amp; $b</CODE
></TD
><td class="entry" rowspan="1" colspan="1">And</TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">$a</CODE
> if <code class="literal">$a</CODE
> is false, <code class="literal">$b</CODE
> otherwise</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">$a || $b</CODE
></TD
><td class="entry" rowspan="1" colspan="1">Or</TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">$a</CODE
> if <code class="literal">$a</CODE
> is true, <code class="literal">$b</CODE
> otherwise</P
></TD
></TR
></TBODY
></TABLE
><p class="para">

For example, an oft-appearing idiom
in Perl programs is:


<blockquote class="screen"><pre class="screen">open(FILE, &quot;somefile&quot;) || die &quot;Cannot open somefile: $!\n&quot;;</PRE
></BLOCKQUOTE
>


In this case, Perl first evaluates the <code class="literal">open</CODE
> function. If the value
is true (because <code class="literal">somefile</CODE
> was successfully opened), the execution
of the <code class="literal">die</CODE
> function is unnecessary and is skipped. </P
><p class="para">Perl also provides lower-precedence <code class="literal">and</CODE
> and <code class="literal">or</CODE
> operators that are
more readable. </P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PNUT-CH-4-SECT-5.10">4.5.10 Bitwise Operators</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-4759"></A
><a class="indexterm" name="AUTOID-4761"></A
><a class="indexterm" name="AUTOID-4763"></A
><a class="indexterm" name="AUTOID-4765"></A
><a class="indexterm" name="AUTOID-4767"></A
><a class="indexterm" name="AUTOID-4770"></A
><a class="indexterm" name="AUTOID-4773"></A
><a class="indexterm" name="AUTOID-4776"></A
><a class="indexterm" name="AUTOID-4779"></A
><a class="indexterm" name="AUTOID-4782"></A
>Perl has bitwise AND, OR, and XOR (exclusive
OR) operators: <code class="literal">&amp;</CODE
>, <code class="literal">|</CODE
>, and <code class="literal">^</CODE
>. 
These
operators work differently on numeric values than they do on strings.
If either operand is a number, then both
operands are converted to integers, and the bitwise operation is
performed between the two integers. 
If both operands are strings,
these operators do bitwise operations between corresponding
bits from the two strings. </P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PNUT-CH-4-SECT-5.11">4.5.11 Miscellaneous Operators</A
></H3
><div class="sect3"><h4 class="sect3"><a class="title" name="PNUT-CH-4-SECT-5.11.1">4.5.11.1 Range operator</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-4793"></A
><a class="indexterm" name="AUTOID-4795"></A
><a class="indexterm" name="AUTOID-4798"></A
>The <code class="literal">..</CODE
> range operator is really two different
operators depending on the context. In a list context, it returns a
list of values counting (by ones) from the left value to the right
value. </P
><p class="para">In a scalar context, <code class="literal">..</CODE
> returns a Boolean value. 
It is false
as long as its left operand is false. Once the left operand is true,
the range operator stays true until the right operand is true,
after which the range operator becomes false again. 
The right operand is not evaluated while the operator is in the false
state, and the left operand is not evaluated while the operator is in the true
state.</P
><p class="para"><a class="indexterm" name="AUTOID-4805"></A
><a class="indexterm" name="AUTOID-4807"></A
><a class="indexterm" name="AUTOID-4810"></A
>The alternate version of this operator, <code class="literal">...</CODE
>, does not test the right
operand immediately when the operator becomes true; it waits until the next evaluation.</P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PNUT-CH-4-SECT-5.11.2">4.5.11.2 Conditional operator</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-4817"></A
><a class="indexterm" name="AUTOID-4819"></A
><a class="indexterm" name="AUTOID-4822"></A
>Ternary <code class="literal">?:</CODE
> is the conditional operator. 
It works
much like an if-then-else statement, 
but it can safely be embedded within other
operations and functions. 


<blockquote class="screen"><pre class="screen"><em class="emphasis">test_expr</EM
> ? <em class="emphasis">if_true_expr</EM
> : <em class="emphasis">if_false_expr</EM
></PRE
></BLOCKQUOTE
>


If the <code class="replaceable"><i>test_expr</I
></CODE
> is true, only the
<code class="replaceable"><i>if_true_expr</I
></CODE
> is evaluated.
Otherwise, only the <code class="replaceable"><i>if_false_expr</I
></CODE
>
is evaluated.  Either way, the value of the evaluated expression
becomes the value of the entire expression.</P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PNUT-CH-4-SECT-5.11.3">4.5.11.3 Comma operator</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-4836"></A
><a class="indexterm" name="AUTOID-4839"></A
>In a list context, &quot;<code class="literal">,</CODE
>&quot; is the list argument separator and 
inserts both its arguments into the list. 
In scalar context, &quot;<code class="literal">,</CODE
>&quot; evaluates
its left argument, throws that value away, then evaluates its right
argument and returns that value. </P
><p class="para"><a class="indexterm" name="AUTOID-4845"></A
><a class="indexterm" name="AUTOID-4848"></A
>The <code class="literal">=&gt;</CODE
> operator is mostly just a synonym for the comma operator.
It's useful for documenting arguments that come in pairs. It also
forces any identifier to the left of it to be interpreted as a string.</P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PNUT-CH-4-SECT-5.11.4">4.5.11.4 String operator</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-4855"></A
><a class="indexterm" name="AUTOID-4858"></A
><a class="indexterm" name="AUTOID-4861"></A
><a class="indexterm" name="AUTOID-4864"></A
>The concatenation operator &quot;.&quot; is used to add strings together:


<blockquote class="screen"><pre class="screen">print 'abc' . 'def';        # prints abcdef
print $a . $b;              # concatenates the string values of $a and $b</PRE
></BLOCKQUOTE
>

<a class="indexterm" name="AUTOID-4867"></A
><a class="indexterm" name="AUTOID-4869"></A
>
Binary <code class="literal">x</CODE
> is the string repetition operator. In scalar context, it
returns a concatenated string consisting of the left operand repeated
the number of times specified by the right operand.


<blockquote class="screen"><pre class="screen">print '-' x 80;                           # prints row of dashes
print &quot;\t&quot; x ($tab/8), ' ' x ($tab%8);    # tabs over</PRE
></BLOCKQUOTE
>


In list context, if the left operand is a list in parentheses, the <code class="literal">x</CODE
>
works as a list replicator rather than a string replicator. This is
useful for initializing all the elements of an array of indeterminate
length to the same value:


<blockquote class="screen"><pre class="screen">@ones = (1) x 80;           # a list of 80 1s
@ones = (5) x @ones;        # set all elements to 5</PRE
></BLOCKQUOTE
><a class="indexterm" name="AUTOID-4875"></A
></P
></DIV
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch04_04.htm#PNUT-CH-4-SECT-4.2" title="4.4 Special Variables"><img src="../gifs/txtpreva.gif" alt="Previous: 4.4 Special Variables" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl in a Nutshell"><img src="../gifs/txthome.gif" alt="Perl in a Nutshell" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch04_06.htm#PNUT-CH-4-SECT-6.3" title="4.6 Regular Expressions"><img src="../gifs/txtnexta.gif" alt="Next: 4.6 Regular Expressions" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">4.4 Special Variables</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">4.6 Regular Expressions</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
