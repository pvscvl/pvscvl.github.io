<html><head>
<title>[Chapter 4] 4.3 Statements</TITLE>
<meta name="DC.title" content="Perl in a Nutshell"><meta name="DC.creator" content="Ellen Siever, Stephen Spainhour &amp; Nathan Patwardhan"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:30:43Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-286-7" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch04_01.htm" title="4. The Perl Language"><link rel="prev" href="ch04_02.htm" title="4.2 Data Types and Variables"><link rel="next" href="ch04_04.htm#PNUT-CH-4-SECT-4.2" title="4.4 Special Variables"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl in a Nutshell" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,71" href="index.htm" alt="Perl in a Nutshell"><area shape="RECT" coords="467,0,514,18" href="../search/nsrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch04_02.htm" title="4.2 Data Types and Variables"><img src="../gifs/txtpreva.gif" alt="Previous: 4.2 Data Types and Variables" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch04_01.htm" title="4. The Perl Language">Chapter 4<br>The Perl Language</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch04_04.htm#PNUT-CH-4-SECT-4.2" title="4.4 Special Variables"><img src="../gifs/txtnexta.gif" alt="Next: 4.4 Special Variables" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="PNUT-CH-4-SECT-3">4.3 Statements</A
></H2
><p class="para"><a class="indexterm" name="PNUT-CH-4-IX-STATEMENTS"></A
>A simple statement is an expression evaluated for its side effects. Every
simple statement must end in a semicolon, unless it is the 
final statement in a block. </P
><p class="para"><a class="indexterm" name="AUTOID-2912"></A
><a class="indexterm" name="AUTOID-2914"></A
><a class="indexterm" name="AUTOID-2917"></A
><a class="indexterm" name="AUTOID-2920"></A
>A sequence of statements that defines a scope is called a <em class="emphasis">block</EM
>.
Generally, a block is delimited by braces, or <code class="literal">{ }</CODE
>.
Compound statements are built out of expressions and blocks. 
A conditional expression is evaluated
to determine whether a statement block will be executed. 
Compound statements are defined in terms of
blocks, not statements, which means that
braces are required. </P
><p class="para"><a class="indexterm" name="AUTOID-2926"></A
><a class="indexterm" name="AUTOID-2929"></A
>Any block can be given a label.
<em class="emphasis">Labels</EM
> are identifiers that follow the variable-naming rules (i.e., 
they begin with a letter or underscore, and can contain alphanumerics and 
underscores). 
They are placed just before the block and are followed by a colon, 
like <code class="literal">SOMELABEL</CODE
> here:


<blockquote class="screen"><pre class="screen">SOMELABEL: {
  ...<em class="emphasis">statements</EM
>...
  }</PRE
></BLOCKQUOTE
>


By convention, labels are all uppercase, so as not to conflict with
reserved words. Labels are used with the loop-control
commands <code class="literal">next</CODE
>, <code class="literal">last</CODE
>, and <code class="literal">redo</CODE
> to alter 
the flow of execution
in your programs. </P
><div class="sect2"><h3 class="sect2"><a class="title" name="PNUT-CH-4-SECT-3.1">4.3.1 Conditionals and Loops</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-2942"></A
><a class="indexterm" name="AUTOID-2944"></A
><a class="indexterm" name="AUTOID-2946"></A
><a class="indexterm" name="AUTOID-2948"></A
>The <code class="literal">if</CODE
> and <code class="literal">unless</CODE
> statements execute blocks of code depending
on whether a condition is met. These statements take the following forms:


<blockquote class="screen"><pre class="screen">if (<em class="emphasis">expression</EM
>) {<em class="emphasis">block</EM
>} else {<em class="emphasis">block</EM
>}

unless (<em class="emphasis">expression</EM
>) {<em class="emphasis">block</EM
>} else {<em class="emphasis">block</EM
>}

if (<em class="emphasis">expression1</EM
>) {<em class="emphasis">block</EM
>}
elsif (<em class="emphasis">expression2</EM
>) {<em class="emphasis">block</EM
>}
  ...
elsif (<em class="emphasis">lastexpression</EM
>) {<em class="emphasis">block</EM
>}
else {<em class="emphasis">block</EM
>}</PRE
></BLOCKQUOTE
>
&#13;</P
><div class="sect3"><h4 class="sect3"><a class="title" name="PNUT-CH-4-SECT-3.1.1">4.3.1.1 while loops</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-2969"></A
>The <code class="literal">while</CODE
> statement repeatedly executes a block as long as
its conditional expression is true.
For example: 


<blockquote class="screen"><pre class="screen">while (&lt;INFILE&gt;) {
    print OUTFILE, &quot;$_\n&quot;;
}</PRE
></BLOCKQUOTE
>


This loop reads each line from the file opened with the filehandle INFILE
and prints them to the OUTFILE filehandle. The loop will cease when
it encounters an end-of-file.</P
><p class="para"><a class="indexterm" name="AUTOID-2974"></A
>If the word <code class="literal">while</CODE
> is replaced by the word <code class="literal">until</CODE
>, the
sense of the test is reversed. The conditional is still tested before
the first iteration, though.</P
><p class="para"><a class="indexterm" name="AUTOID-2979"></A
>The <code class="literal">while</CODE
> statement has an optional extra block on the end called a
<code class="literal">continue</CODE
> block. This block is executed before every successive
iteration of the loop, even if the main <code class="literal">while</CODE
> block is exited<a class="indexterm" name="AUTOID-2984"></A
>
early by the loop control command <code class="literal">next</CODE
>. However, the <code class="literal">continue</CODE
> block
is not executed if the main block is exited by a <code class="literal">last</CODE
> statement.
The <code class="literal">continue</CODE
> block is always executed before the conditional is evaluated again.</P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PNUT-CH-4-SECT-3.1.2">4.3.1.2 for loops</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-2993"></A
>The <code class="literal">for</CODE
> loop has three semicolon-separated expressions within
its parentheses. These three expressions function respectively as the
initialization, the condition, and the re-initialization expressions of
the loop.   The <code class="literal">for</CODE
> loop can be defined in terms
of the corresponding <code class="literal">while</CODE
> loop:


<blockquote class="screen"><pre class="screen">for ($i = 1; $i &lt; 10; $i++) {
    ...
}</PRE
></BLOCKQUOTE
>


is the same as:


<blockquote class="screen"><pre class="screen">$i = 1;
while ($i &lt; 10) {
    ...
}
continue {
    $i++;
}</PRE
></BLOCKQUOTE
>
&#13;</P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PNUT-CH-4-SECT-3.1.3">4.3.1.3 foreach loops</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-3003"></A
>The <code class="literal">foreach</CODE
> loop iterates over a list value and sets the
control variable (<code class="replaceable"><i>var</I
></CODE
>) to be each element of the list in turn:


<blockquote class="screen"><pre class="screen">foreach <em class="emphasis">var</EM
> (<em class="emphasis">list</EM
>) {
    ...
}</PRE
></BLOCKQUOTE
>


Like the <code class="literal">while</CODE
> statement, the <code class="literal">foreach</CODE
> statement can also 
take a <code class="literal">continue</CODE
> block.</P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PNUT-CH-4-SECT-3.1.4">4.3.1.4 Modifiers</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-3016"></A
><a class="indexterm" name="AUTOID-3018"></A
><a class="indexterm" name="AUTOID-3020"></A
><a class="indexterm" name="AUTOID-3022"></A
><a class="indexterm" name="AUTOID-3024"></A
><a class="indexterm" name="AUTOID-3026"></A
>Any simple statement may be followed by a single modifier
that gives the statement a conditional or looping mechanism. This syntax 
provides 
a simpler and often more elegant method than using the corresponding compound
statements. These modifiers are:


<blockquote class="screen"><pre class="screen"><em class="emphasis">statement</EM
> if <em class="emphasis">EXPR</EM
>;
<em class="emphasis">statement</EM
> unless <em class="emphasis">EXPR</EM
>;
<em class="emphasis">statement</EM
> while <em class="emphasis">EXPR</EM
>;
<em class="emphasis">statement</EM
> until <em class="emphasis">EXPR</EM
>;</PRE
></BLOCKQUOTE
>


For example:


<blockquote class="screen"><pre class="screen">$i = $num if ($num &lt; 50); # $i will be less than 50
$j = $cnt unless ($cnt &lt; 100); # $j will equal 100 or greater
$lines++ while &lt;FILE&gt;;
print &quot;$_\n&quot; until /The end/;</PRE
></BLOCKQUOTE
>


The conditional is evaluated first with the <code class="literal">while</CODE
> and <code class="literal">until</CODE
> modifiers 
except when applied to a<a class="indexterm" name="AUTOID-3040"></A
>
<code class="literal">do {}</CODE
> statement, in
which case the block executes once before the conditional is evaluated.
For example:


<blockquote class="screen"><pre class="screen">do {
    $line = &lt;STDIN&gt;;
    ...
} until $line eq &quot;.\n&quot;;</PRE
></BLOCKQUOTE
>


For more information on <code class="literal">do</CODE
>, see <a class="xref" href="ch05_01.htm" title="Function Reference">Chapter 5, <cite class="chapter">Function Reference</CITE
></A
>.</P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PNUT-CH-4-SECT-3.1.5">4.3.1.5 Loop control</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-3049"></A
><a class="indexterm" name="AUTOID-3052"></A
>You can put a label on a loop to give it a name. The
loop's label
identifies the loop for the loop-control commands <code class="literal">next</CODE
>,
<code class="literal">last</CODE
>, and <code class="literal">redo</CODE
>. 


<blockquote class="screen"><pre class="screen">LINE: while (&lt;SCRIPT&gt;) {
    print;
    next LINE if /^#/;      # discard comments
    }</PRE
></BLOCKQUOTE
>


The syntax for the loop-control commands is:


<blockquote class="screen"><pre class="screen">last <em class="emphasis">label</EM
>
next <em class="emphasis">label</EM
>
redo <em class="emphasis">label</EM
></PRE
></BLOCKQUOTE
>


If the label is omitted,
the loop-control command refers to the innermost enclosing loop. </P
><p class="para"><a class="indexterm" name="AUTOID-3064"></A
>The <code class="literal">last</CODE
> command is like the <code class="literal">break</CODE
> statement in C (as used in
loops); it immediately exits the loop in question. 
The <code class="literal">continue</CODE
>
block, if any, is not executed. </P
><p class="para"><a class="indexterm" name="AUTOID-3070"></A
>The <code class="literal">next</CODE
> command is like the <code class="literal">continue</CODE
> statement in C; it skips
the rest of the current iteration and starts the next iteration of the
loop. If there is a <code class="literal">continue</CODE
> block
on the loop, it is always executed
just before the conditional is about to be evaluated again.</P
><p class="para"><a class="indexterm" name="AUTOID-3076"></A
>The <code class="literal">redo</CODE
> command restarts the loop block without evaluating the
conditional again. The <code class="literal">continue</CODE
> block,
if any, is not executed.</P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PNUT-CH-4-SECT-3.1.6">4.3.1.6 goto</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-3083"></A
>Perl supports a <code class="literal">goto</CODE
> command. There are three forms:
<code class="literal">goto</CODE
> <code class="replaceable"><i>label</I
></CODE
>, <code class="literal">goto</CODE
> <code class="replaceable"><i>expr</I
></CODE
>, and <code class="literal">goto</CODE
> <code class="literal">&amp;</CODE
><code class="replaceable"><i>name</I
></CODE
>.</P
><p class="para">The <code class="literal">goto</CODE
> <code class="replaceable"><i>label</I
></CODE
> form finds the statement labeled with
<code class="replaceable"><i>label</I
></CODE
> and
resumes execution there. It may not be used to go inside any construct
that requires initialization, such as a subroutine or a <code class="literal">foreach</CODE
>
loop. </P
><p class="para">The <code class="literal">goto</CODE
> <code class="replaceable"><i>expr</I
></CODE
>
form expects the expression to return a label name.</P
><p class="para">The <code class="literal">goto &amp;</CODE
><code class="replaceable"><i>name</I
></CODE
> form 
substitutes a call to the 
named subroutine for the currently running subroutine. <a class="indexterm" name="AUTOID-3104"></A
></P
></DIV
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch04_02.htm" title="4.2 Data Types and Variables"><img src="../gifs/txtpreva.gif" alt="Previous: 4.2 Data Types and Variables" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl in a Nutshell"><img src="../gifs/txthome.gif" alt="Perl in a Nutshell" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch04_04.htm#PNUT-CH-4-SECT-4.2" title="4.4 Special Variables"><img src="../gifs/txtnexta.gif" alt="Next: 4.4 Special Variables" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">4.2 Data Types and Variables</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">4.4 Special Variables</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
