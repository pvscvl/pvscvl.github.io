<html><head>
<title>Reference: eval</TITLE>
<meta name="DC.title" content="Perl in a Nutshell"><meta name="DC.creator" content="Ellen Siever, Stephen Spainhour &amp; Nathan Patwardhan"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:34:44Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-286-7" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch05_02.htm" title="5.2 Perl Functions in Alphabetical Order"><link rel="prev" href="c05_035.htm" title="Reference: eof"><link rel="next" href="c05_037.htm" title="Reference: exec"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl in a Nutshell" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,71" href="index.htm" alt="Perl in a Nutshell"><area shape="RECT" coords="467,0,514,18" href="../search/nsrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="NUTENTRY" href="c05_035.htm" title="Reference: eof"><img src="../gifs/txtpreva.gif" alt="Previous: Reference: eof" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch05_01.htm" title="5. Function Reference">Chapter 5<br>Function Reference</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="NUTENTRY" href="c05_037.htm" title="Reference: exec"><img src="../gifs/txtnexta.gif" alt="Next: Reference: exec" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="NUTENTRY"><h2 class="nutentry"><a class="term" name="AUTOID-8001">eval</A
></H2
><pre class="nutsynopsis">eval <em class="emphasis">string</EM
>
eval {<em class="emphasis">block</EM
>}</PRE
><dl class="nutentrybody"><p class="para"><a class="indexterm" name="AUTOID-8008"></A
>Evaluates the expression or code in its argument at runtime as a separate
Perl program within the context of the larger script.
Any variable settings remain afterward, as do
any subroutine or format definitions. The code of the <code class="literal">eval</CODE
> is treated 
as a
block, so any locally scoped variables declared within the <code class="literal">eval</CODE
> last
only until the <code class="literal">eval</CODE
> is done.
(See also <code class="literal">local</CODE
> and <code class="literal">my</CODE
>.) The value returned from an <code class="literal">eval</CODE
> 
is the value of the last
expression evaluated. Like subroutines, you may also use the
<code class="literal">return</CODE
> function to return a value and exit the <code class="literal">eval</CODE
>.</P
><p class="para">With <code class="literal">eval</CODE
> <em class="emphasis">string</EM
>, the contents of 
<em class="emphasis">string</EM
> are compiled and executed at runtime. For example:


<blockquote class="screen"><pre class="screen">$a = 3, $b = 4;
$c = '$a * $b';
print (eval &quot;$c&quot;); # prints 12</PRE
></BLOCKQUOTE
>


The string form of <code class="literal">eval</CODE
> is useful for executing strings produced
at runtime from standard or other dynamic input sources. If the string
produces an error, either from syntax or at runtime, the <code class="literal">eval</CODE
>
exits with the undefined value and places the error in <code class="literal">$@</CODE
>.
If <em class="emphasis">string</EM
> is omitted, the operator evaluates <code class="literal">$_</CODE
>.</P
><p class="para">The block form of <code class="literal">eval</CODE
> is used in Perl programs to handle
runtime errors (exceptions). The code in <em class="emphasis">block</EM
> is compiled
only once during the compilation of the main program. If there is a syntax
error in the block it will produce an error at compile time.
If the code in <em class="emphasis">block</EM
> produces a runtime error (or if a
<code class="literal">die</CODE
> statement is encountered), the <code class="literal">eval</CODE
>
exits, and the error is placed in <code class="literal">$@</CODE
>.
For example, the following code can be used to trap 
a divide-by-zero error at runtime:


<blockquote class="screen"><pre class="screen">eval {
      $a = 10; $b = 0;
      $c = $a / $b;     # causes runtime error
                        # trapped by eval
     };
print $@;               # Prints  &quot;Illegal division by 0 at try.pl line 3&quot;</PRE
></BLOCKQUOTE
>


As with any code in a block, a final semicolon is not required.</P
></DL
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="NUTENTRY" href="c05_035.htm" title="Reference: eof"><img src="../gifs/txtpreva.gif" alt="Previous: Reference: eof" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl in a Nutshell"><img src="../gifs/txthome.gif" alt="Perl in a Nutshell" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="NUTENTRY" href="c05_037.htm" title="Reference: exec"><img src="../gifs/txtnexta.gif" alt="Next: Reference: exec" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">Reference: eof</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">Reference: exec</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
