<html><head>
<title>[Chapter 7] 7.4 Object Syntax</TITLE>
<meta name="DC.title" content="Perl in a Nutshell"><meta name="DC.creator" content="Ellen Siever, Stephen Spainhour &amp; Nathan Patwardhan"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:40:35Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-286-7" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch07_01.htm" title="7. Packages, Modules, and Objects"><link rel="prev" href="ch07_03.htm" title="7.3 Object-Oriented Perl"><link rel="next" href="ch08_01.htm" title="8. Standard Modules"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl in a Nutshell" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,71" href="index.htm" alt="Perl in a Nutshell"><area shape="RECT" coords="467,0,514,18" href="../search/nsrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch07_03.htm" title="7.3 Object-Oriented Perl"><img src="../gifs/txtpreva.gif" alt="Previous: 7.3 Object-Oriented Perl" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch07_01.htm" title="7. Packages, Modules, and Objects">Chapter 7<br>Packages, Modules, and Objects</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="CHAPTER" href="ch08_01.htm" title="8. Standard Modules"><img src="../gifs/txtnexta.gif" alt="Next: 8. Standard Modules" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="PNUT-CH-7-SECT-4">7.4 Object Syntax</A
></H2
><p class="para"><a class="indexterm" name="AUTOID-12393"></A
><a class="indexterm" name="AUTOID-12396"></A
>Perl uses two forms of syntax for invoking methods on objects.
For both types of syntax, the object reference or class name is given 
as the first argument. 
A method that takes a class name is called
a <em class="emphasis">class method</EM
>, and one
that takes an object reference is
called an <em class="emphasis">instance method</EM
>.</P
><p class="para"><a class="indexterm" name="AUTOID-12402"></A
>Class methods provide functionality for the entire class, not just for
a single object that belongs to the class.  Class methods expect a
class name as their first argument.  Following this explanation, a
constructor is an example of a class method:


<blockquote class="screen"><pre class="screen">sub new {
   my $self = {};
   bless $self;
   return $self;
}</PRE
></BLOCKQUOTE
>

<a class="indexterm" name="AUTOID-12405"></A
>
On the other hand, an instance method expects an object
reference as its first argument.  An instance method will shift the
first argument and use this argument as a reference:


<blockquote class="screen"><pre class="screen">sub instance_method {
   my $self = shift;
   my($one, $two, $three) = @_;
   # do stuff
}</PRE
></BLOCKQUOTE
>


Here is an example of a constructor creating a new object and
returning a reference:


<blockquote class="screen"><pre class="screen">$tri = new Triangle::Right (side1 =&gt; 3, side2 =&gt; 4);</PRE
></BLOCKQUOTE
>


This example creates a new right-triangle object and references it
with <code class="literal">$tri</CODE
>. The parameters are given as a hash-style list. This
is common for constructors, as they set initial parameters for an
object that is probably just a hash. Now that we have an object, we
can invoke some method on it. Suppose Triangle::Right defines a method,
<code class="literal">hypot</CODE
>, that returns the length of the hypotenuse for a given
right-triangle object. It would be used like this:


<blockquote class="screen"><pre class="screen">$h = hypot $tri;
print &quot;The hypotenuse is: $h.\n&quot;;</PRE
></BLOCKQUOTE
>


In this particular example, there happens to be no additional arguments to the <code class="literal">hypot</CODE
> method,
but there could have been.</P
><p class="para"><a class="indexterm" name="AUTOID-12414"></A
><a class="indexterm" name="AUTOID-12416"></A
><a class="indexterm" name="AUTOID-12418"></A
><a class="indexterm" name="AUTOID-12420"></A
><a class="indexterm" name="AUTOID-12423"></A
>With the arrow (<code class="literal">-&gt;</CODE
>) notation,
the left side of the
arrow must be an object reference or a class name, while the right side of
the arrow must be a method defined for that object. Any arguments must
follow the method inside of parentheses.  For example:


<blockquote class="screen"><pre class="screen">$obj-&gt;method(<em class="emphasis">args</EM
>)
CLASS-&gt;method(<em class="emphasis">args</EM
>)</PRE
></BLOCKQUOTE
>


You have to use parentheses because this form can't be used as a list
operator, although the first type of method syntax can.</P
><p class="para">The examples given above would look like this using the arrow syntax:


<blockquote class="screen"><pre class="screen">$tri = Triangle::Right-&gt;new(side1 =&gt; 3, side2 =&gt; 4);
$h = $tri-&gt;hypot();
print &quot;The hypotenuse is: $h.\n&quot;;</PRE
></BLOCKQUOTE
>


The arrow syntax provides a helpful visual relationship between the
object and its method, but both forms of syntax do the same
thing. Precedence for the arrow syntax is left to right, exactly the
same as the dereferencing operator. This allows you to chain together
objects and methods if you want to simplify things. You just have to
make sure you have an object to the left of the arrow and a method to
the right:


<blockquote class="screen"><pre class="screen">%sides = (side1 =&gt; 3, side2 =&gt; 4);
$h = Triangle::Right-&gt;new(%sides)-&gt;hypot();
print &quot;The hypotenuse is: $h.\n&quot;;</PRE
></BLOCKQUOTE
>


In this example, you never assign a variable name to the right-triangle
object; the reference is passed directly to the <code class="literal">hypot</CODE
> method.</P
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch07_03.htm" title="7.3 Object-Oriented Perl"><img src="../gifs/txtpreva.gif" alt="Previous: 7.3 Object-Oriented Perl" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl in a Nutshell"><img src="../gifs/txthome.gif" alt="Perl in a Nutshell" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="CHAPTER" href="ch08_01.htm" title="8. Standard Modules"><img src="../gifs/txtnexta.gif" alt="Next: 8. Standard Modules" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">7.3 Object-Oriented Perl</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">8. Standard Modules</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
