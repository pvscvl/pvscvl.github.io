<html><head>
<title>[Chapter 4] 4.10 Formats</TITLE>
<meta name="DC.title" content="Perl in a Nutshell"><meta name="DC.creator" content="Ellen Siever, Stephen Spainhour &amp; Nathan Patwardhan"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:32:30Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-286-7" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch04_01.htm" title="4. The Perl Language"><link rel="prev" href="ch04_09.htm" title="4.9 Filehandles"><link rel="next" href="ch04_11.htm#PNUT-CH-4-SECT-11.0.2" title="4.11 Pod"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl in a Nutshell" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,71" href="index.htm" alt="Perl in a Nutshell"><area shape="RECT" coords="467,0,514,18" href="../search/nsrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch04_09.htm" title="4.9 Filehandles"><img src="../gifs/txtpreva.gif" alt="Previous: 4.9 Filehandles" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch04_01.htm" title="4. The Perl Language">Chapter 4<br>The Perl Language</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch04_11.htm#PNUT-CH-4-SECT-11.0.2" title="4.11 Pod"><img src="../gifs/txtnexta.gif" alt="Next: 4.11 Pod" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="PNUT-CH-4-SECT-10">4.10 Formats</A
></H2
><p class="para"><a class="indexterm" name="PNUT-CH-4-IX-FORMATS"></A
><a class="indexterm" name="PNUT-CH-4-IX-OUTPUT-FORMATS-FOR"></A
><a class="indexterm" name="PNUT-CH-4-IX-TEMPLATES-FOR-OUTPUTTING-DATA"></A
>Formats are 
a mechanism for generating formatted reports for outputting
data. <a class="indexterm" name="AUTOID-6236"></A
>
Formats are defined with the <code class="literal">format</CODE
> keyword.  The general
form looks like:


<blockquote class="screen"><pre class="screen">format <em class="emphasis">name</EM
> =
 <em class="emphasis">...template lines...</EM
>
 <em class="emphasis">...argument line...</EM
>
.</PRE
></BLOCKQUOTE
>


Most of your format names will be the same as the filehandle names for which 
they are used.  The default format
for a filehandle is the one with the same name. </P
><p class="para">The format definition is like a subroutine definition. It doesn't contain 
immediately executed code and can therefore be placed anywhere in the 
file with the rest of the program; they are commonly placed near the end of 
the file with subroutine definitions.<a class="indexterm" name="AUTOID-6244"></A
>
To output to a format, use the <code class="literal">write</CODE
> function
instead of <code class="literal">print</CODE
>.  </P
><p class="para"><a class="indexterm" name="AUTOID-6249"></A
>The template lines contain literal text and fieldholders. 
Fieldholders contain symbols that describe the size and positioning
of the area on the line where data is output. An argument line immediately
follows a template line that contains the fields to be replaced by data.
The argument line is a list of variables (or expressions), 
separated by commas, which
fill the fields in the previous line in the order they are listed. </P
><p class="para">Here's an example of a template line with two fieldholders, and the argument line 
that follows:


<blockquote class="screen"><pre class="screen">Hello, my name is @&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; and I'm @&lt;&lt; years old.
$name, $age</PRE
></BLOCKQUOTE
>


The fieldholders are the <code class="literal">@&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</CODE
> and <code class="literal">@&lt;&lt;</CODE
>, which specify
left-justified text fields with 11 and 3 characters, respectively.</P
><p class="para"><a class="indexterm" name="AUTOID-6256"></A
><a class="indexterm" name="AUTOID-6259"></A
>Most fieldholders start with <code class="literal">@</CODE
>. The characters following the <code class="literal">@</CODE
> indicate the 
type of field, while the number of characters (including the <code class="literal">@</CODE
>) indicate 
the field width. The following fieldholder characters determine the
positioning of text fields:<a class="indexterm" name="AUTOID-6265"></A
><a class="indexterm" name="AUTOID-6268"></A
></P
><dl class="variablelist"><dt class="term"><code class="literal">&lt;&lt;&lt;&lt;</CODE
> (left angle-brackets)</DT
><dd class="listitem"><p class="para">A left-justified field; if the value is shorter than the field width, 
it will be padded on the right with spaces. </P
></DD
><dt class="term"><code class="literal">&gt;&gt;&gt;&gt;</CODE
> (right angle-brackets)</DT
><dd class="listitem"><p class="para">A right-justified field; if the value is too short, it gets padded on 
the left with spaces.</P
></DD
><dt class="term"><code class="literal">||||</CODE
> (vertical bars)</DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-6286"></A
><a class="indexterm" name="AUTOID-6289"></A
>A centered field; if the value is too short, it gets padded on both sides 
with spaces, enough on each side to make the value mostly centered 
within the field.</P
></DD
></DL
><p class="para"><a class="indexterm" name="AUTOID-6293"></A
><a class="indexterm" name="AUTOID-6295"></A
><a class="indexterm" name="AUTOID-6298"></A
><a class="indexterm" name="AUTOID-6301"></A
>Another kind of fieldholder is a <em class="emphasis">fixed-precision numeric field</EM
>. 
This field also begins with <code class="literal">@</CODE
>, and is followed by 
one or more hashmarks (<code class="literal">###</CODE
>) with an optional dot (indicating 
a decimal point). For example:


<blockquote class="screen"><pre class="screen">format MONEY =
Assets: @#####.## Liabilities: @#####.## Net: @#####.##
$assets, $liabilities, $assets-$liabilities
.</PRE
></BLOCKQUOTE
>

<a class="indexterm" name="AUTOID-6308"></A
>
The multiline fieldholder allows you to include a value that may 
have many lines of 
information. This fieldholder is denoted by <code class="literal">@*</CODE
> on a line by itself. 
The next line defines the value that will be substituted into the 
field, which in this case may be an expression that results in a value that 
contains many newlines.</P
><p class="para"><a class="indexterm" name="AUTOID-6312"></A
>Another kind of fieldholder is a <em class="emphasis">filled field</EM
>. This fieldholder allows you to 
create a filled paragraph, breaking the text into conveniently sized lines at 
word boundaries, wrapping the lines as needed.<a class="indexterm" name="AUTOID-6315"></A
><a class="indexterm" name="AUTOID-6318"></A
>
A filled field is denoted by replacing the <code class="literal">@</CODE
> marker in a text 
fieldholder with a caret (<code class="literal">^&lt;&lt;&lt;</CODE
>, for example). The corresponding 
value for a filled field (on the following line of the format) must be a 
scalar variable containing text, rather than an expression that returns a 
scalar value. 
When Perl is filling the filled field, it takes the value of the variable and 
removes as many words as will fit in the field.
Subsequent calls for the variable in a filled field will continue where
the last one left off. </P
><p class="para"><a class="indexterm" name="AUTOID-6324"></A
><a class="indexterm" name="AUTOID-6327"></A
><a class="indexterm" name="AUTOID-6330"></A
>If the variable's contents are exhausted before the number of fields, you
will simply end up with blank lines.
You can suppress blank lines by placing a tilde (<code class="literal">~</CODE
>) on the line.
Any line that contains a 
tilde character is not output if the line would have otherwise 
printed blank (i.e., just whitespace). The tilde itself always prints as a 
blank and can be placed anywhere a space could have been placed in 
the line. </P
><p class="para">If the text in the variable is longer than what can be filled
in the fields, output only continues until the fields run out.<a class="indexterm" name="AUTOID-6335"></A
><a class="indexterm" name="AUTOID-6338"></A
>
The shortcut to get the string to print until its end is to use
two consecutive tildes (<code class="literal">~~</CODE
>) on a line. This
causes the line to be repeated automatically until the result is
a completely blank line (which will be suppressed).</P
><p class="para">Default values for format parameters all relate to the format of the
currently selected filehandle.
The currently selected filehandle starts out as STDOUT, which makes it 
easy to print things on the standard output. However, you can change the 
currently selected filehandle with the <code class="literal">select</CODE
> function, which
takes a single filehandle (or a scalar variable containing the name of a 
filehandle) as an argument. Once the currently selected filehandle is 
changed, it affects all future operations that depend on the currently 
selected filehandle. <a class="indexterm" name="AUTOID-6344"></A
><a class="indexterm" name="AUTOID-6345"></A
><a class="indexterm" name="AUTOID-6346"></A
></P
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch04_09.htm" title="4.9 Filehandles"><img src="../gifs/txtpreva.gif" alt="Previous: 4.9 Filehandles" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl in a Nutshell"><img src="../gifs/txthome.gif" alt="Perl in a Nutshell" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch04_11.htm#PNUT-CH-4-SECT-11.0.2" title="4.11 Pod"><img src="../gifs/txtnexta.gif" alt="Next: 4.11 Pod" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">4.9 Filehandles</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">4.11 Pod</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
