<html><head>
<title>[Chapter 20] 20.2 Server-Side PerlScript</TITLE>
<meta name="DC.title" content="Perl in a Nutshell"><meta name="DC.creator" content="Ellen Siever, Stephen Spainhour &amp; Nathan Patwardhan"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T02:00:47Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-286-7" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch20_01.htm" title="20. PerlScript"><link rel="prev" href="ch20_01.htm" title="20.1 Client-Side PerlScript"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl in a Nutshell" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,71" href="index.htm" alt="Perl in a Nutshell"><area shape="RECT" coords="467,0,514,18" href="../search/nsrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch20_01.htm" title="20.1 Client-Side PerlScript"><img src="../gifs/txtpreva.gif" alt="Previous: 20.1 Client-Side PerlScript" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch20_01.htm" title="20. PerlScript">Chapter 20<br>PerlScript</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172">&nbsp;</TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="PNUT-CH-20-SECT-2">20.2 Server-Side PerlScript</A
></H2
><p class="para"><a class="indexterm" name="PNUT-CH-20-IX-SERVER-SIDE-PERLSCRIPT"></A
><a class="indexterm" name="PNUT-CH-20-IX-PERLSCRIPT-SERVER-SIDE-PERLSCRIPT"></A
>PerlScript on the server-side of business is a much more
viable method of incorporating Perl into your web applications.<a class="indexterm" name="AUTOID-45336"></A
><a class="indexterm" name="AUTOID-45338"></A
>
You can use PerlScript as the scripting language for Active
Server Pages (ASP), which are used by such
applications as Microsoft's IIS and
O'Reilly's WebSite Pro. See the documentation for these products
to properly set up ASP on your server.
ActivePerl with PerlScript must be installed on the server machine
to be used with ASP.</P
><p class="para">Active Server Pages use PerlScript in pages much like client-side scripting
except that the object model is different, and most importantly, the
script is executed on the server. When an Active Server Page is requested,
the <em class="emphasis">.asp</EM
> file is processed, scripts are executed, and an HTML
page is produced and delivered to the client.</P
><p class="para">Each script is contained within <code class="literal">&lt;SCRIPT&gt;</CODE
> tags. PerlScript must be declared
as the default scripting language for each file with:


<blockquote class="screen"><pre class="screen">&lt;SCRIPT LANGUAGE=&quot;PerlScript&quot; RUNAT=Server&gt;</PRE
></BLOCKQUOTE
>

<a class="indexterm" name="AUTOID-45345"></A
>
The <code class="literal">RUNAT</CODE
> attribute signals that the script is to be executed on the server
and not the client. The lines of the script follow, and the script is
closed with an ending <code class="literal">&lt;/SCRIPT&gt;</CODE
> tag.</P
><p class="para"><a class="indexterm" name="AUTOID-45350"></A
><a class="indexterm" name="AUTOID-45353"></A
>An alternative syntax to the <code class="literal">&lt;SCRIPT&gt;</CODE
> tags are the <code class="literal">&lt;% %&gt;</CODE
> delimiters. These
are not HTML tags, but indicate that whatever happens between them is
to be executed. There are also special constructs used with these delimiters.
Since they can be interspersed with HTML throughout a file, the default
language must be declared at the top of the file with the <code class="literal">&lt;%@ %&gt;</CODE
> tag:


<blockquote class="screen"><pre class="screen">&lt;%@ PerlScript%&gt;</PRE
></BLOCKQUOTE
>


This delimiter syntax completely replaces the declarative <code class="literal">&lt;SCRIPT&gt;</CODE
> tag shown above, but it
must be placed at the top of any file using the <code class="literal">&lt;% %&gt;</CODE
> syntax for scripting. In
addition to this tag, you can use the <code class="literal">&lt;%= %&gt;</CODE
> tag throughout your file to
automatically assign a value to the output of your file (i.e., a
<code class="literal">$Response-&gt;write</CODE
> function). Here is an example:


<blockquote class="screen"><pre class="screen">&lt;%@ PerlScript&gt;
&lt;HTML&gt;
&lt;HEAD&gt;&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;H1&gt;Say Hello, Boys!&lt;/H1&gt;

&lt;% my @onehit = (&quot;Bel&quot;, &quot;Biv&quot;, &quot;DeVoe&quot;); %&gt;

&lt;P&gt;
&lt;%= $onehit[0] %&gt; says &quot;Hello.&quot;
&lt;BR&gt;
&lt;%= $onehit[1] %&gt; says &quot;Hello.&quot;
&lt;BR&gt;
&lt;%= $onehit[2] %&gt; says &quot;Hello.&quot;

&lt;/P&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;</PRE
></BLOCKQUOTE
>


The return value of any code within <code class="literal">&lt;%= %&gt;</CODE
> is placed into the output HTML returned to the client.
This syntax makes it very easy to intersperse the output of commands with
HTML throughout the ASP file.</P
><p class="para">The scripting object model for ASP contains the following top-level
objects:</P
><dl class="variablelist"><dt class="term"><em class="emphasis">Application</EM
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-45373"></A
>Application objects can be created to share data among multiple users of defined
groups of <em class="emphasis">.asp</EM
> files under a virtual directory on the server.</P
></DD
><dt class="term"><em class="emphasis">Request</EM
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="PNUT-CH-20-IX-REQUEST-OBJECT-PERLSCRIPT"></A
>The Request object encapsulates all of the information about
the browser and any data it supplies in its request, such as POST data
from a form. It is equivalent to the information contained in an HTTP request.</P
></DD
><dt class="term"><em class="emphasis">Response</EM
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-45388"></A
>The Response object represents information and data sent to a client after a request.
It is equivalent to an HTTP server response.</P
></DD
><dt class="term"><em class="emphasis">Server</EM
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-45395"></A
>The Server object contains certain control parameters for the server and provides methods
for creating connections to other applications.</P
></DD
><dt class="term"><em class="emphasis">Session</EM
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-45402"></A
>The Session object uses cookies to store state information for a user across
multiple pages accessed during a session.</P
></DD
></DL
><p class="para">The Request and Response objects provide an ASP interface to the HTTP protocol used
in web transactions. The other objects encapsulate special server features and connections
to outside applications.</P
><div class="sect2"><h3 class="sect2"><a class="title" name="PNUT-CH-20-SECT-2.1">20.2.1 The Request Object</A
></H3
><p class="para">The Request object contains all the information sent to the server in
the client's request. This object has only one property, TotalBytes, which
is read-only and gives the number of bytes sent in the body of a client request.<a class="indexterm" name="AUTOID-45408"></A
>
The <code class="literal">BinaryRead</CODE
> method of the Request object retrieves the client request
as raw binary data.</P
><p class="para">The information contained in a request is stored in various collection objects.
Collections contain objects that represent the important pieces of a request, for example,
form or cookie data. There are five collections under the Request
object:</P
><dl class="variablelist"><dt class="term"><em class="emphasis">ClientCertificate</EM
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-45418"></A
>Contains information from a client certificate sent in the request. </P
></DD
><dt class="term"><em class="emphasis">Cookies</EM
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-45425"></A
>Contains the data from any cookies sent in the request.  </P
></DD
><dt class="term"><em class="emphasis">Form</EM
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-45432"></A
>Contains POST data from forms.</P
></DD
><dt class="term"><em class="emphasis">QueryString</EM
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-45439"></A
>Contains form data passed in the query string of the URL.  </P
></DD
><dt class="term"><em class="emphasis">ServerVariables</EM
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-45446"></A
>Contains the values of environment variables and header values in the request.</P
></DD
></DL
><p class="para"><a class="indexterm" name="AUTOID-45449"></A
>To access the objects in the collection, the name of an object is given as the argument to the Collection object.
For example, to access a form variable named <code class="literal">&quot;birthday&quot;</CODE
> from the Form collection, you would use:


<blockquote class="screen"><pre class="screen">$object = $Request-&gt;Form(&quot;birthday&quot;);</PRE
></BLOCKQUOTE
>


This returns an object for the <code class="literal">&quot;birthday&quot;</CODE
> form variable. To get the value, you use
the <code class="literal">Item</CODE
> method on the object:


<blockquote class="screen"><pre class="screen">$data = $Request-&gt;Form(&quot;birthday&quot;)-&gt;Item;</PRE
></BLOCKQUOTE
>


This returns the value assigned to <code class="literal">&quot;birthday&quot;</CODE
> in the
request. Since ASP collection objects are OLE collections, the
functionality of the Win32::OLE modules can be employed. See
<a class="xref" href="ch19_01.htm" title="Win32 Modules and Extensions">Chapter 19, <cite class="chapter">Win32 Modules and Extensions</CITE
></A
>, for more information on OLE collections.</P
><p class="para">The QueryString collection contains form data input by the GET method and transmitted
at the end of the requested URL. Values are retrieved from the QueryString object the same
way they are retrieved from the form object, for example:


<blockquote class="screen"><pre class="screen">$data = $Request-&gt;QueryString(&quot;birthday&quot;)-&gt;Item;</PRE
></BLOCKQUOTE
>


Cookies sent within a client request are stored the same way. The name of the cookie
variable retrieves the cookie object from the collection, and <b class="emphasis.bold">Item</B
> retrieves the
value:


<blockquote class="screen"><pre class="screen">$data = $Request-&gt;Cookie(&quot;birthday&quot;)-&gt;Item;</PRE
></BLOCKQUOTE
>


The ServerVariables collection stores both environment variables relevant to the transaction
and HTTP headers sent in the request. The header objects are accessible by using the
syntax: HTTP_<em class="emphasis">HeaderName</EM
>. Underscores contained within <em class="emphasis">HeaderName</EM
> are interpreted
as dashes.<a class="indexterm" name="AUTOID-45464"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PNUT-CH-20-SECT-2.2">20.2.2 The Response Object</A
></H3
><p class="para"><a class="indexterm" name="PNUT-CH-20-IX-RESPONSE-OBJECT-PERLSCRIPT"></A
>The Response object contains the information output to the client. 
The <code class="literal">Write</CODE
> method is primarily used to write the output of code to the client,
but the Response object is also used to create and send cookies to the client, as well
as manipulate headers, update server logs, and set control parameters for the document.</P
><div class="sect3"><h4 class="sect3"><a class="title" name="PNUT-CH-20-SECT-2.2.1">20.2.2.1 Setting cookies</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-45474"></A
>The Response object contains one collection for setting cookies with the client.
The Cookies collection allows you to create cookies and sets the information that
is delivered to the client in the Set-Cookie header of the HTTP response.<a class="indexterm" name="AUTOID-45477"></A
></P
><p class="para">In the ASP file, you can check for a returned cookie in the request, and if
there is none, you can set a new cookie:


<blockquote class="screen"><pre class="screen">&lt;%
if ( defined($Request-&gt;Cookie(&quot;user&quot;) )
  { $userid = $Request-&gt;Cookie(&quot;user&quot;)-&gt;Item; }
else
  { $Response-&gt;Cookie(&quot;user&quot;) = 123; };
%&gt;</PRE
></BLOCKQUOTE
>


This will check to see if a cookie named <code class="literal">user</CODE
> was sent in the
request. If it was not, a new cookie is sent in the response and set
on the client machine.</P
><p class="para">The Response cookie collection uses a number of properties to set the standard
attributes used with cookies. For example, to set the expiration of a cookie,
you would use the Expires attribute:


<blockquote class="screen"><pre class="screen">$Response-&gt;Cookie(&quot;user&quot;)-&gt;{Expires} = &quot;Tuesday, 31-Dec-99 00:00:00 GMT&quot;;</PRE
></BLOCKQUOTE
>


The client will no longer return a cookie after its expiration date.</P
><p class="para">The following properties are used to set attributes on a response cookie:</P
><dl class="variablelist"><dt class="term"><code class="replaceable"><i>Domain</I
></CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-45491"></A
>If specified, the cookie will be sent in any request to this domain.
The value must contain at least two dots, e.g., <code class="literal">.oreilly.com</CODE
>. This
value would cover both <code class="literal">www.oreilly.com</CODE
> and <code class="literal">software.oreilly.com</CODE
>.</P
></DD
><dt class="term"><code class="replaceable"><i>Expires</I
></CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-45501"></A
>Sets the expiration date for the cookie.</P
></DD
><dt class="term"><code class="replaceable"><i>Path</I
></CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-45508"></A
>Sets the URL range for which the cookie is valid. If the value is set to
<code class="literal">/pub</CODE
>, for example, the cookie will be returned for URLs in <code class="literal">/pub</CODE
>
as well as subpaths such as <code class="literal">/pub/docs</CODE
> and <code class="literal">/pub/images</CODE
>. A path
value of &quot;/&quot; indicates that the cookie will be used for all URLs at the originating
site. If no path value is set, the cookie will be returned only for the originating
URL.</P
></DD
><dt class="term"><code class="replaceable"><i>Secure</I
></CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-45519"></A
>If set to true, this attribute instructs the client to return the cookie over only a secure
connection (via SHTTP or SSL).</P
></DD
></DL
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PNUT-CH-20-SECT-2.2.2">20.2.2.2 Response properties</A
></H4
><p class="para">The following properties can be set on the Response object. The
property syntax is as follows:


<blockquote class="screen"><pre class="screen">$Response-&gt;{<em class="emphasis">property</EM
>} = <em class="emphasis">value</EM
>;</PRE
></BLOCKQUOTE
>
&#13;</P
><dl class="variablelist"><dt class="term"><code class="replaceable"><i>Buffer</I
></CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-45533"></A
>If set to false, output is sent the client immediately as it is processed by the script.
If set to true, output is buffered and sent only when the entire page has been processed,
or upon calls to the <code class="literal">Flush</CODE
> or <code class="literal">End</CODE
> methods.</P
></DD
><dt class="term"><code class="replaceable"><i>CacheControl</I
></CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-45542"></A
>If set to <code class="literal">Private</CODE
>, output from this ASP page will not be cached by a proxy server.
If set to <code class="literal">Public</CODE
>, the output can be cached by a proxy server.</P
></DD
><dt class="term"><code class="replaceable"><i>Charset</I
></CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-45551"></A
>Appends the given character set name to the Content-Type header. </P
></DD
><dt class="term"><code class="replaceable"><i>ContentType</I
></CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-45558"></A
>Specifies the HTTP content type of the response; for example, <code class="literal">text/html</CODE
>.  </P
></DD
><dt class="term"><code class="replaceable"><i>Expires</I
></CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-45566"></A
>Specifies the length of time in minutes before a client-cached page expires. After
this time, the page will be requested again. A setting of 0 forces
the page to expire immediately.</P
></DD
><dt class="term"><code class="replaceable"><i>ExpiresAbsolute</I
></CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-45573"></A
>Specifies the date and time on which a client-cached page expires. The date
and time are given in a format such as &quot;June 18,1999 00:00:00&quot;, where
the time is GMT.</P
></DD
><dt class="term"><code class="replaceable"><i>IsClientConnected</I
></CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-45580"></A
>Returns true if the client is still connected to the server (possibly waiting
on a request); false, otherwise.</P
></DD
><dt class="term"><code class="replaceable"><i>Pics</I
></CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-45587"></A
>Adds a PICS-label header to the response with the given PICS formatted string.</P
></DD
><dt class="term"><code class="replaceable"><i>Status</I
></CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-45594"></A
>Sets the status code and explanation string in a server response, for example
&quot;403 Forbidden&quot;.</P
></DD
></DL
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PNUT-CH-20-SECT-2.2.3">20.2.2.3 Response methods</A
></H4
><p class="para">The following methods can be used on the Response object.</P
><dl class="variablelist"><dt class="term"><code class="literal">AddHeader (<code class="replaceable"><i>header</I
></CODE
>, <code class="replaceable"><i>value</I
></CODE
>)</CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-45607"></A
>Adds an HTTP <code class="replaceable"><i>header</I
></CODE
> with assigned <code class="replaceable"><i>value</I
></CODE
> to the header of the HTTP response.
The specified header will simply be added to the response; it will not replace an
existing header. This method must be used in the ASP file before any page content
is output. For buffered pages, it can be used anywhere before the first <code class="literal">Flush</CODE
>
call.</P
></DD
><dt class="term"><code class="literal">AppendToLog (<code class="replaceable"><i>string</I
></CODE
>)</CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-45619"></A
>Appends <code class="replaceable"><i>string</I
></CODE
> to the server log (if extended logging is properly configured). 
<code class="replaceable"><i>string</I
></CODE
> can be a maximum of 80 characters
and should not contain commas.</P
></DD
><dt class="term"><code class="literal">BinaryWrite (<code class="replaceable"><i>data</I
></CODE
>)</CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-45629"></A
>Writes the given binary <code class="replaceable"><i>data</I
></CODE
> to the HTTP output without any conversion.</P
></DD
><dt class="term"><code class="literal">Clear </CODE
>()</DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-45637"></A
>Clears any response content from the output buffer. This method will not clear
header information, and will cause a runtime error if <code class="literal">$Response-&gt;Buffer</CODE
> has
not been set to true.</P
></DD
><dt class="term"><code class="literal">End </CODE
>()</DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-45646"></A
>Stops all processing of the ASP file and outputs any buffered content.</P
></DD
><dt class="term"><code class="literal">Flush </CODE
>()</DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-45653"></A
>If buffering has been enabled with <code class="literal">$Response-&gt;Buffer</CODE
>, this call clears the buffer
and outputs its contents.</P
></DD
><dt class="term"><code class="literal">Redirect (<code class="replaceable"><i>url</I
></CODE
>)</CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-45663"></A
>Instructs the client to connect to the specified <code class="replaceable"><i>url</I
></CODE
>.</P
></DD
><dt class="term"><code class="literal">Write (<code class="replaceable"><i>data</I
></CODE
>)</CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-45672"></A
>Writes the <code class="replaceable"><i>data</I
></CODE
> to the HTML output stream.<a class="indexterm" name="AUTOID-45676"></A
><a class="indexterm" name="AUTOID-45677"></A
><a class="indexterm" name="AUTOID-45678"></A
><a class="indexterm" name="AUTOID-45679"></A
></P
></DD
></DL
></DIV
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch20_01.htm" title="20.1 Client-Side PerlScript"><img src="../gifs/txtpreva.gif" alt="Previous: 20.1 Client-Side PerlScript" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl in a Nutshell"><img src="../gifs/txthome.gif" alt="Perl in a Nutshell" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">&nbsp;</TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">20.1 Client-Side PerlScript</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">&nbsp;</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
