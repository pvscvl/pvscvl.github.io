<html><head>
<title>[Chapter 3] 3.2 Command-Line Options</TITLE>
<meta name="DC.title" content="Perl in a Nutshell"><meta name="DC.creator" content="Ellen Siever, Stephen Spainhour &amp; Nathan Patwardhan"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:29:26Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-286-7" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch03_01.htm" title="3. The Perl Interpreter"><link rel="prev" href="ch03_01.htm" title="3.1 Command Processing"><link rel="next" href="ch03_03.htm" title="3.3 Environment Variables"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl in a Nutshell" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,71" href="index.htm" alt="Perl in a Nutshell"><area shape="RECT" coords="467,0,514,18" href="../search/nsrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch03_01.htm" title="3.1 Command Processing"><img src="../gifs/txtpreva.gif" alt="Previous: 3.1 Command Processing" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch03_01.htm" title="3. The Perl Interpreter">Chapter 3<br>The Perl Interpreter</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch03_03.htm" title="3.3 Environment Variables"><img src="../gifs/txtnexta.gif" alt="Next: 3.3 Environment Variables" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="PNUT-CH-3-SECT-2">3.2 Command-Line Options</A
></H2
><p class="para"><a class="indexterm" name="PNUT-CH-3-IX-INTERPRETER-PERL-COMMAND-LINE-OPTIONS"></A
><a class="indexterm" name="PNUT-CH-3-IX-COMMAND-LINE-OPTIONS-PERL-INTERPRETER"></A
><a class="indexterm" name="AUTOID-1560"></A
><a class="indexterm" name="PNUT-CH-3-IX-PERL-PERL-INTERPRETER-COMMAND-LINE-OPTIONS"></A
>Perl expects any command-line options, also known as <em class="emphasis">switches</EM
> or
<em class="emphasis">flags</EM
>, to
come first on the command line. The next item is usually the name of 
the script,
followed by any additional arguments (often filenames) to be
passed into the script.  Some of these additional arguments may be
switches, but if so, they must be processed by the script, since Perl
gives up parsing switches as soon as it sees either a non-switch item or the
special <code class="literal">--</CODE
> switch that terminates switch processing.</P
><p class="para">A single-character switch with no argument may be combined (bundled)
with the switch that follows it, if any. For example:</P
><blockquote class="screen"><pre class="screen">#!/usr/bin/perl -spi.bak</PRE
></BLOCKQUOTE
><p class="para">is the same as:</P
><blockquote class="screen"><pre class="screen">#!/usr/bin/perl -s -p -i.bak</PRE
></BLOCKQUOTE
><p class="para">Perl recognizes the switches listed in 
<a class="xref" href="#PNUT-CH-3-TAB-0" title="Perl Switches">Table 3.1</A
>.</P
><br><table class="table" border="1" cellpadding="3"><caption class="table"><a class="title" name="PNUT-CH-3-TAB-0">Table 3.1: Perl Switches</A
></CAPTION
><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1">Switch</TH
><th class="entry" align="LEFT" rowspan="1" colspan="3">Function</TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><em class="emphasis">--</EM
></TD
><td class="entry" rowspan="1" colspan="3"><p class="para">Terminates switch processing, even if the next argument starts with 
a minus.  It has no other effect.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><em class="emphasis">-0</EM
>[<em class="emphasis">octnum</EM
>]</TD
><td class="entry" rowspan="1" colspan="3"><p class="para"><a class="indexterm" name="AUTOID-1599"></A
>Specifies the record separator (<code class="literal">$/</CODE
>) as an 
octal number.  If <em class="emphasis">octnum</EM
> is not present, the null 
character is the separator.  Other switches may
precede or follow the octal number.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><em class="emphasis">-a</EM
></TD
><td class="entry" rowspan="1" colspan="3"><p class="para"><a class="indexterm" name="AUTOID-1609"></A
><a class="indexterm" name="AUTOID-1611"></A
>Turns on autosplit mode when used with <em class="emphasis">-n</EM
>
or <em class="emphasis">-p</EM
>.  An implicit
<code class="literal">split</CODE
> of the <code class="literal">@F</CODE
> array is inserted as 
the first command inside the implicit <code class="literal">while</CODE
> loop 
produced by <em class="emphasis">-n</EM
> or <em class="emphasis">-p</EM
>.
The default field delimiter is whitespace; a different field delimiter 
may be specified using <em class="emphasis">-F</EM
>.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><em class="emphasis">-c</EM
></TD
><td class="entry" rowspan="1" colspan="3"><p class="para"><a class="indexterm" name="AUTOID-1626"></A
><a class="indexterm" name="AUTOID-1628"></A
>Causes Perl to check the syntax of the script and then exit without
executing it. More or less equivalent to having
<code class="literal">exit(0)</CODE
> as the first statement in your program.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><em class="emphasis">-d</EM
></TD
><td class="entry" rowspan="1" colspan="3"><p class="para"><a class="indexterm" name="AUTOID-1636"></A
><a class="indexterm" name="AUTOID-1638"></A
><a class="indexterm" name="AUTOID-1641"></A
>Runs the script under the Perl debugger.  See 
<a class="xref" href="ch06_01.htm" title="Debugging">Chapter 6, <cite class="chapter">Debugging</CITE
></A
>.<a class="indexterm" name="AUTOID-1645"></A
><a class="indexterm" name="AUTOID-1647"></A
><a class="indexterm" name="AUTOID-1650"></A
><a class="indexterm" name="AUTOID-1654"></A
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><em class="emphasis">-d:foo</EM
></TD
><td class="entry" rowspan="1" colspan="3"><p class="para">Runs the script under the control of a debugging or tracing module
installed in the Perl library as Devel::<em class="emphasis">foo</EM
>.  For example,
<em class="emphasis">-d:DProf</EM
> executes the script using the
Devel::DProf profiler.  See also the section on DProf in <a class="xref" href="ch06_01.htm" title="Debugging">Chapter 6</A
>.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><em class="emphasis">-Dnumber</EM
></P
></TD
><td class="entry" rowspan="1" colspan="3"><p class="para">Sets debugging flags.  (This only works if debugging was 
compiled into the version of Perl you are running.)  You may
specify either a number that is the sum of the bits
you want, or a list of letters.  To watch how Perl executes your 
script, for instance, use <em class="emphasis">-D14</EM
> or 
<em class="emphasis">-Dslt</EM
>.  Another<a class="indexterm" name="AUTOID-1673"></A
>
useful value is <em class="emphasis">-D1024</EM
>
(<em class="emphasis">-Dx</EM
>), which lists your compiled syntax tree.  
And <em class="emphasis">-D512</EM
> (<em class="emphasis">-Dr</EM
>) displays 
compiled regular expressions.  The numeric value
of the flags is available internally as the special 
variable <code class="literal">$^D</CODE
>.  Here are the
assigned bit values:</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><em class="emphasis">-Dlist</EM
></P
></TD
><td class="entry" rowspan="1" colspan="1"></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">Bit</TD
><td class="entry" rowspan="1" colspan="1">Letter</TD
><td class="entry" rowspan="1" colspan="1">Meaning</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">1</TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">p</CODE
></TD
><td class="entry" rowspan="1" colspan="1">Tokenizing and parsing</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">2</TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">s</CODE
></TD
><td class="entry" rowspan="1" colspan="1">Stack snapshots</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">4</TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">l</CODE
></TD
><td class="entry" rowspan="1" colspan="1">Label stack processing</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">8</TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">t</CODE
></TD
><td class="entry" rowspan="1" colspan="1">Trace execution</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">16</TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">o</CODE
></TD
><td class="entry" rowspan="1" colspan="1">Object method lookup</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">32</TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">c</CODE
></TD
><td class="entry" rowspan="1" colspan="1">String/numeric conversions</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">64</TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">P</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Print preprocessor command for <code class="literal">-P</CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">128</TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">m</CODE
></TD
><td class="entry" rowspan="1" colspan="1">Memory allocation</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">256</TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">f</CODE
></TD
><td class="entry" rowspan="1" colspan="1">Format processing</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">512</TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">r</CODE
></TD
><td class="entry" rowspan="1" colspan="1">Regular expression processing</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">1,024</TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">x</CODE
></TD
><td class="entry" rowspan="1" colspan="1">Syntax tree dump</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">2,048</TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">u</CODE
></TD
><td class="entry" rowspan="1" colspan="1">Tainting checks</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">4,096</TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">L</CODE
></TD
><td class="entry" rowspan="1" colspan="1">Memory leaks (not supported any more)</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">8,192</TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">H</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Hash dump&nbsp;- usurps <em class="emphasis">values</EM
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">16,384</TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">X</CODE
></TD
><td class="entry" rowspan="1" colspan="1">Scratchpad allocation</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">32,768</TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">D</CODE
></TD
><td class="entry" rowspan="1" colspan="1">Cleaning up</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><em class="emphasis">-e commandline</EM
></TD
><td class="entry" rowspan="1" colspan="3"><p class="para">May be used to enter one or more lines of script. If 
<em class="emphasis">-e</EM
> is
used, Perl does not look for the name of a script in the argument list.<a class="indexterm" name="AUTOID-1796"></A
><a class="indexterm" name="AUTOID-1798"></A
>
Multiple <em class="emphasis">-e</EM
> commands may be given to build up a 
multiline script.  (Make sure to use semicolons where you would in 
a normal program.)</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><em class="emphasis">-Fpattern</EM
></TD
><td class="entry" rowspan="1" colspan="3"><p class="para">Specifies the pattern to split on if <em class="emphasis">-a</EM
> is also in 
effect. The pattern may be surrounded by <em class="emphasis">//</EM
>,
<code class="literal">''</CODE
>, or <code class="literal">&quot;&quot;</CODE
>; otherwise it 
is put in single quotes.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><a class="indexterm" name="AUTOID-1812"></A
><em class="emphasis">-h</EM
></TD
><td class="entry" rowspan="1" colspan="3"><p class="para">Prints a summary of Perl's command-line options.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><em class="emphasis">-i</EM
>[<em class="emphasis">extension</EM
>]</TD
><td class="entry" rowspan="1" colspan="3"><p class="para"><a class="indexterm" name="AUTOID-1823"></A
>Specifies that files processed by the <code class="literal">&lt;&gt;</CODE
> construct are to 
be edited in-place. Perl does this by renaming the input file, opening 
the output<a class="indexterm" name="AUTOID-1826"></A
>
file by the original name, and selecting that output file as the default
for <code class="literal">print</CODE
> statements.  The extension, if supplied, is added 
to the name of the old file to make a backup copy.  If no extension 
is supplied, no backup is made.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><em class="emphasis">-Idirectory</EM
></TD
><td class="entry" rowspan="1" colspan="3"><p class="para">Directories specified by <em class="emphasis">-I</EM
> are prepended to 
<code class="literal">@INC</CODE
>, which holds the search path for<a class="indexterm" name="AUTOID-1836"></A
>
modules.  If <em class="emphasis">-P</EM
> is also specified, to invoke the 
C preprocessor, <em class="emphasis">-I</EM
> tells the preprocessor where 
to search for include files.  By default, it searches 
<em class="emphasis">/usr/include</EM
> and <em class="emphasis">/usr/lib/perl</EM
>.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><em class="emphasis">-l</EM
>[<em class="emphasis">octnum</EM
>]</TD
><td class="entry" rowspan="1" colspan="3"><p class="para">Enables automatic line-end processing.  This switch
has two effects: first, when it's used with <em class="emphasis">-n</EM
>
or <em class="emphasis">-p</EM
>, it causes the line terminator to be 
automatically <code class="literal">chomp</CODE
>ed, and second, <a class="indexterm" name="AUTOID-1851"></A
><a class="indexterm" name="AUTOID-1853"></A
><a class="indexterm" name="AUTOID-1855"></A
>
it sets <code class="literal">$\</CODE
> to the value of <em class="emphasis">octnum</EM
> so any
print statements will have a line terminator of ASCII value 
<em class="emphasis">octnum</EM
>
added back on.  If <em class="emphasis">octnum</EM
> is omitted, <code class="literal">$\</CODE
> 
is set to the current value of <code class="literal">$/</CODE
>, which is typically a 
newline.  So, to trim lines to 80 columns, say this:
<blockquote class="screen"><pre class="screen">perl -lpe 'substr($_, 80) = &quot;&quot;'</PRE
></BLOCKQUOTE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><em class="emphasis">-m</EM
>[<em class="emphasis">-</EM
>]<em class="emphasis">module</EM
></P
></TD
><td class="entry" rowspan="1" colspan="3"><p class="para">Executes <code class="literal">use</CODE
> <em class="emphasis">module</EM
> before executing your script.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><em class="emphasis">-M</EM
>[<em class="emphasis">-</EM
>]<em class="emphasis">module</EM
></TD
><td class="entry" rowspan="1" colspan="1"></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><em class="emphasis">-M</EM
>[<em class="emphasis">-</EM
>]<em class="emphasis">'module ...'</EM
></TD
><td class="entry" rowspan="1" colspan="1"></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><em class="emphasis">-[<code class="replaceable"><i>mM</I
></CODE
></EM
>][<em class="emphasis">-</EM
>]<em class="emphasis">module</EM
><em class="emphasis">arg</EM
>[<em class="emphasis">,arg</EM
>]<em class="emphasis">...</EM
></TD
><td class="entry" rowspan="1" colspan="1"></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><em class="emphasis">-m</EM
><em class="emphasis">module</EM
></TD
><td class="entry" rowspan="1" colspan="1"></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><a class="indexterm" name="AUTOID-1904"></A
><a class="indexterm" name="AUTOID-1906"></A
><a class="indexterm" name="AUTOID-1908"></A
><em class="emphasis">-Mmodule</EM
></P
></TD
><td class="entry" rowspan="1" colspan="3"><p class="para">Executes <code class="literal">use</CODE
> <em class="emphasis">module</EM
> before executing your
script.  The command is formed by interpolation, so you can use
quotes to add extra code after the module name, for example,
<em class="emphasis">-M'module qw(foo bar)'</EM
>.
If the first character after the <em class="emphasis">-M</EM
> or <em class="emphasis">-m</EM
> is a minus (<em class="emphasis">-</EM
>),
then the <code class="literal">use</CODE
> is replaced with <code class="literal">no</CODE
>.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="3"><p class="para">You can also say
<em class="emphasis">-m module=foo,bar</EM
> or <em class="emphasis">-Mmodule= foo,bar</EM
> as a shortcut for
<em class="emphasis">-M'module qw(foo bar)</EM
>'.  This avoids the need to use quotes when
importing symbols.  The actual code generated by <em class="emphasis">-Mmodule=foo,bar</EM
> is:
<blockquote class="screen"><pre class="screen">use module split(/,/, q{foo,bar})</PRE
></BLOCKQUOTE
>
The <em class="emphasis">=</EM
> form
removes the distinction between <em class="emphasis">-m</EM
> and <em class="emphasis">-M</EM
>.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><em class="emphasis">-n</EM
></TD
><td class="entry" rowspan="1" colspan="3"><p class="para">Causes Perl to assume the following loop around your script, which
makes it iterate over filename arguments:<a class="indexterm" name="AUTOID-1939"></A
><a class="indexterm" name="AUTOID-1941"></A
><a class="indexterm" name="AUTOID-1943"></A
>
<blockquote class="screen"><pre class="screen">LINE:
while (&lt;&gt;) {
   ...      # your script goes here</PRE
></BLOCKQUOTE
>
By default, the lines are not printed.  See <em class="emphasis">-p</EM
> to have
lines printed. BEGIN and END blocks may be used to
capture control before or after the implicit loop.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><em class="emphasis">-p</EM
></TD
><td class="entry" rowspan="1" colspan="3"><p class="para">Causes Perl to assume the following loop around your script, which
makes it iterate over filename arguments:<a class="indexterm" name="AUTOID-1952"></A
>
<blockquote class="screen"><pre class="screen">LINE:
while (&lt;&gt;) {
    ...     # your script goes here
} continue {
    print;</PRE
></BLOCKQUOTE
>
The lines are printed automatically.  To suppress printing,
use the <em class="emphasis">-n</EM
> switch.  If both are specified, the <em class="emphasis">-p</EM
>
switch overrides <em class="emphasis">-n</EM
>. BEGIN and END blocks may be
used to capture control before or after the implicit loop.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><a class="indexterm" name="AUTOID-1961"></A
><a class="indexterm" name="AUTOID-1963"></A
><a class="indexterm" name="AUTOID-1965"></A
><em class="emphasis">-P</EM
></P
></TD
><td class="entry" rowspan="1" colspan="3"><p class="para">Causes your script to be run through the C preprocessor before
compilation by Perl.  (Since both comments and <em class="emphasis">cpp</EM
> directives begin with the <code class="literal">#</CODE
> character, you should avoid starting comments with any words
recognized by the C preprocessor such as <code class="literal">if</CODE
>, <code class="literal">else</CODE
>, or <code class="literal">define</CODE
>.)</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><em class="emphasis">-s</EM
></TD
><td class="entry" rowspan="1" colspan="3"><p class="para">Enables some rudimentary parsing of switches on the command line
after the script name but before any filename arguments or the <em class="emphasis">--</EM
><a class="indexterm" name="AUTOID-1981"></A
><a class="indexterm" name="AUTOID-1983"></A
>
switch terminator.  Any switch found there is removed from 
<code class="literal">@ARGV</CODE
>, and
a variable of the same name as the switch is set in the Perl script.
No switch bundling is allowed, since multicharacter switches are allowed.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><em class="emphasis">-S</EM
></TD
><td class="entry" rowspan="1" colspan="3"><p class="para">Makes Perl use the PATH environment variable to search for the
script (unless the name of the script starts with a slash).  Typically
this is used to emulate <code class="literal">#!</CODE
> startup on machines that don't support <code class="literal">#!</CODE
>.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><a class="indexterm" name="AUTOID-1996"></A
><a class="indexterm" name="AUTOID-1998"></A
><a class="indexterm" name="AUTOID-2000"></A
><em class="emphasis">-T</EM
></P
></TD
><td class="entry" rowspan="1" colspan="3"><p class="para">Forces &quot;taint&quot; checks to be turned on.  Ordinarily,
these checks are done only when running setuid or setgid.  It's a good<a class="indexterm" name="AUTOID-2006"></A
><a class="indexterm" name="AUTOID-2008"></A
>
idea to turn them on explicitly for programs run on another user's behalf,
such as CGI programs.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><em class="emphasis">-u</EM
></TD
><td class="entry" rowspan="1" colspan="3"><p class="para">Causes Perl to dump core after compiling your script.  You can then
take this core dump and turn it into an executable file by using the
<em class="emphasis">undump</EM
> program (not supplied).  This speeds startup at the expense of<a class="indexterm" name="AUTOID-2016"></A
><a class="indexterm" name="AUTOID-2018"></A
><a class="indexterm" name="AUTOID-2020"></A
><a class="indexterm" name="AUTOID-2022"></A
>
some disk space (which you can minimize by stripping the executable).
If you want to execute a portion of your script before dumping,
use Perl's <code class="literal">dump</CODE
> operator instead.  Note: availability of <em class="emphasis">undump</EM
> is
platform-specific; it may not be available for a specific port of
Perl.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><em class="emphasis">-U</EM
></TD
><td class="entry" rowspan="1" colspan="3"><p class="para">Allows Perl to do unsafe operations.  Currently, the only 
&quot;unsafe&quot;<a class="indexterm" name="AUTOID-2032"></A
><a class="indexterm" name="AUTOID-2034"></A
>
operations are the unlinking of directories while running as superuser
and running setuid programs with fatal taint checks turned into
warnings.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><em class="emphasis">-v</EM
></TD
><td class="entry" rowspan="1" colspan="3"><p class="para">Prints the version and patch level of your Perl executable.<a class="indexterm" name="AUTOID-2041"></A
><a class="indexterm" name="AUTOID-2043"></A
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><em class="emphasis">-V</EM
></TD
><td class="entry" rowspan="1" colspan="3"><p class="para">Prints a summary of the major Perl configuration values and the current
value of <code class="literal">@INC</CODE
>.<a class="indexterm" name="AUTOID-2052"></A
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><em class="emphasis">-V:name</EM
></TD
><td class="entry" rowspan="1" colspan="3"><p class="para">Prints the value of the named configuration variable to STDOUT.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><em class="emphasis">-w</EM
></TD
><td class="entry" rowspan="1" colspan="3"><p class="para"><a class="indexterm" name="AUTOID-2064"></A
><a class="indexterm" name="AUTOID-2066"></A
>Prints warnings about identifiers that are mentioned only once and
scalar variables that are used before being set.  Also warns about
redefined subroutines and references to undefined filehandles or
to filehandles opened as read-only that you are attempting to write
on. Warns you if you use a non-number as though it were a number,
if you use an array as though it were a scalar, if your
subroutines recurse more than 100 levels deep, etc.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><em class="emphasis">-x</EM
>[<em class="emphasis">directory</EM
>]</TD
><td class="entry" rowspan="1" colspan="3"><p class="para">Tells Perl to extract a script that is embedded in a message, by
looking for the first line that starts with <code class="literal">#!</CODE
> and<a class="indexterm" name="AUTOID-2075"></A
><a class="indexterm" name="AUTOID-2077"></A
><a class="indexterm" name="AUTOID-2079"></A
>
contains the string &quot;perl&quot;.  Any meaningful switches on that line after
the word &quot;perl&quot; are applied.  If a directory name is specified, Perl
switches to that directory before running the script.
The script
must be terminated with <code class="literal">__END__</CODE
> or <code class="literal">__DATA__</CODE
> 
if there is trailing text to be ignored.  (The script can process 
any or all of the
trailing text via the DATA filehandle if desired.)</P
></TD
></TR
></TBODY
></TABLE
><a class="indexterm" name="AUTOID-2083"></A
><a class="indexterm" name="AUTOID-2084"></A
><a class="indexterm" name="AUTOID-2085"></A
><a class="indexterm" name="AUTOID-2086"></A
><a class="indexterm" name="AUTOID-2087"></A
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch03_01.htm" title="3.1 Command Processing"><img src="../gifs/txtpreva.gif" alt="Previous: 3.1 Command Processing" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl in a Nutshell"><img src="../gifs/txthome.gif" alt="Perl in a Nutshell" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch03_03.htm" title="3.3 Environment Variables"><img src="../gifs/txtnexta.gif" alt="Next: 3.3 Environment Variables" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">3.1 Command Processing</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">3.3 Environment Variables</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
