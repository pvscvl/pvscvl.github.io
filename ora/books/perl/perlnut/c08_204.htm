<html><head>
<title>Reference: GetOptions</TITLE>
<meta name="DC.title" content="Perl in a Nutshell"><meta name="DC.creator" content="Ellen Siever, Stephen Spainhour &amp; Nathan Patwardhan"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:47:47Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-286-7" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch08_86.htm" title="8.86 Getopt::Long"><link rel="prev" href="ch08_86.htm" title="8.86 Getopt::Long"><link rel="next" href="c08_205.htm" title="Reference: config"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl in a Nutshell" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,71" href="index.htm" alt="Perl in a Nutshell"><area shape="RECT" coords="467,0,514,18" href="../search/nsrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch08_86.htm" title="8.86 Getopt::Long"><img src="../gifs/txtpreva.gif" alt="Previous: 8.86 Getopt::Long" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch08_01.htm" title="8. Standard Modules">Chapter 8<br>Standard Modules</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="NUTENTRY" href="c08_205.htm" title="Reference: config"><img src="../gifs/txtnexta.gif" alt="Next: Reference: config" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="NUTENTRY"><h2 class="nutentry"><a class="term" name="AUTOID-18009">GetOptions</A
></H2
><pre class="nutsynopsis">$<code class="replaceable"><i>result</I
></CODE
> <b class="emphasis.bold">= GetOptions(</B
><code class="replaceable"><i>option-descriptions</I
></CODE
><b class="emphasis.bold">)</B
></PRE
><dl class="nutentrybody"><p class="para">Uses descriptions from <em class="emphasis">option-descriptions</EM
> to retrieve and process the
command-line options with which your Perl program was invoked.
The options are taken from <code class="literal">@ARGV</CODE
>.  After <code class="literal">GetOptions</CODE
>
has processed the options, <code class="literal">@ARGV</CODE
> contains only command-line
arguments that were not options. Returns 0 if errors are detected.
Each option description consists of two elements:</P
><dl class="variablelist"><dt class="term"><em class="emphasis">Option specifier</EM
></DT
><dd class="listitem"><p class="para">Defines the option name and optionally a value as an argument specifier.</P
></DD
><dt class="term"><em class="emphasis">Option linkage</EM
></DT
><dd class="listitem"><p class="para">A reference to a variable that is set when the option is present.</P
></DD
></DL
><p class="para"><code class="literal">GetOptions</CODE
> can also take as a first argument a reference to
a hash that describes the linkage for the options. The linkage specified 
in the argument list takes precedence over the 
one specified in the hash. Thus the following are equivalent:


<blockquote class="screen"><pre class="screen">%optctl = (size =&gt; \$offset);
&amp;GetOptions(\%optctl, &quot;size=i&quot;);</PRE
></BLOCKQUOTE
>


and:


<blockquote class="screen"><pre class="screen">&amp;GetOptions(&quot;size=i&quot; =&gt; \$offset);</PRE
></BLOCKQUOTE
>
&#13;</P
><div class="refsect2"><h3 class="refsect2"><a class="title" name="AUTOID-18037">Option specifiers</A
></H3
><p class="para">Each option specifier consists of an option name and possibly
an argument specifier.  The name can be a name, or a list of names
separated by <code class="literal">|</CODE
>; the first name in the list is the true name
of the option and the others are treated as aliases. Option names
may be invoked with the shortest unique abbreviation.
Values for argument specifiers are:</P
><dl class="variablelist"><dt class="term"><code class="literal">&lt;none&gt;</CODE
></DT
><dd class="listitem"><p class="para">Option takes no argument.  The option variable is set to 1.</P
></DD
><dt class="term"><code class="literal">!&nbsp;&nbsp;&nbsp;</CODE
></DT
><dd class="listitem"><p class="para">Option does not take an argument and may be negated, that is, prefixed by
&quot;<code class="literal">no</CODE
>&quot;.</P
></DD
><dt class="term"><code class="literal">=s&nbsp;&nbsp;&nbsp;</CODE
></DT
><dd class="listitem"><p class="para">Option takes a mandatory argument that is a string to be
assigned to the option variable. 
Even if the argument starts with <code class="literal">-</CODE
> or <code class="literal">--</CODE
>, it
is assigned to the option variable rather than treated as another
option.</P
></DD
><dt class="term"><code class="literal">:s&nbsp;&nbsp;&nbsp;</CODE
></DT
><dd class="listitem"><p class="para">Option takes an optional string argument. If the option is invoked with no
argument, an empty string (<code class="literal">&quot;&quot;</CODE
>) is assigned to the option variable.
If the argument starts with <code class="literal">-</CODE
> or <code class="literal">--</CODE
>, it
is treated as another option rather than assigned to the option variable.</P
></DD
><dt class="term"><code class="literal">=i&nbsp;&nbsp;&nbsp;</CODE
></DT
><dd class="listitem"><p class="para">Option takes a mandatory integer argument, which
may start with <code class="literal">-</CODE
> to indicate a negative value.</P
></DD
><dt class="term"><code class="literal">:i&nbsp;&nbsp;&nbsp;</CODE
></DT
><dd class="listitem"><p class="para">Option takes an optional integer argument that may start with <code class="literal">-</CODE
>
to indicate a negative value. With no argument, the value 0 is assigned to the
option variable.</P
></DD
><dt class="term"><code class="literal">=f&nbsp;&nbsp;&nbsp;</CODE
></DT
><dd class="listitem"><p class="para">Option takes a mandatory floating-point argument that
may start with <code class="literal">-</CODE
> to indicate a negative value.</P
></DD
><dt class="term"><code class="literal">:f&nbsp;&nbsp;&nbsp;</CODE
></DT
><dd class="listitem"><p class="para">Option takes an optional floating-point argument that may start with
<code class="literal">-</CODE
> to indicate a negative value. With no argument,
the value 0 is assigned to the option variable.</P
></DD
></DL
><p class="para">A hyphen (<code class="literal">-</CODE
>) by itself is considered an option whose name is
the empty string. A double hyphen (<code class="literal">--</CODE
>) by itself terminates
option processing.  Any options following the double hyphen
remain in <code class="literal">@ARGV</CODE
> when <code class="literal">GetOptions</CODE
> returns.
If an argument specifier ends with <code class="literal">@</CODE
> (e.g., <code class="literal">=s@</CODE
>),
then the option is treated as an array.</P
><p class="para">The special option specifier <code class="literal">&lt;&gt;</CODE
> can be used to designate a subroutine
to handle non-option arguments. For this specifier to be used,
the variable <code class="literal">$Getopt::Long::order</CODE
> must have the value of the
predefined and exported variable, <code class="literal">$PERMUTE</CODE
>. See the description of
<code class="literal">Getopt::Long::config</CODE
> below.</P
></DIV
><div class="refsect2"><h3 class="refsect2"><a class="title" name="AUTOID-18104">Linkage specification</A
></H3
><p class="para">The linkage specifier can be a reference to a:</P
><dl class="variablelist"><dt class="term"><em class="emphasis">Scalar</EM
></DT
><dd class="listitem"><p class="para">The new value is stored in the referenced
variable.  If the option occurs more than once, the previous value is
overwritten.</P
></DD
><dt class="term"><em class="emphasis">Array</EM
></DT
><dd class="listitem"><p class="para">The new value is appended (pushed) onto the referenced array.</P
></DD
><dt class="term"><em class="emphasis">Subroutine</EM
></DT
><dd class="listitem"><p class="para">The referenced subroutine is called with
two arguments: the option name, which is always the true name,
and the option value.</P
></DD
></DL
><p class="para">If no linkage is explicitly
specified, but a hash reference is passed, <code class="literal">GetOptions</CODE
>
puts the value in the hash. For array options, a 
reference to an anonymous array is generated.</P
><p class="para">If no linkage is explicitly specified and no hash reference is passed,
<code class="literal">GetOptions</CODE
> puts the value into a global variable named
after the option, prefixed by <code class="literal">opt_</CODE
>. Characters that are not 
part of the variable syntax are translated to underscores.  For example,
<code class="literal">--fpp-struct-return</CODE
> sets the variable
<code class="literal">$opt_fpp_struct_return</CODE
>.</P
></DIV
></DL
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch08_86.htm" title="8.86 Getopt::Long"><img src="../gifs/txtpreva.gif" alt="Previous: 8.86 Getopt::Long" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl in a Nutshell"><img src="../gifs/txthome.gif" alt="Perl in a Nutshell" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="NUTENTRY" href="c08_205.htm" title="Reference: config"><img src="../gifs/txtnexta.gif" alt="Next: Reference: config" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">8.86 Getopt::Long</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">Reference: config</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
