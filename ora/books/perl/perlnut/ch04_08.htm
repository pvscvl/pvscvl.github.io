<html><head>
<title>[Chapter 4] 4.8 References and Complex Data Structures</TITLE>
<meta name="DC.title" content="Perl in a Nutshell"><meta name="DC.creator" content="Ellen Siever, Stephen Spainhour &amp; Nathan Patwardhan"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:32:24Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-286-7" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch04_01.htm" title="4. The Perl Language"><link rel="prev" href="ch04_07.htm#PNUT-CH-4-SECT-7.1" title="4.7 Subroutines"><link rel="next" href="ch04_09.htm" title="4.9 Filehandles"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl in a Nutshell" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,71" href="index.htm" alt="Perl in a Nutshell"><area shape="RECT" coords="467,0,514,18" href="../search/nsrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch04_07.htm#PNUT-CH-4-SECT-7.1" title="4.7 Subroutines"><img src="../gifs/txtpreva.gif" alt="Previous: 4.7 Subroutines" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch04_01.htm" title="4. The Perl Language">Chapter 4<br>The Perl Language</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch04_09.htm" title="4.9 Filehandles"><img src="../gifs/txtnexta.gif" alt="Next: 4.9 Filehandles" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="PNUT-CH-4-SECT-8">4.8 References and Complex Data Structures</A
></H2
><p class="para"><a class="indexterm" name="PNUT-CH-4-IX-REFERENCES"></A
><a class="indexterm" name="PNUT-CH-4-IX-COMPLEX-DATA-STRUCTURES"></A
><a class="indexterm" name="PNUT-CH-4-IX-DATA-TYPES-COMPLEX-DATA-STRUCTURES"></A
>A Perl reference is a fundamental data type that &quot;points&quot; to 
another piece of data or code. 
A reference knows the location of the information
and what type of data is stored there.</P
><p class="para">A reference is a scalar and
can be used anywhere a scalar can be used. Any array
element or hash value can contain a reference (a hash key cannot
contain a reference), and this is how nested data structures are
built in Perl. You can construct lists containing references to
other lists, which can contain references to hashes, and so on.</P
><div class="sect2"><h3 class="sect2"><a class="title" name="PNUT-CH-4-SECT-8.1">4.8.1 Creating References</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-6075"></A
><a class="indexterm" name="AUTOID-6078"></A
>You can create a reference to an existing variable or subroutine
by prefixing it with a backslash:


<blockquote class="screen"><pre class="screen">$a = &quot;fondue&quot;;
@alist = (&quot;pitt&quot;, &quot;hanks&quot;, &quot;cage&quot;, &quot;cruise&quot;);
%song = (&quot;mother&quot; =&gt; &quot;crying&quot;, &quot;brother&quot; =&gt; &quot;dying&quot;);
sub freaky_friday { s/mother/daughter/ }
# Create references
$ra = \$a;
$ralist = \@alist;
$rsong = \%song;
$rsub = \&amp;freaky_friday; # '&amp;' required for subroutine names</PRE
></BLOCKQUOTE
>


References to scalar constants are created similarly:


<blockquote class="screen"><pre class="screen">$pi = \3.14159;
$myname = \&quot;Charlie&quot;;</PRE
></BLOCKQUOTE
>

<a class="indexterm" name="AUTOID-6083"></A
><a class="indexterm" name="AUTOID-6087"></A
>
Note that all references are prefixed by a <code class="literal">$</CODE
>, even
if they refer to an array or hash. All references are scalars, thus you
can copy a reference to another scalar or even reference
another reference:


<blockquote class="screen"><pre class="screen">$aref = \@names;
$bref = $aref;  # both refer to @names
$cref = \$aref; # $cref is a reference to $aref</PRE
></BLOCKQUOTE
>


Because arrays and hashes are collections of scalars, you can
create references to individual elements by prefixing their
names with backslashes:


<blockquote class="screen"><pre class="screen">$star = \$alist[2];       # refers to third element of @alist
$action = \$song{mother}; # refers to the 'mother' value of %song</PRE
></BLOCKQUOTE
>
&#13;</P
><div class="sect3"><h4 class="sect3"><a class="title" name="PNUT-CH-4-SECT-8.1.1">4.8.1.1 Referencing anonymous data</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-6096"></A
>It is also possible to take references to literal data
not stored in a variable. This data is called
<em class="emphasis">anonymous</EM
> because it is not bound to any named variable.</P
><p class="para">To create a reference to
a scalar constant, simply backslash the
literal string or number. </P
><p class="para">To create a reference to an anonymous array, place the
list of values in square brackets:


<blockquote class="screen"><pre class="screen">$shortbread = [ &quot;flour&quot;, &quot;butter&quot;, &quot;eggs&quot;, &quot;sugar&quot; ];</PRE
></BLOCKQUOTE
>


This creates a reference to an array, but the array is only
available through the reference <code class="literal">$shortbread</CODE
>. </P
><p class="para">A reference to an anonymous hash uses curly braces around the
list of elements:


<blockquote class="screen"><pre class="screen">$cast =  { host     =&gt; &quot;Space Ghost&quot;,
           musician =&gt; &quot;Zorak&quot;,
           director =&gt; &quot;Moltar&quot; };</PRE
></BLOCKQUOTE
>
&#13;</P
></DIV
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PNUT-CH-4-SECT-8.2">4.8.2 Dereferencing</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-6108"></A
><a class="indexterm" name="AUTOID-6110"></A
><a class="indexterm" name="AUTOID-6113"></A
><a class="indexterm" name="AUTOID-6116"></A
><a class="indexterm" name="AUTOID-6119"></A
><a class="indexterm" name="AUTOID-6122"></A
><a class="indexterm" name="AUTOID-6125"></A
>Dereferencing returns the value a reference points to. The
general method of dereferencing uses the reference variable
substituted for the regular name part of a variable. If
<code class="literal">$r</CODE
> is a reference, then <code class="literal">$$r</CODE
>, <code class="literal">@$r</CODE
>,
or <code class="literal">%$r</CODE
> retrieve the value being referred to, depending
on whether <code class="literal">$r</CODE
> is pointing to a scalar, array, or hash.
A reference can be used in all the
places where an ordinary data type can be used. </P
><p class="para">When a reference
is accidentally evaluated as a plain scalar, it returns a string that
indicates what type of data it points to and the memory address
of the data. </P
><p class="para">If you just want to know which type of data is being referenced,<a class="indexterm" name="AUTOID-6135"></A
>
use <code class="literal">ref</CODE
>, which 
returns one of the following strings if
its argument is a reference. Otherwise, it returns false.


<blockquote class="screen"><pre class="screen">SCALAR
ARRAY
HASH
CODE
GLOB
REF</PRE
></BLOCKQUOTE
>
&#13;</P
><div class="sect3"><h4 class="sect3"><a class="title" name="PNUT-CH-4-SECT-8.2.1">4.8.2.1 Arrow dereferencing</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-6142"></A
><a class="indexterm" name="AUTOID-6145"></A
><a class="indexterm" name="AUTOID-6147"></A
><a class="indexterm" name="AUTOID-6151"></A
>References to arrays, hashes, and subroutines can be dereferenced using the
<code class="literal">-&gt;</CODE
> operator. This operator dereferences the
expression to its left, which must resolve to an array or hash, and accesses
the element represented by the subscripted expression on its right. For
example, these three statement are equivalent:


<blockquote class="screen"><pre class="screen">$$arrayref[0] = &quot;man&quot;;
${$arrayref}[0] = &quot;man&quot;;
$arrayref-&gt;[0] = &quot;man&quot;;</PRE
></BLOCKQUOTE
>


The first statement dereferences <code class="literal">$arrayref</CODE
> first and then finds the
first element of that array. The second uses braces to clarify this procedure.
The third statement uses the arrow notation to do the same thing. </P
><p class="para">The arrow dereferencing notation can only be used to access a single
scalar value. You cannot use arrow operators in expressions that return
either slices or whole arrays or hashes.<a class="indexterm" name="AUTOID-6159"></A
><a class="indexterm" name="AUTOID-6160"></A
><a class="indexterm" name="AUTOID-6161"></A
></P
></DIV
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch04_07.htm#PNUT-CH-4-SECT-7.1" title="4.7 Subroutines"><img src="../gifs/txtpreva.gif" alt="Previous: 4.7 Subroutines" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl in a Nutshell"><img src="../gifs/txthome.gif" alt="Perl in a Nutshell" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch04_09.htm" title="4.9 Filehandles"><img src="../gifs/txtnexta.gif" alt="Next: 4.9 Filehandles" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">4.7 Subroutines</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">4.9 Filehandles</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
