<html><head>
<title>[Chapter 17] 17.4 The HTML Module</TITLE>
<meta name="DC.title" content="Perl in a Nutshell"><meta name="DC.creator" content="Ellen Siever, Stephen Spainhour &amp; Nathan Patwardhan"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:58:16Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-286-7" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch17_01.htm" title="17. The LWP Library"><link rel="prev" href="ch17_03.htm#PNUT-CH-17-SECT-3.7" title="17.3 The HTTP Modules"><link rel="next" href="ch17_05.htm" title="17.5 The URI Module"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl in a Nutshell" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,71" href="index.htm" alt="Perl in a Nutshell"><area shape="RECT" coords="467,0,514,18" href="../search/nsrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch17_03.htm#PNUT-CH-17-SECT-3.7" title="17.3 The HTTP Modules"><img src="../gifs/txtpreva.gif" alt="Previous: 17.3 The HTTP Modules" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch17_01.htm" title="17. The LWP Library">Chapter 17<br>The LWP Library</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch17_05.htm" title="17.5 The URI Module"><img src="../gifs/txtnexta.gif" alt="Next: 17.5 The URI Module" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="PNUT-CH-17-SECT-4">17.4 The HTML Module</A
></H2
><p class="para"><a class="indexterm" name="PNUT-CH-17-IX-LWP-LIBRARY-HTML-MODULES"></A
><a class="indexterm" name="PNUT-CH-17-IX-HTML-MODULES"></A
>The HTML modules provide an interface to parse HTML documents. After you parse 
the document, you can print or display it according to the markup tags, or
you can extract specific information such as hyperlinks.</P
><p class="para"><a class="indexterm" name="AUTOID-34754"></A
><a class="indexterm" name="AUTOID-34758"></A
>The HTML::Parser module provides the base class for the usable HTML
modules. It provides methods for reading in HTML text from either
a string or a file and then separating out the syntactic structures
and
data. As a base class, Parser does virtually nothing on its own. The
other modules call it internally and override its empty methods for their
own purposes. However, the HTML::Parser class is useful to you if you want to
write your own classes for parsing and formatting HTML.</P
><p class="para">HTML::TreeBuilder is a class that parses HTML into a syntax tree.
In a syntax tree, each element of the HTML, such as container elements
with beginning and end tags, is stored relative to other elements. This
preserves the nested structure and behavior of HTML and its hierarchy.</P
><p class="para">A syntax tree of the TreeBuilder class is formed of connected nodes
that represent each element of the HTML document. These nodes are
saved as objects from the HTML::Element class. An HTML::Element object
stores all the information from an HTML tag: the start tag, end tag,
attributes, plain text, and pointers to any nested elements.</P
><p class="para">The remaining classes of the HTML modules use the syntax trees and
its nodes of element objects to output useful information from the
HTML documents. The format classes, such as HTML::FormatText and
HTML::FormatPS, allow you to produce text and PostScript from HTML.
The HTML::LinkExtor class extracts all of the links from a document.
Additional modules provide means for replacing HTML character entities
and implementing HTML tags as subroutines.</P
><div class="sect2"><h3 class="sect2"><a class="title" name="PNUT-CH-17-SECT-4.1">17.4.1 HTML::Parser</A
></H3
><p class="para"><a class="indexterm" name="PNUT-CH-17-IX-LWP-LIBRARY-HTML-MODULES-HTMLPARSER"></A
><a class="indexterm" name="PNUT-CH-17-IX-HTML-MODULES-HTMLPARSER-MODULE"></A
>This module implements the base class for the other HTML modules.
A parser object is created with the <code class="literal">new</CODE
> constructor:<a class="indexterm" name="AUTOID-34775"></A
>


<blockquote class="screen"><pre class="screen">$p = HTML::Parser-&gt;new();</PRE
></BLOCKQUOTE
>


The constructor takes no arguments.</P
><p class="para">The parser object takes methods that read in HTML either from a string or
a file. The string-reading method can take data as several smaller chunks
if the HTML is too big. Each chunk of HTML will be appended to the object,
and the <code class="literal">eof</CODE
> method indicates the end of the document.
These basic methods are described below.</P
><ul class="nutlist"><li class="term"><a class="nutentry" href="c17_080.htm" title="Reference: parse">parse</A
></LI
><li class="term"><a class="nutentry" href="c17_081.htm" title="Reference: parse_file">parse_file</A
></LI
><li class="term"><a class="nutentry" href="c17_082.htm" title="Reference: eof">eof</A
></LI
></UL
><p class="para">When the <code class="literal">parse</CODE
> or <code class="literal">parse_file</CODE
> method is called, it parses the
incoming HTML with a few internal methods. In HTML::Parser, these methods
are defined, but empty. Additional HTML parsing classes (included in the
HTML modules or ones you write yourself) override these methods for their
own purposes. For example:


<blockquote class="screen"><pre class="screen">package HTML::MyParser;
require HTML::Parser;
@ISA=qw(HTML::MyParser);

sub start {
     <em class="emphasis">your subroutine defined here</EM
>
     }</PRE
></BLOCKQUOTE
>


The following list shows the internal methods contained in HTML::Parser:</P
><ul class="nutlist"><li class="term"><a class="nutentry" href="c17_083.htm" title="Reference: comment">comment</A
></LI
><li class="term"><a class="nutentry" href="c17_084.htm" title="Reference: declaration">declaration</A
></LI
><li class="term"><a class="nutentry" href="c17_085.htm" title="Reference: end">end</A
></LI
><li class="term"><a class="nutentry" href="c17_086.htm" title="Reference: start">start</A
></LI
><li class="term"><a class="nutentry" href="c17_087.htm" title="Reference: text">text</A
></LI
></UL
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PNUT-CH-17-SECT-4.2">17.4.2 HTML::Element</A
></H3
><p class="para"><a class="indexterm" name="PNUT-CH-17-IX-LWP-LIBRARY-HTML-MODULES-HTMLELEMENT"></A
><a class="indexterm" name="PNUT-CH-17-IX-HTML-MODULES-HTMLELEMENT-MODULE"></A
>The HTML::Element module provides methods for dealing with nodes in an HTML syntax tree. 
You can get or set the contents of each node, traverse the tree, and delete a node. </P
><p class="para">HTML::Element objects are used to represent elements of HTML. These elements
include start and end tags, attributes, contained plain text, and other nested
elements. </P
><p class="para">The constructor for this class requires the name of the tag for its first
argument. You may optionally specify initial attributes and values as
hash elements in the constructor. For example:<a class="indexterm" name="AUTOID-34884"></A
>


<blockquote class="screen"><pre class="screen">$h = HTML::Element-&gt;new('a', 'href' =&gt; 'http://www.oreilly.com');</PRE
></BLOCKQUOTE
>


The new element is created for the anchor tag, <code class="literal">&lt;a&gt;</CODE
>, which links to
the URL through its <code class="literal">href</CODE
> attribute.</P
><p class="para">The following methods are provided for objects of the HTML::Element class:
<ul class="nutlist"><li class="term"><a class="nutentry" href="c17_088.htm" title="Reference: as_HTML">as_HTML</A
></LI
><li class="term"><a class="nutentry" href="c17_089.htm" title="Reference: attr">attr</A
></LI
><li class="term"><a class="nutentry" href="c17_090.htm" title="Reference: content">content</A
></LI
><li class="term"><a class="nutentry" href="c17_091.htm" title="Reference: delete">delete</A
></LI
><li class="term"><a class="nutentry" href="c17_092.htm" title="Reference: delete_content">delete_content</A
></LI
><li class="term"><a class="nutentry" href="c17_093.htm" title="Reference: dump">dump</A
></LI
><li class="term"><a class="nutentry" href="c17_094.htm" title="Reference: endtag">endtag</A
></LI
><li class="term"><a class="nutentry" href="c17_095.htm" title="Reference: extract_links">extract_links</A
></LI
><li class="term"><a class="nutentry" href="c17_096.htm" title="Reference: implicit">implicit</A
></LI
><li class="term"><a class="nutentry" href="c17_097.htm" title="Reference: insert_element">insert_element</A
></LI
><li class="term"><a class="nutentry" href="c17_098.htm" title="Reference: is_empty">is_empty</A
></LI
><li class="term"><a class="nutentry" href="c17_099.htm" title="Reference: is_inside">is_inside</A
></LI
><li class="term"><a class="nutentry" href="c17_100.htm" title="Reference: parent">parent</A
></LI
><li class="term"><a class="nutentry" href="c17_101.htm" title="Reference: pos">pos</A
></LI
><li class="term"><a class="nutentry" href="c17_102.htm" title="Reference: push_content">push_content</A
></LI
><li class="term"><a class="nutentry" href="c17_103.htm" title="Reference: starttag">starttag</A
></LI
><li class="term"><a class="nutentry" href="c17_104.htm" title="Reference: tag">tag</A
></LI
><li class="term"><a class="nutentry" href="c17_105.htm" title="Reference: traverse">traverse</A
></LI
></UL
><a class="indexterm" name="AUTOID-35085"></A
><a class="indexterm" name="AUTOID-35086"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PNUT-CH-17-SECT-4.3">17.4.3 HTML::TreeBuilder</A
></H3
><p class="para"><a class="indexterm" name="PNUT-CH-17-IX-LWP-LIBRARY-HTML-MODULES-HTMLTREEBUILDER"></A
><a class="indexterm" name="PNUT-CH-17-IX-HTML-MODULES-HTMLTREEBUILDER-MODULE"></A
>The HTML::TreeBuilder class provides a parser that creates an HTML
syntax tree. Each node of the tree is an HTML::Element object.
This class inherits both HTML::Parser and HTML::Elements, so methods
from both of those classes can be used on its objects.</P
><p class="para">The methods provided by HTML::TreeBuilder control how the parsing is
performed. Values for these methods are set by providing a boolean
value for their arguments. Here are the methods:
<ul class="nutlist"><li class="term"><a class="nutentry" href="c17_106.htm" title="Reference: implicit_tags">implicit_tags</A
></LI
><li class="term"><a class="nutentry" href="c17_107.htm" title="Reference: ignore_unknown">ignore_unknown</A
></LI
><li class="term"><a class="nutentry" href="c17_108.htm" title="Reference: ignore_text">ignore_text</A
></LI
><li class="term"><a class="nutentry" href="c17_109.htm" title="Reference: warn">warn</A
></LI
></UL
><a class="indexterm" name="AUTOID-35141"></A
><a class="indexterm" name="AUTOID-35142"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PNUT-CH-17-SECT-4.4">17.4.4 HTML::FormatPS</A
></H3
><p class="para"><a class="indexterm" name="PNUT-CH-17-IX-LWP-LIBRARY-HTML-MODULES-HTMLFORMATPS"></A
><a class="indexterm" name="PNUT-CH-17-IX-HTML-MODULES-HTMLFORMATPS-MODULE"></A
><a class="indexterm" name="PNUT-CH-17-IX-POSTSCRIPT-CONVERTING-HTML-PARSE-TREE-TO"></A
>The HTML::FormatPS module converts an HTML parse tree into PostScript.
The formatter object is created with the <code class="literal">new</CODE
> constructor, which
can take parameters that assign PostScript attributes.
For example:<a class="indexterm" name="AUTOID-35156"></A
>


<blockquote class="screen"><pre class="screen">$formatter = new HTML::FormatPS('papersize' =&gt; 'Letter');</PRE
></BLOCKQUOTE
>


You can now give parsed HTML to the formatter and produce PostScript output
for printing. HTML::FormatPS does not handle table or form elements at this time.</P
><p class="para"><a class="indexterm" name="AUTOID-35161"></A
>The method for this class is <code class="literal">format</CODE
>. <code class="literal">format</CODE
> takes a reference to 
an HTML TreeBuilder object, representing a parsed HTML document.
It returns a scalar containing the document formatted in PostScript.
The following example shows how to use this module to print a file in
PostScript:


<blockquote class="screen"><pre class="screen">use HTML::FormatPS;

$html = HTML::TreeBuilder-&gt;parse_file(somefile);
$formatter = new HTML::FormatPS;
print $formatter-&gt;format($html);</PRE
></BLOCKQUOTE
>


The following list describes the attributes that can be set in the
constructor:</P
><dl class="variablelist"><dt class="term"><code class="replaceable"><i>PaperSize</I
></CODE
></DT
><dd class="listitem"><p class="para">Possible values of 3, A4, A5, B4, B5, Letter, Legal, Executive, Tabloid, 
Statement, Folio, 10x14, and Quarto. The default is A4.</P
></DD
><dt class="term"><code class="replaceable"><i>PaperWidth</I
></CODE
></DT
><dd class="listitem"><p class="para">Width of the paper in points. </P
></DD
><dt class="term"><code class="replaceable"><i>PaperHeight</I
></CODE
></DT
><dd class="listitem"><p class="para">Height of the paper in points. </P
></DD
><dt class="term"><code class="replaceable"><i>LeftMargin</I
></CODE
></DT
><dd class="listitem"><p class="para">Left margin in points.</P
></DD
><dt class="term"><code class="replaceable"><i>RightMargin</I
></CODE
></DT
><dd class="listitem"><p class="para">Right margin in points.</P
></DD
><dt class="term"><code class="replaceable"><i>HorizontalMargin</I
></CODE
></DT
><dd class="listitem"><p class="para">Left and right margin. Default is 4 cm.</P
></DD
><dt class="term"><code class="replaceable"><i>TopMargin</I
></CODE
></DT
><dd class="listitem"><p class="para">Top margin in points. </P
></DD
><dt class="term"><code class="replaceable"><i>BottomMargin</I
></CODE
></DT
><dd class="listitem"><p class="para">Bottom margin in points.</P
></DD
><dt class="term"><code class="replaceable"><i>VerticalMargin</I
></CODE
></DT
><dd class="listitem"><p class="para">Top and bottom margin. Default is 2 cm.</P
></DD
><dt class="term"><code class="replaceable"><i>PageNo</I
></CODE
></DT
><dd class="listitem"><p class="para">Boolean value to display page numbers. Default is 0 (off).</P
></DD
><dt class="term"><code class="replaceable"><i>FontFamily</I
></CODE
></DT
><dd class="listitem"><p class="para">Font family to use on the page. Possible values are Courier, Helvetica,
and Times. Default is Times.</P
></DD
><dt class="term"><code class="replaceable"><i>FontScale</I
></CODE
></DT
><dd class="listitem"><p class="para">Scale factor for the font.</P
></DD
><dt class="term"><code class="replaceable"><i>Leading</I
></CODE
></DT
><dd class="listitem"><p class="para">Space between lines, as a factor of the font size. Default is 0.1. <a class="indexterm" name="AUTOID-35233"></A
><a class="indexterm" name="AUTOID-35234"></A
><a class="indexterm" name="AUTOID-35235"></A
></P
></DD
></DL
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PNUT-CH-17-SECT-4.5">17.4.5 HTML::FormatText</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-35239"></A
><a class="indexterm" name="AUTOID-35243"></A
>The HTML::FormatText takes a parsed HTML file and outputs a plain
text version of it. None of the character attributes will be usable,
i.e., bold or italic fonts, font sizes, etc.</P
><p class="para"><a class="indexterm" name="AUTOID-35247"></A
>This module is similar to FormatPS in that the constructor takes
attributes for formatting, and the <code class="literal">format</CODE
> method produces the output.
A formatter object can be constructed like this:


<blockquote class="screen"><pre class="screen">$formatter = new HTML::FormatText (leftmargin =&gt; 10, rightmargin =&gt; 80);</PRE
></BLOCKQUOTE
>


The constructor can take two parameters: <code class="literal">leftmargin</CODE
> and <code class="literal">rightmargin</CODE
>.
The value for the margins is given in column numbers. The aliases <code class="literal">lm</CODE
>
and <code class="literal">rm</CODE
> can also be used.</P
><p class="para">The <code class="literal">format</CODE
> method takes an HTML::TreeBuilder object and returns
a scalar containing the formatted text. You can print it with:


<blockquote class="screen"><pre class="screen">print $formatter-&gt;format($html);</PRE
></BLOCKQUOTE
></P
><a class="indexterm" name="AUTOID-35259"></A
><a class="indexterm" name="AUTOID-35260"></A
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch17_03.htm#PNUT-CH-17-SECT-3.7" title="17.3 The HTTP Modules"><img src="../gifs/txtpreva.gif" alt="Previous: 17.3 The HTTP Modules" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl in a Nutshell"><img src="../gifs/txthome.gif" alt="Perl in a Nutshell" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch17_05.htm" title="17.5 The URI Module"><img src="../gifs/txtnexta.gif" alt="Next: 17.5 The URI Module" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">17.3 The HTTP Modules</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">17.5 The URI Module</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
