<html><head>
<title>Recipe 14.7. Treating a Text File as a Database Array</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:42:52Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch14_01.htm" title="14. Database Access"><link rel="prev" href="ch14_07.htm" title="14.6. Sorting Large DBM Files"><link rel="next" href="ch14_09.htm" title="14.8. Storing Complex Data in a DBM File"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch14_07.htm" title="14.6. Sorting Large DBM Files"><img src="../gifs/txtpreva.gif" alt="Previous: 14.6. Sorting Large DBM Files" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch14_01.htm" title="14. Database Access">Chapter 14<br>Database Access</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch14_09.htm" title="14.8. Storing Complex Data in a DBM File"><img src="../gifs/txtnexta.gif" alt="Next: 14.8. Storing Complex Data in a DBM File" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch14-10143">14.7. Treating a Text File as a Database Array</A
></H2
><div class="sect2"><h3 class="sect2"><a class="title" name="ch14-pgfId-728">Problem<a class="indexterm" name="ch14-idx-1000004980-0"></A
><a class="indexterm" name="ch14-idx-1000004980-1"></A
><a class="indexterm" name="ch14-idx-1000004980-2"></A
><a class="indexterm" name="ch14-idx-1000004980-3"></A
></A
></H3
><p class="para">You'd like to treat a text file as an array of lines with read-write privileges. You might want to do that so you could easily update the Nth line.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch14-pgfId-734">Solution</A
></H3
><p class="para">The DB_File module lets you <code class="literal">tie</CODE
> a text file to an array.</P
><pre class="programlisting">use DB_File;

tie(@array, &quot;DB_File&quot;, &quot;/tmp/textfile&quot;, O_RDWR|O_CREAT, 0666, $DB_RECNO)
    or die &quot;Cannot open file 'text': $!\en&quot; ;

$array[4] = &quot;a new line&quot;;
untie @array;</PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch14-pgfId-754">Description</A
></H3
><p class="para">Updating a textfile in place is surprisingly tricky, as noted in <a class="xref" href="ch07_01.htm" title="File Access">Chapter 7, <cite class="chapter">File Access</CITE
></A
>. The RECNO binding provides a nice way to address the file as though it were a simple array of lines &nbsp;-  the way everyone always seems to think they can.</P
><p class="para">Working with files this way can be odd. For one thing, the zeroth element of the tied array is the first line of the file. More importantly, tied arrays aren't as fully featured as tied hashes are. This will be fixed in a future version of Perl &nbsp;-  patches are already available, in fact.</P
><p class="para">As you can see from the example above, the tied array interface is limited. To make the interface more useful, methods supplied with DB_File simulate the standard array operations that are not currently implemented in Perl's tied array interface. Save the return value from <code class="literal">tie</CODE
> function or retrieve it later from the tied hash using the <code class="literal">tied</CODE
> function. Use this object to access the following methods:</P
><dl class="variablelist"><dt class="term"><code class="literal">$X-&gt;push(LIST)</CODE
> </DT
><dd class="listitem"><p class="para">Pushes elements of <code class="literal">LIST</CODE
> to the end of the array.</P
></DD
><dt class="term"><code class="literal">$value</CODE
> <code class="literal">= $X-&gt;pop </CODE
></DT
><dd class="listitem"><p class="para">Removes and returns the last element of the array.</P
></DD
><dt class="term"><code class="literal">$X-&gt;shift </CODE
></DT
><dd class="listitem"><p class="para">Removes and returns the first element of the array.</P
></DD
><dt class="term"><code class="literal">$X-&gt;unshift(LIST) </CODE
></DT
><dd class="listitem"><p class="para">Pushes elements of <code class="literal">LIST</CODE
> to the start of the array.</P
></DD
><dt class="term"><code class="literal">$X-&gt;length </CODE
></DT
><dd class="listitem"><p class="para">Returns the number of elements in the array.</P
></DD
></DL
><p class="para"><a class="xref" href="#ch14-19290" title="recno_demo">Example 14.5</A
> is a more complete example using methods described above. It also accesses the direct API interface as described in the DB_File module documentation. (Much of this recipe is derived from the DB_File module documentation, courtesy of Paul Marquess, author of the Perl port of Berkeley DB. This material is used with his permission.)</P
><div class="example"><h4 class="example"><a class="title" name="ch14-19290">Example 14.5: recno_demo</A
></H4
><pre class="programlisting">#!/usr/bin/perl -w
# <a class="indexterm" name="ch14-idx-1000004981-0"></A
>recno_demo - show how to use the raw API on recno bindings
use strict;
use vars qw(@lines $dbobj $file $i);
use DB_File;

$file = &quot;/tmp/textfile&quot;;
unlink $file;               # just in case

$dbobj = tie(@lines, &quot;DB_File&quot;, $file, O_RDWR|O_CREAT, 0666, $DB_RECNO)
    or die &quot;Cannot open file $file: $!\n&quot;;

# first create a text file to play with
$lines[0] = &quot;zero&quot;;
$lines[1] = &quot;one&quot;;
$lines[2] = &quot;two&quot;;
$lines[3] = &quot;three&quot;;
$lines[4] = &quot;four&quot;;

# Print the records in order.
#
# The length method is needed here because evaluating a tied
# array in a scalar context does not return the number of
# elements in the array.

print &quot;\nORIGINAL\n&quot;;
foreach $i (0 .. $dbobj-&gt;length - 1) {
    print &quot;$i: $lines[$i]\n&quot;;
}

# use the push &amp; pop methods
$a = $dbobj-&gt;pop;
$dbobj-&gt;push(&quot;last&quot;);
print &quot;\nThe last record was [$a]\n&quot;;

# and the shift &amp; unshift methods
$a = $dbobj-&gt;shift;
$dbobj-&gt;unshift(&quot;first&quot;);
print &quot;The first record was [$a]\n&quot;;

# Use the API to add a new record after record 2.
$i = 2;
$dbobj-&gt;put($i, &quot;Newbie&quot;, R_IAFTER);
    
# and a new record before record 1.
$i = 1;
$dbobj-&gt;put($i, &quot;New One&quot;, R_IBEFORE);

# delete record 3
$dbobj-&gt;del(3);

# now print the records in reverse order
print &quot;\nREVERSE\n&quot;;
for ($i = $dbobj-&gt;length - 1; $i &gt;= 0; -- $i) {
    print &quot;$i: $lines[$i]\n&quot;;
}

# same again, but use the API functions instead
print &quot;\nREVERSE again\n&quot;;
my ($s, $k, $v)  = (0, 0, 0);
for ($s = $dbobj-&gt;seq($k, $v, R_LAST);
     $s == 0;
     $s = $dbobj-&gt;seq($k, $v, R_PREV))
{
    print &quot;$k: $v\n&quot;
}

undef $dbobj;
untie @lines;</PRE
></DIV
><p class="para">This is what it outputs:</P
><pre class="programlisting"><code class="userinput"><b><code class="replaceable"><i>ORIGINAL</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>0: zero</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>1: one</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>2: two</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>3: three</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>4: four</I
></CODE
></B
></CODE
>

<code class="userinput"><b><code class="replaceable"><i>The last record was [four]</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>The first record was [zero]</I
></CODE
></B
></CODE
>

<code class="userinput"><b><code class="replaceable"><i>REVERSE</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>5: last</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>4: three</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>3: Newbie</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>2: one</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>1: New One</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>0: first</I
></CODE
></B
></CODE
>

<code class="userinput"><b><code class="replaceable"><i>REVERSE again</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>5: last</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>4: three</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>3: Newbie</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>2: one</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>1: New One</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>0: first</I
></CODE
></B
></CODE
></PRE
><p class="para">Note that rather than iterating through the array, <code class="literal">@lines</CODE
>, like this:</P
><pre class="programlisting">    foreach $item (@lines) { }</PRE
><p class="para">you must use either this:</P
><pre class="programlisting">    foreach $i (0 .. $dbobj-&gt;length - 1) { }</PRE
><p class="para">or this:</P
><pre class="programlisting">    for ($done_yet = $dbobj-&gt;get($k, $v, R_FIRST);
         not $done_yet;
         $done_yet = $dbobj-&gt;get($k, $v, R_NEXT) )
    {
        # process key or value
    }</PRE
><p class="para">Also, when we used the <code class="literal">put</CODE
> method, we specified the record index using a variable, <code class="literal">$i</CODE
>, rather than passing the literal value itself. This is because <code class="literal">put</CODE
> returns the record number of the inserted line in that parameter, altering its contents.<a class="indexterm" name="ch14-idx-1000004983-0"></A
><a class="indexterm" name="ch14-idx-1000004983-1"></A
><a class="indexterm" name="ch14-idx-1000004983-2"></A
><a class="indexterm" name="ch14-idx-1000004983-3"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch14-pgfId-1004">See Also</A
></H3
><p class="para">The documentation for the standard DB_File module, also in <a class="olink" href="../prog/ch07_01.htm">Chapter 7</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
>, in its discussion of <code class="literal">$DB_RECNO</CODE
> bindings.</P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch14_07.htm" title="14.6. Sorting Large DBM Files"><img src="../gifs/txtpreva.gif" alt="Previous: 14.6. Sorting Large DBM Files" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch14_09.htm" title="14.8. Storing Complex Data in a DBM File"><img src="../gifs/txtnexta.gif" alt="Next: 14.8. Storing Complex Data in a DBM File" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">14.6. Sorting Large DBM Files</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">14.8. Storing Complex Data in a DBM File</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
