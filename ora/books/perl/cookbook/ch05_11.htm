<html><head>
<title>Recipe 5.10. Merging Hashes</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:32:50Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch05_01.htm" title="5. Hashes"><link rel="prev" href="ch05_10.htm" title="5.9. Sorting a Hash"><link rel="next" href="ch05_12.htm" title="5.11. Finding Common or Different Keys in Two Hashes"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch05_10.htm" title="5.9. Sorting a Hash"><img src="../gifs/txtpreva.gif" alt="Previous: 5.9. Sorting a Hash" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch05_01.htm" title="5. Hashes">Chapter 5<br>Hashes</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch05_12.htm" title="5.11. Finding Common or Different Keys in Two Hashes"><img src="../gifs/txtnexta.gif" alt="Next: 5.11. Finding Common or Different Keys in Two Hashes" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch05-30040">5.10. Merging Hashes</A
></H2
><div class="sect2"><h3 class="sect2"><a class="title" name="ch05-pgfId-972">Problem <a class="indexterm" name="ch05-idx-1000006496-0"></A
><a class="indexterm" name="ch05-idx-1000006496-1"></A
></A
></H3
><p class="para">You need to make a new hash with the entries of two existing hashes.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch05-pgfId-978">Solution</A
></H3
><p class="para">Treat them as lists, and join them as you would lists.</P
><pre class="programlisting">%merged = (%A, %B);</PRE
><p class="para">To save memory, loop over the hashes' elements and build a new hash that way:</P
><pre class="programlisting">%merged = ();
while ( ($k,$v) = each(%A) ) {
    $merged{$k} = $v;
}
while ( ($k,$v) = each(%B) ) {
    $merged{$k} = $v;
}</PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch05-pgfId-1002">Discussion</A
></H3
><p class="para">The first method, like the earlier recipe on inverting a hash, uses the hash-list equivalence explained in the introduction. <code class="literal">(%A,</CODE
> <code class="literal">%B)</CODE
> evaluates to a list of paired keys and values. When we assign it to <code class="literal">%merged</CODE
>, Perl turns that list of pairs back into a hash.</P
><p class="para">Here's an example of that technique:</P
><pre class="programlisting"># %food_color as per the introduction
%drink_color = ( Galliano  =&gt; &quot;yellow&quot;,
                 &quot;Mai Tai&quot; =&gt; &quot;blue&quot; );

%ingested_color = (%drink_color, %food_color);</PRE
><p class="para">Keys in both input hashes appear only once in the output hash. If a food and a drink shared the same name, for instance, then the last one seen by the first merging technique would be the one that showed up in the resultant hash.</P
><p class="para">This style of direct assignment, as in the first example, is easier to read and write, but requires a lot of memory if the hashes are large. That's because Perl has to unroll both hashes into a temporary list before the assignment to the merged hash is done. Step-by-step merging using <code class="literal">each</CODE
>, as in the second technique, spares you that cost and lets you decide what to do with duplicate keys.</P
><p class="para">The first example could be rewritten to use the <code class="literal">each</CODE
><a class="indexterm" name="ch05-idx-1000006497-0"></A
> technique:</P
><pre class="programlisting"># %food_color per the introduction, then
%drink_color = ( Galliano  =&gt; &quot;yellow&quot;,
                 &quot;Mai Tai&quot; =&gt; &quot;blue&quot; );

%substance_color = ();
while (($k, $v) = each %food_color) {
    $substance_color{$k} = $v;
} 
while (($k, $v) = each %drink_color) {
    $substance_color{$k} = $v;
} </PRE
><p class="para">That technique duplicated the <code class="literal">while</CODE
> and assignment code. Here's a sneaky way to get around that:</P
><pre class="programlisting">foreach $substanceref ( \%food_color, \%drink_color ) {
    while (($k, $v) = each %$substanceref) {
        $substance_color{$k} = $v;
    }
}</PRE
><p class="para">If we were merging hashes with duplicates, we can insert our own code to decide what to do with those duplicates:</P
><pre class="programlisting">foreach $substanceref ( \%food_color, \%drink_color ) {
    while (($k, $v) = each %$substanceref) {
        if (exists $substance_color{$k}) {
            print &quot;Warning: $k seen twice.  Using the first definition.\n&quot;;
            next;
        }
        $substance_color{$k} = $v;
    }
}</PRE
><p class="para">In the special case of appending one hash to another, we can use the hash slice notation to give an elegant shorthand:</P
><pre class="programlisting">@all_colors{keys %new_colors} = values %new_colors;</PRE
><p class="para">This requires enough memory for lists of the keys and values of <code class="literal">%new_colors</CODE
>. As with the first technique, the memory requirement might make this technique infeasible when such lists would be large.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch05-pgfId-1086">See Also</A
></H3
><p class="para">This is a variation on <a class="xref" href="ch04_10.htm" title="Appending One Array to Another">Recipe 4.9</A
>; the <code class="literal">each</CODE
> function in <i class="filename">perlfunc </I
>(1) and in <a class="olink" href="../prog/ch03_01.htm">Chapter 3</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch05_10.htm" title="5.9. Sorting a Hash"><img src="../gifs/txtpreva.gif" alt="Previous: 5.9. Sorting a Hash" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch05_12.htm" title="5.11. Finding Common or Different Keys in Two Hashes"><img src="../gifs/txtnexta.gif" alt="Next: 5.11. Finding Common or Different Keys in Two Hashes" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">5.9. Sorting a Hash</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">5.11. Finding Common or Different Keys in Two Hashes</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
