<html><head>
<title>Recipe 6.15. Greedy and Non-Greedy Matches</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:34:35Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch06_01.htm" title="6. Pattern Matching"><link rel="prev" href="ch06_15.htm" title="6.14. Matching from Where the Last Pattern Left Off"><link rel="next" href="ch06_17.htm" title="6.16. Detecting Duplicate Words"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch06_15.htm" title="6.14. Matching from Where the Last Pattern Left Off"><img src="../gifs/txtpreva.gif" alt="Previous: 6.14. Matching from Where the Last Pattern Left Off" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch06_01.htm" title="6. Pattern Matching">Chapter 6<br>Pattern Matching</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch06_17.htm" title="6.16. Detecting Duplicate Words"><img src="../gifs/txtnexta.gif" alt="Next: 6.16. Detecting Duplicate Words" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch06-32931">6.15. Greedy and Non-Greedy Matches</A
></H2
><div class="sect2"><h3 class="sect2"><a class="title" name="ch06-pgfId-1695">Problem<a class="indexterm" name="ch06-idx-1000007660-0"></A
><a class="indexterm" name="ch06-idx-1000007660-1"></A
><a class="indexterm" name="ch06-idx-1000007660-2"></A
><a class="indexterm" name="ch06-idx-1000007660-3"></A
></A
></H3
><p class="para">You have a pattern with a greedy quantifier like <code class="literal">*</CODE
>, <code class="literal">+</CODE
>, <code class="literal">?</CODE
>, or <code class="literal">{}</CODE
>, and you want to stop it from being greedy.</P
><p class="para">A classic case of this is the na–ve substitution to remove tags from HTML. Although it looks appealing, <code class="literal">s#&lt;TT&gt;.*&lt;/TT&gt;##gsi</CODE
>, actually deletes everything from the first open <code class="literal">TT</CODE
> tag through the last closing one. This would turn <code class="literal">&quot;Even</CODE
> <code class="literal">&lt;TT&gt;vi&lt;/TT&gt;</CODE
> <code class="literal">can</CODE
> <code class="literal">edit</CODE
> <code class="literal">&lt;TT&gt;troff&lt;/TT&gt;</CODE
> <code class="literal">effectively.&quot;</CODE
> into <code class="literal">&quot;Even</CODE
> <code class="literal">effectively&quot;</CODE
>, completely changing the meaning of the sentence!</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch06-pgfId-1703">Solution</A
></H3
><p class="para">Replace the offending greedy quantifier with the corresponding non-greedy version. That is, change <code class="literal">*</CODE
>, <code class="literal">+</CODE
>, <code class="literal">?</CODE
>, and <code class="literal">{}</CODE
> into <code class="literal">*?</CODE
>, <code class="literal">+?</CODE
>, <code class="literal">??</CODE
>, and <code class="literal">{}?</CODE
>, respectively.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch06-pgfId-1709">Discussion</A
></H3
><p class="para"><a class="indexterm" name="ch06-idx-1000007677-0"></A
><a class="indexterm" name="ch06-idx-1000007677-1"></A
>Perl has two sets of quantifiers: the <em class="emphasis">maximal</EM
> ones <code class="literal">*</CODE
>, <code class="literal">+</CODE
>, <code class="literal">?</CODE
>, and <code class="literal">{}</CODE
> (sometimes called <em class="emphasis">greedy</EM
>) and the <em class="emphasis">minimal</EM
> ones <code class="literal">*?</CODE
>, <code class="literal">+?</CODE
>, <code class="literal">??</CODE
>, <code class="literal">and</CODE
> <code class="literal">{}?</CODE
> (sometimes called <em class="emphasis">stingy</EM
>). For instance, given the string <code class="literal">&quot;Perl</CODE
> <code class="literal">is</CODE
> <code class="literal">a</CODE
> <code class="literal">Swiss</CODE
> <code class="literal">Army</CODE
> <code class="literal">Chainsaw!&quot;</CODE
>, the pattern <code class="literal">/(r.*s)/</CODE
> matches <code class="literal">&quot;rl</CODE
> <code class="literal">is</CODE
> <code class="literal">a</CODE
> <code class="literal">Swiss</CODE
> <code class="literal">Army</CODE
> <code class="literal">Chains&quot;</CODE
> whereas <code class="literal">/(r.*?s)/</CODE
> matches <code class="literal">&quot;rl</CODE
> <code class="literal">is&quot;</CODE
>.</P
><p class="para">With maximal quantifiers, when you ask to match a variable number of times, such as zero or more times for <code class="literal">*</CODE
> or one or more times for <code class="literal">+</CODE
>, the matching engine prefers the "or more" portion of that description. Thus <code class="literal">/foo.*bar/</CODE
> matches from the first <code class="literal">&quot;foo&quot;</CODE
> up to the last <code class="literal">&quot;bar&quot;</CODE
> in the string, rather than merely the next <code class="literal">&quot;bar&quot;</CODE
>, as some might expect. To make any of the regular expression repetition operators prefer stingy matching over greedy matching, add an extra <code class="literal">? </CODE
>. So <code class="literal">*?</CODE
> matches zero or more times, but rather than match as much as it possibly can the way <code class="literal">*</CODE
> would, it matches as little as possible.</P
><pre class="programlisting"># greedy pattern
s/&lt;.*&gt;//gs;                     # try to remove tags, very badly

# non-greedy pattern
s/&lt;.*?&gt;//gs;                    # try to remove tags, still rather badly</PRE
><p class="para">This approach doesn't remove tags from all possible HTML correctly, because a single regular expression is not an acceptable replacement for a real parser. See <a class="xref" href="ch20_07.htm" title="Extracting or Removing HTML Tags">Recipe 20.6</A
> for the right way to do this.</P
><p class="para">Minimal matching isn't all it's cracked up to be. Don't fall into the trap of thinking that including the partial pattern <code class="literal">BEGIN.*?END</CODE
> in a pattern amidst other elements will always match the shortest amount of text between occurrences of <code class="literal">BEGIN</CODE
> and <code class="literal">END</CODE
>. Imagine the pattern <code class="literal">/BEGIN(.*?)END/</CODE
>. If matched against the string <code class="literal">&quot;BEGIN</CODE
> <code class="literal">and</CODE
> <code class="literal">BEGIN</CODE
> <code class="literal">and</CODE
> <code class="literal">END&quot;</CODE
>, <code class="literal">$1</CODE
> would contain <code class="literal">&quot;and</CODE
> <code class="literal">BEGIN</CODE
> <code class="literal">and&quot;</CODE
>. This is probably not what you want.</P
><p class="para">Imagine if we were trying to pull out everything between bold-italic pairs:</P
><pre class="programlisting">&lt;b&gt;&lt;i&gt;this&lt;/i&gt; and &lt;i&gt;that&lt;/i&gt; are important&lt;/b&gt; Oh, &lt;b&gt;&lt;i&gt;me too!&lt;/i&gt;&lt;/b&gt;</PRE
><p class="para">A pattern to find only text <em class="emphasis">between</EM
> bold-italic HTML pairs, that is, text that doesn't include them, might appear to be this one:</P
><pre class="programlisting">m{ &lt;b&gt;&lt;i&gt;(.*?)&lt;/i&gt;&lt;/b&gt; }sx</PRE
><p class="para">You might be surprised to learn that the pattern doesn't do that. Many people incorrectly understand this as matching a <code class="literal">&quot;&lt;b&gt;&lt;i&gt;&quot;</CODE
> sequence, then something that's not <code class="literal">&quot;&lt;b&gt;&lt;i&gt;&quot;</CODE
>, and then <code class="literal">&quot;&lt;/i&gt;&lt;/b&gt;&quot;</CODE
>, leaving the intervening text in <code class="literal">$1</CODE
>. While often it works out that way due to the input data, that's not really what it says. It just matches the shortest leftmost substring that satisfies the <em class="emphasis">entire pattern</EM
>. In this case, that's the entire string. If the intention were to extract only stuff between <code class="literal">&quot;&lt;b&gt;&lt;i&gt;&quot;</CODE
> and its corresponding <code class="literal">&quot;&lt;/i&gt;&lt;/b&gt;&quot;</CODE
>, with no other bold-italic tags in between, it would be incorrect.</P
><p class="para">If the string in question is just one character, a negated class is remarkably more efficient than a minimal match, as in <code class="literal">/X([^X]*)X/</CODE
>. But the general way to say "match BEGIN, then not BEGIN, then END" for any arbitrary values of BEGIN and END is as follows (this also stores the intervening part in <code class="literal">$1</CODE
>):</P
><pre class="programlisting">/BEGIN((?:(?!BEGIN).)*)END/</PRE
><p class="para">Applying this to the HTML-matching code, we end up with something like:</P
><pre class="programlisting">m{ &lt;b&gt;&lt;i&gt;(  (?: (?!&lt;/b&gt;|&lt;/i&gt;). )*  ) &lt;/i&gt;&lt;/b&gt; }sx</PRE
><p class="para">or perhaps:</P
><pre class="programlisting">m{ &lt;b&gt;&lt;i&gt;(  (?: (?!&lt;/[ib]&gt;). )*  ) &lt;/i&gt;&lt;/b&gt; }sx</PRE
><p class="para">Jeffrey Friedl points out that this quick-and-dirty method isn't particularly efficient. He suggests crafting a more elaborate pattern when speed really matters, such as:</P
><pre class="programlisting">m{
    &lt;b&gt;&lt;i&gt; 
    [^&lt;]*  # stuff not possibly bad, and not possibly the end.
    (?:
 # at this point, we can have '&lt;' if not part of something bad
     (?!  &lt;/?[ib]&gt;  )   # what we can't have
     &lt;                  # okay, so match the '&lt;'
     [^&lt;]*              # and continue with more safe stuff
    ) *
    &lt;/i&gt;&lt;/b&gt;
 }sx</PRE
><p class="para"><a class="indexterm" name="ch06-idx-1000007679-0"></A
><a class="indexterm" name="ch06-idx-1000007679-1"></A
>This is a variation on Jeffrey's unrolling-the-loop technique, described in Chapter 5 of <em class="emphasis">Mastering Regular Expressions</EM
>.<a class="indexterm" name="ch06-idx-1000007662-0"></A
><a class="indexterm" name="ch06-idx-1000007662-1"></A
><a class="indexterm" name="ch06-idx-1000007662-2"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch06-pgfId-1777">See Also</A
></H3
><p class="para">The non-greedy quantifiers in the "Regular Expressions" section of <i class="filename">perlre </I
>(1), and in the <a class="olink" href="../prog/ch02_04.htm#PERL2-CH-2-SECT-4.1.2">"the rules of regular expression matching"</A
> section of <a class="olink" href="../prog/ch02_01.htm">Chapter 2</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch06_15.htm" title="6.14. Matching from Where the Last Pattern Left Off"><img src="../gifs/txtpreva.gif" alt="Previous: 6.14. Matching from Where the Last Pattern Left Off" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch06_17.htm" title="6.16. Detecting Duplicate Words"><img src="../gifs/txtnexta.gif" alt="Next: 6.16. Detecting Duplicate Words" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">6.14. Matching from Where the Last Pattern Left Off</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">6.16. Detecting Duplicate Words</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
