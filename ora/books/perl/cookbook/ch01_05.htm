<html><head>
<title>Recipe 1.4. Converting Between ASCII Characters and Values</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:28:49Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch01_01.htm" title="1. Strings"><link rel="prev" href="ch01_04.htm" title="1.3. Exchanging Values Without Using Temporary Variables"><link rel="next" href="ch01_06.htm" title="1.5. Processing a String One Character at a Time"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name="srchmap"index.html><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch01_04.htm" title="1.3. Exchanging Values Without Using Temporary Variables"><img src="../gifs/txtpreva.gif" alt="Previous: 1.3. Exchanging Values Without Using Temporary Variables" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch01_01.htm" title="1. Strings">Chapter 1<br>Strings</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch01_06.htm" title="1.5. Processing a String One Character at a Time"><img src="../gifs/txtnexta.gif" alt="Next: 1.5. Processing a String One Character at a Time" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch01-42021">1.4. Converting Between ASCII Characters and Values</A
></H2
><div class="sect2"><h3 class="sect2"><a class="title" name="ch01-pgfId-449">Problem <a class="indexterm" name="ch01-idx-1000010195-0"></A
><a class="indexterm" name="ch01-idx-1000010195-1"></A
><a class="indexterm" name="ch01-idx-1000010195-2"></A
><a class="indexterm" name="ch01-idx-1000010195-3"></A
><a class="indexterm" name="ch01-idx-1000010195-4"></A
></A
></H3
><p class="para">You want to print out the number represented by a given ASCII character, or you want to print out an ASCII character given a number.<a class="indexterm" name="ch01-idx-1000010205-0"></A
><a class="indexterm" name="ch01-idx-1000010205-1"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch01-pgfId-455">Solution</A
></H3
><p class="para">Use <code class="literal">ord</CODE
> to convert a character to a number, or use <code class="literal">chr</CODE
> to convert a number to a character:</P
><pre class="programlisting">$num  = ord($char);
$char = chr($num);</PRE
><p class="para">The <code class="literal">%c</CODE
> format used in <code class="literal">printf</CODE
> and <code class="literal">sprintf</CODE
> also converts a number to a character:</P
><pre class="programlisting">$char = sprintf(&quot;%c&quot;, $num);                # slower than chr($num)
printf(&quot;Number %d is character %c\n&quot;, $num, $num);
<code class="userinput"><b><code class="replaceable"><i>Number 101 is character e</I
></CODE
></B
></CODE
></PRE
><p class="para">A <code class="literal">C*</CODE
> template used with <code class="literal">pack</CODE
> and <code class="literal">unpack</CODE
> can quickly convert many characters.</P
><pre class="programlisting">@ASCII = unpack(&quot;C*&quot;, $string);
$STRING = pack(&quot;C*&quot;, @ascii);</PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch01-pgfId-479">Discussion</A
></H3
><p class="para">Unlike low-level, typeless languages like assembler, Perl doesn't treat characters and numbers interchangeably; it treats <em class="emphasis">strings</EM
> and numbers interchangeably. That means you can't just assign characters and numbers back and forth. Perl provides Pascal's <code class="literal">chr</CODE
><a class="indexterm" name="ch01-idx-1000010206-0"></A
><a class="indexterm" name="ch01-idx-1000010206-1"></A
> and <code class="literal">ord</CODE
> to convert between a character and its corresponding ordinal value:</P
><pre class="programlisting">$ascii_value = ord(&quot;e&quot;);    # now 101
$character   = chr(101);    # now &quot;e&quot;</PRE
><p class="para">If you already have a character, it's really represented as a string of length one, so just print it out directly using <code class="literal">print</CODE
> or the <code class="literal">%s</CODE
> format in <code class="literal">printf</CODE
> and <code class="literal">sprintf</CODE
>. The <code class="literal">%c</CODE
><a class="indexterm" name="ch01-idx-1000010207-0"></A
><a class="indexterm" name="ch01-idx-1000010207-1"></A
><a class="indexterm" name="ch01-idx-1000010207-2"></A
> format forces <code class="literal">printf</CODE
> or <code class="literal">sprintf</CODE
> to convert a number into a character; it's not used for printing a character that's already in character format (that is, a string).</P
><pre class="programlisting">printf(&quot;Number %d is character %c\n&quot;, 101, 101);</PRE
><p class="para">The <code class="literal">pack</CODE
><a class="indexterm" name="ch01-idx-1000010208-0"></A
><a class="indexterm" name="ch01-idx-1000010208-1"></A
>, <code class="literal">unpack</CODE
>, <code class="literal">chr</CODE
>, and <code class="literal">ord</CODE
> functions are all faster than <code class="literal">sprintf</CODE
>. Here are <code class="literal">pack</CODE
> and <code class="literal">unpack</CODE
> in action:</P
><pre class="programlisting">@ascii_character_numbers = unpack(&quot;C*&quot;, &quot;sample&quot;);
print &quot;@ascii_character_numbers\n&quot;;
<code class="userinput"><b><code class="replaceable"><i>115 97 109 112 108 101</I
></CODE
></B
></CODE
>

$word = pack(&quot;C*&quot;, @ascii_character_numbers);
$word = pack(&quot;C*&quot;, 115, 97, 109, 112, 108, 101);   # same
print &quot;$word\n&quot;;
<code class="userinput"><b><code class="replaceable"><i>sample</I
></CODE
></B
></CODE
></PRE
><p class="para">Here's how to convert from HAL to IBM:</P
><pre class="programlisting">$hal = &quot;HAL&quot;;
@ascii = unpack(&quot;C*&quot;, $hal);
foreach $val (@ascii) {
    $val++;                 # add one to each ASCII value
}
$ibm = pack(&quot;C*&quot;, @ascii);
print &quot;$ibm\n&quot;;             # prints &quot;IBM&quot;</PRE
><p class="para">The <code class="literal">ord</CODE
> function can return numbers from 0 to 255. These correspond to C's <code class="literal">unsigned</CODE
> <code class="literal">char</CODE
> data type.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch01-pgfId-529">See Also</A
></H3
><p class="para">The <code class="literal">chr</CODE
>, <code class="literal">ord</CODE
>, <code class="literal">printf</CODE
>, <code class="literal">sprintf</CODE
>, <code class="literal">pack</CODE
>, and <code class="literal">unpack</CODE
> functions in <em class="emphasis">perlfunc </EM
>(1) and <a class="olink" href="../prog/ch03_01.htm">Chapter 3</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
><a class="indexterm" name="ch01-idx-1000010197-0"></A
><a class="indexterm" name="ch01-idx-1000010197-1"></A
><a class="indexterm" name="ch01-idx-1000010197-2"></A
><a class="indexterm" name="ch01-idx-1000010197-3"></A
><a class="indexterm" name="ch01-idx-1000010197-4"></A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch01_04.htm" title="1.3. Exchanging Values Without Using Temporary Variables"><img src="../gifs/txtpreva.gif" alt="Previous: 1.3. Exchanging Values Without Using Temporary Variables" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch01_06.htm" title="1.5. Processing a String One Character at a Time"><img src="../gifs/txtnexta.gif" alt="Next: 1.5. Processing a String One Character at a Time" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">1.3. Exchanging Values Without Using Temporary Variables</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">1.5. Processing a String One Character at a Time</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
