<html><head>
<title>Recipe 6.16. Detecting Duplicate Words</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:34:37Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch06_01.htm" title="6. Pattern Matching"><link rel="prev" href="ch06_16.htm" title="6.15. Greedy and Non-Greedy Matches"><link rel="next" href="ch06_18.htm" title="6.17. Expressing AND, OR, and NOT in a Single Pattern"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch06_16.htm" title="6.15. Greedy and Non-Greedy Matches"><img src="../gifs/txtpreva.gif" alt="Previous: 6.15. Greedy and Non-Greedy Matches" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch06_01.htm" title="6. Pattern Matching">Chapter 6<br>Pattern Matching</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch06_18.htm" title="6.17. Expressing AND, OR, and NOT in a Single Pattern"><img src="../gifs/txtnexta.gif" alt="Next: 6.17. Expressing AND, OR, and NOT in a Single Pattern" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch06-22880">6.16. Detecting Duplicate Words</A
></H2
><div class="sect2"><h3 class="sect2"><a class="title" name="ch06-pgfId-1787">Problem<a class="indexterm" name="ch06-idx-1000007683-0"></A
><a class="indexterm" name="ch06-idx-1000007683-1"></A
><a class="indexterm" name="ch06-idx-1000007683-2"></A
><a class="indexterm" name="ch06-idx-1000007683-3"></A
><a class="indexterm" name="ch06-idx-1000007683-4"></A
><a class="indexterm" name="ch06-idx-1000007683-5"></A
></A
></H3
><p class="para">You want to check for doubled words in a document.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch06-pgfId-1793">Solution</A
></H3
><p class="para">Use backreferences in your regular expression.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch06-pgfId-1799">Discussion</A
></H3
><p class="para">Parentheses in a pattern make the regular expression engine remember what matched that part of the pattern. Later in your pattern, you can refer to the actual string that matched with <code class="literal">\1</CODE
> (indicating the string matched by the first set of parentheses), <code class="literal">\2</CODE
> (for the second string matched by the second set of parentheses), and so on. Don't use <code class="literal">$1</CODE
>; it would be treated as a variable and interpolated before the match began. If you match <code class="literal">/([A-Z])\1/</CODE
>, that says to match a capital letter followed not just by any capital letter, but by whichever one was captured by the first set of parentheses in that pattern.</P
><p class="para">This sample code reads its input files by paragraph, with the definition of <i class="firstterm">paragraph</I
> following Perl's notion of two or more contiguous newlines. Within each paragraph, it finds all duplicate words. It ignores case and can match across newlines.</P
><p class="para">Here we use <code class="literal">/x</CODE
> to embed whitespace and comments to make the regular expression readable. <code class="literal">/i</CODE
> lets us match both instances of <code class="literal">&quot;is&quot;</CODE
> in the sentence <code class="literal">&quot;Is</CODE
> <code class="literal">is</CODE
> <code class="literal">this</CODE
> <code class="literal">ok?&quot;</CODE
>. We use <code class="literal">/g</CODE
> in a <code class="literal">while</CODE
> loop to keep finding duplicate words until we run out of text. Within the pattern, use <code class="literal">\b</CODE
> (word boundary) and <code class="literal">\s</CODE
> (whitespace) to help pick out whole words and avoid matching <code class="literal">&quot;This&quot;</CODE
>.</P
><pre class="programlisting">$/ = '';                      # paragrep mode
while (&lt;&gt;) {
    while ( m{
                \b            # start at a word boundary (begin letters)
                (\S+)         # find chunk of non-whitespace
                \b            # until another word boundary (end letters)
                (
                    \s+       # separated by some whitespace
                    \1        # and that very same chunk again
                    \b        # until another word boundary
                ) +           # one or more sets of those
             }xig
         )
    {
        print &quot;dup word '$1' at paragraph $.\n&quot;;
    }
}</PRE
><p class="para">That code finds the duplicated <i class="firstterm">test</I
> in the following paragraph:</P
><pre class="programlisting">This is a test
test of the duplicate word finder.</PRE
><p class="para">The use of a word boundary anchor surrounding <code class="literal">\S+</CODE
> is usually a bad idea because word boundaries are defined as transitions between alphanumunders (that's a <code class="literal">\w</CODE
>) and either the edge of the string or a non-alphanumunder. Surrounding it by <code class="literal">\b</CODE
> changes <code class="literal">\S+</CODE
> from its normal meaning of one or more non-whitespace characters to a stretch of non-whitespace whose first and last character must be an alphanumunder.</P
><p class="para">Here's another interesting demonstration of using backreferences. Imagine you had two words in which the end of the first word was the same as the start of the next one, such as <code class="literal">&quot;nobody&quot;</CODE
> and <code class="literal">&quot;bodysnatcher&quot;</CODE
>. You'd like to find that overlapping part and come up with <code class="literal">&quot;nobodysnatcher&quot;</CODE
>. This is just a variant on the duplicate word problem.</P
><p class="para">Conventional byte-by-byte processing the way a C programmer would write it would take a great deal of tricky code to solve this problem. But with a backtracking pattern matcher, it just takes one simple pattern match.</P
><pre class="programlisting">$a = 'nobody';
$b = 'bodysnatcher';
if (&quot;$a $b&quot; =~ /^(\w+)(\w+) \2(\w+)$/) {
    print &quot;$2 overlaps in $1-$2-$3\n&quot;;
}
<code class="userinput"><b><code class="replaceable"><i>body overlaps in no-body-snatcher</I
></CODE
></B
></CODE
></PRE
><p class="para">You might think that <code class="literal">$1</CODE
> would first grab up all of <code class="literal">&quot;nobody&quot;</CODE
> due to greediness. In fact, it does &nbsp;-  for a while. But once it's done so, there aren't any more characters to put in <code class="literal">$2</CODE
>. So the engine backs up and <code class="literal">$1</CODE
> begrudgingly gives up one character to <code class="literal">$2</CODE
>. The space character matches successfully, but then it sees <code class="literal">\2</CODE
>, which currently holds merely <code class="literal">&quot;y&quot;</CODE
>. The next character in the string is not a <code class="literal">&quot;y&quot;</CODE
>, but a <code class="literal">&quot;b&quot;</CODE
>. This makes the engine back up all the way, eventually forcing <code class="literal">$1</CODE
> to surrender enough to <code class="literal">$2</CODE
> that the pattern can match something, a space, then that same thing.</P
><p class="para">Actually, that won't quite work out if the overlap is itself the product of a doubling, as in <code class="literal">&quot;rococo&quot;</CODE
> and <code class="literal">&quot;cocoon&quot;</CODE
>. The preceding algorithm would have decided that the overlapping string, <code class="literal">$2</CODE
>, must be just <code class="literal">&quot;co&quot;</CODE
> rather than <code class="literal">&quot;coco&quot;</CODE
>. But we don't want a <code class="literal">&quot;rocococoon&quot;</CODE
>; we want a <code class="literal">&quot;rococoon&quot;</CODE
>. Adding a minimal matching quantifier to the <code class="literal">$1</CODE
> part gives the much better pattern:</P
><pre class="programlisting">/^(\w+?)(\w+) \2(\w+)$/, </PRE
><p class="para">which solves this problem.</P
><p class="para">Backtracking is more powerful than you imagine. <a class="xref" href="#ch06-26688" title="prime-pattern">Example 6.11</A
> offers another take on the prime factorization problem from <a class="xref" href="ch02_01.htm" title="Numbers">Chapter 2, <cite class="chapter">Numbers</CITE
></A
>.</P
><div class="example"><h4 class="example"><a class="title" name="ch06-26688">Example 6.11: prime-pattern</A
></H4
><pre class="programlisting">#!/usr/bin/perl
# <a class="indexterm" name="ch06-idx-1000007808-0"></A
>prime_pattern -- find prime factors of argument using pattern matching
for ($N = ('o' x shift); $N =~ /^(oo+?)\1+$/; $N =~ s/$1/o/g) {
    print length($1), &quot; &quot;;
}
print length ($N), &quot;\n&quot;;</PRE
></DIV
><p class="para">Although not practical, this approach marvelously demonstrates the power of backtracking and is therefore very instructional.</P
><p class="para">Here's another example. Using a brilliant insight first illustrated by Doug McIlroy (or so says Andrew Hume), you can find solutions to Diophantine equations of order one with regular expressions. Consider the equation <code class="literal">12x</CODE
> <code class="literal">+</CODE
> <code class="literal">15y</CODE
> <code class="literal">+</CODE
> <code class="literal">16z</CODE
> <code class="literal">=</CODE
> <code class="literal">281</CODE
>. Can you think of possible values for <em class="emphasis">x</EM
>, <em class="emphasis">y</EM
>, and <em class="emphasis">z  </EM
>? Perl can!</P
><pre class="programlisting"># solve for 12x + 15y + 16z = 281, maximizing x
if (($X, $Y, $Z)  =
   (('o' x 281)  =~ /^(o*)\1{11}(o*)\2{14}(o*)\3{15}$/))
{
    ($x, $y, $z) = (length($X), length($Y), length($Z));
    print &quot;One solution is: x=$x; y=$y; z=$z.\n&quot;;
} else {
    print &quot;No solution.\n&quot;;
}
<code class="userinput"><b><code class="replaceable"><i>One solution is: x=17; y=3; z=2.</I
></CODE
></B
></CODE
></PRE
><p class="para">Because the first <code class="literal">o*</CODE
> was greedy, <em class="emphasis">x</EM
> was allowed to grow as large as it could. Changing one or more of the <code class="literal">*</CODE
> quantifiers to <code class="literal">*?</CODE
>, <code class="literal">+</CODE
>, or <code class="literal">+?</CODE
> can produce different solutions.</P
><pre class="programlisting">('o' x 281)  =~ /^(o+)\1{11}(o+)\2{14}(o+)\3{15}$/
<code class="userinput"><b><code class="replaceable"><i>One solution is: x=17; y=3; z=2</I
></CODE
></B
></CODE
>
('o' x 281)  =~ /^(o*?)\1{11}(o*)\2{14}(o*)\3{15}$/
<code class="userinput"><b><code class="replaceable"><i>One solution is: x=0; y=7; z=11.</I
></CODE
></B
></CODE
>
('o' x 281)  =~ /^(o+?)\1{11}(o*)\2{14}(o*)\3{15}$/
<code class="userinput"><b><code class="replaceable"><i>One solution is: x=1; y=3; z=14.</I
></CODE
></B
></CODE
></PRE
><p class="para">An important lesson to be learned from these amazing feats of mathematical prowess by a lowly pattern matcher is that a pattern matching engine, particularly a backtracking one, very much wants to give you an answer and will work phenomenally hard to do so. But solving a regular expression with backreferences can take time exponentially proportional to the length of the input to complete. For all but trivial inputs, such algorithms make continental drift seem brisk.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch06-pgfId-1000007124">See Also</A
></H3
><p class="para">The explanation of backreferences in the "Regular Expressions" section of <i class="filename">perlre </I
>(1), and in <a class="olink" href="../prog/ch02_04.htm#PERL2-CH-2-SECT-4.1.2">"the fine print"</A
> section of <a class="olink" href="../prog/ch02_01.htm">Chapter 2</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
>; the "The Doubled-Word Thing" section in Chapter 2 of <cite class="citetitle">Mastering Regular Expressions</CITE
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch06_16.htm" title="6.15. Greedy and Non-Greedy Matches"><img src="../gifs/txtpreva.gif" alt="Previous: 6.15. Greedy and Non-Greedy Matches" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch06_18.htm" title="6.17. Expressing AND, OR, and NOT in a Single Pattern"><img src="../gifs/txtnexta.gif" alt="Next: 6.17. Expressing AND, OR, and NOT in a Single Pattern" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">6.15. Greedy and Non-Greedy Matches</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">6.17. Expressing AND, OR, and NOT in a Single Pattern</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
