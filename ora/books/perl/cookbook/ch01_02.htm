<html><head>
<title>Recipe 1.1. Accessing Substrings</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:28:42Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch01_01.htm" title="1. Strings"><link rel="prev" href="ch01_01.htm" title="1.0. Introduction"><link rel="next" href="ch01_03.htm" title="1.2. Establishing a Default Value"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch01_01.htm" title="1.0. Introduction"><img src="../gifs/txtpreva.gif" alt="Previous: 1.0. Introduction" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch01_01.htm" title="1. Strings">Chapter 1<br>Strings</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch01_03.htm" title="1.2. Establishing a Default Value"><img src="../gifs/txtnexta.gif" alt="Next: 1.2. Establishing a Default Value" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch01-11736">1.1. Accessing Substrings</A
></H2
><div class="sect2"><h3 class="sect2"><a class="title" name="ch01-pgfId-99">Problem<a class="indexterm" name="ch01-idx-1000010134-0"></A
><a class="indexterm" name="ch01-idx-1000010134-1"></A
></A
></H3
><p class="para">You want to access or modify just a portion of a string, not the whole thing. For instance, you've read a fixed-width record and want to extract the individual fields.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch01-pgfId-105">Solution</A
></H3
><p class="para">The <code class="literal">substr</CODE
><a class="indexterm" name="ch01-idx-1000010135-0"></A
> function lets you read from and write to bits of the string.</P
><pre class="programlisting">$value = substr($string, $offset, $count);
$value = substr($string, $offset);
    
substr($string, $offset, $count) = $newstring;
substr($string, $offset)         = $newtail;</PRE
><p class="para">The <code class="literal">unpack</CODE
><a class="indexterm" name="ch01-idx-1000010136-0"></A
> function gives only read access, but is faster when you have many substrings to extract.</P
><pre class="programlisting"># get a 5-byte string, skip 3, then grab 2 8-byte strings, then the rest
($leading, $s1, $s2, $trailing) =
    unpack(&quot;A5 x3 A8 A8 A*&quot;, $data);

# split at five byte boundaries
@fivers = unpack(&quot;A5&quot; x (length($string)/5), $string);

# chop string into individual characters
@chars  = unpack(&quot;A1&quot; x length($string), $string);</PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch01-pgfId-141">Discussion</A
></H3
><p class="para">Unlike many other languages that represent strings as arrays of bytes (or characters), in Perl, strings are a basic data type. This means that you must use functions like <code class="literal">unpack</CODE
> or <code class="literal">substr</CODE
> to access individual characters or a portion of the string.</P
><p class="para">The offset argument to <code class="literal">substr</CODE
> indicates the start of the substring you're interested in, counting from the front if positive and from the end if negative. If offset is 0, the substring starts at the beginning. The count argument is the length of the substring.</P
><pre class="programlisting">$string = &quot;This is what you have&quot;;
#         +012345678901234567890  Indexing forwards  (left to right)
#          109876543210987654321- Indexing backwards (right to left)
#           note that 0 means 10 or 20, etc. above

$first  = substr($string, 0, 1);  # &quot;T&quot;
$start  = substr($string, 5, 2);  # &quot;is&quot;
$rest   = substr($string, 13);    # &quot;you have&quot;
$last   = substr($string, -1);    # &quot;e&quot;
$end    = substr($string, -4);    # &quot;have&quot;
$piece  = substr($string, -8, 3); # &quot;you&quot;</PRE
><p class="para">You can do more than just look at parts of the string with <code class="literal">substr</CODE
>; you can actually change them. That's because <code class="literal">substr</CODE
> is a particularly odd kind of function &nbsp;- an <em class="emphasis">lvaluable</EM
><a class="indexterm" name="ch01-idx-1000010151-0"></A
> one, that is, a function that may itself be assigned a value. (For the record, the others are <code class="literal">vec</CODE
>, <code class="literal">pos</CODE
>, and as of the 5.004 release, <code class="literal">keys</CODE
>. If you squint, <code class="literal">local</CODE
> and <code class="literal">my</CODE
> can also be viewed as lvaluable functions.)</P
><pre class="programlisting">$string = &quot;This is what you have&quot;;
print $string;
<code class="userinput"><b><code class="replaceable"><i>This is what you have</I
></CODE
></B
></CODE
>
substr($string, 5, 2) = &quot;wasn't&quot;; # change &quot;is&quot; to &quot;wasn't&quot;
<code class="userinput"><b><code class="replaceable"><i>This wasn't what you have</I
></CODE
></B
></CODE
>
substr($string, -12)  = &quot;ondrous&quot;;# &quot;This wasn't wondrous&quot;
<code class="userinput"><b><code class="replaceable"><i>This wasn't wondrous</I
></CODE
></B
></CODE
>
substr($string, 0, 1) = &quot;&quot;;       # delete first character
<code class="userinput"><b><code class="replaceable"><i>his wasn't wondrous</I
></CODE
></B
></CODE
>
substr($string, -10)  = &quot;&quot;;       # delete last 10 characters
<code class="userinput"><b><code class="replaceable"><i>his wasn'</I
></CODE
></B
></CODE
></PRE
><p class="para">You can use the <code class="literal">=~</CODE
><a class="indexterm" name="ch01-idx-1000010150-0"></A
><a class="indexterm" name="ch01-idx-1000010150-1"></A
><a class="indexterm" name="ch01-idx-1000010150-2"></A
><a class="indexterm" name="ch01-idx-1000010150-3"></A
> operator and the <code class="literal">s///</CODE
>, <code class="literal">m//</CODE
>, or <code class="literal">tr///</CODE
> operators in conjunction with substr to make them affect only that portion of the string.</P
><pre class="programlisting"># you can test substrings with =~
if (substr($string, -10) =~ /pattern/) {
    print &quot;Pattern matches in last 10 characters\n&quot;;
}

# substitute &quot;at&quot; for &quot;is&quot;, restricted to first five characters
substr($string, 0, 5) =~ s/is/at/g;</PRE
><p class="para">You can even swap values by using several <code class="literal">substr</CODE
>s on each side of an assignment:</P
><pre class="programlisting"># exchange the first and last letters in a string
$a = &quot;make a hat&quot;;
(substr($a,0,1), substr($a,-1)) = (substr($a,-1), substr($a,0,1));
print $a;
<code class="userinput"><b><code class="replaceable"><i>take a ham</I
></CODE
></B
></CODE
></PRE
><p class="para">Although <code class="literal">unpack</CODE
> is not lvaluable, it is considerably faster than <code class="literal">substr</CODE
> when you extract numerous values at once. It doesn't directly support offsets as <code class="literal">substr</CODE
> does. Instead, it uses lowercase &quot;<code class="literal">x</CODE
>&quot; with a count to skip forward some number of bytes and an uppercase &quot;<code class="literal">X</CODE
>&quot; with a count to skip backward some number of bytes.</P
><pre class="programlisting"># extract column with unpack
$a = &quot;To be or not to be&quot;;
$b = unpack(&quot;x6 A6&quot;, $a);  # skip 6, grab 6
print $b;
<code class="userinput"><b><code class="replaceable"><i>or not</I
></CODE
></B
></CODE
>

($b, $c) = unpack(&quot;x6 A2 X5 A2&quot;, $a); # forward 6, grab 2; backward 5, grab 2
print &quot;$b\n$c\n&quot;;
<code class="userinput"><b><code class="replaceable"><i>or</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>be</I
></CODE
></B
></CODE
></PRE
><p class="para">Sometimes you prefer to think of your data as being cut up at specific <a class="indexterm" name="ch01-idx-1000010152-0"></A
>columns. For example, you might want to place cuts right before positions 8, 14, 20, 26, and 30. Those are the column numbers where each field begins. Although you could calculate that the proper <code class="literal">unpack</CODE
> format is &quot;<code class="literal">A7</CODE
> <code class="literal">A6</CODE
> <code class="literal">A6</CODE
> <code class="literal">A6</CODE
> <code class="literal">A4</CODE
> <code class="literal">A*</CODE
>&quot;, this is too much mental strain for the virtuously lazy Perl programmer. Let Perl figure it out for you. Use the <code class="literal">cut2fmt</CODE
> function below:</P
><pre class="programlisting">sub cut2fmt {
    my(@positions) = @_;
    my $template   = '';
    my $lastpos    = 1;
    foreach $place (@positions) {
        $template .= &quot;A&quot; . ($place - $lastpos) . &quot; &quot;;
        $lastpos   = $place;
    }
    $template .= &quot;A*&quot;;
    return $template;
}

$fmt = cut2fmt(8, 14, 20, 26, 30);
print &quot;$fmt\n&quot;;
<code class="userinput"><b><code class="replaceable"><i>A7 A6 A6 A6 A4 A*</I
></CODE
></B
></CODE
></PRE
><p class="para">The powerful <code class="literal">unpack</CODE
> function goes far beyond mere text processing. It's the gateway between text and binary data.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch01-pgfId-279">See Also</A
></H3
><p class="para">The <code class="literal">unpack</CODE
> and <code class="literal">substr</CODE
> functions in <em class="emphasis">perlfunc </EM
>(1) and <a class="olink" href="../prog/ch03_01.htm">Chapter 3</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
>; the <em class="emphasis">cut2fmt</EM
> subroutine of <a class="xref" href="ch01_19.htm" title="Program: psgrep">Recipe 1.18</A
>; the binary use of <code class="literal">unpack</CODE
> in <a class="xref" href="ch08_19.htm" title="Program: tailwtmp">Recipe 8.18</A
> <a class="indexterm" name="ch01-idx-1000010145-0"></A
><a class="indexterm" name="ch01-idx-1000010145-1"></A
><a class="indexterm" name="ch01-idx-1000010145-2"></A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch01_01.htm" title="1.0. Introduction"><img src="../gifs/txtpreva.gif" alt="Previous: 1.0. Introduction" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch01_03.htm" title="1.2. Establishing a Default Value"><img src="../gifs/txtnexta.gif" alt="Next: 1.2. Establishing a Default Value" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">1.0. Introduction</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">1.2. Establishing a Default Value</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
