<html><head>
<title>Recipe 18.1. Simple DNS Lookups</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:44:58Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch18_01.htm" title="18. Internet Services"><link rel="prev" href="ch18_01.htm" title="18.0. Introduction"><link rel="next" href="ch18_03.htm" title="18.2. Being an FTP Client"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch18_01.htm" title="18.0. Introduction"><img src="../gifs/txtpreva.gif" alt="Previous: 18.0. Introduction" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch18_01.htm" title="18. Internet Services">Chapter 18<br>Internet Services</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch18_03.htm" title="18.2. Being an FTP Client"><img src="../gifs/txtnexta.gif" alt="Next: 18.2. Being an FTP Client" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch18-chap18_simple_0">18.1. Simple DNS Lookups</A
></H2
><div class="sect2"><h3 class="sect2"><a class="title" name="ch18-pgfId-79">Problem<a class="indexterm" name="ch18-idx-1000004277-0"></A
><a class="indexterm" name="ch18-idx-1000004277-1"></A
><a class="indexterm" name="ch18-idx-1000004277-2"></A
></A
></H3
><p class="para">You want to find the IP address of a host or turn an IP address into a name. Network servers do this to authenticate their clients, and clients do it when the user gives them a hostname but Perl's socket library requires an IP address. Furthermore, many servers produce log files containing IP addresses, but hostnames are more useful to analysis software and humans.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch18-pgfId-85">Solution</A
></H3
><p class="para">If you have a name like <code class="literal">www.perl.com</CODE
>, use <code class="literal">gethostbyname</CODE
> if you want all the addresses:</P
><pre class="programlisting">use Socket;

@addresses = gethostbyname($name)   or die &quot;Can't resolve $name: $!\n&quot;;
@addresses = map { inet_ntoa($_) } @addresses[4 .. $#addresses];
# @addresses is a list of IP addresses (&quot;208.201.239.48&quot;, &quot;208.201.239.49&quot;)</PRE
><p class="para">Or, use <code class="literal">inet_aton</CODE
> if you only need the first:</P
><pre class="programlisting">use Socket;

$address = inet_ntoa(inet_aton($name));
# $address is a single IP address &quot;208.201.239.48&quot;</PRE
><p class="para">If you have an IP address like <code class="literal">&quot;208.201.239.48&quot;</CODE
>, use:</P
><pre class="programlisting">use Socket;

$name = gethostbyaddr(inet_aton($address), AF_INET)
            or die &quot;Can't resolve $address: $!\n&quot;;
# $name is the hostname (&quot;www.perl.com&quot;)</PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch18-pgfId-123">Discussion</A
></H3
><p class="para">This process is complicated because the functions are mere wrappers for the C system calls, so this means you have to convert IP addresses from ASCII strings (<code class="literal">&quot;208.146.240.1&quot;</CODE
>) into their C structures. The standard Socket module gives you <code class="literal">inet_aton</CODE
> to convert from ASCII to the packed numeric format and <code class="literal">inet_ntoa</CODE
> to convert back:</P
><pre class="programlisting">use Socket;
$packed_address = inet_aton(&quot;208.146.140.1&quot;);
$ascii_address  = inet_ntoa($packed_address);</PRE
><p class="para">The <code class="literal">gethostbyname</CODE
> function takes a string containing the hostname (or IP address). In scalar context, it returns the IP address of the remote host suitable for passing to <code class="literal">inet_ntoa</CODE
> (or <code class="literal">undef</CODE
> on error). In list context, it returns a list of at least five elements (or an empty list in case of error). The returned list is:</P
><table class="informaltable" border="1" cellpadding="3"><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1"><p class="para">Index</P
></TH
><th class="entry" align="LEFT" rowspan="1" colspan="1"><p class="para">Meaning</P
></TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">0</CODE
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Official name of host</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">1</CODE
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Aliases (space-separated string)</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">2</CODE
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Address Type (normally AF_INET)</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">3</CODE
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Length of Address Structure (irrelevant)</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">4,5, ...</CODE
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Address Structures</P
></TD
></TR
></TBODY
></TABLE
><p class="para">A hostname may have more than one address, particularly busy web sites, where many machines serve identical web pages to share the load. In such situations, the DNS server that provides you the addresses rotates them to balance the load. If you need to pick an IP address to connect to, it is sufficient to always select the first (but if it doesn't work, try the rest as well):</P
><pre class="programlisting">$packed = gethostbyname($hostname)
            or die &quot;Couldn't resolve address for $hostname: $!\n&quot;;
$address = inet_ntoa($packed);
print &quot;I will use $address as the address for $hostname\n&quot;;</PRE
><p class="para">If you're using hostnames to permit or refuse access to a service, be careful. Anyone can set their DNS server to identify their machine as <code class="literal">www.whitehouse.gov</CODE
>, <code class="literal">www.yahoo.com </CODE
>, or <code class="literal">this.is.not.funny</CODE
>. You can't know whether the machine really has the name it claims to have until you use <code class="literal">gethostbyname</CODE
> and check that the original address is in the address list for the name.</P
><pre class="programlisting"># $address is the IP address I'm checking, like &quot;128.138.243.20&quot;
use Socket;
$name    = gethostbyaddr(inet_aton($address), AF_INET)
                or die &quot;Can't look up $address : $!\n&quot;;
@addr    = gethostbyname($name)
                or die &quot;Can't look up $name : $!\n&quot;;
$found   = grep { $address eq inet_ntoa($_) } @addr[4..$#addr];</PRE
><p class="para">It turns out that even with this algorithm, you can't be absolutely sure of the name due to a variety of methods that can be used to circumvent even this technique. Even the IP address from which the packets appear to be coming can be spoofed, so you shouldn't ever rely on the network layer for authentication. Always do authentication yourself (with passwords, or cryptographic challenges) when it really matters, because the IPv4 network was not designed to provide security.</P
><p class="para">More information is kept about a host than just addresses and aliases. To fully access this information, use the Net::DNS module from CPAN. For instance, <a class="xref" href="#ch18-15726" title="mxhost">Example 18.1</A
> shows how to retrieve the MX (mail exchange) records for an arbitrary host.</P
><div class="example"><h4 class="example"><a class="title" name="ch18-15726">Example 18.1: mxhost</A
></H4
><pre class="programlisting"> #!/usr/bin/perl
 # mxhost - find mx exchangers for a host
 use Net::DNS;

 $host = shift;
 $res = Net::DNS::Resolver-&gt;<code class="literal">new</CODE
><code class="replaceable"><i>()</I
></CODE
>;
 @mx = mx($res, $host)
    or die &quot;Can't find MX records for $host (&quot;.$res-&gt;errorstring.&quot;)\n&quot;;

 foreach $record (@mx) {
     print $record-&gt;preference, &quot; &quot;, $record-&gt;exchange, &quot;\n&quot;;
 }</PRE
></DIV
><p class="para">Here's some output:</P
><pre class="programlisting">% mxhost cnn.com
<code class="userinput"><b><code class="replaceable"><i>10 mail.turner.com</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>30 alfw2.turner.com</I
></CODE
></B
></CODE
></PRE
><p class="para">The <code class="literal">inet_aton</CODE
> function takes a string containing a hostname or IP address, as does <code class="literal">gethostbyname</CODE
>, but it only returns the first IP address for the host. If you want to find them all, you'll need to add some more code. The Net::hostent provides for by-name access that will let you do that. <a class="xref" href="#ch18-18854" title="hostaddrs">Example 18.2</A
> shows an example of its use.</P
><div class="example"><h4 class="example"><a class="title" name="ch18-18854">Example 18.2: hostaddrs</A
></H4
><pre class="programlisting">#!/usr/bin/perl
# hostaddrs - canonize name and show addresses
use Socket;
use Net::hostent;
$name = shift;
if ($hent = gethostbyname($name)) {
    $name      = $hent-&gt;name;                # in case different
    $addr_ref  = $hent-&gt;addr_list;
    @addresses = map { inet_ntoa($_) } @$addr_ref;
}
print &quot;$name =&gt; @addresses\n&quot;;</PRE
></DIV
><p class="para">Here's the output:</P
><pre class="programlisting">% hostaddrs www.ora.com
<code class="userinput"><b>helio.ora.com =&gt; 204.148.40.9</B
></CODE
>

% hostaddrs www.whitehouse.gov
<code class="userinput"><b>www.whitehouse.gov =&gt; 198.137.240.91 198.137.240.92</B
></CODE
><a class="indexterm" name="ch18-idx-1000004279-0"></A
><a class="indexterm" name="ch18-idx-1000004279-1"></A
><a class="indexterm" name="ch18-idx-1000004279-2"></A
></PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch18-pgfId-245">See Also</A
></H3
><p class="para">The <code class="literal">gethostbyname</CODE
> and <code class="literal">gethostbyaddr</CODE
> functions in <a class="olink" href="../prog/ch03_01.htm">Chapter 3</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
> and in <i class="filename">perlfunc </I
>(1); the documentation for the Net::DNS module from CPAN; the documentation for the standard Socket and Net::hostent modules</P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch18_01.htm" title="18.0. Introduction"><img src="../gifs/txtpreva.gif" alt="Previous: 18.0. Introduction" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch18_03.htm" title="18.2. Being an FTP Client"><img src="../gifs/txtnexta.gif" alt="Next: 18.2. Being an FTP Client" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">18.0. Introduction</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">18.2. Being an FTP Client</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
