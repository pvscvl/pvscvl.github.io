<html><head>
<title>Recipe 4.12. Finding the First List Element That Passes a Test</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:31:58Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch04_01.htm" title="4. Arrays"><link rel="prev" href="ch04_12.htm" title="4.11. Processing Multiple Elements of an Array"><link rel="next" href="ch04_14.htm" title="4.13. Finding All Elements in an Array Matching Certain Criteria"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name="srchmap"index.html><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch04_12.htm" title="4.11. Processing Multiple Elements of an Array"><img src="../gifs/txtpreva.gif" alt="Previous: 4.11. Processing Multiple Elements of an Array" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch04_01.htm" title="4. Arrays">Chapter 4<br>Arrays</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch04_14.htm" title="4.13. Finding All Elements in an Array Matching Certain Criteria"><img src="../gifs/txtnexta.gif" alt="Next: 4.13. Finding All Elements in an Array Matching Certain Criteria" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch04-20097">4.12. Finding the First List Element That Passes a Test</A
></H2
><div class="sect2"><h3 class="sect2"><a class="title" name="ch04-pgfId-1011">Problem <a class="indexterm" name="ch04-idx-1000006718-0"></A
><a class="indexterm" name="ch04-idx-1000006718-1"></A
></A
></H3
><p class="para">You want the first element in the list (or its index) that passes a test. Alternatively, you want to know whether any element passes the test. The test can be simple identity ("Is this element in the list?")[<a class="footnote" href="#ch04-pgfId-1000000590">1</A
>] or more complex ("I have a list of Employee objects, sorted from highest salary to lowest. Which manager has the highest salary?"). Simple cases normally only require the value of the element, but when the array itself will be altered, you probably need to know the index number of the first matching element.</P
><blockquote class="footnote"><div class="footnote"><p class="para"><a class="footnote" name="ch04-pgfId-1000000590">[1]</A
> But why didn't you use a hash then?</P
></DIV
></BLOCKQUOTE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch04-pgfId-1017">Solution</A
></H3
><p class="para">To find a matching value, use <code class="literal">foreach</CODE
> to loop over every element, and call <code class="literal">last</CODE
><a class="indexterm" name="ch04-idx-1000006731-0"></A
><a class="indexterm" name="ch04-idx-1000006731-1"></A
> as soon as you find a match:</P
><pre class="programlisting">my($match, $found, $item);
foreach $item (@array) {
    if ($criterion) {
        $match = $item;  # must save
        $found = 1;
        last;
    }
}
if ($found) {
    ## do something with $match
} else {
    ## unfound
}</PRE
><p class="para">To find a matching index, use <code class="literal">for</CODE
> to loop a variable over every array index, and call <code class="literal">last</CODE
> as soon as you find a match:</P
><pre class="programlisting">my($i, $match_idx);
for ($i = 0; $i &lt; @array; $i++) {
    if ($criterion) {
        $match_idx = $i;    # save the index
        last;
    }
}

if (defined $match_idx) {
    ## found in $array[$match_idx]
} else {
    ## unfound
}</PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch04-pgfId-1077">Discussion</A
></H3
><p class="para">Not having a built-in mechanism to do this, we must write our own code to go through the list and test each element. We use <code class="literal">foreach</CODE
> and <code class="literal">for</CODE
> and call <code class="literal">last</CODE
> to ensure that we stop as soon as we find a match. Before we use <code class="literal">last</CODE
> to stop looking, though, we save the value or index.</P
><p class="para">A common mistake is to try to use <code class="literal">grep</CODE
> here. The problem is that <code class="literal">grep</CODE
> always tests all elements and finds all matches, so it's inefficient if you only want the first match.</P
><p class="para">We have to set <code class="literal">$match</CODE
> when we want the value of the first matching element. We can't just test <code class="literal">$item</CODE
> at the end of the loop, because <code class="literal">foreach</CODE
> automatically <code class="literal">local</CODE
>izes the iterator variable and this prevents us from getting to its last loop value after the loop ends. See <a class="xref" href="ch04_05.htm" title="Doing Something with Every Element in a List">Recipe 4.4</A
>.</P
><p class="para">Here's an example. Assume that <code class="literal">@employees</CODE
> has a list of Employee objects, sorted in descending order by salary. We wish to find out the highest paid engineer, who will be the first engineer in the array. We only want to print the engineer's name, so we want the value, not the index.</P
><pre class="programlisting">foreach $employee (@employees) {
    if ( $employee-&gt;category() eq 'engineer' ) {
        $highest_engineer = $employee;
        last;
    }
}
print &quot;Highest paid engineer is: &quot;, $highest_engineer-&gt;name(), &quot;\n&quot;;</PRE
><p class="para">When we're searching and only want the index, we can save some code by remembering that <code class="literal">$i</CODE
> will not be an acceptable array index if we don't find a match. This mainly saves us code space, as not doing an assignment doesn't really win us much compared to the time we'll have spent testing the list elements. It's more obscure, because it tests <code class="literal">if</CODE
> <code class="literal">($i</CODE
> <code class="literal">&lt;</CODE
> <code class="literal">@ARRAY)</CODE
> to check whether we found a match, instead of the more obvious <code class="literal">defined</CODE
> test as in the previous Solution.</P
><pre class="programlisting">for ($i = 0; $i &lt; @ARRAY; $i++) {
    last if $criterion;
}
if ($i &lt; @ARRAY) {
    ## found and $i is the index
} else {
    ## not found
}</PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch04-pgfId-1121">See Also</A
></H3
><p class="para">The "For Loops," "Foreach Loops," and "Loop Control" sections of <i class="filename">perlsyn </I
>(1) and <a class="olink" href="../prog/ch02_01.htm">Chapter 2</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
>; the <code class="literal">grep</CODE
> function in <i class="filename">perlfunc </I
>(1) and <a class="olink" href="../prog/ch03_01.htm">Chapter 3</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
><a class="indexterm" name="ch04-idx-1000006727-0"></A
><a class="indexterm" name="ch04-idx-1000006727-1"></A
><a class="indexterm" name="ch04-idx-1000006727-2"></A
><a class="indexterm" name="ch04-idx-1000006727-3"></A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch04_12.htm" title="4.11. Processing Multiple Elements of an Array"><img src="../gifs/txtpreva.gif" alt="Previous: 4.11. Processing Multiple Elements of an Array" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch04_14.htm" title="4.13. Finding All Elements in an Array Matching Certain Criteria"><img src="../gifs/txtnexta.gif" alt="Next: 4.13. Finding All Elements in an Array Matching Certain Criteria" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">4.11. Processing Multiple Elements of an Array</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">4.13. Finding All Elements in an Array Matching Certain Criteria</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
