<html><head>
<title>Recipe 10.11. Prototyping Functions</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:39:58Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch10_01.htm" title="10. Subroutines"><link rel="prev" href="ch10_11.htm" title="10.10. Returning Failure"><link rel="next" href="ch10_13.htm" title="10.12. Handling Exceptions"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch10_11.htm" title="10.10. Returning Failure"><img src="../gifs/txtpreva.gif" alt="Previous: 10.10. Returning Failure" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch10_01.htm" title="10. Subroutines">Chapter 10<br>Subroutines</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch10_13.htm" title="10.12. Handling Exceptions"><img src="../gifs/txtnexta.gif" alt="Next: 10.12. Handling Exceptions" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch10-24993">10.11. Prototyping Functions</A
></H2
><div class="sect2"><h3 class="sect2"><a class="title" name="ch10-pgfId-1000005166">Problem<a class="indexterm" name="ch10-idx-1000005165-0"></A
><a class="indexterm" name="ch10-idx-1000005165-1"></A
></A
></H3
><p class="para">You want to use function prototypes so the compiler can check your argument types.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch10-pgfId-818">Solution</A
></H3
><p class="para">Perl has something of a prototype facility, but it isn't what you're thinking. Perl's function prototypes are more like a context coercion used to write functions that behave like some of Perl's built-ins, such as <code class="literal">push</CODE
> and <code class="literal">pop</CODE
>.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch10-pgfId-824">Discussion</A
></H3
><p class="para"><a class="indexterm" name="ch10-idx-1000004719-0"></A
>Manually checking the validity of a function's arguments can't happen until run-time. If you make sure the function is declared before it is used, you can tickle the compiler into using a very limited form of prototype checking to help you here. Don't confuse Perl's function prototypes with those found in any other language. Perl prototypes serve only to emulate the behavior of built-in functions.</P
><p class="para">A Perl function prototype is zero or more spaces, backslashes, or type characters enclosed in parentheses after the subroutine definition or name. A backslashed type symbol means that the argument is passed by reference, and the argument in that position must start with that type character.</P
><p class="para">A prototype forces context on the arguments to the prototyped function call. This is done when Perl compiles your program, and in most cases this does not necessarily mean that Perl checks the number or type of the arguments to your function. If Perl sees <code class="literal">func(3,</CODE
> <code class="literal">5)</CODE
> for a function prototyped as <code class="literal">sub</CODE
> <code class="literal">func</CODE
> <code class="literal">($)</CODE
>, it will stop with a compile-time error. But if it sees <code class="literal">func(@array)</CODE
> with the same prototype, it will merely put <code class="literal">@array</CODE
> into scalar context instead of saying "you can't pass an array&nbsp;- I'm expecting a scalar."</P
><p class="para">This is so important that it bears repeating: don't use Perl prototypes expecting the compiler to check type and number of arguments for you.</P
><p class="para">So what use are they? They have two main uses, although as you experiment with them you may find others. The first use is to tell Perl how many arguments your subroutine has, so you can leave off parentheses when you call the function. The second is to create a subroutine that has the same calling syntax as a built-in.</P
><div class="sect3"><h4 class="sect3"><a class="title" name="ch10-pgfId-1000005376">Omitting parentheses</A
></H4
><p class="para">Ordinarily your subroutines take a list of arguments, and you can omit parentheses on the function call if you like:</P
><pre class="programlisting">@results = myfunc 3, 5;</PRE
><p class="para">Without prototypes, this is the same as:</P
><pre class="programlisting">@results = myfunc(3, 5);</PRE
><p class="para">In the absence of parentheses, Perl will put the right hand side of the subroutine call into list context. You can use prototypes to change this behavior:</P
><pre class="programlisting">sub myfunc($);
@results = myfunc 3, 5;</PRE
><p class="para">Now this is the same as:</P
><pre class="programlisting">@results = ( myfunc(3), 5 );</PRE
><p class="para">You can also provide an empty prototype to indicate the function takes no arguments, like the built-in function <code class="literal">time</CODE
>. This is how Fcntl provides the LOCK_SH, LOCK_EX, and LOCK_UN constants. They are exported functions defined to have an empty prototype:</P
><pre class="programlisting">sub LOCK_SH () { 1 }
sub LOCK_EX () { 2 }
sub LOCK_UN () { 4 }</PRE
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="ch10-pgfId-1000005427">Mimicking built-ins</A
></H4
><p class="para">The other common use of prototypes is to give the convenient pass-without-flattening behavior of built-in functions like <code class="literal">push</CODE
> and <code class="literal">shift</CODE
>. When you call <code class="literal">push</CODE
> as <code class="literal">push(@array,</CODE
> <code class="literal">1,</CODE
> <code class="literal">2,</CODE
> <code class="literal">3)</CODE
> the function gets a <em class="emphasis">reference</EM
> to <code class="literal">@array</CODE
> instead of the actual array. This is accomplished by backslashing the <code class="literal">@</CODE
> character in the prototype:</P
><pre class="programlisting">sub mypush (\@@) {
  my $array_ref = shift;
  my @remainder = @_;

  # ...
}</PRE
><p class="para">The <code class="literal">\@</CODE
> in the prototype says "require the first argument to begin with an <code class="literal">@</CODE
> character, and pass it by reference." The second <code class="literal">@</CODE
> says "the rest of the arguments are a (possibly empty) list." A backslash in a prototype requires that the argument actually begin with the literal type character, which can sometimes be annoying. You can't even use the conditional <code class="literal">?:</CODE
> construct to pick which array to pass:</P
><pre class="programlisting"> mypush( $x &gt; 10 ? @a : @b , 3, 5 );          # WRONG</PRE
><p class="para">Instead, you must play games with references:</P
><pre class="programlisting"> mypush( @{ $x &gt; 10 ? \@a : \@b }, 3, 5 );    # RIGHT</PRE
><p class="para">Here's an <code class="literal">hpush</CODE
> function that works like <code class="literal">push</CODE
>, but on <a class="indexterm" name="ch10-idx-1000006377-0"></A
>hashes. It appends a list of key/value pairs to an existing hash, overwriting previous contents for those keys.</P
><pre class="programlisting">sub hpush(\%@) {
    my $href = shift;
    while ( my ($k, $v) = splice(@_, 0, 2) ) {
        $href-&gt;{$k} = $v;
    } 
} 
hpush(%pieces, &quot;queen&quot; =&gt; 9, &quot;rook&quot; =&gt; 5);<a class="indexterm" name="ch10-idx-1000004715-0"></A
><a class="indexterm" name="ch10-idx-1000004715-1"></A
><a class="indexterm" name="ch10-idx-1000004715-2"></A
></PRE
></DIV
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch10-pgfId-934">See Also</A
></H3
><p class="para">The <code class="literal">prototype</CODE
> function in <i class="filename">perlfunc </I
>(1); the section on <a class="olink" href="../prog/ch02_07.htm#PERL2-CH-2-SECT-7.3">"Prototypes"</A
> in <a class="olink" href="../prog/ch02_01.htm">Chapter 2</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
> and in <i class="filename">perlsub </I
>(1); <a class="xref" href="ch10_06.htm" title="Passing Arrays and Hashes by Reference">Recipe 10.5</A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch10_11.htm" title="10.10. Returning Failure"><img src="../gifs/txtpreva.gif" alt="Previous: 10.10. Returning Failure" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch10_13.htm" title="10.12. Handling Exceptions"><img src="../gifs/txtnexta.gif" alt="Next: 10.12. Handling Exceptions" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">10.10. Returning Failure</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">10.12. Handling Exceptions</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
