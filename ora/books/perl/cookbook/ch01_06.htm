<html><head>
<title>Recipe 1.5. Processing a String One Character at a Time</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:28:50Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch01_01.htm" title="1. Strings"><link rel="prev" href="ch01_05.htm" title="1.4. Converting Between ASCII Characters and Values"><link rel="next" href="ch01_07.htm" title="1.6. Reversing a String by Word or Character"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name="srchmap"index.html><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch01_05.htm" title="1.4. Converting Between ASCII Characters and Values"><img src="../gifs/txtpreva.gif" alt="Previous: 1.4. Converting Between ASCII Characters and Values" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch01_01.htm" title="1. Strings">Chapter 1<br>Strings</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch01_07.htm" title="1.6. Reversing a String by Word or Character"><img src="../gifs/txtnexta.gif" alt="Next: 1.6. Reversing a String by Word or Character" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch01-16077">1.5. Processing a String One Character at a Time</A
></H2
><div class="sect2"><h3 class="sect2"><a class="title" name="ch01-pgfId-539">Problem <a class="indexterm" name="ch01-idx-1000010209-0"></A
><a class="indexterm" name="ch01-idx-1000010209-1"></A
></A
></H3
><p class="para">You want to process a string one character at a time.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch01-pgfId-545">Solution</A
></H3
><p class="para">Use <kbd class="command">split</KBD
><a class="indexterm" name="ch01-idx-1000010210-0"></A
> with a null pattern to break up the string into individual characters, or use <kbd class="command">unpack</KBD
> if you just want their ASCII values:</P
><pre class="programlisting">@array = split(//, $string);

@array = unpack(&quot;C*&quot;, $string);</PRE
><p class="para">Or extract each character in turn with a loop:</P
><pre class="programlisting">    while (/(.)/g) { # . is never a newline here
        # do something with $1
    }</PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch01-pgfId-549">Discussion</A
></H3
><p class="para">As we said before, Perl's fundamental unit is the string, not the character. Needing to process anything a character at a time is rare. Usually some kind of higher-level Perl operation, like pattern matching, solves the problem more easily. See, for example, <a class="xref" href="ch07_08.htm" title="Writing a Filter">Recipe 7.7</A
>, where a set of substitutions is used to find command-line arguments.</P
><p class="para">Splitting on a pattern that matches the empty string returns a list of the individual characters in the string. This is a convenient feature when done intentionally, but it's easy to do unintentionally. For instance, <code class="literal">/X*/</CODE
> matches the empty string. Odds are you will find others when you don't mean to.</P
><p class="para">Here's an example that prints the characters used in the string &quot;<code class="literal">an</CODE
> <code class="literal">apple</CODE
> <code class="literal">a</CODE
> <code class="literal">day</CODE
>&quot;, sorted in ascending ASCII order:</P
><pre class="programlisting">%seen = ();
$string = &quot;an apple a day&quot;;
foreach $byte (split //, $string) {
    $seen{$byte}++;
}
print &quot;unique chars are: &quot;, sort(keys %seen), &quot;\n&quot;;
<code class="userinput"><b><code class="replaceable"><i>unique chars are:  adelnpy</I
></CODE
></B
></CODE
></PRE
><p class="para">These <code class="literal">split</CODE
> and <code class="literal">unpack</CODE
> solutions give you an array of characters to work with. If you don't want an array, you can use a pattern match with the <code class="literal">/g</CODE
> flag in a <code class="literal">while</CODE
> loop, extracting one character at a time:</P
><pre class="programlisting">%seen = ();
$string = &quot;an apple a day&quot;;
while ($string =~ /(.)/g) {
    $seen{$1}++;
}
print &quot;unique chars are: &quot;, sort(keys %seen), &quot;\n&quot;;
<code class="userinput"><b><code class="replaceable"><i>unique chars are:  adelnpy</I
></CODE
></B
></CODE
></PRE
><p class="para">In general, if you find yourself doing character-by-character processing, there's probably a better way to go about it. Instead of using <code class="literal">index</CODE
> and <code class="literal">substr</CODE
> or <code class="literal">split</CODE
> and <code class="literal">unpack</CODE
>, it might be easier to use a pattern. Instead of computing a 32-bit checksum by hand, as in the next example, the <code class="literal">unpack</CODE
> function can compute it far more efficiently.</P
><p class="para">The following example calculates the checksum of <code class="literal">$string</CODE
> with a <code class="literal">foreach</CODE
> loop. There are better checksums; this just happens to be the basis of a traditional and computationally easy checksum. See the MD5 module from CPAN if you want a more sound checksum.</P
><pre class="programlisting">$sum = 0;
foreach $ascval (unpack(&quot;C*&quot;, $string)) {
    $sum += $ascval;
}
print &quot;sum is $sum\n&quot;;
# prints &quot;1248&quot; if $string was &quot;an apple a day&quot;</PRE
><p class="para">This does the same thing, but much faster:</P
><pre class="programlisting">$sum = unpack(&quot;%32C*&quot;, $string);</PRE
><p class="para">This lets us emulate the SysV checksum program:</P
><pre class="programlisting">#!/usr/bin/perl
# sum - compute 16-bit checksum of all input files
$checksum = 0;
while (&lt;&gt;) { $checksum += unpack(&quot;%16C*&quot;, $_) }
$checksum %= (2 ** 16) - 1;
print &quot;$checksum\n&quot;;</PRE
><p class="para">Here's an example of its use:</P
><pre class="programlisting">% perl sum /etc/termcap
<code class="userinput"><b><code class="replaceable"><i>1510</I
></CODE
></B
></CODE
></PRE
><p class="para">If you have the GNU version of <em class="emphasis">sum</EM
>, you'll need to call it with the <b class="emphasis.bold">- -sysv</B
> option to get the same answer on the same file.</P
><pre class="programlisting">% sum --sysv /etc/termcap
<code class="userinput"><b><code class="replaceable"><i>1510 851 /etc/termcap</I
></CODE
></B
></CODE
></PRE
><p class="para">Another tiny program that processes its input one character at a time is <em class="emphasis">slowcat</EM
>, shown in <a class="xref" href="#ch01-23073" title="slowcat">Example 1.1</A
>. The idea here is to pause after each character is printed so you can scroll text before an audience slowly enough that they can read it.</P
><div class="example"><h4 class="example"><a class="title" name="ch01-23073">Example 1.1: slowcat</A
></H4
><pre class="programlisting">#!/usr/bin/perl
# <a class="indexterm" name="ch01-idx-1000011066-0"></A
>slowcat - emulate a   s l o w   line printer
# usage: slowcat [-DELAY] [files ...]
$DELAY = ($ARGV[0] =~ /^-([.\d]+)/) ? (shift, $1) : 1;
$| = 1;
while (&lt;&gt;) {
    for (split(//)) {
        print;
        select(undef,undef,undef, 0.005 * $DELAY);
    }
}</PRE
></DIV
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch01-pgfId-1000011087">See Also</A
></H3
><p class="para">The <code class="literal">split</CODE
> and <code class="literal">unpack</CODE
> functions in <em class="emphasis">perlfunc </EM
>(1) and <a class="olink" href="../prog/ch03_01.htm">Chapter 3</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
>; the use of <code class="literal">select</CODE
> for timing is explained in <a class="xref" href="ch03_11.htm" title="Short Sleeps">Recipe 3.10</A
><a class="indexterm" name="ch01-idx-1000010212-0"></A
><a class="indexterm" name="ch01-idx-1000010212-1"></A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch01_05.htm" title="1.4. Converting Between ASCII Characters and Values"><img src="../gifs/txtpreva.gif" alt="Previous: 1.4. Converting Between ASCII Characters and Values" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch01_07.htm" title="1.6. Reversing a String by Word or Character"><img src="../gifs/txtnexta.gif" alt="Next: 1.6. Reversing a String by Word or Character" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">1.4. Converting Between ASCII Characters and Values</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">1.6. Reversing a String by Word or Character</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
