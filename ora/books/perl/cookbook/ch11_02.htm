<html><head>
<title>Recipe 11.1. Taking References to Arrays</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:40:30Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch11_01.htm" title="11. References and Records"><link rel="prev" href="ch11_01.htm" title="11.0. Introduction"><link rel="next" href="ch11_03.htm" title="11.2. Making Hashes of Arrays"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch11_01.htm" title="11.0. Introduction"><img src="../gifs/txtpreva.gif" alt="Previous: 11.0. Introduction" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch11_01.htm" title="11. References and Records">Chapter 11<br>References and Records</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch11_03.htm" title="11.2. Making Hashes of Arrays"><img src="../gifs/txtnexta.gif" alt="Next: 11.2. Making Hashes of Arrays" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch11-71785">11.1. Taking References to Arrays</A
></H2
><div class="sect2"><h3 class="sect2"><a class="title" name="ch11-pgfId-190">Problem<a class="indexterm" name="ch11-idx-1000004792-0"></A
><a class="indexterm" name="ch11-idx-1000004792-1"></A
></A
></H3
><p class="para">You need to manipulate an array by reference.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch11-pgfId-196">Solution</A
></H3
><p class="para">To get a reference to an array:</P
><pre class="programlisting">$aref               = \@array;
$anon_array         = [1, 3, 5, 7, 9];
$anon_copy          = [ @array ];
@$implicit_creation = (2, 4, 6, 8, 10);</PRE
><p class="para">To deference an array reference, precede it with an at sign (<code class="literal">@</CODE
>):</P
><pre class="programlisting">push(@$anon_array, 11);</PRE
><p class="para">Or use a pointer arrow plus a bracketed subscript for a particular element:</P
><pre class="programlisting">$two = $implicit_creation-&gt;[0];</PRE
><p class="para">To get the last index number by reference, or the number of items in that referenced array:</P
><pre class="programlisting">$last_idx  = $#$aref;
$num_items = @$aref;</PRE
><p class="para">Or defensively embracing and forcing context:</P
><pre class="programlisting">$last_idx  = $#{ $aref };
$num_items = scalar @{ $aref };</PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch11-pgfId-224">Discussion</A
></H3
><p class="para">Here are array references in action:</P
><pre class="programlisting"># check whether $someref contains a simple array reference
if (ref($someref) ne 'ARRAY') {
    die &quot;Expected an array reference, not $someref\n&quot;;
}

print &quot;@{$array_ref}\n&quot;;        # print original data

@order = sort @{ $array_ref };  # sort it

push @{ $array_ref }, $item;    # append new element to orig array  </PRE
><p class="para">If you can't decide whether to use a reference to a named array or to create a new one, here's a simplistic guideline that will prove right more often than not. Only take a reference to an existing array either to return the reference out of scope, thereby creating an anonymous array, or to pass the array by reference to a function. For virtually all other cases, use <code class="literal">[@array]</CODE
> to create a new array reference with a copy of the old values.</P
><p class="para">Automatic reference counting and the backslash operator make a powerful combination:</P
><pre class="programlisting">sub array_ref {
    my @array;
    return \@array;
}

$aref1 = array_ref();
$aref2 = array_ref();</PRE
><p class="para">Each time <code class="literal">array_ref</CODE
> is called, the function allocates a new piece of memory for <code class="literal">@array</CODE
>. If we hadn't returned a reference to <code class="literal">@array</CODE
>, its memory would have been freed when its block, the subroutine, ended. However, because a reference to <code class="literal">@array</CODE
> is still accessible, Perl doesn't free that storage, and we end up with a reference to a piece of memory that can no longer be accessed through the symbol table. Such a piece of memory is called <i class="firstterm">anonymous</I
> because no name is associated with it.</P
><p class="para">To access a particular element of the array referenced by <code class="literal">$aref</CODE
>, you could write <code class="literal">$$aref[4]</CODE
>, but writing <code class="literal">$aref-&gt;[4]</CODE
> is the same thing, and it is clearer.</P
><pre class="programlisting">print $array_ref-&gt;[$N];         # access item in position N (best)
print $$array_ref[$N];          # same, but confusing
print ${$array_ref}[$N];        # same, but still confusing, and ugly to boot</PRE
><p class="para">If you have an array reference, you can only access a slice of the referenced array in this way:</P
><pre class="programlisting">@$pie[3..5];                    # array slice, but a little confusing to read
@{$pie}[3..5];                  # array slice, easier (?) to read</PRE
><p class="para">Array slices, even when accessed through array references, are assignable. In the next line, the array dereference happens first, and then the slice:</P
><pre class="programlisting">@{$pie}[3..5] = (&quot;blackberry&quot;, &quot;blueberry&quot;, &quot;pumpkin&quot;);</PRE
><p class="para">An array slice is exactly the same as a list of individual array elements. Because you can't take a reference to a list, you can't take a reference to an array slice:</P
><pre class="programlisting">$sliceref = \@{$pie}[3..5];     # WRONG!</PRE
><p class="para">To iterate through the entire array, use either a <code class="literal">foreach</CODE
> loop or a <code class="literal">for</CODE
> loop:</P
><pre class="programlisting">foreach $item ( @{$array_ref} ) {   
    # $item has data
}

for ($idx = 0; $idx &lt;= $#{ $array_ref }; $idx++) {  
    # $array_ref-&gt;[$idx] has data
}<a class="indexterm" name="ch11-idx-1000004794-0"></A
><a class="indexterm" name="ch11-idx-1000004794-1"></A
></PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch11-pgfId-1000004675">See Also</A
></H3
><p class="para"><a class="olink" href="../prog/ch04_01.htm">Chapter 4</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
>; <i class="filename">perlref </I
>(1) and <i class="filename">perllol </I
>(1); <a class="xref" href="ch02_15.htm" title="Multiplying Matrices">Recipe 2.14</A
>; <a class="xref" href="ch04_06.htm" title="Iterating Over an Array by Reference">Recipe 4.5</A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch11_01.htm" title="11.0. Introduction"><img src="../gifs/txtpreva.gif" alt="Previous: 11.0. Introduction" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch11_03.htm" title="11.2. Making Hashes of Arrays"><img src="../gifs/txtnexta.gif" alt="Next: 11.2. Making Hashes of Arrays" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">11.0. Introduction</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">11.2. Making Hashes of Arrays</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
