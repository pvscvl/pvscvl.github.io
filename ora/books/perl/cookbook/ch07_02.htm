<html><head>
<title>Recipe 7.1. Opening a File</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:35:42Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch07_01.htm" title="7. File Access"><link rel="prev" href="ch07_01.htm" title="7.0. Introduction"><link rel="next" href="ch07_03.htm" title="7.2. Opening Files with Unusual Filenames"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch07_01.htm" title="7.0. Introduction"><img src="../gifs/txtpreva.gif" alt="Previous: 7.0. Introduction" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch07_01.htm" title="7. File Access">Chapter 7<br>File Access</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch07_03.htm" title="7.2. Opening Files with Unusual Filenames"><img src="../gifs/txtnexta.gif" alt="Next: 7.2. Opening Files with Unusual Filenames" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch07-38018">7.1. Opening a File</A
></H2
><div class="sect2"><h3 class="sect2"><a class="title" name="ch07-pgfId-206">Problem</A
></H3
><p class="para"><a class="indexterm" name="ch07-idx-1000009579-0"></A
><a class="indexterm" name="ch07-idx-1000009579-1"></A
><a class="indexterm" name="ch07-idx-1000009579-2"></A
><a class="indexterm" name="ch07-idx-1000009579-3"></A
><a class="indexterm" name="ch07-idx-1000009579-4"></A
>You want to read or write to a filename from Perl.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch07-pgfId-212">Solution</A
></H3
><p class="para">Use <code class="literal">open</CODE
> for convenience, <code class="literal">sysopen</CODE
> for precision, or the IO::File module to get an anonymous filehandle.</P
><p class="para">The <code class="literal">open</CODE
> function takes two arguments: the filehandle to open and one string containing the filename and special characters indicating how to open it (the mode):</P
><pre class="programlisting">open(SOURCE, &quot;&lt; $path&quot;)
    or die &quot;Couldn't open $path for reading: $!\n&quot;;

open(SINK, &quot;&gt; $path&quot;)
    or die &quot;Couldn't open $path for writing: $!\n&quot;;</PRE
><p class="para">The <code class="literal">sysopen</CODE
> function takes three or four arguments: filehandle, filename, mode, and an optional permissions value. The mode is a number constructed from constants provided by the Fcntl module:</P
><pre class="programlisting">use Fcntl;

sysopen(SOURCE, $path, O_RDONLY)
    or die &quot;Couldn't open $path for reading: $!\n&quot;;

sysopen(SINK, $path, O_WRONLY)
    or die &quot;Couldn't open $path for writing: $!\n&quot;;</PRE
><p class="para">The IO::File module's <code class="literal">new</CODE
> method accepts both <code class="literal">open</CODE
> and <code class="literal">sysopen</CODE
> style arguments and returns an anonymous filehandle. The <code class="literal">new</CODE
> method also accepts a mode in the style of <em class="emphasis">fopen </EM
>(3):</P
><pre class="programlisting">use IO::File;

# like Perl's open
$fh = IO::File-&gt;new(&quot;&gt; $filename&quot;)
    or die &quot;Couldn't open $filename for writing: $!\n&quot;;

# like Perl's sysopen
$fh = IO::File-&gt;new($filename, O_WRONLY|O_CREAT)
    or die &quot;Couldn't open $filename for writing: $!\n&quot;;

# like stdio's fopen(3)
$fh = IO::File-&gt;new($filename, &quot;r+&quot;)
    or die &quot;Couldn't open $filename for read and write: $!\n&quot;;</PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch07-pgfId-274">Discussion</A
></H3
><p class="para">All input and output goes through filehandles, whether filehandles are mentioned or not. Filehandles aren't exclusively connected to files &nbsp;-  they're also used to communicate with other programs (see <a class="xref" href="ch16_01.htm" title="Process Management and Communication">Chapter 16, <cite class="chapter">Process Management and Communication</CITE
></A
>) and for network communication (see <a class="xref" href="ch17_01.htm" title="Sockets">Chapter 17, <cite class="chapter">Sockets</CITE
></A
>). The <code class="literal">open</CODE
> function can also be used to manipulate file descriptors, discussed in <a class="xref" href="ch07_20.htm" title="Opening and Closing File Descriptors by Number">Recipe 7.19</A
>.</P
><p class="para">The <code class="literal">open</CODE
> function quickly and conveniently solves the problem of associating a filehandle with a file. It permits a shorthand for common modes (reading, writing, reading and writing, appending) passed in with the filename. It doesn't let you control the permission that files are created with or even whether files are created. For this level of control, you need <code class="literal">sysopen</CODE
>, which uses constants provided by the Fcntl module to control individual settings like read, write, create, and truncate.</P
><p class="para">Most programmers meet <code class="literal">open</CODE
> long before they meet <code class="literal">sysopen</CODE
>. The following table shows how <code class="literal">open</CODE
> modes (the <em class="emphasis">Filename</EM
> column) correspond to <code class="literal">sysopen</CODE
> constants (<em class="emphasis">O_  flags</EM
>) and to the <em class="emphasis">fopen (3)</EM
> strings that <code class="literal">IO::File-&gt;new</CODE
> can take (<em class="emphasis">Char</EM
>). <em class="emphasis">Read</EM
> and <em class="emphasis">Write</EM
> indicate that the filehandle may be read from or written to. <em class="emphasis">Append</EM
> means no matter where you are in the file, output goes to the end of the file (on most systems). <em class="emphasis">Create</EM
> indicates whether the <code class="literal">open</CODE
> statement creates a file if one having the given name doesn't already exist. <em class="emphasis">Trunc</EM
> indicates <code class="literal">open</CODE
> will clobber any existing data if the file already exists.</P
><table class="informaltable" border="1" cellpadding="3"><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1"><p class="para">Filename</P
></TH
><th class="entry" align="LEFT" rowspan="1" colspan="1"><p class="para">Read</P
></TH
><th class="entry" align="LEFT" rowspan="1" colspan="1"><p class="para">Write</P
></TH
><th class="entry" align="LEFT" rowspan="1" colspan="1"><p class="para">Append</P
></TH
><th class="entry" align="LEFT" rowspan="1" colspan="1"><p class="para">Create</P
></TH
><th class="entry" align="LEFT" rowspan="1" colspan="1"><p class="para">Trunc</P
></TH
><th class="entry" align="LEFT" rowspan="1" colspan="1"><p class="para">O_flags</P
></TH
><th class="entry" align="LEFT" rowspan="1" colspan="1"><p class="para">Char</P
></TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">&lt; <i class="filename">file</I
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">yes</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">no</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">no</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">no</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">no</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">RDONLY</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">&quot;r&quot;</CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">&gt; <i class="filename">file</I
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">no</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">yes</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">no</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">yes</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">yes</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">WRONLY TRUNC CREAT</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">&quot;w&quot;</CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">&gt;&gt; <i class="filename">file</I
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">no</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">yes</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">yes</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">yes</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">no</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">WRONLY APPEND CREAT</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">&quot;a&quot;</CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">+&lt; <i class="filename">file</I
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">yes</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">yes</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">no</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">no</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">no</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">RDWR</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">&quot;r+&quot;</CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">+&gt; <i class="filename">file</I
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">yes</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">yes</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">no</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">yes</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">yes</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">RDWR TRUNC CREAT</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">&quot;w+&quot;</CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">+&gt;&gt; <i class="filename">file</I
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">yes</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">yes</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">yes</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">yes</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">no</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">RDWR APPEND CREAT</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">&quot;a+&quot; </CODE
></P
></TD
></TR
></TBODY
></TABLE
><p class="para">Here's a tip: you almost never want to use +&gt; or +&gt;&gt;. The first clobbers your file before you can read it, and the second one is confusing because your read pointer can be anywhere, but on many systems, the writer always jumps to the end of the file.</P
><p class="para">The <code class="literal">sysopen</CODE
> function takes three or four arguments:</P
><pre class="programlisting">sysopen(FILEHANDLE, $name, $flags)         or die &quot;Can't open $name : $!&quot;;
sysopen(FILEHANDLE, $name, $flags, $perms) or die &quot;Can't open $name : $!&quot;;</PRE
><p class="para"><code class="literal">$name</CODE
> is the name of the file, without any &lt; or <code class="literal">+</CODE
> funny business. <code class="literal">$flags</CODE
> is a number, formed by ORing together separate mode values for <code class="literal">O_CREAT</CODE
><a class="indexterm" name="ch07-idx-1000009586-0"></A
>, <code class="literal">O_WRONLY</CODE
>, <code class="literal">O_TRUNC</CODE
>, etc. The exact availability of <code class="literal">O_*</CODE
> constants depends on your operating system, so consult the online documentation for this (usually <i class="filename">open </I
>(2), but not always), or look in <em class="emphasis">/usr/include/fcntl.h</EM
>. Common ones are:</P
><table class="informaltable" border="1" cellpadding="3"><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">O_RDONLY</CODE
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Read only</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">O_WRONLY</CODE
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Write only</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">O_RDWR</CODE
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Read and write</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">O_CREAT</CODE
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Create the file if it doesn't exist</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">O_EXCL</CODE
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Fail if the file already exists</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">O_APPEND</CODE
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Append to the file</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">O_TRUNC</CODE
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Truncate the file</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">O_NONBLOCK</CODE
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Non-blocking access</P
></TD
></TR
></TBODY
></TABLE
><p class="para">Less common <code class="literal">O_*</CODE
> flags sometimes available include <code class="literal">O_SHLOCK</CODE
>, <code class="literal">O_EXLOCK</CODE
>, <code class="literal">O_BINARY</CODE
>, <code class="literal">O_NOCTTY</CODE
>, and <code class="literal">O_SYNC</CODE
>. Consult your <i class="filename">open </I
>(2) manpage or its local equivalent for details.</P
><p class="para">If you omit the <code class="literal">$perms</CODE
> argument to <code class="literal">sysopen</CODE
>, Perl uses the octal value <code class="literal">0666</CODE
>. These permissions values need to be in octal and are modified by your process's current <code class="literal">umask</CODE
>. A <code class="literal">umask</CODE
><a class="indexterm" name="ch07-idx-1000009585-0"></A
> value is a number representing disabled permissions bits &nbsp;-  if your <code class="literal">umask</CODE
> were 027 (group can't write; others can't read, write, or execute), then passing <code class="literal">sysopen</CODE
> 0666 would create a file with mode 0640 (mathematically: <code class="literal">0666</CODE
> <code class="literal">&amp;~</CODE
> <code class="literal">027</CODE
> is 0640).</P
><p class="para">If <code class="literal">umask</CODE
> seems confusing, here's some advice: supply a creation mode of 0666 for regular files and one of 0777 for directories and executable files. This gives users a choice: if they want protected files, they can choose process umasks of 022, 027, or even the particularly antisocial mask of 077. Programs should rarely if ever make policy decisions better left to the user. One exception is when writing files that should be kept private: mail files, web browser cookies, <em class="emphasis">.rhosts</EM
> files, and so on. In short, seldom if ever use 0644 as argument to <code class="literal">sysopen</CODE
> because that takes away the user's option to have a more permissive umask.</P
><p class="para">Here are examples of <code class="literal">open</CODE
> and <code class="literal">sysopen</CODE
> in action.</P
><p class="para">To open file for reading:</P
><pre class="programlisting">open(FH, &quot;&lt; $path&quot;)                                 or die $!;
sysopen(FH, $path, O_RDONLY)                        or die $!;</PRE
><p class="para">To open file for writing, create new file if needed, or else truncate old file:</P
><pre class="programlisting">open(FH, &quot;&gt; $path&quot;)                                 or die $!;
sysopen(FH, $path, O_WRONLY|O_TRUNC|O_CREAT)        or die $!;
sysopen(FH, $path, O_WRONLY|O_TRUNC|O_CREAT, 0600)  or die $!;</PRE
><p class="para">To open file for writing, create new file, file must not exist:</P
><pre class="programlisting">sysopen(FH, $path, O_WRONLY|O_EXCL|O_CREAT)         or die $!;
sysopen(FH, $path, O_WRONLY|O_EXCL|O_CREAT, 0600)   or die $!;</PRE
><p class="para">To open file for appending, create if necessary:</P
><pre class="programlisting">open(FH, &quot;&gt;&gt; $path&quot;)                                or die $!;
sysopen(FH, $path, O_WRONLY|O_APPEND|O_CREAT)       or die $!;
sysopen(FH, $path, O_WRONLY|O_APPEND|O_CREAT, 0600) or die $!;</PRE
><p class="para">To open file for appending, file must exist:</P
><pre class="programlisting">sysopen(FH, $path, O_WRONLY|O_APPEND)               or die $!;</PRE
><p class="para">To open file for update, file must exist:</P
><pre class="programlisting">open(FH, &quot;+&lt; $path&quot;)                                or die $!;
sysopen(FH, $path, O_RDWR)                          or die $!;</PRE
><p class="para">To open file for update, create file if necessary:</P
><pre class="programlisting">sysopen(FH, $path, O_RDWR|O_CREAT)                  or die $!;
sysopen(FH, $path, O_RDWR|O_CREAT, 0600)            or die $!;</PRE
><p class="para">To open file for update, file must not exist:</P
><pre class="programlisting">sysopen(FH, $path, O_RDWR|O_EXCL|O_CREAT)           or die $!;
sysopen(FH, $path, O_RDWR|O_EXCL|O_CREAT, 0600)     or die $!;<a class="indexterm" name="ch07-idx-1000009581-0"></A
></PRE
><p class="para">We demonstrate using a creation mask of 0600 here only to show how to create a private file. The argument is normally omitted.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch07-pgfId-372">See Also</A
></H3
><p class="para">The <code class="literal">open</CODE
>, <code class="literal">sysopen</CODE
>, and <code class="literal">umask</CODE
> functions in <i class="filename">perlfunc </I
>(1) and <a class="olink" href="../prog/ch03_01.htm">Chapter 3</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
>; the documentation for the standard IO::File and Fcntl modules (also in <a class="olink" href="../prog/ch07_01.htm">Chapter 7</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
>); your system's <i class="filename">open </I
>(2), <i class="filename">fopen </I
>(3), and <i class="filename">umask </I
>(2) manpages; <a class="xref" href="ch07_03.htm" title="Opening Files with Unusual Filenames">Recipe 7.2</A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch07_01.htm" title="7.0. Introduction"><img src="../gifs/txtpreva.gif" alt="Previous: 7.0. Introduction" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch07_03.htm" title="7.2. Opening Files with Unusual Filenames"><img src="../gifs/txtnexta.gif" alt="Next: 7.2. Opening Files with Unusual Filenames" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">7.0. Introduction</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">7.2. Opening Files with Unusual Filenames</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
