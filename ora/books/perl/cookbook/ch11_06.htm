<html><head>
<title>Recipe 11.5. Taking References to Scalars</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:40:36Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch11_01.htm" title="11. References and Records"><link rel="prev" href="ch11_05.htm" title="11.4. Taking References to Functions"><link rel="next" href="ch11_07.htm" title="11.6. Creating Arrays of Scalar References"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch11_05.htm" title="11.4. Taking References to Functions"><img src="../gifs/txtpreva.gif" alt="Previous: 11.4. Taking References to Functions" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch11_01.htm" title="11. References and Records">Chapter 11<br>References and Records</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch11_07.htm" title="11.6. Creating Arrays of Scalar References"><img src="../gifs/txtnexta.gif" alt="Next: 11.6. Creating Arrays of Scalar References" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch11-chap11_taking_3">11.5. Taking References to Scalars</A
></H2
><div class="sect2"><h3 class="sect2"><a class="title" name="ch11-pgfId-624">Problem<a class="indexterm" name="ch11-idx-1000004819-0"></A
><a class="indexterm" name="ch11-idx-1000004819-1"></A
><a class="indexterm" name="ch11-idx-1000004819-2"></A
><a class="indexterm" name="ch11-idx-1000004819-3"></A
></A
></H3
><p class="para">You want to create and manipulate a reference to a scalar value.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch11-pgfId-630">Solution</A
></H3
><p class="para">To create a reference to a scalar variable, use the backslash operator:</P
><pre class="programlisting">$scalar_ref = \$scalar;       # get reference to named scalar</PRE
><p class="para">To create a reference to an anonymous scalar value (a value that isn't in a variable), assign through a dereference of an undefined variable:</P
><pre class="programlisting">undef $anon_scalar_ref;
$$anon_scalar_ref = 15;</PRE
><p class="para">This creates a reference to a constant scalar:</P
><pre class="programlisting">$anon_scalar_ref = \15;</PRE
><p class="para">Use <code class="literal">${...}</CODE
> to dereference:</P
><pre class="programlisting">print ${ $scalar_ref };       # dereference it
${ $scalar_ref } .= &quot;string&quot;; # alter referent's value</PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch11-pgfId-654">Discussion</A
></H3
><p class="para">If you want to create many new anonymous scalars, use a subroutine that returns a reference to a lexical variable out of scope, as explained in the Introduction:</P
><pre class="programlisting">sub new_anon_scalar {
    my $temp;
    return \$temp;
}</PRE
><p class="para">Perl almost never implicitly dereferences for you. Exceptions include references to filehandles, code references to <code class="literal">sort</CODE
>, and the reference argument to <code class="literal">bless</CODE
>. Because of this, you can only dereference a scalar reference by prefacing it with <code class="literal">$</CODE
> to get at its contents:</P
><pre class="programlisting">$sref = new_anon_scalar();
$$sref = 3;
print &quot;Three = $$sref\n&quot;;
@array_of_srefs = ( new_anon_scalar(), new_anon_scalar() );
${ $array[0] } = 6.02e23;
${ $array[1] } = &quot;avocado&quot;;
print &quot;\@array contains: &quot;, join(&quot;, &quot;, map { $$_ } @array ), &quot;\n&quot;;</PRE
><p class="para">Notice we have to put braces around <code class="literal">$array[0]</CODE
> and <code class="literal">$array[1]</CODE
>. If we tried to say <code class="literal">$$array[0]</CODE
>, the tight binding of dereferencing would turn it into <code class="literal">$array-&gt;[0]</CODE
>. It would treat <code class="literal">$array</CODE
> as an array reference and return the element at index zero.</P
><p class="para">Here are other examples where it is safe to omit the braces:</P
><pre class="programlisting">$var        = `uptime`;     # $var holds text
$vref       = \$var;        # $vref &quot;points to&quot; $var
if ($$vref =~ /load/) {}    # look at $var, indirectly
chomp $$vref;               # alter $var, indirectly</PRE
><p class="para">As mentioned in the introduction, you may use the <code class="literal">ref</CODE
> built-in to inspect a reference for its referent's type. Calling <code class="literal">ref</CODE
> on a scalar reference returns the string &quot;<code class="literal">SCALAR</CODE
>&quot;:</P
><pre class="programlisting"># check whether $someref contains a simple scalar reference
if (ref($someref) ne 'SCALAR') {
    die &quot;Expected a scalar reference, not $someref\n&quot;;<a class="indexterm" name="ch11-idx-1000004821-0"></A
><a class="indexterm" name="ch11-idx-1000004821-1"></A
><a class="indexterm" name="ch11-idx-1000004821-2"></A
><a class="indexterm" name="ch11-idx-1000004821-3"></A
>
}</PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch11-pgfId-706">See Also</A
></H3
><p class="para">Chapter 4 of <i class="filename">Programming Perl</I
> and <i class="filename">perlref </I
>(1)</P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch11_05.htm" title="11.4. Taking References to Functions"><img src="../gifs/txtpreva.gif" alt="Previous: 11.4. Taking References to Functions" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch11_07.htm" title="11.6. Creating Arrays of Scalar References"><img src="../gifs/txtnexta.gif" alt="Next: 11.6. Creating Arrays of Scalar References" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">11.4. Taking References to Functions</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">11.6. Creating Arrays of Scalar References</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
