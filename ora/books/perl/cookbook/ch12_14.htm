<html><head>
<title>Recipe 12.13. Referring to Packages Indirectly</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:41:56Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch12_01.htm" title="12. Packages, Libraries, and Modules"><link rel="prev" href="ch12_13.htm" title="12.12. Reporting Errors and Warnings Like Built-Ins"><link rel="next" href="ch12_15.htm" title="12.14. Using h2ph to Translate C #include Files"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name="srchmaindex.htmlp"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch12_13.htm" title="12.12. Reporting Errors and Warnings Like Built-Ins"><img src="../gifs/txtpreva.gif" alt="Previous: 12.12. Reporting Errors and Warnings Like Built-Ins" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch12_01.htm" title="12. Packages, Libraries, and Modules">Chapter 12<br>Packages, Libraries, and Modules</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch12_15.htm" title="12.14. Using h2ph to Translate C #include Files"><img src="../gifs/txtnexta.gif" alt="Next: 12.14. Using h2ph to Translate C #include Files" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch12-chap12_referring_0">12.13. Referring to Packages Indirectly</A
></H2
><div class="sect2"><h3 class="sect2"><a class="title" name="ch12-pgfId-1254">Problem<a class="indexterm" name="ch12-idx-1000005271-0"></A
><a class="indexterm" name="ch12-idx-1000005271-1"></A
><a class="indexterm" name="ch12-idx-1000005271-2"></A
></A
></H3
><p class="para">You want to refer to a variable or function in a package unknown until runtime, but syntax like <code class="literal">$packname::$varname</CODE
> is illegal.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch12-pgfId-1260">Solution</A
></H3
><p class="para">Use <a class="indexterm" name="ch12-idx-1000006220-0"></A
>symbolic references:</P
><pre class="programlisting">{
    no strict 'refs';
    $val  = ${ $packname . &quot;::&quot; . $varname };
    @vals = @{ $packname . &quot;::&quot; . $aryname };
    &amp;{ $packname . &quot;::&quot; . $funcname }(&quot;args&quot;);
    ($packname . &quot;::&quot; . $funcname) -&gt; (&quot;args&quot;);
}</PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch12-pgfId-1278">Discussion</A
></H3
><p class="para">A package declaration has meaning at compile time. If you don't know the name of the package or variable until run time, you'll have to resort to symbolic references for direct access to the package symbol table. Assuming you normally run with <code class="literal">use</CODE
> <code class="literal">strict</CODE
> in effect, you must disable part of it to use symbolic references. Once you've used the <code class="literal">no</CODE
> <code class="literal">strict</CODE
> <code class="literal">'refs'</CODE
> directive in that block, build up a string with the fully qualified name of the variable or function you're interested in. Then dereference this name as though it were a proper Perl reference.</P
><p class="para">Prior to version 5 of Perl, programmers were forced to use an <code class="literal">eval</CODE
> for this kind of thing:</P
><pre class="programlisting">eval &quot;package $packname; \$'$val = \$$varname&quot;; # set $main'val
die if $@;</PRE
><p class="para">As you see, this approach makes quoting difficult. It's also comparatively slow. Fortunately, you never need to do this just to access variables indirectly by name. Symbolic references are a necessary compromise.</P
><p class="para">Similarly, <code class="literal">eval</CODE
> could be used to define functions on the fly. Suppose you wanted to be able to get the base 2 or base 10 logs of numbers:</P
><pre class="programlisting">printf &quot;log2  of 100 is %.2f\n&quot;, log2(100);
printf &quot;log10 of 100 is %.2f\n&quot;, log10(100);</PRE
><p class="para">Perl has only the natural log function. Here's how one could use <code class="literal">eval</CODE
> to create these functions at run time. Here we'll create functions named <code class="literal">log2</CODE
> up through <code class="literal">log999</CODE
>:</P
><pre class="programlisting">$packname = 'main';
for ($i = 2; $i &lt; 1000; $i++) {
    $logN = log($i);
    eval &quot;sub ${packname}::log$i { log(shift) / $logN }&quot;;
    die if $@;
}</PRE
><p class="para">Here, at least, you don't need to do that. The following code does the same thing, but instead of compiling a new function 998 times, we compile it only once, as a <a class="indexterm" name="ch12-idx-1000006217-0"></A
>closure. Then we use symbolic dereferencing of the symbol table to assign the same subroutine <a class="indexterm" name="ch12-idx-1000006221-0"></A
>reference to many function names:</P
><pre class="programlisting">$packname = 'main';
for ($i = 2; $i &lt; 1000; $i++) {
    my $logN = log($i);
    no strict 'refs';
    *{&quot;${packname}::log$i&quot;} = sub { log(shift) / $logN };
}</PRE
><p class="para">When you assign a reference to a typeglob, you create an alias just for the type of that name. That's how the Exporter does its job. The first line in the next code sample manually imports the function name <code class="literal">Colors::blue</CODE
> into the current package. The second makes the <code class="literal">main::blue</CODE
> function an alias for the <code class="literal">Colors::azure</CODE
> function.</P
><pre class="programlisting">*blue       = \&amp;Colors::blue;
*main::blue = \&amp;Colors::azure;</PRE
><p class="para">Given the flexibility of typeglob assignments and symbolic references, a full-blown <code class="literal">eval</CODE
> <code class="literal">&quot;STRING&quot;</CODE
> is nearly always unnecessary, the last resort of the desperate programmer. The only thing worse would be if it weren't available at all.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch12-pgfId-1334">See Also</A
></H3
><p class="para">The section on <a class="olink" href="../prog/ch04_04.htm">"Symbolic References"</A
> in <a class="olink" href="../prog/ch04_01.htm">Chapter 4</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
> and in the start of <i class="filename">perlsub </I
>(1); <a class="xref" href="ch11_05.htm" title="Taking References to Functions">Recipe 11.4</A
><a class="indexterm" name="ch12-idx-1000005273-0"></A
><a class="indexterm" name="ch12-idx-1000005273-1"></A
><a class="indexterm" name="ch12-idx-1000005273-2"></A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch12_13.htm" title="12.12. Reporting Errors and Warnings Like Built-Ins"><img src="../gifs/txtpreva.gif" alt="Previous: 12.12. Reporting Errors and Warnings Like Built-Ins" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch12_15.htm" title="12.14. Using h2ph to Translate C #include Files"><img src="../gifs/txtnexta.gif" alt="Next: 12.14. Using h2ph to Translate C #include Files" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">12.12. Reporting Errors and Warnings Like Built-Ins</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">12.14. Using h2ph to Translate C #include Files</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
