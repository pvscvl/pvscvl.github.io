<html><head>
<title>Recipe 18.5. Reading Mail with POP3</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:45:04Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch18_01.htm" title="18. Internet Services"><link rel="prev" href="ch18_05.htm" title="18.4. Reading and Posting Usenet News Messages"><link rel="next" href="ch18_07.htm" title="18.6. Simulating Telnet from a Program"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch18_05.htm" title="18.4. Reading and Posting Usenet News Messages"><img src="../gifs/txtpreva.gif" alt="Previous: 18.4. Reading and Posting Usenet News Messages" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch18_01.htm" title="18. Internet Services">Chapter 18<br>Internet Services</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch18_07.htm" title="18.6. Simulating Telnet from a Program"><img src="../gifs/txtnexta.gif" alt="Next: 18.6. Simulating Telnet from a Program" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch18-chap18_reading_1">18.5. Reading Mail with POP3</A
></H2
><div class="sect2"><h3 class="sect2"><a class="title" name="ch18-pgfId-709">Problem</A
></H3
><p class="para">You want to fetch mail from a <a class="indexterm" name="ch18-idx-1000004305-0"></A
><a class="indexterm" name="ch18-idx-1000004305-1"></A
><a class="indexterm" name="ch18-idx-1000004305-2"></A
><a class="indexterm" name="ch18-idx-1000004305-3"></A
>POP3 server. This lets you write a program to summarize your unread mail, move it from a remote server to a local mailbox, or toggle between Internet and local mail systems.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch18-pgfId-715">Solution</A
></H3
><p class="para">Use the CPAN module Net::POP3:</P
><pre class="programlisting">$pop = Net::POP3-&gt;new($mail_server)
    or die &quot;Can't open connection to $mail_server : $!\n&quot;;
defined ($pop-&gt;login($username, $password))
    or die &quot;Can't authenticate: $!\n&quot;;
$messages = $pop-&gt;list
    or die &quot;Can't get list of undeleted messages: $!\n&quot;;
foreach $msgid (keys %$messages) {
    $message = $pop-&gt;get($msgid);
    unless (defined $message) {
        warn &quot;Couldn't fetch $msgid from server: $!\n&quot;;
        next;
    }
    # $message is a reference to an array of lines
    $pop-&gt;delete($msgid);
}</PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch18-pgfId-751">Discussion</A
></H3
><p class="para">Traditionally, mail has been a three-party system: the <em class="emphasis">MTA</EM
> (Mail Transport Agent, a system program like <em class="emphasis">sendmail</EM
>) delivers mail to the <em class="emphasis">spool</EM
>, where it is read by the <em class="emphasis">MUA</EM
> (Mail User Agent, a program like <em class="emphasis">mail</EM
>). This dates from the days of big servers holding mail and users reading it through dumb terminals. As PCs and networks entered the picture, the need arose for MUAs like Pine to run on different machines than the one housing the spool. The Post Office Protocol (POP) implements efficient message listing, reading, and deleting over a TCP/IP session.</P
><p class="para">The CPAN module Net::POP3 is a POP client. That is, it lets your Perl program act as an MUA. The first step in using Net::POP3 is to create a new Net::POP3 object. Pass <code class="literal">new</CODE
> the name of the POP3 server:</P
><pre class="programlisting">$pop = Net::POP3-&gt;new( &quot;pop.myisp.com&quot; )
    or die &quot;Can't connect to pop.myisp.com: $!\n&quot;;</PRE
><p class="para">All Net::POP3 functions return <code class="literal">undef</CODE
> or the empty list <code class="literal">()</CODE
> if an error occurs, depending on the context they were called in. If an error occurs, <code class="literal">$!</CODE
> may contain a meaningful error message (but also may not).</P
><p class="para">You may optionally pass further arguments to <code class="literal">new</CODE
> in a hash-like fashion, indicating a timeout value (in seconds) for network operations:</P
><pre class="programlisting">$pop = Net::POP3-&gt;new( &quot;pop.myisp.com&quot;,
                       Timeout =&gt; 30 )
    or die &quot;Can't connect to pop.myisp.com : $!\n&quot;;</PRE
><p class="para">Authenticate yourself to the POP3 server with the <code class="literal">login</CODE
> method. It takes two arguments, username and password, but both are optional. If the username is omitted, the current username is used. If the password is omitted, Net::POP3 tries to use Net::Netrc to find a password:</P
><pre class="programlisting">defined ($pop-&gt;login(&quot;gnat&quot;, &quot;S33kr1T Pa55w0rD&quot;))
    or die &quot;Hey, my username and password didn't work!\n&quot;;

defined ($pop-&gt;login( &quot;midget&quot; ))           # use Net::Netrc to find password
    or die &quot;Authentication failed.\n&quot;;

defined ($pop-&gt;<code class="literal">login())</CODE
>                     # current username and Net::Netrc
    or die &quot;Authentication failed.  Miserably.\n&quot;;</PRE
><p class="para">The <code class="literal">login</CODE
> method sends the password in plain text across the network. This is undesirable, so if you have the MD5 module from CPAN, you can use the <code class="literal">apop</CODE
> method. It works exactly like <code class="literal">login</CODE
>, except that it encrypts the password:</P
><pre class="programlisting">$pop-&gt;apop( $username, $password )
    or die &quot;Couldn't authenticate: $!\n&quot;;</PRE
><p class="para">Once authenticated, you may then access the spool with <code class="literal">list</CODE
>, <code class="literal">get</CODE
>, and <code class="literal">delete</CODE
>. The <code class="literal">list</CODE
> method gives you a list of undeleted messages in the spool. It returns a hash, where each key is a message number and each value is the size of the corresponding message in bytes:</P
><pre class="programlisting">%undeleted = $pop-&gt;<code class="literal">list();</CODE
>
foreach $msgnum (keys %undeleted) {
    print &quot;Message $msgnum is $undeleted{$msgnum} bytes long.\n&quot;;
}</PRE
><p class="para">To retrieve a message, call <code class="literal">get</CODE
> with the message number. It returns a reference an array of lines in the message:</P
><pre class="programlisting">print &quot;Retrieving $msgnum : &quot;;
$message = $pop-&gt;get($msgnum);
if ($message) {
    # succeeded
    print &quot;\n&quot;;
    print @$message;                # print the message
} else {
        # failed
    print &quot;failed ($!)\n&quot;;
}</PRE
><p class="para">The <code class="literal">delete</CODE
> method marks a message as deleted. When you call <code class="literal">quit</CODE
> to terminate your POP3 session, the messages marked as deleted are removed from the mailbox. The <code class="literal">reset</CODE
> method undoes any <code class="literal">delete</CODE
> calls made during the session. If the session is terminated by the Net::POP3 object being destroyed because it went out of scope, the <code class="literal">reset</CODE
> will be called automatically.</P
><p class="para">You have probably noticed there's no way to <em class="emphasis">send</EM
> mail. POP3 only supports reading and deleting existing messages. To send new ones, you still have to use programs like <em class="emphasis">mail</EM
> or <em class="emphasis">sendmail</EM
>, or do <code class="literal">SMTP</CODE
>. In other words, you still need to use <a class="xref" href="ch18_04.htm" title="Sending Mail">Recipe 18.3</A
>.</P
><p class="para">The task attempted by POP3 &nbsp;-  connecting mail clients and mail servers &nbsp;-  is also attempted by the IMAP protocol. IMAP has more features and is more typically seen on very large sites.<a class="indexterm" name="ch18-idx-1000004311-0"></A
><a class="indexterm" name="ch18-idx-1000004311-1"></A
><a class="indexterm" name="ch18-idx-1000004311-2"></A
><a class="indexterm" name="ch18-idx-1000004311-3"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch18-pgfId-835">See Also</A
></H3
><p class="para">The documentation for the Net::POP3 module from CPAN; RFC 1734, <cite class="citetitle">POP3 AUTHentication command</CITE
>; RFC 1957, <cite class="citetitle">Some Observations on Implementations of the Post Office Protocol</CITE
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch18_05.htm" title="18.4. Reading and Posting Usenet News Messages"><img src="../gifs/txtpreva.gif" alt="Previous: 18.4. Reading and Posting Usenet News Messages" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch18_07.htm" title="18.6. Simulating Telnet from a Program"><img src="../gifs/txtnexta.gif" alt="Next: 18.6. Simulating Telnet from a Program" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">18.4. Reading and Posting Usenet News Messages</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">18.6. Simulating Telnet from a Program</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
