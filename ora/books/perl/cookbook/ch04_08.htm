<html><head>
<title>Recipe 4.7. Finding Elements in One Array but Not Another</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:31:34Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch04_01.htm" title="4. Arrays"><link rel="prev" href="ch04_07.htm" title="4.6. Extracting Unique Elements from a List"><link rel="next" href="ch04_09.htm" title="4.8. Computing Union, Intersection, or Difference of Unique Lists"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><index.htmlmap name="srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch04_07.htm" title="4.6. Extracting Unique Elements from a List"><img src="../gifs/txtpreva.gif" alt="Previous: 4.6. Extracting Unique Elements from a List" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch04_01.htm" title="4. Arrays">Chapter 4<br>Arrays</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch04_09.htm" title="4.8. Computing Union, Intersection, or Difference of Unique Lists"><img src="../gifs/txtnexta.gif" alt="Next: 4.8. Computing Union, Intersection, or Difference of Unique Lists" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch04-29725">4.7. Finding Elements in One Array but Not Another</A
></H2
><div class="sect2"><h3 class="sect2"><a class="title" name="ch04-pgfId-721">Problem <a class="indexterm" name="ch04-idx-1000006659-0"></A
><a class="indexterm" name="ch04-idx-1000006659-1"></A
><a class="indexterm" name="ch04-idx-1000006659-2"></A
><a class="indexterm" name="ch04-idx-1000006659-3"></A
><a class="indexterm" name="ch04-idx-1000006659-4"></A
><a class="indexterm" name="ch04-idx-1000006659-5"></A
></A
></H3
><p class="para">You want to find elements that are in one array but not another.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch04-pgfId-727">Solution</A
></H3
><p class="para">You want to find elements in <code class="literal">@A</CODE
> that aren't in <code class="literal">@B</CODE
>. Build a hash of the keys of <code class="literal">@B</CODE
> to use as a lookup table. Then check each element in <code class="literal">@A</CODE
> to see if it is in <code class="literal">@B</CODE
>.</P
><div class="sect3"><h4 class="sect3"><a class="title" name="ch04-pgfId-1000006463">Straightforward implementation</A
></H4
><pre class="programlisting"># assume @A and @B are already loaded
%seen = ();                  # lookup table to test membership of B
@aonly = ();                 # answer

# build lookup table
foreach $item (@B) { $seen{$item} = 1 }

# find only elements in @A and not in @B
foreach $item (@A) {
    unless ($seen{$item}) {
        # it's not in %seen, so add to @aonly
        push(@aonly, $item);
    }
}</PRE
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="ch04-pgfId-1000006484">More idiomatic version</A
></H4
><pre class="programlisting">my %seen; # lookup table
my @aonly;# answer

# build lookup table
@seen{@B} = ();

foreach $item (@A) {
    push(@aonly, $item) unless exists $seen{$item};
}</PRE
></DIV
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch04-pgfId-733">Discussion</A
></H3
><p class="para"><a class="indexterm" name="ch04-idx-1000006682-0"></A
>As with nearly any problem in Perl that asks whether a scalar is in one list or another, this one uses a hash. First, process <code class="literal">@B</CODE
> so that the <code class="literal">%seen</CODE
> hash records each element from <code class="literal">@B</CODE
> by setting its value to 1. Then process <code class="literal">@A</CODE
> one element at a time, checking whether that particular element had been in <code class="literal">@B</CODE
> by consulting the <code class="literal">%seen</CODE
> hash.</P
><p class="para">The given code retains duplicate elements in <code class="literal">@A  </CODE
>. This can be easily fixed by adding the elements of <code class="literal">@A</CODE
> to <code class="literal">%seen</CODE
> as they are processed:</P
><pre class="programlisting">foreach $item (@A) {
    push(@aonly, $item) unless $seen{$item};
    $seen{$item} = 1;                       # mark as seen
}</PRE
><p class="para">The two solutions differ mainly in how they build the hash. The first iterates through <code class="literal">@B</CODE
>. The second uses a <em class="emphasis">hash slice</EM
> to initialize the hash. A <a class="indexterm" name="ch04-idx-1000006665-0"></A
>hash slice is easiest illustrated by example:</P
><pre class="programlisting">$hash{&quot;key1&quot;} = 1;
$hash{&quot;key2&quot;} = 2;</PRE
><p class="para">is equivalent to:</P
><pre class="programlisting">@hash{&quot;key1&quot;, &quot;key2&quot;} = (1,2);</PRE
><p class="para">The list in the curly braces holds the keys; the list on the right holds the values. We initialize <code class="literal">%seen</CODE
> in the first solution by looping over each element in <code class="literal">@B</CODE
> and setting the appropriate value of <code class="literal">%seen</CODE
> to 1. In the second, we simply say:</P
><pre class="programlisting">@seen{@B} = ();</PRE
><p class="para">This uses items in <code class="literal">@B</CODE
> as keys for <code class="literal">%seen</CODE
>, setting each corresponding value to <code class="literal">undef</CODE
>, because there are fewer values on the right than places to put them. This works out here because we check for existence of the key, not logical truth or <code class="literal">defined</CODE
>ness of the value. If we needed true values, a slice could still shorten our code:</P
><pre class="programlisting">@seen{@B} = (1) x @B;</PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch04-pgfId-767">See Also</A
></H3
><p class="para">Hash slices are explained in <i class="filename">perldata </I
>(1) and the <a class="olink" href="../prog/ch02_03.htm#PERL2-CH-2-SECT-3.1">"Variables"</A
> section of <a class="olink" href="../prog/ch02_01.htm">Chapter 2</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
>; <a class="xref" href="ch05_01.htm" title="Hashes">Chapter 5</A
>; we use hashes in a similar fashion in <a class="xref" href="ch04_07.htm" title="Extracting Unique Elements from a List">Recipe 4.6</A
> and <a class="xref" href="ch04_09.htm" title="Computing Union, Intersection, or Difference of Unique Lists">Recipe 4.8</A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch04_07.htm" title="4.6. Extracting Unique Elements from a List"><img src="../gifs/txtpreva.gif" alt="Previous: 4.6. Extracting Unique Elements from a List" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch04_09.htm" title="4.8. Computing Union, Intersection, or Difference of Unique Lists"><img src="../gifs/txtnexta.gif" alt="Next: 4.8. Computing Union, Intersection, or Difference of Unique Lists" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">4.6. Extracting Unique Elements from a List</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">4.8. Computing Union, Intersection, or Difference of Unique Lists</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
