<html><head>
<title>Recipe 11.9. Constructing Records</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:40:48Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch11_01.htm" title="11. References and Records"><link rel="prev" href="ch11_09.htm" title="11.8. Creating References to Methods"><link rel="next" href="ch11_11.htm" title="11.10. Reading and Writing Hash Records to Text Files"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch11_09.htm" title="11.8. Creating References to Methods"><img src="../gifs/txtpreva.gif" alt="Previous: 11.8. Creating References to Methods" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch11_01.htm" title="11. References and Records">Chapter 11<br>References and Records</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch11_11.htm" title="11.10. Reading and Writing Hash Records to Text Files"><img src="../gifs/txtnexta.gif" alt="Next: 11.10. Reading and Writing Hash Records to Text Files" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch11-13425">11.9. Constructing Records</A
></H2
><div class="sect2"><h3 class="sect2"><a class="title" name="ch11-pgfId-928">Problem<a class="indexterm" name="ch11-idx-1000004843-0"></A
></A
></H3
><p class="para">You want to create a record data type.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch11-pgfId-934">Solution</A
></H3
><p class="para">Use a reference to an anonymous hash.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch11-pgfId-940">Discussion</A
></H3
><p class="para">Suppose you wanted to create a data type that contained various data fields, akin to a C <code class="literal">struct</CODE
> or a Pascal RECORD. The easiest way is to use an anonymous hash. For example, here's how to initialize and use that record:</P
><pre class="programlisting">$record = {
    NAME   =&gt; &quot;Jason&quot;,
    EMPNO  =&gt; 132,
    TITLE  =&gt; &quot;deputy peon&quot;,
    AGE    =&gt; 23,
    SALARY =&gt; 37_000,
    PALS   =&gt; [ &quot;Norbert&quot;, &quot;Rhys&quot;, &quot;Phineas&quot;],
};

printf &quot;I am %s, and my pals are %s.\n&quot;,
    $record-&gt;{NAME},
    join(&quot;, &quot;, @{$record-&gt;{PALS}});</PRE
><p class="para">Just having one of these records isn't much fun &nbsp;-  you'd like to build larger structures. For example, you might want to create a <code class="literal">%ByName</CODE
> hash that you could initialize and use this way:</P
><pre class="programlisting"># store record
$byname{ $record-&gt;{NAME} } = $record;

# later on, look up by name
if ($rp = $byname{&quot;Aron&quot;}) {        # false if missing
    printf &quot;Aron is employee %d.\n&quot;, $rp-&gt;{EMPNO};
}

# give jason a new pal
push @{$byname{&quot;Jason&quot;}-&gt;{PALS}}, &quot;Theodore&quot;;
printf &quot;Jason now has %d pals\n&quot;, scalar @{$byname{&quot;Jason&quot;}-&gt;{PALS}};</PRE
><p class="para">That makes <code class="literal">%byname</CODE
> a hash of hashes, because its values are hash references. Looking up employees by name would be easy using such a structure. If we find a value in the hash, we store a reference to the record in a temporary variable, <code class="literal">$rp</CODE
>, which we then use to get any field we want.</P
><p class="para">We can use our existing hash tools to manipulate <code class="literal">%byname</CODE
>. For instance, we could use the <code class="literal">each</CODE
> iterator to loop through it in an arbitrary order:</P
><pre class="programlisting"># Go through all records
while (($name, $record) = each %byname) {
    printf &quot;%s is employee number %d\n&quot;, $name, $record-&gt;{EMPNO};
}</PRE
><p class="para">What about looking employees up by employee number? Just build and use another data structure, an array of hashes called <code class="literal">@employees</CODE
>. If your employee numbers aren't consecutive (for instance, they jump from 1 to 159997) an array would be a bad choice. Instead, you should use a hash mapping employee number to record. For consecutive employee numbers, use an array:</P
><pre class="programlisting"># store record
$employees[ $record-&gt;{EMPNO} ] = $record;

# lookup by id
if ($rp = $employee[132]) {
    printf &quot;employee number 132 is %s\n&quot;, $rp-&gt;{NAME};
}</PRE
><p class="para">With a data structure like this, updating a record in one place effectively updates it everywhere. For example, this gives Jason a 3.5% raise:</P
><pre class="programlisting">$byname{&quot;Jason&quot;}-&gt;{SALARY} *= 1.035;</PRE
><p class="para">This change is reflected in all views of these records. Remember that both <code class="literal">$byname{&quot;Jason&quot;}</CODE
> and <code class="literal">$employees[132]</CODE
> refer to the same record because the references they contain refer to the same anonymous hash.</P
><p class="para">How would you select all records matching a particular criterion? This is what <code class="literal">grep</CODE
> is for. Here's how to get everyone with "peon" in their titles or all the 27-year-olds:</P
><pre class="programlisting">@peons   = grep { $_-&gt;{TITLE} =~ /peon/i } @employees;
@tsevens = grep { $_-&gt;{AGE}   == 27 }      @employees;</PRE
><p class="para">Each element of <code class="literal">@peons</CODE
> and <code class="literal">@tsevens</CODE
> is itself a reference to a record, making them arrays of hashes, like <code class="literal">@employees</CODE
>.</P
><p class="para">Here's how to print all records sorted in a particular order, say by age:</P
><pre class="programlisting"># Go through all records
foreach $rp (sort { $a-&gt;{AGE} &lt;=&gt; $b-&gt;{AGE} } values %byname) {
    printf &quot;%s is age %d.\n&quot;, $rp-&gt;{NAME}, $rp-&gt;{AGE};
    # or with a hash slice on the reference
    printf &quot;%s is employee number %d.\n&quot;, @$rp{'NAME','EMPNO'};
}</PRE
><p class="para">Rather than take time to sort them by age, you could just create another view of these records, <code class="literal">@byage</CODE
>. Each element in this array, <code class="literal">$byage[27]</CODE
> for instance, would be an array of all the records with that age. In effect, this is an array of arrays of hashes. You would build it this way:</P
><pre class="programlisting"># use @byage, an array of arrays of records
push @{ $byage[ $record-&gt;{AGE} ] }, $record;</PRE
><p class="para">Then you could find them all this way:</P
><pre class="programlisting">for ($age = 0; $age &lt;= $#byage; $age++) {
    next unless $byage[$age];
    print &quot;Age $age: &quot;;
    foreach $rp (@{$byage[$age]}) {
        print $rp-&gt;{NAME}, &quot; &quot;;
    }
    print &quot;\n&quot;;
}</PRE
><p class="para">A similar approach is to use <code class="literal">map</CODE
> to avoid the <code class="literal">foreach</CODE
> loop:</P
><pre class="programlisting">for ($age = 0; $age &lt;= $#byage; $age++) {
    next unless $byage[$age];
    printf &quot;Age %d: %s\n&quot;, $age,
        join(&quot;, &quot;, map {$_-&gt;{NAME}} @{$byage[$age]});<a class="indexterm" name="ch11-idx-1000004845-0"></A
>
}</PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch11-pgfId-1000005735">See Also</A
></H3
><p class="para"><a class="xref" href="ch04_14.htm" title="Finding All Elements in an Array Matching Certain Criteria">Recipe 4.13</A
>; <a class="xref" href="ch11_04.htm" title="Taking References to Hashes">Recipe 11.3</A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch11_09.htm" title="11.8. Creating References to Methods"><img src="../gifs/txtpreva.gif" alt="Previous: 11.8. Creating References to Methods" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch11_11.htm" title="11.10. Reading and Writing Hash Records to Text Files"><img src="../gifs/txtnexta.gif" alt="Next: 11.10. Reading and Writing Hash Records to Text Files" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">11.8. Creating References to Methods</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">11.10. Reading and Writing Hash Records to Text Files</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
