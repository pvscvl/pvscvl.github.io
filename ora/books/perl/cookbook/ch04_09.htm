<html><head>
<title>Recipe 4.8. Computing Union, Intersection, or Difference of Unique Lists</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:31:46Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch04_01.htm" title="4. Arrays"><link rel="prev" href="ch04_08.htm" title="4.7. Finding Elements in One Array but Not Another"><link rel="next" href="ch04_10.htm" title="4.9. Appending One Array to Another"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map naindex.htmlme="srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch04_08.htm" title="4.7. Finding Elements in One Array but Not Another"><img src="../gifs/txtpreva.gif" alt="Previous: 4.7. Finding Elements in One Array but Not Another" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch04_01.htm" title="4. Arrays">Chapter 4<br>Arrays</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch04_10.htm" title="4.9. Appending One Array to Another"><img src="../gifs/txtnexta.gif" alt="Next: 4.9. Appending One Array to Another" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch04-13496">4.8. Computing Union, Intersection, or Difference of Unique Lists</A
></H2
><div class="sect2"><h3 class="sect2"><a class="title" name="ch04-pgfId-777">Problem</A
></H3
><p class="para">You have a pair of lists, each having unduplicated items. You'd like to find out which items are in both lists (<i class="firstterm">intersection</I
>), one but not the other (<i class="firstterm">difference</I
>), or either (<i class="firstterm">union</I
>).</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch04-pgfId-783">Solution</A
></H3
><p class="para">The following solutions need the listed initializations:</P
><pre class="programlisting">@a = (1, 3, 5, 6, 7, 8);
@b = (2, 3, 5, 7, 9);

@union = @isect = @diff = ();
%union = %isect = ();
%count = ();</PRE
><div class="sect3"><h4 class="sect3"><a class="title" name="ch04-pgfId-1000005746">Simple solution for union and intersection</A
></H4
><pre class="programlisting">foreach $e (@a) { $union{$e} = 1 }

foreach $e (@b) {
    if ( $union{$e} ) { $isect{$e} = 1 }
    $union{$e} = 1;
}
@union = keys %union;
@isect = keys %isect;</PRE
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="ch04-29528">More idiomatic version</A
></H4
><pre class="programlisting">foreach $e (@a, @b) { $union{$e}++ &amp;&amp; $isect{$e}++ }

@union = keys %union;
@isect = keys %isect;</PRE
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="ch04-pgfId-1000005764">Union, intersection, and symmetric difference<a class="indexterm" name="ch04-idx-1000006686-0"></A
></A
></H4
><pre class="programlisting">foreach $e (@a, @b) { $count{$e}++ }

foreach $e (keys %count) {
    push(@union, $e);
    if ($count{$e} == 2) {
        push @isect, $e;
    } else {
        push @diff, $e;
    }
}</PRE
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="ch04-pgfId-1000005777">Indirect solution</A
></H4
><pre class="programlisting">@isect = @diff = @union = ();

foreach $e (@a, @b) { $count{$e}++ }

foreach $e (keys %count) {
    push(@union, $e);
    push @{ $count{$e} == 2 ? \@isect : \@diff }, $e;
}</PRE
></DIV
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch04-pgfId-801">Discussion</A
></H3
><p class="para">The first solution most directly computes the union and intersection of two lists, neither containing duplicates. Two different hashes are used to record whether a particular item goes in the union or the intersection. We first put every element of the first array in the union hash, giving it a true value. Then processing each element of the second array, we check whether that element is already present in the union. If it is, then we put it in the intersection as well. In any event, it is put into the union. When we're done, we extract the keys of both the union and intersection hashes. The values aren't needed.</P
><p class="para">The second solution (<a class="xref" href="#ch04-29528" title="More idiomatic version">"More idiomatic version</A
>") is essentially the same but relies on familiarity with the Perl (and <em class="emphasis">awk</EM
>, C, C++, and Java) <code class="literal">++</CODE
> and <code class="literal">&amp;&amp;</CODE
> operators. By placing the <code class="literal">++</CODE
> after the variable, we first look at its old value before incrementing it. The first time through it won't be in the union, which makes the first part of the <code class="literal">&amp;&amp;</CODE
> false, and the second part is consequently ignored. The second time that we encounter the same element, it's already present in the union, so we put it in the intersection as well.</P
><p class="para">The third solution uses just one hash to track how many times each element has been seen. Once both arrays have their elements recorded in the hash, we process those hash keys one at a time. If it's there, it goes in the union array. Keys whose values are 2 were in both arrays, so they are put in the intersection array. Keys whose values are 1 were in just one of the two arrays, so they are put in the difference array. The elements of the output arrays are not in the same order as the elements in the input arrays.</P
><p class="para">The last solution, like the previous one, uses just one hash to count how many times each element has been encountered. However, this time we choose the array within the <code class="literal">@{</CODE
> <code class="literal">....</CODE
> <code class="literal">}</CODE
> block.</P
><p class="para">We compute the symmetric difference here, not the simple difference. These are set theoretic terms. A <i class="firstterm">symmetric</I
> difference is the set of all the elements that are members of either <code class="literal">@A</CODE
> or <code class="literal">@B</CODE
>, but not of both. A <i class="filename">simple difference</I
> is the set of members of <code class="literal">@A</CODE
> but not of <code class="literal">@B</CODE
>, which we calculated in <a class="xref" href="ch04_08.htm" title="Finding Elements in One Array but Not Another">Recipe 4.7</A
>.<a class="indexterm" name="ch04-idx-1000007368-0"></A
><a class="indexterm" name="ch04-idx-1000007368-1"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch04-pgfId-1000007370">See Also</A
></H3
><p class="para">The <a class="olink" href="../prog/ch02_03.htm#PERL2-CH-2-SECT-3.1">"Hashes (Associative Arrays)"</A
> section of <a class="olink" href="../prog/ch02_01.htm">Chapter 2</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
>; <a class="xref" href="ch05_01.htm" title="Hashes">Chapter 5</A
>; we use hashes in a similar fashion in <a class="xref" href="ch04_07.htm" title="Extracting Unique Elements from a List">Recipe 4.6</A
> and <a class="xref" href="ch04_08.htm" title="Finding Elements in One Array but Not Another">Recipe 4.7</A
> <a class="indexterm" name="ch04-idx-1000007377-0"></A
><a class="indexterm" name="ch04-idx-1000007377-1"></A
><a class="indexterm" name="ch04-idx-1000007377-2"></A
><a class="indexterm" name="ch04-idx-1000007377-3"></A
><a class="indexterm" name="ch04-idx-1000007377-4"></A
><a class="indexterm" name="ch04-idx-1000007377-5"></A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch04_08.htm" title="4.7. Finding Elements in One Array but Not Another"><img src="../gifs/txtpreva.gif" alt="Previous: 4.7. Finding Elements in One Array but Not Another" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch04_10.htm" title="4.9. Appending One Array to Another"><img src="../gifs/txtnexta.gif" alt="Next: 4.9. Appending One Array to Another" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">4.7. Finding Elements in One Array but Not Another</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">4.9. Appending One Array to Another</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
