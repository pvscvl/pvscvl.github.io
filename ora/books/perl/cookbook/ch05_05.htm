<html><head>
<title>Recipe 5.4. Traversing a Hash</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:32:33Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch05_01.htm" title="5. Hashes"><link rel="prev" href="ch05_04.htm" title="5.3. Deleting from a Hash"><link rel="next" href="ch05_06.htm" title="5.5. Printing a Hash"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch05_04.htm" title="5.3. Deleting from a Hash"><img src="../gifs/txtpreva.gif" alt="Previous: 5.3. Deleting from a Hash" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch05_01.htm" title="5. Hashes">Chapter 5<br>Hashes</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch05_06.htm" title="5.5. Printing a Hash"><img src="../gifs/txtnexta.gif" alt="Next: 5.5. Printing a Hash" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch05-37034">5.4. Traversing a Hash</A
></H2
><div class="sect2"><h3 class="sect2"><a class="title" name="ch05-pgfId-386">Problem<a class="indexterm" name="ch05-idx-1000006438-0"></A
><a class="indexterm" name="ch05-idx-1000006438-1"></A
></A
></H3
><p class="para">You want to perform an action on each entry (i.e., each key-value pair) in a hash.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch05-pgfId-392">Solution</A
></H3
><p class="para">Use <code class="literal">each</CODE
> with a <code class="literal">while</CODE
> loop:</P
><pre class="programlisting">while(($key, $value) = each(%HASH)) {
    # do something with $key and $value
}</PRE
><p class="para">Or use <code class="literal">keys</CODE
><a class="indexterm" name="ch05-idx-1000006451-0"></A
> with a <code class="literal">foreach</CODE
> loop, unless the hash is potentially very large:</P
><pre class="programlisting">foreach $key (keys %HASH) {
    $value = $HASH{$key};
    # do something with $key and $value
}</PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch05-pgfId-414">Discussion</A
></H3
><p class="para">Here's a simple example, iterating through the <code class="literal">%food_color</CODE
> hash from the introduction.</P
><pre class="programlisting"># %food_color per the introduction
while(($food, $color) = each(%food_color)) {
    print &quot;$food is $color.\n&quot;;
}
<code class="userinput"><b><code class="replaceable"><i>Banana is yellow.</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>Apple is red.</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>Carrot is orange.</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>Lemon is yellow.</I
></CODE
></B
></CODE
>

foreach $food (keys %food_color) {
    my $color = $food_color{$food};
    print &quot;$food is $color.\n&quot;;
}
<code class="userinput"><b><code class="replaceable"><i>Banana is yellow.</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>Apple is red.</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>Carrot is orange.</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>Lemon is yellow.</I
></CODE
></B
></CODE
></PRE
><p class="para">We didn't really need the <code class="literal">$color</CODE
> variable in the <code class="literal">foreach</CODE
> example because we only use it once. Instead, we could have just written:</P
><pre class="programlisting"><code class="literal">print</CODE
> <code class="literal">&quot;$food</CODE
> <code class="literal">is</CODE
> <code class="literal">$food_color{$food}.\n&quot;</CODE
> </PRE
><p class="para">Every time <code class="literal">each</CODE
> is called on the same hash, it returns the "next" key-value pair. We say "next" because the pairs are returned in the order the underlying lookup structure imposes on them, and this order is almost never alphabetic or numeric. When <code class="literal">each</CODE
> runs out of hash elements, it returns the empty list <code class="literal">()</CODE
>, which tests false and terminates the <code class="literal">while</CODE
> loop.</P
><p class="para">The <code class="literal">foreach</CODE
> example uses <code class="literal">keys</CODE
>, which constructs an entire list containing every key from hash, before the loop even begins executing. The advantage to using <code class="literal">each</CODE
> is that it gets the keys and values one pair at a time. If the hash contains many keys, not having to pre-construct a complete list of them can save substantial memory. The <code class="literal">each</CODE
> function, however, doesn't let you control the order in which pairs are processed.</P
><p class="para">Using <code class="literal">foreach</CODE
> and <code class="literal">keys</CODE
> to loop over the list lets you impose an order. For instance, if we wanted to print the food names in alphabetical order:</P
><pre class="programlisting">foreach $food (sort keys %food_color) {
    print &quot;$food is $food_color{$food}.\n&quot;;
}
<code class="userinput"><b><code class="replaceable"><i>Apple is red.</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>Banana is yellow.</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>Carrot is orange.</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>Lemon is yellow.</I
></CODE
></B
></CODE
></PRE
><p class="para">This is a common use of <code class="literal">foreach</CODE
>. We use <code class="literal">keys</CODE
> to obtain a list of keys in the hash, and then we use <code class="literal">foreach</CODE
> to iterate over them. The danger is that if the hash contains a large number of elements, the list returned by <code class="literal">keys</CODE
> will use a lot of memory. The trade-off lies between memory use and the ability to process the entries in a particular order. We cover sorting in more detail in <a class="xref" href="ch05_10.htm" title="Sorting a Hash">Recipe 5.9</A
>.</P
><p class="para">Because <code class="literal">keys</CODE
>, <code class="literal">values</CODE
>, and <code class="literal">each</CODE
> all use the same internal data structures, be careful about mixing calls to these functions or prematurely exiting an <code class="literal">each</CODE
> loop. Each time you call <code class="literal">keys</CODE
> or <code class="literal">values</CODE
>, the current location for <code class="literal">each</CODE
> is reset. This code loops forever, printing the first key returned by <code class="literal">each</CODE
>:</P
><pre class="programlisting">while ( ($k,$v) = each %food_color ) {
    print &quot;Processing $k\n&quot;;
    keys %food_color;               # goes back to the start of %food_color
}</PRE
><p class="para">Modifying a hash while looping over it with <code class="literal">each</CODE
> or <code class="literal">foreach</CODE
> is, in general, fraught with danger. The <code class="literal">each</CODE
> function can behave differently with <code class="literal">tie</CODE
>d and untied hashes when you add or delete keys from a hash. A <code class="literal">foreach</CODE
> loops over a pre-generated list of keys, so once the loop starts, <code class="literal">foreach</CODE
> can't know whether you've added or deleted keys. Keys added in the body of the loop aren't automatically appended to the list of keys to loop over, nor are keys deleted by the body of the loop deleted from this list.</P
><p class="para"><a class="xref" href="#ch05-34568" title="countfrom">Example 5.1</A
> reads a mailbox file and reports on the number of messages from each person. It uses the <code class="literal">From:</CODE
> line to determine the sender. (It isn't smart in this respect, but we're showing hash manipulation, not mail-file processing.) Supply the mailbox filename as a command-line argument, or use <code class="literal">&quot;-&quot;</CODE
> to indicate you're piping the mailbox to the program.</P
><div class="example"><h4 class="example"><a class="title" name="ch05-34568">Example 5.1: countfrom</A
></H4
><pre class="programlisting">#!/usr/bin/perl
# countfrom - count number of messages from each sender

$filename = $ARGV[0] || &quot;-&quot;;

open(FILE, &quot;&lt;$filename&quot;)            or die &quot;Can't open $filename : $!&quot;;

while(&lt;FILE&gt;) {
    if (/^From: (.*)/) { $from{$1}++ }
}

foreach $person (sort keys %from) {
    print &quot;$person: $from{$person}\n&quot;;
}</PRE
></DIV
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch05-pgfId-518">See Also</A
></H3
><p class="para">The <code class="literal">each</CODE
> and <code class="literal">keys</CODE
> functions in <em class="emphasis">perlfunc </EM
>(1) and in <a class="olink" href="../prog/ch03_01.htm">Chapter 3</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
>; we talk about for and foreach in <a class="xref" href="ch04_06.htm" title="Iterating Over an Array by Reference">Recipe 4.5</A
><a class="indexterm" name="ch05-idx-1000006440-0"></A
><a class="indexterm" name="ch05-idx-1000006440-1"></A
><a class="indexterm" name="ch05-idx-1000006440-2"></A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch05_04.htm" title="5.3. Deleting from a Hash"><img src="../gifs/txtpreva.gif" alt="Previous: 5.3. Deleting from a Hash" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch05_06.htm" title="5.5. Printing a Hash"><img src="../gifs/txtnexta.gif" alt="Next: 5.5. Printing a Hash" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">5.3. Deleting from a Hash</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">5.5. Printing a Hash</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
