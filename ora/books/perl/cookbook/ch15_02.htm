<html><head>
<title>Recipe 15.1. Parsing Program Arguments</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:43:14Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch15_01.htm" title="15. User Interfaces"><link rel="prev" href="ch15_01.htm" title="15.0. Introduction"><link rel="next" href="ch15_03.htm" title="15.2. Testing Whether a Program Is Running Interactively"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch15_01.htm" title="15.0. Introduction"><img src="../gifs/txtpreva.gif" alt="Previous: 15.0. Introduction" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch15_01.htm" title="15. User Interfaces">Chapter 15<br>User Interfaces</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch15_03.htm" title="15.2. Testing Whether a Program Is Running Interactively"><img src="../gifs/txtnexta.gif" alt="Next: 15.2. Testing Whether a Program Is Running Interactively" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch15-34446">15.1. Parsing Program Arguments</A
></H2
><div class="sect2"><h3 class="sect2"><a class="title" name="ch15-pgfId-83">Problem<a class="indexterm" name="ch15-idx-1000005023-0"></A
><a class="indexterm" name="ch15-idx-1000005023-1"></A
><a class="indexterm" name="ch15-idx-1000005023-2"></A
><a class="indexterm" name="ch15-idx-1000005023-3"></A
><a class="indexterm" name="ch15-idx-1000005023-4"></A
><a class="indexterm" name="ch15-idx-1000005023-5"></A
></A
></H3
><p class="para">You want to let users change your program's behavior by giving options on the command line. For instance, you want to allow the user to control the level of output that your program produces with a <b class="emphasis.bold">-v</B
> (verbose) option.<a class="indexterm" name="ch15-idx-1000005062-0"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch15-pgfId-89">Solution</A
></H3
><p class="para">Use the standard Getopt::Std module to permit single-character options:</P
><pre class="programlisting">use Getopt::Std;

# -v ARG, -D ARG, -o ARG, sets $opt_v, $opt_D, $opt_o
getopt(&quot;vDo&quot;);              
# -v ARG, -D ARG, -o ARG, sets $args{v}, $args{D}, $args{o}
getopt(&quot;vDo&quot;, \%args);

getopts(&quot;vDo:&quot;);         # -v, -D, -o ARG, sets $opt_v, $opt_D, $opt_o
getopts(&quot;vDo:&quot;, \%args); # -v, -D, -o ARG, sets $args{v}, $args{D}, $args{o}</PRE
><p class="para">Or, use the standard <a class="indexterm" name="ch15-idx-1000005033-0"></A
>Getopt::Long module to permit named arguments:</P
><pre class="programlisting">use Getopt::Long;

GetOptions( &quot;verbose&quot;  =&gt; \$verbose,     # --verbose
            &quot;Debug&quot;    =&gt; \$debug,       # --Debug
            &quot;output=s&quot; =&gt; \$output );    # --output=string or --output=string</PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch15-pgfId-119">Discussion</A
></H3
><p class="para">Most traditional programs like <em class="emphasis">ls</EM
> and <em class="emphasis">rm</EM
> take single-character options (also known as flags or switches), such as <b class="emphasis.bold">-l</B
> and <b class="emphasis.bold">-r</B
>. In the case of <em class="emphasis">ls -l</EM
> and <em class="emphasis">rm -r</EM
>, the argument is Boolean: either it is present or it isn't. Contrast this with <em class="emphasis">gcc -o compiledfile source.c</EM
>, where <em class="emphasis">compiledfile</EM
> is a value associated with the option <b class="emphasis.bold">-o</B
>. We can combine Boolean options into a single option in any order. For example:</P
><pre class="programlisting">% rm -r -f /tmp/testdir</PRE
><p class="para">Another way of saying this is:</P
><pre class="programlisting">% rm -rf /tmp/testdir</PRE
><p class="para">The Getopt::Std module, part of the standard Perl distribution, parses these types of traditional options. Its <code class="literal">getopt</CODE
><a class="indexterm" name="ch15-idx-1000005035-0"></A
> function takes a single string of characters, each corresponding to an option that takes a value, parses the command-line arguments stored in <code class="literal">@ARGV</CODE
>, and sets a global variable for each option. For example, the value for the <b class="emphasis.bold">-D</B
> option will be stored in <code class="literal">$opt_D</CODE
>. All options parsed though <code class="literal">getopt</CODE
> are value options, not Boolean options.</P
><p class="para">Getopt::Std also provides the <code class="literal">getopts</CODE
><a class="indexterm" name="ch15-idx-1000005034-0"></A
> function, which lets you specify whether each option is Boolean or takes a value. Arguments that take a value, like the <b class="emphasis.bold">-o</B
> option to <em class="emphasis">gcc</EM
>, are indicated by a <code class="literal">:</CODE
>, as in this code:</P
><pre class="programlisting">use Getopt::Std;
getopts(&quot;o:&quot;);
if ($opt_o) {
    print &quot;Writing output to $opt_o&quot;;
}</PRE
><p class="para">Both <code class="literal">getopt</CODE
> and <code class="literal">getopts</CODE
> can take a second argument, a reference to a hash. If present, option values are stored in <code class="literal">$hash{X}</CODE
> instead of <code class="literal">$opt_X</CODE
>:</P
><pre class="programlisting">use Getopt::Std;

%option = ();
getopts(&quot;Do:&quot;, \%option);

if ($option{D}) {
    print &quot;Debugging mode enabled.\n&quot;;
}

 # if not set, set output to &quot;-&quot;.  opening &quot;-&quot; for writing
 # means STDOUT
 $option{o} = &quot;-&quot; unless defined $option{o};
                             
print &quot;Writing output to file $option{o}\n&quot; unless $option{o} eq &quot;-&quot;;
open(STDOUT, &quot;&gt; $option{o}&quot;)
     or die &quot;Can't open $option{o} for output: $!\n&quot;;</PRE
><p class="para">You can specify some programs' options using full words instead of single characters. These options are (usually) indicated with two dashes instead of one:</P
><pre class="programlisting">% gnutar --extract --file latest.tar</PRE
><p class="para">The value for the <b class="emphasis.bold">- -file</B
> option could also be given with an equals sign:</P
><pre class="programlisting">% gnutar --extract --file=latest.tar</PRE
><p class="para">The Getopt::Long module's <code class="literal">GetOptions</CODE
><a class="indexterm" name="ch15-idx-1000005036-0"></A
> function parses this style of options. It takes a hash whose keys are options and values are references to scalar variables:</P
><pre class="programlisting">use Getopt::Long;

GetOptions( &quot;extract&quot; =&gt; \$extract,
            &quot;file=s&quot;  =&gt; \$file );

if ($extract) {
    print &quot;I'm extracting.\n&quot;;
}

die &quot;I wish I had a file&quot; unless defined $file;
print &quot;Working on the file $file\n&quot;;</PRE
><p class="para">If a key in the hash is just an option name, it's a Boolean option. The corresponding variable will be set to false if the option wasn't given, or to <code class="literal">1</CODE
> if it was. <a class="indexterm" name="ch15-idx-1000005224-0"></A
><a class="indexterm" name="ch15-idx-1000005224-1"></A
>Getopt::Long provides fancier options than just the Boolean and value of Getopt::Std. Here's what the option specifier can look like:</P
><table class="informaltable" border="1" cellpadding="3"><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1"><p class="para">Specifier</P
></TH
><th class="entry" align="LEFT" rowspan="1" colspan="1"><p class="para">Value?</P
></TH
><th class="entry" align="LEFT" rowspan="1" colspan="1"><p class="para">Comment</P
></TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">option</CODE
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">No</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Given as -  -<code class="literal">option</CODE
> or not at all</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">option!</CODE
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">No</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">May be given as -  -<code class="literal">option</CODE
> or -  -<code class="literal">nooption</CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">option=s</CODE
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Yes</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Mandatory string parameter: -  -<code class="literal">option</CODE
>=<code class="literal">somestring</CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">option:s</CODE
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Yes</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Optional string parameter: -  -<code class="literal">option</CODE
> or -  -<code class="literal">option</CODE
>=<code class="literal">somestring</CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">option=i</CODE
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Yes</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Mandatory integer parameter: -  -<code class="literal">option</CODE
>=<code class="literal">35</CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">option:i</CODE
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Yes</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Optional integer parameter: -  -<code class="literal">option</CODE
> or -  -<code class="literal">option</CODE
>=<code class="literal">35</CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">option=f</CODE
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Yes</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Mandatory floating point parameter: -  -<code class="literal">option</CODE
>=<code class="literal">3.141</CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">option:f</CODE
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Yes</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Optional floating point parameter: -  -<code class="literal">option</CODE
> or -  -<code class="literal">option</CODE
><a class="indexterm" name="ch15-idx-1000005060-0"></A
>=<code class="literal">3.141</CODE
><a class="indexterm" name="ch15-idx-1000005025-0"></A
><a class="indexterm" name="ch15-idx-1000005025-1"></A
><a class="indexterm" name="ch15-idx-1000005025-2"></A
><a class="indexterm" name="ch15-idx-1000005025-3"></A
><a class="indexterm" name="ch15-idx-1000005025-4"></A
><a class="indexterm" name="ch15-idx-1000005025-5"></A
></P
></TD
></TR
></TBODY
></TABLE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch15-pgfId-229">See Also</A
></H3
><p class="para">The documentation for the standard Getopt::Long and Getopt::Std modules; examples of argument parsing by hand can be found in <a class="xref" href="ch01_06.htm" title="Processing a String One Character at a Time">Recipe 1.5</A
>, <a class="xref" href="ch01_18.htm" title="Program: fixstyle">Recipe 1.17</A
>, <a class="xref" href="ch06_23.htm" title="Program: tcgrep">Recipe 6.22</A
>, <a class="xref" href="ch07_08.htm" title="Writing a Filter">Recipe 7.7</A
>, <a class="xref" href="ch08_20.htm" title="Program: tctee">Recipe 8.19</A
>, and <a class="xref" href="ch15_13.htm" title="Managing the Screen">Recipe 15.12</A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch15_01.htm" title="15.0. Introduction"><img src="../gifs/txtpreva.gif" alt="Previous: 15.0. Introduction" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch15_03.htm" title="15.2. Testing Whether a Program Is Running Interactively"><img src="../gifs/txtnexta.gif" alt="Next: 15.2. Testing Whether a Program Is Running Interactively" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">15.0. Introduction</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">15.2. Testing Whether a Program Is Running Interactively</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
