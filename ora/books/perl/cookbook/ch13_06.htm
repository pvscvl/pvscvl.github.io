<html><head>
<title>Recipe 13.5. Using Classes as Structs</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:42:20Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch13_01.htm" title="13. Classes, Objects, and Ties"><link rel="prev" href="ch13_05.htm" title="13.4. Managing Class Data"><link rel="next" href="ch13_07.htm" title="13.6. Cloning Objects"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch13_05.htm" title="13.4. Managing Class Data"><img src="../gifs/txtpreva.gif" alt="Previous: 13.4. Managing Class Data" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch13_01.htm" title="13. Classes, Objects, and Ties">Chapter 13<br>Classes, Objects, and Ties</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch13_07.htm" title="13.6. Cloning Objects"><img src="../gifs/txtnexta.gif" alt="Next: 13.6. Cloning Objects" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch13-21970">13.5. Using Classes as Structs</A
></H2
><div class="sect2"><h3 class="sect2"><a class="title" name="ch13-pgfId-713">Problem<a class="indexterm" name="ch13-idx-1000004525-0"></A
><a class="indexterm" name="ch13-idx-1000004525-1"></A
><a class="indexterm" name="ch13-idx-1000004525-2"></A
><a class="indexterm" name="ch13-idx-1000004525-3"></A
></A
></H3
><p class="para">You're used to structured data types more complex than Perl's arrays and hashes, such as C's structs and Pascal's records. You've heard that Perl's classes are comparable, but you aren't an object-oriented programmer.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch13-pgfId-719">Solution</A
></H3
><p class="para">Use the standard Class::Struct module to declare C-like structures:</P
><pre class="programlisting">use Class::Struct;          # load struct-building module

struct Person =&gt; {          # create a definition for a &quot;Person&quot;
    name   =&gt; '$',          #    name field is a scalar
    age    =&gt; '$',          #    age field is also a scalar
    peers  =&gt; '@',          #    but peers field is an array (reference)
};

my $p = Person-&gt;<code class="literal">new()</CODE
>;      # allocate an empty Person struct

$p-&gt;name(&quot;Jason Smythe&quot;);                   # set its name field
$p-&gt;age(13);                                # set its age field
$p-&gt;peers( [&quot;Wilbur&quot;, &quot;Ralph&quot;, &quot;Fred&quot; ] );  # set its peers field

# or this way:
@{$p-&gt;peers} = (&quot;Wilbur&quot;, &quot;Ralph&quot;, &quot;Fred&quot;);

# fetch various values, including the zeroth friend
printf &quot;At age %d, %s's first friend is %s.\n&quot;,
    $p-&gt;age, $p-&gt;name, $p-&gt;peers(0);</PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch13-pgfId-765">Discussion</A
></H3
><p class="para">The <code class="literal">Class::Struct::struct</CODE
><a class="indexterm" name="ch13-idx-1000004531-0"></A
> function builds struct-like classes on the fly. It creates a class of the name given in the first argument, and gives the class a constructor named <code class="literal">new</CODE
> and per-field accessor methods.</P
><p class="para">In the structure layout definition, the keys are the names of the fields and the values are the data type. This type can be one of the three base types, <code class="literal">'$'</CODE
> for scalars, <code class="literal">'@'</CODE
> for arrays, and <code class="literal">'%'</CODE
> for hashes. Each accessor method can be called without arguments to fetch the current value, or with an argument to set the value. In the case of a field whose type is an array or hash, a zero-argument method call returns a reference to the entire array or hash, a one-argument call retrieves the value at that subscript,[<a class="footnote" href="#ch13-pgfId-1000000614">1</A
>] and a two-argument call sets the value at that subscript.</P
><blockquote class="footnote"><div class="footnote"><p class="para"><a class="footnote" name="ch13-pgfId-1000000614">[1]</A
> Unless it's a reference, in which case it uses that as the new aggregate, with type checking.</P
></DIV
></BLOCKQUOTE
><p class="para">The type can even be the name of another named structure  &nbsp;-   or any class, for that matter  &nbsp;-   which provides a constructor named <code class="literal">new</CODE
>.</P
><pre class="programlisting">use Class::Struct;

struct Person =&gt; {name =&gt; '$',      age  =&gt; '$'};
struct Family =&gt; {head =&gt; 'Person', address =&gt; '$', members =&gt; '@'};

$folks  = Family-&gt;<code class="literal">new();</CODE
>
$dad    = $folks-&gt;head;
$dad-&gt;name(&quot;John&quot;);
$dad-&gt;age(34);

printf(&quot;%s's age is %d\n&quot;, $folks-&gt;head-&gt;name, $folks-&gt;head-&gt;age);</PRE
><p class="para">If you'd like to impose more parameter checking on the fields' values, supply your own version for the accessor method to override the default version. Let's say you wanted to make sure the age value contains only digits, and that it falls within reasonably human age requirements. Here's how that function might be coded:</P
><pre class="programlisting">sub Person::age {
    use Carp;
    my ($self, $age) = @_;
    if    (@_  &gt; 2) {  confess &quot;too many arguments&quot; } 
    elsif (@_ == 1) {  return $struct-&gt;{'age'}      }
    elsif (@_ == 2) {
        carp &quot;age `$age' isn't numeric&quot;   if $age !~ /^\d+/;
        carp &quot;age `$age' is unreasonable&quot; if $age &gt; 150;
        $self-&gt;{'age'} = $age;
    } 
} </PRE
><p class="para">If you want to provide warnings only when the <b class="emphasis.bold">-w</B
> command-line flag is used, check the <code class="literal">$^W</CODE
><a class="indexterm" name="ch13-idx-1000004532-0"></A
> variable:</P
><pre class="programlisting">if ($^W) { 
    carp &quot;age `$age' isn't numeric&quot;   if $age !~ /^\d+/;
    carp &quot;age `$age' is unreasonable&quot; if $age &gt; 150;
}</PRE
><p class="para">If you want to complain if <b class="emphasis.bold">-w</B
> is set, but to raise an exception if the user doesn't ask for warnings, do something like the following. Don't be confused by the pointer arrow; it's an indirect function call, not a method call.</P
><pre class="programlisting">my $gripe = $^W ? \&amp;carp : \&amp;croak;
$gripe-&gt;(&quot;age `$age' isn't numeric&quot;)   if $age !~ /^\d+/;
$gripe-&gt;(&quot;age `$age' is unreasonable&quot;) if $age &gt; 150;</PRE
><p class="para">Internally, the class is implemented using a hash, as most classes are. This makes your code easy to debug and manipulate. Consider the effect of printing out a structure in the debugger, for example. But the Class::Struct module also supports an array representation. Just specify the fields within square brackets instead of curly ones:</P
><pre class="programlisting">struct Family =&gt; [head =&gt; 'Person', address =&gt; '$', members =&gt; '@'];</PRE
><p class="para">Empirical evidence suggests that selecting the array representation instead of a hash trims between 10% and 50% off the memory consumption of your objects, and up to 33% of the access time. The cost is less informative debugging information and more mental overhead when writing override functions, such as <code class="literal">Person::age</CODE
> above. Choosing an array representation for the object would make it difficult to use inheritance. That's not an issue here, because C-style structures employ the much more easily understood notion of aggregation instead.</P
><p class="para">The <code class="literal">use</CODE
> <code class="literal">fields</CODE
> pragma in the 5.005 release of Perl provides the speed and space arrays with the expressiveness of hashes, and adds compile-time checking of an object's field names.</P
><p class="para">If all the fields are the same type, rather than writing it out this way:</P
><pre class="programlisting">struct Card =&gt; { 
    name    =&gt; '$',
    color   =&gt; '$',
    cost    =&gt; '$',
    type    =&gt; '$',
    release =&gt; '$',
    text    =&gt; '$',
};</PRE
><p class="para">you could use a <code class="literal">map</CODE
> to shorten it:</P
><pre class="programlisting">struct Card =&gt; map { $_ =&gt; '$' } qw(name color cost type release text);</PRE
><p class="para">Or, if you're a C programmer who prefers to precede the field name with its type, rather than vice-versa, just reverse the order:</P
><pre class="programlisting">struct hostent =&gt; { reverse qw{
    $ name
    @ aliases
    $ addrtype
    $ length
    @ addr_list
}};</PRE
><p class="para">You can even make aliases, in the (dubious) spirit of <code class="literal">#define</CODE
>, that allow the same field to be accessed under multiple aliases. In C you can say:</P
><pre class="programlisting">#define h_type h_addrtype
#define h_addr h_addr_list[0]</PRE
><p class="para">In Perl, you might try this:</P
><pre class="programlisting"># make (hostent object)-&gt;<code class="literal">type()</CODE
> same as (hostent object)-&gt;<code class="literal">addrtype()</CODE
>
*hostent::type = \&amp;hostent::addrtype;

# make (hostenv object)-&gt;<code class="literal">addr()</CODE
> same as (hostenv object)-&gt;addr_list(0)
sub hostent::addr { shift-&gt;addr_list(0,@_) }</PRE
><p class="para">As you see, you can add methods to a class  &nbsp;-   or functions to a package  &nbsp;-   simply by declaring a subroutine in the right namespace. You don't have to be in the file defining the class, subclass it, or do anything fancy and complicated. It would be much better to subclass it, however:</P
><pre class="programlisting">package Extra::hostent;
use Net::hostent;
@ISA = qw(hostent);
sub addr { shift-&gt;addr_list(0,@_) } 
1;</PRE
><p class="para">That one's already available in the standard Net::hostent class, so you needn't bother. Check out that module's source code as a form of inspirational reading. We can't be held responsible for what it inspires you to do, though.<a class="indexterm" name="ch13-idx-1000004527-0"></A
><a class="indexterm" name="ch13-idx-1000004527-1"></A
><a class="indexterm" name="ch13-idx-1000004527-2"></A
><a class="indexterm" name="ch13-idx-1000004527-3"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch13-pgfId-917">See Also</A
></H3
><p class="para"><i class="filename">perltoot </I
>(1), <i class="filename">perlobj </I
>(1), and <i class="filename">perlbot </I
>(1); the documentation for the standard Class::Struct module; the source code for the standard Net::hostent module; the documentation for the Alias module from CPAN; <a class="xref" href="ch13_04.htm" title="Managing Instance Data">Recipe 13.3</A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch13_05.htm" title="13.4. Managing Class Data"><img src="../gifs/txtpreva.gif" alt="Previous: 13.4. Managing Class Data" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch13_07.htm" title="13.6. Cloning Objects"><img src="../gifs/txtnexta.gif" alt="Next: 13.6. Cloning Objects" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">13.4. Managing Class Data</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">13.6. Cloning Objects</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
