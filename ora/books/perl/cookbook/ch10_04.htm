<html><head>
<title>Recipe 10.3. Creating Persistent Private Variables</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:39:37Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch10_01.htm" title="10. Subroutines"><link rel="prev" href="ch10_03.htm" title="10.2. Making Variables Private to a Function"><link rel="next" href="ch10_05.htm" title="10.4. Determining Current Function Name"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch10_03.htm" title="10.2. Making Variables Private to a Function"><img src="../gifs/txtpreva.gif" alt="Previous: 10.2. Making Variables Private to a Function" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch10_01.htm" title="10. Subroutines">Chapter 10<br>Subroutines</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch10_05.htm" title="10.4. Determining Current Function Name"><img src="../gifs/txtnexta.gif" alt="Next: 10.4. Determining Current Function Name" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch10-20398">10.3. Creating Persistent Private Variables</A
></H2
><div class="sect2"><h3 class="sect2"><a class="title" name="ch10-pgfId-246">Problem</A
></H3
><p class="para"><a class="indexterm" name="ch10-idx-1000004664-0"></A
>You want a variable to retain its value between calls to a subroutine but not be visible outside that routine. For instance, you'd like your function to keep track of how many times it was called.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch10-pgfId-252">Solution</A
></H3
><p class="para">Wrap the function in another block, and declare <code class="literal">my</CODE
> variables in that block's scope rather than the function's:</P
><pre class="programlisting">{
    my $variable;
    sub mysub {
        # ... accessing $variable
    }
}</PRE
><p class="para">If the variables require initialization, make that block a BEGIN so the variable is guaranteed to be set before the main program starts running:</P
><pre class="programlisting">BEGIN {
    my $variable = 1;                       # initial value
    sub othersub {                          # ... accessing $variable
    }
}</PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch10-pgfId-284">Discussion</A
></H3
><p class="para">Unlike local variables in C or C++, Perl's lexical variables don't necessarily get recycled just because their scope has exited. If something more permanent is still aware of the lexical, it will stick around. In this case, <code class="literal">mysub</CODE
> uses $<code class="literal">variable</CODE
>, so Perl doesn't reclaim the variable when the block around the definition of <code class="literal">mysub</CODE
> ends.</P
><p class="para">Here's how to write a counter:</P
><pre class="programlisting">{
    my $counter;
    sub next_counter { return ++$counter }
}</PRE
><p class="para">Each time <code class="literal">next_counter</CODE
> is called, it increments and returns the <code class="literal">$counter</CODE
> variable. The first time <code class="literal">next_counter</CODE
> is called, <code class="literal">$counter</CODE
> is undefined, so it behaves as though it were 0 for the <code class="literal">++</CODE
>. The variable is not part of <code class="literal">next_counter</CODE
>'s scope, but rather part of the block surrounding it. No code from outside can change <code class="literal">$counter</CODE
> except by calling <code class="literal">next_counter</CODE
>.</P
><p class="para">Generally, you should use a BEGIN for the extra scope. Otherwise, you could call the function before its variable were initialized.</P
><pre class="programlisting">BEGIN {
    my $counter = 42;
    sub next_counter { return ++$counter }
    sub prev_counter { return --$counter }
}</PRE
><p class="para">This technique creates the Perl equivalent of C's static variables. Actually, it's a little better. Rather than being limited to just one function, both functions share their private variable.<a class="indexterm" name="ch10-idx-1000004660-0"></A
><a class="indexterm" name="ch10-idx-1000004660-1"></A
><a class="indexterm" name="ch10-idx-1000004660-2"></A
><a class="indexterm" name="ch10-idx-1000004660-3"></A
><a class="indexterm" name="ch10-idx-1000004660-4"></A
><a class="indexterm" name="ch10-idx-1000004660-5"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch10-pgfId-316">See Also</A
></H3
><p class="para">The section on <a class="olink" href="../prog/ch04_03.htm#PERL2-CH-4-SECT-3.5">"Closures"</A
> in <a class="olink" href="../prog/ch04_01.htm">Chapter 4</A
>and on <a class="olink" href="../prog/ch05_01.htm">"Package Constructors and Destructors: BEGIN and END"</A
> in <a class="olink" href="../prog/ch05_01.htm">Chapter 5</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
>; the section on "Private Variables via my(  )" in <i class="filename">perlsub </I
>(1); the section on "Package Constructors and Destructors" in <i class="filename">perlmod </I
>(1); <a class="xref" href="ch11_05.htm" title="Taking References to Functions">Recipe 11.4</A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch10_03.htm" title="10.2. Making Variables Private to a Function"><img src="../gifs/txtpreva.gif" alt="Previous: 10.2. Making Variables Private to a Function" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch10_05.htm" title="10.4. Determining Current Function Name"><img src="../gifs/txtnexta.gif" alt="Next: 10.4. Determining Current Function Name" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">10.2. Making Variables Private to a Function</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">10.4. Determining Current Function Name</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
