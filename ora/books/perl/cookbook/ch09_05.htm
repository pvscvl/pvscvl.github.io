<html><head>
<title>Recipe 9.4. Recognizing Two Names for the Same File</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:39:06Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch09_01.htm" title="9. Directories"><link rel="prev" href="ch09_04.htm" title="9.3. Copying or Moving a File"><link rel="next" href="ch09_06.htm" title="9.5. Processing All Files in a Directory"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch09_04.htm" title="9.3. Copying or Moving a File"><img src="../gifs/txtpreva.gif" alt="Previous: 9.3. Copying or Moving a File" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch09_01.htm" title="9. Directories">Chapter 9<br>Directories</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch09_06.htm" title="9.5. Processing All Files in a Directory"><img src="../gifs/txtnexta.gif" alt="Next: 9.5. Processing All Files in a Directory" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch09-chap09_recognizing_0">9.4. Recognizing Two Names for the Same File</A
></H2
><div class="sect2"><h3 class="sect2"><a class="title" name="ch09-pgfId-462">Problem<a class="indexterm" name="ch09-idx-1000004376-0"></A
><a class="indexterm" name="ch09-idx-1000004376-1"></A
></A
></H3
><p class="para">You want to identify if two filenames in a list correspond to the same file on disk (because of hard and soft links, two filenames can refer to a single file). You might do this to make sure that you don't change a file you've already worked with.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch09-pgfId-468">Solution</A
></H3
><p class="para">Maintain a hash, keyed by the device and inode number of the files you've seen. The values are the names of the files:</P
><pre class="programlisting">%seen = ();

sub do_my_thing {
    my $filename = shift;
    my ($dev, $ino) = stat $filename;

    unless ($seen{$dev, $ino}++) {
        # do something with $filename because we haven't
        # seen it before
    }
}</PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch09-pgfId-496">Discussion</A
></H3
><p class="para">A key in <code class="literal">%seen</CODE
> is made by combining the device number (<code class="literal">$dev</CODE
>) and inode number (<code class="literal">$ino</CODE
>) of each file. Files that are the same will have the same device and inode numbers, so they will have the same key.</P
><p class="para">If you want to maintain a list of all files of the same name, instead of counting the number of times seen, save the name of the file in an anonymous array.</P
><pre class="programlisting">foreach $filename (@files) {
    ($dev, $ino) = stat $filename;
    push( @{ $seen{$dev,$ino} }, $filename);
}

foreach $devino (sort keys %seen) {
    ($dev, $ino) = split(/$;/o, $devino);
    if (@{$seen{$devino}} &gt; 1) {
        # @{$seen{$devino}} is a list of filenames for the same file
    }
}</PRE
><p class="para">The <code class="literal">$;</CODE
><a class="indexterm" name="ch09-idx-1000005018-0"></A
> variable contains the separator string using the old <a class="indexterm" name="ch09-idx-1000005017-0"></A
>multidimensional associative array emulation syntax,<span class="acronym"> </SPAN
><code class="literal">$hash{$x,$y,$z}</CODE
>. It's still a one-dimensional hash, but it has composite keys. The key is really <code class="literal">join($;</CODE
> <code class="literal">=&gt;</CODE
> <code class="literal">$x,</CODE
> <code class="literal">$y,</CODE
> <code class="literal">$z)</CODE
>. The <code class="literal">split</CODE
> separates them again. Although you'd normally just use a real multilevel hash directly, here there's no need, and it's cheaper not to.<a class="indexterm" name="ch09-idx-1000004378-0"></A
><a class="indexterm" name="ch09-idx-1000004378-1"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch09-pgfId-528">See Also</A
></H3
><p class="para">The <code class="literal">$;</CODE
> variable in <i class="filename">perlvar </I
>(1), and in the <a class="olink" href="../prog/ch02_09.htm#PERL2-CH-2-SECT-9.4">"Special Variables"</A
> section of <a class="olink" href="../prog/ch02_01.htm">Chapter 2</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
>; the <code class="literal">stat</CODE
> function in <i class="filename">perlfunc </I
>(1) and in <a class="olink" href="../prog/ch03_01.htm">Chapter 3</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
>; <a class="xref" href="ch05_01.htm" title="Hashes">Chapter 5, <cite class="chapter">Hashes</CITE
></A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch09_04.htm" title="9.3. Copying or Moving a File"><img src="../gifs/txtpreva.gif" alt="Previous: 9.3. Copying or Moving a File" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch09_06.htm" title="9.5. Processing All Files in a Directory"><img src="../gifs/txtnexta.gif" alt="Next: 9.5. Processing All Files in a Directory" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">9.3. Copying or Moving a File</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">9.5. Processing All Files in a Directory</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
