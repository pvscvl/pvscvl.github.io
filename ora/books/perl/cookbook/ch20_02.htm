<html><head>
<title>Recipe 20.1. Fetching a URL from a Perl Script</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:45:55Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch20_01.htm" title="20. Web Automation"><link rel="prev" href="ch20_01.htm" title="20.0. Introduction"><link rel="next" href="ch20_03.htm" title="20.2. Automating Form Submission"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch20_01.htm" title="20.0. Introduction"><img src="../gifs/txtpreva.gif" alt="Previous: 20.0. Introduction" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch20_01.htm" title="20. Web Automation">Chapter 20<br>Web Automation</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch20_03.htm" title="20.2. Automating Form Submission"><img src="../gifs/txtnexta.gif" alt="Next: 20.2. Automating Form Submission" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch20-16549">20.1. Fetching a URL from a Perl Script</A
></H2
><div class="sect2"><h3 class="sect2"><a class="title" name="ch20-pgfId-103">Problem<a class="indexterm" name="ch20-idx-1000002559-0"></A
><a class="indexterm" name="ch20-idx-1000002559-1"></A
><a class="indexterm" name="ch20-idx-1000002559-2"></A
><a class="indexterm" name="ch20-idx-1000002559-3"></A
><a class="indexterm" name="ch20-idx-1000002559-4"></A
><a class="indexterm" name="ch20-idx-1000002559-5"></A
></A
></H3
><p class="para">You have a URL that you want to fetch from a script.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch20-pgfId-109">Solution</A
></H3
><p class="para">Use the <code class="literal">get</CODE
> function from by the CPAN module LWP::Simple, part of LWP.</P
><pre class="programlisting">use LWP::Simple;
$content = get($URL);</PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch20-pgfId-119">Discussion</A
></H3
><p class="para">The right library makes life easier, and the LWP modules are the right ones for this task.</P
><p class="para">The <code class="literal">get</CODE
> function from LWP::Simple returns <code class="literal">undef</CODE
> on error, so check for errors this way:</P
><pre class="programlisting">use LWP::Simple;
unless (defined ($content = get $URL)) {
    die &quot;could not get $URL\n&quot;;
}</PRE
><p class="para">When it's run that way, however, you can't determine the cause of the error. For this and other elaborate processing, you'll have to go beyond LWP::Simple.</P
><p class="para"><a class="xref" href="#ch20-33755" title="titlebytes">Example 20.1</A
> is a program that fetches a document remotely. If it fails, it prints out the error status line. Otherwise it prints out the document title and the number of bytes of content. We use three modules from LWP and one other from CPAN.</P
><dl class="variablelist"><dt class="term">LWP::UserAgent <a class="indexterm" name="ch20-idx-1000002569-0"></A
></DT
><dd class="listitem"><p class="para">This module creates a virtual browser. The object returned from the new constructor is used to make the actual request. We've set the name of our agent to "Schmozilla/v9.14 Platinum" just to give the remote webmaster browser-envy when they see it in their logs.</P
></DD
><dt class="term">HTTP::Request <a class="indexterm" name="ch20-idx-1000002577-0"></A
></DT
><dd class="listitem"><p class="para">This module creates a request but doesn't send it. We create a GET request and set the referring page to a fictitious URL.</P
></DD
><dt class="term">HTTP::Response <a class="indexterm" name="ch20-idx-1000002582-0"></A
></DT
><dd class="listitem"><p class="para">This is the object type returned when the user agent actually runs the request. We check it for errors and contents.</P
></DD
><dt class="term">URI::Heuristic <a class="indexterm" name="ch20-idx-1000002587-0"></A
></DT
><dd class="listitem"><p class="para">This curious little module uses Netscape-style guessing algorithms to expand partial URLs. For example:</P
></DD
></DL
><table class="informaltable" border="1" cellpadding="3"><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1"><p class="para">   Simple</P
></TH
><th class="entry" align="LEFT" rowspan="1" colspan="1"><p class="para">    Guess</P
></TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">perl</CODE
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><em class="emphasis">http://www.perl.com</EM
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">www.oreilly.com</CODE
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><em class="emphasis">http://www.oreilly.com</EM
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">ftp.funet.fi</CODE
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><em class="emphasis">ftp://ftp.funet.fi</EM
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">/etc/passwd</CODE
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><em class="emphasis">file:/etc/passwd</EM
></P
></TD
></TR
></TBODY
></TABLE
><p class="para">Although these aren't legitimate URLs (their format is not in the URI specification), Netscape tries to guess the URL they stand for. Because Netscape does it, most other browsers do too.</P
><p class="para">The source is in <a class="xref" href="#ch20-33755" title="titlebytes">Example 20.1</A
>.</P
><div class="example"><h4 class="example"><a class="title" name="ch20-33755">Example 20.1: titlebytes</A
></H4
><pre class="programlisting">#!/usr/bin/perl -w 
# titlebytes - find the title and size of documents 
use LWP::UserAgent; 
use HTTP::Request; 
use HTTP::Response; 
use URI::Heuristic;
my $raw_url = shift                      or die &quot;usage: $0 url\n&quot;; 
my $url = URI::Heuristic::uf_urlstr($raw_url);
$| = 1;                                  # to flush next line 
printf &quot;%s =&gt;\n\t&quot;, $url;
my $ua = LWP::UserAgent-&gt;new(); 
$ua-&gt;agent(&quot;Schmozilla/v9.14 Platinum&quot;); # give it time, it'll get there
my $req = HTTP::Request-&gt;new(GET =&gt; $url); 
$req-&gt;referer(&quot;http://wizard.yellowbrick.oz&quot;);
                                         # perplex the log analysers
my $response = $ua-&gt;request($req);
if ($response-&gt;is_error()) {
     printf &quot; %s\n&quot;, $response-&gt;status_line;
 } else {
     my $count;
     my $bytes;
     my $content = $response-&gt;content();
     $bytes = length $content;
     $count = ($content =~ tr/\n/\n/);
     printf &quot;%s (%d lines, %d bytes)\n&quot;, $response-&gt;title(), $count, $bytes; } </PRE
></DIV
><p class="para">When run, the program produces output like this:</P
><pre class="programlisting">% titlebytes http://www.tpj.com/
http://www.tpj.com/ =&gt;
    The Perl Journal (109 lines, 4530 bytes)</PRE
><p class="para">Yes, "<a class="indexterm" name="ch20-idx-1000003762-0"></A
>referer" is not how "referrer" should be spelled. The standards people got it wrong when they misspelled HTTP_REFERER. Please use two r's when referring to things in English.<a class="indexterm" name="ch20-idx-1000002561-0"></A
><a class="indexterm" name="ch20-idx-1000002561-1"></A
><a class="indexterm" name="ch20-idx-1000002561-2"></A
><a class="indexterm" name="ch20-idx-1000002561-3"></A
><a class="indexterm" name="ch20-idx-1000002561-4"></A
><a class="indexterm" name="ch20-idx-1000002561-5"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch20-pgfId-201">See Also</A
></H3
><p class="para">The documentation for the CPAN module LWP::Simple, and the <i class="filename">lwpcook </I
>(1) manpage that came with LWP; the documentation for the modules LWP::UserAgent, HTTP::Request, HTTP::Response, and URI::Heuristic; <a class="xref" href="ch20_03.htm" title="Automating Form Submission">Recipe 20.2</A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch20_01.htm" title="20.0. Introduction"><img src="../gifs/txtpreva.gif" alt="Previous: 20.0. Introduction" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch20_03.htm" title="20.2. Automating Form Submission"><img src="../gifs/txtnexta.gif" alt="Next: 20.2. Automating Form Submission" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">20.0. Introduction</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">20.2. Automating Form Submission</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
