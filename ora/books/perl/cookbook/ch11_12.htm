<html><head>
<title>Recipe 11.11. Printing Data Structures</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:40:51Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch11_01.htm" title="11. References and Records"><link rel="prev" href="ch11_11.htm" title="11.10. Reading and Writing Hash Records to Text Files"><link rel="next" href="ch11_13.htm" title="11.12. Copying Data Structures"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch11_11.htm" title="11.10. Reading and Writing Hash Records to Text Files"><img src="../gifs/txtpreva.gif" alt="Previous: 11.10. Reading and Writing Hash Records to Text Files" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch11_01.htm" title="11. References and Records">Chapter 11<br>References and Records</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch11_13.htm" title="11.12. Copying Data Structures"><img src="../gifs/txtnexta.gif" alt="Next: 11.12. Copying Data Structures" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch11-chap11_printing_0">11.11. Printing Data Structures</A
></H2
><div class="sect2"><h3 class="sect2"><a class="title" name="ch11-pgfId-1156">Problem<a class="indexterm" name="ch11-idx-1000004855-0"></A
><a class="indexterm" name="ch11-idx-1000004855-1"></A
></A
></H3
><p class="para">You want to print out a data structure.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch11-pgfId-1162">Solution</A
></H3
><p class="para">If the output's legibility and layout are important, write your own custom printing routine.</P
><p class="para">If you are in the Perl debugger, use the <code class="literal">x</CODE
><a class="indexterm" name="ch11-idx-1000004856-0"></A
> command:</P
><pre class="programlisting">DB&lt;1&gt; $reference = [ { &quot;foo&quot; =&gt; &quot;bar&quot; }, 3, sub { print &quot;hello, world\n&quot; } ];
DB&lt;2&gt; x $reference
<code class="userinput"><b><code class="replaceable"><i>  0  ARRAY(0x1d033c)</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>    0  HASH(0x7b390)</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>       'foo' = 'bar'&gt;</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>    1  3</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>    2  CODE(0x21e3e4)</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>       - &amp; in ???&gt;</I
></CODE
></B
></CODE
></PRE
><p class="para">From within your own programs, use the <code class="literal">Dumper</CODE
> function from the CPAN module <a class="indexterm" name="ch11-idx-1000004857-0"></A
>Data::Dumper:</P
><pre class="programlisting">use Data::Dumper;
print Dumper($reference);</PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch11-pgfId-1194">Discussion</A
></H3
><p class="para">Sometimes you'll want to make a dedicated function for your data structure that delivers a particular output format, but often this is overkill. If you're running under the Perl debugger, the <code class="literal">x</CODE
> and <code class="literal">X</CODE
> commands provide nice pretty-printing. The <code class="literal">x</CODE
> command is more useful because it works on both global and lexical variables, whereas <code class="literal">X</CODE
> only works on globals. Pass <code class="literal">x</CODE
> a reference to the data structure you want to print.</P
><pre class="programlisting">D&lt;1&gt; x \@INC
<code class="userinput"><b><code class="replaceable"><i>  0  ARRAY(0x807d0a8)</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>     0  '/home/tchrist/perllib' </I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>     1  '/usr/lib/perl5/i686-linux/5.00403'</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>     2  '/usr/lib/perl5' </I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>     3  '/usr/lib/perl5/site_perl/i686-linux' </I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>     4  '/usr/lib/perl5/site_perl' </I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>     5  '.'</I
></CODE
></B
></CODE
><a class="indexterm" name="ch11-idx-1000004863-0"></A
></PRE
><p class="para">These commands use the <em class="emphasis">dumpvar.pl</EM
> library. Here's an example:</P
><pre class="programlisting">{ package main; require &quot;dumpvar.pl&quot; } 
*dumpvar = \&amp;main::dumpvar if __PACKAGE__ ne 'main';
dumpvar(&quot;main&quot;, &quot;INC&quot;);             # show both @INC and %INC</PRE
><p class="para">The <em class="emphasis">dumpvar.pl</EM
> library isn't a module, but we wish it were &nbsp;-  so we cajole it into exporting its <code class="literal">dumpvar</CODE
> function anyway. The first two lines forcibly import the <code class="literal">main::dumpvar</CODE
> function from package <code class="literal">main</CODE
> into the current package, assuming it's different. Here's the output of that call:</P
><pre class="programlisting"><code class="userinput"><b><code class="replaceable"><i>@INC = (</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>   0  '/home/tchrist/perllib/i686-linux'</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>   1  '/home/tchrist/perllib'</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>   2  '/usr/lib/perl5/i686-linux/5.00404'</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>   3  '/usr/lib/perl5'</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>   4  '/usr/lib/perl5/site_perl/i686-linux'</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>   5  '/usr/lib/perl5/site_perl'</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>   6  '.'</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>)</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>%INC = (</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>   'dumpvar.pl' = '/usr/lib/perl5/i686-linux/5.00404/dumpvar.pl'</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>   'strict.pm' = '/usr/lib/perl5/i686-linux/5.00404/strict.pm'</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>)</I
></CODE
></B
></CODE
></PRE
><p class="para">The Data::Dumper module, located on CPAN, has a more flexible solution. It provides a <code class="literal">Dumper</CODE
> function that takes a list of references and returns a string with a printable (and <code class="literal">eval</CODE
>able) form of those references.</P
><pre class="programlisting">use Data::Dumper; 
print Dumper(\@INC); 
<code class="userinput"><b><code class="replaceable"><i>$VAR1 = [</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>      '/home/tchrist/perllib', </I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>      '/usr/lib/perl5/i686-linux/5.00403',</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>      '/usr/lib/perl5', </I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>      '/usr/lib/perl5/site_perl/i686-linux',</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>      '/usr/lib/perl5/site_perl', </I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>      '.'</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>];</I
></CODE
></B
></CODE
></PRE
><p class="para">Data::Dumper supports a variety of output formats. Check its documentation for details.<a class="indexterm" name="ch11-idx-1000004859-0"></A
><a class="indexterm" name="ch11-idx-1000004859-1"></A
><a class="indexterm" name="ch11-idx-1000004859-2"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch11-pgfId-1276">See Also</A
></H3
><p class="para">The documentation for the CPAN module Data::Dumper; the section <a class="olink" href="../prog/ch08_01.htm">"The Perl Debugger"</A
> from <a class="olink" href="../prog/ch08_01.htm">Chapter 8</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
> or <i class="filename">perldebug </I
>(1)</P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch11_11.htm" title="11.10. Reading and Writing Hash Records to Text Files"><img src="../gifs/txtpreva.gif" alt="Previous: 11.10. Reading and Writing Hash Records to Text Files" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch11_13.htm" title="11.12. Copying Data Structures"><img src="../gifs/txtnexta.gif" alt="Next: 11.12. Copying Data Structures" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">11.10. Reading and Writing Hash Records to Text Files</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">11.12. Copying Data Structures</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
