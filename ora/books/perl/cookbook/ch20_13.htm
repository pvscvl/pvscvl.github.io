<html><head>
<title>Recipe 20.12. Parsing a Web Server Log File</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:46:02Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch20_01.htm" title="20. Web Automation"><link rel="prev" href="ch20_12.htm" title="20.11. Creating a Robot"><link rel="next" href="ch20_14.htm" title="20.13. Processing Server Logs"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch20_12.htm" title="20.11. Creating a Robot"><img src="../gifs/txtpreva.gif" alt="Previous: 20.11. Creating a Robot" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch20_01.htm" title="20. Web Automation">Chapter 20<br>Web Automation</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch20_14.htm" title="20.13. Processing Server Logs"><img src="../gifs/txtnexta.gif" alt="Next: 20.13. Processing Server Logs" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch20-30943">20.12. Parsing a Web Server Log File</A
></H2
><div class="sect2"><h3 class="sect2"><a class="title" name="ch20-pgfId-1327">Problem<a class="indexterm" name="ch20-idx-1000002674-0"></A
><a class="indexterm" name="ch20-idx-1000002674-1"></A
><a class="indexterm" name="ch20-idx-1000002674-2"></A
><a class="indexterm" name="ch20-idx-1000002674-3"></A
><a class="indexterm" name="ch20-idx-1000002674-4"></A
><a class="indexterm" name="ch20-idx-1000002674-5"></A
></A
></H3
><p class="para">You want to extract from a web server log file only the information you're interested in.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch20-pgfId-1333">Solution</A
></H3
><p class="para">Pull apart the log file as follows:</P
><pre class="programlisting">while (&lt;LOGFILE&gt;) {
  my ($client, $identuser, $authuser, $date, $time, $tz, $method,
      $url, $protocol, $status, $bytes) =
  /^(\S+) (\S+) (\S+) \[([^:]+):(\d+:\d+:\d+) ([^\]]+) &quot;(\S+) (.*?) (\S+)&quot;
      (\S+) (\S+)$/;
  # ...
}</PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch20-pgfId-1351">Discussion</A
></H3
><p class="para">This regular expression pulls apart entries in <a class="indexterm" name="ch20-idx-1000002682-0"></A
>Common Log Format, an informal standard that most web servers adhere to. The fields are:</P
><dl class="variablelist"><dt class="term">client</DT
><dd class="listitem"><p class="para">IP address or domain name of browser's machine</P
></DD
><dt class="term">identuser</DT
><dd class="listitem"><p class="para">If IDENT (RFC 1413) was used, what it returned</P
></DD
><dt class="term">authuser</DT
><dd class="listitem"><p class="para">If username/password authentication was used, whom they logged in as</P
></DD
><dt class="term">date</DT
><dd class="listitem"><p class="para">Date of request (e.g., 01/Mar/1997)</P
></DD
><dt class="term">time</DT
><dd class="listitem"><p class="para">Time of request (e.g., 12:55:36)</P
></DD
><dt class="term">tz</DT
><dd class="listitem"><p class="para">Time zone (e.g., -0700)</P
></DD
><dt class="term">method</DT
><dd class="listitem"><p class="para">Method of request (e.g., GET, POST, or PUT)</P
></DD
><dt class="term">url</DT
><dd class="listitem"><p class="para">URL in request (e.g., <em class="emphasis">/~user/index.html</EM
>)</P
></DD
><dt class="term">protocol</DT
><dd class="listitem"><p class="para">HTTP/1.0 or HTTP/1.1</P
></DD
><dt class="term">status</DT
><dd class="listitem"><p class="para">Returned status (200 is okay, 500 is server error)</P
></DD
><dt class="term">bytes</DT
><dd class="listitem"><p class="para">Number of bytes returned (could be <code class="literal">&quot;-&quot;</CODE
> for errors, redirects, and other non-document transfers)</P
></DD
></DL
><p class="para">Other formats include the referrer and agent information. The pattern needs only minor changes for it to work with other log file formats. Watch out that spaces in the URL field are not escaped. This means that we can't use <code class="literal">\S*</CODE
> to extract the URL. <code class="literal">.*</CODE
> would cause the regex to match the entire string and then backtrack until it could satisfy the rest of the pattern. We use <code class="literal">.*?</CODE
> and anchor the pattern to the end of the string with <code class="literal">$</CODE
> to make the regular expression engine match nothing and then add characters until the entire pattern is satisfied.<a class="indexterm" name="ch20-idx-1000002684-0"></A
><a class="indexterm" name="ch20-idx-1000002684-1"></A
><a class="indexterm" name="ch20-idx-1000002684-2"></A
><a class="indexterm" name="ch20-idx-1000002684-3"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch20-pgfId-1385">See Also</A
></H3
><p class="para">The CLF spec at 
<a class="systemitem.url" href="../../../../../../../www.w3.org/Daemon/User/Config/Logging.html">http://www.w3.org/Daemon/User/Config/Logging.html</A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch20_12.htm" title="20.11. Creating a Robot"><img src="../gifs/txtpreva.gif" alt="Previous: 20.11. Creating a Robot" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch20_14.htm" title="20.13. Processing Server Logs"><img src="../gifs/txtnexta.gif" alt="Next: 20.13. Processing Server Logs" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">20.11. Creating a Robot</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">20.13. Processing Server Logs</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
