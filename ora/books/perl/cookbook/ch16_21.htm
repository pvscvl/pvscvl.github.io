<html><head>
<title>Recipe 16.20. Blocking Signals</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:44:14Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch16_01.htm" title="16. Process Management and Communication"><link rel="prev" href="ch16_20.htm" title="16.19. Avoiding Zombie Processes"><link rel="next" href="ch16_22.htm" title="16.21. Timing Out an Operation"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch16_20.htm" title="16.19. Avoiding Zombie Processes"><img src="../gifs/txtpreva.gif" alt="Previous: 16.19. Avoiding Zombie Processes" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch16_01.htm" title="16. Process Management and Communication">Chapter 16<br>Process Management and Communication</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch16_22.htm" title="16.21. Timing Out an Operation"><img src="../gifs/txtnexta.gif" alt="Next: 16.21. Timing Out an Operation" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch16-14904">16.20. Blocking Signals</A
></H2
><div class="sect2"><h3 class="sect2"><a class="title" name="ch16-pgfId-1000005762">Problem</A
></H3
><p class="para"><a class="indexterm" name="ch16-idx-1000006433-0"></A
><a class="indexterm" name="ch16-idx-1000006433-1"></A
><a class="indexterm" name="ch16-idx-1000006433-2"></A
><a class="indexterm" name="ch16-idx-1000006433-3"></A
><a class="indexterm" name="ch16-idx-1000006433-4"></A
><a class="indexterm" name="ch16-idx-1000006433-5"></A
>You'd like to delay the reception of a signal, possibly to prevent unpredictable behavior from signals that can interrupt your program at any point.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch16-pgfId-1000005765">Solution</A
></H3
><p class="para">Use the POSIX module's interface to the <code class="literal">sigprocmask</CODE
> system call. This is only available if your system is POSIX conformant.</P
><p class="para">To block a signal around an operation:</P
><pre class="programlisting">use POSIX qw(:signal_h);

$sigset = POSIX::SigSet-&gt;new(SIGINT);    # define the signals to block
$old_sigset = POSIX::SigSet-&gt;new;        # where the old sigmask will be kept

unless (defined sigprocmask(SIG_BLOCK, $sigset, $old_sigset)) {
    die &quot;Could not block SIGINT\n&quot;;
}</PRE
><p class="para">To unblock:</P
><pre class="programlisting">unless (defined sigprocmask(SIG_UNBLOCK, $old_sigset)) {
    die &quot;Could not unblock SIGINT\n&quot;;
}</PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch16-pgfId-1000005781">Discussion</A
></H3
><p class="para">The POSIX standard introduced <code class="literal">sigaction</CODE
> and <code class="literal">sigprocmask</CODE
> to give you better control over how signals are delivered. The <code class="literal">sigprocmask</CODE
> function controls delayed delivery of signals and <code class="literal">sigaction</CODE
> installs handlers. If available, Perl uses <code class="literal">sigaction</CODE
> when you change <code class="literal">%SIG</CODE
>.</P
><p class="para">To use <code class="literal">sigprocmask</CODE
>, first build a signal set using <code class="literal">POSIX::SigSet-&gt;new</CODE
>. This takes a list of signal numbers. The POSIX module exports functions named after the signals, which return their signal numbers.</P
><pre class="programlisting">use POSIX qw(:signal_h);

$sigset = POSIX::SigSet-&gt;new( SIGINT, SIGKILL );</PRE
><p class="para">Pass the POSIX::SigSet object to <code class="literal">sigprocmask</CODE
> with the SIG_BLOCK flag to delay signal delivery, SIG_UNBLOCK to restore delivery of the signals, or SIG_SETMASK to block only signals in the POSIX::SigSet. The most paranoid of programmers block signals for a <code class="literal">fork</CODE
> to prevent a signal handler in the child process being called before Perl can update the child's <code class="literal">$$</CODE
> variable, its process id. If the signal handler were called immediately and reported <code class="literal">$$</CODE
> in that handler, it could possibly report its parent's <code class="literal">$$</CODE
>, not its own. This issue does not arise often.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch16-pgfId-1000005789">See Also</A
></H3
><p class="para">Your system's <em class="emphasis">sigprocmask</EM
> (2) manpage (if you have one); the documentation for the standard POSIX module in <a class="olink" href="../prog/ch07_01.htm">Chapter 7</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch16_20.htm" title="16.19. Avoiding Zombie Processes"><img src="../gifs/txtpreva.gif" alt="Previous: 16.19. Avoiding Zombie Processes" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch16_22.htm" title="16.21. Timing Out an Operation"><img src="../gifs/txtnexta.gif" alt="Next: 16.21. Timing Out an Operation" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">16.19. Avoiding Zombie Processes</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">16.21. Timing Out an Operation</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
