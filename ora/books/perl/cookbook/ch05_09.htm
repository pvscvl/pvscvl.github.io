<html><head>
<title>Recipe 5.8. Inverting a Hash</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:32:44Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch05_01.htm" title="5. Hashes"><link rel="prev" href="ch05_08.htm" title="5.7. Hashes with Multiple Values Per Key"><link rel="next" href="ch05_10.htm" title="5.9. Sorting a Hash"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch05_08.htm" title="5.7. Hashes with Multiple Values Per Key"><img src="../gifs/txtpreva.gif" alt="Previous: 5.7. Hashes with Multiple Values Per Key" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch05_01.htm" title="5. Hashes">Chapter 5<br>Hashes</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch05_10.htm" title="5.9. Sorting a Hash"><img src="../gifs/txtnexta.gif" alt="Next: 5.9. Sorting a Hash" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch05-38091">5.8. Inverting a Hash</A
></H2
><div class="sect2"><h3 class="sect2"><a class="title" name="ch05-pgfId-786">Problem <a class="indexterm" name="ch05-idx-1000006481-0"></A
><a class="indexterm" name="ch05-idx-1000006481-1"></A
></A
></H3
><p class="para">Hashes map keys to values. You have a hash and a value for which you want to find the corresponding key.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch05-pgfId-792">Solution</A
></H3
><p class="para">Use <code class="literal">reverse</CODE
> to create an inverted hash whose values are the original hash's keys and vice versa.</P
><pre class="programlisting"># %LOOKUP maps keys to values
%REVERSE = reverse %LOOKUP;</PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch05-pgfId-802">Discussion</A
></H3
><p class="para">This technique uses the list equivalence of hashes mentioned in the introduction. In list context, <code class="literal">reverse</CODE
><a class="indexterm" name="ch05-idx-1000006487-0"></A
> treats <code class="literal">%LOOKUP</CODE
> as a list and reverses the order of its elements. The significant property of a hash treated as a list is that the list elements come in pairs: the first element is the key; the second, the value. When you <code class="literal">reverse</CODE
> such a list, the first element is the value, and the second is a key. Treating <em class="emphasis">this</EM
> list as a hash results in a hash whose values are the keys of the original hash and vice versa.</P
><p class="para">Here's an example:</P
><pre class="programlisting">%surname = ( &quot;Mickey&quot; =&gt; &quot;Mantle&quot;, &quot;Babe&quot; =&gt; &quot;Ruth&quot; );
%first_name = reverse %surname;
print $first_name{&quot;Mantle&quot;}, &quot;\n&quot;;
<code class="userinput"><b><code class="replaceable"><i>Mickey</I
></CODE
></B
></CODE
></PRE
><p class="para">When we treat <code class="literal">%surname</CODE
> as a list, it becomes:</P
><pre class="programlisting">(&quot;Mickey&quot;, &quot;Mantle&quot;, &quot;Babe&quot;, &quot;Ruth&quot;)</PRE
><p class="para">(or maybe <code class="literal">(&quot;Babe&quot;,</CODE
> <code class="literal">&quot;Ruth&quot;,</CODE
> <code class="literal">&quot;Mickey&quot;,</CODE
> <code class="literal">&quot;Mantle&quot;)</CODE
> because we can't predict the order). Reversing this list gives us:</P
><pre class="programlisting">(&quot;Ruth&quot;, &quot;Babe&quot;, &quot;Mantle&quot;, &quot;Mickey&quot;)</PRE
><p class="para">When we treat this list as a hash, it becomes:</P
><pre class="programlisting">(&quot;Ruth&quot; =&gt; &quot;Babe&quot;, &quot;Mantle&quot; =&gt; &quot;Mickey&quot;)</PRE
><p class="para">Now instead of turning first names into surnames, it turns surnames into first names.</P
><p class="para"><a class="xref" href="#ch05-18605" title="foodfind">Example 5.2</A
> is a program called <code class="literal">foodfind</CODE
><a class="indexterm" name="ch05-idx-1000006488-0"></A
>. If you give it a food name, it'll tell you the color of that food. If you give it a color, it'll tell you a food of that color.</P
><div class="example"><h4 class="example"><a class="title" name="ch05-18605">Example 5.2: foodfind</A
></H4
><pre class="programlisting">#!/usr/bin/perl -w
# foodfind - find match for food or color

$given = shift @ARGV or die &quot;usage: foodfind food_or_color\n&quot;;

%color = ( 
           &quot;Apple&quot;  =&gt; &quot;red&quot;,
           &quot;Banana&quot; =&gt; &quot;yellow&quot;,
           &quot;Lemon&quot;  =&gt; &quot;yellow&quot;,
           &quot;Carrot&quot; =&gt; &quot;orange&quot;
         );

    %food = reverse %color;

    if (exists $color{$given}) {
    print &quot;$given is a food with color $color{$given}.\n&quot;;
    }
    if (exists $food{$given}) {
    print &quot;$food{$given} is a food with color $given.\n&quot;;
    }</PRE
></DIV
><p class="para">If two keys in the original hash have the same value (as <code class="literal">&quot;Lemon&quot;</CODE
> and <code class="literal">&quot;Banana&quot;</CODE
> do in the color example), then the inverted hash will only have one (which is dependent on the hashing order, and you shouldn't try to predict it). This is because hashes have, by Perl definition, unique keys.</P
><p class="para">If you want to invert a hash with non-unique values, you must use the techniques shown in <a class="xref" href="ch05_08.htm" title="Hashes with Multiple Values Per Key">Recipe 5.7</A
>. That is, build up a hash whose values are a list of keys in the original hash:</P
><pre class="programlisting"># %food_color as per the introduction
while (($food,$color) = each(%food_color)) {
    push(@{$foods_with_color{$color}}, $food);
}

print &quot;@{$foods_with_color{yellow}} were yellow foods.\n&quot;;
<code class="userinput"><b><code class="replaceable"><i>Banana Lemon were yellow foods.</I
></CODE
></B
></CODE
></PRE
><p class="para">This also lets us change the <code class="literal">foodfind</CODE
> program to handle colors represented by more than one food. For instance, <code class="literal">foodfind</CODE
> <code class="literal">yellow</CODE
> reports bananas and lemons.</P
><p class="para">If any values in the original hash were references instead of just strings and numbers, the inverted hash poses a problem because references don't work well as hash keys unless you use the Tie::RefHash module described in <a class="xref" href="ch05_13.htm" title="Hashing References">Recipe 5.12</A
>.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch05-pgfId-894">See Also</A
></H3
><p class="para">The <code class="literal">reverse</CODE
> function in <i class="filename">perlfunc </I
>(1) and in <a class="olink" href="../prog/ch03_01.htm">Chapter 3</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
>; <a class="xref" href="ch13_16.htm" title="Creating Magic Variables with tie">Recipe 13.15</A
> <a class="indexterm" name="ch05-idx-1000006483-0"></A
><a class="indexterm" name="ch05-idx-1000006483-1"></A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch05_08.htm" title="5.7. Hashes with Multiple Values Per Key"><img src="../gifs/txtpreva.gif" alt="Previous: 5.7. Hashes with Multiple Values Per Key" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch05_10.htm" title="5.9. Sorting a Hash"><img src="../gifs/txtnexta.gif" alt="Next: 5.9. Sorting a Hash" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">5.7. Hashes with Multiple Values Per Key</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">5.9. Sorting a Hash</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
