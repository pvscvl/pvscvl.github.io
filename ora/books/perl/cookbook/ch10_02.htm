<html><head>
<title>Recipe 10.1. Accessing Subroutine Arguments</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:39:35Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch10_01.htm" title="10. Subroutines"><link rel="prev" href="ch10_01.htm" title="10.0. Introduction"><link rel="next" href="ch10_03.htm" title="10.2. Making Variables Private to a Function"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch10_01.htm" title="10.0. Introduction"><img src="../gifs/txtpreva.gif" alt="Previous: 10.0. Introduction" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch10_01.htm" title="10. Subroutines">Chapter 10<br>Subroutines</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch10_03.htm" title="10.2. Making Variables Private to a Function"><img src="../gifs/txtnexta.gif" alt="Next: 10.2. Making Variables Private to a Function" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch10-35380">10.1. Accessing Subroutine Arguments</A
></H2
><div class="sect2"><h3 class="sect2"><a class="title" name="ch10-pgfId-74">Problem<a class="indexterm" name="ch10-idx-1000004632-0"></A
><a class="indexterm" name="ch10-idx-1000004632-1"></A
></A
></H3
><p class="para">You have written a function and want to use the arguments supplied by its caller.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch10-pgfId-80">Solution</A
></H3
><p class="para">All values passed as arguments to a function are in the special array <code class="literal">@_</CODE
><a class="indexterm" name="ch10-idx-1000004633-0"></A
>. Thus, the first argument to the function is in <code class="literal">$_[0]</CODE
>, the second is in <code class="literal">$_[1]</CODE
>, and so on. The number of arguments is therefore <code class="literal">scalar(@_)</CODE
>.</P
><p class="para">For example:</P
><pre class="programlisting">sub hypotenuse {
    return sqrt( ($_[0] ** 2) + ($_[1] ** 2) );
}

$diag = hypotenuse(3,4);  # $diag is 5</PRE
><p class="para">Your subroutines will almost always start by copying arguments into named private variables for safer and more convenient access:</P
><pre class="programlisting">sub hypotenuse {
    my ($side1, $side2) = @_;
    return sqrt( ($side1 ** 2) + ($side2 ** 2) );
}</PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch10-pgfId-108">Discussion</A
></H3
><p class="para">It's been said that programming has only three nice numbers: zero, one, and however many you please. Perl's subroutine mechanism was designed to facilitate writing functions with as many &nbsp;-  or as few &nbsp;-  elements in the parameter and return lists as you wish. All incoming parameters appear as separate scalar values in the special array <code class="literal">@_</CODE
> , which is automatically local to each function (see <a class="xref" href="ch10_14.htm" title="Saving Global Values">Recipe 10.13</A
>). To return a value from a subroutine, use the <code class="literal">return</CODE
> statement with an argument. If there is no <code class="literal">return</CODE
> statement, the return value is the result of the last evaluated expression.</P
><p class="para">Here are some sample calls to the <code class="literal">hypotenuse</CODE
> function defined in the Solution:</P
><pre class="programlisting">print hypotenuse(3, 4), &quot;\n&quot;;               # prints 5

@a = (3, 4);
print hypotenuse(@a), &quot;\n&quot;;                 # prints 5</PRE
><p class="para">If you look at the arguments used in the second call to <code class="literal">hypotenuse</CODE
>, it might appear that only one argument was passed: the array <code class="literal">@a</CODE
>. This isn't what happens &nbsp;-  the elements of <code class="literal">@a</CODE
> are copied into the <code class="literal">@_</CODE
> array separately. Similarly, if we called a function with <code class="literal">(@a,</CODE
> <code class="literal">@b)</CODE
>, we'd be giving it all the arguments in both arrays. This is the same principle of flattened lists at work as when we say:</P
><pre class="programlisting">@both = (@men, @women);</PRE
><p class="para">The scalars in <code class="literal">@_</CODE
> are implicit aliases for the ones passed in, not copies. That means changing the elements of <code class="literal">@_</CODE
> in a subroutine changes the values in the subroutine's caller. This is a holdover from before Perl had proper references.</P
><p class="para">So, we can write functions that leave their arguments intact, by copying the arguments to private variables like this:</P
><pre class="programlisting">@nums = (1.4, 3.5, 6.7);
@ints = int_all(@nums);        # @nums unchanged
sub int_all {
    my @retlist = @_;          # make safe copy for return
    for my $n (@retlist) { $n = int($n) } 
    return @retlist;
} </PRE
><p class="para">We can also write functions that change their caller's variables:</P
><pre class="programlisting">@nums = (1.4, 3.5, 6.7);
trunc_em(@nums);               # @nums now (1,3,6)
sub trunc_em {
    for (@_) { $_ = int($_) }  # truncate each argument
} </PRE
><p class="para">Don't pass constants to this kind of function, as in <code class="literal">trunc_em(1.4,</CODE
> <code class="literal">3.5,</CODE
> <code class="literal">6.7)</CODE
>. If you try, you'll get a run-time exception saying <code class="literal">Modification</CODE
> <code class="literal">of</CODE
> <code class="literal">a</CODE
> <code class="literal">read-only</CODE
> <code class="literal">value</CODE
> <code class="literal">attempted</CODE
> <code class="literal">at</CODE
> <code class="literal">...</CODE
>.</P
><p class="para">The built-in functions <code class="literal">chop</CODE
> and <code class="literal">chomp</CODE
> work like this, modifying their caller's variables and returning the character(s) removed. People are used to such functions returning the changed values, so they often write things like:</P
><pre class="programlisting">$line = chomp(&lt;&gt;);                  # WRONG</PRE
><p class="para">until they get the hang of how it works. Given this vast potential for confusion, you might want to think twice before modifying <code class="literal">@</CODE
>_ in your <code class="literal"></CODE
><a class="indexterm" name="ch10-idx-1000004644-0"></A
>subroutines.<a class="indexterm" name="ch10-idx-1000004635-0"></A
><a class="indexterm" name="ch10-idx-1000004635-1"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch10-pgfId-168">See Also</A
></H3
><p class="para">The section on <a class="olink" href="../prog/ch02_07.htm#PERL2-CH-2-SECT-7.3">"Subroutines"</A
> in <a class="olink" href="../prog/ch02_01.htm">Chapter 2</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
> and <i class="filename">perlsub </I
>(1)</P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch10_01.htm" title="10.0. Introduction"><img src="../gifs/txtpreva.gif" alt="Previous: 10.0. Introduction" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch10_03.htm" title="10.2. Making Variables Private to a Function"><img src="../gifs/txtnexta.gif" alt="Next: 10.2. Making Variables Private to a Function" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">10.0. Introduction</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">10.2. Making Variables Private to a Function</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
