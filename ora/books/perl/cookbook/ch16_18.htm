<html><head>
<title>Recipe 16.17. Writing a Signal Handler</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:44:10Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch16_01.htm" title="16. Process Management and Communication"><link rel="prev" href="ch16_17.htm" title="16.16. Temporarily Overriding a Signal Handler"><link rel="next" href="ch16_19.htm" title="16.18. Catching Ctrl-C"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch16_17.htm" title="16.16. Temporarily Overriding a Signal Handler"><img src="../gifs/txtpreva.gif" alt="Previous: 16.16. Temporarily Overriding a Signal Handler" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch16_01.htm" title="16. Process Management and Communication">Chapter 16<br>Process Management and Communication</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch16_19.htm" title="16.18. Catching Ctrl-C"><img src="../gifs/txtnexta.gif" alt="Next: 16.18. Catching Ctrl-C" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch16-18838">16.17. Writing a Signal Handler</A
></H2
><div class="sect2"><h3 class="sect2"><a class="title" name="ch16-pgfId-1000005585">Problem</A
></H3
><p class="para">You want to write a subroutine that will be called whenever your program receives a signal.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch16-pgfId-1000005588">Solution</A
></H3
><p class="para">A signal handler is just a subroutine. With some risk, you can do anything in a signal handler you'd do in any Perl subroutine, but the more you do, the riskier it gets.</P
><p class="para">Some systems require you to reinstall your signal handler after each signal:</P
><pre class="programlisting">$SIG{INT} = \&amp;got_int;
sub got_int {
    $SIG{INT} = \&amp;got_int;          # but not for SIGCHLD!
    # ...
}</PRE
><p class="para">Some systems restart blocking operations, such as reading data. In such cases, you must call <code class="literal">die</CODE
> within the handler and trap it with <code class="literal">eval</CODE
>:</P
><pre class="programlisting">my $interrupted = 0;

sub got_int {
    $interrupted = 1;
    $SIG{INT} = 'DEFAULT';          # or 'IGNORE'
    die;
}

eval {
    $SIG{INT} = \&amp;got_int;
    # ... long-running code that you don't want to restart
};

if ($interrupted) {
    # deal with the signal
}</PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch16-pgfId-1000005614">Discussion</A
></H3
><p class="para">Installing a custom signal handling subroutine is a lot like playing with fire. It may seem like a lot of fun, but, sooner or later, you're going to get burned unless you're exceedingly careful. By installing Perl code to deal with signals, you're exposing yourself to two dangers. First, few system library functions are re-entrant. If the signal interrupts while Perl is executing one function (like <i class="filename">malloc </I
>(3) or <i class="filename">printf </I
>(3)), and your signal handler then calls the same function again, you could get unpredictable behavior&nbsp;- often, a core dump. Second, Perl isn't itself re-entrant at the lowest levels. (Release 5.005 of Perl supports lightweight processes called <em class="emphasis">threads</EM
><a class="indexterm" name="ch16-idx-1000006559-0"></A
>.) If the signal interrupts Perl while Perl is changing its own internal data structures, unpredictable behavior may result&nbsp;- usually random core dumps.</P
><p class="para">You have two options: be paranoid or be pragmatic. The paranoid approach is to do as little as possible in your signal handler, as exemplified by the <code class="literal">eval</CODE
> and <code class="literal">die</CODE
> code in the Solution&nbsp;- set a variable that already has a value, and then bail. Even this is cavalier for the true paranoiac, who avoids <code class="literal">die</CODE
> in a handler because the system <em class="emphasis">is</EM
> out to get you. The pragmatic approach is to say "I know the risks, but prefer the convenience," and to do anything you want in your signal handler.</P
><p class="para">Signals have been implemented in many different operating systems, often in slightly different flavors. The two situations where signal implementations vary the most are when a signal occurs when its signal handler is active (<i class="firstterm">reliability</I
>), and when a signal interrupts a blocking system call like <code class="literal">read</CODE
> or <code class="literal">accept</CODE
> (<i class="firstterm">restarting</I
>).</P
><p class="para">The initial implementation of signals was unreliable, meaning that while a handler was running, further occurrences of the same signal would cause the default action, likely aborting the program. Later systems addressed this (each in their own subtly different way, of course) by providing a way to block the delivery of further signals of that number until the handler has finished. If Perl detects that your system can use reliable signals, it generates the proper system calls to achieve this saner, safer behavior. You can use POSIX signals to block signal delivery at other times, as described in <a class="xref" href="ch16_21.htm" title="Blocking Signals">Recipe 16.20</A
>.</P
><p class="para">For truly portable code, the paranoid programmer will assume the worst case (unreliable signals) and reinstall the signal handler manually, usually as the first statement in a function:</P
><pre class="programlisting">$SIG{INT} = \&amp;catcher;
sub catcher {
    $SIG{INT} = \&amp;catcher;
    # ...
}</PRE
><p class="para">In the special case of catching SIGCHLD, see <a class="xref" href="ch16_20.htm" title="Avoiding Zombie Processes">Recipe 16.19</A
>. System V has bizarre behavior that can trip you up.</P
><p class="para">Use the Config module to find out whether you have reliable signals:</P
><pre class="programlisting">use Config;
print &quot;Hurrah!\n&quot; if $Config{d_sigaction};</PRE
><p class="para">Just because you have reliable signals doesn't mean you automatically get reliable programs. But without them, you certainly won't.</P
><p class="para">The first implementation of signals interrupted slow system calls, functions that require the cooperation of other processes or device drivers. If a signal comes in while those system calls are still running, they (and their Perl counterparts) return an error value and set the error to EINTR, <code class="literal">&quot;Interrupted</CODE
> <code class="literal">system</CODE
> <code class="literal">call&quot;</CODE
>. Checking for this condition made programs so complicated that most didn't check, and therefore misbehaved or died if a signal interrupted a slow system call. Most modern versions of Unix allow you to change this behavior. Perl will always make system calls restartable if it is on a system that support it. If you have a POSIX system, you can control restarting using the POSIX module (see <a class="xref" href="ch16_21.htm" title="Blocking Signals">Recipe 16.20</A
>).</P
><p class="para">To determine whether your interrupted system calls will automatically restart, look at your system's C <em class="emphasis">signal.h</EM
> include file:</P
><pre class="programlisting">% egrep 'S[AV]_(RESTART|INTERRUPT)' /usr/include/*/signal.h</PRE
><p class="para">Two signals are untrappable and unignorable: SIGKILL and SIGSTOP. Full details of the signals available on your system and what they mean can be found in the <em class="emphasis">signal </EM
>(3) manpage.<a class="indexterm" name="ch16-idx-1000006398-0"></A
><a class="indexterm" name="ch16-idx-1000006398-1"></A
><a class="indexterm" name="ch16-idx-1000006398-2"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch16-pgfId-1000005645">See Also</A
></H3
><p class="para">The <a class="olink" href="../prog/ch06_02.htm#PERL2-CH-6-SECT-2.2.4">"Signals"</A
> sections in <a class="olink" href="../prog/ch06_01.htm">Chapter 6</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
> and in <i class="filename">perlipc </I
>(1); your system's <i class="filename">sigaction </I
>(2), <i class="filename">signal</I
> (3), and <i class="filename">kill</I
> (2) manpages (if you have them). <em class="emphasis">Porting UNIX Software</EM
>, by Greg Lehey, O'Reilly &amp; Associates, (1995); <cite class="citetitle">Advanced Programming in the Unix Environment</CITE
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch16_17.htm" title="16.16. Temporarily Overriding a Signal Handler"><img src="../gifs/txtpreva.gif" alt="Previous: 16.16. Temporarily Overriding a Signal Handler" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch16_19.htm" title="16.18. Catching Ctrl-C"><img src="../gifs/txtnexta.gif" alt="Next: 16.18. Catching Ctrl-C" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">16.16. Temporarily Overriding a Signal Handler</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">16.18. Catching Ctrl-C</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
