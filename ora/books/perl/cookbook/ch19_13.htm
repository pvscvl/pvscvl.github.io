<html><head>
<title>Recipe 19.12. Writing a Multiscreen CGI Script</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:45:44Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch19_01.htm" title="19. CGI Programming"><link rel="prev" href="ch19_12.htm" title="19.11. Creating Sticky Widgets"><link rel="next" href="ch19_14.htm" title="19.13. Saving a Form to a File or Mail Pipe"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch19_12.htm" title="19.11. Creating Sticky Widgets"><img src="../gifs/txtpreva.gif" alt="Previous: 19.11. Creating Sticky Widgets" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch19_01.htm" title="19. CGI Programming">Chapter 19<br>CGI Programming</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch19_14.htm" title="19.13. Saving a Form to a File or Mail Pipe"><img src="../gifs/txtnexta.gif" alt="Next: 19.13. Saving a Form to a File or Mail Pipe" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch19-36190">19.12. Writing a Multiscreen CGI Script</A
></H2
><div class="sect2"><h3 class="sect2"><a class="title" name="ch19-pgfId-1328">Problem<a class="indexterm" name="ch19-idx-1000005503-0"></A
><a class="indexterm" name="ch19-idx-1000005503-1"></A
></A
></H3
><p class="para">You want to write a single CGI script that can return several different pages to the browser. For instance, you want a single CGI script for administering a database of products. The script will be called to display the form to add a product, to process the add-product form, to display a list of products to delete, to process the delete-product form, to display a list of product to edit, to display a form of the product's attributes for the user to change, and to process the edit-product form. You can use these multiscreen CGI scripts to form an elementary <a class="indexterm" name="ch19-idx-1000007382-0"></A
>shopping-cart-type application.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch19-pgfId-1334">Solution</A
></H3
><p class="para">Use a hidden field to encode the current screen.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch19-pgfId-1340">Discussion</A
></H3
><p class="para">It is easy to generate sticky hidden fields with the CGI module. The <code class="literal">hidden</CODE
><a class="indexterm" name="ch19-idx-1000005509-0"></A
> function returns HTML for a hidden widget and will use the widget's current value if you only give <code class="literal">hidden</CODE
> the widget name:</P
><pre class="programlisting">use CGI qw(:standard);
print hidden(&quot;bacon&quot;);</PRE
><p class="para">To determine which page ("display product list", "display all items in shopping cart", "confirm order") to display, use another hidden field. We'll call this one <code class="literal">.State</CODE
> so it won't conflict with any field we might have called <code class="literal">State</CODE
> (for instance, in credit card billing information). To let the user move from page to page, use submit buttons that set <code class="literal">.State</CODE
> to the name of the page to go to. For instance, to make a button to take the user to the "Checkout" page, use:</P
><pre class="programlisting">    print submit(-NAME =&gt; &quot;.State&quot;, -VALUE =&gt; &quot;Checkout&quot;);</PRE
><p class="para">We wrap this in a function to make it easier to type:</P
><pre class="programlisting">sub to_page { return submit( -NAME =&gt; &quot;.State&quot;, -VALUE =&gt; shift ) }</PRE
><p class="para">To decide what code to display, check the <code class="literal">.State</CODE
> parameter:</P
><pre class="programlisting">$page = param(&quot;.State&quot;) || &quot;Default&quot;;</PRE
><p class="para">Put the code to generate each page in separate subroutines. You could decide which subroutine to call with a long <code class="literal">if</CODE
> ... <code class="literal">elsif</CODE
> ... <code class="literal">elsif</CODE
>:</P
><pre class="programlisting">if ($page eq &quot;Default&quot;) {
    front_page();
} elsif ($page eq &quot;Checkout&quot;) {
    checkout();
} else {
    no_such_page();         # when we get a .State that doesn't exist
}</PRE
><p class="para">This is tedious and clumsy. Instead use a hash that maps a page name to a subroutine. This is another strategy for implementing a C-style <code class="literal">switch</CODE
><a class="indexterm" name="ch19-idx-1000005595-0"></A
> statement in Perl.</P
><pre class="programlisting">%States = (
    'Default'     =&gt; \&amp;front_page,
    'Shirt'       =&gt; \&amp;shirt,
    'Sweater'     =&gt; \&amp;sweater,
    'Checkout'    =&gt; \&amp;checkout,
    'Card'        =&gt; \&amp;credit_card,
    'Order'       =&gt; \&amp;order,
    'Cancel'      =&gt; \&amp;front_page,
);

if ($States{$page}) {
    $States{$page}-&gt;();   # call the correct subroutine 
} else {
    no_such_page();
}</PRE
><p class="para">Each page will have some persistent widgets. For instance, the page that lets the user order t-shirts will want the number of t-shirts to persist even when the user continues and orders shoes as well. We do this by calling the page-generating subroutines with a parameter that lets them know whether they're the active page. If they're not the active page, they should only send back hidden fields for any persistent data:</P
><pre class="programlisting">while (($state, $sub) = each %States) {
    $sub-&gt;( $page eq $state );
}</PRE
><p class="para">The <code class="literal">eq</CODE
> comparison returns true if the page is the current page, and false if it isn't. The page-generating subroutine then looks like this:</P
><pre class="programlisting">sub t_shirt {
    my $active = shift;

    unless ($active) {
        print hidden(&quot;size&quot;), hidden(&quot;color&quot;);
        return;
    }

    print p(&quot;You want to buy a t-shirt?&quot;);
    print p(&quot;Size: &quot;, popup_menu('size', [ qw(XL L M S XS) ]));
    print p(&quot;Color:&quot;, popup_menu('color', [ qw(Black White) ]));

    print p( to_page(&quot;Shoes&quot;), to_page(&quot;Checkout&quot;) );
}</PRE
><p class="para">Because the subroutines all generate HTML, we have to print the HTTP header and start the HTML document and form before we call the subroutines. This lets us print a standard header and footer for all the pages, if we want. Here, we assume we have subroutines <code class="literal">standard_header</CODE
> and <code class="literal">standard_footer</CODE
> for printing the headers and footers:</P
><pre class="programlisting">print header(&quot;Program Title&quot;), start_html();
print standard_header(), begin_form();
while (($state, $sub) = each %States) {
    $sub-&gt;( $page eq $state );
}
print standard_footer(), end_form(), end_html();</PRE
><p class="para">Don't make the mistake of encoding prices in the forms. Calculate prices based on the values of the hidden widgets, and sanity-check the information where you can. For example, compare against known products, to make sure they're not trying to order a burgundy XXXXXXL t-shirt.</P
><p class="para">Using hidden data is more robust than using cookies, because you can't rely on the browser supporting or accepting cookies. A full explanation is in <a class="xref" href="ch19_11.htm" title="Managing Cookies">Recipe 19.10</A
>.</P
><p class="para">We show a simple shopping cart application as the program <em class="emphasis">chemiserie</EM
> at the end of this chapter.<a class="indexterm" name="ch19-idx-1000005505-0"></A
><a class="indexterm" name="ch19-idx-1000005505-1"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch19-pgfId-1468">See Also</A
></H3
><p class="para">The documentation for the standard CGI module.</P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch19_12.htm" title="19.11. Creating Sticky Widgets"><img src="../gifs/txtpreva.gif" alt="Previous: 19.11. Creating Sticky Widgets" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch19_14.htm" title="19.13. Saving a Form to a File or Mail Pipe"><img src="../gifs/txtnexta.gif" alt="Next: 19.13. Saving a Form to a File or Mail Pipe" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">19.11. Creating Sticky Widgets</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">19.13. Saving a Form to a File or Mail Pipe</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
