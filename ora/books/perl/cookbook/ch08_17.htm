<html><head>
<title>Recipe 8.16. Reading Configuration Files</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:38:53Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch08_01.htm" title="8. File Contents"><link rel="prev" href="ch08_16.htm" title="8.15. Reading Fixed-Length Records"><link rel="next" href="ch08_18.htm" title="8.17. Testing a File for Trustworthiness"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch08_16.htm" title="8.15. Reading Fixed-Length Records"><img src="../gifs/txtpreva.gif" alt="Previous: 8.15. Reading Fixed-Length Records" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch08_01.htm" title="8. File Contents">Chapter 8<br>File Contents</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch08_18.htm" title="8.17. Testing a File for Trustworthiness"><img src="../gifs/txtnexta.gif" alt="Next: 8.17. Testing a File for Trustworthiness" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch08-34459">8.16. Reading Configuration Files</A
></H2
><div class="sect2"><h3 class="sect2"><a class="title" name="ch08-pgfId-1444">Problem<a class="indexterm" name="ch08-idx-1000004706-0"></A
><a class="indexterm" name="ch08-idx-1000004706-1"></A
></A
></H3
><p class="para">You want to allow the users of your program to change its behavior through configuration files.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch08-pgfId-1450">Solution</A
></H3
><p class="para">Either process a file in trivial VAR=VALUE format, setting a hash key-value pair for each setting:</P
><pre class="programlisting">while (&lt;CONFIG&gt;) {
    chomp;                  # no newline
    s/#.*//;                # no comments
    s/^\s+//;               # no leading white
    s/\s+$//;               # no trailing white
    next unless length;     # anything left?
    my ($var, $value) = split(/\s*=\s*/, $_, 2);
    $User_Preferences{$var} = $value;
} </PRE
><p class="para">Or better yet, treat the config file as full Perl code:</P
><pre class="programlisting">do &quot;$ENV{HOME}/.progrc&quot;;</PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch08-pgfId-1478">Discussion</A
></H3
><p class="para">The first solution lets you read in config files in a trivial format like this (comments and blank lines are allowed):</P
><pre class="programlisting"># set class C net
NETMASK = 255.255.255.0
MTU     = 296
    
DEVICE  = cua1
RATE    = 115200
MODE    = adaptive</PRE
><p class="para">After you're done, you can pull in a setting by something like <code class="literal">$User_Preferences{&quot;RATE&quot;}</CODE
> to find the value 115200. If you wanted the config file to directly set a variable in your program using that name, instead of assigning to the hash, do this:</P
><pre class="programlisting">no strict 'refs';
$$var = $value;</PRE
><p class="para">and the <code class="literal">$RATE</CODE
> variable would contain 115200.</P
><p class="para">The second solution uses <code class="literal">do</CODE
><a class="indexterm" name="ch08-idx-1000004714-0"></A
> to pull in raw Perl code directly. When used with an expression instead of a block, <code class="literal">do</CODE
> interprets the expression as a filename. This is nearly identical to using <code class="literal">require</CODE
>, but without risk of taking a fatal exception. In the second format, the config file would look like:</P
><pre class="programlisting"># set class C net
$NETMASK = '255.255.255.0';
$MTU     = 0x128;
# Brent, please turn on the modem
$DEVICE  = 'cua1';
$RATE    = 115_200;
$MODE    = 'adaptive';</PRE
><p class="para">If you don't see the point of having extra punctuation and live code, consider this: you can have all of Perl at your disposal. You can now add arbitrary logic and tests to your simple assignments:</P
><pre class="programlisting">if ($DEVICE =~ /1$/) {
    $RATE = 28_800;
} else {
    $RATE = 115_200;
} </PRE
><p class="para">Many programs support system and personal configuration files. If you want the user's choices to override the system ones, load the user file second:</P
><pre class="programlisting">$APPDFLT = &quot;/usr/local/share/myprog&quot;;

do &quot;$APPDFLT/sysconfig.pl&quot;;
do &quot;$ENV{HOME}/.myprogrc&quot;;</PRE
><p class="para">If you want to ignore the system config file when the user has their own, test the return value of the <code class="literal">do</CODE
>.</P
><pre class="programlisting">do &quot;$ENV{HOME}/.myprogrc&quot;;
    or
do &quot;$APPDFLT/sysconfig.pl&quot;</PRE
><p class="para">You might wonder what context those files will be executed under. They will be in the same package that <code class="literal">do</CODE
> itself was compiled into. Typically you'll direct users to set particular variables, which, being unqualified globals, will end up in the current package. If you'd prefer unqualified variables go into a particular package, do this:</P
><pre class="programlisting">{ package Settings; do &quot;$ENV{HOME}/.myprogrc&quot; }<code class="literal"></CODE
><a class="indexterm" name="ch08-idx-1000004716-0"></A
></PRE
><p class="para">As with a file read in using <code class="literal">require</CODE
> or <code class="literal">use</CODE
>, those read in using <code class="literal">do</CODE
> count as a separate and unrelated lexical scope. That means the configuration file can't access its caller's lexical (<code class="literal">my</CODE
>) variables, nor can the caller find any such variables that might have been set in the file. It also means that the user's code isn't held accountable to a pragma like <em class="emphasis">use strict</EM
> or <em class="emphasis">use integer</EM
> that may be in effect in the caller.</P
><p class="para">If you don't want clean partitioning of variable visibility, you can get the config file's code executed in your own lexical scope. If you have a <code class="literal">cat</CODE
> program or its technical equivalent handy, you could write yourself a hand-rolled <code class="literal">do</CODE
>:</P
><pre class="programlisting">eval `cat $ENV{HOME}/.myprogrc`;</PRE
><p class="para">We've never actually seen anyone (except Larry) use that approach in production code.</P
><p class="para">For one thing, <code class="literal">do</CODE
> is a lot easier to type. Also, it respects the <code class="literal">@INC</CODE
> path, which is normally searched if a full path is not specified, but, unlike using a <code class="literal">require</CODE
>, no implicit error checking happens under <code class="literal">do</CODE
>. This means you don't have to wrap it in an <code class="literal">eval</CODE
> to catch exceptions that would otherwise cause your program to die, because <code class="literal">do</CODE
> already functions as an <code class="literal">eval</CODE
>.</P
><p class="para">You can still check for errors on your own if you'd like:</P
><pre class="programlisting">$file = &quot;someprog.pl&quot;;
unless ($return = do $file) {
    warn &quot;couldn't parse $file: $@&quot;         if $@;
    warn &quot;couldn't do $file: $!&quot;            unless defined $return;
    warn &quot;couldn't run $file&quot;               unless $return;
}</PRE
><p class="para">This is much simpler for the programmer to source in code than it would be to invent and then parse a complicated, new syntax. It's also much easier on the user than forcing them to learn the syntax rules of yet another configuration file. Even better, you give the user access to a powerful algorithmic programming language.</P
><p class="para">One reasonable concern is security. How do you know that the file hasn't been tampered with by someone other than the user? The traditional approach here is to do nothing, trusting the directory and file permissions. Nine times out of ten, this is also the right approach. Most projects just aren't worth being that paranoid over. For those that are, see the next recipe.<a class="indexterm" name="ch08-idx-1000004708-0"></A
><a class="indexterm" name="ch08-idx-1000004708-1"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch08-pgfId-1584">See Also</A
></H3
><p class="para">The <code class="literal">eval</CODE
> and <code class="literal">require</CODE
> functions in <i class="filename">perlfunc </I
>(1) and in <a class="olink" href="../prog/ch03_01.htm">Chapter 3</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
>; <a class="xref" href="ch08_18.htm" title="Testing a File for Trustworthiness">Recipe 8.17</A
>; <a class="xref" href="ch10_13.htm" title="Handling Exceptions">Recipe 10.12</A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch08_16.htm" title="8.15. Reading Fixed-Length Records"><img src="../gifs/txtpreva.gif" alt="Previous: 8.15. Reading Fixed-Length Records" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch08_18.htm" title="8.17. Testing a File for Trustworthiness"><img src="../gifs/txtnexta.gif" alt="Next: 8.17. Testing a File for Trustworthiness" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">8.15. Reading Fixed-Length Records</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">8.17. Testing a File for Trustworthiness</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
