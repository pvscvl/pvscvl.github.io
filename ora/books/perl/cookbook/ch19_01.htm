<html><head>
<title>[Chapter 19] CGI Programming</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:45:11Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="index.htm" title="Perl Cookbook"><link rel="prev" href="ch18_10.htm" title="18.9. Program: expn and vrfy"><link rel="next" href="ch19_02.htm" title="19.1. Writing a CGI Script"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch18_10.htm" title="18.9. Program: expn and vrfy"><img src="../gifs/txtpreva.gif" alt="Previous: 18.9. Program: expn and vrfy" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 19</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch19_02.htm" title="19.1. Writing a CGI Script"><img src="../gifs/txtnexta.gif" alt="Next: 19.1. Writing a CGI Script" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="chapter"><h1 class="chapter"><a class="title" name="ch19-41491">19. CGI Programming</A
></H1
><div class="htmltoc"><p><b>Contents:</B
><br><a class="sect1" href="#ch19-11601" title="19.0. Introduction">Introduction</A
><br><a class="sect1" href="ch19_02.htm" title="19.1. Writing a CGI Script">Writing a CGI Script</A
><br><a class="sect1" href="ch19_03.htm" title="19.2. Redirecting Error Messages">Redirecting Error Messages</A
><br><a class="sect1" href="ch19_04.htm" title="19.3. Fixing a 500 Server Error">Fixing a 500 Server Error</A
><br><a class="sect1" href="ch19_05.htm" title="19.4. Writing a Safe CGI Program">Writing a Safe CGI Program</A
><br><a class="sect1" href="ch19_06.htm" title="19.5. Making CGI Scripts Efficient">Making CGI Scripts Efficient</A
><br><a class="sect1" href="ch19_07.htm" title="19.6. Executing Commands Without Shell Escapes">Executing Commands Without Shell Escapes</A
><br><a class="sect1" href="ch19_08.htm" title="19.7. Formatting Lists and Tables with HTML Shortcuts">Formatting Lists and Tables with HTML Shortcuts</A
><br><a class="sect1" href="ch19_09.htm" title="19.8. Redirecting to a Different Location">Redirecting to a Different Location</A
><br><a class="sect1" href="ch19_10.htm" title="19.9. Debugging the Raw HTTP Exchange">Debugging the Raw HTTP Exchange</A
><br><a class="sect1" href="ch19_11.htm" title="19.10. Managing Cookies">Managing Cookies</A
><br><a class="sect1" href="ch19_12.htm" title="19.11. Creating Sticky Widgets">Creating Sticky Widgets</A
><br><a class="sect1" href="ch19_13.htm" title="19.12. Writing a Multiscreen CGI Script">Writing a Multiscreen CGI Script</A
><br><a class="sect1" href="ch19_14.htm" title="19.13. Saving a Form to a File or Mail Pipe">Saving a Form to a File or Mail Pipe</A
><br><a class="sect1" href="ch19_15.htm" title="19.14. Program: chemiserie">Program: chemiserie</A
></P
><p></P
></DIV
><div class="epigraph" align="right"><p class="para" align="right"><i>A successful tool is one that was used to do something undreamt of by its author.</I
></P
><p class="attribution" align="right">-&nbsp;Stephen C. Johnson </P
></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch19-11601">19.0. Introduction</A
></H2
><p class="para"><a class="indexterm" name="ch19-idx-1000005328-0"></A
>Changes in the environment or the availability of food can make certain species more successful than others at getting food or avoiding predators. Many scientists believe a comet struck the earth millions of years ago, throwing an enormous cloud of dust into the atmosphere. Subsequent radical changes to the environment proved too much for some organisms, say dinosaurs, and hastened their extinction. Other creatures, such as mammals, found new food supplies and freshly exposed habitats to compete in.</P
><p class="para">Much as the comet altered the environment for prehistoric species, the Web has altered the environment for modern programming languages. It's opened up new vistas, and although some languages have found themselves eminently unsuited to this new world order, Perl has positively thrived. Because of its strong background in text processing and system glue, Perl has readily adapted itself to the task of providing information using text-based protocols.</P
><div class="sect2"><h3 class="sect2"><a class="title" name="ch19-chap19_architecture_0">Architecture</A
></H3
><p class="para">The <a class="indexterm" name="ch19-idx-1000005341-0"></A
>Web is driven by plain text. Web servers and web browsers communicate using a text protocol called HTTP, Hypertext Transfer Protocol. Many of the documents exchanged are encoded in a text markup system called HTML, Hypertext Markup Language. This grounding in text is the source of much of the Web's flexibility, power, and success. The only notable exception to the predominance of plain text is the Secure Socket Layer (SSL) protocol that encrypts other protocols like HTTP into binary data that snoopers can't decode.</P
><p class="para">Web pages are identified using the <a class="indexterm" name="ch19-idx-1000005338-0"></A
>Uniform Resource Locator (URL) naming scheme. URLs look like this:</P
><pre class="programlisting">http://www.perl.com/CPAN/
http://www.perl.com:8001/bad/mojo.html
ftp://gatekeeper.dec.com/pub/misc/netlib.tar.Z
ftp://anonymous@myplace:gatekeeper.dec.com/pub/misc/netlib.tar.Z
file:///etc/motd</PRE
><p class="para">The first part (<code class="literal">http</CODE
>, <code class="literal">ftp</CODE
>, <code class="literal">file</CODE
>) is called the <em class="emphasis">scheme</EM
><a class="indexterm" name="ch19-idx-1000005339-0"></A
>, and identifies how the file is retrieved. The next part (<code class="literal">://</CODE
>) signifies a hostname will follow, whose interpretation depends on the scheme. After the hostname comes the <em class="emphasis">path</EM
><a class="indexterm" name="ch19-idx-1000005340-0"></A
><a class="indexterm" name="ch19-idx-1000005340-1"></A
> identifying the document. This path information is also called a <em class="emphasis">partial URL</EM
>.</P
><p class="para">The Web is a client-server system. Client browsers like Netscape and Lynx request documents (identified by a partial URL) from web servers like Apache. This browser-to-server dialog is governed by the HTTP protocol. Most of the time, the server merely sends back the contents of a file. Sometimes, however, the web server will run another program to send back a document that could be HTML text, an image, or any other document type. The server-to-program dialog is governed by the CGI (Common Gateway Interface) protocol, so the program that the server runs is a <em class="emphasis">CGI program</EM
> or <em class="emphasis">CGI script</EM
>.</P
><p class="para">The server tells the CGI program what page was requested, what values (if any) came in through HTML forms, where the request came from, who they authenticated as (if they authenticated at all), and much more. The CGI program's reply has two parts: headers to say "I'm sending back an HTML document," "I'm sending back a GIF image," or "I'm not sending you anything, go to this page instead," and a document body, perhaps containing GIF image data, plain text, or HTML.</P
><p class="para">The CGI protocol is easy to implement wrong and hard to implement right, which is why we recommend using Lincoln Stein's excellent <a class="indexterm" name="ch19-idx-1000005351-0"></A
>CGI.pm module. It provides convenient functions for accessing the information the server sends you, and for preparing the CGI response the server expects. It is so useful, it is included in the standard Perl distribution as of the 5.004 release, along with helper modules like CGI::Carp and CGI::Fast. We show it off in <a class="xref" href="ch19_02.htm" title="Writing a CGI Script">Recipe 19.1</A
>.</P
><p class="para">Some web servers come with a Perl interpreter embedded in them. This lets you use Perl to generate documents without starting a new process. The system overhead of reading an unchanging page isn't noticable on infrequently accessed pages, even when it's happening several times a second. CGI accesses, however, bog down the machine running the web server. <a class="xref" href="ch19_06.htm" title="Making CGI Scripts Efficient">Recipe 19.5</A
> shows how to use <code class="literal">mod_perl</CODE
>, the Perl interpreter embedded in the Apache web server, to get the benefits of CGI programs without the overhead.<a class="indexterm" name="ch19-idx-1000005343-0"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch19-chap19_behind_0">Behind the Scenes</A
></H3
><p class="para">CGI programs are called each time the web server needs a dynamic document generated. It is important to understand that your CGI program doesn't run continuously, with the browser calling different parts of the program. Each request for a partial URL corresponding to your program starts a new copy. Your program generates a page for that request, then quits.</P
><p class="para">A browser can request a document in a number of ways called <em class="emphasis">methods</EM
>. (Don't confuse HTTP methods with the methods of object-orientation. They have nothing to do with each other). The <a class="indexterm" name="ch19-idx-1000005352-0"></A
><a class="indexterm" name="ch19-idx-1000005352-1"></A
><a class="indexterm" name="ch19-idx-1000005352-2"></A
><a class="indexterm" name="ch19-idx-1000005352-3"></A
>GET method is the most common, indicating a simple request for a document. The <a class="indexterm" name="ch19-idx-1000005353-0"></A
>HEAD method is used when the browser wants to know about the document without actually fetching it. The <a class="indexterm" name="ch19-idx-1000005354-0"></A
>POST method is used to submit form values.</P
><p class="para">Form values can be encoded in both GET and POST methods. With the GET method, values are encoded in the URL, leading to ugly URLs like this:</P
><pre class="programlisting">http://mox.perl.com/cgi-bin/program?name=Johann&amp;born=1685</PRE
><p class="para">With the POST method, values are in a different part of the HTTP request that the browser sends the server. If the form values in the example URL above were sent with a POST request, the user, server, and CGI script all see the URL:</P
><pre class="programlisting">http://mox.perl.com/cgi-bin/program</PRE
><p class="para">The GET and POST methods differ in another respect: <em class="emphasis">idempotency</EM
><a class="indexterm" name="ch19-idx-1000005355-0"></A
>. This simply means that making a GET request for a particular URL once or multiple times should be no different. This is because the HTTP protocol definition says that a GET request may be cached by the browser, or server, or an intervening proxy. POST requests cannot be cached, because each request is independent and matters. Typically, POST requests changes or depends on the state of the server (query or update a database, send mail, or purchase a computer).</P
><p class="para">Most servers log requests to a file (the <em class="emphasis">access log</EM
><a class="indexterm" name="ch19-idx-1000005356-0"></A
>) for later analysis by the webmaster. Error messages produced by CGI programs don't go to the browser by default. Instead they are also logged to a file (the <em class="emphasis">error log</EM
><a class="indexterm" name="ch19-idx-1000005357-0"></A
><a class="indexterm" name="ch19-idx-1000005357-1"></A
><a class="indexterm" name="ch19-idx-1000005357-2"></A
>), and the browser simply gets a "500 Server Error" message saying that the CGI program didn't uphold its end of the CGI bargain.</P
><p class="para"><a class="indexterm" name="ch19-idx-1000005358-0"></A
><a class="indexterm" name="ch19-idx-1000005358-1"></A
>Error messages are useful in debugging any program, but they are especially so with CGI scripts. Sometimes, though, the authors of CGI programs either don't have access to the error log or don't know where it is. Having error messages sent to a more convenient location is discussed in <a class="xref" href="ch19_03.htm" title="Redirecting Error Messages">Recipe 19.2</A
>. Tracking down errors is covered in <a class="xref" href="ch19_04.htm" title="Fixing a 500 Server Error">Recipe 19.3</A
>.</P
><p class="para"><a class="xref" href="ch19_10.htm" title="Debugging the Raw HTTP Exchange">Recipe 19.9</A
> shows how to learn what your browser and server are really saying to one another. Unfortunately, some browsers do not implement the HTTP specification correctly, and you can use the tools in this recipe to investigate whether your program or your browser is the cause of a problem.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch19-chap19_security_0">Security</A
></H3
><p class="para"><a class="indexterm" name="ch19-idx-1000005359-0"></A
><a class="indexterm" name="ch19-idx-1000005359-1"></A
>CGI programs let anyone run a program on your system. Sure, you get to pick the program, but the anonymous user from Out There can send it unexpected values and try to trick it into doing the wrong thing. Thus security is a big concern on the Web.</P
><p class="para">Some sites address this concern by banning CGI programs. Sites that can't do without the power and utility of CGI programs must find ways to secure their CGI programs. <a class="xref" href="ch19_05.htm" title="Writing a Safe CGI Program">Recipe 19.4</A
> gives a checklist of considerations for writing a secure CGI script, and it briefly covers Perl's tainting mechanism for guarding against accidental use of unsafe data. <a class="xref" href="ch19_07.htm" title="Executing Commands Without Shell Escapes">Recipe 19.6</A
> shows how your CGI program can safely run other programs.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch19-chap19_html_0">HTML and Forms</A
></H3
><p class="para"><a class="indexterm" name="ch19-idx-1000005360-0"></A
><a class="indexterm" name="ch19-idx-1000005360-1"></A
>Some HTML tags let you create forms, where the user can fill in values that will be submitted to the server. The forms are composed of widgets, like text entry fields and check boxes. CGI programs commonly return HTML, so the CGI module has helper functions to create HTML for everything from tables to form widgets.</P
><p class="para">In addition to <a class="xref" href="ch19_08.htm" title="Formatting Lists and Tables with HTML Shortcuts">Recipe 19.7</A
>, this chapter also has <a class="xref" href="ch19_12.htm" title="Creating Sticky Widgets">Recipe 19.11</A
>, which shows how to create forms that retain their values over multiple calls. <a class="xref" href="ch19_13.htm" title="Writing a Multiscreen CGI Script">Recipe 19.12</A
> shows how to make a single CGI script that produces and responds to a set of pages, for example, a product catalog and ordering system.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch19-chap19_web_related_0">Web-Related Resources</A
></H3
><p class="para"><a class="indexterm" name="ch19-idx-1000005361-0"></A
><a class="indexterm" name="ch19-idx-1000005361-1"></A
>Unsurprisingly, some of the best references on the Web are found on the Web:</P
><dl class="variablelist"><dt class="term">WWW Security FAQ</DT
><dd class="listitem"><p class="para"><a class="systemitem.url" href="../../../../../../../www.w3.org/Security/Faq/">http://www.w3.org/Security/Faq/</A
></P
></DD
><dt class="term">Web FAQ</DT
><dd class="listitem"><p class="para"><a class="systemitem.url" href="../../../../../../../www.boutell.com/faq/">http://www.boutell.com/faq/</A
></P
></DD
><dt class="term">CGI FAQ</DT
><dd class="listitem"><p class="para"><a class="systemitem.url" href="../../../../../../../www.webthing.com/tutorials/cgifaq.html">http://www.webthing.com/tutorials/cgifaq.html</A
></P
></DD
><dt class="term">HTTP Specification</DT
><dd class="listitem"><p class="para"><a class="systemitem.url" href="../../../../../../../www.w3.org/pub/WWW/Protocols/HTTP/">http://www.w3.org/pub/WWW/Protocols/HTTP/</A
></P
></DD
><dt class="term">HTML Specification</DT
><dd class="listitem"><p class="para"><a class="systemitem.url" href="../../../../../../../www.w3.org/TR/REC-html40/">http://www.w3.org/TR/REC-html40/</A
></P
><p class="para"><a class="systemitem.url" href="../../../../../../../www.w3.org/pub/WWW/MarkUp/">http://www.w3.org/pub/WWW/MarkUp/</A
></P
></DD
><dt class="term">CGI Specification</DT
><dd class="listitem"><p class="para"><a class="systemitem.url" href="../../../../../../../www.w3.org/CGI/">http://www.w3.org/CGI/</A
></P
></DD
><dt class="term">CGI Security FAQ</DT
><dd class="listitem"><p class="para"><a class="systemitem.url" href="../../../../../../../www.go2net.com/people/paulp/cgi-security/safe-cgi.txt">http://www.go2net.com/people/paulp/cgi-security/safe-cgi.txt</A
></P
></DD
></DL
><p class="para">We recommend Lincoln Stein's fine book, <em class="emphasis">Official Guide to Programming with Cgi.pm</EM
> (John Wiley and Associates, 1998), Tom Boutell's aging but worthwhile <em class="emphasis">CGI Programming in C and Perl</EM
> (Addison-Wesley, 1996) and <em class="emphasis">HTML: The Definitive Guide</EM
> (3rd Edition; O'Reilly &amp; Associates, 1998) by Chuck Musciano and Bill Kennedy. The best periodical to date is the monthly <em class="emphasis">Web Techniques</EM
> magazine, targeted at web programmers.</P
></DIV
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch18_10.htm" title="18.9. Program: expn and vrfy"><img src="../gifs/txtpreva.gif" alt="Previous: 18.9. Program: expn and vrfy" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch19_02.htm" title="19.1. Writing a CGI Script"><img src="../gifs/txtnexta.gif" alt="Next: 19.1. Writing a CGI Script" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">18.9. Program: expn and vrfy</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">19.1. Writing a CGI Script</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
