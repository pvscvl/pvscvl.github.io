<html><head>
<title>[Chapter 4] Arrays</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:30:52Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="index.htm" title="Perl Cookbook"><link rel="prev" href="ch03_12.htm" title="3.11. Program: hopdelta"><link rel="next" href="ch04_02.htm" title="4.1. Specifying a List In Your Program"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name="srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch03_12.htm" title="3.11. Program: hopdelta"><img src="../gifs/txtpreva.gif" alt="Previous: 3.11. Program: hopdelta" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 4</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch04_02.htm" title="4.1. Specifying a List In Your Program"><img src="../gifs/txtnexta.gif" alt="Next: 4.1. Specifying a List In Your Program" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="chapter"><h1 class="chapter"><a class="title" name="ch04-42614">4. Arrays</A
></H1
><div class="htmltoc"><p><b>Contents:</B
><br><a class="sect1" href="#ch04-12050" title="4.0. Introduction">Introduction</A
><br><a class="sect1" href="ch04_02.htm" title="4.1. Specifying a List In Your Program">Specifying a List In Your Program</A
><br><a class="sect1" href="ch04_03.htm" title="4.2. Printing a List with Commas">Printing a List with Commas</A
><br><a class="sect1" href="ch04_04.htm" title="4.3. Changing Array Size">Changing Array Size</A
><br><a class="sect1" href="ch04_05.htm" title="4.4. Doing Something with Every Element in a List">Doing Something with Every Element in a List</A
><br><a class="sect1" href="ch04_06.htm" title="4.5. Iterating Over an Array by Reference">Iterating Over an Array by Reference</A
><br><a class="sect1" href="ch04_07.htm" title="4.6. Extracting Unique Elements from a List">Extracting Unique Elements from a List</A
><br><a class="sect1" href="ch04_08.htm" title="4.7. Finding Elements in One Array but Not Another">Finding Elements in One Array but Not Another</A
><br><a class="sect1" href="ch04_09.htm" title="4.8. Computing Union, Intersection, or Difference of Unique Lists">Computing Union, Intersection, or Difference of Unique Lists</A
><br><a class="sect1" href="ch04_10.htm" title="4.9. Appending One Array to Another">Appending One Array to Another</A
><br><a class="sect1" href="ch04_11.htm" title="4.10. Reversing an Array">Reversing an Array</A
><br><a class="sect1" href="ch04_12.htm" title="4.11. Processing Multiple Elements of an Array">Processing Multiple Elements of an Array</A
><br><a class="sect1" href="ch04_13.htm" title="4.12. Finding the First List Element That Passes a Test">Finding the First List Element That Passes a Test</A
><br><a class="sect1" href="ch04_14.htm" title="4.13. Finding All Elements in an Array Matching Certain Criteria">Finding All Elements in an Array Matching Certain Criteria</A
><br><a class="sect1" href="ch04_15.htm" title="4.14. Sorting an Array Numerically">Sorting an Array Numerically</A
><br><a class="sect1" href="ch04_16.htm" title="4.15. Sorting a List by Computable Field">Sorting a List by Computable Field</A
><br><a class="sect1" href="ch04_17.htm" title="4.16. Implementing a Circular List">Implementing a Circular List</A
><br><a class="sect1" href="ch04_18.htm" title="4.17. Randomizing an Array">Randomizing an Array</A
><br><a class="sect1" href="ch04_19.htm" title="4.18. Program: words">Program: words</A
><br><a class="sect1" href="ch04_20.htm" title="4.19. Program: permute">Program: permute</A
></P
><p></P
></DIV
><div class="epigraph" align="right"><p class="para" align="right"><i>Works of art, in my opinion, are the only objects in the material universe to possess internal order, and that is why, though I don't believe that only art matters, I do believe in Art for Art's sake.</I
></P
><p class="attribution" align="right">-&nbsp;E.M. Forster </P
></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch04-12050">4.0. Introduction</A
></H2
><p class="para"><a class="indexterm" name="ch04-idx-1000006569-0"></A
>If you are asked about the contents of your pockets, or the names of the last three presidents, or how to get to the highway, you recite a list: you name one thing after another in a particular order. <a class="indexterm" name="ch04-idx-1000006571-0"></A
><a class="indexterm" name="ch04-idx-1000006571-1"></A
><a class="indexterm" name="ch04-idx-1000006571-2"></A
>Lists are part of your conception of the world. With Perl's powerful list- and array-handling primitives, you can translate this world view directly into code.</P
><p class="para">In this chapter, we'll use the terms <i class="firstterm">list</I
> and <i class="firstterm">array</I
> as the Perl language thinks of them. Take <code class="literal">(&quot;Reagan&quot;,</CODE
> <code class="literal">&quot;Bush&quot;,</CODE
> <code class="literal">&quot;Clinton&quot;)</CODE
>; that's a <em class="emphasis">list</EM
> of the last three American presidents, in order. To store that list into a variable, use an <em class="emphasis">array</EM
>, as in <code class="literal">@presidents</CODE
> <code class="literal">=</CODE
> <code class="literal">(&quot;Reagan&quot;,</CODE
> <code class="literal">&quot;Bush&quot;,</CODE
> <code class="literal">&quot;Clinton&quot;)</CODE
>. Both are ordered groups of scalar values; the difference is that an array is a named variable, one whose array length can be directly changed, whereas a list is a more ephemeral notion. You might think of an array as a variable and a list as the values it contains.</P
><p class="para">This distinction may seem arbitrary, but operations that modify the length of these groupings (like <code class="literal">push</CODE
> and <code class="literal">pop</CODE
>) require a proper array and not merely a list. Think of the difference between <code class="literal">$a</CODE
> and <code class="literal">4</CODE
>. You can say <code class="literal">$a++</CODE
> but not <code class="literal">4++</CODE
>. Likewise, you can say <code class="literal">pop(@a)</CODE
> but not <code class="literal">pop</CODE
> <code class="literal">(1,2,3)</CODE
>.</P
><p class="para">The most important thing to glean from this is that Perl's lists and arrays are both ordered groupings of scalars. Operators and functions that work on lists or arrays are designed to provide faster or more convenient access to the elements than manual access would provide. Since few actually deal with modifying the array's length, you can usually use arrays and lists interchangeably.</P
><p class="para">You can't use nested parentheses to create a list of lists. If you try that in Perl, your lists get <i class="firstterm">flattened</I
>, meaning that both these lines are equivalent: <a class="indexterm" name="ch04-idx-1000006574-0"></A
><a class="indexterm" name="ch04-idx-1000006574-1"></A
></P
><pre class="programlisting">@nested = (&quot;this&quot;, &quot;that&quot;, &quot;the&quot;, &quot;other&quot;);
@nested = (&quot;this&quot;, &quot;that&quot;, (&quot;the&quot;, &quot;other&quot;));</PRE
><p class="para">Why doesn't Perl (usefully) just support nested lists directly? Although partially for historical reasons, this easily allows for operations (like <code class="literal">print</CODE
> or <code class="literal">sort</CODE
>) that work on arbitrarily long lists of arbitrary contents.</P
><p class="para"><a class="indexterm" name="ch04-idx-1000006573-0"></A
><a class="indexterm" name="ch04-idx-1000006573-1"></A
>What happens if you want a more complex data structure, such as an array of arrays or an array of hashes? Remember that scalars aren't restricted to containing just numbers or strings; they can also hold references. Complex (multilevel) data structures in Perl are always put together using references. Therefore, what appear to be "two-dimensional arrays" or "arrays of arrays" are always implemented as arrays of array <em class="emphasis">references</EM
>, in the same way that two-dimensional arrays in C can be arrays of pointers to arrays.</P
><p class="para">Most recipes in this chapter don't care what you keep in your arrays; for example, the problem of merging two arrays is the same whether the arrays contains strings, numbers, or references. Some problems are intrinsically tied to the contents of your arrays; recipes for those are in <a class="xref" href="ch11_01.htm" title="References and Records">Chapter 11, <cite class="chapter">References and Records</CITE
></A
>. This chapter's recipes deal with generic arrays.</P
><p class="para"><a class="indexterm" name="ch04-idx-1000006575-0"></A
>Let's have some more terminology. The scalar items in an array or list are called <em class="emphasis">elements</EM
>, which you access by specifying their position, or<a class="indexterm" name="ch04-idx-1000006576-0"></A
> <em class="emphasis">index</EM
>. Indices in Perl start at <code class="literal">0</CODE
>. So, given this list:</P
><pre class="programlisting">@tune = ( &quot;The&quot;, &quot;Star-Spangled&quot;, &quot;Banner&quot; );</PRE
><p class="para"><code class="literal">&quot;The&quot;</CODE
> is in the first position, but you'd access it as <code class="literal">$tune[0]</CODE
>. <code class="literal">&quot;Star-Spangled&quot;</CODE
> is in the second position, but you'd access it as <code class="literal">$tune[1]</CODE
>. This structure is doubly justified: the contrariness of computers, whose first representable number is 0, and the contrariness of language designers, who chose 0 because it is an <em class="emphasis">offset</EM
> into the array, not the <em class="emphasis">ordinal</EM
> number of the element.</P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch03_12.htm" title="3.11. Program: hopdelta"><img src="../gifs/txtpreva.gif" alt="Previous: 3.11. Program: hopdelta" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch04_02.htm" title="4.1. Specifying a List In Your Program"><img src="../gifs/txtnexta.gif" alt="Next: 4.1. Specifying a List In Your Program" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">3.11. Program: hopdelta</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">4.1. Specifying a List In Your Program</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
