<html><head>
<title>Recipe 16.7. Reading STDERR from a Program</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:43:50Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch16_01.htm" title="16. Process Management and Communication"><link rel="prev" href="ch16_07.htm" title="16.6. Preprocessing Input"><link rel="next" href="ch16_09.htm" title="16.8. Controlling Input and Output of Another Program"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name="srchmap"index.html><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch16_07.htm" title="16.6. Preprocessing Input"><img src="../gifs/txtpreva.gif" alt="Previous: 16.6. Preprocessing Input" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch16_01.htm" title="16. Process Management and Communication">Chapter 16<br>Process Management and Communication</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch16_09.htm" title="16.8. Controlling Input and Output of Another Program"><img src="../gifs/txtnexta.gif" alt="Next: 16.8. Controlling Input and Output of Another Program" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch16-chap16_reading_1">16.7. Reading STDERR from a Program</A
></H2
><div class="sect2"><h3 class="sect2"><a class="title" name="ch16-pgfId-1284">Problem<a class="indexterm" name="ch16-idx-1000006308-0"></A
><a class="indexterm" name="ch16-idx-1000006308-1"></A
><a class="indexterm" name="ch16-idx-1000006308-2"></A
><a class="indexterm" name="ch16-idx-1000006308-3"></A
><a class="indexterm" name="ch16-idx-1000006308-4"></A
></A
></H3
><p class="para">You want to run a program as you would with <code class="literal">system</CODE
>, backticks, or <code class="literal">open</CODE
>, but you don't want its STDERR to be sent to your STDERR. You would like to be able to either ignore or read the STDERR.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch16-pgfId-1290">Solution</A
></H3
><p class="para">Use the shell's numeric redirection and duplication syntax for file descriptors. (We don't check the return value from <code class="literal">open</CODE
> here, to make the examples easier to read, but you should always check it in your programs!)</P
><p class="para">To capture a command's STDERR and STDOUT together:</P
><pre class="programlisting">$output = `cmd 2&gt;&amp;1`;                          # with backticks
# or
$pid = open(PH, &quot;cmd 2&gt;&amp;1 |&quot;);                 # with an open pipe
while (&lt;PH&gt;) { }                               # plus a read</PRE
><p class="para">To capture a command's STDOUT and discard its STDERR:</P
><pre class="programlisting">$output = `cmd 2&gt;/dev/null`;                   # with backticks
# or
$pid = open(PH, &quot;cmd 2&gt;/dev/null |&quot;);          # with an open pipe
while (&lt;PH&gt;) { }                               # plus a read</PRE
><p class="para">To capture a command's STDERR and discard its STDOUT:</P
><pre class="programlisting">$output = `cmd 2&gt;&amp;1 1&gt;/dev/null`;              # with backticks
# or
$pid = open(PH, &quot;cmd 2&gt;&amp;1 1&gt;/dev/null |&quot;);     # with an open pipe
while (&lt;PH&gt;) { }                               # plus a read</PRE
><p class="para">To exchange a command's STDOUT and STDERR, i.e., capture the STDERR but have its STDOUT come out on our old STDERR:</P
><pre class="programlisting">$output = `cmd 3&gt;&amp;1 1&gt;&amp;2 2&gt;&amp;3 3&gt;&amp;-`;           # with backticks
# or
$pid = open(PH, &quot;cmd 3&gt;&amp;1 1&gt;&amp;2 2&gt;&amp;3 3&gt;&amp;-|&quot;);   # with an open pipe
while (&lt;PH&gt;) { }                               # plus a read</PRE
><p class="para">To read both a command's STDOUT and its STDERR separately, it's easiest and safest to redirect them separately to files, and then read from those files when the program is done:</P
><pre class="programlisting">system(&quot;program args 1&gt;/tmp/program.stdout 2&gt;/tmp/program.stderr&quot;);</PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch16-pgfId-1332">Discussion</A
></H3
><p class="para">When you launch a command with backticks, a piped <code class="literal">open</CODE
>, or <code class="literal">system</CODE
> on a single string, Perl checks for characters special to the shell. These allow you to redirect the new program's file descriptors. STDIN is file descriptor number 0, STDOUT number 1, and STDERR number 2. You can then use <code class="literal">2&gt;</CODE
><i class="filename">file</I
> to redirect STDERR to a file. The special notation <code class="literal">&amp;N</CODE
> where N is a file descriptor number is used to redirect to a file descriptor. Therefore, <code class="literal">2&gt;&amp;1</CODE
> points STDERR at STDOUT.</P
><p class="para">Here is a table of interesting shell file descriptor redirections:</P
><table class="informaltable" border="1" cellpadding="3"><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1"><p class="para">Redirection</P
></TH
><th class="entry" align="LEFT" rowspan="1" colspan="1"><p class="para">Meaning</P
></TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">0&lt;/dev/null </CODE
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">Make STDIN give immediate EOF</CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">1&gt;/dev/null </CODE
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">Discard STDOUT</CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">2&gt;/dev/null </CODE
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">Discard STDERR</CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">2&gt;&amp;1        </CODE
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">Send STDERR to STDOUT instead</CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">2&gt;&amp;-         </CODE
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">Close STDERR (not recommended)</CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">3&lt;&gt;/dev/tty </CODE
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">Open fd 3 to</CODE
><i class="filename"> /dev/tty</I
><code class="literal"> in read-write mode</CODE
></P
></TD
></TR
></TBODY
></TABLE
><p class="para">Using this, let's examine the most complicated of the redirection sequences from the solution section:</P
><pre class="programlisting">$output = `cmd 3&gt;&amp;1 1&gt;&amp;2 2&gt;&amp;3 3&gt;&amp;-`;        </PRE
><p class="para">There are four steps here:</P
><dl class="variablelist"><dt class="term">Step A: <code class="literal">3&gt;&amp;1</CODE
> </DT
><dd class="listitem"><p class="para">Make a new file descriptor, number 3, be a copy of number 1. This saves where STDOUT had been destined in the new file descriptor we've just opened.</P
></DD
><dt class="term">Step B: <code class="literal">1&gt;&amp;2</CODE
> </DT
><dd class="listitem"><p class="para">Make STDOUT go wherever STDERR had been going. We still have the saved destination squirreled away in descriptor 3.</P
></DD
><dt class="term">Step C: <code class="literal">2&gt;&amp;3</CODE
></DT
><dd class="listitem"><p class="para">Make file descriptor 2 a copy of number 3. That means that STDERR is now going out where STDOUT had been originally going.</P
></DD
><dt class="term">Step D: <code class="literal">3&gt;&amp;-</CODE
> </DT
><dd class="listitem"><p class="para">Since we're done moving streams around, keep everything nice and tidy and close our temporary file descriptor. This avoids file descriptor leaks.</P
></DD
></DL
><p class="para">If that's confusing, it might help to think in terms of regular variables and a sequence of assignment statements, with <code class="literal">$fd1</CODE
> representing STDOUT and <code class="literal">$fd2</CODE
> representing STDERR. If you wanted to exchange the two variables, you'd use a temporary to hold one value. That's all we're doing here.</P
><pre class="programlisting">$fd3 = $fd1;
$fd1 = $fd2;
$fd2 = $fd3;
$fd3 = undef;</PRE
><p class="para">When all's said and done, the string returned from the backticks is the command's STDERR, and its STDOUT has been diverted to the original STDERR.</P
><p class="para">Ordering is important in all these examples. That's because the shell processes file descriptor redirections in strictly left to right order.</P
><pre class="programlisting">system(&quot;prog args 1&gt;tmpfile 2&gt;&amp;1&quot;);
system(&quot;prog args 2&gt;&amp;1 1&gt;tmpfile&quot;);</PRE
><p class="para">The first command sends both standard out and standard error to the temporary file. The second command sends only the old standard output there, and the old standard error shows up on the old standard out. If that's confusing, think in terms of assignments to variables representing file descriptors:</P
><pre class="programlisting"># system (&quot;prog args 1&gt;tmpfile 2&gt;&amp;1&quot;);
$fd1 = &quot;tmpfile&quot;;        # change stdout destination first
$fd2 = $fd1;             # now point stderr there, too</PRE
><p class="para">is very different from:</P
><pre class="programlisting"># system(&quot;prog args 2&gt;&amp;1 1&gt;tmpfile&quot;);
$fd2 = $fd1;             # stderr same destination as stdout
$fd1 = &quot;tmpfile&quot;;        # but change stdout destination <a class="indexterm" name="ch16-idx-1000006310-0"></A
><a class="indexterm" name="ch16-idx-1000006310-1"></A
><a class="indexterm" name="ch16-idx-1000006310-2"></A
><a class="indexterm" name="ch16-idx-1000006310-3"></A
><a class="indexterm" name="ch16-idx-1000006310-4"></A
></PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch16-pgfId-1384">See Also</A
></H3
><p class="para">Your system's <em class="emphasis">sh </EM
>(1) manpage (if you have one) for details about file descriptor redirection; the <a class="olink" href="../prog/ch03_167.htm#PERL2-CMD-SYSTEM"><code class="literal">system</CODE
></A
> function in <a class="olink" href="../prog/ch03_01.htm">Chapter 3</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
> and in <i class="filename">perlfunc </I
>(1)</P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch16_07.htm" title="16.6. Preprocessing Input"><img src="../gifs/txtpreva.gif" alt="Previous: 16.6. Preprocessing Input" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch16_09.htm" title="16.8. Controlling Input and Output of Another Program"><img src="../gifs/txtnexta.gif" alt="Next: 16.8. Controlling Input and Output of Another Program" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">16.6. Preprocessing Input</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">16.8. Controlling Input and Output of Another Program</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
