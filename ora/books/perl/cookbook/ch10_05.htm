<html><head>
<title>Recipe 10.4. Determining Current Function Name</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:39:38Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch10_01.htm" title="10. Subroutines"><link rel="prev" href="ch10_04.htm" title="10.3. Creating Persistent Private Variables"><link rel="next" href="ch10_06.htm" title="10.5. Passing Arrays and Hashes by Reference"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch10_04.htm" title="10.3. Creating Persistent Private Variables"><img src="../gifs/txtpreva.gif" alt="Previous: 10.3. Creating Persistent Private Variables" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch10_01.htm" title="10. Subroutines">Chapter 10<br>Subroutines</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch10_06.htm" title="10.5. Passing Arrays and Hashes by Reference"><img src="../gifs/txtnexta.gif" alt="Next: 10.5. Passing Arrays and Hashes by Reference" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch10-31648">10.4. Determining Current Function Name</A
></H2
><div class="sect2"><h3 class="sect2"><a class="title" name="ch10-pgfId-326">Problem</A
></H3
><p class="para"><a class="indexterm" name="ch10-idx-1000004665-0"></A
><a class="indexterm" name="ch10-idx-1000004665-1"></A
>You want to determine the name of the currently running function. This is useful for creating error messages that don't need to be changed if you copy and paste the subroutine code.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch10-pgfId-332">Solution</A
></H3
><p class="para">Use the <code class="literal">caller</CODE
><a class="indexterm" name="ch10-idx-1000004666-0"></A
> function:</P
><pre class="programlisting">$this_function = (caller(0))[3];</PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch10-pgfId-340">Discussion</A
></H3
><p class="para">Code can always find the current line number in the special symbol <code class="literal">__LINE__ </CODE
><a class="indexterm" name="ch10-idx-1000004672-0"></A
><a class="indexterm" name="ch10-idx-1000004672-1"></A
><a class="indexterm" name="ch10-idx-1000004672-2"></A
>, the current file in <code class="literal">__FILE__</CODE
> , and the current package in <code class="literal">__PACKAGE__ </CODE
>. But there's no such symbol for the current subroutine name, let alone the name of the one that called this subroutine.</P
><p class="para">The built-in function <code class="literal">caller</CODE
> handles all of these. In scalar context it returns the calling function's package name. But in list context, it returns a wealth of information. You can also pass it a number indicating how many frames (nested subroutine calls) back you'd like information about: 0 is your own function, 1 is your caller, and so on.</P
><p class="para">Here's the full syntax, where <code class="literal">$i</CODE
> is how far back you're interested in:</P
><pre class="programlisting">($package, $filename, $line, $subr, $has_args, $wantarray )= caller($i);
#   0         1         2       3       4          5</PRE
><p class="para">Here's what each of those return values means:</P
><dl class="variablelist"><dt class="term"><code class="literal">$package </CODE
></DT
><dd class="listitem"><p class="para">The package that the code was compiled in.</P
></DD
><dt class="term"><code class="literal">$filename </CODE
></DT
><dd class="listitem"><p class="para">The name of the file the code was compiled in, reporting <code class="literal">-e</CODE
> if launched from the command-line switch of the same name, or <code class="literal">-</CODE
> if the script was read from STDIN.</P
></DD
><dt class="term"><code class="literal">$line </CODE
></DT
><dd class="listitem"><p class="para">The line number that frame was called from.</P
></DD
><dt class="term"><code class="literal">$subr </CODE
></DT
><dd class="listitem"><p class="para">The name of that frame's function, including its package. Closures return names like <code class="literal">main::__ANON__ </CODE
>, which are not callable. In <code class="literal">eval</CODE
> it returns <code class="literal">&quot;(eval)&quot;</CODE
>.</P
></DD
><dt class="term"><code class="literal">$has_args </CODE
></DT
><dd class="listitem"><p class="para">Whether the function was called with arguments.</P
></DD
><dt class="term"><code class="literal">$wantarray</CODE
> </DT
><dd class="listitem"><p class="para">The value the <code class="literal">wantarray</CODE
> function would return for that stack frame; either true, false but defined, or else undefined (respectively). This tells you whether the function was called in list, scalar, or void context.</P
></DD
></DL
><p class="para">Rather than using <code class="literal">caller</CODE
><a class="indexterm" name="ch10-idx-1000004673-0"></A
><a class="indexterm" name="ch10-idx-1000004673-1"></A
><a class="indexterm" name="ch10-idx-1000004673-2"></A
> directly as in the solution, you might want to write functions instead:</P
><pre class="programlisting">$me  = whoami();
$him = whowasi();

sub whoami  { (caller(1))[3] }
sub whowasi { (caller(2))[3] }</PRE
><p class="para">These use arguments 1 and 2 for parent and grandparent functions because the call to <code class="literal">whoami</CODE
> or <code class="literal">whowasi</CODE
> would be number 0.<a class="indexterm" name="ch10-idx-1000004668-0"></A
><a class="indexterm" name="ch10-idx-1000004668-1"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch10-pgfId-1000004848">See Also</A
></H3
><p class="para">The <a class="olink" href="../prog/ch03_191.htm#PERL2-CMD-WANTARRAY"><code class="literal">wantarray</CODE
></A
> and <a class="olink" href="../prog/ch03_010.htm#PERL2-CMD-CALLER"><code class="literal">caller</CODE
></A
> functions in <a class="olink" href="../prog/ch03_01.htm">Chapter 3</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
> and in <i class="filename">perlfunc </I
>(1); <a class="xref" href="ch10_07.htm" title="Detecting Return Context">Recipe 10.6</A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch10_04.htm" title="10.3. Creating Persistent Private Variables"><img src="../gifs/txtpreva.gif" alt="Previous: 10.3. Creating Persistent Private Variables" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch10_06.htm" title="10.5. Passing Arrays and Hashes by Reference"><img src="../gifs/txtnexta.gif" alt="Next: 10.5. Passing Arrays and Hashes by Reference" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">10.3. Creating Persistent Private Variables</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">10.5. Passing Arrays and Hashes by Reference</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
