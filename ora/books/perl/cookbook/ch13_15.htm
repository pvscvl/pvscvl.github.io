<html><head>
<title>Recipe 13.14. Overloading Operators</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:42:31Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch13_01.htm" title="13. Classes, Objects, and Ties"><link rel="prev" href="ch13_14.htm" title="13.13. Coping with Circular Data Structures"><link rel="next" href="ch13_16.htm" title="13.15. Creating Magic Variables with tie"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch13_14.htm" title="13.13. Coping with Circular Data Structures"><img src="../gifs/txtpreva.gif" alt="Previous: 13.13. Coping with Circular Data Structures" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch13_01.htm" title="13. Classes, Objects, and Ties">Chapter 13<br>Classes, Objects, and Ties</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch13_16.htm" title="13.15. Creating Magic Variables with tie"><img src="../gifs/txtnexta.gif" alt="Next: 13.15. Creating Magic Variables with tie" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch13-15937">13.14. Overloading Operators</A
></H2
><div class="sect2"><h3 class="sect2"><a class="title" name="ch13-pgfId-1795">Problem<a class="indexterm" name="ch13-idx-1000004655-0"></A
><a class="indexterm" name="ch13-idx-1000004655-1"></A
><a class="indexterm" name="ch13-idx-1000004655-2"></A
></A
></H3
><p class="para">You want to use familiar operators like <code class="literal">==</CODE
> or <code class="literal">+</CODE
> on objects from a class you've written, or you want to define the print interpolation value for objects.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch13-pgfId-1801">Solution</A
></H3
><p class="para">Use the <code class="literal">use</CODE
> <code class="literal">overload</CODE
> pragma. Here are two of the most common and useful operators to overload:</P
><pre class="programlisting">use overload ('&lt;=&gt;' =&gt; \&amp;threeway_compare);
sub threeway_compare {
    my ($s1, $s2) = @_;
    uc($s1-&gt;{NAME}) cmp uc($s2-&gt;{NAME});
} 

use overload ( '&quot;&quot;'  =&gt; \&amp;stringify );
sub stringify {
    my $self = shift;
    return sprintf &quot;%s (%05d)&quot;, 
            ucfirst(lc($self-&gt;{NAME})),
            $self-&gt;{IDNUM};
}</PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch13-pgfId-1833">Discussion</A
></H3
><p class="para">When you use built-in types, certain operators apply, like <code class="literal">+</CODE
> for addition or <code class="literal">.</CODE
> for string catenation. With the <code class="literal">use</CODE
> <code class="literal">overload</CODE
> pragma, you can customize these operators so they do something special on your own objects.</P
><p class="para">This pragma takes a list of operator/function call pairs, such as:</P
><pre class="programlisting">package TimeNumber;
use overload '+' =&gt; \&amp;my_plus,
             '-' =&gt; \&amp;my_minus,
             '*' =&gt; \&amp;my_star,
             '/' =&gt; \&amp;my_slash;</PRE
><p class="para">Now, those four operators can be used with objects of class TimeNumber, and the listed functions will be called. These functions can do anything you'd like.</P
><p class="para">Here's a simple example of an overload of <code class="literal">+</CODE
> for use with an object that holds hours, minutes, and seconds. It assumes that both operands are of a class that has a <code class="literal">new</CODE
> method that can be called as an object method, and that the structure names are as shown:</P
><pre class="programlisting">sub my_plus {
    my($left, $right) = @_;
    my $answer = $left-&gt;<code class="literal">new();</CODE
>
    $answer-&gt;{SECONDS} = $left-&gt;{SECONDS} + $right-&gt;{SECONDS};
    $answer-&gt;{MINUTES} = $left-&gt;{MINUTES} + $right-&gt;{MINUTES};
    $answer-&gt;{HOURS}   = $left-&gt;{HOURS}   + $right-&gt;{HOURS};

    if ($answer-&gt;{SECONDS} &gt;= 60) {
        $answer-&gt;{SECONDS} %= 60;
        $answer-&gt;{MINUTES} ++;
    } 

    if ($answer-&gt;{MINUTES} &gt;= 60) {
        $answer-&gt;{MINUTES} %= 60;
        $answer-&gt;{HOURS}   ++;
    } 

    return $answer;

} </PRE
><p class="para">It's a good idea to overload numeric operators only when the objects themselves are mirroring some sort of numeric construct, such as complex or infinite precision numbers, vectors, or matrices. Otherwise the code is too hard to understand, leading users to invalid assumptions. Imagine a class that modelled a country. If you can add one country to another, couldn't you subtract one country from another? As you see, using operator overloading for non-mathematical things rapidly becomes ridiculous.</P
><p class="para">You may compare objects (and, in fact, any reference) using either <code class="literal">==</CODE
> or <code class="literal">eq</CODE
>, but this only tells you whether the addresses are the same. (Using == is about ten times faster than <code class="literal">eq</CODE
> though.) Because an object is a higher-level notion that a raw machine address, you often want to define your own notion of what it takes for two of them to be equal to each other.</P
><p class="para">Two operators frequently overloaded even for a non-numeric class are the comparison and string interpolation operators. Both the &lt;=&gt; and the <code class="literal">cmp</CODE
> operators can be overloaded, although the former is more prevalent. Once the spaceship operator &lt;=&gt;, is defined for an object, you can also use <code class="literal">==</CODE
>, <code class="literal">!=</CODE
>, &lt;, &lt;=, &gt;, and &gt;= as well. This lets objects be compared. If ordering is not desired, only overload <code class="literal">==</CODE
>. Similarly, an overloaded <code class="literal">cmp</CODE
> is used for <code class="literal">lt</CODE
>, <code class="literal">gt</CODE
>, and other string comparisons if they aren't explicitly overloaded.</P
><p class="para">The string interpolation operator goes by the unlikely name of <code class="literal">&quot;&quot;</CODE
>, that is, two double quotes. This operator is triggered whenever a conversion to a string is called for, such as within double or back quotes or when passed to the <code class="literal">print</CODE
> function.</P
><p class="para">Read the documentation on the <code class="literal">overload</CODE
> pragma that comes with Perl. Perl's operator overloading has some elaborate features, such as string and numeric conversion methods, autogenerating missing methods, and reversing operands if needed, as in <code class="literal">5</CODE
> <code class="literal">+</CODE
> <code class="literal">$a</CODE
> where <code class="literal">$a</CODE
> is an object.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch13-23490">Example: Overloaded StrNum Class</A
></H3
><p class="para">Here's a <a class="indexterm" name="ch13-idx-1000005059-0"></A
><a class="indexterm" name="ch13-idx-1000005059-1"></A
>StrNum class that lets you use strings with numeric operators. Yes, we're about to do something we advised against &nbsp;-  that is, use numeric operators on non-numeric entities &nbsp;-  but programmers from other backgrounds are always expecting <code class="literal">+</CODE
> and <code class="literal">==</CODE
> to work on strings. This is a simple way to demonstrate operator overloading. We almost certainly wouldn't use this in a time-critical production program due to performance concerns. It's also an interesting illustration of using a constructor of the same name as the class, something that C++ and Python programmers may take comfort in.</P
><pre class="programlisting">#!/usr/bin/perl
# show_strnum - demo operator overloading
use StrNum;           
    
$x = StrNum(&quot;Red&quot;); $y = StrNum(&quot;Black&quot;);
$z = $x + $y; $r = $z * 3;
print &quot;values are $x, $y, $z, and $r\n&quot;;
print &quot;$x is &quot;, $x &lt; $y ? &quot;LT&quot; : &quot;GE&quot;, &quot; $y\n&quot;;

<b class="emphasis.bold">values are Red, Black, RedBlack, and 0</B
>
<b class="emphasis.bold">Red is GE Black</B
></PRE
><p class="para">The class is shown in <a class="xref" href="#ch13-32753" title="StrNum">Example 13.1</A
>.</P
><div class="example"><h4 class="example"><a class="title" name="ch13-32753">Example 13.1: StrNum</A
></H4
><pre class="programlisting">package StrNum;

use Exporter ();
@ISA = 'Exporter';
@EXPORT = qw(StrNum);  # unusual

use overload        (
        '&lt;=&gt;'   =&gt; \&amp;spaceship,
        'cmp'   =&gt; \&amp;spaceship,
        '&quot;&quot;'    =&gt; \&amp;stringify,
        'bool'  =&gt; \&amp;boolify,
        '0+'    =&gt; \&amp;numify,
        '+'     =&gt; \&amp;concat,
        '*'     =&gt; \&amp;repeat,
);

# constructor
sub StrNum { 
    my ($value) = @_; 
    return bless \$value; 
} 

sub stringify { ${ $_[0] } } 
sub numify    { ${ $_[0] } } 
sub boolify   { ${ $_[0] } } 

# providing &lt;=&gt; gives us &lt;, ==, etc. for free.
sub spaceship { 
    my ($s1, $s2, $inverted) = @_;
    return $inverted ? $$s2 cmp $$s1 : $$s1 cmp $$s2;
} 

# this uses stringify
sub concat { 
    my ($s1, $s2, $inverted) = @_;
    return StrNum $inverted ? ($s2 . $s1) : ($s1 . $s2);

} 

# this uses stringify
sub repeat { 
    my ($s1, $s2, $inverted) = @_;
    return StrNum $inverted ? ($s2 x $s1) : ($s1 x $s2);
}

1;<a class="indexterm" name="ch13-idx-1000005577-0"></A
><a class="indexterm" name="ch13-idx-1000005577-1"></A
></PRE
></DIV
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch13-16506">Example: Overloaded FixNum Class</A
></H3
><p class="para"><a class="indexterm" name="ch13-idx-1000006591-0"></A
><a class="indexterm" name="ch13-idx-1000006591-1"></A
><a class="indexterm" name="ch13-idx-1000006591-2"></A
><a class="indexterm" name="ch13-idx-1000006591-3"></A
><a class="indexterm" name="ch13-idx-1000006591-4"></A
>This class uses operator overloading to control the number of decimal places in output. It still uses full precision for its operations. A <code class="literal">places()</CODE
> method can be used on the class or a particular object to set the number of places of output to the right of the decimal point.</P
><pre class="programlisting">#!/usr/bin/perl
# demo_fixnum - show operator overloading
use FixNum;

FixNum-&gt;places(5);

$x = FixNum-&gt;new(40);
$y = FixNum-&gt;new(12);

print &quot;sum of $x and $y is &quot;, $x + $y, &quot;\n&quot;;
print &quot;product of $x and $y is &quot;, $x * $y, &quot;\n&quot;;

$z = $x / $y;
printf &quot;$z has %d places\n&quot;, $z-&gt;places;
$z-&gt;places(2) unless $z-&gt;places;
print &quot;div of $x by $y is $z\n&quot;;
print &quot;square of that is &quot;, $z * $z, &quot;\n&quot;;

<code class="userinput"><b><code class="replaceable"><i>sum of STRFixNum: 40 and STRFixNum: 12 is STRFixNum: 52</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>product of STRFixNum: 40 and STRFixNum: 12 is STRFixNum: 480</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>STRFixNum: 3 has 0 places</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>div of STRFixNum: 40 by STRFixNum: 12 is STRFixNum: 3.33</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>square of that is STRFixNum: 11.11</I
></CODE
></B
></CODE
></PRE
><p class="para">The class itself is shown in <a class="xref" href="#ch13-16079" title="FixNum">Example 13.2</A
>. It only overloads the addition, multiplication, and division operations for math operators. Other operators are the spaceship operator, which handles all comparisons, the string-interpolation operator, and the numeric conversion operator. The string interpolation operator is given a distinctive look for debugging purposes.</P
><div class="example"><h4 class="example"><a class="title" name="ch13-16079">Example 13.2: FixNum</A
></H4
><pre class="programlisting">package FixNum;

use strict;

my $PLACES = 0;

sub new {
    my $proto   = shift;
    my $class   = ref($proto) || $proto;
    my $parent  = ref($proto) &amp;&amp; $proto;

    my $v = shift;
    my $self = {
        VALUE  =&gt; $v,
        PLACES =&gt; undef,
    }; 
    if ($parent &amp;&amp; defined $parent-&gt;{PLACES}) {
        $self-&gt;{PLACES} = $parent-&gt;{PLACES};
    } elsif ($v =~ /(\.\d*)/) {
        $self-&gt;{PLACES} = length($1) - 1;
    }  else {
        $self-&gt;{PLACES} = 0;
    } 
    return bless $self, $class;
} 

sub places {
    my $proto = shift;
    my $self  = ref($proto) &amp;&amp; $proto;
    my $type  = ref($proto) || $proto;

    if (@_) {
        my $places = shift;
        ($self ? $self-&gt;{PLACES} : $PLACES) = $places;
    } 
    return $self ? $self-&gt;{PLACES} : $PLACES;
} 

sub _max { $_[0] &gt; $_[1] ? $_[0] : $_[1] } 

use overload '+'    =&gt; \&amp;add,
             '*'    =&gt; \&amp;multiply,
             '/'    =&gt; \&amp;divide,
             '&lt;=&gt;'  =&gt; \&amp;spaceship,
             '&quot;&quot;'   =&gt; \&amp;as_string,
             '0+'   =&gt; \&amp;as_number;

sub add {
    my ($this, $that, $flipped) = @_;
    my $result = $this-&gt;new( $this-&gt;{VALUE} + $that-&gt;{VALUE} );
    $result-&gt;places( _max($this-&gt;{PLACES}, $that-&gt;{PLACES} ));
    return $result;
} 

sub multiply {
    my ($this, $that, $flipped) = @_;
    my $result = $this-&gt;new( $this-&gt;{VALUE} * $that-&gt;{VALUE} );
    $result-&gt;places( _max($this-&gt;{PLACES}, $that-&gt;{PLACES} ));
    return $result;
} 

sub divide {
    my ($this, $that, $flipped) = @_;
    my $result = $this-&gt;new( $this-&gt;{VALUE} / $that-&gt;{VALUE} );
    $result-&gt;places( _max($this-&gt;{PLACES}, $that-&gt;{PLACES} ));
    return $result;
} 

sub as_string {
    my $self = shift;
    return sprintf(&quot;STR%s: %.*f&quot;, ref($self), 
        defined($self-&gt;{PLACES}) ? $self-&gt;{PLACES} : $PLACES,
            $self-&gt;{VALUE}); 
} 

sub as_number {
    my $self = shift;
    return $self-&gt;{VALUE};
} 
    
sub spaceship {
    my ($this, $that, $flipped) = @_;
    $this-&gt;{VALUE} &lt;=&gt; $that-&gt;{VALUE};
} 
<a class="indexterm" name="ch13-idx-1000005805-0"></A
><a class="indexterm" name="ch13-idx-1000005805-1"></A
><a class="indexterm" name="ch13-idx-1000005805-2"></A
><a class="indexterm" name="ch13-idx-1000005805-3"></A
><a class="indexterm" name="ch13-idx-1000005805-4"></A
>

1;<a class="indexterm" name="ch13-idx-1000005806-0"></A
><a class="indexterm" name="ch13-idx-1000005806-1"></A
><a class="indexterm" name="ch13-idx-1000005806-2"></A
></PRE
></DIV
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch13-pgfId-2247">See Also</A
></H3
><p class="para">The documentation for the standard <code class="literal">use</CODE
> <code class="literal">overload</CODE
> pragma and the Math::BigInt and Math::Complex modules, also in <a class="olink" href="../prog/ch07_01.htm">Chapter 7</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch13_14.htm" title="13.13. Coping with Circular Data Structures"><img src="../gifs/txtpreva.gif" alt="Previous: 13.13. Coping with Circular Data Structures" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch13_16.htm" title="13.15. Creating Magic Variables with tie"><img src="../gifs/txtnexta.gif" alt="Next: 13.15. Creating Magic Variables with tie" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">13.13. Coping with Circular Data Structures</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">13.15. Creating Magic Variables with tie</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
