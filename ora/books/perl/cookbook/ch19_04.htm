<html><head>
<title>Recipe 19.3. Fixing a 500 Server Error</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:45:21Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch19_01.htm" title="19. CGI Programming"><link rel="prev" href="ch19_03.htm" title="19.2. Redirecting Error Messages"><link rel="next" href="ch19_05.htm" title="19.4. Writing a Safe CGI Program"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch19_03.htm" title="19.2. Redirecting Error Messages"><img src="../gifs/txtpreva.gif" alt="Previous: 19.2. Redirecting Error Messages" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch19_01.htm" title="19. CGI Programming">Chapter 19<br>CGI Programming</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch19_05.htm" title="19.4. Writing a Safe CGI Program"><img src="../gifs/txtnexta.gif" alt="Next: 19.4. Writing a Safe CGI Program" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch19-12002">19.3. Fixing a 500 Server Error</A
></H2
><div class="sect2"><h3 class="sect2"><a class="title" name="ch19-pgfId-324">Problem<a class="indexterm" name="ch19-idx-1000005400-0"></A
><a class="indexterm" name="ch19-idx-1000005400-1"></A
><a class="indexterm" name="ch19-idx-1000005400-2"></A
><a class="indexterm" name="ch19-idx-1000005400-3"></A
></A
></H3
><p class="para">Your CGI script gives you a <code class="literal">500</CODE
> <code class="literal">Server</CODE
> <code class="literal">Error</CODE
>.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch19-pgfId-330">Solution</A
></H3
><p class="para">Follow the checklist given in the discussion. It's aimed at a Unix audience, but the general principles embodied in the questions apply to all systems.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch19-pgfId-336">Discussion</A
></H3
><div class="sect3"><h4 class="sect3"><a class="title" name="ch19-pgfId-1000005146">Make sure the web server can run the script.</A
></H4
><p class="para">Check ownership and permissions with <em class="emphasis">ls -l</EM
>. The appropriate read and execute bits must be set on the script before the web server can run it. The script should be readable and executable by everyone (or at least by whomever the server runs scripts as). Use <em class="emphasis">chmod 0755 scriptname</EM
> if it's owned by you, otherwise <em class="emphasis">chmod 0555 scriptname</EM
> if owned by the designated anonymous web user, assuming you are running as that user or the superuser. All directories in the path must also have their execute bit set.</P
><p class="para">Make sure the script can be identified as a script by the web server. Most web servers have a system-wide <i class="filename">cgi-bin</I
>, and all files in that directory will be run as scripts. Some servers identify a CGI script as any file whose name ends in a particular extension, like <i class="filename">.cgi</I
> or <i class="filename">.plx</I
>. Some servers have options to permit access via the GET method alone, and not through the POST method that your form likely uses. Consult your web server documentation, configuration files, webmaster, and (if all else fails) technical support.</P
><p class="para">If you're running on Unix, do you have the right path to the Perl executable on the <code class="literal">#!</CODE
> line? The <code class="literal">#!</CODE
> line must be the first line in the script; you can't even have blank lines before the <code class="literal">#!</CODE
> line. Some operating systems have ridiculously short limits on the number of characters that can be in this line, so you may need to make a link (e.g., from<i class="filename"> /home/richh/perl</I
> to<i class="filename"> /opt/installed/third-party/software/perl-5.004/bin/perl</I
>, to pick a hypothetical pathological example).</P
><p class="para">If you're running on Win32, have you associated your Perl scripts with the correct Perl executable?</P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="ch19-pgfId-1000005160">Make sure the script has permissions to do what it's trying to do.</A
></H4
><p class="para">Identify the user the script runs as by replacing with the simple code shown in <a class="xref" href="#ch19-11169" title="webwhoami">Example 19.2</A
>.</P
><div class="example"><h4 class="example"><a class="title" name="ch19-11169">Example 19.2: webwhoami</A
></H4
><pre class="programlisting">#!/usr/bin/perl
# webwhoami - show web users id
print &quot;Content-Type: text/plain\n\n&quot;;
print &quot;Running as &quot;, scalar getpwuid($&gt;), &quot;\n&quot;;</PRE
></DIV
><p class="para">This prints the username the script is running as.</P
><p class="para">Identify the resources the script is trying to access. List the files, network connections, system calls, and so on, which require special privilege. Then make sure they can be accessed by the user the script is running as. Are there disk or network quotas? Do the protections on the file allow access? Are you trying to get to the encrypted password field using <code class="literal">getpwent</CODE
> on a shadow password system (since usually only the superuser can get shadow passwords)?</P
><p class="para">Set permissions on any files the script needs to write to at <code class="literal">0666</CODE
>, or better yet to <code class="literal">0644</CODE
> if they're owned up the effective user ID the script is running under. If new files are to be created or old ones moved or removed, write and execute permission on enclosing directory of those files is also needed.</P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="ch19-pgfId-1000005175">Is the script valid Perl?</A
></H4
><p class="para">Try to run it from a shell prompt. CGI.pm lets you run and debug your scripts from the command line or from standard input. Here, <code class="literal">^D</CODE
> represents whatever you type to get an End of File.</P
><pre class="programlisting">% perl -wc cgi-script        # just compilation

% perl -w  cgi-script        # parms from stdin
<code class="userinput"><b><code class="replaceable"><i>(offline mode: enter name=value pairs on standard input)</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>name=joe</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>number=10</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>^D</I
></CODE
></B
></CODE
>

% perl -w  cgi-script name=joe number=10    # run with mock form input
% perl -d  cgi-script name=joe number=10    # ditto, under the debugger

# POST method script in csh
% (setenv HTTP_METHOD POST; perl -w cgi-script name=joe number=10)
# POST method script in sh
% HTTP_METHOD=POST perl -w cgi-script name=joe number=10</PRE
><p class="para">Check the server's error log. Most web servers redirect CGI process's STDERR into a file. Find that file (try <i class="filename">/usr/local/etc/httpd/logs/error_log</I
>, <i class="filename">/usr/local/www/logs/error_log</I
>, or just ask your administrator) and see whether any warnings or error messages are showing up there.</P
><p class="para">Are you using an old version of Perl? Type <em class="emphasis">perl -v</EM
> to find out. If you're not using 5.004 or better, you or your admins should upgrade, because 5.003 and earlier releases were not protected against buffer overruns. This is a grave security matter.</P
><p class="para">Are you using an old version of the libraries? You can either <em class="emphasis">grep -i version</EM
> in the library file (probably in <i class="filename">/usr/lib/perl5/</I
>, <i class="filename">/usr/local/lib/perl5</I
>, <i class="filename">/usr/lib/perl5/site_perl</I
>, or some such). For CGI.pm, and in fact, with any module, you can do this to figure out which version you're using:</P
><pre class="programlisting">% perl -MCGI -le 'print CGI-&gt;VERSION'
<code class="userinput"><b><code class="replaceable"><i>2.49</I
></CODE
></B
></CODE
></PRE
><p class="para">Are you running the latest version of your web server? It's not often that it happens, but sometimes a web server has bugs that can interfere with your scripts.</P
><p class="para">Are you running with the <b class="emphasis.bold">-w</B
> switch? This makes Perl gripe about things like using uninitialized variables, reading from a write-only filehandle, and so on.</P
><p class="para">Are you running with the<b class="emphasis.bold"> -T</B
> flag? If Perl complains about insecure actions, you might be assuming things about your script's input and environment that aren't true. Make it taint-clean (read <a class="xref" href="ch19_05.htm" title="Writing a Safe CGI Program">Recipe 19.4</A
>, see the <em class="emphasis">perlsec</EM
> manpage to find out about tainting and its consequences for your program, and check the CGI Security FAQ for particular web traps to avoid) and you may sleep easier at night as well as have a working script.</P
><p class="para">Are you running with <code class="literal">use</CODE
> <code class="literal">strict</CODE
>? It makes you declare variables before you use them and quote your strings to avoid any confusion with subroutines, and in doing so finds a lot of errors.</P
><p class="para">Are you checking the return values of each and every one of your system calls? Many people blindly believe that every <code class="literal">open</CODE
> or <code class="literal">system</CODE
> or <code class="literal">rename</CODE
> or <code class="literal">unlink</CODE
> in their programs will work all the time. These functions return a value so you can find out whether they worked or not&nbsp;- check them!</P
><p class="para">Can Perl find the libraries you're using? Write a small script that just prints <code class="literal">@INC</CODE
> (Perl's array of directories it looks for modules and libraries in). Check the permissions on the libraries (they must be readable by the user the script runs as). Don't try to copy modules from one machine to another&nbsp;- a lot of them have compiled and autoloaded components hidden away in the Perl library directory. Install them yourself from scratch.</P
><p class="para">Is Perl giving you warnings or errors? Try using CGI::Carp (see <a class="xref" href="ch19_03.htm" title="Redirecting Error Messages">Recipe 19.2</A
>) to send Perl's error messages and warnings to the browser or a file you have access to.</P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="ch19-pgfId-1000005217">Is the script upholding its end of the CGI protocol?</A
></H4
><p class="para">The HTTP header must come before the text or image you return. Don't forget the blank line between the header and body. Also, because STDOUT is not automatically autoflushed but STDERR is, if your script generates warnings or errors to STDERR the web server might see them before it sees your HTTP header and can generate an error on some servers. Add this at the top of your script (after the <code class="literal">#!</CODE
> line) to also flush STDOUT:</P
><pre class="programlisting">$| = 1;</PRE
><p class="para">Don't ever try to decode the incoming form data by parsing the environment and standard input yourself. There are just too many places where it can go wrong. Use the CGI module and spend your time writing cool programs or reading Usenet instead of tracking down bugs in your implementation of an arcane protocol.</P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="ch19-pgfId-1000005225">Asking for help elsewhere.</A
></H4
><p class="para">Check the FAQs and other documents mentioned at the end of the Introduction to this chapter. There is still a chance that you have made a common mistake on whatever system you're using&nbsp;- read the relevant FAQs to make sure you don't embarrass yourself by asking the CGI equivalent of "why doesn't my car run when it's out of gas and oil?"</P
><p class="para">Ask a friend. Almost everyone knows somebody they can ask for help. You'll probably get a reply much sooner than if you asked the Net.</P
><p class="para">Post to <code class="literal">comp.infosystems.www.authoring.misc</CODE
> if your question is about a CGI script (the CGI module, decoding cookies, finding out where the user is coming from, etc.).<a class="indexterm" name="ch19-idx-1000005402-0"></A
><a class="indexterm" name="ch19-idx-1000005402-1"></A
><a class="indexterm" name="ch19-idx-1000005402-2"></A
><a class="indexterm" name="ch19-idx-1000005402-3"></A
></P
></DIV
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch19-pgfId-340">See Also</A
></H3
><p class="para"><a class="xref" href="ch19_03.htm" title="Redirecting Error Messages">Recipe 19.2</A
>; the discussion on buffering in the introduction of <a class="xref" href="ch08_01.htm" title="File Contents">Chapter 8, <cite class="chapter">File Contents</CITE
></A
>; the CGI FAQ at <a class="systemitem.url" href="../../../../../../../www.webthing.com/tutorials/cgifaq.html">http://www.webthing.com/tutorials/cgifaq.html</A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch19_03.htm" title="19.2. Redirecting Error Messages"><img src="../gifs/txtpreva.gif" alt="Previous: 19.2. Redirecting Error Messages" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch19_05.htm" title="19.4. Writing a Safe CGI Program"><img src="../gifs/txtnexta.gif" alt="Next: 19.4. Writing a Safe CGI Program" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">19.2. Redirecting Error Messages</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">19.4. Writing a Safe CGI Program</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
