<html><head>
<title>Recipe 7.16. Storing Filehandles in Variables</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:37:20Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch07_01.htm" title="7. File Access"><link rel="prev" href="ch07_16.htm" title="7.15. Determining the Number of Bytes to Read"><link rel="next" href="ch07_18.htm" title="7.17. Caching Open Output Filehandles"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch07_16.htm" title="7.15. Determining the Number of Bytes to Read"><img src="../gifs/txtpreva.gif" alt="Previous: 7.15. Determining the Number of Bytes to Read" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch07_01.htm" title="7. File Access">Chapter 7<br>File Access</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch07_18.htm" title="7.17. Caching Open Output Filehandles"><img src="../gifs/txtnexta.gif" alt="Next: 7.17. Caching Open Output Filehandles" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch07-25170">7.16. Storing Filehandles in Variables</A
></H2
><div class="sect2"><h3 class="sect2"><a class="title" name="ch07-pgfId-1592">Problem<a class="indexterm" name="ch07-idx-1000009767-0"></A
><a class="indexterm" name="ch07-idx-1000009767-1"></A
><a class="indexterm" name="ch07-idx-1000009767-2"></A
></A
></H3
><p class="para">You want to use a <a class="indexterm" name="ch07-idx-1000012064-0"></A
>filehandle like a normal variable so you can pass it to or return it from a function, store it in a data structure, and so on.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch07-pgfId-1598">Solution</A
></H3
><p class="para">If you already have a regular symbolic filehandle like STDIN or LOGFILE, use the typeglob notation, <code class="literal">*FH</CODE
>. This is the most efficient approach.</P
><pre class="programlisting">$variable = *FILEHANDLE;        # save in variable
subroutine(*FILEHANDLE);        # or pass directly

sub subroutine {
    my $fh = shift;
    print $fh &quot;Hello, filehandle!\n&quot;;
}</PRE
><p class="para">If you want anonymous filehandles, see the <em class="emphasis">return_fh</EM
> function below, or use the <code class="literal">new</CODE
> method from the IO::File or IO::Handle module, store that in a scalar variable, and use it as though it were a normal filehandle:</P
><pre class="programlisting">use FileHandle;                   # make anon filehandle
$fh = FileHandle-&gt;new();

use IO::File;                     # 5.004 or higher
$fh = IO::File-&gt;new();</PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch07-pgfId-1630">Discussion</A
></H3
><p class="para">You have many choices for passing filehandles into a subroutine or storing them in a data structure. The simplest and fastest way is through the <a class="indexterm" name="ch07-idx-1000012073-0"></A
>typeglob notation, <code class="literal">*FH</CODE
>. It may help you to conceptualize the asterisk as the type symbol for a filehandle. Like the little colored balls from high school chemistry that stood for atomic particles, it's not really true, but it is a convenient mental shorthand. By the time you understand where this model breaks down, you won't need it anymore.</P
><p class="para">That works cleanly for simple things, but what if you wanted to make an array of filehandles whose names you didn't know? As shown in <a class="xref" href="ch11_01.htm" title="References and Records">Chapter 11, <cite class="chapter">References and Records</CITE
></A
>, generating anonymous arrays, hashes, and even functions on the fly can prove extremely convenient. It would be nice to be able to do the same with filehandles. That's where the IO modules come in.</P
><p class="para">You can generate an anonymous handle with the IO::Handle or IO::File module's <code class="literal">new</CODE
> method. This returns a filehandle you can pass to subroutines, store in arrays, and use however you would use a named filehandle's typeglob &nbsp;-  plus more. You can also use those modules as object classes for inheritance purposes because the return values from the <code class="literal">new</CODE
> constructor are fully fledged objects, complete with available method calls.</P
><p class="para">You can use these as <a class="indexterm" name="ch07-idx-1000012065-0"></A
>indirect filehandles, which saves you the trouble of thinking up filehandle names. Instead, you think up names to store the anonymous filehandles in.</P
><p class="para">To capture the typeglob from a named filehandle, prefix it with <code class="literal">*</CODE
>:</P
><pre class="programlisting">$fh_a = IO::File-&gt;new(&quot;&lt; /etc/motd&quot;)    or die &quot;open /etc/motd: $!&quot;;
$fh_b = *STDIN;
some_sub($fh_a, $fh_b);</PRE
><p class="para">This isn't the only way, but it is the simplest and most convenient. Its only limitation is that you can't <code class="literal">bless</CODE
> it to turn it into an object. To do this, you must <code class="literal">bless</CODE
> a <em class="emphasis">reference</EM
> to a typeglob &nbsp;-  that's what IO::Handle does. Like typeglobs, references to typeglobs can be safely used as indirect filehandles, whether blessed or not.</P
><p class="para">To create and return a new filehandle from a function, do this:</P
><pre class="programlisting">sub return_fh {             # make anon filehandle
    local *FH;              # must be local, not my
    # now open it if you want to, then...
    return *FH;
}

$handle = return_fh();</PRE
><p class="para">A subroutine accepting a filehandle argument can either store the argument into a (preferably lexical) variable and use that as an indirect filehandle:</P
><pre class="programlisting">sub accept_fh {
    my $fh = shift;
    print $fh &quot;Sending to indirect filehandle\n&quot;;
}</PRE
><p class="para">or it can localize a typeglob and use the <a class="indexterm" name="ch07-idx-1000012062-0"></A
>filehandle directly:</P
><pre class="programlisting">sub accept_fh {
    local *FH = shift;
    print  FH &quot;Sending to localized filehandle\n&quot;;
}</PRE
><p class="para">Both styles work with either IO::Handle objects or typeglobs of real filehandles:</P
><pre class="programlisting">accept_fh(*STDOUT);
accept_fh($handle);</PRE
><p class="para">Perl accepts many things as indirect <a class="indexterm" name="ch07-idx-1000012063-0"></A
>filehandles (strings, typeglobs, and references to typeglobs), but unless you pass typeglobs or IO::Handle objects you may run into trouble. Strings (<code class="literal">&quot;LOGFILE&quot;</CODE
> instead of <code class="literal">*LOGFILE</CODE
>) require special finessing to work between packages, and references to typeglobs can't be usefully returned from functions.</P
><p class="para">In the preceding examples, we assigned the filehandle to a scalar variable before using it. That is because only simple scalar variables, not expressions or subscripts into hashes or arrays, can be used with built-ins like <code class="literal">print</CODE
>, <code class="literal">printf</CODE
>, or the diamond operator. These are illegal and won't even compile:</P
><pre class="programlisting">@fd = (*STDIN, *STDOUT, *STDERR);
print $fd[1] &quot;Type it: &quot;;                           # WRONG
$got = &lt;$fd[0]&gt;                                     # WRONG
print $fd[2] &quot;What was that: $got&quot;;                 # WRONG</PRE
><p class="para">With <code class="literal">print</CODE
> and <code class="literal">printf</CODE
>, you get around this by using a block and an expression where you would place the filehandle:</P
><pre class="programlisting">print  { $fd[1] } &quot;funny stuff\n&quot;;
printf { $fd[1] } &quot;Pity the poor %x.\n&quot;, 3_735_928_559;
<code class="userinput"><b><code class="replaceable"><i>Pity the poor deadbeef.</I
></CODE
></B
></CODE
></PRE
><p class="para">That block is a proper block, so you can put more complicated code there. This sends the message out to one of two places:</P
><pre class="programlisting">$ok = -x &quot;/bin/cat&quot;;                
print { $ok ? $fd[1] : $fd[2] } &quot;cat stat $ok\n&quot;;
print { $fd[ 1 + ($ok || 0) ]  } &quot;cat stat $ok\n&quot;;           </PRE
><p class="para">This approach of treating <code class="literal">print</CODE
> and <code class="literal">printf</CODE
> like object methods calls doesn't work for the diamond operator, because it's a real operator, not just a function with a comma-less argument. Assuming you've been storing typeglobs in your structure as we did above, you can use the built-in function named <code class="literal">readline</CODE
> to read a record just as <code class="literal">&lt;FH&gt;</CODE
> does. Given the preceding initialization of <code class="literal">@fd</CODE
>, this would work: <a class="indexterm" name="ch07-idx-1000012076-0"></A
></P
><pre class="programlisting"><a class="indexterm" name="ch07-idx-1000012066-0"></A
>$got = readline($fd[0]);<a class="indexterm" name="ch07-idx-1000009772-0"></A
><a class="indexterm" name="ch07-idx-1000009772-1"></A
><a class="indexterm" name="ch07-idx-1000009772-2"></A
></PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch07-pgfId-1000009364">See Also</A
></H3
><p class="para">The <code class="literal">open</CODE
> function in <i class="filename">perlfunc </I
>(1) and in <a class="olink" href="../prog/ch03_01.htm">Chapter 3</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
>; <a class="xref" href="ch07_02.htm" title="Opening a File">Recipe 7.1</A
>; the documentation with the standard FileHandle module (also in <a class="olink" href="../prog/ch07_01.htm">Chapter 7</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
>); the <a class="olink" href="../prog/ch02_03.htm#PERL2-CH-2-SECT-3.1">"Typeglobs and Filehandles"</A
> section of <a class="olink" href="../prog/ch02_01.htm">Chapter 2</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
> and <a class="olink" href="../prog/ch02_01.htm">Chapter 2</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch07_16.htm" title="7.15. Determining the Number of Bytes to Read"><img src="../gifs/txtpreva.gif" alt="Previous: 7.15. Determining the Number of Bytes to Read" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch07_18.htm" title="7.17. Caching Open Output Filehandles"><img src="../gifs/txtnexta.gif" alt="Next: 7.17. Caching Open Output Filehandles" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">7.15. Determining the Number of Bytes to Read</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">7.17. Caching Open Output Filehandles</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
