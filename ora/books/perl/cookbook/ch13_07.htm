<html><head>
<title>Recipe 13.6. Cloning Objects</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:42:22Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch13_01.htm" title="13. Classes, Objects, and Ties"><link rel="prev" href="ch13_06.htm" title="13.5. Using Classes as Structs"><link rel="next" href="ch13_08.htm" title="13.7. Calling Methods Indirectly"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch13_06.htm" title="13.5. Using Classes as Structs"><img src="../gifs/txtpreva.gif" alt="Previous: 13.5. Using Classes as Structs" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch13_01.htm" title="13. Classes, Objects, and Ties">Chapter 13<br>Classes, Objects, and Ties</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch13_08.htm" title="13.7. Calling Methods Indirectly"><img src="../gifs/txtnexta.gif" alt="Next: 13.7. Calling Methods Indirectly" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch13-36837">13.6. Cloning Objects</A
></H2
><div class="sect2"><h3 class="sect2"><a class="title" name="ch13-pgfId-927">Problem<a class="indexterm" name="ch13-idx-1000004533-0"></A
><a class="indexterm" name="ch13-idx-1000004533-1"></A
><a class="indexterm" name="ch13-idx-1000004533-2"></A
><a class="indexterm" name="ch13-idx-1000004533-3"></A
><a class="indexterm" name="ch13-idx-1000004533-4"></A
></A
></H3
><p class="para">You want to write a constructor method that might be called on an existing object.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch13-pgfId-933">Solution</A
></H3
><p class="para">Start your constructor like this:</P
><pre class="programlisting">my $proto  = shift;
my $class  = ref($proto) || $proto;
my $parent = ref($proto) &amp;&amp; $proto;</PRE
><p class="para">The <code class="literal">$class</CODE
> variable will contain the class to bless into, and the <code class="literal">$parent</CODE
> variable will either be false, or else the object you're cloning.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch13-pgfId-947">Discussion</A
></H3
><p class="para">Sometimes you need another object of the same type as the current one. You could do this:</P
><pre class="programlisting">$ob1 = SomeClass-&gt;<code class="literal">new()</CODE
>;
# later on
$ob2 = (ref $ob1)-&gt;<code class="literal">new();</CODE
></PRE
><p class="para">but that's not very clear. It's clearer to have a single constructor that can be called on the class or an existing object. As a class method, it should return a new object with the default initialization. As an instance method, it should return a new object initialized from the object it was called on:</P
><pre class="programlisting">$ob1 = Widget-&gt;new();
$ob2 = $ob1-&gt;new();</PRE
><p class="para">Here's a version of <code class="literal">new</CODE
> that takes this into consideration:</P
><pre class="programlisting">sub new {
    my $proto  = shift;
    my $class  = ref($proto) || $proto;
    my $parent = ref($proto) &amp;&amp; $proto;

    my $self;
    # check whether we're shadowing a new from @ISA
    if (@ISA &amp;&amp; $proto-&gt;SUPER::can('new') ) {
        $self = $proto-&gt;SUPER::new(@_);
    } else { 
        $self = {};
        bless ($self, $proto);
    }
    bless($self, $class);

    $self-&gt;{PARENT}  = $parent;
    $self-&gt;{START}   = time();   # init data fields
    $self-&gt;{AGE}     = 0;
    return $self;
} </PRE
><p class="para">Initializing doesn't have to mean simply copying values from the parent. If you're writing a linked list or binary tree class, your constructor can return a new object linked into the list or tree, when called as an instance method.<a class="indexterm" name="ch13-idx-1000004535-0"></A
><a class="indexterm" name="ch13-idx-1000004535-1"></A
><a class="indexterm" name="ch13-idx-1000004535-2"></A
><a class="indexterm" name="ch13-idx-1000004535-3"></A
><a class="indexterm" name="ch13-idx-1000004535-4"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch13-pgfId-1001">See Also</A
></H3
><p class="para"><i class="filename">perlobj </I
>(1) and <a class="olink" href="../prog/ch05_01.htm">Chapter 5</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
>; <a class="xref" href="ch13_02.htm" title="Constructing an Object">Recipe 13.1</A
>; <a class="xref" href="ch13_10.htm" title="Writing an Inheritable Class">Recipe 13.9</A
>; <a class="xref" href="ch13_14.htm" title="Coping with Circular Data Structures">Recipe 13.13</A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch13_06.htm" title="13.5. Using Classes as Structs"><img src="../gifs/txtpreva.gif" alt="Previous: 13.5. Using Classes as Structs" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch13_08.htm" title="13.7. Calling Methods Indirectly"><img src="../gifs/txtnexta.gif" alt="Next: 13.7. Calling Methods Indirectly" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">13.5. Using Classes as Structs</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">13.7. Calling Methods Indirectly</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
