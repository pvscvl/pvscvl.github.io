<html><head>
<title>Recipe 18.3. Sending Mail</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:45:01Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch18_01.htm" title="18. Internet Services"><link rel="prev" href="ch18_03.htm" title="18.2. Being an FTP Client"><link rel="next" href="ch18_05.htm" title="18.4. Reading and Posting Usenet News Messages"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch18_03.htm" title="18.2. Being an FTP Client"><img src="../gifs/txtpreva.gif" alt="Previous: 18.2. Being an FTP Client" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch18_01.htm" title="18. Internet Services">Chapter 18<br>Internet Services</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch18_05.htm" title="18.4. Reading and Posting Usenet News Messages"><img src="../gifs/txtnexta.gif" alt="Next: 18.4. Reading and Posting Usenet News Messages" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch18-27351">18.3. Sending Mail</A
></H2
><div class="sect2"><h3 class="sect2"><a class="title" name="ch18-pgfId-399">Problem</A
></H3
><p class="para"><a class="indexterm" name="ch18-idx-1000004293-0"></A
><a class="indexterm" name="ch18-idx-1000004293-1"></A
><a class="indexterm" name="ch18-idx-1000004293-2"></A
>You want your program to send mail. Some programs monitor system resources like disk space and notify appropriate people by mail when disk space becomes dangerously low. CGI script authors may not want their programs to report errors like "the database is down" to the user, preferring instead to send mail to the database administrator notifying them of the problem.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch18-pgfId-405">Solution</A
></H3
><p class="para">Use the CPAN module Mail::Mailer:</P
><pre class="programlisting">use Mail::Mailer;

$mailer = Mail::Mailer-&gt;new(&quot;sendmail&quot;);
$mailer-&gt;open({ From    =&gt; $from_address,
                To      =&gt; $to_address,
                Subject =&gt; $subject,
              })
    or die &quot;Can't open: $!\n&quot;;
print $mailer $body;
$mailer-&gt;<code class="literal">close();</CODE
></PRE
><p class="para">Or, use the <code class="literal">sendmail</CODE
> program directly:</P
><pre class="programlisting">open(SENDMAIL, &quot;|/usr/lib/sendmail -oi -t -odq&quot;)
                    or die &quot;Can't fork for sendmail: $!\n&quot;;
print SENDMAIL &lt;&lt;&quot;EOF&quot;;
From: User Originating Mail &lt;me\@host&gt;
To: Final Destination &lt;you\@otherhost&gt;
Subject: A relevant subject line

Body of the message goes here, in as many lines as you like.
EOF
close(SENDMAIL)     or warn &quot;sendmail didn't close nicely&quot;;</PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch18-pgfId-453">Discussion</A
></H3
><p class="para">You have three choices for sending mail from your program. You can use another program that users normally use to send mail, like <em class="emphasis">Mail</EM
> or <em class="emphasis">mailx </EM
>; these are called MUAs or <em class="emphasis">Mail User Agents</EM
>. You can use a system-level mail program like <em class="emphasis">sendmail </EM
>; this is an MTA, or <em class="emphasis">Mail Transport Agent</EM
>. Or you can connect to an SMTP (Simple Mail Transfer Protocol) server. Unfortunately, there's no standard user-level mail program, <em class="emphasis">sendmail</EM
> doesn't have a standard location, and SMTP isn't particularly simple. The CPAN module Mail::Mailer hides these complexities from you.</P
><p class="para">When Mail::Mailer is installed, it looks for <em class="emphasis">mail</EM
>, <em class="emphasis">Mail</EM
>, and other names mail-sending programs tend to hide under. It also looks in common locations for <em class="emphasis">sendmail</EM
>. When you create a Mail::Mailer object, you get convenient access to those programs (and SMTP mail servers) without needing to know their argument structure or how they return errors.</P
><p class="para">Create a Mail::Mailer object with <code class="literal">Mail::Mailer-&gt;new</CODE
>. If you don't pass any arguments, it uses the default mail sending method (probably a program like <em class="emphasis">mail </EM
>). Arguments to <code class="literal">new</CODE
> let you pick an alternative way of sending the message. The first argument is the type of delivery method (<code class="literal">&quot;mail&quot;</CODE
> for a Unix mail user agent, <code class="literal">&quot;sendmail&quot;</CODE
> for sendmail, and <code class="literal">&quot;smtp&quot;</CODE
> to open a connection to an SMTP server). The optional second argument is the path to the program.</P
><p class="para">For instance, here is how to instruct Mail::Mailer to use <em class="emphasis">sendmail</EM
> instead of its default:</P
><pre class="programlisting">$mailer = Mail::Mailer-&gt;new(&quot;sendmail&quot;);</PRE
><p class="para">Here's how to tell it to use <code class="literal">/u/gnat/bin/funkymailer</CODE
> instead of <em class="emphasis">mail</EM
>:</P
><pre class="programlisting">$mailer = Mail::Mailer-&gt;new(&quot;mail&quot;, &quot;/u/gnat/bin/funkymailer&quot;);</PRE
><p class="para">Here's how to use SMTP with the machine <em class="emphasis">mail.myisp.com</EM
> as the mail server:</P
><pre class="programlisting">$mailer = Mail::Mailer-&gt;new(&quot;smtp&quot;, &quot;mail.myisp.com&quot;);</PRE
><p class="para">If an error occurs at any part of Mail::Mailer, <code class="literal">die</CODE
> is called. This means if you want to check for errors, you need to wrap your mail-sending code in <code class="literal">eval</CODE
> and check <code class="literal">$@</CODE
> afterward:</P
><pre class="programlisting">eval {
    $mailer = Mail::Mailer-&gt;new(&quot;bogus&quot;, &quot;arguments&quot;);
    # ...
};
if ($@) {
    # the eval failed
    print &quot;Couldn't send mail: $@\n&quot;;
} else {
    # the eval succeeded
    print &quot;The authorities have been notified.\n&quot;;
}</PRE
><p class="para">The <code class="literal">new</CODE
> constructor raises an exception if you provide arguments it doesn't understand or if you specify no arguments and it doesn't have a default method. Mail::Mailer won't run a program or connect to the SMTP server until you call the <code class="literal">open</CODE
> method with the headers of the message:</P
><pre class="programlisting">$mailer-&gt;open( 'From'    =&gt; 'Nathan Torkington &lt;gnat@frii.com&gt;',
               'To'      =&gt; 'Tom Christiansen &lt;tchrist@perl.com&gt;',
               'Subject' =&gt; 'The Perl Cookbook' );</PRE
><p class="para">The <code class="literal">open</CODE
> method raises an exception if the program or server couldn't be opened. If <code class="literal">open</CODE
> succeeds, you may treat <code class="literal">$mailer</CODE
> as a filehandle and print the body of your message to it:</P
><pre class="programlisting">print $mailer &lt;&lt;EO_SIG;
Are we ever going to finish this book?
My wife is threatening to leave me.
She says I love EMACS more than I love her.
Do you have a recipe that can help me?

Nat
EO_SIG</PRE
><p class="para">When you're done, call the <code class="literal">close</CODE
> function on the Mail::Mailer object:</P
><pre class="programlisting">close($mailer)                      or die &quot;can't close mailer: $!&quot;;</PRE
><p class="para">If you want to go it alone and communicate with <em class="emphasis">sendmail</EM
> directly, use something like this:</P
><pre class="programlisting">open(SENDMAIL, &quot;|/usr/sbin/sendmail -oi -t -odq&quot;)
            or die &quot;Can't fork for sendmail: $!\n&quot;;
print SENDMAIL &lt;&lt;&quot;EOF&quot;;
From: Tom Christiansen &lt;tchrist\@perl.com&gt;
To: Nathan Torkington &lt;gnat\@frii.com&gt;
Subject: Re: The Perl Cookbook

(1) We will never finish the book.
(2) No man who uses EMACS is deserving of love.
(3) I recommend coq au vi.

tom
EOF
close(SENDMAIL);</PRE
><p class="para">This is a straightforward use of <code class="literal">open</CODE
> to run another program (see <a class="xref" href="ch16_05.htm" title="Reading or Writing to Another Program">Recipe 16.4</A
>). You need to specify the full path to <code class="literal">sendmail</CODE
> because its location varies from machine to machine. It is often found in places like <i class="filename">/usr/lib</I
> or <i class="filename">/usr/sbin</I
>. The flags we give to <em class="emphasis">sendmail</EM
> say to not exit when a line with only a dot is read (<code class="literal">-oi</CODE
>), to read the headers of the message to decide whom to send it to (<code class="literal">-t</CODE
>), and to insert the message into the queue instead of attempting to deliver it immediately (<code class="literal">-odq</CODE
>). This last option is only important when you're sending a lot of mail &nbsp;-  omitting it would quickly swamp the machine with <em class="emphasis">sendmail</EM
> processes. If you want immediate delivery of your message (for instance, you're testing your program or the mail is urgent) remove <code class="literal">-odq</CODE
> from the command line.</P
><p class="para">We <code class="literal">print</CODE
> an entire message, headers and then body, separated by a blank line. There are no special escapes to insert new lines (as some user mail programs have), so all text is literal. <em class="emphasis">sendmail</EM
> adds headers like <code class="literal">Date</CODE
> and <code class="literal">Message-ID</CODE
> (which you shouldn't generate yourself anyway).</P
><p class="para">Some ports of Perl (Windows and Mac particularly) don't have <em class="emphasis">sendmail</EM
> or <em class="emphasis">mail</EM
> to use. In these cases, you should find an SMTP server you can send mail through.<a class="indexterm" name="ch18-idx-1000004295-0"></A
><a class="indexterm" name="ch18-idx-1000004295-1"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch18-pgfId-1000004530">See Also</A
></H3
><p class="para">The <code class="literal">open</CODE
> function in <a class="olink" href="../prog/ch03_01.htm">Chapter 3</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
> and in <i class="filename">perlfunc </I
>(1); <a class="xref" href="ch16_05.htm" title="Reading or Writing to Another Program">Recipe 16.4</A
>; <a class="xref" href="ch16_11.htm" title="Communicating Between Related Processes">Recipe 16.10</A
>; <a class="xref" href="ch16_20.htm" title="Avoiding Zombie Processes">Recipe 16.19</A
>; <a class="xref" href="ch19_07.htm" title="Executing Commands Without Shell Escapes">Recipe 19.6</A
>; the RFCs dictating the SMTP protocol, RFC 821, <cite class="citetitle">Simple Mail Transfer Protocol</CITE
>, as amended by later RFCs</P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch18_03.htm" title="18.2. Being an FTP Client"><img src="../gifs/txtpreva.gif" alt="Previous: 18.2. Being an FTP Client" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch18_05.htm" title="18.4. Reading and Posting Usenet News Messages"><img src="../gifs/txtnexta.gif" alt="Next: 18.4. Reading and Posting Usenet News Messages" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">18.2. Being an FTP Client</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">18.4. Reading and Posting Usenet News Messages</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
