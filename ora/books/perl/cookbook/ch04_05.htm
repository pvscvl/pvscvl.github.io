<html><head>
<title>Recipe 4.4. Doing Something with Every Element in a List</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:31:13Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch04_01.htm" title="4. Arrays"><link rel="prev" href="ch04_04.htm" title="4.3. Changing Array Size"><link rel="next" href="ch04_06.htm" title="4.5. Iterating Over an Array by Reference"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch04_04.htm" title="4.3. Changing Array Size"><img src="../gifs/txtpreva.gif" alt="Previous: 4.3. Changing Array Size" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch04_01.htm" title="4. Arrays">Chapter 4<br>Arrays</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch04_06.htm" title="4.5. Iterating Over an Array by Reference"><img src="../gifs/txtnexta.gif" alt="Next: 4.5. Iterating Over an Array by Reference" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch04-18004">4.4. Doing Something with Every Element in a List</A
></H2
><div class="sect2"><h3 class="sect2"><a class="title" name="ch04-pgfId-397">Problem <a class="indexterm" name="ch04-idx-1000006630-0"></A
><a class="indexterm" name="ch04-idx-1000006630-1"></A
></A
></H3
><p class="para">You want to repeat a procedure for every element in a list.</P
><p class="para">Often you use an array to collect information you're interested in; for instance, login names of users who have exceeded their disk quota. When you finish collecting the information, you want to process it by doing something with every element in the array. In the disk quota example, you might send each user a stern mail message.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch04-pgfId-405">Solution</A
></H3
><p class="para">Use a <code class="literal">foreach</CODE
> loop:</P
><pre class="programlisting">foreach $item (LIST) {
    # do something with $item
}</PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch04-pgfId-417">Discussion</A
></H3
><p class="para">Let's say we've used <code class="literal">@bad_users</CODE
> to compile a list of users over their allotted disk quota. To call some <code class="literal">complain()</CODE
> subroutine for each one we'd use:</P
><pre class="programlisting">foreach $user (@bad_users) {
        complain($user);
}</PRE
><p class="para">Rarely is this recipe so simply applied. Instead, we often use functions to generate the list:</P
><pre class="programlisting">foreach $var (sort keys %ENV) {
    print &quot;$var=$ENV{$var}\n&quot;;
}</PRE
><p class="para">Here we're using <code class="literal">sort</CODE
> and <code class="literal">keys</CODE
> to build a sorted list of environment variable names. In situations where the list will be used more than once, you'll obviously keep it around by saving in an array. But for one-shot processing, it's often tidier to process the list directly.</P
><p class="para">Not only can we add complexity to this formula by building up the list in the <code class="literal">foreach</CODE
>, we can also add complexity by doing more work inside the code block. A common application of <code class="literal">foreach</CODE
> is to gather information on every element of a list, and then decide (based on that information) whether to do something. For instance, returning to the disk quota example:</P
><pre class="programlisting">foreach $user (@all_users) {
    $disk_space = get_usage($user);     # find out how much disk space in use
    if ($disk_space &gt; $MAX_QUOTA) {     # if it's more than we want ...
        complain($user);                # ... then object vociferously
    }
}</PRE
><p class="para">More complicated program flow is possible. The code can call <code class="literal">last</CODE
> to jump out of the loop, <code class="literal">next</CODE
> to move on to the next element, or <code class="literal">redo</CODE
> to jump back to the first statement inside the block. Use these to say "no point continuing with this one, I know it's not what I'm looking for" (<code class="literal">next</CODE
>), "I've found what I'm looking for, there's no point in my checking the rest" (<code class="literal">last</CODE
>), or "I've changed some things, I'd better do my tests and calculations again" (<code class="literal">redo</CODE
>).</P
><p class="para"><a class="indexterm" name="ch04-idx-1000006637-0"></A
><a class="indexterm" name="ch04-idx-1000006637-1"></A
><a class="indexterm" name="ch04-idx-1000006637-2"></A
>The variable set to each value in the list is called a <em class="emphasis">loop variable</EM
> or <em class="emphasis">iterator variable</EM
>. If no iterator variable is supplied, the global variable <code class="literal">$_</CODE
> is used. <code class="literal">$_</CODE
> is the default variable for many of Perl's string, list, and file functions. In brief code blocks, omitting <code class="literal">$_</CODE
> improves readability. (In long ones, though, too much implicit use hampers readability.) For example:</P
><pre class="programlisting">foreach (`who`) {
    if (/tchrist/) {
        print;
    }
}</PRE
><p class="para">or combining with a <code class="literal">while</CODE
> loop:</P
><pre class="programlisting">while (&lt;FH&gt;) {              # $_ is set to the line just read
    chomp;                  # $_ has a trailing \n removed, if it had one
    foreach (split) {       # $_ is split on whitespace, into @_
                            # then $_ is set to each chunk in turn
        $_ = reverse;       # the characters in $_ are reversed
        print;              # $_ is printed
    }
}</PRE
><p class="para">Perhaps all these uses of <code class="literal">$_</CODE
> are starting to make you nervous. In particular, the <code class="literal">foreach</CODE
> and the <code class="literal">while</CODE
> both give values to <code class="literal">$_</CODE
>. You might fear that at the end of the <code class="literal">foreach</CODE
>, the full line as read into <code class="literal">$_</CODE
> with <code class="literal">&lt;FH&gt;</CODE
> would be forever gone.</P
><p class="para">Fortunately, your fears would be unfounded, at least in this case. Perl won't permanently clobber <a class="indexterm" name="ch04-idx-1000007741-0"></A
><code class="literal">$_</CODE
>'s old value, because the <code class="literal">foreach</CODE
>'s iterator variable (<code class="literal">$_</CODE
> in this case) is automatically preserved during the loop. It saves away any old value on entry and restores it upon exit.</P
><p class="para">There is cause for some concern though. If the <code class="literal">while</CODE
> had been the inner loop and the <code class="literal">foreach</CODE
> the outer one, then your fears would have been realized. Unlike a <code class="literal">foreach</CODE
> loop, the <code class="literal">while</CODE
> <code class="literal">&lt;FH&gt;</CODE
> construct clobbers the value of the global <code class="literal">$_</CODE
> without first localizing it! So any routine&nbsp;- or block for that matter&nbsp;- that uses such a construct with <code class="literal">$_</CODE
> should always declare <code class="literal">local</CODE
> <code class="literal">$_</CODE
> at its front.</P
><p class="para">If a lexical variable (one declared with <code class="literal">my</CODE
>) is in scope, the temporary variable will be lexically scoped, private to that loop. Otherwise, it will be a dynamically scoped global variable. To avoid strange magic at a distance, as of release 5.004 you can write this more obviously and more clearly as:</P
><pre class="programlisting">foreach my $item (@array) {
    print &quot;i = $item\n&quot;;
}</PRE
><p class="para">The <code class="literal">foreach</CODE
> looping construct has another feature: each time through the loop, the iterator variable becomes not a copy of but rather an<a class="indexterm" name="ch04-idx-1000006638-0"></A
> <em class="emphasis">alias</EM
> for the current element. This means that when you change that iterator variable, you really change each element in the list:</P
><pre class="programlisting">@array = (1,2,3);
foreach $item (@array) {
    $item--;
}
print &quot;@array\n&quot;;
<code class="userinput"><b><code class="replaceable"><i>0 1 2</I
></CODE
></B
></CODE
>

# multiply everything in @a and @b by seven
@a = ( .5, 3 ); @b =( 0, 1 );
foreach $item (@a, @b) {
    $item *= 7;
}
print &quot;@a @b\n&quot;;
<code class="userinput"><b><code class="replaceable"><i>3.5 21 0 7</I
></CODE
></B
></CODE
></PRE
><p class="para">This aliasing means that using a <code class="literal">foreach</CODE
> loop to modify list values is both more readable and faster than the equivalent code using a three-part <code class="literal">for</CODE
> loop and explicit indexing would be. This behavior is a feature, not a bug, that was introduced by design. If you didn't know about it, you might accidentally change something. Now you know about it.</P
><p class="para">For example, if we used <code class="literal">s///</CODE
> on elements of the list returned by the <code class="literal">values</CODE
> function, we would only be changing copies, not the real hash itself. The hash slice (<code class="literal">@hash{keys</CODE
> <code class="literal">%hash}</CODE
> is a hash slice, explained in <a class="xref" href="ch05_01.htm" title="Hashes">Chapter 5, <cite class="chapter">Hashes</CITE
></A
>), however, gives us something we <em class="emphasis">can</EM
> usefully change:</P
><pre class="programlisting"># trim whitespace in the scalar, the array, and all the values
# in the hash
foreach ($scalar, @array, @hash{keys %hash}) {
    s/^\s+//;
    s/\s+$//;
}</PRE
><p class="para">For reasons hearkening back to the equivalent construct in the Unix Bourne shell, the <code class="literal">for</CODE
> and <code class="literal">foreach</CODE
> keywords are interchangeable:</P
><pre class="programlisting">for $item (@array) {  # same as foreach $item (@array)
    # do something
}

for (@array)      {   # same as foreach $_ (@array)
    # do something
}</PRE
><p class="para">This style often indicates that its author writes or maintains shell scripts, perhaps for Unix systems administration. As such, their life is probably hard enough, so don't speak too harshly of them. Remember, TMTOWTDI. This is just one of those ways.</P
><p class="para">If you aren't fluent in Bourne shell, you might find it clearer to express "for each <code class="literal">$thing</CODE
> in this <code class="literal">@list</CODE
>," by saying <code class="literal">foreach</CODE
> to make your code less like the shell and more like English. (But don't try to make your English look like your code!)</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch04-pgfId-567">See Also</A
></H3
><p class="para">The "For Loops," "Foreach Loops," and "Loop Control" sections of <i class="filename">perlsyn </I
>(1) and <a class="olink" href="../prog/ch02_01.htm">Chapter 2</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
>; the "Temporary Values via local(  )" section of <i class="filename">perlsub</I
> (1); the <a class="olink" href="../prog/ch02_06.htm#PERL2-CH-2-SECT-6.5">"Scoped Declarations"</A
> section of <a class="olink" href="../prog/ch02_01.htm">Chapter 2</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
>; we talk about <code class="literal">local()</CODE
> in <a class="xref" href="ch10_14.htm" title="Saving Global Values">Recipe 10.13</A
>; we talk about <code class="literal">my()</CODE
> in <a class="xref" href="ch10_03.htm" title="Making Variables Private to a Function">Recipe 10.2</A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch04_04.htm" title="4.3. Changing Array Size"><img src="../gifs/txtpreva.gif" alt="Previous: 4.3. Changing Array Size" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch04_06.htm" title="4.5. Iterating Over an Array by Reference"><img src="../gifs/txtnexta.gif" alt="Next: 4.5. Iterating Over an Array by Reference" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">4.3. Changing Array Size</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">4.5. Iterating Over an Array by Reference</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
