<html><head>
<title>Recipe 8.11. Processing Binary Files</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:38:46Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch08_01.htm" title="8. File Contents"><link rel="prev" href="ch08_11.htm" title="8.10. Removing the Last Line of a File"><link rel="next" href="ch08_13.htm" title="8.12. Using Random-Access I/O"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch08_11.htm" title="8.10. Removing the Last Line of a File"><img src="../gifs/txtpreva.gif" alt="Previous: 8.10. Removing the Last Line of a File" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch08_01.htm" title="8. File Contents">Chapter 8<br>File Contents</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch08_13.htm" title="8.12. Using Random-Access I/O"><img src="../gifs/txtnexta.gif" alt="Next: 8.12. Using Random-Access I/O" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch08-19069">8.11. Processing Binary Files</A
></H2
><div class="sect2"><h3 class="sect2"><a class="title" name="ch08-pgfId-1050">Problem<a class="indexterm" name="ch08-idx-1000004672-0"></A
><a class="indexterm" name="ch08-idx-1000004672-1"></A
></A
></H3
><p class="para">Your system distinguishes between text and binary files. How do you?</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch08-pgfId-1056">Solution</A
></H3
><p class="para">Use the <code class="literal">binmode</CODE
><a class="indexterm" name="ch08-idx-1000004678-0"></A
> function on the filehandle:</P
><pre class="programlisting">binmode(HANDLE);</PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch08-pgfId-1000005428">Discussion</A
></H3
><p class="para">Not everyone agrees what constitutes a line in a text file, because one person's textual character set is another's binary gibberish. Even when everyone is using ASCII instead of EBCDIC, Rad50, or Unicode, discrepancies arise.</P
><p class="para"><a class="indexterm" name="ch08-idx-1000004679-0"></A
><a class="indexterm" name="ch08-idx-1000004679-1"></A
>As mentioned in the Introduction, there is no such thing as a newline character. It is purely virtual, a figment of the operating system, standard libraries, device drivers, and Perl.</P
><p class="para">Under Unix or Plan9, a <code class="literal">&quot;\n&quot;</CODE
> represents the physical sequence <code class="literal">&quot;\cJ&quot;</CODE
> (the Perl double-quote escape for Ctrl-J), a linefeed. However, on a terminal that's not in raw mode, an Enter key generates an incoming <code class="literal">&quot;\cM&quot;</CODE
> (a carriage return) which turns into <code class="literal">&quot;\cJ&quot;</CODE
>, whereas an outgoing <code class="literal">&quot;\cJ&quot;</CODE
> turns into <code class="literal">&quot;\cM\cJ&quot;</CODE
>. This strangeness doesn't happen with normal files, just terminal devices, and it is handled strictly by the device driver.</P
><p class="para">On a Mac, a <code class="literal">&quot;\n&quot;</CODE
> is usually represented by <code class="literal">&quot;\cM&quot;</CODE
>; just to make life interesting (and because the standard requires that <code class="literal">&quot;\n&quot;</CODE
> and <code class="literal">&quot;\r&quot;</CODE
> be different), a <code class="literal">&quot;\r&quot;</CODE
> represents a <code class="literal">&quot;\cJ&quot;</CODE
>. This is exactly the opposite of the way that Unix, Plan9, VMS, CP/M, or nearly anyone else does it. So, Mac programmers writing files for other systems or talking over a network have to be careful. If you send out <code class="literal">&quot;\n&quot;</CODE
>, you'll deliver a <code class="literal">&quot;\cM&quot;</CODE
>, and no <code class="literal">&quot;\cJ&quot;</CODE
> will be seen. Most network services prefer to receive and send <code class="literal">&quot;\cM\cJ&quot;</CODE
> as a line terminator, but most accept merely a <code class="literal">&quot;\cJ&quot;</CODE
>.</P
><p class="para">Under VMS, DOS, or their derivatives, a <code class="literal">&quot;\n&quot;</CODE
> represents <code class="literal">&quot;\cJ&quot;</CODE
>, similar to Unix and Plan9. From the perspective of a tty, Unix and DOS behave identically: a user who hits Enter generates a <code class="literal">&quot;\cM&quot;</CODE
>, but this arrives at the program as a <code class="literal">&quot;\n&quot;</CODE
>, which is <code class="literal">&quot;\cJ&quot;</CODE
>. A <code class="literal">&quot;\n&quot;</CODE
> (that's a <code class="literal">&quot;\cJ&quot;</CODE
>, remember) sent to a terminal shows up as a <code class="literal">&quot;\cM\cJ&quot;</CODE
>.</P
><p class="para">These strange conversions happen to Windows files as well. A DOS text file actually physically contains two characters at the end of every line, <code class="literal">&quot;\cM\cJ&quot;</CODE
>. The last block in the file has a <code class="literal">&quot;\cZ&quot;</CODE
> to indicate where the text stops. When you write a line like <code class="literal">&quot;bad</CODE
> <code class="literal">news\n&quot;</CODE
> on those systems, the file contains <code class="literal">&quot;bad</CODE
> <code class="literal">news\cM\cJ&quot;</CODE
>, just as if it were a terminal.</P
><p class="para">When you read a line on such systems, it's even stranger. The file itself contains <code class="literal">&quot;bad</CODE
> <code class="literal">news\cM\cJ&quot;</CODE
>, a 10-byte string. When you read it in, your program gets nothing but <code class="literal">&quot;bad</CODE
> <code class="literal">news\n&quot;</CODE
>, where that <code class="literal">&quot;\n&quot;</CODE
> is the virtual newline character, that is, a linefeed (<code class="literal">&quot;\cJ&quot;</CODE
>). That means to get rid of it, a single <code class="literal">chop</CODE
> or <code class="literal">chomp</CODE
> will do. But your poor program has been tricked into thinking it's only read nine bytes from the file. If you were to read 10 such lines, you would appear to have read  just 90 bytes into the file, but in fact would be at position 100. That's why the <code class="literal">tell</CODE
> function must always be used to determine your location. You can't infer your position just by counting what you've read.</P
><p class="para">This legacy of the old CP/M filesystem, whose equivalent of a Unix inode stored only block counts and not file sizes, has frustrated programmers for decades, and no end is in sight. Because DOS is compatible with CP/M file formats, Windows with DOS, and NT with Windows, the sins of the fathers have truly been visited unto the children of the fourth generation.</P
><p class="para">You can circumvent the single <code class="literal">&quot;\n&quot;</CODE
> terminator by telling Perl (and the operating system) that you're working with binary data. The <code class="literal">binmode</CODE
> function indicates that data read or written through the given filehandle should not be mangled the way a text file would likely be on those systems.</P
><pre class="programlisting">$gifname = &quot;picture.gif&quot;;
open(GIF, $gifname)         or die &quot;can't open $gifname: $!&quot;;

binmode(GIF);               # now DOS won't mangle binary input from GIF
binmode(STDOUT);            # now DOS won't mangle binary output to STDOUT

while (read(GIF, $buff, 8 * 2**10)) {
    print STDOUT $buff;
}</PRE
><p class="para">Calling <code class="literal">binmode</CODE
> on systems that don't make this distinction (including Unix, the Mac, and Plan 9) is harmless. Inappropriately doing so (such as on a text file) on systems that do (including MVS, VMS, and DOS,  regardless of its GUI )  can mangle your files.</P
><p class="para">If you're <em class="emphasis">not</EM
> using <code class="literal">binmode</CODE
>, the data you read using stdio (&lt;&gt;) will automatically have the native system's line terminator changed to <code class="literal">&quot;\n&quot;</CODE
>, even if you change <code class="literal">$/</CODE
>. Similarly, any <code class="literal">&quot;\n&quot;</CODE
> you <code class="literal">print</CODE
> to the filehandle will be turned into the native line terminator. See this chapter's Introduction for more details.</P
><p class="para">If you want to get what was on the disk, byte for byte, you should set <code class="literal">binmode</CODE
> if you're on one of the odd systems listed above. Then, of course, you also have to set <code class="literal">$/</CODE
> to the real record separator if you want to use &lt;&gt; on it. <a class="indexterm" name="ch08-idx-1000004674-0"></A
><a class="indexterm" name="ch08-idx-1000004674-1"></A
><a class="indexterm" name="ch08-idx-1000004674-2"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch08-pgfId-1110">See Also</A
></H3
><p class="para">The <code class="literal">open</CODE
> and <code class="literal">binmode</CODE
> functions in <i class="filename">perlfunc </I
>(1) and in <a class="olink" href="../prog/ch03_01.htm">Chapter 3</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
>; your system's <i class="filename">open </I
>(2) and <i class="filename">fopen </I
>(3) manpages</P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch08_11.htm" title="8.10. Removing the Last Line of a File"><img src="../gifs/txtpreva.gif" alt="Previous: 8.10. Removing the Last Line of a File" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch08_13.htm" title="8.12. Using Random-Access I/O"><img src="../gifs/txtnexta.gif" alt="Next: 8.12. Using Random-Access I/O" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">8.10. Removing the Last Line of a File</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">8.12. Using Random-Access I/O</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
