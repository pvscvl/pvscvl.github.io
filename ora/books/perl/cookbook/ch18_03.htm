<html><head>
<title>Recipe 18.2. Being an FTP Client</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:44:59Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch18_01.htm" title="18. Internet Services"><link rel="prev" href="ch18_02.htm" title="18.1. Simple DNS Lookups"><link rel="next" href="ch18_04.htm" title="18.3. Sending Mail"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch18_02.htm" title="18.1. Simple DNS Lookups"><img src="../gifs/txtpreva.gif" alt="Previous: 18.1. Simple DNS Lookups" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch18_01.htm" title="18. Internet Services">Chapter 18<br>Internet Services</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch18_04.htm" title="18.3. Sending Mail"><img src="../gifs/txtnexta.gif" alt="Next: 18.3. Sending Mail" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch18-chap18_being_0">18.2. Being an FTP Client</A
></H2
><div class="sect2"><h3 class="sect2"><a class="title" name="ch18-pgfId-255">Problem</A
></H3
><p class="para"><a class="indexterm" name="ch18-idx-1000004287-0"></A
><a class="indexterm" name="ch18-idx-1000004287-1"></A
><a class="indexterm" name="ch18-idx-1000004287-2"></A
><a class="indexterm" name="ch18-idx-1000004287-3"></A
>You want to connect to an FTP server and get or put files. You might want to automate the one-time transfer of many files or automatically mirror an entire section of an FTP server, for example.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch18-pgfId-261">Solution</A
></H3
><p class="para">Use the CPAN module Net::FTP:</P
><pre class="programlisting">use Net::FTP;

$ftp = Net::FTP-&gt;new(&quot;ftp.host.com&quot;)    or die &quot;Can't connect: $@\n&quot;;
$ftp-&gt;login($username, $password)       or die &quot;Couldn't login\n&quot;;
$ftp-&gt;cwd($directory)                   or die "Couldn't change directory\n";
$ftp-&gt;get($filename)                    or die &quot;Couldn't get $filename\n";
$ftp-&gt;put($filename)                    or die &quot;Couldn't put $filename\n";</PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch18-pgfId-281">Discussion</A
></H3
><p class="para">Using the Net::FTP module is a three-part process: <em class="emphasis">connect</EM
> to a server, identify and <em class="emphasis">authenticate</EM
> yourself, and <em class="emphasis">transfer</EM
> files. All interaction with the FTP server happens through method calls on a Net::FTP object. If an error occurs, methods return <code class="literal">undef</CODE
> in scalar context or an empty list in list context.</P
><p class="para">The connection is established with the <code class="literal">new</CODE
> constructor. If an error occurs, <code class="literal">$@</CODE
> is set to an error message and <code class="literal">new</CODE
> returns <code class="literal">undef</CODE
>. The first argument is the hostname of the FTP server and is optionally followed by named options:</P
><pre class="programlisting">$ftp = Net::FTP-&gt;new(&quot;ftp.host.com&quot;,
                     Timeout =&gt; 30,
                     Debug   =&gt; 1)
    or die &quot;Can't connect: $@\n&quot;;</PRE
><p class="para">The <code class="literal">Timeout</CODE
> option gives the number of seconds all operations wait before giving up. <code class="literal">Debug</CODE
> sets the debugging level (non-zero sends copies of all commands to STDERR). <code class="literal">Firewall</CODE
> takes a string as an argument, specifying the machine acting as an FTP proxy. <code class="literal">Port</CODE
> lets you specify an alternate port number (the default is 21, the standard port for FTP). Finally, if the <code class="literal">Passive</CODE
> option is set to true, all transfers are done passively (some firewalls and proxies require this). The <code class="literal">Firewall</CODE
> and <code class="literal">Passive</CODE
> options override the environment variables <code class="literal">FTP_FIREWALL</CODE
> and <code class="literal">FTP_PASSIVE</CODE
>.</P
><p class="para">Having connected, the next step is to authenticate. Normally, you'll want to call <code class="literal">login</CODE
> with up to three arguments: username, password, and account.</P
><pre class="programlisting">$ftp-&gt;<code class="literal">login()</CODE
>
    or die &quot;Couldn't authenticate.\n&quot;;

$ftp-&gt;login($username)
    or die &quot;Still couldn't authenticate.\n&quot;;

$ftp-&gt;login($username, $password)
    or die &quot;Couldn't authenticate, even with explicit username
            and password.\n";

$ftp-&gt;login($username, $password, $account)
    or die &quot;No dice.  It hates me.\n&quot;;</PRE
><p class="para">If you call <code class="literal">login</CODE
> with no arguments, Net::FTP uses the Net::Netrc module to find settings for the host you've connected to. If none are found there, anonymous login is attempted (username <code class="literal">anonymous</CODE
>, password <code class="literal">username@hostname</CODE
>). If no password is given and the username <code class="literal">anonymous</CODE
> is used, the user's mail address is supplied as the password. The optional account argument is not used on most systems. If the authentication fails, <code class="literal">login</CODE
> returns <code class="literal">undef</CODE
>.</P
><p class="para">Once authenticated, the usual FTP commands are available as methods called on your Net::FTP object. The <code class="literal">get</CODE
> and <code class="literal">put</CODE
> methods fetch and send files. To send a file, use:</P
><pre class="programlisting">$ftp-&gt;put($localfile, $remotefile)
    or die &quot;Can't send $localfile: $!\n&quot;;</PRE
><p class="para">If you omit the second argument, the remote file will have the same name as the local file. You can also send from a filehandle (in which case the remote filename must be given as the second argument):</P
><pre class="programlisting">$ftp-&gt;put(*STDIN, $remotefile)
    or die &quot;Can't send from STDIN: $!\n&quot;;</PRE
><p class="para">If the transfer is interrupted, the remote file is not automatically deleted. The <code class="literal">put</CODE
> method returns the remote filename if it succeeded, or <code class="literal">undef</CODE
> if an error occurred.</P
><p class="para">To fetch a file, use the <code class="literal">get</CODE
> method, which returns the local filename, or <code class="literal">undef</CODE
> if there was an error:</P
><pre class="programlisting">$ftp-&gt;get($remotefile, $localfile)
    or die &quot;Can't fetch $remotefile : $!\n&quot;;</PRE
><p class="para">You can also <code class="literal">get</CODE
> into a filehandle, in which case the filehandle is returned (or <code class="literal">undef</CODE
> if there was an error):</P
><pre class="programlisting">$ftp-&gt;get($remotefile, *STDOUT)
    or die &quot;Can't fetch $remotefile: $!\n&quot;;</PRE
><p class="para">Pass <code class="literal">get</CODE
> an optional third argument, an offset into the remote file, to begin the transfer at that offset. Received bytes are appended to the local file.</P
><p class="para">The <code class="literal">type</CODE
> method changes the file translation mode. Pass it a string (<code class="literal">&quot;A&quot;</CODE
>, <code class="literal">&quot;I&quot;</CODE
>, <code class="literal">&quot;E&quot;</CODE
>, or <code class="literal">&quot;L&quot;</CODE
>) and it will return the previous translation mode. The <code class="literal">ascii</CODE
>, <code class="literal">binary</CODE
>, <code class="literal">ebcdic</CODE
>, and <code class="literal">byte</CODE
> methods call <code class="literal">type</CODE
> with the appropriate string. If an error occurs (the FTP server does not do EBCDIC, for example), <code class="literal">type</CODE
> and its helper methods return <code class="literal">undef</CODE
>.</P
><p class="para">Use <code class="literal">cwd($remotedir)</CODE
> and <code class="literal">pwd</CODE
> to set and fetch the current remote directory. They both return true if successful, false otherwise. If you <code class="literal">cwd(&quot;..&quot;)</CODE
>, the <code class="literal">cdup</CODE
> method is called to change the directory to the parent of the current directory. Call <code class="literal">cwd</CODE
> without an argument to change to the root directory.</P
><pre class="programlisting">$ftp-&gt;cwd(&quot;/pub/perl/CPAN/images/g-rated&quot;);
print &quot;I'm in the directory &quot;, $ftp-&gt;pwd(), &quot;\n&quot;;</PRE
><p class="para"><code class="literal">mkdir($remotedir)</CODE
> and <code class="literal">rmdir($remotedir)</CODE
> make and delete directories on the remote machine. You have the built-in <code class="literal">mkdir</CODE
> and <code class="literal">rmdir</CODE
> functions to make and delete directories on the local machine. To create all directories up to the given directory, pass a true second argument to <code class="literal">mkdir</CODE
>. For instance, if you want to make <em class="emphasis">/pub</EM
>, <em class="emphasis">/pub/gnat</EM
>, and <em class="emphasis">/pub/gnat/perl</EM
>, say:</P
><pre class="programlisting">   $ftp-&gt;mkdir(&quot;/pub/gnat/perl&quot;, 1)
    or die &quot;Can't create /pub/gnat/perl recursively: $!\n&quot;;</PRE
><p class="para">If <code class="literal">mkdir</CODE
> succeeds, the full path to the newly created directory is returned. If it fails, <code class="literal">mkdir</CODE
> returns <code class="literal">undef</CODE
>.</P
><p class="para">The <code class="literal">ls</CODE
> and <code class="literal">dir</CODE
> methods get a list of files in a remote directory. Traditionally, <code class="literal">dir</CODE
> gives you a more verbose listing than <code class="literal">ls</CODE
>, but neither has a standard format. Most Unix FTP servers return the output of <em class="emphasis">ls</EM
> and <em class="emphasis">ls -l</EM
> respectively, but you can't guarantee that behavior from every FTP server. These methods, in list context, return the list of lines returned by the server. In scalar context, they return a reference to an array.</P
><pre class="programlisting">@lines = $ftp-&gt;ls(&quot;/pub/gnat/perl&quot;)
    or die &quot;Can't get a list of files in /pub/gnat/perl: $!&quot;;
$ref_to_lines = $ftp-&gt;dir(&quot;/pub/perl/CPAN/src/latest.tar.gz&quot;)
    or die &quot;Can't check status of latest.tar.gz: $!\n&quot;;</PRE
><p class="para">When you're done and want to close up gracefully, use the <code class="literal">quit</CODE
> method:</P
><pre class="programlisting">$ftp-&gt;quit()    or warn &quot;Couldn't quit.  Oh well.\n&quot;;</PRE
><p class="para">Other methods rename, change ownership and permissions of remote files, check the size of the remote file, and so on. Read the Net::FTP documentation for details.</P
><p class="para">If you want to mirror files between machines, use the excellent <em class="emphasis">mirror</EM
> program written in Perl by Lee McLoughlin. Look for it on the Web at <a class="systemitem.url" href="../../../../../../../sunsite.doc.ic.ac.uk/packages/mirror/.">http://sunsite.doc.ic.ac.uk/packages/mirror/.</A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch18-pgfId-389">See Also</A
></H3
><p class="para">Your system's <i class="filename">ftp </I
>(1) and <i class="filename">ftpd</I
> (8) manpages (if you have them); the documentation for the Net::FTP module from CPAN<a class="indexterm" name="ch18-idx-1000004289-0"></A
><a class="indexterm" name="ch18-idx-1000004289-1"></A
><a class="indexterm" name="ch18-idx-1000004289-2"></A
><a class="indexterm" name="ch18-idx-1000004289-3"></A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch18_02.htm" title="18.1. Simple DNS Lookups"><img src="../gifs/txtpreva.gif" alt="Previous: 18.1. Simple DNS Lookups" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch18_04.htm" title="18.3. Sending Mail"><img src="../gifs/txtnexta.gif" alt="Next: 18.3. Sending Mail" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">18.1. Simple DNS Lookups</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">18.3. Sending Mail</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
