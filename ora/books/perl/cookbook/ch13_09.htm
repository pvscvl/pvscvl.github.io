<html><head>
<title>Recipe 13.8. Determining Subclass Membership</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:42:24Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch13_01.htm" title="13. Classes, Objects, and Ties"><link rel="prev" href="ch13_08.htm" title="13.7. Calling Methods Indirectly"><link rel="next" href="ch13_10.htm" title="13.9. Writing an Inheritable Class"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch13_08.htm" title="13.7. Calling Methods Indirectly"><img src="../gifs/txtpreva.gif" alt="Previous: 13.7. Calling Methods Indirectly" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch13_01.htm" title="13. Classes, Objects, and Ties">Chapter 13<br>Classes, Objects, and Ties</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch13_10.htm" title="13.9. Writing an Inheritable Class"><img src="../gifs/txtnexta.gif" alt="Next: 13.9. Writing an Inheritable Class" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch13-chap13_determining_0">13.8. Determining Subclass Membership</A
></H2
><div class="sect2"><h3 class="sect2"><a class="title" name="ch13-pgfId-1091">Problem<a class="indexterm" name="ch13-idx-1000004549-0"></A
><a class="indexterm" name="ch13-idx-1000004549-1"></A
><a class="indexterm" name="ch13-idx-1000004549-2"></A
><a class="indexterm" name="ch13-idx-1000004549-3"></A
></A
></H3
><p class="para">You want to know whether an object is an instance of a particular class or that class's subclasses. Perhaps you want to decide whether a particular method can be called on an arbitrary object.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch13-pgfId-1097">Solution</A
></H3
><p class="para">Use methods from the special UNIVERSAL class:</P
><pre class="programlisting">$obj-&gt;isa(&quot;HTTP::Message&quot;);                  # as object method
HTTP::Response-&gt;isa(&quot;HTTP::Message&quot;);       # as class method

if ($obj-&gt;can(&quot;method_name&quot;)) { .... }       # check method validity</PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch13-pgfId-1111">Discussion</A
></H3
><p class="para">Wouldn't it be convenient if all objects were rooted at some ultimate base class? That way you could give every object common methods without having to add to each <code class="literal">@ISA</CODE
>. Well, you can. You don't see it, but Perl pretends there's an extra element at the end of <code class="literal">@ISA </CODE
> &nbsp;-   the package named UNIVERSAL.</P
><p class="para">In version 5.003, no methods were predefined in UNIVERSAL, but you could put whatever you felt like into it. However, as of version 5.004, UNIVERSAL has a few methods in it already. These are built right into your Perl binary, so they don't take extra time to load. Predefined methods include <code class="literal">isa</CODE
><a class="indexterm" name="ch13-idx-1000004893-0"></A
><a class="indexterm" name="ch13-idx-1000004893-1"></A
>, <code class="literal">can</CODE
>, and <code class="literal">VERSION</CODE
>. The <code class="literal">isa</CODE
> method tells you whether an object or class "is" another one, without having to traverse the hierarchy yourself:</P
><pre class="programlisting">$has_io = $fd-&gt;isa(&quot;IO::Handle&quot;);
$itza_handle = IO::Socket-&gt;isa(&quot;IO::Handle&quot;);</PRE
><p class="para">Arguably, it's usually best to try the method call. Explicit type checks like this are sometimes frowned upon as being too constraining.</P
><p class="para">The <code class="literal">can</CODE
> method, called on behalf of that object or class, reports back whether its string argument is a callable method name in that class. In fact, it gives you back a function reference to that method:</P
><pre class="programlisting">$his_print_method = $obj-&gt;can('as_string');</PRE
><p class="para">Finally, the <code class="literal">VERSION</CODE
> method checks whether the class (or the object's class) has a package global called <code class="literal">$VERSION</CODE
> that's high enough, as in:</P
><pre class="programlisting">Some_Module-&gt;VERSION(3.0);
$his_vers = $obj-&gt;<code class="literal">VERSION()</CODE
>;</PRE
><p class="para">However, we don't usually call <code class="literal">VERSION</CODE
> ourselves. Remember, in Perl an all-uppercase function name means that the function will be automatically called by Perl in some way. In this case, it happens when you say:</P
><pre class="programlisting">use Some_Module 3.0;</PRE
><p class="para">If you wanted to add version checking to your Person class explained above, add this to Person.pm:</P
><pre class="programlisting">use vars qw($VERSION);
$VERSION = '1.01';<code class="literal"></CODE
><a class="indexterm" name="ch13-idx-1000004558-0"></A
><a class="indexterm" name="ch13-idx-1000004558-1"></A
><a class="indexterm" name="ch13-idx-1000004558-2"></A
></PRE
><p class="para">Then, in the user code say <code class="literal">use</CODE
> <code class="literal">Person</CODE
> <code class="literal">1.01;</CODE
> to make sure that you have at least that version number or higher available. This is not the same as loading in that exact version number; it just has to be at least that high. Lamentably, no support currently exists for concurrent installation of multiple versions of a module.<a class="indexterm" name="ch13-idx-1000004552-0"></A
><a class="indexterm" name="ch13-idx-1000004552-1"></A
><a class="indexterm" name="ch13-idx-1000004552-2"></A
><a class="indexterm" name="ch13-idx-1000004552-3"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch13-pgfId-1147">See Also</A
></H3
><p class="para">The documentation for the standard UNIVERSAL module; the <code class="literal">use</CODE
> keyword in <i class="filename">perlfunc </I
>(1) and in <a class="olink" href="../prog/ch03_01.htm">Chapter 3</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch13_08.htm" title="13.7. Calling Methods Indirectly"><img src="../gifs/txtpreva.gif" alt="Previous: 13.7. Calling Methods Indirectly" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch13_10.htm" title="13.9. Writing an Inheritable Class"><img src="../gifs/txtnexta.gif" alt="Next: 13.9. Writing an Inheritable Class" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">13.7. Calling Methods Indirectly</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">13.9. Writing an Inheritable Class</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
