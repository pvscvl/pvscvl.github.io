<html><head>
<title>Recipe 8.1. Reading Lines with Continuation Characters</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:38:23Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch08_01.htm" title="8. File Contents"><link rel="prev" href="ch08_01.htm" title="8.0. Introduction"><link rel="next" href="ch08_03.htm" title="8.2. Counting Lines (or Paragraphs or Records) in a File"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch08_01.htm" title="8.0. Introduction"><img src="../gifs/txtpreva.gif" alt="Previous: 8.0. Introduction" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch08_01.htm" title="8. File Contents">Chapter 8<br>File Contents</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch08_03.htm" title="8.2. Counting Lines (or Paragraphs or Records) in a File"><img src="../gifs/txtnexta.gif" alt="Next: 8.2. Counting Lines (or Paragraphs or Records) in a File" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch08-chap08_reading_0">8.1. Reading Lines with Continuation Characters</A
></H2
><div class="sect2"><h3 class="sect2"><a class="title" name="ch08-pgfId-180">Problem<a class="indexterm" name="ch08-idx-1000004612-0"></A
><a class="indexterm" name="ch08-idx-1000004612-1"></A
><a class="indexterm" name="ch08-idx-1000004612-2"></A
></A
></H3
><p class="para">You have a file with long lines split over two or more lines, with backslashes to indicate that a continuation line follows. You want to rejoin those split lines. Makefiles, shell scripts, and many other scripting or configuration languages let you break a long line into several shorter ones in this fashion.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch08-pgfId-186">Solution</A
></H3
><p class="para">Build up the complete lines one at a time until reaching one without a backslash:</P
><pre class="programlisting">while (defined($line = &lt;FH&gt;) ) {
    chomp $line;
    if ($line =~ s/\\$//) {
        $line .= &lt;FH&gt;;
        redo unless eof(FH);
    }
    # process full record in $line here
}</PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch08-pgfId-208">Discussion</A
></H3
><p class="para">Here's an example input file:</P
><pre class="programlisting">DISTFILES = $(DIST_COMMON) $(SOURCES) $(HEADERS) \
        $(TEXINFOS) $(INFOS) $(MANS) $(DATA)
DEP_DISTFILES = $(DIST_COMMON) $(SOURCES) $(HEADERS) \
        $(TEXINFOS) $(INFO_DEPS) $(MANS) $(DATA) \
        $(EXTRA_DIST)</PRE
><p class="para">You'd like to process that file with the escaped newlines ignored. That way the first record would in this case be the first two lines, the second record the next three lines, etc.</P
><p class="para">Here's how the algorithm works. The <code class="literal">while</CODE
> loop reads lines, which may or may not be complete records &nbsp;-  they might end in backslash (and a newline). The substitution operator <code class="literal">s///</CODE
> tries to remove a trailing backslash. If the substitution fails, we've found a line without a backslash at the end. Otherwise, read another record, concatenate it onto the accumulating <code class="literal">$line</CODE
> variable, and use <code class="literal">redo</CODE
> to jump back to just inside the opening brace of the <code class="literal">while</CODE
> loop. This lands us back on the <code class="literal">chomp</CODE
>.</P
><p class="para">A common problem with files in this format is invisible blanks between the backslash and end of line. It would be more forgiving if the substitute were like this:</P
><pre class="programlisting">if ($line =~ s/\\\s*$//) { 
    # as before
}</PRE
><p class="para">Unfortunately, even if your program is forgiving, others doubtlessly aren't. Just remember to be liberal in what you accept and conservative in what you produce. <a class="indexterm" name="ch08-idx-1000004614-0"></A
><a class="indexterm" name="ch08-idx-1000004614-1"></A
><a class="indexterm" name="ch08-idx-1000004614-2"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch08-pgfId-238">See Also</A
></H3
><p class="para">The <code class="literal">chomp</CODE
> function in <i class="filename">perlfunc </I
>(1) and in <a class="olink" href="../prog/ch03_01.htm">Chapter 3</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
>; the redo keyword in the "Loop Control" sections of <i class="filename">perlsyn</I
> (1) and <a class="olink" href="../prog/ch02_01.htm">Chapter 2</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch08_01.htm" title="8.0. Introduction"><img src="../gifs/txtpreva.gif" alt="Previous: 8.0. Introduction" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch08_03.htm" title="8.2. Counting Lines (or Paragraphs or Records) in a File"><img src="../gifs/txtnexta.gif" alt="Next: 8.2. Counting Lines (or Paragraphs or Records) in a File" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">8.0. Introduction</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">8.2. Counting Lines (or Paragraphs or Records) in a File</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
