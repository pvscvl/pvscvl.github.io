<html><head>
<title>Recipe 7.12. Flushing Output</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:37:02Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch07_01.htm" title="7. File Access"><link rel="prev" href="ch07_12.htm" title="7.11. Locking a File"><link rel="next" href="ch07_14.htm" title="7.13. Reading from Many Filehandles Without Blocking"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch07_12.htm" title="7.11. Locking a File"><img src="../gifs/txtpreva.gif" alt="Previous: 7.11. Locking a File" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch07_01.htm" title="7. File Access">Chapter 7<br>File Access</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch07_14.htm" title="7.13. Reading from Many Filehandles Without Blocking"><img src="../gifs/txtnexta.gif" alt="Next: 7.13. Reading from Many Filehandles Without Blocking" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch07-13576">7.12. Flushing Output</A
></H2
><div class="sect2"><h3 class="sect2"><a class="title" name="ch07-pgfId-1180">Problem<a class="indexterm" name="ch07-idx-1000009697-0"></A
><a class="indexterm" name="ch07-idx-1000009697-1"></A
><a class="indexterm" name="ch07-idx-1000009697-2"></A
><a class="indexterm" name="ch07-idx-1000009697-3"></A
><a class="indexterm" name="ch07-idx-1000009697-4"></A
></A
></H3
><p class="para">When printing to a filehandle, output doesn't appear immediately. This is a problem in CGI scripts running on some programmer-hostile web servers where, if the web server sees warnings from Perl before it sees the (buffered) output of your script, it sends the browser an uninformative <code class="literal">500</CODE
> <code class="literal">Server</CODE
> <code class="literal">Error</CODE
>. These buffering problems arise with concurrent access to files by multiple programs and when talking with devices or sockets.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch07-pgfId-1186">Solution</A
></H3
><p class="para">Disable buffering by setting the per-filehandle variable <code class="literal">$|</CODE
> to a true value, customarily <code class="literal">1</CODE
>:</P
><pre class="programlisting">$old_fh = select(OUTPUT_HANDLE);
$| = 1;
select($old_fh);</PRE
><p class="para">Or, if you don't mind the expense, disable it by calling the <code class="literal">autoflush</CODE
> method from the IO modules:</P
><pre class="programlisting">use IO::Handle;
OUTPUT_HANDLE-&gt;autoflush(1);</PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch07-pgfId-1204">Discussion</A
></H3
><p class="para">In most stdio implementations, buffering varies with the type of output device. Disk files are block buffered, often with a buffer size of more than 2K. Pipes and sockets are often buffered with a buffer size between <sup class="superscript">1</SUP
>/<sub class="subscript">2</SUB
> and 2K. Serial devices, including terminals, modems, mice, and joysticks, are normally line-buffered; stdio sends the entire line out only when it gets the newline.</P
><p class="para">Perl's <code class="literal">print</CODE
> function does not support truly unbuffered output &nbsp;-  a physical write for each individual character. Instead, it supports <em class="emphasis">command buffering</EM
>, in which one physical write is made after every separate output command. This isn't as hard on your system as no buffering at all, and it still gets the output where you want it, when you want it.</P
><p class="para"><a class="indexterm" name="ch07-idx-1000009711-0"></A
><a class="indexterm" name="ch07-idx-1000009711-1"></A
><a class="indexterm" name="ch07-idx-1000009711-2"></A
>Control output buffering through the <code class="literal">$|</CODE
><a class="indexterm" name="ch07-idx-1000009715-0"></A
> special variable. Enable command buffering by setting it to a true value. It has no effect upon input; see Recipes <a class="xref" href="ch15_07.htm" title="Reading from the Keyboard">Recipe 15.6</A
> and <a class="xref" href="ch15_09.htm" title="Using POSIX termios">Recipe 15.8</A
> for unbuffered input. Set this variable to a false value to use default stdio buffering. <a class="xref" href="#ch07-30274" title="seeme">Example 7.6</A
> illustrates the difference.</P
><div class="example"><h4 class="example"><a class="title" name="ch07-30274">Example 7.6: seeme</A
></H4
><pre class="programlisting">#!/usr/bin/perl -w
# <a class="indexterm" name="ch07-idx-1000009836-0"></A
>seeme - demo stdio output buffering
$| = (@ARGV &gt; 0);      # command buffered if arguments given
print &quot;Now you don't see it...&quot;;
sleep 2;
print &quot;now you do\n&quot;;</PRE
></DIV
><p class="para">If you call this program with no arguments, STDOUT is not command buffered. Your terminal (console, window, telnet session, whatever) doesn't receive output until the entire line is completed, so you see nothing for two seconds and then get the full line <code class="literal">&quot;Now</CODE
> <code class="literal">you</CODE
> <code class="literal">don't</CODE
> <code class="literal">see</CODE
> <code class="literal">it</CODE
> <code class="literal">...</CODE
> <code class="literal">now</CODE
> <code class="literal">you</CODE
> <code class="literal">do&quot;</CODE
>. If you call the program with at least one argument, STDOUT is command buffered. That means you first see <code class="literal">&quot;Now</CODE
> <code class="literal">you</CODE
> <code class="literal">don't</CODE
> <code class="literal">see</CODE
> <code class="literal">it...&quot;</CODE
>, and then after two seconds you finally see <code class="literal">&quot;now</CODE
> <code class="literal">you</CODE
> <code class="literal">do&quot;</CODE
>.</P
><p class="para">The dubious quest for increasingly compact code has led programmers to use the return value of <code class="literal">select</CODE
>, the filehandle that <em class="emphasis">was</EM
> currently selected, as part of the second <code class="literal">select</CODE
>:</P
><pre class="programlisting">    select((select(OUTPUT_HANDLE), $| = 1)[0]);</PRE
><p class="para">There's another way. The FileHandle and IO modules provide a class method called <code class="literal">autoflush</CODE
>. Call it with true or false values (the default value is true) to control autoflushing on a particular output handle:</P
><pre class="programlisting">use FileHandle;

STDERR-&gt;autoflush;          # already unbuffered in stdio
$filehandle-&gt;autoflush(0);</PRE
><p class="para">If you're willing to accept the oddities of indirect object notation covered in <a class="xref" href="ch13_01.htm" title="Classes, Objects, and Ties">Chapter 13, <cite class="chapter">Classes, Objects, and Ties</CITE
></A
>, you can even write something reasonably close to English:</P
><pre class="programlisting">use IO::Handle;
# assume REMOTE_CONN is an interactive socket handle,
# but DISK_FILE is a handle to a regular file.
autoflush REMOTE_CONN  1;           # unbuffer for clarity
autoflush DISK_FILE    0;           # buffer this for speed</PRE
><p class="para">This avoids the bizarre <code class="literal">select</CODE
> business, and makes your code much more readable. Unfortunately, your program takes longer to compile because you're now including the IO::Handle module, so thousands and thousands of lines must first be read and compiled. Learn to manipulate <code class="literal">$|</CODE
> directly, and you'll be happy.</P
><p class="para">To ensure that your output gets where you want it, when you want it, buffer flushing is important. It's particularly important with sockets, pipes, and devices, because you may be trying to do interactive I/O with these&nbsp;- more so, in fact, because you can't assume line-buffering. Consider the program in <a class="xref" href="#ch07-18422" title="getpcomidx">Example 7.7</A
>.</P
><div class="example"><h4 class="example"><a class="title" name="ch07-18422">Example 7.7: getpcomidx</A
></H4
><pre class="programlisting">#!/usr/bin/perl
# <a class="indexterm" name="ch07-idx-1000009840-0"></A
>getpcomidx - fetch www.perl.com's index.html document
use IO::Socket;
$sock = new IO::Socket::INET (PeerAddr =&gt; 'www.perl.com',
                              PeerPort =&gt; 'http(80)');
die &quot;Couldn't create socket: $@&quot; unless $sock;
# the library doesn't support $! setting; it uses $@

$sock-&gt;autoflush(1);

# Mac *must* have \015\012\015\012 instead of \n\n here.
# It's a good idea for others, too, as that's the spec,
# but implementations are encouraged to accept &quot;\cJ\cJ&quot; too,
# and as far as we've seen, they do.
$sock-&gt;print(&quot;GET /index.html http/1.1\n\n&quot;);
$document = join('', $sock-&gt;getlines());
print &quot;DOC IS: $document\n&quot;;</PRE
></DIV
><p class="para">There's no way to control input buffering using any kind of flushing discussed so far. For that, you need to see Recipes <a class="xref" href="ch15_07.htm" title="Reading from the Keyboard">Recipe 15.6</A
> and <a class="xref" href="ch15_09.htm" title="Using POSIX termios">Recipe 15.8</A
>.<a class="indexterm" name="ch07-idx-1000009699-0"></A
><a class="indexterm" name="ch07-idx-1000009699-1"></A
><a class="indexterm" name="ch07-idx-1000009699-2"></A
><a class="indexterm" name="ch07-idx-1000009699-3"></A
><a class="indexterm" name="ch07-idx-1000009699-4"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch07-pgfId-1000011126">See Also</A
></H3
><p class="para">The <code class="literal">$|</CODE
> entry in <i class="filename">perlvar  </I
>(1), and in the <a class="olink" href="../prog/ch02_09.htm#PERL2-CH-2-SECT-9.4">"Special Variables"</A
> section of <a class="olink" href="../prog/ch02_01.htm">Chapter 2</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
>; the documentation for the standard FileHandle and IO::Handle modules (also in <a class="olink" href="../prog/ch07_01.htm">Chapter 7</A
> of <cite class="citetitle">Programming Perl </CITE
>); the <code class="literal">select</CODE
> function in <i class="filename">perlfunc </I
>(1) and in <a class="olink" href="../prog/ch03_01.htm">Chapter 3</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch07_12.htm" title="7.11. Locking a File"><img src="../gifs/txtpreva.gif" alt="Previous: 7.11. Locking a File" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch07_14.htm" title="7.13. Reading from Many Filehandles Without Blocking"><img src="../gifs/txtnexta.gif" alt="Next: 7.13. Reading from Many Filehandles Without Blocking" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">7.11. Locking a File</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">7.13. Reading from Many Filehandles Without Blocking</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
