<html><head>
<title>Recipe 1.10. Interpolating Functions and Expressions Within Strings</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:29:08Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch01_01.htm" title="1. Strings"><link rel="prev" href="ch01_10.htm" title="1.9. Controlling Case"><link rel="next" href="ch01_12.htm" title="1.11. Indenting Here Documents"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch01_10.htm" title="1.9. Controlling Case"><img src="../gifs/txtpreva.gif" alt="Previous: 1.9. Controlling Case" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch01_01.htm" title="1. Strings">Chapter 1<br>Strings</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch01_12.htm" title="1.11. Indenting Here Documents"><img src="../gifs/txtnexta.gif" alt="Next: 1.11. Indenting Here Documents" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch01-40187">1.10. Interpolating Functions and Expressions Within Strings</A
></H2
><div class="sect2"><h3 class="sect2"><a class="title" name="ch01-pgfId-1067">Problem <a class="indexterm" name="ch01-idx-1000010279-0"></A
><a class="indexterm" name="ch01-idx-1000010279-1"></A
><a class="indexterm" name="ch01-idx-1000010279-2"></A
></A
></H3
><p class="para">You want a function call or expression to expand within a string. This lets you construct more complex templates than with simple scalar variable interpolation.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch01-pgfId-1073">Solution</A
></H3
><p class="para">You can break up your expression into distinct concatenated pieces:</P
><pre class="programlisting">$answer = $var1 . func() . $var2;   # scalar only</PRE
><p class="para">Or you can use the slightly sneaky <code class="literal">@{[</CODE
> <code class="literal">LIST</CODE
> <code class="literal">EXPR</CODE
> <code class="literal">]}</CODE
> or <code class="literal">${</CODE
> <code class="literal">\(SCALAR</CODE
> <code class="literal">EXPR</CODE
> <code class="literal">)</CODE
> <code class="literal">}</CODE
> expansions:</P
><pre class="programlisting">$answer = &quot;STRING @{[ LIST EXPR ]} MORE STRING&quot;;
$answer = &quot;STRING ${\( SCALAR EXPR )} MORE STRING&quot;;</PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch01-pgfId-1087">Discussion</A
></H3
><p class="para">This code shows both techniques. The first line shows concatenation; the second shows the expansion trick:</P
><pre class="programlisting">$phrase = &quot;I have &quot; . ($n + 1) . &quot; guanacos.&quot;;
$phrase = &quot;I have ${\($n + 1)} guanacos.&quot;;</PRE
><p class="para">The first technique builds the final string by concatenating smaller strings, avoiding interpolation but achieving the same end. Because <code class="literal">print</CODE
> effectively concatenates its entire argument list, if we were going to <code class="literal">print</CODE
> <code class="literal">$phrase</CODE
>, we could have just said:</P
><pre class="programlisting">print &quot;I have &quot;,  $n + 1, &quot; guanacos.\n&quot;;</PRE
><p class="para">When you absolutely must have interpolation, you need the punctuation-riddled interpolation from the Solution. Only <code class="literal">@</CODE
>, <code class="literal">$</CODE
>, and <code class="literal">\</CODE
> are special within double quotes and most backquotes. (As with <code class="literal">m//</CODE
> and <code class="literal">s///</CODE
>, the <code class="literal">qx()</CODE
> synonym is not subject to double-quote expansion if its delimiter is single quotes! <code class="literal">$home</CODE
> <code class="literal">=</CODE
> <code class="literal">qx'echo</CODE
> <code class="literal">home</CODE
> <code class="literal">is</CODE
> <code class="literal">$HOME';</CODE
> would get the shell <code class="literal">$HOME</CODE
> variable, not one in Perl.) So, the only way to force arbitrary expressions to expand is by expanding a <code class="literal">${}</CODE
> or <code class="literal">@{}</CODE
> whose block contains a reference.</P
><p class="para">You can do more than simply assign to a variable after interpolation. It's a general mechanism that can be used in any double-quoted string. For instance, this example will build a string with an interpolated expression and pass the result to a function:</P
><pre class="programlisting">some_func(&quot;What you want is @{[ split /:/, $rec ]} items&quot;);</PRE
><p class="para">You can interpolate into a here document, as by:</P
><pre class="programlisting">die &quot;Couldn't send mail&quot; unless send_mail(&lt;&lt;&quot;EOTEXT&quot;, $target);
To: $naughty
From: Your Bank
Cc: @{ get_manager_list($naughty) }
Date: @{[ do { my $now = `date`; chomp $now; $now } ]} (today)

Dear $naughty,

Today, you bounced check number @{[ 500 + int rand(100) ]} to us.
Your account is now closed.

Sincerely,
the management
EOTEXT</PRE
><p class="para">Expanding <a class="indexterm" name="ch01-idx-1000010285-0"></A
><a class="indexterm" name="ch01-idx-1000010285-1"></A
>backquotes (<code class="literal">``</CODE
>) is particularly challenging because you would normally end up with spurious newlines. By creating a braced block following the <code class="literal">@</CODE
> within the <code class="literal">@{[]}</CODE
> anonymous array dereference, as we did in the last example, you can create private variables.</P
><p class="para">Although these techniques work, simply breaking your work up into several steps or storing everything in temporary variables is almost always clearer to the reader.</P
><p class="para">In version 5.004 of Perl, <code class="literal">${\</CODE
> <code class="literal">EXPR</CODE
> <code class="literal">}</CODE
> wrongly evaluates <code class="literal">EXPR</CODE
> in list instead of scalar context. This bug is fixed in version 5.005.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch01-pgfId-1143">See Also</A
></H3
><p class="para"><em class="emphasis">perlref </EM
>(1) and the <a class="olink" href="../prog/ch04_03.htm#PERL2-CH-4-SECT-3.5">"Other Tricks You Can Do with Hard References"</A
> section of <a class="olink" href="../prog/ch04_01.htm">Chapter 4</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
><a class="indexterm" name="ch01-idx-1000010281-0"></A
><a class="indexterm" name="ch01-idx-1000010281-1"></A
><a class="indexterm" name="ch01-idx-1000010281-2"></A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch01_10.htm" title="1.9. Controlling Case"><img src="../gifs/txtpreva.gif" alt="Previous: 1.9. Controlling Case" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch01_12.htm" title="1.11. Indenting Here Documents"><img src="../gifs/txtnexta.gif" alt="Next: 1.11. Indenting Here Documents" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">1.9. Controlling Case</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">1.11. Indenting Here Documents</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
