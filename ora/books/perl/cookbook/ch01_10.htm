<html><head>
<title>Recipe 1.9. Controlling Case</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:29:06Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch01_01.htm" title="1. Strings"><link rel="prev" href="ch01_09.htm" title="1.8. Expanding Variables in User Input"><link rel="next" href="ch01_11.htm" title="1.10. Interpolating Functions and Expressions Within Strings"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch01_09.htm" title="1.8. Expanding Variables in User Input"><img src="../gifs/txtpreva.gif" alt="Previous: 1.8. Expanding Variables in User Input" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch01_01.htm" title="1. Strings">Chapter 1<br>Strings</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch01_11.htm" title="1.10. Interpolating Functions and Expressions Within Strings"><img src="../gifs/txtnexta.gif" alt="Next: 1.10. Interpolating Functions and Expressions Within Strings" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch01-32726">1.9. Controlling Case</A
></H2
><div class="sect2"><h3 class="sect2"><a class="title" name="ch01-pgfId-929">Problem <a class="indexterm" name="ch01-idx-1000010257-0"></A
><a class="indexterm" name="ch01-idx-1000010257-1"></A
><a class="indexterm" name="ch01-idx-1000010257-2"></A
><a class="indexterm" name="ch01-idx-1000010257-3"></A
><a class="indexterm" name="ch01-idx-1000010257-4"></A
><a class="indexterm" name="ch01-idx-1000010257-5"></A
><a class="indexterm" name="ch01-idx-1000010257-6"></A
></A
></H3
><p class="para">A string in uppercase needs converting to lowercase, or vice versa.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch01-pgfId-935">Solution</A
></H3
><p class="para">Use the <code class="literal">lc</CODE
><a class="indexterm" name="ch01-idx-1000010267-0"></A
><a class="indexterm" name="ch01-idx-1000010267-1"></A
> and <code class="literal">uc</CODE
> functions or the <code class="literal">\L</CODE
> and <code class="literal">\U</CODE
><a class="indexterm" name="ch01-idx-1000010272-0"></A
><a class="indexterm" name="ch01-idx-1000010272-1"></A
> string escapes.</P
><pre class="programlisting">use locale;                     # needed in 5.004 or above

$big = uc($little);             # &quot;bo peep&quot; -&gt; &quot;BO PEEP&quot;
$little = lc($big);             # &quot;JOHN&quot;    -&gt; &quot;john&quot;
$big = &quot;\U$little&quot;;             # &quot;bo peep&quot; -&gt; &quot;BO PEEP&quot;
$little = &quot;\L$big&quot;;             # &quot;JOHN&quot;    -&gt; &quot;john&quot;</PRE
><p class="para">To alter just one character, use the <code class="literal">lcfirst</CODE
><a class="indexterm" name="ch01-idx-1000010268-0"></A
><a class="indexterm" name="ch01-idx-1000010268-1"></A
><a class="indexterm" name="ch01-idx-1000010268-2"></A
><a class="indexterm" name="ch01-idx-1000010268-3"></A
> and <code class="literal">ucfirst</CODE
> functions or the <code class="literal">\l</CODE
> and <code class="literal">\u</CODE
> string escapes.</P
><pre class="programlisting">$big = &quot;\u$little&quot;;             # &quot;bo&quot;      -&gt; &quot;Bo&quot;
$little = &quot;\l$big&quot;;             # &quot;BoPeep&quot;    -&gt; &quot;boPeep&quot; </PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch01-pgfId-955">Discussion</A
></H3
><p class="para">The functions and string escapes look different, but both do the same thing. You can set the case of either the first character or the whole string. You can even do both at once to force uppercase on initial characters and lowercase on the rest.</P
><p class="para">The <code class="literal">use</CODE
><a class="indexterm" name="ch01-idx-1000010269-0"></A
> <code class="literal">locale</CODE
> directive tells Perl's case-conversion functions and pattern matching engine to respect your language environment, allowing for characters with diacritical marks, and so on. A common mistake is to use <code class="literal">tr///</CODE
><a class="indexterm" name="ch01-idx-1000010270-0"></A
> to convert case. (We're aware that the old Camel book recommended <code class="literal">tr/A-Z/a-z/</CODE
>. In our defense, that was the only way to do it back then.) This won't work in all situations because when you say <code class="literal">tr/A-Z/a-z/</CODE
> you have omitted all characters with umlauts, accent marks, cedillas, and other diacritics used in dozens of languages, including English. The <code class="literal">uc</CODE
> and <code class="literal">\U</CODE
> case-changing commands understand these characters and convert them properly, at least when you've said <code class="literal">use</CODE
> <code class="literal">locale</CODE
>. (An exception is that in German, the uppercase form of <code class="literal">ñ</CODE
> is <code class="literal">SS</CODE
>, but it's not in Perl.)</P
><pre class="programlisting">use locale;                     # needed in 5.004 or above

$beast   = &quot;dromedary&quot;;
# capitalize various parts of $beast
$capit   = ucfirst($beast);         # Dromedary
$capit   = &quot;\u\L$beast&quot;;            # (same)
$capall  = uc($beast);              # DROMEDARY
$capall  = &quot;\U$beast&quot;;              # (same)
$caprest = lcfirst(uc($beast));     # dROMEDARY
$caprest = &quot;\l\U$beast&quot;;            # (same)<a class="indexterm" name="ch01-idx-1000010278-0"></A
><a class="indexterm" name="ch01-idx-1000010278-1"></A
><a class="indexterm" name="ch01-idx-1000010278-2"></A
><a class="indexterm" name="ch01-idx-1000010278-3"></A
></PRE
><p class="para">These capitalization changing escapes are commonly used to make the case in a string consistent:</P
><pre class="programlisting"># capitalize each word's first character, downcase the rest
$text = &quot;thIS is a loNG liNE&quot;;
$text =~ s/(\w+)/\u\L$1/g;
print $text;
<code class="userinput"><b><code class="replaceable"><i>This Is A Long Line</I
></CODE
></B
></CODE
></PRE
><p class="para">You can also use their functional forms to do case-insensitive comparison:</P
><pre class="programlisting">if (uc($a) eq uc($b)) {
    print &quot;a and b are the same\n&quot;;
}</PRE
><p class="para">The <em class="emphasis">randcap</EM
> program, shown in <a class="xref" href="#ch01-31214" title="randcap">Example 1.2</A
>, randomly capitalizes 20 percent of the letters of its input. This lets you converse with 14-year-old WaREz d00Dz.</P
><div class="example"><h4 class="example"><a class="title" name="ch01-31214">Example 1.2: randcap</A
></H4
><pre class="programlisting">#!/usr/bin/perl -p
# <a class="indexterm" name="ch01-idx-1000010666-0"></A
>randcap: filter to randomly capitalize 20% of the letters
# call to srand() is unnecessary in 5.004
BEGIN { srand(time() ^ ($$ + ($$ &lt;&lt; 15))) }
sub randcase { rand(100) &lt; 20 ? &quot;\u$_[0]&quot; : &quot;\l$_[0]&quot; }
s/(\w)/randcase($1)/ge;

% randcap &lt; genesis | head -9
<code class="userinput"><b><code class="replaceable"><i>boOk 01 genesis</I
></CODE
></B
></CODE
>

<code class="userinput"><b><code class="replaceable"><i>001:001 in the BEginning goD created the heaven and tHe earTh.</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>    </I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>001:002 and the earth wAS without ForM, aND void; AnD darkneSS was</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>        upon The Face of the dEEp. and the spIrit of GOd movEd upOn</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>        tHe face of the Waters.</I
></CODE
></B
></CODE
>

<code class="userinput"><b><code class="replaceable"><i>001:003 and god Said, let there be ligHt: and therE wAs LigHt.</I
></CODE
></B
></CODE
><code class="literal"></CODE
><a class="indexterm" name="ch01-idx-1000010274-0"></A
><a class="indexterm" name="ch01-idx-1000010274-1"></A
><a class="indexterm" name="ch01-idx-1000010274-2"></A
><a class="indexterm" name="ch01-idx-1000010274-3"></A
></PRE
></DIV
><p class="para">A more interesting approach would have been to take advantage of Perl's ability to use <a class="indexterm" name="ch01-idx-1000010699-0"></A
>bitwise operators on strings:</P
><pre class="programlisting">sub randcase {
    rand(100) &lt; 20 ? (&quot;\040&quot; ^ $1) : $1
}</PRE
><p class="para">That would, in 20 percent of the cases, switch the case of the letter. However, this misbehaves on 8-bit characters. The original <em class="emphasis">randcase</EM
> program had the same problem, but appying <code class="literal">use</CODE
> <code class="literal">locale</CODE
> would have easily fixed it.</P
><p class="para">This example of bitwise string operations quickly strips off all the high bits on a string:</P
><pre class="programlisting">$string &amp;= &quot;\177&quot; x length($string);</PRE
><p class="para">Again, they'll be talking about you all over Europe, and not in the most glowing of terms, if you force all strings to seven bits.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch01-pgfId-1057">See Also</A
></H3
><p class="para">The <code class="literal">uc</CODE
>, <code class="literal">lc</CODE
>, <code class="literal">ucfirst</CODE
>, and <code class="literal">lcfirst</CODE
> functions in <em class="emphasis">perlfunc </EM
>(1) and <a class="olink" href="../prog/ch03_01.htm">Chapter 3</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
>; the <code class="literal">\L</CODE
>, <code class="literal">\U</CODE
>, <code class="literal">\l</CODE
>, and <code class="literal">\u</CODE
> string escapes in the "Quote and Quote-like Operators" section of <em class="emphasis">perlop </EM
>(1) and <a class="olink" href="../prog/ch02_01.htm">Chapter 2</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
><a class="indexterm" name="ch01-idx-1000010259-0"></A
><a class="indexterm" name="ch01-idx-1000010259-1"></A
><a class="indexterm" name="ch01-idx-1000010259-2"></A
><a class="indexterm" name="ch01-idx-1000010259-3"></A
><a class="indexterm" name="ch01-idx-1000010259-4"></A
><a class="indexterm" name="ch01-idx-1000010259-5"></A
><a class="indexterm" name="ch01-idx-1000010259-6"></A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch01_09.htm" title="1.8. Expanding Variables in User Input"><img src="../gifs/txtpreva.gif" alt="Previous: 1.8. Expanding Variables in User Input" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch01_11.htm" title="1.10. Interpolating Functions and Expressions Within Strings"><img src="../gifs/txtnexta.gif" alt="Next: 1.10. Interpolating Functions and Expressions Within Strings" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">1.8. Expanding Variables in User Input</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">1.10. Interpolating Functions and Expressions Within Strings</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
