<html><head>
<title>Recipe 11.6. Creating Arrays of Scalar References</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:40:36Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch11_01.htm" title="11. References and Records"><link rel="prev" href="ch11_06.htm" title="11.5. Taking References to Scalars"><link rel="next" href="ch11_08.htm" title="11.7. Using Closures Instead of Objects"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch11_06.htm" title="11.5. Taking References to Scalars"><img src="../gifs/txtpreva.gif" alt="Previous: 11.5. Taking References to Scalars" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch11_01.htm" title="11. References and Records">Chapter 11<br>References and Records</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch11_08.htm" title="11.7. Using Closures Instead of Objects"><img src="../gifs/txtnexta.gif" alt="Next: 11.7. Using Closures Instead of Objects" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch11-chap11_creating_0">11.6. Creating Arrays of Scalar References</A
></H2
><div class="sect2"><h3 class="sect2"><a class="title" name="ch11-pgfId-716">Problem<a class="indexterm" name="ch11-idx-1000004825-0"></A
><a class="indexterm" name="ch11-idx-1000004825-1"></A
><a class="indexterm" name="ch11-idx-1000004825-2"></A
></A
></H3
><p class="para">You want to create and manipulate an array of references to scalars. This arises when you pass variables by reference to a function to let the function change their values.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch11-pgfId-722">Solution</A
></H3
><p class="para">To create an array, either backslash each scalar in the list to store in the array:</P
><pre class="programlisting">@array_of_scalar_refs = ( \$a, \$b );</PRE
><p class="para">or simply backslash the entire list, taking advantage of the backslash operator's distributive property:</P
><pre class="programlisting">@array_of_scalar_refs = \( $a, $b );</PRE
><p class="para">To get or set the value of an element of the list, use <code class="literal">${</CODE
> <code class="literal">...</CODE
> <code class="literal">}</CODE
>:</P
><pre class="programlisting">${ $array_of_scalar_refs[1] } = 12;         # $b = 12</PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch11-pgfId-738">Discussion</A
></H3
><p class="para">In the following examples, <code class="literal">@array</CODE
> is a simple array containing references to scalars (an array of references is not a reference to an array). To access the original data indirectly, braces are critical.</P
><pre class="programlisting">($a, $b, $c, $d) = (1 .. 4);        # initialize
@array =  (\$a, \$b, \$c, \$d);     # refs to each scalar
@array = \( $a,  $b,  $c,  $d);     # same thing!
@array = map { \my $anon } 0 .. 3;  # allocate 4 anon scalarresf

${ $array[2] } += 9;                # $c now 12

${ $array[ $#array ] } *= 5;        # $d now 20
${ $array[-1] }        *= 5;        # same; $d now 100

$tmp   = $array[-1];                # using temporary
$$tmp *= 5;                         # $d now 500</PRE
><p class="para">The two assignments to <code class="literal">@array</CODE
> are equivalent &nbsp;-  the backslash operator is distributive across a list. So preceding a list (not an array) with a backslash is the same as applying a backslash to everything in that list. The ensuing code changes the values of the variables whose references were stored in the array.</P
><p class="para">Here's how to deal with such an array without explicit indexing.</P
><pre class="programlisting">use Math::Trig qw(pi);              # load the constant pi
foreach $sref (@array) {            # prepare to change $a,$b,$c,$d
    ($$sref **= 3) *= (4/3 * pi);   # replace with spherical volumes
}</PRE
><p class="para">This code uses the formula for deriving the volume of a sphere:</P
><img class="graphic" src="figs/eqn11_01.gif" alt="Equation 11.1"><p class="para">The <code class="literal">$sref</CODE
> loop index variable is each reference in <code class="literal">@array</CODE
>, and <code class="literal">$$sref</CODE
> is the number itself, that is, the original variables <code class="literal">$a</CODE
>, <code class="literal">$b</CODE
>, <code class="literal">$c</CODE
>, and <code class="literal">$d</CODE
>. Changing <code class="literal">$$sref</CODE
> in the loop changes those variables as well. First we replace <code class="literal">$$sref</CODE
> with its cube, then multiply the resulting value by 4/3 <img src="../chars/pi.gif" alt="[pi]">. This takes advantage of the fact that assignment in Perl returns an lvalue, letting you chain assignment operators together as we've done using the <code class="literal">**=</CODE
> and <code class="literal">*=</CODE
> assignment operators.</P
><p class="para">Actually, anonymous scalars are pretty useless, given that a scalar value fits in the same space as a scalar reference. That's why there's no explicit composer. Scalar references exist only to allow aliasing &nbsp;-  which can be done in other ways.<a class="indexterm" name="ch11-idx-1000004827-0"></A
><a class="indexterm" name="ch11-idx-1000004827-1"></A
><a class="indexterm" name="ch11-idx-1000004827-2"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch11-pgfId-788">See Also</A
></H3
><p class="para">The section on <a class="olink" href="../prog/ch02_05.htm#PERL2-CH-2-SECT-5.10">"Assignment Operators"</A
> in <a class="olink" href="../prog/ch02_01.htm">Chapter 2</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
> and in <i class="filename">perlop </I
>(1)</P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch11_06.htm" title="11.5. Taking References to Scalars"><img src="../gifs/txtpreva.gif" alt="Previous: 11.5. Taking References to Scalars" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch11_08.htm" title="11.7. Using Closures Instead of Objects"><img src="../gifs/txtnexta.gif" alt="Next: 11.7. Using Closures Instead of Objects" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">11.5. Taking References to Scalars</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">11.7. Using Closures Instead of Objects</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
