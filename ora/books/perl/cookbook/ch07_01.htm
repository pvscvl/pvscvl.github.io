<html><head>
<title>[Chapter 7] File Access</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:35:15Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="index.htm" title="Perl Cookbook"><link rel="prev" href="ch06_24.htm" title="6.23. Regular Expression Grabbag"><link rel="next" href="ch07_02.htm" title="7.1. Opening a File"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch06_24.htm" title="6.23. Regular Expression Grabbag"><img src="../gifs/txtpreva.gif" alt="Previous: 6.23. Regular Expression Grabbag" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 7</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch07_02.htm" title="7.1. Opening a File"><img src="../gifs/txtnexta.gif" alt="Next: 7.1. Opening a File" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="chapter"><h1 class="chapter"><a class="title" name="ch07-24448">7. File Access</A
></H1
><div class="htmltoc"><p><b>Contents:</B
><br><a class="sect1" href="#ch07-36590" title="7.0. Introduction">Introduction</A
><br><a class="sect1" href="ch07_02.htm" title="7.1. Opening a File">Opening a File</A
><br><a class="sect1" href="ch07_03.htm" title="7.2. Opening Files with Unusual Filenames">Opening Files with Unusual Filenames</A
><br><a class="sect1" href="ch07_04.htm" title="7.3. Expanding Tildes in Filenames">Expanding Tildes in Filenames</A
><br><a class="sect1" href="ch07_05.htm" title="7.4. Making Perl Report Filenames in Errors">Making Perl Report Filenames in Errors</A
><br><a class="sect1" href="ch07_06.htm" title="7.5. Creating Temporary Files">Creating Temporary Files</A
><br><a class="sect1" href="ch07_07.htm" title="7.6. Storing Files Inside Your Program Text">Storing Files Inside Your Program Text</A
><br><a class="sect1" href="ch07_08.htm" title="7.7. Writing a Filter">Writing a Filter</A
><br><a class="sect1" href="ch07_09.htm" title="7.8. Modifying a File in Place with Temporary File">Modifying a File in Place with Temporary File</A
><br><a class="sect1" href="ch07_10.htm" title="7.9. Modifying a File in Place with -i Switch">Modifying a File in Place with -i Switch</A
><br><a class="sect1" href="ch07_11.htm" title="7.10. Modifying a File in Place Without a Temporary File">Modifying a File in Place Without a Temporary File</A
><br><a class="sect1" href="ch07_12.htm" title="7.11. Locking a File">Locking a File</A
><br><a class="sect1" href="ch07_13.htm" title="7.12. Flushing Output">Flushing Output</A
><br><a class="sect1" href="ch07_14.htm" title="7.13. Reading from Many Filehandles Without Blocking">Reading from Many Filehandles Without Blocking</A
><br><a class="sect1" href="ch07_15.htm" title="7.14. Doing Non-Blocking I/O">Doing Non-Blocking I/O</A
><br><a class="sect1" href="ch07_16.htm" title="7.15. Determining the Number of Bytes to Read">Determining the Number of Bytes to Read</A
><br><a class="sect1" href="ch07_17.htm" title="7.16. Storing Filehandles in Variables">Storing Filehandles in Variables</A
><br><a class="sect1" href="ch07_18.htm" title="7.17. Caching Open Output Filehandles">Caching Open Output Filehandles</A
><br><a class="sect1" href="ch07_19.htm" title="7.18. Printing to Many Filehandles Simultaneously">Printing to Many Filehandles Simultaneously</A
><br><a class="sect1" href="ch07_20.htm" title="7.19. Opening and Closing File Descriptors by Number">Opening and Closing File Descriptors by Number</A
><br><a class="sect1" href="ch07_21.htm" title="7.20. Copying Filehandles">Copying Filehandles</A
><br><a class="sect1" href="ch07_22.htm" title="7.21. Program: netlock">Program: netlock</A
><br><a class="sect1" href="ch07_23.htm" title="7.22. Program: lockarea">Program: lockarea</A
></P
><p></P
></DIV
><div class="epigraph" align="right"><p class="para" align="right"><i>I the heir of all the ages, in the foremost files of time.</I
></P
><p class="attribution" align="right">-&nbsp;Alfred, Lord Tennyson <cite class="citetitle">Locksley Hall</CITE
></P
></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch07-36590">7.0. Introduction</A
></H2
><p class="para"><a class="indexterm" name="ch07-idx-1000009548-0"></A
>Nothing is more central to data processing than the file. As with everything else in Perl, easy things are easy and hard things are possible. Common tasks (opening, reading data, writing data) use simple I/O functions and operators, whereas fancier functions do hard things like non-blocking I/O and file locking.</P
><p class="para">This chapter deals with the mechanics of file <em class="emphasis">access</EM
>: opening a file, telling subroutines which files to work with, locking files, and so on. <a class="xref" href="ch08_01.htm" title="File Contents">Chapter 8, <cite class="chapter">File Contents</CITE
></A
>, deals with techniques for working with the <em class="emphasis">contents</EM
> of a file: reading, writing, shuffling lines, and other operations you can do once you have access to the file.</P
><p class="para"><a class="indexterm" name="ch07-idx-1000009550-0"></A
>Here's Perl code for printing all lines in the file <em class="emphasis">/usr/local/widgets/data</EM
> that contain the word <code class="literal">&quot;blue&quot;</CODE
>:</P
><pre class="programlisting">open(INPUT, &quot;&lt; /usr/local/widgets/data&quot;)
    or die &quot;Couldn't open /usr/local/widgets/data for reading: $!\n&quot;;

while (&lt;INPUT&gt;) {
    print if /blue/;
}
close(INPUT);</PRE
><div class="sect2"><h3 class="sect2"><a class="title" name="ch07-chap07_getting_0">Getting a Handle on the File</A
></H3
><p class="para"><a class="indexterm" name="ch07-idx-1000009551-0"></A
>Central to Perl's file access is the <em class="emphasis">filehandle</EM
>, like INPUT in the preceding program. This is a symbol you use to represent the file when you read and write. Because filehandles aren't variables (they don't have a <code class="literal">$</CODE
>, <code class="literal">@</CODE
>, or <code class="literal">%</CODE
> type marker on their names &nbsp;-  but they are part of Perl's symbol table just as subroutines and variables are), storing filehandles in variables and passing them to subroutines won't always work. You should use the odd-looking <a class="indexterm" name="ch07-idx-1000009759-0"></A
><a class="indexterm" name="ch07-idx-1000009759-1"></A
><a class="indexterm" name="ch07-idx-1000009759-2"></A
><code class="literal">*FH</CODE
> notation, indicating a typeglob, the basic unit of Perl's symbol table:</P
><pre class="programlisting">$var = *STDIN;
mysub($var, *LOGFILE);</PRE
><p class="para">When you store filehandles in variables like this, you don't use them directly. They're called <em class="emphasis">indirect filehandles</EM
><a class="indexterm" name="ch07-idx-1000009552-0"></A
> because they indirectly refer to the real filehandle. Two modules, <a class="indexterm" name="ch07-idx-1000009553-0"></A
><a class="indexterm" name="ch07-idx-1000009553-1"></A
><a class="indexterm" name="ch07-idx-1000009553-2"></A
>IO::File (standard since 5.004) and FileHandle (standard since 5.000), can create anonymous filehandles.</P
><p class="para">When we use IO::File or IO::Handle in our examples, you could obtain identical results by using FileHandle instead, since it's now just a wrapper module.</P
><p class="para">Here's how we'd write the <code class="literal">&quot;blue&quot;</CODE
>-finding program with the IO::File module using purely object-oriented notation:</P
><pre class="programlisting">use IO::File;

$input = IO::File-&gt;new(&quot;&lt; /usr/local/widgets/data&quot;)
    or die &quot;Couldn't open /usr/local/widgets/data for reading: $!\n&quot;;

while (defined($line = $input-&gt;getline())) {
    chomp($line);
    STDOUT-&gt;print($line) if $line =~ /blue/;
}
$input-&gt;close();</PRE
><p class="para">As you see, it's much more readable to use filehandles directly. It's also a lot faster.</P
><p class="para">But here's a little secret for you: you can skip all that arrow and method-call business altogether. Unlike most objects, you don't actually <em class="emphasis">have</EM
> to use IO::File objects in an object-oriented way. They're essentially just anonymous filehandles, so you can use them anywhere you'd use a regular indirect filehandle. <a class="xref" href="ch07_17.htm" title="Storing Filehandles in Variables">Recipe 7.16</A
> covers these modules and the <code class="literal">*FH</CODE
> notation. We use both IO::File and symbolic filehandles in this chapter.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch07-chap07_standard_0">Standard FileHandles</A
></H3
><p class="para"><a class="indexterm" name="ch07-idx-1000009554-0"></A
><a class="indexterm" name="ch07-idx-1000009554-1"></A
><a class="indexterm" name="ch07-idx-1000009554-2"></A
><a class="indexterm" name="ch07-idx-1000009554-3"></A
>Every program starts out with three global filehandles already opened: STDIN, STDOUT, and STDERR. STDIN (<em class="emphasis">standard input</EM
>) is the default source of input, STDOUT (<em class="emphasis">standard output</EM
>) is the default destination for output, and STDERR (<em class="emphasis">standard error</EM
>) is the default place to send warnings and errors. For interactive programs, STDIN is the keyboard, STDOUT and STDERR are the screen:</P
><pre class="programlisting">while (&lt;STDIN&gt;) {                   # reads from STDIN
    unless (/\d/) {
        warn &quot;No digit found.\n&quot;;   # writes to STDERR
    }
    print &quot;Read: &quot;, $_;             # writes to STDOUT
}
END { close(STDOUT)                 or die &quot;couldn't close STDOUT: $!&quot; }</PRE
><p class="para">Filehandles live in packages. That way, two packages can have filehandles with the same name and be separate, just as they can with subroutines and variables. The <code class="literal">open</CODE
><a class="indexterm" name="ch07-idx-1000009564-0"></A
><a class="indexterm" name="ch07-idx-1000009564-1"></A
> function associates a filehandle with a file or program, after which you use that filehandle for I/O. When done, <code class="literal">close</CODE
> the filehandle to break the association.</P
><p class="para">Files are accessed at the operating system through numeric file descriptors. You can learn a filehandle's descriptor number using the <code class="literal">fileno</CODE
> function. Perl's filehandles are sufficient for most file operations, but <a class="xref" href="ch07_20.htm" title="Opening and Closing File Descriptors by Number">Recipe 7.19</A
> tells you how to deal with the situation where you're given an file descriptor and want to turn it into a filehandle you can use.<a class="indexterm" name="ch07-idx-1000009556-0"></A
><a class="indexterm" name="ch07-idx-1000009556-1"></A
><a class="indexterm" name="ch07-idx-1000009556-2"></A
><a class="indexterm" name="ch07-idx-1000009556-3"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch07-chap07_i_o_0">I/O Operations</A
></H3
><p class="para"><a class="indexterm" name="ch07-idx-1000009566-0"></A
>Perl's most common operations for file interaction are <code class="literal">open</CODE
>, <code class="literal">print</CODE
>, <code class="literal">&lt;FH&gt;</CODE
> to read a record, and <code class="literal">close</CODE
>. These are wrappers around routines from the C buffered input/output library called <em class="emphasis">stdio</EM
><a class="indexterm" name="ch07-idx-1000009565-0"></A
>. Perl's I/O functions are documented in <a class="olink" href="../prog/ch03_01.htm">Chapter 3</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
>, <i class="filename">perlfunc </I
>(1), and your system's <i class="filename">stdio </I
>(3S) manpages. The next chapter details I/O operations like &lt;&gt;, <code class="literal">print</CODE
>, <code class="literal">seek</CODE
>, and <code class="literal">tell</CODE
>.</P
><p class="para">The most important I/O function is <code class="literal">open</CODE
>. It takes two arguments, the filehandle and a string containing the filename and <a class="indexterm" name="ch07-idx-1000009573-0"></A
><a class="indexterm" name="ch07-idx-1000009573-1"></A
><a class="indexterm" name="ch07-idx-1000009573-2"></A
><a class="indexterm" name="ch07-idx-1000009573-3"></A
><a class="indexterm" name="ch07-idx-1000009573-4"></A
>access mode. To open <em class="emphasis">/tmp/log</EM
> for writing and to associate it with the filehandle <code class="literal">LOGFILE</CODE
>, say:</P
><pre class="programlisting">open(LOGFILE, &quot;&gt; /tmp/log&quot;)     or die &quot;Can't write /tmp/log: $!&quot;;</PRE
><p class="para">The three most common access modes are &lt; for reading, &gt; for overwriting, and &gt;&gt; for appending. The <code class="literal">open</CODE
> function is discussed in more detail in <a class="xref" href="ch07_02.htm" title="Opening a File">Recipe 7.1</A
>.</P
><p class="para">When opening a file or making virtually any other system call,[<a class="footnote" href="#ch07-pgfId-1000008479">1</A
>] checking the return value is indispensable. Not every <code class="literal">open</CODE
> succeeds; not every file is readable; not every piece of data you <code class="literal">print</CODE
> can reach its destination. Most programmers check <code class="literal">open</CODE
>, <code class="literal">seek</CODE
>, <code class="literal">tell</CODE
>, and <code class="literal">close</CODE
> in robust programs. You might also want to check other functions. The Perl documentation lists return values from all functions and operators. If a system call fails, it returns <code class="literal">undef</CODE
>, except for <code class="literal">wait</CODE
>, <code class="literal">waitpid </CODE
>, and <code class="literal">syscall</CODE
>, which return <code class="literal">-1</CODE
> on failure. The system error message or number is available in the <code class="literal">$!</CODE
> variable. This is often used in <code class="literal">die</CODE
> or <code class="literal">warn</CODE
> messages.</P
><blockquote class="footnote"><div class="footnote"><p class="para"><a class="footnote" name="ch07-pgfId-1000008479">[1]</A
> The term <em class="emphasis">system call</EM
> denotes a call into your operating system. It is unrelated to the C and Perl function that's actually named <code class="literal">system</CODE
>.</P
></DIV
></BLOCKQUOTE
><p class="para">To read a record in Perl, use the <a class="indexterm" name="ch07-idx-1000009574-0"></A
><a class="indexterm" name="ch07-idx-1000009574-1"></A
>circumfix operator <code class="literal">&lt;FILEHANDLE&gt;</CODE
>, whose behavior is also available through the <code class="literal">readline</CODE
> function. A record is normally a line, but you can change the record terminator, as detailed in <a class="xref" href="ch08_01.htm" title="File Contents">Chapter 8</A
>. If <code class="literal">FILEHANDLE</CODE
> is omitted, Perl opens and reads from the filenames in <code class="literal">@ARGV</CODE
> or from STDIN if there aren't any. Customary and curious uses of this are described in <a class="xref" href="ch07_08.htm" title="Writing a Filter">Recipe 7.7</A
>.</P
><p class="para">Abstractly, files are simply streams of bytes. Each filehandle has associated with it a number representing the current byte position in the file, returned by the <code class="literal">tell</CODE
> function and set by the <code class="literal">seek</CODE
> function. In <a class="xref" href="ch07_11.htm" title="Modifying a File in Place Without a Temporary File">Recipe 7.10</A
>, we rewrite a file without closing and reopening by using <code class="literal">seek</CODE
> to move back to the start, rewinding it.</P
><p class="para">When you no longer have use for a filehandle, <code class="literal">close</CODE
> it. The <code class="literal">close</CODE
> function takes a single filehandle and returns true if the filehandle could be successfully flushed and closed, false otherwise. You don't need to explicitly close every filehandle. When you open a filehandle that's already open, Perl implicitly closes it first. When your program exits, any open filehandles also get closed.</P
><p class="para">These implicit closes are for convenience, not stability, because they don't tell you whether the system call succeeded or failed. Not all closes succeed. Even a <code class="literal">close</CODE
> on a read-only file can fail. For instance, you could lose access to the device because of a network outage. It's even more important to check the <code class="literal">close</CODE
> if the file was opened for writing. Otherwise you wouldn't notice if the disk filled up.</P
><pre class="programlisting">close(FH)           or die &quot;FH didn't close: $!&quot;;</PRE
><p class="para">The prudent programmer even checks the <code class="literal">close</CODE
> on standard output stream at the program's end, in case STDOUT was redirected from the command line the output filesystem filled up. Admittedly, your run-time system should take care of this for you, but it doesn't. <a class="indexterm" name="ch07-idx-1000009572-0"></A
><a class="indexterm" name="ch07-idx-1000009572-1"></A
></P
><p class="para">Checking standard error, though, is probably of dubious value. After all, if STDERR fails to close, what are you planning to do about it?</P
><p class="para"><a class="indexterm" name="ch07-idx-1000009575-0"></A
>STDOUT is the default destination for output from the <code class="literal">print</CODE
>, <code class="literal">printf</CODE
>, and <code class="literal">write</CODE
> functions. Change this with <code class="literal">select</CODE
><a class="indexterm" name="ch07-idx-1000009576-0"></A
>, which takes the new default output filehandle and returns the previous one. The new output filehandle should have been opened before calling <code class="literal">select</CODE
>:</P
><pre class="programlisting">$old_fh = select(LOGFILE);                  # switch to LOGFILE for output
print &quot;Countdown initiated ...\n&quot;;
select($old_fh);                            # return to original output
print &quot;You have 30 seconds to reach minimum safety distance.\n&quot;;</PRE
><p class="para">Some of Perl's special variables change the behavior of the currently selected output filehandle. Most important is <code class="literal">$|</CODE
><a class="indexterm" name="ch07-idx-1000009577-0"></A
>, which controls output buffering for each filehandle. Buffering is explained in <a class="xref" href="ch07_13.htm" title="Flushing Output">Recipe 7.12</A
>.</P
><p class="para"><a class="indexterm" name="ch07-idx-1000009578-0"></A
><a class="indexterm" name="ch07-idx-1000009578-1"></A
><a class="indexterm" name="ch07-idx-1000009578-2"></A
>Perl provides functions for buffered and unbuffered input and output. Although there are some exceptions, you shouldn't mix calls to buffered and unbuffered I/O functions. The following table shows the two sets of functions you should not mix. Functions on a particular row are only loosely associated; for instance, <code class="literal">sysread</CODE
> doesn't have the same semantics as <code class="literal">&lt; &gt;</CODE
>, but they are on the same row because they both read input from a filehandle.</P
><table class="informaltable" border="1" cellpadding="3"><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1"><p class="para"><b class="emphasis.bold">Action</B
></P
></TH
><th class="entry" align="LEFT" rowspan="1" colspan="1"><p class="para">Buffered</P
></TH
><th class="entry" align="LEFT" rowspan="1" colspan="1"><p class="para">Unbuffered</P
></TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">opening</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">open,sysopen</CODE
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">sysopen </CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">closing</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">close</CODE
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">close </CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">input</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">&lt;FILE&gt;,readline</CODE
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">sysread </CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">output</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">print</CODE
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">syswrite </CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">repositioning</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">seek, tell</CODE
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">sysseek </CODE
></P
></TD
></TR
></TBODY
></TABLE
><p class="para">Repositioning is addressed in <a class="xref" href="ch08_01.htm" title="File Contents">Chapter 8</A
>, but we also use it in <a class="xref" href="ch07_11.htm" title="Modifying a File in Place Without a Temporary File">Recipe 7.10</A
>.<a class="indexterm" name="ch07-idx-1000009568-0"></A
></P
></DIV
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch06_24.htm" title="6.23. Regular Expression Grabbag"><img src="../gifs/txtpreva.gif" alt="Previous: 6.23. Regular Expression Grabbag" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch07_02.htm" title="7.1. Opening a File"><img src="../gifs/txtnexta.gif" alt="Next: 7.1. Opening a File" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">6.23. Regular Expression Grabbag</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">7.1. Opening a File</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
