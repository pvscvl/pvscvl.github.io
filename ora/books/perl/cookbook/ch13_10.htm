<html><head>
<title>Recipe 13.9. Writing an Inheritable Class</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:42:25Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch13_01.htm" title="13. Classes, Objects, and Ties"><link rel="prev" href="ch13_09.htm" title="13.8. Determining Subclass Membership"><link rel="next" href="ch13_11.htm" title="13.10. Accessing Overridden Methods"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch13_09.htm" title="13.8. Determining Subclass Membership"><img src="../gifs/txtpreva.gif" alt="Previous: 13.8. Determining Subclass Membership" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch13_01.htm" title="13. Classes, Objects, and Ties">Chapter 13<br>Classes, Objects, and Ties</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch13_11.htm" title="13.10. Accessing Overridden Methods"><img src="../gifs/txtnexta.gif" alt="Next: 13.10. Accessing Overridden Methods" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch13-23209">13.9. Writing an Inheritable Class</A
></H2
><div class="sect2"><h3 class="sect2"><a class="title" name="ch13-pgfId-1151">Problem<a class="indexterm" name="ch13-idx-1000004562-0"></A
><a class="indexterm" name="ch13-idx-1000004562-1"></A
></A
></H3
><p class="para">You're not sure whether you've designed your class robustly enough to be inherited.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch13-pgfId-1157">Solution</A
></H3
><p class="para">Use the "empty subclass test" on your class.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch13-pgfId-1163">Discussion</A
></H3
><p class="para">Imagine you've implemented a class called Person that supplies a constructor called <code class="literal">new</CODE
>, and methods like <code class="literal">age</CODE
> and <code class="literal">name</CODE
>. Here's the straightforward implementation:</P
><pre class="programlisting">package Person;
sub new {
    my $class = shift;
    my $self  = { };
    return bless $self, $class;
} 
sub name {
    my $self = shift;
    $self-&gt;{NAME} = shift if @_;
    return $self-&gt;{NAME};
} 
sub age {
    my $self = shift;
    $self-&gt;{AGE} = shift if @_;
    return $self-&gt;{AGE};
} </PRE
><p class="para">You might use the class in this way:</P
><pre class="programlisting">use Person;
my $dude = Person-&gt;<code class="literal">new()</CODE
>;
$dude-&gt;name(&quot;Jason&quot;);
$dude-&gt;age(23);
printf &quot;%s is age %d.\n&quot;, $dude-&gt;name, $dude-&gt;age;</PRE
><p class="para">Now, consider another class, the one called Employee:</P
><pre class="programlisting">package Employee;
use Person;
@ISA = (&quot;Person&quot;);
1;</PRE
><p class="para">There's not a lot to that one. All it's doing is loading in class Person and stating that Employee will inherit any needed methods from Person. Since Employee has no methods of its own, it will get all of its methods from Person. We rely upon an Employee to behave just like a Person.</P
><p class="para">Setting up an empty class like this is called the <em class="emphasis">empty base class test</EM
><a class="indexterm" name="ch13-idx-1000004570-0"></A
><a class="indexterm" name="ch13-idx-1000004570-1"></A
> ; that is, it creates a derived class that does nothing but inherit from a base class. If the original base class has been designed properly, then the new derived class can be used as a drop-in replacement for the old one. This means you should be able to change just the class name and everything will still work:</P
><pre class="programlisting">use Employee;
my $empl = Employee-&gt;<code class="literal">new()</CODE
>;
$empl-&gt;name(&quot;Jason&quot;);
$empl-&gt;age(23);
printf &quot;%s is age %d.\n&quot;, $empl-&gt;name, $empl-&gt;age;</PRE
><p class="para">By proper design, we mean using only the two-argument form of <code class="literal">bless</CODE
>, avoiding any direct access of class data, and exporting nothing. In the <code class="literal">Person::new()</CODE
> function defined above, we were careful to do these things. We use some package data in the constructor, but the reference to this is stored on the object itself. Other methods access package data via that reference, so we should be okay.</P
><p class="para"><a class="indexterm" name="ch13-idx-1000005301-0"></A
><a class="indexterm" name="ch13-idx-1000005301-1"></A
>Why did we say the <code class="literal">Person::new</CODE
> <em class="emphasis">function </EM
> &nbsp;-   is that not actually a method? A method is just a function that expects as its first argument a class name (package) or object (blessed reference). <code class="literal">Person::new</CODE
> is the function that the <code class="literal">Person-&gt;new</CODE
> method and the <code class="literal">Employee-&gt;new</CODE
> method both end up calling. Although a method call looks a lot like a function call, they aren't the same. If you treat them as the same, very soon you'll be left with nothing but broken programs. First, the actual underlying calling conventions are different: method calls get an extra argument. Second, function calls don't do inheritance, but methods do.</P
><table class="informaltable" border="1" cellpadding="3"><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1"><p class="para">Method Call</P
></TH
><th class="entry" align="LEFT" rowspan="1" colspan="1"><p class="para">Resulting Function Call</P
></TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">Person-&gt;new()</CODE
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">Person::new(&quot;Person&quot;)</CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">Employee-&gt;new()</CODE
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">Person::new(&quot;Employee&quot;)</CODE
></P
></TD
></TR
></TBODY
></TABLE
><p class="para">If you got in the habit of calling:</P
><pre class="programlisting">$him = Person::<code class="literal">new()</CODE
>;               # WRONG</PRE
><p class="para">you'd have a subtle problem, because the function wouldn't get an argument of "Person" as it is expecting, and so it couldn't bless into the passed-in class. Still worse, you'd probably want to try to call <code class="literal">Employee::new()</CODE
> also. But there is no such function! It's just an inherited method call.</P
><p class="para">So, don't use function calls when you mean to call a method.<a class="indexterm" name="ch13-idx-1000004572-0"></A
><a class="indexterm" name="ch13-idx-1000004572-1"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch13-pgfId-1257">See Also</A
></H3
><p class="para"><i class="filename">perltoot </I
>(1), <i class="filename">perlobj </I
>(1), and <i class="filename">perlbot </I
>(1); <a class="olink" href="../prog/ch05_01.htm">Chapter 5</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
>; <a class="xref" href="ch13_02.htm" title="Constructing an Object">Recipe 13.1</A
>; <a class="xref" href="ch13_11.htm" title="Accessing Overridden Methods">Recipe 13.10</A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch13_09.htm" title="13.8. Determining Subclass Membership"><img src="../gifs/txtpreva.gif" alt="Previous: 13.8. Determining Subclass Membership" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch13_11.htm" title="13.10. Accessing Overridden Methods"><img src="../gifs/txtnexta.gif" alt="Next: 13.10. Accessing Overridden Methods" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">13.8. Determining Subclass Membership</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">13.10. Accessing Overridden Methods</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
