<html><head>
<title>Recipe 7.22. Program: lockarea</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:37:48Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch07_01.htm" title="7. File Access"><link rel="prev" href="ch07_22.htm" title="7.21. Program: netlock"><link rel="next" href="ch08_01.htm" title="8. File Contents"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch07_22.htm" title="7.21. Program: netlock"><img src="../gifs/txtpreva.gif" alt="Previous: 7.21. Program: netlock" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch07_01.htm" title="7. File Access">Chapter 7<br>File Access</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="chapter" href="ch08_01.htm" title="8. File Contents"><img src="../gifs/txtnexta.gif" alt="Next: 8. File Contents" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch07-18319">7.22. Program: lockarea</A
></H2
><p class="para"><a class="indexterm" name="ch07-idx-1000009810-0"></A
><a class="indexterm" name="ch07-idx-1000009810-1"></A
><a class="indexterm" name="ch07-idx-1000009810-2"></A
><a class="indexterm" name="ch07-idx-1000009810-3"></A
>Perl's <code class="literal">flock</CODE
> function only locks complete files, not regions of the file. Although <code class="literal">fcntl</CODE
> supports locking of a file's regions, this is difficult to access from Perl, largely because no one has written an XS module that portably packs up the necessary structure.</P
><p class="para">The program in <a class="xref" href="#ch07-39765" title="lockarea">Example 7.11</A
> implements <i class="filename">fcntl</I
>, but only for the three architectures it already knows about: SunOS, BSD, and Linux. If you're running something else, you'll have to figure out the layout of the <code class="literal">flock</CODE
> structure. We did this by eyeballing the C-language <em class="emphasis">sys/fcntl.h</EM
> <code class="literal">#include</CODE
> file &nbsp;-  and running the <em class="emphasis">c2ph</EM
> program to figure out alignment and typing. This program, while included with Perl, only works on systems with a strong Berkeley heritage, like those listed above. As with Unix &nbsp;-  or Perl itself &nbsp;-  you don't <em class="emphasis">have</EM
> to use <em class="emphasis">c2ph</EM
>, but it sure makes life easier if you can.</P
><p class="para">The <code class="literal">struct_flock</CODE
><a class="indexterm" name="ch07-idx-1000009816-0"></A
> function in the <em class="emphasis">lockarea</EM
> program packs and unpacks in the proper format for the current architectures by consulting the <code class="literal">$^O</CODE
> variable, which contains your current operating system name. There is no <code class="literal">struct_flock</CODE
> function declaration. It's just aliased to the architecture-specific version. Function aliasing is discussed in <a class="xref" href="ch10_15.htm" title="Redefining a Function">Recipe 10.14</A
>.</P
><p class="para">The <em class="emphasis">lockarea</EM
> program opens a temporary file, clobbering any existing contents and writing a screenful (80 by 23) of blanks. Each line is the same length.</P
><p class="para">The program then forks one or more times and lets all the child processes try to update the file at the same time. The first argument, <em class="emphasis">N</EM
>, is the number of times to fork to produce <code class="literal">2</CODE
> <code class="literal">**</CODE
> <code class="literal">N</CODE
> processes. So <em class="emphasis">lockarea 1</EM
> makes two children, <em class="emphasis">lockarea 2</EM
> makes four, <em class="emphasis">lockarea 3</EM
> makes eight, <em class="emphasis">lockarea 4</EM
> makes sixteen, etc. The more kids, the more contention for the locks.</P
><p class="para">Each process picks a random line in the file, locks just that line, and updates it. It writes its process ID into the line, prepended with a count of how many times the line has been updated:</P
><pre class="programlisting">4: 18584 was just here</PRE
><p class="para">If the line was already locked, when the lock is finally granted, the line is updated with a message indicating the process that was in the way of this process:</P
><pre class="programlisting">29: 24652 ZAPPED 24656</PRE
><p class="para">A fun demo is to run the <em class="emphasis">lockarea</EM
> program in the background and the <em class="emphasis">rep</EM
> program from <a class="xref" href="ch15_01.htm" title="User Interfaces">Chapter 15</A
> watching the file change. Think of it as a video game for systems programmers.</P
><pre class="programlisting">% lockarea 5 &amp;
% rep -1 'cat /tmp/lkscreen'</PRE
><p class="para">When you interrupt the original parent, usually with Ctrl-C or by sending it a SIGINT from the command line, it kills all its children by sending its entire <a class="indexterm" name="ch07-idx-1000012068-0"></A
><a class="indexterm" name="ch07-idx-1000012068-1"></A
>process group a signal.</P
><div class="example"><h4 class="example"><a class="title" name="ch07-39765">Example 7.11: lockarea</A
></H4
><pre class="programlisting">#!/usr/bin/perl -w
# lockarea - demo record locking with fcntl

use strict;

my $FORKS = shift || 1;
my $SLEEP = shift || 1;

use Fcntl;
use POSIX qw(:unistd_h :errno_h);

my $COLS = 80;
my $ROWS = 23;

# when's the last time you saw *this* mode used correctly?
open(FH, &quot;+&gt; /tmp/lkscreen&quot;)            or  die $!;

select(FH);
$| = 1;
select STDOUT;

# clear screen
for (1 .. $ROWS) {
        print FH &quot; &quot; x $COLS, &quot;\n&quot;;
}

my $progenitor = $$;
fork while $FORKS-- &gt; 0;

print &quot;hello from $$\n&quot;;

if ($progenitor == $$) {
        $SIG{INT} = \&amp;genocide;
} else {
        $SIG{INT} = sub { die &quot;goodbye from $$&quot; };
}

while (1) {
        my $line_num = int rand($ROWS);
        my $line;
        my $n;

        # move to line
        seek(FH, $n = $line_num * ($COLS+1), SEEK_SET)              or next;

        # get lock
        my $place = tell(FH);
        my $him;
        next unless defined($him = lock(*FH, $place, $COLS));

        # read line
        read(FH, $line, $COLS) == $COLS                             or next;
        my $count = ($line =~ /(\d+)/) ? $1 : 0;
        $count++;

        # update line
        seek(FH, $place, 0)                                         or die $!;
        my $update = sprintf($him
                            ? &quot;%6d: %d ZAPPED %d&quot;
                            : &quot;%6d: %d was just here&quot;,
                        $count, $$, $him);
        my $start = int(rand($COLS - length($update)));
        die &quot;XXX&quot; if $start + length($update) &gt; $COLS;
        printf FH &quot;%*.*s\n&quot;, -$COLS, $COLS, &quot; &quot; x $start . $update;

        # release lock and go to sleep
        unlock(*FH, $place, $COLS);
        sleep $SLEEP if $SLEEP;
}
die &quot;NOT REACHED&quot;;                              # just in case

# lock($handle, $offset, $timeout) - get an fcntl lock
sub lock {
        my ($fh, $start, $till) = @_;
        ##print &quot;$$: Locking $start, $till\n&quot;;
        my $lock = struct_flock(F_WRLCK, SEEK_SET, $start, $till, 0);
        my $blocker = 0;
        unless (fcntl($fh, F_SETLK, $lock)) {
            die &quot;F_SETLK $$ @_: $!&quot; unless $! == EAGAIN || $! == EDEADLK;
            fcntl($fh, F_GETLK, $lock)          or die &quot;F_GETLK $$ @_: $!&quot;;
            $blocker = (struct_flock($lock))[-1];
            ##print &quot;lock $$ @_: waiting for $blocker\n&quot;;
            $lock = struct_flock(F_WRLCK, SEEK_SET, $start, $till, 0);
            unless (fcntl($fh, F_SETLKW, $lock)) {
                warn &quot;F_SETLKW $$ @_: $!\n&quot;;
                return;  # undef
            }
        }
        return $blocker;
}

# unlock($handle, $offset, $timeout) - release an fcntl lock
sub unlock {
        my ($fh, $start, $till) = @_;
        ##print &quot;$$: Unlocking $start, $till\n&quot;;
        my $lock = struct_flock(F_UNLCK, SEEK_SET, $start, $till, 0);
        fcntl($fh, F_SETLK, $lock) or die &quot;F_UNLCK $$ @_: $!&quot;;
}

# OS-dependent flock structures

# Linux struct flock
#   short l_type;
#   short l_whence;
#   off_t l_start;
#   off_t l_len;
#   pid_t l_pid;
BEGIN {
        # c2ph says: typedef='s2 l2 i', sizeof=16
        my $FLOCK_STRUCT = 's s l l i';

        sub linux_flock {
            if (wantarray) {
                my ($type, $whence, $start, $len, $pid) =
                    unpack($FLOCK_STRUCT, $_[0]);
                return ($type, $whence, $start, $len, $pid);
            } else {
                my ($type, $whence, $start, $len, $pid) = @_;
                return pack($FLOCK_STRUCT,
                        $type, $whence, $start, $len, $pid);
            }
        }

}

# SunOS struct flock:
#   short   l_type;         /* F_RDLCK, F_WRLCK, or F_UNLCK */
#   short   l_whence;       /* flag to choose starting offset */
#   long    l_start;        /* relative offset, in bytes */
#   long    l_len;          /* length, in bytes; 0 means lock to EOF */
#   short   l_pid;          /* returned with F_GETLK */
#   short   l_xxx;          /* reserved for future use */
BEGIN {
        # c2ph says: typedef='s2 l2 s2', sizeof=16
        my $FLOCK_STRUCT = 's s l l s s';

        sub sunos_flock {
            if (wantarray) {
                my ($type, $whence, $start, $len, $pid, $xxx) =
                    unpack($FLOCK_STRUCT, $_[0]);
                return ($type, $whence, $start, $len, $pid);
            } else {
                my ($type, $whence, $start, $len, $pid) = @_;
                return pack($FLOCK_STRUCT,
                        $type, $whence, $start, $len, $pid, 0);
            }
        }

}

# (Free)BSD struct flock:
#   off_t   l_start;        /* starting offset */
#   off_t   l_len;          /* len = 0 means until end of file */
#   pid_t   l_pid;          /* lock owner */
#   short   l_type;         /* lock type: read/write, etc. */
#   short   l_whence;       /* type of l_start */
BEGIN {
        # c2ph says: typedef=&quot;q2 i s2&quot;, size=24
        my $FLOCK_STRUCT = 'll ll i s s';   # XXX: q is ll

        sub bsd_flock {
            if (wantarray) {
                my ($xxstart, $start, $xxlen, $len, $pid, $type, $whence) =
                    unpack($FLOCK_STRUCT, $_[0]);
                return ($type, $whence, $start, $len, $pid);
            } else {
                my ($type, $whence, $start, $len, $pid) = @_;
                my ($xxstart, $xxlen) = (0,0);
                return pack($FLOCK_STRUCT,
                    $xxstart, $start, $xxlen, $len, $pid, $type, $whence);
            }
        }
}

# alias the fcntl structure at compile time
BEGIN {
        for ($^O) {
            *struct_flock =                do                           {

                                    /bsd/  &amp;&amp;  \&amp;bsd_flock
                                           ||
                                /linux/    &amp;&amp;    \&amp;linux_flock
                                           ||
                              /sunos/      &amp;&amp;      \&amp;sunos_flock
                                           ||
                      die &quot;unknown operating system $^O, bailing out&quot;;
            };
        }
}

# install signal handler for children
BEGIN {
        my $called = 0;

        sub genocide {
            exit if $called++;
            print &quot;$$: Time to die, kiddies.\n&quot; if $$ == $progenitor;
            my $job = getpgrp();
            $SIG{INT} = 'IGNORE';
            kill -2, $job if $job;  # killpg(SIGINT, job)
            1 while wait &gt; 0;
            print &quot;$$: My turn\n&quot; if $$ == $progenitor;
            exit;
        }

}

END { &amp;genocide }

<a class="indexterm" name="ch07-idx-1000010808-0"></A
><a class="indexterm" name="ch07-idx-1000010808-1"></A
><a class="indexterm" name="ch07-idx-1000010808-2"></A
><a class="indexterm" name="ch07-idx-1000010808-3"></A
></PRE
></DIV
><p class="para"></P
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch07_22.htm" title="7.21. Program: netlock"><img src="../gifs/txtpreva.gif" alt="Previous: 7.21. Program: netlock" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="chapter" href="ch08_01.htm" title="8. File Contents"><img src="../gifs/txtnexta.gif" alt="Next: 8. File Contents" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">7.21. Program: netlock</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">8. File Contents</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
