<html><head>
<title>Recipe 1.8. Expanding Variables in User Input</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:29:03Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch01_01.htm" title="1. Strings"><link rel="prev" href="ch01_08.htm" title="1.7. Expanding and Compressing Tabs"><link rel="next" href="ch01_10.htm" title="1.9. Controlling Case"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch01_08.htm" title="1.7. Expanding and Compressing Tabs"><img src="../gifs/txtpreva.gif" alt="Previous: 1.7. Expanding and Compressing Tabs" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch01_01.htm" title="1. Strings">Chapter 1<br>Strings</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch01_10.htm" title="1.9. Controlling Case"><img src="../gifs/txtnexta.gif" alt="Next: 1.9. Controlling Case" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch01-chap01_expanding_1">1.8. Expanding Variables in User Input</A
></H2
><div class="sect2"><h3 class="sect2"><a class="title" name="ch01-pgfId-813">Problem <a class="indexterm" name="ch01-idx-1000010249-0"></A
><a class="indexterm" name="ch01-idx-1000010249-1"></A
><a class="indexterm" name="ch01-idx-1000010249-2"></A
><a class="indexterm" name="ch01-idx-1000010249-3"></A
></A
></H3
><p class="para">You've read in a string with an embedded variable reference, such as:</P
><pre class="programlisting">You owe $debt to me.</PRE
><p class="para">Now you want to replace <code class="literal">$debt</CODE
> in the string with its value.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch01-pgfId-823">Solution</A
></H3
><p class="para">Use a substitution with <a class="indexterm" name="ch01-idx-1000011573-0"></A
>symbolic references if the variables are all globals:</P
><pre class="programlisting">$text =~ s/\$(\w+)/${$1}/g;</PRE
><p class="para">But use a double <code class="literal">/ee</CODE
><a class="indexterm" name="ch01-idx-1000010696-0"></A
> if they might be lexical (<code class="literal">my</CODE
>) variables:</P
><pre class="programlisting">$text =~ s/(\$\w+)/$1/gee;</PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch01-pgfId-835">Discussion</A
></H3
><p class="para">The first technique is basically "find what looks like a variable name, and then use symbolic dereferencing to interpolate its contents." If <code class="literal">$1</CODE
> contains the string <code class="literal">somevar</CODE
>, then <code class="literal">${$1}</CODE
> will be whatever <code class="literal">$somevar</CODE
> contains. This won't work if the <code class="literal">use</CODE
> <code class="literal">strict</CODE
> <code class="literal">'refs'</CODE
> pragma is in effect because that bans symbolic dereferencing.</P
><p class="para">Here's an example:</P
><pre class="programlisting">use vars qw($rows $cols);
no strict 'refs';                   # for ${$1}/g below
my $text;

($rows, $cols) = (24, 80);
$text = q(I am $rows high and $cols long);  # like single quotes!
$text =~ s/\$(\w+)/${$1}/g;
print $text;
<code class="userinput"><b><code class="replaceable"><i>I am 24 high and 80 long</I
></CODE
></B
></CODE
></PRE
><p class="para">You may have seen the <code class="literal">/e</CODE
><a class="indexterm" name="ch01-idx-1000010255-0"></A
> substitution modifier used to evaluate the replacement as code rather than as a string. It's designed for situations such as doubling every whole number in a string:</P
><pre class="programlisting">$text = &quot;I am 17 years old&quot;;
$text =~ s/(\d+)/2 * $1/eg; </PRE
><p class="para">When Perl is compiling your program and sees a <code class="literal">/e</CODE
> on a substitute, it compiles the code in the replacement block along with the rest of your program, long before the substitution actually happens. When a substitution is made, <code class="literal">$1</CODE
> is replaced with the string that matched. The code to evaluate would then be something like:</P
><pre class="programlisting">2 * 17</PRE
><p class="para">If we tried saying:</P
><pre class="programlisting">$text = 'I am $AGE years old';      # note single quotes
$text =~ s/(\$\w+)/$1/eg;           # WRONG</PRE
><p class="para">assuming <code class="literal">$text</CODE
> held a mention of the variable <code class="literal">$AGE</CODE
>, Perl would dutifully replace <code class="literal">$1</CODE
> with <code class="literal">$AGE</CODE
> and then evaluate code that looked like:</P
><pre class="programlisting">'$AGE'</PRE
><p class="para">which just yields us our original string back again. We need to evaluate the result <em class="emphasis">again</EM
> to get the value of the variable. To do that, just add another <code class="literal">/e</CODE
>:</P
><pre class="programlisting">$text =~ s/(\$\w+)/$1/eeg;          # finds my() variables</PRE
><p class="para">Yes, you can have as many <code class="literal">/e</CODE
> modifiers as you'd like. Only the first one is compiled and syntax-checked with the rest of your program. This makes it work like the <code class="literal">eval</CODE
><a class="indexterm" name="ch01-idx-1000011509-0"></A
> <code class="literal">{BLOCK}</CODE
> construct, except that it doesn't trap exceptions. Think of it more as a <code class="literal">do</CODE
> <code class="literal">{BLOCK}</CODE
> instead.</P
><p class="para">Subsequent <code class="literal">/e</CODE
> modifiers are quite different. They're more like the <code class="literal">eval</CODE
> &quot;<code class="literal">STRING</CODE
>&quot; construct. They don't get compiled until run-time. A small advantage of this scheme is that it doesn't make you put a <code class="literal">no</CODE
> <code class="literal">strict</CODE
> <code class="literal">'refs'</CODE
> pragma in the block. A tremendous advantage is that unlike the symbolic dereferencing, this mechanism can actually find lexical variables created with <code class="literal">my</CODE
>, something symbolic references can never do.</P
><p class="para">The following example uses the <code class="literal">/x</CODE
><a class="indexterm" name="ch01-idx-1000010256-0"></A
> modifier to enable whitespace and comments in the pattern part of the substitute and <code class="literal">/e</CODE
> to evaluate the right-hand side as code. The <code class="literal">/e</CODE
> modifier gives you more control over what happens in case of error or other extenuating circumstances, as we have here:</P
><pre class="programlisting"># expand variables in $text, but put an error message in
# if the variable isn't defined
$text =~ s{
     \$                         # find a literal dollar sign
    (\w+)                       # find a &quot;word&quot; and store it in $1
}{
    no strict 'refs';           # for $$1 below
    if (defined $$1) {
        $$1;                    # expand global variables only
    } else {
        &quot;[NO VARIABLE: \$$1]&quot;;  # error msg
    }
}egx;</PRE
><p class="para">Note that the syntax of <code class="literal">$$1</CODE
> has changed for Perl 5.004: it used to mean <code class="literal">${$}1</CODE
> but now means <code class="literal">${$1}</CODE
>. For backwards compatibility, in strings it still takes the old meaning (but generates a warning with <b class="emphasis.bold">-w</B
>). People will write <code class="literal">${$1}</CODE
> within a string to keep from dereferencing the PID variable. If <code class="literal">$$</CODE
> were 23448, then <code class="literal">$$1</CODE
> in a string would turn into <code class="literal">234481</CODE
>, not the contents of the variable whose name was stored in <code class="literal">$1</CODE
>. <a class="indexterm" name="ch01-idx-1000011574-0"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch01-pgfId-919">See Also</A
></H3
><p class="para">The <code class="literal">s///</CODE
> operator in <em class="emphasis">perlre </EM
>(1) and <em class="emphasis">perlop </EM
>(1) and the <a class="olink" href="../prog/ch02_04.htm#PERL2-CH-2-SECT-4.1.2">"Pattern Matching"</A
> and <a class="olink" href="../prog/ch02_04.htm#PERL2-CH-2-SECT-4.1.2">"Regular Expressions"</A
> sections of <a class="olink" href="../prog/ch02_01.htm">Chapter 2</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
>; the <code class="literal">eval</CODE
> function in <em class="emphasis">perlfunc </EM
>(1) and <a class="olink" href="../prog/ch03_01.htm">Chapter 3</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
>; the similar use of substitutions in <a class="xref" href="ch20_10.htm" title="Creating HTML Templates">Recipe 20.9</A
>. <a class="indexterm" name="ch01-idx-1000010251-0"></A
><a class="indexterm" name="ch01-idx-1000010251-1"></A
><a class="indexterm" name="ch01-idx-1000010251-2"></A
><a class="indexterm" name="ch01-idx-1000010251-3"></A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch01_08.htm" title="1.7. Expanding and Compressing Tabs"><img src="../gifs/txtpreva.gif" alt="Previous: 1.7. Expanding and Compressing Tabs" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch01_10.htm" title="1.9. Controlling Case"><img src="../gifs/txtnexta.gif" alt="Next: 1.9. Controlling Case" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">1.7. Expanding and Compressing Tabs</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">1.9. Controlling Case</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
