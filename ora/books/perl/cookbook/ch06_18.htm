<html><head>
<title>Recipe 6.17. Expressing AND, OR, and NOT in a Single Pattern</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:34:54Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch06_01.htm" title="6. Pattern Matching"><link rel="prev" href="ch06_17.htm" title="6.16. Detecting Duplicate Words"><link rel="next" href="ch06_19.htm" title="6.18. Matching Multiple-Byte Characters"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch06_17.htm" title="6.16. Detecting Duplicate Words"><img src="../gifs/txtpreva.gif" alt="Previous: 6.16. Detecting Duplicate Words" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch06_01.htm" title="6. Pattern Matching">Chapter 6<br>Pattern Matching</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch06_19.htm" title="6.18. Matching Multiple-Byte Characters"><img src="../gifs/txtnexta.gif" alt="Next: 6.18. Matching Multiple-Byte Characters" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch06-15940">6.17. Expressing AND, OR, and NOT in a Single Pattern</A
></H2
><div class="sect2"><h3 class="sect2"><a class="title" name="ch06-pgfId-1935">Problem</A
></H3
><p class="para"><a class="indexterm" name="ch06-idx-1000007701-0"></A
><a class="indexterm" name="ch06-idx-1000007701-1"></A
><a class="indexterm" name="ch06-idx-1000007701-2"></A
><a class="indexterm" name="ch06-idx-1000007701-3"></A
><a class="indexterm" name="ch06-idx-1000007701-4"></A
><a class="indexterm" name="ch06-idx-1000007701-5"></A
>You have an existing program that accepts a pattern as an argument or input. It doesn't allow you to add extra logic, like case insensitive options, ANDs, or NOTs. So you need to write a single pattern that matches either of two different patterns (the "or" case), both of two patterns (the "and" case), or that reverses the sense of the match ("not").</P
><p class="para">This situation arises often in a configuration files, web forms, or command-line arguments. Imagine there's a program that does this:</P
><pre class="programlisting">chomp($pattern = &lt;CONFIG_FH&gt;);
if ( $data =~ /$pattern/ ) { ..... }</PRE
><p class="para">As the one maintaining the contents of CONFIG_FH, you need to convey Booleans through to the matching program through that one, measly pattern without explicit connectives.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch06-pgfId-1949">Solution</A
></H3
><p class="para">True if either <code class="literal">/ALPHA/</CODE
> or <code class="literal">/BETA/</CODE
> matches, like <code class="literal">/ALPHA/</CODE
> <code class="literal">||</CODE
> <code class="literal">/BETA/</CODE
>:</P
><pre class="programlisting">/ALPHA|BETA/</PRE
><p class="para">True if both <code class="literal">/ALPHA/</CODE
> and <code class="literal">/BETA/</CODE
> match, but may overlap, meaning <code class="literal">&quot;BETALPHA&quot;</CODE
> should be okay, like <code class="literal">/ALPHA/</CODE
> <code class="literal">&amp;&amp;</CODE
> <code class="literal">/BETA/</CODE
>:</P
><pre class="programlisting">/^(?=.*ALPHA)(?=.*BETA)/s</PRE
><p class="para">True if both <code class="literal">/ALPHA/</CODE
> and <code class="literal">/BETA/</CODE
> match, but may not overlap, meaning that <code class="literal">&quot;BETALPHA&quot;</CODE
> should fail:</P
><pre class="programlisting">/ALPHA.*BETA|BETA.*ALPHA/s</PRE
><p class="para">True if pattern <code class="literal">/PAT/</CODE
> does not match, like <code class="literal">$var</CODE
> <code class="literal">!~</CODE
> <code class="literal">/PAT/</CODE
>:</P
><pre class="programlisting">/^(?:(?!PAT).)*$/s</PRE
><p class="para">True if pattern <code class="literal">BAD</CODE
> does not match, but pattern <code class="literal">GOOD</CODE
> does:</P
><pre class="programlisting">/(?=^(?:(?!BAD).)*$)GOOD/s
</PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch06-pgfId-1975">Discussion</A
></H3
><p class="para">When you're writing a regular program and want to know if something doesn't match, say one of:</P
><pre class="programlisting">if (!($string =~ /pattern/)) { something() }   # ugly
if (  $string !~ /pattern/)  { something() }   # preferred</PRE
><p class="para">If you want to see if two patterns both match, use:</P
><pre class="programlisting">if ($string =~ /pat1/ &amp;&amp; $string =~ /pat2/ ) { <code class="literal">something</CODE
>() }</PRE
><p class="para">If you want to see if either of two patterns matches:</P
><pre class="programlisting">if ($string =~ /pat1/ || $string =~ /pat2/ ) { <code class="literal">something</CODE
>() }</PRE
><p class="para">In short, use Perl's normal Boolean connectives to combine regular expressions, rather than doing it all within a single pattern. However, imagine a <em class="emphasis">minigrep</EM
> program, one that reads its single pattern as an argument, as shown in <a class="xref" href="#ch06-19434" title="minigrep">Example 6.12</A
>.</P
><div class="example"><h4 class="example"><a class="title" name="ch06-19434">Example 6.12: minigrep</A
></H4
><pre class="programlisting">#!/usr/bin/perl
# <a class="indexterm" name="ch06-idx-1000009242-0"></A
>minigrep - trivial grep
$pat = shift;
while (&lt;&gt;) {
    print if /$pat/o;
}</PRE
></DIV
><p class="para">If you want to tell <em class="emphasis">minigrep</EM
> that some pattern must not match, or that it has to match both of two subpatterns in any order, then you're at an impasse. The program isn't built to accept those constructs. How can you do it using one pattern? That is, you'd like to execute the <em class="emphasis">minigrep PAT</EM
> program where PAT can't match or has more than one connected patterns in it. This need comes up often in program reading patterns from configuration files.</P
><p class="para">The OR case is pretty easy, since the <code class="literal">|</CODE
> symbol provides for alternation. The AND and NOT cases, however, require special encoding.</P
><p class="para">For AND, you have to distinguish between overlapping and non-overlapping cases. You want to see if a string matches both <code class="literal">&quot;bell&quot;</CODE
> and <code class="literal">&quot;lab&quot;</CODE
>. If you allow overlapping, then the word <code class="literal">&quot;labelled&quot;</CODE
> qualifies. But if you didn't want to count overlaps, then it shouldn't qualify. The overlapping case uses two look-ahead assertions:</P
><pre class="programlisting"> &quot;labelled&quot; =~ /^(?=.*bell)(?=.*lab)/s</PRE
><p class="para">Remember: in a normal program, you don't have to go through these contortions. You can simply say:</P
><pre class="programlisting">$string =~ /bell/ &amp;&amp; $string =~ /lab/</PRE
><p class="para">To unravel this, we'll spell it out using <code class="literal">/x</CODE
> and comments. Here's the long version:</P
><pre class="programlisting"> if ($murray_hill =~ m{
             ^              # start of string
            (?=             # zero-width lookahead
                .*          # any amount of intervening stuff
                bell        # the desired bell string
            )               # rewind, since we were only looking
            (?=             # and do the same thing
                .*          # any amount of intervening stuff
                lab         # and the lab part
            )
         }sx )              # /s means . can match newline
{
    print &quot;Looks like Bell Labs might be in Murray Hill!\n&quot;;
}</PRE
><p class="para">We didn't use <code class="literal">.*?</CODE
> to end it early because minimal matching is more expensive than maximal matching. So it's more efficient to use <code class="literal">.*</CODE
> over <code class="literal">.*?</CODE
>, given random input where the occurrence of matches at the front or the end of the string is completely unpredictable. Of course, sometimes choosing between <code class="literal">.*</CODE
> and <code class="literal">.*?</CODE
> may depend on correctness rather than efficiency, but not here.</P
><p class="para">To handle the non-overlapping case, you need two parts separated by an OR. The first branch is THIS followed by THAT; the second is the other way around.</P
><pre class="programlisting">&quot;labelled&quot; =~ /(?:^.*bell.*lab)|(?:^.*lab.*bell)/</PRE
><p class="para">or in long form:</P
><pre class="programlisting">$brand = &quot;labelled&quot;;
if ($brand =~ m{
        (?:                 # non-capturing grouper
            ^ .*?           # any amount of stuff at the front
              bell          # look for a bell
              .*?           # followed by any amount of anything
              lab           # look for a lab
          )                 # end grouper
    |                       # otherwise, try the other direction
        (?:                 # non-capturing grouper
            ^ .*?           # any amount of stuff at the front
              lab           # look for a lab
              .*?           # followed by any amount of anything
              bell          # followed by a bell
          )                 # end grouper
    }sx )                   # /s means . can match newline
{
    print &quot;Our brand has bell and lab separate.\n&quot;;
}</PRE
><p class="para">These patterns aren't necessarily faster. <code class="literal">$murray_hill</CODE
> <code class="literal">=~</CODE
> <code class="literal">/bell/</CODE
> <code class="literal">&amp;&amp;</CODE
> <code class="literal">$murray_hill</CODE
> <code class="literal">=~</CODE
> <code class="literal">/lab/</CODE
><span class="acronym"> </SPAN
>will scan the string at most twice, but the pattern matching engine's only option is to try to find a <code class="literal">&quot;lab&quot;</CODE
> for each occurrence of <code class="literal">&quot;bell&quot;</CODE
> in <code class="literal">(?=^.*?bell)(?=^.*?lab)/</CODE
>, leading to quadratic worst case running times.</P
><p class="para">If you followed those two, then the NOT case should be a breeze. The general form looks like this:</P
><pre class="programlisting">$map =~ /^(?:(?!waldo).)*$/s</PRE
><p class="para">Spelled out in long form, this yields:</P
><pre class="programlisting">if ($map =~ m{
        ^                   # start of string
        (?:                 # non-capturing grouper
            (?!             # look ahead negation
                waldo       # is he ahead of us now?
            )               # is so, the negation failed
            .               # any character (cuzza /s)
        ) *                 # repeat that grouping 0 or more
        $                   # through the end of the string
    }sx )                   # /s means . can match newline
{
    print &quot;There's no waldo here!\n&quot;;
}</PRE
><p class="para">How would you combine AND, OR, and NOT? It's not a pretty picture, and in a regular program, you'd almost never do this, but from a config file or command line where you only get to specify one pattern, you have no choice. You just have to combine what we've learned so far. Carefully.</P
><p class="para">Let's say you wanted to run the Unix <em class="emphasis">w</EM
> program and find out whether user <code class="literal">tchrist</CODE
> were logged on anywhere but a terminal whose name began with <code class="literal">ttyp </CODE
>; that is, <code class="literal">tchrist</CODE
> must match, but <code class="literal">ttyp</CODE
> must not.</P
><p class="para">Here's sample input from <em class="emphasis">w</EM
> on my Linux system:</P
><pre class="programlisting"><code class="userinput"><b><code class="replaceable"><i> 7:15am  up 206 days, 13:30,  4 users,  load average: 1.04, 1.07, 1.04</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>USER     TTY      FROM              LOGIN@  IDLE   JCPU   PCPU  WHAT</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>tchrist  tty1                       5:16pm 36days 24:43   0.03s  xinit</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>tchrist  tty2                       5:19pm  6days  0.43s  0.43s  -tcsh</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>tchrist  ttyp0    chthon            7:58am  3days 23.44s  0.44s  -tcsh</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>gnat     ttyS4    coprolith         2:01pm 13:36m  0.30s  0.30s  -tcsh</I
></CODE
></B
></CODE
></PRE
><p class="para">Here's how to do that using the <em class="emphasis">minigrep</EM
> program outlined previously or with the <em class="emphasis">tcgrep</EM
> program at the end of this chapter:</P
><pre class="programlisting">% w | minigrep '^(?!.*ttyp).*tchrist'</PRE
><p class="para">Decoding that pattern:</P
><pre class="programlisting">m{
    ^                       # anchored to the start
    (?!                     # zero-width look-ahead assertion
        .*                  # any amount of anything (faster than .*?)
        ttyp                # the string you don't want to find
    )                       # end look-ahead negation; rewind to start
    .*                      # any amount of anything (faster than .*?)
    tchrist                 # now try to find Tom
}x</PRE
><p class="para">Never mind that any sane person would just call <em class="emphasis">grep</EM
> twice, once with a <b class="emphasis.bold">-v</B
> option to select only non-matches.</P
><pre class="programlisting">% w | grep tchrist | grep -v ttyp</PRE
><p class="para">The point is that Boolean conjunctions and negations <em class="emphasis">can</EM
> be coded up in one single pattern. You should comment this kind of thing, though, having pity on those who come after you &nbsp;-  before they do.</P
><p class="para">How would you embed that <code class="literal">/s</CODE
> in a pattern passed to a program from the command line? The same way as you would a <code class="literal">/i</CODE
> switch: by using <code class="literal">(?i)</CODE
> in the pattern. The <code class="literal">/s</CODE
> and <code class="literal">/m</CODE
> modifiers can be painlessly included in a pattern as well, using <code class="literal">/(?s)</CODE
> or <code class="literal">/(?m)</CODE
>. These can even cluster, as in <code class="literal">/(?smi)</CODE
>. That would make these two reasonably interchangeable:</P
><pre class="programlisting">% grep -i 'pattern' files
% minigrep '(?i)pattern' files</PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch06-pgfId-1000008827">See Also</A
></H3
><p class="para">Lookahead assertions are shown in the "Regular Expressions" section of <i class="filename">perlre</I
> (1), and in the <a class="olink" href="../prog/ch02_04.htm#PERL2-CH-2-SECT-4.1.2">"rules of regular expression matching"</A
> section of <a class="olink" href="../prog/ch02_01.htm">Chapter 2</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
>; your system's <i class="filename">grep </I
>(1) and <i class="filename">w</I
> (1) manpages; we talk about configuration files in <a class="xref" href="ch08_17.htm" title="Reading Configuration Files">Recipe 8.16</A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch06_17.htm" title="6.16. Detecting Duplicate Words"><img src="../gifs/txtpreva.gif" alt="Previous: 6.16. Detecting Duplicate Words" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch06_19.htm" title="6.18. Matching Multiple-Byte Characters"><img src="../gifs/txtnexta.gif" alt="Next: 6.18. Matching Multiple-Byte Characters" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">6.16. Detecting Duplicate Words</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">6.18. Matching Multiple-Byte Characters</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
