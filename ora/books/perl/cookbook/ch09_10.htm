<html><head>
<title>Recipe 9.9. Renaming Files</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:39:20Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch09_01.htm" title="9. Directories"><link rel="prev" href="ch09_09.htm" title="9.8. Removing a Directory and Its Contents"><link rel="next" href="ch09_11.htm" title="9.10. Splitting a Filename into Its Component Parts"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch09_09.htm" title="9.8. Removing a Directory and Its Contents"><img src="../gifs/txtpreva.gif" alt="Previous: 9.8. Removing a Directory and Its Contents" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch09_01.htm" title="9. Directories">Chapter 9<br>Directories</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch09_11.htm" title="9.10. Splitting a Filename into Its Component Parts"><img src="../gifs/txtnexta.gif" alt="Next: 9.10. Splitting a Filename into Its Component Parts" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch09-60164">9.9. Renaming Files</A
></H2
><div class="sect2"><h3 class="sect2"><a class="title" name="ch09-pgfId-944">Problem<a class="indexterm" name="ch09-idx-1000004434-0"></A
><a class="indexterm" name="ch09-idx-1000004434-1"></A
><a class="indexterm" name="ch09-idx-1000004434-2"></A
></A
></H3
><p class="para">You have a lot of files whose names you want to change.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch09-pgfId-950">Solution</A
></H3
><p class="para">Use a <code class="literal">foreach</CODE
> loop and the <code class="literal">rename</CODE
> function:</P
><pre class="programlisting">foreach $file (@NAMES) {
    my $newname = $file;
    # change $newname
    rename($file, $newname) or  
        warn &quot;Couldn't rename $file to $newname: $!\n&quot;;
}</PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch09-pgfId-1000004700">Discussion</A
></H3
><p class="para">This is straightforward. <code class="literal">rename</CODE
> takes two arguments. The first is the filename to change, and the second is its new name. Perl's <code class="literal">rename</CODE
> is a front end to the operating system's rename system call, which typically won't let you rename files across filesystem boundaries.</P
><p class="para">A small change turns this into a generic <code class="literal">rename</CODE
><a class="indexterm" name="ch09-idx-1000004438-0"></A
> script, such as the one by Larry Wall shown in <a class="xref" href="#ch09-40514" title="rename">Example 9.5</A
>.</P
><div class="example"><h4 class="example"><a class="title" name="ch09-40514">Example 9.5: rename</A
></H4
><pre class="programlisting">#!/usr/bin/perl -w
# rename - Larry's filename fixer
$op = shift or die &quot;Usage: rename expr [files]\n&quot;;
chomp(@ARGV = &lt;STDIN&gt;) unless @ARGV;
for (@ARGV) {
    $was = $_;
    eval $op;
    die $@ if $@;
    rename($was,$_) unless $was eq $_;
}</PRE
></DIV
><p class="para">This script's first argument is Perl code that alters the filename (stored in <code class="literal">$_ </CODE
>) to reflect how you want the file renamed. It can do this because it uses an <code class="literal">eval</CODE
> to do the hard work. It also skips <code class="literal">rename</CODE
> calls when the filename is untouched. This lets you simply use wildcards like <code class="literal">rename</CODE
> <code class="literal">EXPR</CODE
> <code class="literal">*</CODE
> instead of making long lists of filenames.</P
><p class="para">Here are five examples of calling the <em class="emphasis">rename</EM
> program from your shell:</P
><pre class="programlisting">% rename 's/\.orig$//'  *.orig
% rename 'tr/A-Z/a-z/ unless /^Make/'  *
% rename '$_ .= &quot;.bad&quot;'  *.f
% rename 'print &quot;$_: &quot;; s/foo/bar/ if &lt;STDIN&gt; =~ /^y/i'  *
% find /tmp -name '*~' -print | rename 's/^(.+)~$/.#$1/'</PRE
><p class="para">The first shell command removes a trailing <code class="literal">&quot;.orig&quot;</CODE
> from each filename.</P
><p class="para">The second converts uppercase to lowercase. Because a translation is used rather than the <code class="literal">lc</CODE
> function, this conversion won't be locale-aware. To fix that, you'd have to write:</P
><pre class="programlisting">% rename 'use locale; $_ = lc($_) unless /^Make/' *</PRE
><p class="para">The third appends <code class="literal">&quot;.bad&quot;</CODE
> to each Fortran file ending in <code class="literal">&quot;.f&quot;</CODE
>, something a lot of us have wanted to do for a long time.</P
><p class="para">The fourth prompts the user for the change. Each file's name is printed to standard output and a response is read from standard input. If the user types something starting with a <code class="literal">&quot;y&quot;</CODE
> or <code class="literal">&quot;Y&quot;</CODE
>, any <code class="literal">&quot;foo&quot;</CODE
> in the filename is changed to <code class="literal">&quot;bar&quot;</CODE
>.</P
><p class="para">The fifth uses <em class="emphasis">find</EM
> to locate files in <code class="literal">/tmp</CODE
> that end with a tilde. It renames these so that instead of ending with a tilde, they start with a dot and a pound sign. In effect, this switches between two common conventions for backup files.</P
><p class="para">The <em class="emphasis">rename</EM
> script exemplifies the powerful Unix tool-and-filter philosophy. Even though we could have created a dedicated command to do the lowercase conversion, it's nearly as easy to write a flexible, reusable tool by embedding an <code class="literal">eval</CODE
>. By allowing the filenames to be read from standard input, we don't have to build in the recursive directory walk. Instead, we just use <em class="emphasis">find</EM
>, which performs this function well. There's no reason to recreate the wheel, although using File::Find we could have.<a class="indexterm" name="ch09-idx-1000004429-0"></A
><a class="indexterm" name="ch09-idx-1000004429-1"></A
><a class="indexterm" name="ch09-idx-1000004429-2"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch09-pgfId-1022">See Also</A
></H3
><p class="para">The <code class="literal">rename</CODE
> function in <i class="filename">perlfunc </I
>(1) and in <a class="olink" href="../prog/ch03_01.htm">Chapter 3</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
>; your system's <i class="filename">mv </I
>(1) and <i class="filename">rename</I
> (2) manpages; the documentation for the standard File::Find module (also in <a class="olink" href="../prog/ch07_01.htm">Chapter 7</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
>)</P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch09_09.htm" title="9.8. Removing a Directory and Its Contents"><img src="../gifs/txtpreva.gif" alt="Previous: 9.8. Removing a Directory and Its Contents" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch09_11.htm" title="9.10. Splitting a Filename into Its Component Parts"><img src="../gifs/txtnexta.gif" alt="Next: 9.10. Splitting a Filename into Its Component Parts" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">9.8. Removing a Directory and Its Contents</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">9.10. Splitting a Filename into Its Component Parts</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
