<html><head>
<title>[Chapter 8] File Contents</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:38:04Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="index.htm" title="Perl Cookbook"><link rel="prev" href="ch07_23.htm" title="7.22. Program: lockarea"><link rel="next" href="ch08_02.htm" title="8.1. Reading Lines with Continuation Characters"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch07_23.htm" title="7.22. Program: lockarea"><img src="../gifs/txtpreva.gif" alt="Previous: 7.22. Program: lockarea" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 8</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch08_02.htm" title="8.1. Reading Lines with Continuation Characters"><img src="../gifs/txtnexta.gif" alt="Next: 8.1. Reading Lines with Continuation Characters" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="chapter"><h1 class="chapter"><a class="title" name="ch08-11143">8. File Contents</A
></H1
><div class="htmltoc"><p><b>Contents:</B
><br><a class="sect1" href="#ch08-23799" title="8.0. Introduction">Introduction</A
><br><a class="sect1" href="ch08_02.htm" title="8.1. Reading Lines with Continuation Characters">Reading Lines with Continuation Characters</A
><br><a class="sect1" href="ch08_03.htm" title="8.2. Counting Lines (or Paragraphs or Records) in a File">Counting Lines (or Paragraphs or Records) in a File</A
><br><a class="sect1" href="ch08_04.htm" title="8.3. Processing Every Word in a File">Processing Every Word in a File</A
><br><a class="sect1" href="ch08_05.htm" title="8.4. Reading a File Backwards by Line or Paragraph">Reading a File Backwards by Line or Paragraph</A
><br><a class="sect1" href="ch08_06.htm" title="8.5. Trailing a Growing File">Trailing a Growing File</A
><br><a class="sect1" href="ch08_07.htm" title="8.6. Picking a Random Line from a File">Picking a Random Line from a File</A
><br><a class="sect1" href="ch08_08.htm" title="8.7. Randomizing All Lines">Randomizing All Lines</A
><br><a class="sect1" href="ch08_09.htm" title="8.8. Reading a Particular Line in a File">Reading a Particular Line in a File</A
><br><a class="sect1" href="ch08_10.htm" title="8.9. Processing Variable-Length Text Fields">Processing Variable-Length Text Fields</A
><br><a class="sect1" href="ch08_11.htm" title="8.10. Removing the Last Line of a File">Removing the Last Line of a File</A
><br><a class="sect1" href="ch08_12.htm" title="8.11. Processing Binary Files">Processing Binary Files</A
><br><a class="sect1" href="ch08_13.htm" title="8.12. Using Random-Access I/O">Using Random-Access I/O</A
><br><a class="sect1" href="ch08_14.htm" title="8.13. Updating a Random-Access File">Updating a Random-Access File</A
><br><a class="sect1" href="ch08_15.htm" title="8.14. Reading a String from a Binary File">Reading a String from a Binary File</A
><br><a class="sect1" href="ch08_16.htm" title="8.15. Reading Fixed-Length Records">Reading Fixed-Length Records</A
><br><a class="sect1" href="ch08_17.htm" title="8.16. Reading Configuration Files">Reading Configuration Files</A
><br><a class="sect1" href="ch08_18.htm" title="8.17. Testing a File for Trustworthiness">Testing a File for Trustworthiness</A
><br><a class="sect1" href="ch08_19.htm" title="8.18. Program: tailwtmp">Program: tailwtmp</A
><br><a class="sect1" href="ch08_20.htm" title="8.19. Program: tctee">Program: tctee</A
><br><a class="sect1" href="ch08_21.htm" title="8.20. Program: laston">Program: laston</A
></P
><p></P
></DIV
><div class="epigraph" align="right"><p class="para" align="right"><i>The most brilliant decision in all of Unix was the choice of a single character for the newline sequence.</I
></P
><p class="attribution" align="right">-&nbsp;Mike O'Dell, only half jokingly </P
></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch08-23799">8.0. Introduction</A
></H2
><p class="para"><a class="indexterm" name="ch08-idx-1000004574-0"></A
>Before the Unix Revolution, every kind of data source and destination was inherently different. Getting two programs merely to understand each other required heavy wizardry and the occasional sacrifice of a virgin stack of punch cards to an itinerant mainframe repairman. This computational Tower of Babel made programmers dream of quitting the field to take up a less painful hobby, like autoflagellation.</P
><p class="para">These days, such cruel and unusual programming is largely behind us. Modern operating systems work hard to provide the illusion that I/O devices, network connections, process control information, other programs, the system console, and even users' terminals are all abstract streams of bytes called <em class="emphasis">files</EM
>. This lets you easily write programs that don't care where their input came from or where their output goes.</P
><p class="para">Because programs read and write via byte streams of simple text, every program can communicate with every other program. It is difficult to overstate the power and elegance of this approach. No longer dependent upon troglodyte gnomes with secret tomes of JCL (or COM) incantations, users can now create custom tools from smaller ones by using simple command-line I/O redirection, pipelines, and backticks.</P
><p class="para">Treating files as unstructured byte streams necessarily governs what you can do with them. You can read and write sequential, fixed-size blocks of data at any location in the file, increasing its size if you write past the current end. Perl uses the standard C I/O library to implement reading and writing of variable-length records like lines, paragraphs, and words.</P
><p class="para">What can't you do to an unstructured file? Because you can't insert or delete bytes anywhere but at end of file, you can't change the length of, insert, or delete records. An exception is the last record, which you can delete by truncating the file to the end of the previous record. For other modifications, you need to use a temporary file or work with a copy of the file in memory. If you need to do this a lot, a database system may be a better solution than a raw file (see <a class="xref" href="ch14_01.htm" title="Database Access">Chapter 14, <cite class="chapter">Database Access</CITE
></A
>).</P
><p class="para">The most common files are text files, and the most common operations on text files are reading and writing lines. <a class="indexterm" name="ch08-idx-1000004596-0"></A
><a class="indexterm" name="ch08-idx-1000004596-1"></A
>Use <code class="literal">&lt;FH&gt;</CODE
> (or the internal function implementing it, <code class="literal">readline</CODE
>) to read lines, and use <code class="literal">print</CODE
> to write them. These functions can also be used to read or write any record that has a specific record separator. Lines are simply records that end in <code class="literal">&quot;\n&quot;</CODE
>.</P
><p class="para">The <code class="literal">&lt;FH&gt;</CODE
> operator returns <code class="literal">undef</CODE
> on error or when end of the file is reached, so use it in loops like this:</P
><pre class="programlisting">while (defined ($line = &lt;DATAFILE&gt;)) {
    chomp $line;
    $size = length $line;
    print &quot;$size\n&quot;;                # output size of line
}</PRE
><p class="para">Because this is a common operation and that's a lot to type, Perl gives it a shorthand notation. This shorthand reads lines into <code class="literal">$_</CODE
> instead of <code class="literal">$line</CODE
>. Many other string operations use <code class="literal">$_</CODE
> as a default value to operate on, so this is more useful than it may appear at first:</P
><pre class="programlisting">while (&lt;DATAFILE&gt;) {
    chomp;
    print length, &quot;\n&quot;;             # output size of line
}</PRE
><p class="para">Call <code class="literal">&lt;FH&gt;</CODE
> in scalar context to read the next line. Call it in list context to read all remaining lines:</P
><pre class="programlisting">@lines = &lt;DATAFILE&gt;;</PRE
><p class="para">Each time <code class="literal">&lt;FH&gt;</CODE
> reads a record from a filehandle, it increments the special variable <code class="literal">$.</CODE
> (the "current input record number"). This variable is only reset when <code class="literal">close</CODE
> is called explicitly, which means that it's not reset when you reopen an already opened filehandle.</P
><p class="para">Another special variable is <code class="literal">$/</CODE
><a class="indexterm" name="ch08-idx-1000004604-0"></A
>, the input record separator. It is set to <code class="literal">&quot;\n&quot;</CODE
>, the default end-of-line marker. You can set it to any string you like, for instance <code class="literal">&quot;\0&quot;</CODE
> to read null-terminated records. Read paragraphs by setting <code class="literal">$/</CODE
> to the empty string, <code class="literal">&quot;&quot;</CODE
>. This is almost like setting <code class="literal">$/</CODE
> to <code class="literal">&quot;\n\n&quot;</CODE
>, in that blank lines function as record separators, but <code class="literal">&quot;&quot;</CODE
> treats two or more consecutive empty lines as a single record separator, whereas <code class="literal">&quot;\n\n&quot;</CODE
> returns empty records when more than two consecutive empty lines are read. Undefine <code class="literal">$/</CODE
> to read the rest of the file as one scalar:</P
><pre class="programlisting">undef $/;
$whole_file = &lt;FILE&gt;;               # 'slurp' mode</PRE
><p class="para">The<a class="indexterm" name="ch08-idx-1000004605-0"></A
> <b class="emphasis.bold">-0</B
> option to Perl lets you set <code class="literal">$/</CODE
> from the command line:</P
><pre class="programlisting">% perl -040 -e '$word = &lt;&gt;; print &quot;First word is $word\n&quot;;'</PRE
><p class="para">The digits after <b class="emphasis.bold">-0</B
> are the octal value of the single character that <code class="literal">$/</CODE
> is to be set to. If you specify an illegal value (e.g., with <b class="emphasis.bold">-0777</B
>) Perl will set <code class="literal">$/</CODE
> to <code class="literal">undef</CODE
>. If you specify <b class="emphasis.bold">-00</B
>, Perl will set <code class="literal">$/</CODE
> to <code class="literal">&quot;&quot;</CODE
>. The limit of a single octal value means you can't set <code class="literal">$/</CODE
> to a multibyte string, for instance, <code class="literal">&quot;%%\n&quot;</CODE
> to read <em class="emphasis">fortune</EM
> files. Instead, you must use a <code class="literal">BEGIN</CODE
> block:</P
><pre class="programlisting">% perl -ne 'BEGIN { $/=&quot;%%\n&quot; } chomp; print if /Unix/i' fortune.dat</PRE
><p class="para">Use <code class="literal">print</CODE
> to write a line or any other data. The <code class="literal">print</CODE
> function writes its arguments one after another and doesn't automatically add a line or record terminator by default.</P
><pre class="programlisting">print HANDLE &quot;One&quot;, &quot;two&quot;, &quot;three&quot;; # &quot;Onetwothree&quot;
print &quot;Baa baa black sheep.\n&quot;;     # Sent to default output handle</PRE
><p class="para">There is no comma between the filehandle and the data to print. If you put a comma in there, Perl gives the error message <code class="literal">&quot;No</CODE
> <code class="literal">comma</CODE
> <code class="literal">allowed</CODE
> <code class="literal">after</CODE
> <code class="literal">filehandle&quot;</CODE
>. The default output handle is STDOUT. Change it with the <code class="literal">select</CODE
> function. (See the introduction to <a class="xref" href="ch07_01.htm" title="File Access">Chapter 7, <cite class="chapter">File Access</CITE
></A
>.)</P
><p class="para">All systems use the virtual <code class="literal">&quot;\n&quot;</CODE
> to represent a line terminator, called a <em class="emphasis">newline</EM
>. There is no such thing as a newline character. It is an illusion that the operating system, device drivers, C libraries, and Perl all conspire to preserve. Sometimes, this changes the number of characters in the strings you read and write. The conspiracy is revealed in <a class="xref" href="ch08_12.htm" title="Processing Binary Files">Recipe 8.11</A
>.</P
><p class="para">Use the <code class="literal">read</CODE
><a class="indexterm" name="ch08-idx-1000004606-0"></A
> function to read a <a class="indexterm" name="ch08-idx-1000004763-0"></A
><a class="indexterm" name="ch08-idx-1000004763-1"></A
><a class="indexterm" name="ch08-idx-1000004763-2"></A
>fixed-length record. It takes three arguments: a filehandle, a scalar variable, and the number of bytes to read. It returns <code class="literal">undef</CODE
> if an error occurred or else the number of bytes read. To write a fixed-length record, just use <code class="literal">print</CODE
>.</P
><pre class="programlisting">$rv = read(HANDLE, $buffer, 4096)
        or die &quot;Couldn't read from HANDLE : $!\n&quot;;
# $rv is the number of bytes read,
# $buffer holds the data read</PRE
><p class="para">The <code class="literal">truncate</CODE
><a class="indexterm" name="ch08-idx-1000004607-0"></A
> function changes the length of a file, which can be specified as a filehandle or as a filename. It returns true if the file was successfully truncated, false otherwise:</P
><pre class="programlisting">truncate(HANDLE, $length)
    or die &quot;Couldn't truncate: $!\n&quot;;
truncate(&quot;/tmp/$$.pid&quot;, $length)
    or die &quot;Couldn't truncate: $!\n&quot;;</PRE
><p class="para">Each filehandle keeps track of where it is in the file. Reads and writes occur from this point, unless you've specified the <code class="literal">O_APPEND</CODE
> flag (see <a class="xref" href="ch07_02.htm" title="Opening a File">Recipe 7.1</A
>). Fetch the file position for a filehandle with <code class="literal">tell</CODE
><a class="indexterm" name="ch08-idx-1000004608-0"></A
><a class="indexterm" name="ch08-idx-1000004608-1"></A
>, and set it with <code class="literal">seek</CODE
>. Because the stdio library rewrites data to preserve the illusion that <code class="literal">&quot;\n&quot;</CODE
> is the line terminator, you cannot portably <code class="literal">seek</CODE
> to offsets calculated by counting characters. Instead, only <code class="literal">seek</CODE
> to offsets returned by <code class="literal">tell</CODE
>.</P
><pre class="programlisting">$pos = tell(DATAFILE);
print &quot;I'm $pos bytes from the start of DATAFILE.\n&quot;;</PRE
><p class="para">The <code class="literal">seek</CODE
> function takes three arguments: the filehandle, the offset (in bytes) to go to, and a numeric argument indicating how to interpret the offset. 0 indicates an offset from the start of the file (the kind of value returned by <code class="literal">tell</CODE
>); 1, an offset from the current location (a negative number means move backwards in the file, a positive number means move forward); and 2, an offset from end of file.</P
><pre class="programlisting">seek(LOGFILE, 0, 2)         or die &quot;Couldn't seek to the end: $!\n&quot;;
seek(DATAFILE, $pos, 0)     or die &quot;Couldn't seek to $pos: $!\n&quot;;
seek(OUT, -20, 1)           or die &quot;Couldn't seek back 20 bytes: $!\n&quot;;</PRE
><p class="para"><a class="indexterm" name="ch08-idx-1000004609-0"></A
><a class="indexterm" name="ch08-idx-1000004609-1"></A
><a class="indexterm" name="ch08-idx-1000004609-2"></A
>So far we've been describing buffered I/O. That is, <code class="literal">&lt;FH&gt;</CODE
>, <code class="literal">print</CODE
>, <code class="literal">read</CODE
>, <code class="literal">seek</CODE
>, and <code class="literal">tell</CODE
> are all operations that use buffers for speed. Perl also provides unbuffered I/O operations: <code class="literal">sysread</CODE
>, <code class="literal">syswrite</CODE
>, and <code class="literal">sysseek</CODE
>, all discussed in <a class="xref" href="ch07_01.htm" title="File Access">Chapter 7</A
>.</P
><p class="para">The <code class="literal">sysread</CODE
><a class="indexterm" name="ch08-idx-1000004610-0"></A
><a class="indexterm" name="ch08-idx-1000004610-1"></A
> and <code class="literal">syswrite</CODE
> functions are different from their <code class="literal">&lt;FH&gt;</CODE
> and <code class="literal">print</CODE
> counterparts. They both take a filehandle to act on, a scalar variable to either read into or write out from, and the number of bytes to read or write. They can also take an optional fourth argument, the offset in the scalar variable to start reading or writing at:</P
><pre class="programlisting">$written = syswrite(DATAFILE, $mystring, length($mystring));
die &quot;syswrite failed: $!\n&quot; unless $written == length($mystring);
$read = sysread(INFILE, $block, 256, 5);
warn &quot;only read $read bytes, not 256&quot; if 256 != $read;</PRE
><p class="para">The <code class="literal">syswrite</CODE
> call sends the contents of <code class="literal">$mystring</CODE
> to <code class="literal">DATAFILE</CODE
>. The <code class="literal">sysread</CODE
> call reads 256 bytes from <code class="literal">INFILE</CODE
> and stores them 5 characters into <code class="literal">$block</CODE
>, leaving its first 5 characters intact. Both <code class="literal">sysread</CODE
> and <code class="literal">syswrite</CODE
> return the number of bytes transferred, which could be different than the amount of data you were attempting to transfer. Maybe the file didn't have all the data you thought it did, so you got a short read. Maybe the filesystem that the file lives on filled up. Maybe your process was interrupted part of the way through the write. Stdio takes care of finishing the transfer in cases of interruption, but if you use the <code class="literal">sysread</CODE
> and <code class="literal">syswrite</CODE
> calls, you must do it yourself. See <a class="xref" href="ch09_04.htm" title="Copying or Moving a File">Recipe 9.3</A
> for an example of this.</P
><p class="para">The <code class="literal">sysseek</CODE
><a class="indexterm" name="ch08-idx-1000004611-0"></A
> function doubles as an unbuffered replacement for both <code class="literal">seek</CODE
> and <code class="literal">tell</CODE
>. It takes the same arguments as <code class="literal">seek</CODE
>, but it returns either the new position if successful or <code class="literal">undef</CODE
> on error. To find the current position within the file:</P
><pre class="programlisting">$pos = sysseek(HANDLE, 0, 1);       # don't change position
die &quot;Couldn't sysseek: $!\n&quot; unless defined $pos;</PRE
><p class="para">These are the basic operations available to you. The art and craft of programming lies in using these basic operations to solve complex problems like finding the number of lines in a file, reversing the order of lines in a file, randomly selecting a line from a file, building an index for a file, and so on.</P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch07_23.htm" title="7.22. Program: lockarea"><img src="../gifs/txtpreva.gif" alt="Previous: 7.22. Program: lockarea" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch08_02.htm" title="8.1. Reading Lines with Continuation Characters"><img src="../gifs/txtnexta.gif" alt="Next: 8.1. Reading Lines with Continuation Characters" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">7.22. Program: lockarea</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">8.1. Reading Lines with Continuation Characters</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
