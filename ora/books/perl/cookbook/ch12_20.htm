<html><head>
<title>Recipe 12.19. Program: Finding Versions and Descriptions of Installed Modules</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:42:06Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch12_01.htm" title="12. Packages, Libraries, and Modules"><link rel="prev" href="ch12_19.htm" title="12.18. Example: Module Template"><link rel="next" href="ch13_01.htm" title="13. Classes, Objects, and Ties"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name="srchmapindex.html"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch12_19.htm" title="12.18. Example: Module Template"><img src="../gifs/txtpreva.gif" alt="Previous: 12.18. Example: Module Template" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch12_01.htm" title="12. Packages, Libraries, and Modules">Chapter 12<br>Packages, Libraries, and Modules</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="chapter" href="ch13_01.htm" title="13. Classes, Objects, and Ties"><img src="../gifs/txtnexta.gif" alt="Next: 13. Classes, Objects, and Ties" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch12-chap12_program_1">12.19. Program: Finding Versions and Descriptions of Installed Modules</A
></H2
><p class="para"><a class="indexterm" name="ch12-idx-1000005323-0"></A
><a class="indexterm" name="ch12-idx-1000005323-1"></A
>Perl is shipped with many modules. Even more can be found on CPAN. The following program prints out the names, versions, and descriptions of all modules installed on your system. It uses standard modules like File::Find and includes several techniques described in this chapter.</P
><p class="para">To run it, type:</P
><pre class="programlisting">% pmdesc</PRE
><p class="para">It prints a list of modules and their descriptions:</P
><pre class="programlisting"><code class="userinput"><b><code class="replaceable"><i>FileHandle (2.00) - supply object methods for filehandles</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>IO::File (1.06021) - supply object methods for filehandles</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>IO::Select (1.10) - OO interface to the select system call</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>IO::Socket (1.1603) - Object interface to socket communications</I
></CODE
></B
></CODE
>
<b class="emphasis.bold">...</B
></PRE
><p class="para">With the <b class="emphasis.bold">-v</B
> flag, <em class="emphasis">pmdesc</EM
> provides the names of the directories the files are in:</P
><pre class="programlisting">% pmdesc -v

<code class="userinput"><b><code class="replaceable"><i>&lt;&lt;&lt;Modules from /usr/lib/perl5/i686-linux/5.00404&gt;&gt;&gt;</I
></CODE
></B
></CODE
>

<code class="userinput"><b><code class="replaceable"><i>FileHandle (2.00) - supply object methods for filehandles</I
></CODE
></B
></CODE
>
<b class="emphasis.bold">    ...</B
></PRE
><p class="para">The <b class="emphasis.bold">-w</B
> flag warns if a module doesn't come with a pod description, and <b class="emphasis.bold">-s</B
> sorts the module list within each directory.</P
><p class="para">The program is given in <a class="xref" href="#ch12-39484" title="pmdesc">Example 12.3</A
>.</P
><div class="example"><h4 class="example"><a class="title" name="ch12-39484">Example 12.3: pmdesc</A
></H4
><pre class="programlisting">#!/usr/bin/perl -w
# <a class="indexterm" name="ch12-idx-1000005374-0"></A
>pmdesc - describe pm files
# tchrist@perl.com

use strict;
use File::Find      qw(find);
use Getopt::Std     qw(getopts);
use Carp;

use vars (
    q!$opt_v!,              # give debug info
    q!$opt_w!,              # warn about missing descs on modules
    q!$opt_a!,              # include relative paths
    q!$opt_s!,              # sort output within each directory
);

$| = 1;

getopts('wvas')             or die &quot;bad usage&quot;;

@ARGV = @INC unless @ARGV;

# Globals.  wish I didn't really have to do this.
use vars (
    q!$Start_Dir!,          # The top directory find was called with
    q!%Future!,             # topdirs find will handle later
);

my $Module;

# install an output filter to sort my module list, if wanted.
if ($opt_s) {
    if (open(ME, &quot;-|&quot;)) {
        $/ = '';
        while (&lt;ME&gt;) {
            chomp;
            print join(&quot;\n&quot;, sort split /\n/), &quot;\n&quot;;
        }
        exit;
    }
}

MAIN: {
    my %visited;
    my ($dev,$ino);

    @Future{@ARGV} = (1) x @ARGV;

    foreach $Start_Dir (@ARGV) {
        delete $Future{$Start_Dir};

        print &quot;\n&lt;&lt;Modules from $Start_Dir&gt;&gt;\n\n&quot;
            if $opt_v;

        next unless ($dev,$ino) = stat($Start_Dir);
        next if $visited{$dev,$ino}++;
        next unless $opt_a || $Start_Dir =~ m!^/!;

        find(\&amp;wanted, $Start_Dir);
    }
    exit;
}

# calculate module name from file and directory
sub modname {
    local $_ = $File::Find::name;

    if (index($_, $Start_Dir . '/') == 0) {
        substr($_, 0, 1+length($Start_Dir)) = '';
    }

    s { /              }    {::}gx;
    s { \.p(m|od)$     }    {}x;

    return $_;
}

# decide if this is a module we want
sub wanted {
    if ( $Future{$File::Find::name} ) {
        warn &quot;\t(Skipping $File::Find::name, qui venit in futuro.)\n&quot;
            if 0 and $opt_v;
        $File::Find::prune = 1;
        return;
    }
    return unless /\.pm$/ &amp;&amp; -f;
    $Module = &amp;modname;
    # skip obnoxious modules
    if ($Module =~ /^CPAN(\Z|::)/) {
        warn(&quot;$Module -- skipping because it misbehaves\n&quot;);
        return;
    }

    my    $file = $_;

    unless (open(POD, &quot;&lt; $file&quot;)) {
        warn &quot;\tcannot open $file: $!&quot;;
            # if $opt_w;
        return 0;
    }

    $: = &quot; -:&quot;;

    local $/ = '';
    local $_;
    while (&lt;POD&gt;) {
        if (/=head\d\s+NAME/) {
            chomp($_ = &lt;POD&gt;);
            s/^.*?-\s+//s;
            s/\n/ /g;
            #write;
            my $v;
            if (defined ($v = getversion($Module))) {
                print &quot;$Module ($v) &quot;;
            } else {
                print &quot;$Module &quot;;
            }
            print &quot;- $_\n&quot;;
            return 1;
        }
    }

    warn &quot;\t(MISSING DESC FOR $File::Find::name)\n&quot;
        if $opt_w;

    return 0;
}

# run Perl to load the module and print its verson number, redirecting
# errors to /dev/null
sub getversion {
    my $mod = shift;

    my $vers = `$^X -m$mod -e 'print \$${mod}::VERSION' 2&gt;/dev/null`;
    $vers =~ s/^\s*(.*?)\s*$/$1/; # remove stray whitespace
    return ($vers || undef);
}

format  =
^&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;~~^&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;
$Module,        $_
.<a class="indexterm" name="ch12-idx-1000005325-0"></A
><a class="indexterm" name="ch12-idx-1000005325-1"></A
><a class="indexterm" name="ch12-idx-1000005325-2"></A
></PRE
></DIV
><i class="comment"></I
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch12_19.htm" title="12.18. Example: Module Template"><img src="../gifs/txtpreva.gif" alt="Previous: 12.18. Example: Module Template" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="chapter" href="ch13_01.htm" title="13. Classes, Objects, and Ties"><img src="../gifs/txtnexta.gif" alt="Next: 13. Classes, Objects, and Ties" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">12.18. Example: Module Template</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">13. Classes, Objects, and Ties</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
