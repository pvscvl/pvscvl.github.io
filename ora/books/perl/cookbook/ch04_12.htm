<html><head>
<title>Recipe 4.11. Processing Multiple Elements of an Array</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:31:57Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch04_01.htm" title="4. Arrays"><link rel="prev" href="ch04_11.htm" title="4.10. Reversing an Array"><link rel="next" href="ch04_13.htm" title="4.12. Finding the First List Element That Passes a Test"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch04_11.htm" title="4.10. Reversing an Array"><img src="../gifs/txtpreva.gif" alt="Previous: 4.10. Reversing an Array" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch04_01.htm" title="4. Arrays">Chapter 4<br>Arrays</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch04_13.htm" title="4.12. Finding the First List Element That Passes a Test"><img src="../gifs/txtnexta.gif" alt="Next: 4.12. Finding the First List Element That Passes a Test" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch04-chap04_processing_0">4.11. Processing Multiple Elements of an Array</A
></H2
><div class="sect2"><h3 class="sect2"><a class="title" name="ch04-pgfId-929">Problem <a class="indexterm" name="ch04-idx-1000006694-0"></A
><a class="indexterm" name="ch04-idx-1000006694-1"></A
></A
></H3
><p class="para">You want to <code class="literal">pop</CODE
><a class="indexterm" name="ch04-idx-1000006708-0"></A
><a class="indexterm" name="ch04-idx-1000006708-1"></A
> or <code class="literal">shift</CODE
> multiple elements at a time.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch04-pgfId-935">Solution</A
></H3
><p class="para">Use <code class="literal">splice</CODE
>:<a class="indexterm" name="ch04-idx-1000006707-0"></A
></P
><pre class="programlisting"># remove $N elements from front of @ARRAY (shift $N)
@FRONT = splice(@ARRAY, 0, $N);

# remove $N elements from the end of the array (pop $N)
@END = splice(@ARRAY, -$N);</PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch04-pgfId-951">Discussion</A
></H3
><p class="para">It's often convenient to wrap these as functions:</P
><pre class="programlisting">sub shift2 (\@) {
    return splice(@{$_[0]}, 0, 2);
}

sub pop2 (\@) {
    return splice(@{$_[0]}, -2);
}</PRE
><p class="para">This makes their behavior more apparent when you use them:</P
><pre class="programlisting">@friends = qw(Peter Paul Mary Jim Tim);
($this, $that) = shift2(@friends);
# $this contains Peter, $that has Paul, and
# @friends has Mary, Jim, and Tim

@beverages = qw(Dew Jolt Cola Sprite Fresca);
@pair = pop2(@beverages);
# $pair[0] contains Sprite, $pair[1] has Fresca,
# and @beverages has (Dew, Jolt, Cola)</PRE
><p class="para"><code class="literal">splice</CODE
> returns the elements removed from the array, so <code class="literal">shift2</CODE
> replaces the first two elements in <code class="literal">@ARRAY</CODE
> with nothing (i.e., deletes them) and returns the two elements it deleted. In <code class="literal">pop2</CODE
>, the last two elements at end of the array are removed and returned.</P
><p class="para">These two functions are prototyped to take an array reference as their argument to better mimic the built-in <code class="literal">shift</CODE
> and <code class="literal">pop</CODE
> functions. The caller doesn't pass in an explicit reference using a backslash. Instead, the compiler, having seen the array reference prototype, arranges to pass the array by reference anyway. Advantages to this approach include efficiency, transparency, and compile-time parameter checking. One disadvantage is that the thing passed in must look like a real array with a leading <code class="literal">@</CODE
> sign, not just a scalar containing an array reference. If it did, you'd have to prepend an <code class="literal">@</CODE
>, making it less transparent:</P
><pre class="programlisting">$line[5] = \@list;
@got = pop2( @{ $line[5] } );</PRE
><p class="para">This is another example of where a proper array and not a mere list is called for. The <code class="literal">\@</CODE
> prototype requires that whatever goes in that argument slot be an array. <code class="literal">$line[5]</CODE
> isn't an array, but an array reference. That's why we need the "extra" <code class="literal">@</CODE
> sign.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch04-pgfId-1001">See Also</A
></H3
><p class="para">The <code class="literal">splice</CODE
> function in <em class="emphasis">perlfunc </EM
>(1) and <a class="olink" href="../prog/ch03_01.htm">Chapter 3</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
>; the "Prototypes" sections of <i class="filename">perlsub </I
>(1) and <a class="olink" href="../prog/ch02_01.htm">Chapter 2</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
>; we use <code class="literal">splice</CODE
> in <a class="xref" href="ch04_10.htm" title="Appending One Array to Another">Recipe 4.9</A
> <code class="literal"></CODE
><a class="indexterm" name="ch04-idx-1000007437-0"></A
><a class="indexterm" name="ch04-idx-1000007437-1"></A
><a class="indexterm" name="ch04-idx-1000007438-0"></A
><a class="indexterm" name="ch04-idx-1000007438-1"></A
><a class="indexterm" name="ch04-idx-1000007438-2"></A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch04_11.htm" title="4.10. Reversing an Array"><img src="../gifs/txtpreva.gif" alt="Previous: 4.10. Reversing an Array" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch04_13.htm" title="4.12. Finding the First List Element That Passes a Test"><img src="../gifs/txtnexta.gif" alt="Next: 4.12. Finding the First List Element That Passes a Test" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">4.10. Reversing an Array</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">4.12. Finding the First List Element That Passes a Test</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
