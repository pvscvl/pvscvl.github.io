<html><head>
<title>Recipe 19.6. Executing Commands Without Shell Escapes</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:45:35Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch19_01.htm" title="19. CGI Programming"><link rel="prev" href="ch19_06.htm" title="19.5. Making CGI Scripts Efficient"><link rel="next" href="ch19_08.htm" title="19.7. Formatting Lists and Tables with HTML Shortcuts"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name="srchmap"index.html><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch19_06.htm" title="19.5. Making CGI Scripts Efficient"><img src="../gifs/txtpreva.gif" alt="Previous: 19.5. Making CGI Scripts Efficient" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch19_01.htm" title="19. CGI Programming">Chapter 19<br>CGI Programming</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch19_08.htm" title="19.7. Formatting Lists and Tables with HTML Shortcuts"><img src="../gifs/txtnexta.gif" alt="Next: 19.7. Formatting Lists and Tables with HTML Shortcuts" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch19-13007">19.6. Executing Commands Without Shell Escapes</A
></H2
><div class="sect2"><h3 class="sect2"><a class="title" name="ch19-pgfId-512">Problem<a class="indexterm" name="ch19-idx-1000005448-0"></A
><a class="indexterm" name="ch19-idx-1000005448-1"></A
><a class="indexterm" name="ch19-idx-1000005448-2"></A
><a class="indexterm" name="ch19-idx-1000005448-3"></A
></A
></H3
><p class="para">You need to use a user's input as part of a command, but you don't want to allow the user to make the shell run other commands or look at other files. If you just blindly call the <code class="literal">system</CODE
><a class="indexterm" name="ch19-idx-1000005581-0"></A
> function or <a class="indexterm" name="ch19-idx-1000005583-0"></A
><a class="indexterm" name="ch19-idx-1000005583-1"></A
>backticks on a single string containing a command line, the shell might be used to run the command. This would be unsafe.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch19-pgfId-518">Solution</A
></H3
><p class="para">Unlike its single-argument version, the list form of the <code class="literal">system</CODE
> function is safe from shell escapes. When the command's arguments involve user input from a form, never use this:</P
><pre class="programlisting">system(&quot;command $input @files&quot;);            # UNSAFE</PRE
><p class="para">Write it this way instead:</P
><pre class="programlisting">system(&quot;command&quot;, $input, @files);          # safer</PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch19-pgfId-530">Discussion</A
></H3
><p class="para">Because Perl was designed as a glue language, it's easy to use it to call other programs &nbsp;-  too easy, in some cases.</P
><p class="para">If you're merely trying to run a shell command but don't need to capture its output, it's easy enough to call <code class="literal">system</CODE
> using its multiple argument form. But what happens if you're using the command in backticks or as part of a piped open? Now you have a real problem, because those don't permit the multiple argument form that <code class="literal">system</CODE
> does. The solution is to manually <code class="literal">fork</CODE
><a class="indexterm" name="ch19-idx-1000005591-0"></A
><a class="indexterm" name="ch19-idx-1000005591-1"></A
> and <code class="literal">exec</CODE
> the child processes on your own. It's more work, but at least stray shell escapes won't be ruining your day.</P
><p class="para">It's safe to use backticks in a CGI script only if the arguments you give the program are purely internally generated, as in:</P
><pre class="programlisting">chomp($now = `date`);</PRE
><p class="para">But if the command within the backticks contains user-supplied input, perhaps like this:</P
><pre class="programlisting">@output = `grep $input @files`;</PRE
><p class="para">you have to be much more careful.</P
><pre class="programlisting">die &quot;cannot fork: $!&quot; unless defined ($pid = open(SAFE_KID, &quot;|-&quot;));
if ($pid == 0) {
    exec('grep', $input, @files) or die &quot;can't exec grep: $!&quot;;
} else {
    @output = &lt;SAFE_KID&gt;;
    close SAFE_KID;                 # $? contains status
}</PRE
><p class="para">This works because <code class="literal">exec</CODE
>, like <code class="literal">system</CODE
>, permits a calling convention that's proof against shell escapes. When passed a list, no shell is called, and so no escapes can occur.</P
><p class="para">Similar circumlocutions are needed when using <code class="literal">open</CODE
> to start up a command. Here's a safe backtick or piped open for read. Instead of using this unsafe code:</P
><pre class="programlisting">open(KID_TO_READ, &quot;$program @options @args |&quot;);    # UNSAFE</PRE
><p class="para">Use this more complicated but safer code:</P
><pre class="programlisting"># add error processing as above
die &quot;cannot fork: $!&quot; unless defined($pid = open(KID_TO_READ, &quot;-|&quot;));

if ($pid) {   # parent
   while (&lt;KID_TO_READ&gt;) {
       # do something interesting
   }
   close(KID_TO_READ)               or warn &quot;kid exited $?&quot;;

} else {      # child
   # reconfigure, then
   exec($program, @options, @args)  or die &quot;can't exec program: $!&quot;;
}</PRE
><p class="para">Here's a safe piped open for writing. Instead of using this unsafe code:</P
><pre class="programlisting">open(KID_TO_WRITE, &quot;|$program $options @args&quot;);   # UNSAFE</PRE
><p class="para">Use this more complicated but safer code:</P
><pre class="programlisting">$pid = open(KID_TO_WRITE, &quot;|-&quot;);
die &quot;cannot fork: $!&quot; unless defined($pid = open(KID_TO_WRITE, &quot;|-&quot;));
$SIG{ALRM} = sub { die &quot;whoops, $program pipe broke&quot; };

if ($pid) {  # parent
   for (@data) { print KID_TO_WRITE $_ }
   close(KID_TO_WRITE)              or warn &quot;kid exited $?&quot;;

} else {     # child
   # reconfigure, then
   exec($program, @options, @args)  or die &quot;can't exec program: $!&quot;;
}
</PRE
><p class="para">At the point where the comment in the code says <code class="literal">reconfigure,</CODE
> <code class="literal">then</CODE
> you can put in any extra security measures you'd like. You're in the child process now, where changes won't propagate back to the parent. You can change environment variables, reset temporary user or group ID values, change directories or umasks, etc.</P
><p class="para">All this doesn't help you, of course, if your <code class="literal">system</CODE
> call runs a setuid program that can be exploited with the data you give it. The mail program <em class="emphasis">sendmail</EM
> is a setuid program commonly run from CGI scripts. Know the risks before you call <em class="emphasis">sendmail</EM
> or any other setuid program.<a class="indexterm" name="ch19-idx-1000005450-0"></A
><a class="indexterm" name="ch19-idx-1000005450-1"></A
><a class="indexterm" name="ch19-idx-1000005450-2"></A
><a class="indexterm" name="ch19-idx-1000005450-3"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch19-pgfId-632">See Also</A
></H3
><p class="para">The <code class="literal">system</CODE
>, <code class="literal">exec</CODE
>, and <code class="literal">open</CODE
> functions in <a class="olink" href="../prog/ch03_01.htm">Chapter 3</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
> and in <i class="filename">perlfunc </I
>(1); the section on 
<a class="olink" href="../prog/ch06_03.htm#PERL2-CH-6-SECT-3.1.3">"Cooperating with Strangers"</A
> in <a class="olink" href="../prog/ch06_01.htm">Chapter 6</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
>; <i class="filename">perlsec </I
>(1); <a class="xref" href="ch16_02.htm" title="Gathering Output from a Program">Recipe 16.1</A
>; <a class="xref" href="ch16_03.htm" title="Running Another Program">Recipe 16.2</A
>; <a class="xref" href="ch16_04.htm" title="Replacing the Current Program with a Different One">Recipe 16.3</A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch19_06.htm" title="19.5. Making CGI Scripts Efficient"><img src="../gifs/txtpreva.gif" alt="Previous: 19.5. Making CGI Scripts Efficient" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch19_08.htm" title="19.7. Formatting Lists and Tables with HTML Shortcuts"><img src="../gifs/txtnexta.gif" alt="Next: 19.7. Formatting Lists and Tables with HTML Shortcuts" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">19.5. Making CGI Scripts Efficient</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">19.7. Formatting Lists and Tables with HTML Shortcuts</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
