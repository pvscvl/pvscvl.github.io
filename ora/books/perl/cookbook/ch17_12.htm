<html><head>
<title>Recipe 17.11. Forking Servers</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:44:36Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch17_01.htm" title="17. Sockets"><link rel="prev" href="ch17_11.htm" title="17.10. Writing Bidirectional Clients"><link rel="next" href="ch17_13.htm" title="17.12. Pre-Forking Servers"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch17_11.htm" title="17.10. Writing Bidirectional Clients"><img src="../gifs/txtpreva.gif" alt="Previous: 17.10. Writing Bidirectional Clients" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch17_01.htm" title="17. Sockets">Chapter 17<br>Sockets</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch17_13.htm" title="17.12. Pre-Forking Servers"><img src="../gifs/txtnexta.gif" alt="Next: 17.12. Pre-Forking Servers" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch17-41561">17.11. Forking Servers</A
></H2
><div class="sect2"><h3 class="sect2"><a class="title" name="ch17-pgfId-1224">Problem<a class="indexterm" name="ch17-idx-1000004806-0"></A
><a class="indexterm" name="ch17-idx-1000004806-1"></A
><a class="indexterm" name="ch17-idx-1000004806-2"></A
></A
></H3
><p class="para">You want to write a server that forks a subprocess to handle each new client.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch17-pgfId-1230">Solution</A
></H3
><p class="para">Fork in the <code class="literal">accept</CODE
> loop, and use a <code class="literal">$SIG{CHLD}</CODE
> handler to reap the children.</P
><pre class="programlisting"># set up the socket SERVER, bind and listen ...
use POSIX qw(:sys_wait_h);

sub REAPER {
    1 until (-1 == waitpid(-1, WNOHANG));
    $SIG{CHLD} = \&amp;REAPER;                 # unless $] &gt;= 5.002
}

$SIG{CHLD} = \&amp;REAPER;

while ($hisaddr = accept(CLIENT, SERVER)) {
    next if $pid = fork;                    # parent
    die &quot;fork: $!&quot; unless defined $pid;     # failure
    # otherwise child
    close(SERVER);                          # no use to child
    # ... do something
    exit;                                   # child leaves
} continue { 
    close(CLIENT);                          # no use to parent
}</PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch17-pgfId-1274">Discussion</A
></H3
><p class="para"><a class="indexterm" name="ch17-idx-1000004821-0"></A
>This approach is very common for SOCK_STREAM servers in the Internet and Unix domains. Each incoming connection gets a cloned server of its own. The model is:</P
><ol class="orderedlist"><li class="listitem"><p class="para"><a class="listitem" name="ch17-pgfId-1278"></A
>Accept a stream connection.</P
></LI
><li class="listitem"><p class="para"><a class="listitem" name="ch17-pgfId-1280"></A
>Fork off a duplicate to communicate over that stream.</P
></LI
><li class="listitem"><p class="para"><a class="listitem" name="ch17-pgfId-1282"></A
>Return to 1.</P
></LI
></OL
><p class="para">This technique isn't used with SOCK_DGRAM sockets because their method of communication is different. The time it takes to fork makes the forking model impractical for UDP-style servers. Instead of working with a series of stateful, long-running connections, SOCK_DGRAM servers work with a bunch of sporadic datagrams, usually statelessly. With them, the model must become:</P
><ol class="orderedlist"><li class="listitem"><p class="para"><a class="listitem" name="ch17-pgfId-1286"></A
>Read a datagram.</P
></LI
><li class="listitem"><p class="para"><a class="listitem" name="ch17-pgfId-1288"></A
>Handle the datagram.</P
></LI
><li class="listitem"><p class="para"><a class="listitem" name="ch17-pgfId-1290"></A
>Return to 1.</P
></LI
></OL
><p class="para">The child process deals with the new connection. Because it will never use the SERVER socket, we immediately close it. This is partly to keep a tidy house, but mainly so that the server socket is closed when the parent (server) process exits. If the children do not close the SERVER socket, the operating system considers the socket still open even when the parent dies. For more on this, see <a class="xref" href="ch17_10.htm" title="Closing a Socket After Forking">Recipe 17.9</A
>.</P
><p class="para"><code class="literal">%SIG</CODE
> ensures that we clean up after our children when they exit. See <a class="xref" href="ch16_01.htm" title="Process Management and Communication">Chapter 16, <cite class="chapter">Process Management and Communication</CITE
></A
> for details.<a class="indexterm" name="ch17-idx-1000004817-0"></A
><a class="indexterm" name="ch17-idx-1000004817-1"></A
><a class="indexterm" name="ch17-idx-1000004817-2"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch17-pgfId-1298">See Also</A
></H3
><p class="para">The 
<a class="olink" href="../prog/ch03_040.htm#PERL2-CMD-FORK">&#13;
<code class="literal">fork</CODE
></A
> and 
<a class="olink" href="../prog/ch03_004.htm#PERL2-CMD-ACCEPT">&#13;
<code class="literal">accept</CODE
></A
> functions in <a class="olink" href="../prog/ch03_01.htm">Chapter 3</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
> and in <i class="filename">perlfunc </I
>(1); <a class="xref" href="ch16_16.htm" title="Installing a Signal Handler">Recipe 16.15</A
>; <a class="xref" href="ch16_20.htm" title="Avoiding Zombie Processes">Recipe 16.19</A
>; <a class="xref" href="ch17_13.htm" title="Pre-Forking Servers">Recipe 17.12</A
>; <a class="xref" href="ch17_14.htm" title="Non-Forking Servers">Recipe 17.13</A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch17_11.htm" title="17.10. Writing Bidirectional Clients"><img src="../gifs/txtpreva.gif" alt="Previous: 17.10. Writing Bidirectional Clients" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch17_13.htm" title="17.12. Pre-Forking Servers"><img src="../gifs/txtnexta.gif" alt="Next: 17.12. Pre-Forking Servers" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">17.10. Writing Bidirectional Clients</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">17.12. Pre-Forking Servers</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
