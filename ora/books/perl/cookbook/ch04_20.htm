<html><head>
<title>Recipe 4.19. Program: permute</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:32:17Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch04_01.htm" title="4. Arrays"><link rel="prev" href="ch04_19.htm" title="4.18. Program: words"><link rel="next" href="ch05_01.htm" title="5. Hashes"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch04_19.htm" title="4.18. Program: words"><img src="../gifs/txtpreva.gif" alt="Previous: 4.18. Program: words" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch04_01.htm" title="4. Arrays">Chapter 4<br>Arrays</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="chapter" href="ch05_01.htm" title="5. Hashes"><img src="../gifs/txtnexta.gif" alt="Next: 5. Hashes" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch04-25495">4.19. Program: permute</A
></H2
><div class="sect2"><h3 class="sect2"><a class="title" name="ch04-pgfId-1867">Problem<a class="indexterm" name="ch04-idx-1000006794-0"></A
><a class="indexterm" name="ch04-idx-1000006794-1"></A
><a class="indexterm" name="ch04-idx-1000006794-2"></A
><a class="indexterm" name="ch04-idx-1000006794-3"></A
></A
></H3
><p class="para">Have you ever wanted to generate all possible permutations of an array or to execute some code for every possible permutation? For example:</P
><pre class="programlisting">% echo man bites dog | permute
<code class="userinput"><b><code class="replaceable"><i>dog bites man</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>bites dog man</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>dog man bites</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>man dog bites</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>bites man dog</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>man bites dog</I
></CODE
></B
></CODE
></PRE
><p class="para">The number of permutations of a set is the factorial of the size of the set. This grows big extremely fast, so you don't want to run it on many permutations:</P
><pre class="programlisting">Set Size            Permutations
1                   1
2                   2
3                   6
4                   24
5                   120
6                   720
7                   5040
8                   40320
9                   362880
10                  3628800
11                  39916800
12                  479001600
13                  6227020800
14                  87178291200
15                  1307674368000</PRE
><p class="para">Doing something for each alternative takes a correspondingly large amount of time. In fact, factorial algorithms exceed the number of particles in the universe with very small inputs. The factorial of 500 is greater than ten raised to the <em class="emphasis">thousandth</EM
> power!</P
><pre class="programlisting">use Math::BigInt;
    sub factorial {
    my $n = shift;
    my $s = 1;
    $s *= $n-- while $n &gt; 0;
    return $s;
}
print factorial(Math::BigInt-&gt;new(&quot;500&quot;));
<code class="userinput"><b><code class="replaceable"><i>+1220136... (1035 digits total)</I
></CODE
></B
></CODE
></PRE
><p class="para">The two solutions that follow differ in the order of the permutations they return.</P
><p class="para">The solution in <a class="xref" href="#ch04-20616" title="tsc-permute">Example 4.3</A
> uses a classic list permutation algorithm used by Lisp hackers. It's relatively straightforward but makes unnecessary copies. It's also hardwired to do nothing but print out its permutations.</P
><div class="example"><h4 class="example"><a class="title" name="ch04-20616">Example 4.3: tsc-permute</A
></H4
><pre class="programlisting">#!/usr/bin/perl -n
# <a class="indexterm" name="ch04-idx-1000006817-0"></A
>tsc_permute: permute each word of input
permute([split], []);
sub permute {
    my @items = @{ $_[0] };
    my @perms = @{ $_[1] };
    unless (@items) {
        print &quot;@perms\n&quot;;
    } else {
        my(@newitems,@newperms,$i);
        foreach $i (0 .. $#items) {
            @newitems = @items;
            @newperms = @perms;
            unshift(@newperms, splice(@newitems, $i, 1));
            permute([@newitems], [@newperms]);
        }
    }
}</PRE
></DIV
><p class="para">The solution in <a class="xref" href="#ch04-38739" title="mjd-permute">Example 4.4</A
>, provided by Mark-Jason <a class="indexterm" name="ch04-idx-1000006795-0"></A
>Dominus, is faster (by around 25%) and more elegant. Rather than precalculate all permutations, his code generates the <em class="emphasis">n </EM
>th particular permutation. It is elegant in two ways. First, it avoids recursion except to calculate the factorial, which the permutation algorithm proper does not use. Second, it generates a permutation of integers rather than permute the actual data set.</P
><p class="para">He also uses a time-saving technique called <em class="emphasis">memoizing</EM
><a class="indexterm" name="ch04-idx-1000006796-0"></A
>. The idea is that a function that always returns a particular answer when called with a particular argument memorizes that answer. That way, the next time it's called with the same argument, no further calculations are required. The <code class="literal">factorial</CODE
> function uses a private array <code class="literal">@fact</CODE
> to remember previously calculated factorial values as described in <a class="xref" href="ch10_04.htm" title="Creating Persistent Private Variables">Recipe 10.3</A
>.</P
><p class="para">You call <code class="literal">n2perm</CODE
> with two arguments: the permutation number to generate (from <code class="literal">0</CODE
> to <code class="literal">factorial(N)</CODE
>, where N is the size of your array) and the subscript of the array's last element. The <code class="literal">n2perm</CODE
> function calculates directions for the permutation in the <code class="literal">n2pat</CODE
> subroutine. Then it converts those directions into a permutation of integers in the <code class="literal">pat2perm</CODE
> subroutine. The directions are a list like <code class="literal">(0</CODE
> <code class="literal">2</CODE
> <code class="literal">0</CODE
> <code class="literal">1</CODE
> <code class="literal">0)</CODE
>, which means: "Splice out the 0th element, then the second element from the remaining list, then the 0th element, then the first, then the 0th."</P
><div class="example"><h4 class="example"><a class="title" name="ch04-38739">Example 4.4: mjd-permute</A
></H4
><pre class="programlisting">#!/usr/bin/perl -w
# <a class="indexterm" name="ch04-idx-1000006822-0"></A
>mjd_permute: permute each word of input
use strict;

while (&lt;&gt;) {
    my @data = split;
    my $num_permutations = factorial(scalar @data);
    for (my $i=0; $i &lt; $num_permutations; $i++) {
        my @permutation = @data[n2perm($i, $#data)];
        print &quot;@permutation\n&quot;;
    }
}

# Utility function: factorial with memoizing
BEGIN {
  my @fact = (1);
  sub factorial($) {
      my $n = shift;
      return $fact[$n] if defined $fact[$n];
      $fact[$n] = $n * factorial($n - 1);
  }
}

# n2pat($N, $len) : produce the $N-th pattern of length $len
sub n2pat {
    my $i   = 1;
    my $N   = shift;
    my $len = shift;
    my @pat;
    while ($i &lt;= $len + 1) {   # Should really be just while ($N) { ...
        push @pat, $N % $i;
        $N = int($N/$i);
        $i++;
    }
    return @pat;
}

# pat2perm(@pat) : turn pattern returned by <code class="replaceable"><i>n2pat()</I
></CODE
> into
# permutation of integers.  XXX: splice is already O(N)
sub pat2perm {
    my @pat    = @_;
    my @source = (0 .. $#pat);
    my @perm;
    push @perm, splice(@source, (pop @pat), 1) while @pat;
    return @perm;
}

# n2perm($N, $len) : generate the Nth permutation of $len objects
sub n2perm {
    pat2perm(n2pat(@_));
}</PRE
></DIV
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch04-pgfId-2099">See Also</A
></H3
><p class="para"><code class="literal">unshift</CODE
> and <code class="literal">splice</CODE
> in <em class="emphasis">perlfunc </EM
>(1) or <a class="olink" href="../prog/ch03_01.htm">Chapter 3</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
>; <a class="indexterm" name="ch04-idx-1000006798-0"></A
><a class="indexterm" name="ch04-idx-1000006798-1"></A
><a class="indexterm" name="ch04-idx-1000006798-2"></A
><a class="indexterm" name="ch04-idx-1000006798-3"></A
>the sections discussing closures in <em class="emphasis">perlsub</EM
> (1) and <em class="emphasis">perlref</EM
> (1) and <a class="olink" href="../prog/ch02_01.htm">Chapter 2</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
>; <a class="xref" href="ch02_08.htm" title="Generating Random Numbers">Recipe 2.7</A
>; <a class="xref" href="ch10_04.htm" title="Creating Persistent Private Variables">Recipe 10.3</A
><a class="indexterm" name="ch04-idx-1000006570-0"></A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch04_19.htm" title="4.18. Program: words"><img src="../gifs/txtpreva.gif" alt="Previous: 4.18. Program: words" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="chapter" href="ch05_01.htm" title="5. Hashes"><img src="../gifs/txtnexta.gif" alt="Next: 5. Hashes" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">4.18. Program: words</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">5. Hashes</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
