<html><head>
<title>Recipe 4.1. Specifying a List In Your Program</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:31:01Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch04_01.htm" title="4. Arrays"><link rel="prev" href="ch04_01.htm" title="4.0. Introduction"><link rel="next" href="ch04_03.htm" title="4.2. Printing a List with Commas"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch04_01.htm" title="4.0. Introduction"><img src="../gifs/txtpreva.gif" alt="Previous: 4.0. Introduction" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch04_01.htm" title="4. Arrays">Chapter 4<br>Arrays</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch04_03.htm" title="4.2. Printing a List with Commas"><img src="../gifs/txtnexta.gif" alt="Next: 4.2. Printing a List with Commas" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch04-chap04_specifying_0">4.1. Specifying a List In Your Program</A
></H2
><div class="sect2"><h3 class="sect2"><a class="title" name="ch04-pgfId-63">Problem <a class="indexterm" name="ch04-idx-1000006572-0"></A
><a class="indexterm" name="ch04-idx-1000006572-1"></A
><a class="indexterm" name="ch04-idx-1000006572-2"></A
></A
></H3
><p class="para">You want to include a list in your program. This is how you initialize arrays.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch04-pgfId-69">Solution</A
></H3
><p class="para">You can write out a <a class="indexterm" name="ch04-idx-1000006588-0"></A
><a class="indexterm" name="ch04-idx-1000006588-1"></A
><a class="indexterm" name="ch04-idx-1000006588-2"></A
>comma-separated list of elements:</P
><pre class="programlisting">@a = (&quot;quick&quot;, &quot;brown&quot;, &quot;fox&quot;);</PRE
><p class="para">If you have a lot of single-word elements, use the <code class="literal">qw()</CODE
><a class="indexterm" name="ch04-idx-1000006590-0"></A
> operator:</P
><pre class="programlisting">@a = qw(Why are you teasing me?);</PRE
><p class="para">If you have a lot of multi-word elements, use a here document and extract lines:</P
><pre class="programlisting">@lines = (&lt;&lt;&quot;END_OF_HERE_DOC&quot; =~ m/^\s*(.+)/gm);
    The boy stood on the burning deck,
    It was as hot as glass.
END_OF_HERE_DOC</PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch04-pgfId-91">Discussion</A
></H3
><p class="para">The first technique is the most commonly used, often because only small arrays are normally initialized as program literals. Initializing a large array would fill your program with values and make it hard to read, so such arrays are either initialized in a separate library file (see <a class="xref" href="ch12_01.htm" title="Packages, Libraries, and Modules">Chapter 12, <cite class="chapter">Packages, Libraries, and Modules</CITE
></A
>), or the values are simply read from a file:</P
><pre class="programlisting">@bigarray = ();
open(DATA, &quot;&lt; mydatafile&quot;)       or die &quot;Couldn't read from datafile: $!\n&quot;;
while (&lt;DATA&gt;) {
    chomp;
    push(@bigarray, $_);
}</PRE
><p class="para">The second technique uses the <code class="literal">qw()</CODE
> operator, one of the quoting operators. Along with <code class="literal">q()</CODE
><a class="indexterm" name="ch04-idx-1000006593-0"></A
><a class="indexterm" name="ch04-idx-1000006593-1"></A
><a class="indexterm" name="ch04-idx-1000006593-2"></A
><a class="indexterm" name="ch04-idx-1000006593-3"></A
>, <code class="literal">qq()</CODE
>, and <code class="literal">qx()</CODE
>, <code class="literal">qw()</CODE
> <a class="indexterm" name="ch04-idx-1000006598-0"></A
><a class="indexterm" name="ch04-idx-1000006598-1"></A
><a class="indexterm" name="ch04-idx-1000006598-2"></A
><a class="indexterm" name="ch04-idx-1000006598-3"></A
>provides another way to quote values for your program. <code class="literal">q()</CODE
> behaves like single quotes, so these two lines are equivalent:</P
><pre class="programlisting">$banner = 'The Mines of Moria';
$banner = q(The Mines of Moria);</PRE
><p class="para">Similarly, <code class="literal">qq()</CODE
> behaves like double quotes:</P
><pre class="programlisting">$name   =  &quot;Gandalf&quot;;
$banner = &quot;Speak, $name, and enter!&quot;;
$banner = qq(Speak, $name, and welcome!);</PRE
><p class="para"><a class="indexterm" name="ch04-idx-1000006600-0"></A
><a class="indexterm" name="ch04-idx-1000006600-1"></A
>And <code class="literal">qx()</CODE
> is almost exactly like backticks; that is, it runs a command through the shell complete with variable interpolation and backslash escapes. You can't stop interpolation with backticks, but you can with <code class="literal">qx</CODE
>. If you don't want Perl variables to be expanded, you can use a single-quote delimiter on <code class="literal">qx</CODE
> to suppress this:</P
><pre class="programlisting">$his_host   = 'www.perl.com';
$host_info  = `nslookup $his_host`; # expand Perl variable

$perl_info  = qx(ps $$);            # that's Perl's $$
$shell_info = qx'ps $$';            # that's the new shell's $$</PRE
><p class="para">Whereas <code class="literal">q()</CODE
>, <code class="literal">qq()</CODE
>, and <code class="literal">qx()</CODE
> quote single strings, <code class="literal">qw()</CODE
> quotes a list of single-word strings by splitting its argument on whitespace, without variable interpolation. These are all the same:</P
><pre class="programlisting">@banner = ('Costs', 'only', '$4.95');
@banner = qw(Costs only $4.95);
@banner = split(' ', 'Costs only $4.95');</PRE
><p class="para">All quoting operators behave like regular expression matches, in that you can select your quote delimiters, including paired brackets. All four kinds of brackets (angle, square, curly, and round ones) nest properly. That means you can easily use parentheses or braces (or the other two) without fear, provided that they match up:</P
><pre class="programlisting">@brax   = qw! ( ) &lt; &gt; { } [ ] !;
@rings  = qw(Nenya Narya Vilya);
@tags   = qw&lt;LI TABLE TR TD A IMG H1 P&gt;;
@sample = qw(The vertical bar (|) looks and behaves like a pipe.);</PRE
><p class="para">If you don't want to change the quoting character, use a backslash to escape the delimiter in the string:</P
><pre class="programlisting">@banner = qw|The vertical bar (\|) looks and behaves like a pipe.|;</PRE
><p class="para">You may only use <code class="literal">qw()</CODE
> when each separate, space-separated component is an element in the return list. Be careful not to give Columbus four ships instead of three:</P
><pre class="programlisting">@ships  = qw(Ni”a Pinta Santa MarŒa);               # WRONG
@ships  = ('Ni”a', 'Pinta', 'Santa MarŒa');         # right</PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch04-pgfId-163">See Also</A
></H3
><p class="para">The "List Value Constructors" section of <i class="filename">perldata </I
>(1); the <a class="olink" href="../prog/ch02_03.htm#PERL2-CH-2-SECT-3.1">"List Values and Arrays"</A
> section of <a class="olink" href="../prog/ch02_01.htm">Chapter 2</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
>; the "Quote and Quote-Like Operators" section of <i class="filename">perlop </I
>(1); the <code class="literal">s///</CODE
> operator in <i class="filename">perlop </I
>(1) and <a class="olink" href="../prog/ch02_01.htm">Chapter 2</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
><a class="indexterm" name="ch04-idx-1000006580-0"></A
><a class="indexterm" name="ch04-idx-1000006580-1"></A
><a class="indexterm" name="ch04-idx-1000006580-2"></A
><a class="indexterm" name="ch04-idx-1000006580-3"></A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch04_01.htm" title="4.0. Introduction"><img src="../gifs/txtpreva.gif" alt="Previous: 4.0. Introduction" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch04_03.htm" title="4.2. Printing a List with Commas"><img src="../gifs/txtnexta.gif" alt="Next: 4.2. Printing a List with Commas" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">4.0. Introduction</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">4.2. Printing a List with Commas</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
