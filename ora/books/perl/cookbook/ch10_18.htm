<html><head>
<title>Recipe 10.17. Program: Sorting Your Mail</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:40:10Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch10_01.htm" title="10. Subroutines"><link rel="prev" href="ch10_17.htm" title="10.16. Nesting Subroutines"><link rel="next" href="ch11_01.htm" title="11. References and Records"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch10_17.htm" title="10.16. Nesting Subroutines"><img src="../gifs/txtpreva.gif" alt="Previous: 10.16. Nesting Subroutines" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch10_01.htm" title="10. Subroutines">Chapter 10<br>Subroutines</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="chapter" href="ch11_01.htm" title="11. References and Records"><img src="../gifs/txtnexta.gif" alt="Next: 11. References and Records" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch10-chap10_program_0">10.17. Program: Sorting Your Mail</A
></H2
><p class="para"><a class="indexterm" name="ch10-idx-1000006301-0"></A
><a class="indexterm" name="ch10-idx-1000006301-1"></A
><a class="indexterm" name="ch10-idx-1000006301-2"></A
>The program in <a class="xref" href="#ch10-24677" title="bysub1">Example 10.1</A
> sorts a mailbox by subject by reading input a paragraph at a time, looking for one with a <code class="literal">&quot;From&quot;</CODE
> at the start of a line. When it finds one, it searches for the subject, strips it of any <code class="literal">&quot;Re:</CODE
> <code class="literal">&quot;</CODE
> marks, and stores its lowercased version in the <code class="literal">@sub</CODE
> array. Meanwhile, the messages themselves are stored in a corresponding <code class="literal">@msgs</CODE
> array. The <code class="literal">$msgno</CODE
> variable keeps track of the message number.</P
><div class="example"><h4 class="example"><a class="title" name="ch10-24677">Example 10.1: bysub1</A
></H4
><pre class="programlisting">#!/usr/bin/perl 
# <a class="indexterm" name="ch10-idx-1000006317-0"></A
>bysub1 - simple sort by subject
my(@msgs, @sub);
my $msgno = -1;
$/ = '';                    # paragraph reads
while (&lt;&gt;) {
    if (/^From/m) {
        /^Subject:\s*(?:Re:\s*)*(.*)/mi;
        $sub[++$msgno] = lc($1) || '';
    }
    $msgs[$msgno] .= $_;
} 
for my $i (sort { $sub[$a] cmp $sub[$b] || $a &lt;=&gt; $b } (0 .. $#msgs)) {
    print $msgs[$i];
}</PRE
></DIV
><p class="para">That <code class="literal">sort</CODE
> is only sorting array indices. If the subjects are the same, <code class="literal">cmp</CODE
> returns 0, so the second part of the <code class="literal">||</CODE
> is taken, which compares the message numbers in the order they originally appeared.</P
><p class="para">If <code class="literal">sort</CODE
> were fed a list like <code class="literal">(0,1,2,3)</CODE
>, that list would get sorted into a different permutation, perhaps <code class="literal">(2,1,3,0)</CODE
>. We iterate across them with a <code class="literal">for</CODE
> loop to print out each message.</P
><p class="para"><a class="xref" href="#ch10-30783" title="bysub2">Example 10.2</A
> shows how an <i class="filename">awk</I
> programmer might code this program, using the <b class="emphasis.bold">-00</B
> switch to read paragraphs instead of lines.</P
><div class="example"><h4 class="example"><a class="title" name="ch10-30783">Example 10.2: bysub2</A
></H4
><pre class="programlisting">#!/usr/bin/perl -n00
# <a class="indexterm" name="ch10-idx-1000004769-0"></A
>bysub2 - awkish sort-by-subject
BEGIN { $msgno = -1 }
$sub[++$msgno] = (/^Subject:\s*(?:Re:\s*)*(.*)/mi)[0] if /^From/m;
$msg[$msgno] .= $_;
END { print @msg[ sort { $sub[$a] cmp $sub[$b] || $a &lt;=&gt; $b } (0 .. $#msg) ] }</PRE
></DIV
><p class="para"><a class="indexterm" name="ch10-idx-1000004764-0"></A
>Perl has kept parallel arrays since its early days. Keeping each message in a hash is a more elegant solution. We'll sort on each field in the hash, by making an anonymous hash as described in <a class="xref" href="ch11_01.htm" title="References and Records">Chapter 11</A
>.</P
><p class="para"><a class="xref" href="#ch10-11145" title="bysub3">Example 10.3</A
> is a program similar in spirit to <a class="xref" href="#ch10-24677" title="bysub1">Example 10.1</A
> and <a class="xref" href="#ch10-30783" title="bysub2">Example 10.2</A
>.</P
><div class="example"><h4 class="example"><a class="title" name="ch10-11145">Example 10.3: bysub3</A
></H4
><pre class="programlisting">#!/usr/bin/perl -00
# bysub3<a class="indexterm" name="ch10-idx-1000004771-0"></A
> - sort by subject using hash records
use strict;
my @msgs = ();
while (&lt;&gt;) {
    push @msgs, {
        SUBJECT =&gt; /^Subject:\s*(?:Re:\s*)*(.*)/mi,
        NUMBER  =&gt; scalar @msgs,   # which msgno this is
        TEXT    =&gt; '',
    } if /^From/m;
    $msgs[-1]{TEXT} .= $_;
} 

for my $msg (sort {     
                        $a-&gt;{SUBJECT} cmp $b-&gt;{SUBJECT} 
                                       || 
                        $a-&gt;{NUMBER}  &lt;=&gt; $b-&gt;{NUMBER} 
                  } @msgs
         )
{
    print $msg-&gt;{TEXT};
} </PRE
></DIV
><p class="para"><a class="indexterm" name="ch10-idx-1000004763-0"></A
>Once we have real hashes, adding further sorting criteria is simple. A common way to sort a folder is subject major, date minor order. The hard part is figuring out how to parse and compare dates. Date::Manip does this, returning a string we can compare; however, the <em class="emphasis">datesort</EM
> program in <a class="xref" href="#ch10-26587" title="datesort (continued)">Example 10.4</A
>, which uses Date::Manip, runs more than 10 times slower than the previous one. Parsing dates in unpredictable formats is extremely slow.</P
><div class="example"><h4 class="example"><a class="title" name="ch10-26587">Example 10.4: datesort (continued)</A
></H4
><pre class="programlisting">#!/usr/bin/perl -00
# <a class="indexterm" name="ch10-idx-1000004780-0"></A
>datesort - sort mbox by subject then date
use strict;
use Date::Manip;
my @msgs = ();
while (&lt;&gt;) {
    next unless /^From/m;
    my $date = '';
    if (/^Date:\s*(.*)/m) {
        ($date = $1) =~ s/\s+\(.*//;  # library hates (MST)
        $date = ParseDate($date);
    } 
    push @msgs, {
        SUBJECT =&gt; /^Subject:\s*(?:Re:\s*)*(.*)/mi,
        DATE    =&gt; $date,
        NUMBER  =&gt; scalar @msgs,
        TEXT    =&gt; '',
    }; 
} continue {
    $msgs[-1]{TEXT} .= $_;
}

for my $msg (sort {     
                        $a-&gt;{SUBJECT} cmp $b-&gt;{SUBJECT} 
                                       || 
                        $a-&gt;{DATE}    cmp $b-&gt;{DATE} 
                                       || 
                        $a-&gt;{NUMBER}  &lt;=&gt; $b-&gt;{NUMBER} 

                  } @msgs
         )
{
    print $msg-&gt;{TEXT};
}</PRE
></DIV
><p class="para"><a class="xref" href="#ch10-26587" title="datesort (continued)">Example 10.4</A
> is written to draw attention to the <code class="literal">continue</CODE
> block. When a loop's end is reached, either because it fell through to that point or got there from a <code class="literal">next</CODE
>, the whole <code class="literal">continue</CODE
> block is executed. It corresponds to the third portion of a three-part <code class="literal">for</CODE
> loop, except that the <code class="literal">continue</CODE
> block isn't restricted to an expression. It's a full block, with separate <a class="indexterm" name="ch10-idx-1000004759-0"></A
><a class="indexterm" name="ch10-idx-1000004759-1"></A
><a class="indexterm" name="ch10-idx-1000004759-2"></A
>statements.</P
><div class="sect2"><h3 class="sect2"><a class="title" name="ch10-pgfId-1000005909">See Also</A
></H3
><p class="para">The <a class="olink" href="../prog/ch03_153.htm#PERL2-CMD-SORT"><code class="literal">sort</CODE
></A
> function in <a class="olink" href="../prog/ch03_01.htm">Chapter 3</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
> and in <i class="filename">perlfunc </I
>(1); the discussion of the <a class="olink" href="../prog/ch02_09.htm#PERL2-CH-2-SECT-9.4"><code class="literal">$/</CODE
></A
> variable in <a class="olink" href="../prog/ch02_01.htm">Chapter 2</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
>, <i class="filename">perlvar </I
>(1), and the Introduction to <a class="xref" href="ch08_01.htm" title="File Contents">Chapter 8, <cite class="chapter">File Contents</CITE
></A
>; <a class="xref" href="ch03_08.htm" title="Parsing Dates and Times from Strings">Recipe 3.7</A
>; <a class="xref" href="ch04_16.htm" title="Sorting a List by Computable Field">Recipe 4.15</A
>; <a class="xref" href="ch05_10.htm" title="Sorting a Hash">Recipe 5.9</A
>; <a class="xref" href="ch11_10.htm" title="Constructing Records">Recipe 11.9</A
> <a class="indexterm" name="ch10-idx-1000004629-0"></A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch10_17.htm" title="10.16. Nesting Subroutines"><img src="../gifs/txtpreva.gif" alt="Previous: 10.16. Nesting Subroutines" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="chapter" href="ch11_01.htm" title="11. References and Records"><img src="../gifs/txtnexta.gif" alt="Next: 11. References and Records" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">10.16. Nesting Subroutines</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">11. References and Records</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
