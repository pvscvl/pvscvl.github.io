<html><head>
<title>Recipe 10.13. Saving Global Values</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:40:02Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch10_01.htm" title="10. Subroutines"><link rel="prev" href="ch10_13.htm" title="10.12. Handling Exceptions"><link rel="next" href="ch10_15.htm" title="10.14. Redefining a Function"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch10_13.htm" title="10.12. Handling Exceptions"><img src="../gifs/txtpreva.gif" alt="Previous: 10.12. Handling Exceptions" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch10_01.htm" title="10. Subroutines">Chapter 10<br>Subroutines</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch10_15.htm" title="10.14. Redefining a Function"><img src="../gifs/txtnexta.gif" alt="Next: 10.14. Redefining a Function" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch10-17529">10.13. Saving Global Values</A
></H2
><div class="sect2"><h3 class="sect2"><a class="title" name="ch10-pgfId-1018">Problem</A
></H3
><p class="para"><a class="indexterm" name="ch10-idx-1000004731-0"></A
><a class="indexterm" name="ch10-idx-1000004731-1"></A
><a class="indexterm" name="ch10-idx-1000004731-2"></A
>You need to temporarily save away the value of a global variable.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch10-pgfId-1024">Solution</A
></H3
><p class="para">Use the <code class="literal">local</CODE
> operator to save a previous global value, automatically restoring it when the current block exits:</P
><pre class="programlisting">$age = 18;          # global variable
if (CONDITION) {
    local $age = 23;
    func();         # sees temporary value of 23
} # restore old value at block exit</PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch10-pgfId-1040">Discussion</A
></H3
><p class="para">Unfortunately, Perl's <code class="literal">local</CODE
> operator does not create a local variable. That's what <code class="literal">my</CODE
> does. Instead, <code class="literal">local</CODE
> merely preserves an existing value for the duration of its enclosing block. Hindsight shows that if <code class="literal">local</CODE
> had been called <i class="firstterm">save_value</I
> instead, much confusion could have been avoided.</P
><p class="para">Still, there are three places where you <em class="emphasis">must</EM
> use <code class="literal">local</CODE
> instead of <code class="literal">my</CODE
>:</P
><ol class="orderedlist"><li class="listitem"><p class="para"><a class="listitem" name="ch10-pgfId-1000004158"></A
>You need to give a global variable a temporary value, especially <code class="literal">$_</CODE
>.</P
></LI
><li class="listitem"><p class="para"><a class="listitem" name="ch10-pgfId-1000004163"></A
>You need to create a local file or directory handle or a local function.</P
></LI
><li class="listitem"><p class="para"><a class="listitem" name="ch10-pgfId-1000004164"></A
>You want to temporarily change just one element of an array or hash.</P
></LI
></OL
><div class="sect3"><h4 class="sect3"><a class="title" name="ch10-pgfId-1000004165">Using local(  ) for temporary values for globals</A
></H4
><p class="para">The first situation is more apt to happen with predefined, built-in variables than it is with user variables. These are often variables that Perl will use as hints for its high-level operations. In particular, any function that uses <code class="literal">$_</CODE
>, implicitly or explicitly, should certainly have a local <code class="literal">$_</CODE
>. This is annoyingly easy to forget to do. See <a class="xref" href="ch13_16.htm" title="Creating Magic Variables with tie">Recipe 13.15</A
> for one solution to this.</P
><p class="para">Here's an example of using a lot of global variables. The <code class="literal">$/</CODE
> variable is a global that implicitly affects the behavior of the readline operator used in <code class="literal">&lt;FH&gt;</CODE
> operations.</P
><pre class="programlisting">$para = get_paragraph(*FH);        # pass filehandle glob 
$para = get_paragraph(\*FH);       # pass filehandle by glob reference
$para = get_paragraph(*IO{FH});    # pass filehandle by IO reference
sub get_paragraph {
    my $fh = shift;  
    local $/ = '';        
    my $paragraph = &lt;$fh&gt;;
    chomp($paragraph);
    return $paragraph;
} </PRE
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="ch10-pgfId-1000004259">Using local(  ) for local handles</A
></H4
><p class="para">The second situation arises when you need a <a class="indexterm" name="ch10-idx-1000006375-0"></A
>local filehandle or directory handle, or, rarely, a local function. You can, in post 5.000 Perls, use one of the standard Symbol, Filehandle, or IO::Handle modules, but this simple typeglob technique still works. For example:</P
><pre class="programlisting">$contents = get_motd();
sub get_motd {
    local *MOTD;
    open(MOTD, &quot;/etc/motd&quot;)        or die &quot;can't open motd: $!&quot;;
    local $/ = undef;  # slurp full file;
    local $_ = &lt;MOTD&gt;;
    close (MOTD);
    return $_;
} </PRE
><p class="para">If you wanted to return the open <a class="indexterm" name="ch10-idx-1000006376-0"></A
>filehandle, you'd use:</P
><pre class="programlisting">return *MOTD;</PRE
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="ch10-pgfId-1000004272">Using local(  ) on parts of aggregates</A
></H4
><p class="para">The third situation almost never occurs. Because the local operator is really a "save value" operator, you can use it to save off just one element of an array or hash, even if that array or hash is itself a lexical!</P
><pre class="programlisting">my @nums = (0 .. 5);
sub first { 
    local $nums[3] = 3.14159;
    second();
}
sub second {
    print &quot;@nums\n&quot;;
} 
second();
<code class="userinput"><b><code class="replaceable"><i>0 1 2 3 4 5</I
></CODE
></B
></CODE
>
first();
<code class="userinput"><b><code class="replaceable"><i>0 1 2 3.14159 4 5</I
></CODE
></B
></CODE
></PRE
><p class="para">The only common use for this kind of thing is for temporary signal handlers.</P
><pre class="programlisting">sub first {
    local $SIG{INT} = 'IGNORE';
    second();
} </PRE
><p class="para">Now while <code class="literal">second()</CODE
> is running, interrupt signals will be ignored. When <code class="literal">first()</CODE
> returns, the previous value of <code class="literal">$SIG{INT}</CODE
> will be automatically restored.</P
><p class="para">Although a lot of old code uses <code class="literal">local</CODE
>, it's definitely something to steer clear of when it can be avoided. Because <code class="literal">local</CODE
> still manipulates the values of global variables, not local variables, you'll run afoul of <code class="literal">use</CODE
> <code class="literal">strict</CODE
>.</P
><p class="para">The <code class="literal">local</CODE
> operator produces <i class="firstterm">dynamic scoping</I
><a class="indexterm" name="ch10-idx-1000004732-0"></A
><a class="indexterm" name="ch10-idx-1000004732-1"></A
> or <i class="firstterm">run-time scoping</I
>. This is in contrast with the other kind of scoping Perl supports, which is much more intuitive. That's the kind of scoping that <code class="literal">my</CODE
> provides, known as<i class="firstterm"> lexical scoping</I
>, or sometimes as <i class="firstterm">static</I
><a class="indexterm" name="ch10-idx-1000004733-0"></A
><a class="indexterm" name="ch10-idx-1000004733-1"></A
><a class="indexterm" name="ch10-idx-1000004733-2"></A
> or <i class="firstterm">compile-time scoping</I
>.</P
><p class="para">With dynamic scoping, a variable is accessible if it's in the current scope &nbsp;-  or the scope of any frames (blocks) in its subroutine call stack, as determined at run time. Any functions called have full access to dynamic variables, because they're still globals, just ones with temporary values. Only lexical variables are safe from tampering. If that's not enough reason to change, you might be interested to know that lexicals are about 10 percent faster to access than dynamics.</P
><p class="para">Old code that says:</P
><pre class="programlisting">sub func {
    local($x, $y) = @_;
    #....
} </PRE
><p class="para">can almost always be replaced without ill effect by the following:</P
><pre class="programlisting">sub func {
    my($x, $y) = @_;
    #....
} </PRE
><p class="para">The only case where code can't be so upgraded is when it relies on dynamic scoping. That would happen if one function called another, and the latter relied upon access to the former's temporary versions of the global variables <code class="literal">$x</CODE
> and <code class="literal">$y</CODE
>. Code that handles global variables and expects strange action at a distance instead of using proper parameters is fragile at best. Good programmers avoid this kind of thing like the plague.</P
><p class="para"> <a class="indexterm" name="ch10-idx-1000006398-0"></A
>If you come across old code that uses:</P
><pre class="programlisting">&amp;func(*Global_Array);
sub func {
    local(*aliased_array) = shift;
    for (@aliased_array) { .... }
} </PRE
><p class="para">this should probably be changed into something like this:</P
><pre class="programlisting">func(\@Global_Array);
sub func {
    my $array_ref  = shift;
    for (@$array_ref) { .... }
} </PRE
><p class="para">They're using the old pass-the-typeglob strategy devised before Perl support proper references. It's not a pretty thing.<a class="indexterm" name="ch10-idx-1000004735-0"></A
><a class="indexterm" name="ch10-idx-1000004735-1"></A
><a class="indexterm" name="ch10-idx-1000004735-2"></A
></P
></DIV
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch10-pgfId-1000005574">See Also</A
></H3
><p class="para">The  <a class="olink" href="../prog/ch03_087.htm#PERL2-CMD-LOCAL"><code class="literal">local</CODE
></A
> and  <a class="olink" href="../prog/ch03_097.htm#PERL2-CMD-MY"><code class="literal">my</CODE
></A
> functions in <a class="olink" href="../prog/ch03_01.htm">Chapter 3</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
> and <i class="filename">perlfunc </I
>(1); the section on <a class="olink" href="../prog/ch02_07.htm#PERL2-CH-2-SECT-7.3">"Subroutines"</A
> in <a class="olink" href="../prog/ch02_01.htm">Chapter 2</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
>; the sections on "Private Variables via my(  )" "Temporary Values via local(  )" in <i class="filename">perlsub </I
>(1); <a class="xref" href="ch10_03.htm" title="Making Variables Private to a Function">Recipe 10.2</A
>; <a class="xref" href="ch10_17.htm" title="Nesting Subroutines">Recipe 10.16</A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch10_13.htm" title="10.12. Handling Exceptions"><img src="../gifs/txtpreva.gif" alt="Previous: 10.12. Handling Exceptions" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch10_15.htm" title="10.14. Redefining a Function"><img src="../gifs/txtnexta.gif" alt="Next: 10.14. Redefining a Function" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">10.12. Handling Exceptions</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">10.14. Redefining a Function</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
