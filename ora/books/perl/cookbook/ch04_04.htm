<html><head>
<title>Recipe 4.3. Changing Array Size</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:31:12Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch04_01.htm" title="4. Arrays"><link rel="prev" href="ch04_03.htm" title="4.2. Printing a List with Commas"><link rel="next" href="ch04_05.htm" title="4.4. Doing Something with Every Element in a List"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch04_03.htm" title="4.2. Printing a List with Commas"><img src="../gifs/txtpreva.gif" alt="Previous: 4.2. Printing a List with Commas" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch04_01.htm" title="4. Arrays">Chapter 4<br>Arrays</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch04_05.htm" title="4.4. Doing Something with Every Element in a List"><img src="../gifs/txtnexta.gif" alt="Next: 4.4. Doing Something with Every Element in a List" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch04-24943">4.3. Changing Array Size</A
></H2
><div class="sect2"><h3 class="sect2"><a class="title" name="ch04-pgfId-297">Problem <a class="indexterm" name="ch04-idx-1000006617-0"></A
><a class="indexterm" name="ch04-idx-1000006617-1"></A
><a class="indexterm" name="ch04-idx-1000006617-2"></A
></A
></H3
><p class="para">You want to enlarge or truncate an array. For example, you might truncate an array of employees that's already sorted by salary to list the five highest-paid employees. Or, if you know how big your array will get and that it will grow piecemeal, it's more efficient to get memory for it in one step by enlarging it just once than it is to keep <code class="literal">push</CODE
>ing values onto the end.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch04-pgfId-303">Solution</A
></H3
><p class="para">Assign to <code class="literal">$#ARRAY</CODE
><a class="indexterm" name="ch04-idx-1000006623-0"></A
>:</P
><pre class="programlisting"># grow or shrink @ARRAY
$#ARRAY = $NEW_LAST_ELEMENT_INDEX_NUMBER;</PRE
><p class="para">Assigning to an element past the end automatically extends the array:</P
><pre class="programlisting">$ARRAY[$NEW_LAST_ELEMENT_INDEX_NUMBER] = $VALUE;</PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch04-pgfId-317">Discussion</A
></H3
><p class="para"><code class="literal">$#ARRAY</CODE
> is the number of <a class="indexterm" name="ch04-idx-1000006629-0"></A
>the last valid index in <code class="literal">@ARRAY</CODE
>. If we assign it a number smaller than its current value, we truncate the array. Truncated elements are lost forever. If we assign <code class="literal">$#ARRAY</CODE
> a number larger than its current value, the array grows. New elements have the undefined value.</P
><p class="para"><code class="literal">$#ARRAY</CODE
> is not <code class="literal">@ARRAY</CODE
>, though. Although <code class="literal">$#ARRAY</CODE
> is the last valid index in the array, <code class="literal">@ARRAY</CODE
> (in scalar context, as when treated as a number) is the <em class="emphasis">number</EM
> of elements. <code class="literal">$#ARRAY</CODE
> is one less than <code class="literal">@ARRAY</CODE
> because array indices start at 0.</P
><p class="para">Here's some code that uses both:</P
><pre class="programlisting">sub what_about_that_array {
    print &quot;The array now has &quot;, scalar(@people), &quot; elements.\n&quot;;
    print &quot;The index of the last element is $#people.\n&quot;;
    print &quot;Element #3 is `$people[3]'.\n&quot;;
}

@people = qw(Crosby Stills Nash Young);
what_about_that_array();</PRE
><p class="para">prints:</P
><pre class="programlisting"><code class="userinput"><b><code class="replaceable"><i>The array now has 4 elements.</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>The index of the last element is 3.</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>Element #3 is `Young'.</I
></CODE
></B
></CODE
></PRE
><p class="para">whereas:</P
><pre class="programlisting">$#people--;
what_about_that_array();</PRE
><p class="para">prints:</P
><pre class="programlisting"><code class="userinput"><b><code class="replaceable"><i>The array now has 3 elements.</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>The index of the last element is 2.</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>Element #3 is `'.</I
></CODE
></B
></CODE
></PRE
><p class="para">Element #3 disappeared when we shortened the array. If we'd used the <code class="literal">-w</CODE
> flag on this program, Perl would also have warned "use of uninitialized value" because <code class="literal">$people[3]</CODE
> is undefined.</P
><pre class="programlisting">$#people = 10_000;
what_about_that_array();</PRE
><p class="para">prints:</P
><pre class="programlisting"><code class="userinput"><b><code class="replaceable"><i>The array now has 10001 elements.</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>The index of the last element is 10000.</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>Element #3 is `'.</I
></CODE
></B
></CODE
><code class="literal"></CODE
><a class="indexterm" name="ch04-idx-1000006625-0"></A
></PRE
><p class="para">The <code class="literal">&quot;Young&quot;</CODE
> element is now gone forever. Instead of assigning to <code class="literal">$#people</CODE
>, we could have said:</P
><pre class="programlisting">$people[10_000] = undef;</PRE
><p class="para">Perl arrays are not sparse. In other words, if you have a 10,000th element, you must have the 9,999 other elements, too. They may be undefined, but they still take up memory. For this reason, <code class="literal">$array[time]</CODE
>, or any other construct that uses a very large integer as an array index, is a bad idea. Use a hash instead.</P
><p class="para">We have to say <code class="literal">scalar</CODE
> <code class="literal">@array</CODE
> in the <code class="literal">print</CODE
> because Perl gives list context to (most) functions' arguments, but we want <code class="literal">@array</CODE
> in scalar context.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch04-pgfId-387">See Also</A
></H3
><p class="para">The discussion of the <code class="literal">$#ARRAY</CODE
> notation in <em class="emphasis">perldata </EM
>(1), also explained in the <a class="olink" href="../prog/ch02_03.htm#PERL2-CH-2-SECT-3.1">"List Values and Arrays"</A
> section of <a class="olink" href="../prog/ch02_01.htm">Chapter 2</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
><a class="indexterm" name="ch04-idx-1000006619-0"></A
><a class="indexterm" name="ch04-idx-1000006619-1"></A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch04_03.htm" title="4.2. Printing a List with Commas"><img src="../gifs/txtpreva.gif" alt="Previous: 4.2. Printing a List with Commas" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch04_05.htm" title="4.4. Doing Something with Every Element in a List"><img src="../gifs/txtnexta.gif" alt="Next: 4.4. Doing Something with Every Element in a List" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">4.2. Printing a List with Commas</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">4.4. Doing Something with Every Element in a List</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
