<html><head>
<title>Recipe 2.4. Converting Between Binary and Decimal</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:30:05Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch02_01.htm" title="2. Numbers"><link rel="prev" href="ch02_04.htm" title="2.3. Rounding Floating-Point Numbers"><link rel="next" href="ch02_06.htm" title="2.5. Operating on a Series of Integers"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch02_04.htm" title="2.3. Rounding Floating-Point Numbers"><img src="../gifs/txtpreva.gif" alt="Previous: 2.3. Rounding Floating-Point Numbers" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch02_01.htm" title="2. Numbers">Chapter 2<br>Numbers</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch02_06.htm" title="2.5. Operating on a Series of Integers"><img src="../gifs/txtnexta.gif" alt="Next: 2.5. Operating on a Series of Integers" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch02-10900">2.4. Converting Between Binary and Decimal</A
></H2
><div class="sect2"><h3 class="sect2"><a class="title" name="ch02-pgfId-315">Problem <a class="indexterm" name="ch02-idx-1000008009-0"></A
><a class="indexterm" name="ch02-idx-1000008009-1"></A
><a class="indexterm" name="ch02-idx-1000008009-2"></A
><a class="indexterm" name="ch02-idx-1000008009-3"></A
></A
></H3
><p class="para">You have an integer whose binary representation you'd like to print out, or a binary representation that you'd like to convert into an integer. You might want to do this if you were displaying non-textual data, such as what you get from interacting with certain system programs and functions.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch02-pgfId-321">Solution</A
></H3
><p class="para">To convert a Perl integer to a text string of ones and zeros, first pack the integer into a number in network byte order[<a class="footnote" href="#ch02-pgfId-1000000756">1</A
>] (the &quot;<code class="literal">N</CODE
>&quot; format), then unpack it again bit by bit (the &quot;<code class="literal">B32</CODE
>&quot; format).</P
><blockquote class="footnote"><div class="footnote"><p class="para"><a class="footnote" name="ch02-pgfId-1000000756">[1]</A
> Also known as <i class="firstterm">big-endian</I
>, or <i class="firstterm">MSB</I
> (Most-Significant Bit first) order.</P
></DIV
></BLOCKQUOTE
><pre class="programlisting">sub dec2bin {
    my $str = unpack(&quot;B32&quot;, pack(&quot;N&quot;, shift));
    $str =~ s/^0+(?=\d)//;   # otherwise you'll get leading zeros
    return $str;
}</PRE
><p class="para">To convert a text string of ones and zeros to a Perl integer, first massage the string by padding it with the right number of zeros, then just reverse the previous procedure.</P
><pre class="programlisting">sub bin2dec {
    return unpack(&quot;N&quot;, pack(&quot;B32&quot;, substr(&quot;0&quot; x 32 . shift, -32)));
}</PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch02-pgfId-345">Discussion</A
></H3
><p class="para">We're talking about converting between strings like &quot;<code class="literal">00100011</CODE
>&quot; and numbers like 35. The string is the binary representation of the number. We can't solve either problem with <code class="literal">sprintf</CODE
> (which doesn't have a "print this in binary" format), so we have to resort to Perl's <code class="literal">pack</CODE
> and <code class="literal">unpack</CODE
> functions for manipulating strings of data.</P
><p class="para">The <code class="literal">pack</CODE
><a class="indexterm" name="ch02-idx-1000008015-0"></A
><a class="indexterm" name="ch02-idx-1000008015-1"></A
> and <code class="literal">unpack</CODE
> functions act on strings. You can treat the string as a series of bits, bytes, integers, long integers, floating-point numbers in IEEE representation, checksums &nbsp;-  among other strange things. The <code class="literal">pack</CODE
> and <code class="literal">unpack</CODE
> functions both take formats, like <code class="literal">sprintf</CODE
>, specifying what they should do with their arguments.</P
><p class="para">We use <code class="literal">pack</CODE
> and <code class="literal">unpack</CODE
> in two ways: "treat this string as a series of bits" and "treat this string as containing a binary representation of an integer." When we treat the string as a series of bits, we have to understand how <code class="literal">pack</CODE
> will behave. Such a string is treated as a series of bytes, a byte being eight bits. The bytes are always counted from left to right (the first eight bits are the first byte, the next eight bits are the second, and so on), but the bits within each byte can be counted left-to-right as well as right-to-left.</P
><p class="para">We use <code class="literal">pack</CODE
> with a template of &quot;<code class="literal">B</CODE
>&quot; to work with bits within each byte from left to right. This is the order that the &quot;<code class="literal">N</CODE
>&quot; format expects them in, which we use to treat the series of bits as representing a 32-bit integer.</P
><pre class="programlisting">$num = bin2dec('0110110');  # $num is 54
$binstr = dec2bin(54);      # $binstr is 110110</PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch02-pgfId-361">See Also</A
></H3
><p class="para">The <code class="literal">pack</CODE
> and <code class="literal">unpack</CODE
> functions in <em class="emphasis">perlfunc </EM
>(1) and <a class="olink" href="../prog/ch03_01.htm">Chapter 3</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
>; we also use <code class="literal">pack</CODE
> and <code class="literal">unpack</CODE
> in <a class="xref" href="ch01_05.htm" title="Converting Between ASCII Characters and Values">Recipe 1.4</A
>; to convert between decimal, hexadecimal, and octal, see <a class="xref" href="ch02_17.htm" title="Converting Between Octal and Hexadecimal">Recipe 2.16</A
><cite class="citetitle"> </CITE
><a class="indexterm" name="ch02-idx-1000008011-0"></A
><a class="indexterm" name="ch02-idx-1000008011-1"></A
><a class="indexterm" name="ch02-idx-1000008011-2"></A
><a class="indexterm" name="ch02-idx-1000008011-3"></A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch02_04.htm" title="2.3. Rounding Floating-Point Numbers"><img src="../gifs/txtpreva.gif" alt="Previous: 2.3. Rounding Floating-Point Numbers" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch02_06.htm" title="2.5. Operating on a Series of Integers"><img src="../gifs/txtnexta.gif" alt="Next: 2.5. Operating on a Series of Integers" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">2.3. Rounding Floating-Point Numbers</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">2.5. Operating on a Series of Integers</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
