<html><head>
<title>Recipe 1.2. Establishing a Default Value</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:28:45Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch01_01.htm" title="1. Strings"><link rel="prev" href="ch01_02.htm" title="1.1. Accessing Substrings"><link rel="next" href="ch01_04.htm" title="1.3. Exchanging Values Without Using Temporary Variables"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch01_02.htm" title="1.1. Accessing Substrings"><img src="../gifs/txtpreva.gif" alt="Previous: 1.1. Accessing Substrings" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch01_01.htm" title="1. Strings">Chapter 1<br>Strings</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch01_04.htm" title="1.3. Exchanging Values Without Using Temporary Variables"><img src="../gifs/txtnexta.gif" alt="Next: 1.3. Exchanging Values Without Using Temporary Variables" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch01-chap01_establishing_0">1.2. Establishing a Default Value</A
></H2
><div class="sect2"><h3 class="sect2"><a class="title" name="ch01-pgfId-289">Problem <a class="indexterm" name="ch01-idx-1000010153-0"></A
><a class="indexterm" name="ch01-idx-1000010153-1"></A
><a class="indexterm" name="ch01-idx-1000010153-2"></A
></A
></H3
><p class="para">You would like to give a default value to a scalar variable, but only if it doesn't already have one. It often happens that you want a hard-coded default value for a variable that can be overridden from the command-line or through an environment variable.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch01-pgfId-295">Solution</A
></H3
><p class="para">Use the <code class="literal">||</CODE
><a class="indexterm" name="ch01-idx-1000010154-0"></A
><a class="indexterm" name="ch01-idx-1000010154-1"></A
><a class="indexterm" name="ch01-idx-1000010154-2"></A
> or <code class="literal">||=</CODE
> operator, which work on both strings and numbers:</P
><pre class="programlisting"># use $b if $b is true, else $c
$a = $b || $c;              

# set $x to $y unless $x is already true
$x ||= $y</PRE
><p class="para">If <code class="literal">0</CODE
> or &quot;<code class="literal">0</CODE
>&quot; are valid values for your variables, use <code class="literal">defined</CODE
><a class="indexterm" name="ch01-idx-1000010160-0"></A
> instead:</P
><pre class="programlisting"># use $b if $b is defined, else $c
$a = defined($b) ? $b : $c;</PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch01-pgfId-317">Discussion</A
></H3
><p class="para">The big difference between the two techniques (<code class="literal">defined</CODE
> and <code class="literal">||</CODE
>) is what they test: <a class="indexterm" name="ch01-idx-1000010161-0"></A
><a class="indexterm" name="ch01-idx-1000010161-1"></A
>definedness versus truth. Three defined values are still false in the world of Perl: <code class="literal">0</CODE
>, &quot;<code class="literal">0</CODE
>&quot;, and &quot;&quot;. If your variable already held one of those, and you wanted to keep that value, a <code class="literal">||</CODE
> wouldn't work. You'd have to use the clumsier tests with <code class="literal">defined</CODE
> instead. It's often convenient to arrange for your program to care only about true or false values, not defined or undefined ones.</P
><p class="para">Rather than being restricted in its return values to a mere 1 or 0 as in most other languages, Perl's <code class="literal">||</CODE
> operator has a much more interesting property: It returns its first operand (the left-hand side) if that operand is true; otherwise it returns its second operand. The <code class="literal">&amp;&amp;</CODE
><a class="indexterm" name="ch01-idx-1000010175-0"></A
> operator also returns the last evaluated expression, but is less often used for this property. These operators don't care whether their operands are strings, numbers, or references&nbsp;- any scalar will do. They just return the first one that makes the whole expression true or false. This doesn't affect the Boolean sense of the return value, but it does make the operators more convenient to use.</P
><p class="para">This property lets you provide a default value to a variable, function, or longer expression in case the first part doesn't pan out. Here's an example of <code class="literal">||</CODE
>, which would set <code class="literal">$foo</CODE
> to be the contents of either <code class="literal">$bar</CODE
> or, if <code class="literal">$bar</CODE
> is false, &quot;<code class="literal">DEFAULT</CODE
> <code class="literal">VALUE</CODE
>&quot;:</P
><pre class="programlisting">$foo = $bar || &quot;DEFAULT VALUE&quot;;</PRE
><p class="para">Here's another example, which sets <code class="literal">$dir</CODE
> to be either the first argument to the program or &quot;<code class="literal">/tmp</CODE
>&quot; if no argument was given.</P
><pre class="programlisting">$dir = shift(@ARGV) || &quot;/tmp&quot;;</PRE
><p class="para">We can do this without altering <code class="literal">@ARGV</CODE
>:</P
><pre class="programlisting">$dir = $ARGV[0] || &quot;/tmp&quot;;</PRE
><p class="para">If <code class="literal">0</CODE
> is a valid value for <code class="literal">$ARGV[0]</CODE
>, we can't use <code class="literal">||</CODE
> because it evaluates as false even though it's a value we want to accept. We must resort to the ternary ("hook") operator:</P
><pre class="programlisting">$dir = defined($ARGV[0]) ? shift(@ARGV) : &quot;/tmp&quot;;</PRE
><p class="para">We can also write this as follows, although with slightly different semantics:</P
><pre class="programlisting">$dir = @ARGV ? $ARGV[0] : &quot;/tmp&quot;;</PRE
><p class="para">This checks the number of elements in <code class="literal">@ARGV</CODE
>. Using the hook operator as a condition in a <code class="literal">?:</CODE
> statement evaluates <code class="literal">@ARGV</CODE
> in scalar context. It's only false when there are 0 elements, in which case we use &quot;<code class="literal">/tmp</CODE
>&quot;. In all other cases (when the user gives an argument), we use the first argument.</P
><p class="para">The following line increments a value in <code class="literal">%count</CODE
>, using as the key either <code class="literal">$shell</CODE
> or, if <code class="literal">$shell</CODE
> is false, &quot;<code class="literal">/bin/sh</CODE
>&quot;.</P
><pre class="programlisting">$count{ $shell || &quot;/bin/sh&quot; }++;</PRE
><p class="para">You may chain several alternatives together as we have in the following example. The first expression that returns a true value will be used.</P
><pre class="programlisting"># find the user name on Unix systems
$user = $ENV{USER}
     || $ENV{LOGNAME}
     || getlogin()
     || (getpwuid($&lt;))[0]
     || &quot;Unknown uid number $&lt;&quot;;<code class="literal"></CODE
><a class="indexterm" name="ch01-idx-1000010166-0"></A
></PRE
><p class="para">The <code class="literal">&amp;&amp;</CODE
> operator works analogously: It returns its first operand if that operand is false; otherwise, it returns the second one. Because there aren't as many interesting false values as there are true ones, this property isn't used much. One use is demonstrated in Recipe 13.11 or 14.11.</P
><p class="para"><code class="literal"></CODE
><a class="indexterm" name="ch01-idx-1000010171-0"></A
><a class="indexterm" name="ch01-idx-1000010171-1"></A
>The <code class="literal">||=</CODE
> assignment operator looks odd, but it works exactly like the other binary assignment operators. For nearly all Perl's binary operators, <code class="literal">$VAR</CODE
> <code class="literal">OP=</CODE
> <code class="literal">VALUE</CODE
> means <code class="literal">$VAR</CODE
> <code class="literal">=</CODE
> <code class="literal">$VAR</CODE
> <code class="literal">OP</CODE
> <code class="literal">VALUE</CODE
>; for example, <code class="literal">$a</CODE
> <code class="literal">+=</CODE
> <code class="literal">$b</CODE
> is the same as <code class="literal">$a</CODE
> <code class="literal">=</CODE
> <code class="literal">$a</CODE
> <code class="literal">+</CODE
> <code class="literal">$b</CODE
>. So <code class="literal">||=</CODE
> is used to set a variable when that variable is itself still false. Since the <code class="literal">||</CODE
> check is a simple Boolean one&nbsp;- testing for truth&nbsp;- it doesn't care about undefined values even under <b class="emphasis.bold">-w</B
>.</P
><p class="para">Here's an example of <code class="literal">||=</CODE
> that sets <code class="literal">$starting_point</CODE
> to &quot;<code class="literal">Greenwich</CODE
>&quot; unless it is already set. Again, we assume <code class="literal">$starting_point</CODE
> won't have the value <code class="literal">0</CODE
> or &quot;<code class="literal">0</CODE
>&quot;, or that if it does, it's okay to change it.</P
><pre class="programlisting">$starting_point ||= &quot;Greenwich&quot;;</PRE
><p class="para">You can't use <code class="literal">or</CODE
><a class="indexterm" name="ch01-idx-1000010181-0"></A
> in place of <code class="literal">||</CODE
> in assignments because <code class="literal">or</CODE
>'s precedence is too low. <code class="literal">$a</CODE
> <code class="literal">=</CODE
> <code class="literal">$b</CODE
> <code class="literal">or</CODE
> <code class="literal">$c</CODE
> is equivalent to <code class="literal">($a</CODE
> <code class="literal">=</CODE
> <code class="literal">$b)</CODE
> <code class="literal">or</CODE
> <code class="literal">$c</CODE
>. This will always assign <code class="literal">$b</CODE
> to <code class="literal">$a</CODE
>, which is not the behavior you want.</P
><p class="para">Don't extend this curious use of <code class="literal">||</CODE
> and <code class="literal">||=</CODE
> from scalars to arrays and hashes. It doesn't work because the operators put their left operand into scalar context. Instead, you must do something like this:</P
><pre class="programlisting">@a = @b unless @a;          # copy only if empty
@a = @b ? @b : @c;          # assign @b if nonempty, else @c</PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch01-pgfId-381">See Also</A
></H3
><p class="para">The <code class="literal">||</CODE
> operator in <em class="emphasis">perlop</EM
> (1) or <a class="olink" href="../prog/ch02_01.htm">Chapter 2</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
>; the <code class="literal">defined</CODE
> and <code class="literal">exists</CODE
> functions in <i class="filename">perlfunc </I
>(1) and <a class="olink" href="../prog/ch03_01.htm">Chapter 3</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
><a class="indexterm" name="ch01-idx-1000010156-0"></A
><a class="indexterm" name="ch01-idx-1000010156-1"></A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch01_02.htm" title="1.1. Accessing Substrings"><img src="../gifs/txtpreva.gif" alt="Previous: 1.1. Accessing Substrings" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch01_04.htm" title="1.3. Exchanging Values Without Using Temporary Variables"><img src="../gifs/txtnexta.gif" alt="Next: 1.3. Exchanging Values Without Using Temporary Variables" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">1.1. Accessing Substrings</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">1.3. Exchanging Values Without Using Temporary Variables</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
