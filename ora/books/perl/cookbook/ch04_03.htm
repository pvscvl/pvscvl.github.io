<html><head>
<title>Recipe 4.2. Printing a List with Commas</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:31:11Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch04_01.htm" title="4. Arrays"><link rel="prev" href="ch04_02.htm" title="4.1. Specifying a List In Your Program"><link rel="next" href="ch04_04.htm" title="4.3. Changing Array Size"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch04_02.htm" title="4.1. Specifying a List In Your Program"><img src="../gifs/txtpreva.gif" alt="Previous: 4.1. Specifying a List In Your Program" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch04_01.htm" title="4. Arrays">Chapter 4<br>Arrays</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch04_04.htm" title="4.3. Changing Array Size"><img src="../gifs/txtnexta.gif" alt="Next: 4.3. Changing Array Size" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch04-chap04_printing_0">4.2. Printing a List with Commas</A
></H2
><div class="sect2"><h3 class="sect2"><a class="title" name="ch04-pgfId-173">Problem <a class="indexterm" name="ch04-idx-1000006608-0"></A
><a class="indexterm" name="ch04-idx-1000006608-1"></A
><a class="indexterm" name="ch04-idx-1000006608-2"></A
><a class="indexterm" name="ch04-idx-1000006608-3"></A
><a class="indexterm" name="ch04-idx-1000006608-4"></A
><a class="indexterm" name="ch04-idx-1000006608-5"></A
></A
></H3
><p class="para">You'd like to print out a list with an unknown number of elements with an "and" before the last element, and with commas between each element if there are more than two.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch04-pgfId-179">Solution</A
></H3
><p class="para">Use this function, which returns the formatted string: <a class="indexterm" name="ch04-idx-1000006616-0"></A
></P
><pre class="programlisting">sub commify_series {
    (@_ == 0) ? ''                                      :
    (@_ == 1) ? $_[0]                                   :
    (@_ == 2) ? join(&quot; and &quot;, @_)                       :
                join(&quot;, &quot;, @_[0 .. ($#_-1)], &quot;and $_[-1]&quot;);
}</PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch04-pgfId-197">Discussion</A
></H3
><p class="para">It often looks odd to print out arrays:</P
><pre class="programlisting">@array = (&quot;red&quot;, &quot;yellow&quot;, &quot;green&quot;);
print &quot;I have &quot;, @array, &quot; marbles.\n&quot;;
print &quot;I have @array marbles.\n&quot;;
<code class="userinput"><b><code class="replaceable"><i>I have redyellowgreen marbles.</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>I have red yellow green marbles.</I
></CODE
></B
></CODE
></PRE
><p class="para">What you really want it to say is, <code class="literal">&quot;I</CODE
> <code class="literal">have</CODE
> <code class="literal">red,</CODE
> <code class="literal">yellow,</CODE
> <code class="literal">and</CODE
> <code class="literal">green</CODE
> <code class="literal">marbles&quot;</CODE
>. The function given in the solution generates strings in that format. The word <code class="literal">&quot;and&quot;</CODE
> is placed between the last two list elements. If there are more than two elements in the list, a comma is placed between every element.</P
><p class="para"><a class="xref" href="#ch04-17462" title="commify_series (continued)">Example 4.1</A
> gives a complete demonstration of the function, with one addition: If any element in the list already contains a comma, a semi-colon is used for the separator character instead.</P
><div class="example"><h4 class="example"><a class="title" name="ch04-17462">Example 4.1: commify_series (continued)</A
></H4
><pre class="programlisting">#!/usr/bin/perl -w
# commify_series - show proper comma insertion in list output

@lists = (
    [ 'just one thing' ],
    [ qw(Mutt Jeff) ],
    [ qw(Peter Paul Mary) ],
    [ 'To our parents', 'Mother Theresa', 'God' ],
    [ 'pastrami', 'ham and cheese', 'peanut butter and jelly', 'tuna' ],
    [ 'recycle tired, old phrases', 'ponder big, happy thoughts' ],
    [ 'recycle tired, old phrases', 
      'ponder big, happy thoughts', 
      'sleep and dream peacefully' ],
    );

foreach $aref (@lists) {
    print &quot;The list is: &quot; . commify_series(@$aref) . &quot;.\n&quot;;
} 

sub commify_series {
    my $sepchar = grep(/,/ =&gt; @_) ? &quot;;&quot; : &quot;,&quot;;
    (@_ == 0) ? ''                                      :
    (@_ == 1) ? $_[0]                                   :
    (@_ == 2) ? join(&quot; and &quot;, @_)                       :
                join(&quot;$sepchar &quot;, @_[0 .. ($#_-1)], &quot;and $_[-1]&quot;);
}</PRE
></DIV
><p class="para">Here's the output from the program:</P
><pre class="programlisting"><code class="userinput"><b><code class="replaceable"><i>The list is: just one thing.</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>The list is: Mutt and Jeff.</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>The list is: Peter, Paul, and Mary.</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>The list is: To our parents, Mother Theresa, and God.</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>The list is: pastrami, ham and cheese, peanut butter and jelly, and tuna.</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>The list is: recycle tired, old phrases and ponder big, happy thoughts.</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>The list is: recycle tired, old phrases; ponder </I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>   big, happy thoughts; and sleep and dream peacefully.</I
></CODE
></B
></CODE
></PRE
><p class="para">As you see, we don't follow the ill-advised practice of omitting the final comma from a series under any circumstances. To do so introduces unfortunate ambiguities and unjustifiable exceptions. The examples above would have claimed that we were the offspring of Mother Theresa and God, and would have had us eating sandwiches made of jelly and tuna fish fixed together atop the peanut butter.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch04-pgfId-289">See Also <a class="indexterm" name="ch04-idx-1000006610-0"></A
><a class="indexterm" name="ch04-idx-1000006610-1"></A
><a class="indexterm" name="ch04-idx-1000006610-2"></A
><a class="indexterm" name="ch04-idx-1000006610-3"></A
><a class="indexterm" name="ch04-idx-1000006610-4"></A
><a class="indexterm" name="ch04-idx-1000006610-5"></A
></A
></H3
><p class="para">Fowler's <cite class="citetitle">Modern English Usage</CITE
>; we explain the nested list syntax in <a class="xref" href="ch11_02.htm" title="Taking References to Arrays">Recipe 11.1</A
>; the <code class="literal">grep</CODE
> function in <i class="filename">perlfunc </I
>(1) and <a class="olink" href="../prog/ch03_01.htm">Chapter 3</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
>; the conditional operator <code class="literal">(&quot;?:&quot;)</CODE
> is discussed in <i class="filename">perlop </I
>(1) and in the <a class="olink" href="../prog/ch02_05.htm#PERL2-CH-2-SECT-5.10">"Conditional Operator"</A
> section of <a class="olink" href="../prog/ch02_01.htm">Chapter 2</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch04_02.htm" title="4.1. Specifying a List In Your Program"><img src="../gifs/txtpreva.gif" alt="Previous: 4.1. Specifying a List In Your Program" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch04_04.htm" title="4.3. Changing Array Size"><img src="../gifs/txtnexta.gif" alt="Next: 4.3. Changing Array Size" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">4.1. Specifying a List In Your Program</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">4.3. Changing Array Size</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
