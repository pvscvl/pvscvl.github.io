<html><head>
<title>Recipe 16.15. Installing a Signal Handler</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:44:09Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch16_01.htm" title="16. Process Management and Communication"><link rel="prev" href="ch16_15.htm" title="16.14. Sending a Signal"><link rel="next" href="ch16_17.htm" title="16.16. Temporarily Overriding a Signal Handler"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch16_15.htm" title="16.14. Sending a Signal"><img src="../gifs/txtpreva.gif" alt="Previous: 16.14. Sending a Signal" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch16_01.htm" title="16. Process Management and Communication">Chapter 16<br>Process Management and Communication</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch16_17.htm" title="16.16. Temporarily Overriding a Signal Handler"><img src="../gifs/txtnexta.gif" alt="Next: 16.16. Temporarily Overriding a Signal Handler" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch16-31227">16.15. Installing a Signal Handler</A
></H2
><div class="sect2"><h3 class="sect2"><a class="title" name="ch16-pgfId-1000005410">Problem</A
></H3
><p class="para"><a class="indexterm" name="ch16-idx-1000006390-0"></A
><a class="indexterm" name="ch16-idx-1000006390-1"></A
><a class="indexterm" name="ch16-idx-1000006390-2"></A
><a class="indexterm" name="ch16-idx-1000006390-3"></A
>You want to control how your program responds to signals. You need to do this if you want to catch Ctrl-C, avoid accumulating finished subprocesses, or prevent your process from dying when it writes to a child that has gone away.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch16-pgfId-1000005413">Solution</A
></H3
><p class="para">Use the <code class="literal">%SIG</CODE
><a class="indexterm" name="ch16-idx-1000006382-0"></A
> hash to install your own handler by name or by code reference:</P
><pre class="programlisting">$SIG{QUIT} = \&amp;got_sig_quit;     # call &amp;got_sig_quit for every SIGQUIT 
$SIG{PIPE} = 'got_sig_pipe';     # call main::got_sig_pipe for every SIGPIPE 
$SIG{INT}  = sub { $ouch++ };    # increment $ouch for every SIGINT</PRE
><p class="para"><code class="literal">%SIG</CODE
> also lets you ignore a signal:</P
><pre class="programlisting">$SIG{INT} = 'IGNORE';            # ignore the signal INT</PRE
><p class="para">It also restores handling for that signal to the default:</P
><pre class="programlisting">$SIG{STOP} = 'DEFAULT';          # restore default STOP signal handling</PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch16-pgfId-1000005423">Discussion</A
></H3
><p class="para">Perl uses the <code class="literal">%SIG</CODE
> hash to control what happens when signals are received. Each key in <code class="literal">%SIG</CODE
> corresponds to a signal. Each value is the action to take when Perl receives the corresponding signal. Perl provides two special behaviors: <code class="literal">&quot;IGNORE&quot;</CODE
> to take no action when a particular signal is received, and <code class="literal">&quot;DEFAULT&quot;</CODE
> to perform the default Unix action for that signal.</P
><p class="para">Although a C programmer might think of a signal as SIGINT, Perl uses just INT. Perl figures you only use signal names in functions that deal with signals, so the SIG prefix is redundant. This means that you'll assign to <code class="literal">$SIG{CHLD}</CODE
> to change what your process does when it gets a SIGCHLD.</P
><p class="para">If you want to run your own code when a given signal is received, you have two choices of what to put in the hash: either a code reference or a subroutine name. (This means you can't name a signal handler IGNORE or DEFAULT if you store the string, but they'd be mighty strange names for signal handlers anyway.) If you use a subroutine name that isn't qualified by a package, Perl will interpret this name to be a function in the <code class="literal">main::</CODE
> package, not one in the package in which the handler was installed. A code reference refers to a subroutine in a particular package, so it is a better choice.</P
><p class="para">Perl calls your handler code with a single argument: the name of the signal that triggered it, like <code class="literal">&quot;INT&quot;</CODE
> or <code class="literal">&quot;USR1&quot;</CODE
>. Returning from a signal handler takes you back to whatever you were doing when the signal hit.</P
><p class="para">Perl defines two special signals, <code class="literal">__DIE__</CODE
><a class="indexterm" name="ch16-idx-1000007928-0"></A
><a class="indexterm" name="ch16-idx-1000007928-1"></A
> and <code class="literal">__WARN__</CODE
>, whose handlers are called whenever a Perl program emits warnings through <code class="literal">warn</CODE
> or dies through <code class="literal">die</CODE
>. This lets you catch such warnings, and selectively trap or propagate them. The <code class="literal">die</CODE
> and <code class="literal">warn</CODE
> handlers are disabled while they run, so you can safely <code class="literal">die</CODE
> from a <code class="literal">__DIE__</CODE
> handler or <code class="literal">warn</CODE
> from a <code class="literal">__WARN__</CODE
> handler without fear of recursion.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch16-pgfId-1000005550">See Also</A
></H3
><p class="para">The <a class="olink" href="../prog/ch06_02.htm#PERL2-CH-6-SECT-2.2.4">"Signals"</A
> sections in <a class="olink" href="../prog/ch06_01.htm">Chapter 6</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
> and in <i class="filename">perlipc </I
>(1); your system's <i class="filename">sigaction </I
>(2), <i class="filename">signal </I
>(3), and <i class="filename">kill </I
>(2) manpages (if you have them)</P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch16_15.htm" title="16.14. Sending a Signal"><img src="../gifs/txtpreva.gif" alt="Previous: 16.14. Sending a Signal" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch16_17.htm" title="16.16. Temporarily Overriding a Signal Handler"><img src="../gifs/txtnexta.gif" alt="Next: 16.16. Temporarily Overriding a Signal Handler" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">16.14. Sending a Signal</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">16.16. Temporarily Overriding a Signal Handler</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
