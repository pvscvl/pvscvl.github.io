<html><head>
<title>Recipe 9.7. Processing All Files in a Directory Recursively</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:39:18Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch09_01.htm" title="9. Directories"><link rel="prev" href="ch09_07.htm" title="9.6. Globbing, or Getting a List of Filenames Matching a Pattern"><link rel="next" href="ch09_09.htm" title="9.8. Removing a Directory and Its Contents"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name="srchmap"index.html><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch09_07.htm" title="9.6. Globbing, or Getting a List of Filenames Matching a Pattern"><img src="../gifs/txtpreva.gif" alt="Previous: 9.6. Globbing, or Getting a List of Filenames Matching a Pattern" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch09_01.htm" title="9. Directories">Chapter 9<br>Directories</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch09_09.htm" title="9.8. Removing a Directory and Its Contents"><img src="../gifs/txtnexta.gif" alt="Next: 9.8. Removing a Directory and Its Contents" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch09-11236">9.7. Processing All Files in a Directory Recursively</A
></H2
><div class="sect2"><h3 class="sect2"><a class="title" name="ch09-pgfId-734">Problem<a class="indexterm" name="ch09-idx-1000004404-0"></A
><a class="indexterm" name="ch09-idx-1000004404-1"></A
><a class="indexterm" name="ch09-idx-1000004404-2"></A
></A
></H3
><p class="para">You want to do something to each file and subdirectory in a particular directory.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch09-pgfId-740">Solution</A
></H3
><p class="para">Use the standard <a class="indexterm" name="ch09-idx-1000004418-0"></A
>File::Find module.</P
><pre class="programlisting">use File::Find;
sub process_file {
    # do whatever;
}
find(\&amp;process_file, @DIRLIST);</PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch09-pgfId-756">Discussion</A
></H3
><p class="para">File::Find provides a convenient way to process a directory recursively. It does the directory scans and recursion for you. All you do is pass <code class="literal">find</CODE
> a code reference and a list of directories. For each file in those directories, recursively, <code class="literal">find</CODE
> calls your function.</P
><p class="para">Before calling your function, <code class="literal">find</CODE
> changes to the directory being visited, whose path relative to the starting directory is stored in the <code class="literal">$File::Find::dir</CODE
> variable. <code class="literal">$_</CODE
> is set to the basename of the file being visited, and the full path of that file can be found in <code class="literal">$File::Find::name</CODE
>. Your code can set <code class="literal">$File::Find::prune</CODE
> to true to tell <code class="literal">find</CODE
> not to descend into the directory just seen.</P
><p class="para">This simple example demonstrates File::Find. We give <code class="literal">find</CODE
> an anonymous subroutine that prints the name of each file visited and adds a <code class="literal">/</CODE
> to the names of directories:</P
><pre class="programlisting">@ARGV = qw(.) unless @ARGV;
use File::Find;
find sub { print $File::Find::name, -d &amp;&amp; '/', &quot;\n&quot; }, @ARGV;</PRE
><p class="para">This prints a <code class="literal">/</CODE
> after directory names using the <b class="emphasis.bold">-d</B
> file test operator, which returns the empty string <code class="literal">''</CODE
> if it fails.</P
><p class="para">The following program prints the sum of everything in a directory. It gives <code class="literal">find</CODE
> an anonymous subroutine to keep a running sum of the sizes of each file it visits. That includes all inode types, including the sizes of directories and symbolic links, not just regular files. Once the <code class="literal">find</CODE
> function returns, the accumulated sum is displayed.</P
><pre class="programlisting">use File::Find;
@ARGV = ('.') unless @ARGV;
my $sum = 0;
find sub { $sum += -s }, @ARGV;
print &quot;@ARGV contains $sum bytes\n&quot;;</PRE
><p class="para">This code finds the largest single file within a set of directories:</P
><pre class="programlisting">use File::Find;
@ARGV = ('.') unless @ARGV;
my ($saved_size, $saved_name) = (-1, '');
sub biggest {
    return unless -f &amp;&amp; -s _ &gt; $saved_size;
    $saved_size = -s _;
    $saved_name = $File::Find::name;
}
find(\&amp;biggest, @ARGV);
print &quot;Biggest file $saved_name in @ARGV is $saved_size bytes long.\n&quot;;</PRE
><p class="para">We use <code class="literal">$saved_size</CODE
> and <code class="literal">$saved_name</CODE
> to keep track of the name and the size of the largest file visited. If we find a file bigger than the largest seen so far, we replace the saved name and size with the current ones. When the <code class="literal">find</CODE
> is done running, the largest file and its size are printed out, rather verbosely. A more general tool would probably just print the filename, its size, or both. This time we used a named function rather than an anonymous one because the function was getting big.</P
><p class="para">It's simple to change this to find the most recently changed file:</P
><pre class="programlisting">use File::Find;
@ARGV = ('.') unless @ARGV;
my ($age, $name);
sub youngest {
    return if defined $age &amp;&amp; $age &gt; (stat($_))[9];
    $age = (stat(_))[9];
    $name = $File::Find::name;
}
find(\&amp;youngest, @ARGV);
print &quot;$name &quot; . scalar(localtime($age)) . &quot;\n&quot;;</PRE
><p class="para">The File::Find module doesn't export its <code class="literal">$name</CODE
> variable, so always refer to it by its fully qualified name. The example in <a class="xref" href="#ch09-34586" title="fdirs">Example 9.2</A
> is more a demonstration of namespace munging than of recursive directory traversal, although it does find all the directories. It makes <code class="literal">$name</CODE
> in our current package an alias for the one in File::Find, which is essentially how Exporter works. Then it declares its own version of <code class="literal">find</CODE
> with a prototype that lets it be called like <code class="literal">grep</CODE
> or <code class="literal">map</CODE
>.</P
><div class="example"><h4 class="example"><a class="title" name="ch09-34586">Example 9.2: fdirs</A
></H4
><pre class="programlisting">#!/usr/bin/perl -lw
# <a class="indexterm" name="ch09-idx-1000004489-0"></A
>fdirs - find all directories
@ARGV = qw(.) unless @ARGV;
use File::Find ();
sub find(&amp;@) { &amp;File::Find::find }
*name = *File::Find::name;
find { print $name if -d } @ARGV;</PRE
></DIV
><p class="para">Our <code class="literal">find</CODE
> only calls the <code class="literal">find</CODE
> in File::Find, which we were careful not to import by specifying an <code class="literal">()</CODE
> empty list in the <code class="literal">use</CODE
> statement. Rather than write this:</P
><pre class="programlisting">find sub { print $File::Find::name if -d }, @ARGV;</PRE
><p class="para">we can write the more pleasant:</P
><pre class="programlisting">find { print $name if -d } @ARGV;<a class="indexterm" name="ch09-idx-1000004406-0"></A
><a class="indexterm" name="ch09-idx-1000004406-1"></A
><a class="indexterm" name="ch09-idx-1000004406-2"></A
><a class="indexterm" name="ch09-idx-1000004406-3"></A
></PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch09-pgfId-856">See Also</A
></H3
><p class="para">The documentation for the standard File::Find and Exporter modules (also in <a class="olink" href="../prog/ch07_01.htm">Chapter 7</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
>); your system's <i class="filename">find </I
>(1) manpage; <a class="xref" href="ch09_07.htm" title="Globbing, or Getting a List of Filenames Matching a Pattern">Recipe 9.6</A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch09_07.htm" title="9.6. Globbing, or Getting a List of Filenames Matching a Pattern"><img src="../gifs/txtpreva.gif" alt="Previous: 9.6. Globbing, or Getting a List of Filenames Matching a Pattern" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch09_09.htm" title="9.8. Removing a Directory and Its Contents"><img src="../gifs/txtnexta.gif" alt="Next: 9.8. Removing a Directory and Its Contents" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">9.6. Globbing, or Getting a List of Filenames Matching a Pattern</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">9.8. Removing a Directory and Its Contents</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
