<html><head>
<title>Recipe 16.5. Filtering Your Own Output</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:43:43Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch16_01.htm" title="16. Process Management and Communication"><link rel="prev" href="ch16_05.htm" title="16.4. Reading or Writing to Another Program"><link rel="next" href="ch16_07.htm" title="16.6. Preprocessing Input"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch16_05.htm" title="16.4. Reading or Writing to Another Program"><img src="../gifs/txtpreva.gif" alt="Previous: 16.4. Reading or Writing to Another Program" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch16_01.htm" title="16. Process Management and Communication">Chapter 16<br>Process Management and Communication</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch16_07.htm" title="16.6. Preprocessing Input"><img src="../gifs/txtnexta.gif" alt="Next: 16.6. Preprocessing Input" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch16-38102">16.5. Filtering Your Own Output</A
></H2
><div class="sect2"><h3 class="sect2"><a class="title" name="ch16-pgfId-1074">Problem<a class="indexterm" name="ch16-idx-1000006271-0"></A
><a class="indexterm" name="ch16-idx-1000006271-1"></A
><a class="indexterm" name="ch16-idx-1000006271-2"></A
><a class="indexterm" name="ch16-idx-1000006271-3"></A
><a class="indexterm" name="ch16-idx-1000006271-4"></A
><a class="indexterm" name="ch16-idx-1000006271-5"></A
></A
></H3
><p class="para">You want to postprocess your program's output without writing a separate program to do so.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch16-pgfId-1080">Solution</A
></H3
><p class="para">Use the forking form of <code class="literal">open</CODE
> to attach a filter to yourself. For example, this will restrict your program to a hundred lines of output:</P
><pre class="programlisting">head(100);
while (&lt;&gt;) {
    print;
} 

sub head {
    my $lines = shift || 20;
    return if $pid = open(STDOUT, &quot;|-&quot;);
    die &quot;cannot fork: $!&quot; unless defined $pid;
    while (&lt;STDIN&gt;) {
        print;
        last unless --$lines ;
    } 
    exit;
} </PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch16-pgfId-1116">Discussion</A
></H3
><p class="para">It's easy to add an output filter. Just use the forking <em class="emphasis">open</EM
> on your own STDOUT, and let the child filter STDIN to STDOUT, performing whatever alterations you care about. Notice that we install the output filter <em class="emphasis">before</EM
> we generate the output. This makes sense&nbsp;- you can't filter your output if it has already left your program. Any such filters should be applied in LIFO order&nbsp;- the last one inserted is the first one run.</P
><p class="para">Here's an example that uses two output filters. One numbers lines; the other quotes the lines like a mail reply. When run on <em class="emphasis">/etc/motd</EM
>, you get something like:</P
><pre class="programlisting"><code class="userinput"><b><code class="replaceable"><i>1: &gt; Welcome to Linux, version 2.0.33 on a i686</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>2: &gt; </I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>3: &gt;     &quot;The software required `Windows 95 or better', </I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>4: &gt;      so I installed Linux.&quot;  </I
></CODE
></B
></CODE
></PRE
><p class="para">If you reversed the order of the two filters, you'd get:</P
><pre class="programlisting"><code class="userinput"><b><code class="replaceable"><i>&gt; 1: Welcome to Linux, Kernel version 2.0.33 on a i686</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>&gt; 2: </I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>&gt; 3:     &quot;The software required `Windows 95 or better', </I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>&gt; 4:      so I installed Linux.&quot;  </I
></CODE
></B
></CODE
></PRE
><p class="para">The program is in <a class="xref" href="#ch16-29490" title="qnumcat">Example 16.1</A
>.</P
><div class="example"><h4 class="example"><a class="title" name="ch16-29490">Example 16.1: qnumcat</A
></H4
><pre class="programlisting">#!/usr/bin/perl
# qnumcat - demo additive output filters

number();                   # push number filter on STDOUT
quote();                    # push quote filter on STDOUT

while (&lt;&gt;) {                # act like /bin/cat
    print;
} 
close STDOUT;               # tell kids we're done--politely
exit;

sub number {
    my $pid;
    return if $pid = open(STDOUT, &quot;|-&quot;);
    die &quot;cannot fork: $!&quot; unless defined $pid;
    while (&lt;STDIN&gt;) { printf &quot;%d: %s&quot;, $., $_ } 
    exit;
} 

sub quote {
    my $pid;
    return if $pid = open(STDOUT, &quot;|-&quot;);
    die &quot;cannot fork: $!&quot; unless defined $pid;
    while (&lt;STDIN&gt;) { print &quot;&gt; $_&quot; } 
    exit;
} </PRE
></DIV
><p class="para">As with all process forks, doing this a zillion times has some cost, but it's fine for a couple of processes, or even a couple dozen. If the system was actually designed to be multitasking right from the start, as Unix was, this is far cheaper than you imagine. Virtual memory and copy-on-write makes this efficient. Forking is an elegant and inexpensive solution to many, if not most, multitasking needs.<a class="indexterm" name="ch16-idx-1000006276-0"></A
><a class="indexterm" name="ch16-idx-1000006276-1"></A
><a class="indexterm" name="ch16-idx-1000006276-2"></A
><a class="indexterm" name="ch16-idx-1000006276-3"></A
><a class="indexterm" name="ch16-idx-1000006276-4"></A
><a class="indexterm" name="ch16-idx-1000006276-5"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch16-pgfId-1200">See Also</A
></H3
><p class="para">The <a class="olink" href="../prog/ch03_102.htm#PERL2-CMD-OPEN"><code class="literal">open</CODE
></A
> function in <a class="olink" href="../prog/ch03_01.htm">Chapter 3</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
> and in <i class="filename">perlfunc </I
>(1); <a class="xref" href="ch16_05.htm" title="Reading or Writing to Another Program">Recipe 16.4</A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch16_05.htm" title="16.4. Reading or Writing to Another Program"><img src="../gifs/txtpreva.gif" alt="Previous: 16.4. Reading or Writing to Another Program" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch16_07.htm" title="16.6. Preprocessing Input"><img src="../gifs/txtnexta.gif" alt="Next: 16.6. Preprocessing Input" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">16.4. Reading or Writing to Another Program</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">16.6. Preprocessing Input</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
