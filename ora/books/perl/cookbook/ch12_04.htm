<html><head>
<title>Recipe 12.3. Delaying use Until Run Time</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:41:24Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch12_01.htm" title="12. Packages, Libraries, and Modules"><link rel="prev" href="ch12_03.htm" title="12.2. Trapping Errors in require or use"><link rel="next" href="ch12_05.htm" title="12.4. Making Variables Private to a Module"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name="srchmap"index.html><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch12_03.htm" title="12.2. Trapping Errors in require or use"><img src="../gifs/txtpreva.gif" alt="Previous: 12.2. Trapping Errors in require or use" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch12_01.htm" title="12. Packages, Libraries, and Modules">Chapter 12<br>Packages, Libraries, and Modules</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch12_05.htm" title="12.4. Making Variables Private to a Module"><img src="../gifs/txtnexta.gif" alt="Next: 12.4. Making Variables Private to a Module" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch12-19732">12.3. Delaying use Until Run Time</A
></H2
><div class="sect2"><h3 class="sect2"><a class="title" name="ch12-pgfId-492">Problem<a class="indexterm" name="ch12-idx-1000005185-0"></A
><a class="indexterm" name="ch12-idx-1000005185-1"></A
><a class="indexterm" name="ch12-idx-1000005185-2"></A
><a class="indexterm" name="ch12-idx-1000005185-3"></A
><a class="indexterm" name="ch12-idx-1000005185-4"></A
></A
></H3
><p class="para">You have a module that you don't need to load each time the program runs, or whose inclusion you wish to delay until after the program starts up.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch12-pgfId-498">Solution</A
></H3
><p class="para">Either break up the <code class="literal">use</CODE
> into its separate <code class="literal">require</CODE
> and <code class="literal">import</CODE
> components, or else employ the <code class="literal">use</CODE
> <code class="literal">autouse</CODE
> pragma.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch12-pgfId-504">Discussion</A
></H3
><p class="para">Programs that check their arguments and abort with a usage message on error have no reason to load modules they'll never use. This delays the inevitable and annoys users. But those <code class="literal">use</CODE
> statements happen during compilation, not execution, as explained in the Introduction.</P
><p class="para">Here, an effective strategy is to place argument checking in a <code class="literal">BEGIN</CODE
> block before loading the modules. The following is the start of a program that checks to make sure it was called with exactly two arguments, which must be whole numbers, before going on to load the modules it will need:</P
><pre class="programlisting">BEGIN {
    unless (@ARGV == 2 &amp;&amp; (2 == grep {/^\d+$/} @ARGV)) {
        die &quot;usage: $0 num1 num2\n&quot;;
    }
}
use Some::Module;
use More::Modules;</PRE
><p class="para">A related situation arises in programs that don't always use the same set of modules every time they're run. For example, the <em class="emphasis">factors</EM
> program from <a class="xref" href="ch02_01.htm" title="Numbers">Chapter 2, <cite class="chapter">Numbers</CITE
></A
>, needs the infinite precision arithmetic library only when the <b class="emphasis.bold">-b</B
> command-line flag is supplied. A <code class="literal">use</CODE
> statement would be pointless within a conditional because it's evaluated at compile time, long before the <code class="literal">if</CODE
> can be checked. So we'll use a <code class="literal">require</CODE
> instead:</P
><pre class="programlisting">if ($opt_b) {
    require Math::BigInt;
}</PRE
><p class="para">Because Math::BigInt is an object-oriented module instead of a traditional one, no import was needed. If you have an import list, specify it with a <code class="literal">qw()</CODE
> construct as you would with <code class="literal">use</CODE
>. For example, rather than this:</P
><pre class="programlisting">use Fcntl qw(O_EXCL O_CREAT O_RDWR);</PRE
><p class="para">you might say this instead:</P
><pre class="programlisting">require Fcntl;
Fcntl-&gt;import(qw(O_EXCL O_CREAT O_RDWR));</PRE
><p class="para">Delaying the import until run time means that the rest of your program will not be subject to any imported semantic changes that the compiler would have seen if you'd used a <code class="literal">use</CODE
>. In particular, subroutine prototypes and the overriding of built-in functions will not be seen in time.</P
><p class="para">You might want to encapsulate this delayed loading in a subroutine. The following deceptively simple approach does not work:</P
><pre class="programlisting">sub load_module {
    require $_[0];  #WRONG
    import  $_[0];  #WRONG
}</PRE
><p class="para">It fails for subtle reasons. Imagine calling <code class="literal">require</CODE
> with an argument of <code class="literal">&quot;Math::BigFloat&quot;</CODE
>. If that's a bareword, the double colon is converted into your operating system's path separator and a trailing <code class="literal">.pm</CODE
> is added. But as a simple variable, it's a literal filename. Worse, Perl doesn't have a built-in <code class="literal">import</CODE
> function. Instead, there's a class method named <code class="literal">import</CODE
> that we're using the dubious indirect object syntax on. As with indirect filehandles, you can't use indirect objects on anything but a plain scalar variable, or a bareword or a block returning the object, not an expression or one element from an array or hash.</P
><p class="para">A better implementation might look more like:</P
><pre class="programlisting">load_module('Fcntl', qw(O_EXCL O_CREAT O_RDWR));

sub load_module {
    eval &quot;require $_[0]&quot;;
    die if $@;
    $_[0]-&gt;import(@_[1 .. $#_]);
}</PRE
><p class="para">But this still isn't perfectly correct in the general case. It really shouldn't import those symbols into its own package. It should put them into its caller's package. We could account for this, but the whole procedure is getting increasingly messy.</P
><p class="para">A convenient alternative is the <code class="literal">use</CODE
> <code class="literal">autouse</CODE
> pragma. New as of Perl 5.004, this directive can save time on infrequently loaded functions by delaying their loading until they're actually used:</P
><pre class="programlisting">use autouse Fcntl =&gt; qw( O_EXCL() O_CREAT() O_RDWR() );</PRE
><p class="para">We put parentheses after <code class="literal">O_EXCL </CODE
>, <code class="literal">O_CREAT </CODE
>, and <code class="literal">O_RDWR</CODE
> when we <code class="literal">autouse</CODE
>d them but not when we <code class="literal">use</CODE
>d them or <code class="literal">import</CODE
>ed them. The <code class="literal">autouse</CODE
> pragma doesn't just take function names, it can also take a prototype for the function. The Fcntl constants are prototyped to take no arguments, so we can use them as barewords in our program without <code class="literal">use</CODE
> <code class="literal">strict</CODE
> kvetching.</P
><p class="para">Remember, too, that <code class="literal">use</CODE
> <code class="literal">strict</CODE
>'s checks take place at compile time. If we <code class="literal">use</CODE
> <code class="literal">Fcntl</CODE
>, the prototypes in the Fcntl module will be compiled and we can use the constants without parentheses. If we <code class="literal">require</CODE
> or wrap the <code class="literal">use</CODE
> in an <code class="literal">eval</CODE
>, as we did earlier, we prevent the compiler from reading the prototypes, so we can't use the Fcntl constants without parentheses.</P
><p class="para">Read the <code class="literal">autouse</CODE
> pragma's online documentation to learn its various caveats and provisos.<a class="indexterm" name="ch12-idx-1000005200-0"></A
><a class="indexterm" name="ch12-idx-1000005200-1"></A
><a class="indexterm" name="ch12-idx-1000005200-2"></A
><a class="indexterm" name="ch12-idx-1000005200-3"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch12-pgfId-586">See Also</A
></H3
><p class="para"><a class="xref" href="ch12_03.htm" title="Trapping Errors in require or use">Recipe 12.2</A
>; the discussion on the <code class="literal">import</CODE
> method in the documentation for the standard Exporter module, also found in <a class="olink" href="../prog/ch07_01.htm">Chapter 7</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
>; the documentation for the standard <code class="literal">use</CODE
> <code class="literal">autouse</CODE
> pragma</P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch12_03.htm" title="12.2. Trapping Errors in require or use"><img src="../gifs/txtpreva.gif" alt="Previous: 12.2. Trapping Errors in require or use" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch12_05.htm" title="12.4. Making Variables Private to a Module"><img src="../gifs/txtnexta.gif" alt="Next: 12.4. Making Variables Private to a Module" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">12.2. Trapping Errors in require or use</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">12.4. Making Variables Private to a Module</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
