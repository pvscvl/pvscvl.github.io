<html><head>
<title>Recipe 12.1. Defining a Module's Interface</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:41:22Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch12_01.htm" title="12. Packages, Libraries, and Modules"><link rel="prev" href="ch12_01.htm" title="12.0. Introduction"><link rel="next" href="ch12_03.htm" title="12.2. Trapping Errors in require or use"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch12_01.htm" title="12.0. Introduction"><img src="../gifs/txtpreva.gif" alt="Previous: 12.0. Introduction" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch12_01.htm" title="12. Packages, Libraries, and Modules">Chapter 12<br>Packages, Libraries, and Modules</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch12_03.htm" title="12.2. Trapping Errors in require or use"><img src="../gifs/txtnexta.gif" alt="Next: 12.2. Trapping Errors in require or use" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch12-28525">12.1. Defining a Module's Interface</A
></H2
><div class="sect2"><h3 class="sect2"><a class="title" name="ch12-pgfId-158">Problem<a class="indexterm" name="ch12-idx-1000005139-0"></A
></A
></H3
><p class="para">You want the standard <a class="indexterm" name="ch12-idx-1000005140-0"></A
>Exporter module to define the external interface to your module.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch12-pgfId-164">Solution</A
></H3
><p class="para">In module file <em class="emphasis">YourModule.pm</EM
>, place the following code. Fill in the ellipses as explained in the Discussion section.</P
><pre class="programlisting">package YourModule;
use strict;
use vars qw(@ISA @EXPORT @EXPORT_OK %EXPORT_TAGS $VERSION);

use Exporter;
$VERSION = 1.00;              # Or higher
@ISA = qw(Exporter);

@EXPORT      = qw(...);       # Symbols to autoexport (:DEFAULT tag)
@EXPORT_OK   = qw(...);       # Symbols to export on request
%EXPORT_TAGS = (              # Define names for sets of symbols
    TAG1 =&gt; [...],
    TAG2 =&gt; [...],
    ...
);

########################
# your code goes here
########################

1;                            # this should be your last line</PRE
><p class="para">In other files where you want to use YourModule, choose one of these lines:</P
><pre class="programlisting">use YourModule;               # Import default symbols into my package.
use YourModule qw(...);       # Import listed symbols into my package.
use YourModule ();            # Do not import any symbols
use YourModule qw(:TAG1);     # Import whole tag set</PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch12-pgfId-236">Discussion</A
></H3
><p class="para">The standard Exporter module handles the module's external interface. Although you could define your own <code class="literal">import</CODE
> method for your package, almost no one does this.</P
><p class="para">When someone says <code class="literal">use</CODE
> <code class="literal">YourModule</CODE
>, this does a <code class="literal">require</CODE
> <code class="literal">&quot;YourModule.pm&quot;</CODE
> statement followed a <code class="literal">YourModule-&gt;import()</CODE
> method call, both during compile time. The <code class="literal">import</CODE
> method inherited from the Exporter package looks for global variables in your package to govern its behavior. Because they must be package globals, we've declared them with the <code class="literal">use</CODE
> <code class="literal">vars</CODE
> pragma to satisfy <code class="literal">use</CODE
> <code class="literal">strict</CODE
>. These variables are:</P
><dl class="variablelist"><dt class="term"><code class="literal">$VERSION</CODE
> </DT
><dd class="listitem"><p class="para"><a class="indexterm" name="ch12-idx-1000005151-0"></A
>When a module is loaded, a minimal required version number can be supplied. If the version isn't at least this high, the <code class="literal">use</CODE
> will raise an exception.</P
><p class="para">use YourModule 1.86;        # If $VERSION &lt; 1.86, fail</P
></DD
><dt class="term"><code class="literal">@EXPORT</CODE
> </DT
><dd class="listitem"><p class="para"><a class="indexterm" name="ch12-idx-1000005152-0"></A
>This array contains a list of functions and variables that will be exported into the caller's own namespace so they can be accessed without being fully qualified. Typically, a <code class="literal">qw()</CODE
> list is used.</P
><pre class="programlisting">    @EXPORT = qw(&amp;F1 &amp;F2 @List);
    @EXPORT = qw( F1  F2 @List);        # same thing</PRE
><p class="para">When a simple <code class="literal">use</CODE
> <code class="literal">YourModule</CODE
> call is made, the function <code class="literal">&amp;F1</CODE
> can be called as <code class="literal">F1()</CODE
> rather than <code class="literal">YourModule::F1()</CODE
> and the array can be accessed as <code class="literal">@List</CODE
> instead of <code class="literal">@YourModule::List</CODE
>. The ampersand is optional in front of an exported function specification.</P
><p class="para">To load the module at compile time but request that no symbols be exported, use the special form <code class="literal">use</CODE
> <code class="literal">Exporter</CODE
> <code class="literal">()</CODE
>, with empty parentheses.</P
></DD
><dt class="term"><code class="literal">@EXPORT_OK</CODE
> </DT
><dd class="listitem"><p class="para"><a class="indexterm" name="ch12-idx-1000005154-0"></A
>This array contains symbols that can be imported if they're specifically asked for. If the array were loaded this way:</P
><pre class="programlisting">    @EXPORT_OK = qw(Op_Func %Table);</PRE
><p class="para">Then the user could load the module like so:</P
><pre class="programlisting">    use YourModule qw(Op_Func %Table F1);</PRE
><p class="para">and import only the <code class="literal">Op_Func</CODE
> function, the <code class="literal">%Table</CODE
> hash, and the <code class="literal">F1</CODE
> function. The <code class="literal">F1</CODE
> function was listed in the <code class="literal">@EXPORT</CODE
> array. Notice that this does not automatically import <code class="literal">F2</CODE
> or <code class="literal">@List</CODE
>, even though they're in <code class="literal">@EXPORT</CODE
>. To get everything in <code class="literal">@EXPORT</CODE
> plus extras from <code class="literal">@EXPORT_OK</CODE
>, use the special <code class="literal">:DEFAULT</CODE
> tag, such as:</P
><pre class="programlisting">    use YourModule qw(:DEFAULT %Table);</PRE
></DD
><dt class="term"><code class="literal">%EXPORT_TAGS</CODE
> </DT
><dd class="listitem"><p class="para">This hash is used by large modules like CGI or POSIX to create higher-level groupings of related import symbols. Its values are references to arrays of symbol names, all of which must be in either <a class="indexterm" name="ch12-idx-1000005165-0"></A
><code class="literal">@EXPORT</CODE
> or <code class="literal">@EXPORT_OK</CODE
>. Here's a sample initialization:</P
><pre class="programlisting">    %EXPORT_TAGS = (
        Functions =&gt; [ qw(F1 F2 Op_Func) ],
        Variables =&gt; [ qw(@List %Table)  ],
);</PRE
><p class="para">An import symbol with a leading colon means to import a whole group of symbols. Here's an example:</P
><pre class="programlisting">    use YourModule qw(:Functions %Table);</PRE
><p class="para">That pulls in all the symbols from</P
><pre class="programlisting"><code class="literal">    @{</CODE
> <code class="literal">$YourModule::EXPORT_TAGS{Functions}</CODE
> <code class="literal">}</CODE
>, </PRE
><p class="para">that is, it pulls in the <code class="literal">F1</CODE
>, <code class="literal">F2</CODE
>, and <code class="literal">Op_Func</CODE
> functions and then the <code class="literal">%Table</CODE
> hash.</P
><p class="para">Although you don't list it in <code class="literal">%EXPORT_TAGS</CODE
>, the implicit tag <code class="literal">:DEFAULT</CODE
> automatically means everything in <code class="literal">@EXPORT</CODE
>.</P
><p class="para">You don't have to have all those variables defined in your module. You just need the ones that you expect people to be able to use.<a class="indexterm" name="ch12-idx-1000005142-0"></A
><a class="indexterm" name="ch12-idx-1000005142-1"></A
></P
></DD
></DL
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch12-pgfId-332">See Also</A
></H3
><p class="para">The documentation for the standard Exporter module, also found in <a class="olink" href="../prog/ch07_01.htm">Chapter 7</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
>; <a class="xref" href="ch12_08.htm" title="Keeping Your Own Module Directory">Recipe 12.7</A
>; <a class="xref" href="ch12_19.htm" title="Example: Module Template">Recipe 12.18</A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch12_01.htm" title="12.0. Introduction"><img src="../gifs/txtpreva.gif" alt="Previous: 12.0. Introduction" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch12_03.htm" title="12.2. Trapping Errors in require or use"><img src="../gifs/txtnexta.gif" alt="Next: 12.2. Trapping Errors in require or use" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">12.0. Introduction</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">12.2. Trapping Errors in require or use</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
