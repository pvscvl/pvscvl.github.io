<html><head>
<title>Recipe 19.7. Formatting Lists and Tables with HTML Shortcuts</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:45:36Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch19_01.htm" title="19. CGI Programming"><link rel="prev" href="ch19_07.htm" title="19.6. Executing Commands Without Shell Escapes"><link rel="next" href="ch19_09.htm" title="19.8. Redirecting to a Different Location"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name="srchmap"index.html><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch19_07.htm" title="19.6. Executing Commands Without Shell Escapes"><img src="../gifs/txtpreva.gif" alt="Previous: 19.6. Executing Commands Without Shell Escapes" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch19_01.htm" title="19. CGI Programming">Chapter 19<br>CGI Programming</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch19_09.htm" title="19.8. Redirecting to a Different Location"><img src="../gifs/txtnexta.gif" alt="Next: 19.8. Redirecting to a Different Location" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch19-12318">19.7. Formatting Lists and Tables with HTML Shortcuts</A
></H2
><div class="sect2"><h3 class="sect2"><a class="title" name="ch19-pgfId-642">Problem<a class="indexterm" name="ch19-idx-1000005454-0"></A
><a class="indexterm" name="ch19-idx-1000005454-1"></A
></A
></H3
><p class="para">You have several lists and tables to generate and would like helper functions to make these easier to output.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch19-pgfId-648">Solution</A
></H3
><p class="para">The CGI module provides HTML helper functions which, when passed array references, apply themselves to each element of the referenced array:</P
><pre class="programlisting">print ol( li([ qw(red blue green)]) );
<code class="userinput"><b><code class="replaceable"><i>&lt;OL&gt;&lt;LI&gt;red&lt;/LI&gt; &lt;LI&gt;blue&lt;/LI&gt; &lt;LI&gt;green&lt;/LI&gt;&lt;/OL&gt;</I
></CODE
></B
></CODE
>
@names = qw(Larry Moe Curly);
print ul( li({ -TYPE =&gt; &quot;disc&quot; }, \@names) );
<code class="userinput"><b><code class="replaceable"><i>&lt;UL&gt;&lt;LI TYPE=&quot;disc&quot;&gt;Larry&lt;/LI&gt; &lt;LI TYPE=&quot;disc&quot;&gt;Moe&lt;/LI&gt; </I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>    &lt;LI TYPE=&quot;disc&quot;&gt;Curly&lt;/LI&gt;&lt;/UL&gt;</I
></CODE
></B
></CODE
></PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch19-pgfId-664">Discussion</A
></H3
><p class="para">The distributive behavior of the HTML generating functions in CGI.pm can significantly simplify generation of lists and tables. Passed a simple string, they just produce HTML for that string. But passed an array reference, they work on all those strings.</P
><pre class="programlisting">print li(&quot;alpha&quot;);
<code class="userinput"><b><code class="replaceable"><i>    &lt;LI&gt;alpha&lt;/LI&gt;</I
></CODE
></B
></CODE
>
print li( [ &quot;alpha&quot;, &quot;omega&quot;] );
<code class="userinput"><b><code class="replaceable"><i>    &lt;LI&gt;alpha&lt;/LI&gt; &lt;LI&gt;omega&lt;/LI&gt;</I
></CODE
></B
></CODE
></PRE
><p class="para">The shortcut functions for lists will be loaded when you use the <code class="literal">:standard</CODE
> import tag, but you need to ask for <code class="literal">:html3</CODE
> explicitly to get helper functions for working with tables. There's also a conflict between the <code class="literal">&lt;TR&gt;</CODE
> tag, which would normally make a <code class="literal">tr()</CODE
> function, and Perl's built-in <code class="literal">tr///</CODE
> operator. Therefore, to make a table row, use the <code class="literal">Tr()</CODE
> function.</P
><p class="para">This example generates an HTML table starting with a hash of arrays. The keys will be the row headers, and the array of values will be the columns.</P
><pre class="programlisting">use CGI qw(:standard :html3);

%hash = (
    &quot;Wisconsin&quot;  =&gt; [ &quot;Superior&quot;, &quot;Lake Geneva&quot;, &quot;Madison&quot; ],
    &quot;Colorado&quot;   =&gt; [ &quot;Denver&quot;, &quot;Fort Collins&quot;, &quot;Boulder&quot; ],
    &quot;Texas&quot;      =&gt; [ &quot;Plano&quot;, &quot;Austin&quot;, &quot;Fort Stockton&quot; ],
    &quot;California&quot; =&gt; [ &quot;Sebastopol&quot;, &quot;Santa Rosa&quot;, &quot;Berkeley&quot; ],
);

$\ = &quot;\n&quot;;

print &quot;&lt;TABLE&gt; &lt;CAPTION&gt;Cities I Have Known&lt;/CAPTION&gt;&quot;;
print Tr(th [qw(State Cities)]);
for $k (sort keys %hash) {
    print Tr(th($k), td( [ sort @{$hash{$k}} ] ));
}
print &quot;&lt;/TABLE&gt;&quot;;</PRE
><p class="para">That generates text that looks like this:</P
><pre class="programlisting"><code class="userinput"><b><code class="replaceable"><i>&lt;TABLE&gt; &lt;CAPTION&gt;Cities I Have Known&lt;/CAPTION&gt;</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>    &lt;TR&gt;&lt;TH&gt;State&lt;/TH&gt; &lt;TH&gt;Cities&lt;/TH&gt;&lt;/TR&gt;</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>    &lt;TR&gt;&lt;TH&gt;California&lt;/TH&gt; &lt;TD&gt;Berkeley&lt;/TD&gt; &lt;TD&gt;Santa Rosa&lt;/TD&gt; </I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>        &lt;TD&gt;Sebastopol&lt;/TD&gt; &lt;/TR&gt;</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>    &lt;TR&gt;&lt;TH&gt;Colorado&lt;/TH&gt; &lt;TD&gt;Boulder&lt;/TD&gt; &lt;TD&gt;Denver&lt;/TD&gt; </I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>        &lt;TD&gt;Fort Collins&lt;/TD&gt; &lt;/TR&gt;</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>    &lt;TR&gt;&lt;TH&gt;Texas&lt;/TH&gt; &lt;TD&gt;Austin&lt;/TD&gt; &lt;TD&gt;Fort Stockton&lt;/TD&gt; </I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>        &lt;TD&gt;Plano&lt;/TD&gt;&lt;/TR&gt;</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>    &lt;TR&gt;&lt;TH&gt;Wisconsin&lt;/TH&gt; &lt;TD&gt;Lake Geneva&lt;/TD&gt; &lt;TD&gt;Madison&lt;/TD&gt; </I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>        &lt;TD&gt;Superior&lt;/TD&gt;&lt;/TR&gt;</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>&lt;/TABLE&gt;</I
></CODE
></B
></CODE
></PRE
><p class="para">You can produce the same output using one print statement, although it is slightly trickier, because you have to use a <code class="literal">map</CODE
> to create the implicit loop. This print statement produces output identical to that displayed above:</P
><pre class="programlisting">print table
        caption('Cities I have Known'),
        Tr(th [qw(State Cities)]),
        map { Tr(th($_), td( [ sort @{$hash{$_}} ] )) } sort keys %hash;</PRE
><p class="para">This is particularly useful for formatting the results of a <a class="indexterm" name="ch19-idx-1000005592-0"></A
><a class="indexterm" name="ch19-idx-1000005592-1"></A
><a class="indexterm" name="ch19-idx-1000005592-2"></A
>database query, as in <a class="xref" href="#ch19-34510" title="salcheck">Example 19.3</A
> (see <a class="xref" href="ch14_01.htm" title="Database Access">Chapter 14, <cite class="chapter">Database Access</CITE
></A
>).</P
><div class="example"><h4 class="example"><a class="title" name="ch19-34510">Example 19.3: salcheck</A
></H4
><pre class="programlisting">#!/usr/bin/perl
# salcheck - check for salaries
use DBI;
use CGI qw(:standard :html3);

$limit = param(&quot;LIMIT&quot;);

print header(), start_html(&quot;Salary Query&quot;),
      h1(&quot;Search&quot;),
      <code class="literal">start_form()</CODE
>,
      p(&quot;Enter minimum salary&quot;, textfield(&quot;LIMIT&quot;)),
      <code class="literal">submit(),</CODE
>
<code class="literal">      end_form();</CODE
>

if (defined $limit) {
    $dbh = <a class="indexterm" name="ch19-idx-1000007372-0"></A
>DBI-&gt;connect(&quot;dbi:mysql:somedb:server.host.dom:3306&quot;, 
        &quot;username&quot;, &quot;password&quot;) 
        or die &quot;Connecting: $DBI::errstr&quot;;
    $sth = $dbh-&gt;prepare(&quot;SELECT name,salary FROM employees 
        WHERE salary &gt; $limit&quot;)
        or die &quot;Preparing: &quot;, $dbh-&gt;errstr;
    $sth-&gt;execute
        or die &quot;Executing: &quot;, $sth-&gt;errstr;

    print h1(&quot;Results&quot;), &quot;&lt;TABLE BORDER=1&gt;&quot;;

    while (@row = $sth-&gt;<code class="literal">fetchrow_array())</CODE
> {
           print Tr( td( \@row ) );
    }

    print &quot;&lt;/TABLE&gt;\n&quot;;
    $sth-&gt;finish;
    $dbh-&gt;disconnect;
}

print <code class="literal">end_html();</CODE
><a class="indexterm" name="ch19-idx-1000005812-0"></A
><a class="indexterm" name="ch19-idx-1000005812-1"></A
></PRE
></DIV
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch19-pgfId-808">See Also</A
></H3
><p class="para">The documentation for the standard CGI module; <a class="xref" href="ch14_11.htm" title="Executing an SQL Command Using DBI and DBD">Recipe 14.10</A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch19_07.htm" title="19.6. Executing Commands Without Shell Escapes"><img src="../gifs/txtpreva.gif" alt="Previous: 19.6. Executing Commands Without Shell Escapes" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch19_09.htm" title="19.8. Redirecting to a Different Location"><img src="../gifs/txtnexta.gif" alt="Next: 19.8. Redirecting to a Different Location" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">19.6. Executing Commands Without Shell Escapes</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">19.8. Redirecting to a Different Location</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
