<html><head>
<title>Recipe 16.6. Preprocessing Input</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:43:43Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch16_01.htm" title="16. Process Management and Communication"><link rel="prev" href="ch16_06.htm" title="16.5. Filtering Your Own Output"><link rel="next" href="ch16_08.htm" title="16.7. Reading STDERR from a Program"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch16_06.htm" title="16.5. Filtering Your Own Output"><img src="../gifs/txtpreva.gif" alt="Previous: 16.5. Filtering Your Own Output" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch16_01.htm" title="16. Process Management and Communication">Chapter 16<br>Process Management and Communication</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch16_08.htm" title="16.7. Reading STDERR from a Program"><img src="../gifs/txtnexta.gif" alt="Next: 16.7. Reading STDERR from a Program" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch16-56421">16.6. Preprocessing Input</A
></H2
><div class="sect2"><h3 class="sect2"><a class="title" name="ch16-pgfId-1210">Problem<a class="indexterm" name="ch16-idx-1000006281-0"></A
><a class="indexterm" name="ch16-idx-1000006281-1"></A
><a class="indexterm" name="ch16-idx-1000006281-2"></A
><a class="indexterm" name="ch16-idx-1000006281-3"></A
><a class="indexterm" name="ch16-idx-1000006281-4"></A
></A
></H3
><p class="para">You'd like your programs to work on files with funny formats, such as compressed files or remote web documents specified with a URL, but your program only knows how to access regular text in local files.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch16-pgfId-1216">Solution</A
></H3
><p class="para">Take advantage of Perl's easy pipe handling by changing your input files' names to pipes before opening them.</P
><p class="para">To autoprocess gzipped or compressed files by decompressing them with <em class="emphasis">gzip</EM
>, use:</P
><pre class="programlisting">@ARGV = map { /\.(gz|Z)$/ ? &quot;gzip -dc $_ |&quot; : $_  } @ARGV;
while (&lt;&gt;) {
    # .......
} </PRE
><p class="para">To fetch URLs before processing them, use the <em class="emphasis">GET</EM
> program from LWP (see <a class="xref" href="ch20_01.htm" title="Web Automation">Chapter 20, <cite class="chapter">Web Automation</CITE
></A
>):</P
><pre class="programlisting">@ARGV = map { m#^\w+://# ? &quot;GET $_ |&quot; : $_ } @ARGV;
while (&lt;&gt;) {
    # .......
} </PRE
><p class="para">You might prefer to fetch just the text, of course, not the HTML. That just means using a different command, perhaps <em class="emphasis">lynx -dump</EM
>.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch16-pgfId-1244">Discussion</A
></H3
><p class="para">As shown in <a class="xref" href="ch16_02.htm" title="Gathering Output from a Program">Recipe 16.1</A
>, Perl's built-in <code class="literal">open</CODE
> function is magical: you don't have to do anything special to get Perl to open a pipe instead of a file. (That's why it's sometimes called <em class="emphasis">magic open</EM
><a class="indexterm" name="ch16-idx-1000006307-0"></A
><a class="indexterm" name="ch16-idx-1000006307-1"></A
><a class="indexterm" name="ch16-idx-1000006307-2"></A
><a class="indexterm" name="ch16-idx-1000006307-3"></A
> and, when applied to implicit ARGV processing, <em class="emphasis">magic ARGV</EM
>.) If it looks like a pipe, Perl will open it like a pipe. We take advantage of this by rewriting certain filenames to include a decompression or other preprocessing stage. For example, the file <code class="literal">&quot;09tails.gz&quot;</CODE
> becomes <code class="literal">&quot;gzcat</CODE
> <code class="literal">-dc</CODE
> <code class="literal">09tails.gz|&quot;</CODE
>.</P
><p class="para">This technique has further applications. Suppose you wanted to read <em class="emphasis">/etc/passwd</EM
> if the machine isn't using NIS, and the output of <em class="emphasis">ypcat passwd</EM
> if it is. You'd use the output of the <em class="emphasis">domainname</EM
> program to decide if you're running NIS, and then set the filename to open to be either <code class="literal">&quot;&lt;</CODE
> <code class="literal">/etc/passwd&quot;</CODE
> or <code class="literal">&quot;ypcat</CODE
> <code class="literal">passwd|&quot;</CODE
>:</P
><pre class="programlisting">$pwdinfo = `domainname` =~ /^(\(none\))?$/
                ? '&lt; /etc/passwd'
                : 'ypcat  passwd |';

open(PWD, $pwdinfo)                 or die &quot;can't open $pwdinfo: $!&quot;;</PRE
><p class="para">The wonderful thing is that even if you didn't think to build such processing into your program, Perl already did it for you. Imagine a snippet of code like this:</P
><pre class="programlisting">print &quot;File, please? &quot;;
chomp($file = &lt;&gt;);
open (FH, $file)                    or die &quot;can't open $file: $!&quot;;</PRE
><p class="para">The user can enter a regular filename&nbsp;- or something like <code class="literal">&quot;webget</CODE
> <code class="literal">http://www.perl.com</CODE
> <code class="literal">|&quot;</CODE
> instead&nbsp;- and your program would suddenly be reading from the output of some <em class="emphasis">webget</EM
> program. They could even enter -, a lone minus sign, which, when opened for reading, interpolates standard input instead.</P
><p class="para">This also comes in handy with the automatic ARGV processing we saw in <a class="xref" href="ch07_08.htm" title="Writing a Filter">Recipe 7.7</A
>.<a class="indexterm" name="ch16-idx-1000006283-0"></A
><a class="indexterm" name="ch16-idx-1000006283-1"></A
><a class="indexterm" name="ch16-idx-1000006283-2"></A
><a class="indexterm" name="ch16-idx-1000006283-3"></A
><a class="indexterm" name="ch16-idx-1000006283-4"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch16-pgfId-1000005186">See Also</A
></H3
><p class="para"><a class="xref" href="ch07_08.htm" title="Writing a Filter">Recipe 7.7</A
>; <a class="xref" href="ch16_05.htm" title="Reading or Writing to Another Program">Recipe 16.4</A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch16_06.htm" title="16.5. Filtering Your Own Output"><img src="../gifs/txtpreva.gif" alt="Previous: 16.5. Filtering Your Own Output" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch16_08.htm" title="16.7. Reading STDERR from a Program"><img src="../gifs/txtnexta.gif" alt="Next: 16.7. Reading STDERR from a Program" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">16.5. Filtering Your Own Output</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">16.7. Reading STDERR from a Program</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
