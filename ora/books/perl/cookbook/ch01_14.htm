<html><head>
<title>Recipe 1.13. Escaping Characters</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:29:18Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch01_01.htm" title="1. Strings"><link rel="prev" href="ch01_13.htm" title="1.12. Reformatting Paragraphs"><link rel="next" href="ch01_15.htm" title="1.14. Trimming Blanks from the Ends of a String"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch01_13.htm" title="1.12. Reformatting Paragraphs"><img src="../gifs/txtpreva.gif" alt="Previous: 1.12. Reformatting Paragraphs" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch01_01.htm" title="1. Strings">Chapter 1<br>Strings</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch01_15.htm" title="1.14. Trimming Blanks from the Ends of a String"><img src="../gifs/txtnexta.gif" alt="Next: 1.14. Trimming Blanks from the Ends of a String" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch01-23292">1.13. Escaping Characters</A
></H2
><div class="sect2"><h3 class="sect2"><a class="title" name="ch01-pgfId-1523">Problem <a class="indexterm" name="ch01-idx-1000010315-0"></A
><a class="indexterm" name="ch01-idx-1000010315-1"></A
><a class="indexterm" name="ch01-idx-1000010315-2"></A
></A
></H3
><p class="para">You need to output a string with certain characters (quotes, commas, etc.) escaped. For instance, you're producing a format string for <code class="literal">sprintf</CODE
> and want to convert literal <code class="literal">%</CODE
> signs into <code class="literal">%%</CODE
>.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch01-pgfId-1529">Solution</A
></H3
><p class="para">Use a substitution to backslash or double each character to be escaped. <a class="indexterm" name="ch01-idx-1000010316-0"></A
><a class="indexterm" name="ch01-idx-1000010316-1"></A
></P
><pre class="programlisting"># backslash
$var =~ s/([CHARLIST])/\\$1/g;

# double
$var =~ s/([CHARLIST])/$1$1/g;</PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch01-pgfId-1545">Discussion</A
></H3
><p class="para"><code class="literal">$var</CODE
> is the variable to be altered. The <code class="literal">CHARLIST</CODE
> is a list of characters to escape and can contain backslash escapes like <code class="literal">\t</CODE
> and <code class="literal">\n</CODE
>. If you just have one character to escape, omit the brackets:</P
><pre class="programlisting">$string =~ s/%/%%/g;</PRE
><p class="para">The following lets you do escaping when preparing strings to submit to the shell. (In practice, you would need to escape more than just <code class="literal">'</CODE
> and &quot; to make any arbitrary string safe for the shell. Getting the list of characters right is so hard, and the risks if you get it wrong are so great, that you're better off using the list form of <code class="literal">system</CODE
> and <code class="literal">exec</CODE
> to run programs, shown in <a class="xref" href="ch16_03.htm" title="Running Another Program">Recipe 16.2</A
>. They avoid the shell altogether.)</P
><pre class="programlisting">$string = q(Mom said, &quot;Don't do that.&quot;);
$string =~ s/(['&quot;])/\\$1/g;</PRE
><p class="para">We had to use two backslashes in the replacement because the replacement section of a substitution is read as a double-quoted string, and to get one backslash, you need to write two. Here's a similar example for VMS DCL, where you need to double every quote to get one through:</P
><pre class="programlisting">$string = q(Mom said, &quot;Don't do that.&quot;);
$string =~ s/(['&quot;])/$1$1/g;</PRE
><p class="para">Microsoft <a class="indexterm" name="ch01-idx-1000010327-0"></A
>command interpreters are harder to work with. In DOS and Windows <em class="emphasis">COMMAND.COM</EM
> recognizes double quotes but not single ones, has no clue what to do with backquotes, and requires a backslash to make a double quote a literal. Almost any of the free or commercial Unix-like shell environments for Windows will improve this depressing situation.</P
><p class="para">Because we're using character classes in the regular expressions, we can use <code class="literal">-</CODE
> to define a range, and <code class="literal">^</CODE
> at the start to negate. This escapes all characters that aren't in the range A through Z.</P
><pre class="programlisting">$string =~ s/([^A-Z])/\\$1/g;</PRE
><p class="para">If you want to escape all non-word characters, use the <code class="literal">\Q</CODE
> and <code class="literal">\E</CODE
> string metacharacters or the <code class="literal">quotemeta</CODE
><a class="indexterm" name="ch01-idx-1000010328-0"></A
><a class="indexterm" name="ch01-idx-1000010328-1"></A
><a class="indexterm" name="ch01-idx-1000010328-2"></A
> function. For example, these are equivalent:</P
><pre class="programlisting">$string = &quot;this \Qis a test!\E&quot;;
$string = &quot;this is\\ a\\ test\\!&quot;;
$string = &quot;this &quot; . quotemeta(&quot;is a test!&quot;);</PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch01-pgfId-1579">See Also</A
></H3
><p class="para">The <code class="literal">s///</CODE
> operator in <em class="emphasis">perlre </EM
>(1) and <em class="emphasis">perlop </EM
>(1) and the <a class="olink" href="../prog/ch02_04.htm#PERL2-CH-2-SECT-4.1.2">"Pattern Matching"</A
> section of <a class="olink" href="../prog/ch02_01.htm">Chapter 2</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
>; the <code class="literal">quotemeta</CODE
> function in <em class="emphasis">perlfunc </EM
>(1) and <a class="olink" href="../prog/ch03_01.htm">Chapter 3</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
>; the discussion of HTML escaping in <a class="xref" href="ch19_02.htm" title="Writing a CGI Script">Recipe 19.1</A
>; <a class="xref" href="ch19_07.htm" title="Executing Commands Without Shell Escapes">Recipe 19.6</A
> for how to avoid having to escape strings to give the shell<a class="indexterm" name="ch01-idx-1000010323-0"></A
><a class="indexterm" name="ch01-idx-1000010323-1"></A
><a class="indexterm" name="ch01-idx-1000010323-2"></A
> <a class="indexterm" name="ch01-idx-1000010318-0"></A
><a class="indexterm" name="ch01-idx-1000010318-1"></A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch01_13.htm" title="1.12. Reformatting Paragraphs"><img src="../gifs/txtpreva.gif" alt="Previous: 1.12. Reformatting Paragraphs" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch01_15.htm" title="1.14. Trimming Blanks from the Ends of a String"><img src="../gifs/txtnexta.gif" alt="Next: 1.14. Trimming Blanks from the Ends of a String" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">1.12. Reformatting Paragraphs</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">1.14. Trimming Blanks from the Ends of a String</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
