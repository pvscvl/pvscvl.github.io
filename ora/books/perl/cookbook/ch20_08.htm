<html><head>
<title>Recipe 20.7. Finding Stale Links</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:45:59Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch20_01.htm" title="20. Web Automation"><link rel="prev" href="ch20_07.htm" title="20.6. Extracting or Removing HTML Tags"><link rel="next" href="ch20_09.htm" title="20.8. Finding Fresh Links"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch20_07.htm" title="20.6. Extracting or Removing HTML Tags"><img src="../gifs/txtpreva.gif" alt="Previous: 20.6. Extracting or Removing HTML Tags" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch20_01.htm" title="20. Web Automation">Chapter 20<br>Web Automation</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch20_09.htm" title="20.8. Finding Fresh Links"><img src="../gifs/txtnexta.gif" alt="Next: 20.8. Finding Fresh Links" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch20-14595">20.7. Finding Stale Links</A
></H2
><div class="sect2"><h3 class="sect2"><a class="title" name="ch20-pgfId-1000002646">Problem<a class="indexterm" name="ch20-idx-1000002650-0"></A
><a class="indexterm" name="ch20-idx-1000002650-1"></A
><a class="indexterm" name="ch20-idx-1000002650-2"></A
><a class="indexterm" name="ch20-idx-1000002650-3"></A
><a class="indexterm" name="ch20-idx-1000002650-4"></A
><a class="indexterm" name="ch20-idx-1000002650-5"></A
></A
></H3
><p class="para">You want to check whether a document contains invalid links.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch20-pgfId-777">Solution</A
></H3
><p class="para">Use the technique outlined in <a class="xref" href="ch20_04.htm" title="Extracting URLs">Recipe 20.3</A
> to extract each link, and then use the LWP::Simple module's <code class="literal">head</CODE
> function to make sure that link exists.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch20-pgfId-783">Discussion</A
></H3
><p class="para"><a class="xref" href="#ch20-77587" title="churl">Example 20.5</A
> is an applied example of the link-extraction technique. Instead of just printing the name of the link, we call the LWP::Simple module's <code class="literal">head</CODE
> function on it. The HEAD method fetches the remote document's metainformation to determine status information without downloading the whole document. If it fails, then the link is bad so we print an appropriate message.</P
><p class="para">Because this program uses the <code class="literal">get</CODE
> function from LWP::Simple, it is expecting a URL, not a filename. If you want to supply either, use the <a class="indexterm" name="ch20-idx-1000003872-0"></A
>URI::Heuristic module described in <a class="xref" href="ch20_02.htm" title="Fetching a URL from a Perl Script">Recipe 20.1</A
>.</P
><div class="example"><h4 class="example"><a class="title" name="ch20-77587">Example 20.5: churl</A
></H4
><pre class="programlisting">#!/usr/bin/perl -w
# churl - check urls

use HTML::LinkExtor;
use LWP::Simple qw(get head);

$base_url = shift
    or die &quot;usage: $0 &lt;start_url&gt;\n&quot;;
$parser = HTML::LinkExtor-&gt;new(undef, $base_url);
$parser-&gt;parse(get($base_url));
@links = $parser-&gt;links;
print &quot;$base_url: \n&quot;;
foreach $linkarray (@links) {
    my @element  = @$linkarray;
    my $elt_type = shift @element;
    while (@element) {
        my ($attr_name , $attr_value) = splice(@element, 0, 2);
        if ($attr_value-&gt;scheme =~ /\b(ftp|https?|file)\b/) {
            print &quot;  $attr_value: &quot;, head($attr_value) ? &quot;OK&quot; : &quot;BAD&quot;, &quot;\n&quot;;
        }
    }
}</PRE
></DIV
><p class="para">Here's an example of a program run:</P
><pre class="programlisting">% churl http://www.wizards.com
<code class="userinput"><b><code class="replaceable"><i>http://www.wizards.com:</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>  FrontPage/FP_Color.gif:  OK</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>  FrontPage/FP_BW.gif:  BAD</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>  #FP_Map:  OK</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>  Games_Library/Welcome.html:  OK</I
></CODE
></B
></CODE
></PRE
><p class="para">This program has the same limitation as the HTML::LinkExtor program in <a class="xref" href="ch20_04.htm" title="Extracting URLs">Recipe 20.3</A
>.<a class="indexterm" name="ch20-idx-1000003913-0"></A
><a class="indexterm" name="ch20-idx-1000003913-1"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch20-pgfId-851">See Also</A
></H3
><p class="para">The documentation for the CPAN modules HTML::LinkExtor, LWP::Simple, LWP::UserAgent, and HTTP::Response; <a class="xref" href="ch20_09.htm" title="Finding Fresh Links">Recipe 20.8</A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch20_07.htm" title="20.6. Extracting or Removing HTML Tags"><img src="../gifs/txtpreva.gif" alt="Previous: 20.6. Extracting or Removing HTML Tags" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch20_09.htm" title="20.8. Finding Fresh Links"><img src="../gifs/txtnexta.gif" alt="Next: 20.8. Finding Fresh Links" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">20.6. Extracting or Removing HTML Tags</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">20.8. Finding Fresh Links</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
