<html><head>
<title>[Chapter 1] Strings</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:28:25Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="index.htm" title="Perl Cookbook"><link rel="prev" href="prf2_06.htm" title="Acknowledgments"><link rel="next" href="ch01_02.htm" title="1.1. Accessing Substrings"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name="srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="prf2_06.htm" title="Acknowledgments"><img src="../gifs/txtpreva.gif" alt="Previous: Acknowledgments" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 1</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch01_02.htm" title="1.1. Accessing Substrings"><img src="../gifs/txtnexta.gif" alt="Next: 1.1. Accessing Substrings" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="chapter"><h1 class="chapter"><a class="title" name="ch01-19248">1. Strings</A
></H1
><div class="htmltoc"><p><b>Contents:</B
><br><a class="sect1" href="#ch01-26961" title="1.0. Introduction">Introduction</A
><br><a class="sect1" href="ch01_02.htm" title="1.1. Accessing Substrings">Accessing Substrings</A
><br><a class="sect1" href="ch01_03.htm" title="1.2. Establishing a Default Value">Establishing a Default Value</A
><br><a class="sect1" href="ch01_04.htm" title="1.3. Exchanging Values Without Using Temporary Variables">Exchanging Values Without Using Temporary Variables</A
><br><a class="sect1" href="ch01_05.htm" title="1.4. Converting Between ASCII Characters and Values">Converting Between ASCII Characters and Values</A
><br><a class="sect1" href="ch01_06.htm" title="1.5. Processing a String One Character at a Time">Processing a String One Character at a Time</A
><br><a class="sect1" href="ch01_07.htm" title="1.6. Reversing a String by Word or Character">Reversing a String by Word or Character</A
><br><a class="sect1" href="ch01_08.htm" title="1.7. Expanding and Compressing Tabs">Expanding and Compressing Tabs</A
><br><a class="sect1" href="ch01_09.htm" title="1.8. Expanding Variables in User Input">Expanding Variables in User Input</A
><br><a class="sect1" href="ch01_10.htm" title="1.9. Controlling Case">Controlling Case</A
><br><a class="sect1" href="ch01_11.htm" title="1.10. Interpolating Functions and Expressions Within Strings">Interpolating Functions and Expressions Within Strings</A
><br><a class="sect1" href="ch01_12.htm" title="1.11. Indenting Here Documents">Indenting Here Documents</A
><br><a class="sect1" href="ch01_13.htm" title="1.12. Reformatting Paragraphs">Reformatting Paragraphs</A
><br><a class="sect1" href="ch01_14.htm" title="1.13. Escaping Characters">Escaping Characters</A
><br><a class="sect1" href="ch01_15.htm" title="1.14. Trimming Blanks from the Ends of a String">Trimming Blanks from the Ends of a String</A
><br><a class="sect1" href="ch01_16.htm" title="1.15. Parsing Comma-Separated Data">Parsing Comma-Separated Data</A
><br><a class="sect1" href="ch01_17.htm" title="1.16. Soundex Matching">Soundex Matching</A
><br><a class="sect1" href="ch01_18.htm" title="1.17. Program: fixstyle">Program: fixstyle</A
><br><a class="sect1" href="ch01_19.htm" title="1.18. Program: psgrep">Program: psgrep</A
></P
><p></P
></DIV
><div class="epigraph" align="right"><p class="para" align="right"><i>He multiplieth words without knowledge.</I
></P
><p class="attribution" align="right">-&nbsp;Job 35:16 </P
></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch01-26961">1.0. Introduction</A
></H2
><p class="para"><a class="indexterm" name="ch01-idx-1000010110-0"></A
><a class="indexterm" name="ch01-idx-1000010110-1"></A
>Many programming languages force you to work at an uncomfortably low level. You think in lines, but your language wants you to deal with pointers. You think in strings, but it wants you to deal with bytes. Such a language can drive you to distraction. Don't despair, though &nbsp;-  Perl isn't a low-level language; lines and strings are easy to handle.</P
><p class="para">Perl was <em class="emphasis">designed</EM
> for text manipulation. In fact, Perl can manipulate text in so many ways that they can't all be described in one chapter. Check out other chapters for recipes on text processing. In particular, see <a class="xref" href="ch06_01.htm" title="Pattern Matching">Chapter 6, <cite class="chapter">Pattern Matching</CITE
></A
>, and <a class="xref" href="ch08_01.htm" title="File Contents">Chapter 8, <cite class="chapter">File Contents</CITE
></A
>, which discuss interesting techniques not covered here.</P
><p class="para">Perl's fundamental unit for working with data is the <a class="indexterm" name="ch01-idx-1000010112-0"></A
><a class="indexterm" name="ch01-idx-1000010112-1"></A
>scalar, that is, single values stored in single (scalar) variables. Scalar variables hold strings, numbers, and references. Array and hash variables hold lists or associations of scalars, respectively. References are used for referring to other values indirectly, not unlike pointers in low-level languages. Numbers are usually stored in your machine's double-precision floating-point notation. Strings in Perl may be of any length (within the limits of your machine's virtual memory) and contain any data you care to put there&nbsp;- even binary data containing null bytes.</P
><p class="para">A string is not an array of bytes: You cannot use array subscripting on a string to address one of its characters; use <code class="literal">substr</CODE
> for that. Like all data types in Perl, strings grow and shrink on demand. They get reclaimed by Perl's garbage collection system when they're no longer used, typically when the variables holding them go out of scope or when the expression they were used in has been evaluated. In other words, memory management is already taken care of for you, so you don't have to worry about it.</P
><p class="para"><a class="indexterm" name="ch01-idx-1000010113-0"></A
><a class="indexterm" name="ch01-idx-1000010113-1"></A
><a class="indexterm" name="ch01-idx-1000010113-2"></A
>A scalar value is either defined or undefined. If defined, it may hold a string, number, or reference. The only undefined value is <code class="literal">undef</CODE
>. All other values are defined, even 0 and the empty string. Definedness is not the same as Boolean <a class="indexterm" name="ch01-idx-1000010679-0"></A
><a class="indexterm" name="ch01-idx-1000010679-1"></A
>truth, though; to check whether a value is defined, use the <code class="literal">defined</CODE
> function. Boolean truth has a specialized meaning, tested with operators like <code class="literal">&amp;&amp;</CODE
> and <code class="literal">||</CODE
> or in an <code class="literal">if</CODE
> or <code class="literal">while</CODE
> block's test condition.</P
><p class="para">Two defined strings are <a class="indexterm" name="ch01-idx-1000010114-0"></A
>false: the <a class="indexterm" name="ch01-idx-1000010115-0"></A
>empty string (&quot;&quot;) and a string of length one containing the digit zero (&quot;<code class="literal">0</CODE
>&quot;). This second one may surprise you, but Perl does this because of its on-demand conversion between strings and numbers. The numbers <code class="literal">0.</CODE
>, <code class="literal">0.00</CODE
>, and <code class="literal">0.0000000</CODE
> are all false when unquoted but are not false in strings (the string &quot;<code class="literal">0.00</CODE
>&quot; is true, not false). All other defined values (e.g., &quot;<code class="literal">false</CODE
>&quot;, <code class="literal">15</CODE
>, and <code class="literal">\$x </CODE
>) are true.</P
><p class="para">The <code class="literal">undef</CODE
> value behaves like the empty string (&quot;&quot;) when used as a string, <code class="literal">0</CODE
> when used as a number, and the null reference when used as a reference. But in all these cases, it's false. Using an undefined value where Perl expects a defined value will trigger a run-time warning message on STDERR if you've used the <b class="emphasis.bold">-w</B
> flag. Merely asking whether something is true or false does not demand a particular value, so this is exempt from a warning. Some operations do not trigger warnings when used on variables holding undefined values. These include the autoincrement and autodecrement operators, <code class="literal">++</CODE
> and <code class="literal">--</CODE
>, and the addition and catenation assignment operators, <code class="literal">+=</CODE
> and <code class="literal">.=</CODE
> .</P
><p class="para"><a class="indexterm" name="ch01-idx-1000010116-0"></A
><a class="indexterm" name="ch01-idx-1000010116-1"></A
><a class="indexterm" name="ch01-idx-1000010116-2"></A
><a class="indexterm" name="ch01-idx-1000010116-3"></A
>Specify strings in your program either with single quotes, double quotes, the quote-like operators <code class="literal">q//</CODE
> and <code class="literal">qq//</CODE
>, or "here documents." Single quotes are the simplest form of quoting&nbsp;- the only special characters are <code class="literal">'</CODE
> to terminate the string, <code class="literal">\'</CODE
> to quote a single quote in the string, and <code class="literal">\\</CODE
> to quote a backslash in the string:</P
><pre class="programlisting">$string = '\n';                     # two characters, \ and an n
$string = 'Jon \'Maddog\' Orwant';  # literal single quotes</PRE
><p class="para">Double quotes interpolate variables (but not function calls&nbsp;- see <a class="xref" href="ch01_11.htm" title="Interpolating Functions and Expressions Within Strings">Recipe 1.10</A
> to find how to do this) and expand a lot of backslashed shortcuts: &quot;<code class="literal">\n</CODE
>&quot; becomes a newline, &quot;<code class="literal">\033</CODE
>&quot; becomes the character with octal value 33, &quot;<code class="literal">\cJ</CODE
>&quot; becomes a Ctrl-J, and so on. The full list of these is given in the <em class="emphasis">perlop </EM
>(1) manpage.</P
><pre class="programlisting">$string = &quot;\n&quot;;                     # a &quot;newline&quot; character
$string = &quot;Jon \&quot;Maddog\&quot; Orwant&quot;;  # literal double quotes</PRE
><p class="para"><a class="indexterm" name="ch01-idx-1000010118-0"></A
>The <code class="literal">q//</CODE
> and <code class="literal">qq//</CODE
> regexp-like quoting operators let you use alternate delimiters for single- and double-quoted strings. For instance, if you want a literal string that contains single quotes, it's easier to write this than to escape the single quotes with backslashes:</P
><pre class="programlisting">$string = q/Jon 'Maddog' Orwant/;   # literal single quotes</PRE
><p class="para">You can use the same character as delimiter, as we do with / here, or you can balance the delimiters if you use parentheses or paren-like characters:</P
><pre class="programlisting">$string = q[Jon 'Maddog' Orwant];   # literal single quotes
$string = q{Jon 'Maddog' Orwant};   # literal single quotes
$string = q(Jon 'Maddog' Orwant);   # literal single quotes
$string = q&lt;Jon 'Maddog' Orwant&gt;;   # literal single quotes</PRE
><p class="para"><a class="indexterm" name="ch01-idx-1000010130-0"></A
>"Here documents" are borrowed from the shell. They are a way to quote a large chunk of text. The text can be interpreted as single-quoted, double-quoted, or even as commands to be executed, depending on how you quote the terminating identifier. Here we double-quote two lines with a here document:</P
><pre class="programlisting">$a = &lt;&lt;&quot;EOF&quot;;
This is a multiline here document
terminated by EOF on a line by itself
EOF</PRE
><p class="para">Note there's no semicolon after the terminating <code class="literal">EOF</CODE
>. Here documents are covered in more detail in <a class="xref" href="ch01_12.htm" title="Indenting Here Documents">Recipe 1.11</A
>.</P
><p class="para">A warning for non-Western programmers: Perl doesn't currently directly support multibyte characters (expect <a class="indexterm" name="ch01-idx-1000010687-0"></A
>Unicode support in 5.006), so we'll be using the terms <em class="emphasis">byte</EM
> and <em class="emphasis">character</EM
> interchangeably.</P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="prf2_06.htm" title="Acknowledgments"><img src="../gifs/txtpreva.gif" alt="Previous: Acknowledgments" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch01_02.htm" title="1.1. Accessing Substrings"><img src="../gifs/txtnexta.gif" alt="Next: 1.1. Accessing Substrings" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">Acknowledgments</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">1.1. Accessing Substrings</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
