<html><head>
<title>Recipe 10.2. Making Variables Private to a Function</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:39:36Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch10_01.htm" title="10. Subroutines"><link rel="prev" href="ch10_02.htm" title="10.1. Accessing Subroutine Arguments"><link rel="next" href="ch10_04.htm" title="10.3. Creating Persistent Private Variables"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch10_02.htm" title="10.1. Accessing Subroutine Arguments"><img src="../gifs/txtpreva.gif" alt="Previous: 10.1. Accessing Subroutine Arguments" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch10_01.htm" title="10. Subroutines">Chapter 10<br>Subroutines</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch10_04.htm" title="10.3. Creating Persistent Private Variables"><img src="../gifs/txtnexta.gif" alt="Next: 10.3. Creating Persistent Private Variables" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch10-30489">10.2. Making Variables Private to a Function</A
></H2
><div class="sect2"><h3 class="sect2"><a class="title" name="ch10-pgfId-178">Problem<a class="indexterm" name="ch10-idx-1000004648-0"></A
><a class="indexterm" name="ch10-idx-1000004648-1"></A
><a class="indexterm" name="ch10-idx-1000004648-2"></A
><a class="indexterm" name="ch10-idx-1000004648-3"></A
><a class="indexterm" name="ch10-idx-1000004648-4"></A
></A
></H3
><p class="para">Your subroutine needs temporary variables. You shouldn't use global variables, because another subroutine might also use the same variables.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch10-pgfId-184">Solution</A
></H3
><p class="para">Use <code class="literal">my</CODE
> to declare a variable private to a region of your program:</P
><pre class="programlisting">sub somefunc {
    my $variable;                 # $variable is invisible outside somefunc()
    my ($another, @an_array, %a_hash);     # declaring many variables at once

    # ...
}</PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch10-pgfId-202">Discussion</A
></H3
><p class="para">The <code class="literal">my</CODE
> operator confines a variable to a particular region of code in which it can be used and accessed. Outside that region, it can't be accessed. This region is called its <em class="emphasis">scope</EM
>.</P
><p class="para">Variables declared with <code class="literal">my</CODE
> have <em class="emphasis">lexical scope</EM
><a class="indexterm" name="ch10-idx-1000004658-0"></A
>, which means that they exist only within a particular textual area of code. For instance, the scope of <code class="literal">$variable</CODE
> in the Solution is the function it was defined in, <code class="literal">somefunc</CODE
>. When a call to <code class="literal">somefunc</CODE
> is made, the variable is created. The variable is destroyed when the function call ends. The variable can be accessed within the function, but not outside of it.</P
><p class="para">A lexical scope is usually a block of code with a set of braces around it, such as those defining the body of the <code class="literal">somefunc</CODE
> subroutine or those marking the code blocks of <code class="literal">if</CODE
>, <code class="literal">while</CODE
>, <code class="literal">for</CODE
>, <code class="literal">foreach</CODE
>, and <code class="literal">eval</CODE
> statements. Lexical scopes may also be an entire file or strings given to <code class="literal">eval</CODE
>. Since a lexical scope is usually a block, we'll sometimes talk about lexical variables (variables with lexical scope) being only visible in their block when we mean that they're only visible in their scope. Forgive us. Otherwise, we'll be using the words "scope" and "sub" more than a WWII Navy movie.</P
><p class="para">Because the parts of code that can see a <code class="literal">my</CODE
> variable are determined at compile time and don't change after that, lexical scoping is sometimes misleadingly referred to as static scoping. Lexical scoping is in contrast to <em class="emphasis">dynamic</EM
> scoping, which we'll cover in <a class="xref" href="ch10_14.htm" title="Saving Global Values">Recipe 10.13</A
>.</P
><p class="para">You can combine a <code class="literal">my</CODE
> declaration with an assignment. Use parentheses when defining more than one variable:</P
><pre class="programlisting">my ($name, $age) = @ARGV;
my $start        = fetch_time();</PRE
><p class="para">These lexical variables behave as you would expect a local variable to. Nested blocks can see lexicals declared in outer blocks, but not in unrelated blocks:</P
><pre class="programlisting">my ($a, $b) = @pair;
my $c = fetch_time();

sub check_x {
    my $x = $_[0];       
    my $y = &quot;whatever&quot;;  
    run_check();
    if ($condition) {
        print &quot;got $x\n&quot;;
    }
}</PRE
><p class="para">In the preceding code, the <code class="literal">if</CODE
> block inside the function can access the private <code class="literal">$x</CODE
> variable. However, the <code class="literal">run_check</CODE
> function called from within that scope cannot access <code class="literal">$x</CODE
> or <code class="literal">$y</CODE
> because <code class="literal">run_check</CODE
> was presumably defined in another scope. However, <code class="literal">check_x</CODE
> could access <code class="literal">$a</CODE
>, <code class="literal">$b</CODE
>, or <code class="literal">$c</CODE
> from the outer scope because the function was defined in the same scope as those three variables.</P
><p class="para">Don't nest the declaration of named subroutines within the declarations of other named subroutines. Such subroutines, unlike proper closures, will not get the right bindings of the lexical variables. <a class="xref" href="ch10_17.htm" title="Nesting Subroutines">Recipe 10.16</A
> shows how to cope with this restriction.</P
><p class="para">When a lexical goes out of scope, its storage is freed unless a reference to its value's storage space still exists, as with <code class="literal">@arguments</CODE
> in the following code:</P
><pre class="programlisting">sub save_array {
    my @arguments = @_;
    push(@Global_Array, \@arguments);
}</PRE
><p class="para">Perl's garbage collection system knows not to deallocate things until they're no longer used. This is why we can return a reference to a private variable without leaking memory.<a class="indexterm" name="ch10-idx-1000004650-0"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch10-pgfId-236">See Also</A
></H3
><p class="para">The section on <a class="olink" href="../prog/ch02_06.htm#PERL2-CH-2-SECT-6.5">"Scoped Declarations"</A
> in <a class="olink" href="../prog/ch02_01.htm">Chapter 2</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
> and the section on "Private Variables via my(  )" in <i class="filename">perlsub </I
>(1)</P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch10_02.htm" title="10.1. Accessing Subroutine Arguments"><img src="../gifs/txtpreva.gif" alt="Previous: 10.1. Accessing Subroutine Arguments" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch10_04.htm" title="10.3. Creating Persistent Private Variables"><img src="../gifs/txtnexta.gif" alt="Next: 10.3. Creating Persistent Private Variables" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">10.1. Accessing Subroutine Arguments</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">10.3. Creating Persistent Private Variables</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
