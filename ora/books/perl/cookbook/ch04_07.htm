<html><head>
<title>Recipe 4.6. Extracting Unique Elements from a List</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:31:26Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch04_01.htm" title="4. Arrays"><link rel="prev" href="ch04_06.htm" title="4.5. Iterating Over an Array by Reference"><link rel="next" href="ch04_08.htm" title="4.7. Finding Elements in One Array but Not Another"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch04_06.htm" title="4.5. Iterating Over an Array by Reference"><img src="../gifs/txtpreva.gif" alt="Previous: 4.5. Iterating Over an Array by Reference" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch04_01.htm" title="4. Arrays">Chapter 4<br>Arrays</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch04_08.htm" title="4.7. Finding Elements in One Array but Not Another"><img src="../gifs/txtnexta.gif" alt="Next: 4.7. Finding Elements in One Array but Not Another" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch04-17421">4.6. Extracting Unique Elements from a List</A
></H2
><div class="sect2"><h3 class="sect2"><a class="title" name="ch04-pgfId-663">Problem <a class="indexterm" name="ch04-idx-1000006652-0"></A
><a class="indexterm" name="ch04-idx-1000006652-1"></A
><a class="indexterm" name="ch04-idx-1000006652-2"></A
><a class="indexterm" name="ch04-idx-1000006652-3"></A
></A
></H3
><p class="para">You want to eliminate duplicate values from a list, such as when you build the list from a file or from the output of another command. This recipe is equally applicable to removing duplicates as they occur in input and to removing duplicates from an array you've already populated.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch04-pgfId-669">Solution</A
></H3
><p class="para">Use a hash to record which items have been seen, then <code class="literal">keys</CODE
> to extract them. You can use Perl's idea of truth to shorten and speed up your code.</P
><div class="sect3"><h4 class="sect3"><a class="title" name="ch04-16198">Straightforward</A
></H4
><pre class="programlisting">%seen = ();
@uniq = ();
foreach $item (@list) {
    unless ($seen{$item}) {
        # if we get here, we have not seen it before
        $seen{$item} = 1;
        push(@uniq, $item);
    }
}</PRE
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="ch04-19255">Faster</A
></H4
><pre class="programlisting">%seen = ();
foreach $item (@list) {
    push(@uniq, $item) unless $seen{$item}++;
}</PRE
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="ch04-27116">Similar but with user function</A
></H4
><pre class="programlisting">%seen = ();
foreach $item (@list) {
    some_func($item) unless $seen{$item}++;
}</PRE
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="ch04-38870">Faster but different</A
></H4
><pre class="programlisting">%seen = ();
foreach $item (@list) {
    $seen{$item}++;
}
@uniq = keys %seen;</PRE
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="ch04-17367">Faster and even more different</A
></H4
><pre class="programlisting">%seen = ();
@uniqu = grep { ! $seen{$_} ++ } @list;</PRE
></DIV
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch04-pgfId-1000005726">Discussion</A
></H3
><p class="para"><a class="indexterm" name="ch04-idx-1000006658-0"></A
>The question at the heart of the matter is "Have I seen this element before?" Hashes are ideally suited to such lookups. The first technique (<a class="xref" href="#ch04-16198" title="Straightforward">"Straightforward</A
>") builds up the array of unique values as we go along, using a hash to record whether something is already in the array.</P
><p class="para">The second technique (<a class="xref" href="#ch04-19255" title="Faster">"Faster</A
>") is the most natural way to write this sort of thing in Perl. It creates a new entry in the hash every time it sees an element that hasn't been seen before, using the <code class="literal">++</CODE
> operator. This has the side effect of making the hash record the number of times the element was seen. This time we only use the hash for its property of working like a set.</P
><p class="para">The third example (<a class="xref" href="#ch04-27116" title="Similar but with user function">"Similar but with user function</A
>") is similar to the second but rather than storing the item away, we call some user-defined function with that item as its argument. If that's all we're doing, keeping a spare array of those unique values is unnecessary.</P
><p class="para">The next mechanism (<a class="xref" href="#ch04-38870" title="Faster but different">"Faster but different</A
>") waits until it's done processing the list to extract the unique keys from the <code class="literal">%seen</CODE
> hash. This may be convenient, but the original order has been lost.</P
><p class="para">The final approach, (<a class="xref" href="#ch04-17367" title="Faster and even more different">"Faster and even more different</A
>") merges the construction of the <code class="literal">%seen</CODE
> hash with the extraction of unique elements. This preserves the original order of elements.</P
><p class="para">Using a hash to record the values has two side effects: processing long lists can take a lot of memory and the list returned by <code class="literal">keys</CODE
> is not in alphabetical, numeric, or insertion order.</P
><p class="para">Here's an example of processing input as it is read. We use <code class="literal">`who`</CODE
> to gather information on the current user list, and then we extract the username from each line before updating the hash:</P
><pre class="programlisting"># generate a list of users logged in, removing duplicates
%ucnt = ();
for (`who`) {
    s/\s.*\n//;   # kill from first space till end-of-line, yielding username
    $ucnt{$_}++;  # record the presence of this user
}
# extract and print unique keys
@users = sort keys %ucnt;
print &quot;users logged in: @users\n&quot;;</PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch04-pgfId-711">See Also</A
></H3
><p class="para">The "Foreach Loops" section of <i class="filename">perlsyn </I
>(1) and <a class="olink" href="../prog/ch02_01.htm">Chapter 2</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
>; the <code class="literal">keys</CODE
> function in <i class="filename">perlfunc </I
>(1) and <a class="olink" href="../prog/ch03_01.htm">Chapter 3</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
>; the <a class="olink" href="../prog/ch02_03.htm#PERL2-CH-2-SECT-3.1">"Hashes (Associative Arrays)"</A
> section of <a class="olink" href="../prog/ch02_01.htm">Chapter 2</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
>; <a class="xref" href="ch05_01.htm" title="Hashes">Chapter 5</A
>; we use hashes in a similar fashion in <a class="xref" href="ch04_08.htm" title="Finding Elements in One Array but Not Another">Recipe 4.7</A
> and <a class="xref" href="ch04_09.htm" title="Computing Union, Intersection, or Difference of Unique Lists">Recipe 4.8</A
> <a class="indexterm" name="ch04-idx-1000006654-0"></A
><a class="indexterm" name="ch04-idx-1000006654-1"></A
><a class="indexterm" name="ch04-idx-1000006654-2"></A
><a class="indexterm" name="ch04-idx-1000006654-3"></A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch04_06.htm" title="4.5. Iterating Over an Array by Reference"><img src="../gifs/txtpreva.gif" alt="Previous: 4.5. Iterating Over an Array by Reference" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch04_08.htm" title="4.7. Finding Elements in One Array but Not Another"><img src="../gifs/txtnexta.gif" alt="Next: 4.7. Finding Elements in One Array but Not Another" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">4.5. Iterating Over an Array by Reference</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">4.7. Finding Elements in One Array but Not Another</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
