<html><head>
<title>Recipe 1.15. Parsing Comma-Separated Data</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:29:20Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch01_01.htm" title="1. Strings"><link rel="prev" href="ch01_15.htm" title="1.14. Trimming Blanks from the Ends of a String"><link rel="next" href="ch01_17.htm" title="1.16. Soundex Matching"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch01_15.htm" title="1.14. Trimming Blanks from the Ends of a String"><img src="../gifs/txtpreva.gif" alt="Previous: 1.14. Trimming Blanks from the Ends of a String" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch01_01.htm" title="1. Strings">Chapter 1<br>Strings</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch01_17.htm" title="1.16. Soundex Matching"><img src="../gifs/txtnexta.gif" alt="Next: 1.16. Soundex Matching" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch01-chap01_parsing_0">1.15. Parsing Comma-Separated Data</A
></H2
><div class="sect2"><h3 class="sect2"><a class="title" name="ch01-pgfId-1657">Problem <a class="indexterm" name="ch01-idx-1000010335-0"></A
><a class="indexterm" name="ch01-idx-1000010335-1"></A
><a class="indexterm" name="ch01-idx-1000010335-2"></A
><a class="indexterm" name="ch01-idx-1000010335-3"></A
><a class="indexterm" name="ch01-idx-1000010335-4"></A
></A
></H3
><p class="para">You have a data file containing comma-separated values that you need to read in, but these data fields may have quoted commas or escaped quotes in them. Most spreadsheets and database programs use comma-separated values as a common interchange format.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch01-pgfId-1663">Solution</A
></H3
><p class="para">Use the procedure in <em class="emphasis">Mastering Regular Expressions</EM
>.</P
><pre class="programlisting">sub parse_csv {
    my $text = shift;      # record containing comma-separated values
    my @new  = ();
    push(@new, $+) while $text =~ m{
        # the first part groups the phrase inside the quotes.
        # see explanation of this pattern in MRE
        &quot;([^\&quot;\\]*(?:\\.[^\&quot;\\]*)*)&quot;,?
           |  ([^,]+),?
           | ,
       }gx;
       push(@new, undef) if substr($text, -1,1) eq ',';
       return @new;      # list of values that were comma-separated
}  </PRE
><p class="para">Or use the standard Text::ParseWords module.</P
><pre class="programlisting">use <a class="indexterm" name="ch01-idx-1000011467-0"></A
>Text::ParseWords;

sub parse_csv {
    return quoteword(&quot;,&quot;,0, $_[0]);
}</PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch01-pgfId-1669">Discussion</A
></H3
><p class="para">Comma-separated input is a deceptive and complex format. It sounds simple, but involves a fairly complex escaping system because the fields themselves can contain commas. This makes the pattern matching solution complex and rules out a simple <code class="literal">split</CODE
> <code class="literal">/,/</CODE
>.</P
><p class="para">Fortunately, Text::ParseWords hides the complexity from you. Pass its <code class="literal">quotewords</CODE
><a class="indexterm" name="ch01-idx-1000010342-0"></A
> function two arguments and the CSV string. The first argument is the separator (a comma, in this case) and the second is a true or false value controlling whether the strings are returned with quotes around them.</P
><p class="para">If you want to represent quotation marks inside a field delimited by quotation marks, escape them with backslashes &quot;<code class="literal">like</CODE
> <code class="literal">\&quot;this\&quot;</CODE
>&quot;. Quotation marks and backslashes are the only characters that have meaning backslashed. Any other use of a backslash will be left in the output string.</P
><p class="para">Here's how you'd use the <code class="literal">parse_csv</CODE
><a class="indexterm" name="ch01-idx-1000010343-0"></A
> subroutines. The <code class="literal">q&lt;&gt;</CODE
> is just a fancy quote so we didn't have to backslash everything.</P
><pre class="programlisting">$line = q&lt;XYZZY,&quot;&quot;,&quot;O'Reilly, Inc&quot;,&quot;Wall, Larry&quot;,&quot;a \&quot;glug\&quot; bit,&quot;,5,
    &quot;Error, Core Dumped&quot;&gt;;
@fields = parse_csv($line);
for ($i = 0; $i &lt; @fields; $i++) {
    print &quot;$i : $fields[$i]\n&quot;;
}
<code class="userinput"><b><code class="replaceable"><i>0 : XYZZY</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>1 :</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>2 : O'Reilly, Inc</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>3 : Wall, Larry</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>4 : a \&quot;glug\&quot; bit,</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>5 : 5</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>6 : Error, Core Dumped</I
></CODE
></B
></CODE
></PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch01-pgfId-1705">See Also</A
></H3
><p class="para">The explanation of regular expression syntax in <em class="emphasis">perlre </EM
>(1) and <a class="olink" href="../prog/ch02_01.htm">Chapter 2</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
>; the documentation for the standard Text::ParseWords module (also in <a class="olink" href="../prog/ch07_01.htm">Chapter 7</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
>); the section "An Introductory Example: Parsing CSV Text" in Chapter 7 of <em class="emphasis">Mastering Regular Expressions</EM
> <a class="indexterm" name="ch01-idx-1000010338-0"></A
><a class="indexterm" name="ch01-idx-1000010338-1"></A
><a class="indexterm" name="ch01-idx-1000010338-2"></A
><a class="indexterm" name="ch01-idx-1000010338-3"></A
><a class="indexterm" name="ch01-idx-1000010338-4"></A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch01_15.htm" title="1.14. Trimming Blanks from the Ends of a String"><img src="../gifs/txtpreva.gif" alt="Previous: 1.14. Trimming Blanks from the Ends of a String" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch01_17.htm" title="1.16. Soundex Matching"><img src="../gifs/txtnexta.gif" alt="Next: 1.16. Soundex Matching" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">1.14. Trimming Blanks from the Ends of a String</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">1.16. Soundex Matching</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
