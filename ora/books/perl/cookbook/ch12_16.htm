<html><head>
<title>Recipe 12.15. Using h2xs to Make a Module with C Code</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:41:59Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch12_01.htm" title="12. Packages, Libraries, and Modules"><link rel="prev" href="ch12_15.htm" title="12.14. Using h2ph to Translate C #include Files"><link rel="next" href="ch12_17.htm" title="12.16. Documenting Your Module with Pod"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><index.htmlmap name="srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch12_15.htm" title="12.14. Using h2ph to Translate C #include Files"><img src="../gifs/txtpreva.gif" alt="Previous: 12.14. Using h2ph to Translate C #include Files" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch12_01.htm" title="12. Packages, Libraries, and Modules">Chapter 12<br>Packages, Libraries, and Modules</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch12_17.htm" title="12.16. Documenting Your Module with Pod"><img src="../gifs/txtnexta.gif" alt="Next: 12.16. Documenting Your Module with Pod" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch12-31357">12.15. Using h2xs to Make a Module with C Code</A
></H2
><div class="sect2"><h3 class="sect2"><a class="title" name="ch12-pgfId-1518">Problem</A
></H3
><p class="para"><a class="indexterm" name="ch12-idx-1000005283-0"></A
><a class="indexterm" name="ch12-idx-1000005283-1"></A
><a class="indexterm" name="ch12-idx-1000005283-2"></A
>You'd like to access your system's unique C functions from Perl.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch12-pgfId-1524">Solution</A
></H3
><p class="para">Use the <em class="emphasis">h2xs</EM
> tool to generate the necessary template files, fill the files in appropriately, and then type:</P
><pre class="programlisting">% perl Makefile.PL
% make</PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch12-pgfId-1534">Discussion</A
></H3
><p class="para">A Perl module need not be written solely in Perl. As with any other module, first pick a module name and use <em class="emphasis">h2xs</EM
> on it. We'll make a <code class="literal">FineTime::time</CODE
> function with the same semantics as in the previous recipe, but this time around, we'll implement it using real C.</P
><p class="para">First, we run the following command:</P
><pre class="programlisting">% h2xs -cn FineTime</PRE
><p class="para">If we had a <em class="emphasis">.h</EM
> file with function prototype declarations, we could include that, but because we're writing this one from scratch, we'll use the <b class="emphasis.bold">-c</B
> flag to omit building code to translate any <code class="literal">#define</CODE
> symbols. The <b class="emphasis.bold">-n</B
> flag says to create a module directory named <em class="emphasis">FineTime/</EM
>, which will have the following files:</P
><table class="informaltable" border="1" cellpadding="3"><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1"><p class="para"><em class="emphasis">Manifest</EM
></P
></TH
><th class="entry" align="LEFT" rowspan="1" colspan="1"><p class="para">List of files in the distribution</P
></TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><em class="emphasis">Changes</EM
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">change log</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><em class="emphasis">Makefile.PL</EM
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">a meta-makefile</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><em class="emphasis">FineTime.pm</EM
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">the Perl parts</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><em class="emphasis">FineTime.xs</EM
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">the soon-to-be C parts</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><em class="emphasis">test.pl</EM
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">a test driver</P
></TD
></TR
></TBODY
></TABLE
><p class="para">Before we can type <code class="literal">make</CODE
>, we'll have to generate a <code class="literal">Makefile</CODE
> based on our system's configuration using the <em class="emphasis">Makefile.PL</EM
> template. Here's how to do that:</P
><pre class="programlisting">% perl Makefile.PL</PRE
><p class="para">If the <a class="indexterm" name="ch12-idx-1000005289-0"></A
>XS code calls library code that isn't in the normal set of libraries Perl links from, add one more line to <em class="emphasis">Makefile.PL</EM
> first. For example, if we wanted to link against the <em class="emphasis">librpm.a</EM
> library, which lives in the <em class="emphasis">/usr/redhat/lib</EM
> directory, we'd change the line of <em class="emphasis">Makefile.PL</EM
> that reads:</P
><pre class="programlisting">'LIBS'      =&gt; [''],   # e.g., '-lm'</PRE
><p class="para">so that it says:</P
><pre class="programlisting">'LIBS'      =&gt; ['-L/usr/redhat/lib -lrpm'],</PRE
><p class="para">If the module is to be installed somewhere other than the local <em class="emphasis">site_lib</EM
> directory, specify that on the command line:</P
><pre class="programlisting">% perl Makefile.PL LIB=~/perllib</PRE
><p class="para">Finally, edit the <em class="emphasis">FineTime.pm</EM
> and <em class="emphasis">FineTime.xs</EM
> files. In the first case, most of the work has been done for us. We just set up the export list with the function to be exported. This time we put it in <code class="literal">@EXPORT_OK</CODE
> so that if the user wants the function, they must ask for it by name. Here's <em class="emphasis">FineTime.pm</EM
>:</P
><pre class="programlisting">package FineTime;
use strict;
use vars qw($VERSION @ISA @EXPORT_OK);
require Exporter;
require DynaLoader;
@ISA = qw(Exporter DynaLoader);
@EXPORT_OK = qw(time);
$VERSION = '0.01';
bootstrap FineTime $VERSION;
1;</PRE
><p class="para">The<i class="filename"> make</I
> process will automatically translate <em class="emphasis">FineTime.xs</EM
> into a <em class="emphasis">FineTime.c</EM
> file and eventually into a shared library, probably called <em class="emphasis">FineTime.so</EM
> on most platforms. The utility that does this translation is <em class="emphasis">xsubpp</EM
>, which is described in its own manpage and <i class="filename">perlxstut </I
>(1). The build will call <em class="emphasis">xsubpp</EM
> automatically.</P
><p class="para">Besides a strong C background, you also need to understand the C-to-Perl interface, called XS (external subroutine). The details and nuances of XS are beyond the scope of this book. The automatically generated <em class="emphasis">FineTime.xs</EM
> had the Perl-specific include files in it, as well as the MODULE declaration. We've added some extra includes and written the code for the new <code class="literal">time</CODE
> function. Although this doesn't look entirely like C, it will, once <em class="emphasis">xsubpp</EM
> gets done with it.</P
><p class="para">Here's the <em class="emphasis">FineTime.xs</EM
> we used:</P
><pre class="programlisting">#include &lt;unistd.h&gt;
#include &lt;sys/time.h&gt;
#include &quot;EXTERN.h&quot;
#include &quot;perl.h&quot;
#include &quot;XSUB.h&quot;

MODULE = FineTime           PACKAGE = FineTime

double
time()
    CODE:
        struct timeval tv;
        gettimeofday(&amp;tv,0);
        RETVAL = tv.tv_sec + ((double) tv.tv_usec) / 1000000;
    OUTPUT:
        RETVAL</PRE
><p class="para">Defining a function by the same name as one from the standard C library won't cause a problem when it's compiled because that's not its real name. That's just what Perl calls it. The C linker will see it as <code class="literal">XS_FineTime_time</CODE
>, so no conflict exists.</P
><p class="para">Here's what happened with make install (with some edits):</P
><pre class="programlisting">% make install
mkdir ./blib/lib/auto/FineTime
cp FineTime.pm ./blib/lib/FineTime.pm
/usr/local/bin/perl -I/usr/lib/perl5/i686-linux/5.00403  -I/usr/lib/perl5
/usr/lib/perl5/ExtUtils/xsubpp -typemap 
    /usr/lib/perl5/ExtUtils/typemap FineTime.xs
FineTime.tc &amp;&amp; mv FineTime.tc FineTime.ccc -c -Dbool=char -DHAS_BOOL 
    -O2-DVERSION=\&quot;0.01\&quot; -DXS_VERSION=\&quot;0.01\&quot; -fpic 
    -I/usr/lib/perl5/i686-linux/5.00403/CORE  
FineTime.cRunning Mkbootstrap for FineTime ()
chmod 644 FineTime.bs
LD_RUN_PATH=&quot;&quot; cc -o blib/arch/auto/FineTime/FineTime.so 
    -shared -L/usr/local/lib FineTime.o
chmod 755 blib/arch/auto/FineTime/FineTime.so
cp FineTime.bs ./blib/arch/auto/FineTime/FineTime.bs
chmod 644 blib/arch/auto/FineTime/FineTime.bs
Installing /home/tchrist/perllib/i686-linux/./auto/FineTime/FineTime.so
Installing /home/tchrist/perllib/i686-linux/./auto/FineTime/FineTime.bs
Installing /home/tchrist/perllib/./FineTime.pm
Writing /home/tchrist/perllib/i686-linux/auto/FineTime/.packlist
Appending installation info to /home/tchrist/perllib/i686-linux/perllocal.pod</PRE
><p class="para">Once this is all done, we'll be able to type something like this into the shell:</P
><pre class="programlisting">% perl -I ~/perllib -MFineTime=time -le '1 while print time()' | head
<code class="userinput"><b><code class="replaceable"><i>888177070.090978</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>888177070.09132</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>888177070.091389</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>888177070.091453</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>888177070.091515</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>888177070.091577</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>888177070.091639</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>888177070.0917</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>888177070.091763</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>888177070.091864</I
></CODE
></B
></CODE
><a class="indexterm" name="ch12-idx-1000005291-0"></A
><a class="indexterm" name="ch12-idx-1000005291-1"></A
><a class="indexterm" name="ch12-idx-1000005291-2"></A
></PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch12-pgfId-1714">See Also</A
></H3
><p class="para">Chapters 18 through 20 in <a class="citetitle" href="../advprog/index.htm" title="Advanced Perl Programming"><cite class="citetitle">Advanced Perl Programming</CITE
></A
>; <i class="filename">perlxstut </I
>(1) and <i class="filename">perlxs</I
> (1) to learn how to call C from Perl; <i class="filename">perlcall </I
>(1) and <i class="filename">perlguts</I
> (1) to understand the internal Perl API; <i class="filename">perlembed</I
> (1) to learn how to call Perl from C; the the documentation for the standard ExtUtils::MakeMaker module, <i class="filename">h2ph </I
>(1) and <i class="filename">xsubpp</I
> (1); <a class="systemitem.url" href="../../../../../../../www.perl.com/CPAN/authors/Dean_Roehrich/">http://www.perl.com/CPAN/authors/Dean_Roehrich/</A
>, which contains Dean's comprehensive XS cookbook that includes directions on interface with C++</P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch12_15.htm" title="12.14. Using h2ph to Translate C #include Files"><img src="../gifs/txtpreva.gif" alt="Previous: 12.14. Using h2ph to Translate C #include Files" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch12_17.htm" title="12.16. Documenting Your Module with Pod"><img src="../gifs/txtnexta.gif" alt="Next: 12.16. Documenting Your Module with Pod" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">12.14. Using h2ph to Translate C #include Files</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">12.16. Documenting Your Module with Pod</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
