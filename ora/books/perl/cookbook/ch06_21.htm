<html><head>
<title>Recipe 6.20. Matching Abbreviations</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:35:06Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch06_01.htm" title="6. Pattern Matching"><link rel="prev" href="ch06_20.htm" title="6.19. Matching a Valid Mail Address"><link rel="next" href="ch06_22.htm" title="6.21. Program: urlify"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch06_20.htm" title="6.19. Matching a Valid Mail Address"><img src="../gifs/txtpreva.gif" alt="Previous: 6.19. Matching a Valid Mail Address" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch06_01.htm" title="6. Pattern Matching">Chapter 6<br>Pattern Matching</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch06_22.htm" title="6.21. Program: urlify"><img src="../gifs/txtnexta.gif" alt="Next: 6.21. Program: urlify" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch06-chap06_matching_7">6.20. Matching Abbreviations</A
></H2
><div class="sect2"><h3 class="sect2"><a class="title" name="ch06-pgfId-2423">Problem<a class="indexterm" name="ch06-idx-1000007723-0"></A
><a class="indexterm" name="ch06-idx-1000007723-1"></A
><a class="indexterm" name="ch06-idx-1000007723-2"></A
></A
></H3
><p class="para">Suppose you had a list of commands, such as <code class="literal">&quot;send&quot;</CODE
>, <code class="literal">&quot;abort&quot;</CODE
>, <code class="literal">&quot;list&quot;</CODE
>, and <code class="literal">&quot;edit&quot;</CODE
>. The user types one in, but you don't want to make them type out the whole thing.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch06-pgfId-2429">Solution</A
></H3
><p class="para">You can use the following technique if the strings all start with different characters or if you want to arrange the matches so one takes precedence over another, as <code class="literal">&quot;SEND&quot;</CODE
> has precedence over <code class="literal">&quot;STOP&quot;</CODE
> here:</P
><pre class="programlisting">chomp($answer = &lt;&gt;);
if    (&quot;SEND&quot;  =~ /^\Q$answer/i) { print &quot;Action is send\n&quot;  }
elsif (&quot;STOP&quot;  =~ /^\Q$answer/i) { print &quot;Action is stop\n&quot;  }
elsif (&quot;ABORT&quot; =~ /^\Q$answer/i) { print &quot;Action is abort\n&quot; }
elsif (&quot;LIST&quot;  =~ /^\Q$answer/i) { print &quot;Action is list\n&quot;  }
elsif (&quot;EDIT&quot;  =~ /^\Q$answer/i) { print &quot;Action is edit\n&quot;  }</PRE
><p class="para">Or you can use the Text::Abbrev module:</P
><pre class="programlisting">use Text::Abbrev;
$href = abbrev qw(send abort list edit);
for (print &quot;Action: &quot;; &lt;&gt;; print &quot;Action: &quot;) {
    chomp;
    my $action = $href-&gt;{ lc($_) };
    print &quot;Action is $action\n&quot;;
}</PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch06-pgfId-2463">Discussion</A
></H3
><p class="para">The first technique switches the typical order of a match. Normally you have a variable on the left side of the match and a known pattern on the right side. We might try to decide which action the user wanted us to take by saying <code class="literal">$answer</CODE
> <code class="literal">=~</CODE
> <code class="literal">/^ABORT/i</CODE
>, which is true if <code class="literal">$answer</CODE
> begins with the string <code class="literal">&quot;ABORT&quot;</CODE
>. It matches whether <code class="literal">$answer</CODE
> has anything after <code class="literal">&quot;ABORT&quot;</CODE
>, so <code class="literal">&quot;ABORT</CODE
> <code class="literal">LATER&quot;</CODE
> would still match. Handling abbreviations generally requires quite a bit of ugliness: <code class="literal">$answer</CODE
> <code class="literal">=~</CODE
> <code class="literal">/^A(B(O(R(T)?)?)?)?$/i</CODE
>.</P
><p class="para">Compare the classic <code class="literal">&quot;variable</CODE
> <code class="literal">=~</CODE
> <code class="literal">pattern&quot;</CODE
> with <code class="literal">&quot;ABORT&quot;</CODE
> <code class="literal">=~</CODE
> <code class="literal">/^\Q$answer/i</CODE
>. The <code class="literal">\Q</CODE
> escapes any characters that would otherwise be treated as regular expression, so your program won't blow up if the user enters an invalid pattern. When the user enters something like <code class="literal">&quot;ab&quot;</CODE
>, the expanded match becomes <code class="literal">&quot;ABORT&quot;</CODE
> <code class="literal">=~</CODE
> <code class="literal">/^ab/i</CODE
> after variable substitution and metaquoting. This matches.</P
><p class="para">The standard Text::Abbrev module takes a different approach. You give it a list of words, and it returns a reference to a hash whose keys are all unambiguous abbreviations and whose values are the fully expanded strings. So if <code class="literal">$href</CODE
> were created as in the Solution example, <code class="literal">$href-&gt;{$var}</CODE
> would return the string <code class="literal">&quot;abort&quot;</CODE
>.</P
><p class="para">This technique is commonly used to call a function based on the name of the string the user types in. Do this by using a symbolic reference, like:</P
><pre class="programlisting">$name = 'send';
&amp;$name();</PRE
><p class="para">But that's scary, because it allows the user to run any function in our program, assuming they know its name. It also runs afoul of that pesky <code class="literal">use</CODE
> <code class="literal">strict</CODE
> <code class="literal">'refs'</CODE
> pragma.</P
><p class="para">Here's a partial program that creates a hash in which the key is the command name and the value is a reference to the function to call for that command:</P
><pre class="programlisting"># assumes that &amp;invoke_editor, &amp;deliver_message,
# $file and $PAGER are defined somewhere else.
use Text::Abbrev;
my($href, %actions, $errors);
%actions = (
    &quot;edit&quot;  =&gt; \&amp;invoke_editor,
    &quot;send&quot;  =&gt; \&amp;deliver_message,
    &quot;list&quot;  =&gt; sub { system($PAGER, $file) },
    &quot;abort&quot; =&gt; sub {
                    print &quot;See ya!\n&quot;;
                    exit;
               },
    &quot;&quot;      =&gt; sub {
                    print &quot;Unknown command: $cmd\n&quot;;
                    $errors++;
               },
);

$href = abbrev(keys %actions);

local $_;
for (print &quot;Action: &quot;; &lt;&gt;; print &quot;Action: &quot;) {
    s/^\s+//;       # trim leading  white space
    s/\s+$//;       # trim trailing white space
    next unless $_;
    $actions-&gt;{ $href-&gt;{ lc($_) } }-&gt;();
}</PRE
><p class="para">The last statement could have been written like this if you're not into tight expressions or need practice typing:</P
><pre class="programlisting">$abbreviation = lc($_);
$expansion    = $href-&gt;{$abbreviation};
$coderef      = $actions-&gt;{$expansion};
&amp;$coderef();<a class="indexterm" name="ch06-idx-1000007725-0"></A
><a class="indexterm" name="ch06-idx-1000007725-1"></A
><a class="indexterm" name="ch06-idx-1000007725-2"></A
></PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch06-pgfId-2547">See Also</A
></H3
><p class="para">The documentation for the standard Text::Abbrev module (also in <a class="olink" href="../prog/ch07_01.htm">Chapter 7</A
> of <cite class="citetitle">Programming Perl </CITE
>); interpolation is explained in the "Scalar Value Constructors" section of <i class="filename">perldata </I
>(1), and in the <a class="olink" href="../prog/ch02_03.htm#PERL2-CH-2-SECT-3.1">"String literals"</A
> section of <a class="olink" href="../prog/ch02_01.htm">Chapter 2</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch06_20.htm" title="6.19. Matching a Valid Mail Address"><img src="../gifs/txtpreva.gif" alt="Previous: 6.19. Matching a Valid Mail Address" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch06_22.htm" title="6.21. Program: urlify"><img src="../gifs/txtnexta.gif" alt="Next: 6.21. Program: urlify" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">6.19. Matching a Valid Mail Address</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">6.21. Program: urlify</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
