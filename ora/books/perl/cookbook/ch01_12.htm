<html><head>
<title>Recipe 1.11. Indenting Here Documents</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:29:11Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch01_01.htm" title="1. Strings"><link rel="prev" href="ch01_11.htm" title="1.10. Interpolating Functions and Expressions Within Strings"><link rel="next" href="ch01_13.htm" title="1.12. Reformatting Paragraphs"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch01_11.htm" title="1.10. Interpolating Functions and Expressions Within Strings"><img src="../gifs/txtpreva.gif" alt="Previous: 1.10. Interpolating Functions and Expressions Within Strings" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch01_01.htm" title="1. Strings">Chapter 1<br>Strings</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch01_13.htm" title="1.12. Reformatting Paragraphs"><img src="../gifs/txtnexta.gif" alt="Next: 1.12. Reformatting Paragraphs" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch01-32093">1.11. Indenting Here Documents</A
></H2
><div class="sect2"><h3 class="sect2"><a class="title" name="ch01-pgfId-1153">Problem <a class="indexterm" name="ch01-idx-1000010286-0"></A
><a class="indexterm" name="ch01-idx-1000010286-1"></A
><a class="indexterm" name="ch01-idx-1000010286-2"></A
></A
></H3
><p class="para">When using the multiline quoting mechanism called a <em class="emphasis">here document</EM
>, the text must be flush against the margin, which looks out of place in the code. You would like to indent the here document text in the code, but not have the indentation appear in the final string value.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch01-pgfId-1159">Solution</A
></H3
><p class="para">Use a <code class="literal">s///</CODE
><a class="indexterm" name="ch01-idx-1000010292-0"></A
> operator to strip out leading whitespace.</P
><pre class="programlisting"># all in one
($var = &lt;&lt;HERE_TARGET) =~ s/^\s+//gm;
    your text
    goes here
HERE_TARGET

# or with two steps
$var = &lt;&lt;HERE_TARGET;
    your text
    goes here
HERE_TARGET
$var =~ s/^\s+//gm;</PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch01-pgfId-1189">Discussion</A
></H3
><p class="para">The substitution is straightforward. It removes leading whitespace from the text of the here document. The <code class="literal">/m</CODE
> modifier lets the <code class="literal">^</CODE
> character match at the start of each line in the string, and the <code class="literal">/g</CODE
> modifier makes the pattern matching engine repeat the substitution as often as it can (i.e., for every line in the here document).</P
><pre class="programlisting">($definition = &lt;&lt;'FINIS') =~ s/^\s+//gm;
    The five varieties of camelids
    are the familiar camel, his friends
    the llama and the alpaca, and the
    rather less well-known guanaco
    and vicu”a.
FINIS</PRE
><p class="para">Be warned: all the patterns in this recipe use <code class="literal">\s</CODE
><a class="indexterm" name="ch01-idx-1000010293-0"></A
>, which will also match newlines. This means they will remove any blank lines in your here document. If you don't want this, replace <code class="literal">\s</CODE
> with <code class="literal">[^\S\n]</CODE
> in the patterns.</P
><p class="para">The substitution makes use of the property that the result of an assignment can be used as the left-hand side of <code class="literal">=~</CODE
>. This lets us do it all in one line, but it only works when you're assigning to a variable. When you're using the here document directly, it would be considered a constant value and you wouldn't be able to modify it. In fact, you can't change a here document's value <em class="emphasis">unless</EM
> you first put it into a variable.</P
><p class="para">Not to worry, though, because there's an easy way around this, particularly if you're going to do this a lot in the program. Just write a subroutine to do it:</P
><pre class="programlisting">sub fix {
    my $string = shift;
    $string =~ s/^\s+//gm;
    return $string;
}

print fix(&lt;&lt;&quot;END&quot;);
    My stuff goes here
END

# With function predeclaration, you can omit the parens:
print fix &lt;&lt;&quot;END&quot;;
    My stuff goes here
END</PRE
><p class="para">As with all here documents, you have to place this here document's target (the token that marks its end, <code class="literal">END</CODE
> in this case) flush against the left-hand margin. If you want to have the target indented also, you'll have to put the same amount of whitespace in the quoted string as you use to indent the token.</P
><pre class="programlisting">($quote = &lt;&lt;'    FINIS') =~ s/^\s+//gm;
        ...we will have peace, when you and all your works have
        perished--and the works of your dark master to whom you would
        deliver us. You are a liar, Saruman, and a corrupter of men's
        hearts.  --Theoden in /usr/src/perl/taint.c
    FINIS
$quote =~ s/\s+--/\n--/;      #move attribution to line of its own</PRE
><p class="para">If you're doing this to strings that contain code you're building up for an <code class="literal">eval</CODE
>, or just text to print out, you might not want to blindly strip off all leading whitespace because that would destroy your indentation. Although <code class="literal">eval</CODE
> wouldn't care, your reader might.</P
><p class="para">Another embellishment is to use a special leading string for code that stands out. For example, here we'll prepend each line with <code class="literal">@@@</CODE
>, properly indented:</P
><pre class="programlisting">if ($REMEMBER_THE_MAIN) {
    $perl_main_C = dequote&lt;&lt;'    MAIN_INTERPRETER_LOOP';
        @@@ int
        @@@ runops() {
        @@@     SAVEI32(runlevel);
        @@@     runlevel++;
        @@@     while ( op = (*op-&gt;op_ppaddr)() ) ;
        @@@     TAINT_NOT;
        @@@     return 0;
        @@@ }
    MAIN_INTERPRETER_LOOP
    # add more code here if you want
}</PRE
><p class="para">Destroying indentation also gets you in trouble with poets.</P
><pre class="programlisting">sub dequote;
$poem = dequote&lt;&lt;EVER_ON_AND_ON;
       Now far ahead the Road has gone,
          And I must follow, if I can,
       Pursuing it with eager feet,
          Until it joins some larger way
       Where many paths and errands meet.
          And whither then? I cannot say.
                --Bilbo in /usr/src/perl/pp_ctl.c
EVER_ON_AND_ON
print &quot;Here's your poem:\n\n$poem\n&quot;;</PRE
><p class="para">Here is its sample output:</P
><pre class="programlisting"><code class="userinput"><b><code class="replaceable"><i>Here's your poem:  </I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>Now far ahead the Road has gone,</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>   And I must follow, if I can,</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>Pursuing it with eager feet,</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>   Until it joins some larger way</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>Where many paths and errands meet.</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>   And whither then? I cannot say.</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>         --Bilbo in /usr/src/perl/pp_ctl.c</I
></CODE
></B
></CODE
></PRE
><p class="para">The following <code class="literal">dequote</CODE
><a class="indexterm" name="ch01-idx-1000010296-0"></A
> function handles all these cases. It expects to be called with a here document as its argument. It checks whether each line begins with a common substring, and if so, strips that off. Otherwise, it takes the amount of leading whitespace found on the first line and removes that much off each subsequent line.</P
><pre class="programlisting">sub dequote {
    local $_ = shift;
    my ($white, $leader);  # common whitespace and common leading string
    if (/^\s*(?:([^\w\s]+)(\s*).*\n)(?:\s*\1\2?.*\n)+$/) {
        ($white, $leader) = ($2, quotemeta($1));
    } else {
        ($white, $leader) = (/^(\s+)/, '');
    }
    s/^\s*?$leader(?:$white)?//gm;
    return $_;
}</PRE
><p class="para">If that pattern makes your eyes glaze over, you could always break it up and add comments by adding <code class="literal">/x</CODE
>:</P
><pre class="programlisting">    if (m{
            ^                       # start of line
            \s *                    # 0 or more whitespace chars
            (?:                     # begin first non-remembered grouping
                 (                  #   begin save buffer $1
                    [^\w\s]         #     one byte neither space nor word
                    +               #     1 or more of such
                 )                  #   end save buffer $1
                 ( \s* )            #   put 0 or more white in buffer $2
                 .* \n              #   match through the end of first line
             )                      # end of first grouping
             (?:                    # begin second non-remembered grouping
                \s *                #   0 or more whitespace chars
                \1                  #   whatever string is destined for $1
                \2 ?                #   what'll be in $2, but optionally
                .* \n               #   match through the end of the line
             ) +                    # now repeat that group idea 1 or more
             $                      # until the end of the line
          }x
       )
    {
        ($white, $leader) = ($2, quotemeta($1));
    } else {
        ($white, $leader) = (/^(\s+)/, '');
    }
    s{
         ^                          # start of each line (due to /m)
         \s *                       # any amount of leading whitespace
            ?                       #   but minimally matched
         $leader                    # our quoted, saved per-line leader
         (?:                        # begin unremembered grouping
            $white                  #    the same amount
         ) ?                        # optionalize in case EOL after leader
    }{}xgm;<a class="indexterm" name="ch01-idx-1000010297-0"></A
></PRE
><p class="para">There, isn't that much easier to read? Well, maybe not; sometimes it doesn't help to pepper your code with insipid comments that mirror the code. This may be one of those cases.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch01-pgfId-1407">See Also</A
></H3
><p class="para">The "Scalar Value Constructors" section of <em class="emphasis">perldata</EM
> (1) and the <a class="olink" href="../prog/ch02_03.htm#PERL2-CH-2-SECT-3.1">"Here Documents"</A
> section of <a class="olink" href="../prog/ch02_01.htm">Chapter 2</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
>; the <code class="literal">s///</CODE
> operator in <em class="emphasis">perlre </EM
>(1) and <i class="filename">perlop</I
> (1), and the  <a class="olink" href="../prog/ch02_04.htm#PERL2-CH-2-SECT-4.1.2">"Pattern Matching"</A
> section of <a class="olink" href="../prog/ch02_01.htm">Chapter 2</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
><a class="indexterm" name="ch01-idx-1000010288-0"></A
><a class="indexterm" name="ch01-idx-1000010288-1"></A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch01_11.htm" title="1.10. Interpolating Functions and Expressions Within Strings"><img src="../gifs/txtpreva.gif" alt="Previous: 1.10. Interpolating Functions and Expressions Within Strings" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch01_13.htm" title="1.12. Reformatting Paragraphs"><img src="../gifs/txtnexta.gif" alt="Next: 1.12. Reformatting Paragraphs" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">1.10. Interpolating Functions and Expressions Within Strings</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">1.12. Reformatting Paragraphs</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
