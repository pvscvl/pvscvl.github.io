<html><head>
<title>Recipe 12.5. Determining the Caller's Package</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:41:33Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch12_01.htm" title="12. Packages, Libraries, and Modules"><link rel="prev" href="ch12_05.htm" title="12.4. Making Variables Private to a Module"><link rel="next" href="ch12_07.htm" title="12.6. Automating Module Clean-Up"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch12_05.htm" title="12.4. Making Variables Private to a Module"><img src="../gifs/txtpreva.gif" alt="Previous: 12.4. Making Variables Private to a Module" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch12_01.htm" title="12. Packages, Libraries, and Modules">Chapter 12<br>Packages, Libraries, and Modules</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch12_07.htm" title="12.6. Automating Module Clean-Up"><img src="../gifs/txtnexta.gif" alt="Next: 12.6. Automating Module Clean-Up" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch12-chap12_determining_0">12.5. Determining the Caller's Package</A
></H2
><div class="sect2"><h3 class="sect2"><a class="title" name="ch12-pgfId-716">Problem<a class="indexterm" name="ch12-idx-1000005210-0"></A
><a class="indexterm" name="ch12-idx-1000005210-1"></A
></A
></H3
><p class="para">You need to find out the current or calling package.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch12-pgfId-722">Solution</A
></H3
><p class="para">To find the current package:</P
><pre class="programlisting">$this_pack = __PACKAGE__;</PRE
><p class="para">To find the <a class="indexterm" name="ch12-idx-1000005227-0"></A
>caller's package:</P
><pre class="programlisting">$that_pack = caller();</PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch12-pgfId-734">Discussion</A
></H3
><p class="para">The <code class="literal">__PACKAGE__</CODE
> symbol returns the package that the code is currently being compiled into. This doesn't interpolate into double-quoted strings:</P
><pre class="programlisting">print &quot;I am in package __PACKAGE__\n&quot;;              # WRONG!
<b class="emphasis.bold">I am in package __PACKAGE__</B
></PRE
><p class="para">Needing to figure out the caller's package arose more often in older code that received as input a string of code to be <code class="literal">eval</CODE
>uated, or a filehandle, format, or directory handle name. Consider a call to a hypothetical <code class="literal">runit</CODE
> function:</P
><pre class="programlisting">package Alpha;
runit('$line = &lt;TEMP&gt;');

package Beta;
sub runit {
    my $codestr = shift;
    eval $codestr;
    die if $@;
}</PRE
><p class="para">Because <code class="literal">runit</CODE
> was compiled in a different package than was currently executing, when the <code class="literal">eval</CODE
> runs, it will act as though it were passed <code class="literal">$Beta::line</CODE
> and <code class="literal">Beta::TEMP</CODE
>. The old workaround was to include your caller's package first:</P
><pre class="programlisting">package Beta;
sub runit {
    my $codestr = shift;
    my $hispack = caller;
    eval &quot;package $hispack; $codestr&quot;;
    die if $@;
}</PRE
><p class="para">That approach only works when <code class="literal">$line</CODE
> is a global variable. If it's lexical, that won't help at all. Instead, arrange for <code class="literal">runit</CODE
> to accept a reference to a subroutine:</P
><pre class="programlisting">package Alpha;
runit( sub { $line = &lt;TEMP&gt; } );

package Beta;
sub runit {
    my $coderef = shift;
    &amp;$coderef();
}</PRE
><p class="para">This not only works with lexicals, it has the added benefit of checking the code's syntax at compile time, which is a major win.</P
><p class="para">If all that's being passed in is a filehandle, it's more portable to use the <code class="literal">Symbol::qualify</CODE
><a class="indexterm" name="ch12-idx-1000005220-0"></A
> function. This function takes a name and package to qualify the name into. If the name needs qualification, it fixes it; otherwise, it's left alone. But that's considerably less efficient than a <code class="literal">*</CODE
> prototype.</P
><p class="para">Here's an example that reads and returns <em class="emphasis">n</EM
> lines from a filehandle. The function qualifies the handle before working with it.</P
><pre class="programlisting">open (FH, &quot;&lt; /etc/termcap&quot;)
    or die &quot;can't open /etc/termcap: $!&quot;;
($a, $b, $c) = nreadline(3, 'FH');

use Symbol ();
use Carp;
sub nreadline {
    my ($count, $handle) = @_;
    my(@retlist,$line);

    croak &quot;count must be &gt; 0&quot; unless $count &gt; 0;
    $handle = Symbol::qualify($handle, (<code class="literal">caller()</CODE
>)[0]);
    croak &quot;need open filehandle&quot; unless defined fileno($handle);

    push(@retlist, $line) while defined($line = &lt;$handle&gt;) &amp;&amp; $count--;
    return @retlist;
}</PRE
><p class="para">If everyone who called your <code class="literal">nreadline</CODE
> function <a class="indexterm" name="ch12-idx-1000006218-0"></A
>passed in the filehandle as a typeglob <code class="literal">*FH</CODE
>, as a glob reference <code class="literal">\*FH</CODE
>, or using FileHandle or IO::Handle objects, you wouldn't need to do this. It's only the possibility of a bare <code class="literal">&quot;FH&quot;</CODE
> that requires qualification.<a class="indexterm" name="ch12-idx-1000005212-0"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch12-pgfId-1000005916">See Also</A
></H3
><p class="para">The documentation for the standard Symbol module, also found in <a class="olink" href="../prog/ch07_01.htm">Chapter 7</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
>; the descriptions of the special symbols <code class="literal">__FILE__ </CODE
>, <code class="literal">__LINE__</CODE
> , and <code class="literal">__PACKAGE__</CODE
> in <i class="filename">perldata</I
> (1); <a class="xref" href="ch12_13.htm" title="Reporting Errors and Warnings Like Built-Ins">Recipe 12.12</A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch12_05.htm" title="12.4. Making Variables Private to a Module"><img src="../gifs/txtpreva.gif" alt="Previous: 12.4. Making Variables Private to a Module" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch12_07.htm" title="12.6. Automating Module Clean-Up"><img src="../gifs/txtnexta.gif" alt="Next: 12.6. Automating Module Clean-Up" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">12.4. Making Variables Private to a Module</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">12.6. Automating Module Clean-Up</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
