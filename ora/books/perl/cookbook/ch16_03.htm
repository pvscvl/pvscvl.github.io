<html><head>
<title>Recipe 16.2. Running Another Program</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:43:39Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch16_01.htm" title="16. Process Management and Communication"><link rel="prev" href="ch16_02.htm" title="16.1. Gathering Output from a Program"><link rel="next" href="ch16_04.htm" title="16.3. Replacing the Current Program with a Different One"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name="srchmap"index.html><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch16_02.htm" title="16.1. Gathering Output from a Program"><img src="../gifs/txtpreva.gif" alt="Previous: 16.1. Gathering Output from a Program" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch16_01.htm" title="16. Process Management and Communication">Chapter 16<br>Process Management and Communication</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch16_04.htm" title="16.3. Replacing the Current Program with a Different One"><img src="../gifs/txtnexta.gif" alt="Next: 16.3. Replacing the Current Program with a Different One" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch16-29784">16.2. Running Another Program</A
></H2
><div class="sect2"><h3 class="sect2"><a class="title" name="ch16-pgfId-860">Problem<a class="indexterm" name="ch16-idx-1000006245-0"></A
><a class="indexterm" name="ch16-idx-1000006245-1"></A
></A
></H3
><p class="para">You want to run another program from your own, pause until the other program is done, and then continue. The other program should have same STDIN and STDOUT as you have.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch16-pgfId-866">Solution</A
></H3
><p class="para">Call <code class="literal">system</CODE
><a class="indexterm" name="ch16-idx-1000006251-0"></A
> with a string to have the shell interpret the string as a command line:</P
><pre class="programlisting">$status = system(&quot;vi $myfile&quot;);</PRE
><p class="para">If you don't want the shell involved, pass <code class="literal">system</CODE
> a list:</P
><pre class="programlisting">$status = system(&quot;vi&quot;, $myfile);</PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch16-pgfId-878">Discussion</A
></H3
><p class="para">The <code class="literal">system</CODE
> function is the simplest and most generic way to run another program in Perl. It doesn't gather the program's STDOUT like backticks or <code class="literal">open</CODE
>. Instead, its return value is (essentially) that program's exit status. While the new program is running, your main program is suspended, so the new program can read from your STDIN and write to your STDOUT so users can interact with it.</P
><p class="para">Like <code class="literal">open</CODE
>, <code class="literal">exec</CODE
>, and backticks, <code class="literal">system</CODE
> uses the shell to start the program whenever it's called with one argument. This is convenient when you want to do redirection or other tricks:</P
><pre class="programlisting">system(&quot;cmd1 args | cmd2 | cmd3 &gt;outfile&quot;);
system(&quot;cmd args &lt;infile &gt;outfile 2&gt;errfile&quot;);</PRE
><p class="para">To avoid the shell, call <code class="literal">system</CODE
> with a list of arguments:</P
><pre class="programlisting">$status = system($program, $arg1, $arg);
die &quot;$program exited funny: $?&quot; unless $status == 0;</PRE
><p class="para">The returned status value is not just the exit value: it includes the signal number (if any) that the process died from. This is the same value that <code class="literal">wait</CODE
> sets <code class="literal">$?</CODE
> to. See <a class="xref" href="ch16_20.htm" title="Avoiding Zombie Processes">Recipe 16.19</A
> to learn how to decode this value.</P
><p class="para">The <code class="literal">system</CODE
> function (but not backticks) ignores SIGINT and SIGQUIT while child processes are running. That way those signals will kill only the child process. If you want your main program to die as well, check the return value of <code class="literal">system</CODE
>, or the value of the <code class="literal">$?</CODE
> variable.</P
><pre class="programlisting">if (($signo = system(@arglist)) &amp;= 127) { 
    die &quot;program killed by signal $signo\n&quot;;
}</PRE
><p class="para">To get the effect of a <code class="literal">system</CODE
> that ignores SIGINT, install your own signal handler and then manually <code class="literal">fork</CODE
> and <code class="literal">exec</CODE
>:</P
><pre class="programlisting">if ($pid = fork) {
    # parent catches INT and berates user
    local $SIG{INT} = sub { print &quot;Tsk tsk, no process interruptus\n&quot; };
    waitpid($pid, 0);
} else {
    die &quot;cannot fork: $!&quot; unless defined $pid;
    # child ignores INT and does its thing
    $SIG{INT} = &quot;IGNORE&quot;;
    exec(&quot;summarize&quot;, &quot;/etc/logfiles&quot;)             or die &quot;Can't exec: $!\n";
}
</PRE
><p class="para">A few programs examine their own program name. Shells look to see whether they were called with a leading minus to indicate interactivity. The <em class="emphasis">expn</EM
> program at the end of Chapter 18 behaves differently if called as <em class="emphasis">vrfy</EM
>, which can happen if you've installed the file under two different links as suggested. This is why you shouldn't trust that <code class="literal">$0</CODE
> is really the pathname to the invoked program&nbsp;- you could have been lied to in a number of ways.</P
><p class="para">If you want to fib to the program you're executing about its own name, specify the real path as the "indirect object" in front of the list passed to <code class="literal">system</CODE
>. (This also works with <code class="literal">exec</CODE
>.) The indirect object has no comma following it, just like using <code class="literal">printf</CODE
> with a filehandle or making object methods without the pointer arrow.</P
><pre class="programlisting">$shell = '/bin/tcsh';
system $shell '-csh';           # pretend it's a login shell</PRE
><p class="para">Or, more directly:</P
><pre class="programlisting">system {'/bin/tcsh'} '-csh';    # pretend it's a login shell</PRE
><p class="para">In the next example, the program's real pathname is supplied in the indirect object slot as <code class="literal">{'/home/tchrist/scripts/expn'}</CODE
>. The fictitious name <code class="literal">'vrfy</CODE
>' is given as the first real function argument, which the program will see stored in <code class="literal">$0</CODE
>.</P
><pre class="programlisting"># call expn as vrfy
system {'/home/tchrist/scripts/expn'} 'vrfy', @ADDRESSES;</PRE
><p class="para">Using an indirect object with <code class="literal">system</CODE
> is also more secure. This usage forces interpretation of the arguments as a multivalued list, even if the list had just one argument. That way you're safe from the shell expanding wildcards or splitting up words with whitespace in them.</P
><pre class="programlisting">@args = ( &quot;echo surprise&quot; );

system @args;               # subject to shell escapes if @args == 1
system { $args[0] } @args;  # safe even with one-arg list</PRE
><p class="para">The first version, the one without the indirect object, ran the <em class="emphasis">echo</EM
> program, passing it <code class="literal">&quot;surprise&quot;</CODE
> an argument. The second version didn't&nbsp;- it tried to run a program literally called <code class="literal">&quot;echo</CODE
> <code class="literal">surprise&quot;</CODE
>, didn't find it, and set <code class="literal">$?</CODE
> to a non-zero value indicating failure.<a class="indexterm" name="ch16-idx-1000006253-0"></A
><a class="indexterm" name="ch16-idx-1000006253-1"></A
><a class="indexterm" name="ch16-idx-1000006253-2"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch16-pgfId-1000005848">See Also</A
></H3
><p class="para">The section on <a class="olink" href="../prog/ch06_03.htm#PERL2-CH-6-SECT-3.1.3">"Cooperating with Strangers"</A
> in <a class="olink" href="../prog/ch06_01.htm">Chapter 6</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
>, or <i class="filename">perlsec </I
>(1); the <a class="olink" href="../prog/ch03_190.htm#PERL2-CMD-WAITPID"><code class="literal">waitpid</CODE
></A
>, <a class="olink" href="../prog/ch03_040.htm#PERL2-CMD-FORK"><code class="literal">fork</CODE
></A
>, <a class="olink" href="../prog/ch03_033.htm#PERL2-CMD-EXEC"><code class="literal">exec</CODE
></A
>, <a class="olink" href="../prog/ch03_167.htm#PERL2-CMD-SYSTEM"><code class="literal">system</CODE
></A
>, and <a class="olink" href="../prog/ch03_102.htm#PERL2-CMD-OPEN"><code class="literal">open</CODE
></A
> functions in <a class="olink" href="../prog/ch03_01.htm">Chapter 3</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
> or <i class="filename">perlfunc </I
>(1); <a class="xref" href="ch16_02.htm" title="Gathering Output from a Program">Recipe 16.1</A
>; <a class="xref" href="ch16_05.htm" title="Reading or Writing to Another Program">Recipe 16.4</A
>; <a class="xref" href="ch16_20.htm" title="Avoiding Zombie Processes">Recipe 16.19</A
>; <a class="xref" href="ch19_07.htm" title="Executing Commands Without Shell Escapes">Recipe 19.6</A
>; <cite class="citetitle">Advanced Programming in the UNIX Environment</CITE
>, by Richard W. Stevens; Addison-Wesley (1992)</P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch16_02.htm" title="16.1. Gathering Output from a Program"><img src="../gifs/txtpreva.gif" alt="Previous: 16.1. Gathering Output from a Program" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch16_04.htm" title="16.3. Replacing the Current Program with a Different One"><img src="../gifs/txtnexta.gif" alt="Next: 16.3. Replacing the Current Program with a Different One" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">16.1. Gathering Output from a Program</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">16.3. Replacing the Current Program with a Different One</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
