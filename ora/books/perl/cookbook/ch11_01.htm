<html><head>
<title>[Chapter 11] References and Records</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:40:22Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="index.htm" title="Perl Cookbook"><link rel="prev" href="ch10_18.htm" title="10.17. Program: Sorting Your Mail"><link rel="next" href="ch11_02.htm" title="11.1. Taking References to Arrays"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch10_18.htm" title="10.17. Program: Sorting Your Mail"><img src="../gifs/txtpreva.gif" alt="Previous: 10.17. Program: Sorting Your Mail" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 11</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch11_02.htm" title="11.1. Taking References to Arrays"><img src="../gifs/txtnexta.gif" alt="Next: 11.1. Taking References to Arrays" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="chapter"><h1 class="chapter"><a class="title" name="ch11-17513">11. References and Records</A
></H1
><div class="htmltoc"><p><b>Contents:</B
><br><a class="sect1" href="#ch11-31765" title="11.0. Introduction">Introduction</A
><br><a class="sect1" href="ch11_02.htm" title="11.1. Taking References to Arrays">Taking References to Arrays</A
><br><a class="sect1" href="ch11_03.htm" title="11.2. Making Hashes of Arrays">Making Hashes of Arrays</A
><br><a class="sect1" href="ch11_04.htm" title="11.3. Taking References to Hashes">Taking References to Hashes</A
><br><a class="sect1" href="ch11_05.htm" title="11.4. Taking References to Functions">Taking References to Functions</A
><br><a class="sect1" href="ch11_06.htm" title="11.5. Taking References to Scalars">Taking References to Scalars</A
><br><a class="sect1" href="ch11_07.htm" title="11.6. Creating Arrays of Scalar References">Creating Arrays of Scalar References</A
><br><a class="sect1" href="ch11_08.htm" title="11.7. Using Closures Instead of Objects">Using Closures Instead of Objects</A
><br><a class="sect1" href="ch11_09.htm" title="11.8. Creating References to Methods">Creating References to Methods</A
><br><a class="sect1" href="ch11_10.htm" title="11.9. Constructing Records">Constructing Records</A
><br><a class="sect1" href="ch11_11.htm" title="11.10. Reading and Writing Hash Records to Text Files">Reading and Writing Hash Records to Text Files</A
><br><a class="sect1" href="ch11_12.htm" title="11.11. Printing Data Structures">Printing Data Structures</A
><br><a class="sect1" href="ch11_13.htm" title="11.12. Copying Data Structures">Copying Data Structures</A
><br><a class="sect1" href="ch11_14.htm" title="11.13. Storing Data Structures to Disk">Storing Data Structures to Disk</A
><br><a class="sect1" href="ch11_15.htm" title="11.14. Transparently Persistent Data Structures">Transparently Persistent Data Structures</A
><br><a class="sect1" href="ch11_16.htm" title="11.15. Program: Binary Trees">Program: Binary Trees</A
></P
><p></P
></DIV
><div class="epigraph" align="right"><p class="para" align="right"><i>With as little a web as this will I ensnare as great a fly as Cassio.</I
></P
><p class="attribution" align="right">-&nbsp;Shakespeare <cite class="citetitle">Othello, Act II, scene i </CITE
></P
></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch11-31765">11.0. Introduction</A
></H2
><p class="para">Perl provides three fundamental data types: scalars, arrays, and hashes. It's certainly possible to write many programs without recourse to complex records, but most programs need something more complex than simple variables and lists.</P
><p class="para">Perl's three built-in types combine with references to produce arbitrarily complex and powerful data structures, the records that users of ancient versions of Perl desperately yearned for. Selecting the proper data structure and algorithm can make the difference between an elegant program that does its job quickly and an ungainly concoction that's glacially slow to execute and consumes system resources voraciously.</P
><p class="para">The first part of this chapter shows how to create and use plain references. The second part shows how to use references to create higher order data structures.</P
><div class="sect2"><h3 class="sect2"><a class="title" name="ch11-chap11_references_1">References</A
></H3
><p class="para"><a class="indexterm" name="ch11-idx-1000004778-0"></A
>To grasp the concept of references, you must first understand how Perl stores values in variables. Each defined variable has a name and the address of a chunk of memory associated with it. This idea of storing addresses is fundamental to references because a reference is a value that holds the location of another value. The scalar value that contains the memory address is called a <em class="emphasis">reference</EM
>. Whatever value lives at that memory address is called a <em class="emphasis">referent</EM
><a class="indexterm" name="ch11-idx-1000004785-0"></A
>. (You may also call it a "thingie" if you prefer to live a whimsical existence.) See <a class="xref" href="#ch11-12670" title="Reference and referent">Figure 11.1</A
>.</P
><p class="para">The referent could be any of Perl's built-in types (scalar, array, hash, ref, code, or glob) or a user-defined type based on one of the built-in ones.</P
><h4 class="figure"><a class="title" name="ch11-12670">Figure 11.1: Reference and referent</A
></H4
><img class="graphic" src="figs/pcb_1101.gif" alt="Figure 11.1"><p class="para">Referents in Perl are <em class="emphasis">typed</EM
><a class="indexterm" name="ch11-idx-1000004784-0"></A
>. This means you can't treat a reference to an array as though it were a reference to a hash, for example. Attempting to do so produces a runtime exception. No mechanism for type casting exists in Perl. This is considered a feature.</P
><p class="para">So far, it may look as though a reference were little more than a raw address with strong typing. But it's far more than that. Perl takes care of automatic memory allocation and deallocation (garbage collection) for references, just as it does for everything else. Every chunk of memory in Perl has a <em class="emphasis">reference count</EM
><a class="indexterm" name="ch11-idx-1000004786-0"></A
> associated with it, representing how many places know about that referent. The memory used by a referent is not returned to the process's free pool until its reference count reaches zero. This ensures that you never have a reference that isn't valid &nbsp;-  no more core dumps and general protection faults from mismanaged pointers as in C.</P
><p class="para">Freed memory is returned to Perl for later use, but few operating systems reclaim it and decrease the process's memory footprint. This is because most memory allocators use a stack, and if you free up memory in the middle of the stack, the operating system can't take it back without moving the rest of the allocated memory around. That would destroy the integrity of your pointers and blow XS code out of the water.</P
><p class="para">To follow a reference to its referent, preface the reference with the appropriate type symbol for the data you're accessing. For instance, if <code class="literal">$sref</CODE
> is a reference to a scalar, you can say:</P
><pre class="programlisting">print $$sref;    # prints the scalar value that the reference $sref refers to
$$sref = 3;      # assigns to $sref's referent</PRE
><p class="para">To access one element of an array or hash whose reference you have, use the <a class="indexterm" name="ch11-idx-1000004787-0"></A
><a class="indexterm" name="ch11-idx-1000004787-1"></A
><a class="indexterm" name="ch11-idx-1000004787-2"></A
>infix pointer-arrow notation, as in <code class="literal">$rv-&gt;[37]</CODE
> or <code class="literal">$rv-&gt;{&quot;wilma&quot;}</CODE
>. Besides dereferencing array references and hash references, the arrow is also used to call an indirect function through its reference, as in <code class="literal">$code_ref-&gt;(&quot;arg1&quot;,</CODE
> <code class="literal">&quot;arg2&quot;)</CODE
>; this is discussed <a class="xref" href="ch11_05.htm" title="Taking References to Functions">Recipe 11.4</A
>. If you're using an object, use an arrow to call a method, <code class="literal">$object-&gt;methodname(&quot;arg1&quot;,</CODE
><span class="acronym"> </SPAN
><code class="literal">&quot;arg2&quot;)</CODE
>, as shown in <a class="xref" href="ch13_01.htm" title="Classes, Objects, and Ties">Chapter 13, <cite class="chapter">Classes, Objects, and Ties</CITE
></A
>.</P
><p class="para">Perl's syntax rules make dereferencing complex expressions tricky &nbsp;-  it falls into the category of "hard things that should be possible." Mixing right associative and left associative operators doesn't work out well. For example, <code class="literal">$$x[4]</CODE
> is the same as <code class="literal">$x-&gt;[4]</CODE
>; that is, it treats <code class="literal">$x</CODE
> as a reference to an array and then extracts element number four from that. This could also have been written <code class="literal">${$x}[4]</CODE
>. If you really meant "take the fifth element of <code class="literal">@x</CODE
> and dereference it as a scalar reference," then you need to use <code class="literal">${$x[4]}</CODE
>. You should avoid putting two type signs (<code class="literal">$@%&amp;</CODE
>) side-by-side, unless it's simple and unambiguous like <code class="literal">%hash</CODE
> <code class="literal">=</CODE
> <code class="literal">%$hashref</CODE
>.</P
><p class="para">In the simple cases using <code class="literal">$$sref</CODE
> above, you could have written:</P
><pre class="programlisting">print ${$sref};             # prints the scalar $sref refers to
${$sref} = 3;               # assigns to $sref's referent</PRE
><p class="para">For safety, some programmers use this notation exclusively.</P
><p class="para">When passed a reference, the <code class="literal">ref</CODE
><a class="indexterm" name="ch11-idx-1000004788-0"></A
> function returns a string describing its referent. (It returns false if passed a non-reference.) This string is usually one of SCALAR, ARRAY, HASH, or CODE, although the other built-in types of GLOB, REF, IO, Regexp, and LVALUE also occasionally appear. If you call <code class="literal">ref</CODE
> on a non-reference, it returns an empty string. If you call <code class="literal">ref</CODE
> on an object (a reference whose referent has been blessed), it returns the class the object was blessed into: CGI, IO::Socket, or even ACME::Widget.</P
><p class="para">You can create references in Perl by taking references to things that are already there or by using the <code class="literal">[</CODE
> <code class="literal">]</CODE
>, <code class="literal">{</CODE
> <code class="literal">}</CODE
>, and <code class="literal">sub</CODE
> <code class="literal">{</CODE
> <code class="literal">}</CODE
> composers. The backslash operator is simple to use: put it before the thing you want a reference to. For instance, if you want a reference to the contents of <code class="literal">@array</CODE
>, just say:</P
><pre class="programlisting">$aref = \@array;</PRE
><p class="para">You can even create references to constant values;  future attempts to change the value of the referent will cause a runtime error:</P
><pre class="programlisting">$pi = \3.14159;
$$pi = 4;           # runtime error<a class="indexterm" name="ch11-idx-1000004779-0"></A
></PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch11-chap11_anonymous_0">Anonymous Data</A
></H3
><p class="para"><a class="indexterm" name="ch11-idx-1000004780-0"></A
>Taking references to existing data is helpful when you're using pass-by-reference in a function call, but for dynamic programming, it becomes cumbersome. You need to be able to grow data structures at will, to allocate new arrays and hashes (or scalars or functions) on demand. You don't want to be bogged down with having to give them names each time.</P
><p class="para"><a class="indexterm" name="ch11-idx-1000004789-0"></A
><a class="indexterm" name="ch11-idx-1000004789-1"></A
>Perl can explicitly create anonymous arrays and hashes, which allocate a new array or hash and return a reference to that memory:</P
><pre class="programlisting">$aref = [ 3, 4, 5 ];                                # new anonymous array
$href = { &quot;How&quot; =&gt; &quot;Now&quot;, &quot;Brown&quot; =&gt; &quot;Cow&quot; };       # new anonymous hash</PRE
><p class="para">Perl can also create a reference implicitly by <em class="emphasis">autovivification</EM
><a class="indexterm" name="ch11-idx-1000004790-0"></A
><a class="indexterm" name="ch11-idx-1000004790-1"></A
>. This is what happens when you try to assign through an undefined references and Perl automatically creates the reference you're trying to use.</P
><pre class="programlisting">undef $aref;
@$aref = (1, 2, 3);
print $aref;
<code class="userinput"><b><code class="replaceable"><i>ARRAY(0x80c04f0)</I
></CODE
></B
></CODE
></PRE
><p class="para">Notice how we went from an undefined variable to one with an array reference in it without actually assigning anything? Perl filled in the undefined reference for you. This is the property that permits something like this to work as the first statement in your program:</P
><pre class="programlisting">$a[4][23][53][21] = &quot;fred&quot;;
print $a[4][23][53][21];
<code class="userinput"><b><code class="replaceable"><i>fred</I
></CODE
></B
></CODE
>
print $a[4][23][53];
<code class="userinput"><b><code class="replaceable"><i>ARRAY(0x81e2494)</I
></CODE
></B
></CODE
>
print $a[4][23];
<code class="userinput"><b><code class="replaceable"><i>ARRAY(0x81e0748)</I
></CODE
></B
></CODE
>
print $a[4];
<code class="userinput"><b><code class="replaceable"><i>ARRAY(0x822cd40)</I
></CODE
></B
></CODE
></PRE
><p class="para">The following table shows mechanisms for producing references to both named and anonymous scalars, arrays, hashes, and functions. (Anonymous typeglobs are too scary to show &nbsp;-  and virtually never used. It's best to use <code class="literal">Symbol::gensym()</CODE
> or <code class="literal">IO::Handle-&gt;new()</CODE
> for them.)</P
><table class="informaltable" border="1" cellpadding="3"><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1"><p class="para">Reference to</P
></TH
><th class="entry" align="LEFT" rowspan="1" colspan="1"><p class="para">Named</P
></TH
><th class="entry" align="LEFT" rowspan="1" colspan="1"><p class="para">Anonymous</P
></TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">Scalar</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">\$scalar</CODE
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">\do{my $anon}</CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">Array</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">\@array</CODE
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">[ LIST ]</CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">Hash</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">\%hash</CODE
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">{ LIST }</CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">Code</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">\&amp;function</CODE
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">sub { CODE } </CODE
></P
></TD
></TR
></TBODY
></TABLE
><p class="para">These diagrams illustrate the differences between named and anonymous values. <a class="xref" href="#ch11-17738" title="Named values">Figure 11.2</A
> shows named values.</P
><h4 class="figure"><a class="title" name="ch11-17738">Figure 11.2: Named values</A
></H4
><img class="graphic" src="figs/pcb_1102.gif" alt="Figure 11.2"><p class="para">In other words, saying <code class="literal">$a</CODE
> <code class="literal">=</CODE
> <code class="literal">\$b</CODE
> makes <code class="literal">$$a</CODE
> and <code class="literal">$b</CODE
> the <em class="emphasis">same piece of memory</EM
>. If you say <code class="literal">$$a</CODE
> <code class="literal">=</CODE
> <code class="literal">3</CODE
>, then the value of <code class="literal">$b</CODE
> is set to 3.</P
><p class="para"><a class="xref" href="#ch11-31355" title="Anonymous values">Figure 11.3</A
> shows anonymous values.</P
><h4 class="figure"><a class="title" name="ch11-31355">Figure 11.3: Anonymous values</A
></H4
><img class="graphic" src="figs/pcb_1103.gif" alt="Figure 11.3"><p class="para">Every reference evaluates as true, by definition, so if you write a subroutine that returns a reference, you can return <code class="literal">undef</CODE
> on error and check for it with:</P
><pre class="programlisting">$op_cit = cite($ibid)       or die &quot;couldn't make a reference&quot;;</PRE
><p class="para">The <code class="literal">undef</CODE
><a class="indexterm" name="ch11-idx-1000004791-0"></A
> operator can be used on any variable or function in Perl to free its memory. This does not necessarily free memory, call object destructors, etc. It just decrements the reference count by one.<a class="indexterm" name="ch11-idx-1000004781-0"></A
> Without an argument, <code class="literal">undef</CODE
> produces an undefined value.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch11-chap11_records_0">Records</A
></H3
><p class="para"><a class="indexterm" name="ch11-idx-1000004782-0"></A
>The classic use of references in Perl is to circumvent the restriction that arrays and hashes may hold scalars only. References are scalars, so to make an array of arrays, make an array of array <em class="emphasis">references</EM
>. Similarly, hashes of hashes are implemented as hashes of hash references, arrays of hashes as arrays of hash references, hashes of arrays as hashes of array references, and so on.</P
><p class="para">Once you have these complex structures, you can use them to implement records. A record is a single logical unit composed of different attributes. For instance, a name, an address, and a birthday might comprise a record representing a person. C calls such things <em class="emphasis">structs</EM
>, and Pascal calls them <em class="emphasis">RECORDs</EM
>. Perl doesn't have a particular name for these because you can implement this notion in different ways.</P
><p class="para">The most common technique in Perl is to treat a hash as a record, where the keys of the hash are the record's field names and the values of the hash are those fields' values.</P
><p class="para">For instance, we might create a "person" record like this:</P
><pre class="programlisting">$Nat = { &quot;Name&quot;     =&gt; &quot;Leonhard Euler&quot;,
         &quot;Address&quot;  =&gt; &quot;1729 Ramanujan Lane\nMathworld, PI 31416&quot;,
         &quot;Birthday&quot; =&gt; 0x5bb5580,
       };</PRE
><p class="para">Because <code class="literal">$Nat</CODE
> is a scalar, it can be stored in an array or hash element, thus creating create groups of people. Now apply the array and hash techniques from Chapters 4 and 5 to sort the sets, merge hashes, pick a random record, and so on.</P
><p class="para">The attributes of a record, including the "person" record, are always scalars. You can certainly use numbers as readily as strings there, but that's no great trick. The real power play happens when you use even more references for values in the record. <code class="literal">&quot;Birthday&quot;</CODE
>, for instance, might be stored as an anonymous array with three elements: day, month, and year. You could then say <code class="literal">$person-&gt;{&quot;Birthday&quot;}-&gt;[0]</CODE
> to access just the day field. Or a date might be represented as a hash record, which would then lend itself to access such as <code class="literal">$person-&gt;{&quot;Birthday&quot;}-&gt;{&quot;day&quot;}</CODE
>. Adding references to your collection of skills makes possible many more complex and useful programming strategies.</P
><p class="para">At this point, we've conceptually moved beyond simple records. We're now creating elaborate data structures that represent complicated relationships between the data they hold. Although we <em class="emphasis">can</EM
> use these to implement traditional data structures like linked lists, the recipes in the second half of this chapter don't deal specifically with any particular structure. Instead, they give generic techniques for loading, printing, copying, and saving generic data structures. The final program example demonstrates how to manipulate binary trees.<a class="indexterm" name="ch11-idx-1000004783-0"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch11-pgfId-180">See Also</A
></H3
><p class="para"><a class="olink" href="../prog/ch04_01.htm">Chapter 4</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
>; <i class="filename">perlref </I
>(1), <i class="filename">perllol</I
> (1), and <i class="filename">perldsc</I
> (1)</P
></DIV
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch10_18.htm" title="10.17. Program: Sorting Your Mail"><img src="../gifs/txtpreva.gif" alt="Previous: 10.17. Program: Sorting Your Mail" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch11_02.htm" title="11.1. Taking References to Arrays"><img src="../gifs/txtnexta.gif" alt="Next: 11.1. Taking References to Arrays" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">10.17. Program: Sorting Your Mail</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">11.1. Taking References to Arrays</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
