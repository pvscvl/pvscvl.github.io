<html><head>
<title>Recipe 6.3. Matching Words</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:33:40Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch06_01.htm" title="6. Pattern Matching"><link rel="prev" href="ch06_03.htm" title="6.2. Matching Letters"><link rel="next" href="ch06_05.htm" title="6.4.  Commenting Regular Expressions"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch06_03.htm" title="6.2. Matching Letters"><img src="../gifs/txtpreva.gif" alt="Previous: 6.2. Matching Letters" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch06_01.htm" title="6. Pattern Matching">Chapter 6<br>Pattern Matching</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch06_05.htm" title="6.4.  Commenting Regular Expressions"><img src="../gifs/txtnexta.gif" alt="Next: 6.4.  Commenting Regular Expressions" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch06-20126">6.3. Matching Words</A
></H2
><div class="sect2"><h3 class="sect2"><a class="title" name="ch06-pgfId-403">Problem<a class="indexterm" name="ch06-idx-1000007529-0"></A
><a class="indexterm" name="ch06-idx-1000007529-1"></A
><a class="indexterm" name="ch06-idx-1000007529-2"></A
><a class="indexterm" name="ch06-idx-1000007529-3"></A
></A
></H3
><p class="para">You want to pick out words from a string.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch06-pgfId-409">Solution</A
></H3
><p class="para">Think long and hard about what you want a word to be and what separates one word from the next, then write a regular expression that embodies your decisions. For example:</P
><pre class="programlisting">/\S+/               # as many non-whitespace bytes as possible
/[A-Za-z'-]+/       # as many letters, apostrophes, and hyphens</PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch06-pgfId-419">Discussion</A
></H3
><p class="para">Because words vary between applications, languages, and input streams, Perl does not have built-in definitions of words. You must make them from character classes and quantifiers yourself, as we did previously. The second pattern is an attempt to recognize <code class="literal">&quot;shepherd's&quot;</CODE
> and <code class="literal">&quot;sheep-shearing&quot;</CODE
> each as single words.</P
><p class="para">Most approaches will have limitations because of the vagaries of written human languages. For instance, although the second pattern successfully identifies <code class="literal">&quot;spank'd&quot;</CODE
> and <code class="literal">&quot;counter-clockwise&quot;</CODE
> as words, it will also pull the <code class="literal">&quot;rd&quot;</CODE
> out of <code class="literal">&quot;23rd</CODE
> <code class="literal">Psalm&quot;</CODE
>. If you want to be more precise when you pull words out from a string, you can specify the stuff surrounding the word. Normally, this should be a word-boundary, not whitespace:</P
><pre class="programlisting">/\b([A-Za-z]+)\b/            # usually best
/\s([A-Za-z]+)\s/            # fails at ends or w/ punctuation</PRE
><p class="para">Although Perl provides <code class="literal">\w</CODE
>, which matches a character that is part of a valid Perl identifier, Perl identifiers are rarely what you think of as words, since we really mean a string of alphanumerics and underscores, but not colons or quotes. Because it's defined in terms of <code class="literal">\w</CODE
>, <code class="literal">\b</CODE
> may surprise you if you expect to match an English word boundary (or, even worse, a Swahili word boundary).</P
><p class="para"><code class="literal">\b</CODE
> and <code class="literal">\B</CODE
> can still be useful. For example, <code class="literal">/\Bis\B/</CODE
> matches the string <code class="literal">&quot;is&quot;</CODE
> only within a word, not at the edges. And while <code class="literal">&quot;thistle&quot;</CODE
> would be found,  <code class="literal">&quot;vis-Á-vis&quot;</CODE
> wouldn't.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch06-pgfId-1000010943">See Also</A
></H3
><p class="para">The treatment of <code class="literal">\b</CODE
>, <code class="literal">\w</CODE
>, and <code class="literal">\s</CODE
> in <i class="filename">perlre</I
> (1) and in the <a class="olink" href="../prog/ch02_04.htm#PERL2-CH-2-SECT-4.1.2">"Regular expression bestiary"</A
> section of <a class="olink" href="../prog/ch02_01.htm">Chapter 2</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
>; the words-related patterns in <a class="xref" href="ch06_24.htm" title="Regular Expression Grabbag">Recipe 6.23</A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch06_03.htm" title="6.2. Matching Letters"><img src="../gifs/txtpreva.gif" alt="Previous: 6.2. Matching Letters" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch06_05.htm" title="6.4.  Commenting Regular Expressions"><img src="../gifs/txtnexta.gif" alt="Next: 6.4.  Commenting Regular Expressions" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">6.2. Matching Letters</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">6.4.  Commenting Regular Expressions</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
