<html><head>
<title>Recipe 3.8. Printing a Date</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:30:42Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch03_01.htm" title="3. Dates and Times"><link rel="prev" href="ch03_08.htm" title="3.7. Parsing Dates and Times from Strings"><link rel="next" href="ch03_10.htm" title="3.9. High-Resolution Timers"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch03_08.htm" title="3.7. Parsing Dates and Times from Strings"><img src="../gifs/txtpreva.gif" alt="Previous: 3.7. Parsing Dates and Times from Strings" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch03_01.htm" title="3. Dates and Times">Chapter 3<br>Dates and Times</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch03_10.htm" title="3.9. High-Resolution Timers"><img src="../gifs/txtnexta.gif" alt="Next: 3.9. High-Resolution Timers" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch03-19035">3.8. Printing a Date</A
></H2
><div class="sect2"><h3 class="sect2"><a class="title" name="ch03-pgfId-646">Problem <a class="indexterm" name="ch03-idx-1000006341-0"></A
><a class="indexterm" name="ch03-idx-1000006341-1"></A
></A
></H3
><p class="para">You need to print a date and time shown in Epoch seconds format in human-readable form.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch03-pgfId-652">Solution</A
></H3
><p class="para">Simply call <code class="literal">localtime</CODE
><a class="indexterm" name="ch03-idx-1000006348-0"></A
><a class="indexterm" name="ch03-idx-1000006348-1"></A
> or <code class="literal">gmtime</CODE
> in scalar context, which takes an Epoch second value and returns a string of the form <code class="literal">Tue</CODE
> <code class="literal">May</CODE
> <code class="literal">26</CODE
> <code class="literal">05:15:20</CODE
> <code class="literal">1998</CODE
>:</P
><pre class="programlisting">$STRING = localtime($EPOCH_SECONDS);</PRE
><p class="para">Alternatively, the <code class="literal">strftime</CODE
><a class="indexterm" name="ch03-idx-1000006347-0"></A
> function in the standard POSIX module supports a more customizable output format, and takes individual DMYHMS values:</P
><pre class="programlisting">use POSIX qw(strftime);
$STRING = strftime($FORMAT, $SECONDS, $MINUTES, $HOUR,
                   $DAY_OF_MONTH, $MONTH, $YEAR, $WEEKDAY,
                   $YEARDAY, $DST);</PRE
><p class="para">The CPAN module Date::Manip has a <code class="literal">UnixDate</CODE
> routine that works like a specialized form <code class="literal">sprintf</CODE
> designed to handle dates. Pass it a Date::Manip date value. Using Date::Manip in lieu of POSIX::strftime has the advantage of not requiring a POSIX-compliant system.</P
><pre class="programlisting">use Date::Manip qw(UnixDate);
$STRING = UnixDate($DATE, $FORMAT);</PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch03-pgfId-676">Discussion</A
></H3
><p class="para">The simplest solution is built into Perl already: the <code class="literal">localtime</CODE
> function. In scalar context, it returns the string formatted in a particular way:</P
><pre class="programlisting"><code class="userinput"><b><code class="replaceable"><i>Sun Sep 21 15:33:36 1997</I
></CODE
></B
></CODE
></PRE
><p class="para">This makes for simple code, although it restricts the format of the string:</P
><pre class="programlisting">use Time::Local;
$time = timelocal(50, 45, 3, 18, 0, 73);
print &quot;Scalar localtime gives: &quot;, scalar(localtime($time)), &quot;\n&quot;;
<code class="userinput"><b><code class="replaceable"><i>Scalar localtime gives: Thu Jan 18 03:45:50 1973</I
></CODE
></B
></CODE
></PRE
><p class="para">Of course, <code class="literal">localtime</CODE
> requires the date and time in Epoch seconds. The <code class="literal">POSIX::strftime</CODE
> function takes a set of individual DMYMHS values and a format and returns a string. The format is similar to a <code class="literal">printf</CODE
> format; <code class="literal">%</CODE
> directives specify fields in the output string. A full list of these directives is available in your system's documentation for <code class="literal">strftime</CODE
>. <code class="literal">strftime</CODE
> expects the individual values representing the date and time to be the same range as the values returned by <code class="literal">localtime</CODE
>:</P
><pre class="programlisting">use POSIX qw(strftime);
use Time::Local;
$time = timelocal(50, 45, 3, 18, 0, 73);
print &quot;strftime gives: &quot;, strftime(&quot;%A %D&quot;, localtime($time)), &quot;\n&quot;;
<code class="userinput"><b><code class="replaceable"><i>strftime gives: Thursday 01/18/73</I
></CODE
></B
></CODE
></PRE
><p class="para">All values are shown in their national representation when using POSIX::strftime. So, if you run it in France, your program would print <code class="literal">&quot;Sunday&quot;</CODE
> as <code class="literal">&quot;Dimanche&quot;</CODE
>. Be warned: Perl's interface to the POSIX function <code class="literal">strftime</CODE
> always converts the date, assuming that it falls in the current time zone.</P
><p class="para">If you don't have access to POSIX's <code class="literal">strftime</CODE
> function, there's always the trusty <a class="indexterm" name="ch03-idx-1000006354-0"></A
>Date::Manip CPAN module, described in <a class="xref" href="ch03_07.htm" title="Day in a Week/Month/Year or Week Number">Recipe 3.6</A
>.</P
><pre class="programlisting">use Date::Manip qw(ParseDate UnixDate);
$date = ParseDate(&quot;18 Jan 1973, 3:45:50&quot;);
$datestr = UnixDate($date, &quot;%a %b %e %H:%M:%S %z %Y&quot;);    # as scalar
print &quot;Date::Manip gives: $datestr\n&quot;;
<code class="userinput"><b><code class="replaceable"><i>Date::Manip gives: Thu Jan 18 03:45:50 GMT 1973</I
></CODE
></B
></CODE
><code class="literal"></CODE
><a class="indexterm" name="ch03-idx-1000006350-0"></A
></PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch03-pgfId-724">See Also</A
></H3
><p class="para">The <code class="literal">gmtime</CODE
> and <code class="literal">localtime</CODE
> functions in <em class="emphasis">perlfunc </EM
>(1) and <a class="olink" href="../prog/ch03_01.htm">Chapter 3</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
>; <i class="filename">perllocale </I
>(1); your system's <i class="filename">strftime </I
>(3) manpage; the documentation for the POSIX module (also in <a class="olink" href="../prog/ch07_01.htm">Chapter 7</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
>); the documentation for the CPAN module Date::Manip <a class="indexterm" name="ch03-idx-1000006343-0"></A
><a class="indexterm" name="ch03-idx-1000006343-1"></A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch03_08.htm" title="3.7. Parsing Dates and Times from Strings"><img src="../gifs/txtpreva.gif" alt="Previous: 3.7. Parsing Dates and Times from Strings" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch03_10.htm" title="3.9. High-Resolution Timers"><img src="../gifs/txtnexta.gif" alt="Next: 3.9. High-Resolution Timers" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">3.7. Parsing Dates and Times from Strings</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">3.9. High-Resolution Timers</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
