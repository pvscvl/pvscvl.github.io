<html><head>
<title>Recipe 20.2. Automating Form Submission</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:45:55Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch20_01.htm" title="20. Web Automation"><link rel="prev" href="ch20_02.htm" title="20.1. Fetching a URL from a Perl Script"><link rel="next" href="ch20_04.htm" title="20.3. Extracting URLs"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch20_02.htm" title="20.1. Fetching a URL from a Perl Script"><img src="../gifs/txtpreva.gif" alt="Previous: 20.1. Fetching a URL from a Perl Script" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch20_01.htm" title="20. Web Automation">Chapter 20<br>Web Automation</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch20_04.htm" title="20.3. Extracting URLs"><img src="../gifs/txtnexta.gif" alt="Next: 20.3. Extracting URLs" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch20-41131">20.2. Automating Form Submission</A
></H2
><div class="sect2"><h3 class="sect2"><a class="title" name="ch20-pgfId-211">Problem<a class="indexterm" name="ch20-idx-1000002591-0"></A
><a class="indexterm" name="ch20-idx-1000002591-1"></A
><a class="indexterm" name="ch20-idx-1000002591-2"></A
><a class="indexterm" name="ch20-idx-1000002591-3"></A
></A
></H3
><p class="para">You want to submit form values to a CGI script from your program.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch20-pgfId-217">Solution</A
></H3
><p class="para">If you're submitting form values using the GET method, create a URL and encode the form using the <code class="literal">query_form</CODE
><a class="indexterm" name="ch20-idx-1000002601-0"></A
> method:</P
><pre class="programlisting">use LWP::Simple;
use URI::URL;

my $url = url('http://www.perl.com/cgi-bin/cpan_mod');
$url-&gt;query_form(module =&gt; 'DB_File', readme =&gt; 1);
$content = get($url);</PRE
><p class="para">If you're using the <a class="indexterm" name="ch20-idx-1000003769-0"></A
>POST method, create your own user agent and encode the content appropriately:</P
><pre class="programlisting">use HTTP::Request::Common qw(POST);
use LWP::UserAgent;

$ua = LWP::UserAgent-&gt;new();
my $req = POST 'http://www.perl.com/cgi-bin/cpan_mod',
               [ module =&gt; 'DB_File', readme =&gt; 1 ];
$content = $ua-&gt;request($req)-&gt;as_string;</PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch20-pgfId-251">Discussion</A
></H3
><p class="para">For simple operations, the procedural interface of the LWP::Simple module is sufficient. For fancier ones, the LWP::UserAgent module provides a virtual browser object, which you manipulate using method calls.</P
><p class="para">The format of a query string is:</P
><pre class="programlisting">field1=value1&amp;field2=value2&amp;field3=value3</PRE
><p class="para">In GET requests, this is encoded in the URL being requested:</P
><pre class="programlisting">http://www.site.com/path/to/
script.cgi?field1=value1&amp;field2=value2&amp;field3=value3</PRE
><p class="para">Fields must still be properly escaped, so setting the <code class="literal">arg</CODE
> form parameter to <code class="literal">&quot;this</CODE
> <code class="literal">isn't</CODE
> <code class="literal">&lt;EASY&gt;&amp;&lt;FUN&gt;&quot;</CODE
> would yield:</P
><pre class="programlisting">http://www.site.com/path/to/
script.cgi?arg=%22this+isn%27t+%3CEASY%3E+%26+%3CFUN%3E%22</PRE
><p class="para">The <code class="literal">query_form</CODE
> method called on a URL object correctly escapes the form values for you, or you could use the <code class="literal">URI::Escape::uri_escape</CODE
> or <code class="literal">CGI::escape_html</CODE
> functions on your own. In POST requests, the query string is the body of the HTTP document sent to the CGI script.</P
><p class="para">We can use the LWP::Simple module to submit data in a GET request, but there is no corresponding LWP::Simple interface for POST requests. Instead, the HTTP::Request::Common module's POST function conveniently creates a properly formatted request with everything properly escaped.</P
><p class="para">If you need to go through a proxy, construct your user agent and tell it to use a proxy this way:</P
><pre class="programlisting">$ua-&gt;proxy(['http', 'ftp'] =&gt; 'http://proxy.myorg.com:8081');</PRE
><p class="para">That says that both HTTP and FTP requests through this user agent should be routed through the proxy on port 8081 at<em class="emphasis"> </EM
><i class="systemitem.example">proxy.myorg.com</I
>.<a class="indexterm" name="ch20-idx-1000002593-0"></A
><a class="indexterm" name="ch20-idx-1000002593-1"></A
><a class="indexterm" name="ch20-idx-1000002593-2"></A
><a class="indexterm" name="ch20-idx-1000002593-3"></A
><a class="indexterm" name="ch20-idx-1000002593-4"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch20-pgfId-279">See Also</A
></H3
><p class="para">The documentation for the CPAN modules LWP::Simple, LWP::UserAgent, HTTP::Request::Common, URI::Escape, and URI::URL; <a class="xref" href="ch20_02.htm" title="Fetching a URL from a Perl Script">Recipe 20.1</A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch20_02.htm" title="20.1. Fetching a URL from a Perl Script"><img src="../gifs/txtpreva.gif" alt="Previous: 20.1. Fetching a URL from a Perl Script" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch20_04.htm" title="20.3. Extracting URLs"><img src="../gifs/txtnexta.gif" alt="Next: 20.3. Extracting URLs" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">20.1. Fetching a URL from a Perl Script</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">20.3. Extracting URLs</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
