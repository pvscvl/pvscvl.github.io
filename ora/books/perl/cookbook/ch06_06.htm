<html><head>
<title>Recipe 6.5. Finding the Nth Occurrence of a Match</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:33:45Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch06_01.htm" title="6. Pattern Matching"><link rel="prev" href="ch06_05.htm" title="6.4.  Commenting Regular Expressions"><link rel="next" href="ch06_07.htm" title="6.6. Matching Multiple Lines"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch06_05.htm" title="6.4.  Commenting Regular Expressions"><img src="../gifs/txtpreva.gif" alt="Previous: 6.4.  Commenting Regular Expressions" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch06_01.htm" title="6. Pattern Matching">Chapter 6<br>Pattern Matching</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch06_07.htm" title="6.6. Matching Multiple Lines"><img src="../gifs/txtnexta.gif" alt="Next: 6.6. Matching Multiple Lines" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch06-chap06_finding_0">6.5. Finding the N<sup class="superscript">th</SUP
> Occurrence of a Match</A
></H2
><div class="sect2"><h3 class="sect2"><a class="title" name="ch06-pgfId-553">Problem<a class="indexterm" name="ch06-idx-1000007557-0"></A
></A
></H3
><p class="para">You want to find the N<em class="emphasis"> </EM
><sup class="superscript">th</SUP
> match in a string, not just the first one. For example, you'd like to find the word preceding the third occurrence of <code class="literal">&quot;fish&quot;</CODE
>:</P
><pre class="programlisting"><code class="userinput"><b><code class="replaceable"><i>One fish two fish red fish blue fish</I
></CODE
></B
></CODE
></PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch06-pgfId-561">Solution</A
></H3
><p class="para">Use the <code class="literal">/g</CODE
><a class="indexterm" name="ch06-idx-1000007565-0"></A
> modifier in a <code class="literal">while</CODE
> loop, keeping count of matches:</P
><pre class="programlisting">$WANT = 3;
$count = 0;
while (/(\w+)\s+fish\b/gi) {
    if (++$count == $WANT) {
        print &quot;The third fish is a $1 one.\n&quot;;
        # Warning: don't `last' out of this loop
    }
}
<code class="userinput"><b><code class="replaceable"><i>The third fish is a red one.</I
></CODE
></B
></CODE
></PRE
><p class="para">Or use a repetition count and repeated pattern like this:</P
><pre class="programlisting">/(?:\w+\s+fish\s+){2}(\w+)\s+fish/i;</PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch06-pgfId-589">Discussion</A
></H3
><p class="para">As explained in the chapter introduction, using the <code class="literal">/g</CODE
> modifier in scalar context creates something of a <a class="indexterm" name="ch06-idx-1000008346-0"></A
><a class="indexterm" name="ch06-idx-1000008346-1"></A
><em class="emphasis">progressive match</EM
>, useful in <code class="literal">while</CODE
> loops. This is commonly used to count the number of times a pattern matches in a string:</P
><pre class="programlisting"># simple way with while loop
$count = 0;
while ($string =~ /PAT/g) {
    $count++;               # or whatever you'd like to do here
}

# same thing with trailing while
$count = 0;
$count++ while $string =~ /PAT/g;

# or with for loop
for ($count = 0; $string =~ /PAT/g; $count++) { }
    
# Similar, but this time count overlapping matches
$count++ while $string =~ /(?=PAT)/g;</PRE
><p class="para">To find the N<sup class="superscript">th</SUP
> match, it's easiest to keep your own counter. When you reach the appropriate N, do whatever you care to. A similar technique could be used to find every N<sup class="superscript">th</SUP
> match by checking for multiples of N using the modulus operator. For example, <code class="literal">(++$count</CODE
> <code class="literal">%</CODE
> <code class="literal">3)</CODE
> <code class="literal">==</CODE
> <code class="literal">0</CODE
> would be every third match.</P
><p class="para">If this is too much bother, you can always extract all matches and then hunt for the ones you'd like.</P
><pre class="programlisting">$pond  = 'One fish two fish red fish blue fish';

# using a temporary
@colors = ($pond =~ /(\w+)\s+fish\b/gi);      # get all matches
$color  = $colors[2];                         # then the one we want

# or without a temporary array
$color = ( $pond =~ /(\w+)\s+fish\b/gi )[2];  # just grab element 3

print &quot;The third fish in the pond is $color.\n&quot;;
<code class="userinput"><b><code class="replaceable"><i>The third fish in the pond is red.</I
></CODE
></B
></CODE
></PRE
><p class="para">Or finding all even-numbered fish:</P
><pre class="programlisting">$count = 0;
$_ = 'One fish two fish red fish blue fish';
@evens = grep { $count++ % 2 == 1 } /(\w+)\s+fish\b/gi;
print &quot;Even numbered fish are @evens.\n&quot;;
<code class="userinput"><b><code class="replaceable"><i>Even numbered fish are two blue.</I
></CODE
></B
></CODE
></PRE
><p class="para">For substitution, the replacement value should be a code expression that returns the proper string. Make sure to return the original as a replacement string for the cases you aren't interested in changing. Here we fish out the fourth specimen and turn it into a snack:</P
><pre class="programlisting">$count = 0;
s{
   \b               # makes next \w more efficient
   ( \w+ )          # this is what we'll be changing
   (
     \s+ fish \b
   )
}{
    if (++$count == 4) {
        &quot;sushi&quot; . $2;
    } else {
         $1   . $2;
    }
}gex;
<code class="userinput"><b><code class="replaceable"><i>One fish two fish red fish sushi fish</I
></CODE
></B
></CODE
></PRE
><p class="para">Picking out the last match instead of the first one is a fairly common task. The easiest way is to skip the beginning part greedily. After <code class="literal">/.*\b(\w+)\s+fish\b/</CODE
>, for example, the <code class="literal">$1</CODE
> variable would have the last fish.</P
><p class="para">Another way to get arbitrary counts is to make a global match in list context to produce all hits, then extract the desired element of that list:</P
><pre class="programlisting">$pond = 'One fish two fish red fish blue fish swim here.';
$color = ( $pond =~ /\b(\w+)\s+fish\b/gi )[-1];
print &quot;Last fish is $color.\n&quot;;
<code class="userinput"><b><code class="replaceable"><i>Last fish is blue.</I
></CODE
></B
></CODE
></PRE
><p class="para">If you need to express this same notion of finding the last match in a single pattern without <code class="literal">/g</CODE
>, you can do so with the negative lookahead assertion <code class="literal">(?!THING)</CODE
>. When you want the last match of arbitrary pattern A, you find A followed by any amount of not A through the end of the string. The general construct is <code class="literal">A(?!.*A)*$</CODE
>, which can be broken up for legibility:</P
><pre class="programlisting">m{
    A               # find some pattern A
    (?!             # mustn't be able to find
        .*          # something
        A           # and A
    )
    $               # through the end of the string
}x</PRE
><p class="para">That leaves us with this approach for selecting the last fish:</P
><pre class="programlisting">$pond = 'One fish two fish red fish blue fish swim here.';
if ($pond =~ m{
                    \b  (  \w+) \s+ fish \b
                (?! .* \b fish \b )
            }six )
{
    print &quot;Last fish is $1.\n&quot;;
} else {
    print &quot;Failed!\n&quot;;
}
<code class="userinput"><b><code class="replaceable"><i>Last fish is blue.</I
></CODE
></B
></CODE
></PRE
><p class="para">This approach has the advantage that it can fit in just one pattern, which makes it suitable for similar situations as shown in <a class="xref" href="ch06_18.htm" title="Expressing AND, OR, and NOT in a Single Pattern">Recipe 6.17</A
>. It has its disadvantages, though. It's obviously much harder to read and understand, although once you learn the formula, it's not too bad. But it also runs more slowly though &nbsp;-  around twice as slowly on the data set tested <code class="literal"></CODE
><a class="indexterm" name="ch06-idx-1000009178-0"></A
>above.<a class="indexterm" name="ch06-idx-1000009179-0"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch06-pgfId-1000009180">See Also</A
></H3
><p class="para">The behavior of <code class="literal">m//g</CODE
> in scalar context is given in the "Regexp Quote-like Operators" section of <i class="filename">perlop</I
> (1), and in the <a class="olink" href="../prog/ch02_04.htm#PERL2-CH-2-SECT-4.1.2">"Pattern Matching Operators"</A
> section of <a class="olink" href="../prog/ch02_01.htm">Chapter 2</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
>; zero-width positive lookahead assertions are shown in the "Regular Expressions" section of <i class="filename">perlre </I
>(1), and in the <a class="olink" href="../prog/ch02_04.htm#PERL2-CH-2-SECT-4.1.2">"rules of regular expression matching"</A
> section of <a class="olink" href="../prog/ch02_01.htm">Chapter 2</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch06_05.htm" title="6.4.  Commenting Regular Expressions"><img src="../gifs/txtpreva.gif" alt="Previous: 6.4.  Commenting Regular Expressions" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch06_07.htm" title="6.6. Matching Multiple Lines"><img src="../gifs/txtnexta.gif" alt="Next: 6.6. Matching Multiple Lines" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">6.4.  Commenting Regular Expressions</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">6.6. Matching Multiple Lines</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
