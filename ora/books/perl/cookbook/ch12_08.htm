<html><head>
<title>Recipe 12.7. Keeping Your Own Module Directory</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:41:35Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch12_01.htm" title="12. Packages, Libraries, and Modules"><link rel="prev" href="ch12_07.htm" title="12.6. Automating Module Clean-Up"><link rel="next" href="ch12_09.htm" title="12.8. Preparing a Module for Distribution"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch12_07.htm" title="12.6. Automating Module Clean-Up"><img src="../gifs/txtpreva.gif" alt="Previous: 12.6. Automating Module Clean-Up" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch12_01.htm" title="12. Packages, Libraries, and Modules">Chapter 12<br>Packages, Libraries, and Modules</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch12_09.htm" title="12.8. Preparing a Module for Distribution"><img src="../gifs/txtnexta.gif" alt="Next: 12.8. Preparing a Module for Distribution" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch12-21229">12.7. Keeping Your Own Module Directory</A
></H2
><div class="sect2"><h3 class="sect2"><a class="title" name="ch12-pgfId-928">Problem<a class="indexterm" name="ch12-idx-1000005234-0"></A
><a class="indexterm" name="ch12-idx-1000005234-1"></A
></A
></H3
><p class="para">You don't want to install your own personal modules in the standard per-system extension library.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch12-pgfId-934">Solution</A
></H3
><p class="para">You have several choices: use Perl's <b class="emphasis.bold">-I</B
><a class="indexterm" name="ch12-idx-1000005235-0"></A
> command line switch; set your <code class="literal">PERL5LIB</CODE
> environment variable; or employ the <code class="literal">use</CODE
> <code class="literal">lib</CODE
> pragma, possibly in conjunction with the FindBin module.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch12-pgfId-940">Discussion</A
></H3
><p class="para">The <code class="literal">@INC</CODE
><a class="indexterm" name="ch12-idx-1000005236-0"></A
> array contains a list of directories that are consulted every time a <code class="literal">do</CODE
>, <code class="literal">require</CODE
>, or <code class="literal">use</CODE
> compiles code from another file, library, or module. You can print these out easily from the command line:</P
><pre class="programlisting">% perl -e 'for (@INC) { printf &quot;%d %s\n&quot;, $i++, $_ }'
<code class="userinput"><b><code class="replaceable"><i>0 /usr/local/perl/lib/i686-linux/5.004</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>1 /usr/local/perl/lib</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>2 /usr/local/perl/lib/site_perl/i686-linux</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>3 /usr/local/perl/lib/site_perl</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>4 .</I
></CODE
></B
></CODE
></PRE
><p class="para">The first two directories, elements 0 and 1 of <code class="literal">@INC</CODE
>, are the standard architecture-dependent and architecture-independent directories, which all standard libraries, modules, and pragmas will go into. You have two of them because some modules contain information or formatting that makes sense only on that particular architecture. For example, the Config module contains information that cannot be shared across several architectures, so it goes in the 0th array element. Modules that include compiled C components, such as <em class="emphasis">Socket.so</EM
>, are also placed there. Most modules, however, go in the platform-independent directory in the 1st element.</P
><p class="para">The next pair, elements 2 and 3 above, fulfills roles analogous to elements 0 and 1, but on a site-specific basis. Suppose you have a module that didn't come with Perl, like a module from CPAN or one you wrote yourself. When you   or (more likely) your system administrator  installs this module, its components go into one of the site-specific directories. You are encouraged to use these for any modules that your entire site should be able to access conveniently.</P
><p class="para">The last standard component, <code class="literal">&quot;.&quot;</CODE
> (your current working directory), is useful only when developing and testing your software, not when deploying it. If your modules are in the same directory that you last <code class="literal">chdir</CODE
>ed to, you're fine. If you're anywhere else, it doesn't work.</P
><p class="para">So sometimes none of the <code class="literal">@INC</CODE
> directories work out. Maybe you have your own personal modules. Perhaps your project group has particular modules that are relevant only to that project. In these cases, you need to augment the standard <code class="literal">@INC</CODE
> search.</P
><p class="para">The first approach involves using a command-line flag, <b class="emphasis.bold">-I</B
><em class="emphasis">dirlist</EM
>. The <em class="emphasis">dirlist</EM
> is a colon-separated[<a class="footnote" href="#ch12-pgfId-1000005036">1</A
>] list of one or more directories, which will be prepended to the front of the <code class="literal">@INC</CODE
> array. This works well for simple command lines, and thus can be used on a per-command basis, such as when you call a quick one-liner from a shell script.</P
><blockquote class="footnote"><div class="footnote"><p class="para"><a class="footnote" name="ch12-pgfId-1000005036">[1]</A
> Comma-separated on MacOS.</P
></DIV
></BLOCKQUOTE
><p class="para">This technique should not be included in the <code class="literal">#!</CODE
> (pound-bang) line. First, it's not much fun to modify each program. More importantly, some older operating systems have bugs related to how long that line can be, typically 32 characters, including the <code class="literal">#!</CODE
> part. That means if you have a very long path, such as <code class="literal">#!/opt/languages/free/extrabits/perl</CODE
>, you may get the mysterious <code class="literal">&quot;Command</CODE
> <code class="literal">not</CODE
> <code class="literal">found&quot;</CODE
> error. Perl does its best to rescan the line manually, but it's still too dicey to rely on. <b class="emphasis.bold"></B
><a class="indexterm" name="ch12-idx-1000005238-0"></A
></P
><p class="para">Often, a better solution is to set the <code class="literal">PERL5LIB</CODE
><a class="indexterm" name="ch12-idx-1000005242-0"></A
> environment variable. This can be done in your shell start-up file. Or, your system administrator may want to do so in a systemwide start-up file so all users can benefit. For example, suppose you have all your own modules in a directory called <em class="emphasis">~/perllib</EM
>. You would place one of the following lines in your shell start-up file, depending on which shell you use:</P
><pre class="programlisting"># syntax for sh, bash, ksh, or zsh
$ export PERL5LIB=$HOME/perllib

# syntax for csh or tcsh
% setenv PERL5LIB ~/perllib</PRE
><p class="para">Probably the most convenient solution from your users' perspective is for you to add a <code class="literal">use</CODE
><a class="indexterm" name="ch12-idx-1000005243-0"></A
> <code class="literal">lib</CODE
> pragma near the top of your script. That way the users of the program don't need to take any special action to run your program. Imagine a hypothetical project called Spectre whose programs rely on its own set of libraries. Those programs could have a statement like this at their start:</P
><pre class="programlisting">use lib &quot;/projects/spectre/lib&quot;;</PRE
><p class="para">What happens when you don't know the exact path to the library? Perhaps you've allowed the whole project to be installed in an arbitrary path. You could create an elaborate installation procedure to dynamically update the script, but even if you did, paths would still be frozen at installation time. If someone moved the files later, the libraries wouldn't be found.</P
><p class="para">The <a class="indexterm" name="ch12-idx-1000005244-0"></A
>FindBin module conveniently solves this problem. This module tries to compute the full path to the executing script's enclosing directory, setting an importable package variable called <code class="literal">$Bin</CODE
> to that directory. Typical usage is either to look for modules in the same directory as the program or in a <em class="emphasis">lib</EM
> directory at the same level.</P
><p class="para">To demonstrate the first case, suppose you have a program called <em class="emphasis">/wherever/spectre/myprog</EM
> that needs to look in <em class="emphasis">/wherever/spectre</EM
> for its modules, but you don't want to hardcode that path.</P
><pre class="programlisting">use FindBin;
use lib $FindBin::Bin;</PRE
><p class="para">The second case would be used if your program lives in <em class="emphasis">/wherever/spectre/bin/myprog</EM
> but needs to look at <em class="emphasis">/wherever/spectre/lib</EM
> for its modules.</P
><pre class="programlisting">use FindBin qw($Bin);
use lib &quot;$Bin/../lib&quot;;<a class="indexterm" name="ch12-idx-1000005331-0"></A
><a class="indexterm" name="ch12-idx-1000005331-1"></A
></PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch12-pgfId-1002">See Also</A
></H3
><p class="para">The documentation for the standard <code class="literal">use</CODE
> <code class="literal">lib</CODE
> pragma and the standard FindBin module; the discussion of the PERL5LIB environment in <i class="filename">perl</I
> (1); your shell's syntax for setting environment variables</P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch12_07.htm" title="12.6. Automating Module Clean-Up"><img src="../gifs/txtpreva.gif" alt="Previous: 12.6. Automating Module Clean-Up" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch12_09.htm" title="12.8. Preparing a Module for Distribution"><img src="../gifs/txtnexta.gif" alt="Next: 12.8. Preparing a Module for Distribution" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">12.6. Automating Module Clean-Up</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">12.8. Preparing a Module for Distribution</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
