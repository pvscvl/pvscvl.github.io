<html><head>
<title>Recipe 12.14. Using h2ph to Translate C #include Files</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:41:57Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch12_01.htm" title="12. Packages, Libraries, and Modules"><link rel="prev" href="ch12_14.htm" title="12.13. Referring to Packages Indirectly"><link rel="next" href="ch12_16.htm" title="12.15. Using h2xs to Make a Module with C Code"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name="srindex.htmlchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch12_14.htm" title="12.13. Referring to Packages Indirectly"><img src="../gifs/txtpreva.gif" alt="Previous: 12.13. Referring to Packages Indirectly" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch12_01.htm" title="12. Packages, Libraries, and Modules">Chapter 12<br>Packages, Libraries, and Modules</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch12_16.htm" title="12.15. Using h2xs to Make a Module with C Code"><img src="../gifs/txtnexta.gif" alt="Next: 12.15. Using h2xs to Make a Module with C Code" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch12-25588">12.14. Using h2ph to Translate C #include Files</A
></H2
><div class="sect2"><h3 class="sect2"><a class="title" name="ch12-pgfId-1344">Problem<a class="indexterm" name="ch12-idx-1000005277-0"></A
><a class="indexterm" name="ch12-idx-1000005277-1"></A
><a class="indexterm" name="ch12-idx-1000005277-2"></A
></A
></H3
><p class="para">Someone gave you code that generates the bizarre error message:</P
><pre class="programlisting"><code class="userinput"><b><code class="replaceable"><i>Can't locate sys/syscall.ph in @INC (did you run h2ph?)</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>(@INC contains: /usr/lib/perl5/i686-linux/5.00404 /usr/lib/perl5</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>/usr/lib/perl5/site_perl/i686-linux /usr/lib/perl5/site_perl .)</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>at some_program line 7.</I
></CODE
></B
></CODE
></PRE
><p class="para">You want to know what it means and how to fix it.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch12-pgfId-1360">Solution</A
></H3
><p class="para">Get your system administrator to do this, running as the superuser:</P
><pre class="programlisting">% cd /usr/include; h2ph sys/syscall.h</PRE
><p class="para">However, most include files require other include files, which means you should probably just translate them all:</P
><pre class="programlisting">% cd /usr/include; h2ph *.h */*.h</PRE
><p class="para">If that reports too many filenames or misses some that are more deeply nested, try this instead:</P
><pre class="programlisting">% cd /usr/include; find . -name '*.h' -print | xargs h2ph</PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch12-pgfId-1376">Discussion</A
></H3
><p class="para">A file whose name ends in <code class="literal">&quot;.ph&quot;</CODE
> has been created by the <em class="emphasis">h2ph</EM
> tool, which translates C preprocessor directives from C <code class="literal">#include</CODE
> files into Perl. The goal is to allow Perl code to access the same constants as C code. The <em class="emphasis">h2xs</EM
> tool is a better approach in most cases because it provides compiled C code for your modules, not Perl code simulating C code. However, using <em class="emphasis">h2xs</EM
> requires a lot more programming savvy (at least, for accessing C code) than <em class="emphasis">h2ph</EM
> does.</P
><p class="para">When <em class="emphasis">h2ph</EM
>'s translation process works, it's wonderful. When it doesn't, you're probably out of luck. As system architectures and include files become more complex, <em class="emphasis">h2ph</EM
> fails more frequently. If you're lucky, the constants you need are already in the Fcntl, Socket, or POSIX modules. The POSIX module implements constants from <em class="emphasis">sys/file.h</EM
>, <em class="emphasis">sys/errno.h</EM
>, and <em class="emphasis">sys/wait.h</EM
>, among others. It also allows fancy tty handling, as described in <a class="xref" href="ch15_09.htm" title="Using POSIX termios">Recipe 15.8</A
>.</P
><p class="para">So what can you do with these .<em class="emphasis">ph</EM
> files? Here are a few examples. The first uses the pessimally non-portable <code class="literal">syscall</CODE
> function to access your operating system's <code class="literal">gettimeofday</CODE
> system call. This implements the FineTime module described in <a class="xref" href="ch12_12.htm" title="Overriding Built-In Functions">Recipe 12.11</A
>.</P
><pre class="programlisting"># file FineTime.pm
package main;
require 'sys/syscall.ph';
die &quot;No SYS_gettimeofday in sys/syscall.ph&quot;
    unless defined &amp;SYS_gettimeofday;

package FineTime;
    use strict;
require Exporter;
use vars qw(@ISA @EXPORT_OK);
@ISA = qw(Exporter);
@EXPORT_OK = qw(time);

sub time() {
    my $tv = pack(&quot;LL&quot;, ());  # presize buffer to two longs
    syscall(&amp;main::SYS_gettimeofday, $tv, undef) &gt;= 0
        or die &quot;gettimeofday: $!&quot;;
    my($seconds, $microseconds) = unpack(&quot;LL&quot;, $tv);
    return $seconds + ($microseconds / 1_000_000);
}

1;</PRE
><p class="para">If you are forced to <code class="literal">require</CODE
> an old-style .<em class="emphasis">pl</EM
> or .<em class="emphasis">ph</EM
> file, do so from the main package (<code class="literal">package</CODE
> <code class="literal">main</CODE
> in the preceding code). These old libraries always put their symbols in the current package, and main serves as a reasonable rendezvous point. To use a symbol, use its fully qualified name, as we did with <code class="literal">main::SYS_gettimeofday</CODE
>.</P
><p class="para">The <em class="emphasis">sys/ioctl.ph</EM
> file, if you can get it to build on your system, is the gateway to your system's idiosyncratic I/O functions through the <a class="indexterm" name="ch12-idx-1000006219-0"></A
><code class="literal">ioctl</CODE
> function. One such function is the TIOCSTI ioctl, shown in <a class="xref" href="#ch12-25531" title="jam">Example 12.1</A
>. That abbreviation stands for "terminal I/O control, simulate terminal input." On systems that implement this function, it will push one character into your device stream so that the next time any process reads from that device, it gets the character you put there.</P
><div class="example"><h4 class="example"><a class="title" name="ch12-25531">Example 12.1: jam</A
></H4
><pre class="programlisting">#!/usr/bin/perl -w
# <a class="indexterm" name="ch12-idx-1000005347-0"></A
>jam - stuff characters down STDIN's throat
require 'sys/ioctl.ph';
die &quot;no TIOCSTI&quot; unless defined &amp;TIOCSTI;
sub jam {
    local $SIG{TTOU} = &quot;IGNORE&quot;; # &quot;Stopped for tty output&quot;
    local *TTY;  # make local filehandle
    open(TTY, &quot;+&lt;/dev/tty&quot;)                 or die &quot;no tty: $!&quot;;
    for (split(//, $_[0])) {
        ioctl(TTY, &amp;TIOCSTI, $_)            or die &quot;bad TIOCSTI: $!&quot;;
    }
    close(TTY);
}
jam(&quot;@ARGV\n&quot;);</PRE
></DIV
><p class="para">Since <em class="emphasis">sys/ioctl.h</EM
> translation is so dodgy, you'll probably have to run this C program to get your TIOCSTI value.</P
><pre class="programlisting">% cat &gt; tio.c &lt;&lt;EOF &amp;&amp; cc tio.c &amp;&amp; a.out
#include &lt;sys/ioctl.h&gt;
main() { printf(&quot;%#08x\n&quot;, TIOCSTI); }
EOF
<code class="userinput"><b><code class="replaceable"><i>0x005412</I
></CODE
></B
></CODE
></PRE
><p class="para">Another popular use for <code class="literal">ioctl</CODE
> is for figuring out your current <a class="indexterm" name="ch12-idx-1000006222-0"></A
>window size in rows and columns, and maybe even in pixels. This is shown in <a class="xref" href="#ch12-29133" title="winsz">Example 12.2</A
>.</P
><div class="example"><h4 class="example"><a class="title" name="ch12-29133">Example 12.2: winsz</A
></H4
><pre class="programlisting">#!/usr/bin/perl
# <a class="indexterm" name="ch12-idx-1000005348-0"></A
>winsz - find x and y for chars and pixels
require 'sys/ioctl.ph';
die &quot;no TIOCGWINSZ &quot; unless defined &amp;TIOCGWINSZ;
open(TTY, &quot;+&lt;/dev/tty&quot;)                     or die &quot;No tty: $!&quot;;
unless (ioctl(TTY, &amp;TIOCGWINSZ, $winsize='')) {
    die sprintf &quot;$0: ioctl TIOCGWINSZ (%08x: $!)\n&quot;, &amp;TIOCGWINSZ;
}
($row, $col, $xpixel, $ypixel) = unpack('S4', $winsize);
print &quot;(row,col) = ($row,$col)&quot;;
print &quot;  (xpixel,ypixel) = ($xpixel,$ypixel)&quot; if $xpixel || $ypixel;
print &quot;\n&quot;;</PRE
></DIV
><p class="para">As you see, as soon as you start playing with .<em class="emphasis">ph</EM
> files, <code class="literal">unpack</CODE
>ing binary data, and calling <code class="literal">syscall</CODE
> and <code class="literal">ioctl</CODE
>, you need to know about the C APIs that Perl normally hides. The only other thing that requires this much C knowledge is using the XS interface. Some suggest you should resist the temptation to descend into such unportable convolutions. Others feel that the demands put upon the trenchworkers are such that they must be forgiven these desperate measures.</P
><p class="para">Fortunately, less fragile mechanisms are increasingly available. CPAN modules for most of these functions now exist, which should theoretically prove more robust than sourcing .<em class="emphasis">ph</EM
> files. <a class="indexterm" name="ch12-idx-1000005279-0"></A
><a class="indexterm" name="ch12-idx-1000005279-1"></A
><a class="indexterm" name="ch12-idx-1000005279-2"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch12-pgfId-1508">See Also</A
></H3
><p class="para"><i class="filename">h2ph</I
> (1); the instructions on running <i class="filename">h2ph</I
> in the <i class="filename">INSTALL</I
> file from the <i class="filename">perl</I
> source distribution; the <a class="olink" href="../prog/ch03_164.htm#PERL2-CMD-SYSCALL"><code class="literal">syscall</CODE
></A
> and <a class="olink" href="../prog/ch03_077.htm#PERL2-CMD-IOCTL"><code class="literal">ioctl</CODE
></A
> functions in <a class="olink" href="../prog/ch03_01.htm">Chapter 3</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
> and in <i class="filename">perlmod </I
>(1); <a class="xref" href="ch12_16.htm" title="Using h2xs to Make a Module with C Code">Recipe 12.15</A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch12_14.htm" title="12.13. Referring to Packages Indirectly"><img src="../gifs/txtpreva.gif" alt="Previous: 12.13. Referring to Packages Indirectly" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch12_16.htm" title="12.15. Using h2xs to Make a Module with C Code"><img src="../gifs/txtnexta.gif" alt="Next: 12.15. Using h2xs to Make a Module with C Code" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">12.13. Referring to Packages Indirectly</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">12.15. Using h2xs to Make a Module with C Code</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
