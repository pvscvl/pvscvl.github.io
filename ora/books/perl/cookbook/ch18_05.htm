<html><head>
<title>Recipe 18.4. Reading and Posting Usenet News Messages</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:45:03Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch18_01.htm" title="18. Internet Services"><link rel="prev" href="ch18_04.htm" title="18.3. Sending Mail"><link rel="next" href="ch18_06.htm" title="18.5. Reading Mail with POP3"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch18_04.htm" title="18.3. Sending Mail"><img src="../gifs/txtpreva.gif" alt="Previous: 18.3. Sending Mail" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch18_01.htm" title="18. Internet Services">Chapter 18<br>Internet Services</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch18_06.htm" title="18.5. Reading Mail with POP3"><img src="../gifs/txtnexta.gif" alt="Next: 18.5. Reading Mail with POP3" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch18-chap18_reading_0">18.4. Reading and Posting Usenet News Messages</A
></H2
><div class="sect2"><h3 class="sect2"><a class="title" name="ch18-pgfId-575">Problem<a class="indexterm" name="ch18-idx-1000004299-0"></A
><a class="indexterm" name="ch18-idx-1000004299-1"></A
><a class="indexterm" name="ch18-idx-1000004299-2"></A
><a class="indexterm" name="ch18-idx-1000004299-3"></A
><a class="indexterm" name="ch18-idx-1000004299-4"></A
><a class="indexterm" name="ch18-idx-1000004299-5"></A
><a class="indexterm" name="ch18-idx-1000004299-6"></A
></A
></H3
><p class="para">You want to connect to a Usenet news server to read and post messages. Your program could send a periodic posting to a newsgroup,[<a class="footnote" href="#ch18-pgfId-1000000812">1</A
>] summarize a newsgroup, or identify first-time contributors in a newsgroup so you can send them a helpful welcome message.</P
><blockquote class="footnote"><div class="footnote"><p class="para"><a class="footnote" name="ch18-pgfId-1000000812">[1]</A
> If so, be sure to check out Ian Kluft's <em class="emphasis">auto-faq</EM
> program at <a class="systemitem.url" href="../../../../../../../www.novia.net/~pschleck/auto-faq/">http://www.novia.net/~pschleck/auto-faq/</A
>.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch18-pgfId-581">Solution</A
></H3
><p class="para">Use the CPAN module Net::NNTP:</P
><pre class="programlisting">use Net::NNTP;

$server = Net::NNTP-&gt;new(&quot;news.host.dom&quot;)
    or die &quot;Can't connect to news server: $@\n&quot;;
($narticles, $first, $last, $name) = $server-&gt;group( &quot;misc.test&quot; )
    or die &quot;Can't select misc.test\n&quot;;
$headers  = $server-&gt;head($first)
    or die &quot;Can't get headers from article $first in $name\n&quot;;
$bodytext = $server-&gt;body($first)
    or die &quot;Can't get body from article $first in $name\n&quot;;
$article  = $server-&gt;article($first)
    or die &quot;Can't get article $first from $name\n&quot;;

$server-&gt;<code class="literal">postok()</CODE
>
    or warn &quot;Server didn't tell me I could post.\n&quot;;

$server-&gt;post( [ @lines ] )
    or die &quot;Can't post: $!\n&quot;;</PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch18-pgfId-623">Discussion</A
></H3
><p class="para">Usenet is a distributed news system. Servers exchange messages to ensure that each server gets all the messages for the newsgroups it carries. Each server sets its own expiration criteria to decide how long messages stay on the server. Client newsreaders connect to their designated server (usually belonging to their company, ISP, or university) and can read existing postings and contribute new ones.</P
><p class="para">Each message (or article, as they're also known) has a set of headers and a body, separated by a blank line. Articles are identified in two ways: the <em class="emphasis">message ID</EM
> header and an <em class="emphasis">article number</EM
> within a newsgroup. An article's message ID is stored in the message itself and is guaranteed to be unique no matter which news server the article was read from. When an article references others, it does so by message ID. A message ID is a string like:</P
><pre class="programlisting">&lt;0401@jpl-devvax.JPL.NASA.GOV&gt;</PRE
><p class="para">An article can also be identified by a newsgroup and an article number within the group. Each news server assigns its own article numbers to the articles it has, so they're only guaranteed to be good for the news server you got them from.</P
><p class="para">The Net::NNTP constructor connects to the specified news server. If the connection couldn't be made, it returns <code class="literal">undef</CODE
> and sets <code class="literal">$@</CODE
> to an error message. If the connection was successfully made, <code class="literal">new</CODE
> returns a new Net::NNTP object:</P
><pre class="programlisting">$server = Net::NNTP-&gt;new(&quot;news.mycompany.com&quot;)
    or die &quot;Couldn't connect to news.mycompany.com: $@\n&quot;;</PRE
><p class="para">Once connected, you can get a list of newsgroups with the <code class="literal">list</CODE
> method. This returns a reference to a hash whose keys are newsgroup names. Each value is a reference to an array consisting of the first valid article number in the group, the last valid article number in the group, and a string of flags. The flags are typically <code class="literal">&quot;y&quot;</CODE
>, meaning you may post, but could be <code class="literal">&quot;m&quot;</CODE
> for moderated or <code class="literal">=NAME</CODE
>, meaning that the group is an alias for the newsgroup <code class="literal">NAME</CODE
>. There are over 17,000 newsgroups that your server might carry, so fetching a list of all the groups can take a while.</P
><pre class="programlisting">$grouplist = $server-&gt;<code class="literal">list()</CODE
>
    or die &quot;Couldn't fetch group list\n&quot;;

foreach $group (keys %$grouplist) {
    if ($grouplist-&gt;{$group}-&gt;[2] eq 'y') {
        # I can post to $group
    }
}</PRE
><p class="para">Much as FTP has the concept of a current directory, the Network News Transfer Protocol (NNTP) has the concept of a current group. Make a group the current group with the <code class="literal">group</CODE
> method:</P
><pre class="programlisting">($narticles, $first, $last, $name) = $server-&gt;group(&quot;comp.lang.perl.misc&quot;)
    or die &quot;Can't select comp.lang.perl.misc\n&quot;;</PRE
><p class="para">The <code class="literal">group</CODE
> method returns a four-element list: the number of articles in the group, the first article number, the last article number, and the name of the group. If the group does not exist, it returns an empty list.</P
><p class="para">There are two ways to retrieve articles: call <code class="literal">article</CODE
> with a message ID, or select a group with <code class="literal">group</CODE
> and then call <code class="literal">article</CODE
> with an article number. In scalar context, it returns a reference to an array of lines. In list context, <code class="literal">article</CODE
> returns a list of lines. If an error occurs, <code class="literal">article</CODE
> returns false:</P
><pre class="programlisting">@lines = $server-&gt;article($message_id)
    or die &quot;Can't fetch article $message_id: $!\n&quot;;</PRE
><p class="para">You can fetch an article's header or body with the <code class="literal">head</CODE
> and <code class="literal">body</CODE
> methods. Like <code class="literal">article</CODE
>, these methods take an article number or message ID, and return a list of lines or an array reference.</P
><pre class="programlisting">@group = $server-&gt;group(&quot;comp.lang.perl.misc&quot;)
    or die &quot;Can't select group comp.lang.perl.misc\n&quot;;
@lines = $server-&gt;head($group[1])
    or die &quot;Can't get headers from first article in comp.lang.perl.misc\n&quot;;</PRE
><p class="para">To post an article, use the <code class="literal">post</CODE
> method. Give it a list of lines or a reference to an array of lines, and it returns true if the post succeeded, false if the article couldn't be posted.</P
><pre class="programlisting">$server-&gt;post(@message)
    or die &quot;Can't post\n&quot;;</PRE
><p class="para">Use the <code class="literal">postok</CODE
> method to find out whether the server said that you may post:</P
><pre class="programlisting">unless ($server-&gt;<code class="literal">postok()</CODE
>) {
    warn &quot;You may not post.\n&quot;;
}</PRE
><p class="para">Read the manpage for Net::NNTP for a complete list of methods.<a class="indexterm" name="ch18-idx-1000004301-0"></A
><a class="indexterm" name="ch18-idx-1000004301-1"></A
><a class="indexterm" name="ch18-idx-1000004301-2"></A
><a class="indexterm" name="ch18-idx-1000004301-3"></A
><a class="indexterm" name="ch18-idx-1000004301-4"></A
><a class="indexterm" name="ch18-idx-1000004301-5"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch18-pgfId-699">See Also</A
></H3
><p class="para">The documentation for the Net::NNTP module from CPAN; RFC 977, <cite class="citetitle">Network News Transfer Protocol </CITE
>; your system's <i class="filename">trn </I
>(1) and <i class="filename">innd</I
> (8) manpages (if you have them)</P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch18_04.htm" title="18.3. Sending Mail"><img src="../gifs/txtpreva.gif" alt="Previous: 18.3. Sending Mail" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch18_06.htm" title="18.5. Reading Mail with POP3"><img src="../gifs/txtnexta.gif" alt="Next: 18.5. Reading Mail with POP3" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">18.3. Sending Mail</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">18.5. Reading Mail with POP3</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
