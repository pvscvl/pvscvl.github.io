<html><head>
<title>Recipe 5.7. Hashes with Multiple Values Per Key</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:32:39Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch05_01.htm" title="5. Hashes"><link rel="prev" href="ch05_07.htm" title="5.6. Retrieving from a Hash in Insertion Order"><link rel="next" href="ch05_09.htm" title="5.8. Inverting a Hash"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch05_07.htm" title="5.6. Retrieving from a Hash in Insertion Order"><img src="../gifs/txtpreva.gif" alt="Previous: 5.6. Retrieving from a Hash in Insertion Order" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch05_01.htm" title="5. Hashes">Chapter 5<br>Hashes</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch05_09.htm" title="5.8. Inverting a Hash"><img src="../gifs/txtnexta.gif" alt="Next: 5.8. Inverting a Hash" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch05-12773">5.7. Hashes with Multiple Values Per Key</A
></H2
><div class="sect2"><h3 class="sect2"><a class="title" name="ch05-pgfId-684">Problem <a class="indexterm" name="ch05-idx-1000006470-0"></A
></A
></H3
><p class="para">You want to store more than one value for each key.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch05-pgfId-690">Solution</A
></H3
><p class="para">Store an array reference in <code class="literal">$hash{$key}</CODE
>, and put the values into that array.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch05-pgfId-696">Discussion</A
></H3
><p class="para">You can only store scalar values in a hash. References, however, are scalars. This solves the problem of storing multiple values for one key by making <code class="literal">$hash{$key}</CODE
> a reference to an array containing values for <code class="literal">$key</CODE
>. The normal hash operations &nbsp;-  insertion, deletion, iteration, and testing for existence &nbsp;-  can now be written in terms of array operations like <code class="literal">push</CODE
>, <code class="literal">splice</CODE
>, and <code class="literal">foreach</CODE
>.</P
><p class="para">This code shows simple insertion into the hash. It processes the output of <i class="filename">who </I
>(1) on Unix machines and outputs a terse listing of users and the ttys they're logged in on:</P
><pre class="programlisting">%ttys = ();

open(WHO, &quot;who|&quot;)                   or die &quot;can't open who: $!&quot;;
while (&lt;WHO&gt;) {
    ($user, $tty) = split;
    push( @{$ttys{$user}}, $tty );
}

foreach $user (sort keys %ttys) {
    print &quot;$user: @{$ttys{$user}}\n&quot;;
}</PRE
><p class="para">The heart of the code is the <code class="literal">push</CODE
> line, the multihash version of <code class="literal">$ttys{$user}</CODE
> <code class="literal">=</CODE
> <code class="literal">$tty</CODE
>. We interpolate all the tty names in the <code class="literal">print</CODE
> line with <code class="literal">@{$ttys{$user}}</CODE
>. We'd loop over the anonymous array if, for instance, we wanted to print the owner of each tty:</P
><pre class="programlisting">foreach $user (sort keys %ttys) {
    print &quot;$user: &quot;, scalar( @{$ttys{$user}} ), &quot; ttys.\n&quot;;
    foreach $tty (sort @{$ttys{$user}}) {
        @stat = stat(&quot;/dev/$tty&quot;);
        $user = @stat ? ( getpwuid($stat[4]) )[0] : &quot;(not available)&quot;;
        print &quot;\t$tty (owned by $user)\n&quot;;
    }
}</PRE
><p class="para"><code class="literal"></CODE
><a class="indexterm" name="ch05-idx-1000006480-0"></A
><a class="indexterm" name="ch05-idx-1000006480-1"></A
>The <code class="literal">exists</CODE
> function can have two meanings: "Is there at least one value for this key?" and "Does this value exist for this key?" Implementing the second approach requires searching the array for the value. The <code class="literal">delete</CODE
> function and the first sense of <code class="literal">exists</CODE
> are interrelated: If we can guarantee that no anonymous array is ever empty, we can use the built-in <code class="literal">exists</CODE
>. We ensure that no anonymous array is ever empty by checking for such a situation after deleting an element:</P
><pre class="programlisting">sub multihash_delete {
    my ($hash, $key, $value) = @_;
    my $i;

    return unless ref( $hash-&gt;{$key} );
    for ($i = 0; $i &lt; @{ $hash-&gt;{$key} }; $i++) {
        if ($hash-&gt;{$key}-&gt;[$i] eq $value) {
            splice( @{$hash-&gt;{$key}}, $i, 1);
            last;
        }
    }

    delete $hash-&gt;{$key} unless @{$hash-&gt;{$key}};
}</PRE
><p class="para">The alternative approach to multivalued hashes is given in <a class="xref" href="ch13_01.htm" title="Classes, Objects, and Ties">Chapter 13, <cite class="chapter">Classes, Objects, and Ties</CITE
></A
>, implemented as tied normal hashes.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch05-pgfId-776">See Also</A
></H3
><p class="para">The <code class="literal">splice</CODE
>, <code class="literal">delete</CODE
>, <code class="literal">push</CODE
>, <code class="literal">foreach</CODE
>, and <code class="literal">exists</CODE
> functions in <em class="emphasis">perlf</EM
><i class="filename">unc</I
> (1) and <a class="olink" href="../prog/ch03_01.htm">Chapter 3</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
>; <a class="xref" href="ch11_02.htm" title="Taking References to Arrays">Recipe 11.1</A
>; we cover ties in <a class="xref" href="ch13_16.htm" title="Creating Magic Variables with tie">Recipe 13.15</A
> <a class="indexterm" name="ch05-idx-1000006472-0"></A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch05_07.htm" title="5.6. Retrieving from a Hash in Insertion Order"><img src="../gifs/txtpreva.gif" alt="Previous: 5.6. Retrieving from a Hash in Insertion Order" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch05_09.htm" title="5.8. Inverting a Hash"><img src="../gifs/txtnexta.gif" alt="Next: 5.8. Inverting a Hash" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">5.6. Retrieving from a Hash in Insertion Order</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">5.8. Inverting a Hash</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
