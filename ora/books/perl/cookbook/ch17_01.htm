<html><head>
<title>[Chapter 17] Sockets</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:44:20Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="index.htm" title="Perl Cookbook"><link rel="prev" href="ch16_23.htm" title="16.22. Program: sigrand"><link rel="next" href="ch17_02.htm" title="17.1. Writing a TCP Client"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch16_23.htm" title="16.22. Program: sigrand"><img src="../gifs/txtpreva.gif" alt="Previous: 16.22. Program: sigrand" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 17</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch17_02.htm" title="17.1. Writing a TCP Client"><img src="../gifs/txtnexta.gif" alt="Next: 17.1. Writing a TCP Client" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="chapter"><h1 class="chapter"><a class="title" name="ch17-14176">17. Sockets</A
></H1
><div class="htmltoc"><p><b>Contents:</B
><br><a class="sect1" href="#ch17-35785" title="17.0. Introduction">Introduction</A
><br><a class="sect1" href="ch17_02.htm" title="17.1. Writing a TCP Client">Writing a TCP Client</A
><br><a class="sect1" href="ch17_03.htm" title="17.2. Writing a TCP Server">Writing a TCP Server</A
><br><a class="sect1" href="ch17_04.htm" title="17.3. Communicating over TCP">Communicating over TCP</A
><br><a class="sect1" href="ch17_05.htm" title="17.4. Setting Up a UDP Client">Setting Up a UDP Client</A
><br><a class="sect1" href="ch17_06.htm" title="17.5. Setting Up a UDP Server">Setting Up a UDP Server</A
><br><a class="sect1" href="ch17_07.htm" title="17.6. Using UNIX Domain Sockets">Using UNIX Domain Sockets</A
><br><a class="sect1" href="ch17_08.htm" title="17.7. Identifying the Other End of a Socket">Identifying the Other End of a Socket</A
><br><a class="sect1" href="ch17_09.htm" title="17.8. Finding Your Own Name and Address">Finding Your Own Name and Address</A
><br><a class="sect1" href="ch17_10.htm" title="17.9. Closing a Socket After Forking">Closing a Socket After Forking</A
><br><a class="sect1" href="ch17_11.htm" title="17.10. Writing Bidirectional Clients">Writing Bidirectional Clients</A
><br><a class="sect1" href="ch17_12.htm" title="17.11. Forking Servers">Forking Servers</A
><br><a class="sect1" href="ch17_13.htm" title="17.12. Pre-Forking Servers">Pre-Forking Servers</A
><br><a class="sect1" href="ch17_14.htm" title="17.13. Non-Forking Servers">Non-Forking Servers</A
><br><a class="sect1" href="ch17_15.htm" title="17.14. Writing a Multi-Homed Server">Writing a Multi-Homed Server</A
><br><a class="sect1" href="ch17_16.htm" title="17.15. Making a Daemon Server">Making a Daemon Server</A
><br><a class="sect1" href="ch17_17.htm" title="17.16. Restarting a Server on Demand">Restarting a Server on Demand</A
><br><a class="sect1" href="ch17_18.htm" title="17.17. Program: backsniff">Program: backsniff</A
><br><a class="sect1" href="ch17_19.htm" title="17.18. Program: fwdport">Program: fwdport</A
></P
><p></P
></DIV
><div class="epigraph" align="right"><p class="para" align="right"><i>Glendower: I can call spirits from the vasty deep.Hotspur:Why so can I, or so can any man,But will they come when you do call for them?</I
></P
><p class="attribution" align="right">-&nbsp;Shakespeare <cite class="citetitle"> King Henry IV Part I, Act III Scene 1</CITE
></P
></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch17-35785">17.0. Introduction</A
></H2
><p class="para"><a class="indexterm" name="ch17-idx-1000004654-0"></A
>Sockets are endpoints for communication. Some types of sockets provide reliable communications. Others offer few guarantees, but consume low system overhead. Socket communication can be used to let processes talk on just one machine or over the Internet.</P
><p class="para">In this chapter we consider the two most commonly used types of sockets: <em class="emphasis">streams</EM
><a class="indexterm" name="ch17-idx-1000004824-0"></A
> and <em class="emphasis">datagrams</EM
><a class="indexterm" name="ch17-idx-1000004656-0"></A
>. Streams provide a bidirectional, sequenced, and reliable channel of communication&nbsp;- similar to pipes. <em class="emphasis">Datagram</EM
> sockets do not guarantee sequenced, reliable delivery, but they do guarantee that message boundaries will be preserved when read. Your system may support other types of sockets as well; consult your <i class="filename">socket </I
>(2) manpage or equivalent documentation for details.</P
><p class="para">We also consider both the Internet and Unix <a class="indexterm" name="ch17-idx-1000004657-0"></A
><a class="indexterm" name="ch17-idx-1000004657-1"></A
><a class="indexterm" name="ch17-idx-1000004657-2"></A
><a class="indexterm" name="ch17-idx-1000004657-3"></A
>domains. The Internet domain gives sockets two-part names: a host (an IP address in a particular format) and a port number. In the Unix domain, sockets are named using files (e.g., <em class="emphasis">/tmp/mysock</EM
>).</P
><p class="para">In addition to domains and types, sockets also have a <em class="emphasis">protocol</EM
><a class="indexterm" name="ch17-idx-1000004658-0"></A
> associated with them. Protocols are not very important to the casual programmer, as there is rarely more than one protocol for a given domain and type of socket.</P
><p class="para">Domains and types are normally identified by numeric constants (available through functions exported by the Socket and IO::Socket modules). Stream sockets have the type <a class="indexterm" name="ch17-idx-1000004659-0"></A
>SOCK_STREAM, and datagram sockets have the type SOCK_DGRAM. The Internet domain is <a class="indexterm" name="ch17-idx-1000004660-0"></A
>PF_INET, and the Unix domain PF_UNIX. (POSIX uses PF_LOCAL instead of PF_UNIX, but PF_UNIX will almost always be an acceptable constant simply because of the preponderance of existing software that uses it.) You should use these symbolic names instead of numbers because the numbers may change (and historically, have).</P
><p class="para">Protocols have names like <code class="literal">tcp</CODE
> and <code class="literal">udp</CODE
>, which correspond to numbers that the operating system uses. The <code class="literal">getprotobyname</CODE
><a class="indexterm" name="ch17-idx-1000004661-0"></A
> function (built into Perl) returns the number when given a protocol name. Pass protocol number <code class="literal">0</CODE
> to socket functions to have the system select an appropriate default.</P
><p class="para">Perl has built-in functions to create and manipulate sockets; these functions largely mimic their C counterparts. While this is good for providing low-level, direct access to every part of the system, most of us prefer something more convenient. That's what the IO::Socket::INET and IO::Socket::UNIX classes are for&nbsp;- they provide a high-level interface to otherwise intricate system calls.</P
><p class="para">Let's look at the built-in functions first. They all return <code class="literal">undef</CODE
> and set <code class="literal">$!</CODE
> if an error occurs. The <code class="literal">socket</CODE
><a class="indexterm" name="ch17-idx-1000004662-0"></A
> function makes a socket, <code class="literal">bind</CODE
><a class="indexterm" name="ch17-idx-1000004664-0"></A
> gives a socket a local name, <code class="literal">connect</CODE
> connects a local socket to a (possibly remote) one, <code class="literal">listen</CODE
><a class="indexterm" name="ch17-idx-1000004663-0"></A
> readies a socket for connections from other sockets, and <code class="literal">accept</CODE
><a class="indexterm" name="ch17-idx-1000004665-0"></A
> receives the connections one by one. You can communicate over a stream socket with <code class="literal">print</CODE
><a class="indexterm" name="ch17-idx-1000004666-0"></A
> and <a class="indexterm" name="ch17-idx-1000004669-0"></A
><a class="indexterm" name="ch17-idx-1000004669-1"></A
>&lt; &gt; as well as with <code class="literal">syswrite</CODE
> and <code class="literal">sysread</CODE
><a class="indexterm" name="ch17-idx-1000004667-0"></A
><a class="indexterm" name="ch17-idx-1000004667-1"></A
>, or over a datagram socket with <code class="literal">send</CODE
> and <code class="literal">recv</CODE
>. (Perl does not currently support <em class="emphasis">sendmsg</EM
>(2).)</P
><p class="para">A typical server calls <code class="literal">socket</CODE
>, <code class="literal">bind</CODE
>, and <code class="literal">listen</CODE
>, then loops in a blocking <code class="literal">accept</CODE
> call that waits for incoming connections (see <a class="xref" href="ch17_03.htm" title="Writing a TCP Server">Recipe 17.2</A
> and <a class="xref" href="ch17_06.htm" title="Setting Up a UDP Server">Recipe 17.5</A
>). A typical client calls <code class="literal">socket</CODE
> and <code class="literal">connect</CODE
> (see <a class="xref" href="ch17_02.htm" title="Writing a TCP Client">Recipe 17.1</A
> and <a class="xref" href="ch17_05.htm" title="Setting Up a UDP Client">Recipe 17.4</A
>). Datagram clients are special. They don't have to <code class="literal">connect</CODE
> to send data because they can specify the destination as an argument to <code class="literal">send</CODE
>.</P
><p class="para">When you <code class="literal">bind</CODE
> , <code class="literal">connect</CODE
>, or <code class="literal">send</CODE
> to a specific destination, you must supply a socket name. An Internet domain socket name is a host (an IP address packed with <code class="literal">inet_aton</CODE
>) and a port (a number), packed into a C-style structure with <code class="literal">sockaddr_in</CODE
>:</P
><pre class="programlisting">use Socket;

$packed_ip   = inet_aton(&quot;208.146.240.1&quot;);
$socket_name = sockaddr_in($port, $packed_ip);</PRE
><p class="para">A Unix domain socket name is a filename packed into a C structure with <code class="literal">sockaddr_un</CODE
>:</P
><pre class="programlisting">use Socket;

$socket_name = sockaddr_un(&quot;/tmp/mysock&quot;);</PRE
><p class="para">To take a packed socket name and turn it back into a filename or host and port, call <code class="literal">sockaddr_un</CODE
><a class="indexterm" name="ch17-idx-1000004677-0"></A
><a class="indexterm" name="ch17-idx-1000004677-1"></A
> or <code class="literal">sockaddr_in</CODE
> in list context:</P
><pre class="programlisting">($port, $packed_ip) = sockaddr_in($socket_name);    # for PF_INET sockets
($filename)         = sockaddr_un($socket_name);    # for PF_UNIX sockets</PRE
><p class="para">Use <code class="literal">inet_ntoa</CODE
><a class="indexterm" name="ch17-idx-1000004678-0"></A
> to turn a packed <a class="indexterm" name="ch17-idx-1000004906-0"></A
>IP address back into an ASCII string. It stands for "numbers to ASCII" and <code class="literal">inet_aton</CODE
> stands for "ASCII to numbers."</P
><pre class="programlisting">$ip_address = inet_ntoa($packed_ip);
$packed_ip  = inet_aton(&quot;204.148.40.9&quot;);
$packed_ip  = inet_aton(&quot;www.oreilly.com&quot;);</PRE
><p class="para">Most recipes use Internet domain sockets in their examples, but nearly everything that applies to the Internet domain also applies to the Unix domain. <a class="xref" href="ch17_07.htm" title="Using UNIX Domain Sockets">Recipe 17.6</A
> explains the differences and pitfalls.</P
><p class="para">Sockets are the basis of network services. We provide three ways to write servers: one where a child process is created for each incoming connection (<a class="xref" href="ch17_12.htm" title="Forking Servers">Recipe 17.11</A
>), one where the server forks in advance (<a class="xref" href="ch17_13.htm" title="Pre-Forking Servers">Recipe 17.12</A
>), and one where the server process doesn't fork at all (<a class="xref" href="ch17_14.htm" title="Non-Forking Servers">Recipe 17.13</A
>).</P
><p class="para">Some servers need to listen to many IP addresses at once, which we demonstrate in <a class="xref" href="ch17_15.htm" title="Writing a Multi-Homed Server">Recipe 17.14</A
>. Well-behaved servers clean up and restart when they get a HUP signal; <a class="xref" href="ch17_17.htm" title="Restarting a Server on Demand">Recipe 17.16</A
> shows how to implement that behavior in Perl. We also show how to put a name to both ends of a connection; see <a class="xref" href="ch17_08.htm" title="Identifying the Other End of a Socket">Recipe 17.7</A
> and <a class="xref" href="ch17_09.htm" title="Finding Your Own Name and Address">Recipe 17.8</A
>.</P
><p class="para"><em class="emphasis">Unix Network Programming</EM
> and the three-volume <em class="emphasis">TCP/IP Illustrated</EM
> by W. Richard Stevens are indispensable for the serious socket programmer. If you want to learn the basics about sockets, it's hard to beat the original and classic reference, <cite class="citetitle">An Advanced 4.4BSD Interprocess Communication Tutorial.</CITE
> It's written for C, but almost everything is directly applicable to Perl. It's available in <em class="emphasis">/usr/share/doc</EM
> on most BSD-derived Unix systems. We also recommend you look at <cite class="citetitle">The Unix Programming Frequently Asked Questions List</CITE
> (Gierth and Horgan), and <cite class="citetitle">Programming UNIX Sockets in C&nbsp;- Frequently Asked Questions </CITE
>(Metcalf and Gierth), both of which are posted periodically to the <a class="systemitem.newsgroup" href="../../../WebStripper/protected.html#link=news:comp.unix.answers">comp.unix.answers</A
> newsgroup.</P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch16_23.htm" title="16.22. Program: sigrand"><img src="../gifs/txtpreva.gif" alt="Previous: 16.22. Program: sigrand" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch17_02.htm" title="17.1. Writing a TCP Client"><img src="../gifs/txtnexta.gif" alt="Next: 17.1. Writing a TCP Client" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">16.22. Program: sigrand</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">17.1. Writing a TCP Client</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
