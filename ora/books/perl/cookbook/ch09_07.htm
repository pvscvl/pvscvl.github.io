<html><head>
<title>Recipe 9.6. Globbing, or Getting a List of Filenames Matching a Pattern</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:39:13Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch09_01.htm" title="9. Directories"><link rel="prev" href="ch09_06.htm" title="9.5. Processing All Files in a Directory"><link rel="next" href="ch09_08.htm" title="9.7. Processing All Files in a Directory Recursively"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map nameindex.html="srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch09_06.htm" title="9.5. Processing All Files in a Directory"><img src="../gifs/txtpreva.gif" alt="Previous: 9.5. Processing All Files in a Directory" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch09_01.htm" title="9. Directories">Chapter 9<br>Directories</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch09_08.htm" title="9.7. Processing All Files in a Directory Recursively"><img src="../gifs/txtnexta.gif" alt="Next: 9.7. Processing All Files in a Directory Recursively" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch09-27581">9.6. Globbing, or Getting a List of Filenames Matching a Pattern</A
></H2
><div class="sect2"><h3 class="sect2"><a class="title" name="ch09-pgfId-634">Problem<a class="indexterm" name="ch09-idx-1000004390-0"></A
><a class="indexterm" name="ch09-idx-1000004390-1"></A
><a class="indexterm" name="ch09-idx-1000004390-2"></A
></A
></H3
><p class="para">You want to get a list of filenames similar to MS-DOS's <code class="literal">*.*</CODE
> and Unix's <code class="literal">*.h</CODE
> (this is called <em class="emphasis">globbing</EM
>).</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch09-pgfId-640">Solution</A
></H3
><p class="para">Perl provides globbing with the semantics of the Unix C shell through the <code class="literal">glob</CODE
><a class="indexterm" name="ch09-idx-1000004391-0"></A
><a class="indexterm" name="ch09-idx-1000004391-1"></A
> keyword and &lt; &gt;:</P
><pre class="programlisting">@list = &lt;*.c&gt;;
@list = glob(&quot;*.c&quot;);</PRE
><p class="para">You can also use <code class="literal">readdir</CODE
> to extract the filenames manually:</P
><pre class="programlisting">opendir(DIR, $path);
@files = grep { /\.c$/ } readdir(DIR);
closedir(DIR);</PRE
><p class="para">The CPAN module File::KGlob does globbing without length limits:</P
><pre class="programlisting">use File::KGlob;

@files = glob(&quot;*.c&quot;);</PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch09-pgfId-666">Discussion</A
></H3
><p class="para">Perl's built-in <code class="literal">glob</CODE
> and &lt;WILDCARD&gt; notation (not to be confused with &lt;FILEHANDLE&gt;) currently use an external program to get the list of filenames on most platforms. This program is <em class="emphasis">csh</EM
> on Unix,[<a class="footnote" href="#ch09-pgfId-1000000674">2</A
>] and a program called <em class="emphasis">dosglob.exe</EM
> on Windows. On VMS and the Macintosh, file globs are done internally without an external program. Globs are supposed to give C shell semantics on non-Unix systems to encourage portability. The use of the shell on Unix also makes this inappropriate for setuid scripts.</P
><blockquote class="footnote"><div class="footnote"><p class="para"><a class="footnote" name="ch09-pgfId-1000000674">[2]</A
> Usually. If <em class="emphasis">tcsh</EM
> is installed, Perl uses that because it's safer. If neither is installed, <em class="emphasis">/bin/sh</EM
> is used.</P
></DIV
></BLOCKQUOTE
><p class="para">To get around this, you can either roll your own selection mechanism using the built-in <code class="literal">opendir</CODE
><a class="indexterm" name="ch09-idx-1000004403-0"></A
> or CPAN's <a class="indexterm" name="ch09-idx-1000004402-0"></A
>File::KGlob, neither of which uses external programs. File::KGlob provides Unix shell-like globbing semantics, whereas <code class="literal">opendir</CODE
> lets you select files with Perl's regular expressions.</P
><p class="para">At its simplest, an <code class="literal">opendir</CODE
> solution uses <code class="literal">grep</CODE
> to filter the list returned by <code class="literal">readdir</CODE
>:</P
><pre class="programlisting">@files = grep { /\.[ch]$/i } readdir(DH);</PRE
><p class="para">You could also do this with the DirHandle module:</P
><pre class="programlisting">use DirHandle;

$dh = DirHandle-&gt;new($path)   or die &quot;Can't open $path : $!\n&quot;;
@files = grep { /\.[ch]$/i } $dh-&gt;read();</PRE
><p class="para">As always, the filenames returned don't include the directory. When you use the filename, you'll need to prepend the directory name:</P
><pre class="programlisting">opendir(DH, $dir)        or die &quot;Couldn't open $dir for reading: $!&quot;;

@files = ();
while( defined ($file = readdir(DH)) ) {
    next unless /\.[ch]$/i;

    my $filename = &quot;$dir/$file&quot;;
    push(@files, $filename) if -T $file;
}</PRE
><p class="para">The following example combines directory reading and filtering with the Schwartzian Transform from <a class="xref" href="ch04_01.htm" title="Arrays">Chapter 4, <cite class="chapter">Arrays</CITE
></A
>, for efficiency. It sets <code class="literal">@dirs</CODE
> to a sorted list of the subdirectories in a directory whose names are all numeric:</P
><pre class="programlisting">@dirs = map  { $_-&gt;[1] }                # extract pathnames
        sort { $a-&gt;[0] &lt;=&gt; $b-&gt;[0] }    # sort names numeric
        grep { -d $_-&gt;[1] }             # path is a dir
        map  { [ $_, &quot;$path/$_&quot; ] }     # form (name, path)
        grep { /^\d+$/ }                # just numerics
        readdir(DIR);                   # all files</PRE
><p class="para"><a class="xref" href="ch04_16.htm" title="Sorting a List by Computable Field">Recipe 4.15</A
> explains how to read these strange-looking constructs. As always, formatting and documenting your code can make it much easier to read and <code class="literal"></CODE
><a class="indexterm" name="ch09-idx-1000004398-0"></A
><a class="indexterm" name="ch09-idx-1000004398-1"></A
>understand.<a class="indexterm" name="ch09-idx-1000004393-0"></A
><a class="indexterm" name="ch09-idx-1000004393-1"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch09-pgfId-724">See Also</A
></H3
><p class="para">The <code class="literal">opendir</CODE
>, <code class="literal">readdir</CODE
>, <code class="literal">closedir</CODE
>, <code class="literal">grep</CODE
>, <code class="literal">map</CODE
>, and <code class="literal">sort</CODE
> functions in <i class="filename">perlfunc</I
> (1) and in <a class="olink" href="../prog/ch03_01.htm">Chapter 3</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
>; documentation for the standard DirHandle module (also in <a class="olink" href="../prog/ch07_01.htm">Chapter 7</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
>); the "I/O Operators" section of <i class="filename">perlop </I
>(1), and the <a class="olink" href="../prog/ch02_03.htm#PERL2-CH-2-SECT-3.1">"Filename Globbing Operator"</A
> section of <a class="olink" href="../prog/ch02_01.htm">Chapter 2</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
>; we talk more about globbing in <a class="xref" href="ch06_10.htm" title="Matching Shell Globs as Regular Expressions">Recipe 6.9</A
>; <a class="xref" href="ch09_08.htm" title="Processing All Files in a Directory Recursively">Recipe 9.7</A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch09_06.htm" title="9.5. Processing All Files in a Directory"><img src="../gifs/txtpreva.gif" alt="Previous: 9.5. Processing All Files in a Directory" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch09_08.htm" title="9.7. Processing All Files in a Directory Recursively"><img src="../gifs/txtnexta.gif" alt="Next: 9.7. Processing All Files in a Directory Recursively" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">9.5. Processing All Files in a Directory</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">9.7. Processing All Files in a Directory Recursively</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
