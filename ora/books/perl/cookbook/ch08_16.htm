<html><head>
<title>Recipe 8.15. Reading Fixed-Length Records</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:38:51Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch08_01.htm" title="8. File Contents"><link rel="prev" href="ch08_15.htm" title="8.14. Reading a String from a Binary File"><link rel="next" href="ch08_17.htm" title="8.16. Reading Configuration Files"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch08_15.htm" title="8.14. Reading a String from a Binary File"><img src="../gifs/txtpreva.gif" alt="Previous: 8.14. Reading a String from a Binary File" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch08_01.htm" title="8. File Contents">Chapter 8<br>File Contents</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch08_17.htm" title="8.16. Reading Configuration Files"><img src="../gifs/txtnexta.gif" alt="Next: 8.16. Reading Configuration Files" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch08-chap08_reading_4">8.15. Reading Fixed-Length Records</A
></H2
><div class="sect2"><h3 class="sect2"><a class="title" name="ch08-pgfId-1358">Problem<a class="indexterm" name="ch08-idx-1000004699-0"></A
><a class="indexterm" name="ch08-idx-1000004699-1"></A
><a class="indexterm" name="ch08-idx-1000004699-2"></A
><a class="indexterm" name="ch08-idx-1000004699-3"></A
><a class="indexterm" name="ch08-idx-1000004699-4"></A
></A
></H3
><p class="para">You want to read a file whose records have a fixed length.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch08-pgfId-1364">Solution</A
></H3
><p class="para">Use <code class="literal">read</CODE
> and <code class="literal">unpack</CODE
>:</P
><pre class="programlisting"># $RECORDSIZE is the length of a record, in bytes.
# $TEMPLATE is the unpack template for the record
# FILE is the file to read from
# @FIELDS is an array, one element per field

until ( eof(FILE) ) {
    read(FILE, $record, $RECORDSIZE) == $RECORDSIZE
        or die &quot;short read\n&quot;;
    @FIELDS = unpack($TEMPLATE, $record);
}</PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch08-pgfId-1390">Discussion</A
></H3
><p class="para">Because the file in question is not a text file, you can't use <code class="literal">&lt;FH&gt;</CODE
> or IO:: modules' <code class="literal">getline</CODE
> method to read in records. Instead, you must simply <code class="literal">read</CODE
> a particular number of bytes into a buffer. This buffer then contains one record's data, which you decode using <code class="literal">unpack</CODE
> with the right format.</P
><p class="para">For binary data, the catch is often determining the right format. If you're reading data written by a C program, this can mean peeking at C include files or manpages describing the structure layout, and this requires knowledge of C. It also requires that you become unnaturally chummy with your C compiler, because otherwise it's hard to predict field padding and alignment (such as the <code class="literal">x2</CODE
> in the format used in <a class="xref" href="ch08_19.htm" title="Program: tailwtmp">Recipe 8.18</A
>). If you're lucky enough to be on a Berkeley Unix system or a system supporting <em class="emphasis">gcc</EM
>, then you may be able to use the <em class="emphasis">c2ph</EM
> tool distributed with Perl to cajole your C compiler into helping you with this.</P
><p class="para">The <em class="emphasis">tailwtmp</EM
> program at the end of this chapter uses the format described in <em class="emphasis">utmp </EM
>(5) under Linux and works on its <em class="emphasis">/var/log/wtmp</EM
> and <em class="emphasis">/var/run/utmp</EM
> files. Once you commit to working in a binary format, machine dependencies creep in fast. It probably won't work unaltered on your system, but the procedure is still illustrative. Here is the relevant layout from the C include file on Linux:</P
><pre class="programlisting">#define UT_LINESIZE           12
#define UT_NAMESIZE           8
#define UT_HOSTSIZE           16

struct utmp {                       /* here are the pack template codes */
    short ut_type;                  /* s for short, must be padded      */
    pid_t ut_pid;                   /* i for integer                    */
    char ut_line[UT_LINESIZE];      /* A12 for 12-char string           */
    char ut_id[2];                  /* A2, but need x2 for alignment    */
    time_t ut_time;                 /* l for long                       */
    char ut_user[UT_NAMESIZE];      /* A8 for 8-char string             */
    char ut_host[UT_HOSTSIZE];      /* A16 for 16-char string           */
    long ut_addr;                   /* l for long                       */
};</PRE
><p class="para">Once you figure out the binary layout, feed that (in this case, <code class="literal">&quot;s</CODE
> <code class="literal">x2</CODE
> <code class="literal">i</CODE
> <code class="literal">A12</CODE
> <code class="literal">A2</CODE
> <code class="literal">x2</CODE
> <code class="literal">l</CODE
> <code class="literal">A8</CODE
> <code class="literal">A16</CODE
> <code class="literal">l&quot;</CODE
>) to <code class="literal">pack</CODE
> with an empty field list to determine the record's size. Remember to check the return value of <code class="literal">read</CODE
> when you read in your record to make sure you got back the number of bytes you asked for.</P
><p class="para">If your records are text strings, use the <code class="literal">&quot;a&quot;</CODE
> or <code class="literal">&quot;A&quot;</CODE
> unpack templates.</P
><p class="para">Fixed-length records are useful in that the <em class="emphasis">n</EM
> th record begins at byte offset <code class="literal">SIZE</CODE
> <code class="literal">*</CODE
> <code class="literal">(</CODE
><em class="emphasis">n</EM
><code class="literal">-1)</CODE
> in the file, where <code class="literal">SIZE</CODE
> is the size of a single record. See the indexing code in <a class="xref" href="ch08_09.htm" title="Reading a Particular Line in a File">Recipe 8.8</A
> for an example of this.<a class="indexterm" name="ch08-idx-1000004702-0"></A
><a class="indexterm" name="ch08-idx-1000004702-1"></A
><a class="indexterm" name="ch08-idx-1000004702-2"></A
><a class="indexterm" name="ch08-idx-1000004702-3"></A
><a class="indexterm" name="ch08-idx-1000004702-4"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch08-pgfId-1000004569">See Also</A
></H3
><p class="para">The <code class="literal">unpack</CODE
>, <code class="literal">pack</CODE
>, and <code class="literal">read</CODE
> functions in <i class="filename">perlfunc </I
>(1) and in <a class="olink" href="../prog/ch03_01.htm">Chapter 3</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
>; <a class="xref" href="ch01_02.htm" title="Accessing Substrings">Recipe 1.1</A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch08_15.htm" title="8.14. Reading a String from a Binary File"><img src="../gifs/txtpreva.gif" alt="Previous: 8.14. Reading a String from a Binary File" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch08_17.htm" title="8.16. Reading Configuration Files"><img src="../gifs/txtnexta.gif" alt="Next: 8.16. Reading Configuration Files" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">8.14. Reading a String from a Binary File</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">8.16. Reading Configuration Files</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
