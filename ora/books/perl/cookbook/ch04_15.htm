<html><head>
<title>Recipe 4.14. Sorting an Array Numerically</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:32:03Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch04_01.htm" title="4. Arrays"><link rel="prev" href="ch04_14.htm" title="4.13. Finding All Elements in an Array Matching Certain Criteria"><link rel="next" href="ch04_16.htm" title="4.15. Sorting a List by Computable Field"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch04_14.htm" title="4.13. Finding All Elements in an Array Matching Certain Criteria"><img src="../gifs/txtpreva.gif" alt="Previous: 4.13. Finding All Elements in an Array Matching Certain Criteria" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch04_01.htm" title="4. Arrays">Chapter 4<br>Arrays</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch04_16.htm" title="4.15. Sorting a List by Computable Field"><img src="../gifs/txtnexta.gif" alt="Next: 4.15. Sorting a List by Computable Field" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch04-36797">4.14. Sorting an Array Numerically</A
></H2
><div class="sect2"><h3 class="sect2"><a class="title" name="ch04-pgfId-1197">Problem <a class="indexterm" name="ch04-idx-1000006739-0"></A
><a class="indexterm" name="ch04-idx-1000006739-1"></A
></A
></H3
><p class="para">You want to sort a list of numbers, but Perl's <code class="literal">sort</CODE
> (by default) sorts alphabetically in ASCII order.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch04-pgfId-1205">Solution</A
></H3
><p class="para">Use Perl's <a class="indexterm" name="ch04-idx-1000006745-0"></A
><a class="indexterm" name="ch04-idx-1000006745-1"></A
><a class="indexterm" name="ch04-idx-1000006745-2"></A
><code class="literal">sort</CODE
> function and the &lt;=&gt; numerical comparison operator:</P
><pre class="programlisting">@sorted = sort { $a &lt;=&gt; $b } @unsorted;</PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch04-pgfId-1215">Discussion</A
></H3
><p class="para">The <code class="literal">sort</CODE
> function takes an optional code block, which lets you replace the default alphabetic comparison subroutine with your own. This comparison function is called each time <code class="literal">sort</CODE
> has to compare two values. The values to compare are loaded into the special package variables <code class="literal">$a</CODE
> and <code class="literal">$b</CODE
>, which are automatically <code class="literal">local</CODE
>ized.</P
><p class="para">The comparison function should return a negative number if <code class="literal">$a</CODE
> ought to appear before <code class="literal">$b</CODE
> in the output list, <code class="literal">0</CODE
> if they're the same and their order doesn't matter, or a positive number if <code class="literal">$a</CODE
> ought to appear after <code class="literal">$b</CODE
>. Perl has two operators that behave this way: &lt;=&gt; for sorting numbers in ascending numeric order, and <code class="literal">cmp</CODE
><a class="indexterm" name="ch04-idx-1000006753-0"></A
> for sorting strings in ascending alphabetic order. By default, <code class="literal">sort</CODE
> uses <code class="literal">cmp</CODE
>-style comparisons.</P
><p class="para">Here's code that sorts the list of PIDs in <code class="literal">@pids</CODE
>, lets the user select one, then sends it a TERM signal followed by a KILL signal. We use a code block that compares <code class="literal">$a</CODE
> to <code class="literal">$b</CODE
> with &lt;=&gt; to sort numerically:</P
><pre class="programlisting"># @pids is an unsorted array of process IDs
foreach my $pid (sort { $a &lt;=&gt; $b } @pids) {
    print &quot;$pid\n&quot;;
}
print &quot;Select a process ID to kill:\n&quot;;
chomp ($pid = &lt;&gt;);
die &quot;Exiting ... \n&quot; unless $pid &amp;&amp; $pid =~ /^\d+$/;
kill('TERM',$pid);
sleep 2;
kill('KILL',$pid);</PRE
><p class="para">If you use <code class="literal">$a</CODE
> <code class="literal">&lt;=&gt;</CODE
> <code class="literal">$b</CODE
> or <code class="literal">$a</CODE
> <code class="literal">cmp</CODE
> <code class="literal">$b</CODE
>, the list will be sorted in ascending order. For a descending sort, all we have to do is swap <code class="literal">$a</CODE
> and <code class="literal">$b</CODE
> in the sort subroutine:</P
><pre class="programlisting">@descending = sort { $b &lt;=&gt; $a } @unsorted;</PRE
><p class="para">Comparison routines must be consistent; that is, they should always return the same answer when called with the same values. Inconsistent comparison routines lead to infinite loops or core dumps, especially in older releases of Perl.</P
><p class="para">You can also say <code class="literal">sort</CODE
> <code class="literal">SUBNAME</CODE
> <code class="literal">LIST</CODE
> where <code class="literal">SUBNAME</CODE
> is the name of a comparison subroutine returning <code class="literal">-1</CODE
>, <code class="literal">0</CODE
>, or <code class="literal">+1</CODE
>. In the interests of speed, the normal calling conventions are bypassed, and the values to be compared magically appear for the duration of the subroutine in the global package variables <code class="literal">$a</CODE
> and <code class="literal">$b</CODE
>. Because of the odd way Perl calls this subroutine, it may not be recursive.</P
><p class="para">A word of warning: <code class="literal">$a</CODE
> and <code class="literal">$b</CODE
> are set in the package active in the call to <code class="literal">sort</CODE
>, which may not be the same as the one that the <code class="literal">SUBNAME</CODE
> function passed to <code class="literal">sort</CODE
> was compiled in! For example:</P
><pre class="programlisting">package Sort_Subs;
sub revnum { $b &lt;=&gt; $a }

package Other_Pack;
@all = sort Sort_Subs::revnum 4, 19, 8, 3;</PRE
><p class="para">This will silently fail (unless you have <b class="emphasis.bold">-w</B
> in effect, in which case it will vocally fail), because the <code class="literal">sort</CODE
> call sets the package variables <code class="literal">$a</CODE
> and <code class="literal">$b</CODE
> in its own package, Other_Pack, but the <code class="literal">revnum</CODE
> function uses its own package's versions. This is another reason why in-lining sort functions is easier, as in:</P
><pre class="programlisting">@all = sort { $b &lt;=&gt; $a } 4, 19, 8, 3;</PRE
><p class="para">For more on packages, see <a class="xref" href="ch10_01.htm" title="Subroutines">Chapter 10, <cite class="chapter">Subroutines</CITE
></A
>.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch04-pgfId-1287">See Also</A
></H3
><p class="para">The <code class="literal">cmp</CODE
> and &lt;=&gt; operators in <em class="emphasis">perlop </EM
>(1) and <a class="olink" href="../prog/ch02_01.htm">Chapter 2</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
>; the <code class="literal">kill</CODE
>, <code class="literal">sort</CODE
>, and <code class="literal">sleep</CODE
> functions in <i class="filename">perlfunc </I
>(1) and <a class="olink" href="../prog/ch03_01.htm">Chapter 3</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
><a class="indexterm" name="ch04-idx-1000007479-0"></A
><a class="indexterm" name="ch04-idx-1000007479-1"></A
><a class="indexterm" name="ch04-idx-1000007479-2"></A
>; <a class="xref" href="ch04_16.htm" title="Sorting a List by Computable Field">Recipe 4.15</A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch04_14.htm" title="4.13. Finding All Elements in an Array Matching Certain Criteria"><img src="../gifs/txtpreva.gif" alt="Previous: 4.13. Finding All Elements in an Array Matching Certain Criteria" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch04_16.htm" title="4.15. Sorting a List by Computable Field"><img src="../gifs/txtnexta.gif" alt="Next: 4.15. Sorting a List by Computable Field" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">4.13. Finding All Elements in an Array Matching Certain Criteria</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">4.15. Sorting a List by Computable Field</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
