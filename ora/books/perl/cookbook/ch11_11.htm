<html><head>
<title>Recipe 11.10. Reading and Writing Hash Records to Text Files</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:40:49Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch11_01.htm" title="11. References and Records"><link rel="prev" href="ch11_10.htm" title="11.9. Constructing Records"><link rel="next" href="ch11_12.htm" title="11.11. Printing Data Structures"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch11_10.htm" title="11.9. Constructing Records"><img src="../gifs/txtpreva.gif" alt="Previous: 11.9. Constructing Records" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch11_01.htm" title="11. References and Records">Chapter 11<br>References and Records</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch11_12.htm" title="11.11. Printing Data Structures"><img src="../gifs/txtnexta.gif" alt="Next: 11.11. Printing Data Structures" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch11-chap11_reading_0">11.10. Reading and Writing Hash Records to Text Files</A
></H2
><div class="sect2"><h3 class="sect2"><a class="title" name="ch11-pgfId-1090">Problem<a class="indexterm" name="ch11-idx-1000004849-0"></A
><a class="indexterm" name="ch11-idx-1000004849-1"></A
><a class="indexterm" name="ch11-idx-1000004849-2"></A
></A
></H3
><p class="para">You want to read or write hash records to text files.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch11-pgfId-1096">Solution</A
></H3
><p class="para">Use a simple file format with one field per line:</P
><pre class="programlisting">FieldName: Value</PRE
><p class="para">and separate records with blank lines.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch11-pgfId-1106">Discussion</A
></H3
><p class="para">If you have an array of records that you'd like to store and retrieve from a text file, you can use a simple format based on mail headers. The format's simplicity requires that the keys have neither colons nor newlines, and the values not have newlines.</P
><p class="para">This code writes them out:</P
><pre class="programlisting">foreach $record (@Array_of_Records) { 
    for $key (sort keys %$record) {
        print &quot;$key: $record-&gt;{$key}\n&quot;;
    } 
    print &quot;\n&quot;;
}</PRE
><p class="para">Reading them in is easy, too.</P
><pre class="programlisting">$/ = &quot;&quot;;                # paragraph read mode
while (&lt;&gt;) {
    my @fields = split /^([^:]+):\s*/m;
    shift @fields;      # for leading null field
    push(@Array_of_Records, { map /(.*)/, @fields });
} </PRE
><p class="para">The <code class="literal">split</CODE
> acts upon <code class="literal">$_ </CODE
>, its default second argument, which contains a full paragraph. The pattern looks for start of line (not just start of record, thanks to the <code class="literal">/m</CODE
>) followed by one or more non-colons, followed by a colon and optional white space. When <code class="literal">split</CODE
>'s pattern contains parentheses, these are returned along with the values. The return values placed in <code class="literal">@fields</CODE
> are in key-value order, with a leading null field we shift off. The braces in the call to <code class="literal">push</CODE
> produces a reference to a new anonymous hash, which we copy <code class="literal">@fields</CODE
> into. Since that array was stored in order of the needed key-value pairing, this makes for well-ordered hash contents.</P
><p class="para">All you're doing is reading and writing a plain text file, so you can use related recipes for additional components. You could use <a class="xref" href="ch07_12.htm" title="Locking a File">Recipe 7.11</A
> to ensure that you have clean, concurrent access; <a class="xref" href="ch01_14.htm" title="Escaping Characters">Recipe 1.13</A
> to store colons and newlines in keys and values; and <a class="xref" href="ch11_04.htm" title="Taking References to Hashes">Recipe 11.3</A
> store more complex structures.</P
><p class="para">If you are willing to sacrifice the elegance of a plain textfile for a quick, random-access database of records, use a DBM file, as described in <a class="xref" href="ch11_15.htm" title="Transparently Persistent Data Structures">Recipe 11.14</A
>.<a class="indexterm" name="ch11-idx-1000004851-0"></A
><a class="indexterm" name="ch11-idx-1000004851-1"></A
><a class="indexterm" name="ch11-idx-1000004851-2"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch11-pgfId-1146">See Also</A
></H3
><p class="para"><code class="literal">The</CODE
> <code class="literal">split</CODE
> function in <i class="filename">perlfunc </I
>(1) and <a class="olink" href="../prog/ch03_01.htm">Chapter 3</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
>; <a class="xref" href="ch11_10.htm" title="Constructing Records">Recipe 11.9</A
>; <a class="xref" href="ch11_14.htm" title="Storing Data Structures to Disk">Recipe 11.13</A
>; <a class="xref" href="ch11_15.htm" title="Transparently Persistent Data Structures">Recipe 11.14</A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch11_10.htm" title="11.9. Constructing Records"><img src="../gifs/txtpreva.gif" alt="Previous: 11.9. Constructing Records" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch11_12.htm" title="11.11. Printing Data Structures"><img src="../gifs/txtnexta.gif" alt="Next: 11.11. Printing Data Structures" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">11.9. Constructing Records</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">11.11. Printing Data Structures</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
