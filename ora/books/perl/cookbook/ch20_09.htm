<html><head>
<title>Recipe 20.8. Finding Fresh Links</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:45:59Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch20_01.htm" title="20. Web Automation"><link rel="prev" href="ch20_08.htm" title="20.7. Finding Stale Links"><link rel="next" href="ch20_10.htm" title="20.9. Creating HTML Templates"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch20_08.htm" title="20.7. Finding Stale Links"><img src="../gifs/txtpreva.gif" alt="Previous: 20.7. Finding Stale Links" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch20_01.htm" title="20. Web Automation">Chapter 20<br>Web Automation</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch20_10.htm" title="20.9. Creating HTML Templates"><img src="../gifs/txtnexta.gif" alt="Next: 20.9. Creating HTML Templates" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch20-37341">20.8. Finding Fresh Links</A
></H2
><div class="sect2"><h3 class="sect2"><a class="title" name="ch20-pgfId-861">Problem<a class="indexterm" name="ch20-idx-1000002657-0"></A
></A
></H3
><p class="para"><a class="indexterm" name="ch20-idx-1000003777-0"></A
><a class="indexterm" name="ch20-idx-1000003777-1"></A
>Given a list of URLs, you want to determine which have been most recently modified.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch20-pgfId-867">Solution</A
></H3
><p class="para">The program in <a class="xref" href="#ch20-35690" title="surl">Example 20.6</A
> reads URLs from standard input, rearranges by date, and prints them back to standard output with those dates prepended.</P
><div class="example"><h4 class="example"><a class="title" name="ch20-35690">Example 20.6: surl</A
></H4
><pre class="programlisting">#!/usr/bin/perl -w
# surl - sort URLs by their last modification date

use LWP::UserAgent;
use HTTP::Request;
use URI::URL qw(url);

my($url, %Date);
my $ua = LWP::UserAgent-&gt;new();

while ( $url = url(scalar &lt;&gt;) ) {
    my $ans;
    next unless $url-&gt;scheme =~ /^(file|https?)$/;
    $ans = $ua-&gt;request(HTTP::Request-&gt;new(&quot;HEAD&quot;, $url));
    if ($ans-&gt;is_success) {
        $Date{$url} = $ans-&gt;last_modified || 0;  # unknown
    } else {
        print STDERR &quot;$url: Error [&quot;, $ans-&gt;code, &quot;] &quot;, $ans-&gt;message, &quot;!\n&quot;;
    }
}

foreach $url ( sort { $Date{$b} &lt;=&gt; $Date{$a} } keys %Date ) {
    printf &quot;%-25s %s\n&quot;, $Date{$url} ? (scalar localtime $Date{$url})
                                     : &quot;&lt;NONE SPECIFIED&gt;&quot;, $url;
}</PRE
></DIV
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch20-pgfId-923">Discussion</A
></H3
><p class="para">The <a class="indexterm" name="ch20-idx-1000002659-0"></A
>surl script works more like a traditional filter program. It reads from standard input one URL per line. (Actually, it reads from &lt;<code class="literal">ARGV</CODE
>&gt;, which defaults to STDIN if <code class="literal">@ARGV</CODE
> is empty.) The last-modified date on each URL is fetched using a HEAD request. That date is stored in a hash using the URL for a key. Then a simple sort by value is run on the hash to reorder the URLs by date. On output, the internal date is converted into <code class="literal">localtime</CODE
> format.</P
><p class="para">Here's an example of using the xurl program from the earlier recipe to extract the URLs, then running that program's output to feed into surl.</P
><pre class="programlisting">% xurl http://www.perl.com/  | surl | head
<code class="userinput"><b><code class="replaceable"><i>Mon Apr 20 06:16:02 1998  http://electriclichen.com/linux/srom.html</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>Fri Apr 17 13:38:51 1998  http://www.oreilly.com/</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>Fri Mar 13 12:16:47 1998  http://www2.binevolve.com/</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>Sun Mar  8 21:01:27 1998  http://www.perl.org/</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>Tue Nov 18 13:41:32 1997  http://www.perl.com/universal/header.map</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>Wed Oct  1 12:55:13 1997  http://www.songline.com/</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>Sun Aug 17 21:43:51 1997  http://www.perl.com/graphics/perlhome_header.jpg</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>Sun Aug 17 21:43:47 1997  http://www.perl.com/graphics/perl_id_313c.gif</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>Sun Aug 17 21:43:46 1997  http://www.perl.com/graphics/ora_logo.gif</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>Sun Aug 17 21:43:44 1997  http://www.perl.com/graphics/header-nav.gif</I
></CODE
></B
></CODE
></PRE
><p class="para">Having a variety of small programs that each do one thing and that can be combined into more powerful constructs is the hallmark of good programming. You could even argue that xurl should work on files, and that some other program should actually fetch the URL's contents over the Web to feed into xurl, churl, or surl. That program would probably be called gurl, except that a program by that name already exists: the LWP module suite has a program called lwp-request with aliases HEAD, GET, and POST to run those operations in shell <a class="indexterm" name="ch20-idx-1000003779-0"></A
><a class="indexterm" name="ch20-idx-1000003779-1"></A
>scripts.<a class="indexterm" name="ch20-idx-1000002653-0"></A
><a class="indexterm" name="ch20-idx-1000002653-1"></A
><a class="indexterm" name="ch20-idx-1000002653-2"></A
><a class="indexterm" name="ch20-idx-1000002653-3"></A
><a class="indexterm" name="ch20-idx-1000002653-4"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch20-pgfId-955">See Also</A
></H3
><p class="para">The documentation for the CPAN modules LWP::UserAgent, HTTP::Request, and URI::URL; <a class="xref" href="ch20_08.htm" title="Finding Stale Links">Recipe 20.7</A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch20_08.htm" title="20.7. Finding Stale Links"><img src="../gifs/txtpreva.gif" alt="Previous: 20.7. Finding Stale Links" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch20_10.htm" title="20.9. Creating HTML Templates"><img src="../gifs/txtnexta.gif" alt="Next: 20.9. Creating HTML Templates" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">20.7. Finding Stale Links</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">20.9. Creating HTML Templates</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
