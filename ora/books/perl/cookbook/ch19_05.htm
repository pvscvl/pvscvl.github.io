<html><head>
<title>Recipe 19.4. Writing a Safe CGI Program</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:45:27Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch19_01.htm" title="19. CGI Programming"><link rel="prev" href="ch19_04.htm" title="19.3. Fixing a 500 Server Error"><link rel="next" href="ch19_06.htm" title="19.5. Making CGI Scripts Efficient"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch19_04.htm" title="19.3. Fixing a 500 Server Error"><img src="../gifs/txtpreva.gif" alt="Previous: 19.3. Fixing a 500 Server Error" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch19_01.htm" title="19. CGI Programming">Chapter 19<br>CGI Programming</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch19_06.htm" title="19.5. Making CGI Scripts Efficient"><img src="../gifs/txtnexta.gif" alt="Next: 19.5. Making CGI Scripts Efficient" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch19-37435">19.4. Writing a Safe CGI Program</A
></H2
><div class="sect2"><h3 class="sect2"><a class="title" name="ch19-pgfId-350">Problem<a class="indexterm" name="ch19-idx-1000005425-0"></A
><a class="indexterm" name="ch19-idx-1000005425-1"></A
></A
></H3
><p class="para">Because CGI programs allow external users to run programs on systems they would not otherwise have access on, all CGI programs represent a potential security risk. You want to minimize your exposure.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch19-pgfId-356">Solution</A
></H3
><ul class="itemizedlist"><li class="listitem"><p class="para"><a class="listitem" name="ch19-pgfId-358"></A
>Use taint mode (the <b class="emphasis.bold">-T</B
> switch on the #! line).</P
></LI
><li class="listitem"><p class="para"><a class="listitem" name="ch19-pgfId-360"></A
>Don't blindly untaint data. (See below.)</P
></LI
><li class="listitem"><p class="para"><a class="listitem" name="ch19-pgfId-362"></A
>Sanity-check everything, including all form widget return values, even hidden widgets or values generated by JavaScript code. Many people na–vely assume that just because they tell JavaScript to check the form's values before the form is submitted, the form's values will actually be checked. Not at all! The user can trivially circumvent this by disabling JavaScript in their browser, by downloading the form and altering the JavaScript, or quit by talking HTTP without a browser using any of the examples in <a class="xref" href="ch20_01.htm" title="Web Automation">Chapter 20, <cite class="chapter">Web Automation</CITE
></A
>.</P
></LI
><li class="listitem"><p class="para"><a class="listitem" name="ch19-pgfId-366"></A
>Check return conditions from system calls.</P
></LI
><li class="listitem"><p class="para"><a class="listitem" name="ch19-pgfId-368"></A
>Be conscious of race conditions (described below).</P
></LI
><li class="listitem"><p class="para"><a class="listitem" name="ch19-pgfId-370"></A
>Run with <b class="emphasis.bold">-w</B
> and <code class="literal">use</CODE
> <code class="literal">strict</CODE
> to make sure Perl isn't assuming things incorrectly.</P
></LI
><li class="listitem"><p class="para"><a class="listitem" name="ch19-pgfId-372"></A
>Don't run anything setuid unless you absolutely must. If you must, think about running setgid instead if you can. Certainly avoid setuid root at all costs. If you must run setuid or setgid, use a wrapper unless Perl is convinced your system has secure setuid scripts and you know what this means.</P
></LI
><li class="listitem"><p class="para"><a class="listitem" name="ch19-pgfId-374"></A
>Always encode login passwords, credit card numbers, social security numbers, and anything else you'd not care to read pasted across the front page of your local newspaper. Use a secure protocol like SSL when dealing with such data.</P
></LI
></UL
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch19-pgfId-378">Discussion</A
></H3
><p class="para">Many of these suggestions are good ideas for any program &nbsp;-  using <b class="emphasis.bold">-w</B
> and checking the return values of your system calls are obviously applicable even when security isn't the first thing on your mind. The <b class="emphasis.bold">-w</B
> switch makes Perl issue warnings about dubious constructs, like using an undefined variable as though it had a legitimate value, or writing to a read-only filehandle.</P
><p class="para">Apart from unanticipated shell escapes, the most common security threat lies in forged values in a form submission. It's trivial for anyone to save the source to your form, edit the HTML, and submit the altered form. Even if you're certain that a field can return only <code class="literal">&quot;yes&quot;</CODE
> or <code class="literal">&quot;no&quot;</CODE
>, they can always edit it up to return <code class="literal">&quot;maybe&quot;</CODE
> instead. Even fields marked as type <code class="literal">HIDDEN</CODE
> in the form can be tampered. If the program at the other end blindly trusts its form values, it can be fooled into deleting files, creating new user accounts, mailing password or credit card databases, or innumerable other malicious abuses. This is why you must never blindly trust data (like prices) stored in hidden fields when writing CGI shopping cart applications.</P
><p class="para">Even worse is when the CGI script uses a form value as the basis of a filename to open or a command to run. Bogus values submitted to the script could trick it into opening arbitrary files. Situations like this are precisely why Perl has a taint mode. If a program runs setuid, or else has the <b class="emphasis.bold">-T</B
> switch active, any data coming in through program arguments, environment variables, directory listings, or a file, are considered tainted, and cannot be used directly or indirectly to affect the outside world.</P
><p class="para">Running under <a class="indexterm" name="ch19-idx-1000005440-0"></A
>taint mode, Perl insists that you set your path variable first, even if specifying a complete pathname when you call a program. That's because you have no assurance that the command you run won't turn around and invoke some other program using a relative pathname. You must also untaint any externally derived data for safety.</P
><p class="para">For instance, when running in taint mode:</P
><pre class="programlisting">#!/usr/bin/perl -T
open(FH, &quot;&gt; $ARGV[0]&quot;) or die;</PRE
><p class="para">Perl warns with:</P
><pre class="programlisting"><code class="userinput"><b><code class="replaceable"><i>Insecure dependency in open while running with -T switch at ...</I
></CODE
></B
></CODE
></PRE
><p class="para">This is because <code class="literal">$ARGV[0]</CODE
> (having come from outside your program) is not trustworthy. The only way to change tainted data into untainted data is by using regular expression backreferences:</P
><pre class="programlisting">$file = $ARGV[0];                                   # $file tainted
unless ($file =~ m#^([\w.-]+)$#) {                  # $1 is untainted
    die &quot;filename '$file' has invalid characters.\n&quot;;
}
$file = $1;                                         # $file untainted</PRE
><p class="para">Tainted data can come from anything outside your program, such as from your program arguments or environment variables, the results of reading from filehandles or directory handles, and <code class="literal">stat</CODE
> or locale information. Operations considered insecure with tainted data include <code class="literal">system(STRING)</CODE
>, <code class="literal">exec(STRING)</CODE
>, backticks, <code class="literal">glob</CODE
>, <code class="literal">open</CODE
> with any mode except read-only, <code class="literal">unlink</CODE
>, <code class="literal">mkdir</CODE
>, <code class="literal">rmdir</CODE
>, <code class="literal">chown</CODE
>, <code class="literal">chmod</CODE
>, <code class="literal">umask</CODE
>, <code class="literal">link</CODE
>, <code class="literal">symlin</CODE
>k, the <b class="emphasis.bold">-s</B
> command-line switch, <code class="literal">kill</CODE
>, <code class="literal">require</CODE
>, <code class="literal">eval</CODE
>, <code class="literal">truncate</CODE
>, <code class="literal">ioctl</CODE
>, <code class="literal">fcntl</CODE
>, <code class="literal">socket</CODE
>, <code class="literal">socketpair</CODE
>, <code class="literal">bind</CODE
>, <code class="literal">connect</CODE
>, <code class="literal">chdir</CODE
>, <code class="literal">chroot</CODE
>, <code class="literal">setpgrp</CODE
>, <code class="literal">setpriority</CODE
>, and <code class="literal">syscall</CODE
>.</P
><p class="para">A common attack exploits what's known as a <em class="emphasis">race condition</EM
><a class="indexterm" name="ch19-idx-1000005439-0"></A
>. That's a situation where, between two actions of yours, an attacker can race in and change something to make your program misbehave. A notorious race condition occurred in the way older Unix kernels ran setuid scripts: between the kernel reading the file to find which interpreter to run, and the now-setuid interpreter reading the file, a malicious person could substitute their own script.</P
><p class="para">Race conditions crop up even in apparently innocuous places. Consider what would happen if not one but many copies of the following code ran simultaneously.</P
><pre class="programlisting">unless (-e $filename) {                     # WRONG!
    open(FH, &quot;&gt; $filename&quot;);
    # ...
}</PRE
><p class="para">There's a race between testing whether the file exists and opening it for writing. Still worse, if someone replaced the file with a link to something important, like one of your personal configuration files, the above code would erase that file. The correct way to do this is to do a non-destructive create with the <code class="literal">sysopen</CODE
> function, described in <a class="xref" href="ch07_02.htm" title="Opening a File">Recipe 7.1</A
>.</P
><p class="para">A setuid CGI script runs with different permissions than the web server does. This lets the CGI script access resources (files, shadow password databases, etc) that it otherwise could not. This can be convenient, but it can also be dangerous. Weaknesses in setuid scripts may let crackers access not only files that the low-privilege web server user can access, but also any that could be accessed by the user the script runs as. For a poorly written setuid root script, this could let anyone change passwords, delete files, read credit card records, and other malicious acts. This is why you should always make sure your programs run with the lowest possible privilege, normally the user the web server runs as: <code class="literal">nobody</CODE
>.</P
><p class="para">Finally (and this recommendation may be the hardest to follow) be conscious of the physical path your network traffic takes. Are you sending passwords over an unencrypted connection? Do these unencrypted passwords travel through insecure networks? A form's PASSWORD input field only protects you from someone looking over your shoulder. Always use SSL when real passwords are involved. If you're serious about security, fire up your browser and a packet sniffer to see how easily your traffic is decoded. <a class="indexterm" name="ch19-idx-1000005427-0"></A
><a class="indexterm" name="ch19-idx-1000005427-1"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch19-pgfId-432">See Also</A
></H3
><p class="para">The section on 
<a class="olink" href="../prog/ch06_03.htm#PERL2-CH-6-SECT-3.1.3">&#13;"Cooperating with Strangers"</A
> 
in <a class="olink" href="../prog/ch06_01.htm">Chapter 6</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
>; <i class="filename">perlsec </I
>(1); the CGI and HTTP specs and the CGI Security FAQ, all mentioned in the Introduction to this chapter; the section on "Avoiding Denial of Service Attacks" in the standard CGI module documentation; <a class="xref" href="ch19_07.htm" title="Executing Commands Without Shell Escapes">Recipe 19.6</A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch19_04.htm" title="19.3. Fixing a 500 Server Error"><img src="../gifs/txtpreva.gif" alt="Previous: 19.3. Fixing a 500 Server Error" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch19_06.htm" title="19.5. Making CGI Scripts Efficient"><img src="../gifs/txtnexta.gif" alt="Next: 19.5. Making CGI Scripts Efficient" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">19.3. Fixing a 500 Server Error</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">19.5. Making CGI Scripts Efficient</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
