<html><head>
<title>Recipe 13.7. Calling Methods Indirectly</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:42:23Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch13_01.htm" title="13. Classes, Objects, and Ties"><link rel="prev" href="ch13_07.htm" title="13.6. Cloning Objects"><link rel="next" href="ch13_09.htm" title="13.8. Determining Subclass Membership"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch13_07.htm" title="13.6. Cloning Objects"><img src="../gifs/txtpreva.gif" alt="Previous: 13.6. Cloning Objects" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch13_01.htm" title="13. Classes, Objects, and Ties">Chapter 13<br>Classes, Objects, and Ties</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch13_09.htm" title="13.8. Determining Subclass Membership"><img src="../gifs/txtnexta.gif" alt="Next: 13.8. Determining Subclass Membership" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch13-15749">13.7. Calling Methods Indirectly</A
></H2
><div class="sect2"><h3 class="sect2"><a class="title" name="ch13-pgfId-1009">Problem<a class="indexterm" name="ch13-idx-1000004543-0"></A
></A
></H3
><p class="para">You want to call a method by a name that isn't known until run time.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch13-pgfId-1015">Solution</A
></H3
><p class="para">Store the method name as a string in a scalar variable and use it where you would use the real method name to the right of the arrow operator:</P
><pre class="programlisting">$methname = &quot;flicker&quot;;
$obj-&gt;$methname(10);         # calls $ob-&gt;flicker(10);

# call three methods on the object, by name
foreach $m ( qw(start run stop) ) {
    $obj-&gt;<code class="literal">$m();</CODE
>
} </PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch13-pgfId-1035">Discussion</A
></H3
><p class="para">Sometimes you need to call a method whose name you've stored somewhere. You can't take the address of a method, but you can store its name. If you have a scalar variable <code class="literal">$meth</CODE
> containing the method name, call the method on an object <code class="literal">$crystal</CODE
> with <code class="literal">$crystal-&gt;$meth()</CODE
>.</P
><pre class="programlisting">@methods = qw(name rank serno);
%his_info = map { $_ =&gt; $ob-&gt;$_() } @methods;

# same as this:

%his_info = (
    'name'  =&gt; $ob-&gt;<code class="literal">name()</CODE
>,
    'rank'  =&gt; $ob-&gt;<code class="literal">rank()</CODE
>,
    'serno' =&gt; $ob-&gt;<code class="literal">serno()</CODE
>,
);</PRE
><p class="para">If you're desperate to devise a way to get a method's address, you should try to rethink your algorithm. For example, instead of incorrectly taking <code class="literal">\$ob-&gt;method()</CODE
>, which simply applies the backslash to that method's return value or values, do this:</P
><pre class="programlisting">my $fnref = sub { $ob-&gt;method(@_) };</PRE
><p class="para">Now when it's time to call that indirectly, you would use:</P
><pre class="programlisting">$fnref-&gt;(10, &quot;fred&quot;);</PRE
><p class="para">and have it correctly really call:</P
><pre class="programlisting">$obj-&gt;method(10, &quot;fred&quot;);</PRE
><p class="para">This works even if <code class="literal">$ob</CODE
> has gone out of scope. This solution is much cleaner.</P
><p class="para">The code reference returned by the UNIVERSAL <code class="literal">can()</CODE
><a class="indexterm" name="ch13-idx-1000004550-0"></A
> method should probably not be used as an indirect method call. That's because you have no reason to believe that this will be a valid method when applied to an object of an arbitrary class.</P
><p class="para">For example, this is highly dubious code:</P
><pre class="programlisting">$obj-&gt;can('method_name')-&gt;($obj_target, @arguments)
   if $obj_target-&gt;isa( ref $obj );</PRE
><p class="para">The problem is that the code ref returned by <code class="literal">can</CODE
> might not be a valid method to be called on <code class="literal">$obj2</CODE
>. It's probably safest to only test the <code class="literal">can()</CODE
> method in a boolean expression.<a class="indexterm" name="ch13-idx-1000004545-0"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch13-pgfId-1000004355">See Also</A
></H3
><p class="para"><i class="filename">perlobj </I
>(1); <a class="xref" href="ch11_09.htm" title="Creating References to Methods">Recipe 11.8</A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch13_07.htm" title="13.6. Cloning Objects"><img src="../gifs/txtpreva.gif" alt="Previous: 13.6. Cloning Objects" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch13_09.htm" title="13.8. Determining Subclass Membership"><img src="../gifs/txtnexta.gif" alt="Next: 13.8. Determining Subclass Membership" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">13.6. Cloning Objects</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">13.8. Determining Subclass Membership</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
