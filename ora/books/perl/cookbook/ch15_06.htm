<html><head>
<title>Recipe 15.5. Changing Text Color</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:43:18Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch15_01.htm" title="15. User Interfaces"><link rel="prev" href="ch15_05.htm" title="15.4. Determining Terminal or Window Size"><link rel="next" href="ch15_07.htm" title="15.6. Reading from the Keyboard"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch15_05.htm" title="15.4. Determining Terminal or Window Size"><img src="../gifs/txtpreva.gif" alt="Previous: 15.4. Determining Terminal or Window Size" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch15_01.htm" title="15. User Interfaces">Chapter 15<br>User Interfaces</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch15_07.htm" title="15.6. Reading from the Keyboard"><img src="../gifs/txtnexta.gif" alt="Next: 15.6. Reading from the Keyboard" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch15-chap15_changing_0">15.5. Changing Text Color</A
></H2
><div class="sect2"><h3 class="sect2"><a class="title" name="ch15-pgfId-453">Problem</A
></H3
><p class="para"><a class="indexterm" name="ch15-idx-1000005079-0"></A
><a class="indexterm" name="ch15-idx-1000005079-1"></A
><a class="indexterm" name="ch15-idx-1000005079-2"></A
><a class="indexterm" name="ch15-idx-1000005079-3"></A
><a class="indexterm" name="ch15-idx-1000005079-4"></A
><a class="indexterm" name="ch15-idx-1000005079-5"></A
>You want text to appear in different colors on the screen. For instance, you want to emphasize a mode line or highlight an error message.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch15-pgfId-459">Solution</A
></H3
><p class="para">Use the CPAN module <a class="indexterm" name="ch15-idx-1000005080-0"></A
>Term::ANSIColor to send the ANSI color-change sequences to the user's terminal:</P
><pre class="programlisting">use Term::ANSIColor;

print color(&quot;red&quot;), &quot;Danger, Will Robinson!\n&quot;, color(&quot;reset&quot;);
print &quot;This is just normal text.\n&quot;;
print colored(&quot;&lt;BLINK&gt;Do you hurt yet?&lt;/BLINK&gt;&quot;, &quot;blink&quot;);</PRE
><p class="para">Or, you can use convenience functions from Term::ANSIColor:</P
><pre class="programlisting">use Term::ANSIColor qw(:constants);

print RED, &quot;Danger, Will Robinson!\n&quot;, RESET;</PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch15-pgfId-483">Discussion</A
></H3
><p class="para">Term::ANSIColor prepares escape sequences that some (but far from all) terminals will recognize. For example, if you normally launch a <em class="emphasis">color-xterm</EM
>, this recipe will work. If you normally use the normal <em class="emphasis">xterm</EM
> program, or have a vt100 in your kitchen, it won't.</P
><p class="para">There are two ways of using the module: either by calling the exported functions <code class="literal">color($attribute)</CODE
><a class="indexterm" name="ch15-idx-1000005081-0"></A
><a class="indexterm" name="ch15-idx-1000005081-1"></A
> and <code class="literal">colored($text,</CODE
> <code class="literal">$attribute)</CODE
>, or by using convenience functions like <code class="literal">BOLD</CODE
>, <code class="literal">BLUE</CODE
>, and <code class="literal">RESET</CODE
>.</P
><p class="para">Attributes can be a combination of colors and controls. The colors are black, red, green, yellow, blue, magenta, on_block, on_red, on_green, on_yellow, on_blue, on_magenta, on_cyan, and on_white. (Apparently orange and purple don't matter.) The controls are clear, reset, bold, underline, underscore, blink, reverse, and concealed. Clear and reset are synonyms, as are underline and underscore. Reset restores the colors to the way they were when the program started, and concealed makes foreground and background colors the same.</P
><p class="para">You can combine attributes:</P
><pre class="programlisting"># rhyme for the deadly coral snake
print color(&quot;red on_black&quot;),  &quot;venom lack\n&quot;;
print color(&quot;red on_yellow&quot;), &quot;kill that fellow\n&quot;;

print color(&quot;green on_cyan blink&quot;), &quot;garish!\n&quot;;
print color(&quot;reset&quot;);</PRE
><p class="para">We could have written this as:</P
><pre class="programlisting">print colored(&quot;venom lack\n&quot;, &quot;red&quot;, on_black&quot;);
print colored(&quot;kill that fellow\n&quot;, &quot;red&quot;, &quot;on_yellow&quot;);

print colored(&quot;garish!\n&quot;, &quot;green&quot;, &quot;on_cyan&quot;, &quot;blink&quot;);</PRE
><p class="para">or as:</P
><pre class="programlisting">use Term::ANSIColor qw(:constants);

print BLACK, ON_WHITE, &quot;black on white\n&quot;;
print WHITE, ON_BLACK, &quot;white on black\n&quot;;
print GREEN, ON_CYAN, BLINK, &quot;garish!\n&quot;;
print RESET;</PRE
><p class="para">Here, <code class="literal">BLACK</CODE
> is a function exported from Term::ANSIColor.</P
><p class="para">It's important to <code class="literal">print</CODE
> <code class="literal">RESET</CODE
> or <code class="literal">color(&quot;reset&quot;)</CODE
> at the end of your program if you're not calling <code class="literal">colored</CODE
> for everything. Failure to reset your terminal will leave it displaying odd colors. You may want to use:</P
><pre class="programlisting">END { print color(&quot;reset&quot;) }</PRE
><p class="para">to ensure the colors will be reset when your program finishes.</P
><p class="para">Attributes that span lines of text can confuse some programs or devices. If this becomes a problem, either manually set the attributes at the start of each line, or use <code class="literal">colored</CODE
> after setting the variable <code class="literal">$Term::ANSIColor::EACHLINE</CODE
> to the line terminator:</P
><pre class="programlisting">$Term::ANSIColor::EACHLINE = $/;
print colored(&lt;&lt;EOF, RED, ON_WHITE, BOLD, BLINK);
This way
each line
has its own
attribute set.
EOF<a class="indexterm" name="ch15-idx-1000005083-0"></A
><a class="indexterm" name="ch15-idx-1000005083-1"></A
><a class="indexterm" name="ch15-idx-1000005083-2"></A
><a class="indexterm" name="ch15-idx-1000005083-3"></A
><a class="indexterm" name="ch15-idx-1000005083-4"></A
><a class="indexterm" name="ch15-idx-1000005083-5"></A
><a class="indexterm" name="ch15-idx-1000005083-6"></A
></PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch15-pgfId-553">See Also</A
></H3
><p class="para">The documentation for the Term::AnsiColor module from CPAN</P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch15_05.htm" title="15.4. Determining Terminal or Window Size"><img src="../gifs/txtpreva.gif" alt="Previous: 15.4. Determining Terminal or Window Size" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch15_07.htm" title="15.6. Reading from the Keyboard"><img src="../gifs/txtnexta.gif" alt="Next: 15.6. Reading from the Keyboard" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">15.4. Determining Terminal or Window Size</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">15.6. Reading from the Keyboard</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
