<html><head>
<title>Recipe 20.13. Processing Server Logs</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:46:03Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch20_01.htm" title="20. Web Automation"><link rel="prev" href="ch20_13.htm" title="20.12. Parsing a Web Server Log File"><link rel="next" href="ch20_15.htm" title="20.14. Program: htmlsub"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch20_13.htm" title="20.12. Parsing a Web Server Log File"><img src="../gifs/txtpreva.gif" alt="Previous: 20.12. Parsing a Web Server Log File" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch20_01.htm" title="20. Web Automation">Chapter 20<br>Web Automation</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch20_15.htm" title="20.14. Program: htmlsub"><img src="../gifs/txtnexta.gif" alt="Next: 20.14. Program: htmlsub" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch20-16638">20.13. Processing Server Logs</A
></H2
><div class="sect2"><h3 class="sect2"><a class="title" name="ch20-pgfId-1395">Problem<a class="indexterm" name="ch20-idx-1000002688-0"></A
><a class="indexterm" name="ch20-idx-1000002688-1"></A
><a class="indexterm" name="ch20-idx-1000002688-2"></A
><a class="indexterm" name="ch20-idx-1000002688-3"></A
></A
></H3
><p class="para">You need to summarize your server logs, but you don't have a customizable program to do it.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch20-pgfId-1401">Solution</A
></H3
><p class="para">Parse the error log yourself with regular expressions, or use the Logfile modules from CPAN.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch20-pgfId-1407">Discussion</A
></H3
><p class="para"><a class="xref" href="#ch20-16450" title="sumwww">Example 20.9</A
> is a sample report generator for an Apache weblog.</P
><div class="example"><h4 class="example"><a class="title" name="ch20-16450">Example 20.9: sumwww</A
></H4
><pre class="programlisting">#!/usr/bin/perl -w
# sumwww - summarize web server log activity

$lastdate = &quot;&quot;;
daily_logs();
summary();
exit;

# read CLF files and tally hits from the host and to the URL
sub daily_logs {
    while (&lt;&gt;) {
        ($type, $what) = /&quot;(GET|POST)\s+(\S+?) \S+&quot;/ or next;
        ($host, undef, undef, $datetime) = split;
        ($bytes) = /\s(\d+)\s*$/ or next;
        ($date)  = ($datetime =~ /\[([^:]*)/);
        $posts  += ($type eq POST);
        $home++ if m, / ,;
        if ($date ne $lastdate) {
            if ($lastdate) { write_report()     }
            else           { $lastdate = $date  }
        }
        $count++;
        $hosts{$host}++;
        $what{$what}++;
        $bytesum += $bytes;
    }
    write_report() if $count;
}

# use *typeglob aliasing of global variables for cheap copy
sub summary  {
    $lastdate = &quot;Grand Total&quot;;
    *count   = *sumcount;
    *bytesum = *bytesumsum;
    *hosts   = *allhosts;
    *posts   = *allposts;
    *what    = *allwhat;
    *home    = *allhome;
    write;
}

# display the tallies of hosts and URLs, using formats
sub write_report {
    write;

    # add to summary data
    $lastdate    = $date;
    $sumcount   += $count;
    $bytesumsum += $bytesum;
    $allposts   += $posts;
    $allhome    += $home;

    # reset daily data
    $posts = $count = $bytesum = $home = 0;
    @allwhat{keys %what}   = keys %what;
    @allhosts{keys %hosts} = keys %hosts;
    %hosts = %what = ();
}

format STDOUT_TOP =
@|||||||||| @|||||| @||||||| @||||||| @|||||| @|||||| @|||||||||||||
&quot;Date&quot;,     &quot;Hosts&quot;, &quot;Accesses&quot;, &quot;Unidocs&quot;, &quot;POST&quot;, &quot;Home&quot;, &quot;Bytes&quot;
----------- ------- -------- -------- ------- ------- --------------
.

format STDOUT =
@&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; @&gt;&gt;&gt;&gt;&gt;&gt; @&gt;&gt;&gt;&gt;&gt;&gt;&gt; @&gt;&gt;&gt;&gt;&gt;&gt;&gt; @&gt;&gt;&gt;&gt;&gt;&gt; @&gt;&gt;&gt;&gt;&gt;&gt; @&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;
$lastdate,  scalar(keys %hosts),
            $count, scalar(keys %what),
                             $posts,  $home,  $bytesum  
.</PRE
></DIV
><p class="para">Here's sample output from that program:</P
><pre class="programlisting"><code class="userinput"><b><code class="replaceable"><i>    Date      Hosts  Accesses Unidocs   POST    Home       Bytes</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>----------- ------- -------- -------- ------- ------- --------------</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>19/May/1998     353     6447     3074     352      51       16058246</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>20/May/1998    1938    23868     4288     972     350       61879643</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>21/May/1998    1775    27872     6596    1064     376       64613798</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>22/May/1998    1680    21402     4467     735     285       52437374</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>23/May/1998    1128    21260     4944     592     186       55623059</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>Grand Total    6050   100849    10090    3715    1248      250612120</I
></CODE
></B
></CODE
></PRE
><p class="para">Use the <a class="indexterm" name="ch20-idx-1000002689-0"></A
>Logfile::Apache module from CPAN, shown in <a class="xref" href="#ch20-35579" title="aprept">Example 20.10</A
>, to write a similar, but less specific, program. This module is distributed with other Logfile modules in a single Logfile distribution (Logfile-0.115.tar.gz at the time of writing).</P
><div class="example"><h4 class="example"><a class="title" name="ch20-35579">Example 20.10: aprept</A
></H4
><pre class="programlisting">#!/usr/bin/perl -w
# aprept - report on Apache logs

use Logfile::Apache;

$l = Logfile::Apache-&gt;new(
    File  =&gt; &quot;-&quot;,                   # STDIN
    Group =&gt; [ Domain, File ]);

$l-&gt;report(Group =&gt; Domain, Sort =&gt; Records);
$l-&gt;report(Group =&gt; File,   List =&gt; [Bytes,Records]);</PRE
></DIV
><p class="para">The <code class="literal">new</CODE
> constructor reads a log file and builds indices internally. Supply a filename with the parameter named <code class="literal">File</CODE
> and the fields to index in the <code class="literal">Group</CODE
> parameter. The possible fields are <code class="literal">Date</CODE
> (date request), <code class="literal">Hour</CODE
> (time of day the request was received), <code class="literal">File</CODE
> (file requested), <code class="literal">User</CODE
> (username parsed from request), <code class="literal">Host</CODE
> (hostname requesting the document), and <code class="literal">Domain</CODE
> (<code class="literal">Host</CODE
> translated into "France", "Germany", etc.).</P
><p class="para">To produce a report on STDOUT, call the <code class="literal">report</CODE
> method. Give it the index to use with the <code class="literal">Group</CODE
> parameter, and optionally say how to sort (<code class="literal">Records</CODE
> is by number of hits, <code class="literal">Bytes</CODE
> is by number of bytes transferred) or how to further break it down (by number of bytes or number of records).</P
><p class="para">Here's some sample output:</P
><pre class="programlisting"><code class="userinput"><b><code class="replaceable"><i>Domain                  Records </I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>===============================</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>US Commercial        222 38.47% </I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>US Educational       115 19.93% </I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>Network               93 16.12% </I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>Unresolved            54  9.36% </I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>Australia             48  8.32% </I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>Canada                20  3.47% </I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>Mexico                 8  1.39% </I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>United Kingdom         6  1.04% </I
></CODE
></B
></CODE
>

<code class="userinput"><b><code class="replaceable"><i>File                               Bytes          Records </I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>=========================================================</I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>/                           13008  0.89%         6  1.04% </I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>/cgi-bin/MxScreen           11870  0.81%         2  0.35% </I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>/cgi-bin/pickcards          39431  2.70%        48  8.32% </I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>/deckmaster                143793  9.83%        21  3.64% </I
></CODE
></B
></CODE
>
<code class="userinput"><b><code class="replaceable"><i>/deckmaster/admin           54447  3.72%         3  0.52% </I
></CODE
></B
></CODE
><a class="indexterm" name="ch20-idx-1000002691-0"></A
><a class="indexterm" name="ch20-idx-1000002691-1"></A
><a class="indexterm" name="ch20-idx-1000002691-2"></A
><a class="indexterm" name="ch20-idx-1000002691-3"></A
><a class="indexterm" name="ch20-idx-1000002691-4"></A
><a class="indexterm" name="ch20-idx-1000002691-5"></A
></PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch20-pgfId-1000003550">See Also</A
></H3
><p class="para">The documentation for the CPAN module Logfile::Apache; <i class="filename">perlform </I
>(1) and the section on "Formats" in 
<a class="olink" href="../prog/ch02_01.htm">Chapter 2</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch20_13.htm" title="20.12. Parsing a Web Server Log File"><img src="../gifs/txtpreva.gif" alt="Previous: 20.12. Parsing a Web Server Log File" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch20_15.htm" title="20.14. Program: htmlsub"><img src="../gifs/txtnexta.gif" alt="Next: 20.14. Program: htmlsub" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">20.12. Parsing a Web Server Log File</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">20.14. Program: htmlsub</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
