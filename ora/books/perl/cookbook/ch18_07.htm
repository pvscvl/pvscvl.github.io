<html><head>
<title>Recipe 18.6. Simulating Telnet from a Program</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:45:05Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch18_01.htm" title="18. Internet Services"><link rel="prev" href="ch18_06.htm" title="18.5. Reading Mail with POP3"><link rel="next" href="ch18_08.htm" title="18.7. Pinging a Machine"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch18_06.htm" title="18.5. Reading Mail with POP3"><img src="../gifs/txtpreva.gif" alt="Previous: 18.5. Reading Mail with POP3" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch18_01.htm" title="18. Internet Services">Chapter 18<br>Internet Services</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch18_08.htm" title="18.7. Pinging a Machine"><img src="../gifs/txtnexta.gif" alt="Next: 18.7. Pinging a Machine" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch18-17527">18.6. Simulating Telnet from a Program</A
></H2
><div class="sect2"><h3 class="sect2"><a class="title" name="ch18-pgfId-845">Problem</A
></H3
><p class="para"><a class="indexterm" name="ch18-idx-1000004315-0"></A
><a class="indexterm" name="ch18-idx-1000004315-1"></A
><a class="indexterm" name="ch18-idx-1000004315-2"></A
><a class="indexterm" name="ch18-idx-1000004315-3"></A
>You want to simulate a <em class="emphasis">telnet</EM
> connection from your program by logging into a remote machine, issuing commands, and reacting to what is sent. This has many applications, from automating tasks on machines you can telnet to but which don't support scripting or <em class="emphasis">rsh</EM
>, to simply testing whether a machine's telnet daemon is still running.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch18-pgfId-851">Solution</A
></H3
><p class="para">Use the CPAN module Net::Telnet:</P
><pre class="programlisting">use Net::Telnet;

$t = Net::Telnet-&gt;new( Timeout =&gt; 10,
                       Prompt  =&gt; '/%/',
                       Host    =&gt; $hostname );

$t-&gt;login($username, $password);
@files = $t-&gt;cmd(&quot;ls&quot;);
$t-&gt;print(&quot;top&quot;);
(undef, $process_string) = $t-&gt;waitfor('/\d+ processes/');
$t-&gt;close;</PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch18-pgfId-879">Discussion</A
></H3
><p class="para">Net::Telnet provides an object-oriented interface to the telnet protocol. Create a connection with <code class="literal">Net::Telnet-&gt;new</CODE
>, and then interact with the remote machine using method calls on the resulting object.</P
><p class="para">Give the <code class="literal">new</CODE
> method named parameters, passed in hash-like form. We'll only cover only a few of many possible parameters. The most important is <code class="literal">Host</CODE
>, the machine you're telnetting to. The default host is <code class="literal">localhost</CODE
>. If you want to telnet to a port other than one telnet normally uses, specify this in the <code class="literal">Port</CODE
> option. Error handling is done through the function whose reference is specified in the <code class="literal">Errmode</CODE
> parameter.</P
><p class="para">Another important option is <code class="literal">Prompt</CODE
>. When you log in or run a command, Net::Telnet uses the <code class="literal">Prompt</CODE
> pattern to determine when the login or command has completed. The default <code class="literal">Prompt</CODE
> is:</P
><pre class="programlisting">/[\$%#&gt;] $/</PRE
><p class="para">which matches the common shell prompts. If the prompt on the remote machine doesn't match the default pattern, you have to specify your own. Remember to include the slashes.</P
><p class="para"><code class="literal">Timeout</CODE
> lets you control how long (in seconds) network operations wait before they give up. The default is 10 seconds.</P
><p class="para">If an error or timeout occurs in the Net::Telnet module, the default behavior is to raise an exception, which, if uncaught, prints a message to STDERR and exits. To change this, pass a subroutine reference to <code class="literal">new</CODE
> in the <code class="literal">Errmode</CODE
> argument. If instead of a code subroutine, you specify the string <code class="literal">&quot;return&quot;</CODE
> as the <code class="literal">Errmode</CODE
>, methods return <code class="literal">undef</CODE
> (in scalar context) or an empty list (in list context) on error, with the error message available via the <code class="literal">errmsg</CODE
> method:</P
><pre class="programlisting">$telnet = Net::Telnet-&gt;new( Errmode =&gt; sub { main::log(@_) }, ... );</PRE
><p class="para">The <code class="literal">login</CODE
> method is used to send a username and password to the remote machine. It uses the <code class="literal">Prompt</CODE
> to decide when the login is complete and times out if the machine doesn't reply with a prompt:</P
><pre class="programlisting">$telnet-&gt;login($username, $password)
    or die &quot;Login failed: @{[ $telnet-&gt;errmsg() ]}\n&quot;;</PRE
><p class="para">To run a program and gather its output, use the <code class="literal">cmd</CODE
> method. Pass it the string to send, and it returns the output of the command. In list context, it returns one line per list element. In scalar context, it returns one long line. It waits for the <code class="literal">Prompt</CODE
> before returning.</P
><p class="para">You can separate the sending of the command from the reception of its output with the <code class="literal">print</CODE
> and <code class="literal">waitfor</CODE
> methods, as we do in the Solution. The <code class="literal">waitfor</CODE
> method takes either a single string containing a Perl regular expression match operator:</P
><pre class="programlisting">$telnet-&gt;waitfor('/--more--/')</PRE
><p class="para">or named arguments. <code class="literal">Timeout</CODE
> lets you specify a timeout to override the default, <code class="literal">Match</CODE
> is a string containing a match operator as above, and <code class="literal">String</CODE
> is a literal string to find:</P
><pre class="programlisting">$telnet-&gt;waitfor(String =&gt; 'greasy smoke', Timeout =&gt; 30)</PRE
><p class="para">In scalar context, <code class="literal">waitfor</CODE
> returns true if the pattern or string was found. If it is not found, the <code class="literal">Errmode</CODE
> action is performed. In list context, it returns two strings: all the text before the match, and the text that matched.<a class="indexterm" name="ch18-idx-1000004317-0"></A
><a class="indexterm" name="ch18-idx-1000004317-1"></A
><a class="indexterm" name="ch18-idx-1000004317-2"></A
><a class="indexterm" name="ch18-idx-1000004317-3"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch18-pgfId-917">See Also</A
></H3
><p class="para">The documentation for the Net::Telnet module from CPAN; RFCs 854-856, as amended by later RFCs</P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch18_06.htm" title="18.5. Reading Mail with POP3"><img src="../gifs/txtpreva.gif" alt="Previous: 18.5. Reading Mail with POP3" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch18_08.htm" title="18.7. Pinging a Machine"><img src="../gifs/txtnexta.gif" alt="Next: 18.7. Pinging a Machine" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">18.5. Reading Mail with POP3</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">18.7. Pinging a Machine</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
