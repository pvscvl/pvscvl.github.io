<html><head>
<title>Recipe 14.1. Making and Using a DBM File</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:42:46Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch14_01.htm" title="14. Database Access"><link rel="prev" href="ch14_01.htm" title="14.0. Introduction"><link rel="next" href="ch14_03.htm" title="14.2. Emptying a DBM File"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch14_01.htm" title="14.0. Introduction"><img src="../gifs/txtpreva.gif" alt="Previous: 14.0. Introduction" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch14_01.htm" title="14. Database Access">Chapter 14<br>Database Access</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch14_03.htm" title="14.2. Emptying a DBM File"><img src="../gifs/txtnexta.gif" alt="Next: 14.2. Emptying a DBM File" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch14-25857">14.1. Making and Using a DBM File</A
></H2
><div class="sect2"><h3 class="sect2"><a class="title" name="ch14-pgfId-150">Problem<a class="indexterm" name="ch14-idx-1000004919-0"></A
><a class="indexterm" name="ch14-idx-1000004919-1"></A
></A
></H3
><p class="para">You want to create, populate, inspect, or delete values in a DBM database.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch14-pgfId-156">Solution</A
></H3
><p class="para">Use <code class="literal">dbmopen</CODE
><a class="indexterm" name="ch14-idx-1000004920-0"></A
><a class="indexterm" name="ch14-idx-1000004920-1"></A
> or <code class="literal">tie</CODE
> to open the database and make it accessible through a hash. Then use the hash as you normally would. When you're done, call <code class="literal">dbmclose</CODE
><a class="indexterm" name="ch14-idx-1000004921-0"></A
><a class="indexterm" name="ch14-idx-1000004921-1"></A
> or <code class="literal">untie</CODE
>.</P
><div class="sect3"><h4 class="sect3"><a class="title" name="ch14-pgfId-1000004641">dbmopen</A
></H4
><pre class="programlisting">use DB_File;                      # optional; overrides default
dbmopen %HASH, $FILENAME, 0666    # open database, accessed through %HASH
    or die &quot;Can't open $FILENAME: $!\n&quot;;

$V = $HASH{$KEY};                 # retrieve from database
$HASH{$KEY} = $VALUE;             # put value into database
if (exists $HASH{$KEY}) {         # check whether in database
    # ...
}
delete $HASH{$KEY};               # remove from database
dbmclose %HASH;                   # close the database</PRE
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="ch14-pgfId-1000004663">tie</A
></H4
><pre class="programlisting">use DB_File;                      # load database module

tie %HASH, &quot;DB_File&quot;, $FILENAME   # open database, to be accessed
    or die &quot;Can't open $FILENAME:$!\n&quot;;    # through %HASH

$V = $HASH{$KEY};                 # retrieve from database
$HASH{$KEY} = $VALUE;             # put value into database
if (exists $HASH{$KEY}) {         # check whether in database
    # ...
}
delete $HASH{$KEY};               # delete from database
untie %hash;                      # close the database</PRE
></DIV
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch14-pgfId-1000004643">Discussion</A
></H3
><p class="para">Accessing a database as a hash is powerful but easy, giving you a persistent hash that sticks around after the program using it has finished running. It's also much faster than loading in a new hash every time; even if the hash has a million entries, your program starts up virtually instantaneously.</P
><p class="para">The <a class="indexterm" name="ch14-idx-1000004931-0"></A
>program in <a class="xref" href="#ch14-26660" title="userstats">Example 14.1</A
> treats the database as though it were a normal hash. You can even call <code class="literal">keys</CODE
> or <code class="literal">each</CODE
> on it. Likewise, <code class="literal">exists</CODE
> and <code class="literal">defined</CODE
> are implemented for tied DBM hashes. Unlike a normal hash, a DBM hash does not distinguish between those two functions.</P
><div class="example"><h4 class="example"><a class="title" name="ch14-26660">Example 14.1: userstats</A
></H4
><pre class="programlisting">#!/usr/bin/perl -w
# userstats - generates statistics on who is logged in.
# call with an argument to display totals

use DB_File;

$db = '/tmp/userstats.db';       # where data is kept between runs

tie(%db, 'DB_File', $db)         or die &quot;Can't open DB_File $db : $!\n";

if (@ARGV) {
    if (&quot;@ARGV&quot; eq &quot;ALL&quot;) {
        @ARGV = sort keys %db;
    }
    foreach $user (@ARGV) {
            print &quot;$user\t$db{$user}\n&quot;;
    }
} else {
    @who = `who`;                                   # run who(1)
    if ($?) {
        die &quot;Couldn't run who: $?\n&quot;;               # exited abnormally
    }
    # extract username (first thing on the line) and update
    foreach $line (@who) {
        $line =~ /^(\S+)/;
        die &quot;Bad line from who: $line\n&quot; unless $1;
        $db{$1}++;
    }
}

untie %db;</PRE
></DIV
><p class="para">We use <em class="emphasis">who</EM
> to get a list of users logged in. This typically produces output like:</P
><pre class="programlisting"><b class="emphasis.bold">gnat     ttyp1   May 29 15:39   (coprolith.frii.com)</B
></PRE
><p class="para">If the <em class="emphasis">userstats</EM
> program is called without any arguments, it checks who's logged on and updates the database appropriately.</P
><p class="para">If the program is called with arguments, these are treated as usernames whose information will be presented. The special argument <code class="literal">&quot;ALL&quot;</CODE
> sets <code class="literal">@ARGV</CODE
> to a sorted list of DBM keys. For large hashes with many keys, this is prohibitively expensive &nbsp;-  a better solution would be to use the BTREE bindings of DB_File described in <a class="xref" href="ch14_07.htm" title="Sorting Large DBM Files">Recipe 14.6</A
>.<a class="indexterm" name="ch14-idx-1000004923-0"></A
><a class="indexterm" name="ch14-idx-1000004923-1"></A
><a class="indexterm" name="ch14-idx-1000004923-2"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch14-pgfId-240">See Also</A
></H3
><p class="para">The documentation for the standard modules GDBM_File, NDBM_File, SDBM_File, DB_File, also in <a class="olink" href="../prog/ch07_01.htm">Chapter 7</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
>; <i class="filename">perltie </I
>(1); the section on <a class="olink" href="../prog/ch05_04.htm#PERL2-CH-5-SECT-4.3">"Using Tied Variables"</A
> in <a class="olink" href="../prog/ch05_01.htm">Chapter 5</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
>; the discussion on the effect of your <code class="literal">umask</CODE
> on file creation in <a class="xref" href="ch07_02.htm" title="Opening a File">Recipe 7.1</A
>; <a class="xref" href="ch13_16.htm" title="Creating Magic Variables with tie">Recipe 13.15</A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch14_01.htm" title="14.0. Introduction"><img src="../gifs/txtpreva.gif" alt="Previous: 14.0. Introduction" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch14_03.htm" title="14.2. Emptying a DBM File"><img src="../gifs/txtnexta.gif" alt="Next: 14.2. Emptying a DBM File" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">14.0. Introduction</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">14.2. Emptying a DBM File</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
