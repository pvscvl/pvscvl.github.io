<html><head>
<title>Recipe 13.13. Coping with Circular Data Structures</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:42:30Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch13_01.htm" title="13. Classes, Objects, and Ties"><link rel="prev" href="ch13_13.htm" title="13.12. Solving the Data Inheritance Problem"><link rel="next" href="ch13_15.htm" title="13.14. Overloading Operators"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch13_13.htm" title="13.12. Solving the Data Inheritance Problem"><img src="../gifs/txtpreva.gif" alt="Previous: 13.12. Solving the Data Inheritance Problem" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch13_01.htm" title="13. Classes, Objects, and Ties">Chapter 13<br>Classes, Objects, and Ties</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch13_15.htm" title="13.14. Overloading Operators"><img src="../gifs/txtnexta.gif" alt="Next: 13.14. Overloading Operators" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch13-25755">13.13. Coping with Circular Data Structures</A
></H2
><div class="sect2"><h3 class="sect2"><a class="title" name="ch13-pgfId-1607">Problem<a class="indexterm" name="ch13-idx-1000004613-0"></A
><a class="indexterm" name="ch13-idx-1000004613-1"></A
><a class="indexterm" name="ch13-idx-1000004613-2"></A
><a class="indexterm" name="ch13-idx-1000004613-3"></A
><a class="indexterm" name="ch13-idx-1000004613-4"></A
><a class="indexterm" name="ch13-idx-1000004613-5"></A
></A
></H3
><p class="para"><a class="indexterm" name="ch13-idx-1000004644-0"></A
><a class="indexterm" name="ch13-idx-1000004644-1"></A
>You have an inherently self-referential data structure so Perl's reference-based garbage collection system won't notice when it's no longer being used. You want to prevent your program from leaking memory.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch13-pgfId-1613">Solution</A
></H3
><p class="para">Create a non-circular container object that holds a pointer to the self-referential data structure. Define a <code class="literal">DESTROY</CODE
> method for the containing object's class that manually breaks the self-referential circularities.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch13-pgfId-1619">Discussion</A
></H3
><p class="para">Many interesting data structures include references back to themselves. This can occur in code as simple as this:</P
><pre class="programlisting">$node-&gt;{NEXT} = $node;</PRE
><p class="para">As soon as you do that, you've created a circularity that will hide the data structure from Perl's referenced-based garbage collection system. Destructors will eventually be called when your program exits, but you sometimes don't want to wait that long.</P
><p class="para">A circular linked list is similarly self-referential. Each node contains a front pointer, a back pointer, and the node's value. If you implement it with references in Perl, you get a circular set of references and the data structure won't naturally be garbage collected when there are no external references to its nodes.</P
><p class="para">Making each node an instance of class Ring doesn't solve the problem. What you want is for Perl to clean up this structure as it would any other structure  &nbsp;-   which it will do if you implement your object as a structure that contains a reference to the real circle. That reference will be stored in the <code class="literal">&quot;DUMMY&quot;</CODE
> field:</P
><pre class="programlisting">package Ring;

# return an empty ring structure
sub new {
    my $class = shift;
    my $node  = { };
    $node-&gt;{NEXT} = $node-&gt;{PREV} = $node;
    my $self  = { DUMMY =&gt; $node, COUNT =&gt; 0 };
    bless $self, $class;
    return $self;
}</PRE
><p class="para">It's the nodes contained in the ring that are circular, not the returned ring object itself. That means code like the following won't cause a memory leak:</P
><pre class="programlisting">use Ring;

$COUNT = 1000;
for (1 .. 20) { 
    my $r = Ring-&gt;<code class="literal">new()</CODE
>;
    for ($i = 0; $i &lt; $COUNT; $i++) { $r-&gt;insert($i) } 
}</PRE
><p class="para">Even though we create twenty rings of a thousand nodes each, each ring is thrown away before a new one is created. The user of the class need do no more to free the ring's memory than they would to free a string's memory. That is, this all happens automatically, just as it's supposed to.</P
><p class="para">However, the implementer of the class does have to have a destructor for the ring, one that will manually delete the nodes:</P
><pre class="programlisting"># when a Ring is destroyed, destroy the ring structure it contains 
sub DESTROY {
    my $ring = shift;
    my $node;
    for ( $node  =  $ring-&gt;{DUMMY}-&gt;{NEXT};
          $node !=  $ring-&gt;{DUMMY}; 
          $node  =  $node-&gt;{NEXT} )
    {
             $ring-&gt;delete_node($node);
    } 
    $node-&gt;{PREV} = $node-&gt;{NEXT} = undef;
} 

# delete a node from the ring structure
sub delete_node {
    my ($ring, $node) = @_;
    $node-&gt;{PREV}-&gt;{NEXT} = $node-&gt;{NEXT};
    $node-&gt;{NEXT}-&gt;{PREV} = $node-&gt;{PREV};
    --$ring-&gt;{COUNT};
} </PRE
><p class="para">Here are a few other methods you might like in your ring class. Notice how the real work lies within the circularity hidden inside the object:</P
><pre class="programlisting"># $node = $ring-&gt;search( $value ) : find $value in the ring
# structure in $node
sub search {
    my ($ring, $value) = @_;
    my $node = $ring-&gt;{DUMMY}-&gt;{NEXT};
    while ($node != $ring-&gt;{DUMMY} &amp;&amp; $node-&gt;{VALUE} != $value) {
          $node = $node-&gt;{NEXT};
    }
    return $node;
} 

# $ring-&gt;insert( $value ) : insert $value into the ring structure
sub insert_value {
    my ($ring, $value) = @_;
    my $node = { VALUE =&gt; $value };
    $node-&gt;{NEXT} = $ring-&gt;{DUMMY}-&gt;{NEXT};
    $ring-&gt;{DUMMY}-&gt;{NEXT}-&gt;{PREV} = $node;
    $ring-&gt;{DUMMY}-&gt;{NEXT} = $node;
    $node-&gt;{PREV} = $ring-&gt;{DUMMY};
    ++$ring-&gt;{COUNT};
} 

# $ring-&gt;delete_value( $value ) : delete a node from the ring
# structure by value
sub delete_value {
    my ($ring, $value) = @_;
    my $node = $ring-&gt;search($value);
    return if $node == $ring-&gt;{DUMMY};
    $ring-&gt;delete_node($node);
}<a class="indexterm" name="ch13-idx-1000004642-0"></A
><a class="indexterm" name="ch13-idx-1000004642-1"></A
>

1;<a class="indexterm" name="ch13-idx-1000004634-0"></A
><a class="indexterm" name="ch13-idx-1000004634-1"></A
><a class="indexterm" name="ch13-idx-1000004634-2"></A
><a class="indexterm" name="ch13-idx-1000004634-3"></A
><a class="indexterm" name="ch13-idx-1000004634-4"></A
><a class="indexterm" name="ch13-idx-1000004634-5"></A
></PRE
><p class="para">Here's one for your <em class="emphasis">fortune</EM
> file: Perl's garbage collector abhors a naked circularity.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch13-pgfId-1783">See Also</A
></H3
><p class="para">The algorithms in this recipe derive in part from pages 206-207 of the wonderful textbook, <cite class="citetitle">Introduction to Algorithms</CITE
>, by Cormen, Leiserson, and Rivest (MIT Press/McGraw-Hill, 1990); see also the section <a class="olink" href="../prog/ch05_03.htm#PERL2-CH-5-SECT-3.9">"A Note on Garbage Collection"</A
> in <a class="olink" href="../prog/ch05_01.htm">Chapter 5</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
> and in <i class="filename">perlobj </I
>(1)</P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch13_13.htm" title="13.12. Solving the Data Inheritance Problem"><img src="../gifs/txtpreva.gif" alt="Previous: 13.12. Solving the Data Inheritance Problem" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch13_15.htm" title="13.14. Overloading Operators"><img src="../gifs/txtnexta.gif" alt="Next: 13.14. Overloading Operators" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">13.12. Solving the Data Inheritance Problem</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">13.14. Overloading Operators</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
