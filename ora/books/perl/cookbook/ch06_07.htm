<html><head>
<title>Recipe 6.6. Matching Multiple Lines</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:33:48Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch06_01.htm" title="6. Pattern Matching"><link rel="prev" href="ch06_06.htm" title="6.5. Finding the Nth Occurrence of a Match"><link rel="next" href="ch06_08.htm" title="6.7. Reading Records with a Pattern Separator"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch06_06.htm" title="6.5. Finding the Nth Occurrence of a Match"><img src="../gifs/txtpreva.gif" alt="Previous: 6.5. Finding the Nth Occurrence of a Match" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch06_01.htm" title="6. Pattern Matching">Chapter 6<br>Pattern Matching</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch06_08.htm" title="6.7. Reading Records with a Pattern Separator"><img src="../gifs/txtnexta.gif" alt="Next: 6.7. Reading Records with a Pattern Separator" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch06-14503">6.6. Matching Multiple Lines</A
></H2
><div class="sect2"><h3 class="sect2"><a class="title" name="ch06-pgfId-755">Problem<a class="indexterm" name="ch06-idx-1000007578-0"></A
><a class="indexterm" name="ch06-idx-1000007578-1"></A
><a class="indexterm" name="ch06-idx-1000007578-2"></A
><a class="indexterm" name="ch06-idx-1000007578-3"></A
><a class="indexterm" name="ch06-idx-1000007578-4"></A
></A
></H3
><p class="para">You want to use regular expressions on a string containing more than one line, but the special characters <code class="literal">.</CODE
> (any character but newline), <code class="literal">^</CODE
> (start of string), and <code class="literal">$</CODE
> (end of string) don't seem to work for you. This might happen if you're reading in multiline records or the whole file at once.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch06-pgfId-761">Solution</A
></H3
><p class="para">Use <code class="literal">/m</CODE
><a class="indexterm" name="ch06-idx-1000007582-0"></A
><a class="indexterm" name="ch06-idx-1000007582-1"></A
>, <code class="literal">/s</CODE
>, or both as pattern modifiers. <code class="literal">/s</CODE
> lets <code class="literal">.</CODE
> match newline (normally it doesn't). If the string had more than one line in it, then <code class="literal">/foo.*bar/s</CODE
> could match a <code class="literal">&quot;foo&quot;</CODE
> on one line and a <code class="literal">&quot;bar&quot;</CODE
> on a following line. This doesn't affect dots in character classes like <code class="literal">[#%.]</CODE
>, since they are regular periods anyway.</P
><p class="para">The <code class="literal">/m</CODE
> modifier lets <code class="literal">^</CODE
> and <code class="literal">$</CODE
> match next to a newline. <code class="literal">/^=head[1-7]$/m</CODE
> would match that pattern not just at the beginning of the record, but anywhere right after a newline as well.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch06-pgfId-769">Discussion</A
></H3
><p class="para">A common, brute-force approach to parsing documents where newlines are not significant is to read the file one paragraph at a time (or sometimes even the entire file as one string) and then extract tokens one by one. To match across newlines, you need to make <code class="literal">.</CODE
> match a newline; it ordinarily does not. In cases where newlines are important and you've read more than one line into a string, you'll probably prefer to have <code class="literal">^</CODE
> and <code class="literal">$</CODE
> match beginning- and end-of-line, not just beginning- and end-of-string.</P
><p class="para">The difference between <code class="literal">/m</CODE
> and <code class="literal">/s</CODE
> is important: <code class="literal">/m</CODE
> makes <code class="literal">^</CODE
> and <code class="literal">$</CODE
> match next to a newline, while <code class="literal">/s</CODE
> makes <code class="literal">.</CODE
> match newlines. You can even use them together &nbsp;- they're not mutually exclusive options.</P
><p class="para"><a class="xref" href="#ch06-10877" title="killtags">Example 6.2</A
> creates a filter to strip HTML tags out of each file in <code class="literal">@ARGV</CODE
> and send the results to STDOUT. First we undefine the record separator so each read operation fetches one entire file. (There could be more than one file, because <code class="literal">@ARGV</CODE
> has several arguments in it. In this case, each read would get a whole file.) Then we strip out instances of beginning and ending angle brackets, plus anything in between them. We can't use just <code class="literal">.*</CODE
> for two reasons: first, it would match closing angle brackets, and second, the dot wouldn't cross newline boundaries. Using <code class="literal">.*?</CODE
> in conjunction with <code class="literal">/s</CODE
> solves these problems &nbsp;-  at least in this case.</P
><div class="example"><h4 class="example"><a class="title" name="ch06-10877">Example 6.2: killtags</A
></H4
><pre class="programlisting">#!/usr/bin/perl
# <a class="indexterm" name="ch06-idx-1000007791-0"></A
>killtags - very bad html tag killer
undef $/;           # each read is whole file
while (&lt;&gt;) {        # get one whole file at a time
    s/&lt;.*?&gt;//gs;    # strip tags (terribly)
    print;          # print file to STDOUT
}</PRE
></DIV
><p class="para">Because this is just a single character, it would be much faster to use <code class="literal">s/&lt;[^&gt;]*&gt;//gs,</CODE
> but that's still a na–ve approach: It doesn't correctly handle tags inside HTML comments or angle brackets in quotes (&lt;<code class="literal">IMG</CODE
> <code class="literal">SRC=&quot;here.gif&quot;</CODE
> <code class="literal">ALT=&quot;&lt;&lt;Ooh</CODE
> <code class="literal">la</CODE
> <code class="literal">la!&gt;&gt;&quot;&gt;</CODE
>). <a class="xref" href="ch20_07.htm" title="Extracting or Removing HTML Tags">Recipe 20.6</A
> explains how to avoid these problems.</P
><p class="para"><a class="xref" href="#ch06-31611" title="headerfy">Example 6.3</A
> takes a plain text document and looks for lines at the start of paragraphs that look like <code class="literal">&quot;Chapter</CODE
> <code class="literal">20:</CODE
> <code class="literal">Better</CODE
> <code class="literal">Living</CODE
> <code class="literal">Through</CODE
> <code class="literal">Chemisery&quot;</CODE
>. It wraps these with an appropriate HTML level one header. Because the pattern is relatively complex, we use the <code class="literal">/x</CODE
> modifier so we can embed whitespace and comments.</P
><div class="example"><h4 class="example"><a class="title" name="ch06-31611">Example 6.3: headerfy</A
></H4
><pre class="programlisting">#!/usr/bin/perl
# <a class="indexterm" name="ch06-idx-1000007793-0"></A
>headerfy: change certain chapter headers to html
$/ = '';
while ( &lt;&gt; ) {              # fetch a paragraph
    s{
        \A                  # start of record
        (                   # capture in $1
            Chapter         # text string
            \s+             # mandatory whitespace
            \d+             # decimal number
            \s*             # optional whitespace
            :               # a real colon
            . *             # anything not a newline till end of line
        )
    }{&lt;H1&gt;$1&lt;/H1&gt;}gx;
    print;
}</PRE
></DIV
><p class="para">Here it is as a one-liner from the command line if those extended comments just get in the way of understanding:</P
><pre class="programlisting">% perl -00pe 's{\A(Chapter\s+\d+\s*:.*)}{&lt;H1&gt;$1&lt;/H1&gt;}gx' datafile</PRE
><p class="para">This problem is interesting because we need to be able to specify both start-of-record and end-of-line in the same pattern. We could normally use <code class="literal">^</CODE
> for start-of-record, but we need <code class="literal">$</CODE
> to indicate not only end-of-record, but also end-of-line as well. We add the <code class="literal">/m</CODE
> modifier, which changes both <code class="literal">^</CODE
> and <code class="literal">$</CODE
>. So instead of using <code class="literal">^</CODE
> to match beginning-of-record, we use <code class="literal">\A</CODE
> instead. (We're not using it here, but in case you're interested, the version of <code class="literal">$</CODE
> that always matches end-of-record even in the presence of <code class="literal">/m</CODE
> is <code class="literal">\Z</CODE
>.)</P
><p class="para">The following example demonstrates using both <code class="literal">/s</CODE
> and <code class="literal">/m</CODE
> together. That's because we want <code class="literal">^</CODE
> to match the beginning of any line in the paragraph and also want dot to be able to match a newline. (Because they are unrelated, using them together is simply the sum of the parts. If you have the questionable habit of using "single line" as a mnemonic for <code class="literal">/s</CODE
> and "multiple line" for <code class="literal">/m </CODE
>, then you may think you can't use them together.) The predefined variable <code class="literal">$.</CODE
> represents the record number of the last read file. The predefined variable <code class="literal">$ARGV</CODE
> is the file automatically opened by implicit <code class="literal">&lt;ARGV&gt;</CODE
> processing.</P
><pre class="programlisting">$/ = '';            # paragraph read mode for readline access
while (&lt;ARGV&gt;) {
    while (m#^START(.*?)^END#sm) {  # /s makes . span line boundaries
                                    # /m makes ^ match near newlines
        print &quot;chunk $. in $ARGV has &lt;&lt;$1&gt;&gt;\n&quot;;
    }
}</PRE
><p class="para">If you've already committed to using the <code class="literal">/m</CODE
> modifier, you can use <code class="literal">\A</CODE
> and <code class="literal">\Z</CODE
> to get the old meanings of <code class="literal">^</CODE
> and <code class="literal">$</CODE
> respectively. But what if you've used the <code class="literal">/s</CODE
> modifier and want to get the original meaning of <code class="literal">.</CODE
>? You can use <code class="literal">[^\n]</CODE
>. If you don't care to use <code class="literal">/s</CODE
> but want the notion of matching any character, you could construct a character class that matches any one byte, such as <code class="literal">[\000-\377]</CODE
> or even <code class="literal">[\d\D]</CODE
>. You can't use <code class="literal">[.\n]</CODE
> because <code class="literal">.</CODE
> is not special in a character <code class="literal"></CODE
><a class="indexterm" name="ch06-idx-1000007584-0"></A
><a class="indexterm" name="ch06-idx-1000007584-1"></A
>class.<a class="indexterm" name="ch06-idx-1000007573-0"></A
><a class="indexterm" name="ch06-idx-1000007573-1"></A
><a class="indexterm" name="ch06-idx-1000007573-2"></A
><a class="indexterm" name="ch06-idx-1000007573-3"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch06-pgfId-855">See Also</A
></H3
><p class="para">The <code class="literal">$/</CODE
> variable in <i class="filename">perlvar  </I
>(1) and in the <a class="olink" href="../prog/ch02_09.htm#PERL2-CH-2-SECT-9.4">"Special Variables"</A
> section of <a class="olink" href="../prog/ch02_01.htm">Chapter 2</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
>; the <code class="literal">/s</CODE
> and <code class="literal">/m</CODE
> modifiers in <i class="filename">perlre </I
>(1) and <a class="olink" href="../prog/ch02_04.htm#PERL2-CH-2-SECT-4.1.2">"the fine print"</A
> section of <a class="olink" href="../prog/ch02_01.htm">Chapter 2</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
>; the "String Anchors" section of <cite class="citetitle">Mastering Regular Expressions</CITE
>; we talk more about the special variable <code class="literal">$/</CODE
> in <a class="xref" href="ch08_01.htm" title="File Contents">Chapter 8</A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch06_06.htm" title="6.5. Finding the Nth Occurrence of a Match"><img src="../gifs/txtpreva.gif" alt="Previous: 6.5. Finding the Nth Occurrence of a Match" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch06_08.htm" title="6.7. Reading Records with a Pattern Separator"><img src="../gifs/txtnexta.gif" alt="Next: 6.7. Reading Records with a Pattern Separator" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">6.5. Finding the Nth Occurrence of a Match</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">6.7. Reading Records with a Pattern Separator</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
