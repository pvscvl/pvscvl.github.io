<html><head>
<title>Recipe 6.4.  Commenting Regular Expressions</TITLE>
<meta name="DC.title" content="Perl Cookbook"><meta name="DC.creator" content="Tom Christiansen &amp; Nathan Torkington"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:33:42Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-243-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch06_01.htm" title="6. Pattern Matching"><link rel="prev" href="ch06_04.htm" title="6.3. Matching Words"><link rel="next" href="ch06_06.htm" title="6.5. Finding the Nth Occurrence of a Match"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Perl Cookbook" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Perl Cookbook"><area shape="RECT" coords="467,0,514,18" href="../search/csrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch06_04.htm" title="6.3. Matching Words"><img src="../gifs/txtpreva.gif" alt="Previous: 6.3. Matching Words" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch06_01.htm" title="6. Pattern Matching">Chapter 6<br>Pattern Matching</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch06_06.htm" title="6.5. Finding the Nth Occurrence of a Match"><img src="../gifs/txtnexta.gif" alt="Next: 6.5. Finding the Nth Occurrence of a Match" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch06-chap06_commenting_0">6.4.  Commenting Regular Expressions</A
></H2
><div class="sect2"><h3 class="sect2"><a class="title" name="ch06-pgfId-1000007535">Problem<a class="indexterm" name="ch06-idx-1000007539-0"></A
><a class="indexterm" name="ch06-idx-1000007539-1"></A
></A
></H3
><p class="para">You want to make your complex regular expressions understandable and maintainable.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch06-pgfId-451">Solution</A
></H3
><p class="para">You have four techniques at your disposal: comments outside the pattern, comments inside the pattern with the <code class="literal">/x</CODE
> modifier, comments inside the replacement part of <code class="literal">s///</CODE
>, and alternate delimiters.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch06-pgfId-457">Discussion</A
></H3
><p class="para">The piece of sample code in <a class="xref" href="#ch06-16765" title="resname">Example 6.1</A
> uses all four techniques. The initial comment describes the overall intent of the regular expression. For relatively simple patterns, this may be all that is needed. More complex patterns, as in the example, will require more documentation.</P
><div class="example"><h4 class="example"><a class="title" name="ch06-16765">Example 6.1: resname</A
></H4
><pre class="programlisting">#!/usr/bin/perl -p
# resname - change all &quot;foo.bar.com&quot; style names in the input stream
# into &quot;foo.bar.com [204.148.40.9]&quot; (or whatever) instead

use Socket;                 # load inet_addr
s{                          #
    (                       # capture the hostname in $1
        (?:                 # these parens for grouping only
            (?! [-_]  )     # lookahead for neither underscore nor dash
            [\w-] +         # hostname component
            \.              # and the domain dot
        ) +                 # now repeat that whole thing a bunch of times
        [A-Za-z]            # next must be a letter
        [\w-] +             # now trailing domain part
    )                       # end of $1 capture
}{                          # replace with this:
    &quot;$1 &quot; .                 # the original bit, plus a space
           ( ($addr = gethostbyname($1))   # if we get an addr
            ? &quot;[&quot; . inet_ntoa($addr) . &quot;]&quot; #        format it
            : &quot;[???]&quot;                      # else mark dubious
           )
}gex;               # /g for global
                    # /e for execute
                    # /x for nice formatting</PRE
></DIV
><p class="para">For aesthetics, the example uses alternate delimiters. When you split your match or substitution over multiple lines, it helps readability to have matching braces. Another common reason to use alternate delimiters is when your pattern or replacement contains slashes, as in <code class="literal">s/\/\//\/..\//g</CODE
>, alternate delimiters makes such patterns easier to read, as in <code class="literal">s!//!/../!g</CODE
> or <code class="literal">s{//}{/../}g</CODE
>.</P
><p class="para">The <code class="literal">/x</CODE
><a class="indexterm" name="ch06-idx-1000007540-0"></A
> modifier makes Perl ignore most whitespace in the pattern (it still counts in a bracketed character class) and treat <code class="literal">#</CODE
> characters and their following text as comments. Although useful, this can prove troublesome if you want literal whitespace or <code class="literal">#</CODE
> characters in your pattern. If you do want these characters, you'll have to quote them with a backslash, as in the escaped pound signs here:</P
><pre class="programlisting">s/                  # replace
  \#                #   a pound sign
  (\w+)             #   the variable name
  \#                #   another pound sign
/${$1}/xg;          # with the value of the global variable</PRE
><p class="para">Remember that comments should explain the text, not just restate the code. Using <code class="literal">&quot;$i++</CODE
> <code class="literal">#</CODE
> <code class="literal">add</CODE
> <code class="literal">one</CODE
> <code class="literal">to</CODE
> <code class="literal">i&quot;</CODE
> is apt to lose marks in your programming course or get you talked about by your coworkers.</P
><p class="para">The final technique is <code class="literal">/e</CODE
><a class="indexterm" name="ch06-idx-1000010979-0"></A
>, which evaluates the replacement portion as a full Perl expression, not just as a (double-quote interpolated) string. The result of running this code is used as the replacement string. Because it is evaluated as code, you can put comments in it. This slows your code down somewhat, but not as much as you'd think (until you write a benchmark on your own, a good idea that will allow you to develop a feel for the efficiency of different constructs). That's because the right-hand side of the substitute is syntax-checked and compiled at compile-time along with the rest of your program. This may be overkill in the case of a simple string replacement, but it is marvelous for more complex cases.</P
><p class="para">Doubling up the <code class="literal">/e</CODE
> to make <code class="literal">/ee</CODE
><a class="indexterm" name="ch06-idx-1000010988-0"></A
> (or even more, like <code class="literal">/eee</CODE
>!) is like the <code class="literal">eval</CODE
><a class="indexterm" name="ch06-idx-1000010993-0"></A
> <code class="literal">&quot;STRING&quot;</CODE
> construct. This allows you to use lexical variables instead of globals in the previous replacement example.</P
><pre class="programlisting">s/                  # replace
\#                  #   a pound sign
(\w+)               #   the variable name
\#                  #   another pound sign
/'$' . $1/xeeg;     # with the value of *any* variable</PRE
><p class="para">After a <code class="literal">/ee</CODE
> substitution, you can test the <code class="literal">$@</CODE
> variable. It contains any error messages resulting from running your code, because this is real run-time code generation &nbsp;-  unlike <code class="literal">/e</CODE
>. <a class="indexterm" name="ch06-idx-1000007552-0"></A
><a class="indexterm" name="ch06-idx-1000007552-1"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch06-pgfId-1000007554">See Also</A
></H3
><p class="para">The <code class="literal">/x</CODE
> modifier in <i class="filename">perlre </I
>(1) and the <a class="olink" href="../prog/ch02_04.htm#PERL2-CH-2-SECT-4.1.2">"Pattern Matching"</A
> section of <a class="olink" href="../prog/ch02_01.htm">Chapter 2</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
>; the "Comments Within a Regular Expression" section of Chapter 7 of <cite class="citetitle">Mastering Regular Expressions</CITE
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch06_04.htm" title="6.3. Matching Words"><img src="../gifs/txtpreva.gif" alt="Previous: 6.3. Matching Words" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Perl Cookbook"><img src="../gifs/txthome.gif" alt="Perl Cookbook" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch06_06.htm" title="6.5. Finding the Nth Occurrence of a Match"><img src="../gifs/txtnexta.gif" alt="Next: 6.5. Finding the Nth Occurrence of a Match" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">6.3. Matching Words</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">6.5. Finding the Nth Occurrence of a Match</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
