<html><head>
<title>[Chapter 7] 7.6 The split and join Functions</TITLE>
<meta name="DC.title" content="Learning Perl on Win32 Systems"><meta name="DC.creator" content="Randal L. Schwartz, Erik Olson &amp; Tom Christiansen"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:33:47Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-324-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch07_01.htm" title="7. Regular Expressions"><link rel="prev" href="ch07_05.htm" title="7.5 Substitutions"><link rel="next" href="ch07_07.htm" title="7.7 Exercises"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Learning Perl on Win32 Systems" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,54" href="index.htm" alt="Learning Perl on Win32 Systems"><area shape="RECT" coords="467,0,514,18" href="../search/wsrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch07_05.htm" title="7.5 Substitutions"><img src="../gifs/txtpreva.gif" alt="Previous: 7.5 Substitutions" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch07_01.htm" title="7. Regular Expressions">Chapter 7<br>Regular Expressions</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch07_07.htm" title="7.7 Exercises"><img src="../gifs/txtnexta.gif" alt="Next: 7.7 Exercises" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch07-20083">7.6 The split and join Functions</A
></H2
><p class="para">Regular expressions can be used to break a string into fields. The <code class="literal">split</CODE
> function does this and the <code class="literal">join</CODE
> function glues the pieces back together.</P
><div class="sect2"><h3 class="sect2"><a class="title" name="ch07-pgfId-308058">7.6.1 The split Function</A
></H3
><p class="para">The <a class="indexterm" name="ch07-idx-308429-0"></A
><code class="literal">split</CODE
> function takes a <a class="indexterm" name="ch07-idx-308430-0"></A
>regular expression and a string and looks for all occurrences of the regular expression within that string. The parts of the string that don't match the regular expression are returned in sequence as a list of values. For example, here's something to parse semicolon-separated fields, such as the <code class="literal">PATH</CODE
> environment variable:</P
><pre class="programlisting">$line = &quot;c:\\;;c:\\windows\\;c:\\windows\\system;&quot;;
@fields = split(/;/,$line); # split $line, using ; as delimiter
# now @fields is (&quot;c:\&quot;, &quot;&quot;, &quot;c:\windows&quot;,&quot;c:\windows\system&quot;)</PRE
><p class="para">Note how the empty second field became an empty string. If you don't want this to happen, match all of the <a class="indexterm" name="ch07-idx-308457-0"></A
>semicolons in one fell swoop:</P
><pre class="programlisting">@fields = split(/;+/, $line);</PRE
><p class="para">This matches one or more adjacent semicolons together, so that there is no empty second field.</P
><p class="para">One common string to split is the <a class="indexterm" name="ch07-idx-307780-0"></A
><code class="literal">$_</CODE
> variable, and that turns out to be the default:</P
><pre class="programlisting">$_ = &quot;some string&quot;;
@words = split(/ /); # same as @words = split(/ /, $_);</PRE
><p class="para">For this split, consecutive spaces in the string to be split will cause null fields (empty strings) in the result. A better pattern would be <code class="literal">/ +/</CODE
>, or ideally <code class="literal">/\s+/</CODE
>, which matches one or more whitespace characters together. In fact, this pattern is the default pattern,[<a class="footnote" href="#ch07-pgfId-731">8</A
>] so if you're splitting the <code class="literal">$_</CODE
> variable on whitespace, you can use all the defaults and merely say:</P
><blockquote class="footnote"><div class="footnote"><p class="para"><a class="footnote" name="ch07-pgfId-731">[8]</A
> Actually, the <code class="literal">&quot;&quot;</CODE
> string is the default pattern, and this will cause leading whitespace to be ignored, but that's still close enough for this discussion.</P
></DIV
></BLOCKQUOTE
><pre class="programlisting">@words = split; # same as @words = split(/\s+/, $_);</PRE
><p class="para">Empty trailing fields do not normally become part of the list. This rule is not generally a concern. A solution like this:</P
><pre class="programlisting">$line = &quot;c:/;c:/windows;c:/windows/system;&quot;;
($first, $second, $third, $fourth) =
   split(/;/,$line); # split $line, using ; as delimiter</PRE
><p class="para">would simply give <code class="literal">$fourth</CODE
> a null (<a class="indexterm" name="ch07-idx-307781-0"></A
><code class="literal">undef</CODE
>) value if the line isn't long enough, or if it contained empty values in the last field. (Extra fields are silently ignored, because list assignment works that way.)</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch07-pgfId-308059">7.6.2 The join Function</A
></H3
><p class="para">The <a class="indexterm" name="ch07-idx-307782-0"></A
><code class="literal">join</CODE
> function takes a list of values and glues them together with a glue string between each list element. The function looks like this:</P
><pre class="programlisting">$bigstring = join($glue,@list);</PRE
><p class="para">For example, to rebuild the <code class="literal">PATH</CODE
> line, try something like:</P
><pre class="programlisting">$outline = join(&quot;;&quot;, @fields);</PRE
><p class="para">Note that the glue string is not a regular expression&nbsp;- just an ordinary string of zero or more characters.</P
><p class="para">If you need to get glue ahead of every item instead of just between items, a simple cheat suffices:</P
><pre class="programlisting">$result = join(&quot;+&quot;, &quot;&quot;, @fields);</PRE
><p class="para">Here, the extra <code class="literal">&quot;&quot;</CODE
> is treated as an empty element, to be glued together with the first data element of <code class="literal">@fields</CODE
>. This change results in glue ahead of every element. Similarly, you can get trailing glue with an empty element at the end of the list, like so:</P
><pre class="programlisting">$output = join (&quot;\n&quot;, @data, &quot;&quot;);</PRE
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch07_05.htm" title="7.5 Substitutions"><img src="../gifs/txtpreva.gif" alt="Previous: 7.5 Substitutions" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Learning Perl on Win32 Systems"><img src="../gifs/txthome.gif" alt="Learning Perl on Win32 Systems" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch07_07.htm" title="7.7 Exercises"><img src="../gifs/txtnexta.gif" alt="Next: 7.7 Exercises" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">7.5 Substitutions</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">7.7 Exercises</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
