<html><head>
<title>[Chapter 19] 19.4 Variants</TITLE>
<meta name="DC.title" content="Learning Perl on Win32 Systems"><meta name="DC.creator" content="Randal L. Schwartz, Erik Olson &amp; Tom Christiansen"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:37:19Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-324-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch19_01.htm" title="19. OLE Automation"><link rel="prev" href="ch19_03.htm#ch19-pgfId-87761" title="19.3 Using Automation Objects"><link rel="next" href="ch19_05.htm#ch19-pgfId-87285" title="19.5 Tips and Techniques"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Learning Perl on Win32 Systems" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,54" href="index.htm" alt="Learning Perl on Win32 Systems"><area shape="RECT" coords="467,0,514,18" href="../search/wsrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch19_03.htm#ch19-pgfId-87761" title="19.3 Using Automation Objects"><img src="../gifs/txtpreva.gif" alt="Previous: 19.3 Using Automation Objects" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch19_01.htm" title="19. OLE Automation">Chapter 19<br>OLE Automation</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch19_05.htm#ch19-pgfId-87285" title="19.5 Tips and Techniques"><img src="../gifs/txtnexta.gif" alt="Next: 19.5 Tips and Techniques" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch19-28955">19.4 Variants</A
></H2
><p class="para">In order for automation controllers and servers to cooperate, they have to have some way to agree on the type of data that they're passing. Automation accomplishes this through a data type called a <code class="literal">VARIANT</CODE
><a class="indexterm" name="ch19-idx-87532-0"></A
>. The <code class="literal">VARIANT</CODE
> data type is built on a C-language union. It contains a type field that identifies that type of data in the union (things such as strings, numbers, automation objects, etc.) and a field that contains the data.</P
><p class="para">Usually, Perl handles data-type conversion for you. If you need more control, though, you can create a <code class="literal">Variant</CODE
><a class="indexterm" name="ch19-idx-87533-0"></A
> object and specify the type yourself. Perl provides access to the types listed in <a class="xref" href="#ch19-13949" title="Variant Types">Table 19.3</A
>.</P
><br><table class="table" border="1" cellpadding="3"><caption class="table"><a class="title" name="ch19-13949">Table 19.3: Variant Types</A
></CAPTION
><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1"><p class="para">Variant Type</P
></TH
><th class="entry" align="LEFT" rowspan="1" colspan="1"><p class="para">Description</P
></TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">VT_UI1</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Unsigned character (1 byte)</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">VT_I2</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Signed integer (2 bytes)</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">VT_I4</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Signed integer (4 bytes)</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">VT_R4</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Floating point (4 bytes)</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">VT_R8</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Floating point (8 bytes)</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">VT_DATE</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">OLE Date (floating-point value measuring days since midnight, Dec. 30, 1899)</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">VT_BSTR</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">OLE String</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">VT_CY</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">OLE Currency</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">VT_BOOL</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">OLE Boolean</P
></TD
></TR
></TBODY
></TABLE
><p class="para">By default, Perl converts integer data to the VT_I4 type, string data to the VT_BSTR type, and floating-point data to the VT_R8 type. Usually, these conversions are what you'd expect, but let's look at how you might specify your own type:</P
><pre class="programlisting">$vt = new OLE::Variant(OLE::VT_DATE, &quot;May 31, 1997&quot; );
$Message-&gt;{TimeSent} = $vt;</PRE
><p class="para">This example first creates a Variant object, setting the type to <code class="literal">VT_DATE</CODE
> and the date to "May 31, 1997." It then assigns the date to the <code class="literal">Message</CODE
> object TimeSent property (something you might do if you were posting a message to a folder, for example).</P
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch19_03.htm#ch19-pgfId-87761" title="19.3 Using Automation Objects"><img src="../gifs/txtpreva.gif" alt="Previous: 19.3 Using Automation Objects" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Learning Perl on Win32 Systems"><img src="../gifs/txthome.gif" alt="Learning Perl on Win32 Systems" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch19_05.htm#ch19-pgfId-87285" title="19.5 Tips and Techniques"><img src="../gifs/txtnexta.gif" alt="Next: 19.5 Tips and Techniques" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">19.3 Using Automation Objects</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">19.5 Tips and Techniques</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
