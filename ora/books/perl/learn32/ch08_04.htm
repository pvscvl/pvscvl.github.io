<html><head>
<title>[Chapter 8] 8.4 Arguments</TITLE>
<meta name="DC.title" content="Learning Perl on Win32 Systems"><meta name="DC.creator" content="Randal L. Schwartz, Erik Olson &amp; Tom Christiansen"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:33:58Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-324-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch08_01.htm" title="8. Functions"><link rel="prev" href="ch08_03.htm" title="8.3 Return Values"><link rel="next" href="ch08_05.htm" title="8.5 Private Variables in Functions"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Learning Perl on Win32 Systems" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,54" href="index.htm" alt="Learning Perl on Win32 Systems"><area shape="RECT" coords="467,0,514,18" href="../search/wsrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch08_03.htm" title="8.3 Return Values"><img src="../gifs/txtpreva.gif" alt="Previous: 8.3 Return Values" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch08_01.htm" title="8. Functions">Chapter 8<br>Functions</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch08_05.htm" title="8.5 Private Variables in Functions"><img src="../gifs/txtnexta.gif" alt="Next: 8.5 Private Variables in Functions" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch08-21480">8.4 Arguments</A
></H2
><p class="para">Although subroutines that have one specific action are useful, a whole new level of usefulness becomes available when you can pass <a class="indexterm" name="ch08-idx-84171-0"></A
><a class="indexterm" name="ch08-idx-84171-1"></A
><em class="emphasis">arguments</EM
> to a subroutine. In Perl, the subroutine invocation (with the ampersand and the subroutine name) is followed by a list within parentheses, causing the list to be automatically assigned to a special variable named <a class="indexterm" name="ch08-idx-84172-0"></A
><code class="literal">@_</CODE
> for the duration of the subroutine. The subroutine can access this variable to determine the number of arguments and the value of those arguments. For example:</P
><pre class="programlisting">sub say_hello_to {
        print &quot;hello, $_[0]!\n&quot;; # first parameter is target
}</PRE
><p class="para">Here, we see a reference to <a class="indexterm" name="ch08-idx-84173-0"></A
><code class="literal">$_[0]</CODE
>, which is the first element of the <code class="literal">@_</CODE
> array. Special note: although similar in appearance, the <code class="literal">$_[0]</CODE
> value (the first element of the <code class="literal">@_</CODE
> array) has nothing whatsoever to do with the <code class="literal">$_</CODE
> variable (a scalar variable of its own). Don't confuse them! The code seems to say hello to whomever we pass as the first parameter. As a result, we can invoke it like this:</P
><pre class="programlisting">say_hello_to(&quot;world&quot;);                    # gives hello, world!
$x = &quot;somebody&quot;;
say_hello_to($x);                         # gives hello, somebody!
say_hello_to(&quot;me&quot;) + say_hello_to(&quot;you&quot;); # and me and you</PRE
><p class="para">Note that in the last line, the return values weren't really used. But in evaluating the sum, Perl has to evaluate all of its parts, so the subroutine was invoked twice.</P
><p class="para">Here's an example using more than one parameter:</P
><pre class="programlisting">sub say {
    print &quot;$_[0], $_[1]!\n&quot;;
}

say(&quot;hello&quot;,&quot;world&quot;);         # hello world, once again
say(&quot;goodbye&quot;,&quot;cruel world&quot;); # silent movie lament</PRE
><p class="para">Excess parameters are ignored: if you never look at <code class="literal">$_[3]</CODE
>, Perl doesn't care. And insufficient parameters are also ignored; you simply get <code class="literal">undef</CODE
> if you look beyond the end of the <code class="literal">@_</CODE
> array, as with any other array.</P
><p class="para">The <a class="indexterm" name="ch08-idx-84175-0"></A
><code class="literal">@_</CODE
> variable is <a class="indexterm" name="ch08-idx-84174-0"></A
><em class="emphasis">private</EM
> to the subroutine; if there's a global value for <code class="literal">@_</CODE
>, it is saved away before the subroutine is invoked and restored to its previous value upon return from the subroutine. This also means that a subroutine can pass arguments to another subroutine without fear of losing its own <code class="literal">@_</CODE
> variable; the nested subroutine invocation gets its own <code class="literal">@_</CODE
> in the same way.</P
><p class="para">Let's revisit that "add a and b" routine from the previous section. Here's a subroutine that adds any two values (specifically, the two values passed to the subroutine as parameters):</P
><pre class="programlisting">sub add_two {
        $_[0] + $_[1];
}
print add_two(3,4); # prints 7
$c = add_two(5,6);  # $c gets 11</PRE
><p class="para">Now let's generalize this subroutine. What if we had 3, 4, or 100 values to add together? We could do it with a loop, as shown:</P
><pre class="programlisting">sub add {
    $sum = 0;          # initialize the sum
    foreach $_ (@_) {
        $sum += $_;    # add each element
    }
    return $sum;       # the sum of all elements
}
$a = add(4,5,6);       # adds 4+5+6 = 15, and assigns to $a
print add(1,2,3,4,5);  # prints 15
print add(1..5);       # also prints 15, because 1..5 is expanded</PRE
><p class="para">What if we had a variable named <code class="literal">$sum</CODE
> when we called <code class="literal">add</CODE
>? We just clobbered it. In the next section, we see how to avoid this situation.</P
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch08_03.htm" title="8.3 Return Values"><img src="../gifs/txtpreva.gif" alt="Previous: 8.3 Return Values" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Learning Perl on Win32 Systems"><img src="../gifs/txthome.gif" alt="Learning Perl on Win32 Systems" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch08_05.htm" title="8.5 Private Variables in Functions"><img src="../gifs/txtnexta.gif" alt="Next: 8.5 Private Variables in Functions" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">8.3 Return Values</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">8.5 Private Variables in Functions</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
