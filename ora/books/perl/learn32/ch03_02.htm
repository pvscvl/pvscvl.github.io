<html><head>
<title>[Chapter 3] 3.2 Literal Representation</TITLE>
<meta name="DC.title" content="Learning Perl on Win32 Systems"><meta name="DC.creator" content="Randal L. Schwartz, Erik Olson &amp; Tom Christiansen"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:32:43Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-324-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch03_01.htm" title="3. Arrays and List Data"><link rel="prev" href="ch03_01.htm" title="3.1 What Is a List or Array?"><link rel="next" href="ch03_03.htm" title="3.3 Variables"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Learning Perl on Win32 Systems" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,54" href="index.htm" alt="Learning Perl on Win32 Systems"><area shape="RECT" coords="467,0,514,18" href="../search/wsrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch03_01.htm" title="3.1 What Is a List or Array?"><img src="../gifs/txtpreva.gif" alt="Previous: 3.1 What Is a List or Array?" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch03_01.htm" title="3. Arrays and List Data">Chapter 3<br>Arrays and List Data</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch03_03.htm" title="3.3 Variables"><img src="../gifs/txtnexta.gif" alt="Next: 3.3 Variables" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch03-28406">3.2 Literal Representation</A
></H2
><p class="para"><a class="indexterm" name="ch03-idx-642-0"></A
><a class="indexterm" name="ch03-idx-642-1"></A
>A <em class="emphasis">list literal</EM
> (the way you represent the value of a list within your program) consists of <a class="indexterm" name="ch03-idx-644-0"></A
>comma-separated values enclosed in <a class="indexterm" name="ch03-idx-645-0"></A
>parentheses. These values form the elements of the list. For example:</P
><pre class="programlisting">(1,2,3)      # array of three values 1, 2, and 3
(&quot;fred&quot;,4.5) # two values, &quot;fred&quot; and 4.5</PRE
><p class="para">The elements of a list are not necessarily constants&nbsp;- they can be <a class="indexterm" name="ch03-idx-685424-0"></A
>expressions that will be evaluated newly each time the literal is used. For example:</P
><pre class="programlisting">($a, 17)      # two values: the current value of $a, and 17
($b+$c,$d+$e) # two values</PRE
><p class="para">The <a class="indexterm" name="ch03-idx-685425-0"></A
><a class="indexterm" name="ch03-idx-685425-1"></A
><a class="indexterm" name="ch03-idx-685425-2"></A
>empty list (one of no elements) is represented by an empty pair of parentheses:</P
><pre class="programlisting">() # the empty list (zero elements)</PRE
><p class="para">An item of the list literal can include the <a class="indexterm" name="ch03-idx-685426-0"></A
><em class="emphasis">list constructor function</EM
>, indicated by two scalar values separated by <a class="indexterm" name="ch03-idx-685427-0"></A
>two consecutive periods. This function creates a list of values starting at the left scalar value and continuing up through the right scalar value, incrementing by one at each value. For example:</P
><pre class="programlisting">(1..5)       # same as (1, 2, 3, 4, 5)
(1.2..5.2)   # same as (1.2, 2.2, 3.2, 4.2, 5.2)
(2..6,10,12) # same as (2,3,4,5,6,10,12)
($a..$b)     # range determined by current values of $a and $b</PRE
><p class="para">Having the right scalar less than the left scalar results in an empty list; you can't count down by switching the order of the values. If the final value is not a whole number of steps above the initial value, the list stops just before the next value would have been outside the range:</P
><pre class="programlisting">(1.3..6.1) # same as (1.3,2.3,3.3,4.3,5.3)</PRE
><p class="para">List literals with lots of short text strings start to look pretty noisy with all the quotes and commas:</P
><pre class="programlisting">@a = (&quot;fred&quot;,&quot;barney&quot;,&quot;betty&quot;,&quot;wilma&quot;); # ugh!</PRE
><p class="para">Fortunately, Perl has a shortcut: the "quote-word" syntax, which creates a list from the nonwhitespace parts between the parentheses:</P
><pre class="programlisting">@a = qw(fred barney betty wilma); # better!
@a = qw(
        fred
        barney
        betty
        wilma
);                                # same thing</PRE
><p class="para">One use of a list literal is as arguments to the <a class="indexterm" name="ch03-idx-685428-0"></A
><code class="literal">print()</CODE
> function introduced earlier. Elements of the list are printed out without any intervening whitespace:</P
><pre class="programlisting">print(&quot;The answer is &quot;,$a,&quot;\n&quot;); # three element literal array</PRE
><p class="para">This statement prints "<code class="literal">The answer is</CODE
>" followed by a space, the value of <code class="literal">$a</CODE
>, and a newline. Stay tuned for other uses for list literals.</P
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch03_01.htm" title="3.1 What Is a List or Array?"><img src="../gifs/txtpreva.gif" alt="Previous: 3.1 What Is a List or Array?" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Learning Perl on Win32 Systems"><img src="../gifs/txthome.gif" alt="Learning Perl on Win32 Systems" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch03_03.htm" title="3.3 Variables"><img src="../gifs/txtnexta.gif" alt="Next: 3.3 Variables" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">3.1 What Is a List or Array?</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">3.3 Variables</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
