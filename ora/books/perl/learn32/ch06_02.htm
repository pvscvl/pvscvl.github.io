<html><head>
<title>[Chapter 6] 6.2 Input from the Diamond Operator</TITLE>
<meta name="DC.title" content="Learning Perl on Win32 Systems"><meta name="DC.creator" content="Randal L. Schwartz, Erik Olson &amp; Tom Christiansen"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:33:26Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-324-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch06_01.htm" title="6. Basic I/O"><link rel="prev" href="ch06_01.htm" title="6.1 Input from STDIN"><link rel="next" href="ch06_03.htm#ch06-pgfId-560917" title="6.3 Output to STDOUT"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Learning Perl on Win32 Systems" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,54" href="index.htm" alt="Learning Perl on Win32 Systems"><area shape="RECT" coords="467,0,514,18" href="../search/wsrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch06_01.htm" title="6.1 Input from STDIN"><img src="../gifs/txtpreva.gif" alt="Previous: 6.1 Input from STDIN" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch06_01.htm" title="6. Basic I/O">Chapter 6<br>Basic I/O</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch06_03.htm#ch06-pgfId-560917" title="6.3 Output to STDOUT"><img src="../gifs/txtnexta.gif" alt="Next: 6.3 Output to STDOUT" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch06-11805">6.2 Input from the Diamond Operator</A
></H2
><p class="para">Another way to read input is with the <a class="indexterm" name="ch06-idx-387-0"></A
>diamond operator: <code class="literal">&lt;&gt;</CODE
>. This operator works like <code class="literal">&lt;STDIN&gt;</CODE
> in that it returns a single line in a scalar context (<code class="literal">undef</CODE
> if all the lines have been read) or all remaining lines if used in a list context. However, unlike <code class="literal">&lt;STDIN&gt;</CODE
>, the diamond operator gets its data from the file or files specified on the <a class="indexterm" name="ch06-idx-390-0"></A
>command line that invoked the Perl program. For example, if you have a program named <em class="emphasis">type.plx</EM
>, consisting of:</P
><pre class="programlisting">while (&lt;&gt;) {
        print $_;
}</PRE
><p class="para">and you invoke <em class="emphasis">type.plx</EM
> with:</P
><pre class="programlisting"><b class="emphasis.bold">perl type.plx file1 file2 file3</B
></PRE
><p class="para">then the diamond operator reads each line of <code class="literal">file1</CODE
> followed by each line of <code class="literal">file2</CODE
> and <code class="literal">file3</CODE
> in turn, returning <code class="literal">undef</CODE
> only when all of the lines have been read. As you can see, <em class="emphasis">type.plx</EM
> works a little like the NT command <em class="emphasis">type</EM
>, sending all the lines of the named files to standard output in sequence. If you don't specify any filenames on the command line, the diamond operator reads from standard input automatically.</P
><p class="para">Technically, the diamond operator isn't looking literally at the command-line arguments; it works from the <a class="indexterm" name="ch06-idx-560852-0"></A
><code class="literal">@ARGV</CODE
> array. This array is a special array initialized by the Perl interpreter to the command-line arguments. Each command-line argument goes into a separate element of the <code class="literal">@ARGV</CODE
> array. You can interpret this list any way you want.[<a class="footnote" href="#ch06-pgfId-560911">2</A
>] You can even set this array within your program and have the diamond operator work on that new list rather than the command-line arguments, like so:</P
><blockquote class="footnote"><div class="footnote"><p class="para"><a class="footnote" name="ch06-pgfId-560911">[2]</A
> The <a class="indexterm" name="ch06-idx-560856-0"></A
>Perl standard distribution contains routines for parsing the command-line arguments of a Perl program. See <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
> for more information on the <a class="indexterm" name="ch06-idx-322-0"></A
><code class="literal">getopt</CODE
> library.</P
></DIV
></BLOCKQUOTE
><pre class="programlisting">@ARGV = (&quot;aaa&quot;,&quot;bbb&quot;,&quot;ccc&quot;);
while (&lt;&gt;) { # process files aaa, bbb, and ccc
        print &quot;this line is: $_&quot;;
}</PRE
><p class="para">In <a class="xref" href="ch10_01.htm" title="Filehandles and File Tests">Chapter 10, <cite class="chapter">Filehandles and File Tests</CITE
></A
>, we'll see how to open and close specific filenames at specific times, but the technique detailed here has been used for some of our quick-and-dirty programs.</P
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch06_01.htm" title="6.1 Input from STDIN"><img src="../gifs/txtpreva.gif" alt="Previous: 6.1 Input from STDIN" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Learning Perl on Win32 Systems"><img src="../gifs/txthome.gif" alt="Learning Perl on Win32 Systems" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch06_03.htm#ch06-pgfId-560917" title="6.3 Output to STDOUT"><img src="../gifs/txtnexta.gif" alt="Next: 6.3 Output to STDOUT" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">6.1 Input from STDIN</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">6.3 Output to STDOUT</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
