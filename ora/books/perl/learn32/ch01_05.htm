<html><head>
<title>[Chapter 1] 1.5 Basic Concepts</TITLE>
<meta name="DC.title" content="Learning Perl on Win32 Systems"><meta name="DC.creator" content="Randal L. Schwartz, Erik Olson &amp; Tom Christiansen"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:28:58Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-324-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch01_01.htm" title="1. Introduction"><link rel="prev" href="ch01_04.htm" title="1.4 Support"><link rel="next" href="ch01_06.htm#ch01-pgfId-869121" title="1.6 A Stroll Through Perl"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Learning Perl on Win32 Systems" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,54" href="index.htm" alt="Learning Perl on Win32 Systems"><area shape="RECT" coords="467,0,514,18" href="../search/wsrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch01_04.htm" title="1.4 Support"><img src="../gifs/txtpreva.gif" alt="Previous: 1.4 Support" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch01_01.htm" title="1. Introduction">Chapter 1<br>Introduction</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch01_06.htm#ch01-pgfId-869121" title="1.6 A Stroll Through Perl"><img src="../gifs/txtnexta.gif" alt="Next: 1.6 A Stroll Through Perl" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch01-37202">1.5 Basic Concepts</A
></H2
><p class="para">A Perl program is a bunch of Perl statements and definitions thrown into a file. You can execute the file by invoking the Perl interpreter with the script name as an argument. You will often see a line</P
><pre class="programlisting">#!/usr/bin/perl<a class="indexterm" name="ch01-idx-871650-0"></A
></PRE
><p class="para">as the first line of a Perl script. This line is a bit of magic employed by UNIX-like operating systems to automatically execute interpreted languages with the correct command interpreter. This line is called a <em class="emphasis">shebang</EM
><a class="indexterm" name="ch01-idx-871649-0"></A
> line due to the first two characters: <code class="literal">#</CODE
> is sometimes called sharp, and <code class="literal">!</CODE
> is sometimes called bang. This line normally won't work for Perl-for-Win32 users,[<a class="footnote" href="#ch01-pgfId-2362">5</A
>] although it doesn't hurt anything since Perl sees lines beginning with <code class="literal">#</CODE
> as comments.</P
><blockquote class="footnote"><div class="footnote"><p class="para"><a class="footnote" name="ch01-pgfId-2362">[5]</A
> However, there are Win32 ports of UNIX shells (e.g., <em class="emphasis">tcsh</EM
>, <em class="emphasis">ksh</EM
>, and <em class="emphasis">bash</EM
>) that do understand shebang lines. If you're using one of these shells, you can use shebang lines by specifying the path to your Perl interpreter. </P
></DIV
></BLOCKQUOTE
><p class="para">The invocation examples that follow assume that you have invoked the Windows NT command interpreter (<em class="emphasis">cmd.exe</EM
>) and are typing into a console window. You can run Perl scripts from the Explorer or the File Manager (assuming that you've associated the script extension with the Perl interpreter) by double-clicking on the script icon to launch it. Throughout this book, we're going to be discussing standard output and input streams; these are generally assumed to be your console window.</P
><p class="para">We recommend naming scripts with a <em class="emphasis">.plx</EM
><a class="indexterm" name="ch01-idx-871651-0"></A
> extension. Traditionally, Perl modules have a <em class="emphasis">.pm</EM
> extension, and Perl libraries have a <em class="emphasis">.pl</EM
> extension. The ActiveState installer prompts you to associate <em class="emphasis">.pl</EM
> with the interpreter.</P
><p class="para">You can always execute a script by calling the Perl interpreter with the script as an argument:</P
><pre class="programlisting">&gt; <b class="emphasis.bold">perl myscript.plx</B
></PRE
><p class="para">You can also associate files with the <em class="emphasis">.plx</EM
> extension (or another of your choosing) with the Perl interpreter, so that executing </P
><pre class="programlisting">&gt; <b class="emphasis.bold">myscript.plx</B
></PRE
><p class="para">will correctly invoke the Perl interpreter and execute your script. This step is normally done for you by the ActiveState installation script[<a class="footnote" href="#ch01-pgfId-2412">6</A
>] for the <em class="emphasis">.pl</EM
> extension, but if you wish to change the extension or if you've got the standard distribution, you can do this step manually. If you're using Windows NT 4.0 (or greater), the following commands will do the trick (use the full path to your interpreter):</P
><blockquote class="footnote"><div class="footnote"><p class="para"><a class="footnote" name="ch01-pgfId-2412">[6]</A
> This statement is not true if  you're using Windows 95, in which case you'll have to do the whole thing manually.  From an Explorer window, go to View/Options/File Types and add a new type with the <em class="emphasis">.pl</EM
> extension and the path to the Perl interpreter.</P
></DIV
></BLOCKQUOTE
><pre class="programlisting">&gt; <b class="emphasis.bold">assoc .plx=Perl</B
>
&gt; <b class="emphasis.bold">ftype Perl=c:\myperl\bin\perl.exe %1 %*</B
></PRE
><p class="para">If you can't bear the thought of typing the extension every time you execute a Perl script, you can set the <em class="emphasis">PATHEXT</EM
> environment variable so that it includes Perl scripts. For example:</P
><pre class="programlisting">&gt; <b class="emphasis.bold">set PATHEXT=%PATHEXT%;.PLX</B
></PRE
><p class="para">This setting will let you type</P
><pre class="programlisting">&gt; <b class="emphasis.bold">myscript</B
></PRE
><p class="para">without including the file extension. Take care when setting <em class="emphasis">PATHEXT</EM
> permanently&nbsp;- it also includes executable file types like <em class="emphasis">.COM</EM
>, <em class="emphasis">.EXE</EM
>, <em class="emphasis">.BAT</EM
>, and <em class="emphasis">.CMD</EM
>. If you inadvertently lose those extensions, you'll have difficulty invoking applications and script files.</P
><p class="para">Perl is mostly a free-format language like C&nbsp;- <a class="indexterm" name="ch01-idx-2416-0"></A
>whitespace between tokens (elements of the program, like <code class="literal">print</CODE
> or <code class="literal">+</CODE
>) is optional, unless two tokens placed together can be mistaken for another token, in which case whitespace of some kind is mandatory. (<a class="indexterm" name="ch01-idx-2418-0"></A
>Whitespace consists of spaces, tabs, newlines, returns, or formfeeds.) A few constructs require a certain kind of whitespace in a certain place, but they'll be pointed out when we get to them. You can assume that the kind and amount of whitespace between tokens is otherwise arbitrary.</P
><p class="para"><a class="indexterm" name="ch01-idx-2419-0"></A
>Although many interesting Perl programs can be written on one line, typically a Perl program is indented much like a C program, with nested parts of statements indented more than the surrounding parts. You'll see plenty of examples showing a typical indentation style throughout this book.</P
><p class="para">Just like a batch file, a Perl program consists of all of the Perl statements of the file taken collectively as one big routine to execute. Perl has no concept of a "<a class="indexterm" name="ch01-idx-2422-0"></A
>main" routine as in C.</P
><p class="para">Perl <a class="indexterm" name="ch01-idx-2423-0"></A
>comments are single-line comments (like <code class="literal">REM</CODE
> in a batch file or <code class="literal">//</CODE
> in a C++ or Java file). Anything from an unquoted <a class="indexterm" name="ch01-idx-2425-0"></A
>pound sign (<code class="literal">#</CODE
>) to the end-of-line is a comment. There are no C-like multiline comments.</P
><p class="para">Unlike the command shell, the <a class="indexterm" name="ch01-idx-2426-0"></A
><a class="indexterm" name="ch01-idx-2426-1"></A
>Perl interpreter completely parses and compiles the program before executing any of it. This means that you can never get a syntax error from a program once the program has started, and that the whitespace and comments simply disappear and won't slow the program down. In fact, this compilation phase ensures the rapid execution of Perl operations once execution starts, and provides additional motivation for dropping C as a systems utility language merely on the grounds that C is compiled.</P
><p class="para">This compilation does take time&nbsp;- it's inefficient to have a voluminous Perl program that does one small quick task (out of many potential tasks) and then exits, because the run-time for the program will be dwarfed by the compile time.</P
><p class="para">So, Perl is like a compiler and an interpreter. It's a compiler because the program is completely read and parsed before the first statement is executed. It's an interpreter because no object code sits around filling up disk space. In some ways, it's the best of both worlds. Admittedly, a caching of the compiled object code between invocations, or even translation into native machine code, would be nice. A working version of such a compiler already exists, and is currently scheduled to be bundled into the 5.005 release. See the Perl FAQ for the current status.</P
><div class="sect2"><h3 class="sect2"><a class="title" name="ch01-pgfId-4433">1.5.1 <a class="indexterm" name="ch01-idx-4465-0"></A
>Documentation</A
></H3
><p class="para">Throughout this book, we'll refer to the <a class="indexterm" name="ch01-idx-871652-0"></A
><a class="indexterm" name="ch01-idx-871652-1"></A
>documentation included with the Perl distributions. The ActiveState port comes with documentation in HTML format; you can find it in the <em class="emphasis">/docs</EM
> subdirectory of the distribution. When we refer to the documentation, we'll just refer to the base name of the file without the extension. For example, if we refer to <em class="emphasis">perlfunc</EM
>, we really mean <em class="emphasis">/docs/Perl/perlfunc.html</EM
>. Win32 specific documentation is located in the <em class="emphasis">/docs/Perl-Win32</EM
> subdirectory, so a reference to <em class="emphasis">win32ext</EM
> really refers to <em class="emphasis">/docs/Perl-Win32/win32ext.html</EM
>.</P
><p class="para">If you have the standard 5.004 distribution, you can use the <em class="emphasis">perldoc</EM
><a class="indexterm" name="ch01-idx-4466-0"></A
> command from the command line. <em class="emphasis">perldoc</EM
> is a batch file wrapper around a Perl script, found in the <em class="emphasis">/bin</EM
> directory of the distribution. <em class="emphasis">perldoc</EM
> lets you view documentation pages or module documentation by invoking it as follows:</P
><pre class="programlisting">&gt; <b class="emphasis.bold">perldoc perlfunc</B
></PRE
><p class="para"><em class="emphasis">perldoc</EM
> extracts the documentation from the Perl <a class="indexterm" name="ch01-idx-4470-0"></A
>POD (plain old documentation) format found in the <em class="emphasis">/pod</EM
> subdirectory of the distribution. If all else fails, you can just read the pod files with your favorite text editor.</P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch01_04.htm" title="1.4 Support"><img src="../gifs/txtpreva.gif" alt="Previous: 1.4 Support" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Learning Perl on Win32 Systems"><img src="../gifs/txthome.gif" alt="Learning Perl on Win32 Systems" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch01_06.htm#ch01-pgfId-869121" title="1.6 A Stroll Through Perl"><img src="../gifs/txtnexta.gif" alt="Next: 1.6 A Stroll Through Perl" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">1.4 Support</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">1.6 A Stroll Through Perl</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
