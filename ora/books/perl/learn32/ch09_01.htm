<html><head>
<title>[Chapter 9] Miscellaneous Control Structures</TITLE>
<meta name="DC.title" content="Learning Perl on Win32 Systems"><meta name="DC.creator" content="Randal L. Schwartz, Erik Olson &amp; Tom Christiansen"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:34:08Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-324-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="index.htm" title="Learning Perl on Win32 Systems"><link rel="prev" href="ch08_08.htm" title="8.8 Exercises"><link rel="next" href="ch09_02.htm" title="9.2 The next Statement"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Learning Perl on Win32 Systems" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,54" href="index.htm" alt="Learning Perl on Win32 Systems"><area shape="RECT" coords="467,0,514,18" href="../search/wsrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch08_08.htm" title="8.8 Exercises"><img src="../gifs/txtpreva.gif" alt="Previous: 8.8 Exercises" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 9</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch09_02.htm" title="9.2 The next Statement"><img src="../gifs/txtnexta.gif" alt="Next: 9.2 The next Statement" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="chapter"><h1 class="chapter"><a class="title" name="ch09-25353">9. Miscellaneous Control Structures</A
></H1
><div class="htmltoc"><p><b>Contents:</B
><br><a class="sect1" href="#ch09-12775" title="9.1 The last Statement">The last Statement</A
><br><a class="sect1" href="ch09_02.htm" title="9.2 The next Statement">The next Statement</A
><br><a class="sect1" href="ch09_03.htm" title="9.3 The redo Statement">The redo Statement</A
><br><a class="sect1" href="ch09_04.htm" title="9.4 Labeled Blocks">Labeled Blocks</A
><br><a class="sect1" href="ch09_05.htm" title="9.5 Expression Modifiers">Expression Modifiers</A
><br><a class="sect1" href="ch09_06.htm" title="9.6 &amp;&amp;, ||, and ?: as Control Structures">&amp;&amp;, ||, and ?: as Control Structures</A
><br><a class="sect1" href="ch09_07.htm" title="9.7 Exercises">Exercises</A
></P
><p></P
></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch09-12775">9.1 The last Statement</A
></H2
><p class="para"><a class="indexterm" name="ch09-idx-903228-0"></A
>In some of the previous exercises, you may have thought, "if I just had a C <code class="literal">break</CODE
><a class="indexterm" name="ch09-idx-903229-0"></A
> statement here, I'd be done." Even if you didn't think that, let me tell you about Perl's equivalent for getting out of a <a class="indexterm" name="ch09-idx-903230-0"></A
>loop early: the <code class="literal">last</CODE
> statement.</P
><p class="para">The <code class="literal">last</CODE
> statement breaks out of the innermost enclosing loop block,[<a class="footnote" href="#ch09-pgfId-525">1</A
>] causing execution to continue with the statement immediately following the block. For example:</P
><blockquote class="footnote"><div class="footnote"><p class="para"><a class="footnote" name="ch09-pgfId-525">[1]</A
> Note that the <code class="literal">do {} while/until</CODE
> construct does not count as a loop for purposes of <code class="literal">next</CODE
>, <code class="literal">last</CODE
>, and <code class="literal">redo</CODE
>.</P
></DIV
></BLOCKQUOTE
><pre class="programlisting"><a class="indexterm" name="ch09-idx-903233-0"></A
>while (<code class="replaceable"><i>something</I
></CODE
>) {
        <code class="replaceable"><i>something</I
></CODE
>;
        <code class="replaceable"><i>something</I
></CODE
>;
        <code class="replaceable"><i>something</I
></CODE
>;
        if (<code class="replaceable"><i>somecondition</I
></CODE
>) {
            <code class="replaceable"><i>somethingorother</I
></CODE
>;
            <code class="replaceable"><i>somethingorother</I
></CODE
>;
            last; # break out of the while loop
        }
        <code class="replaceable"><i>morethings</I
></CODE
>;
        <code class="replaceable"><i>morethings</I
></CODE
>;
}
# last comes here</PRE
><p class="para">If <code class="replaceable"><i>somecondition</I
></CODE
> is true, the <code class="replaceable"><i>somethingorother</I
></CODE
>s are executed, and then the <code class="literal">last</CODE
> forces the <code class="literal">while</CODE
> loop to terminate.</P
><p class="para">The <code class="literal">last</CODE
> statement counts only <a class="indexterm" name="ch09-idx-532-0"></A
><a class="indexterm" name="ch09-idx-532-1"></A
>looping blocks, not other blocks that are needed to make up some syntactic construct. As a result, the blocks for the <code class="literal">if</CODE
> and <code class="replaceable"><i>else</I
></CODE
> statement, as well as the one for a <code class="replaceable"><i>do</I
></CODE
> <code class="replaceable"><i>{}</I
></CODE
> <code class="replaceable"><i>while/until</I
></CODE
>, do not count; only the blocks that make up the <code class="literal">for</CODE
>, <code class="literal">foreach</CODE
>, <code class="literal">while</CODE
>, <code class="literal">until</CODE
>, and "naked" blocks count. (A <a class="indexterm" name="ch09-idx-534-0"></A
><a class="indexterm" name="ch09-idx-534-1"></A
>naked block is a block that is not otherwise part of a larger construct, such as a loop, subroutine, or <code class="literal">if</CODE
>/<code class="literal">then</CODE
>/<code class="literal">else</CODE
> statement.)</P
><p class="para"><a class="indexterm" name="ch09-idx-903234-0"></A
>Suppose we wanted to see whether a mail message that had been saved in a file was from Erik. Such a message might look like:</P
><pre class="programlisting">From: eriko@axtech.com (Erik Olson)
To: rdenn@ora.com
Date: 01-MAY-97 08:16:24 PM MDT -0700
Subject: A sample mail message

Here's the body of the mail message. And
here is some more.</PRE
><p class="para">We'd have to look through the message for a line that begins with <code class="literal">From:</CODE
>, and then notice whether the line also contains the login name, <code class="literal">eriko</CODE
>.</P
><p class="para">We could do it this way:</P
><pre class="programlisting">while (<a class="indexterm" name="ch09-idx-903256-0"></A
>&lt;STDIN&gt;) {           # read the input lines
         if (<a class="indexterm" name="ch09-idx-903255-0"></A
>/^From: /) {   # does it begin with From:? If yes...
             if (/eriko/) { # it's from Erik!
                 print &quot;Email from Erik! It's about time!\n&quot;;
             }
             last;          # no need to keep looking for From:, so exit
         }                  # end &quot;if from:&quot;
         if (/^$/) {        # blank line?
             last;          # if so, don't check any more lines
         }
}                           # end while</PRE
><p class="para">After the line starting with <code class="literal">From:</CODE
> is found, we exit the main loop because we want to see only the first <code class="literal">From:</CODE
> line. Also, because a mail message header ends at the first blank line, we can exit the main loop there as well.</P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch08_08.htm" title="8.8 Exercises"><img src="../gifs/txtpreva.gif" alt="Previous: 8.8 Exercises" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Learning Perl on Win32 Systems"><img src="../gifs/txthome.gif" alt="Learning Perl on Win32 Systems" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch09_02.htm" title="9.2 The next Statement"><img src="../gifs/txtnexta.gif" alt="Next: 9.2 The next Statement" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">8.8 Exercises</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">9.2 The next Statement</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
