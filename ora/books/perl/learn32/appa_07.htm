<html><head>
<title>[Appendix A] A.7 Chapter 8, Functions</TITLE>
<meta name="DC.title" content="Learning Perl on Win32 Systems"><meta name="DC.creator" content="Randal L. Schwartz, Erik Olson &amp; Tom Christiansen"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:37:33Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-324-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="appa_01.htm" title="A. Exercise Answers"><link rel="prev" href="appa_06.htm" title="A.6 Chapter 7, Regular Expressions"><link rel="next" href="appa_08.htm" title="A.8 Chapter 9, Miscellaneous Control Structures"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Learning Perl on Win32 Systems" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,54" href="index.htm" alt="Learning Perl on Win32 Systems"><area shape="RECT" coords="467,0,514,18" href="../search/wsrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="appa_06.htm" title="A.6 Chapter 7, Regular Expressions"><img src="../gifs/txtpreva.gif" alt="Previous: A.6 Chapter 7, Regular Expressions" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="appendix" rel="up" href="appa_01.htm" title="A. Exercise Answers">Appendix A<br>Exercise Answers</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="appa_08.htm" title="A.8 Chapter 9, Miscellaneous Control Structures"><img src="../gifs/txtnexta.gif" alt="Next: A.8 Chapter 9, Miscellaneous Control Structures" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="appa-23194">A.7 <a class="xref" href="ch08_01.htm" title="Functions">Chapter 8, Functions</A
></A
></H2
><ol class="orderedlist"><li class="listitem"><p class="para"><a class="listitem" name="appa-pgfId-179031"></A
>Here's one way to do it:</P
><pre class="programlisting"><a class="indexterm" name="appa-idx-178724-0"></A
><a class="indexterm" name="appa-idx-178724-1"></A
>sub card {
  my %card_map;
  @card_map{1..9} = qw(
    one two three four five six seven eight nine
  );

  <a class="indexterm" name="appa-idx-178723-0"></A
>my($num) = @_;
  if ($card_map{$num}) {
    $card_map{$num}; # return value
  } else {
    $num; # return value
  }
}
# driver routine:
while (<a class="indexterm" name="appa-idx-178725-0"></A
>&lt;&gt;) {
  chomp;
  print &quot;card of $_ is &quot;, &amp;card($_), &quot;\n&quot;;
}</PRE
><p class="para">The <code class="literal">&amp;card</CODE
> subroutine (so named because it returns a <em class="emphasis">cardinal</EM
> name for a given value) begins by initializing a constant hash called <code class="literal">%card_map</CODE
>. This array has values such that <code class="literal">$card_map{6}</CODE
> is <code class="literal">six</CODE
>; consequently, the mapping is easy.</P
><p class="para">The <code class="literal">if</CODE
> statement determines if the value is in range by looking the number up in the hash&nbsp;- if there's a corresponding hash element, the test is true, so that array element is returned. If there's no corresponding element (such as when <code class="literal">$num</CODE
> is <code class="literal">11</CODE
> or <code class="literal">-4</CODE
>), the value returned from the hash lookup is <code class="literal">undef</CODE
>, so the <code class="literal">else</CODE
>-branch of the <code class="literal">if</CODE
> statement is executed, returning the original number. You can also replace that entire <code class="literal">if</CODE
> statement with the single expression:</P
><pre class="programlisting">  $card_map{$num} || $num;</PRE
><p class="para">If the value on the left of the <a class="indexterm" name="appa-idx-181391-0"></A
><code class="literal">||</CODE
> is true, it's the value for the entire expression, which then gets returned. If it's false (such as when <code class="literal">$num</CODE
> is out of range), the right side of the <code class="literal">||</CODE
> operator is evaluated, returning <code class="literal">$num</CODE
> as the return value.</P
><p class="para">The driver routine takes successive lines, <code class="literal">chomp</CODE
>ing off their newlines, and hands them one at a time to the <code class="literal">&amp;card</CODE
> routine, printing the result.</P
></LI
><li class="listitem"><p class="para"><a class="listitem" name="appa-pgfId-179049"></A
>Here's one way to do it:</P
><pre class="programlisting">sub card { ...; } # from previous problem
print &quot;Enter first number: &quot;;
chomp($first = &lt;STDIN&gt;);
print &quot;Enter second number: &quot;;
chomp($second = &lt;STDIN&gt;);
$message = &amp;card($first) <a class="indexterm" name="appa-idx-178727-0"></A
>. &quot; plus &quot; .
  &amp;card($second) . &quot; equals &quot; .
  &amp;card($first+$second) . &quot;.\n&quot;;
print &quot;\u$message&quot;;</PRE
><p class="para">The first two <code class="literal">print</CODE
> statements prompt for two numbers, with the immediately following statements reading the values into <code class="literal">$first</CODE
> and <code class="literal">$second</CODE
>.</P
><p class="para">A string called <code class="literal">$message</CODE
> is then built up by calling <code class="literal">&amp;card</CODE
> three times, once for each value, and once for the sum.</P
><p class="para">After the message is constructed, its first character is uppercased by the case-shifting backslash operator <code class="literal">\u</CODE
>. The message is then printed.</P
></LI
><li class="listitem"><p class="para"><a class="listitem" name="appa-pgfId-179066"></A
>Here's one way to do it:</P
><pre class="programlisting">sub card {
  my %card_map;
  @card_map{0..9} = qw(
    zero one two three four five six seven eight nine
  );

  my($num) = @_;
  my($negative);
  if ($num &lt; 0) {
    $negative = &quot;negative &quot;;
    $num = - $num;
  }
  if ($card_map{$num}) {
    $negative . $card_map{$num}; # return value
  } else {
    $negative . $num; # return value
  }
}</PRE
><p class="para">Here, we've given the <code class="literal">%card_map</CODE
> array a name for 0.</P
><p class="para">The first <code class="literal">if</CODE
> statement inverts the sign of <code class="literal">$num</CODE
>, and sets <code class="literal">$negative</CODE
> to the word negative, if the number is found to be less than 0. After this <code class="literal">if</CODE
> statement, the value of <code class="literal">$num</CODE
> is always non-negative, but we will have an appropriate prefix string in <code class="literal">$negative</CODE
>.</P
><p class="para">The second <code class="literal">if</CODE
> statement determines if the (now positive) <code class="literal">$num</CODE
> is within the hash. If so, the resulting hash value is appended to the prefix within <code class="literal">$negative</CODE
>, and returned. If not, the value within <code class="literal">$negative</CODE
> is attached to the original number.</P
><p class="para">That last <code class="literal">if</CODE
> statement can be replaced with the expression:</P
><pre class="programlisting">  $negative . ($card_map{$num} || $num);</PRE
></LI
></OL
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="appa_06.htm" title="A.6 Chapter 7, Regular Expressions"><img src="../gifs/txtpreva.gif" alt="Previous: A.6 Chapter 7, Regular Expressions" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Learning Perl on Win32 Systems"><img src="../gifs/txthome.gif" alt="Learning Perl on Win32 Systems" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="appa_08.htm" title="A.8 Chapter 9, Miscellaneous Control Structures"><img src="../gifs/txtnexta.gif" alt="Next: A.8 Chapter 9, Miscellaneous Control Structures" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">A.6 Chapter 7, Regular Expressions</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">A.8 Chapter 9, Miscellaneous Control Structures</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
