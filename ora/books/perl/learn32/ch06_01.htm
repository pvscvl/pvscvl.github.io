<html><head>
<title>[Chapter 6] Basic I/O</TITLE>
<meta name="DC.title" content="Learning Perl on Win32 Systems"><meta name="DC.creator" content="Randal L. Schwartz, Erik Olson &amp; Tom Christiansen"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:33:24Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-324-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="index.htm" title="Learning Perl on Win32 Systems"><link rel="prev" href="ch05_06.htm" title="5.6 Exercises"><link rel="next" href="ch06_02.htm" title="6.2 Input from the Diamond Operator"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Learning Perl on Win32 Systems" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,54" href="index.htm" alt="Learning Perl on Win32 Systems"><area shape="RECT" coords="467,0,514,18" href="../search/wsrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch05_06.htm" title="5.6 Exercises"><img src="../gifs/txtpreva.gif" alt="Previous: 5.6 Exercises" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 6</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch06_02.htm" title="6.2 Input from the Diamond Operator"><img src="../gifs/txtnexta.gif" alt="Next: 6.2 Input from the Diamond Operator" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="chapter"><h1 class="chapter"><a class="title" name="ch06-19700">6. Basic I/O</A
></H1
><div class="htmltoc"><p><b>Contents:</B
><br><a class="sect1" href="#ch06-24716" title="6.1 Input from STDIN">Input from STDIN</A
><br><a class="sect1" href="ch06_02.htm" title="6.2 Input from the Diamond Operator">Input from the Diamond Operator</A
><br><a class="sect1" href="ch06_03.htm#ch06-pgfId-560917" title="6.3 Output to STDOUT">Output to STDOUT</A
><br><a class="sect1" href="ch06_04.htm" title="6.4 Exercises">Exercises</A
></P
><p></P
></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch06-24716">6.1 Input from STDIN</A
></H2
><p class="para"><a class="indexterm" name="ch06-idx-560831-0"></A
><a class="indexterm" name="ch06-idx-560831-1"></A
>Reading from standard input (via the Perl filehandle called <code class="literal">STDIN</CODE
>) is easy. We've been doing it already with the <a class="indexterm" name="ch06-idx-560845-0"></A
><code class="literal">&lt;STDIN&gt;</CODE
> construct. Evaluating this in a scalar context gives the next line of input,[<a class="footnote" href="#ch06-pgfId-560888">1</A
>] or <a class="indexterm" name="ch06-idx-560846-0"></A
><code class="literal">undef</CODE
> if there are no more lines, like so:</P
><blockquote class="footnote"><div class="footnote"><p class="para"><a class="footnote" name="ch06-pgfId-560888">[1]</A
> Up to a newline, or whatever you've set <a class="indexterm" name="ch06-idx-560847-0"></A
><code class="literal">$/</CODE
> to.</P
></DIV
></BLOCKQUOTE
><pre class="programlisting">$a = &lt;STDIN&gt;; # read the next line</PRE
><p class="para">Evaluating in a list context produces all remaining lines as a list: each element is one line, including its terminating newline. We've seen this before, but as a refresher, it might look something like this:</P
><pre class="programlisting">@a = &lt;STDIN&gt;;</PRE
><p class="para">Typically, one thing you want to do is read all lines one at a time and do something with each line. One common way to do this is:</P
><pre class="programlisting"><a class="indexterm" name="ch06-idx-362-0"></A
>while (defined($line_ = <a class="indexterm" name="ch06-idx-363-0"></A
>&lt;STDIN&gt;)) {
  # process $line here
}</PRE
><p class="para">As long as a line has been read in, <code class="literal">&lt;STDIN&gt;</CODE
> evaluates to a defined value, so the loop continues to execute. When <code class="literal">&lt;STDIN&gt;</CODE
> has no more lines to read, it returns <code class="literal">undef</CODE
>, terminating the loop.</P
><p class="para">Reading a scalar value from <code class="literal">&lt;STDIN&gt;</CODE
> into <code class="literal">$_</CODE
> and using that value as the controlling expression of a loop (as in the previous example) occurs frequently enough so that Perl has an abbreviation for it. Whenever a loop test consists solely of the input operator (something like <code class="literal">&lt;...&gt;</CODE
>), Perl automatically copies the line that is read into the <a class="indexterm" name="ch06-idx-560848-0"></A
><code class="literal">$_</CODE
> variable. For example:</P
><pre class="programlisting">while (&lt;STDIN&gt;) { # like &quot;while(defined($_ = &lt;STDIN&gt;_)&quot;
         chomp;   # like &quot;chomp($_)&quot;
                  # other operations with $_ here
}</PRE
><p class="para">Because the <code class="literal">$_</CODE
> variable is the default for many operations, you can save a noticeable amount of typing this way.</P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch05_06.htm" title="5.6 Exercises"><img src="../gifs/txtpreva.gif" alt="Previous: 5.6 Exercises" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Learning Perl on Win32 Systems"><img src="../gifs/txthome.gif" alt="Learning Perl on Win32 Systems" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch06_02.htm" title="6.2 Input from the Diamond Operator"><img src="../gifs/txtnexta.gif" alt="Next: 6.2 Input from the Diamond Operator" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">5.6 Exercises</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">6.2 Input from the Diamond Operator</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
