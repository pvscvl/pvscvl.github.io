<html><head>
<title>[Appendix A] A.9 Chapter 10, Filehandles and File Tests</TITLE>
<meta name="DC.title" content="Learning Perl on Win32 Systems"><meta name="DC.creator" content="Randal L. Schwartz, Erik Olson &amp; Tom Christiansen"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:37:36Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-324-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="appa_01.htm" title="A. Exercise Answers"><link rel="prev" href="appa_08.htm" title="A.8 Chapter 9, Miscellaneous Control Structures"><link rel="next" href="appa_10.htm" title="A.10 Chapter 11, Formats"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Learning Perl on Win32 Systems" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,54" href="index.htm" alt="Learning Perl on Win32 Systems"><area shape="RECT" coords="467,0,514,18" href="../search/wsrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="appa_08.htm" title="A.8 Chapter 9, Miscellaneous Control Structures"><img src="../gifs/txtpreva.gif" alt="Previous: A.8 Chapter 9, Miscellaneous Control Structures" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="appendix" rel="up" href="appa_01.htm" title="A. Exercise Answers">Appendix A<br>Exercise Answers</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="appa_10.htm" title="A.10 Chapter 11, Formats"><img src="../gifs/txtnexta.gif" alt="Next: A.10 Chapter 11, Formats" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="appa-34915">A.9 <a class="xref" href="ch10_01.htm" title="Filehandles and File Tests">Chapter 10, Filehandles and File Tests</A
></A
></H2
><ol class="orderedlist"><li class="listitem"><p class="para"><a class="listitem" name="appa-pgfId-178802"></A
>Here's one way to do it:</P
><pre class="programlisting">print &quot;What file? &quot;;
chomp($filename = &lt;STDIN&gt;);
<a class="indexterm" name="appa-idx-181374-0"></A
>open(THATFILE, &quot;$filename&quot;) ||
  die &quot;cannot open $filename: $!&quot;;
while (&lt;THATFILE&gt;) {
  print &quot;$filename: $_&quot;; # presume $_ ends in \n
}</PRE
><p class="para">The first two lines prompt for a filename, which is then opened with the filehandle <code class="literal">THATFILE</CODE
>. The contents of the file are read using the filehandle, and printed to <code class="literal">STDOUT</CODE
>.</P
></LI
><li class="listitem"><p class="para"><a class="listitem" name="appa-pgfId-178956"></A
>Here's one way to do it:</P
><pre class="programlisting">print &quot;Input file name: &quot;;
chomp($infilename = &lt;STDIN&gt;);
print &quot;Output file name: &quot;;
chomp($outfilename = &lt;STDIN&gt;);
print &quot;Search string: &quot;;
chomp($search = &lt;STDIN&gt;);
print &quot;Replacement string: &quot;;
chomp($replace = &lt;STDIN&gt;);
open(IN,$infilename) ||
  die &quot;cannot open $infilename for reading: $!&quot;;
## optional test for overwrite...
die &quot;will not overwrite $outfilename&quot; if -e $outfilename;
open(OUT,&quot;&gt;$outfilename&quot;) ||
  die &quot;cannot create $outfilename: $!&quot;;
while (&lt;IN&gt;) { # read a line from file IN into $_
  <a class="indexterm" name="appa-idx-178730-0"></A
>s/$search/$replace/g; # change the lines
  print OUT $_; # print that line to file OUT
}
close(IN);
close(OUT);</PRE
><p class="para">This program is based on the file-copying program presented earlier in the chapter. New features here include the prompts for the strings, the substitute command in the middle of the <code class="literal">while</CODE
> loop, and the test for overwriting a file. Note that backreferences in the regular expression do work, but references to memory in the replacement string do not.</P
></LI
><li class="listitem"><p class="para"><a class="listitem" name="appa-pgfId-179421"></A
>Here's one way to do it:</P
><pre class="programlisting">while (<a class="indexterm" name="appa-idx-178731-0"></A
>&lt;&gt;) {
  chomp; # eliminate the newline
  print &quot;$_ is readable\n&quot; if -r;
  print &quot;$_ is writable\n&quot; if -w;
  print &quot;$_ is executable\n&quot; if -x;
  print &quot;$_ does not exist\n&quot; unless -e;
}</PRE
><p class="para">This <code class="literal">while</CODE
> loop reads a filename each time through. After discarding the newline, the series of statements tests the file for the various permissions.</P
></LI
><li class="listitem"><p class="para"><a class="listitem" name="appa-pgfId-179430"></A
>Here's one way to do it:</P
><pre class="programlisting">while (&lt;&gt;) {
  chomp;
  $age = -M;
  if ($oldest_age &lt; $age) {
    $oldest_name = $_;
    $oldest_age = $age;
  }
}
print &quot;The oldest file is $oldest_name &quot;,
  &quot;and is $oldest_age days old.\n&quot;;</PRE
><p class="para">First, we loop on each filename being read in. The newline is discarded, and then the age (in days) gets computed with the <code class="literal">-M</CODE
> operator. If the age for this file exceeds the oldest file we've seen so far, we remember the filename and its corresponding age. Initially, <code class="literal">$oldest_age</CODE
> will be zero, so we're counting on there being at least one file that is more than zero days old.</P
><p class="para">The final <code class="literal">print</CODE
> statement generates the report when we're done.</P
></LI
></OL
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="appa_08.htm" title="A.8 Chapter 9, Miscellaneous Control Structures"><img src="../gifs/txtpreva.gif" alt="Previous: A.8 Chapter 9, Miscellaneous Control Structures" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Learning Perl on Win32 Systems"><img src="../gifs/txthome.gif" alt="Learning Perl on Win32 Systems" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="appa_10.htm" title="A.10 Chapter 11, Formats"><img src="../gifs/txtnexta.gif" alt="Next: A.10 Chapter 11, Formats" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">A.8 Chapter 9, Miscellaneous Control Structures</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">A.10 Chapter 11, Formats</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
