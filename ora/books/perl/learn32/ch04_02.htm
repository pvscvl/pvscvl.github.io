<html><head>
<title>[Chapter 4] 4.2 The if/unless Statement</TITLE>
<meta name="DC.title" content="Learning Perl on Win32 Systems"><meta name="DC.creator" content="Randal L. Schwartz, Erik Olson &amp; Tom Christiansen"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:33:03Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-324-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch04_01.htm" title="4. Control Structures"><link rel="prev" href="ch04_01.htm" title="4.1 Statement Blocks"><link rel="next" href="ch04_03.htm" title="4.3 The while/until Statement"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Learning Perl on Win32 Systems" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,54" href="index.htm" alt="Learning Perl on Win32 Systems"><area shape="RECT" coords="467,0,514,18" href="../search/wsrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch04_01.htm" title="4.1 Statement Blocks"><img src="../gifs/txtpreva.gif" alt="Previous: 4.1 Statement Blocks" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch04_01.htm" title="4. Control Structures">Chapter 4<br>Control Structures</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch04_03.htm" title="4.3 The while/until Statement"><img src="../gifs/txtnexta.gif" alt="Next: 4.3 The while/until Statement" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch04-31636">4.2 The if/unless Statement</A
></H2
><p class="para">Next up in order of complexity is the <a class="indexterm" name="ch04-idx-459-0"></A
><code class="literal">if</CODE
> statement. This construct takes a <a class="indexterm" name="ch04-idx-461-0"></A
>control expression (evaluated for its truth) and a block. It may optionally have an <em class="emphasis">else</EM
> followed by a block as well. In other words, it looks like this:</P
><pre class="programlisting">if (<code class="replaceable"><i>some_expression</I
></CODE
>) {
        <code class="replaceable"><i>true_statement_1</I
></CODE
>;
        <code class="replaceable"><i>true_statement_2</I
></CODE
>;
        <code class="replaceable"><i>true_statement_3</I
></CODE
>;
} <a class="indexterm" name="ch04-idx-437551-0"></A
>else {
        <code class="replaceable"><i>false_statement_1</I
></CODE
>;
        <code class="replaceable"><i>false_statement_2</I
></CODE
>;
        <code class="replaceable"><i>false_statement_3</I
></CODE
>;
}</PRE
><p class="para">(If you're a C or Java hacker, you should note that the <a class="indexterm" name="ch04-idx-467-0"></A
>curly braces are <em class="emphasis">required</EM
>. This eliminates the need for a "<a class="indexterm" name="ch04-idx-469-0"></A
>confusing dangling else" rule.)</P
><p class="para">During execution, Perl evaluates the control expression. If the expression is true, the first block (the <code class="replaceable"><i>true_statement</I
></CODE
> statements above) is executed. If the expression is false, the second block (the <code class="replaceable"><i>false_statement</I
></CODE
> statements above) is executed instead.</P
><p class="para">But what constitutes <a class="indexterm" name="ch04-idx-685-0"></A
><a class="indexterm" name="ch04-idx-685-1"></A
>true and false? In Perl, the rules are slightly weird, but they give you the expected results. The control expression is evaluated for a <em class="emphasis">string</EM
> value in scalar context (if it's already a string, no change is made; but if it's a number, it is converted to a string[<a class="footnote" href="#ch04-pgfId-689">1</A
>] ). If this string is either the empty string (with a length of zero) <em class="emphasis">or</EM
> a string consisting of the single character <code class="literal">0</CODE
> (the digit zero), then the value of the expression is false. Anything else is true automatically. Why such funny rules? Because they facilitate branching on an emptyish versus nonempty string, as well as on a zero versus nonzero number, without having to create two versions of interpreting true and false values. Here are some examples of true and false interpretations:</P
><blockquote class="footnote"><div class="footnote"><p class="para"><a class="footnote" name="ch04-pgfId-689">[1]</A
> Internally, this isn't quite true. But it acts as if this is what it does.</P
></DIV
></BLOCKQUOTE
><pre class="programlisting">0       # converts to &quot;0&quot;, so false
1-1     # computes to 0, then converts to &quot;0&quot;, so false
1       # converts to &quot;1&quot;, so true
&quot;&quot;      # empty string, so false
&quot;1&quot;     # not &quot;&quot; or &quot;0&quot;, so true
&quot;00&quot;    # not &quot;&quot; or &quot;0&quot;, so true (this one is weird, watch out)
&quot;0.000&quot; # also true for the same reason and warning
undef   # evaluates to &quot;&quot;, so false</PRE
><p class="para">Practically speaking, interpretation of values as true or false is fairly intuitive. Don't let us scare you.</P
><p class="para">Here's an example of a complete <a class="indexterm" name="ch04-idx-437536-0"></A
><code class="literal">if</CODE
> statement:</P
><pre class="programlisting">print &quot;how old are you? &quot;;
$a = &lt;STDIN&gt;;
chomp($a);
if ($a &lt; 18) {
        print &quot;So, you're not old enough to vote, eh?\n&quot;;
} else {
        print &quot;Old enough!  Cool!  So go vote!\n&quot;;
        $voter++; # count the voters for later
}</PRE
><p class="para">You can omit the <code class="literal">else</CODE
> block, leaving just a <em class="emphasis">then</EM
> part, as in:</P
><pre class="programlisting">print &quot;how old are you? &quot;;
$a = &lt;STDIN&gt;;
chomp($a);
if ($a &lt; 18) {
        print &quot;So, you<i class="lineannotation">'</I
>re not old enough to vote, eh?\n&quot;;
}</PRE
><p class="para">Sometimes, you want to leave off the <em class="emphasis">then</EM
> part and have just an <code class="literal">else</CODE
> part, because saying "do that if this is false," is more natural than saying "do that if not this is true." Perl handles this case with the <a class="indexterm" name="ch04-idx-437537-0"></A
><code class="literal">unless</CODE
> variation:</P
><pre class="programlisting">print &quot;how old are you? &quot;;
$a = &lt;STDIN&gt;;
chomp($a);
unless ($a &lt; 18) {
        print &quot;Old enough!  Cool!  So go vote!\n&quot;;
        $voter++;
}</PRE
><p class="para">Replacing <code class="literal">if</CODE
> with <code class="literal">unless</CODE
> is in effect saying, "If the control expression is false, do..." (An <code class="literal">unless</CODE
> can also have an <code class="literal">else</CODE
>, just like an <code class="literal">if</CODE
>.)</P
><p class="para">If you have more than two possible choices, add an <code class="literal">elsif</CODE
> branch to the <code class="literal">if</CODE
> statement, like so:</P
><pre class="programlisting">if (<code class="replaceable"><i>some_expression_one</I
></CODE
>) {
        <code class="replaceable"><i>one_true_statement_1</I
></CODE
>;
        <code class="replaceable"><i>one_true_statement_2</I
></CODE
>;
        <code class="replaceable"><i>one_true_statement_3</I
></CODE
>;
} <a class="indexterm" name="ch04-idx-437552-0"></A
>elsif (<code class="replaceable"><i>some_expression_two</I
></CODE
>) {
        <code class="replaceable"><i>two_true_statement_1</I
></CODE
>;
        <code class="replaceable"><i>two_true_statement_2</I
></CODE
>;
        <code class="replaceable"><i>two_true_statement_3</I
></CODE
>;
} elsif (<code class="replaceable"><i>some_expression_three</I
></CODE
>) {
        <code class="replaceable"><i>three_true_statement_1</I
></CODE
>;
        <code class="replaceable"><i>three_true_statement_2</I
></CODE
>;
        <code class="replaceable"><i>three_true_statement_3</I
></CODE
>;
} else {
        <code class="replaceable"><i>all_false_statement_1</I
></CODE
>;
        <code class="replaceable"><i>all_false_statement_2</I
></CODE
>;
        <code class="replaceable"><i>all_false_statement_3</I
></CODE
>;
}</PRE
><p class="para">Each expression (here, <code class="replaceable"><i>some_expression_one</I
></CODE
>, <code class="replaceable"><i>some_expression_two</I
></CODE
>, and <code class="replaceable"><i>some_expression_three</I
></CODE
>) is computed in turn. If an expression is true, the corresponding branch is executed, and all remaining control expressions and corresponding statement blocks are skipped. If all expressions are false, the <code class="literal">else</CODE
> branch is executed (if there is one). You don't have to have an <code class="literal">else</CODE
> block, but having one is always a good idea. You may have as many <code class="literal">elsif</CODE
> branches as you wish.</P
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch04_01.htm" title="4.1 Statement Blocks"><img src="../gifs/txtpreva.gif" alt="Previous: 4.1 Statement Blocks" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Learning Perl on Win32 Systems"><img src="../gifs/txthome.gif" alt="Learning Perl on Win32 Systems" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch04_03.htm" title="4.3 The while/until Statement"><img src="../gifs/txtnexta.gif" alt="Next: 4.3 The while/until Statement" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">4.1 Statement Blocks</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">4.3 The while/until Statement</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
