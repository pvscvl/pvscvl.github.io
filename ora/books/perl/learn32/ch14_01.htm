<html><head>
<title>[Chapter 14] Process Management</TITLE>
<meta name="DC.title" content="Learning Perl on Win32 Systems"><meta name="DC.creator" content="Randal L. Schwartz, Erik Olson &amp; Tom Christiansen"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:35:41Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-324-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="index.htm" title="Learning Perl on Win32 Systems"><link rel="prev" href="ch13_06.htm" title="13.6 Exercises"><link rel="next" href="ch14_02.htm" title="14.2 Using Backquotes"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Learning Perl on Win32 Systems" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,54" href="index.htm" alt="Learning Perl on Win32 Systems"><area shape="RECT" coords="467,0,514,18" href="../search/wsrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch13_06.htm" title="13.6 Exercises"><img src="../gifs/txtpreva.gif" alt="Previous: 13.6 Exercises" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 14</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch14_02.htm" title="14.2 Using Backquotes"><img src="../gifs/txtnexta.gif" alt="Next: 14.2 Using Backquotes" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="chapter"><h1 class="chapter"><a class="title" name="ch14-40824">14. Process Management</A
></H1
><div class="htmltoc"><p><b>Contents:</B
><br><a class="sect1" href="#ch14-23962" title="14.1 Using system and exec">Using system and exec</A
><br><a class="sect1" href="ch14_02.htm" title="14.2 Using Backquotes">Using Backquotes</A
><br><a class="sect1" href="ch14_03.htm" title="14.3 Using Processes as Filehandles">Using Processes as Filehandles</A
><br><a class="sect1" href="ch14_04.htm" title="14.4 Summary of Process Operations">Summary of Process Operations</A
><br><a class="sect1" href="ch14_05.htm" title="14.5 Win32::Process">Win32::Process</A
><br><a class="sect1" href="ch14_06.htm" title="14.6 Exercises">Exercises</A
></P
><p></P
></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch14-23962">14.1 Using system and exec</A
></H2
><p class="para">Like the command shell, a Perl program can <a class="indexterm" name="ch14-idx-744310-0"></A
><a class="indexterm" name="ch14-idx-744310-1"></A
>launch new processes, and like most other operations, has more than one way to do so.</P
><p class="para">The simplest way to launch a new process is to use the <a class="indexterm" name="ch14-idx-744311-0"></A
><code class="literal">system</CODE
> function. In its simplest form, this function hands a single string to a brand new command shell to be executed as a command. When the command is finished, the <code class="literal">system</CODE
> function returns the exit value of the command (typically <code class="literal">0</CODE
> if everything went OK). Here's an example of a Perl program executing a <em class="emphasis">dir</EM
> command using a shell:</P
><pre class="programlisting">system(&quot;dir&quot;);</PRE
><p class="para">We're ignoring the return value here, but the <em class="emphasis">dir</EM
> command is not likely to fail anyway.</P
><p class="para">Where does the command's output go? In fact, where does the input come from, if it was a command that wanted input? These are good questions, and the answers to these questions are most of what distinguishes the various forms of process creation.</P
><p class="para">For the <code class="literal">system</CODE
> function, the three standard files (standard input, standard output, and standard error) are inherited from the Perl process. So, for the <em class="emphasis">dir</EM
> command in the previous example, the output goes wherever the <code class="literal">print</CODE
> <code class="literal">STDOUT</CODE
> output goes&nbsp;- probably to the invoker's command prompt. Because you are firing off another command shell, you can change the location of the standard output using the normal<em class="emphasis"> </EM
>I/O redirections. For example, to put the output of the <em class="emphasis">directory </EM
>command into a file named <em class="emphasis">this_dir</EM
>, something like this will work just fine:</P
><pre class="programlisting">system(&quot;dir &gt;this_dir&quot;) &amp;&amp; die &quot;cannot create this_dir&quot;;</PRE
><p class="para">This time, we not only send the output of the <em class="emphasis">dir</EM
> command into a file with a redirection to the new command shell, but also check the return status. If the <a class="indexterm" name="ch14-idx-744313-0"></A
>return status is true (nonzero), something went wrong with the shell command, and the <code class="literal">die</CODE
> function will do its deed. This is backwards from normal Perl operator convention&nbsp;- a nonzero return value from the <code class="literal">system</CODE
> operator generally indicates that something went wrong. You can feed anything to the <code class="literal">system</CODE
> function that you can feed to your command shell.</P
><p class="para">Here's an example of generating a <em class="emphasis">dir</EM
> command and sending the output to a filename specified by a Perl variable:</P
><pre class="programlisting">$where = &quot;dir_out.&quot;.<a class="indexterm" name="ch14-idx-744374-0"></A
>++$i; # get a new filename
system &quot;dir &gt;$where&quot;;</PRE
><p class="para">The double-quoted string is <a class="indexterm" name="ch14-idx-745086-0"></A
>variable interpolated, so Perl replaces <code class="literal">$where</CODE
> with its value. </P
><p class="para">In addition to the standard filehandles, the current directory and the environment variables are inherited by the child. These variables are typically created by the command shell <em class="emphasis">set</EM
> command and accessed or altered using the <em class="emphasis">%KEYNAME%</EM
> construct. Environment variables are used by many utilities, including the command shell itself, to alter or control the way that utility operates.</P
><p class="para">Perl gives you a way to examine and alter current <a class="indexterm" name="ch14-idx-744323-0"></A
>environment variables through a special hash called <a class="indexterm" name="ch14-idx-744322-0"></A
><code class="literal">%ENV</CODE
> (uppercase). Each key of this hash corresponds to the name of an environment variable, with the corresponding value being, well, the corresponding value. Examining this hash shows you the environment handed to Perl by the parent process&nbsp;- altering the array affects the environment used by Perl and by its children processes, but not that of its parents.</P
><p class="para">For example, here's a simple program that prints out all of your environment variables:</P
><pre class="programlisting">foreach $key (sort keys %ENV) {
        print &quot;$key=$ENV{$key}\n&quot;;
}</PRE
><p class="para">Note that the equal sign here is not an assigment, but simply a text character that the <code class="literal">print</CODE
> function is using to say stuff like <code class="literal">USERNAME=eriko</CODE
> or <code class="literal">COMSPEC=c:\nt\system32\cmd.exe</CODE
>.</P
><p class="para">Here's a program snippet that alters the value of <a class="indexterm" name="ch14-idx-744325-0"></A
><code class="literal">PATH</CODE
> to make sure that the <em class="emphasis">nmake </EM
>command run by <a class="indexterm" name="ch14-idx-744327-0"></A
><code class="literal">system</CODE
> is looked for only in the correct places:</P
><pre class="programlisting">$oldPATH = $ENV{&quot;PATH&quot;};            # save previous path
$ENV{&quot;PATH&quot;} = &quot;c:\\msdev\\bin;c:\\winnt;c:\\winnt\\system32&quot;; 
                                    # force known path
system(&quot;nmake myproj.mak &gt;output&quot;); # run command
$ENV{&quot;PATH&quot;} = $oldPATH;            # restore previous path</PRE
><p class="para">That's a lot of typing. It'd be faster just to set a local value for this hash element.</P
><p class="para">Despite its other shortcomings, the <code class="literal">local</CODE
> operator can do one thing that <code class="literal">my</CODE
> cannot: it can give just one element of an array or a hash a temporary value. For example:</P
><pre class="programlisting">{
    local $ENV{&quot;PATH&quot;} = 
    &quot;c:\\msdev\\bin;c:\\winnt;c:\\winnt\\system32&quot;;
    system(&quot;nmake fred bedrock &gt;output&quot;);
}</PRE
><p class="para">The <a class="indexterm" name="ch14-idx-745153-0"></A
><code class="literal">system</CODE
> function can also take a list of arguments rather than a single argument. In this case, rather than handing the list of arguments off to a <a class="indexterm" name="ch14-idx-745155-0"></A
>command shell, Perl treats the first argument as the command to run (located according to the <code class="literal">PATH</CODE
> if necessary) and the remaining arguments as arguments to the command <em class="emphasis">without</EM
> normal shell interpretation. In other words, you don't need to quote whitespace or worry about arguments that contain angle brackets because those are all merely characters to hand to the program. So, the following two commands are equivalent:</P
><pre class="programlisting">system &quot;nmake 'fred flintstone.mak' buffaloes&quot;;   # using command shell
system &quot;nmake&quot;,&quot;fred flintstone.mak&quot;,&quot;buffaloes&quot;; # using list</PRE
><p class="para">Giving <code class="literal">system</CODE
> a list rather than giving it a simple string saves one command shell process as well, so do this when you can. (In fact, when the one-argument form of <code class="literal">system</CODE
> is simple enough, Perl itself optimizes away the shell invocation entirely, calling the resulting program directly as if you had used the multiple-argument invocation.)</P
><p class="para">Here's another example of equivalent forms:</P
><pre class="programlisting">@cfiles = (&quot;fred.c&quot;,&quot;barney.c&quot;);           # what to compile
@options = (&quot;-DHARD&quot;,&quot;-DGRANITE&quot;);         # options
system &quot;cc -o slate @options @cfiles&quot;;     # using shell
system &quot;cc&quot;,&quot;-o&quot;,&quot;slate&quot;,@options,@cfiles; # avoiding shell</PRE
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch13_06.htm" title="13.6 Exercises"><img src="../gifs/txtpreva.gif" alt="Previous: 13.6 Exercises" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Learning Perl on Win32 Systems"><img src="../gifs/txthome.gif" alt="Learning Perl on Win32 Systems" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch14_02.htm" title="14.2 Using Backquotes"><img src="../gifs/txtnexta.gif" alt="Next: 14.2 Using Backquotes" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">13.6 Exercises</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">14.2 Using Backquotes</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
