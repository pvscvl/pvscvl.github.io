<html><head>
<title>[Appendix A] A.3 Chapter 4, Control Structures</TITLE>
<meta name="DC.title" content="Learning Perl on Win32 Systems"><meta name="DC.creator" content="Randal L. Schwartz, Erik Olson &amp; Tom Christiansen"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:37:27Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-324-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="appa_01.htm" title="A. Exercise Answers"><link rel="prev" href="appa_02.htm" title="A.2 Chapter 3, Arrays and List Data"><link rel="next" href="appa_04.htm" title="A.4 Chapter 5, Hashes"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Learning Perl on Win32 Systems" usemap="#srchmap" border="0"></H1
><map name="sindex.htmlrchmap"><area shape="RECT" coords="0,0,466,54" href="index.htm" alt="Learning Perl on Win32 Systems"><area shape="RECT" coords="467,0,514,18" href="../search/wsrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="appa_02.htm" title="A.2 Chapter 3, Arrays and List Data"><img src="../gifs/txtpreva.gif" alt="Previous: A.2 Chapter 3, Arrays and List Data" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="appendix" rel="up" href="appa_01.htm" title="A. Exercise Answers">Appendix A<br>Exercise Answers</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="appa_04.htm" title="A.4 Chapter 5, Hashes"><img src="../gifs/txtnexta.gif" alt="Next: A.4 Chapter 5, Hashes" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="appa-13257">A.3 <a class="xref" href="ch04_01.htm" title="Control Structures">Chapter 4, Control Structures</A
></A
></H2
><ol class="orderedlist"><li class="listitem"><p class="para"><a class="listitem" name="appa-pgfId-179344"></A
>Here's one way to do it:</P
><pre class="programlisting">print &quot;What temperature is it? &quot;;
chomp($temperature = &lt;STDIN&gt;);
if ($temperature &gt; 72) {
  print &quot;Too hot!\n&quot;;
} else {
  print &quot;Too cold!\n&quot;;
}</PRE
><p class="para">The first line prompts you for the temperature. The second line accepts the temperature for input. The <code class="literal">if</CODE
> statement on the final five lines selects one of two messages to print, depending on the value of <code class="literal">$temperature</CODE
>.</P
></LI
><li class="listitem"><p class="para"><a class="listitem" name="appa-pgfId-179357"></A
>Here's one way to do it:</P
><pre class="programlisting">print &quot;What temperature is it? &quot;;
chomp($temperature = &lt;STDIN&gt;);
if ($temperature &gt; 75) {
  print &quot;Too hot!\n&quot;;
} <a class="indexterm" name="appa-idx-178708-0"></A
>elsif ($temperature &lt; 68) {
  print &quot;Too cold!\n&quot;;
} else {
  print &quot;Just right!\n&quot;;
}</PRE
><p class="para">Here, we've modified the program to include a three-way choice. First, the temperature is compared to 75, then to 68. Note that only one of the three choices will be executed each time through the program.</P
></LI
><li class="listitem"><p class="para"><a class="listitem" name="appa-pgfId-178873"></A
>Here's one way to do it:</P
><pre class="programlisting">print &quot;Enter a number (999 to quit): &quot;;
chomp($n = &lt;STDIN&gt;);
<a class="indexterm" name="appa-idx-178709-0"></A
>while ($n != 999) {
  $sum <a class="indexterm" name="appa-idx-178710-0"></A
>+= $n;
  print &quot;Enter another number (999 to quit): &quot;;
  chomp($n = &lt;STDIN&gt;);
}
print &quot;the sum is $sum\n&quot;;</PRE
><p class="para">The first line prompts for the first number. The second line reads the number from the terminal. The <code class="literal">while</CODE
> loop continues to execute as long as the number is not 999.</P
><p class="para">The += operator accumulates the numbers into the <code class="literal">$sum</CODE
> variable. Note that the initial value of <code class="literal">$sum</CODE
> is <code class="literal">undef</CODE
>, which makes a nice value for an accumulator, because the first value added in will be effectively added to <code class="literal">0</CODE
> (remember that <code class="literal">undef</CODE
> used as a number is 0).</P
><p class="para">Within the loop, we must prompt for and receive another number, so that the test at the top of the loop is against a newly entered number.</P
><p class="para">When the loop is exited, the program prints the accumulated results.</P
><p class="para">Note that if you enter <code class="literal">999</CODE
> right away, the value of <code class="literal">$sum</CODE
> is not 0, but an empty string&nbsp;- the value of <code class="literal">undef</CODE
> when used as a string. If you want to ensure that the program prints 0 in this case, you should initialize the value of <code class="literal">$sum</CODE
> at the beginning of the program with <code class="literal">$sum = 0</CODE
>.</P
></LI
><li class="listitem"><p class="para"><a class="listitem" name="appa-41998"></A
>Here's one way to do it:</P
><pre class="programlisting">print &quot;Enter some strings, end with ^Z:\n&quot;;
@strings = &lt;STDIN&gt;;
while (@strings) {
  print <a class="indexterm" name="appa-idx-178711-0"></A
>pop @strings;
}</PRE
><p class="para">First, this program asks for the strings. These strings are saved in the array variable <code class="literal">@strings</CODE
>, one per element.</P
><p class="para">The control expression of the <code class="literal">while</CODE
> loop is <code class="literal">@strings</CODE
>. The control expression is looking for a single value (<em class="emphasis">true</EM
> or <em class="emphasis">false</EM
>), and is therefore computing the expression in a scalar context. The name of an array (such as <code class="literal">@strings</CODE
>) when used in a scalar context is the number of elements currently in the array. As long as the array is not empty, this number is non-zero, and therefore true. This is a very common Perl idiom for "do this while the array is non-empty."</P
><p class="para">The body of the loop prints a value, obtained by <code class="literal">pop</CODE
>'ing off the rightmost element of the array. Thus, each time through the loop, the array is one element shorter, because that element has been printed.</P
><p class="para">You may have considered using subscripts for this problem. As we say, there's more than one way to do it. However, you'll rarely see subscripts in a true Perl Hacker's programs because a better way almost always exists.</P
></LI
><li class="listitem"><p class="para"><a class="listitem" name="appa-pgfId-178888"></A
>Here's a way to do it <em class="emphasis">without</EM
> a list:</P
><pre class="programlisting"><a class="indexterm" name="appa-idx-178712-0"></A
>for ($number = 0; $number &lt;= 32; $number++) {
  $square = $number * $number;
  <a class="indexterm" name="appa-idx-181340-0"></A
>printf &quot;%5g %8g\n&quot;, $number, $square;
}</PRE
><p class="para">And here's how to do it <em class="emphasis">with</EM
> a list:</P
><pre class="programlisting"><a class="indexterm" name="appa-idx-178713-0"></A
>foreach $number (0..32) {
  $square = $number * $number;
  printf &quot;%5g %8g\n&quot;, $number, $square;
}</PRE
><p class="para">These solutions both involve loops, using the <code class="literal">for</CODE
> and <code class="literal">foreach</CODE
> statements. The body of the loops are identical, because for both solutions, the value of <code class="literal">$number</CODE
> proceeds from 0 to 32 on each iteration.</P
><p class="para">The first solution uses a traditional C-like <code class="literal">for</CODE
> statement. The three expressions respectively: set <code class="literal">$number</CODE
> to 0, test to see if <code class="literal">$number</CODE
> is less than 32, and increment <code class="literal">$number</CODE
> on each iteration.</P
><p class="para">The second solution uses a <code class="literal">foreach</CODE
> statement. A list of <code class="literal">33</CODE
> elements (0 to 32) is created, using the list contructor. The variable <code class="literal">$number</CODE
> is then set to each element in turn.</P
></LI
></OL
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="appa_02.htm" title="A.2 Chapter 3, Arrays and List Data"><img src="../gifs/txtpreva.gif" alt="Previous: A.2 Chapter 3, Arrays and List Data" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Learning Perl on Win32 Systems"><img src="../gifs/txthome.gif" alt="Learning Perl on Win32 Systems" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="appa_04.htm" title="A.4 Chapter 5, Hashes"><img src="../gifs/txtnexta.gif" alt="Next: A.4 Chapter 5, Hashes" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">A.2 Chapter 3, Arrays and List Data</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">A.4 Chapter 5, Hashes</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
