<html><head>
<title>[Chapter 11] 11.4 More About the Fieldholders</TITLE>
<meta name="DC.title" content="Learning Perl on Win32 Systems"><meta name="DC.creator" content="Randal L. Schwartz, Erik Olson &amp; Tom Christiansen"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:34:44Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-324-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch11_01.htm" title="11. Formats"><link rel="prev" href="ch11_03.htm" title="11.3 Invoking a Format"><link rel="next" href="ch11_05.htm" title="11.5 The Top-of-Page Format"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Learning Perl on Win32 Systems" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,54" href="index.htm" alt="Learning Perl on Win32 Systems"><area shape="RECT" coords="467,0,514,18" href="../search/wsrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch11_03.htm" title="11.3 Invoking a Format"><img src="../gifs/txtpreva.gif" alt="Previous: 11.3 Invoking a Format" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch11_01.htm" title="11. Formats">Chapter 11<br>Formats</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch11_05.htm" title="11.5 The Top-of-Page Format"><img src="../gifs/txtnexta.gif" alt="Next: 11.5 The Top-of-Page Format" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch11-15347">11.4 More About the Fieldholders</A
></H2
><p class="para">So far, by example, you know that the fieldholder <code class="literal">@&lt;&lt;&lt;&lt;</CODE
> indicates a 5-character, left-justified field and that <code class="literal">@&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</CODE
> indicates an 11-character, left-justified field. Here's the whole scoop, as promised earlier.</P
><div class="sect2"><h3 class="sect2"><a class="title" name="ch11-pgfId-948498">11.4.1 Text Fields</A
></H3
><p class="para"><a class="indexterm" name="ch11-idx-948282-0"></A
><a class="indexterm" name="ch11-idx-948282-1"></A
>Most fieldholders start with <a class="indexterm" name="ch11-idx-948283-0"></A
><code class="literal">@</CODE
>. The characters following the <code class="literal">@</CODE
> indicate the type of field, while the number of characters (including the <code class="literal">@</CODE
>) indicates the field width.</P
><p class="para">If the characters following the <code class="literal">@</CODE
> are <a class="indexterm" name="ch11-idx-948284-0"></A
>left-angle brackets (<code class="literal">&lt;&lt;&lt;&lt;</CODE
>), you get a left-justified field; that is, the value will be padded on the right with spaces if the value is shorter than the field width. (If a value is too long, it's truncated automatically; the layout of the format is always preserved.)</P
><p class="para">If the characters following the <code class="literal">@</CODE
> are <a class="indexterm" name="ch11-idx-948285-0"></A
>right-angle brackets (<code class="literal">&gt;&gt;&gt;&gt;</CODE
>), you get a right-justified field&nbsp;- that is, if the value is too short, the field gets padded on the left with spaces.</P
><p class="para">Finally, if the characters following the <code class="literal">@</CODE
> are <a class="indexterm" name="ch11-idx-948286-0"></A
>vertical bars (<code class="literal">||||</CODE
>), you get a centered field; if the value is too short, the field gets padded on both sides with spaces, enough on each side to make the value mostly centered within the field.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch11-pgfId-948499">11.4.2 Numeric Fields</A
></H3
><p class="para"><a class="indexterm" name="ch11-idx-948287-0"></A
>Another kind of fieldholder is a fixed-precision numeric field, useful for those big financial reports. This field also begins with <code class="literal">@</CODE
>, and is followed by one or more <a class="indexterm" name="ch11-idx-948288-0"></A
><code class="literal">#</CODE
>'s with an optional dot (indicating a decimal point). Once again, the <code class="literal">@</CODE
> counts as one of the characters of the field. For example:</P
><pre class="programlisting">format MONEY =
Assets: @#####.## Liabilities: @#####.## Net: @#####.##
$assets, $liabilities, $assets-$liabilities
.</PRE
><p class="para">The three numeric fields allow for six places to the left of the decimal place, and two to the right (useful for dollars and cents). Note the use of an expression in the format&nbsp;- perfectly legal and frequently used.</P
><p class="para">Perl provides nothing fancier than this; you can't get floating currency symbols or brackets around negative values or anything interesting. To do so, you have to write your own spiffy subroutine, like so:</P
><pre class="programlisting">format MONEY =
Assets: @&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; Liabilities @&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; Net: @&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;
pretty($assets,10), pretty($liab,9), pretty($assets-$liab,10)
.

sub pretty {
        <a class="indexterm" name="ch11-idx-948319-0"></A
>my($n,$width) = @_;
        $width <a class="indexterm" name="ch11-idx-948320-0"></A
>-= 2; # back off for negative stuff
        $n = <a class="indexterm" name="ch11-idx-948289-0"></A
>sprintf(&quot;%.2f&quot;,$n); # sprintf is in later chapter
        if ($n &lt; 0) {
            return sprintf(&quot;[%$width.2f]&quot;, -$n);
                # negative numbers get brackets
        } else {
            return sprintf(&quot; %$width.2f &quot;, $n);
                # positive numbers get spaces instead
        }
}

## body of program:
$assets = 32125.12; 
$liab = 45212.15; 
write (MONEY);</PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch11-pgfId-948501">11.4.3 Multiline Fields</A
></H3
><p class="para">As mentioned earlier, Perl normally stops at the first newline of a value when placing the result into the output. One kind of fieldholder, the <a class="indexterm" name="ch11-idx-948290-0"></A
><a class="indexterm" name="ch11-idx-948290-1"></A
>multiline fieldholder, allows you to include a value that may have many lines of information. This fieldholder is denoted by <a class="indexterm" name="ch11-idx-948291-0"></A
><code class="literal">@*</CODE
> on a line by itself; as always, the following line defines the value to be substituted into the field, which in this case may be an expression that results in a value containing many <a class="indexterm" name="ch11-idx-948321-0"></A
>newlines.</P
><p class="para">The substituted value will look just like the original text: four lines of value become four lines of output. For example:</P
><pre class="programlisting">format STDOUT =
Text Before.
@*
$long_string
Text After.
.

$long_string = &quot;Fred\nBarney\nBetty\nWilma\n&quot;;
write;</PRE
><p class="para">generates the output:</P
><pre class="programlisting">Text Before.
Fred
Barney
Betty
Wilma
Text After.</PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch11-pgfId-948502">11.4.4 Filled Fields</A
></H3
><p class="para">Another kind of fieldholder is a <a class="indexterm" name="ch11-idx-948292-0"></A
>filled field. This fieldholder allows you to create a filled paragraph, breaking the text into conveniently sized lines at word boundaries, wrapping the lines as needed. There are a few parts that work together here, but let's look at them separately.</P
><p class="para">First, a filled field is denoted by replacing the <code class="literal">@</CODE
> marker in a text fieldholder with a <a class="indexterm" name="ch11-idx-948293-0"></A
>caret (so you get <code class="literal">^&lt;&lt;&lt;</CODE
>, for example). The corresponding value for a filled field (on the following line of the format) <em class="emphasis">must</EM
> be a scalar variable[<a class="footnote" href="#ch11-pgfId-948722">3</A
>] containing text, rather than an expression that returns a scalar value. The reason for this is that Perl will alter the variable while filling the filled field, and it's pretty hard to alter an expression.</P
><blockquote class="footnote"><div class="footnote"><p class="para"><a class="footnote" name="ch11-pgfId-948722">[3]</A
> The scalar value can include a single scalar element of an array or hash, like <code class="literal">$a[3]</CODE
> or <code class="literal">$h{&quot;fred&quot;}</CODE
>.</P
></DIV
></BLOCKQUOTE
><p class="para">When Perl is filling the filled field, it takes the value of the variable and grabs as many <a class="indexterm" name="ch11-idx-948294-0"></A
>words (using a reasonable definition of "word")[<a class="footnote" href="#ch11-pgfId-948613">4</A
>] as will fit into the field. These words are actually ripped out of the variable&nbsp;- the value of the variable after filling this field is whatever is left over after removing the words. You'll see why in a minute.</P
><blockquote class="footnote"><div class="footnote"><p class="para"><a class="footnote" name="ch11-pgfId-948613">[4]</A
> The word-separator characters are defined by the <code class="literal">$:</CODE
><a class="indexterm" name="ch11-idx-948295-0"></A
> variable.</P
></DIV
></BLOCKQUOTE
><p class="para">So far, this isn't much different from how a normal text field works; we're printing only as much as will fit (except that we're respecting a word boundary rather than just cutting it off at the field width). The beauty of this filled field appears when you have multiple references to the same variable in the same format. Take a look at this:</P
><pre class="programlisting">format PEOPLE =
Name: @&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; Comment: ^&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;
      $name,                  $comment
                              ^&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;
                              $comment
                              ^&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;
                              $comment
                              ^&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;
                              $comment
.</PRE
><p class="para">Note that the variable <code class="literal">$comment</CODE
> appears four times. The first line (the one with the <code class="literal">$name</CODE
> field) prints the person's name and the first few words of the value in <code class="literal">$comment</CODE
>. But in the process of computing this line, <code class="literal">$comment</CODE
> is altered so that the words disappear. The second line once again refers to the same variable (<code class="literal">$comment</CODE
>), and will take the next few words from the same variable. This process is also used for the third and fourth lines. Effectively, what we've created is a rectangle in the output that will be filled as best it can with the words from <code class="literal">$comment</CODE
> spread over four lines.</P
><p class="para">What happens if the complete text occupies less than four lines? Well, you'll get a blank line or two. This result is probably OK if you are printing out labels and need exactly the same number of lines for each entry to match them up with the labels. But if you are printing out a report, many blank lines merely use up your printer's paper budget.</P
><p class="para">To fix this, use the suppression indicator. Any line that contains a <a class="indexterm" name="ch11-idx-948296-0"></A
>tilde (<code class="literal">~</CODE
>) character is suppressed (not output) if the line would have otherwise printed blank (just whitespace). The tilde itself always prints as a blank and can be placed anywhere a space could have been placed in the line. We could rewrite that last example as follows:</P
><pre class="programlisting">format PEOPLE =
Name: @&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; Comment: ^&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;
      $name,                  $comment
~                             ^&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;
                              $comment
~                             ^&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;
                              $comment
~                             ^&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;
                              $comment
.</PRE
><p class="para">Now, if the comment covers only two lines, the third and fourth lines are automatically suppressed.</P
><p class="para">What if the comment is more than four lines? Well, we could make about 20 copies of the last two lines of that format, hoping that 20 lines will suffice. But that goes against the idea that Perl helps you to be lazy, so there's a lazy way to do it. Any line that contains two consecutive tildes will be repeated automatically until the result is a completely blank line. (The blank line is suppressed.) This changes our format to look like this:</P
><pre class="programlisting">format PEOPLE =
Name: @&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; Comment: ^&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;
      $name,                  $comment
~~                            ^&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;
                              $comment
.</PRE
><p class="para">This way, if the comment takes 1 line, 2 lines, or 20 lines, we are still OK.</P
><p class="para">Note that the criterion for stopping the repeated line requires the line to be blank at some point. That means you probably don't want any constant text (other than blanks or tildes) on the line, or else the line will never become blank.</P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch11_03.htm" title="11.3 Invoking a Format"><img src="../gifs/txtpreva.gif" alt="Previous: 11.3 Invoking a Format" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Learning Perl on Win32 Systems"><img src="../gifs/txthome.gif" alt="Learning Perl on Win32 Systems" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch11_05.htm" title="11.5 The Top-of-Page Format"><img src="../gifs/txtnexta.gif" alt="Next: 11.5 The Top-of-Page Format" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">11.3 Invoking a Format</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">11.5 The Top-of-Page Format</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
