<html><head>
<title>[Chapter 15] 15.5 Transliteration</TITLE>
<meta name="DC.title" content="Learning Perl on Win32 Systems"><meta name="DC.creator" content="Randal L. Schwartz, Erik Olson &amp; Tom Christiansen"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:36:02Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-324-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch15_01.htm" title="15. Other Data Transformation"><link rel="prev" href="ch15_04.htm" title="15.4 Advanced Sorting"><link rel="next" href="ch15_06.htm" title="15.6 Exercises"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Learning Perl on Win32 Systems" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,54" href="index.htm" alt="Learning Perl on Win32 Systems"><area shape="RECT" coords="467,0,514,18" href="../search/wsrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch15_04.htm" title="15.4 Advanced Sorting"><img src="../gifs/txtpreva.gif" alt="Previous: 15.4 Advanced Sorting" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch15_01.htm" title="15. Other Data Transformation">Chapter 15<br>Other Data Transformation</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch15_06.htm" title="15.6 Exercises"><img src="../gifs/txtnexta.gif" alt="Next: 15.6 Exercises" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch15-40004">15.5 Transliteration</A
></H2
><p class="para"><a class="indexterm" name="ch15-idx-403692-0"></A
>When you want to take a string and replace every instance of some character with some new character, or delete every instance of some character, you can do so with carefully selected <code class="literal">s///</CODE
> commands. But suppose you had to change all of the <code class="literal">a</CODE
>'s into <code class="literal">b</CODE
>'s, and all of the <code class="literal">b</CODE
>'s into <code class="literal">a</CODE
>'s? You can't do that with two <code class="literal">s///</CODE
> commands because the second one would undo all of the changes that the first one made.</P
><p class="para">Perl provides a <em class="emphasis"></EM
><a class="indexterm" name="ch15-idx-403694-0"></A
><code class="literal">tr</CODE
> operator that does the trick:</P
><pre class="programlisting">tr/ab/ba/;<a class="indexterm" name="ch15-idx-403696-0"></A
></PRE
><p class="para">The <code class="literal">tr</CODE
> operator takes two arguments: an <em class="emphasis">old string</EM
> and a <em class="emphasis">new string</EM
>. These arguments work like the two arguments to <code class="literal">s///</CODE
>; in other words, there's some <a class="indexterm" name="ch15-idx-403346-0"></A
>delimiter that appears immediately after the <code class="literal">tr</CODE
> keyword that separates and terminates the two arguments (in this case, a slash, but nearly any character will do).</P
><p class="para">The <code class="literal">tr</CODE
> operator modifies the contents of the <a class="indexterm" name="ch15-idx-403347-0"></A
><code class="literal">$_</CODE
> variable (just like <code class="literal">s///</CODE
>), looking for characters of the old string within the <code class="literal">$_</CODE
> variable. All such characters found are replaced with the corresponding characters in the new string. Here are some examples:</P
><pre class="programlisting">$_ = &quot;fred and barney&quot;;
tr/fb/bf/;        # $_ is now &quot;bred and farney&quot;
tr/abcde/ABCDE/;  # $_ is now &quot;BrED AnD fArnEy&quot;
tr/a-z/A-Z/;      # $_ is now &quot;BRED AND FARNEY&quot;</PRE
><p class="para">Notice how a range of characters can be indicated by two characters separated by a dash. If you need a literal dash in either string, precede it with a backslash.</P
><p class="para">If the new string is shorter than the old string, the last character of the new string is repeated enough times to make the strings equal length, like so:</P
><pre class="programlisting">$_ = &quot;fred and barney&quot;;
tr/a-z/x/; # $_ is now &quot;xxxx xxx xxxxxx&quot;</PRE
><p class="para">To prevent this behavior, append a <a class="indexterm" name="ch15-idx-403348-0"></A
><code class="literal">d</CODE
> to the end of the <code class="literal">tr///</CODE
> operator, which means <em class="emphasis">delete</EM
>. In this case, the last character is not replicated. Any character that matches in the old string without a corresponding character in the new string is simply <a class="indexterm" name="ch15-idx-403349-0"></A
><a class="indexterm" name="ch15-idx-403349-1"></A
><a class="indexterm" name="ch15-idx-403349-2"></A
>removed from the string. For example:</P
><pre class="programlisting">$_ = &quot;fred and barney&quot;;
tr/a-z/ABCDE/d; # $_ is now &quot;ED AD BAE&quot;</PRE
><p class="para">Notice how any letter after <code class="literal">e</CODE
> disappears because there's no corresponding letter in the new list, and that spaces are unaffected because they don't appear in the old list. </P
><p class="para">If the new list is empty and there's no <code class="literal">d</CODE
> option, the new list is the same as the old list. This default may seem silly. Why replace an <a class="indexterm" name="ch15-idx-403359-0"></A
>I for an I and a 2 for a 2? But the command actually does something useful. The <a class="indexterm" name="ch15-idx-403350-0"></A
>return value of the <code class="literal">tr///</CODE
> operator is the number of characters matched by the old string, and by changing characters into themselves, you can get the <a class="indexterm" name="ch15-idx-403351-0"></A
><a class="indexterm" name="ch15-idx-403351-1"></A
>count of that kind of character within the string.[<a class="footnote" href="#ch15-pgfId-403724">3</A
>] For example:</P
><blockquote class="footnote"><div class="footnote"><p class="para"><a class="footnote" name="ch15-pgfId-403724">[3]</A
> This method works only for single characters. To count strings, use the <code class="literal">/g</CODE
> flag to a pattern match:</P
><pre class="programlisting">while<code class="literal"> (/pattern/g)</CODE
> <code class="literal">{</CODE
>
<code class="literal">    $count++;</CODE
>
<code class="literal">}</CODE
></PRE
></DIV
></BLOCKQUOTE
><pre class="programlisting">$_ = &quot;fred and barney&quot;;
$count = tr/a-z//;      # $_ unchanged, but $count is 13
$count2 = tr/a-z/A-Z/;  # $_ is uppercased, and $count2 is 13</PRE
><p class="para">If you append a <a class="indexterm" name="ch15-idx-403352-0"></A
><code class="literal">c</CODE
> (like appending the <code class="literal">d</CODE
>), you complement the old string with respect to all 256 characters. Any character you list in the old string is removed from the set of all possible characters; the remaining characters, taken in sequence from lowest to highest, form the resulting old string. So, a way to count or change the nonletters in our string could be:</P
><pre class="programlisting">$_ = &quot;fred and barney&quot;;
$count = tr/a-z//c; # $_ unchanged, but $count is 2
tr/a-z/_/c;         # $_ is now &quot;fred_and_barney&quot; (non-letters =&gt; _)
tr/a-z//cd;         # $_ is now &quot;fredandbarney&quot; (delete non-letters)</PRE
><p class="para">Notice that the options can be combined, as shown in that last example, where we first complement the set (the list of letters become the list of all nonletters) and then use the <code class="literal">d</CODE
> option to delete any character in that set.</P
><p class="para">The final option for <code class="literal">tr///</CODE
> is <a class="indexterm" name="ch15-idx-403353-0"></A
><code class="literal">s</CODE
>, which squeezes multiple consecutive copies of the same resulting translated letter into one copy. As an example, look at this:</P
><pre class="programlisting">$_ = &quot;aaabbbcccdefghi&quot;;
tr/defghi/abcddd/s; # $_ is now &quot;aaabbbcccabcd&quot;</PRE
><p class="para">Note that the <code class="literal">def</CODE
> became <code class="literal">abc</CODE
>, and <code class="literal">ghi</CODE
> (which would have become <code class="literal">ddd</CODE
> without the <code class="literal">s</CODE
> option) becomes a single <code class="literal">d</CODE
>. Also note that the consecutive letters at the first part of the string are not squeezed because they didn't result from a translation. Here are some more examples:</P
><pre class="programlisting">$_ = &quot;fred and barney, wilma and betty&quot;;
tr/a-z/X/s;   # $_ is now &quot;X X X, X X X&quot;
$_ = &quot;fred and barney, wilma and betty&quot;;
tr/a-z/_/cs;  # $_ is now &quot;fred_and_barney_wilma_and_betty&quot;</PRE
><p class="para">In the first example, each word (consecutive letters) was squeezed down to a single letter <code class="literal">X</CODE
>. In the second example, all chunks of consecutive nonletters became a single underscore.</P
><p class="para">Like <code class="literal">s///</CODE
>, the <code class="literal">tr</CODE
> operator can be targeted at another string besides <code class="literal">$_</CODE
> using the <a class="indexterm" name="ch15-idx-403354-0"></A
><code class="literal">=~</CODE
> operator:</P
><pre class="programlisting">$names = &quot;fred and barney&quot;;
$names =~ tr/aeiou/X/; # $names now &quot;frXd Xnd bXrnXy&quot;</PRE
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch15_04.htm" title="15.4 Advanced Sorting"><img src="../gifs/txtpreva.gif" alt="Previous: 15.4 Advanced Sorting" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Learning Perl on Win32 Systems"><img src="../gifs/txthome.gif" alt="Learning Perl on Win32 Systems" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch15_06.htm" title="15.6 Exercises"><img src="../gifs/txtnexta.gif" alt="Next: 15.6 Exercises" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">15.4 Advanced Sorting</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">15.6 Exercises</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
