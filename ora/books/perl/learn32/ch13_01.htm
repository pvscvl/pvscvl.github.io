<html><head>
<title>[Chapter 13] File and Directory Manipulation</TITLE>
<meta name="DC.title" content="Learning Perl on Win32 Systems"><meta name="DC.creator" content="Randal L. Schwartz, Erik Olson &amp; Tom Christiansen"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:35:23Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-324-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="index.htm" title="Learning Perl on Win32 Systems"><link rel="prev" href="ch12_06.htm" title="12.6 Exercises"><link rel="next" href="ch13_02.htm" title="13.2 Renaming a File"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Learning Perl on Win32 Systems" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,54" href="index.htm" alt="Learning Perl on Win32 Systems"><area shape="RECT" coords="467,0,514,18" href="../search/wsrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch12_06.htm" title="12.6 Exercises"><img src="../gifs/txtpreva.gif" alt="Previous: 12.6 Exercises" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 13</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch13_02.htm" title="13.2 Renaming a File"><img src="../gifs/txtnexta.gif" alt="Next: 13.2 Renaming a File" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="chapter"><h1 class="chapter"><a class="title" name="ch13-34295">13. File and Directory Manipulation</A
></H1
><div class="htmltoc"><p><b>Contents:</B
><br><a class="sect1" href="#ch13-26411" title="13.1 Removing a File">Removing a File</A
><br><a class="sect1" href="ch13_02.htm" title="13.2 Renaming a File">Renaming a File</A
><br><a class="sect1" href="ch13_03.htm" title="13.3 Making and Removing Directories">Making and Removing Directories</A
><br><a class="sect1" href="ch13_04.htm" title="13.4 Modifying Permissions">Modifying Permissions</A
><br><a class="sect1" href="ch13_05.htm" title="13.5 Modifying Timestamps">Modifying Timestamps</A
><br><a class="sect1" href="ch13_06.htm" title="13.6 Exercises">Exercises</A
></P
><p></P
></DIV
><p class="para">This chapter shows you how to manipulate the files themselves, not merely the data contained within. Perl uses UNIX semantics for providing access to files and directories. Some of these names will be familiar to Win32 programmers who have used the C run-time library, while others may not. Perl provides a rich set of file and directory manipulation routines, and not all of these are implemented on Win32 platforms, but we'll cover the most useful ones here.[<a class="footnote" href="#ch13-pgfId-871496">1</A
>]</P
><blockquote class="footnote"><div class="footnote"><p class="para"><a class="footnote" name="ch13-pgfId-871496">[1]</A
> In particular, we've omitted discussion of the <code class="literal">link()</CODE
><a class="indexterm" name="ch13-idx-873000-0"></A
><a class="indexterm" name="ch13-idx-873000-1"></A
> and <code class="literal">symlink()</CODE
> functions, used to create hard and symbolic links under Unix, because these functions are unimplemented in the Windows NT filesystems and thus in Perl for Win32, as well.</P
></DIV
></BLOCKQUOTE
><div class="sect1"><h2 class="sect1"><a class="title" name="ch13-26411">13.1 Removing a File</A
></H2
><p class="para"><a class="indexterm" name="ch13-idx-350-0"></A
><a class="indexterm" name="ch13-idx-350-1"></A
>Earlier, you learned how to create a file from within Perl by opening it for output with a filehandle. Now, we'll get dangerous and learn how to remove a file (very appropriate for <a class="xref" href="ch13_01.htm" title="File and Directory Manipulation">Chapter 13, <cite class="chapter">File and Directory Manipulation</CITE
></A
>, don't you think?).</P
><p class="para">The Perl <a class="indexterm" name="ch13-idx-352-0"></A
><code class="literal">unlink</CODE
> function (named for the POSIX system call) deletes a file. This is exactly what the command prompt <em class="emphasis">del</EM
><a class="indexterm" name="ch13-idx-354-0"></A
> command does. Here's how to remove a file called <em class="emphasis">fred</EM
> and then remove a file specified during program execution:</P
><pre class="programlisting">unlink (&quot;fred&quot;); # say goodbye to fred
print &quot;what file do you want to delete? &quot;;
chomp($name = &lt;STDIN&gt;);
unlink ($name);</PRE
><p class="para">The <code class="literal">unlink</CODE
> function can take a list of names to be unlinked as well:</P
><pre class="programlisting">unlink (&quot;<a class="indexterm" name="ch13-idx-360-0"></A
>spottedowl&quot;,&quot;meadowlark&quot;); # kill two birds
unlink &lt;*.bak&gt;; # just like &quot;del *.bak&quot; in the command prompt</PRE
><p class="para">The <a class="indexterm" name="ch13-idx-363-0"></A
>glob is evaluated in a list context, creating a list of filenames that match the pattern. This list is exactly what we need to feed <code class="literal">unlink</CODE
>.</P
><p class="para">The return value of <code class="literal">unlink</CODE
> is the number of files successfully deleted. If only one argument exists, and it is deleted, the result is one; otherwise, the result is zero. If there are three filenames but only two could be deleted, the result is two. You can't tell which two, so if you need to figure out which deletion failed, you must do them one at a time. Here's how to delete all of the backup files (ending in <em class="emphasis">.bak</EM
>) while reporting an error for any file that cannot be deleted:</P
><pre class="programlisting">foreach $file (&lt;*.bak&gt;) { # step through a list of .bak files
        unlink($file) || warn &quot;having trouble deleting $file: $!&quot;;
}</PRE
><p class="para">If <code class="literal">unlink</CODE
> returns one (meaning the one file specified was indeed deleted), the true result skips the <code class="literal">warn</CODE
> function. If the filename cannot be deleted, the zero result is false, so the <code class="literal">warn</CODE
> is executed. Once again, this can be read abstractly as "unlink this file or tell me about it."</P
><p class="para">If the <code class="literal">unlink</CODE
> function is given no arguments, the <a class="indexterm" name="ch13-idx-370-0"></A
><code class="literal">$_</CODE
> variable is once again used as a default. Thus, we could have written the preceding loop as:</P
><pre class="programlisting">foreach (&lt;*.bak&gt;) { # step through a list of .bak files
        unlink || warn &quot;having trouble deleting $_\: $!&quot;;
}</PRE
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch12_06.htm" title="12.6 Exercises"><img src="../gifs/txtpreva.gif" alt="Previous: 12.6 Exercises" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Learning Perl on Win32 Systems"><img src="../gifs/txthome.gif" alt="Learning Perl on Win32 Systems" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch13_02.htm" title="13.2 Renaming a File"><img src="../gifs/txtnexta.gif" alt="Next: 13.2 Renaming a File" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">12.6 Exercises</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">13.2 Renaming a File</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
