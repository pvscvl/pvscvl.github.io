<html><head>
<title>[Chapter 8] 8.3 Return Values</TITLE>
<meta name="DC.title" content="Learning Perl on Win32 Systems"><meta name="DC.creator" content="Randal L. Schwartz, Erik Olson &amp; Tom Christiansen"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:33:58Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-324-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch08_01.htm" title="8. Functions"><link rel="prev" href="ch08_02.htm" title="8.2 Invoking a User Function"><link rel="next" href="ch08_04.htm" title="8.4 Arguments"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Learning Perl on Win32 Systems" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,54" href="index.htm" alt="Learning Perl on Win32 Systems"><area shape="RECT" coords="467,0,514,18" href="../search/wsrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch08_02.htm" title="8.2 Invoking a User Function"><img src="../gifs/txtpreva.gif" alt="Previous: 8.2 Invoking a User Function" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch08_01.htm" title="8. Functions">Chapter 8<br>Functions</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch08_04.htm" title="8.4 Arguments"><img src="../gifs/txtnexta.gif" alt="Next: 8.4 Arguments" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch08-13023">8.3 Return Values</A
></H2
><p class="para">A subroutine is always part of some expression. The value of the subroutine invocation is called the <a class="indexterm" name="ch08-idx-548-0"></A
><a class="indexterm" name="ch08-idx-548-1"></A
><em class="emphasis">return value</EM
>. The return value of a subroutine is the value of the <em class="emphasis">return</EM
> statement or of the last expression evaluated in the subroutine.</P
><p class="para">For example, let's define this subroutine:</P
><pre class="programlisting">sub sum_of_a_and_b {
    return $a + $b;
}</PRE
><p class="para">The <a class="indexterm" name="ch08-idx-84169-0"></A
>last expression evaluated in the body of this subroutine (in fact, the only expression evaluated) is the sum of <code class="literal">$a</CODE
> and <code class="literal">$b</CODE
>, so the sum of <code class="literal">$a</CODE
> and <code class="literal">$b</CODE
> will be the return value. Here's that in action:</P
><pre class="programlisting">$a = 3; $b = 4;
$c = sum_of_a_and_b();   # $c gets 7
$d = 3*sum_of_a_and_b(); # $d gets 21</PRE
><p class="para">A subroutine can also <a class="indexterm" name="ch08-idx-84170-0"></A
>return a list of values when evaluated in a list context. Consider this subroutine and invocation:</P
><pre class="programlisting">sub list_of_a_and_b {
return ($a,$b);
}
$a = 5; $b = 6;
@c = list_of_a_and_b(); # @c gets (5,6)</PRE
><p class="para">The last expression evaluated really means the last expression evaluated, rather than the last expression defined in the body of the subroutine. For example, this subroutine returns <code class="literal">$a</CODE
> if <code class="literal">$a</CODE
> <code class="literal">&gt;</CODE
> <code class="literal">0</CODE
>; otherwise, it returns <code class="literal">$b</CODE
>:</P
><pre class="programlisting">sub gimme_a_or_b {
        if ($a &gt; 0) {
            print &quot;choosing a ($a)\n&quot;;
    return $a;
        } else {
            print &quot;choosing b ($b)\n&quot;;
    return $b;
        }
}</PRE
><p class="para">These examples are all rather trivial. It gets better when we can pass values that are different for each invocation into a subroutine, instead of having to rely on global variables. In fact, this discussion is coming right up.</P
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch08_02.htm" title="8.2 Invoking a User Function"><img src="../gifs/txtpreva.gif" alt="Previous: 8.2 Invoking a User Function" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Learning Perl on Win32 Systems"><img src="../gifs/txthome.gif" alt="Learning Perl on Win32 Systems" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch08_04.htm" title="8.4 Arguments"><img src="../gifs/txtnexta.gif" alt="Next: 8.4 Arguments" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">8.2 Invoking a User Function</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">8.4 Arguments</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
