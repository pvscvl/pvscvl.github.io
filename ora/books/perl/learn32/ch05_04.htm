<html><head>
<title>[Chapter 5] 5.4 Hash Functions</TITLE>
<meta name="DC.title" content="Learning Perl on Win32 Systems"><meta name="DC.creator" content="Randal L. Schwartz, Erik Olson &amp; Tom Christiansen"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:33:18Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-324-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch05_01.htm" title="5. Hashes"><link rel="prev" href="ch05_03.htm" title="5.3 Literal Representation of a Hash"><link rel="next" href="ch05_05.htm" title="5.5 Hash Slices"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Learning Perl on Win32 Systems" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,54" href="index.htm" alt="Learning Perl on Win32 Systems"><area shape="RECT" coords="467,0,514,18" href="../search/wsrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch05_03.htm" title="5.3 Literal Representation of a Hash"><img src="../gifs/txtpreva.gif" alt="Previous: 5.3 Literal Representation of a Hash" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch05_01.htm" title="5. Hashes">Chapter 5<br>Hashes</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch05_05.htm" title="5.5 Hash Slices"><img src="../gifs/txtnexta.gif" alt="Next: 5.5 Hash Slices" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch05-Hash-Operators">5.4 Hash Functions</A
></H2
><p class="para"><a class="indexterm" name="ch05-idx-188598-0"></A
><a class="indexterm" name="ch05-idx-188598-1"></A
>Here are some functions for hashes.</P
><div class="sect2"><h3 class="sect2"><a class="title" name="ch05-pgfId-188700">5.4.1 The keys Function</A
></H3
><p class="para"><a class="indexterm" name="ch05-idx-188599-0"></A
>The <code class="literal">keys(</CODE
><code class="replaceable"><i>%hashname</I
></CODE
><code class="literal">)</CODE
> function yields a list of all the current keys in the hash <code class="replaceable"><i>%hashname</I
></CODE
>. In other words, it's like the odd-numbered (first, third, fifth, and so on) elements of the list returned by unwinding <code class="replaceable"><i>%hashname</I
></CODE
> in an array context, and in fact, returns them in that order. If there are no elements to the hash, then <code class="literal">keys</CODE
> returns an empty list.</P
><p class="para">Here's an example using the hash from the previous examples:</P
><pre class="programlisting">$fred{&quot;aaa&quot;} = &quot;bbb&quot;;
$fred{234.5} = 456.7;
@list = keys(%fred); # @list gets (&quot;aaa&quot;,234.5) or
                     # (234.5,&quot;aaa&quot;)</PRE
><p class="para">As with all other built-in functions, the <a class="indexterm" name="ch05-idx-188600-0"></A
>parentheses are optional: <code class="literal">keys </CODE
><code class="replaceable"><i>%fred</I
></CODE
> is like <code class="literal">keys(</CODE
><code class="replaceable"><i>%fred</I
></CODE
><code class="literal">)</CODE
>. For example:</P
><pre class="programlisting">foreach $key (keys %fred) { # once for each key of %fred
        print &quot;at $key we have $fred{$key}\n&quot;; # show key and value
}</PRE
><p class="para">This example also shows that individual <a class="indexterm" name="ch05-idx-188601-0"></A
>hash elements can be interpolated into double-quoted strings. You cannot interpolate the entire hash, however.[<a class="footnote" href="#ch05-pgfId-188724">3</A
>]</P
><blockquote class="footnote"><div class="footnote"><p class="para"><a class="footnote" name="ch05-pgfId-188724">[3]</A
> Well, you <em class="emphasis">can</EM
>, using a slice, but we don't talk about slices here.</P
></DIV
></BLOCKQUOTE
><p class="para">In a scalar context, the <a class="indexterm" name="ch05-idx-188602-0"></A
><code class="literal">keys</CODE
> function gives the number of elements (key-value pairs) in the hash. For example, you can find out whether a hash is empty:</P
><pre class="programlisting"><a class="indexterm" name="ch05-idx-188609-0"></A
>if (keys(<code class="replaceable"><i>%somehash</I
></CODE
>)) { # if keys() not zero:
         ...;           # hash is non empty
}
                        # ... or ...
<a class="indexterm" name="ch05-idx-188610-0"></A
>while (keys(<code class="replaceable"><i>%somehash</I
></CODE
>) &lt; 10) {
        ...;         # keep looping while we have less than 10 elements
} </PRE
><p class="para">In fact, merely using <code class="replaceable"><i>%somehash</I
></CODE
> in a scalar context will reveal whether the hash is empty or not:</P
><pre class="programlisting">if (<code class="replaceable"><i>%somehash</I
></CODE
>) { # if true, then something's in it 
    # do something with it
}</PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch05-pgfId-188701">5.4.2 The values Function</A
></H3
><p class="para">The <a class="indexterm" name="ch05-idx-188603-0"></A
><code class="literal">values(</CODE
><code class="replaceable"><i>%hashname</I
></CODE
><code class="literal">)</CODE
> function returns a list of all the current values of the <code class="replaceable"><i>%hashname</I
></CODE
>, in the same order as the keys returned by the <code class="literal">keys(</CODE
><code class="replaceable"><i>%hashname</I
></CODE
><code class="literal">)</CODE
> function. As always, the <a class="indexterm" name="ch05-idx-188604-0"></A
>parentheses are optional. For example:</P
><pre class="programlisting">%lastname = <a class="indexterm" name="ch05-idx-188611-0"></A
>();                 # force %lastname empty
$lastname{&quot;fred&quot;} = &quot;flintstone&quot;;
$lastname{&quot;barney&quot;} = &quot;rubble&quot;;
@lastnames = values(%lastname); # grab the values</PRE
><p class="para">At this point, <code class="literal">@lastnames</CODE
> contains either <code class="literal">("flintstone"</CODE
>, <code class="literal">"rubble")</CODE
> or <code class="literal">("rubble"</CODE
>, <code class="literal">"flintstone")</CODE
>.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch05-pgfId-188702">5.4.3 The each Function</A
></H3
><p class="para">To <a class="indexterm" name="ch05-idx-188606-0"></A
>iterate over (that is, examine every element of) an entire hash, use <code class="literal">keys</CODE
>, looking up each returned key to get the corresponding value. Although this method is frequently used, a more efficient way is to use <a class="indexterm" name="ch05-idx-188605-0"></A
><code class="literal">each(</CODE
><code class="replaceable"><i>%hashname</I
></CODE
><code class="literal">)</CODE
>, which returns a key-value pair as a two-element list. On each evaluation of this function for the same hash, the next successive key-value pair is returned until all the elements have been accessed. When there are no more pairs, <code class="literal">each</CODE
> returns an empty list.</P
><p class="para">So, for example, to step through the <code class="literal">%lastname</CODE
> hash from the previous example, do something like this:</P
><pre class="programlisting"><a class="indexterm" name="ch05-idx-188612-0"></A
>while (($first,$last) = each(%lastname)) {
        print &quot;The last name of $first is $last\n&quot;;
}</PRE
><p class="para">Assigning a new value to the entire hash resets the <code class="literal">each</CODE
> function to the beginning. Adding or deleting elements of the hash is quite likely to confuse <code class="literal">each</CODE
> (and possibly you as well).</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch05-pgfId-188703">5.4.4 The delete Function</A
></H3
><p class="para">So far, with what you know, you can add elements to a hash, but you cannot remove them (other than by assigning a new value to the entire hash). Perl provides the <a class="indexterm" name="ch05-idx-188607-0"></A
><code class="literal">delete</CODE
> function to <a class="indexterm" name="ch05-idx-188608-0"></A
>remove hash elements. The operand of <code class="literal">delete</CODE
> is a hash reference, just as if you were merely looking at a particular value. Perl removes the key-value pair from the hash. For example:</P
><pre class="programlisting">%fred = (&quot;aaa&quot;,&quot;bbb&quot;,234.5,34.56); # give %fred two elements
delete $fred{&quot;aaa&quot;};
# %fred is now just one key-value pair</PRE
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch05_03.htm" title="5.3 Literal Representation of a Hash"><img src="../gifs/txtpreva.gif" alt="Previous: 5.3 Literal Representation of a Hash" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Learning Perl on Win32 Systems"><img src="../gifs/txthome.gif" alt="Learning Perl on Win32 Systems" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch05_05.htm" title="5.5 Hash Slices"><img src="../gifs/txtnexta.gif" alt="Next: 5.5 Hash Slices" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">5.3 Literal Representation of a Hash</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">5.5 Hash Slices</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
