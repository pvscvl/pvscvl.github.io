<html><head>
<title>[Chapter 2] 2.4 Scalar Operators</TITLE>
<meta name="DC.title" content="Learning Perl on Win32 Systems"><meta name="DC.creator" content="Randal L. Schwartz, Erik Olson &amp; Tom Christiansen"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:31:59Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-324-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch02_01.htm" title="2. Scalar Data"><link rel="prev" href="ch02_03.htm#ch02-pgfId-768730" title="2.3 Strings"><link rel="next" href="ch02_05.htm" title="2.5 Scalar Variables"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Learning Perl on Win32 Systems" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,54" href="index.htm" alt="Learning Perl on Win32 Systems"><area shape="RECT" coords="467,0,514,18" href="../search/wsrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch02_03.htm#ch02-pgfId-768730" title="2.3 Strings"><img src="../gifs/txtpreva.gif" alt="Previous: 2.3 Strings" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch02_01.htm" title="2. Scalar Data">Chapter 2<br>Scalar Data</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch02_05.htm" title="2.5 Scalar Variables"><img src="../gifs/txtnexta.gif" alt="Next: 2.5 Scalar Variables" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch02-35323">2.4 Scalar Operators</A
></H2
><p class="para">An <a class="indexterm" name="ch02-idx-1348-0"></A
>operator produces a new value (the <a class="indexterm" name="ch02-idx-1349-0"></A
><em class="emphasis">result</EM
>) from one or more other values (the <a class="indexterm" name="ch02-idx-1351-0"></A
><em class="emphasis">operands</EM
>). For example, <code class="literal">+</CODE
> is an operator because it takes two numbers (the operands, like 5 and 6), and produces a new value (11, the result). </P
><p class="para">Perl's operators and expressions are generally a superset of those provided in most other ALGOL/Pascal-like programming languages, such as C or Java. An operator expects either numeric or string operands (or possibly a combination of both). If you provide a string operand where a number is expected, or vice versa, Perl automatically converts the operand using fairly intuitive rules, which will be detailed in the section <a class="xref" href="#ch02-pgfId-769010" title="Conversion Between Numbers and Strings">"Conversion Between Numbers and Strings</A
>," later in this chapter.</P
><div class="sect2"><h3 class="sect2"><a class="title" name="ch02-pgfId-768786">2.4.1 Operators for Numbers</A
></H3
><p class="para"><a class="indexterm" name="ch02-idx-768578-0"></A
>Perl provides the typical ordinary <a class="indexterm" name="ch02-idx-768579-0"></A
><a class="indexterm" name="ch02-idx-768579-1"></A
>addition, <a class="indexterm" name="ch02-idx-768580-0"></A
><a class="indexterm" name="ch02-idx-768580-1"></A
>subtraction, <a class="indexterm" name="ch02-idx-768581-0"></A
><a class="indexterm" name="ch02-idx-768581-1"></A
>multiplication, and <a class="indexterm" name="ch02-idx-768582-0"></A
><a class="indexterm" name="ch02-idx-768582-1"></A
>division operators, and so on. For example:</P
><pre class="programlisting">2 + 3      # 2 plus 3, or 5
5.1 - 2.4  # 5.1 minus 2.4, or approximately 2.7
3 * 12     # 3 times 12 = 36
10.2 / 0.3 # 10.2 divided by 0.3, or approximately 34
10 / 3     # always floating point divide, so approximately 3.333333...</PRE
><p class="para">Additionally, Perl provides the FORTRAN-like <a class="indexterm" name="ch02-idx-768583-0"></A
><a class="indexterm" name="ch02-idx-768583-1"></A
><em class="emphasis">exponentiation</EM
> operator, which many have yearned for in Pascal and C. The operator is represented by the double asterisk, such as <code class="literal">2**3</CODE
>, which is 2 to the power of 3, or 8. (If the result cannot fit into a double-precision floating-point number, such as a negative number to a noninteger exponent, or a large number to a large exponent, you'll get a fatal error.)</P
><p class="para">Perl also supports a <a class="indexterm" name="ch02-idx-1410-0"></A
><a class="indexterm" name="ch02-idx-1410-1"></A
><em class="emphasis">modulus</EM
> operator. The value of the expression <code class="literal">10 % 3</CODE
> is the remainder when 10 is divided by 3, which is 1. Both values are first reduced to their integer values, so <code class="literal">10.5 % 3.2</CODE
> is computed as <code class="literal">10 % 3</CODE
>.</P
><p class="para">The <a class="indexterm" name="ch02-idx-1412-0"></A
><a class="indexterm" name="ch02-idx-1412-1"></A
>logical comparison operators are <code class="literal">&lt;</CODE
>, <code class="literal">&lt;=</CODE
>, <code class="literal">==</CODE
>, <code class="literal">&gt;=</CODE
>, <code class="literal">&gt;</CODE
>, and <code class="literal">!=</CODE
>. These operators compare two values numerically, returning a <em class="emphasis">true </EM
>or <em class="emphasis">false</EM
> value. For example, <code class="literal">3 &gt; 2</CODE
> returns true because three is greater than two, while <code class="literal">5 != 5</CODE
> returns false because it's not true that 5 is not equal to 5. The definitions of true and false are covered later, but for now, think of the return values as one for true, and zero for false. (These operators are revisited in <a class="xref" href="#ch02-pgfId-348" title="Numeric and String Comparison Operators">Table 2.2</A
>.) </P
><p class="para">You may be wondering about the word "approximately" in the code comments at the start of this section. Don't you get <em class="emphasis">exactly</EM
> 2.7 when subtracting 2.4 from 5.1? In math class you do, but on computers you usually don't. Instead, you get an <em class="emphasis">approximation</EM
> that's only accurate to a certain number of decimal places. Computers don't store numbers in the same way a mathematician does. Although there are infinitely many decimal points in them, the computer only has a limited space to store them (usually 64 bits per number). So, just a few of these infinite real numbers can be exactly represented on the computer&nbsp;- the rest are just close.</P
><p class="para">Comparing the following statements, you'll see what the computer really got as the result of the subtraction (the <code class="literal">printf</CODE
> function is described in <a class="xref" href="ch06_01.htm" title="Basic I/O">Chapter 6, <cite class="chapter">Basic I/O</CITE
></A
>):</P
><pre class="programlisting">printf(<i class="lineannotation">&quot;</I
>%.51f\n<i class="lineannotation">&quot;</I
>, 5.1 - 2.4)
# 2.699999999999999733546474089962430298328399658203125

print(5.1 - 2.4, <i class="lineannotation">&quot;</I
>\n<i class="lineannotation">&quot;</I
>);
# 2.7</PRE
><p class="para">Don't worry too much about this: the <code class="literal">print()</CODE
> function's default format for printing floating-point numbers usually hides such minor representational inaccuracies. If this ends up being a problem, the Math::BigInt and Math::BigFloat object modules provide infinite-precision arithmetic for integers and floating-point numbers at the cost of somewhat slower execution. For details, see <a class="olink" href="../prog/ch07_01.htm">Chapter 7</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
> or the online documentation on these modules.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch02-15504">2.4.2 Operators for Strings</A
></H3
><p class="para"><a class="indexterm" name="ch02-idx-1649-0"></A
><a class="indexterm" name="ch02-idx-1649-1"></A
>String values can be <a class="indexterm" name="ch02-idx-1650-0"></A
><a class="indexterm" name="ch02-idx-1650-1"></A
>concatenated with the "<code class="literal">.</CODE
>" operator. (Yes, we are using a single period.) This concatenation does not alter either string, any more than <code class="literal">2+3</CODE
> alters either <code class="literal">2</CODE
> or <code class="literal">3</CODE
>. The resulting (longer) string is then available for further computation or to be stored into a variable. For example:</P
><pre class="programlisting">&quot;hello&quot; . &quot;world&quot;        # same as &quot;helloworld&quot;
'hello world' . &quot;\n&quot;     # same as &quot;hello world\n&quot;
&quot;fred&quot; . &quot; &quot; . &quot;barney&quot;  # same as &quot;fred barney&quot;</PRE
><p class="para">Note that the concatenation must be explicitly called for with the <code class="literal">.</CODE
> operator. You do not merely have to stick the two values close to each other.</P
><p class="para">Another set of operators for strings are the string comparison operators. These operators are FORTRAN like, as in using <code class="literal">lt</CODE
> for less than, and so on. The operators compare the ASCII values of the characters of the strings in the usual fashion. The complete set of comparison operators (for both numbers and strings) is given in <a class="xref" href="#ch02-pgfId-348" title="Numeric and String Comparison Operators">Table 2.2</A
>. </P
><br><table class="table" border="1" cellpadding="3"><caption class="table"><a class="title" name="ch02-pgfId-348">Table 2.2: Numeric and String Comparison Operators</A
></CAPTION
><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1"><p class="para">Comparison</P
></TH
><th class="entry" align="LEFT" rowspan="1" colspan="1"><p class="para">Numeric</P
></TH
><th class="entry" align="LEFT" rowspan="1" colspan="1"><p class="para">String</P
></TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">Equal</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><a class="indexterm" name="ch02-idx-1708-0"></A
><code class="literal">==</CODE
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">eq</CODE
><a class="indexterm" name="ch02-idx-1729-0"></A
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">Not equal</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">!=</CODE
><a class="indexterm" name="ch02-idx-1711-0"></A
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">ne</CODE
><a class="indexterm" name="ch02-idx-1732-0"></A
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">Less than</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">&lt;</CODE
><a class="indexterm" name="ch02-idx-1714-0"></A
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">lt</CODE
><a class="indexterm" name="ch02-idx-1735-0"></A
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">Greater than</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">&gt;</CODE
><a class="indexterm" name="ch02-idx-1720-0"></A
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><a class="indexterm" name="ch02-idx-1738-0"></A
><code class="literal">gt</CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">Less than or equal to</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">&lt;=</CODE
><a class="indexterm" name="ch02-idx-1723-0"></A
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">le</CODE
><a class="indexterm" name="ch02-idx-1741-0"></A
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">Greater than or equal to</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">&gt;=</CODE
><a class="indexterm" name="ch02-idx-1726-0"></A
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><a class="indexterm" name="ch02-idx-1744-0"></A
><code class="literal">ge</CODE
></P
></TD
></TR
></TBODY
></TABLE
><p class="para"><a class="indexterm" name="ch02-idx-768602-0"></A
>You may wonder why there are separate operators for numbers and strings, if numbers and strings are automatically converted back and forth. Consider the two values 7 and 30. If compared as numbers, 7 is obviously less than 30, but if compared as strings, the string <code class="literal">&quot;30&quot;</CODE
> comes <em class="emphasis">before</EM
> the string <code class="literal">&quot;7&quot;</CODE
> (because the ASCII value for <code class="literal">3</CODE
> is less than the value for <code class="literal">7</CODE
>), and hence is less. Perl always requires you to specify the proper type of comparison, whether it be numeric or string.</P
><p class="para">Still another string operator is the <a class="indexterm" name="ch02-idx-768603-0"></A
><a class="indexterm" name="ch02-idx-768603-1"></A
><em class="emphasis">string repetition</EM
> operator, consisting of the single lowercase letter <a class="indexterm" name="ch02-idx-768604-0"></A
><code class="literal">x</CODE
>. This operator takes its left operand (a string), and makes as many concatenated copies of that string as indicated by its right operand (a number). For example:</P
><pre class="programlisting">&quot;fred&quot; x 3         # is &quot;fredfredfred&quot;
&quot;barney&quot; x (4+1)   # is &quot;barney&quot; x 5, or 
                   # &quot;barneybarneybarneybarneybarney&quot;
(3+2) x 4          # is 5 x 4, or really &quot;5&quot; x 4, which is &quot;5555&quot;</PRE
><p class="para">That last example is worth spelling out slowly. The parentheses on <code class="literal">(3+2)</CODE
> force this part of the expression to be evaluated first, yielding five. (The parentheses here are working as in standard math.) But the string repetition operator wants a string for a left operand, so the number <code class="literal">5</CODE
> is converted to the string &quot;<code class="literal">5&quot;</CODE
> (using rules described in detail later), a one-character string. This new string is then copied four times, yielding the four-character string <code class="literal">5555</CODE
>. If we had reversed the order of the operands, we would have made five copies of the string <code class="literal">4</CODE
>, yielding <code class="literal">44444</CODE
>. This shows that string repetition is not commutative.</P
><p class="para">If necessary, the copy count (the right operand) is first truncated to an integer value (4.8 becomes 4) before being used. A copy count of less than 1 results in an empty (zero-length) string.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch02-pgfId-768734">2.4.3 Operator Precedence and Associativity</A
></H3
><p class="para"><a class="indexterm" name="ch02-idx-768606-0"></A
><a class="indexterm" name="ch02-idx-768606-1"></A
>Operator precedence defines how to resolve the ambiguous case in which two operators are trying to operate on three operands. For example, in the expression <code class="literal">2+3*4</CODE
>, do we perform the addition first or the multiplication first? If we did the addition first, we'd get <code class="literal">5*4</CODE
>, or <code class="literal">20</CODE
>. But if we did the multiplication first (as we were taught in math class), we'd get <code class="literal">2+12</CODE
>, or <code class="literal">14</CODE
>. Fortunately, Perl chooses the common mathematical definition, performing the multiplication first. Because of this, we say multiplication has a <em class="emphasis">higher precedence</EM
> than addition.</P
><p class="para">You can override the order defined by precedence using <a class="indexterm" name="ch02-idx-768607-0"></A
><a class="indexterm" name="ch02-idx-768607-1"></A
>parentheses. Anything in parentheses is completely computed before the operator outside of the parentheses is applied (just like you learned in your math class). So if I really want the addition before the multiplication, I can say <code class="literal">(2+3)*4</CODE
>, yielding <code class="literal">20</CODE
>. Also, if I wanted to demonstrate that multiplication is performed before addition, I could add a decorative but functionless set of parentheses in <code class="literal">2+(3*4)</CODE
>.</P
><p class="para">While precedence is intuitive for addition and multiplication,[<a class="footnote" href="#ch02-pgfId-1451">6</A
>] we start running into problems when faced with, say, string concatenation compared with exponentiation. You can resolve this by consulting the official, accept-no-substitutes Perl operator precedence chart, shown in <a class="xref" href="#ch02-20192" title="Associativity and Precedence of Operators">Table 2.3</A
>. (Note that some of the operators have not yet been described, and in fact, may not even appear anywhere in this book, but don't let that fact scare you away from reading about them.) Operators also found in C have the same precedence as in C).</P
><blockquote class="footnote"><div class="footnote"><p class="para"><a class="footnote" name="ch02-pgfId-1451">[6]</A
> Asssuming you recall  your high school algebra class. If not, simply use  parentheses to improve clarity.</P
></DIV
></BLOCKQUOTE
><br><table class="table" border="1" cellpadding="3"><caption class="table"><a class="title" name="ch02-20192">Table 2.3: Associativity and Precedence of Operators</A
></CAPTION
><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1"><p class="para">Associativity</P
></TH
><th class="entry" align="LEFT" rowspan="1" colspan="1"><p class="para">Operator</P
></TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">Left</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">The "list" operators (leftward)</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">Left</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">-&gt;</CODE
> (method call, dereference)</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">Nonassociative</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">++</CODE
> <code class="literal">--</CODE
> (autoincrement, autodecrement)</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">Right</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">**</CODE
> (exponentiation)</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">Right</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">!</CODE
> <code class="literal">~</CODE
> <code class="literal">\</CODE
> <code class="literal">+</CODE
>  <code class="literal">-</CODE
> (logical not, bit not, reference operator, unary plus, unary minus)</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">Left</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">=~</CODE
> <code class="literal">!~</CODE
> (matches, doesn't match)</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">Left</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">*</CODE
> <code class="literal">/</CODE
> <code class="literal">%</CODE
> <code class="literal">x</CODE
> (multiply, divide, modulus, string replicate)</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">Left</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">+</CODE
> <code class="literal">-</CODE
> <code class="literal">.</CODE
> (add, subtract, string concatenate)</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">Left</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">&lt;&lt; &gt;&gt; (shift operators)</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">Nonassociative</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Named unary operators (like <code class="literal">chomp</CODE
>)</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">Nonassociative</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">&lt; &gt; &lt;= &gt;= lt gt le ge</CODE
> (relational operators)</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">Nonassociative</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">== != &lt;=&gt; eq ne cmp </CODE
>(equality operators)</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">Left</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">&amp;</CODE
> (bit and)</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">Left</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">|</CODE
> <code class="literal">^</CODE
> (bit or, bit xor)</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">Left</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">&amp;&amp;</CODE
> (logical and)</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">Left</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">||</CODE
> (logical or)</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">Nonassociative</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">.. ...</CODE
>  (noninclusive and inclusive range)</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">Right</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">?:</CODE
> (if then else)</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">Right</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">=</CODE
> <code class="literal">+=</CODE
> <code class="literal">-=</CODE
> <code class="literal">*=</CODE
>, etc. (assignment and binary assignment)</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">Left</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">,</CODE
> <code class="literal">=&gt;</CODE
> (comma and comma arrow)</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">Nonassociative</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">List operators (rightward)</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">Right</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">not</CODE
> (logical not)</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">Left</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">and</CODE
> (logical and)</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">Left</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">or</CODE
> <code class="literal">xor</CODE
> (logical or, logical xor)</P
></TD
></TR
></TBODY
></TABLE
><p class="para">In <a class="xref" href="#ch02-20192" title="Associativity and Precedence of Operators">Table 2.3</A
>, any given operator has higher precedence than those listed below it, and lower precedence than all of the operators listed above it.</P
><p class="para">Operators at the same precedence level resolve according to rules of <em class="emphasis">associativity</EM
>. Just like precedence, <a class="indexterm" name="ch02-idx-768608-0"></A
><a class="indexterm" name="ch02-idx-768608-1"></A
>associativity resolves the order of operations when two operators of the same precedence compete for three operands:</P
><pre class="programlisting">2 ** 3 ** 4   # 2 ** (3 ** 4), or 2 ** 81, or approx 2.41e24
72 / 12 / 3   # (72 / 12) / 3, or 6/3, or 2
30 / 6 * 3    # (30/6)*3, or 15</PRE
><p class="para">In the first case, the <code class="literal">**</CODE
> operator has <a class="indexterm" name="ch02-idx-768609-0"></A
>right associativity, so the parentheses are implied on the right. Comparatively, the <code class="literal">*</CODE
> and <code class="literal">/</CODE
> operators have <a class="indexterm" name="ch02-idx-768610-0"></A
>left associativity, yielding a set of implied parentheses on the left.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch02-pgfId-769010">2.4.4 Conversion Between Numbers and Strings</A
></H3
><p class="para"><a class="indexterm" name="ch02-idx-768611-0"></A
><a class="indexterm" name="ch02-idx-768611-1"></A
>If you use a string value as an operand for a numeric operator (say, <code class="literal">+</CODE
>), Perl automatically converts the string to its equivalent numeric value, as if you had entered it as a decimal floating-point value.[<a class="footnote" href="#ch02-pgfId-860275">7</A
>] Trailing nonnumerics and leading whitespaces are politely and quietly ignored, so "<code class="literal">123.45fred</CODE
>" (with a leading space) converts to <code class="literal">123.45</CODE
> with nary a warning.[<a class="footnote" href="#ch02-pgfId-769035">8</A
>] At the extreme, something that <em class="emphasis">isn't</EM
> a number at all converts to zero without warning (such as the string <code class="literal">fred</CODE
> used as a number).</P
><blockquote class="footnote"><div class="footnote"><p class="para"><a class="footnote" name="ch02-pgfId-860275">[7]</A
> Hex and octal values are not supported in this automatic conversion. Use <a class="indexterm" name="ch02-idx-860273-0"></A
><code class="literal">hex</CODE
> and <a class="indexterm" name="ch02-idx-860274-0"></A
><code class="literal">oct</CODE
> to interpret hex and octal values.</P
></DIV
><div class="footnote"><p class="para"><a class="footnote" name="ch02-pgfId-769035">[8]</A
> Unless you turn on the <code class="literal">-w</CODE
> option from the command line. which you should really always do for safety's sake.</P
></DIV
></BLOCKQUOTE
><p class="para">Likewise, if you give a numeric value when a string value is needed (for the string concatenate operator, for example), the numeric value is expanded into whatever string would have been printed for that number. For example, if you want to concatenate an <code class="literal">X</CODE
> followed by the results of 4 multiplied by 5, you can say this simply as:</P
><pre class="programlisting">&quot;X&quot; . (4 * 5) # same as &quot;X&quot; . 20, or &quot;X20&quot;</PRE
><p class="para">(Remember that the parentheses force <code class="literal">4*5</CODE
> to be computed first, before considering the string concatenation operator.)</P
><p class="para">In other words, you don't really have to worry about whether you have a number or a string (most of the time). Perl performs all the conversions for you.</P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch02_03.htm#ch02-pgfId-768730" title="2.3 Strings"><img src="../gifs/txtpreva.gif" alt="Previous: 2.3 Strings" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Learning Perl on Win32 Systems"><img src="../gifs/txthome.gif" alt="Learning Perl on Win32 Systems" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch02_05.htm" title="2.5 Scalar Variables"><img src="../gifs/txtnexta.gif" alt="Next: 2.5 Scalar Variables" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">2.3 Strings</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">2.5 Scalar Variables</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
