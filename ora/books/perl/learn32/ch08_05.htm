<html><head>
<title>[Chapter 8] 8.5 Private Variables in Functions</TITLE>
<meta name="DC.title" content="Learning Perl on Win32 Systems"><meta name="DC.creator" content="Randal L. Schwartz, Erik Olson &amp; Tom Christiansen"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:34:00Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-324-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch08_01.htm" title="8. Functions"><link rel="prev" href="ch08_04.htm" title="8.4 Arguments"><link rel="next" href="ch08_06.htm" title="8.6 Semiprivate Variables Using local"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Learning Perl on Win32 Systems" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,54" href="index.htm" alt="Learning Perl on Win32 Systems"><area shape="RECT" coords="467,0,514,18" href="../search/wsrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch08_04.htm" title="8.4 Arguments"><img src="../gifs/txtpreva.gif" alt="Previous: 8.4 Arguments" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch08_01.htm" title="8. Functions">Chapter 8<br>Functions</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch08_06.htm" title="8.6 Semiprivate Variables Using local"><img src="../gifs/txtnexta.gif" alt="Next: 8.6 Semiprivate Variables Using local" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch08-24936">8.5 Private Variables in Functions</A
></H2
><p class="para">We've already talked about the <code class="literal">@_</CODE
> variable and how a local copy gets created for each subroutine invoked with parameters. You can create your own scalar, array, and hash variables that work the same way. You do this with the <code class="literal">my</CODE
> operator, which takes a list of variable names and creates <a class="indexterm" name="ch08-idx-733-0"></A
>local versions of them (or <em class="emphasis">instantiations</EM
>, if you like bigger words). Here's that <code class="literal">add</CODE
> function again, this time using <code class="literal">my</CODE
>:</P
><pre class="programlisting">sub add {
         my $sum;         # make $sum a local variable
         $sum = 0;        # initialize the sum
         foreach $_ (@_) {
             $sum += $_;  # add each element
         }
         return $sum;     # last expression evaluated: 
                          # the sum of elements
}</PRE
><p class="para">When the first body statement is executed, any current value of the global variable <code class="literal">$sum</CODE
> is saved away, and a brand new variable named <code class="literal">$sum</CODE
> is created (with the value <a class="indexterm" name="ch08-idx-84178-0"></A
><code class="literal">undef</CODE
>). When the subroutine exits, Perl discards the local variable and restores the previous (global) value. This method works even if the <code class="literal">$sum</CODE
> variable is currently a local variable from another subroutine (a subroutine that invokes this one, or one that invokes one that invokes this one, and so on). Variables can have many nested local versions, although you can access only one at a time.</P
><p class="para">Here's a way to create a list of all the elements of an array greater than 100:</P
><pre class="programlisting">sub bigger_than_100 {
         my (@result);         # temporary for holding the return value
         foreach $_ (@_) {     # step through the arg list
             if ($_ &gt; 100) {   # is it eligible?
                 push(@result,$_); # add it
             }
         }
         return @result;           # return the final list
}</PRE
><p class="para">What if we wanted all elements greater than 50, rather than all elements greater than 100? We'd have to edit the program, changing each 100 to 50. But what if we need both? Well, we can replace the 50 or 100 with a variable reference instead. This change makes the program look like:</P
><pre class="programlisting">sub bigger_than {
         my($n,@values);           # create some local variables
         ($n,@values) = @_;        # split args into limit and values
         my(@result); # temporary for holding the return value
         foreach $_ (@values) {    # step through the arg list
             if ($_ &gt; $n) {        # is it eligible?
                 push(@result,$_); # add it
             }
         }
         @result;                  # return the final list
}
# some invocations:
@new = bigger_than(100,@list);     # @new gets all @list &gt; 100
@this = bigger_than(5,1,5,15,30);  # @this gets (15,30)</PRE
><p class="para">Notice that this time, we used two additional local variables to give <a class="indexterm" name="ch08-idx-84179-0"></A
>names to arguments. This method is fairly common in practice&nbsp;- you can more easily talk about <code class="literal">$n</CODE
> and <code class="literal">@values</CODE
> than talk about <code class="literal">$_[0]</CODE
> and <code class="literal">@_[1..$#_]</CODE
>, and <code class="literal">$n</CODE
> and <code class="literal">@values</CODE
> are safer as well.</P
><p class="para">The result of <code class="literal">my</CODE
> is an assignable list, meaning that it can be used on the left side of an array assignment operator. You can give this list initial values for each of the newly created variables. (If you don't give values to the list, the new variables start with a value of <code class="literal">undef</CODE
>, just like any other new variable.) As a result, we can combine the first two statements of this subroutine, replacing:</P
><pre class="programlisting">my($n,@values);
($n,@values) = @_; # split args into limit and values</PRE
><p class="para">with:</P
><pre class="programlisting">my($n,@values)= @_;</PRE
><p class="para">This is, in fact, a very common Perl-ish thing to do. Local nonargument variables can be given literal values in the same way, such as:</P
><pre class="programlisting">my($sum) = 0; # initialize local variable</PRE
><p class="para">Be warned that despite its appearance as a declaration, <a class="indexterm" name="ch08-idx-675-0"></A
><a class="indexterm" name="ch08-idx-675-1"></A
><code class="literal">my</CODE
> is really an executable operator. Good Perl hacking strategy suggests that you bunch all of your <code class="literal">my</CODE
> operators at the beginning of the subroutine definition, before you get into the meat of the routine.</P
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch08_04.htm" title="8.4 Arguments"><img src="../gifs/txtpreva.gif" alt="Previous: 8.4 Arguments" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Learning Perl on Win32 Systems"><img src="../gifs/txthome.gif" alt="Learning Perl on Win32 Systems" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch08_06.htm" title="8.6 Semiprivate Variables Using local"><img src="../gifs/txtnexta.gif" alt="Next: 8.6 Semiprivate Variables Using local" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">8.4 Arguments</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">8.6 Semiprivate Variables Using local</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
