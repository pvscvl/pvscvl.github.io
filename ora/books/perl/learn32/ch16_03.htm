<html><head>
<title>[Chapter 16] 16.3 Getting Network Information</TITLE>
<meta name="DC.title" content="Learning Perl on Win32 Systems"><meta name="DC.creator" content="Randal L. Schwartz, Erik Olson &amp; Tom Christiansen"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:36:16Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-324-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch16_01.htm" title="16. System Information"><link rel="prev" href="ch16_02.htm" title="16.2 Packing and Unpacking Binary Data"><link rel="next" href="ch16_04.htm#ch16-pgfId-648139" title="16.4 The Registry"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Learning Perl on Win32 Systems" usemap="#srchmap" border="0"></H1
><map name="srchmap"index.html><area shape="RECT" coords="0,0,466,54" href="index.htm" alt="Learning Perl on Win32 Systems"><area shape="RECT" coords="467,0,514,18" href="../search/wsrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch16_02.htm" title="16.2 Packing and Unpacking Binary Data"><img src="../gifs/txtpreva.gif" alt="Previous: 16.2 Packing and Unpacking Binary Data" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch16_01.htm" title="16. System Information">Chapter 16<br>System Information</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch16_04.htm#ch16-pgfId-648139" title="16.4 The Registry"><img src="../gifs/txtnexta.gif" alt="Next: 16.4 The Registry" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch16-25056">16.3 Getting Network Information</A
></H2
><p class="para">Perl supports network programming in a way that is very familiar to those who have written network code in C programs. In fact, most of the Perl functions that provide network access have the same names and similar parameters as their C counterparts. We can't teach a complete course on network programming in this chapter, but let's take a look at one of the task fragments to see how it's done in Perl.</P
><p class="para">One of the things you need to find out is the network address that goes with a network name, or vice versa. In C, you use the <em class="emphasis"></EM
><a class="indexterm" name="ch16-idx-647685-0"></A
><code class="literal">gethostbyname</CODE
>  routine to convert a network name to a network address. You then use this address to create a connection from your program to another program somewhere else.</P
><p class="para">The Perl function to translate a host name to an address has the same name and similar parameters as the C routine, and looks like this:</P
><pre class="programlisting">($name, $aliases, $addrtype, $length, @addrs) =
        gethostbyname($name); # generic form of gethostbyname</PRE
><p class="para">The parameter to this function is a hostname&nbsp;- for example, <em class="emphasis">slate.bedrock.com</EM
>. The return value is a list of four or more parameters, depending on how many addresses are associated with the name. If the hostname is not valid, the function returns an empty list.</P
><p class="para">If <code class="literal">gethostbyname</CODE
> is called in a scalar context, only the (first) address is returned.</P
><p class="para">When <code class="literal">gethostbyname()</CODE
>completes successfully, <code class="literal">$name</CODE
> is the <a class="indexterm" name="ch16-idx-647684-0"></A
><em class="emphasis">canonical name</EM
>, which differs from the input name if the input name is an alias. <code class="literal">$aliases</CODE
> is a list of space-separated names by which the host is also known. <code class="literal">$addrtype</CODE
> gives a coded value to indicate the form of the addresses. In this case, for <code class="literal"></CODE
><em class="emphasis">slate.bedrock.com</EM
>, we can presume that the value indicates an IP address, usually represented as four numbers under 256, separated by dots. <code class="literal">$length</CODE
> gives the number of addresses, which is actually redundant information because you can look at the length of <code class="literal">@addrs</CODE
> anyway.</P
><p class="para">But the useful part of the return value is <code class="literal">@addrs</CODE
>. Each element of the list is a separate IP address, stored in an internal format, handled in Perl as a four-character string.[<a class="footnote" href="#ch16-pgfId-648004">1</A
>] While this four-character string is exactly what other Perl networking functions are looking for, suppose we wanted to print out the result for the user to see. In this case, we need to convert the return value into a human-readable format with the assistance of the <a class="indexterm" name="ch16-idx-647686-0"></A
><code class="literal">unpack</CODE
> function and a little additional massaging. Here's some code that prints one of <code class="literal"></CODE
><em class="emphasis">slate.bedrock.com'</EM
> s IP addresses:</P
><blockquote class="footnote"><div class="footnote"><p class="para"><a class="footnote" name="ch16-pgfId-648004">[1]</A
> Well, at least until IPv6.</P
></DIV
></BLOCKQUOTE
><pre class="programlisting">($addr) = (gethostbyname(&quot;slate.bedrock.com&quot;))[4];
print &quot;Slate's address is &quot;,
        <a class="indexterm" name="ch16-idx-647687-0"></A
>join(&quot;.&quot;,<a class="indexterm" name="ch16-idx-647688-0"></A
>unpack(&quot;C4&quot;, $addr)), &quot;\n&quot;;</PRE
><p class="para">The <code class="literal">unpack</CODE
> takes the four-byte string and returns four numbers. This just happens to be in the right order for the <code class="literal">join</CODE
> to glue in a dot between each pair of numbers to make the human-readable form. See <a class="xref" href="appc_01.htm" title="Networking Clients">Appendix C, <cite class="appendix">Networking Clients</CITE
></A
>, for information about building simple networking clients.</P
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch16_02.htm" title="16.2 Packing and Unpacking Binary Data"><img src="../gifs/txtpreva.gif" alt="Previous: 16.2 Packing and Unpacking Binary Data" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Learning Perl on Win32 Systems"><img src="../gifs/txthome.gif" alt="Learning Perl on Win32 Systems" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch16_04.htm#ch16-pgfId-648139" title="16.4 The Registry"><img src="../gifs/txtnexta.gif" alt="Next: 16.4 The Registry" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">16.2 Packing and Unpacking Binary Data</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">16.4 The Registry</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
