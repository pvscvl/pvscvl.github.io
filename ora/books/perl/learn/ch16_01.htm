<html><head>
<title>[Chapter 16] System Database Access</TITLE>
<meta name="DC.title" content="Learning Perl"><meta name="DC.creator" content="Randal Schwartz, Tom Christiansen &amp; Larry Wall"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:35:33Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-284-0" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="index.htm" title="Learning Perl"><link rel="prev" href="ch15_06.htm" title="15.6 Exercises"><link rel="next" href="ch16_02.htm" title="16.2 Packing and Unpacking Binary Data"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Learning Perl" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,54" href="index.htm" alt="Learning Perl"><area shape="RECT" coords="467,0,514,18" href="../search/lsrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch15_06.htm" title="15.6 Exercises"><img src="../gifs/txtpreva.gif" alt="Previous: 15.6 Exercises" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 16</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch16_02.htm" title="16.2 Packing and Unpacking Binary Data"><img src="../gifs/txtnexta.gif" alt="Next: 16.2 Packing and Unpacking Binary Data" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="chapter"><h1 class="chapter"><a class="title" name="ch16-11128">16. System Database Access</A
></H1
><div class="htmltoc"><p><b>Contents:</B
><br><a class="sect1" href="#ch16-16248" title="16.1 Getting Password and Group Information">Getting Password and Group Information</A
><br><a class="sect1" href="ch16_02.htm" title="16.2 Packing and Unpacking Binary Data">Packing and Unpacking Binary Data</A
><br><a class="sect1" href="ch16_03.htm" title="16.3 Getting Network Information">Getting Network Information</A
><br><a class="sect1" href="ch16_04.htm" title="16.4 Exercise">Exercise</A
></P
><p></P
></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch16-16248">16.1 Getting Password and Group Information</A
></H2
><p class="para">The information that the UNIX system keeps about your <a class="indexterm" name="ch16-idx-647652-0"></A
><a class="indexterm" name="ch16-idx-647652-1"></A
>username and user ID is fairly public. In fact, nearly everything but your unencrypted password is available for perusal by any program that cares to scan the <a class="indexterm" name="ch16-idx-647651-0"></A
><em class="emphasis">/etc/passwd</EM
> file. This file has a particular format, defined in <em class="emphasis">passwd</EM
> (5), which looks something like this:</P
><pre class="programlisting">name:passwd:uid:gid:gcos:dir:shell</PRE
><p class="para">The fields are defined as follows:</P
><dl class="variablelist"><dt class="term"><code class="literal">name</CODE
></DT
><dd class="listitem"><p class="para">The login name of the user</P
></DD
><dt class="term"><code class="literal">passwd</CODE
></DT
><dd class="listitem"><p class="para">The encrypted password, or something simple if a shadow password file is being used</P
></DD
><dt class="term"><code class="literal">uid</CODE
></DT
><dd class="listitem"><p class="para">The user ID number (0 for <code class="literal">root</CODE
>, nonzero for normal users)</P
></DD
><dt class="term"><code class="literal">gid</CODE
></DT
><dd class="listitem"><p class="para">The default login group (group 0 may be privileged, but not necessarily)</P
></DD
><dt class="term"><code class="literal">gcos</CODE
></DT
><dd class="listitem"><p class="para">The <a class="indexterm" name="ch16-idx-647653-0"></A
>GCOS field, which typically contains the user's full name followed by a comma and some other information</P
></DD
><dt class="term"><code class="literal">dir</CODE
></DT
><dd class="listitem"><p class="para">The <a class="indexterm" name="ch16-idx-647654-0"></A
>home directory (where you go when you type <em class="emphasis">cd</EM
> without any arguments and where most of your "dot-files" are kept) </P
></DD
><dt class="term"><code class="literal">shell</CODE
></DT
><dd class="listitem"><p class="para">Your login shell, typically <em class="emphasis">/bin/sh</EM
> or <em class="emphasis">/bin/csh</EM
> (or maybe even <em class="emphasis">/usr/bin/perl</EM
>, if you're crazy)</P
></DD
></DL
><p class="para">A typical portion of the password file looks like this:</P
><pre class="programlisting">fred:*:123:15:Fred Flintstone,,,:/home/fred:/bin/csh
barney:*:125:15:Barney Rubble,,,:/home/barney:/bin/csh</PRE
><p class="para">Now, Perl has enough tools to parse this kind of line easily (using <code class="literal">split</CODE
>, for example), without drawing on special purpose routines. But the UNIX programing library does have a set of special routines: <em class="emphasis">getpwent </EM
>(3), <em class="emphasis">getpwuid </EM
>(3), <em class="emphasis">getpwnam </EM
>(3), and so on. These routines are available in Perl using the same names and similar arguments and return values.</P
><p class="para">For example, the <em class="emphasis">getpwnam</EM
> routine becomes the Perl <a class="indexterm" name="ch16-idx-647655-0"></A
><code class="literal">getpwnam </CODE
>function. The single argument is a username (like <code class="literal">fred</CODE
> or <code class="literal">barney</CODE
>), and the return value is the <em class="emphasis">/etc/passwd</EM
> line split apart into a list with the following values:</P
><pre class="programlisting">($name, $passwd, $uid, $gid, $quota, $comment, 
 $gcos, $dir, $shell)</PRE
><p class="para">Note that there are few more values here than in the password file. For every UNIX system we've seen, the <code class="literal">$quota</CODE
> field is always empty, and the <code class="literal">$comment</CODE
> and the <code class="literal">$gcos</CODE
> field often both contain the entire GCOS field. So, for good old <code class="literal">fred</CODE
>, you get</P
><pre class="programlisting">(&quot;fred&quot;, &quot;*&quot;, 123, 15, &quot;&quot;, &quot;Fred Flintstone,,,&quot;,
 &quot;Fred Flintstone,,,&quot;, &quot;/home/fred&quot;,&quot; /bin/csh&quot;)</PRE
><p class="para">by invoking either of the following two calls:</P
><pre class="programlisting">getpwuid(123)
getpwnam(&quot;fred&quot;)</PRE
><p class="para">Note that <a class="indexterm" name="ch16-idx-647656-0"></A
><code class="literal">getpwuid</CODE
> takes a UID number, while <code class="literal">getpwnam</CODE
> takes the login name as its argument.</P
><p class="para">The <code class="literal">getpwnam</CODE
> and <code class="literal">getpwuid</CODE
> functions also have a return value when called in a scalar sense. They each return the thing you've asked them to get. For example:</P
><pre class="programlisting">$idnum = getpwuid(&quot;daemon&quot;);
$login = getpwnam(25);</PRE
><p class="para">You'll probably want to pick this apart, using some of the list operations that we've seen before. One way is to grab a part of the list using a list slice, such as getting just the home directory for Fred using:</P
><pre class="programlisting">($fred_home) = (getpwnam (&quot;fred&quot;))[7]; # put Fred's home</PRE
><p class="para">How would you scan through the entire password file? Well, you could do something like this:</P
><pre class="programlisting">for($id = 0; $id &lt;= 10_000; $id++)     {
    @stuff = getpwuid $id;
} ### not recommended!</PRE
><p class="para">But this is probably the wrong way to go. Just because there's more than one way to do it doesn't mean that all ways are equally cool.</P
><p class="para">You can think of the <code class="literal">getpwuid</CODE
> and <code class="literal">getpwnam</CODE
> functions as <a class="indexterm" name="ch16-idx-647661-0"></A
><a class="indexterm" name="ch16-idx-647661-1"></A
><em class="emphasis">random access</EM
>; they grab a specific entry by key, so you have to have a key to start with. Another way of accessing the password file is <a class="indexterm" name="ch16-idx-647662-0"></A
><a class="indexterm" name="ch16-idx-647662-1"></A
><em class="emphasis">sequential access</EM
>&nbsp;- grabbing each entry one at a time.</P
><p class="para">The sequential access routines for the password file are the <a class="indexterm" name="ch16-idx-647658-0"></A
><code class="literal">setpwent</CODE
>, <code class="literal">getpwent</CODE
><a class="indexterm" name="ch16-idx-647659-0"></A
>, and <a class="indexterm" name="ch16-idx-647660-0"></A
><code class="literal">endpwent</CODE
> functions. Together, these three functions perform a sequential pass over all values in the password file. The <code class="literal">setpwent</CODE
> function initializes the scan at the beginning. After initialization, each call to <code class="literal">getpwent</CODE
> returns the next entry from the password file. When there is no more data to process, <code class="literal">getpwent</CODE
> returns an <a class="indexterm" name="ch16-idx-647663-0"></A
>empty list. Finally, calling <code class="literal">endpwent</CODE
> frees the resources used by the scanner; this is performed automatically upon exiting the program as well.</P
><p class="para">This description begs for an example, so here's one now:</P
><pre class="programlisting">setpwent();                                  # initialize the scan
while (@list = getpwent()) {                 # fetch the next entry
    ($login,$home) = <a class="indexterm" name="ch16-idx-647692-0"></A
>@list[0,7];             # grab login name and home
    print &quot;Home directory for $login is $home\n&quot;; # say so
}
endpwent();                                  # all done</PRE
><p class="para">This example shows the <a class="indexterm" name="ch16-idx-647664-0"></A
>home directory of everyone in the password file. Suppose you wanted them alphabetically by home directory? We learned about <a class="indexterm" name="ch16-idx-647665-0"></A
><code class="literal">sort</CODE
> in the previous chapter, so let's use it:</P
><pre class="programlisting">setpwent();                      # initialize the scan
while (@list = getpwent()) {     # fetch the next entry
    ($login,$home) = @list[0,7]; # grab login name and home
    $home{$login} = $home;       # save it away
}
endpwent();                      # all done
@keys = sort { $home{$a} cmp $home{$b} } keys %home;
foreach $login (@keys) {         # step through the sorted names
    print &quot;home of $login is $home{$login}\n&quot;;
}</PRE
><p class="para">This fragment, while a little longer, illustrates an important thing about scanning sequentially through the password file; you can save away the pertinent portions of the data in data structures of your choice. The first part of the example scans through the entire password file, creating a hash where the key is the login name and the value is the corresponding home directory for that login name. The <code class="literal">sort</CODE
> line takes the keys of the hash and sorts them according to string value. The final loop steps through the sorted keys, printing each value in turn.</P
><p class="para">Generally, you should use the random access routines (<code class="literal">getpwuid</CODE
> and <code class="literal">getpwnam</CODE
>) when you are looking up just a few values. For more than a few values, or even an exhaustive search, it's generally easier to do a sequential access pass (using <code class="literal">setpwent</CODE
>, <code class="literal">getpwent</CODE
>, and <code class="literal">endpwent</CODE
>) and extract the particular values you'll be looking for into a hash.[<a class="footnote" href="#ch16-pgfId-647946">1</A
>]</P
><blockquote class="footnote"><div class="footnote"><p class="para"><a class="footnote" name="ch16-pgfId-647946">[1]</A
> If you're on a site with a large NIS map, you probably do not want to preprocess the password file this way for performance reasons.</P
></DIV
></BLOCKQUOTE
><p class="para">The <a class="indexterm" name="ch16-idx-647666-0"></A
><em class="emphasis">/etc/group</EM
> file is accessed in a similar way. Sequential access is provided with the <a class="indexterm" name="ch16-idx-647667-0"></A
><code class="literal">setgrent</CODE
>, <code class="literal">getgrent</CODE
><a class="indexterm" name="ch16-idx-647668-0"></A
>, and <a class="indexterm" name="ch16-idx-647669-0"></A
><code class="literal">endgrent</CODE
> calls. The <code class="literal">getgrent</CODE
> call returns values of the form:</P
><pre class="programlisting">($name, $passwd, $gid, $members)</PRE
><p class="para">These four values correspond roughly to the four fields of the <em class="emphasis">/etc/group</EM
> file, so see the descriptions in the manpages about this file format for details. The corresponding random access functions are <a class="indexterm" name="ch16-idx-647670-0"></A
><code class="literal">getgrgid</CODE
> (by group ID) and <a class="indexterm" name="ch16-idx-647671-0"></A
><code class="literal">getgrnam</CODE
> (by group name).</P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch15_06.htm" title="15.6 Exercises"><img src="../gifs/txtpreva.gif" alt="Previous: 15.6 Exercises" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Learning Perl"><img src="../gifs/txthome.gif" alt="Learning Perl" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch16_02.htm" title="16.2 Packing and Unpacking Binary Data"><img src="../gifs/txtnexta.gif" alt="Next: 16.2 Packing and Unpacking Binary Data" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">15.6 Exercises</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">16.2 Packing and Unpacking Binary Data</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
