<html><head>
<title>[Chapter 2] 2.6 Scalar Operators and Functions</TITLE>
<meta name="DC.title" content="Learning Perl"><meta name="DC.creator" content="Randal Schwartz, Tom Christiansen &amp; Larry Wall"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:31:31Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-284-0" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch02_01.htm" title="2. Scalar Data"><link rel="prev" href="ch02_05.htm" title="2.5 Scalar Variables"><link rel="next" href="ch02_07.htm" title="2.7 &lt;STDIN&gt; as a Scalar Value"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Learning Perl" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,54" href="index.htm" alt="Learning Perl"><area shape="RECT" coords="467,0,514,18" href="../search/lsrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch02_05.htm" title="2.5 Scalar Variables"><img src="../gifs/txtpreva.gif" alt="Previous: 2.5 Scalar Variables" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch02_01.htm" title="2. Scalar Data">Chapter 2<br>Scalar Data</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch02_07.htm" title="2.7 &lt;STDIN&gt; as a Scalar Value"><img src="../gifs/txtnexta.gif" alt="Next: 2.7 &lt;STDIN&gt; as a Scalar Value" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch02-32461">2.6 Scalar Operators and Functions</A
></H2
><p class="para"><a class="indexterm" name="ch02-idx-768616-0"></A
><a class="indexterm" name="ch02-idx-768616-1"></A
>The most common operation on a scalar variable is <em class="emphasis">assignment</EM
><a class="indexterm" name="ch02-idx-768617-0"></A
><a class="indexterm" name="ch02-idx-768617-1"></A
>, which is the way to give a value to a variable. The Perl assignment operator is the <a class="indexterm" name="ch02-idx-768618-0"></A
>equal sign (much like C or FORTRAN), which takes a variable name on the left side and gives it the value of the expression on the right, like so:<pre class="programlisting">$a = 17;     # give $a the value of 17
$b = $a + 3; # give $b the current value of $a plus 3 (20)
$b = $b * 2; # give $b the value of $b multiplied by 2 (40)</PRE
></P
><p class="para">Notice that last line uses the <code class="literal">$b</CODE
> variable twice: once to get its value (on the right side of the <code class="literal">=</CODE
>), and once to define where to put the computed expression (on the left side of the <code class="literal">=</CODE
>). This is legal, safe, and in fact, rather common. In fact, it's so common that we'll see in a minute that we can write this using a convenient shorthand.</P
><p class="para">You may have noticed that scalar variables are always specified with the leading <code class="literal">$</CODE
>. In shell programming, you use <code class="literal">$</CODE
> to get the value, but leave the <code class="literal">$</CODE
> off to assign a new value. In <em class="emphasis">Java</EM
> or C, you leave the <code class="literal">$</CODE
> off entirely. If you bounce back and forth a lot, you'll find yourself typing the wrong things occasionally. This is expected. (Our solution was to stop writing shell, <em class="emphasis">awk</EM
>, and C programs, but that may not work for you.)</P
><p class="para">A <a class="indexterm" name="ch02-idx-768530-0"></A
>scalar assignment may be used as a value as well as an operation, as in C. In other words, <code class="literal">$a=3</CODE
> has a value, just as <code class="literal">$a+3</CODE
> has a value. The value is the value assigned, so the value of <code class="literal">$a=3</CODE
> is <code class="literal">3</CODE
>. Although this may seem odd at first glance, using an assignment as a value is useful if you wish to assign an intermediate value in an expression to a variable, or if you simply wish to copy the same value to more than one variable. For example:</P
><pre class="programlisting">$b = 4 + ($a = 3);      # assign 3 to $a, then add 4 to that
                        # resulting in $b getting 7
$d = ($c = 5);          # copy 5 into $c, and then also into $d
$d = $c = 5;            # the same thing without parentheses</PRE
><p class="para">That last example works because assignment is right-associative.</P
><div class="sect2"><h3 class="sect2"><a class="title" name="ch02-pgfId-768737">2.6.1 Binary Assignment Operators</A
></H3
><p class="para">Expressions like <code class="literal">$a = $a + 5</CODE
> (where the same variable appears on both sides of an assignment) occur frequently enough that Perl has a shorthand for the operation of altering a variable: the <a class="indexterm" name="ch02-idx-768619-0"></A
><a class="indexterm" name="ch02-idx-768619-1"></A
><em class="emphasis">binary assignment operator</EM
>. Nearly all binary operators that compute a value have a corresponding binary assignment form with an appended equal sign. For example, the following two lines are equivalent:</P
><pre class="programlisting">$a = $a + 5; # without the binary assignment operator
$a <a class="indexterm" name="ch02-idx-768620-0"></A
>+= 5;     # with the binary assignment operator</PRE
><p class="para">And so are these:</P
><pre class="programlisting">$b = $b * 3;
$b *= 3;</PRE
><p class="para">In each case, the operator causes the existing value of the variable to be altered in some way, rather than simply overwriting the value with the result of some new expression.</P
><p class="para">Another common assignment operator is the string concatenate operator:</P
><pre class="programlisting">$str = $str . &quot; &quot;; # append a space to $str
$str <a class="indexterm" name="ch02-idx-768621-0"></A
>.= &quot; &quot;;       # same thing with assignment operator</PRE
><p class="para">Nearly all binary operators are valid this way. For example, a <em class="emphasis">raise to the power of</EM
> operator is written as <a class="indexterm" name="ch02-idx-768622-0"></A
><code class="literal">**=</CODE
>. So, <code class="literal">$a **= 3</CODE
> means "raise the number in <code class="literal">$a</CODE
> to the third power, placing the result back in <code class="literal">$a</CODE
>".</P
><p class="para">Like the simple assignment operator, these operators have a value as well: the new value of the variable. For example:</P
><pre class="programlisting">$a = 3;
$b = ($a += 4); # $a and $b are both now 7</PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch02-pgfId-768738">2.6.2 Autoincrement and Autodecrement</A
></H3
><p class="para">As if it weren't already easy enough to add one to <code class="literal">$a</CODE
> by saying <code class="literal">$a += 1</CODE
>, Perl goes one further and shortens even this up. The <a class="indexterm" name="ch02-idx-768625-0"></A
><code class="literal">++</CODE
> operator (called the <a class="indexterm" name="ch02-idx-768624-0"></A
><a class="indexterm" name="ch02-idx-768624-1"></A
><em class="emphasis">autoincrement</EM
> operator) adds one to its operand, and returns the incremented value, like so:</P
><pre class="programlisting">$a += 1;   # with assignment operator
++$a;      # with prefix autoincrement
$d = 17;
$e = ++$d; # $e and $d are both 18 now</PRE
><p class="para">Here, the <code class="literal">++</CODE
> operator is being used as a <em class="emphasis">prefix</EM
> operator; that is, the operator appears to the left of its operand. The autoincrement may also be used in a <em class="emphasis">suffix</EM
> form (to the right of its operand). In this case, the result of the expression is the old value of the variable <em class="emphasis">before</EM
> the variable is incremented. For example:</P
><pre class="programlisting">$c = 17;
$d = $c++; # $d is 17, but $c is now 18</PRE
><p class="para">Because the value of the operand changes, the operand must be a scalar variable, not just an expression. You cannot say <code class="literal">++16</CODE
> to get <code class="literal">17</CODE
>, nor can you say <code class="literal">++($a+$b)</CODE
> to somehow get one more than the sum of <code class="literal">$a</CODE
> and <code class="literal">$b</CODE
>.</P
><p class="para">The <a class="indexterm" name="ch02-idx-768626-0"></A
><a class="indexterm" name="ch02-idx-768626-1"></A
>autodecrement operator (<a class="indexterm" name="ch02-idx-768627-0"></A
><code class="literal">--</CODE
>) is similar to the autoincrement operator, but subtracts one rather than adding one. Like the autoincrement operator, the autodecrement operator has a prefix and suffix form. For example:</P
><pre class="programlisting">$x = 12;
--$x;      # $x is now 11
$y = $x--; # $y is 11, and $x is now 10</PRE
><p class="para">The autoincrement and autodecrement operators also work on floating-point values. So autoincrementing a variable with the value <code class="literal">4.2</CODE
> yields <code class="literal">5.2</CODE
> as expected.[<a class="footnote" href="#ch02-pgfId-861786">10</A
>]</P
><blockquote class="footnote"><div class="footnote"><p class="para"><a class="footnote" name="ch02-pgfId-861786">[10]</A
> Autoincrement even works on strings. See <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
> or <em class="emphasis">perlop </EM
>(1) for that.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch02-pgfId-768739">2.6.3 The chop and chomp Functions</A
></H3
><p class="para"><a class="indexterm" name="ch02-idx-768629-0"></A
><a class="indexterm" name="ch02-idx-768629-1"></A
>A useful built-in function is <a class="indexterm" name="ch02-idx-768628-0"></A
><code class="literal">chop</CODE
>. This function takes a single argument within its parentheses&nbsp;- the name of a scalar variable&nbsp;- and removes the last character from the string value of that variable. For example:</P
><pre class="programlisting">$x = &quot;hello world&quot;;
chop($x); # $x is now &quot;hello worl&quot;</PRE
><p class="para">Note that the value of the argument is altered here, hence the requirement for a scalar variable, rather than simply a scalar value. It would not make sense, for example, to write <code class="literal">chop('suey')</CODE
> to change it to <code class="literal">'sue'</CODE
>, because there is no place in which to save the value. Besides, you could have just written <code class="literal">'sue'</CODE
> instead.</P
><p class="para">The value returned is the discarded character (the letter <code class="literal">d</CODE
> in <code class="literal">world</CODE
> above). This means that the following code is probably wrong:</P
><pre class="programlisting">$x = chop($x);  # WRONG: replaces $x with its last character
chop($x);       # RIGHT: as above, removes the last character</PRE
><p class="para">If <code class="literal">chop</CODE
> is given an empty string, it does nothing, and returns nothing, and doesn't raise an error or even whimper a bit.[<a class="footnote" href="#ch02-pgfId-1497">11</A
>] Most operations in Perl have sensible boundary conditions; in other words, you can use them right up to the edges (and beyond), frequently without complaint. Some have argued that this is one of Perl's fundamental flaws, while others write screaming programs without having to worry about the fringes. You decide which camp you wish to join.</P
><blockquote class="footnote"><div class="footnote"><p class="para"><a class="footnote" name="ch02-pgfId-1497">[11]</A
> Unless you are using the sanity-saving <kbd class="command">-w</KBD
> switch</P
></DIV
></BLOCKQUOTE
><p class="para">When you chop a string that has already been chopped, another character disappears off into "bit heaven." For example:</P
><pre class="programlisting">$a = &quot;hello world\n&quot;;
chop $a; # $a is now &quot;hello world&quot;
chop $a; # oops! $a is now &quot;hello worl&quot;</PRE
><p class="para">If you're not sure whether the variable has a newline on the end, you can use the slightly safer <code class="literal">chomp</CODE
> operator, which removes only a newline character,[<a class="footnote" href="#ch02-pgfId-1001">12</A
>] like so:<pre class="programlisting">$a = &quot;hello world\n&quot;;
chomp ($a); # $a is now &quot;hello world&quot;
chomp ($a); # aha! no change in $a</PRE
></P
><blockquote class="footnote"><div class="footnote"><p class="para"><a class="footnote" name="ch02-pgfId-1001">[12]</A
> Or whatever the input record separator <kbd class="command">$/</KBD
>is set to.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch02-pgfId-768694">2.6.4 Interpolation of Scalars into Strings</A
></H3
><p class="para">When a string literal is <a class="indexterm" name="ch02-idx-768631-0"></A
>double-quoted, it is subject to <a class="indexterm" name="ch02-idx-768630-0"></A
><em class="emphasis">variable interpolation</EM
> (besides being checked for backslash escapes). This means that the string is scanned for possible scalar variable[<a class="footnote" href="#ch02-pgfId-768769">13</A
>] names&nbsp;- namely, a dollar sign followed by letters, digits, and underscores. When a variable reference is found, it is replaced with its current value (or an empty string if the variable has not yet been assigned a value). For example:<pre class="programlisting">$a = &quot;fred&quot;;
$b = &quot;some text $a&quot;;             # $b is now &quot;some text fred&quot;
$c = &quot;no such variable $what&quot;;   # $c is &quot;no such variable &quot;</PRE
></P
><blockquote class="footnote"><div class="footnote"><p class="para"><a class="footnote" name="ch02-pgfId-768769">[13]</A
> And array variables, but we won't discuss those until <a class="xref" href="ch03_01.htm" title="Arrays and List Data">Chapter 3, <cite class="chapter">Arrays and List Data</CITE
></A
><em class="emphasis">.</EM
></P
></DIV
></BLOCKQUOTE
><p class="para">The text that replaces the variable is not rescanned; that is, even if there are dollar signs in the replaced value, no further replacement occurs:</P
><pre class="programlisting">$x = '$fred';  # literally a dollar sign followed by &quot;fred&quot;
$y = &quot;hey $x&quot;; # value is 'hey $fred': no double substitution</PRE
><p class="para">To prevent the substitution of a variable with its value, you must either alter that part of the string so that it appears in single quotes, or precede the <a class="indexterm" name="ch02-idx-768632-0"></A
>dollar sign with a backslash, which turns off the dollar sign's special significance:</P
><pre class="programlisting">$fred   = 'hi';
$barney = &quot;a test of &quot; . '$fred'; # literally: 'a test of $fred'
$barney2= &quot;a test of \$fred&quot;;     # same thing</PRE
><p class="para">The variable name will be the longest possible variable name that makes sense at that part of the string. This can be a problem if you want to follow the replaced value immediately with some constant text that begins with a letter, digit, or underscore. As Perl scans for variable names, it would consider those characters to be additional name characters, which is not what you want. Perl provides a delimiter for the variable name. Simply enclose the name of the variable in a pair of <a class="indexterm" name="ch02-idx-768529-0"></A
>curly braces. Or, you can end that part of the string and start another part of the string with a concatenation operator:</P
><pre class="programlisting">$fred   = &quot;pay&quot;; $fredday = &quot;wrong!&quot;;
$barney = &quot;It's $fredday&quot;;          # not payday, but &quot;It's wrong!&quot;
$barney = &quot;It's ${fred}day&quot;;        # now, $barney gets &quot;It's payday&quot;
$barney2 = &quot;It's $fred&quot;.&quot;day&quot;;      # another way to do it
$barney3 = &quot;It's &quot; . $fred . &quot;day&quot;; # and another way</PRE
><p class="para">The case-shifting string escapes can be used to alter the case of letters brought in with variable interpolation.[<a class="footnote" href="#ch02-pgfId-1269">14</A
>] For example:<pre class="programlisting">$bigfred   = &quot;\Ufred&quot;;                     # $bigfred is &quot;FRED&quot;
$fred      = &quot;fred&quot;; $bigfred = &quot;\U$fred&quot;; # same thing
$capfred   = &quot;\u$fred&quot;;                    # $capfred is &quot;Fred&quot;
$barney    = &quot;\LBARNEY&quot;;                   # $barney is now &quot;barney&quot;
$capbarney = &quot;\u\LBARNEY&quot;;                 # $capbarney is now &quot;Barney&quot;
$bigbarney = &quot;BARNEY&quot;; $capbarney = &quot;\u\L$bigbarney&quot;; # same</PRE
></P
><blockquote class="footnote"><div class="footnote"><p class="para"><a class="footnote" name="ch02-pgfId-1269">[14]</A
> You may find the <code class="literal">uc</CODE
>, <code class="literal">ucfirst</CODE
>, <code class="literal">lc</CODE
>, and <code class="literal">lcfirst</CODE
> functions easier to use.</P
></DIV
></BLOCKQUOTE
><p class="para">As you can see, the case-shifting string escapes are remembered within a string until they are used, so even though the first letter of <code class="literal">BARNEY</CODE
> doesn't follow the <code class="literal">\u</CODE
>, it remains uppercase because of the <code class="literal">\u</CODE
>.</P
><p class="para">The term <em class="emphasis">variable interpolation</EM
> is often used interchangeably with <a class="indexterm" name="ch02-idx-768634-0"></A
><em class="emphasis">double-quote interpolation</EM
>, because strings that are double-quoted are subject to variable interpolation. So too, are backquoted strings, described in <a class="xref" href="ch14_01.htm" title="Process Management">Chapter 14</A
>.</P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch02_05.htm" title="2.5 Scalar Variables"><img src="../gifs/txtpreva.gif" alt="Previous: 2.5 Scalar Variables" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Learning Perl"><img src="../gifs/txthome.gif" alt="Learning Perl" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch02_07.htm" title="2.7 &lt;STDIN&gt; as a Scalar Value"><img src="../gifs/txtnexta.gif" alt="Next: 2.7 &lt;STDIN&gt; as a Scalar Value" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">2.5 Scalar Variables</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">2.7 &lt;STDIN&gt; as a Scalar Value</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
