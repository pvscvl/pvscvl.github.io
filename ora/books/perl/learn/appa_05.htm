<html><head>
<title>[Appendix A] A.5 Chapter 6, Basic I/O</TITLE>
<meta name="DC.title" content="Learning Perl"><meta name="DC.creator" content="Randal Schwartz, Tom Christiansen &amp; Larry Wall"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:36:50Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-284-0" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="appa_01.htm" title="A. Exercise Answers"><link rel="prev" href="appa_04.htm" title="A.4 Chapter 5, Hashes"><link rel="next" href="appa_06.htm" title="A.6 Chapter 7, Regular Expressions"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Learning Perl" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,54" href="index.htm" alt="Learning Perl"><area shape="RECT" coords="467,0,514,18" href="../search/lsrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="appa_04.htm" title="A.4 Chapter 5, Hashes"><img src="../gifs/txtpreva.gif" alt="Previous: A.4 Chapter 5, Hashes" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="appendix" rel="up" href="appa_01.htm" title="A. Exercise Answers">Appendix A<br>Exercise Answers</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="appa_06.htm" title="A.6 Chapter 7, Regular Expressions"><img src="../gifs/txtnexta.gif" alt="Next: A.6 Chapter 7, Regular Expressions" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="appa-19281">A.5 Chapter 6, Basic I/O</A
></H2
><ol class="orderedlist"><li class="listitem"><p class="para"><a class="listitem" name="appa-pgfId-178868"></A
>Here's one way to do it:</P
><pre class="programlisting">print <a class="indexterm" name="appa-idx-178717-0"></A
>reverse &lt;&gt;;</PRE
><p class="para">You may be surprised at the brevity of this answer, but it will get the job done. Here's what is happening, from the inside out:</P
><ol class="orderedlist" type="a"><li class="listitem"><p class="para"><a class="listitem" name="appa-pgfId-178921"></A
>First, the <code class="literal">reverse</CODE
> function is looking for a list for its arguments. This means that the diamond operator (<code class="literal">&lt;&gt;</CODE
>) is being evaluated in a list context. Thus, all of the lines of the files named by command-line arguments (or standard input, if none are named) are read in and massaged into a list with one line per element.</P
></LI
><li class="listitem"><p class="para"><a class="listitem" name="appa-pgfId-178922"></A
>Next, the <code class="literal">reverse</CODE
> function reverses the list end for end.</P
></LI
><li class="listitem"><p class="para"><a class="listitem" name="appa-pgfId-178923"></A
>Finally, the <code class="literal">print</CODE
> function takes the resulting list, and displays it.</P
></LI
></OL
></LI
><li class="listitem"><p class="para"><a class="listitem" name="appa-pgfId-178924"></A
>Here's one way to do it:<pre class="programlisting">@ARGV = reverse @ARGV;
print reverse &lt;&gt;;</PRE
>The first line just takes any filename arguments and reverses them. That way if the user called this script with command line arguments "camel llama alpaca", <code class="literal">@ARGV</CODE
> would then contain "alpaca llama camel" instead. The second line reads in all the lines in all the files in <code class="literal">@ARGV</CODE
>, flips them end on end, and prints them. If no arguments were passed to the program, then as before, <code class="literal">&lt;&gt;</CODE
> works on STDIN instead.</P
></LI
><li class="listitem"><p class="para"><a class="listitem" name="appa-pgfId-181059"></A
>Here's one way to do it:</P
><pre class="programlisting">print &quot;List of strings:\n&quot;;
chomp(@strings = <a class="indexterm" name="appa-idx-178719-0"></A
>&lt;STDIN&gt;);
<a class="indexterm" name="appa-idx-178718-0"></A
>foreach (@strings) {
    printf &quot;%20s\n&quot;, $_;
}</PRE
><p class="para">The first line prompts for a list of strings.</P
><p class="para">The next line reads all of the strings into one array and gets rid of the newlines at the end of each line.</P
><p class="para">The <code class="literal">foreach</CODE
> loop steps through this array, giving <code class="literal">$_</CODE
> the value of each line.</P
><p class="para">The <code class="literal">printf</CODE
> function gets two arguments: the first argument defines the format: <code class="literal">&quot;%20s\n&quot;</CODE
> means a 20-character right-justified column, followed by a newline.</P
></LI
><li class="listitem"><p class="para"><a class="listitem" name="appa-pgfId-179380"></A
>Here's one way to do it:</P
><pre class="programlisting">print &quot;Field width: &quot;;
chomp($width = &lt;STDIN&gt;);
print &quot;List of strings:\n&quot;;
chomp(@strings = &lt;STDIN&gt;);
foreach (@strings) {
    <a class="indexterm" name="appa-idx-178720-0"></A
>printf &quot;%${width}s\n&quot;, $_;
}</PRE
><p class="para">To the previous exercise answer, we've added a prompt and response for the field width.</P
><p class="para">The other change is that the <code class="literal">printf</CODE
> format string now contains a variable reference. The value of <code class="literal">$width</CODE
> is included into the string before <code class="literal">printf</CODE
> considers the format. Note that we cannot write this string as</P
><pre class="programlisting">printf &quot;%$widths\n&quot;, $_; # WRONG</PRE
><p class="para">because then Perl would be looking for a variable named <code class="literal">$widths</CODE
>, not a variable named <code class="literal">$width</CODE
> to which we attach an <code class="literal">s</CODE
>. Another way to write this is</P
><pre class="programlisting">printf &quot;%$width&quot;.&quot;s\n&quot;, $_; # RIGHT</PRE
><p class="para">because the termination of the string also terminates the variable name, protecting the following character from being sucked up into the name.</P
></LI
></OL
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="appa_04.htm" title="A.4 Chapter 5, Hashes"><img src="../gifs/txtpreva.gif" alt="Previous: A.4 Chapter 5, Hashes" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Learning Perl"><img src="../gifs/txthome.gif" alt="Learning Perl" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="appa_06.htm" title="A.6 Chapter 7, Regular Expressions"><img src="../gifs/txtnexta.gif" alt="Next: A.6 Chapter 7, Regular Expressions" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">A.4 Chapter 5, Hashes</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">A.6 Chapter 7, Regular Expressions</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
