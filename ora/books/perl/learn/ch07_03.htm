<html><head>
<title>[Chapter 7] 7.3 Patterns</TITLE>
<meta name="DC.title" content="Learning Perl"><meta name="DC.creator" content="Randal Schwartz, Tom Christiansen &amp; Larry Wall"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:33:00Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-284-0" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch07_01.htm" title="7. Regular Expressions"><link rel="prev" href="ch07_02.htm" title="7.2 Simple Uses of Regular Expressions"><link rel="next" href="ch07_04.htm#ch07-pgfId-765" title="7.4 More on the Matching Operator"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Learning Perl" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,54" href="index.htm" alt="Learning Perl"><area shape="RECT" coords="467,0,514,18" href="../search/lsrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch07_02.htm" title="7.2 Simple Uses of Regular Expressions"><img src="../gifs/txtpreva.gif" alt="Previous: 7.2 Simple Uses of Regular Expressions" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch07_01.htm" title="7. Regular Expressions">Chapter 7<br>Regular Expressions</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch07_04.htm#ch07-pgfId-765" title="7.4 More on the Matching Operator"><img src="../gifs/txtnexta.gif" alt="Next: 7.4 More on the Matching Operator" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch07-42019">7.3 Patterns</A
></H2
><p class="para">A regular expression is a pattern. Some parts of the pattern match single characters in the string of a particular type. Other parts of the pattern match multiple characters. First, we'll visit the single-character patterns and then the multiple-character patterns.</P
><div class="sect2"><h3 class="sect2"><a class="title" name="ch07-pgfId-307910">7.3.1 Single-Character Patterns</A
></H3
><p class="para"><a class="indexterm" name="ch07-idx-307720-0"></A
>The simplest and most common pattern-matching character in regular expressions is a single character that matches itself. In other words, putting a letter <code class="literal">a</CODE
> in a regular expression requires a corresponding letter <code class="literal">a</CODE
> in the string.</P
><p class="para"><a class="indexterm" name="ch07-idx-307721-0"></A
>The next most common pattern matching character is the dot "<code class="literal">.</CODE
>". This matches any single character except <a class="indexterm" name="ch07-idx-307722-0"></A
>newline (<code class="literal">\n</CODE
>). For example, the pattern <code class="literal">/a./</CODE
> matches any two-letter sequence that starts with <code class="literal">a</CODE
> and is not <code class="literal">&quot;a\n&quot;</CODE
>.</P
><p class="para">A pattern-matching <a class="indexterm" name="ch07-idx-307723-0"></A
><a class="indexterm" name="ch07-idx-307723-1"></A
><em class="emphasis">character class</EM
> is represented by a pair of <a class="indexterm" name="ch07-idx-307724-0"></A
>open and close square brackets and a list of characters between the brackets. One and only one of these characters must be present at the corresponding part of the string for the pattern to match. For example,</P
><pre class="programlisting">/[abcde]/</PRE
><p class="para">matches a string containing any one of the first five letters of the lowercase alphabet, while</P
><pre class="programlisting">/[aeiouAEIOU]/</PRE
><p class="para">matches any of the five <a class="indexterm" name="ch07-idx-307784-0"></A
>vowels in either lower- or uppercase. If you want to put a right bracket (<code class="literal">]</CODE
>) in the list, put a backslash in front of it, or put it as the first character within the list. <a class="indexterm" name="ch07-idx-307725-0"></A
><a class="indexterm" name="ch07-idx-307725-1"></A
>Ranges of characters (like <code class="literal">a</CODE
> through <code class="literal">z</CODE
>) can be abbreviated by showing the end points of the range separated by a <a class="indexterm" name="ch07-idx-307726-0"></A
>dash (<code class="literal">-</CODE
>); to get a literal dash in the list, precede the dash with a <a class="indexterm" name="ch07-idx-307727-0"></A
>backslash or place it at the end. Here are some other examples:</P
><pre class="programlisting">[0123456789]    # match any single digit
[0-9]           # same thing
[0-9\-]         # match 0-9, or minus
[a-z0-9]        # match any single lowercase letter or digit
[a-zA-Z0-9_]    # match any single letter, digit, or underscore</PRE
><p class="para">There's also a negated character class, which is the same as a character class, but has a leading <a class="indexterm" name="ch07-idx-307728-0"></A
><a class="indexterm" name="ch07-idx-307728-1"></A
>up-arrow (or caret: <code class="literal">^</CODE
>) immediately after the left bracket. This character class matches any single character that is not in the list. For example:</P
><pre class="programlisting">[^0-9]        # match any single non-digit
[^aeiouAEIOU] # match any single non-vowel
[^\^]         # match single character except an up-arrow</PRE
><p class="para">For your convenience, some common character classes are predefined, as described in <a class="xref" href="#ch07-pgfId-71" title="Predefined Character Class Abbreviations">Table 7.1</A
>. </P
><br><table class="table" border="1" cellpadding="3"><caption class="table"><a class="title" name="ch07-pgfId-71">Table 7.1: Predefined Character Class Abbreviations</A
></CAPTION
><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1"><p class="para">Construct</P
></TH
><th class="entry" align="LEFT" rowspan="1" colspan="1"><p class="para">Equivalent Class</P
></TH
><th class="entry" align="LEFT" rowspan="1" colspan="1"><p class="para">Negated Construct</P
></TH
><th class="entry" align="LEFT" rowspan="1" colspan="1"><p class="para">Equivalent Negated Class</P
></TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">\d</CODE
> (a digit)</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">[0-9]</CODE
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">\D</CODE
> (digits, not!)</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">[^0-9]</CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">\w</CODE
> (word char)</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">[a-zA-Z0-9_]</CODE
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">\W</CODE
> (words, not!)</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">[^a-zA-Z0-9_]</CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">\s</CODE
> (space char)</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">[ \r\t\n\f]</CODE
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">\S </CODE
>(space, not!)</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">[^ \r\t\n\f]</CODE
></P
></TD
></TR
></TBODY
></TABLE
><p class="para">The <a class="indexterm" name="ch07-idx-308276-0"></A
><code class="literal">\d</CODE
> pattern matches one "digit." The <a class="indexterm" name="ch07-idx-308277-0"></A
><code class="literal">\w</CODE
> pattern matches one "<a class="indexterm" name="ch07-idx-308278-0"></A
>word character," although what it is really matching is any character that is legal in a Perl variable name. The <a class="indexterm" name="ch07-idx-308280-0"></A
><code class="literal">\s</CODE
> pattern matches one "space" (<a class="indexterm" name="ch07-idx-308281-0"></A
><a class="indexterm" name="ch07-idx-308281-1"></A
>whitespace), here defined as spaces, carriage returns (not often used in UNIX), tabs, line feeds, and form feeds. The uppercase versions match the complements of these classes. Thus, <kbd class="command">\W</KBD
> matches one character that can't be in an identifier, <kbd class="command">\S</KBD
> matches one character that is not whitespace (including letter, punctuation, control characters, and so on), and <kbd class="command">\D</KBD
> matches any single nondigit character.</P
><p class="para">These abbreviated classes can be used as part of other character classes as well:</P
><pre class="programlisting">[\da-fA-F] # match one hex digit</PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch07-pgfId-307911">7.3.2 Grouping Patterns</A
></H3
><p class="para"><a class="indexterm" name="ch07-idx-307734-0"></A
>The true power of regular expressions comes into play when you can say "one or more of these" or "up to five of those." Let's talk about how this is done.</P
><div class="sect3"><h4 class="sect3"><a class="title" name="ch07-pgfId-307930">7.3.2.1 Sequence</A
></H4
><p class="para">The first (and probably least obvious) grouping pattern is <a class="indexterm" name="ch07-idx-307735-0"></A
><em class="emphasis">sequence</EM
>. This means that <code class="literal">abc</CODE
> matches an <code class="literal">a</CODE
> followed by a <code class="literal">b</CODE
> followed by a <code class="literal">c</CODE
>. Seems simple, but we're giving it a name so we can talk about it later.</P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="ch07-pgfId-308111">7.3.2.2 Multipliers</A
></H4
><p class="para">We've already seen the <a class="indexterm" name="ch07-idx-307736-0"></A
>asterisk (<code class="literal">*</CODE
>) as a grouping pattern. The asterisk indicates zero or more of the immediately previous character (or character class).</P
><p class="para">Two other grouping patterns that work like this are the <a class="indexterm" name="ch07-idx-307737-0"></A
>plus sign (<code class="literal">+</CODE
>), meaning one or more of the immediately previous character, and the <a class="indexterm" name="ch07-idx-307738-0"></A
>question mark (<code class="literal">?</CODE
>), meaning zero or one of the immediately previous character. For example, the regular expression <code class="literal">/fo+ba?r/</CODE
> matches an <code class="literal">f</CODE
> followed by one or more <code class="literal">o</CODE
>'s followed by a <code class="literal">b</CODE
>, followed by an optional <code class="literal">a</CODE
>, followed by an <code class="literal">r</CODE
>.</P
><p class="para">In all three of these grouping patterns, the patterns are <a class="indexterm" name="ch07-idx-307739-0"></A
>greedy. If such a multiplier has a chance to match between five and ten characters, it'll pick the 10-character string every time. For example,</P
><pre class="programlisting">$_ = &quot;fred xxxxxxxxxx barney&quot;;
s/x+/boom/;</PRE
><p class="para">always replaces all consecutive x's with <code class="literal">boom</CODE
> (resulting in <code class="literal">fred boom barney</CODE
>), rather than just one or two x's, even though a shorter set of x's would also match the same regular expression.</P
><p class="para">If you need to say "five to ten" x's, you could get away with putting five x's followed by five x's each immediately followed by a question mark. But this looks ugly. Instead, there's an easier way: the <em class="emphasis">general multiplier</EM
>. The general multiplier consists of a pair of matching <a class="indexterm" name="ch07-idx-307740-0"></A
>curly braces with one or two numbers inside, as in <code class="literal">/x{5,10}/</CODE
>. The immediately preceding character (in this case, the letter "<code class="literal">x</CODE
>") must be found within the indicated number of repetitions (five through ten here).[<a class="footnote" href="#ch07-pgfId-308289">1</A
>]</P
><blockquote class="footnote"><div class="footnote"><p class="para"><a class="footnote" name="ch07-pgfId-308289">[1]</A
> Of course, <kbd class="command">/\d{3}/</KBD
> doesn't only match three-digit numbers. It would also match any number with more than three digits in it. To match exactly three, you need to use anchors, described later in <a class="xref" href="#ch07-pgfId-307935" title="Anchoring Patterns">Section 7.3.3, "Anchoring Patterns</A
>."</P
></DIV
></BLOCKQUOTE
><p class="para">If you leave off the second number, as in <code class="literal">/x{5,}/</CODE
>, it means "that many or more" (five or more in this case), and if you leave off the comma, as in <code class="literal">/x{5}/</CODE
>, it means "exactly this many" (five x's). To get five or less <code class="literal">x</CODE
>'s, you must put the zero in, as in <code class="literal">/x{0,5}/</CODE
>.</P
><p class="para">So, the regular expression <code class="literal">/a.{5}b/</CODE
> matches the letter <code class="literal">a</CODE
> separated from the letter <code class="literal">b</CODE
> by any five non-newline characters at any point in the string. (Recall that a period matches any single non-newline character, and we're matching five here.) The five characters do not need to be the same. (We'll learn how to force them to be the same in the next section.)</P
><p class="para">We could dispense with <code class="literal">*</CODE
>, <code class="literal">+</CODE
>, and <code class="literal">?</CODE
> entirely, since they are completely equivalent to <code class="literal">{0,}</CODE
>, <code class="literal">{1,}</CODE
>, and <code class="literal">{0,1}</CODE
>. But it's easier to type the equivalent single punctuation character, and more familiar as well.</P
><p class="para">If two multipliers occur in a single expression, the <a class="indexterm" name="ch07-idx-307785-0"></A
>greedy rule is augmented with "leftmost is greediest." For example:</P
><pre class="programlisting">$_ = &quot;a xxx c xxxxxxxx c xxx d&quot;;
/a.*c.*d/;</PRE
><p class="para">In this case, the first "<code class="literal">.*</CODE
>" in the regular expression matches all characters up to the second <code class="literal">c</CODE
>, even though matching only the characters up to the first <code class="literal">c</CODE
> would still allow the entire regular expression to match. Right now, this doesn't make any difference (the pattern would match either way), but later when we can look at parts of the regular expression that matched, it'll matter quite a bit.</P
><p class="para">We can force any multiplier to be nongreedy (or <em class="emphasis">lazy</EM
>) by following it with a question mark:</P
><pre class="programlisting">$_ = &quot;a xxx c xxxxxxxx c xxx d&quot;;
/a.*?c.*d/;</PRE
><p class="para">Here, the <code class="literal">a.*?c</CODE
> now matches the fewest characters between the <code class="literal">a</CODE
> and <code class="literal">c</CODE
>, not the most characters. This means the leftmost <code class="literal">c</CODE
> is matched, not the rightmost. You can put such a question-mark modifier after any of the multipliers (<code class="literal">?</CODE
>,<code class="literal">+</CODE
>,<code class="literal">*</CODE
>, and <code class="literal">{m,n}</CODE
>).</P
><p class="para">What if the string and regular expression were slightly altered, say, to:</P
><pre class="programlisting">$_ = &quot;a xxx ce xxxxxxxx ci xxx d&quot;;
/a.*ce.*d/;</PRE
><p class="para">In this case, if the <code class="literal">.*</CODE
> matches the most characters possible before the next <code class="literal">c</CODE
>, the next regular expression character (<code class="literal">e</CODE
>) doesn't match the next character of the string (<code class="literal">i</CODE
>). In this case, we get automatic <a class="indexterm" name="ch07-idx-307741-0"></A
><a class="indexterm" name="ch07-idx-307741-1"></A
><em class="emphasis">backtracking</EM
>: the multiplier is unwound and retried, stopping at someplace earlier (in this case, at the earlier <code class="literal">c</CODE
>, next to the <code class="literal">e</CODE
>).[<a class="footnote" href="#ch07-pgfId-308123">2</A
>] A complex regular expression may involve many such levels of backtracking, leading to long execution times. In this case, making that match lazy (with a trailing "<code class="literal">?</CODE
>") will actually simplify the work that Perl has to perform, so you may want to consider that.</P
><blockquote class="footnote"><div class="footnote"><p class="para"><a class="footnote" name="ch07-pgfId-308123">[2]</A
> Well, technically there was a lot of backtracking of the <code class="literal">*</CODE
> operator to find the c's in the first place. But that's a little trickier to describe, and it works on the same principle.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="ch07-pgfId-307940">7.3.2.3 Parentheses as memory</A
></H4
><p class="para">Another grouping operator is a pair of open and close <a class="indexterm" name="ch07-idx-307742-0"></A
>parentheses around any part pattern. This doesn't change whether the pattern matches, but instead causes the part of the string matched by the pattern to be remembered, so that it may be referenced later. So for example, <code class="literal">(a)</CODE
> still matches an <code class="literal">a</CODE
>, and <code class="literal">([a-z])</CODE
> still matches any single lowercase letter.</P
><p class="para">To recall a memorized part of a string, you must include a <a class="indexterm" name="ch07-idx-307743-0"></A
>backslash followed by an integer. This pattern construct represents the same sequence of characters matched earlier in the same-numbered pair of parentheses (counting from one). For example,</P
><pre class="programlisting">/fred(.)barney<a class="indexterm" name="ch07-idx-307744-0"></A
>\1/;</PRE
><p class="para">matches a string consisting of <code class="literal">fred</CODE
>, followed by any single non-newline character, followed by <code class="literal">barney</CODE
>, followed by that same single character. So, it matches <code class="literal">fredxbarneyx</CODE
>, but not <code class="literal">fredxbarneyy</CODE
>. Compare that with</P
><pre class="programlisting">/fred.barney./;</PRE
><p class="para">in which the two unspecified characters can be the same, or different; it doesn't matter.</P
><p class="para">Where did the <code class="literal">1</CODE
> come from? It means the first parenthesized part of the regular expression. If there's more than one, the second part (counting the left parentheses from left to right) is referenced as <code class="literal">\2</CODE
>, the third as <code class="literal">\3</CODE
>, and so on. For example,</P
><pre class="programlisting">/a(.)b(.)c\2d\1/;</PRE
><p class="para">matches an <code class="literal">a</CODE
>, a character (call it #1), a <code class="literal">b</CODE
>, another character (call it #2), a <code class="literal">c</CODE
>, the character #2, a <code class="literal">d</CODE
>, and the character #1. So it matches <code class="literal">axbycydx</CODE
>, for example.</P
><p class="para">The referenced part can be more than a single character. For example,</P
><pre class="programlisting">/a(.*)b\1c/;</PRE
><p class="para">matches an <code class="literal">a</CODE
>, followed by any number of characters (even zero) followed by <code class="literal">b</CODE
>, followed by that same sequence of characters followed by <code class="literal">c</CODE
>. So, it would match <code class="literal">aFREDbFREDc</CODE
>, or even <code class="literal">abc</CODE
>, but not <code class="literal">aXXbXXXc</CODE
>.</P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="ch07-pgfId-307932">7.3.2.4 Alternation</A
></H4
><p class="para">Another grouping construct is <em class="emphasis">alternation</EM
><a class="indexterm" name="ch07-idx-307746-0"></A
><a class="indexterm" name="ch07-idx-307746-1"></A
>, as in <a class="indexterm" name="ch07-idx-307745-0"></A
><code class="literal">a|b|c</CODE
>. This means to match exactly one of the alternatives (<code class="literal">a</CODE
> or <code class="literal">b</CODE
> or <code class="literal">c</CODE
> in this case). This works even if the alternatives have multiple characters, as in <code class="literal">/song|blue/</CODE
>, which matches either <code class="literal">song</CODE
> or <code class="literal">blue</CODE
>. (For single character alternatives, you're definitely better off with a character class like <code class="literal">/[abc]/</CODE
>.)</P
><p class="para">What if we wanted to match <code class="literal">songbird</CODE
> or <code class="literal">bluebird</CODE
>? We could write <code class="literal">     /songbird|bluebird/</CODE
>, but that <code class="literal">bird</CODE
> part shouldn't have to be in there twice. In fact, there's a way out, but we have to talk about the precedence of grouping patterns, which is covered in <a class="xref" href="#ch07-pgfId-307912" title="Precedence">Section 7.3.4, "Precedence</A
>," below.</P
></DIV
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch07-pgfId-307935">7.3.3 Anchoring Patterns</A
></H3
><p class="para">Several special notations <a class="indexterm" name="ch07-idx-307747-0"></A
><a class="indexterm" name="ch07-idx-307747-1"></A
>anchor a pattern. Normally, when a pattern is matched against the string, the beginning of the pattern is dragged through the string from left to right, matching at the first possible opportunity. Anchors allow you to ensure that parts of the pattern line up with particular parts of the string.</P
><p class="para">The first pair of anchors require that a particular part of the match be located either at a <a class="indexterm" name="ch07-idx-307749-0"></A
>word boundary or not at a word boundary. The <code class="literal">\b</CODE
> anchor requires a word boundary at the indicated point for the pattern to match. A word boundary is the place between characters that match <code class="literal">\w</CODE
> and <code class="literal">\W</CODE
>, or between characters matching <code class="literal">\w</CODE
> and the beginning or ending of the string. Note that this has little to do with English words and a lot more to do with C symbols, but that's as close as we get. For example:</P
><pre class="programlisting">/fred\b/;     # matches fred, but not frederick
/\bmo/;       # matches moe and mole, but not Elmo
/\bFred\b/;   # matches Fred but not Frederick or alFred
/\b\+\b/;     # matches &quot;x+y&quot; but not &quot;++&quot; or &quot; + &quot;
/abc\bdef/;   # never matches (impossible for a boundary there)</PRE
><p class="para">Likewise, <a class="indexterm" name="ch07-idx-307748-0"></A
><code class="literal">\B</CODE
> requires that there not be a word boundary at the indicated point. For example:</P
><pre class="programlisting">/\bFred\B/; # matches &quot;Frederick&quot; but not &quot;Fred Flintstone&quot;</PRE
><p class="para">Two more anchors require that a particular part of the pattern be next to an end of the string. The <a class="indexterm" name="ch07-idx-307750-0"></A
>caret (<code class="literal">^</CODE
>) matches the beginning of the string if it is in a place that makes sense to match the beginning of the string. For example, <code class="literal">^a</CODE
> matches an <code class="literal">a</CODE
> if, and only if, the <code class="literal">a</CODE
> is the first character of the string. However, <code class="literal">a^</CODE
> matches the two characters <code class="literal">a</CODE
> and <code class="literal">^</CODE
> anywhere in the string. In other words, the caret has lost its special meaning. If you need the caret to be a literal caret even at the beginning, put a backslash in front of it.</P
><p class="para">The <code class="literal">$</CODE
>, like the <code class="literal">^</CODE
>, anchors the pattern, but to the end of the string, not the beginning. In other words, <code class="literal">c$</CODE
> matches a <code class="literal">c</CODE
> only if it occurs at the end of the string.[<a class="footnote" href="#ch07-pgfId-748">3</A
>] A dollar sign anywhere else in the pattern is probably going to be interpreted as a scalar value interpretation, so you'll most likely need to <a class="indexterm" name="ch07-idx-307786-0"></A
>backslash it to match a literal dollar sign in the string.</P
><blockquote class="footnote"><div class="footnote"><p class="para"><a class="footnote" name="ch07-pgfId-748">[3]</A
> Or just before the newline at the end of the string, for historical simplicity.</P
></DIV
></BLOCKQUOTE
><p class="para">Other anchors are supported, including \A, \Z, and lookahead anchors created via (?=...) and (?!...). These are described fully in <a class="olink" href="../prog/ch02_01.htm">Chapter 2</A
> of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
> and the <em class="emphasis">perlre  </EM
>(1) manpage.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch07-pgfId-307912">7.3.4 Precedence</A
></H3
><p class="para"><a class="indexterm" name="ch07-idx-307751-0"></A
><a class="indexterm" name="ch07-idx-307751-1"></A
>So what happens when we get <code class="literal">a|b*</CODE
> together? Is this <code class="literal">a</CODE
> or <code class="literal">b</CODE
> any number of times, or is it either a single <code class="literal">a</CODE
> or any number of <code class="literal">b</CODE
>'s?</P
><p class="para">Well, just as operators have precedence, the grouping and anchoring patterns also have precedence. The precedence of patterns from highest to lowest is given in <a class="xref" href="#ch07-pgfId-308363" title="regex Grouping Precedence ">Table 7.2</A
>.</P
><br><table class="table" border="1" cellpadding="3"><caption class="table"><a class="title" name="ch07-pgfId-308363">Table 7.2: regex Grouping Precedence [<a class="footnote" href="#ch07-pgfId-309932">4</A
>]</A
></CAPTION
><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1"><p class="para">Name</P
></TH
><th class="entry" align="LEFT" rowspan="1" colspan="1"><p class="para">Representation</P
></TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">Parentheses</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">( )  (?: )</CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">Multipliers</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">?  +  *  {m,n}  ??  +?  *?  {m,n}?</CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">Sequence and anchoring</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">abc  ^  $  \A  \Z  (?= )  (?! )</CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">Alternation</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal">|</CODE
></P
></TD
></TR
></TBODY
></TABLE
><blockquote class="footnote"><div class="footnote"><p class="para"><a class="footnote" name="ch07-pgfId-309932">[4]</A
> Some of these symbols are not described in this book. See <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
> or <em class="emphasis">perlre </EM
>(1) for details.</P
></DIV
></BLOCKQUOTE
><p class="para">According to the table, <code class="literal">*</CODE
> has a higher precedence than <code class="literal">|</CODE
>. So <code class="literal">/a|b*/</CODE
> is interpreted as a single <code class="literal">a</CODE
>, or any number of <code class="literal">b</CODE
>'s.</P
><p class="para">What if we want the other meaning, as in "any number of <code class="literal">a</CODE
>'s or <code class="literal">b</CODE
>'s"? We simply throw in a pair of <a class="indexterm" name="ch07-idx-307752-0"></A
><a class="indexterm" name="ch07-idx-307752-1"></A
>parentheses. In this case, enclose the part of the expression that the <code class="literal">*</CODE
> operator should apply to inside parentheses, and we've got it, as <code class="literal">(a|b)*</CODE
>. If you want to clarify the first expression, you can redundantly parenthesize it with <code class="literal">a|(b*)</CODE
>.</P
><p class="para">When you use <a class="indexterm" name="ch07-idx-310008-0"></A
>parentheses to affect precedence they also trigger the memory, as shown earlier in this chapter. That is, this set of parentheses counts when you are figuring out whether something is <code class="literal">\2</CODE
>, <code class="literal">\3</CODE
>, or whatever. If you want to use parentheses without triggering memory, use the form (?:...) instead of (...). This still allows for multipliers, but doesn't throw off your counting by using up <code class="literal">\4</CODE
> or whatever. For example, <code class="literal">/(?:Fred|Wilma)</CODE
> <code class="literal">Flintstone/</CODE
> does not store anything into <code class="literal">\1</CODE
>; it's just there for grouping.</P
><p class="para">Here are some other examples of regular expressions and the effect of parentheses:</P
><pre class="programlisting">abc*             # matches ab, abc, abcc, abccc, abcccc, and so on
(abc)*           # matches &quot;&quot;, abc, abcabc, abcabcabc, and so on
^x|y             # matches x at the beginning of line, or y anywhere
^(x|y)           # matches either x or y at the beginning of a line
a|bc|d           # a, or bc, or d
(a|b)(c|d)       # ac, ad, bc, or bd
(song|blue)bird  # songbird or bluebird</PRE
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch07_02.htm" title="7.2 Simple Uses of Regular Expressions"><img src="../gifs/txtpreva.gif" alt="Previous: 7.2 Simple Uses of Regular Expressions" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Learning Perl"><img src="../gifs/txthome.gif" alt="Learning Perl" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch07_04.htm#ch07-pgfId-765" title="7.4 More on the Matching Operator"><img src="../gifs/txtnexta.gif" alt="Next: 7.4 More on the Matching Operator" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">7.2 Simple Uses of Regular Expressions</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">7.4 More on the Matching Operator</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
