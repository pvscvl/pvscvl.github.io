<html><head>
<title>[Appendix D] D.5 Many, Many More Functions</TITLE>
<meta name="DC.title" content="Learning Perl"><meta name="DC.creator" content="Randal Schwartz, Tom Christiansen &amp; Larry Wall"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:37:40Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-284-0" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="appd_01.htm" title="D. Topics We Didn't Mention"><link rel="prev" href="appd_04.htm" title="D.4 Other Operators"><link rel="next" href="appd_06.htm" title="D.6 Many, Many Predefined Variables"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Learning Perl" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,54" href="index.htm" alt="Learning Perl"><area shape="RECT" coords="467,0,514,18" href="../search/lsrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="appd_04.htm" title="D.4 Other Operators"><img src="../gifs/txtpreva.gif" alt="Previous: D.4 Other Operators" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="appendix" rel="up" href="appd_01.htm" title="D. Topics We Didn't Mention">Appendix D<br>Topics We Didn't Mention</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="appd_06.htm" title="D.6 Many, Many Predefined Variables"><img src="../gifs/txtnexta.gif" alt="Next: D.6 Many, Many Predefined Variables" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="appd-pgfId-58911">D.5 Many, Many More Functions</A
></H2
><p class="para">Yes, Perl has a lot of functions. I'm not going to list them here, because the fastest way to find out about them is to read through the function section of <a class="citetitle" href="../prog/index.htm" title="Programming Perl"><cite class="citetitle">Programming Perl</CITE
></A
><a class="indexterm" name="appd-idx-107833-0"></A
> or the <em class="emphasis">perlfunc </EM
>(1) manpage and look at anything you don't recognize that sounds interesting. Here are a few of the more interesting ones.</P
><div class="sect2"><h3 class="sect2"><a class="title" name="appd-pgfId-107834">D.5.1 grep and map</A
></H3
><p class="para">The <code class="literal">grep</CODE
> function selects elements from its argument list, based upon the result of an expression that's repeatedly evaluated for its truth value, with the <code class="literal">$_</CODE
> variable successively set to each element in the list:</P
><pre class="programlisting">@bigpowers = grep $_ &gt; 6, 1, 2, 4, 8, 16; # gets (8, 16)
@b_names = grep /^b/, qw(fred barney betty wilma);
@textfiles = grep -T, &lt;*&gt;;</PRE
><p class="para">The <code class="literal">map</CODE
> function is similar, but instead of selecting or rejecting items, it merely collects the results of the expression (evaluated in a list context):</P
><pre class="programlisting">@more = map $_ + 3, 3, 5, 7;   # gets 6, 8, 10
@squares = map $_ * $_, 1..10; # first 10 squares
@that = map &quot;$_\n&quot;, @this;     # like &quot;unchomp&quot;
@triangle = map 1..$_, 1..5;   # 1,1,2,1,2,3,1,2,3,4,1,2,3,4,5
%sizes = map { $_, -s } &lt;*&gt;;   # hash of files and sizes</PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="appd-40322">D.5.2 The eval Operator (and s///e)</A
></H3
><p class="para">Yes, you can construct a piece of code at run-time and then <a class="indexterm" name="appd-idx-344-0"></A
><code class="literal">eval</CODE
> it, just as you can do with the shell. It's actually rather useful, because you can get some compiletime optimizations (like a compiled regular expression) at run-time. You can also use it to trap otherwise fatal errors in a section of code: a fatal error inside the <code class="literal">eval</CODE
> merely exits the <code class="literal">eval</CODE
> and gives you an error status.</P
><p class="para">For example, here's a program that reads a line of Perl code from the user and then executes it as if it were part of the Perl program:</P
><pre class="programlisting">print &quot;code line: &quot;;
chop($code = &lt;STDIN&gt;);
eval $code; die &quot;eval: $@&quot; if $@;</PRE
><p class="para">You can put Perl code inside the replacement string of a substitute operator with the <a class="indexterm" name="appd-idx-351-0"></A
><code class="literal">e</CODE
> flag. This is handy if you want to construct something complicated for the replacement string, such as calling a subroutine that returns the results of a database lookup. Here's a loop that increments the value of the first column of a series of lines:</P
><pre class="programlisting">while (&lt;&gt;) {
    s/^(\S+)/$1+1/e; # $1+1 is Perl code, not a string
    print;
}</PRE
><p class="para">Another use of <code class="literal">eval</CODE
> is as an exception-handling mechanism:</P
><pre class="programlisting">eval {
    some_hairy_routine_that_might_die(@args);
};
if ($@) {
    print &quot;oops... some_hairy died with $@&quot;;
}</PRE
><p class="para">Here, <code class="literal">$@</CODE
> will be empty as long as the eval block worked OK but will have the text of the die message if not.</P
><p class="para">Of these three constructs (<code class="literal">eval &quot;string&quot;</CODE
>, <code class="literal">eval</CODE
> <code class="literal">{</CODE
> <code class="literal">BLOCK</CODE
> <code class="literal">}</CODE
>, and <code class="literal">s///e</CODE
>) only the first is really what you would think of as an <code class="literal">eval</CODE
> from a shell-programming language. The other two are compiled at compile-time, and incur little additional performance penalty.</P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="appd_04.htm" title="D.4 Other Operators"><img src="../gifs/txtpreva.gif" alt="Previous: D.4 Other Operators" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Learning Perl"><img src="../gifs/txthome.gif" alt="Learning Perl" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="appd_06.htm" title="D.6 Many, Many Predefined Variables"><img src="../gifs/txtnexta.gif" alt="Next: D.6 Many, Many Predefined Variables" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">D.4 Other Operators</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">D.6 Many, Many Predefined Variables</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
