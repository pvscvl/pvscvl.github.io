<html><head>
<title>[Chapter 15] 15.4 Advanced Sorting</TITLE>
<meta name="DC.title" content="Learning Perl"><meta name="DC.creator" content="Randal Schwartz, Tom Christiansen &amp; Larry Wall"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:35:21Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-284-0" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch15_01.htm" title="15. Other Data Transformation"><link rel="prev" href="ch15_03.htm" title="15.3 Formatting Data with sprintf( )"><link rel="next" href="ch15_05.htm" title="15.5 Transliteration"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Learning Perl" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,54" href="index.htm" alt="Learning Perl"><area shape="RECT" coords="467,0,514,18" href="../search/lsrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch15_03.htm" title="15.3 Formatting Data with sprintf( )"><img src="../gifs/txtpreva.gif" alt="Previous: 15.3 Formatting Data with sprintf( )" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch15_01.htm" title="15. Other Data Transformation">Chapter 15<br>Other Data Transformation</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch15_05.htm" title="15.5 Transliteration"><img src="../gifs/txtnexta.gif" alt="Next: 15.5 Transliteration" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch15-38655">15.4 Advanced Sorting</A
></H2
><p class="para"><a class="indexterm" name="ch15-idx-403330-0"></A
>Earlier, you learned that you could take a list and sort it in ascending ASCII order (like you do strings) using the built-in <a class="indexterm" name="ch15-idx-403331-0"></A
><code class="literal">sort</CODE
> function. What if you don't want an ascending ASCII sort, but something else instead, like a numeric sort? Well, Perl gives you the tools you need to do the job. In fact, you'll see that the Perl <code class="literal">sort</CODE
> is completely general and able to perform any well-defined sort order.</P
><p class="para">To define a sort of a different color, you need to define a comparison routine that describes how two elements compare. Why is this necessary? Well, if you think about it, sorting is putting a bunch of things in order by comparing them all. Since you can't compare them all at once, you need to compare two at a time, eventually using what you find out about each pair's order to put the whole <a class="indexterm" name="ch15-idx-403332-0"></A
>kit'n'caboodle in line.</P
><p class="para">The <a class="indexterm" name="ch15-idx-403333-0"></A
><a class="indexterm" name="ch15-idx-403333-1"></A
>comparison routine is defined as an ordinary subroutine. This routine will be called repeatedly, each time passing two elements of the list to be sorted. The routine must determine whether the first value is less-than, equal-to, or greater-than the second value, and return a coded value (described in a moment). This process is repeated until the list is sorted.</P
><p class="para">To save a little execution speed, the two values are not passed in an array, but rather are handed to the subroutine as the values of the global variables <a class="indexterm" name="ch15-idx-403334-0"></A
><code class="literal">$a</CODE
> and <code class="literal">$b</CODE
>. (Don't worry: the original values of <code class="literal">$a</CODE
> and <code class="literal">$b</CODE
> are safely protected.) The routine should return any negative number if <code class="literal">$a</CODE
> is less than <code class="literal">$b</CODE
>, zero if <code class="literal">$a</CODE
> is equal to <code class="literal">$b</CODE
>, and any positive number if <code class="literal">$a</CODE
> is greater than <code class="literal">$b</CODE
>. Now remember, the less than is according to your meaning of less than; it could be a numeric comparison, according to the third character of the string, or even according to the values of a hash using the passed-in values as keys. It's really pretty flexible.</P
><p class="para">Here's an example of a comparison routine that sorts in <a class="indexterm" name="ch15-idx-403336-0"></A
><a class="indexterm" name="ch15-idx-403336-1"></A
>numeric order:</P
><pre class="programlisting">sub by_number {
    if ($a &lt; $b) {
        return -1;
    } <a class="indexterm" name="ch15-idx-403355-0"></A
>elsif ($a == $b) {
        return 0;
    } elsif ($a &gt; $b) {
        return 1;
    }
}</PRE
><p class="para">Notice the name <code class="literal">by_number</CODE
>. There's nothing special about the name of this subroutine, but you'll see why we like names that start with <code class="literal">by_</CODE
> in a minute.</P
><p class="para">Let's look through this routine. If the value of <code class="literal">$a</CODE
> is less than (numerically in this case) the value of <code class="literal">$b</CODE
>, we return a <code class="literal">-1</CODE
> value. If the values are numerically equal, we get back a zero, and otherwise a <code class="literal">1</CODE
>. So, according to our specification for a sort comparison routine, this should work.</P
><p class="para">How do we use it? Let's try sorting the following list:</P
><pre class="programlisting">@somelist = (1,2,4,8,16,32,64,128,256);</PRE
><p class="para">If we use the ordinary <code class="literal">sort</CODE
> without any adornment on the list, we get the numbers sorted as if they were strings, and in their ASCII order, like so:</P
><pre class="programlisting">@wronglist = sort @somelist;
# @wronglist is now (1,128,16,2,256,32,4,64,8)</PRE
><p class="para">Certainly not very numeric. Well, let's give <code class="literal">sort</CODE
> our newly defined comparison routine. The name of the comparison routine goes immediately following the <code class="literal">sort</CODE
> keyword, like so:</P
><pre class="programlisting">@rightlist = sort by_number @wronglist;
# @rightlist is now (1,2,4,8,16,32,64,128,256)</PRE
><p class="para">This does the trick. Note that you can read the <code class="literal">sort</CODE
> with its companion sort routine in a human-like fashion: "sort by number." That's why I named the subroutine with a <code class="literal">by_</CODE
> prefix.</P
><p class="para">This kind of three-way value of <code class="literal">-1</CODE
>, <code class="literal">0</CODE
>, and <code class="literal">+1</CODE
> on the basis of a numeric comparison occurs often enough in sort routines that Perl has a special operator to do this in one fell swoop. It's often called the <a class="indexterm" name="ch15-idx-403338-0"></A
><em class="emphasis">spaceship</EM
> operator, and looks like <code class="literal">&lt;=&gt;</CODE
><a class="indexterm" name="ch15-idx-403339-0"></A
>. Using the spaceship operator, the preceding sort subroutine can be replaced with this:</P
><pre class="programlisting">sub by_number {
    $a &lt;=&gt; $b;
}</PRE
><p class="para">Note the spaceship between the two variables. Yes, it is indeed a three-character-long operator. The spaceship returns the same values as the <code class="literal">if</CODE
>/<code class="literal">elsif</CODE
> chain from the previous definition of this routine. Now this is pretty short, but you can shortcut the sort invocation even further, by replacing the name of the sort routine with the entire sort routine in line, like so:</P
><pre class="programlisting">@rightlist = sort { $a &lt;=&gt; $b } @wronglist;</PRE
><p class="para">There are some who argue that this decreases readability. They are wrong. Others argue that it removes the need to go somewhere else for the definition. Perl doesn't care. Our personal rule is that if it doesn't fit on one line or we have to use it more than once, it goes into a subroutine.</P
><p class="para">The spaceship operator for numeric comparison has a comparable string operator called <code class="literal">cmp</CODE
>. The <a class="indexterm" name="ch15-idx-403340-0"></A
><code class="literal">cmp</CODE
> operator returns one of three values, depending on the relative string comparisons of the two arguments. So, here's another way to write the default sort order:[<a class="footnote" href="#ch15-pgfId-461">2</A
>]<pre class="programlisting">@result = sort { $a cmp $b } @somelist;</PRE
></P
><blockquote class="footnote"><div class="footnote"><p class="para"><a class="footnote" name="ch15-pgfId-461">[2]</A
> Not exactly. The built-in sort discards <code class="literal">undef</CODE
> elements, but this one doesn't.</P
></DIV
></BLOCKQUOTE
><p class="para">You probably won't ever write this exact subroutine (mimicking the built-in default sort), unless you're writing a book about Perl. However, the <code class="literal">cmp</CODE
> operator does have its uses in the construction of cascaded ordering schemes. For example, you might need to put the elements in numeric order unless they're numerically equal, in which case they should go in ASCII string order. (By default, the <code class="literal">by_number</CODE
> routine above just sticks nonnumeric strings in some random order because there's no numeric ordering when comparing two values of zero.) Here's a way to say "numeric, unless they're numerically equal, then string":</P
><pre class="programlisting">sub by_mostly_numeric {
    ($a &lt;=&gt; $b) || ($a cmp $b);
}</PRE
><p class="para">How does this work? Well, if the result of the spaceship is -1 or 1, the rest of the expression is skipped, and the -1 or 1 is returned. If the spaceship evaluates to zero, however, the <code class="literal">cmp</CODE
> operator gets its turn at bat, returning an appropriate ordering value considering the values as strings.</P
><p class="para"><a class="indexterm" name="ch15-idx-403341-0"></A
>The values being compared are not necessarily the values being passed in. For example, say you have a hash<a class="indexterm" name="ch15-idx-403342-0"></A
> where the keys are the login names and the values are the real names of each user. Suppose you want to print a chart where the login names and real names are sorted in the order of the real names. How would you do that?</P
><p class="para">Actually, it's fairly easy. Let's assume the values are in the array <code class="literal">%names</CODE
>. The login names are thus the list of <code class="literal">keys(%names)</CODE
>. What we want to end up with is a list of the login names sorted by the corresponding value, so for any particular key <code class="literal">$a</CODE
>, we need to look at <code class="literal">$names{$a}</CODE
> and sort based on that. If you think of it that way, it almost writes itself, as in:</P
><pre class="programlisting">@sortedkeys = sort by_names keys(%names);

sub by_names {
    return $names{$a} cmp $names{$b};
}

foreach (@sortedkeys) {
    print &quot;$_ has a real name of $names{$_}\n&quot;;
}</PRE
><p class="para">To this we should also add a fallback comparison. Suppose the real names of two users are identical. Because of the whimsical nature of the <code class="literal">sort</CODE
> routine, we might get one value ahead of another the first time through and the values in the reversed order the next time. This is bad if the report might be fed into a comparison program for reporting, so try very hard to avoid such things. With the <code class="literal">cmp</CODE
> operator, it's easy:</P
><pre class="programlisting">sub by_names {
    ($names{$a} cmp $names{$b}) <a class="indexterm" name="ch15-idx-403356-0"></A
>|| ($a cmp $b);
}</PRE
><p class="para">Here, if the real names are the same, we sort based on the login name instead. Since the login name is guaranteed to be unique (after all, they are the keys of this hash, and no two keys are the same), then we can ensure a unique and repeatable order. Good <a class="indexterm" name="ch15-idx-403357-0"></A
>defensive programming during the day is better than a late-night call from a system administrator wondering why the security alarms are going off.</P
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch15_03.htm" title="15.3 Formatting Data with sprintf( )"><img src="../gifs/txtpreva.gif" alt="Previous: 15.3 Formatting Data with sprintf( )" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Learning Perl"><img src="../gifs/txthome.gif" alt="Learning Perl" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch15_05.htm" title="15.5 Transliteration"><img src="../gifs/txtnexta.gif" alt="Next: 15.5 Transliteration" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">15.3 Formatting Data with sprintf( )</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">15.5 Transliteration</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
