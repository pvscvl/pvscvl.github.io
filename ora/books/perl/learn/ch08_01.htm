<html><head>
<title>[Chapter 8] Functions</TITLE>
<meta name="DC.title" content="Learning Perl"><meta name="DC.creator" content="Randal Schwartz, Tom Christiansen &amp; Larry Wall"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:33:28Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-284-0" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="index.htm" title="Learning Perl"><link rel="prev" href="ch07_07.htm" title="7.7 Exercises"><link rel="next" href="ch08_02.htm" title="8.2 Invoking a User Function"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Learning Perl" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,54" href="index.htm" alt="Learning Perl"><area shape="RECT" coords="467,0,514,18" href="../search/lsrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch07_07.htm" title="7.7 Exercises"><img src="../gifs/txtpreva.gif" alt="Previous: 7.7 Exercises" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 8</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch08_02.htm" title="8.2 Invoking a User Function"><img src="../gifs/txtnexta.gif" alt="Next: 8.2 Invoking a User Function" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="chapter"><h1 class="chapter"><a class="title" name="ch08-pgfId-85671">8. Functions</A
></H1
><div class="htmltoc"><p><b>Contents:</B
><br><a class="sect1" href="#ch08-17462" title="8.1 Defining a User Function">Defining a User Function</A
><br><a class="sect1" href="ch08_02.htm" title="8.2 Invoking a User Function">Invoking a User Function</A
><br><a class="sect1" href="ch08_03.htm" title="8.3 Return Values">Return Values</A
><br><a class="sect1" href="ch08_04.htm" title="8.4 Arguments">Arguments</A
><br><a class="sect1" href="ch08_05.htm" title="8.5 Private Variables in Functions">Private Variables in Functions</A
><br><a class="sect1" href="ch08_06.htm" title="8.6 Semiprivate Variables Using local">Semiprivate Variables Using local</A
><br><a class="sect1" href="ch08_07.htm" title="8.7 File-Level my( ) Variables">File-Level my( ) Variables</A
><br><a class="sect1" href="ch08_08.htm" title="8.8 Exercises">Exercises</A
></P
><p></P
></DIV
><p class="para">We've already seen and used built-in functions, such as <code class="literal">chomp</CODE
>, <code class="literal">print</CODE
>, and so on. Now, let's take a look at functions that you define for yourself.</P
><div class="sect1"><h2 class="sect1"><a class="title" name="ch08-17462">8.1 Defining a User Function</A
></H2
><p class="para"><a class="indexterm" name="ch08-idx-84158-0"></A
>A user function, more commonly called a <a class="indexterm" name="ch08-idx-84159-0"></A
><em class="emphasis">subroutine</EM
> or just a <em class="emphasis">sub</EM
>, is defined in your Perl program using a construct like this:</P
><pre class="programlisting"><a class="indexterm" name="ch08-idx-84160-0"></A
>sub <code class="replaceable"><i>subname</I
></CODE
> {
    <code class="replaceable"><i>statement_1</I
></CODE
>;
    <code class="replaceable"><i>statement_2</I
></CODE
>;
    <code class="replaceable"><i>statement_3</I
></CODE
>;
}</PRE
><p class="para">The <em class="emphasis">subname</EM
> is the name of the subroutine, which is any name like the names we've had for scalar variables, arrays, and hashes. Once again, these come from a different namespace, so you can have a scalar variable <code class="literal">$fred</CODE
>, an array <code class="literal">@fred</CODE
>, a hash <code class="literal">%fred</CODE
>, and now a subroutine <code class="literal">fred</CODE
>.[<a class="footnote" href="#ch08-pgfId-507">1</A
>]</P
><blockquote class="footnote"><div class="footnote"><p class="para"><a class="footnote" name="ch08-pgfId-507">[1]</A
> Technically, the subroutine's name is <code class="literal">&amp;fred</CODE
>, but you seldom need to call it that.</P
></DIV
></BLOCKQUOTE
><p class="para">The <a class="indexterm" name="ch08-idx-84161-0"></A
>block of statements following the subroutine name becomes the definition of the subroutine. When the subroutine is invoked (described shortly), the block of statements that makes up the subroutine is executed, and any return value (described later) is returned to the caller.</P
><p class="para">Here, for example, is a subroutine that displays that famous phrase:</P
><pre class="programlisting">sub say_hello {
    print &quot;hello, world!\n&quot;;
}</PRE
><p class="para"><a class="indexterm" name="ch08-idx-84162-0"></A
>Subroutine definitions can be anywhere in your program text (they are skipped on execution), but we like to put them at the end of the file, so that the main part of the program appears at the beginning of the file. (If you like to think in Pascal terms, you can put your subroutines at the beginning and your executable statements at the end, instead. It's up to you.)</P
><p class="para"><a class="indexterm" name="ch08-idx-84163-0"></A
>Subroutine definitions are global;[<a class="footnote" href="#ch08-pgfId-512">2</A
>] there are no local subroutines. If you have <a class="indexterm" name="ch08-idx-84164-0"></A
>two subroutine definitions with the same name, the later one overwrites the earlier one without warning.[<a class="footnote" href="#ch08-pgfId-382">3</A
>]</P
><blockquote class="footnote"><div class="footnote"><p class="para"><a class="footnote" name="ch08-pgfId-512">[2]</A
> Global to the current package, actually, but since this book doesn't really deal with separate packages, you may think of subroutine definitions as global to the whole program.</P
></DIV
><div class="footnote"><p class="para"><a class="footnote" name="ch08-pgfId-382">[3]</A
> Unless you are running with the <code class="literal">-w</CODE
> switch.</P
></DIV
></BLOCKQUOTE
><p class="para">Within the subroutine body, you may access or give values to variables that are shared with the rest of the program (a <a class="indexterm" name="ch08-idx-84165-0"></A
><a class="indexterm" name="ch08-idx-84165-1"></A
><a class="indexterm" name="ch08-idx-84165-2"></A
><em class="emphasis">global</EM
> variable). In fact, by default, any variable reference within a subroutine body refers to a global variable. We'll tell you about the exceptions in the upcoming section <a class="xref" href="ch08_05.htm" title="Private Variables in Functions">"Private Variables in Functions</A
>." In the following example,</P
><pre class="programlisting">sub say_what {
  print &quot;hello, $what\n&quot;;
}</PRE
><p class="para"><code class="literal">$what</CODE
> refers to the global <code class="literal">$what</CODE
>, shared with the rest of the program.</P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch07_07.htm" title="7.7 Exercises"><img src="../gifs/txtpreva.gif" alt="Previous: 7.7 Exercises" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Learning Perl"><img src="../gifs/txthome.gif" alt="Learning Perl" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch08_02.htm" title="8.2 Invoking a User Function"><img src="../gifs/txtnexta.gif" alt="Next: 8.2 Invoking a User Function" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">7.7 Exercises</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">8.2 Invoking a User Function</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
