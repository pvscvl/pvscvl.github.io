<html><head>
<title>[Chapter 14] Process Management</TITLE>
<meta name="DC.title" content="Learning Perl"><meta name="DC.creator" content="Randal Schwartz, Tom Christiansen &amp; Larry Wall"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:34:58Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-284-0" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="index.htm" title="Learning Perl"><link rel="prev" href="ch13_08.htm" title="13.8 Exercises"><link rel="next" href="ch14_02.htm" title="14.2 Using Backquotes"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Learning Perl" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,54" href="index.htm" alt="Learning Perl"><area shape="RECT" coords="467,0,514,18" href="../search/lsrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch13_08.htm" title="13.8 Exercises"><img src="../gifs/txtpreva.gif" alt="Previous: 13.8 Exercises" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 14</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch14_02.htm" title="14.2 Using Backquotes"><img src="../gifs/txtnexta.gif" alt="Next: 14.2 Using Backquotes" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="chapter"><h1 class="chapter"><a class="title" name="ch14-36060">14. Process Management</A
></H1
><div class="htmltoc"><p><b>Contents:</B
><br><a class="sect1" href="#ch14-23962" title="14.1 Using system and exec">Using system and exec</A
><br><a class="sect1" href="ch14_02.htm" title="14.2 Using Backquotes">Using Backquotes</A
><br><a class="sect1" href="ch14_03.htm" title="14.3 Using Processes as Filehandles">Using Processes as Filehandles</A
><br><a class="sect1" href="ch14_04.htm" title="14.4 Using fork">Using fork</A
><br><a class="sect1" href="ch14_05.htm" title="14.5 Summary of Process Operations">Summary of Process Operations</A
><br><a class="sect1" href="ch14_06.htm" title="14.6 Sending and Receiving Signals">Sending and Receiving Signals</A
><br><a class="sect1" href="ch14_07.htm" title="14.7 Exercises">Exercises</A
></P
><p></P
></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch14-23962">14.1 Using system and exec</A
></H2
><p class="para">When you give the shell a command line to execute, the shell usually creates a new process to execute the command. This new process becomes a child of the shell, executing independently, yet coordinating with the shell.</P
><p class="para">Similarly, a Perl program can <a class="indexterm" name="ch14-idx-744310-0"></A
><a class="indexterm" name="ch14-idx-744310-1"></A
>launch new processes, and like most other operations, has more than one way to do so.</P
><p class="para">The simplest way to launch a new process is to use the <a class="indexterm" name="ch14-idx-744311-0"></A
><code class="literal">system</CODE
> function. In its simplest form, this function hands a single string to a brand new <em class="emphasis">/bin/sh</EM
><a class="indexterm" name="ch14-idx-744314-0"></A
> shell to be executed as a command. When the command is finished, the <code class="literal">system</CODE
> function returns the exit value of the command (typically <code class="literal">0</CODE
> if everything went OK). Here's an example of a Perl program executing a <a class="indexterm" name="ch14-idx-744312-0"></A
><em class="emphasis">date</EM
> command using a shell:[<a class="footnote" href="#ch14-pgfId-744405">1</A
>]<pre class="programlisting">system(&quot;date&quot;);</PRE
></P
><blockquote class="footnote"><div class="footnote"><p class="para"><a class="footnote" name="ch14-pgfId-744405">[1]</A
> This doesn't actually use the shell: Perl performs the operations of the shell if the command line is simple enough, and this one is.</P
></DIV
></BLOCKQUOTE
><p class="para">We're ignoring the return value here, but it's not likely that the <em class="emphasis">date</EM
> command is going to fail anyway.</P
><p class="para">Where does the command's output go? In fact, where does the input come from, if it's a command that wants input? These are good questions, and the answers to these questions are most of what distinguishes the various forms of process-creation.</P
><p class="para">For the <code class="literal">system</CODE
> function, the three standard files (standard input, standard output, and standard error) are inherited from the Perl process. So for the <em class="emphasis">date</EM
> command in the previous example, the output goes wherever the <code class="literal">print</CODE
> <code class="literal">STDOUT</CODE
> output goes&nbsp;- probably the invoker's display screen. Because you are firing off a shell, you can change the location of the standard output using the normal<em class="emphasis"> /bin/sh</EM
> I/O redirections. For example, to put the output of the <em class="emphasis">date </EM
>command into a file named <em class="emphasis">right_now</EM
>, something like this will work just fine:</P
><pre class="programlisting">system(&quot;date &gt;right_now&quot;) &amp;&amp; die &quot;cannot create right_now&quot;;</PRE
><p class="para">This time, we not only send the output of the <em class="emphasis">date</EM
> command into a file with a redirection to the shell, but also check the return status. If the <a class="indexterm" name="ch14-idx-744313-0"></A
>return status is true (nonzero), something went wrong with the shell command, and the <code class="literal">die</CODE
> function will do its deed. This is backwards from normal Perl operator convention: a nonzero return value from the <code class="literal">system</CODE
> operator generally indicates that something went wrong.</P
><p class="para">The argument to <code class="literal">system</CODE
> can be anything you would feed <em class="emphasis">/bin/sh</EM
>, so <a class="indexterm" name="ch14-idx-744315-0"></A
>multiple commands can be included, separated by semicolons or newlines. Processes that end in <code class="literal">&amp;</CODE
> are launched and not waited for, just as if you had typed a line that ends in an <code class="literal">&amp;</CODE
> to the shell.</P
><p class="para">Here's an example of generating a <em class="emphasis">date</EM
> and <a class="indexterm" name="ch14-idx-746378-0"></A
><em class="emphasis">who</EM
> command to the shell, sending the output to a filename specified by a Perl variable. This all takes place in the background so that we don't have to wait for it before continuing with the Perl script:</P
><pre class="programlisting">$where = &quot;who_out.&quot;.<a class="indexterm" name="ch14-idx-746357-0"></A
>++$i; # get a new filename
system &quot;(date; who) &gt;$where &amp;&quot;;</PRE
><p class="para">The return value from <code class="literal">system</CODE
> in this case is the exit value of the shell, and would thus indicate whether the background process had launched successfully, but not whether the <em class="emphasis">date</EM
> and <em class="emphasis">who</EM
> commands executed successfully. The double-quoted string is <a class="indexterm" name="ch14-idx-744317-0"></A
>variable interpolated, so <code class="literal">$where</CODE
> is replaced with its value (by Perl, not by the shell). If you wanted to reference a shell variable named <code class="literal">$where</CODE
>, you'd have to <a class="indexterm" name="ch14-idx-744318-0"></A
>backslash the dollar sign or use a single-quoted string.</P
><p class="para">A child process inherits many things from its parent besides the standard filehandles. These include the current umask, current directory, and of course, the user ID.</P
><p class="para">Additionally, all environment variables are inherited by the child. These variables are typically altered by the <a class="indexterm" name="ch14-idx-744321-0"></A
><em class="emphasis">csh setenv</EM
><a class="indexterm" name="ch14-idx-744319-0"></A
> command or the corresponding assignment and <a class="indexterm" name="ch14-idx-744320-0"></A
><em class="emphasis">export</EM
> by the <em class="emphasis">/bin/sh</EM
> shell. Environment variables are used by many utilities, including the shells, to alter or control the way that utility operates.</P
><p class="para">Perl gives you a way to examine and alter current <a class="indexterm" name="ch14-idx-744323-0"></A
>environment variables through a special hash called <a class="indexterm" name="ch14-idx-744322-0"></A
><code class="literal">%ENV</CODE
> (uppercase). Each key of this hash corresponds to the name of an environment variable, with the corresponding value being, well, the corresponding value. Examining this hash shows you the environment handed to Perl by the parent shell; altering the hash affects the environment used by Perl and by its child processes, but not parents.</P
><p class="para">For example, here's a simple program that acts like <em class="emphasis">printenv</EM
><a class="indexterm" name="ch14-idx-744324-0"></A
> :</P
><pre class="programlisting">foreach $key (sort keys %ENV) {
    print &quot;$key=$ENV{$key}\n&quot;;
}</PRE
><p class="para">Note the equal sign here is not an assignment, but simply a text character that the <code class="literal">print</CODE
> is using to say stuff like <code class="literal">TERM=xterm</CODE
> or <code class="literal">USER=merlyn</CODE
>.</P
><p class="para">Here's a program snippet that alters the value of <a class="indexterm" name="ch14-idx-744325-0"></A
><code class="literal">PATH</CODE
> to make sure that the <em class="emphasis">grep</EM
> command run by <a class="indexterm" name="ch14-idx-744327-0"></A
><code class="literal">system</CODE
> is looked for only in the normal places:</P
><pre class="programlisting">$oldPATH = $ENV{&quot;PATH&quot;};                 # save previous path
$ENV{&quot;PATH&quot;} = &quot;/bin:/usr/bin:/usr/ucb&quot;; # force known path
system(&quot;grep fred bedrock &gt;output&quot;);     # run command
$ENV{&quot;PATH&quot;} = $oldPATH;                 # restore previous path</PRE
><p class="para">That's a lot of typing. It'd be faster just to set a local value for this hash element.</P
><p class="para">Despite its other shortcomings, the <code class="literal">local</CODE
> operator can do one thing that <code class="literal">my</CODE
> cannot: it can give just one element of an array or a hash a temporary value.</P
><pre class="programlisting">{
    local $ENV{&quot;PATH&quot;} = &quot;/bin:/usr/bin:/usr/ucb&quot;;
    system &quot;grep fred bedrock &gt;output&quot;;
}</PRE
><p class="para">The <a class="indexterm" name="ch14-idx-744326-0"></A
><code class="literal">system</CODE
> function can also take a list of arguments rather than a single argument. In that case, rather than handing the list of arguments off to a <a class="indexterm" name="ch14-idx-744328-0"></A
>shell, Perl treats the first argument as the command to run (located according to the <code class="literal">PATH</CODE
> if necessary) and the remaining arguments as arguments to the command without normal shell interpretation. In other words, you don't need to quote whitespace or worry about arguments that contain angle brackets because those are all merely characters to hand to the program. So, the following two commands are equivalent:</P
><pre class="programlisting">system &quot;grep 'fred flintstone' buffaloes&quot;;   # using shell
system &quot;grep&quot;,&quot;fred flintstone&quot;,&quot;buffaloes&quot;; # avoiding shell</PRE
><p class="para">Giving <code class="literal">system</CODE
> a list rather than giving it a simple string saves one shell process as well, so do this when you can. (Actually, when the one-argument form of <code class="literal">system</CODE
> is simple enough, Perl itself optimizes away the shell invocation entirely, calling the resulting program directly as if you had used the multiple-argument invocation.)</P
><p class="para">Here's another example of equivalent forms:</P
><pre class="programlisting">@cfiles = (&quot;fred.c&quot;,&quot;barney.c&quot;);           # what to compile
@options = (&quot;-DHARD&quot;,&quot;-DGRANITE&quot;);         # options
system &quot;cc -o slate @options @cfiles&quot;;     # using shell
system &quot;cc&quot;,&quot;-o&quot;,&quot;slate&quot;,@options,@cfiles; # avoiding shell</PRE
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch13_08.htm" title="13.8 Exercises"><img src="../gifs/txtpreva.gif" alt="Previous: 13.8 Exercises" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Learning Perl"><img src="../gifs/txthome.gif" alt="Learning Perl" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch14_02.htm" title="14.2 Using Backquotes"><img src="../gifs/txtnexta.gif" alt="Next: 14.2 Using Backquotes" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">13.8 Exercises</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">14.2 Using Backquotes</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
