<html><head>
<title>[Chapter 17] 17.4 Fixed-Length Random Access Databases</TITLE>
<meta name="DC.title" content="Learning Perl"><meta name="DC.creator" content="Randal Schwartz, Tom Christiansen &amp; Larry Wall"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:35:54Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-284-0" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch17_01.htm" title="17. User Database Manipulation"><link rel="prev" href="ch17_03.htm" title="17.3 Using a DBM Hash"><link rel="next" href="ch17_05.htm" title="17.5 Variable-Length ( Text) Databases"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Learning Perl" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,54" href="index.htm" alt="Learning Perl"><area shape="RECT" coords="467,0,514,18" href="../search/lsrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch17_03.htm" title="17.3 Using a DBM Hash"><img src="../gifs/txtpreva.gif" alt="Previous: 17.3 Using a DBM Hash" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch17_01.htm" title="17. User Database Manipulation">Chapter 17<br>User Database Manipulation</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch17_05.htm" title="17.5 Variable-Length ( Text) Databases"><img src="../gifs/txtnexta.gif" alt="Next: 17.5 Variable-Length ( Text) Databases" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch17-28986">17.4 Fixed-Length Random Access Databases</A
></H2
><p class="para"><a class="indexterm" name="ch17-idx-86095-0"></A
>Another form of persistent data is the fixed-length, record-oriented disk file. In this scheme, the data consists of a number of records of identical length. The numbering of the records is either not important or determined by some indexing scheme.</P
><p class="para">For example, we might have a series of records in which the data has 40 characters of first name, a one-character middle initial, 40 characters of last name, and then a two-byte integer for the age. Each record is then 83 bytes long. If we were reading all of the data in the database, we'd read chunks of 83 bytes until we got to the end. If we wanted to go to the fifth record, we'd skip ahead four times 83 bytes (332 bytes) and read the fifth record directly.</P
><p class="para">Perl supports programs that use such a disk file. A few things are necessary in addition to what you already know:</P
><ol class="orderedlist"><li class="listitem"><p class="para"><a class="listitem" name="ch17-pgfId-86241"></A
>Opening a disk file for both reading and writing</P
></LI
><li class="listitem"><p class="para"><a class="listitem" name="ch17-pgfId-86242"></A
>Moving around in this file to an arbitrary position</P
></LI
><li class="listitem"><p class="para"><a class="listitem" name="ch17-pgfId-86243"></A
>Fetching data by a length rather than up to the next newline</P
></LI
><li class="listitem"><p class="para"><a class="listitem" name="ch17-pgfId-86244"></A
>Writing data down in fixed-length blocks</P
></LI
></OL
><p class="para">The <a class="indexterm" name="ch17-idx-86096-0"></A
><code class="literal">open</CODE
> function takes an additional <a class="indexterm" name="ch17-idx-86097-0"></A
>plus sign before its I/O direction specification to indicate that the file is really being opened for both reading and writing. For example:</P
><pre class="programlisting">open(A,&quot;+&lt;b&quot;);  # open file b read/write (error if file absent)
open(C,&quot;+&gt;d&quot;);  # create file d, with read/write access
open(E,&quot;+&gt;&gt;f&quot;); # open or create file f with read/write access</PRE
><p class="para">Notice that all we've done was to prepend a plus sign to the I/O direction.</P
><p class="para">Once we've got the file open, we need to <a class="indexterm" name="ch17-idx-86099-0"></A
>move around in it. We do this with the <a class="indexterm" name="ch17-idx-86098-0"></A
><code class="literal">seek</CODE
> function, which takes the same three parameters as the <em class="emphasis">fseek</EM
> (3) library routine. The first parameter is a <a class="indexterm" name="ch17-idx-86100-0"></A
>filehandle; the second parameter gives an offset, which is interpreted in conjunction with the third parameter. Usually, you'll want the third parameter to be zero so that the second parameter selects a new absolute position for next read from or write to the file. For example, to go to the fifth record on the filehandle <code class="literal">NAMES</CODE
> (as described above), you can do this:</P
><pre class="programlisting">seek(NAMES,4*83,0);</PRE
><p class="para">Once the file pointer has been repositioned, the next input or output will start there. For output, use the <code class="literal">print</CODE
> function, but be sure that the data you are writing is the right length. To obtain the right length, we can call upon the <a class="indexterm" name="ch17-idx-86101-0"></A
><code class="literal">pack</CODE
> function:</P
><pre class="programlisting">print NAMES pack(&quot;A40 A A40 s&quot;, $first, $middle, $last, $age);</PRE
><p class="para">That <code class="literal">pack</CODE
> specifier gives 40 characters for <code class="literal">$first</CODE
>, a single character for <code class="literal">$middle</CODE
>, 40 more characters for <code class="literal">$last</CODE
>, and a short (two bytes) for the <code class="literal">$age</CODE
>. This should be 83 bytes long, and will be written at the current file position.</P
><p class="para">Last, we need to fetch a particular record. Although the <code class="literal">&lt;NAMES&gt;</CODE
> construct returns all of the data from the current position to the next newline, that's not correct; the data is supposed to go for 83 bytes, and there probably isn't a newline right there. Instead, we use the <a class="indexterm" name="ch17-idx-86102-0"></A
><code class="literal">read</CODE
> function, which looks and works a lot like its UNIX system call counterpart:</P
><pre class="programlisting">$count = read(NAMES, $buf, 83);</PRE
><p class="para">The first parameter for <code class="literal">read</CODE
> is the <a class="indexterm" name="ch17-idx-86103-0"></A
>filehandle. The second parameter is a scalar variable that holds the data that will be read. The third parameter gives the number of bytes to read. The <a class="indexterm" name="ch17-idx-86104-0"></A
>return value from <code class="literal">read</CODE
> is the number of bytes actually read; typically the same number as the number of bytes asked for unless the filehandle is not opened or you are too close to the end of the file. </P
><p class="para">Once you have the 83-character data, just break it into its component parts with the <code class="literal">unpack</CODE
> function:</P
><pre class="programlisting">($first, $middle, $last, $age) = <a class="indexterm" name="ch17-idx-86105-0"></A
>unpack(&quot;A40 A A40 s&quot;, $buf);</PRE
><p class="para">Note that the <code class="literal">pack</CODE
> and <code class="literal">unpack</CODE
> format strings are the same. Most programs store this string in a variable early in the program, and even compute the length of the records using <code class="literal">pack</CODE
> instead of sprinkling the constant 83 everywhere:</P
><pre class="programlisting">$names = &quot;A40 A A40 s&quot;;
$names_length = <a class="indexterm" name="ch17-idx-86106-0"></A
>length(pack($names)); # probably 83</PRE
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch17_03.htm" title="17.3 Using a DBM Hash"><img src="../gifs/txtpreva.gif" alt="Previous: 17.3 Using a DBM Hash" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Learning Perl"><img src="../gifs/txthome.gif" alt="Learning Perl" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch17_05.htm" title="17.5 Variable-Length ( Text) Databases"><img src="../gifs/txtnexta.gif" alt="Next: 17.5 Variable-Length ( Text) Databases" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">17.3 Using a DBM Hash</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">17.5 Variable-Length ( Text) Databases</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
