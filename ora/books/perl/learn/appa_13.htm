<html><head>
<title>[Appendix A] A.13 Chapter 14, Process Management</TITLE>
<meta name="DC.title" content="Learning Perl"><meta name="DC.creator" content="Randal Schwartz, Tom Christiansen &amp; Larry Wall"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:37:02Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-284-0" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="appa_01.htm" title="A. Exercise Answers"><link rel="prev" href="appa_12.htm" title="A.12 Chapter 13, File and Directory Manipulation"><link rel="next" href="appa_14.htm" title="A.14 Chapter 15, Other Data Transformation"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Learning Perl" usemap="#srchmap" border="0"></H1
><map name="srchmap"index.html><area shape="RECT" coords="0,0,466,54" href="index.htm" alt="Learning Perl"><area shape="RECT" coords="467,0,514,18" href="../search/lsrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="appa_12.htm" title="A.12 Chapter 13, File and Directory Manipulation"><img src="../gifs/txtpreva.gif" alt="Previous: A.12 Chapter 13, File and Directory Manipulation" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="appendix" rel="up" href="appa_01.htm" title="A. Exercise Answers">Appendix A<br>Exercise Answers</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="appa_14.htm" title="A.14 Chapter 15, Other Data Transformation"><img src="../gifs/txtnexta.gif" alt="Next: A.14 Chapter 15, Other Data Transformation" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="appa-21303">A.13 Chapter 14, Process Management</A
></H2
><ol class="orderedlist"><li class="listitem"><p class="para"><a class="listitem" name="appa-pgfId-179214"></A
>Here's one way to do it:</P
><pre class="programlisting">if (`<a class="indexterm" name="appa-idx-178752-0"></A
>date` =~ /^S/) {
    print &quot;Go play!\n&quot;;
} else {
    print &quot;Get to work!\n&quot;;
}</PRE
><p class="para">It just so happens that the first output character of the <em class="emphasis">date</EM
> command is an <code class="literal">S</CODE
> only on the weekend (<code class="literal">Sat</CODE
> or <code class="literal">Sun</CODE
>), which makes this program trivial. We invoke <em class="emphasis">date</EM
>, then use a regular expression to see if the first character is an <code class="literal">S</CODE
>. Based on that, we print one message or the other.</P
></LI
><li class="listitem"><p class="para"><a class="listitem" name="appa-pgfId-179220"></A
>Here's one way to do it:</P
><pre class="programlisting">open(PW,&quot;/etc/passwd&quot;);
while (&lt;PW&gt;) {
    chomp;
    ($user,$gcos) = <a class="indexterm" name="appa-idx-178753-0"></A
>(split /:/)[0,4];
    ($real) = split(/,/, $gcos);
    $real{$user} = $real;
}
close(PW);

open(WHO,&quot;who|&quot;) || die &quot;cannot open who pipe&quot;;
while (&lt;WHO&gt;) {
    ($login, $rest) = /^(\S+)\s+(.*)/;
    $login = $real{$login} if $real{$login};
    <a class="indexterm" name="appa-idx-178754-0"></A
>printf &quot;%-30s %s\n&quot;,$login,$rest;
}</PRE
><p class="para">The first loop creates a hash <code class="literal">%real</CODE
> that has login names for keys and the corresponding real names as values. This hash is used in the following loop to change the login name into a real name.</P
><p class="para">The second loop scans through the output resulting from opening the <em class="emphasis">who</EM
> command as a filehandle. Each line of <em class="emphasis">who</EM
>'s output is broken apart using a regular expression match in a list context. The first word of the line (the login name) is replaced with the real name from the hash, but only if it exists. When that's all done, a nice <code class="literal">printf</CODE
> puts the result onto <code class="literal">STDOUT</CODE
>.</P
><p class="para">You can replace the filehandle <code class="literal">open</CODE
> and the beginning of the loop with just</P
><pre class="programlisting">foreach $_ (<a class="indexterm" name="appa-idx-178755-0"></A
>`who`) {</PRE
><p class="para">to accomplish the same result. The only difference is that the version with the filehandle can begin operating as soon as <em class="emphasis">who</EM
> starts spitting out characters, while the version with <code class="replaceable"><i>who</I
></CODE
> in backquotes must wait for <em class="emphasis">who</EM
> to finish.</P
></LI
><li class="listitem"><p class="para"><a class="listitem" name="appa-pgfId-179237"></A
>Here's one way to do it:</P
><pre class="programlisting">open(PW,&quot;/etc/passwd&quot;);
while (&lt;PW&gt;) {
    chomp;
    ($user,$gcos) = (split /:/)[0,4];
    ($real) = split(/,/, $gcos);
    $real{$user} = $real;
}
close(PW);

open(LPR,&quot;|lpr&quot;) || die &quot;cannot open LPR pipe&quot;;
open(WHO,&quot;who|&quot;) || die &quot;cannot open who pipe&quot;;
while (&lt;WHO&gt;) {
# or replace previous two lines with: foreach $_ (`who`) {
    ($login, $rest) = /^(\S+)\s+(.*)/;
    $login = $real{$login} if $real{$login};
    printf LPR &quot;%-30s %s\n&quot;,$login,$rest;
}</PRE
><p class="para">The difference between this program and the program from the previous exercise is that we've added an <code class="literal">LPR</CODE
> filehandle opened onto an <em class="emphasis">lpr</EM
> process, and modified the <code class="literal">printf</CODE
> statement to send the data there instead of <code class="literal">STDOUT</CODE
>.</P
></LI
><li class="listitem"><p class="para"><a class="listitem" name="appa-pgfId-179266"></A
>Here's one way to do it:</P
><pre class="programlisting">sub mkdir {
    <a class="indexterm" name="appa-idx-178757-0"></A
>!<a class="indexterm" name="appa-idx-178756-0"></A
>system &quot;/bin/mkdir&quot;, @_;
}</PRE
><p class="para">Here, the <em class="emphasis">mkdir</EM
> command is given the arguments directly from the arguments to the subroutine. The return value must be logically negated, however, because a nonzero exit status from <code class="literal">system</CODE
> must translate into a false value for the Perl caller.</P
></LI
><li class="listitem"><p class="para"><a class="listitem" name="appa-pgfId-179270"></A
> Here's one way to do it:</P
><pre class="programlisting">sub mkdir {
    my($dir, $mode) = @_;
    (!system &quot;/bin/mkdir&quot;, $dir) &amp;&amp; chmod($mode, $dir);
}</PRE
><p class="para">First, the arguments to this routine are named as <code class="literal">$dir</CODE
> and <code class="literal">$mode</CODE
>. Next, we invoke <em class="emphasis">mkdir</EM
> on the directory named by <code class="literal">$dir</CODE
>. If that succeeds, the <code class="literal">chmod</CODE
> operator gives the proper mode to the directory.</P
></LI
></OL
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="appa_12.htm" title="A.12 Chapter 13, File and Directory Manipulation"><img src="../gifs/txtpreva.gif" alt="Previous: A.12 Chapter 13, File and Directory Manipulation" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Learning Perl"><img src="../gifs/txthome.gif" alt="Learning Perl" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="appa_14.htm" title="A.14 Chapter 15, Other Data Transformation"><img src="../gifs/txtnexta.gif" alt="Next: A.14 Chapter 15, Other Data Transformation" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">A.12 Chapter 13, File and Directory Manipulation</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">A.14 Chapter 15, Other Data Transformation</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
