<html><head>
<title>[Chapter 15] 15.2 Extracting and Replacing a Substring</TITLE>
<meta name="DC.title" content="Learning Perl"><meta name="DC.creator" content="Randal Schwartz, Tom Christiansen &amp; Larry Wall"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:35:18Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-284-0" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch15_01.htm" title="15. Other Data Transformation"><link rel="prev" href="ch15_01.htm" title="15.1 Finding a Substring"><link rel="next" href="ch15_03.htm" title="15.3 Formatting Data with sprintf( )"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Learning Perl" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,54" href="index.htm" alt="Learning Perl"><area shape="RECT" coords="467,0,514,18" href="../search/lsrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch15_01.htm" title="15.1 Finding a Substring"><img src="../gifs/txtpreva.gif" alt="Previous: 15.1 Finding a Substring" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch15_01.htm" title="15. Other Data Transformation">Chapter 15<br>Other Data Transformation</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch15_03.htm" title="15.3 Formatting Data with sprintf( )"><img src="../gifs/txtnexta.gif" alt="Next: 15.3 Formatting Data with sprintf( )" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch15-39827">15.2 Extracting and Replacing a Substring</A
></H2
><p class="para">Pulling out a piece of a string can be done with careful application of regular expressions, but if the piece is always at a known character position, this is inefficient. Instead, you should use <a class="indexterm" name="ch15-idx-403324-0"></A
><code class="literal">substr</CODE
>. This function takes three arguments: a string value, a start position (measured like it was measured for <code class="literal">index</CODE
>), and a length, like so:</P
><pre class="programlisting">$s = substr(<code class="replaceable"><i>$string</I
></CODE
>,<code class="replaceable"><i>$start</I
></CODE
>,<code class="replaceable"><i>$length</I
></CODE
>);</PRE
><p class="para">The start position works like <code class="literal">index</CODE
>: the first character is zero, the second character is one, and so on. The length is the number of characters to grab at that point: a length of zero means no characters, one means get the first character, two means two characters, and so on. (It stops at the end of the string, so if you ask for too many, it's no problem.) It looks like this:</P
><pre class="programlisting">$hello = &quot;hello, world!&quot;;
$grab  = substr($hello, 3, 2);   # $grab gets &quot;lo&quot;
$grab  = substr($hello, 7, 100); # 7 to end, or &quot;world!&quot;</PRE
><p class="para">You could even create a "<a class="indexterm" name="ch15-idx-403325-0"></A
>ten to the power of  " operator for small integer powers, as in:</P
><pre class="programlisting">$big = substr(&quot;10000000000&quot;,0,$power+1); # 10 ** $power</PRE
><p class="para">If the count of characters is zero, an empty string is returned. If either the starting position or ending position is less than zero, the position is counted that many characters from the end of the string. So <code class="literal">-1</CODE
> for a start position and <code class="literal">1</CODE
> (or more) for the length gives you the last character. Similarly, <code class="literal">-2</CODE
> for a start position starts with the second-to-last character like this:</P
><pre class="programlisting">$stuff = substr(&quot;a very long string&quot;,-3,3); # last three chars
$stuff = substr(&quot;a very long string&quot;,-3,1); # the letter &quot;i&quot;</PRE
><p class="para">If the starting position is before the beginning of the string (like a huge negative number bigger than the length of the string), the beginning of the string is the start position (as if you had used <code class="literal">0</CODE
> for a starting position). If the start position is a huge positive number, the empty string is always returned. In other words, it probably does what you expect it to do, as long as you expect it to always return something other than an error.</P
><p class="para">Omitting the length argument is the same as if you had included a huge number for that argument&nbsp;- grabbing everything from the selected position to the end of the string.[<a class="footnote" href="#ch15-pgfId-403568">1</A
>]</P
><blockquote class="footnote"><div class="footnote"><p class="para"><a class="footnote" name="ch15-pgfId-403568">[1]</A
> Very old Perl versions did not allow the third argument to be omitted, leading to the use of a huge number for that argument by pioneer Perl programmers. You may come across this in your Perl <a class="indexterm" name="ch15-idx-403328-0"></A
>archeological expeditions.</P
></DIV
></BLOCKQUOTE
><p class="para">If the first argument to <a class="indexterm" name="ch15-idx-403326-0"></A
><code class="literal">substr</CODE
> is a scalar variable (in other words, it could appear on the left side of an assignment operator), then the <code class="literal">substr</CODE
> itself can appear on the left side of an <a class="indexterm" name="ch15-idx-403327-0"></A
>assignment operator. This may look strange if you come from a C background, but if you've ever played with some dialects of BASIC, it's quite normal.</P
><p class="para">What gets changed as the result of such an assignment is the part of the string that would have been returned had the <code class="literal">substr</CODE
> been used on the right-hand side of the expression instead. In other words, <code class="literal">substr($var,3,2)</CODE
> returns the fourth and fifth characters (starting at <code class="literal">3</CODE
>, for a count of <code class="literal">2</CODE
>), so assigning to that changes those two characters for <code class="literal">$var</CODE
> like so:</P
><pre class="programlisting">$hw = &quot;hello world!&quot;;
substr($hw, 0, 5) = &quot;howdy&quot;; # $hw is now &quot;howdy world!&quot;</PRE
><p class="para">The length of the replacement text (what gets assigned into the <code class="literal">substr</CODE
>) doesn't have to be the same as the text it is replacing, as it was in this example. The string will automatically grow or shrink as necessary to accommodate the text. Here's an example where the string gets shorter:</P
><pre class="programlisting">substr($hw, 0, 5) = &quot;hi&quot;; # $hw is now &quot;hi world!&quot;</PRE
><p class="para">and here's one that makes it longer:</P
><pre class="programlisting">substr($hw, -6, 5) = &quot;nationwide news&quot;; # replaces &quot;world&quot;</PRE
><p class="para">The shrinking and growing are fairly efficient, so don't worry about using them arbitrarily, although it is faster to replace a string with a string of equal length.</P
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch15_01.htm" title="15.1 Finding a Substring"><img src="../gifs/txtpreva.gif" alt="Previous: 15.1 Finding a Substring" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Learning Perl"><img src="../gifs/txthome.gif" alt="Learning Perl" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch15_03.htm" title="15.3 Formatting Data with sprintf( )"><img src="../gifs/txtnexta.gif" alt="Next: 15.3 Formatting Data with sprintf( )" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">15.1 Finding a Substring</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">15.3 Formatting Data with sprintf( )</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
