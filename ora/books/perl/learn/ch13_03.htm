<html><head>
<title>[Chapter 13] 13.3 Creating Alternate Names for a File: Linking</TITLE>
<meta name="DC.title" content="Learning Perl"><meta name="DC.creator" content="Randal Schwartz, Tom Christiansen &amp; Larry Wall"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:34:45Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-284-0" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch13_01.htm" title="13. File and Directory Manipulation"><link rel="prev" href="ch13_02.htm" title="13.2 Renaming a File"><link rel="next" href="ch13_04.htm" title="13.4 Making and Removing Directories"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Learning Perl" usemap="#srchmap" border="0"></H1
><index.htmlmap name="srchmap"><area shape="RECT" coords="0,0,466,54" href="index.htm" alt="Learning Perl"><area shape="RECT" coords="467,0,514,18" href="../search/lsrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch13_02.htm" title="13.2 Renaming a File"><img src="../gifs/txtpreva.gif" alt="Previous: 13.2 Renaming a File" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch13_01.htm" title="13. File and Directory Manipulation">Chapter 13<br>File and Directory Manipulation</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch13_04.htm" title="13.4 Making and Removing Directories"><img src="../gifs/txtnexta.gif" alt="Next: 13.4 Making and Removing Directories" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch13-38506">13.3 Creating Alternate Names for a File: Linking</A
></H2
><p class="para">As if one name for a file weren't enough, sometimes you want to have two, three, or a dozen names for the same file. This operation of creating alternate names for a file is called <em class="emphasis">linking</EM
><a class="indexterm" name="ch13-idx-390-0"></A
><a class="indexterm" name="ch13-idx-390-1"></A
>. The two major forms of linking are <a class="indexterm" name="ch13-idx-391-0"></A
>hard links and <a class="indexterm" name="ch13-idx-392-0"></A
>symbolic links (also called <a class="indexterm" name="ch13-idx-393-0"></A
>symlinks or soft links). Not all kinds of filesystems support both of these or even either of them. This section describes filesystems under POSIX. </P
><div class="sect2"><h3 class="sect2"><a class="title" name="ch13-pgfId-394">13.3.1 About Hard and Soft Links</A
></H3
><p class="para">A <em class="emphasis">hard link</EM
> to a file is indistinguishable from the original name for the file; there's no particular link that is more the "real name" for the file than any other. </P
><p class="para">The operating system keeps track of how many hard links reference the file at any particular time. When a file is first created, it starts with one link. Each new hard link increases the count. Each removed link reduces the count. When the last link to a file disappears, and the file is closed, the file goes away.</P
><p class="para">Every hard link to a file must reside on the same mounted filesystem (usually a disk or a part of a disk). Because of this, you cannot make a new hard link to a file that is on a different mounted filesystem.</P
><p class="para">Under most systems, hard links are also restricted for directories. To keep the directory structure as a tree rather than an arbitrary mish-mash, a directory is allowed only one name from the root, a link from the <a class="indexterm" name="ch13-idx-399-0"></A
>dot file within itself, and a bunch of <a class="indexterm" name="ch13-idx-400-0"></A
>dot-dot hard links from each of its subdirectories. If you try to create another hard link to a directory, you will get an error (unless you're the superuser, and then you get to spend all night restoring your mangled filesystem).</P
><p class="para">A <a class="indexterm" name="ch13-idx-401-0"></A
>symbolic link is a special kind of a file that contains a pathname as data. When this file is opened, the operating system regards its contents as replacement characters for the pathname, causing the kernel to hunt through the directory tree some more, starting with the new name.</P
><p class="para">For example, if a symlink named <em class="emphasis">fred</EM
> contains the name <em class="emphasis">barney</EM
>, opening <em class="emphasis">fred</EM
> is really an indication to open <em class="emphasis">barney</EM
>. If <em class="emphasis">barney</EM
> is a directory, then <em class="emphasis">fred/wilma</EM
> refers to <em class="emphasis">barney/wilma</EM
> instead.</P
><p class="para">The contents of a <a class="indexterm" name="ch13-idx-404-0"></A
>symlink (where a symlink points) do not have to refer to an existing file or directory. When <em class="emphasis">fred</EM
> is made, <em class="emphasis">barney</EM
> doesn't even have to exist: in fact, it may never exist! The contents of a symlink can refer to a path that leads you off the current filesystem, so you can create a symlink to a file on another mounted filesystem.</P
><p class="para">While following the new name, the kernel may run across another symlink. This new <a class="indexterm" name="ch13-idx-407-0"></A
>symlink gives even more new parts to the path to be followed. In fact, symlinks can point to other symlinks, with usually at least eight levels of symlinks allowed, although this is rarely used in practice.</P
><p class="para">A hard link protects the contents of a file from being lost (because it counts as one of the names of the file). A symlink cannot keep the contents from disappearing. A symlink can cross mounted filesystems; a hard link cannot. Only a symlink can be made to a directory.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch13-pgfId-411">13.3.2 Creating Hard and Soft Links with Perl</A
></H3
><p class="para">The UNIX <em class="emphasis">ln</EM
><a class="indexterm" name="ch13-idx-412-0"></A
> command creates hard links. The command</P
><pre class="programlisting">ln fred bigdumbguy</PRE
><p class="para">creates a hard link from the file <em class="emphasis">fred</EM
> (which must exist) to <em class="emphasis">bigdumbguy</EM
>. In Perl, this is expressed as:</P
><pre class="programlisting">link(&quot;fred&quot;,&quot;bigdumbguy&quot;) ||
    die &quot;cannot link fred to bigdumbguy&quot;;</PRE
><p class="para">The <a class="indexterm" name="ch13-idx-418-0"></A
><code class="literal">link</CODE
> function takes two parameters, the old filename and a new alias for that file. The function returns true if the link was successful. As with the <em class="emphasis">mv</EM
> command, the UNIX <em class="emphasis">ln</EM
> command performs some behind-the-scenes magic, allowing you to specify the target directory for the new alias without naming the file within the directory. The <code class="literal">link</CODE
> function (like the <code class="literal">rename</CODE
> function) is not so smart, and you must specify the full filename explicitly.</P
><p class="para">For a hard link, <a class="indexterm" name="ch13-idx-420-0"></A
>the old filename cannot be a directory,[<a class="footnote" href="#ch13-pgfId-871375">1</A
>] and the new alias must be on the same filesystem. (These restrictions are part of the reason that symbolic links were created.)</P
><blockquote class="footnote"><div class="footnote"><p class="para"><a class="footnote" name="ch13-pgfId-871375">[1]</A
> Unless you are root and enjoy running <em class="emphasis">fsck</EM
>.</P
></DIV
></BLOCKQUOTE
><p class="para">On systems that support symbolic links, the <em class="emphasis">ln</EM
><a class="indexterm" name="ch13-idx-422-0"></A
> command may be given the <em class="emphasis">-s</EM
> option to create a symbolic link. So, to create a symbolic link from <em class="emphasis">barney</EM
> to <em class="emphasis">neighbor</EM
> (so that a reference to <em class="emphasis">neighbor</EM
> is actually a reference to <em class="emphasis">barney</EM
>), you'd use something like this:</P
><pre class="programlisting">ln -s barney neighbor</PRE
><p class="para">and in Perl, you'd use the <a class="indexterm" name="ch13-idx-425-0"></A
><code class="literal">symlink</CODE
> function, like so:</P
><pre class="programlisting">symlink(&quot;barney&quot;,&quot;neighbor&quot;) ||
    <a class="indexterm" name="ch13-idx-872499-0"></A
>die &quot;cannot symlink to neighbor&quot;;</PRE
><p class="para">Note that <em class="emphasis">barney</EM
> need not exist (poor Betty!), either now or in the future. In this case, a reference to <em class="emphasis">neighbor</EM
> will return something vaguely like <code class="literal">No</CODE
> <code class="literal">such</CODE
> <code class="literal">file</CODE
> <code class="literal">or</CODE
> <code class="literal">directory</CODE
>.</P
><p class="para">When you invoke <em class="emphasis">ls -l</EM
> on the directory containing a symbolic link, you get an indication of both the name of the symbolic link and where the link points. Perl gives you this same information through the <a class="indexterm" name="ch13-idx-432-0"></A
><code class="literal">readlink</CODE
> function, which works surprisingly like the system call of the same name, returning the name pointed at by the specified symbolic link. So, this operation</P
><pre class="programlisting">if (defined($x = readlink(&quot;neighbor&quot;))) {
    print &quot;neighbor points at '$x'\n&quot;;
}</PRE
><p class="para">should talk about <em class="emphasis">barney</EM
> if all is well. If the selected symbolic link does not exist or can't be read or isn't even a symlink, <code class="literal">readlink</CODE
> returns <code class="literal">undef</CODE
> (definitely false), which is why we're testing it here.</P
><p class="para">On systems without symbolic links, both the <code class="literal">symlink</CODE
> and <code class="literal">readlink</CODE
> functions will <a class="indexterm" name="ch13-idx-438-0"></A
><a class="indexterm" name="ch13-idx-438-1"></A
>fail, producing a run-time error. This is because there is no comparable equivalent for symbolic links on systems that don't support them. Perl can hide some system-dependent features from you, but some just leak right through. This is one of them.</P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch13_02.htm" title="13.2 Renaming a File"><img src="../gifs/txtpreva.gif" alt="Previous: 13.2 Renaming a File" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Learning Perl"><img src="../gifs/txthome.gif" alt="Learning Perl" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch13_04.htm" title="13.4 Making and Removing Directories"><img src="../gifs/txtnexta.gif" alt="Next: 13.4 Making and Removing Directories" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">13.2 Renaming a File</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">13.4 Making and Removing Directories</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
