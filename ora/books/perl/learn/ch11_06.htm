<html><head>
<title>[Chapter 11] 11.6 Changing Defaults for Formats</TITLE>
<meta name="DC.title" content="Learning Perl"><meta name="DC.creator" content="Randal Schwartz, Tom Christiansen &amp; Larry Wall"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:34:20Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-284-0" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch11_01.htm" title="11. Formats"><link rel="prev" href="ch11_05.htm" title="11.5 The Top-of-Page Format"><link rel="next" href="ch11_07.htm" title="11.7 Exercises"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Learning Perl" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,54" href="index.htm" alt="Learning Perl"><area shape="RECT" coords="467,0,514,18" href="../search/lsrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch11_05.htm" title="11.5 The Top-of-Page Format"><img src="../gifs/txtpreva.gif" alt="Previous: 11.5 The Top-of-Page Format" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch11_01.htm" title="11. Formats">Chapter 11<br>Formats</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch11_07.htm" title="11.7 Exercises"><img src="../gifs/txtnexta.gif" alt="Next: 11.7 Exercises" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch11-33587">11.6 Changing Defaults for Formats</A
></H2
><p class="para">We have often referred to the "default" for this or that. Well, Perl provides a way to override the defaults for just about every step. Let's talk about these.</P
><div class="sect2"><h3 class="sect2"><a class="title" name="ch11-pgfId-948465">11.6.1 Using select( ) to Change the Filehandle</A
></H3
><p class="para">Back when we talked about <code class="literal">print</CODE
>, in <a class="xref" href="ch06_01.htm" title="Basic I/O">Chapter 6, <cite class="chapter">Basic I/O</CITE
></A
>, I mentioned that <code class="literal">print</CODE
> and <code class="literal">print</CODE
> <code class="literal">STDOUT</CODE
> were identical, because <code class="literal">STDOUT</CODE
> was the default for <code class="literal">print</CODE
>. Not quite. The real default for <code class="literal">print</CODE
> (and <code class="literal">write</CODE
>, and a few other operations that we'll get to in a moment) is an odd notion called the <a class="indexterm" name="ch11-idx-948304-0"></A
><em class="emphasis">currently selected filehandle</EM
>.</P
><p class="para">The currently selected filehandle starts out as <code class="literal">STDOUT</CODE
>, which makes it easy to print things on the standard output. However, you can change the currently selected filehandle with the <a class="indexterm" name="ch11-idx-948303-0"></A
><code class="literal">select</CODE
> function. This function takes a single filehandle (or a scalar variable containing the name of a filehandle) as an argument. Once the currently selected filehandle is changed, it affects all future operations that depend on the currently selected filehandle. For example:</P
><pre class="programlisting">print &quot;hello world\n&quot;;       # like print STDOUT &quot;hello world\n&quot;;
select (LOGFILE);            # select a new filehandle
print &quot;howdy, world\n&quot;;      # like print LOGFILE &quot;howdy, world\n&quot;;
print &quot;more for the log\n&quot;;  # more for LOGFILE
select (STDOUT);             # re-select STDOUT
print &quot;back to stdout\n&quot;;    # this goes to standard output</PRE
><p class="para">Note that the <code class="literal">select</CODE
> operation is sticky; once you've selected a new handle, it stays in effect until the next <code class="literal">select</CODE
>.</P
><p class="para">So, a better definition for <code class="literal">STDOUT</CODE
> with respect to <code class="literal">print</CODE
> and <code class="literal">write</CODE
> is that <code class="literal">STDOUT</CODE
> is the default currently selected handle, or the <em class="emphasis">default</EM
> handle.</P
><p class="para">Subroutines may find a need to change the currently selected filehandle. However, it would be shocking to call a subroutine and then find out that all of your carefully crafted text lines were going into some bit bucket because the subroutine changed the currently selected filehandle without restoring it. So what's a well-behaved subroutine to do? If the subroutine knows that the current handle is <code class="literal">STDOUT</CODE
>, the subroutine can restore the selected handle with code similar to that above. However, what if the caller of the subroutine had already changed the selected filehandle?</P
><p class="para">Well it turns out that the <a class="indexterm" name="ch11-idx-948305-0"></A
><a class="indexterm" name="ch11-idx-948305-1"></A
>return value from <code class="literal">select</CODE
> is a string containing the name of the previously selected handle. You can capture this value to restore the previously selected filehandle later, using code like this:</P
><pre class="programlisting">$oldhandle = select LOGFILE;
print &quot;this goes to LOGFILE\n&quot;;
select ($oldhandle); # restore the previous handle</PRE
><p class="para">Yes, for these examples, it's much easier simply to put <code class="literal">LOGFILE</CODE
> explicitly as the filehandle for the <code class="literal">print</CODE
>, but there are some operations that require the currently selected filehandle to change, as we will soon see.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch11-pgfId-948466">11.6.2 Changing the Format Name</A
></H3
><p class="para">The <a class="indexterm" name="ch11-idx-948306-0"></A
>default format name for a particular filehandle is the same as the filehandle. However, you can change this for the currently selected filehandle by setting the new format name to a special variable called <a class="indexterm" name="ch11-idx-948307-0"></A
><code class="literal">$~</CODE
>. You can also examine the value of the variable to see what the current format is for the currently selected filehandle.</P
><p class="para">For example, to use the <code class="literal">ADDRESSLABEL</CODE
> format on <code class="literal">STDOUT</CODE
>, it's as easy as:</P
><pre class="programlisting">$~ = &quot;ADDRESSLABEL&quot;;</PRE
><p class="para">But what if you want to set the format for the <code class="literal">REPORT</CODE
> filehandle to <code class="literal">SUMMARY</CODE
>? Just a few steps to do it here:</P
><pre class="programlisting">$oldhandle = select REPORT;
$~ = &quot;SUMMARY&quot;;
select ($oldhandle);</PRE
><p class="para">The next time we say</P
><pre class="programlisting">write (REPORT);</PRE
><p class="para">we get text out on the <code class="literal">REPORT</CODE
> filehandle but using the <code class="literal">SUMMARY</CODE
> format.[<a class="footnote" href="#ch11-pgfId-948837">5</A
>]</P
><blockquote class="footnote"><div class="footnote"><p class="para"><a class="footnote" name="ch11-pgfId-948837">[5]</A
> The object-oriented FileHandle module, part of the Perl standard distribution, provides a simpler way to accomplish the same thing.</P
></DIV
></BLOCKQUOTE
><p class="para">Note that we saved the previous handle into a scalar variable and then restored it later. This is good programming practice. In fact, in production code we probably would have handled the previous one-line example similarly and not assumed that <code class="literal">STDOUT</CODE
> was the default handle.</P
><p class="para">By setting the current format for a particular filehandle, you can interleave many different formats in a single report.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch11-pgfId-948467">11.6.3 Changing the Top-of-Page Format Name</A
></H3
><p class="para"><a class="indexterm" name="ch11-idx-948309-0"></A
><a class="indexterm" name="ch11-idx-948309-1"></A
>Just as we can change the name of the format for a particular filehandle by setting the <code class="literal">$~</CODE
> variable, we can change the top-of-page format by setting the <a class="indexterm" name="ch11-idx-948308-0"></A
><code class="literal">$^</CODE
> variable. This variable holds the name of the top-of-page format for the currently selected filehandle and is read/write, meaning that you can examine its value to see the current format name, and you can change it by assigning to it.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch11-pgfId-948468">11.6.4 Changing the Page Length</A
></H3
><p class="para">If a top-of-page format is defined, the <a class="indexterm" name="ch11-idx-948310-0"></A
>page length becomes important. By default, the page length is 60 lines; that is, when a <code class="literal">write</CODE
> won't fit by the end of line 60, the top-of-page format is invoked automatically before printing the text.</P
><p class="para">Sometimes 60 lines isn't right. You can change this by setting the <code class="literal">$=</CODE
> variable. This variable holds the current page length for the currently selected filehandle. Once again, to change it for a filehandle other than <code class="literal">STDOUT</CODE
> (the default currently selected filehandle), you'll need to use the <code class="literal">select()</CODE
> operator. Here's how to change the <code class="literal">LOGFILE</CODE
> filehandle to have 30-line pages:</P
><pre class="programlisting">$old = select LOGFILE; # select LOGFILE and save old handle
$= = 30;
select $old;</PRE
><p class="para">Changing the page length won't have any effect until the next time the top-of-page format is invoked. If you set it before any text is output to a filehandle through a format, it'll work just fine because the top-of-page format is invoked immediately at the first <code class="literal">write</CODE
>.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch11-pgfId-948469">11.6.5 Changing the Position on the Page</A
></H3
><p class="para"><a class="indexterm" name="ch11-idx-948313-0"></A
>If you <code class="literal">print</CODE
> your own text to a filehandle, it messes up the page-position line count because Perl isn't counting lines for anything but a <code class="literal">write</CODE
>. If you want to let Perl know that you've output a few extra lines, you can adjust Perl's internal line count by altering the <a class="indexterm" name="ch11-idx-948312-0"></A
><code class="literal">$-</CODE
> variable. This variable contains the number of lines left on the current page on the currently selected filehandle. Each <code class="literal">write</CODE
> decrements the lines remaining by the lines actually output. When this count reaches zero, the top-of-page format is invoked, and the value of <a class="indexterm" name="ch11-idx-948315-0"></A
><code class="literal">$-</CODE
> is then copied from <a class="indexterm" name="ch11-idx-948314-0"></A
><code class="literal">$=</CODE
> (the page length).</P
><p class="para">For example, to tell Perl that you've sent an extra line to <code class="literal">STDOUT</CODE
>, do something like this:</P
><pre class="programlisting">write; # invoke STDOUT format on STDOUT
...;
print &quot;An extra line... oops!\n&quot;; # this goes to STDOUT
$- --; # decrement $- to indicate non-write line went to STDOUT
...;
write; # this will still work, taking extra line into account</PRE
><p class="para">At the beginning of the program, <code class="literal">$-</CODE
> is set to zero for each filehandle. This ensures that the top-of-page format will be the first thing invoked for each filehandle upon the first <code class="literal">write</CODE
>.</P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch11_05.htm" title="11.5 The Top-of-Page Format"><img src="../gifs/txtpreva.gif" alt="Previous: 11.5 The Top-of-Page Format" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Learning Perl"><img src="../gifs/txthome.gif" alt="Learning Perl" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch11_07.htm" title="11.7 Exercises"><img src="../gifs/txtnexta.gif" alt="Next: 11.7 Exercises" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">11.5 The Top-of-Page Format</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">11.7 Exercises</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
