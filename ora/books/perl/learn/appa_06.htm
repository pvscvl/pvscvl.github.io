<html><head>
<title>[Appendix A] A.6 Chapter 7, Regular Expressions</TITLE>
<meta name="DC.title" content="Learning Perl"><meta name="DC.creator" content="Randal Schwartz, Tom Christiansen &amp; Larry Wall"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:36:51Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-284-0" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="appa_01.htm" title="A. Exercise Answers"><link rel="prev" href="appa_05.htm" title="A.5 Chapter 6, Basic I/O"><link rel="next" href="appa_07.htm" title="A.7 Chapter 8, Functions"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Learning Perl" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,54" href="index.htm" alt="Learning Perl"><area shape="RECT" coords="467,0,514,18" href="../search/lsrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="appa_05.htm" title="A.5 Chapter 6, Basic I/O"><img src="../gifs/txtpreva.gif" alt="Previous: A.5 Chapter 6, Basic I/O" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="appendix" rel="up" href="appa_01.htm" title="A. Exercise Answers">Appendix A<br>Exercise Answers</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="appa_07.htm" title="A.7 Chapter 8, Functions"><img src="../gifs/txtnexta.gif" alt="Next: A.7 Chapter 8, Functions" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="appa-23983">A.6 Chapter 7, Regular Expressions</A
></H2
><ol class="orderedlist"><li class="listitem"><p class="para"><a class="listitem" name="appa-pgfId-179370"></A
>Here are some possible answers:</P
><ol class="orderedlist" type="a"><li class="listitem"><p class="para"><a class="listitem" name="appa-pgfId-178963"></A
><code class="literal">/a+b*/</CODE
> </P
></LI
><li class="listitem"><p class="para"><a class="listitem" name="appa-pgfId-179374"></A
><code class="literal">/\\*\**/</CODE
> (Remember that the backslash cancels the meaning of the special character following.)</P
></LI
><li class="listitem"><p class="para"><a class="listitem" name="appa-pgfId-180828"></A
><code class="literal">/($whatever){3}/</CODE
> (You must have the parentheses, or else the multiplier applies only to the last character of <code class="literal">$whatever</CODE
>; this also fails if <code class="literal">$whatever</CODE
> has special characters.)</P
></LI
><li class="listitem"><p class="para"><a class="listitem" name="appa-pgfId-180829"></A
><code class="literal">/[\000-\377]{5}/</CODE
> or <code class="literal">/(.|\n){5}/</CODE
> (You can't use dot alone here, because dot doesn't match newline.)</P
></LI
><li class="listitem"><p class="para"><a class="listitem" name="appa-pgfId-179377"></A
><code class="literal">/(^|\s)(\S+)(\s+\2)+(\s|$)/</CODE
> (<code class="literal">\S</CODE
> is nonwhitespace, and <code class="literal">\2</CODE
> is a reference to whatever the "word" is; the caret or whitespace alternative ensures that the <code class="literal">\S+</CODE
> begins at a whitespace boundary.)</P
></LI
></OL
></LI
><li class="listitem"><ol class="orderedlist" type="a"><li class="listitem"><p class="para">One way to do this is:</P
><pre class="programlisting">while (&lt;STDIN&gt;) {
    if (/a/i &amp;&amp; /e/i &amp;&amp; /i/i &amp;&amp; /o/i &amp;&amp; /u/i) {
        print;
    }
}</PRE
><p class="para">Here, we have an expression consisting of five match operators. These operators are all looking at the contents of the <code class="literal">$_</CODE
> variable, which is where the control expression of the <code class="literal">while</CODE
> loop is putting each line. The match operator expression will be true only when all five vowels are found.</P
><p class="para">Note that as soon as any of the five vowels are not found, the remainder of the expression is skipped, because the <code class="literal">&amp;&amp;</CODE
> operator doesn't evaluate its right argument if the left argument is false.</P
></LI
><li class="listitem"><p class="para"><a class="listitem" name="appa-pgfId-179378"></A
>Another way to do this is:</P
><pre class="programlisting">while (&lt;STDIN&gt;) {
    if (/a.*e.*i.*o.*u/i) {
        print;
    }
}</PRE
><p class="para">This answer turns out to be easier than the other part of this exercise. Here we have a simple regular expression that looks for the five vowels in sequence, separated by any number of characters.</P
></LI
><li class="listitem"><p class="para"><a class="listitem" name="appa-pgfId-181103"></A
>One way to do this is:</P
><pre class="programlisting">while (&lt;&gt;) {
    print if
        (/^[^aeiou]*a[^eiou]*e[^aiou]*i[^aeou]*o[^aeiu]*u[^aeio]*$ );
    }</PRE
><p class="para">Ugly, but it works. To construct this, just think "What can go between the beginning of the line, and the first a?," and then "What can go between the first a and the first e?" Eventually, it all works itself out, with a little assistance from you.</P
></LI
></OL
></LI
><li class="listitem"><p class="para"><a class="listitem" name="appa-pgfId-180844"></A
>One way to do this is:</P
><pre class="programlisting"><a class="indexterm" name="appa-idx-180845-0"></A
>while (&lt;STDIN&gt;) {
    chomp;
    ($user, $gcos) = (split /:/)[0,4];
    ($real) = split(/,/, $gcos);
    print &quot;$user is $real\n&quot;;
}</PRE
><p class="para">The outer <code class="literal">while</CODE
> loop reads one line at a time from the password-format file into the <code class="literal">$_</CODE
> variable, terminating when there are no more lines to be read.</P
><p class="para">The second line of the <code class="literal">while</CODE
> loop body breaks the line apart by colons, saving two of the seven values into individual scalar variables with hopefully meaningful names.</P
><p class="para">The <a class="indexterm" name="appa-idx-178722-0"></A
>GCOS field (the fifth field) is then split apart by commas, with the resulting list assigned to a single scalar variable enclosed in parentheses. The parentheses are important: they make this assignment an array assignment rather than a scalar assignment. The scalar variable <code class="literal">$real</CODE
> gets the first element of the list, and the remaining elements are discarded.</P
><p class="para">The <code class="literal">print</CODE
> statement then displays the results.</P
></LI
><li class="listitem"><p class="para"><a class="listitem" name="appa-pgfId-178982"></A
>One way to do this is:</P
><pre class="programlisting">while (&lt;STDIN&gt;) {
    chomp;
    ($gcos) = (split /:/)[4];
    ($real) = split(/,/, $gcos);
    ($first) = split(/\s+/, $real);
    $seen{$first}++;
}
foreach (keys %seen) {
    if ($seen{$_} &gt; 1) {
        print &quot;$_ was seen $seen{$_} times\n&quot;;
    }
}</PRE
><p class="para">The <code class="literal">while</CODE
> loop works a lot like the <code class="literal">while</CODE
> loop from the previous exercise. In addition to splitting the line apart into fields and the GCOS field apart into the real name (and other parts), this loop also splits apart the real name into a first name (and the rest). Once the first name is known, a hash element in <code class="literal">%seen</CODE
> is incremented, noting that we've seen a particular first name. Note that this loop doesn't do any <code class="literal">print</CODE
>'ing.</P
><p class="para">The <code class="literal">foreach</CODE
> loop steps through all of the keys of <code class="literal">%seen</CODE
> (the first names from the password file), assigning each one to <code class="literal">$_</CODE
> in turn. If the value stored in <code class="literal">%seen</CODE
> at a given key is greater than 1, we've seen the first name more than once. The <code class="literal">if</CODE
> statement tests for this, and prints a message if so.</P
></LI
><li class="listitem"><p class="para"><a class="listitem" name="appa-pgfId-178994"></A
>One way to do this is:</P
><pre class="programlisting">while (&lt;STDIN&gt;) {
    chomp;
    ($user, $gcos) = (split /:/)[0,4];
    ($real) = split /,/, $gcos;
    ($first) = split /\s+/, $real;
    $names{$first} .= &quot; $user&quot;;
}
foreach (keys %names) {
    $this = $names{$_};
    if ($this =~ /. /) {
        print &quot;$_ is used by:$this\n&quot;;
    }
}</PRE
><p class="para">This program is like the previous exercise answer, but instead of merely keeping a count, we append the login name of the user to the <code class="literal">%names</CODE
> element that has a key of the first name. Thus, for Fred Rogers (login <code class="literal">mrrogers</CODE
>), <code class="literal">$names{&quot;Fred&quot;}</CODE
> becomes <code class="literal">&quot;</CODE
> <code class="literal">mrrogers&quot;</CODE
>, and when Fred Flintstone (login <code class="literal">fred</CODE
>) comes along, we get <code class="literal">$names{&quot;Fred&quot;}</CODE
> as <code class="literal">&quot;</CODE
> <code class="literal">mrrogers</CODE
> <code class="literal">fred&quot;</CODE
>. After the loop is complete, we have a mapping of all of the first names to all of the users that have them.</P
><p class="para">The <code class="literal">foreach</CODE
> loop, like the previous exercise answer, then steps through the resulting hash. However, rather than testing a hash element value for a number greater than one, we must see now if there is more than one login name in the value. We do this by saving the value into a scalar variable <code class="literal">$this</CODE
> and then seeing if the value has a space after any character. If so, the first name is shared, and the resulting message tells which logins share that first name.</P
></LI
></OL
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="appa_05.htm" title="A.5 Chapter 6, Basic I/O"><img src="../gifs/txtpreva.gif" alt="Previous: A.5 Chapter 6, Basic I/O" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Learning Perl"><img src="../gifs/txthome.gif" alt="Learning Perl" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="appa_07.htm" title="A.7 Chapter 8, Functions"><img src="../gifs/txtnexta.gif" alt="Next: A.7 Chapter 8, Functions" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">A.5 Chapter 6, Basic I/O</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">A.7 Chapter 8, Functions</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
