<html><head>
<title>[Chapter 13] File and Directory Manipulation</TITLE>
<meta name="DC.title" content="Learning Perl"><meta name="DC.creator" content="Randal Schwartz, Tom Christiansen &amp; Larry Wall"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:34:41Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-284-0" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="index.htm" title="Learning Perl"><link rel="prev" href="ch12_06.htm" title="12.6 Exercises"><link rel="next" href="ch13_02.htm" title="13.2 Renaming a File"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Learning Perl" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,54" href="index.htm" alt="Learning Perl"><area shape="RECT" coords="467,0,514,18" href="../search/lsrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch12_06.htm" title="12.6 Exercises"><img src="../gifs/txtpreva.gif" alt="Previous: 12.6 Exercises" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 13</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch13_02.htm" title="13.2 Renaming a File"><img src="../gifs/txtnexta.gif" alt="Next: 13.2 Renaming a File" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="chapter"><h1 class="chapter"><a class="title" name="ch13-29814">13. File and Directory Manipulation</A
></H1
><div class="htmltoc"><p><b>Contents:</B
><br><a class="sect1" href="#ch13-26411" title="13.1 Removing a File">Removing a File</A
><br><a class="sect1" href="ch13_02.htm" title="13.2 Renaming a File">Renaming a File</A
><br><a class="sect1" href="ch13_03.htm" title="13.3 Creating Alternate Names for a File: Linking">Creating Alternate Names for a File: Linking</A
><br><a class="sect1" href="ch13_04.htm" title="13.4 Making and Removing Directories">Making and Removing Directories</A
><br><a class="sect1" href="ch13_05.htm" title="13.5 Modifying Permissions">Modifying Permissions</A
><br><a class="sect1" href="ch13_06.htm" title="13.6 Modifying Ownership">Modifying Ownership</A
><br><a class="sect1" href="ch13_07.htm" title="13.7 Modifying Timestamps">Modifying Timestamps</A
><br><a class="sect1" href="ch13_08.htm" title="13.8 Exercises">Exercises</A
></P
><p></P
></DIV
><p class="para">This chapter shows you how to manipulate the files themselves, not merely the data contained in them. We'll use the UNIX (and POSIX and Linux) semantics for demonstrating access to files and directories. Not all filesystems access mechanisms, but these are the standard ones for reasonably support-rich filesystem models.</P
><div class="sect1"><h2 class="sect1"><a class="title" name="ch13-26411">13.1 Removing a File</A
></H2
><p class="para"><a class="indexterm" name="ch13-idx-350-0"></A
><a class="indexterm" name="ch13-idx-350-1"></A
>Earlier, you learned how to create a file from within Perl by opening it for output with a filehandle. Now, we'll get dangerous and learn how to remove a file (very appropriate for <a class="xref" href="ch13_01.htm" title="File and Directory Manipulation">Chapter 13, <cite class="chapter">File and Directory Manipulation</CITE
></A
>, don't you think?).</P
><p class="para">The Perl <a class="indexterm" name="ch13-idx-352-0"></A
><code class="literal">unlink</CODE
> function (named for the POSIX system call) deletes one name for a file (which could possibly have other names). When the last name for a file is deleted, and no processes have it open, the file itself is removed. This is exactly what the UNIX <a class="indexterm" name="ch13-idx-354-0"></A
><em class="emphasis">rm</EM
> command does. Because a file typically has just one name (unless you've created hard links), for the most part, you can think of removing a name as removing the file. Given that, here's how to remove a file called <em class="emphasis">fred</EM
> and then remove a file specified during program execution:</P
><pre class="programlisting">unlink (&quot;fred&quot;); # say goodbye to fred
print &quot;what file do you want to delete? &quot;;
chomp($name = &lt;STDIN&gt;);
unlink ($name);</PRE
><p class="para">The <code class="literal">unlink</CODE
> function can take a list of names to be unlinked as well:</P
><pre class="programlisting">unlink (&quot;cowbird&quot;,&quot;starling&quot;); # kill two birds
unlink &lt;*.o&gt;;                  # just like &quot;rm *.o&quot; in the shell</PRE
><p class="para">The <a class="indexterm" name="ch13-idx-363-0"></A
>glob is evaluated in a list context, creating a list of filenames that match the pattern. This is exactly what we need to feed <code class="literal">unlink</CODE
>.</P
><p class="para">The return value of <code class="literal">unlink</CODE
> is the number of files successfully deleted. If there's one argument, and it is deleted, the result is one, otherwise it is zero. If there are three filenames but only two could be deleted, the result is two. You can't tell which two, so if you need to figure out which deletion failed, you must do them one at a time. Here's how to delete all of the object files (ending in <code class="literal">.o</CODE
>) while reporting an error for any file that cannot be deleted:</P
><pre class="programlisting">foreach $file (&lt;*.o&gt;) { # step through a list of .o files
    unlink($file) || warn &quot;having trouble deleting $file: $!&quot;;
}</PRE
><p class="para">If the <code class="literal">unlink</CODE
> returns <code class="literal">1</CODE
> (meaning the one file specified was indeed deleted), the true result skips the <code class="literal">warn</CODE
> function. If the filename cannot be deleted, the <code class="literal">0</CODE
> result is false, so the <code class="literal">warn</CODE
> is executed. Once again, this can be read abstractly as "unlink this file or tell me about it."</P
><p class="para">If the <code class="literal">unlink</CODE
> function is given no arguments, the <code class="literal">$_</CODE
> variable is once again used as a default. Thus, we could have written the loop above as:</P
><pre class="programlisting">foreach (&lt;*.o&gt;) { # step through a list of .o files
    unlink || warn &quot;having trouble deleting $_: $!&quot;;
}</PRE
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch12_06.htm" title="12.6 Exercises"><img src="../gifs/txtpreva.gif" alt="Previous: 12.6 Exercises" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Learning Perl"><img src="../gifs/txthome.gif" alt="Learning Perl" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch13_02.htm" title="13.2 Renaming a File"><img src="../gifs/txtnexta.gif" alt="Next: 13.2 Renaming a File" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">12.6 Exercises</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">13.2 Renaming a File</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
