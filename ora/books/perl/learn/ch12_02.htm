<html><head>
<title>[Chapter 12] 12.2 Globbing</TITLE>
<meta name="DC.title" content="Learning Perl"><meta name="DC.creator" content="Randal Schwartz, Tom Christiansen &amp; Larry Wall"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:34:37Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-284-0" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch12_01.htm" title="12. Directory Access"><link rel="prev" href="ch12_01.htm" title="12.1 Moving Around the Directory Tree"><link rel="next" href="ch12_03.htm" title="12.3 Directory Handles"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Learning Perl" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,54" href="index.htm" alt="Learning Perl"><area shape="RECT" coords="467,0,514,18" href="../search/lsrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch12_01.htm" title="12.1 Moving Around the Directory Tree"><img src="../gifs/txtpreva.gif" alt="Previous: 12.1 Moving Around the Directory Tree" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch12_01.htm" title="12. Directory Access">Chapter 12<br>Directory Access</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch12_03.htm" title="12.3 Directory Handles"><img src="../gifs/txtnexta.gif" alt="Next: 12.3 Directory Handles" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch12-34003">12.2 Globbing</A
></H2
><p class="para"><a class="indexterm" name="ch12-idx-871079-0"></A
>The shell (or whatever your command-line interpreter is) takes a solitary asterisk (<code class="literal">*</CODE
>) command-line argument and turns it into a list of all of the filenames in the current directory. So, when you say <code class="literal">rm</CODE
> <code class="literal">*</CODE
>, you'll remove all of the files from the current directory. (Don't try this unless you like irritating your system administrator when you request the files to be restored.) Similarly, <code class="literal">[a-m]*.c</CODE
> as a command-line argument turns into a list of all filenames in the current directory that begin with a letter in the first half of the alphabet and end in <em class="emphasis">.c</EM
>, and <code class="literal">/etc/host*</CODE
> is a list of all filenames that begin with <em class="emphasis">host</EM
> in the directory <em class="emphasis">/etc</EM
>. (If this is new to you, you probably want to read some more about shell scripting somewhere else before proceeding.)</P
><p class="para">The expansion of arguments like <code class="literal">*</CODE
> or <code class="literal">/etc/host*</CODE
> into the list of matching filenames is called <em class="emphasis">globbing</EM
>. Perl supports globbing through a very simple mechanism: just put the globbing pattern between <a class="indexterm" name="ch12-idx-871080-0"></A
>angle brackets or use the more mnemonically named <code class="literal">glob</CODE
> function.</P
><pre class="programlisting">@a = &lt;/etc/host*&gt;;
@a = glob(&quot;/etc/host*&quot;);</PRE
><p class="para">In a list context, as demonstrated here, the glob returns a list of all names that match the pattern (as if the shell had expanded the glob arguments) or an empty list if none match. In a scalar context, the next name that matches is returned, or <a class="indexterm" name="ch12-idx-871092-0"></A
><code class="literal">undef</CODE
> is returned if there are no more matches; this is very similar to reading from a filehandle. For example, to look at one name at a time:</P
><pre class="programlisting">while (defined($nextname = &lt;/etc/host*&gt;)) {
    print &quot;one of the files is $nextname\n&quot;;
}</PRE
><p class="para">Here the returned filenames begin with <em class="emphasis">/etc/host</EM
>, so if you want just the last part of the name, you'll have to whittle it down yourself, like so:</P
><pre class="programlisting">while ($nextname = &lt;/etc/host*&gt;) {
    $nextname =~ <a class="indexterm" name="ch12-idx-871097-0"></A
>s#.*/##; # remove part before last slash
    print &quot;one of the files is $nextname\n&quot;;
}</PRE
><p class="para">Multiple patterns are permitted inside the file glob argument; the lists are constructed separately and then concatenated as if they were one big list:</P
><pre class="programlisting">@fred_barney_files = &lt;fred* barney*&gt;;</PRE
><p class="para">In other words, the glob returns the same values that an equivalent <a class="indexterm" name="ch12-idx-871081-0"></A
><em class="emphasis">echo </EM
>command with the same parameters would return.[<a class="footnote" href="#ch12-pgfId-871127">3</A
>]</P
><blockquote class="footnote"><div class="footnote"><p class="para"><a class="footnote" name="ch12-pgfId-871127">[3]</A
>  This is actually no surprise when you understand that to perform the glob, Perl merely fires off a <a class="indexterm" name="ch12-idx-871086-0"></A
>C-shell to glob the specified arglist and parses what it gets back.</P
></DIV
></BLOCKQUOTE
><p class="para">Although <a class="indexterm" name="ch12-idx-871082-0"></A
><a class="indexterm" name="ch12-idx-871082-1"></A
>file globbing and regular-expression matching function similarly, the meaning of the various special characters is quite different. Don't confuse the two, or you'll be wondering why <code class="literal">&lt;\.c$&gt;</CODE
> doesn't find all of the files that end in <em class="emphasis">.c </EM
>!</P
><p class="para">The argument to <code class="literal">glob</CODE
> is <a class="indexterm" name="ch12-idx-871083-0"></A
><a class="indexterm" name="ch12-idx-871083-1"></A
>variable interpolated before expansion. You can use Perl variables to select files based on a string computed at run-time:</P
><pre class="programlisting">if (-d &quot;/usr/etc&quot;) {
    $where = &quot;/usr/etc&quot;;
} else {
    $where = &quot;/etc&quot;;
}
@files = &lt;$where/*&gt;;</PRE
><p class="para">Here we set <code class="literal">$where</CODE
> to be one of two different directory names, based on whether or not the directory <em class="emphasis">/usr/etc</EM
> exists. We then get a list of files in the selected directory. Note that the <code class="literal">$where</CODE
> variable is expanded, which means the wildcard to be globbed is either <code class="literal">/etc/*</CODE
> or <code class="literal">/usr/etc/*</CODE
>.</P
><p class="para">There's one exception to this rule: the pattern <code class="literal">&lt;$var&gt;</CODE
> (meaning to use the variable <code class="literal">$var</CODE
> as the entire glob expression) must be written as <code class="literal">&lt;${var}&gt;</CODE
> for reasons we'd rather not get into at this point.[<a class="footnote" href="#ch12-pgfId-871199">4</A
>]</P
><blockquote class="footnote"><div class="footnote"><p class="para"><a class="footnote" name="ch12-pgfId-871199">[4]</A
> The construct <code class="literal">&lt;$fred&gt;</CODE
> reads a line from the filehandle named by the contents of the scalar variable <code class="literal">$fred</CODE
>. Together with some other features not covered in this book, this construct enables you to use "<a class="indexterm" name="ch12-idx-871085-0"></A
><a class="indexterm" name="ch12-idx-871085-1"></A
>indirect filehandles" where the name of a handle is passed around and manipulated as if it were data.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch12_01.htm" title="12.1 Moving Around the Directory Tree"><img src="../gifs/txtpreva.gif" alt="Previous: 12.1 Moving Around the Directory Tree" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Learning Perl"><img src="../gifs/txthome.gif" alt="Learning Perl" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch12_03.htm" title="12.3 Directory Handles"><img src="../gifs/txtnexta.gif" alt="Next: 12.3 Directory Handles" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">12.1 Moving Around the Directory Tree</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">12.3 Directory Handles</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
