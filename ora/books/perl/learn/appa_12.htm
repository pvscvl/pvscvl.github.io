<html><head>
<title>[Appendix A] A.12 Chapter 13, File and Directory Manipulation</TITLE>
<meta name="DC.title" content="Learning Perl"><meta name="DC.creator" content="Randal Schwartz, Tom Christiansen &amp; Larry Wall"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:37:01Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-284-0" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="appa_01.htm" title="A. Exercise Answers"><link rel="prev" href="appa_11.htm" title="A.11 Chapter 12, Directory Access"><link rel="next" href="appa_13.htm" title="A.13 Chapter 14, Process Management"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Learning Perl" usemap="#srchmap" border="0"></H1
><map name="srchmap"index.html><area shape="RECT" coords="0,0,466,54" href="index.htm" alt="Learning Perl"><area shape="RECT" coords="467,0,514,18" href="../search/lsrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="appa_11.htm" title="A.11 Chapter 12, Directory Access"><img src="../gifs/txtpreva.gif" alt="Previous: A.11 Chapter 12, Directory Access" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="appendix" rel="up" href="appa_01.htm" title="A. Exercise Answers">Appendix A<br>Exercise Answers</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="appa_13.htm" title="A.13 Chapter 14, Process Management"><img src="../gifs/txtnexta.gif" alt="Next: A.13 Chapter 14, Process Management" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="appa-33171">A.12 Chapter 13, File and Directory Manipulation</A
></H2
><ol class="orderedlist"><li class="listitem"><p class="para"><a class="listitem" name="appa-pgfId-178936"></A
>Here's one way to do it:</P
><pre class="programlisting"><a class="indexterm" name="appa-idx-178742-0"></A
>unlink @ARGV;</PRE
><p class="para">Yup, that's it. The <code class="literal">@ARGV</CODE
> array is a list of names to be removed. The <code class="literal">unlink</CODE
> operator takes a list of names, so we just marry the two, and we're done.</P
><p class="para">Of course, this doesn't handle error reporting, or the <code class="literal">-f</CODE
> or <code class="literal">-i</CODE
> options, or anything like that, but that'd just be gravy. If you did that, good!</P
></LI
><li class="listitem"><p class="para"><a class="listitem" name="appa-pgfId-178938"></A
>Here's one way to do it:</P
><pre class="programlisting">($old, $new) = @ARGV; # name them
if (-d $new) { # new name is a directory, need to patch it up
    ($basename = $old) =~ <a class="indexterm" name="appa-idx-178743-0"></A
><a class="indexterm" name="appa-idx-178743-1"></A
>s#.*/##s; # get basename of $old
    $new .= &quot;/$basename&quot;; # and append it to new name
}
<a class="indexterm" name="appa-idx-178744-0"></A
>rename($old,$new) || die &quot;Cannot rename $old to $new: $!&quot;;</PRE
><p class="para">The workhorse in this program is the last line, but the remainder of the program is necessary for the case where the name we are renaming to is a directory.</P
><p class="para">First, we give understandable names to the two elements of <code class="literal">@ARGV</CODE
>. Then, if the <code class="literal">$new</CODE
> name is a directory, we need to patch it by adding the basename of the <code class="literal">$old</CODE
> name to the end of the new name. This means that renaming <em class="emphasis">/usr/src/fred</EM
> to<em class="emphasis"> /etc</EM
> results in really renaming <em class="emphasis">/usr/src/fred</EM
> to <em class="emphasis">/etc/fred</EM
>.</P
><p class="para">Finally, once the basename is patched up, we're home free, with a <code class="literal">rename</CODE
> invocation.</P
></LI
><li class="listitem"><p class="para"><a class="listitem" name="appa-pgfId-179404"></A
>Here's one way to do it:</P
><pre class="programlisting">($old, $new) = @ARGV; # name them
if (-d $new) { # new name is a directory, need to patch it up
    ($basename = $old) =~ <a class="indexterm" name="appa-idx-1509-0"></A
><a class="indexterm" name="appa-idx-1509-1"></A
>s#.*/##s; # get basename of $old
    $new .= &quot;/$basename&quot;; # and append it to new name
}
link($old,$new) || die &quot;Cannot link $old to $new: $!&quot;;</PRE
><p class="para">This program is identical to the previous program except for the very last line, because we're linking, not renaming.</P
></LI
><li class="listitem"><p class="para"><a class="listitem" name="appa-pgfId-178940"></A
>Here's one way to do it:</P
><pre class="programlisting">if ($ARGV[0] eq &quot;-s&quot;) { # wants a symlink
    $symlink++; # remember that
    <a class="indexterm" name="appa-idx-178748-0"></A
>shift(@ARGV); # and toss the -s flag
}
($old, $new) = @ARGV; # name them
if (-d $new) { # new name is a directory, need to patch it up
    ($basename = $old) =~ <a class="indexterm" name="appa-idx-1523-0"></A
><a class="indexterm" name="appa-idx-1523-1"></A
>s#.*/##s; # get basename of $old
    $new .= &quot;/$basename&quot;; # and append it to new name
}
if ($symlink) { # wants a symlink
    <a class="indexterm" name="appa-idx-178745-0"></A
>symlink($old,$new);
} else { # wants a hard link
    <a class="indexterm" name="appa-idx-178746-0"></A
>link($old,$new);
}</PRE
><p class="para">The middle of this program is the same as the previous two exercises. What's new is the first few lines and the last few lines.</P
><p class="para">The first few lines look at the first argument to the program. If this argument is <code class="literal">-s</CODE
>, the scalar variable <code class="literal">$symlink</CODE
> is incremented, resulting in a value of <code class="literal">1</CODE
> for the variable. The <a class="indexterm" name="appa-idx-178747-0"></A
><code class="literal">@ARGV</CODE
> array is then shifted, removing the <code class="literal">-s</CODE
> flag. If the <code class="literal">-s</CODE
> flag isn't present, there's nothing to be done, and <code class="literal">$symlink</CODE
> will remain <code class="literal">undef</CODE
>. Shifting the <code class="literal">@ARGV</CODE
> array occurs frequently enough that the <code class="literal">@ARGV</CODE
> array is the <a class="indexterm" name="appa-idx-178749-0"></A
>default argument for <code class="literal">shift</CODE
>; that is, we could have said:</P
><pre class="programlisting">  shift;</PRE
><p class="para">in place of</P
><pre class="programlisting">  shift(@ARGV);</PRE
><p class="para">The last few lines look at the value of <code class="literal">$symlink</CODE
>. It's going to be either <code class="literal">1</CODE
> or <code class="literal">undef</CODE
>, and based on that, we either <code class="literal">symlink</CODE
> the files or <code class="literal">link</CODE
> them.</P
></LI
><li class="listitem"><p class="para"><a class="listitem" name="appa-pgfId-179138"></A
>Here's one way to do it:</P
><pre class="programlisting">foreach $f (&lt;*&gt;) {
    print &quot;$f -&gt; $where\n&quot; if defined($where = <a class="indexterm" name="appa-idx-178751-0"></A
>readlink($f));
}</PRE
><p class="para">The scalar variable <code class="literal">$f</CODE
> is set in turn to each of the filenames in the current directory. For each name, <code class="literal">$where</CODE
> gets set to the <code class="literal">readlink()</CODE
> of that name. If the name is not a symlink, the <code class="literal">readlink</CODE
> operator returns <code class="literal">undef</CODE
>, yielding a false value for the <code class="literal">if</CODE
> test, and the <code class="literal">print</CODE
> is skipped. But when the <code class="literal">readlink</CODE
> operator returns a value, the <code class="literal">print</CODE
> displays the source and destination symlink values.</P
></LI
></OL
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="appa_11.htm" title="A.11 Chapter 12, Directory Access"><img src="../gifs/txtpreva.gif" alt="Previous: A.11 Chapter 12, Directory Access" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Learning Perl"><img src="../gifs/txthome.gif" alt="Learning Perl" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="appa_13.htm" title="A.13 Chapter 14, Process Management"><img src="../gifs/txtnexta.gif" alt="Next: A.13 Chapter 14, Process Management" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">A.11 Chapter 12, Directory Access</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">A.13 Chapter 14, Process Management</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
