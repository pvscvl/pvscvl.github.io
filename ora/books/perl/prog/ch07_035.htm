<html><head>
<title>[Chapter 7] 7.2.35 Getopt::Long&nbsp;- Extended Processing of Command-Line Options</TITLE>
<meta name="DC.title" content="Programming Perl"><meta name="DC.creator" content="Larry Wall, Tom Christiansen &amp; Randal L. Schwartz"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T02:02:36Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-149-6" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch07_02.htm" title="7.2 Library Modules"><link rel="prev" href="ch07_034.htm#AUTOID-22731" title="7.2.34 GDBM_File&nbsp;- Tied Access to GDBM Library"><link rel="next" href="ch07_036.htm#AUTOID-23074" title="7.2.36 Getopt::Std&nbsp;- Process Single-Character Options with Option Clustering"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Programming Perl" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Programming Perl"><area shape="RECT" coords="467,0,514,18" href="../search/psrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT2" href="ch07_034.htm#AUTOID-22731" title="7.2.34 GDBM_File&nbsp;- Tied Access to GDBM Library"><img src="../gifs/txtpreva.gif" alt="Previous: 7.2.34 GDBM_File&nbsp;- Tied Access to GDBM Library" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch07_01.htm" title="7. The Standard Perl Library">Chapter 7<br>The Standard Perl Library</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT2" href="ch07_036.htm#AUTOID-23074" title="7.2.36 Getopt::Std&nbsp;- Process Single-Character Options with Option Clustering"><img src="../gifs/txtnexta.gif" alt="Next: 7.2.36 Getopt::Std&nbsp;- Process Single-Character Options with Option Clustering" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT2"><h3 class="sect2"><a class="title" name="AUTOID-22751">7.2.35 Getopt::Long&nbsp;- Extended Processing of Command-Line Options</A
></H3
><pre class="programlisting">use Getopt::Long;
$result = GetOptions(<code class="replaceable"><i>option-descriptions</I
></CODE
>);</PRE
><p class="para"><a class="indexterm" name="CH07.LONG1"></A
><a class="indexterm" name="CH07.LONG2"></A
><a class="indexterm" name="CH07.LONG3"></A
><a class="indexterm" name="CH07.LONG4"></A
>The Getopt::Long module implements an extended function called
<code class="literal">GetOptions()</CODE
>.  This function retrieves and processes the
command-line options with which your Perl program was invoked, based on the
description of valid options that you provide.</P
><p class="para"><code class="literal">GetOptions()</CODE
> adheres to the POSIX syntax for command-line
options, with GNU extensions.  In general, this means that options have long
names instead of single letters, and are introduced with a double hyphen
<code class="literal">--</CODE
>.  (A single hyphen can also be used,
but implies restrictions on functionality.  See later in the chapter.)  There is
no bundling of command-line options, as was the case with the more traditional
single-letter approach.  For example, the UNIX
<em class="emphasis">ps</EM
>(1) command can be given the command-line
argument:</P
><pre class="programlisting">-vax</PRE
><p class="para">which means the combination of <code class="literal">-v</CODE
>, <code class="literal">-a</CODE
> and <code class="literal">-x</CODE
>.
With the Getopt::Long syntax, <code class="literal">-vax</CODE
> would be a single option.</P
><p class="para">Command-line options can be used to set values.  These values can be
specified in one of two ways:</P
><pre class="programlisting">--size 24
--size=24</PRE
><p class="para"><code class="literal">GetOptions()</CODE
> is called with a list of option descriptions, each of which
consists of two elements:  the option specifier and the option linkage.
The option specifier defines the name of the option and, optionally,
the value it can take.  The option linkage is usually a reference to a
variable that will be set when the option is used.  For example, the
following call to <code class="literal">GetOptions()</CODE
>:</P
><pre class="programlisting">&amp;GetOptions(&quot;size=i&quot; =&gt; \$offset);</PRE
><p class="para">will accept a command-line option &quot;<code class="literal">size</CODE
>&quot; that must have an
integer value.  With a command line of <code class="literal">--size
24</CODE
> this will cause the variable <code class="literal">$offset</CODE
> to be
assigned the value 24.</P
><p class="para">Alternatively, the first argument to GetOptions may be a reference to
a hash describing the linkage for the options.  The following call is
equivalent to the example above:</P
><pre class="programlisting">%optctl = (size =&gt; \$offset);
&amp;GetOptions(\%optctl, &quot;size=i&quot;);</PRE
><p class="para">Linkage may be specified using either of the above methods, or both.
The linkage specified in the argument list takes precedence over the
linkage specified in the hash.</P
><p class="para"><a class="indexterm" name="AUTOID-22789"></A
>The command-line options are implicitly taken from array <code class="literal">@ARGV</CODE
>.  Upon completion
of <code class="literal">GetOptions()</CODE
>, <code class="literal">@ARGV</CODE
> will contain only the command-line
arguments that were not options.  (But see below for a way to process
non-option arguments.)  Each option specifier handed to
<code class="literal">GetOptions()</CODE
> designates the name of an option, possibly
followed by an argument specifier.  Values for argument specifiers are:</P
><dl class="variablelist"><dt class="term"><code class="literal">&lt;none&gt;</CODE
></DT
><dd class="listitem"><p class="para">Option does not take an argument.  If the user invokes the option,
the option variable will be set to 1.</P
></DD
><dt class="term"><code class="literal">!   </CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-22806"></A
>Option does not take an argument and may be negated, that is, prefixed by
&quot;<code class="literal">no</CODE
>&quot;.  For example, <code class="literal">foo!</CODE
> will allow <code class="literal">--foo</CODE
> (with value 1
being assigned to the option variable) and
<code class="literal">-nofoo</CODE
>
(with value 0).</P
></DD
><dt class="term"><code class="literal">=s   </CODE
></DT
><dd class="listitem"><p class="para">Option takes a mandatory string argument.
This string will be assigned to the option variable.
Even if the string argument starts with <code class="literal">-</CODE
> or <code class="literal">--</CODE
>, it
will be assigned to the option variable rather than taken as a separate
option.</P
></DD
><dt class="term"><code class="literal">:s   </CODE
></DT
><dd class="listitem"><p class="para">Option takes an optional string argument.
This string will be assigned to the option variable.  If the string is
omitted from the command invocation, <code class="literal">&quot;&quot;</CODE
> (an empty string) will be
assigned to the option variable.
If the string argument starts with <code class="literal">-</CODE
> or <code class="literal">--</CODE
>, it
will be taken as another option rather than assigned to the option variable.</P
></DD
><dt class="term"><code class="literal">=i   </CODE
></DT
><dd class="listitem"><p class="para">Option takes a mandatory integer argument.
This value will be assigned to the option variable.
Note that the value may start with <code class="literal">-</CODE
> to indicate a negative
value.</P
></DD
><dt class="term"><code class="literal">:i   </CODE
></DT
><dd class="listitem"><p class="para">Option takes an optional integer argument.
This integer value will be assigned to the option variable.
If the optional argument is omitted, the value 0 will be assigned to the
option variable.  The value may start with <code class="literal">-</CODE
> to indicate a negative
value.</P
></DD
><dt class="term"><code class="literal">=f   </CODE
></DT
><dd class="listitem"><p class="para">Option takes a mandatory floating-point argument.
This value will be assigned to the option variable.
Note that the value may start with <code class="literal">-</CODE
> to indicate a negative
value.</P
></DD
><dt class="term"><code class="literal">:f   </CODE
></DT
><dd class="listitem"><p class="para">Option takes an optional floating-point argument.
This value will be assigned to the option variable.
If the optional argument is omitted, the value 0 will be assigned to the
option variable.
The value may start with <code class="literal">-</CODE
> to indicate a negative value.</P
></DD
></DL
><p class="para">A lone hyphen <code class="literal">-</CODE
> is considered an option; the corresponding option
name is the empty string.</P
><p class="para">A lone double hyphen <code class="literal">--</CODE
> terminates the
processing of options and arguments.  Any options following the double hyphen
will remain in <code class="literal">@ARGV</CODE
> when <code class="literal">GetOptions()</CODE
>
returns.</P
><p class="para">If an argument specifier concludes with <code class="literal">@</CODE
> (as in <code class="literal">=s@</CODE
>),
then the option is treated as an array.  That is, multiple invocations of
the same option, each with a particular value, will result in the list of
values being assigned to the option variable, which is an array.  See the
following section for an example.</P
><div class="sect3"><h4 class="sect3"><a class="title" name="PERL2-CH-7-SECT-1.41">7.2.35.1 Linkage specification</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-22864"></A
>The linkage specifier is optional.  If no linkage is explicitly
specified but a hash reference is passed, <code class="literal">GetOptions()</CODE
>
will place the value in the hash.  For example:</P
><pre class="programlisting">%optctl = ();
&amp;GetOptions (\%optctl, &quot;size=i&quot;);</PRE
><p class="para">will perform the equivalent of the assignment:</P
><pre class="programlisting">$optctl{&quot;size&quot;} = 24;</PRE
><p class="para">For array options, a reference to an anonymous array is generated.  For example:</P
><pre class="programlisting">%optctl = ();
&amp;GetOptions (\%optctl, &quot;sizes=i@&quot;);</PRE
><p class="para">with command-line arguments:</P
><pre class="programlisting">-sizes 24 -sizes 48</PRE
><p class="para">will perform the equivalent of the assignment:</P
><pre class="programlisting">$optctl{&quot;sizes&quot;} = [24, 48];</PRE
><p class="para">If no linkage is explicitly specified and no hash reference is passed,
<code class="literal">GetOptions()</CODE
> will put the value in a global variable named
after the option, prefixed by <code class="literal">opt_</CODE
>.  To yield a usable Perl
variable, characters that are not part of the syntax for variables are
translated to underscores.  For example,
<code class="literal">--fpp-struct-return</CODE
> will set the variable
<code class="literal">$opt_fpp_struct_return</CODE
>.  (Note that this variable resides in
the namespace of the calling program, not necessarily main.)  For example:</P
><pre class="programlisting">&amp;GetOptions (&quot;size=i&quot;, &quot;sizes=i@&quot;);</PRE
><p class="para">with command line:</P
><pre class="programlisting">-size 10 -sizes 24 -sizes 48</PRE
><p class="para">will perform the
equivalent of the assignments:</P
><pre class="programlisting">$opt_size = 10;
@opt_sizes = (24, 48);</PRE
><p class="para">A lone hyphen (<code class="literal">-</CODE
>) is considered an option; the corresponding
identifier is <code class="literal">$opt_</CODE
> .</P
><p class="para">The linkage specifier can be a reference to a scalar, a reference to
an array, or a reference to a subroutine:</P
><ul class="itemizedlist"><li class="listitem"><p class="para">If a scalar reference is supplied, the new value is stored in the referenced
variable.  If the option occurs more than once, the previous value is
overwritten.</P
></LI
><li class="listitem"><p class="para">If an array reference is supplied, the new value is appended (pushed) to the
referenced array.</P
></LI
><li class="listitem"><p class="para">If a code reference is supplied, the referenced subroutine is called with
two arguments: the option name and the option value.
The option name is always the true name, not an abbreviation or alias.</P
></LI
></UL
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PERL2-CH-7-SECT-1.42">7.2.35.2 Aliases and abbreviations</A
></H4
><p class="para">The option specifier may actually include a &quot;<code class="literal">|</CODE
>&quot;-separated list of option names:<a class="indexterm" name="AUTOID-22902"></A
><a class="indexterm" name="AUTOID-22905"></A
><a class="indexterm" name="AUTOID-22908"></A
></P
><pre class="programlisting">foo|bar|blech=s</PRE
><p class="para">In this example, <code class="literal">foo</CODE
> is the true name of the option.  If no
linkage is specified, options <code class="literal">-foo</CODE
>, <code class="literal">-bar</CODE
> and
<code class="literal">-blech</CODE
> all will set <code class="literal">$opt_foo</CODE
>.</P
><p class="para">Options may be invoked as unique abbreviations, depending on
configuration variable <code class="literal">$Getopt::Long::autoabbrev</CODE
>.</P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PERL2-CH-7-SECT-1.43">7.2.35.3 Non-option callback routine</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-22923"></A
>A special option specifier <code class="literal">&lt;&gt;</CODE
> can be used to designate a subroutine
to handle non-option arguments.  For example:</P
><pre class="programlisting">&amp;GetOptions(...&quot;&lt;&gt;&quot;, \&amp;mysub...);</PRE
><p class="para">In this case <code class="literal">GetOptions()</CODE
> will immediately call
<code class="literal">&amp;mysub</CODE
> for every non-option it encounters in the options
list.  This subroutine gets the name of the non-option passed.  This feature
requires <code class="literal">$Getopt::Long::order</CODE
> to have the value of the
predefined and exported variable, <code class="literal">$PERMUTE</CODE
>.  See also the
examples.</P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PERL2-CH-7-SECT-1.44">7.2.35.4 Option starters</A
></H4
><p class="para">On the command line, options can start with <code class="literal">-</CODE
> (traditional),
<code class="literal">--</CODE
> (POSIX), and <code class="literal">+</CODE
> (GNU,
now being phased out).  The latter is not allowed if the environment variable
<code class="literal">POSIXLY_CORRECT</CODE
> has been defined.</P
><p class="para">Options that start with <code class="literal">--</CODE
> may have an
argument appended, following an equals sign (<code class="literal">=</CODE
>). For
example: <code class="literal">--foo=bar</CODE
>.</P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PERL2-CH-7-SECT-1.45">7.2.35.5 Return value</A
></H4
><p class="para">A return status of <code class="literal">0</CODE
> (false) indicates that the function detected
one or more errors.</P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PERL2-CH-7-SECT-1.46">7.2.35.6 Configuration variables</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-22951"></A
><a class="indexterm" name="AUTOID-22954"></A
>The following variables can be set to change the default behavior of
<code class="literal">GetOptions()</CODE
>:</P
><dl class="variablelist"><dt class="term"><code class="literal">$Getopt::Long::autoabbrev</CODE
></DT
><dd class="listitem"><p class="para">If true, then allow option names to be invoked with unique abbreviations.
Default is <code class="literal">1</CODE
> unless environment variable
<code class="literal">POSIXLY_CORRECT</CODE
> has been set.</P
></DD
><dt class="term"><code class="literal">$Getopt::Long::getopt_compat</CODE
></DT
><dd class="listitem"><p class="para">If true, then allow &quot;<code class="literal">+</CODE
>&quot; to start options.
Default is 1 unless environment variable
<code class="literal">POSIXLY_CORRECT</CODE
> has been set.</P
></DD
><dt class="term"><code class="literal">$Getopt::Long::order</CODE
></DT
><dd class="listitem"><p class="para">If set to <code class="literal">$PERMUTE</CODE
>, then non-options are allowed to be mixed with
options on the command line.  If set to <code class="literal">$REQUIRE_ORDER</CODE
>, then
mixing is not allowed.  Default is <code class="literal">$REQUIRE_ORDER</CODE
> if environment
variable <code class="literal">POSIXLY_CORRECT</CODE
> has been set, <code class="literal">$PERMUTE</CODE
> otherwise.
Both <code class="literal">$PERMUTE</CODE
> and <code class="literal">$REQUIRE_ORDER</CODE
> are defined in the library
module and automatically exported.

<code class="literal">$PERMUTE</CODE
> means that:</P
><pre class="programlisting">-foo arg1 -bar arg2 arg3</PRE
><p class="para">is equivalent to:</P
><pre class="programlisting">-foo -bar arg1 arg2 arg3</PRE
><p class="para">If a non-option callback routine is specified, <code class="literal">@ARGV</CODE
> will always be
empty upon successful return of <code class="literal">GetOptions()</CODE
> since all options have been
processed, except when <code class="literal">--</CODE
> is used.  So, for example:</P
><pre class="programlisting">-foo arg1 -bar arg2 -- arg3</PRE
><p class="para">will call the callback routine for <code class="literal">arg1</CODE
> and
<code class="literal">arg2</CODE
>, and then terminate, leaving <code class="literal">arg3</CODE
> in
<code class="literal">@ARGV</CODE
>.  If <code class="literal">$Getopt::Long::order</CODE
> is
<code class="literal">$REQUIRE_ORDER</CODE
>, option processing terminates when the first
non-option is encountered.</P
><pre class="programlisting">-foo arg1 -bar arg2 arg3</PRE
><p class="para">is equivalent to:</P
><pre class="programlisting">-foo -- arg1 -bar arg2 arg3</PRE
></DD
><dt class="term"><code class="literal">$Getopt::Long::ignorecase</CODE
></DT
><dd class="listitem"><p class="para">If true, then ignore case when matching options.  Default is <code class="literal">1</CODE
>.</P
></DD
><dt class="term"><code class="literal">$Getopt::Long::VERSION</CODE
></DT
><dd class="listitem"><p class="para">The version number of this Getopt::Long implementation is in the format
<code class="literal">major.minor</CODE
>. This can be used to have Exporter check the
version. Example:</P
><pre class="programlisting">use Getopt::Long 2.00;</PRE
><p class="para"><code class="literal">$Getopt::Long::major_version</CODE
> and
<code class="literal">$Getopt::Long::minor_version</CODE
> may be inspected for the
individual components.</P
></DD
><dt class="term"><code class="literal">$Getopt::Long::error</CODE
></DT
><dd class="listitem"><p class="para">Internal error flag.  May be incremented from a callback routine to
cause options parsing to fail.</P
></DD
><dt class="term"><code class="literal">$Getopt::Long::debug</CODE
></DT
><dd class="listitem"><p class="para">Enable copious debugging output.  Default is <code class="literal">0</CODE
>.</P
></DD
></DL
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PERL2-CH-7-SECT-1.47">7.2.35.7 Examples</A
></H4
><p class="para">If the option specifier is <code class="literal">one:i</CODE
> (which takes an optional integer
argument), then the following situations are handled:</P
><pre class="programlisting">-one -two            # $opt_one = &quot;&quot;, -two is next option
-one -2              # $opt_one = -2</PRE
><p class="para">Also, assume specifiers <code class="literal">foo=s</CODE
> and <code class="literal">bar:s</CODE
>:</P
><pre class="programlisting">-bar -xxx            # $opt_bar = &quot;&quot;, -xxx is next option
-foo -bar            # $opt_foo = '-bar'
-foo --              # $opt_foo = '--'</PRE
><p class="para">In GNU or POSIX format, option names and values can be combined:</P
><pre class="programlisting">+foo=blech           # $opt_foo = 'blech'
--bar=               # $opt_bar = &quot;&quot;
--bar=--             # $opt_bar = '--'</PRE
><p class="para">Example using variable references:</P
><pre class="programlisting">$ret = &amp;GetOptions ('foo=s', \$foo, 'bar=i', 'ar=s', \@ar);</PRE
><p class="para">With command-line options <code class="literal">-foo blech -bar 24 -ar xx -ar yy</CODE
>
this will result in:</P
><pre class="programlisting">$opt_foo = 'blech'
$opt_bar = 24
@ar = ('xx', 'yy')</PRE
><p class="para">Example of using the <code class="literal">&lt;&gt;</CODE
> option specifier:</P
><pre class="programlisting">@ARGV = qw(-foo 1 bar -foo 2 blech);
&amp;GetOptions(&quot;foo=i&quot;, \$myfoo, &quot;&lt;&gt;&quot;, \&amp;mysub);</PRE
><p class="para">Results:</P
><pre class="programlisting">&amp;mysub(&quot;bar&quot;) <em class="emphasis">will be called (with</EM
> $myfoo <em class="emphasis">being</EM
> 1<em class="emphasis">)</EM
>
&amp;mysub(&quot;blech&quot;) <em class="emphasis">will be called (with</EM
> $myfoo <em class="emphasis">being</EM
> 2<em class="emphasis">)</EM
></PRE
><p class="para">Compare this with:</P
><pre class="programlisting">@ARGV = qw(-foo 1 bar -foo 2 blech);
&amp;GetOptions(&quot;foo=i&quot;, \$myfoo);</PRE
><p class="para">This will leave the non-options in <code class="literal">@ARGV:</CODE
></P
><pre class="programlisting">$myfoo <em class="emphasis">becomes</EM
> 2
@ARGV  <em class="emphasis">becomes</EM
> qw(bar blech)</PRE
><p class="para">If you're using the <code class="literal">use strict</CODE
> pragma, which requires you to employ
only lexical variables or else globals that are fully declared, you 
will have to use the double-colon package delimiter or else the 
<code class="literal">use vars</CODE
> pragma.  For example:</P
><pre class="programlisting">use strict;
use vars qw($opt_rows $opt_cols);
use Getopt::Long;</PRE
><a class="indexterm" name="AUTOID-23070"></A
><a class="indexterm" name="AUTOID-23071"></A
><a class="indexterm" name="AUTOID-23072"></A
><a class="indexterm" name="AUTOID-23073"></A
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT2" href="ch07_034.htm#AUTOID-22731" title="7.2.34 GDBM_File&nbsp;- Tied Access to GDBM Library"><img src="../gifs/txtpreva.gif" alt="Previous: 7.2.34 GDBM_File&nbsp;- Tied Access to GDBM Library" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Programming Perl"><img src="../gifs/txthome.gif" alt="Programming Perl" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT2" href="ch07_036.htm#AUTOID-23074" title="7.2.36 Getopt::Std&nbsp;- Process Single-Character Options with Option Clustering"><img src="../gifs/txtnexta.gif" alt="Next: 7.2.36 Getopt::Std&nbsp;- Process Single-Character Options with Option Clustering" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">7.2.34 GDBM_File&nbsp;- Tied Access to GDBM Library</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">7.2.36 Getopt::Std&nbsp;- Process Single-Character Options with Option Clustering</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
