<html><head>
<title>[Chapter 2] 2.9 Special Variables</TITLE>
<meta name="DC.title" content="Programming Perl"><meta name="DC.creator" content="Larry Wall, Tom Christiansen &amp; Randal L. Schwartz"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:46:26Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-149-6" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch02_01.htm" title="2. The Gory Details"><link rel="prev" href="ch02_08.htm#PERL2-CH-2-SECT-8.1" title="2.8 Formats"><link rel="next" href="ch03_01.htm" title="3. Functions"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Programming Perl" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Programming Perl"><area shape="RECT" coords="467,0,514,18" href="../search/psrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch02_08.htm#PERL2-CH-2-SECT-8.1" title="2.8 Formats"><img src="../gifs/txtpreva.gif" alt="Previous: 2.8 Formats" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch02_01.htm" title="2. The Gory Details">Chapter 2<br>The Gory Details</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="CHAPTER" href="ch03_01.htm" title="3. Functions"><img src="../gifs/txtnexta.gif" alt="Next: 3. Functions" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="PERL2-CH-2-SECT-9">2.9 Special Variables</A
></H2
><p class="para"><a class="indexterm" name="CH02.SPECIAL1"></A
><a class="indexterm" name="CH02.SPECIAL2"></A
>The following names have special meaning to Perl.  Most of the
punctuational names have reasonable mnemonics, or analogs in one of
the shells.  Nevertheless, if you wish to use the long variable names,
just say:</P
><p class="para"><pre class="programlisting">use English;</PRE
></P
><p class="para">at the top of your program.  This will alias all the short names to the long names in the current package.  Some of them even have medium names,
generally borrowed from <em class="emphasis">awk</EM
>(1).</P
><p class="para">A few of these variables are considered read-only.  This means that if
you try to assign to this variable, either directly, or indirectly through
a reference, you'll raise a run-time exception.</P
><div class="sect2"><h3 class="sect2"><a class="title" name="PERL2-CH-2-SECT-9.1">2.9.1 Regular Expression Special Variables</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-7452"></A
><a class="indexterm" name="AUTOID-7455"></A
>There are several variables that are associated with regular expressions
and pattern matching.  Except for <b class="emphasis.bold">$*</B
> they are always local to the
current block, so you never need to mention them in a <a class="xref" href="ch03_087.htm#PERL2-CMD-LOCAL" title="local"><b class="xref.cmd">local</B
></A
>.  (And
<b class="emphasis.bold">$*</B
> is deprecated, so you never need to mention it at all.)</P
><dl class="variablelist"><dt class="term"><code class="literal">$</CODE
><code class="replaceable"><i>digit</I
></CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-7468"></A
>Contains the text matched by the corresponding set of parentheses in
the last pattern matched, not counting patterns matched in nested
blocks that have been exited already.  (Mnemonic: like <code class="literal">\</CODE
><code class="replaceable"><i>digit</I
></CODE
>.)
These variables are all read-only.</P
></DD
><dt class="term"><code class="literal">$&amp;</CODE
></DT
><dt class="term"><code class="literal">$MATCH</CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-7479"></A
>The string matched by the last successful pattern match, not counting any
matches hidden within a block or <a class="xref" href="ch03_032.htm#PERL2-CMD-EVAL" title="eval"><b class="xref.cmd">eval</B
></A
> enclosed by the
current block.  (Mnemonic: like <code class="literal">&amp;</CODE
> in some editors.)  This
variable is read-only. </P
></DD
><dt class="term"><code class="literal">$`</CODE
></DT
><dt class="term"><code class="literal">$PREMATCH</CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-7491"></A
>The string preceding whatever was matched by the last successful pattern
match not counting any matches hidden within a block or <a class="xref" href="ch03_032.htm#PERL2-CMD-EVAL" title="eval"><b class="xref.cmd">eval</B
></A
>
enclosed by the current block.  (Mnemonic: <code class="literal">`</CODE
> often precedes a
quoted string.)  This variable is read-only. </P
></DD
><dt class="term"><code class="literal">$'</CODE
></DT
><dt class="term"><code class="literal">$POSTMATCH</CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-7503"></A
>The string following whatever was matched by the last successful pattern
match not counting any matches hidden within a block or <a class="xref" href="ch03_032.htm#PERL2-CMD-EVAL" title="eval"><b class="xref.cmd">eval</B
></A
>
enclosed by the current block.
(Mnemonic: <code class="literal">'</CODE
> often follows a quoted
string.)  Example:</P
><p class="para"><pre class="programlisting">$_ = 'abcdefghi';
/def/;
print &quot;$`:$&amp;:$'\n&quot;;         # prints abc:def:ghi</PRE
></P
><p class="para">This variable is read-only.</P
></DD
><dt class="term"><code class="literal">$+</CODE
></DT
><dt class="term"><code class="literal">$LAST_PAREN_MATCH</CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-7518"></A
>The last bracket matched by the last search pattern.  This is useful if you
don't know which of a set of alternative patterns matched.  For example:</P
><p class="para"><pre class="programlisting">/Version: (.*)|Revision: (.*)/ &amp;&amp; ($rev = $+);</PRE
></P
><p class="para">(Mnemonic: be positive and forward looking.)  This variable is read-only.</P
></DD
><dt class="term"><code class="literal">$*</CODE
></DT
><dt class="term"><code class="literal">$MULTILINE_MATCHING</CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-7531"></A
><a class="indexterm" name="AUTOID-7534"></A
>Use of <b class="emphasis.bold">$*</B
> is now deprecated, and is allowed only for maintaining backwards
compatibility with older versions of Perl.  Use <b class="emphasis.bold">/m</B
> (and maybe <b class="emphasis.bold">/s</B
>)
in the regular expression match instead.</P
><p class="para">Set to 1 to do multi-line matching within a string, 0 to tell Perl that it
can assume that strings contain a single line for the purpose of
optimizing pattern matches.  Pattern matches on strings containing multiple
newlines can produce confusing results when <b class="emphasis.bold">$*</B
> is 0.  Default is 0.
(Mnemonic: <code class="literal">*</CODE
> matches multiple things.) Note that this variable only
influences the interpretation of <code class="literal">^</CODE
> and <code class="literal">$</CODE
>.  A literal
newline can be searched for even when <code class="literal">$* == 0</CODE
>.</P
></DD
></DL
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PERL2-CH-2-SECT-9.2">2.9.2 Per-Filehandle Special Variables</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-7549"></A
><a class="indexterm" name="AUTOID-7552"></A
>These variables never need to be mentioned in a <a class="xref" href="ch03_087.htm#PERL2-CMD-LOCAL" title="local"><b class="xref.cmd">local</B
></A
> 
because they always refer to some value
pertaining to the currently selected output filehandle&nbsp;- each
filehandle keeps its own set of values.  When you <b class="emphasis.bold">select</B
> another filehandle, the old filehandle
keeps whatever values it had in effect, and the variables now reflect
the values of the new filehandle.</P
><p class="para">To go a step further and avoid <b class="emphasis.bold">select</B
>
entirely, these variables that depend on the currently selected
filehandle may instead be set by calling an object method on the
FileHandle object.  (Summary lines below for this contain the word
<code class="replaceable"><i>HANDLE</I
></CODE
>.)  First you must say:</P
><p class="para"><pre class="programlisting">use FileHandle;</PRE
></P
><p class="para">after which you may use either:</P
><p class="para"><pre class="programlisting"><code class="replaceable"><i>method</I
></CODE
> <code class="replaceable"><i>HANDLE</I
></CODE
> <code class="replaceable"><i>EXPR</I
></CODE
></PRE
></P
><p class="para">or:</P
><p class="para"><pre class="programlisting"><code class="replaceable"><i>HANDLE</I
></CODE
>-&gt;<code class="replaceable"><i>method</I
></CODE
>(<code class="replaceable"><i>EXPR</I
></CODE
>)</PRE
></P
><p class="para">Each of the methods returns the old value of the FileHandle attribute.
The methods each take an optional <code class="replaceable"><i>EXPR</I
></CODE
>, which if supplied specifies the
new value for the FileHandle attribute in question.  If not supplied,
most of the methods do nothing to the current value, except for
<code class="literal">autoflush</CODE
>, which will assume a <code class="literal">1</CODE
> for you, just to be different.</P
><dl class="variablelist"><dt class="term"><code class="literal">$|</CODE
></DT
><dt class="term"><code class="literal">$OUTPUT_AUTOFLUSH</CODE
></DT
><dt class="term"><code class="literal">autoflush</CODE
> <code class="replaceable"><i>HANDLE EXPR</I
></CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-7589"></A
><a class="indexterm" name="AUTOID-7592"></A
>If set to nonzero, forces an <em class="emphasis">fflush</EM
>(3) after every <b class="emphasis.bold">write</B
> or
<b class="emphasis.bold">print</B
> on the currently selected output channel.  (This is called
&quot;command buffering&quot;.  Contrary to popular belief, setting this variable
does not turn off buffering.)  Default is 0, which on many systems
means that <code class="literal">STDOUT</CODE
> will default to being line buffered if output is to
the terminal, and block buffered otherwise.  Setting this variable is
useful primarily when you are outputting to a pipe, such as when you are
running a Perl script under <em class="emphasis">rsh</EM
> and want to see the output as it's
happening.  This has no effect on input buffering.  If you have a need to
flush a buffer immediately after setting <b class="emphasis.bold">$|</B
>,
you may simply <code class="literal">print &quot;&quot;;</CODE
> rather than waiting for the
next <b class="emphasis.bold">print</B
> to flush it.  (Mnemonic: when you
want your pipes to be piping hot.)</P
></DD
><dt class="term"><code class="literal">$%</CODE
></DT
><dt class="term"><code class="literal">$FORMAT_PAGE_NUMBER</CODE
></DT
><dt class="term"><code class="literal">format_page_number</CODE
> <code class="replaceable"><i>HANDLE EXPR</I
></CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-7613"></A
><a class="indexterm" name="AUTOID-7615"></A
><a class="indexterm" name="AUTOID-7617"></A
><a class="indexterm" name="AUTOID-7619"></A
><a class="indexterm" name="AUTOID-7622"></A
>The current page number of the currently selected output channel.
(Mnemonic: <code class="literal">%</CODE
> is page number in <em class="emphasis">nroff</EM
>.) </P
></DD
><dt class="term"><code class="literal">$=</CODE
></DT
><dt class="term"><code class="literal">$FORMAT_LINES_PER_PAGE</CODE
></DT
><dt class="term"><code class="literal">format_lines_per_page</CODE
> <code class="replaceable"><i>HANDLE EXPR</I
></CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-7637"></A
>The current page length (printable lines) of the currently selected output
channel.  Default is 60.  (Mnemonic: <code class="literal">=</CODE
> has horizontal lines.) </P
></DD
><dt class="term"><code class="literal">$-</CODE
></DT
><dt class="term"><code class="literal">$FORMAT_LINES_LEFT</CODE
></DT
><dt class="term"><code class="literal">format_lines_left</CODE
> <code class="replaceable"><i>HANDLE EXPR</I
></CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-7651"></A
>The number of lines left on the page of the currently selected output
channel.  (Mnemonic: <code class="literal">lines_on_page - lines_printed</CODE
>.) </P
></DD
><dt class="term"><code class="literal">$~</CODE
></DT
><dt class="term"><code class="literal">$FORMAT_NAME</CODE
></DT
><dt class="term"><code class="literal">format_name</CODE
> <code class="replaceable"><i>HANDLE EXPR</I
></CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-7665"></A
>The name of the current report format for the currently selected output
channel.  Default is name of the filehandle.  (Mnemonic: takes a turn after
<b class="emphasis.bold">$^</B
>.) </P
></DD
><dt class="term"><code class="literal">$^</CODE
></DT
><dt class="term"><code class="literal">$FORMAT_TOP_NAME</CODE
></DT
><dt class="term"><code class="literal">format_top_name</CODE
> <code class="replaceable"><i>HANDLE EXPR</I
></CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-7679"></A
><a class="indexterm" name="AUTOID-7682"></A
><a class="indexterm" name="AUTOID-7684"></A
>The name of the current top-of-page format for the currently selected
output channel.  Default is name of the filehandle with <code class="literal">_TOP</CODE
> appended.
(Mnemonic: points to top of page.)</P
></DD
></DL
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PERL2-CH-2-SECT-9.3">2.9.3 Global Special Variables</A
></H3
><p class="para"><a class="indexterm" name="CH02.GLOBAL1"></A
><a class="indexterm" name="CH02.GLOBAL2"></A
>There are quite a few variables that are global in the fullest
sense&nbsp;- they mean the same thing in every package.  If you want a
private copy of one of these, you must localize it in the current
block.</P
><dl class="variablelist"><dt class="term"><code class="literal">$_</CODE
></DT
><dt class="term"><code class="literal">$ARG</CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-7705"></A
>The default input and pattern-searching space. These pairs are
equivalent:</P
><p class="para"><pre class="programlisting">while (&lt;&gt;) {...}    # only equivalent in while!
while (defined($_ = &lt;&gt;)) {...}

/^Subject:/
$_ =~ /^Subject:/

tr/a-z/A-Z/
$_ =~ tr/a-z/A-Z/

chop
chop($_)</PRE
></P
><p class="para">Here are the places where Perl will assume <b class="emphasis.bold">$_</B
> even if you don't use
it: </P
><ul class="itemizedlist"><li class="listitem"><p class="para">Various unary functions, including functions like <a class="xref" href="ch03_104.htm#PERL2-CMD-ORD" title="ord"><b class="xref.cmd">ord</B
></A
> and
<a class="xref" href="ch03_076.htm#PERL2-CMD-INT" title="int"><b class="xref.cmd">int</B
></A
>, as well as all the file tests (<code class="literal">-f</CODE
>, <code class="literal">-d</CODE
>) except for
<code class="literal">-t</CODE
>, which defaults to <code class="literal">STDIN</CODE
>.</P
></LI
><li class="listitem"><p class="para">Various list functions like <a class="xref" href="ch03_110.htm#PERL2-CMD-PRINT" title="print"><b class="xref.cmd">print</B
></A
> and <a class="xref" href="ch03_181.htm#PERL2-CMD-UNLINK" title="unlink"><b class="xref.cmd">unlink</B
></A
>.</P
></LI
><li class="listitem"><p class="para">The pattern-matching operations <code class="literal">m//</CODE
>, <code class="literal">s///</CODE
>, and <code class="literal">tr///</CODE
>
when used without an <code class="literal">=~</CODE
> operator.</P
></LI
><li class="listitem"><p class="para">The default iterator variable in a <b class="emphasis.bold">foreach</B
> loop if no other
variable is supplied. </P
></LI
><li class="listitem"><p class="para">The implicit iterator variable in the <a class="xref" href="ch03_072.htm#PERL2-CMD-GREP" title="grep"><b class="xref.cmd">grep</B
></A
> and <a class="xref" href="ch03_091.htm#PERL2-CMD-MAP" title="map"><b class="xref.cmd">map</B
></A
>
functions.</P
></LI
><li class="listitem"><p class="para">The default place to put an input record when a <code class="literal">&lt;FH&gt;</CODE
> operation's
result is tested by itself as the sole criterion of a <b class="emphasis.bold">while</B
> test.
Note that outside of a <b class="emphasis.bold">while</B
> test, this
will not happen. </P
></LI
></UL
><p class="para">Mnemonic: underline is the underlying operand in certain operations.</P
></DD
><dt class="term"><code class="literal">$.</CODE
></DT
><dt class="term"><code class="literal">$INPUT_LINE_NUMBER</CODE
></DT
><dt class="term"><code class="literal">$NR</CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-7753"></A
>The current input line number of the last filehandle that was read.  An
explicit close on the filehandle resets the line number.  Since <code class="literal">&lt;&gt;</CODE
>
never does an explicit close, line numbers increase across
<b class="emphasis.bold">ARGV</B
> files (but see examples under <a class="xref" href="ch03_031.htm#PERL2-CMD-EOF" title="eof"><b class="xref.cmd">eof</B
></A
> in <a class="xref" href="ch03_01.htm" title="Functions">Chapter 3</A
>).  Localizing
<b class="emphasis.bold">$.</B
> has the effect of also localizing Perl's notion of the last read
filehandle.  (Mnemonic: many programs use &quot;.&quot; to mean the current line
number.)</P
></DD
><dt class="term"><code class="literal">$/</CODE
></DT
><dt class="term"><code class="literal">$INPUT_RECORD_SEPARATOR</CODE
></DT
><dt class="term"><code class="literal">$RS</CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-7770"></A
><a class="indexterm" name="AUTOID-7773"></A
>The input record separator, newline by default.  It works like <em class="emphasis">awk</EM
>'s
<code class="literal">RS</CODE
> variable, and, if set to the null string, treats blank lines as
delimiters.  You may set it to a multi-character string to match a
multi-character delimiter.  Note that setting it to <code class="literal">&quot;\n\n&quot;</CODE
> means
something slightly different than setting it to <code class="literal">&quot;&quot;</CODE
>, if the file
contains consecutive blank lines.  Setting it to <code class="literal">&quot;&quot;</CODE
> will treat two or
more consecutive blank lines as a single blank line.  Setting it to
<code class="literal">&quot;\n\n&quot;</CODE
> means Perl will blindly assume that the next input character belongs to
the next paragraph, even if it's a third newline.  (Mnemonic: <code class="literal">/</CODE
> is used to
delimit line boundaries when quoting poetry.)</P
><p class="para"><pre class="programlisting">undef $/;
$_ = &lt;FH&gt;;          # whole file now here
s/\n[ \t]+/ /g;</PRE
></P
></DD
><dt class="term"><code class="literal">$,</CODE
></DT
><dt class="term"><code class="literal">$OUTPUT_FIELD_SEPARATOR</CODE
></DT
><dt class="term"><code class="literal">$OFS</CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-7793"></A
><a class="indexterm" name="AUTOID-7797"></A
><a class="indexterm" name="AUTOID-7801"></A
><a class="indexterm" name="AUTOID-7805"></A
><a class="indexterm" name="AUTOID-7809"></A
><a class="indexterm" name="AUTOID-7813"></A
>The output field separator for the <b class="emphasis.bold">print</B
> operator.  Ordinarily the <b class="emphasis.bold">print</B
>
operator simply prints out the comma separated fields you specify.  In
order to get behavior more like <em class="emphasis">awk</EM
>, set this variable as you would
set <em class="emphasis">awk</EM
>'s <code class="literal">OFS</CODE
> variable to specify what is printed between
fields.  (Mnemonic: what is printed when there is a &quot;<code class="literal">,</CODE
>&quot; in your <b class="emphasis.bold">print</B
>
statement.)</P
></DD
><dt class="term"><code class="literal">$\</CODE
></DT
><dt class="term"><code class="literal">$OUTPUT_RECORD_SEPARATOR</CODE
></DT
><dt class="term"><code class="literal">$ORS</CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-7832"></A
>The output record separator for the <b class="emphasis.bold">print</B
> operator.  Ordinarily the
<b class="emphasis.bold">print</B
> operator simply prints out the comma-separated fields you
specify, with no trailing newline or record separator assumed.  In
order to get behavior more like <em class="emphasis">awk</EM
>, set this variable as you would
set <em class="emphasis">awk</EM
>'s <code class="literal">ORS</CODE
> variable to specify what is printed at the end
of the <b class="emphasis.bold">print</B
>.  (Mnemonic: you set <b class="emphasis.bold">$\</B
> instead of adding <code class="literal">&quot;\n&quot;</CODE
> at the
end of the print.  Also, it's just like <code class="literal">/</CODE
>, but it's what you get &quot;back&quot;
from Perl.)</P
></DD
><dt class="term"><code class="literal">$&quot;</CODE
></DT
><dt class="term"><code class="literal">$LIST_SEPARATOR</CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-7851"></A
>This is like <code class="literal">$,</CODE
> above except that it applies to list values interpolated
into a double-quoted string (or similar interpreted string).  Default
is a space.  (Mnemonic: obvious, I think.)</P
></DD
><dt class="term"><code class="literal">$;</CODE
></DT
><dt class="term"><code class="literal">$SUBSCRIPT_SEPARATOR</CODE
></DT
><dt class="term"><code class="literal">$SUBSEP</CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-7864"></A
><a class="indexterm" name="AUTOID-7867"></A
><a class="indexterm" name="AUTOID-7870"></A
>The subscript separator for multi-dimensional array emulation.  If you
refer to a hash element as:</P
><p class="para"><pre class="programlisting">$foo{$a,$b,$c}</PRE
></P
><p class="para">it really means:</P
><p class="para"><pre class="programlisting">$foo{join($;, $a, $b, $c)}</PRE
></P
><p class="para">But don't put:</P
><p class="para"><pre class="programlisting">@foo{$a,$b,$c}      # a slice--note the @</PRE
></P
><p class="para">which means:</P
><p class="para"><pre class="programlisting">($foo{$a},$foo{$b},$foo{$c})</PRE
></P
><p class="para">Default is <code class="literal">&quot;\034&quot;</CODE
>, the same as SUBSEP in <em class="emphasis">awk</EM
>.  Note that if your
keys contain binary data there might not be any safe value for <code class="literal">$;</CODE
>.
(Mnemonic: comma&nbsp;- the syntactic subscript separator&nbsp;- is a
semi-semicolon.  Yeah, I know, it's pretty lame, but <code class="literal">$,</CODE
> is already
taken for something more important.)</P
><p class="para">This variable is for maintaining backward compatibility, so consider using
&quot;real&quot; multi-dimensional arrays now.</P
></DD
><dt class="term"><code class="literal">$^L</CODE
></DT
><dt class="term"><code class="literal">$FORMAT_FORMFEED</CODE
></DT
><dt class="term"><code class="literal">format_formfeed</CODE
> <code class="replaceable"><i>HANDLE EXPR</I
></CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-7901"></A
><a class="indexterm" name="AUTOID-7903"></A
>What a format outputs to perform a formfeed.  Default is <code class="literal">&quot;\f&quot;</CODE
>.</P
></DD
><dt class="term"><code class="literal">$:</CODE
></DT
><dt class="term"><code class="literal">$FORMAT_LINE_BREAK_CHARACTERS</CODE
></DT
><dt class="term"><code class="literal">format_line_break_characters HANDLE EXPR</CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-7916"></A
><a class="indexterm" name="AUTOID-7919"></A
><a class="indexterm" name="AUTOID-7921"></A
>The current set of characters after which a string may be broken to fill
continuation fields (starting with <code class="literal">^</CODE
>) in a format.  Default is <code class="literal">&quot; \n-&quot;</CODE
>, to break on whitespace or hyphens.  (Mnemonic:
a colon in poetry is a part of a line.)</P
></DD
><dt class="term"><code class="literal">$^A</CODE
></DT
><dt class="term"><code class="literal">$ACCUMULATOR</CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-7934"></A
>The current value of the <a class="xref" href="ch03_193.htm#PERL2-CMD-WRITE" title="write"><b class="xref.cmd">write</B
></A
>
accumulator for <a class="xref" href="ch03_041.htm#PERL2-CMD-FORMAT" title="format"><b class="xref.cmd">format</B
></A
> lines.  A format
contains <a class="xref" href="ch03_042.htm#PERL2-CMD-FORMLINE" title="formline"><b class="xref.cmd">formline</B
></A
> commands that put
their result into <b class="emphasis.bold">$^A</B
>.  After calling
its format, <a class="xref" href="ch03_193.htm#PERL2-CMD-WRITE" title="write"><b class="xref.cmd">write</B
></A
> prints out the
contents of <b class="emphasis.bold">$^A</B
> and empties.  So you
never actually see the contents of <b class="emphasis.bold">$^A</B
>
unless you call <a class="xref" href="ch03_042.htm#PERL2-CMD-FORMLINE" title="formline"><b class="xref.cmd">formline</B
></A
> yourself and
then look at it.  </P
></DD
><dt class="term"><code class="literal">$#</CODE
></DT
><dt class="term"><code class="literal">$OFMT</CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-7952"></A
><a class="indexterm" name="AUTOID-7955"></A
>Use of <b class="emphasis.bold">$#</B
> is now deprecated and is allowed only for maintaining backwards
compatibility with older versions of Perl.  You should use <a class="xref" href="ch03_111.htm#PERL2-CMD-PRINTF" title="printf"><b class="xref.cmd">printf</B
></A
> instead. <b class="emphasis.bold">$#</B
> contains the output format for printed numbers.  This variable is a half-hearted
attempt to emulate <em class="emphasis">awk</EM
>'s <code class="literal">OFMT</CODE
> variable.  There are times, however,
when <em class="emphasis">awk</EM
> and Perl have differing notions of what is in fact numeric.
Also, the initial value is approximately <code class="literal">%.14g</CODE
> rather than <code class="literal">%.6g</CODE
>, so you
need to set <b class="emphasis.bold">$#</B
> explicitly to get <em class="emphasis">awk</EM
>'s value.  (Mnemonic: <code class="literal">#</CODE
> is the
number sign.  Better yet, just forget it.)</P
></DD
><dt class="term"><code class="literal">$?</CODE
></DT
><dt class="term"><code class="literal">$CHILD_ERROR</CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-7976"></A
><a class="indexterm" name="AUTOID-7979"></A
><a class="indexterm" name="AUTOID-7982"></A
>The status returned by the last pipe close, backtick (<code class="literal">``</CODE
>) command,
or <a class="xref" href="ch03_167.htm#PERL2-CMD-SYSTEM" title="system"><b class="xref.cmd">system</B
></A
> operator.  Note that this is the status word returned by
the <em class="emphasis">wait</EM
>(2) system call, so the exit value of the subprocess is actually
<code class="literal">($? &gt;&gt; 8)</CODE
>.  Thus on many systems, <code class="literal">($? &amp; 255)</CODE
> gives which signal,
if any, the process died from, and whether there was a core dump.
(Mnemonic: similar to <em class="emphasis">sh</EM
> and <em class="emphasis">ksh</EM
>.)</P
></DD
><dt class="term"><code class="literal">$!</CODE
></DT
><dt class="term"><code class="literal">$OS_ERROR</CODE
></DT
><dt class="term"><code class="literal">$ERRNO</CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-8000"></A
><a class="indexterm" name="AUTOID-8003"></A
>If used in a numeric context, yields the current value of the
<code class="literal">errno</CODE
> variable (identifying the last system call error) in the
currently executing <em class="emphasis">perl</EM
>, with
all the usual caveats.  (This means that you shouldn't depend on the value
of <b class="emphasis.bold">$!</B
> to be anything in particular unless you've gotten a specific
error return indicating a system error.)  If used in a string context,
yields the corresponding system error string.  You can assign to <b class="emphasis.bold">$!</B
>
in order to set <code class="literal">errno</CODE
>, if, for instance, you want <b class="emphasis.bold">$!</B
> to return
the string for error <em class="emphasis">n</EM
>, or you want to set the exit value for the
<a class="xref" href="ch03_027.htm#PERL2-CMD-DIE" title="die"><b class="xref.cmd">die</B
></A
> operator.  (Mnemonic: What just went bang?)</P
></DD
><dt class="term"><code class="literal">$@</CODE
></DT
><dt class="term"><code class="literal">$EVAL_ERROR</CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-8021"></A
><a class="indexterm" name="AUTOID-8024"></A
><a class="indexterm" name="AUTOID-8027"></A
>The Perl syntax error message from the last <a class="xref" href="ch03_032.htm#PERL2-CMD-EVAL" title="eval"><b class="xref.cmd">eval</B
></A
> command.  If null,
the last <a class="xref" href="ch03_032.htm#PERL2-CMD-EVAL" title="eval"><b class="xref.cmd">eval</B
></A
> was parsed and executed correctly (although the operations
you invoked may have failed in the normal fashion).  (Mnemonic: Where was
the syntax error &quot;at&quot;?)</P
><p class="para">Note that warning messages are not collected in this variable.  You can, 
however, set up a routine to process warnings by setting
<code class="literal">$SIG{__WARN__}</CODE
> below. </P
></DD
><dt class="term"><code class="literal">$$</CODE
></DT
><dt class="term"><code class="literal">$PROCESS_ID</CODE
></DT
><dt class="term"><code class="literal">$PID</CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-8043"></A
>The process number of the Perl running this script.  (Mnemonic: same
as shells.)</P
></DD
><dt class="term"><code class="literal">$&lt;</CODE
></DT
><dt class="term"><code class="literal">$REAL_USER_ID</CODE
></DT
><dt class="term"><code class="literal">$UID</CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-8055"></A
>The real user ID (uid) of this process.  (Mnemonic: it's the uid you came
<em class="emphasis">from</EM
>, if you're running setuid.)</P
></DD
><dt class="term"><code class="literal">$&gt;</CODE
></DT
><dt class="term"><code class="literal">$EFFECTIVE_USER_ID</CODE
></DT
><dt class="term"><code class="literal">$EUID</CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-8068"></A
><a class="indexterm" name="AUTOID-8071"></A
><a class="indexterm" name="AUTOID-8074"></A
><a class="indexterm" name="AUTOID-8077"></A
>The effective uid of this process.  Example:</P
><p class="para"><pre class="programlisting">$&lt; = $&gt;;            # set real to effective uid
($&lt;,$&gt;) = ($&gt;,$&lt;);  # swap real and effective uid</PRE
></P
><p class="para">(Mnemonic: it's the uid you went <em class="emphasis">to</EM
>, if you're running
setuid.)  Note: <b class="emphasis.bold">$&lt;</B
> and <b class="emphasis.bold">$&gt;</B
> can only be swapped on machines
supporting <em class="emphasis">setreuid</EM
>(2).  And sometimes not even then.</P
></DD
><dt class="term"><code class="literal">$(</CODE
></DT
><dt class="term"><code class="literal">$REAL_GROUP_ID</CODE
></DT
><dt class="term"><code class="literal">$GID</CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-8096"></A
><a class="indexterm" name="AUTOID-8099"></A
><a class="indexterm" name="AUTOID-8102"></A
><a class="indexterm" name="AUTOID-8105"></A
><a class="indexterm" name="AUTOID-8108"></A
>The real group ID (gid) of this process.  If you are on a machine that supports
membership in multiple groups simultaneously, gives a space-separated
list of groups you are in.  The first number is the one returned by
<em class="emphasis">getgid</EM
>(1), and the subsequent ones by <em class="emphasis">getgroups</EM
>(2), one of which
may be the same as the first number.  (Mnemonic: parentheses are used to
<em class="emphasis">group</EM
> things.  The real gid is the group you
<em class="emphasis">left</EM
>, if you're running setgid.) </P
></DD
><dt class="term"><code class="literal">$)</CODE
></DT
><dt class="term"><code class="literal">$EFFECTIVE_GROUP_ID</CODE
></DT
><dt class="term"><code class="literal">$EGID</CODE
></DT
><dd class="listitem"><p class="para">The effective gid of this process.  If you are on a machine that
supports membership in multiple groups simultaneously, <b class="emphasis.bold">$)</B
> gives a
space-separated list of groups you are in.  The first number is the
one returned by <em class="emphasis">getegid</EM
>(2), and the subsequent
ones by <em class="emphasis">getgroups</EM
>(2), one of which may be the
same as the first number.  (Mnemonic: parentheses are used to
<em class="emphasis">group</EM
> things.  The effective gid is the group
that's <em class="emphasis">right</EM
> for you, if you're running setgid.)</P
><p class="para">Note: <b class="emphasis.bold">$&lt;</B
>, <b class="emphasis.bold">$&gt;</B
>, <b class="emphasis.bold">$(</B
>, and
<b class="emphasis.bold">$)</B
> can only be set on machines that
support the corresponding system set-id routine.  <b class="emphasis.bold">$(</B
> and <b class="emphasis.bold">$)</B
> can only
be swapped on machines supporting <em class="emphasis">setregid</EM
>(2).
Because Perl doesn't currently use <em class="emphasis">initgroups</EM
>(2),
you can't set your group vector to multiple groups.</P
></DD
><dt class="term"><code class="literal">$0</CODE
></DT
><dt class="term"><code class="literal">$PROGRAM_NAME</CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-8145"></A
><a class="indexterm" name="AUTOID-8148"></A
><a class="indexterm" name="AUTOID-8152"></A
>Contains the name of the file containing the Perl script being executed.
Assigning to <b class="emphasis.bold">$0</B
> attempts to modify the argument area that the
<em class="emphasis">ps</EM
>(1) program sees.  This is more useful as a way of indicating the
current program state than it is for hiding the program you're running.
But it doesn't work on all systems.  (Mnemonic: same as <em class="emphasis">sh</EM
> and
<em class="emphasis">ksh</EM
>.)</P
></DD
><dt class="term"><code class="literal">$[</CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-8165"></A
><a class="indexterm" name="AUTOID-8168"></A
><a class="indexterm" name="AUTOID-8171"></A
><a class="indexterm" name="AUTOID-8174"></A
>The index of the first element in an array, and of the first character in
a substring.  Default is 0, but you could set it to 1 to make Perl
behave more like <em class="emphasis">awk</EM
> (or FORTRAN) when
subscripting and when evaluating the <a class="xref" href="ch03_075.htm#PERL2-CMD-INDEX" title="index"><b class="xref.cmd">index</B
></A
> and <a class="xref" href="ch03_162.htm#PERL2-CMD-SUBSTR" title="substr"><b class="xref.cmd">substr</B
></A
>
functions.  (Mnemonic: [ begins subscripts.)</P
><p class="para">Assignment to <b class="emphasis.bold">$[</B
> is now treated as a compiler directive, and cannot
influence the behavior of any other file.  Its use is discouraged.</P
></DD
><dt class="term"><code class="literal">$]</CODE
></DT
><dt class="term"><code class="literal">$PERL_VERSION</CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-8189"></A
><a class="indexterm" name="AUTOID-8192"></A
>Returns the version + patchlevel / 1000.  It can be used to determine at
the beginning of a script whether the Perl interpreter executing the script
is in the right range of versions.  Example:</P
><p class="para"><pre class="programlisting">warn &quot;No checksumming!\n&quot; if $] &lt; 3.019;
die &quot;Must have prototyping available\n&quot; if $] &lt; 5.003;</PRE
></P
><p class="para">(Mnemonic: Is this version of Perl in the right bracket?)</P
></DD
><dt class="term"><code class="literal">$^D</CODE
></DT
><dt class="term"><code class="literal">$DEBUGGING</CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-8204"></A
>The current value of the debugging flags.  (Mnemonic: value of <b class="emphasis.bold">-D</B
>
switch.)</P
></DD
><dt class="term"><code class="literal">$^F</CODE
></DT
><dt class="term"><code class="literal">$SYSTEM_FD_MAX</CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-8215"></A
>The maximum system file descriptor, ordinarily 2.  System file
descriptors are passed to <em class="emphasis">exec</EM
>ed
processes, while higher file descriptors are not.  Also, during an
<a class="xref" href="ch03_102.htm#PERL2-CMD-OPEN" title="open"><b class="xref.cmd">open</B
></A
>, system file descriptors are
preserved even if the <a class="xref" href="ch03_102.htm#PERL2-CMD-OPEN" title="open"><b class="xref.cmd">open</B
></A
> fails.
(Ordinary file descriptors are closed before the <a class="xref" href="ch03_102.htm#PERL2-CMD-OPEN" title="open"><b class="xref.cmd">open</B
></A
> is attempted, and stay closed if the
<a class="xref" href="ch03_102.htm#PERL2-CMD-OPEN" title="open"><b class="xref.cmd">open</B
></A
> fails.)  Note that the
close-on-exec status of a file descriptor will be decided according to
the value of <b class="emphasis.bold">$^F</B
> at the time of the
<b class="emphasis.bold">open</B
>, not the time of the <em class="emphasis">exec</EM
>.  </P
></DD
><dt class="term"><code class="literal">$^H</CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-8231"></A
><a class="indexterm" name="AUTOID-8234"></A
><a class="indexterm" name="AUTOID-8236"></A
>This variable contains internal compiler hints enabled by certain 
pragmatic modules.  Hint: ignore this and use the pragmata.</P
></DD
><dt class="term"><code class="literal">$^I</CODE
></DT
><dt class="term"><code class="literal">$INPLACE_EDIT</CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-8245"></A
>The current value of the inplace-edit extension.  Use <a class="xref" href="ch03_180.htm#PERL2-CMD-UNDEF" title="undef"><b class="xref.cmd">undef</B
></A
> to disable
inplace editing.  (Mnemonic: value of <b class="emphasis.bold">-i</B
> switch.)</P
></DD
><dt class="term"><code class="literal">$^O</CODE
></DT
><dt class="term"><code class="literal">$OSNAME</CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-8257"></A
><a class="indexterm" name="AUTOID-8260"></A
>This variable contains the name of the operating system the current
Perl binary was compiled for.  It's intended as a cheap alternative
to pulling it out of the Config module.</P
></DD
><dt class="term"><code class="literal">$^P</CODE
></DT
><dt class="term"><code class="literal">$PERLDB</CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-8270"></A
>The internal flag that the debugger clears so that it doesn't debug
itself.  You could conceivably disable debugging yourself by clearing
it.</P
></DD
><dt class="term"><code class="literal">$^T</CODE
></DT
><dt class="term"><code class="literal">$BASETIME</CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-8280"></A
>The time at which the script began running, in seconds since the epoch
(the beginning of 1970, for UNIX systems).  The values returned by the
<code class="literal">-M</CODE
>, <code class="literal">-A</CODE
>, and <code class="literal">-C</CODE
> filetests are based on this value.</P
></DD
><dt class="term"><code class="literal">$^W</CODE
></DT
><dt class="term"><code class="literal">$WARNING</CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-8293"></A
>The current value of the warning switch, either true or
false.  (Mnemonic: the value is related to the <b class="emphasis.bold">-w</B
> switch.)</P
></DD
><dt class="term"><code class="literal">$^X</CODE
></DT
><dt class="term"><code class="literal">$EXECUTABLE_NAME</CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-8304"></A
>The name that the Perl binary itself was executed as, from C's <code class="literal">argv[0]</CODE
>.</P
></DD
><dt class="term"><code class="literal">$ARGV</CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-8313"></A
>Contains the name of the current file when reading from <code class="literal">&lt;ARGV&gt;</CODE
>.</P
></DD
></DL
><a class="indexterm" name="AUTOID-8316"></A
><a class="indexterm" name="AUTOID-8317"></A
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PERL2-CH-2-SECT-9.4">2.9.4 Global Special Arrays</A
></H3
><p class="para"><a class="indexterm" name="CH02.GAH1"></A
><a class="indexterm" name="CH02.GAH2"></A
><a class="indexterm" name="CH02.GAH3"></A
>The following arrays and hashes are global.  Just like the special global
scalar variables, they refer to package main no matter when they are
referenced.  The following two statements are exactly the same:</P
><p class="para"><pre class="programlisting">print &quot;@INC\n&quot;;
print &quot;@main::INC\n&quot;;</PRE
></P
><dl class="variablelist"><dt class="term"><code class="literal">@ARGV</CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-8338"></A
>The array containing the command-line arguments intended for the
script.  Note that <code class="literal">$#ARGV</CODE
> is generally the number of arguments minus
one, since <code class="literal">$ARGV[0]</CODE
> is the first argument, not the
command name.  See <b class="emphasis.bold">$0</B
> for the command name.</P
></DD
><dt class="term"><code class="literal">@INC</CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-8348"></A
>The array containing the list of places to look for Perl scripts
to be evaluated by the <code class="literal">do EXPR</CODE
>, <a class="xref" href="ch03_123.htm#PERL2-CMD-REQUIRE" title="require"><b class="xref.cmd">require</B
></A
>, or <a class="xref" href="ch03_185.htm#PERL2-CMD-USE" title="use"><b class="xref.cmd">use</B
></A
>
constructs.  It initially consists of the arguments to any <b class="emphasis.bold">-I</B
>
command-line switches, followed by the default Perl libraries, such as:</P
><p class="para"><pre class="programlisting">/usr/local/lib/perl5/$ARCH/$VERSION
/usr/local/lib/perl5
/usr/local/lib/perl5/site_perl
/usr/local/lib/perl5/site_perl/$ARCH</PRE
></P
><p class="para">followed by &quot;.&quot;, to represent the
current directory.  If you need to modify this list at run-time, you should use
the lib module in order to also get the machine-dependent library
properly loaded:</P
><p class="para"><pre class="programlisting">use lib '/mypath/libdir/';
use SomeMod;</PRE
></P
></DD
><dt class="term"><code class="literal">@F</CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-8364"></A
><a class="indexterm" name="AUTOID-8366"></A
><a class="indexterm" name="AUTOID-8368"></A
><a class="indexterm" name="AUTOID-8371"></A
>The array into which the input lines are split when the <b class="emphasis.bold">-a</B
>
command-line switch is given.  If the <b class="emphasis.bold">-a</B
> option is not used, this
array has no special meaning.  (This array is actually only <code class="literal">@main::F</CODE
>, and not
in all packages at once.)</P
></DD
><dt class="term"><code class="literal">%INC</CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-8381"></A
><a class="indexterm" name="AUTOID-8383"></A
><a class="indexterm" name="AUTOID-8385"></A
>The hash containing entries for the filename of each file that has been
included via <a class="xref" href="ch03_028.htm#PERL2-CMD-DO" title="do"><b class="xref.cmd">do</B
></A
> or <a class="xref" href="ch03_123.htm#PERL2-CMD-REQUIRE" title="require"><b class="xref.cmd">require</B
></A
>.  The key is the filename you
specified, and the value is the location of the file actually found.  The
<a class="xref" href="ch03_123.htm#PERL2-CMD-REQUIRE" title="require"><b class="xref.cmd">require</B
></A
> command uses this array to determine whether a given file has
already been included.</P
></DD
><dt class="term"><code class="literal">%ENV</CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-8396"></A
><a class="indexterm" name="AUTOID-8398"></A
><a class="indexterm" name="AUTOID-8400"></A
>The hash containing your current environment.  Setting a value in <b class="emphasis.bold">%ENV</B
>
changes the environment for child processes:</P
><p class="para"><pre class="programlisting">$ENV{PATH} = &quot;/bin:/usr/bin&quot;;</PRE
></P
><p class="para">To remove something from your environment, make sure
to use <a class="xref" href="ch03_026.htm#PERL2-CMD-DELETE" title="delete"><b class="xref.cmd">delete</B
></A
> instead of <a class="xref" href="ch03_180.htm#PERL2-CMD-UNDEF" title="undef"><b class="xref.cmd">undef</B
></A
>.</P
><p class="para">Note that processes running as a <em class="emphasis">crontab</EM
> entry
inherit a particularly impoverished set of environment variables.
Also note that you should set <code class="literal">$ENV{PATH}</CODE
>,
<code class="literal">$ENV{SHELL}</CODE
>, and <code class="literal">$ENV{IFS}</CODE
> if
you are running as a setuid script.  See <a class="xref" href="ch08_01.htm" title="Other Oddments">Chapter 8, <cite class="chapter">Other Oddments</CITE
></A
>,
for more on security and setuid issues.</P
></DD
><dt class="term"><code class="literal">%SIG</CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-8420"></A
><a class="indexterm" name="AUTOID-8422"></A
>The hash used to set signal handlers for various signals.  Example:</P
><p class="para"><pre class="programlisting">sub handler {       # 1st argument is signal name
    local($sig) = @_;
    print &quot;Caught a SIG$sig--shutting down\n&quot;;
    close(LOG);
    exit(0);
}

$SIG{INT} = 'handler';
$SIG{QUIT} = 'handler';
...
$SIG{INT} = 'DEFAULT';    # restore default action
$SIG{QUIT} = 'IGNORE';    # ignore SIGQUIT</PRE
></P
><p class="para">The <b class="emphasis.bold">%SIG</B
> array only contains values for the signals actually set
within the Perl script.  Here are some other examples:</P
><p class="para"><pre class="programlisting">$SIG{PIPE} = Plumber;     # SCARY!!
$SIG{PIPE} = &quot;Plumber&quot;;   # just fine, assumes main::Plumber
$SIG{PIPE} = \&amp;Plumber;   # just fine; assume current Plumber
$SIG{PIPE} = Plumber();   # oops, what did Plumber() return??</PRE
></P
><p class="para">The example marked <code class="literal">SCARY!!</CODE
> is problematic because it's a bareword, which means
sometimes it's a string representing the function, and sometimes it's 
going to call the subroutine right then and there!  Best to be sure
and quote it or take a reference to it.<a class="indexterm" name="AUTOID-8432"></A
><a class="indexterm" name="AUTOID-8434"></A
>
Certain internal hooks can also be set using the <b class="emphasis.bold">%SIG</B
> hash.  The
routine indicated by <code class="literal">$SIG{__WARN__}</CODE
> is called when a warning message
is about to be printed.  The warning message is passed as the first
argument.  The presence of a <code class="literal">__WARN__</CODE
> hook causes the ordinary
printing of warnings to <code class="literal">STDERR</CODE
> to be suppressed.  You can use this
to save warnings in a variable, or turn warnings into fatal errors, like
this:</P
><p class="para"><pre class="programlisting">local $SIG{__WARN__} = sub { die $_[0] };
eval $proggie;</PRE
></P
><p class="para"><a class="indexterm" name="AUTOID-8443"></A
>The routine indicated by <code class="literal">$SIG{__DIE__}</CODE
> is called
when a fatal exception is about to be thrown.  The error message is
passed as the first argument.  When a <code class="literal">__DIE__</CODE
> hook
routine returns, the exception processing continues as it would have
in the absence of the hook, unless the hook routine itself exits via a
<a class="xref" href="ch03_071.htm#PERL2-CMD-GOTO" title="goto"><b class="xref.cmd">goto</B
></A
>, a loop exit, or a <a class="xref" href="ch03_027.htm#PERL2-CMD-DIE" title="die"><b class="xref.cmd">die</B
></A
>.  The <code class="literal">__DIE__</CODE
> handler is
explicitly disabled during the call, so that you yourself can then
call the real <a class="xref" href="ch03_027.htm#PERL2-CMD-DIE" title="die"><b class="xref.cmd">die</B
></A
> from a
<code class="literal">__DIE__</CODE
> handler.  (If it weren't disabled, the
handler would call itself recursively forever.)  The case is similar for
<code class="literal">__WARN__</CODE
>.</P
></DD
></DL
><a class="indexterm" name="AUTOID-8453"></A
><a class="indexterm" name="AUTOID-8454"></A
><a class="indexterm" name="AUTOID-8455"></A
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PERL2-CH-2-SECT-9.5">2.9.5 Global Special Filehandles</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-8459"></A
><a class="indexterm" name="AUTOID-8462"></A
>The following filehandles (except for <code class="literal">DATA</CODE
>) always refer to
<code class="literal">main::FILEHANDLE</CODE
>.</P
><dl class="variablelist"><dt class="term"><code class="literal">ARGV</CODE
></DT
><dd class="listitem"><p class="para">The special filehandle that iterates over command line filenames in
<b class="emphasis.bold">@ARGV</B
>.  Usually written as the null filehandle in <code class="literal">&lt;&gt;</CODE
>.<a class="indexterm" name="AUTOID-8475"></A
></P
></DD
><dt class="term"><code class="literal">STDERR</CODE
></DT
><dd class="listitem"><p class="para">The special filehandle for standard error in any package. <a class="indexterm" name="AUTOID-8482"></A
></P
></DD
><dt class="term"><code class="literal">STDIN</CODE
></DT
><dd class="listitem"><p class="para">The special filehandle for standard input in any package.<a class="indexterm" name="AUTOID-8489"></A
></P
></DD
><dt class="term"><code class="literal">STDOUT</CODE
></DT
><dd class="listitem"><p class="para">The special filehandle for standard output in any package.<a class="indexterm" name="AUTOID-8496"></A
></P
></DD
><dt class="term"><code class="literal">DATA</CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-8503"></A
><a class="indexterm" name="AUTOID-8505"></A
><a class="indexterm" name="AUTOID-8507"></A
>The special filehandle that refers to anything following the
<code class="literal">__END__</CODE
> token in the file
containing the script.  Or, the special filehandle for anything
following the <code class="literal">__DATA__</CODE
> token in a required file, as long as
you're reading data in the same package that the <code class="literal">__DATA__</CODE
> was
found in.</P
></DD
><dt class="term"><code class="literal">_</CODE
> (underline)</DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-8517"></A
>The special filehandle used to cache the information from the last <a class="xref" href="ch03_159.htm#PERL2-CMD-STAT" title="stat"><b class="xref.cmd">stat</B
></A
>,
<a class="xref" href="ch03_090.htm#PERL2-CMD-LSTAT" title="lstat"><b class="xref.cmd">lstat</B
></A
>, or <b class="emphasis.bold">file</B
> test operator.</P
></DD
></DL
><a class="indexterm" name="AUTOID-8523"></A
><a class="indexterm" name="AUTOID-8524"></A
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch02_08.htm#PERL2-CH-2-SECT-8.1" title="2.8 Formats"><img src="../gifs/txtpreva.gif" alt="Previous: 2.8 Formats" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Programming Perl"><img src="../gifs/txthome.gif" alt="Programming Perl" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="CHAPTER" href="ch03_01.htm" title="3. Functions"><img src="../gifs/txtnexta.gif" alt="Next: 3. Functions" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">2.8 Formats</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">3. Functions</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
