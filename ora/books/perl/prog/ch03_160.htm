<html><head>
<title>[Chapter 3] 3.2.160 study</TITLE>
<meta name="DC.title" content="Programming Perl"><meta name="DC.creator" content="Larry Wall, Tom Christiansen &amp; Randal L. Schwartz"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:54:39Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-149-6" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch03_02.htm" title="3.2 Perl Functions in Alphabetical Order"><link rel="prev" href="ch03_159.htm#PERL2-CMD-STAT" title="3.2.159 stat"><link rel="next" href="ch03_161.htm#PERL2-CMD-SUB" title="3.2.161 sub"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Programming Perl" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Programming Perl"><area shape="RECT" coords="467,0,514,18" href="../search/psrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT2" href="ch03_159.htm#PERL2-CMD-STAT" title="3.2.159 stat"><img src="../gifs/txtpreva.gif" alt="Previous: 3.2.159 stat" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch03_01.htm" title="3. Functions">Chapter 3<br>Functions</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT2" href="ch03_161.htm#PERL2-CMD-SUB" title="3.2.161 sub"><img src="../gifs/txtnexta.gif" alt="Next: 3.2.161 sub" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT2"><h3 class="sect2"><a class="title" name="PERL2-CMD-STUDY">3.2.160 study</A
></H3
><pre class="programlisting">study <code class="replaceable"><i>SCALAR</I
></CODE
>
study</PRE
><p class="para"><a class="indexterm" name="AUTOID-13477"></A
><a class="indexterm" name="AUTOID-13479"></A
><a class="indexterm" name="AUTOID-13482"></A
>This function takes extra time to study <code class="replaceable"><i>SCALAR</I
></CODE
>
(<b class="emphasis.bold">$_</B
> if
unspecified) in anticipation of doing many pattern matches on the
string before it is next modified.  This may or may not save time,
depending on the nature and number of patterns you are searching on,
and on the distribution of character frequencies in the string to be
searched&nbsp;- you probably want to compare run-times with and without it to
see which runs faster.  Those loops that scan for many short constant
strings (including the constant parts of more complex patterns) will
benefit most.  If all your pattern matches are constant strings,
anchored at the front, <a class="xref" href="ch03_160.htm#PERL2-CMD-STUDY" title="study"><b class="xref.cmd">study</B
></A
> won't help at all, because no
scanning is done.  You may have only one <a class="xref" href="ch03_160.htm#PERL2-CMD-STUDY" title="study"><b class="xref.cmd">study</B
></A
> active at a time&nbsp;- if
you study a different scalar the first is &quot;unstudied&quot;.</P
><p class="para">The way <a class="xref" href="ch03_160.htm#PERL2-CMD-STUDY" title="study"><b class="xref.cmd">study</B
></A
>
works is this: a linked list of every character in the string to be
searched is made, so we know, for example, where all the &quot;<code class="literal">k</CODE
>&quot;
characters are.  From each search string, the rarest character is
selected, based on some static frequency tables constructed from some
C programs and English text.  Only those places that contain this rarest character are examined.</P
><p class="para">For example, here is a loop that inserts index-producing entries
before any line containing a certain pattern:</P
><pre class="programlisting">while (&lt;&gt;) {
    study;
    print &quot;.IX foo\n&quot; if /\bfoo\b/;
    print &quot;.IX bar\n&quot; if /\bbar\b/;
    print &quot;.IX blurfl\n&quot; if /\bblurfl\b/;
    ...
    print;
}</PRE
><p class="para">In searching for <code class="literal">/\bfoo\b/</CODE
>, only those locations in <b class="emphasis.bold">$_</B
> that contain &quot;<code class="literal">f</CODE
>&quot; will be looked at,
because &quot;<code class="literal">f</CODE
>&quot; is rarer than &quot;<code class="literal">o</CODE
>&quot;.  In
general, this is a big win except in pathological cases.  The only question is
whether it saves you more time than it took to build the linked list in the
first place.</P
><p class="para">If you have to look for strings that you don't know until run-time, you can
build an entire loop as a string and <a class="xref" href="ch03_032.htm#PERL2-CMD-EVAL" title="eval"><b class="xref.cmd">eval</B
></A
>
that to avoid recompiling all your patterns all the time.  Together with setting
<b class="emphasis.bold">$/</B
> to input entire files as one record, this can
be very fast, often faster than specialized programs like
<em class="emphasis">fgrep</EM
>.  The following scans a list of files
(<code class="literal">@files</CODE
>) for a list of words (<code class="literal">@words</CODE
>), and
prints out the names of those files that contain a match:</P
><pre class="programlisting">$search = 'while (&lt;&gt;) { study;';
foreach $word (@words) {
    $search .= &quot;++\$seen{\$ARGV} if /\\b$word\\b/;\n&quot;;
}
$search .= &quot;}&quot;;
@ARGV = @files;
undef $/;               # slurp each entire file
eval $search;           # this screams
die $@ if $@;           # in case eval failed
$/ = &quot;\n&quot;;              # put back to normal input delim
foreach $file (sort keys(%seen)) {
    print $file, &quot;\n&quot;;
}</PRE
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT2" href="ch03_159.htm#PERL2-CMD-STAT" title="3.2.159 stat"><img src="../gifs/txtpreva.gif" alt="Previous: 3.2.159 stat" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Programming Perl"><img src="../gifs/txthome.gif" alt="Programming Perl" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT2" href="ch03_161.htm#PERL2-CMD-SUB" title="3.2.161 sub"><img src="../gifs/txtnexta.gif" alt="Next: 3.2.161 sub" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">3.2.159 stat</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">3.2.161 sub</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
