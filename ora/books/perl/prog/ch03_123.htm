<html><head>
<title>[Chapter 3] 3.2.123 require</TITLE>
<meta name="DC.title" content="Programming Perl"><meta name="DC.creator" content="Larry Wall, Tom Christiansen &amp; Randal L. Schwartz"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:53:10Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-149-6" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch03_02.htm" title="3.2 Perl Functions in Alphabetical Order"><link rel="prev" href="ch03_122.htm#PERL2-CMD-RENAME" title="3.2.122 rename"><link rel="next" href="ch03_124.htm#PERL2-CMD-RESET" title="3.2.124 reset"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Programming Perl" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Programming Perl"><area shape="RECT" coords="467,0,514,18" href="../search/psrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT2" href="ch03_122.htm#PERL2-CMD-RENAME" title="3.2.122 rename"><img src="../gifs/txtpreva.gif" alt="Previous: 3.2.122 rename" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch03_01.htm" title="3. Functions">Chapter 3<br>Functions</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT2" href="ch03_124.htm#PERL2-CMD-RESET" title="3.2.124 reset"><img src="../gifs/txtnexta.gif" alt="Next: 3.2.124 reset" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT2"><h3 class="sect2"><a class="title" name="PERL2-CMD-REQUIRE">3.2.123 require</A
></H3
><pre class="programlisting">require <code class="replaceable"><i>EXPR</I
></CODE
>
require</PRE
><p class="para"><a class="indexterm" name="AUTOID-12240"></A
>This function asserts a dependency of some kind on its argument.
(If <code class="replaceable"><i>EXPR</I
></CODE
> is not supplied, <b class="emphasis.bold">$_</B
> is used as the argument.)</P
><p class="para">If the argument is a string, this function includes and executes the Perl code
found in the separate file whose name is given by the string.  This is similar
to performing an <a class="xref" href="ch03_032.htm#PERL2-CMD-EVAL" title="eval"><b class="xref.cmd">eval</B
></A
> on the contents of the
file, except that <a class="xref" href="ch03_123.htm#PERL2-CMD-REQUIRE" title="require"><b class="xref.cmd">require</B
></A
> checks to see that
the library file has not been included already.  (It can thus be used to express
file dependencies without worrying about duplicate compilation.)  The function
also knows how to search the include path stored in the <b class="emphasis.bold">@INC</B
> array (see the section &quot;Special Variables&quot; in <a class="xref" href="ch02_01.htm" title="The Gory Details">Chapter 2</A
>).</P
><p class="para">This form of the <a class="xref" href="ch03_123.htm#PERL2-CMD-REQUIRE" title="require"><b class="xref.cmd">require</B
></A
> function behaves
much like this subroutine:</P
><pre class="programlisting">sub require {
    my($filename) = @_;
    return 1 if $INC{$filename};
    my($realfilename, $result);
    ITER: {
        foreach $prefix (@INC) {
            $realfilename = &quot;$prefix/$filename&quot;;
            if (-f $realfilename) {
                $result = eval `cat $realfilename`;
                last ITER;
            }
        }
        die &quot;Can't find $filename in \@INC&quot;;
    }
    die $@ if $@;
    die &quot;$filename did not return true value&quot; unless $result;
    $INC{$filename} = $realfilename;
    return $result;
}</PRE
><p class="para">Note that the file must return true as the last value to indicate
successful execution of any initialization code, so it's customary to
end such a file with <code class="literal">1;</CODE
> unless you're sure it'll return true
otherwise.</P
><p class="para">This operator differs from the now somewhat obsolete <code class="literal">do</CODE
>
<code class="replaceable"><i>EXPR</I
></CODE
> operator in that the file will not be included
again if it was included previously with either a <a class="xref" href="ch03_123.htm#PERL2-CMD-REQUIRE" title="require"><b class="xref.cmd">require</B
></A
> or <code class="literal">do</CODE
>
<code class="replaceable"><i>EXPR</I
></CODE
> command, and any difficulties will be detected
and reported as fatal errors (which may be trapped by use of <a class="xref" href="ch03_032.htm#PERL2-CMD-EVAL" title="eval"><b class="xref.cmd">eval</B
></A
>).  The <a class="xref" href="ch03_028.htm#PERL2-CMD-DO" title="do"><b class="xref.cmd">do</B
></A
> command
does know how to do the <b class="emphasis.bold">@INC</B
> path search,
however.</P
><p class="para">If <a class="xref" href="ch03_123.htm#PERL2-CMD-REQUIRE" title="require"><b class="xref.cmd">require</B
></A
>'s argument is a number, the
version number of the currently executing Perl binary (as known by <b class="emphasis.bold">$]</B
>) is compared to <code class="replaceable"><i>EXPR</I
></CODE
>, and if
smaller, execution is immediately aborted. Thus, a script that requires Perl
version 5.003 can have as its first line:</P
><pre class="programlisting">require 5.003;</PRE
><p class="para">and earlier versions of Perl will abort.</P
><p class="para">If <a class="xref" href="ch03_123.htm#PERL2-CMD-REQUIRE" title="require"><b class="xref.cmd">require</B
></A
>'s argument is a package name (see
<a class="xref" href="ch03_106.htm#PERL2-CMD-PACKAGE" title="package"><b class="xref.cmd">package</B
></A
>), <a class="xref" href="ch03_123.htm#PERL2-CMD-REQUIRE" title="require"><b class="xref.cmd">require</B
></A
> assumes an automatic <code class="literal">.pm</CODE
> suffix,
making it easy to load standard modules.  This is like <a class="xref" href="ch03_185.htm#PERL2-CMD-USE" title="use"><b class="xref.cmd">use</B
></A
>, except that it happens at run-time, not compile time,
and the <a class="xref" href="ch03_074.htm#PERL2-CMD-IMPORT" title="import"><b class="xref.cmd">import</B
></A
> routine is not called.  For
example, to pull in Socket.pm without introducing any symbols into the current
package, say this:</P
><pre class="programlisting">require Socket; # instead of &quot;use Socket;&quot;</PRE
><p class="para">However, one can get the same effect with the following, which has the
advantage of giving a compile-time warning if Socket.pm can't be located:</P
><pre class="programlisting">use Socket ();</PRE
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT2" href="ch03_122.htm#PERL2-CMD-RENAME" title="3.2.122 rename"><img src="../gifs/txtpreva.gif" alt="Previous: 3.2.122 rename" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Programming Perl"><img src="../gifs/txthome.gif" alt="Programming Perl" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT2" href="ch03_124.htm#PERL2-CMD-RESET" title="3.2.124 reset"><img src="../gifs/txtnexta.gif" alt="Next: 3.2.124 reset" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">3.2.122 rename</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">3.2.124 reset</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
