<html><head>
<title>[Chapter 7] 7.2.24 ExtUtils::MM_Unix&nbsp;- Methods Used by ExtUtils::MakeMaker</TITLE>
<meta name="DC.title" content="Programming Perl"><meta name="DC.creator" content="Larry Wall, Tom Christiansen &amp; Randal L. Schwartz"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T02:02:17Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-149-6" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch07_02.htm" title="7.2 Library Modules"><link rel="prev" href="ch07_023.htm#AUTOID-21889" title="7.2.23 ExtUtils::MM_OS2&nbsp;- Methods to Override UNIX Behavior in ExtUtils::MakeMaker"><link rel="next" href="ch07_025.htm#AUTOID-22180" title="7.2.25 ExtUtils::MM_VMS&nbsp;- Methods to Override UNIX Behavior in ExtUtils::MakeMaker"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Programming Perl" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Programming Perl"><area shape="RECT" coords="467,0,514,18" href="../search/psrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT2" href="ch07_023.htm#AUTOID-21889" title="7.2.23 ExtUtils::MM_OS2&nbsp;- Methods to Override UNIX Behavior in ExtUtils::MakeMaker"><img src="../gifs/txtpreva.gif" alt="Previous: 7.2.23 ExtUtils::MM_OS2&nbsp;- Methods to Override UNIX Behavior in ExtUtils::MakeMaker" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch07_01.htm" title="7. The Standard Perl Library">Chapter 7<br>The Standard Perl Library</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT2" href="ch07_025.htm#AUTOID-22180" title="7.2.25 ExtUtils::MM_VMS&nbsp;- Methods to Override UNIX Behavior in ExtUtils::MakeMaker"><img src="../gifs/txtnexta.gif" alt="Next: 7.2.25 ExtUtils::MM_VMS&nbsp;- Methods to Override UNIX Behavior in ExtUtils::MakeMaker" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT2"><h3 class="sect2"><a class="title" name="AUTOID-21897">7.2.24 ExtUtils::MM_Unix&nbsp;- Methods Used by ExtUtils::MakeMaker</A
></H3
><pre class="programlisting">require ExtUtils::MM_Unix;</PRE
><p class="para"><a class="indexterm" name="CH07.OS1"></A
><a class="indexterm" name="CH07.OS2"></A
>The methods provided by this package (and by the other MM_* packages)
are designed to be used in conjunction with ExtUtils::MakeMaker.  You
will never <a class="xref" href="ch03_123.htm#PERL2-CMD-REQUIRE" title="require"><b class="xref.cmd">require</B
></A
> this module yourself.  You would only define methods
in this or a similar module if you're working on improving the porting
capabilities of MakeMaker.  Nevertheless, this is a laudable goal, so
we'll talk about it here.</P
><p class="para">When MakeMaker writes a <em class="emphasis">Makefile</EM
>, it creates one or more
objects that inherit their methods from package MM. MM itself doesn't provide
any methods, but it inherits from the ExtUtils::MM_Unix class. However, for
certain platforms, it also inherits from an OS-specific module such as MM_VMS,
and it does this <em class="emphasis">before</EM
> it inherits from the MM_Unix module
in the <b class="emphasis.bold">@ISA</B
> list.  The inheritance tree of MM
therefore lets the OS-specific package override any of the methods listed here.
In a sense, the MM_Unix package is slightly misnamed, since it provides
fundamental methods on non-UNIX systems too, to the extent that the system is
like UNIX.</P
><div class="sect3"><h4 class="sect3"><a class="title" name="PERL2-CH-7-SECT-1.35">7.2.24.1 MM methods</A
></H4
><p class="para">We've avoided listing deprecated methods here, as well as any private methods
you're unlikely to want to override.</P
><dl class="variablelist"><dt class="term"><code class="literal">catdir</CODE
> <code class="replaceable"><i>LIST</I
></CODE
></DT
><dd class="listitem"><p class="para">Concatenates two or more directory names to form a complete path ending
with a directory.  On UNIX it just glues it together with a <code class="literal">/</CODE
>
character.</P
></DD
><dt class="term"><code class="literal">catfile</CODE
> <code class="replaceable"><i>LIST</I
></CODE
></DT
><dd class="listitem"><p class="para">Concatenates one or more directory names and a filename to form a
complete path ending with a filename.  Also uses <code class="literal">/</CODE
> on UNIX.</P
></DD
><dt class="term"><code class="literal">dir_target</CODE
></DT
><dd class="listitem"><p class="para">Takes an array of directories that need to exist and returns a
<em class="emphasis">Makefile</EM
> entry for a <em class="emphasis">.exists</EM
> file in these directories.  Returns
nothing if the entry has already been processed.  We're helpless,
though, if the same directory comes as <code class="literal">$(FOO)</CODE
> and as <code class="literal">bar</CODE
>.
Both of them get an entry; that's why we use &quot;<code class="literal">::</CODE
>&quot;.</P
></DD
><dt class="term"><code class="literal">file_name_is_absolute</CODE
> <code class="replaceable"><i>FILENAME</I
></CODE
></DT
><dd class="listitem"><p class="para">Takes as argument a path and returns true if it is an absolute path.</P
></DD
><dt class="term"><code class="literal">find_perl</CODE
> <code class="replaceable"><i>VERSION, NAMES, DIRS, TRACE</I
></CODE
></DT
><dd class="listitem"><p class="para">Searches for an executable Perl that is at least the specified
<code class="replaceable"><i>VERSION</I
></CODE
>, named by one of the entries in <code class="replaceable"><i>NAMES</I
></CODE
> (an array
reference), and located in one of the entries of <code class="replaceable"><i>DIRS</I
></CODE
> (also an
array reference). It prints debugging info if <code class="replaceable"><i>TRACE</I
></CODE
> is true.</P
></DD
><dt class="term"><code class="literal">guess_name</CODE
></DT
><dd class="listitem"><p class="para">Guesses the name of this package by examining the working directory's
name.  MakeMaker calls this only if the developer has not supplied a
<code class="literal">NAME</CODE
> attribute.  Shame on you.</P
></DD
><dt class="term"><code class="literal">has_link_code</CODE
></DT
><dd class="listitem"><p class="para">Returns true if <code class="literal">C</CODE
>, <code class="literal">XS</CODE
>, <code class="literal">MYEXTLIB</CODE
> or similar
objects exist within this object that need a compiler.  Does not descend
into subdirectories as <code class="literal">needs_linking()</CODE
> does.</P
></DD
><dt class="term"><code class="literal">libscan</CODE
> <code class="replaceable"><i>FILENAME</I
></CODE
></DT
><dd class="listitem"><p class="para">Takes a path to a file that is found by <code class="literal">init_dirscan()</CODE
> and returns false
if we don't want to include this file in the library. It is mainly used to
exclude <em class="emphasis">RCS/</EM
>, <em class="emphasis">CVS/</EM
>, and <em class="emphasis">SCCS/</EM
> directories from installation.</P
></DD
><dt class="term"><code class="literal">lsdir</CODE
> <code class="replaceable"><i>DIR</I
></CODE
>, <code class="replaceable"><i>REGEXP</I
></CODE
></DT
><dd class="listitem"><p class="para">Takes as arguments a directory name and a regular expression.  Returns
all entries in the directory that match the regular expression.</P
></DD
><dt class="term"><code class="literal">maybe_command_in_dirs</CODE
></DT
><dd class="listitem"><p class="para">Method under development.  Not yet used.</P
></DD
><dt class="term"><code class="literal">maybe_command</CODE
> <code class="replaceable"><i>FILENAME</I
></CODE
></DT
><dd class="listitem"><p class="para">Returns true if the argument is likely to be a command.</P
></DD
><dt class="term"><code class="literal">needs_linking</CODE
></DT
><dd class="listitem"><p class="para">Does this module need linking?  Looks into subdirectory objects, if any.  (See
also <code class="literal">has_link_code()</CODE
>.)</P
></DD
><dt class="term"><code class="literal">nicetext</CODE
> <code class="replaceable"><i>TARGET</I
></CODE
></DT
><dd class="listitem"><p class="para">(A misnamed method.)  The MM_Unix version of the method just
returns the argument without further processing.
On VMS, this method ensures that colons marking targets are preceded by
space.  Most UNIX <em class="emphasis">makes</EM
> don't need this, but it's necessary under VMS
to distinguish the target delimiter from a colon appearing as part of
a filespec.</P
></DD
><dt class="term"><code class="literal">path</CODE
></DT
><dd class="listitem"><p class="para">Takes no argument.  Returns the environment variable <code class="literal">PATH</CODE
> as an array.</P
></DD
><dt class="term"><code class="literal">perl_script</CODE
> <code class="replaceable"><i>FILENAME</I
></CODE
></DT
><dd class="listitem"><p class="para">Returns true if the argument is likely to be a Perl script.  With
MM_Unix this is true for any ordinary, readable file.</P
></DD
><dt class="term"><code class="literal">prefixify</CODE
> <code class="replaceable"><i>ATTRNAME, OLDPREFIX, NEWPREFIX</I
></CODE
></DT
><dd class="listitem"><p class="para">Processes a path attribute in
<code class="literal">$self-&gt;{ </CODE
><code class="replaceable"><i>ATTRNAME</I
></CODE
><code class="literal"> }</CODE
>.  First
it looks it up for you in <code class="literal">%Config</CODE
> if it doesn't have a value
yet.  Then it replaces (in-place) the <code class="replaceable"><i>OLDPREFIX</I
></CODE
> with the
<code class="replaceable"><i>NEWPREFIX</I
></CODE
> (if it matches).</P
></DD
><dt class="term"><code class="literal">replace_manpage_separator</CODE
> <code class="replaceable"><i>FILENAME</I
></CODE
></DT
><dd class="listitem"><p class="para">Takes the filename of a package, which if it's a nested package will
have a name of the form &quot;<code class="literal">Foo/Bar</CODE
>&quot; (under UNIX),
and replaces the
subdirectory delimiter with &quot;<code class="literal">::</CODE
>&quot;.  Returns the altered name.</P
></DD
></DL
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PERL2-CH-7-SECT-1.36">7.2.24.2 Methods to produce chunks of text for the Makefile</A
></H4
><p class="para">When MakeMaker thinks it has all its ducks in a row, it calls a special
sequence of methods to produce the Makefile for a given MakeMaker
object.  The list of methods it calls is specified in the array
<code class="literal">@ExtUtils::MakeMaker::MM_Sections</CODE
>, one method per section.
Since these routines are all called the same way, we won't document
each of them separately, except to list them.</P
><p class="para">By far the most accurate and up-to-date documentation for what each
method does is actually the <em class="emphasis">Makefile</EM
> that MakeMaker produces.
Each section of the file is labeled with the name of the method that
produces it, so once you see how you want to change the <em class="emphasis">Makefile</EM
>,
it's a trivial matter to work back from the proposed change and find the
method responsible for it.</P
><p class="para">You've plowed through a lot of ugly things to get here, but since you've
read this far, we'll reward you by pointing out something incredibly
beautiful in MakeMaker.  The arguments (if any) that are passed to each
method are simply the pseudo-attributes of the same name that you
already saw documented under &quot;Additional Lowercase Attributes&quot; in the
section on ExtUtils::MakeMaker.  You'll recall that those
pseudo-attributes were specified as anonymous hashes, which Just Happen
to have exactly the same syntax inside as named parameters.  Fancy that.
So the arguments just come right into your method as ordinary named
parameters.  Assign the arguments to a hash, and off you go.  And it's
completely forward and backward compatible.  Even if you override a
method that didn't have arguments before, there's no problem.  Since it's
all driven off the method name, just name your new pseudo-attribute
after your method, and your method will get its arguments.</P
><p class="para">The return values are also easy to understand: each method simply
returns the string it wants to put into its section of the
<em class="emphasis">Makefile</EM
>.</P
><p class="para">Two special methods are <code class="literal">post_initialize()</CODE
> and <code class="literal">postamble()</CODE
>,
each of which returns an empty string by default.  You can define them in your
<em class="emphasis">Makefile.PL</EM
> to insert customized text near the beginning or end of
the <em class="emphasis">Makefile</EM
>.</P
><p class="para">Here are the methods.  They're called in this order (reading down the columns):</P
><table class="informaltable" border="1" cellpadding="3"><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">post_initialize()</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">top_targets()</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">realclean()</CODE
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">const_config()</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">linkext()</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">dist_basics()</CODE
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">constants()</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">dlsyms()</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">dist_core()</CODE
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">const_loadlibs()</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">dynamic()</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">dist_dir()</CODE
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">const_cccmd()</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">dynamic_bs()</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">dist_test()</CODE
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">tool_autosplit()</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">dynamic_lib()</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">dist_ci()</CODE
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">tool_xsubpp()</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">static()</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">install()</CODE
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">tools_other()</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">static_lib()</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">force()</CODE
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">dist()</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">installpm()</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">perldepend()</CODE
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">macro()</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">installpm_x()</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">makefile()</CODE
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">depend()</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">manifypods()</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">staticmake()</CODE
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">post_constants()</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">processPL()</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">test()</CODE
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">pasthru()</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">installbin()</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">test_via_harness()</CODE
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">c_o()</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">subdirs()</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">test_via_script()</CODE
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">xs_c()</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">subdir_x()</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">postamble()</CODE
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">xs_o()</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">clean()</CODE
></TD
><td class="entry" rowspan="1" colspan="1"></TD
></TR
></TBODY
></TABLE
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PERL2-CH-7-SECT-1.37">7.2.24.3 See also</A
></H4
><p class="para">ExtUtils::MakeMaker library module.</P
><a class="indexterm" name="AUTOID-22178"></A
><a class="indexterm" name="AUTOID-22179"></A
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT2" href="ch07_023.htm#AUTOID-21889" title="7.2.23 ExtUtils::MM_OS2&nbsp;- Methods to Override UNIX Behavior in ExtUtils::MakeMaker"><img src="../gifs/txtpreva.gif" alt="Previous: 7.2.23 ExtUtils::MM_OS2&nbsp;- Methods to Override UNIX Behavior in ExtUtils::MakeMaker" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Programming Perl"><img src="../gifs/txthome.gif" alt="Programming Perl" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT2" href="ch07_025.htm#AUTOID-22180" title="7.2.25 ExtUtils::MM_VMS&nbsp;- Methods to Override UNIX Behavior in ExtUtils::MakeMaker"><img src="../gifs/txtnexta.gif" alt="Next: 7.2.25 ExtUtils::MM_VMS&nbsp;- Methods to Override UNIX Behavior in ExtUtils::MakeMaker" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">7.2.23 ExtUtils::MM_OS2&nbsp;- Methods to Override UNIX Behavior in ExtUtils::MakeMaker</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">7.2.25 ExtUtils::MM_VMS&nbsp;- Methods to Override UNIX Behavior in ExtUtils::MakeMaker</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
