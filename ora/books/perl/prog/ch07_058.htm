<html><head>
<title>[Chapter 7] 7.2.58 Socket&nbsp;- Load the C socket.h Defines and Structure Manipulators</TITLE>
<meta name="DC.title" content="Programming Perl"><meta name="DC.creator" content="Larry Wall, Tom Christiansen &amp; Randal L. Schwartz"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T02:04:01Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-149-6" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch07_02.htm" title="7.2 Library Modules"><link rel="prev" href="ch07_057.htm#AUTOID-26622" title="7.2.57 sigtrap&nbsp;- Enable Stack Backtrace on Unexpected Signals"><link rel="next" href="ch07_059.htm#AUTOID-26791" title="7.2.59 strict&nbsp;- Restrict Unsafe Constructs"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Programming Perl" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Programming Perl"><area shape="RECT" coords="467,0,514,18" href="../search/psrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT2" href="ch07_057.htm#AUTOID-26622" title="7.2.57 sigtrap&nbsp;- Enable Stack Backtrace on Unexpected Signals"><img src="../gifs/txtpreva.gif" alt="Previous: 7.2.57 sigtrap&nbsp;- Enable Stack Backtrace on Unexpected Signals" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch07_01.htm" title="7. The Standard Perl Library">Chapter 7<br>The Standard Perl Library</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT2" href="ch07_059.htm#AUTOID-26791" title="7.2.59 strict&nbsp;- Restrict Unsafe Constructs"><img src="../gifs/txtnexta.gif" alt="Next: 7.2.59 strict&nbsp;- Restrict Unsafe Constructs" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT2"><h3 class="sect2"><a class="title" name="AUTOID-26647">7.2.58 Socket&nbsp;- Load the C socket.h Defines and Structure Manipulators</A
></H3
><a class="indexterm" name="CH07.SOCK"></A
><pre class="programlisting">use Socket;

$proto = getprotobyname('udp');
socket(Socket_Handle, PF_INET, SOCK_DGRAM, $proto);
$iaddr = gethostbyname('hishost.com');
$port = getservbyname('time', 'udp');
$sin = sockaddr_in($port, $iaddr);
send(Socket_Handle, 0, 0, $sin);

$proto = getprotobyname('tcp');
socket(Socket_Handle, PF_INET, SOCK_STREAM, $proto);
$port = getservbyname('smtp');
$sin = sockaddr_in($port, inet_aton(&quot;127.1&quot;));
$sin = sockaddr_in(7, inet_aton(&quot;localhost&quot;));
$sin = sockaddr_in(7, INADDR_LOOPBACK);
connect(Socket_Handle, $sin);

($port, $iaddr) = sockaddr_in(getpeername(Socket_Handle));
$peer_host = gethostbyaddr($iaddr, AF_INET);
$peer_addr = inet_ntoa($iaddr);

socket(Socket_Handle, PF_UNIX, SOCK_STREAM, 0);
unlink('/tmp/usock');
$sun = sockaddr_un('/tmp/usock');
bind(Socket_Handle, $sun);</PRE
><p class="para">This module is just a translation of the C <em class="emphasis">socket.h</EM
> file.
Unlike the old mechanism of requiring a translated <em class="emphasis">socket.ph</EM
>
file, this uses the <em class="emphasis">h2xs</EM
> program (see the Perl source distribution)
and your native C compiler.  This means that it has a
far more likely chance of getting the numbers right.  This includes
all of the commonly used preprocessor-defined constants like <code class="literal">AF_INET</CODE
>,
<code class="literal">SOCK_STREAM</CODE
>, and so on.</P
><p class="para">In addition, some structure manipulation functions are available:</P
><dl class="variablelist"><dt class="term"><code class="literal">inet_aton</CODE
> <code class="replaceable"><i>HOSTNAME</I
></CODE
></DT
><dd class="listitem"><p class="para">Takes a string giving the name of a host, and translates that
to a four-byte, packed string (structure).  Takes arguments of both
the <code class="literal">rtfm.mit.edu</CODE
> and <code class="literal">18.181.0.24</CODE
> types.  If the host name
cannot be resolved, returns the undefined value.</P
></DD
><dt class="term"><code class="literal">inet_ntoa</CODE
> <code class="replaceable"><i>IP_ADDRESS</I
></CODE
></DT
><dd class="listitem"><p class="para">Takes a four-byte IP address (as returned by <code class="literal">inet_aton()</CODE
>)
and translates it into a string of the form <em class="emphasis">d.d.d.d</EM
>
where the <em class="emphasis">d</EM
>s are numbers less than 256 (the normal,
readable, dotted-quad notation for Internet addresses).</P
></DD
><dt class="term"><code class="literal">INADDR_ANY</CODE
></DT
><dd class="listitem"><p class="para">Note: This function does not return a number, but a packed string.

Returns the four-byte wildcard IP address that specifies any
of the host's IP addresses. (A particular machine can have
more than one IP address, each address corresponding to
a particular network interface.  This wildcard address
allows you to bind to all of them simultaneously.)
Normally equivalent to <code class="literal">inet_aton('0.0.0.0')</CODE
>.</P
></DD
><dt class="term"><code class="literal">INADDR_LOOPBACK</CODE
></DT
><dd class="listitem"><p class="para">Note:  does not return a number, but a packed string.

Returns the four-byte loopback address.  Normally equivalent
to <code class="literal">inet_aton('localhost')</CODE
>.</P
></DD
><dt class="term"><code class="literal">INADDR_NONE</CODE
></DT
><dd class="listitem"><p class="para">Note:  does not return a number, but a packed string.

Returns the four-byte invalid IP address.  Normally equivalent
to <code class="literal">inet_aton('255.255.255.255')</CODE
>.</P
></DD
><dt class="term"><code class="literal">sockaddr_in</CODE
> <code class="replaceable"><i>PORT, ADDRESS</I
></CODE
></DT
><dd class="listitem"><p class="para"></P
></DD
><dt class="term"><code class="literal">sockaddr_in</CODE
> <code class="replaceable"><i>SOCKADDR_IN</I
></CODE
></DT
><dd class="listitem"><p class="para">In a list context, unpacks its <code class="replaceable"><i>SOCKADDR_IN</I
></CODE
> argument and returns
a list consisting of <code class="literal">(</CODE
><code class="replaceable"><i>PORT</I
></CODE
><code class="literal">, </CODE
><code class="replaceable"><i>ADDRESS</I
></CODE
><code class="literal">)</CODE
>.
In a scalar context, packs its <code class="literal">(</CODE
><code class="replaceable"><i>PORT</I
></CODE
><code class="literal">, </CODE
><code class="replaceable"><i>ADDRESS</I
></CODE
><code class="literal">)</CODE
>
arguments as a <code class="replaceable"><i>SOCKADDR_IN</I
></CODE
> and
returns it.  If this is confusing, use <code class="literal">pack_sockaddr_in()</CODE
> and
<code class="literal">unpack_sockaddr_in()</CODE
> explicitly.</P
></DD
><dt class="term"><code class="literal">pack_sockaddr_in</CODE
> <code class="replaceable"><i>PORT, IP_ADDRESS</I
></CODE
></DT
><dd class="listitem"><p class="para">Takes two arguments, a port number and a four-byte <code class="replaceable"><i>IP_ADDRESS</I
></CODE
>
(as returned by <code class="literal">inet_aton()</CODE
>).  Returns the <code class="literal">sockaddr_in</CODE
>
structure with those arguments packed in with <code class="literal">AF_INET</CODE
> filled in.
For Internet domain sockets, this
structure is normally what you need for the arguments in <a class="xref" href="ch03_007.htm#PERL2-CMD-BIND" title="bind"><b class="xref.cmd">bind</B
></A
>,
<a class="xref" href="ch03_020.htm#PERL2-CMD-CONNECT" title="connect"><b class="xref.cmd">connect</B
></A
>, and <a class="xref" href="ch03_139.htm#PERL2-CMD-SEND" title="send"><b class="xref.cmd">send</B
></A
>, and is also returned by <a class="xref" href="ch03_054.htm#PERL2-CMD-GETPEERNAME" title="getpeername"><b class="xref.cmd">getpeername</B
></A
>,
<a class="xref" href="ch03_067.htm#PERL2-CMD-GETSOCKNAME" title="getsockname"><b class="xref.cmd">getsockname</B
></A
>, and <a class="xref" href="ch03_119.htm#PERL2-CMD-RECV" title="recv"><b class="xref.cmd">recv</B
></A
>.</P
></DD
><dt class="term"><code class="literal">unpack_sockaddr_in</CODE
> <code class="replaceable"><i>SOCKADDR_IN</I
></CODE
></DT
><dd class="listitem"><p class="para">Takes a <code class="literal">sockaddr_in</CODE
> structure (as returned by <code class="literal">pack_sockaddr_in()</CODE
>)
and returns a list of two elements: the port and the four-byte IP address.
This function will croak if the structure does not have <code class="literal">AF_INET</CODE
> in the right place.</P
></DD
><dt class="term"><code class="literal">sockaddr_un</CODE
> <code class="replaceable"><i>PATHNAME</I
></CODE
></DT
><dd class="listitem"><p class="para"></P
></DD
><dt class="term"><code class="literal">sockaddr_un</CODE
> <code class="replaceable"><i>SOCKADDR_UN</I
></CODE
></DT
><dd class="listitem"><p class="para">In a list context, it unpacks its <code class="replaceable"><i>SOCKADDR_UN</I
></CODE
> argument and returns
a list consisting of <code class="literal">(</CODE
><code class="replaceable"><i>PATHNAME</I
></CODE
><code class="literal">)</CODE
>.  In a scalar context, it packs its
<code class="replaceable"><i>PATHNAME</I
></CODE
> argument as a <code class="literal">SOCKADDR_UN</CODE
> and returns it.  If
this is confusing, use
<code class="literal">pack_sockaddr_un()</CODE
> and <code class="literal">unpack_sockaddr_un()</CODE
> explicitly.
These functions are only supported if your system has &lt;<em class="emphasis">sys/un.h</EM
>&gt;.</P
></DD
><dt class="term"><code class="literal">pack_sockaddr_un</CODE
> <code class="replaceable"><i>PATH</I
></CODE
></DT
><dd class="listitem"><p class="para">Takes one argument, a pathname.  Returns the <code class="literal">sockaddr_un</CODE
> structure with
that path packed in with <code class="literal">AF_UNIX</CODE
> filled in.  For UNIX domain sockets,
this structure is normally what you need for the arguments in <a class="xref" href="ch03_007.htm#PERL2-CMD-BIND" title="bind"><b class="xref.cmd">bind</B
></A
>,
<a class="xref" href="ch03_020.htm#PERL2-CMD-CONNECT" title="connect"><b class="xref.cmd">connect</B
></A
>, and <a class="xref" href="ch03_139.htm#PERL2-CMD-SEND" title="send"><b class="xref.cmd">send</B
></A
>, and is also returned by <a class="xref" href="ch03_054.htm#PERL2-CMD-GETPEERNAME" title="getpeername"><b class="xref.cmd">getpeername</B
></A
>,
<a class="xref" href="ch03_067.htm#PERL2-CMD-GETSOCKNAME" title="getsockname"><b class="xref.cmd">getsockname</B
></A
> and <a class="xref" href="ch03_119.htm#PERL2-CMD-RECV" title="recv"><b class="xref.cmd">recv</B
></A
>.</P
></DD
><dt class="term"><code class="literal">unpack_sockaddr_un</CODE
> <code class="replaceable"><i>SOCKADDR_UN</I
></CODE
></DT
><dd class="listitem"><p class="para">Takes a <code class="literal">sockaddr_un</CODE
> structure (as returned by <code class="literal">pack_sockaddr_un()</CODE
>)
and returns the pathname.  Will croak if the structure does not
have <code class="literal">AF_UNIX</CODE
> in the right place.</P
></DD
></DL
><a class="indexterm" name="AUTOID-26790"></A
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT2" href="ch07_057.htm#AUTOID-26622" title="7.2.57 sigtrap&nbsp;- Enable Stack Backtrace on Unexpected Signals"><img src="../gifs/txtpreva.gif" alt="Previous: 7.2.57 sigtrap&nbsp;- Enable Stack Backtrace on Unexpected Signals" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Programming Perl"><img src="../gifs/txthome.gif" alt="Programming Perl" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT2" href="ch07_059.htm#AUTOID-26791" title="7.2.59 strict&nbsp;- Restrict Unsafe Constructs"><img src="../gifs/txtnexta.gif" alt="Next: 7.2.59 strict&nbsp;- Restrict Unsafe Constructs" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">7.2.57 sigtrap&nbsp;- Enable Stack Backtrace on Unexpected Signals</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">7.2.59 strict&nbsp;- Restrict Unsafe Constructs</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
