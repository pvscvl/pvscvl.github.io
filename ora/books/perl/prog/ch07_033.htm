<html><head>
<title>[Chapter 7] 7.2.33 FileHandle&nbsp;- Supply Object Methods for Filehandles</TITLE>
<meta name="DC.title" content="Programming Perl"><meta name="DC.creator" content="Larry Wall, Tom Christiansen &amp; Randal L. Schwartz"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T02:02:32Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-149-6" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch07_02.htm" title="7.2 Library Modules"><link rel="prev" href="ch07_032.htm#AUTOID-22511" title="7.2.32 FileCache&nbsp;- Keep More Files Open Than the System Permits"><link rel="next" href="ch07_034.htm#AUTOID-22731" title="7.2.34 GDBM_File&nbsp;- Tied Access to GDBM Library"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Programming Perl" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Programming Perl"><area shape="RECT" coords="467,0,514,18" href="../search/psrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT2" href="ch07_032.htm#AUTOID-22511" title="7.2.32 FileCache&nbsp;- Keep More Files Open Than the System Permits"><img src="../gifs/txtpreva.gif" alt="Previous: 7.2.32 FileCache&nbsp;- Keep More Files Open Than the System Permits" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch07_01.htm" title="7. The Standard Perl Library">Chapter 7<br>The Standard Perl Library</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT2" href="ch07_034.htm#AUTOID-22731" title="7.2.34 GDBM_File&nbsp;- Tied Access to GDBM Library"><img src="../gifs/txtnexta.gif" alt="Next: 7.2.34 GDBM_File&nbsp;- Tied Access to GDBM Library" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT2"><h3 class="sect2"><a class="title" name="AUTOID-22538">7.2.33 FileHandle&nbsp;- Supply Object Methods for Filehandles</A
></H3
><a class="indexterm" name="CH07.FILEH1"></A
><a class="indexterm" name="CH07.FILEH2"></A
><a class="indexterm" name="CH07.FILEH3"></A
><a class="indexterm" name="AUTOID-22548"></A
><pre class="programlisting">use FileHandle;

$fh = new FileHandle;
if ($fh-&gt;open &quot;&lt; <code class="replaceable"><i>file</I
></CODE
>&quot;) {
    print &lt;$fh&gt;;
    $fh-&gt;close;
}

$fh = new FileHandle &quot;&gt; <code class="replaceable"><i>file</I
></CODE
>&quot;;
if (defined $fh) {
    print $fh &quot;bar\n&quot;;
    $fh-&gt;close;
}

$fh = new FileHandle &quot;<code class="replaceable"><i>file</I
></CODE
>&quot;, &quot;r&quot;;
if (defined $fh) {
    print &lt;$fh&gt;;
    undef $fh;       # automatically closes the file
}

$fh = new FileHandle &quot;<code class="replaceable"><i>file</I
></CODE
>&quot;, O_WRONLY|O_APPEND;
if (defined $fh) {
    print $fh &quot;stuff\n&quot;;
    undef $fh;       # automatically closes the file
}

$pos = $fh-&gt;getpos;
$fh-&gt;setpos($pos);

$fh-&gt;setvbuf($buffer_var, _IOLBF, 1024);

($readfh, $writefh) = FileHandle::pipe;

autoflush STDOUT 1;</PRE
><dl class="variablelist"><dt class="term"><code class="literal">new</CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-22561"></A
>Creates a FileHandle, which is a reference to a
newly created symbol (see the Symbol library module).  If it receives any
parameters, they are passed to <code class="literal">open()</CODE
>.  If the open fails,
the FileHandle object is destroyed.  Otherwise, it is returned to
the caller.</P
></DD
><dt class="term"><code class="literal">new_from_fd</CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-22569"></A
>Creates a FileHandle like <code class="literal">new()</CODE
> does.
It requires two parameters, which are passed to <code class="literal">fdopen()</CODE
>;
if the <code class="literal">fdopen()</CODE
> fails, the FileHandle object is destroyed.
Otherwise, it is returned to the caller.</P
></DD
><dt class="term"><code class="literal">open</CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-22579"></A
>Accepts one parameter or two.  With one parameter, it is just a front end for
the built-in <a class="xref" href="ch03_102.htm#PERL2-CMD-OPEN" title="open"><b class="xref.cmd">open</B
></A
> function.  With two
parameters, the first parameter is a filename that may include whitespace or
other special characters, and the second parameter is the open mode in either
Perl form (<code class="literal">&quot;&gt;&quot;</CODE
>, <code class="literal">&quot;+&lt;&quot;</CODE
>, and so on) or
POSIX form (<code class="literal">&quot;w&quot;</CODE
>, <code class="literal">&quot;r+&quot;</CODE
>, and so on).</P
></DD
><dt class="term"><code class="literal">fdopen</CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-22591"></A
>Like <code class="literal">open()</CODE
> except that its first parameter is not a filename
but rather a filehandle name, a FileHandle object, or a file descriptor number.</P
></DD
><dt class="term"><code class="literal">getpos</CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-22599"></A
>If the C functions <em class="emphasis">fgetpos</EM
>(3) and
<em class="emphasis">fsetpos</EM
>(3) are available, then
<code class="literal">getpos()</CODE
> returns an opaque value that represents the current
position of the FileHandle, and <code class="literal">setpos()</CODE
> uses that value to
return to a previously visited position.</P
></DD
><dt class="term"><code class="literal">setvbuf</CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-22610"></A
>If the C function <em class="emphasis">setvbuf</EM
>(3) is available, then
<code class="literal">setvbuf()</CODE
> sets the buffering policy for the FileHandle.  The
calling sequence for the Perl function is the same as its C counterpart,
including the macros <code class="literal">_IOFBF</CODE
>, <code class="literal">_IOLBF</CODE
>, and
<code class="literal">_IONBF</CODE
>, except that the buffer parameter specifies a scalar
variable to use as a buffer.</P
><blockquote class="warning"><p class="para"><strong>WARNING:</STRONG
> A variable used as a buffer by <code class="literal">setvbuf()</CODE
> must not be
modified in any way until the FileHandle is closed or until
<code class="literal">setvbuf()</CODE
> is called again, or memory corruption may
result!</P
></BLOCKQUOTE
></DD
></DL
><p class="para">The following supported FileHandle methods are just front ends for the
corresponding built-in Perl functions:</P
><table class="informaltable" border="1" cellpadding="3"><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">clearerr</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">getc</CODE
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">close</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">gets</CODE
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">eof</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">seek</CODE
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">fileno</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">tell</CODE
></TD
></TR
></TBODY
></TABLE
><p class="para">The following supported FileHandle methods correspond to Perl special
variables:</P
><table class="informaltable" border="1" cellpadding="3"><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">autoflush</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">format_page_number</CODE
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">format_formfeed</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">format_top_name</CODE
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">format_line_break_characters</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">input_line_number</CODE
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">format_lines_left</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">input_record_separator</CODE
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">format_lines_per_page</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">output_field_separator</CODE
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">format_name</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">output_record_separator</CODE
></TD
></TR
></TBODY
></TABLE
><p class="para">Furthermore, for doing normal I/O you might need these methods:</P
><dl class="variablelist"><dt class="term"><code class="literal">$fh-&gt;print</CODE
></DT
><dd class="listitem"><p class="para">See Perl's built-in <a class="xref" href="ch03_110.htm#PERL2-CMD-PRINT" title="print"><b class="xref.cmd">print</B
></A
> function.</P
></DD
><dt class="term"><code class="literal">$fh-&gt;printf</CODE
></DT
><dd class="listitem"><p class="para">See Perl's built-in <a class="xref" href="ch03_111.htm#PERL2-CMD-PRINTF" title="printf"><b class="xref.cmd">printf</B
></A
> function.</P
></DD
><dt class="term"><code class="literal">$fh-&gt;getline</CODE
></DT
><dd class="listitem"><p class="para">This method works like Perl's <code class="literal">&lt;FILEHANDLE&gt;</CODE
> construct,
except that it can be safely called in an
array context, where it still returns just one line.</P
></DD
><dt class="term"><code class="literal">$fh-&gt;getlines</CODE
></DT
><dd class="listitem"><p class="para">This method works like Perl's <code class="literal">&lt;FILEHANDLE&gt;</CODE
> construct when called in an
array context to read all remaining lines in a file.
It will also <code class="literal">croak()</CODE
> if accidentally called in a scalar context.</P
></DD
></DL
><div class="sect3"><h4 class="sect3"><a class="title" name="PERL2-CH-7-SECT-1.38">7.2.33.1 Bugs</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-22717"></A
>Due to backward compatibility, all filehandles resemble objects
of class FileHandle, or actually classes derived from that class.
But they aren't.  Which means you can't derive your own
class from FileHandle and inherit those methods.</P
><p class="para">While it may look as though the filehandle methods corresponding
to the built-in variables are unique to a particular
filehandle, currently some of them are not, including the following:</P
><table class="simplelist" border="0"><tr><td class="member"><code class="literal">input_line_number()</CODE
></TD
></TR
><tr><td class="member"><code class="literal">input_record_separator()</CODE
></TD
></TR
><tr><td class="member"><code class="literal">output_record_separator()</CODE
></TD
></TR
></TABLE
><a class="indexterm" name="AUTOID-22728"></A
><a class="indexterm" name="AUTOID-22729"></A
><a class="indexterm" name="AUTOID-22730"></A
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT2" href="ch07_032.htm#AUTOID-22511" title="7.2.32 FileCache&nbsp;- Keep More Files Open Than the System Permits"><img src="../gifs/txtpreva.gif" alt="Previous: 7.2.32 FileCache&nbsp;- Keep More Files Open Than the System Permits" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Programming Perl"><img src="../gifs/txthome.gif" alt="Programming Perl" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT2" href="ch07_034.htm#AUTOID-22731" title="7.2.34 GDBM_File&nbsp;- Tied Access to GDBM Library"><img src="../gifs/txtnexta.gif" alt="Next: 7.2.34 GDBM_File&nbsp;- Tied Access to GDBM Library" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">7.2.32 FileCache&nbsp;- Keep More Files Open Than the System Permits</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">7.2.34 GDBM_File&nbsp;- Tied Access to GDBM Library</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
