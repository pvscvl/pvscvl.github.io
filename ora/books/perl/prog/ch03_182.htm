<html><head>
<title>[Chapter 3] 3.2.182 unpack</TITLE>
<meta name="DC.title" content="Programming Perl"><meta name="DC.creator" content="Larry Wall, Tom Christiansen &amp; Randal L. Schwartz"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:56:03Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-149-6" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch03_02.htm" title="3.2 Perl Functions in Alphabetical Order"><link rel="prev" href="ch03_181.htm#PERL2-CMD-UNLINK" title="3.2.181 unlink"><link rel="next" href="ch03_183.htm#PERL2-CMD-UNSHIFT" title="3.2.183 unshift"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Programming Perl" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Programming Perl"><area shape="RECT" coords="467,0,514,18" href="../search/psrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT2" href="ch03_181.htm#PERL2-CMD-UNLINK" title="3.2.181 unlink"><img src="../gifs/txtpreva.gif" alt="Previous: 3.2.181 unlink" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch03_01.htm" title="3. Functions">Chapter 3<br>Functions</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT2" href="ch03_183.htm#PERL2-CMD-UNSHIFT" title="3.2.183 unshift"><img src="../gifs/txtnexta.gif" alt="Next: 3.2.183 unshift" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT2"><h3 class="sect2"><a class="title" name="PERL2-CMD-UNPACK">3.2.182 unpack</A
></H3
><pre class="programlisting">unpack <code class="replaceable"><i>TEMPLATE</I
></CODE
>, <code class="replaceable"><i>EXPR</I
></CODE
></PRE
><p class="para"><a class="indexterm" name="AUTOID-14037"></A
><a class="indexterm" name="AUTOID-14039"></A
><a class="indexterm" name="AUTOID-14042"></A
>This function does the reverse of <a class="xref" href="ch03_105.htm#PERL2-CMD-PACK" title="pack"><b class="xref.cmd">pack</B
></A
>: it
takes a string (<code class="replaceable"><i>EXPR</I
></CODE
>) representing a data structure
and expands it out into a list value, returning the list value.  (In a scalar
context, it can be used to unpack a single value.)  The
<code class="replaceable"><i>TEMPLATE</I
></CODE
> has much the same format as in the <a class="xref" href="ch03_105.htm#PERL2-CMD-PACK" title="pack"><b class="xref.cmd">pack</B
></A
> function&nbsp;- it specifies the order and
type of the values to be unpacked.  (See <a class="xref" href="ch03_105.htm#PERL2-CMD-PACK" title="pack"><b class="xref.cmd">pack</B
></A
> for a more detailed description of
<code class="replaceable"><i>TEMPLATE</I
></CODE
>.)</P
><p class="para">Here's a subroutine that does (some of) <a class="xref" href="ch03_162.htm#PERL2-CMD-SUBSTR" title="substr"><b class="xref.cmd">substr</B
></A
>, only slower:</P
><pre class="programlisting">sub substr {
    my($what, $where, $howmuch) = @_;
    if ($where &lt; 0) {
        $where = -$where;
        return unpack &quot;\@* X$where a$howmuch&quot;, $what;
    }
    else {
        return unpack &quot;x$where a$howmuch&quot;, $what;
    }
}</PRE
><p class="para">and then there's:</P
><pre class="programlisting">sub signed_ord { unpack &quot;c&quot;, shift }</PRE
><p class="para">Here's a complete
<em class="emphasis">uudecode</EM
>
program:</P
><pre class="programlisting">#!/usr/bin/perl
$_ = &lt;&gt; until ($mode,$file) = /^begin\s*(\d*)\s*(\S*)/;
open(OUT,&quot;&gt; $file&quot;) if $file ne &quot;&quot;;
while (&lt;&gt;) {
    last if /^end/;
    next if /[a-z]/;
    next unless int((((ord() - 32) &amp; 077) + 2) / 3) ==
                int(length() / 4);
    print OUT unpack &quot;u&quot;, $_;
}
chmod oct $mode, $file;</PRE
><p class="para"><a class="indexterm" name="AUTOID-14060"></A
><a class="indexterm" name="AUTOID-14062"></A
><a class="indexterm" name="AUTOID-14065"></A
>In addition, you may prefix a field with 
<code class="literal">%</CODE
><code class="replaceable"><i>number</I
></CODE
> to
indicate that you want it to return a
<code class="replaceable"><i>number</I
></CODE
>-bit 
checksum of the items
instead of the items themselves.
Default is a 16-bit checksum.  For example, the following computes the
same number as the System V <em class="emphasis">sum</EM
> program:</P
><pre class="programlisting">undef $/;
$checksum = unpack (&quot;%32C*&quot;, &lt;&gt;) % 32767;</PRE
><p class="para">The following efficiently counts the number of set bits in a bit vector:</P
><pre class="programlisting">$setbits = unpack &quot;%32b*&quot;, $selectmask;</PRE
><p class="para">Here's a simple MIME decoder:</P
><pre class="programlisting">while (&lt;&gt;) {
  tr#A-Za-z0-9+/##cd;                   # remove non-base64 chars
  tr#A-Za-z0-9+/# -_#;                  # convert to uuencoded format
  $len = pack(&quot;c&quot;, 32 + 0.75*length);   # compute length byte
  print unpack(&quot;u&quot;, $len . $_);         # uudecode and print
}</PRE
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT2" href="ch03_181.htm#PERL2-CMD-UNLINK" title="3.2.181 unlink"><img src="../gifs/txtpreva.gif" alt="Previous: 3.2.181 unlink" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Programming Perl"><img src="../gifs/txthome.gif" alt="Programming Perl" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT2" href="ch03_183.htm#PERL2-CMD-UNSHIFT" title="3.2.183 unshift"><img src="../gifs/txtnexta.gif" alt="Next: 3.2.183 unshift" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">3.2.181 unlink</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">3.2.183 unshift</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
