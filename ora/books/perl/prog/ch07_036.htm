<html><head>
<title>[Chapter 7] 7.2.36 Getopt::Std&nbsp;- Process Single-Character Options with Option Clustering</TITLE>
<meta name="DC.title" content="Programming Perl"><meta name="DC.creator" content="Larry Wall, Tom Christiansen &amp; Randal L. Schwartz"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T02:02:40Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-149-6" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch07_02.htm" title="7.2 Library Modules"><link rel="prev" href="ch07_035.htm#PERL2-CH-7-SECT-1.43" title="7.2.35 Getopt::Long&nbsp;- Extended Processing of Command-Line Options"><link rel="next" href="ch07_037.htm#AUTOID-23144" title="7.2.37 I18N::Collate&nbsp;- Compare 8-bit Scalar Data According to the Current Locale"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Programming Perl" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Programming Perl"><area shape="RECT" coords="467,0,514,18" href="../search/psrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT2" href="ch07_035.htm#PERL2-CH-7-SECT-1.43" title="7.2.35 Getopt::Long&nbsp;- Extended Processing of Command-Line Options"><img src="../gifs/txtpreva.gif" alt="Previous: 7.2.35 Getopt::Long&nbsp;- Extended Processing of Command-Line Options" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch07_01.htm" title="7. The Standard Perl Library">Chapter 7<br>The Standard Perl Library</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT2" href="ch07_037.htm#AUTOID-23144" title="7.2.37 I18N::Collate&nbsp;- Compare 8-bit Scalar Data According to the Current Locale"><img src="../gifs/txtnexta.gif" alt="Next: 7.2.37 I18N::Collate&nbsp;- Compare 8-bit Scalar Data According to the Current Locale" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT2"><h3 class="sect2"><a class="title" name="AUTOID-23074">7.2.36 Getopt::Std&nbsp;- Process Single-Character Options with Option Clustering</A
></H3
><pre class="programlisting">use Getopt::Std;

getopt('oDI');    # -o, -D &amp; -I take arg.  Sets opt_* as a side effect.
getopts('oif:');  # -o &amp; -i are boolean flags, -f takes an argument.
                  # Sets opt_* as a side effect.</PRE
><p class="para"><a class="indexterm" name="AUTOID-23078"></A
><a class="indexterm" name="AUTOID-23080"></A
><a class="indexterm" name="AUTOID-23082"></A
><a class="indexterm" name="AUTOID-23084"></A
><a class="indexterm" name="AUTOID-23086"></A
><a class="indexterm" name="AUTOID-23088"></A
>The <code class="literal">getopt()</CODE
> and <code class="literal">getopts()</CODE
> functions give
your program simple mechanisms for processing single-character options.  These
options can be clustered (for example, <code class="literal">-bdLc</CODE
> might be
interpreted as four single-character options), and you can specify individual
options that require an accompanying argument.  When you invoke
<code class="literal">getopt()</CODE
> or <code class="literal">getopts()</CODE
>, you pass along
information about the kinds of options your program expects.  These functions
then analyze <code class="literal">@ARGV</CODE
>, extract information about the options,
and return this information to your program in a set of variables.  The
processing of <code class="literal">@ARGV</CODE
> stops when an argument without a leading
&quot;<code class="literal">-</CODE
>&quot; is encountered, if that argument is not
associated with a preceding option.  Otherwise, <code class="literal">@ARGV</CODE
> is
processed to its end and left empty.</P
><p class="para">For each option in your program's invocation, both <code class="literal">getopt()</CODE
> and
<code class="literal">getopts()</CODE
> define a variable <code class="literal">$opt_</CODE
><code class="replaceable"><i>x</I
></CODE
> where <code class="replaceable"><i>x</I
></CODE
> is the
option name.  If the option takes an argument, then the argument is read
and assigned to <code class="literal">$opt_</CODE
><code class="replaceable"><i>x</I
></CODE
> as its value; otherwise, a value of 1 is
assigned to the variable.</P
><p class="para">Invoke <code class="literal">getopt()</CODE
> with one argument, which should contain all
options that require a following argument.  For example:</P
><pre class="programlisting">getopt('dV');</PRE
><p class="para">If your program is then invoked as:</P
><pre class="programlisting">myscr -bfd January -V 10.4</PRE
><p class="para">then these variables will be set in the program:</P
><pre class="programlisting">$opt_b = 1;
$opt_f = 1;
$opt_d = &quot;January&quot;;
$opt_V = 10.4;</PRE
><p class="para">Space between an option and its following argument is unnecessary.  The
previous command line could have been given this way:</P
><pre class="programlisting">myscr -bfdJanuary -V10.4</PRE
><p class="para">In general, your program can be invoked with options given in any order.
All options not &quot;declared&quot; in the invocation of <code class="literal">getopt()</CODE
> are
assumed to be without accompanying argument.</P
><p class="para">Where <code class="literal">getopt()</CODE
> allows any single-character option,
<code class="literal">getopts()</CODE
> allows only those options you declare explicitly.  For
example, this invocation:</P
><pre class="programlisting">getopts('a:bc:');</PRE
><p class="para">legitimizes only the options <code class="literal">-a</CODE
>, <code class="literal">-b</CODE
>, and <code class="literal">-c</CODE
>.  The
colon following the <code class="literal">a</CODE
> and <code class="literal">c</CODE
> means that these two options
require an accompanying argument; <code class="literal">b</CODE
> is not allowed to have an
argument.  Accordingly, here are some ways to invoke the program:</P
><pre class="programlisting">myscr -abc              # WRONG unless bc is really the argument to -a
myscr -a -bc            # WRONG, with same qualification
myscr -a foo -bc bar    # $opt_a = &quot;foo&quot;; $opt_b = 1; $opt_c = &quot;bar&quot;
myscr -bafoo -cbar      # same as previous</PRE
><p class="para"><code class="literal">getopts()</CODE
> returns false if it encounters errors during option
processing.  However, it continues to process arguments and assign values
as best it can to <code class="literal">$opt_</CODE
><code class="replaceable"><i>x</I
></CODE
>
variables.  You should always check for
errors before assuming that the variables hold meaningful values.</P
><p class="para"><code class="literal">getopt()</CODE
> does not return a meaningful value.</P
><p class="para">Remember that both <code class="literal">getopt()</CODE
> and <code class="literal">getopts()</CODE
> halt argument
processing upon reading an argument (without leading &quot;<code class="literal">-</CODE
>&quot;) where
none was called for.  This is not considered an error.  So a user might
invoke your program with invalid arguments, without your being notified of
the fact.  However, you can always check to see whether <code class="literal">@ARGV</CODE
> has
been completely emptied or not&nbsp;- that is, whether all arguments have been
processed.
If you're using the <code class="literal">use&nbsp;strict</CODE
> pragma, which requires you to employ
only lexical variables or else globals that are fully declared, you 
will have to use the double-colon package delimiter or else the 
<code class="literal">use vars</CODE
> pragma.  For example:</P
><pre class="programlisting">use strict;
use vars qw($opt_o $opt_i $opt_D);
use Getopt::Std;</PRE
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT2" href="ch07_035.htm#PERL2-CH-7-SECT-1.43" title="7.2.35 Getopt::Long&nbsp;- Extended Processing of Command-Line Options"><img src="../gifs/txtpreva.gif" alt="Previous: 7.2.35 Getopt::Long&nbsp;- Extended Processing of Command-Line Options" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Programming Perl"><img src="../gifs/txthome.gif" alt="Programming Perl" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT2" href="ch07_037.htm#AUTOID-23144" title="7.2.37 I18N::Collate&nbsp;- Compare 8-bit Scalar Data According to the Current Locale"><img src="../gifs/txtnexta.gif" alt="Next: 7.2.37 I18N::Collate&nbsp;- Compare 8-bit Scalar Data According to the Current Locale" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">7.2.35 Getopt::Long&nbsp;- Extended Processing of Command-Line Options</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">7.2.37 I18N::Collate&nbsp;- Compare 8-bit Scalar Data According to the Current Locale</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
