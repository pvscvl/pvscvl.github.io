<html><head>
<title>[Chapter 7] 7.2.39 IPC::Open2&nbsp;- Open a Process for Both Reading and Writing</TITLE>
<meta name="DC.title" content="Programming Perl"><meta name="DC.creator" content="Larry Wall, Tom Christiansen &amp; Randal L. Schwartz"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T02:02:46Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-149-6" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch07_02.htm" title="7.2 Library Modules"><link rel="prev" href="ch07_038.htm#AUTOID-23192" title="7.2.38 integer&nbsp;- Do Arithmetic in Integer Instead of Double"><link rel="next" href="ch07_040.htm#AUTOID-23257" title="7.2.40 IPC::Open3&nbsp;- Open a Process for Reading, Writing, and Error Handling"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Programming Perl" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Programming Perl"><area shape="RECT" coords="467,0,514,18" href="../search/psrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT2" href="ch07_038.htm#AUTOID-23192" title="7.2.38 integer&nbsp;- Do Arithmetic in Integer Instead of Double"><img src="../gifs/txtpreva.gif" alt="Previous: 7.2.38 integer&nbsp;- Do Arithmetic in Integer Instead of Double" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch07_01.htm" title="7. The Standard Perl Library">Chapter 7<br>The Standard Perl Library</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT2" href="ch07_040.htm#AUTOID-23257" title="7.2.40 IPC::Open3&nbsp;- Open a Process for Reading, Writing, and Error Handling"><img src="../gifs/txtnexta.gif" alt="Next: 7.2.40 IPC::Open3&nbsp;- Open a Process for Reading, Writing, and Error Handling" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT2"><h3 class="sect2"><a class="title" name="AUTOID-23207">7.2.39 IPC::Open2&nbsp;- Open a Process for Both Reading and Writing</A
></H3
><pre class="programlisting">use IPC::Open2;

# with named filehandles
$pid = open2(\*RDR, \*WTR, $cmd_with_args);
$pid = open2(\*RDR, \*WTR, $cmd, &quot;<code class="replaceable"><i>arg1</I
></CODE
>&quot;, &quot;<code class="replaceable"><i>arg2</I
></CODE
>&quot;, ...);</PRE
><pre class="programlisting"># with object-oriented handles
use FileHandle;
my($rdr, $wtr) = (FileHandle-&gt;new, FileHandle-&gt;new);
$pid = open2($rdr, $wtr, $cmd_with_args);</PRE
><p class="para"><a class="indexterm" name="CH07.OPEN21"></A
><a class="indexterm" name="CH07.OPEN22"></A
><a class="indexterm" name="CH07.OPEN23"></A
><a class="indexterm" name="CH07.OPEN24"></A
><a class="indexterm" name="CH07.OPEN25"></A
>The <code class="literal">open2()</CODE
> function forks a child process to execute the
specified command.  The first two arguments represent filehandles, one
way or another.  They can be FileHandle objects, or they can be
references to typeglobs, which can either be explicitly named as above,
or generated by the Symbol package, as in the example below.  Whichever
you choose, they represent handles through which your program can read
from the command's standard output and write to the command's standard
input, respectively.  <code class="literal">open2()</CODE
> differs from Perl's built-in
<a class="xref" href="ch03_102.htm#PERL2-CMD-OPEN" title="open"><b class="xref.cmd">open</B
></A
> function in that it allows your program to communicate in
both directions with the child process.</P
><p class="para"><code class="literal">open2()</CODE
> returns the process ID of the child process.  On failure it
reports a fatal error.</P
><p class="para">Here's a simple use of <code class="literal">open2()</CODE
> by which you can give the program
user interactive access to the <em class="emphasis">bc</EM
>(1) command.  (<em class="emphasis">bc</EM
> is an
arbitrary-precision arithmetic package.)  In this case we use the Symbol
module to produce &quot;anonymous&quot; symbols:</P
><pre class="programlisting">use IPC::Open2;
use Symbol;

$WTR = gensym();  # get a reference to a typeglob
$RDR = gensym();  # and another one

$pid = open2($RDR, $WTR, 'bc');

while (&lt;STDIN&gt;) {            # read commands from user
     print $WTR $_;          # write a command to bc(1)
     $line = &lt;$RDR&gt;;         # read the output of bc(1)
     print STDOUT &quot;$line&quot;;   # send the output to the user
}</PRE
><p class="para"><code class="literal">open2()</CODE
> establishes unbuffered output for <code class="literal">$WTR</CODE
>.  However,
it cannot control buffering of output from the designated command.
Therefore, be sure to heed the following warning.</P
><blockquote class="warning"><p class="para"><strong>WARNING:</STRONG
> It is extremely easy for your program to hang while waiting
to read the next line of output from the command.  In the example just
shown, <em class="emphasis">bc</EM
> is known to read and write one line at a time, so it is
safe.  But utilities like <em class="emphasis">sort</EM
>(1) that read their entire input
stream before offering any output will cause a deadlock when used in the
manner we have illustrated.  You might do something like this instead:</P
><pre class="programlisting">$pid = open2($RDR, $WTR, 'sort');

while (&lt;STDIN&gt;) {
     print $WTR $_;
}
close($WTR);    # finish sending all output to sort(1)

while (&lt;$RDR&gt;) {     # now read the output of sort(1)
     print STDOUT &quot;$_&quot;;
}</PRE
><p class="para">More generally, you may have to use <b class="emphasis.bold">select</B
> to determine which file
descriptors are ready to read, and then <a class="xref" href="ch03_166.htm#PERL2-CMD-SYSREAD" title="sysread"><b class="xref.cmd">sysread</B
></A
> for the actual
reading.</P
></BLOCKQUOTE
><div class="sect3"><h4 class="sect3"><a class="title" name="PERL2-CH-7-SECT-1.48">7.2.39.1 See also</A
></H4
><p class="para">The IPC::open3 module shows an alternative that handles <code class="literal">STDERR</CODE
>
as well.</P
><a class="indexterm" name="AUTOID-23252"></A
><a class="indexterm" name="AUTOID-23253"></A
><a class="indexterm" name="AUTOID-23254"></A
><a class="indexterm" name="AUTOID-23255"></A
><a class="indexterm" name="AUTOID-23256"></A
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT2" href="ch07_038.htm#AUTOID-23192" title="7.2.38 integer&nbsp;- Do Arithmetic in Integer Instead of Double"><img src="../gifs/txtpreva.gif" alt="Previous: 7.2.38 integer&nbsp;- Do Arithmetic in Integer Instead of Double" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Programming Perl"><img src="../gifs/txthome.gif" alt="Programming Perl" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT2" href="ch07_040.htm#AUTOID-23257" title="7.2.40 IPC::Open3&nbsp;- Open a Process for Reading, Writing, and Error Handling"><img src="../gifs/txtnexta.gif" alt="Next: 7.2.40 IPC::Open3&nbsp;- Open a Process for Reading, Writing, and Error Handling" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">7.2.38 integer&nbsp;- Do Arithmetic in Integer Instead of Double</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">7.2.40 IPC::Open3&nbsp;- Open a Process for Reading, Writing, and Error Handling</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
