<html><head>
<title>[Chapter 7] 7.2.18 ExtUtils::MakeMaker&nbsp;- Create a Makefile for a Perl Extension</TITLE>
<meta name="DC.title" content="Programming Perl"><meta name="DC.creator" content="Larry Wall, Tom Christiansen &amp; Randal L. Schwartz"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T02:02:02Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-149-6" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch07_02.htm" title="7.2 Library Modules"><link rel="prev" href="ch07_017.htm#AUTOID-20525" title="7.2.17 ExtUtils::Liblist&nbsp;- Determine Libraries to Use and How to Use Them"><link rel="next" href="ch07_019.htm#AUTOID-21636" title="7.2.19 ExtUtils::Manifest&nbsp;- Utilities to Write and Check a MANIFEST File"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Programming Perl" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Programming Perl"><area shape="RECT" coords="467,0,514,18" href="../search/psrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT2" href="ch07_017.htm#AUTOID-20525" title="7.2.17 ExtUtils::Liblist&nbsp;- Determine Libraries to Use and How to Use Them"><img src="../gifs/txtpreva.gif" alt="Previous: 7.2.17 ExtUtils::Liblist&nbsp;- Determine Libraries to Use and How to Use Them" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch07_01.htm" title="7. The Standard Perl Library">Chapter 7<br>The Standard Perl Library</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT2" href="ch07_019.htm#AUTOID-21636" title="7.2.19 ExtUtils::Manifest&nbsp;- Utilities to Write and Check a MANIFEST File"><img src="../gifs/txtnexta.gif" alt="Next: 7.2.19 ExtUtils::Manifest&nbsp;- Utilities to Write and Check a MANIFEST File" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT2"><h3 class="sect2"><a class="title" name="AUTOID-20573">7.2.18 ExtUtils::MakeMaker&nbsp;- Create a Makefile for a Perl Extension</A
></H3
><pre class="programlisting">use ExtUtils::MakeMaker;
WriteMakefile( <code class="replaceable"><i>ATTRIBUTE</I
></CODE
> =&gt; <code class="replaceable"><i>VALUE</I
></CODE
>, ... );

# which internally is really more like...
%att = (<code class="replaceable"><i>ATTRIBUTE</I
></CODE
> =&gt; <code class="replaceable"><i>VALUE</I
></CODE
>, ...);
MM-&gt;new(\%att)-&gt;flush;</PRE
><p class="para"><a class="indexterm" name="CH07.MM1"></A
><a class="indexterm" name="CH07.MM2"></A
><a class="indexterm" name="CH07.MM3"></A
><a class="indexterm" name="CH07.MM4"></A
><a class="indexterm" name="CH07.MM5"></A
>When you build an extension to Perl, you need to have an appropriate
<em class="emphasis">Makefile</EM
>[<a class="footnote" href="#AUTOID-20594">9</A
>]
in the extension's source directory.  And
while you could conceivably write one by hand, this would be rather tedious. 
So you'd like a program to write it for you.</P
><blockquote class="footnote"><div class="footnote"><p class="para"><a class="footnote" name="AUTOID-20594">[9]</A
> If you don't know what a
<em class="emphasis">Makefile</EM
> is, or what the
<em class="emphasis">make</EM
>(1) program does with one, you
<em class="emphasis">really</EM
> shouldn't be reading this section.  We will be
assuming that you know what happens when you type a command like
<code class="literal">make&nbsp;foo</CODE
>.</P
></DIV
></BLOCKQUOTE
><p class="para">Originally, this was done using a shell script (actually, one for each
extension) called <em class="emphasis">Makefile.SH</EM
>, much like the one that
writes the <em class="emphasis">Makefile</EM
> for Perl itself.  But somewhere along
the line, it occurred to the perl5-porters that, by the time you want to compile
your extensions, there's already a bare-bones version of the Perl executable
called <em class="emphasis">miniperl</EM
>, if not a fully installed
<em class="emphasis">perl</EM
>.  And for some strange reason, Perl programmers prefer
programming in Perl to programming in shell.  So they wrote MakeMaker, just so
that you can write <em class="emphasis">Makefile.PL</EM
> instead of
<em class="emphasis">Makefile.SH</EM
>.</P
><p class="para">MakeMaker isn't a program; it's a module (or it wouldn't be in this chapter).
The module provides the routines you need; you just need to <a class="xref" href="ch03_185.htm#PERL2-CMD-USE" title="use"><b class="xref.cmd">use</B
></A
> the module, and then call the routines.  As with any
programming job, there are many degrees of freedom; but your typical
<em class="emphasis">Makefile.PL</EM
> is pretty simple.  For example, here's
<em class="emphasis">ext/POSIX/Makefile.PL</EM
> from the Perl distribution's POSIX
extension (which is by no means a trivial extension):</P
><pre class="programlisting">use ExtUtils::MakeMaker;
WriteMakefile(
    NAME         =&gt; 'POSIX',
    LIBS         =&gt; [&quot;-lm -lposix -lcposix&quot;],
    MAN3PODS     =&gt; ' ',    # Pods will be built by installman.
    XSPROTOARG   =&gt; '-noprototypes',       # XXX remove later?
    VERSION_FROM =&gt; 'POSIX.pm', 
);</PRE
><p class="para"><a class="indexterm" name="AUTOID-20613"></A
>Several things are apparent from this example, but the most important is
that the <code class="literal">WriteMakefile()</CODE
> function uses named parameters.  This
means that you can pass many potential parameters, but you're only required to
pass the ones you want to be different from the default values.  (And when we
say &quot;many&quot;, we mean &quot;many&quot;&nbsp;- there are about 75 of them.  See the
Attributes section later.)</P
><p class="para">As the synopsis above indicates, the <code class="literal">WriteMakefile()</CODE
> function
actually constructs an object.  This object has attributes that are set
from various sources, including the parameters you pass to the function.
It's this object that actually writes your <em class="emphasis">Makefile</EM
>,
meshing together the demands of your extension with the demands of the
architecture on which the extension is being installed.  Like many
craftily crafted objects, this MakeMaker object delegates as much of its
work as possible to various other subroutines and methods.  Many of
these may be overridden in your <em class="emphasis">Makefile.PL</EM
> if you need to do some
fine tuning.  (Generally you don't.)</P
><p class="para">But let's not lose track of the goal, which is to write a <em class="emphasis">Makefile</EM
>
that will know how to do anything to your extension that needs doing.
Now as you can imagine, the <em class="emphasis">Makefile</EM
> that MakeMaker writes is
quite, er, full-featured.  It's easy to get lost in all the
details.  If you look at the POSIX <em class="emphasis">Makefile</EM
> generated
by the bit of code above, you will find a file containing about 122
macros and 77 targets.  You will want to go off into a corner and curl
up into a little ball, saying, &quot;Never mind, I didn't really want to
know.&quot;</P
><p class="para">Well, the fact of the matter is, you really <em class="emphasis">don't</EM
> want to know,
nor do you have to.  Most of these items take care of themselves&nbsp;- that's
what MakeMaker is there for, after all.  We'll lay out the various
attributes and targets for you, but you can just pick and choose, like
in a cafeteria.  We'll talk about the <em class="emphasis">make</EM
> targets first, because they're
the actions you eventually want to perform, and then work backward
to the macros and attributes that feed the targets.</P
><p class="para">But before we do that, you need to know just a few more architectural
features of MakeMaker to make sense of some of the things we'll say.
The targets at the end of your <em class="emphasis">Makefile</EM
> depend on the macro
definitions that are interpolated into them.  Those macro definitions in
turn come from any of several places.  Depending on how you count, there
are about five sources of information for these attributes.  Ordered by
increasing precedence and (more or less) decreasing permanence, they are:</P
><ul class="itemizedlist"><li class="listitem"><p class="para">Platform-specific values in Perl's Config module, provided by
the <em class="emphasis">Configure</EM
> program that was run when Perl was installed on this machine.</P
></LI
><li class="listitem"><p class="para">The <code class="literal">WriteMakefile()</CODE
> function call arguments in <em class="emphasis">Makefile.Pl</EM
>,
supplied by the extension writer.  (You saw some of those above.)</P
></LI
><li class="listitem"><p class="para">Platform-specific hints in the extension's <em class="emphasis">hints/</EM
> directory, also
provided by extension writer.  We'll talk about those later.</P
></LI
><li class="listitem"><p class="para">Overriding values from the command line for <em class="emphasis">Makefile.PL</EM
> script,
supplied by the person who runs the script.  These look like <code class="literal">KEY=VALUE</CODE
>.</P
></LI
><li class="listitem"><p class="para">Overriding values from the command line for <em class="emphasis">make</EM
> itself,
supplied by the person who runs the <em class="emphasis">make</EM
>.  These also look like <code class="literal">KEY=VALUE</CODE
>.</P
></LI
></UL
><p class="para">The first four of these turn into attributes of the object we mentioned,
and are eventually written out as macro definitions in your
<em class="emphasis">Makefile</EM
>.  In most cases, the names of the values are consistent
from beginning to end.  (Except that the Config database keeps the names
in lowercase, as they come from Perl's <em class="emphasis">config.sh</EM
> file.  The names
are translated to uppercase when they become attributes of the object.)
In any case, we'll tend to use the term <em class="emphasis">attributes</EM
> to mean both
attributes and the <em class="emphasis">Makefile</EM
> macros derived from them.</P
><p class="para">The <em class="emphasis">Makefile.PL</EM
> and the <em class="emphasis">hints</EM
> may also provide overriding
methods for the object, if merely changing an attribute isn't good
enough.</P
><p class="para">The hints files are expected to be named
like their counterparts in <em class="emphasis">PERL_SRC/hints</EM
>, but with a <em class="emphasis">.pl</EM
>
filename extension (for example, <em class="emphasis">next_3_2.pl</EM
>), because the file
consists of Perl code to be evaluated.  Apart from that, the rules
governing which hintsfile is chosen are the same as in <em class="emphasis">Configure</EM
>.
The hintsfile is <a class="xref" href="ch03_032.htm#PERL2-CMD-EVAL" title="eval"><b class="xref.cmd">eval</B
></A
>ed within a routine that is a method of our
MakeMaker object, so if you want to
override or create an attribute, you would say something like:</P
><pre class="programlisting">$self-&gt;{LIBS} = ['-ldbm -lucb -lc'];</PRE
><p class="para">By and large, if your <em class="emphasis">Makefile</EM
> isn't doing what you want, you just
trace back the name of the misbehaving attribute to its source, and either
change it there or override it downstream.</P
><p class="para">Extensions may be built using the contents of either the Perl source
directory tree or the installed Perl library.  The recommended way
is to build extensions after you have run <em class="emphasis">make install</EM
> on Perl
itself.  You can then build your extension in any directory on your hard disk that is not
below the Perl source tree.  The support for extensions below the
<em class="emphasis">ext/</EM
>
directory of the Perl distribution is only good for the standard
extensions that come with Perl.</P
><p class="para">If an extension is being built below the <em class="emphasis">ext/</EM
> directory of
the Perl source, then MakeMaker will set <code class="literal">PERL_SRC</CODE
>
automatically (usually to <code class="literal">../..</CODE
>).  If
<code class="literal">PERL_SRC</CODE
> is defined and the extension is recognized as a
standard extension, then other variables default to the following:</P
><pre class="programlisting">PERL_INC     = PERL_SRC
PERL_LIB     = PERL_SRC/lib
PERL_ARCHLIB = PERL_SRC/lib
INST_LIB     = PERL_LIB
INST_ARCHLIB = PERL_ARCHLIB</PRE
><p class="para">If an extension is being built away from the Perl source, then MakeMaker
will leave <code class="literal">PERL_SRC</CODE
> undefined and default to using the installed copy
of the Perl library.  The other variables default to the following:</P
><pre class="programlisting">PERL_INC     = $archlibexp/CORE
PERL_LIB     = $privlibexp
PERL_ARCHLIB = $archlibexp
INST_LIB     = ./blib/lib
INST_ARCHLIB = ./blib/arch</PRE
><p class="para">If Perl has not yet been installed, then <code class="literal">PERL_SRC</CODE
> can be defined as
an override on the command line.</P
><div class="sect3"><h4 class="sect3"><a class="title" name="PERL2-CH-7-SECT-1.19">7.2.18.1 Targets</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-20683"></A
><a class="indexterm" name="AUTOID-20685"></A
>Far and away the most commonly used <em class="emphasis">make</EM
> targets are those used by
the installer to install the extension.  So we aim to make the normal
installation very easy:</P
><pre class="programlisting">perl Makefile.PL  # generate the <em class="emphasis">Makefile</EM
>
make              # compile the extension
make test         # test the extension
make install      # install the extension</PRE
><p class="para">This assumes that the installer has dynamic linking available.  If not,
a couple of additional commands are also necessary:</P
><pre class="programlisting">make perl         # link a new <em class="emphasis">perl</EM
> statically with this extension
make inst_perl    # install that new <em class="emphasis">perl</EM
> appropriately</PRE
><p class="para">Other interesting targets in the generated <em class="emphasis">Makefile</EM
> are:</P
><pre class="programlisting">make config       # check whether the <em class="emphasis">Makefile</EM
> is up-to-date
make clean        # delete local temp files (<code class="replaceable"><i>Makefile</I
></CODE
> gets renamed)
make realclean    # delete derived files (including <code class="replaceable"><i>./blib</I
></CODE
>)
make ci           # check in all files in the <em class="emphasis">MANIFEST</EM
> file
make dist         # see the &quot;Distribution Support&quot; section below</PRE
><p class="para">Now we'll talk about some of these commands, and how each of them is
related to MakeMaker.  So we'll not only be talking about things that
happen when you invoke the <em class="emphasis">make</EM
> target, but also about what
MakeMaker has to do to generate that <em class="emphasis">make</EM
> target.  So brace
yourself for some temporal whiplash.</P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PERL2-CH-7-SECT-1.20">7.2.18.2 Running MakeMaker</A
></H4
><p class="para">This command is the one most closely related to MakeMaker because it's the
one in which you actually run MakeMaker.  No temporal whiplash here.
As we mentioned earlier, some of the 
default attribute values may be
overridden by adding arguments of the form <code class="literal">KEY=VALUE</CODE
>.  For
example:</P
><pre class="programlisting">perl Makefile.PL PREFIX=/tmp/myperl5</PRE
><p class="para">To get a more detailed view of what MakeMaker is doing, say:</P
><pre class="programlisting">perl Makefile.PL verbose</PRE
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PERL2-CH-7-SECT-1.21">7.2.18.3 Making whatever is needed</A
></H4
><p class="para">A <em class="emphasis">make</EM
> command without arguments performs any compilation needed
and puts any generated files into staging directories that are named by the
attributes <code class="literal">INST_LIB</CODE
>, <code class="literal">INST_ARCHLIB</CODE
>, <code class="literal">INST_EXE</CODE
>,
<code class="literal">INST_MAN1DIR</CODE
>, and <code class="literal">INST_MAN3DIR</CODE
>.
These directories default to
something below <em class="emphasis">./blib</EM
> if you are <em class="emphasis">not</EM
> building below the
Perl source directory.  If you <em class="emphasis">are</EM
> building below the Perl source,
<code class="literal">INST_LIB</CODE
> and <code class="literal">INST_ARCHLIB</CODE
> default to <em class="emphasis">../../lib</EM
>,
and <code class="literal">INST_EXE</CODE
> is not defined.</P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PERL2-CH-7-SECT-1.22">7.2.18.4 Running tests</A
></H4
><p class="para">The goal of this command is to run any regression tests supplied with the
extension, so MakeMaker checks for the existence of a file named
<em class="emphasis">test.pl</EM
> in the current directory and, if it exists, adds
commands to the <code class="literal">test</CODE
> target of the
<em class="emphasis">Makefile</EM
> that will execute the script with the proper set
of Perl <b class="emphasis.bold">-I</B
> options (since the 
files haven't been installed into their final location yet).</P
><p class="para">MakeMaker also checks for any files matching
<code class="literal">glob(&quot;t/*.t&quot;)</CODE
>.  It will add commands to the
<code class="literal">test</CODE
> target that execute all matching files via the
Test::Harness module with the <b class="emphasis.bold">-I</B
> switches
set correctly.  If you pass <code class="literal">TEST_VERBOSE=1</CODE
>, the
<code class="literal">test</CODE
> target will run the tests verbosely.</P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PERL2-CH-7-SECT-1.23">7.2.18.5 Installing files</A
></H4
><p class="para">Once the installer has tested the extension, the various generated files
need to get put into their final resting places.  The <code class="literal">install</CODE
>
target copies the files found below each of the <code class="literal">INST_*</CODE
>
directories to their <code class="literal">INSTALL*</CODE
> counterparts.</P
><table class="informaltable" border="1" cellpadding="3"><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">INST_LIB</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><img src="../chars/rarr.gif" alt="-&gt;"></TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">INSTALLPRIVLIB</CODE
>[<a class="footnote" href="#PERL2-CH7-TABFTN7">10</A
>]<code class="literal">or
INSTALLSITELIB</CODE
>[<a class="footnote" href="#PERL2-CH7-TABFTN8">11</A
>]</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">INST_ARCHLIB</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><img src="../chars/rarr.gif" alt="-&gt;"></TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">INSTALLARCHLIB</CODE
>[<a class="footnote" href="#PERL2-CH7-TABFTN7">10</A
>]<code class="literal">or INSTALLSITEARCH</CODE
>[<a class="footnote" href="#PERL2-CH7-TABFTN8">11</A
>]</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">INST_EXE</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><img src="../chars/rarr.gif" alt="-&gt;"></TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">INSTALLBIN</CODE
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">INST_MAN1DIR</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><img src="../chars/rarr.gif" alt="-&gt;"></TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">INSTALLMAN1DIR</CODE
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">INST_MAN3DIR</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><img src="../chars/rarr.gif" alt="-&gt;"></TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">INSTALLMAN3DIR</CODE
></TD
></TR
></TBODY
></TABLE
><blockquote class="footnote"><div class="footnote"><p class="para"><a class="footnote" name="PERL2-CH7-TABFTN7">[10]</A
> if <code class="literal">INSTALLDIRS</CODE
> set to
&quot;<code class="literal">perl</CODE
>&quot;</P
></DIV
><div class="footnote"><p class="para"><a class="footnote" name="PERL2-CH7-TABFTN8">[11]</A
> if
<code class="literal">INSTALLDIRS</CODE
> set to
&quot;<code class="literal">site</CODE
>&quot;</P
></DIV
></BLOCKQUOTE
><p class="para">The <code class="literal">INSTALL*</CODE
> attributes in turn default to their <code class="literal">%Config</CODE
>
counterparts, <code class="literal">$Config{installprivlib}</CODE
>,
<code class="literal">$Config{installarchlib}</CODE
>, and so on.</P
><p class="para">If you don't set <code class="literal">INSTALLARCHLIB</CODE
> or <code class="literal">INSTALLSITEARCH</CODE
>,
MakeMaker will
assume you want them to be subdirectories of <code class="literal">INSTALLPRIVLIB</CODE
>
and <code class="literal">INSTALLSITELIB</CODE
>,
respectively.  The exact relationship is determined by <em class="emphasis">Configure</EM
>.  But
you can usually just go with the defaults for all these attributes.</P
><p class="para">The <code class="literal">PREFIX</CODE
> attribute can be used to redirect all the <code class="literal">INSTALL*</CODE
>
attributes in one go.  Here's the quickest way to install a module in a
nonstandard place:</P
><pre class="programlisting">perl Makefile.PL PREFIX=~ \</PRE
><p class="para">The value you specify for <code class="literal">PREFIX</CODE
> replaces one or more
leading pathname components in all <code class="literal">INSTALL*</CODE
> attributes.  The
prefix to be replaced is determined by the value of
<code class="literal">$Config{prefix}</CODE
>, which typically has a value like <em class="emphasis">/usr</EM
>.
(Note that the tilde expansion above is done by MakeMaker, not by
<em class="emphasis">perl</EM
> or <em class="emphasis">make</EM
>.)</P
><p class="para">If the user has superuser privileges and is not working under the
Andrew File System (AFS) or relatives, then the defaults for
<code class="literal">INSTALLPRIVLIB</CODE
>, <code class="literal">INSTALLARCHLIB</CODE
>, <code class="literal">INSTALLBIN</CODE
>, and so
on should be appropriate.</P
><p class="para">By default, <em class="emphasis">make install</EM
> writes some documentation of what has been
done into the file given by <code class="literal">$(INSTALLARCHLIB)/perllocal.pod</CODE
>.
This feature can be bypassed by calling <em class="emphasis">make pure_install</EM
>.</P
><p class="para">If you are using AFS, you must
specify the installation directories, since these most
probably have changed since Perl itself was installed.
Do this by issuing these commands:</P
><pre class="programlisting">perl Makefile.PL INSTALLSITELIB=/afs/here/today
    INSTALLBIN=/afs/there/now INSTALLMAN3DIR=/afs/for/manpages
make</PRE
><p class="para">Be careful to repeat this procedure every time you recompile an
extension, unless you are sure the AFS installation directories are
still valid.</P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PERL2-CH-7-SECT-1.24">7.2.18.6 Static linking of a new Perl binary</A
></H4
><p class="para">The steps above are sufficient on a system supporting dynamic loading.
On systems that do not support dynamic loading, however, the extension
has to be linked together statically with everything else you might want
in your <em class="emphasis">perl</EM
> executable.  MakeMaker supports the linking process
by creating appropriate targets in the <em class="emphasis">Makefile</EM
>.  If you say:</P
><pre class="programlisting">make perl</PRE
><p class="para">it will produce a new <em class="emphasis">perl</EM
> binary in the current directory with
all extensions linked in that can be found in <code class="literal">INST_ARCHLIB</CODE
>,
<code class="literal">SITELIBEXP</CODE
>, and <code class="literal">PERL_ARCHLIB</CODE
>.  To do that, MakeMaker
writes a new <em class="emphasis">Makefile</EM
>; on UNIX it is called <em class="emphasis">Makefile.aperl</EM
>,
but the name may be system-dependent.  When you want to force the
creation of a new <em class="emphasis">perl</EM
>, we recommend that you delete this
<em class="emphasis">Makefile.aperl</EM
> so the directories are searched for linkable
libraries again.</P
><p class="para">The binary can be installed in the directory where Perl normally
resides on your machine with:</P
><pre class="programlisting">make inst_perl</PRE
><p class="para">To produce a Perl binary with a different filename than <em class="emphasis">perl</EM
>, either say:</P
><pre class="programlisting">perl Makefile.PL MAP_TARGET=myperl
make myperl
make inst_perl</PRE
><p class="para">or say:</P
><pre class="programlisting">perl Makefile.PL
make myperl MAP_TARGET=myperl
make inst_perl MAP_TARGET=myperl</PRE
><p class="para">In either case, you will be asked to confirm the invocation of the
<code class="literal">inst_perl</CODE
> target, since this invocation is likely to overwrite
your existing Perl binary in <code class="literal">INSTALLBIN</CODE
>.</P
><p class="para">By default <em class="emphasis">make inst_perl</EM
> documents what has been
done in the file given by <code class="literal">$(INSTALLARCHLIB)/perllocal.pod</CODE
>.  This
behavior can be bypassed by calling <em class="emphasis">make pure_inst_perl</EM
>.</P
><p class="para">Sometimes you might want to build a statically linked Perl even though
your system supports dynamic loading.  In this case you may explicitly
set the linktype:</P
><pre class="programlisting">perl Makefile.PL LINKTYPE=static</PRE
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PERL2-CH-7-SECT-1.25">7.2.18.7 Attributes you can set</A
></H4
><p class="para">The following attributes can be specified as arguments to
<code class="literal">WriteMakefile()</CODE
> or as <code class="literal">NAME=VALUE</CODE
> pairs on the command
line.  We give examples below in the form they would appear in your
<em class="emphasis">Makefile.PL</EM
>, that is, as though passed as a named parameter to
<code class="literal">WriteMakefile()</CODE
> (including the comma that comes after it).</P
><dl class="variablelist"><dt class="term"><code class="literal">C</CODE
>   </DT
><dd class="listitem"><p class="para">A reference to an array of *<em class="emphasis">.c</EM
> filenames.  It's initialized by doing a
directory scan and by derivation from the values of the <code class="literal">XS</CODE
>
attribute hash.  This is not currently used by MakeMaker but may be
handy in <em class="emphasis">Makefile.PL</EM
>s.</P
></DD
><dt class="term"><code class="literal">CONFIG</CODE
></DT
><dd class="listitem"><p class="para">An array reference containing a list of attributes to fetch from
<code class="literal">%Config</CODE
>.  For example:</P
><pre class="programlisting">CONFIG =&gt; [qw(archname manext)],</PRE
><p class="para">defines
<code class="literal">ARCHNAME</CODE
> and <code class="literal">MANEXT</CODE
> from <em class="emphasis">config.sh</EM
>.  MakeMaker will
automatically add the following values to <code class="literal">CONFIG</CODE
>:</P
><pre class="programlisting">ar            dlext        ldflags     ranlib
cc            dlsrc        libc        sitelibexp
cccdlflags    ld           lib_ext     sitearchexp
ccdlflags     lddlflags    obj_ext     so</PRE
></DD
><dt class="term"><code class="literal">CONFIGURE</CODE
></DT
><dd class="listitem"><p class="para">A reference to a subroutine returning a hash reference.  The
hash may contain further attributes, for example, <code class="literal">{LIBS =&gt; ...}</CODE
>,
that have to be determined by some evaluation method.  Be careful,
because any attributes defined this way will override hints and
<code class="literal">WriteMakefile()</CODE
> parameters (but not command-line arguments).</P
></DD
><dt class="term"><code class="literal">DEFINE</CODE
></DT
><dd class="listitem"><p class="para">An attribute containing additional defines, such as <code class="literal">-DHAVE_UNISTD_H</CODE
>.</P
></DD
><dt class="term"><code class="literal">DIR</CODE
></DT
><dd class="listitem"><p class="para">A reference to an array of subdirectories containing
<em class="emphasis">Makefile.PL</EM
>s.  For example, SDBM_FILE has:</P
><pre class="programlisting">DIR =&gt; ['sdbm'],</PRE
><p class="para">MakeMaker will automatically do recursive MakeMaking if subdirectories
contain <em class="emphasis">Makefile.PL</EM
> files.  A separate MakeMaker class is
generated for each subdirectory, so each MakeMaker object can override
methods using the fake <code class="literal">MY::</CODE
> class (see below) without
interfering with other MakeMaker objects.  You don't even need a
<em class="emphasis">Makefile.PL</EM
> in the top level directory if you pass one in via
<b class="emphasis.bold">-M</B
> and <b class="emphasis.bold">-e</B
>:</P
><pre class="programlisting">perl -MExtUtils::MakeMaker -e 'WriteMakefile()'</PRE
></DD
><dt class="term"><code class="literal">DISTNAME</CODE
></DT
><dd class="listitem"><p class="para">Your name for distributing the package (by <em class="emphasis">tar</EM
> file).  This defaults to
<code class="literal">NAME</CODE
> below.</P
></DD
><dt class="term"><code class="literal">DL_FUNCS</CODE
></DT
><dd class="listitem"><p class="para">A reference to a hash of symbol names for routines to be made available
as universal symbols.  Each key/value pair consists of the package name
and an array of routine names in that package.  This attribute is used
only under AIX (export lists) and VMS (linker options) at present.  The
routine names supplied will be expanded in the same way as <code class="literal">XSUB</CODE
>
names are expanded by the <code class="literal">XS</CODE
> attribute.</P
><p class="para">The default key/value pair
looks like this:</P
><pre class="programlisting">&quot;$PKG&quot; =&gt; [&quot;boot_$PKG&quot;]</PRE
><p class="para">For a pair of packages named RPC and NetconfigPtr, you might, for
example, set it to this:</P
><pre class="programlisting">DL_FUNCS =&gt; {
    RPC          =&gt; [qw(boot_rpcb rpcb_gettime getnetconfigent)],
    NetconfigPtr =&gt; ['DESTROY'],
},</PRE
></DD
><dt class="term"><code class="literal">DL_VARS</CODE
></DT
><dd class="listitem"><p class="para">An array of symbol names for variables to be made available as
universal symbols.  It's used only under AIX (export lists) and VMS
(linker options) at present.  Defaults to <code class="literal">[]</CODE
>.  A typical
value might look like this:</P
><pre class="programlisting">DL_VARS =&gt; [ qw( Foo_version Foo_numstreams Foo_tree ) ],</PRE
></DD
><dt class="term"><code class="literal">EXE_FILES</CODE
></DT
><dd class="listitem"><p class="para">A reference to an array of executable files.  The files will be copied to the
<code class="literal">INST_EXE</CODE
> directory.  A <em class="emphasis">make realclean</EM
> command will delete
them from there again.</P
></DD
><dt class="term"><code class="literal">FIRST_MAKEFILE</CODE
></DT
><dd class="listitem"><p class="para">The name of the <em class="emphasis">Makefile</EM
> to be produced.  Defaults to the contents
of <code class="literal">MAKEFILE</CODE
>, but can be overridden.  This is used for the second
<em class="emphasis">Makefile</EM
> that will be produced for the <code class="literal">MAP_TARGET</CODE
>.</P
></DD
><dt class="term"><code class="literal">FULLPERL</CODE
></DT
><dd class="listitem"><p class="para">A Perl binary able to run this extension.</P
></DD
><dt class="term"><code class="literal">H</CODE
>   </DT
><dd class="listitem"><p class="para">A reference to an array of *<em class="emphasis">.h</EM
> filenames.  Similar to <code class="literal">C</CODE
>.</P
></DD
><dt class="term"><code class="literal">INC</CODE
></DT
><dd class="listitem"><p class="para">Directories containing include files, in <b class="emphasis.bold">-I</B
> form.  For example:</P
><pre class="programlisting">INC =&gt; &quot;-I/usr/5include -I/path/to/inc&quot;,</PRE
></DD
><dt class="term"><code class="literal">INSTALLARCHLIB</CODE
></DT
><dd class="listitem"><p class="para">Used by <em class="emphasis">make install</EM
>, which copies files from
<code class="literal">INST_ARCHLIB</CODE
> to this directory if
<code class="literal">INSTALLDIRS</CODE
> is set to &quot;<code class="literal">perl</CODE
>&quot;.</P
></DD
><dt class="term"><code class="literal">INSTALLBIN</CODE
></DT
><dd class="listitem"><p class="para">Used by <em class="emphasis">make install</EM
>, which copies files from
<code class="literal">INST_EXE</CODE
> to this directory.</P
></DD
><dt class="term"><code class="literal">INSTALLDIRS</CODE
></DT
><dd class="listitem"><p class="para">Determines which of the two sets of installation directories to
choose: <em class="emphasis">installprivlib</EM
> and <em class="emphasis">installarchlib</EM
> versus
<em class="emphasis">installsitelib</EM
> and <em class="emphasis">installsitearch</EM
>.  The first pair is chosen
with <code class="literal">INSTALLDIRS=perl</CODE
>, the second with <code class="literal">INSTALLDIRS=site</CODE
>.
The default is &quot;<code class="literal">site</CODE
>&quot;.</P
></DD
><dt class="term"><code class="literal">INSTALLMAN1DIR</CODE
></DT
><dd class="listitem"><p class="para">This directory gets the command manpages at <em class="emphasis">make
install</EM
> time. It defaults to
<code class="literal">$Config{installman1dir}</CODE
>.</P
></DD
><dt class="term"><code class="literal">INSTALLMAN3DIR</CODE
></DT
><dd class="listitem"><p class="para">This directory gets the library manpages at <em class="emphasis">make
install</EM
> time. It defaults to
<code class="literal">$Config{installman3dir}</CODE
>.</P
></DD
><dt class="term"><code class="literal">INSTALLPRIVLIB</CODE
></DT
><dd class="listitem"><p class="para">Used by <em class="emphasis">make install</EM
>, which copies files from
<code class="literal">INST_LIB</CODE
> to this directory if <code class="literal">INSTALLDIRS</CODE
>
is set to &quot;<code class="literal">perl</CODE
>&quot;.</P
></DD
><dt class="term"><code class="literal">INSTALLSITELIB</CODE
></DT
><dd class="listitem"><p class="para">Used by <em class="emphasis">make install</EM
>, which copies files from
<code class="literal">INST_LIB</CODE
> to this directory if <code class="literal">INSTALLDIRS</CODE
>
is set to &quot;<code class="literal">site</CODE
>&quot; (default).</P
></DD
><dt class="term"><code class="literal">INSTALLSITEARCH</CODE
></DT
><dd class="listitem"><p class="para">Used by <em class="emphasis">make install</EM
>, which copies files from
<code class="literal">INST_ARCHLIB</CODE
> to this directory if
<code class="literal">INSTALLDIRS</CODE
> is set to &quot;<code class="literal">site</CODE
>&quot;
(default).</P
></DD
><dt class="term"><code class="literal">INST_ARCHLIB</CODE
></DT
><dd class="listitem"><p class="para">Same as <code class="literal">INST_LIB</CODE
>, but for architecture-dependent files.</P
></DD
><dt class="term"><code class="literal">INST_EXE</CODE
></DT
><dd class="listitem"><p class="para">Directory where executable scripts should be staged during running of
<em class="emphasis">make</EM
>.  Defaults to <code class="literal">./blib/bin</CODE
>, just to
have a dummy location during testing.  <em class="emphasis">make install</EM
> will
copy the files in <code class="literal">INST_EXE</CODE
> to <code class="literal">INSTALLBIN</CODE
>.</P
></DD
><dt class="term"><code class="literal">INST_LIB</CODE
></DT
><dd class="listitem"><p class="para">Directory where we put library files of this extension while building
it.</P
></DD
><dt class="term"><code class="literal">INST_MAN1DIR</CODE
></DT
><dd class="listitem"><p class="para">Directory to hold the command manpages at <em class="emphasis">make</EM
> time.</P
></DD
><dt class="term"><code class="literal">INST_MAN3DIR</CODE
></DT
><dd class="listitem"><p class="para">Directory to hold the library manpages at <em class="emphasis">make</EM
> time</P
></DD
><dt class="term"><code class="literal">LDFROM</CODE
></DT
><dd class="listitem"><p class="para">Defaults to <code class="literal">$(OBJECT)</CODE
> and is used in the <em class="emphasis">ld</EM
>(1) command to specify
what files to link/load from.  (Also see <code class="literal">dynamic_lib</CODE
> later for how to
specify <em class="emphasis">ld</EM
> flags.)</P
></DD
><dt class="term"><code class="literal">LIBPERL_A</CODE
></DT
><dd class="listitem"><p class="para">The filename of the Perl library that will be used together with this
extension.  Defaults to <em class="emphasis">libperl.a</EM
>.</P
></DD
><dt class="term"><code class="literal">LIBS</CODE
></DT
><dd class="listitem"><p class="para">An anonymous array of alternative library
specifications to be searched for (in order) until
at least one library is found. </P
><p class="para">For example:</P
><pre class="programlisting">LIBS =&gt; [&quot;-lgdbm&quot;, &quot;-ldbm -lfoo&quot;, &quot;-L/path -ldbm.nfs&quot;],</PRE
><p class="para">Note that any element of the array
contains a complete set of arguments for the <em class="emphasis">ld</EM
>
command.  So do not specify:</P
><pre class="programlisting">LIBS =&gt; [&quot;-ltcl&quot;, &quot;-ltk&quot;, &quot;-lX11&quot;],</PRE
><p class="para">See <em class="emphasis">NDBM_File/Makefile.PL</EM
> for an example where an array is needed.  If
you specify a scalar as in:</P
><pre class="programlisting">LIBS =&gt; &quot;-ltcl -ltk -lX11&quot;,</PRE
><p class="para">MakeMaker will turn it into an array with one element.</P
></DD
><dt class="term"><code class="literal">LINKTYPE</CODE
></DT
><dd class="listitem"><p class="para">&quot;<code class="literal">static</CODE
>&quot; or
&quot;<code class="literal">dynamic</CODE
>&quot; (the latter is the default unless
<code class="literal">usedl=undef</CODE
> in <em class="emphasis">config.sh</EM
>).  Should only
be used to force static linking.  (Also see <code class="literal">linkext</CODE
>, later in
this chapter).</P
></DD
><dt class="term"><code class="literal">MAKEAPERL</CODE
></DT
><dd class="listitem"><p class="para">Boolean that tells MakeMaker to include the rules for
making a Perl binary. This is handled automatically as a switch by
MakeMaker. The user normally does not need it.</P
></DD
><dt class="term"><code class="literal">MAKEFILE</CODE
></DT
><dd class="listitem"><p class="para">The name of the <em class="emphasis">Makefile</EM
> to be produced.</P
></DD
><dt class="term"><code class="literal">MAN1PODS</CODE
></DT
><dd class="listitem"><p class="para">A reference to a hash of POD-containing files.  MakeMaker will default
this to all <code class="literal">EXE_FILES</CODE
> files that include POD directives.  The
files listed here will be converted to manpages and installed as
requested at <em class="emphasis">Configure</EM
> time.</P
></DD
><dt class="term"><code class="literal">MAN3PODS</CODE
></DT
><dd class="listitem"><p class="para">A reference to a hash of <em class="emphasis">.pm</EM
> and <em class="emphasis">.pod</EM
> files.  MakeMaker will
default this to all <em class="emphasis">.pod</EM
> and any <em class="emphasis">.pm</EM
> files that include
POD directives.  The files listed here will be converted to manpages
and installed as requested at <em class="emphasis">Configure</EM
> time.</P
></DD
><dt class="term"><code class="literal">MAP_TARGET</CODE
></DT
><dd class="listitem"><p class="para">If it is intended that a new Perl binary be produced, this variable
holds the name for that binary.  Defaults to <em class="emphasis">perl</EM
>.</P
></DD
><dt class="term"><code class="literal">MYEXTLIB</CODE
></DT
><dd class="listitem"><p class="para">If the extension links to a library that it builds, set this to the
name of the library (see SDBM_File).</P
></DD
><dt class="term"><code class="literal">NAME</CODE
></DT
><dd class="listitem"><p class="para">Perl module name for this extension (for example, <code class="literal">DBD::Oracle</CODE
>).
This will default to the directory name, but should really be explicitly
defined in the <em class="emphasis">Makefile.PL</EM
>.</P
></DD
><dt class="term"><code class="literal">NEEDS_LINKING</CODE
></DT
><dd class="listitem"><p class="para">MakeMaker will figure out whether an extension contains linkable code
anywhere down the directory tree, and will set this variable
accordingly.  But you can speed it up a very little bit if you define
this Boolean variable yourself.</P
></DD
><dt class="term"><code class="literal">NOECHO</CODE
></DT
><dd class="listitem"><p class="para">Governs <em class="emphasis">make</EM
>'s <code class="literal">@</CODE
> (echoing) feature.  By setting <code class="literal">NOECHO</CODE
>
to an empty string, you can generate a
<em class="emphasis">Makefile</EM
> that echos all commands.  Mainly used in debugging MakeMaker
itself.</P
></DD
><dt class="term"><code class="literal">NORECURS</CODE
></DT
><dd class="listitem"><p class="para">A Boolean that inhibits the automatic descent into subdirectories (see
<code class="literal">DIR</CODE
> above).  For example:</P
><pre class="programlisting">NORECURS =&gt; 1,</PRE
></DD
><dt class="term"><code class="literal">OBJECT</CODE
></DT
><dd class="listitem"><p class="para">A string containing a list of object files, defaulting to
<code class="literal">$(BASEEXT)$(OBJ_EXT)</CODE
>.  But it can be a long string containing
all object files.  For example:</P
><pre class="programlisting">OBJECT =&gt; &quot;tkpBind.o tkpButton.o tkpCanvas.o&quot;,</PRE
></DD
><dt class="term"><code class="literal">PERL</CODE
></DT
><dd class="listitem"><p class="para">Perl binary for tasks that can be done by <em class="emphasis">miniperl</EM
>.</P
></DD
><dt class="term"><code class="literal">PERLMAINCC</CODE
></DT
><dd class="listitem"><p class="para">The command line that is able to compile <em class="emphasis">perlmain.c</EM
>.  Defaults
to <code class="literal">$(CC)</CODE
>.</P
></DD
><dt class="term"><code class="literal">PERL_ARCHLIB</CODE
></DT
><dd class="listitem"><p class="para">Same as <code class="literal">PERL_LIB</CODE
> for architecture-dependent files.</P
></DD
><dt class="term"><code class="literal">PERL_LIB</CODE
></DT
><dd class="listitem"><p class="para">The directory containing the Perl library to use.</P
></DD
><dt class="term"><code class="literal">PERL_SRC</CODE
></DT
><dd class="listitem"><p class="para">The directory containing the Perl source code.  Use of this should be
avoided, since it may be undefined.</P
></DD
><dt class="term"><code class="literal">PL_FILES</CODE
></DT
><dd class="listitem"><p class="para">A reference to hash of files to be processed as Perl programs.  By default
MakeMaker will turn the names of any *<em class="emphasis">.PL</EM
> files it finds (except
<em class="emphasis">Makefile.PL</EM
>) into keys, and use the basenames of these files as values.
For example:</P
><pre class="programlisting">PL_FILES =&gt; {'whatever.PL' =&gt; 'whatever'},</PRE
><p class="para">This turns into a Makefile entry resembling:</P
><pre class="programlisting">all :: whatever

whatever :: whatever.PL
        $(PERL) -I$(INST_ARCHLIB) -I$(INST_LIB) \
                -I$(PERL_ARCHLIB) -I$(PERL_LIB) whatever.PL</PRE
><p class="para">You'll note that there's no I/O redirection into <em class="emphasis">whatever</EM
> there.
The *<em class="emphasis">.PL</EM
> files are expected to produce output to the target files
themselves.</P
></DD
><dt class="term"><code class="literal">PM</CODE
>   </DT
><dd class="listitem"><p class="para">A reference to a hash of <em class="emphasis">.pm</EM
> files and
<em class="emphasis">.pl</EM
> files to be installed. For example:</P
><pre class="programlisting">PM =&gt; {'name_of_file.pm' =&gt; '$(INST_LIBDIR)/install_as.pm'},</PRE
><p class="para">By default this includes *<em class="emphasis">.pm</EM
> and
*<em class="emphasis">.pl</EM
>.  If a <em class="emphasis">lib/</EM
> subdirectory exists
and is not listed in <code class="literal">DIR</CODE
> (above) then any
*<em class="emphasis">.pm</EM
> and *<em class="emphasis">.pl</EM
> files it contains will
also be included by default.  Defining <code class="literal">PM</CODE
> in the
<em class="emphasis">Makefile.PL</EM
> will override <code class="literal">PMLIBDIRS</CODE
>.</P
></DD
><dt class="term"><code class="literal">PMLIBDIRS</CODE
></DT
><dd class="listitem"><p class="para">A reference to an array of subdirectories that contain library files.
Defaults to:</P
><pre class="programlisting">PMLIBDIRS =&gt; [ 'lib', '$(BASEEXT)' ],</PRE
><p class="para">The directories will be scanned and any files
they contain will be installed in the corresponding location in the
library.  A <code class="literal">libscan()</CODE
> method may be used to alter the behavior.
Defining <code class="literal">PM</CODE
> in the <em class="emphasis">Makefile.PL</EM
> will override <code class="literal">PMLIBDIRS</CODE
>.</P
></DD
><dt class="term"><code class="literal">PREFIX</CODE
></DT
><dd class="listitem"><p class="para">May be used to set the three <code class="literal">INSTALL*</CODE
> attributes in one go (except for
probably <code class="literal">INSTALLMAN1DIR</CODE
> if it is not below <code class="literal">PREFIX</CODE
> according to
<code class="literal">%Config</CODE
>).  They will have <code class="literal">PREFIX</CODE
> as a common directory node
and will branch from that node into <code class="literal">lib/</CODE
>, <code class="literal">lib/ARCHNAME</CODE
>
or whatever <em class="emphasis">Configure</EM
> decided at the build time of your Perl (unless
you override one of them, of course).</P
></DD
><dt class="term"><code class="literal">PREREQ</CODE
></DT
><dd class="listitem"><p class="para">A placeholder, not yet implemented.  Will eventually be a hash
reference: the keys of the hash are names of modules that need to be
available to run this extension (for example, Fcntl for SDBM_File); the
values of the hash are the desired versions of the modules.</P
></DD
><dt class="term"><code class="literal">SKIP</CODE
></DT
><dd class="listitem"><p class="para">An array reference specifying the names of sections of the
<em class="emphasis">Makefile</EM
> not to write.  For example:</P
><pre class="programlisting">SKIP =&gt; [qw(name1 name2)],</PRE
></DD
><dt class="term"><code class="literal">TYPEMAPS</CODE
></DT
><dd class="listitem"><p class="para">A reference to an array of typemap filenames.  (Typemaps are used by the
XS preprocessing system.)  Use this when the typemaps are
in some directory other than the current directory or when they are
not named <em class="emphasis">typemap</EM
>.  The last typemap in the list takes
precedence.  A typemap in the current directory has highest
precedence, even if it isn't listed in <code class="literal">TYPEMAPS</CODE
>.  The default system
typemap has lowest precedence.</P
></DD
><dt class="term"><code class="literal">VERSION</CODE
></DT
><dd class="listitem"><p class="para">Your version number for distributing the package.  This number defaults to
0.1.</P
></DD
><dt class="term"><code class="literal">VERSION_FROM</CODE
></DT
><dd class="listitem"><p class="para">Instead of specifying the <code class="literal">VERSION</CODE
> in the <em class="emphasis">Makefile.PL</EM
>, you can let
MakeMaker parse a file to determine the version number.  The parsing
routine requires that the file named by <code class="literal">VERSION_FROM</CODE
> contain one
single line to compute the version number.  The first line in the file
that contains the regular expression:</P
><pre class="programlisting">/(\$[\w:]*\bVERSION)\b.*=/</PRE
><p class="para">will be evaluated with <a class="xref" href="ch03_032.htm#PERL2-CMD-EVAL" title="eval"><b class="xref.cmd">eval</B
></A
> and the value of the named variable
after the <a class="xref" href="ch03_032.htm#PERL2-CMD-EVAL" title="eval"><b class="xref.cmd">eval</B
></A
> will be assigned to the <code class="literal">VERSION</CODE
> attribute of the
MakeMaker object.  The following lines will be parsed satisfactorily:</P
><pre class="programlisting">$VERSION = '1.00';
( $VERSION ) = '$Revision: 1.64 $ ' =~ /\$Revision:\s+([^\s]+)/;
$FOO::VERSION = '1.10';</PRE
><p class="para">but these will fail:</P
><pre class="programlisting">my $VERSION = '1.01';
local $VERSION = '1.02';
local $FOO::VERSION = '1.30';</PRE
><p class="para">The file named in <code class="literal">VERSION_FROM</CODE
> is added as a dependency to the
<em class="emphasis">Makefile</EM
> in order to guarantee that the <em class="emphasis">Makefile</EM
> contains
the correct <code class="literal">VERSION</CODE
> attribute after a change of the file.</P
></DD
><dt class="term"><code class="literal">XS</CODE
>   </DT
><dd class="listitem"><p class="para">A hash reference of <em class="emphasis">.xs</EM
> files.  MakeMaker will default this.
For example:</P
><pre class="programlisting">XS =&gt; {'name_of_file.xs' =&gt; 'name_of_file.c'},</PRE
><p class="para">The *<em class="emphasis">.c</EM
> files will automatically be included in the list of files
deleted by a <em class="emphasis">make clean</EM
>.</P
></DD
><dt class="term"><code class="literal">XSOPT</CODE
></DT
><dd class="listitem"><p class="para">A string of options to pass to <em class="emphasis">xsubpp</EM
> (the XS preprocessor).  This
might include <code class="literal">-C++</CODE
> or <code class="literal">-extern</CODE
>.  Do not include typemaps
here; the <code class="literal">TYPEMAP</CODE
> parameter exists for that purpose.</P
></DD
><dt class="term"><code class="literal">XSPROTOARG</CODE
></DT
><dd class="listitem"><p class="para">May be set to an empty string, which is identical to <code class="literal">-prototypes</CODE
>, or
<code class="literal">-noprototypes</CODE
>.
MakeMaker defaults to the empty string.</P
></DD
><dt class="term"><code class="literal">XS_VERSION</CODE
></DT
><dd class="listitem"><p class="para">Your version number for the <em class="emphasis">.xs</EM
> file of this package.  This defaults
to the value of the <code class="literal">VERSION</CODE
> attribute.</P
></DD
></DL
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PERL2-CH-7-SECT-1.26">7.2.18.8 Additional lowercase attributes</A
></H4
><p class="para">There are additional lowercase attributes that you can use to pass
parameters to the methods that spit out particular portions
of the <em class="emphasis">Makefile</EM
>. These attributes are not normally required.</P
><dl class="variablelist"><dt class="term"><code class="literal">clean</CODE
></DT
><dd class="listitem"><p class="para">Extra files to clean.</P
><pre class="programlisting">clean =&gt; {FILES =&gt; &quot;*.xyz foo&quot;},</PRE
></DD
><dt class="term"><code class="literal">depend</CODE
></DT
><dd class="listitem"><p class="para">Extra dependencies.</P
><pre class="programlisting">depend =&gt; {<code class="replaceable"><i>ANY_TARGET</I
></CODE
> =&gt; <code class="replaceable"><i>ANY_DEPENDENCY</I
></CODE
>, ...},</PRE
></DD
><dt class="term"><code class="literal">dist</CODE
></DT
><dd class="listitem"><p class="para">Options for distribution (see &quot;Distribution Support&quot; below).</P
><pre class="programlisting">dist =&gt; {
    TARFLAGS =&gt; 'cvfF',
    COMPRESS =&gt; 'gzip',
    SUFFIX =&gt; 'gz',
    SHAR =&gt; 'shar -m',
    DIST_CP =&gt; 'ln',
},</PRE
><p class="para">If you specify <code class="literal">COMPRESS</CODE
>, then <code class="literal">SUFFIX</CODE
>
should also be altered, since it is needed in order to specify for
<em class="emphasis">make</EM
> the target file of the compression.  Setting
<code class="literal">DIST_CP</CODE
> to &quot;<code class="literal">ln</CODE
>&quot; can
be useful if you need to
preserve the timestamps on your files.  <code class="literal">DIST_CP</CODE
> can take the
values &quot;<code class="literal">cp</CODE
>&quot; (copy the file),
&quot;<code class="literal">ln</CODE
>&quot; (link the file), or
&quot;<code class="literal">best</CODE
>&quot; (copy symbolic links and link the rest).
Default is &quot;<code class="literal">best</CODE
>&quot;.</P
></DD
><dt class="term"><code class="literal">dynamic_lib</CODE
></DT
><dd class="listitem"><p class="para">Options for dynamic library support.</P
><pre class="programlisting">dynamic_lib =&gt; {
    ARMAYBE =&gt; 'ar',
    OTHERLDFLAGS =&gt; '...',
    INST_DYNAMIC_DEP =&gt; '...',
},</PRE
></DD
><dt class="term"><code class="literal">installpm</CODE
></DT
><dd class="listitem"><p class="para">Some installation options having to do with AutoSplit.</P
><pre class="programlisting">{SPLITLIB =&gt; '$(INST_LIB)' (default) or '$(INST_ARCHLIB)'}</PRE
></DD
><dt class="term"><code class="literal">linkext</CODE
></DT
><dd class="listitem"><p class="para">Linking style.</P
><pre class="programlisting">linkext =&gt; {LINKTYPE =&gt; 'static', 'dynamic', or &quot;&quot;},</PRE
><p class="para">Extensions that have nothing but <em class="emphasis">*.pm</EM
> files used to have to say:</P
><pre class="programlisting">linkext =&gt; {LINKTYPE =&gt; &quot;&quot;},</PRE
><p class="para">with Pre-5.0 MakeMakers.  With Version 5.00 of MakeMaker such a line
can be deleted safely.  MakeMaker recognizes when there's nothing to
be linked.</P
></DD
><dt class="term"><code class="literal">macro</CODE
></DT
><dd class="listitem"><p class="para">Extra macros to define.</P
><pre class="programlisting">macro =&gt; {ANY_MACRO =&gt; ANY_VALUE, ...},</PRE
></DD
><dt class="term"><code class="literal">realclean</CODE
></DT
><dd class="listitem"><p class="para">Extra files to really clean.</P
><pre class="programlisting">{FILES =&gt; '$(INST_ARCHAUTODIR)/*.xyz'}</PRE
></DD
></DL
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PERL2-CH-7-SECT-1.27">7.2.18.9 Useful Makefile macros</A
></H4
><p class="para">Here are some useful macros that you probably shouldn't redefine because
they're derivative.</P
><dl class="variablelist"><dt class="term"><code class="literal">FULLEXT</CODE
></DT
><dd class="listitem"><p class="para">Pathname for extension directory (for example, <em class="emphasis">DBD/Oracle</EM
>).</P
></DD
><dt class="term"><code class="literal">BASEEXT</CODE
></DT
><dd class="listitem"><p class="para">Basename part of <code class="literal">FULLEXT</CODE
>.  May be just equal to <code class="literal">FULLEXT</CODE
>.</P
></DD
><dt class="term"><code class="literal">ROOTEXT</CODE
></DT
><dd class="listitem"><p class="para">Directory part of <code class="literal">FULLEXT</CODE
> with leading slash (for example, <em class="emphasis">/DBD</EM
>)</P
></DD
><dt class="term"><code class="literal">INST_LIBDIR</CODE
></DT
><dd class="listitem"><p class="para"><code class="literal">$(INST_LIB)$(ROOTEXT)</CODE
></P
></DD
><dt class="term"><code class="literal">INST_AUTODIR</CODE
></DT
><dd class="listitem"><p class="para"><code class="literal">$(INST_LIB)/auto/$(FULLEXT)</CODE
></P
></DD
><dt class="term"><code class="literal">INST_ARCHAUTODIR</CODE
></DT
><dd class="listitem"><p class="para"><code class="literal">$(INST_ARCHLIB)/auto/$(FULLEXT)</CODE
></P
></DD
></DL
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PERL2-CH-7-SECT-1.28">7.2.18.10 Overriding MakeMaker methods</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-21464"></A
>If you cannot achieve the desired <em class="emphasis">Makefile</EM
> behavior by specifying
attributes, you may define private subroutines in the <em class="emphasis">Makefile.PL</EM
>.
Each subroutine returns the text it wishes to have written to
the <em class="emphasis">Makefile</EM
>.  To override a section of the <em class="emphasis">Makefile</EM
> you can
use one of two styles.  You can just return a new value:</P
><pre class="programlisting">sub MY::c_o { &quot;new literal text&quot; }</PRE
><p class="para">or you can edit the default by saying something like:</P
><pre class="programlisting">sub MY::c_o {
    my $self = shift;
    local *c_o;
    $_=$self-&gt;MM::c_o;
    s/old text/new text/;
    $_;
}</PRE
><p class="para">Both methods above are available for backward compatibility with
older <em class="emphasis">Makefile.PL</EM
>s.</P
><p class="para">If you still need a different solution, try to develop another subroutine that
better fits your needs and then submit the diffs to either
<a class="email" href="mailto:perl5-porters@nicoh.com">perl5-porters@nicoh.com</A
> or
<a class="systemitem.newsgroup" href="../../../WebStripper/protected.html#link=news:comp.lang.perl.modules">comp.lang.perl.modules</A
> as appropriate.</P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PERL2-CH-7-SECT-1.29">7.2.18.11 Distribution support</A
></H4
><p class="para">For authors of extensions, MakeMaker provides several
<em class="emphasis">Makefile</EM
> targets.  Most of the support comes from the
ExtUtils::Manifest module, where additional documentation can be found.  Note
that a <em class="emphasis">MANIFEST</EM
> file is basically just a list of filenames
to be shipped with the kit to build the extension.</P
><dl class="variablelist"><dt class="term"><em class="emphasis">make distcheck</EM
></DT
><dd class="listitem"><p class="para">Reports which files are below the build directory but not in the
<em class="emphasis">MANIFEST</EM
> file and vice versa.  (See
<code class="literal">ExtUtils::Manifest::fullcheck()</CODE
> for details.)</P
></DD
><dt class="term"><em class="emphasis">make skipcheck</EM
></DT
><dd class="listitem"><p class="para">Reports which files are skipped due to the entries in the
<em class="emphasis">MANIFEST.SKIP</EM
> file.  (See <code class="literal">ExtUtils::Manifest::skipcheck()</CODE
> for
details).</P
></DD
><dt class="term"><em class="emphasis">make distclean</EM
></DT
><dd class="listitem"><p class="para">Does a <em class="emphasis">realclean</EM
> first and then the <em class="emphasis">distcheck</EM
>.
Note that this is not
needed to build a new distribution as long as you are sure that the
<em class="emphasis">MANIFEST</EM
> file is OK.</P
></DD
><dt class="term"><em class="emphasis">make manifest</EM
></DT
><dd class="listitem"><p class="para">Rewrites the <em class="emphasis">MANIFEST</EM
> file, adding all remaining files found.  (See
<code class="literal">ExtUtils::Manifest::mkmanifest()</CODE
> for details.)</P
></DD
><dt class="term"><em class="emphasis">make distdir</EM
></DT
><dd class="listitem"><p class="para">Copies all files that are in the <em class="emphasis">MANIFEST</EM
> file to a newly created
directory with the name <code class="literal">$(DISTNAME)-$(VERSION)</CODE
>.  If that directory
exists, it will be removed first.</P
></DD
><dt class="term"><em class="emphasis">make disttest</EM
></DT
><dd class="listitem"><p class="para">Makes <em class="emphasis">distdir</EM
> first, and runs <em class="emphasis">perl
Makefile.PL</EM
>, <em class="emphasis">make</EM
>, and <em class="emphasis">make
test</EM
> in that directory.</P
></DD
><dt class="term"><em class="emphasis">make tardist</EM
></DT
><dd class="listitem"><p class="para">First does a command <code class="literal">$(PREOP)</CODE
>, which defaults to a null
command.  Does a <em class="emphasis">make distdir</EM
> next and runs
<em class="emphasis">tar</EM
>(1) on that directory into a tarfile.  Then
deletes the <em class="emphasis">distdir</EM
>.  Finishes with a command
<code class="literal">$(POSTOP)</CODE
>, which defaults to a null command.</P
></DD
><dt class="term"><em class="emphasis">make dist</EM
></DT
><dd class="listitem"><p class="para">Defaults to <code class="literal">$(DIST_DEFAULT)</CODE
>, which in turn defaults to
<em class="emphasis">tardist</EM
>.</P
></DD
><dt class="term"><em class="emphasis">make uutardist</EM
></DT
><dd class="listitem"><p class="para">Runs a <em class="emphasis">tardist</EM
> first and <em class="emphasis">uuencode</EM
>s the tarfile.</P
></DD
><dt class="term"><em class="emphasis">make shdist</EM
></DT
><dd class="listitem"><p class="para">First does a command <code class="literal">$(PREOP)</CODE
>, which defaults to a null
command.  Does a <em class="emphasis">distdir</EM
> next and runs
<em class="emphasis">shar</EM
> on that directory into a sharfile.  Then deletes the
<em class="emphasis">distdir</EM
>.  Finishes with a command <code class="literal">$(POSTOP)</CODE
>, which defaults
to a null command.  Note:  for <em class="emphasis">shdist</EM
> to work properly, a
<em class="emphasis">shar</EM
> program that can handle directories is mandatory.</P
></DD
><dt class="term"><em class="emphasis">make ci</EM
></DT
><dd class="listitem"><p class="para">Does a <code class="literal">$(CI)</CODE
> and a <code class="literal">$(RCS_LABEL)</CODE
> on all files in the
<em class="emphasis">MANIFEST</EM
> file.</P
></DD
></DL
><p class="para">Customization of the distribution targets can be done by specifying a hash
reference to the <code class="literal">dist</CODE
> attribute of the
<code class="literal">WriteMakefile()</CODE
> call.  The following parameters are
recognized:</P
><table class="informaltable" border="1" cellpadding="3"><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1">Parameter</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Default</TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">CI</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">('ci -u')</CODE
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">COMPRESS</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">('compress')</CODE
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">POSTOP</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">('@ :')</CODE
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">PREOP</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">('@ :')</CODE
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">RCS_LABEL</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">('rcs -q -Nv$(VERSION_SYM):')</CODE
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">SHAR</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">('shar')</CODE
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">SUFFIX</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">('Z')</CODE
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">TAR</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">('tar')</CODE
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">TARFLAGS</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">('cvf')</CODE
></TD
></TR
></TBODY
></TABLE
><p class="para">An example:</P
><pre class="programlisting">WriteMakefile( 'dist' =&gt; { COMPRESS=&gt;&quot;gzip&quot;, SUFFIX=&gt;&quot;gz&quot; })</PRE
><a class="indexterm" name="AUTOID-21631"></A
><a class="indexterm" name="AUTOID-21632"></A
><a class="indexterm" name="AUTOID-21633"></A
><a class="indexterm" name="AUTOID-21634"></A
><a class="indexterm" name="AUTOID-21635"></A
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT2" href="ch07_017.htm#AUTOID-20525" title="7.2.17 ExtUtils::Liblist&nbsp;- Determine Libraries to Use and How to Use Them"><img src="../gifs/txtpreva.gif" alt="Previous: 7.2.17 ExtUtils::Liblist&nbsp;- Determine Libraries to Use and How to Use Them" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Programming Perl"><img src="../gifs/txthome.gif" alt="Programming Perl" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT2" href="ch07_019.htm#AUTOID-21636" title="7.2.19 ExtUtils::Manifest&nbsp;- Utilities to Write and Check a MANIFEST File"><img src="../gifs/txtnexta.gif" alt="Next: 7.2.19 ExtUtils::Manifest&nbsp;- Utilities to Write and Check a MANIFEST File" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">7.2.17 ExtUtils::Liblist&nbsp;- Determine Libraries to Use and How to Use Them</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">7.2.19 ExtUtils::Manifest&nbsp;- Utilities to Write and Check a MANIFEST File</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
