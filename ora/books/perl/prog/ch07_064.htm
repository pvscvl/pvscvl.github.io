<html><head>
<title>[Chapter 7] 7.2.64 Term::Cap&nbsp;- Terminal Capabilities Interface</TITLE>
<meta name="DC.title" content="Programming Perl"><meta name="DC.creator" content="Larry Wall, Tom Christiansen &amp; Randal L. Schwartz"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T02:04:20Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-149-6" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch07_02.htm" title="7.2 Library Modules"><link rel="prev" href="ch07_063.htm#AUTOID-26910" title="7.2.63 Sys::Syslog&nbsp;- Perl Interface to UNIX syslog(3) Calls"><link rel="next" href="ch07_065.htm#AUTOID-27083" title="7.2.65 Term::Complete&nbsp;- Word Completion Module"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Programming Perl" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Programming Perl"><area shape="RECT" coords="467,0,514,18" href="../search/psrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT2" href="ch07_063.htm#AUTOID-26910" title="7.2.63 Sys::Syslog&nbsp;- Perl Interface to UNIX syslog(3) Calls"><img src="../gifs/txtpreva.gif" alt="Previous: 7.2.63 Sys::Syslog&nbsp;- Perl Interface to UNIX syslog(3) Calls" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch07_01.htm" title="7. The Standard Perl Library">Chapter 7<br>The Standard Perl Library</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT2" href="ch07_065.htm#AUTOID-27083" title="7.2.65 Term::Complete&nbsp;- Word Completion Module"><img src="../gifs/txtnexta.gif" alt="Next: 7.2.65 Term::Complete&nbsp;- Word Completion Module" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT2"><h3 class="sect2"><a class="title" name="AUTOID-26970">7.2.64 Term::Cap&nbsp;- Terminal Capabilities Interface</A
></H3
><pre class="programlisting">require Term::Cap;

$terminal = Tgetent Term::Cap { TERM =&gt; undef, OSPEED =&gt; $ospeed };
$terminal-&gt;Trequire(qw/ce ku kd/);
$terminal-&gt;Tgoto('cm', $col, $row, $FH);
$terminal-&gt;Tputs('dl', $count, $FH);</PRE
><p class="para"><a class="indexterm" name="CH07.TERM1"></A
><a class="indexterm" name="CH07.TERM2"></A
><a class="indexterm" name="CH07.TERM3"></A
><a class="indexterm" name="AUTOID-26980"></A
>These are low-level functions to extract and use capabilities from
a terminal capability (termcap) database.  For general information about
the use of this database, see the <em class="emphasis">termcap</EM
>(5) manpage.</P
><p class="para">The &quot;<code class="literal">new</CODE
>&quot; function of Term::Cap is
<code class="literal">Tgetent()</CODE
>, which extracts the termcap entry for the specified
terminal type and returns a reference to a terminal object.  If the value
associated with the <code class="literal">TERM</CODE
> key in the
<code class="literal">Tgetent()</CODE
> argument list is false or undefined, then it
defaults to the environment variable <code class="literal">TERM</CODE
>.</P
><p class="para"><code class="literal">Tgetent()</CODE
> looks in the environment for a <code class="literal">TERMCAP</CODE
> variable.
If it finds one, and if the value does not begin with a slash and looks
like a termcap entry in which the terminal type name is the same as the
environment string <code class="literal">TERM</CODE
>, then the <code class="literal">TERMCAP</CODE
> string is used
directly as the termcap entry and there is no search for an entry in a termcap
file somewhere.</P
><p class="para">Otherwise, <code class="literal">Tgetent()</CODE
> looks in a sequence of files for the
termcap entry.  The sequence consists of the filename in
<code class="literal">TERMCAP</CODE
>, if any, followed by either the files listed in the
<code class="literal">TERMPATH</CODE
> environment variable, if any, or otherwise the files
<em class="emphasis">$HOME/.termcap</EM
>, <em class="emphasis">/etc/termcap</EM
>, and
<em class="emphasis">/usr/share/misc/termcap</EM
>, in that order.  (Filenames in
<code class="literal">TERMPATH</CODE
> may be separated by either a colon or a space.)
Whenever multiple files are searched and a <code class="literal">tc</CODE
> field occurs in
the requested entry, the entry named in the <code class="literal">tc</CODE
> field must be
found in the same file or one of the succeeding files.  If there is a
<code class="literal">tc</CODE
> field in the <code class="literal">TERMCAP</CODE
> environment
variable string, <code class="literal">Tgetent()</CODE
> continues searching as indicated
above.</P
><p class="para"><a class="indexterm" name="AUTOID-27008"></A
><code class="literal">OSPEED</CODE
> is the terminal output bit rate (often mistakenly
called the baud rate).  <code class="literal">OSPEED</CODE
> can be specified as either a
POSIX termios/SYSV termio speed (where 9600 equals 9600) or an old BSD-style
speed (where 13 equals 9600).  See the next section, &quot;Getting Terminal Output
Speed&quot;, for code illustrating how to obtain the output speed.</P
><p class="para"><code class="literal">Tgetent()</CODE
> returns a reference to a blessed object
(<code class="literal">$terminal</CODE
> in the examples above).  The actual termcap entry
is available as <code class="literal">$terminal-&gt;{TERMCAP}</CODE
>.  Failure to find an
appropriate termcap entry results in a call to <code class="literal">Carp::croak()</CODE
>.</P
><p class="para">Once you have invoked <code class="literal">Tgetent()</CODE
>, you can manage a terminal by
sending control strings to it with <code class="literal">Tgoto()</CODE
> and
<code class="literal">Tputs()</CODE
>.  You can also test for the existence of particular
terminal capabilities with <code class="literal">Trequire()</CODE
>.</P
><p class="para"><a class="indexterm" name="AUTOID-27024"></A
><code class="literal">Trequire()</CODE
> checks to see whether the named capabilities have been
specified in the terminal's termcap entry.  For example, this line:</P
><pre class="programlisting">$terminal-&gt;Trequire(qw/ce ku kd/);</PRE
><p class="para">checks whether the <code class="literal">ce</CODE
> (clear to end of line), <code class="literal">ku</CODE
>
(keypad up-arrow), and <code class="literal">kd</CODE
> (keypad down-arrow) capabilities have
been defined.  Any undefined capabilities will result in a listing of
those capabilities and a call to <code class="literal">Carp::croak()</CODE
>.</P
><p class="para"><a class="indexterm" name="AUTOID-27034"></A
><code class="literal">Tgoto()</CODE
> produces a control string to move the cursor relative to
the screen.  For example, to move the cursor to the fifth line and
forty-fifth column on the screen, you can say:</P
><pre class="programlisting">$row = 5; $col = 45;
$terminal-&gt;Tgoto('cm', $row, $col, STDOUT);</PRE
><p class="para">The first argument in this call must always be <code class="literal">cm</CODE
>.  If a file
handle is given as the final argument, then <code class="literal">Tgoto()</CODE
> sends
the appropriate control string to that handle.  With or without a handle,
the routine returns the control string, so you could achieve the same
effect this way:</P
><pre class="programlisting">$str = $terminal-&gt;Tgoto('cm', $row, $col);
print STDOUT $str;</PRE
><p class="para"><code class="literal">Tgoto()</CODE
> performs the necessary % interpolation on the control
strings.  (See the <em class="emphasis">termcap</EM
>(5) manpage for details.)</P
><p class="para"><a class="indexterm" name="AUTOID-27046"></A
>The <code class="literal">Tputs()</CODE
> routine allows you to exercise other terminal
capabilities.  For example, the following code deletes one line at the cursor's
present position, and then turns on the bold text attribute:</P
><pre class="programlisting">$count = 1;
$terminal-&gt;Tputs('dl', $count, $FILEHANDLE);  # delete one line
$terminal-&gt;Tputs('md', $count, $FILEHANDLE);  # turn on bold attribute</PRE
><p class="para">Again, <code class="literal">Tputs()</CODE
> returns the terminal control string, and the file
handle can be omitted.  The <code class="literal">$count</CODE
> for such calls should normally be
<code class="literal">1</CODE
>, unless padding is required.  (Padding involves the output of
&quot;no-op&quot; characters in order to effect a delay required by the terminal
device.  It is most commonly required for hardcopy devices.)  A count
greater than <code class="literal">1</CODE
> is taken to specify the amount of padding.
See the <em class="emphasis">termcap</EM
>(5) manpage for more about padding.</P
><p class="para"><code class="literal">Tputs()</CODE
> does <em class="emphasis">not</EM
> perform % interpolation.  This means that the following will not work:</P
><pre class="programlisting">$terminal-&gt;Tputs('DC', 1, $FILEHANDLE);  # delete one character (WRONG!)</PRE
><p class="para">If the terminal control string requires numeric parameters, then you must
do the interpolation yourself:</P
><pre class="programlisting">$str = $terminal-&gt;Tputs('DC', 1);
$str =~ s/%d/7/;
print STDOUT $str;        # delete seven characters</PRE
><p class="para">The output strings for <code class="literal">Tputs()</CODE
> are cached for counts of 1.
<code class="literal">Tgoto()</CODE
> does not cache.  <code class="literal">$terminal-&gt;{_</CODE
><code class="replaceable"><i>xx</I
></CODE
><code class="literal">}</CODE
>
is the raw termcap data and <code class="literal">$terminal-&gt;{</CODE
><code class="replaceable"><i>xx</I
></CODE
><code class="literal">}</CODE
> is the cached
version (where <code class="replaceable"><i>xx</I
></CODE
> is the two-character terminal capability code).</P
><div class="sect3"><h4 class="sect3"><a class="title" name="PERL2-CH-7-SECT-1.95">7.2.64.1 Getting terminal output speed</A
></H4
><p class="para">You can use the POSIX module to get your terminal's output speed for use
in the <code class="literal">Tgetent()</CODE
> call:</P
><pre class="programlisting">require POSIX;
my $termios = new POSIX::Termios;
$termios-&gt;getattr;
my $ospeed = $termios-&gt;getospeed;</PRE
><p class="para">The method using <em class="emphasis">ioctl</EM
>(2) works like this:</P
><pre class="programlisting">require 'ioctl.pl';
ioctl(TTY, $TIOCGETP, $sgtty);
($ispeed, $ospeed) = unpack('cc', $sgtty);</PRE
><a class="indexterm" name="AUTOID-27080"></A
><a class="indexterm" name="AUTOID-27081"></A
><a class="indexterm" name="AUTOID-27082"></A
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT2" href="ch07_063.htm#AUTOID-26910" title="7.2.63 Sys::Syslog&nbsp;- Perl Interface to UNIX syslog(3) Calls"><img src="../gifs/txtpreva.gif" alt="Previous: 7.2.63 Sys::Syslog&nbsp;- Perl Interface to UNIX syslog(3) Calls" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Programming Perl"><img src="../gifs/txthome.gif" alt="Programming Perl" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT2" href="ch07_065.htm#AUTOID-27083" title="7.2.65 Term::Complete&nbsp;- Word Completion Module"><img src="../gifs/txtnexta.gif" alt="Next: 7.2.65 Term::Complete&nbsp;- Word Completion Module" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">7.2.63 Sys::Syslog&nbsp;- Perl Interface to UNIX syslog(3) Calls</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">7.2.65 Term::Complete&nbsp;- Word Completion Module</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
