<html><head>
<title>[Chapter 7] 7.2.69 Text::Soundex&nbsp;- The Soundex Algorithm Described by Knuth</TITLE>
<meta name="DC.title" content="Programming Perl"><meta name="DC.creator" content="Larry Wall, Tom Christiansen &amp; Randal L. Schwartz"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T02:04:36Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-149-6" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch07_02.htm" title="7.2 Library Modules"><link rel="prev" href="ch07_068.htm#AUTOID-27256" title="7.2.68 Text::ParseWords&nbsp;- Parse Text into a List of Tokens"><link rel="next" href="ch07_070.htm#AUTOID-27343" title="7.2.70 Text::Tabs&nbsp;- Expand and Unexpand Tabs"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Programming Perl" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Programming Perl"><area shape="RECT" coords="467,0,514,18" href="../search/psrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT2" href="ch07_068.htm#AUTOID-27256" title="7.2.68 Text::ParseWords&nbsp;- Parse Text into a List of Tokens"><img src="../gifs/txtpreva.gif" alt="Previous: 7.2.68 Text::ParseWords&nbsp;- Parse Text into a List of Tokens" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch07_01.htm" title="7. The Standard Perl Library">Chapter 7<br>The Standard Perl Library</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT2" href="ch07_070.htm#AUTOID-27343" title="7.2.70 Text::Tabs&nbsp;- Expand and Unexpand Tabs"><img src="../gifs/txtnexta.gif" alt="Next: 7.2.70 Text::Tabs&nbsp;- Expand and Unexpand Tabs" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT2"><h3 class="sect2"><a class="title" name="AUTOID-27279">7.2.69 Text::Soundex&nbsp;- The Soundex Algorithm Described by Knuth</A
></H3
><pre class="programlisting">use Text::Soundex;

$code = soundex $string;  # get soundex code for a string
@codes = soundex @list;   # get list of codes for list of strings

# set value to be returned for strings without soundex code
$soundex_nocode = 'Z000';</PRE
><p class="para"><a class="indexterm" name="AUTOID-27283"></A
><a class="indexterm" name="AUTOID-27285"></A
><a class="indexterm" name="AUTOID-27288"></A
>This module implements the soundex algorithm as described by Donald Knuth
in Volume 3 of <em class="emphasis">The Art of Computer Programming</EM
>.  The algorithm is
intended to hash words (in particular surnames) into a small space using a
simple model that approximates the sound of the word when spoken by an English
speaker.  Each word is reduced to a four-character string, the first
character being an uppercase letter and the remaining three being digits.</P
><p class="para">If there is no soundex code representation for a string, then the value of
<code class="literal">$soundex_nocode</CODE
> is returned.  This variable is initially set to the
undefined value, but
many people seem to prefer an unlikely value like <code class="literal">Z000</CODE
>.
(How unlikely this is depends on the data set being dealt with.)  Any value
can be assigned to <code class="literal">$soundex_nocode</CODE
>.</P
><p class="para">In a scalar context <code class="literal">soundex()</CODE
> returns the soundex code of its first
argument, and in an array context a list is returned in which each element
is the soundex code for the corresponding argument passed to
<code class="literal">soundex()</CODE
>.</P
><p class="para">For example:</P
><pre class="programlisting">@codes = soundex qw(Mike Stok);</PRE
><p class="para">leaves <code class="literal">@codes</CODE
> containing 
<code class="literal">('M200', 'S320')</CODE
>.</P
><p class="para">Here are Knuth's examples of various names and the soundex codes they map to:</P
><table class="informaltable" border="1" cellpadding="3"><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1">Names</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Code</TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">Euler, Ellery</TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">E460</CODE
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">Gauss, Ghosh</TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">G200</CODE
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">Hilbert, Heilbronn</TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">H416</CODE
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">Knuth, Kant</TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">K530</CODE
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">Lloyd, Ladd</TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">L300</CODE
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">Lukasiewicz, Lissajous</TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">L222</CODE
></TD
></TR
></TBODY
></TABLE
><p class="para">So we have:</P
><pre class="programlisting">$code = soundex 'Knuth';              # $code contains 'K530'
@list = soundex qw(Lloyd Gauss);      # @list contains 'L300', 'G200'</PRE
><p class="para">As the soundex algorithm was originally used a <em class="emphasis">long</EM
> time ago in the United States,
it considers only the English alphabet and pronunciation.</P
><p class="para">As it is mapping a large space (arbitrary-length strings) onto a small
space (single letter plus three digits), no inference can be made about the
similarity of two strings that end up with the same soundex code.  For
example, both <code class="literal">Hilbert</CODE
> and <code class="literal">Heilbronn</CODE
> end up with a soundex code
of <code class="literal">H416</CODE
>.</P
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT2" href="ch07_068.htm#AUTOID-27256" title="7.2.68 Text::ParseWords&nbsp;- Parse Text into a List of Tokens"><img src="../gifs/txtpreva.gif" alt="Previous: 7.2.68 Text::ParseWords&nbsp;- Parse Text into a List of Tokens" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Programming Perl"><img src="../gifs/txthome.gif" alt="Programming Perl" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT2" href="ch07_070.htm#AUTOID-27343" title="7.2.70 Text::Tabs&nbsp;- Expand and Unexpand Tabs"><img src="../gifs/txtnexta.gif" alt="Next: 7.2.70 Text::Tabs&nbsp;- Expand and Unexpand Tabs" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">7.2.68 Text::ParseWords&nbsp;- Parse Text into a List of Tokens</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">7.2.70 Text::Tabs&nbsp;- Expand and Unexpand Tabs</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
