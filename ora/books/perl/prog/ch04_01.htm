<html><head>
<title>[Chapter 4] References and Nested Data Structures</TITLE>
<meta name="DC.title" content="Programming Perl"><meta name="DC.creator" content="Larry Wall, Tom Christiansen &amp; Randal L. Schwartz"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:57:32Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-149-6" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="index.htm" title="Programming Perl"><link rel="prev" href="ch03_02.htm" title="3.2 Perl Functions in Alphabetical Order"><link rel="next" href="ch04_02.htm" title="4.2 Creating Hard References"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Programming Perl" usemap="#srchmap" border="0"></H1
><map name="srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Programming Perl"><area shape="RECT" coords="467,0,514,18" href="../search/psrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch03_02.htm" title="3.2 Perl Functions in Alphabetical Order"><img src="../gifs/txtpreva.gif" alt="Previous: 3.2 Perl Functions in Alphabetical Order" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 4</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch04_02.htm" title="4.2 Creating Hard References"><img src="../gifs/txtnexta.gif" alt="Next: 4.2 Creating Hard References" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="CHAPTER"><h1 class="chapter"><a class="title" name="PERL2-CH-4">4. References and Nested Data Structures</A
></H1
><div class="htmltoc"><p><b>Contents:</B
><br><a class="SECT1" href="#PERL2-CH-4-SECT-1" title="4.1 What Is a Reference?">What Is a Reference?</A
><br><a class="SECT1" href="ch04_02.htm" title="4.2 Creating Hard References">Creating Hard References</A
><br><a class="SECT1" href="ch04_03.htm#PERL2-CH-4-SECT-3.5" title="4.3 Using Hard References">Using Hard References</A
><br><a class="SECT1" href="ch04_04.htm" title="4.4 Symbolic References">Symbolic References</A
><br><a class="SECT1" href="ch04_05.htm#PERL2-CH-4-SECT-5.1" title="4.5 Braces, Brackets, and Quoting">Braces, Brackets, and Quoting</A
><br><a class="SECT1" href="ch04_06.htm" title="4.6 A Brief Tutorial:  Manipulating Lists of Lists">A Brief Tutorial:  Manipulating Lists of Lists</A
><br><a class="SECT1" href="ch04_07.htm#PERL2-CH-4-SECT-7.2" title="4.7 Data Structure Code Examples">Data Structure Code Examples</A
></P
><p></P
></DIV
><p class="para">For both practical and philosophical reasons, Perl has always been<a class="indexterm" name="AUTOID-14367"></A
><a class="indexterm" name="AUTOID-14369"></A
><a class="indexterm" name="AUTOID-14371"></A
>
biased in favor of flat, linear data structures.  And for many
problems, this is exactly what you want.  But occasionally you need to
set up something just a little more complicated and hierarchical.
Under older versions of Perl you could construct complex data
structures indirectly by using <a class="xref" href="ch03_032.htm#PERL2-CMD-EVAL" title="eval"><b class="xref.cmd">eval</B
></A
> or
typeglobs.  </P
><p class="para">Suppose you wanted to build a simple table
(two-dimensional array) showing vital statistics&nbsp;- say, age, eye
color, and weight&nbsp;- for a group of people.  You could do this by
first creating an array for each individual:</P
><p class="para"><pre class="programlisting">@john = (47, &quot;brown&quot;, 186);
@mary = (23, &quot;hazel&quot;, 128);
@bill = (35, &quot;blue&quot;, 157);</PRE
></P
><p class="para">and then constructing a single, additional array consisting of the names
of the other arrays:</P
><pre class="programlisting">@vitals = ('john', 'mary', 'bill');</PRE
><p class="para">Unfortunately, actually using this table as a
two-dimensional data structure is cumbersome.  To change John's eyes
to &quot;red&quot; after a night on the town, you'd have to say something like:</P
><pre class="programlisting">$vitals = $vitals[0];
eval &quot;\$${vitals}[1] = 'red'&quot;;</PRE
><p class="para">A much more efficient (but not more readable) way to do
the same thing is to use a typeglob assignment to temporarily
alias one symbol table entry to another:</P
><pre class="programlisting">local(*array) = $vitals[0];  # Alias *array to *john.
$array[1] = 'red';           # Actually sets $john[1].</PRE
><p class="para">Alternatively, you could avoid the symbol table altogether by doing
everything with a set of parallel hash arrays, emulating pointers
symbolically by doing key lookups in the appropriate hash.  Finally,
you could define all your structures operationally, using <a class="xref" href="ch03_105.htm#PERL2-CMD-PACK" title="pack"><b class="xref.cmd">pack</B
></A
> and <a class="xref" href="ch03_182.htm#PERL2-CMD-UNPACK" title="unpack"><b class="xref.cmd">unpack</B
></A
>,
or <a class="xref" href="ch03_078.htm#PERL2-CMD-JOIN" title="join"><b class="xref.cmd">join</B
></A
> and <a class="xref" href="ch03_155.htm#PERL2-CMD-SPLIT" title="split"><b class="xref.cmd">split</B
></A
>.</P
><p class="para">So even though you could use a variety of techniques to emulate pointers
and data structures, all of them could get to be unwieldy.
To be sure, Perl still supports these older mechanisms, since they
remain quite useful for simple problems.  But now Perl also supports
<em class="emphasis">references</EM
>.</P
><div class="sect1"><h2 class="sect1"><a class="title" name="PERL2-CH-4-SECT-1">4.1 What Is a Reference?</A
></H2
><p class="para"><a class="indexterm" name="CH04.REF1"></A
>In the preceding example using <a class="xref" href="ch03_032.htm#PERL2-CMD-EVAL" title="eval"><b class="xref.cmd">eval</B
></A
>,
<code class="literal">$vitals[0]</CODE
> had the value <code class="literal">'john'</CODE
>.
That is, it happened to contain a string that was also the name for
another variable.  You could say that the first variable
<em class="emphasis">referred</EM
> to the second.  We will speak of this<a class="indexterm" name="AUTOID-14400"></A
>
sort of reference as a <em class="emphasis">symbolic</EM
> reference.  You
can think of it as analogous to symbolic links in UNIX filesystems.
Perl now provides some simplified mechanisms for using symbolic
references; in particular, the need for an <a class="xref" href="ch03_032.htm#PERL2-CMD-EVAL" title="eval"><b class="xref.cmd">eval</B
></A
> or a typeglob assignment in our example
disappears.  See &quot;Symbolic References&quot; later in this chapter.</P
><p class="para"><a class="indexterm" name="AUTOID-14405"></A
>The other kind of reference is the <em class="emphasis">hard</EM
> reference.[<a class="footnote" href="#AUTOID-14408">1</A
>]
A hard reference refers not to the name of another variable (which is
just a container for a value) but rather to an actual value, some
internal glob of data, which we will call a &quot;thingy&quot;, in honor of that
thingy that hangs down in the back of your throat.  (You may also call
it a &quot;referent&quot;, if you prefer to live a joyless existence.)  Suppose,
for example, that you create a hard reference to the thingy contained in
the variable <code class="literal">@array</CODE
>.  This hard reference and the thingy it
refers to will continue to exist even after <code class="literal">@array</CODE
> goes out of
scope.  Only when the reference count of the thingy itself goes to zero
is the thingy actually destroyed.</P
><blockquote class="footnote"><div class="footnote"><p class="para"><a class="footnote" name="AUTOID-14408">[1]</A
> If you like, you can think of hard references as real references, and
symbolic references as fake references.  It's like the difference between
real friendship and mere name-dropping.</P
></DIV
></BLOCKQUOTE
><p class="para">To put it another way, a Perl variable lives in a symbol table and
holds one hard reference to its underlying thingy (which may be a simple
thingy like a number, or a complex thingy like an array or hash, but
there's still only one reference from the variable to the value).  There
may be other hard references to the same thingy, but if so, the variable
doesn't know (or care) about them.  A symbolic reference names another
variable, so there's always a named location involved, but a hard
reference just points to a thingy. It doesn't know (or care)
whether there are any other references to the thingy, or whether any of those
references are through variables.  Hence, a hard reference can refer to
an anonymous thingy.  All such anonymous thingies are accessed through
hard references.  But the converse is not necessarily true&nbsp;- just because
something has a hard reference to it doesn't necessarily mean it's
anonymous.  It might have another reference through a named variable.
(It can even have more than one name, if it is aliased with
typeglobs.)</P
><p class="para">To <em class="emphasis">reference</EM
> a variable, in the terminology of this chapter, is
to create a hard reference to the thingy underlying
the variable.  (There's a special operator to do this creative act.)  The
hard reference so created is simply a scalar value, which behaves in
all familiar contexts just like any other scalar value should.  To <em class="emphasis">dereference</EM
><a class="indexterm" name="AUTOID-14416"></A
><a class="indexterm" name="AUTOID-14418"></A
>
this scalar value is to use it to refer back to the original thingy,
as you must do when reading or writing to the thingy.  Both referencing
and dereferencing occur only when you invoke certain explicit mechanisms;
no implicit referencing or dereferencing occurs in Perl.[<a class="footnote" href="#AUTOID-14421">2</A
>][<a class="footnote" href="#AUTOID-14425">3</A
>]</P
><blockquote class="footnote"><div class="footnote"><p class="para"><a class="footnote" name="AUTOID-14421">[2]</A
> Actually, a function with a prototype <em class="emphasis">can</EM
> use implicit pass-by-reference
if explicitly declared that way.
If so, then the caller of the function doesn't need to know he's passing a
reference, but you still have to dereference it explicitly within the
function.  See <a class="xref" href="ch02_01.htm" title="The Gory Details">Chapter 2, <cite class="chapter">The Gory Details</CITE
></A
>.</P
></DIV
><div class="footnote"><p class="para"><a class="footnote" name="AUTOID-14425">[3]</A
> Actually, to be perfectly honest, there's also some mystical automatic
dereferencing when you use certain kinds of filehandles,
but that's for backward compatibility, and is transparent to the
casual user.</P
></DIV
></BLOCKQUOTE
><p class="para">Any scalar may hold a hard reference, and such a reference may point to any
data structure.  Since arrays and hashes contain scalars, you can
build arrays of arrays, arrays of hashes, hashes of arrays, arrays of
hashes and functions, and so on.</P
><p class="para">Keep in mind, though, that Perl arrays and hashes are internally
one-dimensional.  They can only hold scalar values (strings, numbers,
and references).  When we use a phrase like &quot;array of arrays&quot;, we really
mean &quot;array of references to arrays&quot;.  But since that's the only way to
implement an array of arrays in Perl, it follows that the shorter,
less accurate phrase is not so inaccurate as to be false, and therefore
should not be totally despised, unless you're into that sort of thing.</P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch03_02.htm" title="3.2 Perl Functions in Alphabetical Order"><img src="../gifs/txtpreva.gif" alt="Previous: 3.2 Perl Functions in Alphabetical Order" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Programming Perl"><img src="../gifs/txthome.gif" alt="Programming Perl" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch04_02.htm" title="4.2 Creating Hard References"><img src="../gifs/txtnexta.gif" alt="Next: 4.2 Creating Hard References" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">3.2 Perl Functions in Alphabetical Order</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">4.2 Creating Hard References</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
