<html><head>
<title>[Chapter 4] 4.5 Braces, Brackets, and Quoting</TITLE>
<meta name="DC.title" content="Programming Perl"><meta name="DC.creator" content="Larry Wall, Tom Christiansen &amp; Randal L. Schwartz"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:57:44Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-149-6" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch04_01.htm" title="4. References and Nested Data Structures"><link rel="prev" href="ch04_04.htm" title="4.4 Symbolic References"><link rel="next" href="ch04_06.htm" title="4.6 A Brief Tutorial:  Manipulating Lists of Lists"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Programming Perl" usemap="#srchmap" border="0"></H1
><index.htmlmap name="srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Programming Perl"><area shape="RECT" coords="467,0,514,18" href="../search/psrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch04_04.htm" title="4.4 Symbolic References"><img src="../gifs/txtpreva.gif" alt="Previous: 4.4 Symbolic References" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch04_01.htm" title="4. References and Nested Data Structures">Chapter 4<br>References and Nested Data Structures</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch04_06.htm" title="4.6 A Brief Tutorial:  Manipulating Lists of Lists"><img src="../gifs/txtnexta.gif" alt="Next: 4.6 A Brief Tutorial:  Manipulating Lists of Lists" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="PERL2-CH-4-SECT-5">4.5 Braces, Brackets, and Quoting</A
></H2
><p class="para">In the previous section we pointed out that <code class="literal">${identifier}</CODE
> is not treated as
a symbolic reference.  Now you might wonder how this interacts with
reserved words.  The short answer is, it doesn't.  Despite the fact
that <a class="xref" href="ch03_112.htm#PERL2-CMD-PUSH" title="push"><b class="xref.cmd">push</B
></A
> is a reserved word, these two
statements:<a class="indexterm" name="AUTOID-14741"></A
><a class="indexterm" name="AUTOID-14743"></A
></P
><pre class="programlisting">$push = &quot;pop on &quot;;
print &quot;${push}over&quot;;</PRE
><p class="para">print out &quot;<code class="literal">pop on over</CODE
>&quot;.  The reason is that, historically, this use of
braces is how UNIX shells have delimited a variable name from subsequent
alphanumeric text that would otherwise be interpreted as part of the
variable name.  It's how many people expect variable interpolation to
work, so we made it work the same way in Perl.  But with Perl, the
notion extends further and applies to any braces used in generating
references, whether or not they're inside quotes.  This means that:</P
><pre class="programlisting">print ${push} . 'over';</PRE
><p class="para">or even:</P
><pre class="programlisting">print ${ push } . 'over';</PRE
><p class="para">will also print &quot;<code class="literal">pop on over</CODE
>&quot;, even though the braces are outside of
double quotes.  The same rule applies to any identifier that is used for
subscripting a hash.  So, instead of writing:</P
><pre class="programlisting">$hash{ &quot;aaa&quot; }{ &quot;bbb&quot; }{ &quot;ccc&quot; }</PRE
><p class="para">you can just write:</P
><pre class="programlisting">$hash{ aaa }{ bbb }{ ccc }</PRE
><p class="para">and not worry about whether the subscripts are reserved words.  In the
rare event that you do wish to do something like:</P
><pre class="programlisting">$hash{ shift }</PRE
><p class="para">you can force interpretation as a reserved word by adding anything that
makes it more than a mere identifier:</P
><pre class="programlisting">$hash{ shift() }
$hash{ +shift }
$hash{ shift @_ }</PRE
><p class="para">The <b class="emphasis.bold">-w</B
> switch will warn you if it
interprets a reserved word as a string, since you may have
<em class="emphasis">meant</EM
> the reserved word.  (That's why we
recommend you use <code class="literal">${pkg}</CODE
> instead of
<code class="literal">${package}</CODE
> or <code class="literal">${pack}</CODE
>, since
you'll avoid some warnings that way.)</P
><div class="sect2"><h3 class="sect2"><a class="title" name="PERL2-CH-4-SECT-5.1">4.5.1 Hard References Don't Work as Hash Keys</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-14770"></A
><a class="indexterm" name="AUTOID-14772"></A
><a class="indexterm" name="AUTOID-14775"></A
>Consistent with the foregoing, hash keys are stored internally as strings.[<a class="footnote" href="#AUTOID-14778">7</A
>]
If you try to store a hard reference as a key in a hash, the key value will be
converted into a string:</P
><blockquote class="footnote"><div class="footnote"><p class="para"><a class="footnote" name="AUTOID-14778">[7]</A
> They're also stored externally as strings, such as when you put them into
a DBM file.  In fact, DBM files <em class="emphasis">require</EM
> that their keys (and values) be strings.</P
></DIV
></BLOCKQUOTE
><pre class="programlisting">$x{ \$a } = $a;
($key, $value) = each %x;
print $$key;   # WRONG</PRE
><p class="para">We mentioned earlier that you can't convert a string back to a hard
reference.  So if you try to dereference <code class="literal">$key</CODE
>, which contains a
mere string, it won't do a hard dereference, but rather a symbolic
dereference, and since you probably don't have a variable named
<code class="literal">SCALAR(0x1fc0e)</CODE
>, you won't accomplish what you're attempting.  You
might want to do something more like:</P
><pre class="programlisting">$r = \@a;
$x{ $r } = $r;</PRE
><p class="para">And then at least you can use the hash <em class="emphasis">value</EM
>, which will be a
hard reference, instead of the key, which won't.</P
><p class="para">Although you can't store a hard reference as a key, if you use a hard
reference in a string context, it <em class="emphasis">is</EM
> guaranteed to produce a
unique string, since the address of the reference is included as part of
the resulting string.  So you can in fact use a hard reference as a
unique hash key.  You just can't dereference it later.</P
><a class="indexterm" name="AUTOID-14790"></A
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch04_04.htm" title="4.4 Symbolic References"><img src="../gifs/txtpreva.gif" alt="Previous: 4.4 Symbolic References" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Programming Perl"><img src="../gifs/txthome.gif" alt="Programming Perl" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch04_06.htm" title="4.6 A Brief Tutorial:  Manipulating Lists of Lists"><img src="../gifs/txtnexta.gif" alt="Next: 4.6 A Brief Tutorial:  Manipulating Lists of Lists" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">4.4 Symbolic References</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">4.6 A Brief Tutorial:  Manipulating Lists of Lists</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
