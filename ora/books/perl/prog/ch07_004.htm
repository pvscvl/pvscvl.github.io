<html><head>
<title>[Chapter 7] 7.2.4 Benchmark&nbsp;- Check and Compare Running Times of Code</TITLE>
<meta name="DC.title" content="Programming Perl"><meta name="DC.creator" content="Larry Wall, Tom Christiansen &amp; Randal L. Schwartz"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T02:01:14Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-149-6" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch07_02.htm" title="7.2 Library Modules"><link rel="prev" href="ch07_003.htm#AUTOID-19080" title="7.2.3 AutoSplit&nbsp;- Split a Module for Autoloading"><link rel="next" href="ch07_005.htm#AUTOID-19200" title="7.2.5 Carp&nbsp;- Generate Error Messages"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Programming Perl" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Programming Perl"><area shape="RECT" coords="467,0,514,18" href="../search/psrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT2" href="ch07_003.htm#AUTOID-19080" title="7.2.3 AutoSplit&nbsp;- Split a Module for Autoloading"><img src="../gifs/txtpreva.gif" alt="Previous: 7.2.3 AutoSplit&nbsp;- Split a Module for Autoloading" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch07_01.htm" title="7. The Standard Perl Library">Chapter 7<br>The Standard Perl Library</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT2" href="ch07_005.htm#AUTOID-19200" title="7.2.5 Carp&nbsp;- Generate Error Messages"><img src="../gifs/txtnexta.gif" alt="Next: 7.2.5 Carp&nbsp;- Generate Error Messages" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT2"><h3 class="sect2"><a class="title" name="AUTOID-19128">7.2.4 Benchmark&nbsp;- Check and Compare Running Times of Code</A
></H3
><a class="indexterm" name="CH07.BMM1"></A
><a class="indexterm" name="CH07.BMM2"></A
><a class="indexterm" name="CH07.BMM3"></A
><pre class="programlisting">use Benchmark;

# timeit():  run $count iterations of the given Perl code, and time it
$t = timeit($count, '<code class="replaceable"><i>CODE</I
></CODE
>');  # $t is now a Benchmark object

# timestr():  convert Benchmark times to printable strings
print &quot;$count loops of '<code class="replaceable"><i>CODE</I
></CODE
>' took:&quot;, timestr($t), &quot;\n&quot;;

# timediff():  calculate the difference between two times
$t = timediff($t1 - $t2);

# timethis():  run &quot;code&quot; $count times with timeit(); also, print out a
#     header saying &quot;timethis $count: &quot;
$t = timethis($count, &quot;<code class="replaceable"><i>CODE</I
></CODE
>&quot;);

# timethese():  run timethis() on multiple chunks of code
@t = timethese($count, {
    'Name1' =&gt; '...<code class="replaceable"><i>CODE1</I
></CODE
>...',
    'Name2' =&gt; '...<code class="replaceable"><i>CODE2</I
></CODE
>...',
});

# new method:  return the current time
$t0 = new Benchmark;
# ... your <code class="replaceable"><i>CODE</I
></CODE
> here ...
$t1 = new Benchmark;
$td = timediff($t1, $t0);
print &quot;the code took: &quot;, timestr($td), &quot;\n&quot;;

# debug method:  enable or disable debugging
Benchmark-&gt;debug(1);
$t = timeit(10, ' 5 ** $Global ');
Benchmark-&gt;debug(0);</PRE
><p class="para"><a class="indexterm" name="AUTOID-19146"></A
>The Benchmark module encapsulates a number of routines to help you
figure out how long it takes to execute some code a given number of times
within a loop.</P
><p class="para"><a class="indexterm" name="AUTOID-19150"></A
>For the <code class="literal">timeit()</CODE
> routine, <code class="literal">$count</CODE
> is the
number of times to run the loop.  <code class="replaceable"><i>CODE</I
></CODE
> is a string
containing the code to run.  <code class="literal">timeit()</CODE
> runs a null loop with
<code class="literal">$count</CODE
> iterations, and then runs the same loop with your code
inserted.  It reports the difference between the times of execution.</P
><p class="para"><a class="indexterm" name="AUTOID-19158"></A
>For <code class="literal">timethese()</CODE
>, a loop of <code class="literal">$count</CODE
> iterations is run on
each code chunk separately, and the results are reported separately.
The code to run is given as a hash with keys that are names and values
that are code.  <code class="literal">timethese()</CODE
> is handy for quick tests to determine
which way of doing something is faster.  For example:</P
><pre class="programlisting">$ perl -MBenchmark -Minteger
timethese(100000, { add =&gt; '$i += 2', inc =&gt; '$i++; $i++' });
__END__
Benchmark: timing 1000000 iterations of add, inc...
       add:  4 secs ( 4.52 usr  0.00 sys =  4.52 cpu)
       inc:  6 secs ( 5.32 usr  0.00 sys =  5.32 cpu)</PRE
><p class="para">The following routines are exported into your namespace
if you use the Benchmark module:</P
><pre class="programlisting">timeit()
timethis()
timethese()
timediff()
timestr()</PRE
><p class="para">The following routines will be exported into your namespace
if you specifically ask that they be imported:<a class="indexterm" name="AUTOID-19167"></A
><a class="indexterm" name="AUTOID-19169"></A
><a class="indexterm" name="AUTOID-19171"></A
><a class="indexterm" name="AUTOID-19173"></A
></P
><pre class="programlisting">clearcache()     # clear just the cache element indexed by $key
clearallcache()  # clear the entire cache
disablecache()   # do not use the cache
enablecache()    # resume caching</PRE
><div class="sect3"><h4 class="sect3"><a class="title" name="PERL2-CH-7-SECT-1.3">7.2.4.1 Notes</A
></H4
><p class="para">Code is executed in the caller's package.</P
><p class="para">The null loop times are cached, the key being the
number of iterations.  You can control caching with calls like these:</P
><pre class="programlisting">clearcache($key);
clearallcache();
disablecache();
enablecache();</PRE
><p class="para">Benchmark inherits only from the Exporter class.</P
><p class="para">The elapsed time is measured using <em class="emphasis">time</EM
>(2) and the
granularity is therefore only one second.  Times are given in seconds for the
whole loop (not divided by the number of iterations).  Short tests may produce
negative figures because Perl can appear to take longer to execute the empty
loop than a short test.</P
><p class="para"><a class="indexterm" name="AUTOID-19185"></A
><a class="indexterm" name="AUTOID-19188"></A
><a class="indexterm" name="AUTOID-19190"></A
>The user and system CPU time is measured to millisecond accuracy using
<em class="emphasis">times</EM
>(3).  In general, you should pay more
attention to the CPU time than to elapsed time, especially if other processes
are running on the system.  Also, elapsed times of five seconds or more are
needed for reasonable accuracy.</P
><p class="para">Because you pass in a string to be <a class="xref" href="ch03_032.htm#PERL2-CMD-EVAL" title="eval"><b class="xref.cmd">eval</B
></A
>ed
instead of a closure to be executed, lexical variables declared with <a class="xref" href="ch03_097.htm#PERL2-CMD-MY" title="my"><b class="xref.cmd">my</B
></A
> outside of the <a class="xref" href="ch03_032.htm#PERL2-CMD-EVAL" title="eval"><b class="xref.cmd">eval</B
></A
> are not visible.<a class="indexterm" name="AUTOID-19197"></A
><a class="indexterm" name="AUTOID-19198"></A
><a class="indexterm" name="AUTOID-19199"></A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT2" href="ch07_003.htm#AUTOID-19080" title="7.2.3 AutoSplit&nbsp;- Split a Module for Autoloading"><img src="../gifs/txtpreva.gif" alt="Previous: 7.2.3 AutoSplit&nbsp;- Split a Module for Autoloading" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Programming Perl"><img src="../gifs/txthome.gif" alt="Programming Perl" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT2" href="ch07_005.htm#AUTOID-19200" title="7.2.5 Carp&nbsp;- Generate Error Messages"><img src="../gifs/txtnexta.gif" alt="Next: 7.2.5 Carp&nbsp;- Generate Error Messages" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">7.2.3 AutoSplit&nbsp;- Split a Module for Autoloading</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">7.2.5 Carp&nbsp;- Generate Error Messages</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
