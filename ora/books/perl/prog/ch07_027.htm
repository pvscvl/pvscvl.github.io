<html><head>
<title>[Chapter 7] 7.2.27 File::Basename&nbsp;- Parse File Specifications</TITLE>
<meta name="DC.title" content="Programming Perl"><meta name="DC.creator" content="Larry Wall, Tom Christiansen &amp; Randal L. Schwartz"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T02:02:22Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-149-6" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch07_02.htm" title="7.2 Library Modules"><link rel="prev" href="ch07_026.htm#AUTOID-22188" title="7.2.26 Fcntl&nbsp;- Load the C fcntl.h Defines"><link rel="next" href="ch07_028.htm#AUTOID-22345" title="7.2.28 File::CheckTree&nbsp;- Run Many Tests on a Collection of Files"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Programming Perl" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Programming Perl"><area shape="RECT" coords="467,0,514,18" href="../search/psrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT2" href="ch07_026.htm#AUTOID-22188" title="7.2.26 Fcntl&nbsp;- Load the C fcntl.h Defines"><img src="../gifs/txtpreva.gif" alt="Previous: 7.2.26 Fcntl&nbsp;- Load the C fcntl.h Defines" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch07_01.htm" title="7. The Standard Perl Library">Chapter 7<br>The Standard Perl Library</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT2" href="ch07_028.htm#AUTOID-22345" title="7.2.28 File::CheckTree&nbsp;- Run Many Tests on a Collection of Files"><img src="../gifs/txtnexta.gif" alt="Next: 7.2.28 File::CheckTree&nbsp;- Run Many Tests on a Collection of Files" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT2"><h3 class="sect2"><a class="title" name="AUTOID-22261">7.2.27 File::Basename&nbsp;- Parse File Specifications</A
></H3
><pre class="programlisting">use File::Basename;

($name, $path, $suffix) = fileparse($fullname, @suffixlist)
fileparse_set_fstype($os_string);  # $os_string specifies OS type
$basename = basename($fullname, @suffixlist);
$dirname = dirname($fullname);

($name, $path, $suffix) = fileparse(&quot;lib/File/Basename.pm&quot;, '\.pm');
fileparse_set_fstype(&quot;VMS&quot;);
$basename = basename(&quot;lib/File/Basename.pm&quot;, &quot;.pm&quot;);
$dirname = dirname(&quot;lib/File/Basename.pm&quot;);</PRE
><p class="para"><a class="indexterm" name="CH07.BASE1"></A
><a class="indexterm" name="CH07.BASE2"></A
><a class="indexterm" name="CH07.BASE3"></A
>These routines allow you to parse file specifications into useful
pieces using the syntax of different operating systems.</P
><dl class="variablelist"><dt class="term"><code class="literal">fileparse_set_fstype</CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-22277"></A
>You select the syntax via the routine
<code class="literal">fileparse_set_fstype()</CODE
>. If the argument passed to it contains
one of the substrings &quot;<code class="literal">VMS</CODE
>&quot;,
&quot;<code class="literal">MSDOS</CODE
>&quot;, or
&quot;<code class="literal">MacOS</CODE
>&quot;, the file specification syntax of that
operating system is used in future calls to <code class="literal">fileparse()</CODE
>,
<code class="literal">basename()</CODE
>, and <code class="literal">dirname()</CODE
>.  If it contains
none of these substrings, UNIX syntax is used.  This pattern matching is
case-insensitive.  If you've selected VMS syntax and the file specification you
pass to one of these routines contains a <code class="literal">/</CODE
>, it assumes you
are using UNIX emulation and applies the UNIX syntax rules instead for that
function call only. If you haven't called
<code class="literal">fileparse_set_fstype()</CODE
>, the syntax is chosen by
examining the <code class="literal">osname</CODE
> entry from the Config package
according to these rules.</P
></DD
><dt class="term"><code class="literal">fileparse</CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-22294"></A
>The <code class="literal">fileparse()</CODE
> routine divides a file specification into
three parts: a leading <code class="replaceable"><i>path</I
></CODE
>, a file
<code class="replaceable"><i>name</I
></CODE
>, and a <code class="replaceable"><i>suffix</I
></CODE
>.  The
<code class="replaceable"><i>path</I
></CODE
> contains everything up to and including the last
directory separator in the input file specification.  The remainder of the input
file specification is then divided into <code class="replaceable"><i>name</I
></CODE
> and
<code class="replaceable"><i>suffix</I
></CODE
> based on the optional patterns you specify in
<code class="literal">@suffixlist</CODE
>.  Each element of this list is interpreted as a
regular expression, and is matched against the end of
<code class="replaceable"><i>name</I
></CODE
>.  If this succeeds, the matching portion of
<code class="replaceable"><i>name</I
></CODE
> is removed and prepended to
<code class="replaceable"><i>suffix</I
></CODE
>.  By proper use of
<code class="literal">@suffixlist</CODE
>, you can remove file types or versions for
examination.  You are guaranteed that if you concatenate
<code class="replaceable"><i>path</I
></CODE
>, <code class="replaceable"><i>name</I
></CODE
>, and
<code class="replaceable"><i>suffix</I
></CODE
> together in that order, the result will be
identical to the input file specification.  Using UNIX file syntax:</P
><pre class="programlisting">($name, $path, $suffix) = fileparse('/virgil/aeneid/draft.book7',
                                                  '\.book\d+');</PRE
><p class="para">would yield:</P
><pre class="programlisting">$name   eq 'draft'
$path   eq '/virgil/aeneid',
$suffix eq '.book7'</PRE
><p class="para">(Note that the suffix pattern is in single quotes.  You'd have to double the
backslashes if you used double quotes, since double quotes do backslash
interpretation.)
Similarly, using VMS syntax:</P
><pre class="programlisting">($name, $path, $suffix) = fileparse('Doc_Root:[Help]Rhetoric.Rnh', '\..*');</PRE
><p class="para">would yield:</P
><pre class="programlisting">$name   eq 'Rhetoric'
$path   eq 'Doc_Root:[Help]'
$suffix eq '.Rnh'</PRE
></DD
><dt class="term"><code class="literal">basename</CODE
></DT
><dd class="listitem"><p class="para">The <code class="literal">basename()</CODE
> routine returns the first element of the list produced
by calling <code class="literal">fileparse()</CODE
> with the same arguments.  It is provided for
compatibility with the UNIX shell command <em class="emphasis">basename</EM
>(1).</P
></DD
><dt class="term"><code class="literal">dirname</CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-22331"></A
>The <code class="literal">dirname()</CODE
> routine returns the directory portion of the input file
specification.  When using VMS or MacOS syntax, this is identical to the
second element of the list produced by calling <code class="literal">fileparse()</CODE
> with the same
input file specification.  When using UNIX or MS-DOS syntax, the return
value conforms to the behavior of the UNIX shell command <em class="emphasis">dirname</EM
>(1).  This
is usually the same as the behavior of <code class="literal">fileparse()</CODE
>, but differs in some
cases.  For example, for the input file specification <code class="literal">lib/</CODE
>,
<code class="literal">fileparse()</CODE
>
considers the directory name to be <em class="emphasis">lib/</EM
>, while <code class="literal">dirname()</CODE
> considers
the directory name to be <b class="emphasis.bold">.</B
> (dot).</P
></DD
></DL
><a class="indexterm" name="AUTOID-22342"></A
><a class="indexterm" name="AUTOID-22343"></A
><a class="indexterm" name="AUTOID-22344"></A
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT2" href="ch07_026.htm#AUTOID-22188" title="7.2.26 Fcntl&nbsp;- Load the C fcntl.h Defines"><img src="../gifs/txtpreva.gif" alt="Previous: 7.2.26 Fcntl&nbsp;- Load the C fcntl.h Defines" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Programming Perl"><img src="../gifs/txthome.gif" alt="Programming Perl" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT2" href="ch07_028.htm#AUTOID-22345" title="7.2.28 File::CheckTree&nbsp;- Run Many Tests on a Collection of Files"><img src="../gifs/txtnexta.gif" alt="Next: 7.2.28 File::CheckTree&nbsp;- Run Many Tests on a Collection of Files" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">7.2.26 Fcntl&nbsp;- Load the C fcntl.h Defines</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">7.2.28 File::CheckTree&nbsp;- Run Many Tests on a Collection of Files</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
