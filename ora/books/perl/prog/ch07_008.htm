<html><head>
<title>[Chapter 7] 7.2.8 DB_File&nbsp;- Access to Berkeley DB</TITLE>
<meta name="DC.title" content="Programming Perl"><meta name="DC.creator" content="Larry Wall, Tom Christiansen &amp; Randal L. Schwartz"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T02:01:27Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-149-6" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch07_02.htm" title="7.2 Library Modules"><link rel="prev" href="ch07_007.htm#AUTOID-19274" title="7.2.7 Cwd&nbsp;- Get Pathname of Current Working Directory"><link rel="next" href="ch07_009.htm#AUTOID-19560" title="7.2.9 Devel::SelfStubber&nbsp;- Generate Stubs for a SelfLoading Module"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Programming Perl" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Programming Perl"><area shape="RECT" coords="467,0,514,18" href="../search/psrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT2" href="ch07_007.htm#AUTOID-19274" title="7.2.7 Cwd&nbsp;- Get Pathname of Current Working Directory"><img src="../gifs/txtpreva.gif" alt="Previous: 7.2.7 Cwd&nbsp;- Get Pathname of Current Working Directory" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch07_01.htm" title="7. The Standard Perl Library">Chapter 7<br>The Standard Perl Library</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT2" href="ch07_009.htm#AUTOID-19560" title="7.2.9 Devel::SelfStubber&nbsp;- Generate Stubs for a SelfLoading Module"><img src="../gifs/txtnexta.gif" alt="Next: 7.2.9 Devel::SelfStubber&nbsp;- Generate Stubs for a SelfLoading Module" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT2"><h3 class="sect2"><a class="title" name="AUTOID-19316">7.2.8 DB_File&nbsp;- Access to Berkeley DB</A
></H3
><pre class="programlisting">use DB_File;

# brackets in following code indicate optional arguments
[$X =] tie %hash,  &quot;DB_File&quot;, $filename [, $flags, $mode, $DB_HASH];
[$X =] tie %hash,  &quot;DB_File&quot;, $filename, $flags, $mode, $DB_BTREE;
[$X =] tie @array, &quot;DB_File&quot;, $filename, $flags, $mode, $DB_RECNO;

$status = $X-&gt;del($key [, $flags]);
$status = $X-&gt;put($key, $value [, $flags]);
$status = $X-&gt;get($key, $value [, $flags]);
$status = $X-&gt;seq($key, $value [, $flags]);
$status = $X-&gt;sync([$flags]);
$status = $X-&gt;fd;

untie %hash;
untie @array;</PRE
><p class="para"><a class="indexterm" name="CH07.DBF1"></A
><a class="indexterm" name="CH07.DBF2"></A
>DB_File is the most flexible of the DBM-style tie modules.  It
allows Perl programs to make use of the
facilities provided by Berkeley DB (not included).  If you intend to use this
module you should really have a copy of the Berkeley DB manual page at
hand.  The interface defined here mirrors the Berkeley DB interface
closely.</P
><p class="para">Berkeley DB is a C library that provides a consistent interface to a
number of database formats.  DB_File provides an interface to all
three of the database (file) types currently supported by Berkeley DB.</P
><p class="para">The file types are:</P
><dl class="variablelist"><dt class="term"><code class="literal">DB_HASH</CODE
></DT
><dd class="listitem"><p class="para">Allows arbitrary key/data pairs to be stored in data files.  This is
equivalent to the functionality provided by other hashing packages like
DBM, NDBM, ODBM, GDBM, and SDBM.  Remember, though, the files created
using <code class="literal">DB_HASH</CODE
> are not binary compatible with any of the other
packages mentioned.

A default hashing algorithm that will be adequate for most
applications is built into Berkeley DB.  If you do need to use your own
hashing algorithm, it's possible to write your own and have
DB_File use it instead.</P
></DD
><dt class="term"><code class="literal">DB_BTREE</CODE
></DT
><dd class="listitem"><p class="para">The btree format allows arbitrary key/data pairs to be stored in a
sorted, balanced binary tree.

It is possible to provide a user-defined
Perl routine to perform the comparison of keys.  By default, though, the
keys are stored in lexical order.  This is useful for providing 
an ordering for your hash keys, and may be used on hashes that are 
only in memory and never go to disk.</P
></DD
><dt class="term"><code class="literal">DB_RECNO</CODE
></DT
><dd class="listitem"><p class="para"><code class="literal">DB_RECNO</CODE
> allows both fixed-length and variable-length flat text files
to be manipulated using the same key/value pair interface as in <code class="literal">DB_HASH</CODE
>
and <code class="literal">DB_BTREE</CODE
>.  In this case the key will consist of a record (line)
number.</P
></DD
></DL
><div class="sect3"><h4 class="sect3"><a class="title" name="PERL2-CH-7-SECT-1.4">7.2.8.1 How does DB_File interface to Berkeley DB?</A
></H4
><p class="para">DB_File gives access to Berkeley DB files using Perl's <a class="xref" href="ch03_171.htm#PERL2-CMD-TIE" title="tie"><b class="xref.cmd">tie</B
></A
>
function.  This allows DB_File to access Berkeley DB files using either a
hash (for <code class="literal">DB_HASH</CODE
> and <code class="literal">DB_BTREE</CODE
> file types) or
an ordinary array (for the <code class="literal">DB_RECNO</CODE
> file type).</P
><p class="para">In addition to the <a class="xref" href="ch03_171.htm#PERL2-CMD-TIE" title="tie"><b class="xref.cmd">tie</B
></A
> interface, it is also possible to use most of
the functions provided in the Berkeley DB API.</P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PERL2-CH-7-SECT-1.5">7.2.8.2 Differences from Berkeley DB</A
></H4
><p class="para">Berkeley DB uses the function <em class="emphasis">dbopen</EM
>(3) to open or create a database.
Below is the C prototype for <em class="emphasis">dbopen</EM
>(3).</P
><pre class="programlisting">DB *
dbopen (const char *file, int flags, int mode,
        DBTYPE type, const void *openinfo)</PRE
><p class="para">The <code class="literal">type</CODE
> parameter is an enumeration selecting one of the
three interface methods, <code class="literal">DB_HASH</CODE
>, <code class="literal">DB_BTREE</CODE
> or
<code class="literal">DB_RECNO</CODE
>.
Depending on which of these is actually chosen, the final parameter,
<code class="literal">openinfo</CODE
>, points to a data structure that allows tailoring of the
specific interface method.</P
><p class="para">This interface is handled slightly differently in DB_File.  Here is
an equivalent call using DB_File.</P
><pre class="programlisting">tie %array, &quot;DB_File&quot;, $filename, $flags, $mode, $DB_HASH;</PRE
><p class="para">The <code class="literal">filename</CODE
>, <code class="literal">flags</CODE
>, and <code class="literal">mode</CODE
> parameters are the direct
equivalent of their <em class="emphasis">dbopen</EM
>(3) counterparts.  The final parameter
<code class="literal">$DB_HASH</CODE
> performs the function of both the <code class="literal">type</CODE
> and
<code class="literal">openinfo</CODE
> parameters in <em class="emphasis">dbopen</EM
>(3).</P
><p class="para">In the example above <code class="literal">$DB_HASH</CODE
> is actually a reference to a hash
object.  DB_File has three of these predefined references.  Apart
from <code class="literal">$DB_HASH</CODE
>, there are also <code class="literal">$DB_BTREE</CODE
> and <code class="literal">$DB_RECNO</CODE
>.</P
><p class="para">The keys allowed in each of these predefined references are limited to
the names used in the equivalent C structure.  So, for example, the
<code class="literal">$DB_HASH</CODE
> reference will only allow keys called <code class="literal">bsize</CODE
>,
<code class="literal">cachesize</CODE
>, <code class="literal">ffactor</CODE
>, <code class="literal">hash</CODE
>, <code class="literal">lorder</CODE
>, and
<code class="literal">nelem</CODE
>.</P
><p class="para">To change one of these elements, just assign to it like this:</P
><pre class="programlisting">$DB_HASH-&gt;{cachesize} = 10_000;</PRE
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PERL2-CH-7-SECT-1.6">7.2.8.3 Array offsets</A
></H4
><p class="para">In order to make <code class="literal">RECNO</CODE
> more compatible with Perl,
the array offset for all
<code class="literal">RECNO</CODE
> arrays begins at 0 rather than 1 as in Berkeley DB.</P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PERL2-CH-7-SECT-1.7">7.2.8.4 In-memory databases</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-19401"></A
><a class="indexterm" name="AUTOID-19404"></A
>Berkeley DB allows the creation of in-memory databases by using <code class="literal">NULL</CODE
>
(that is, a <code class="literal">(char *)0</CODE
> in C) in place of the filename.  <code class="literal">DB_File</CODE
>
uses <a class="xref" href="ch03_180.htm#PERL2-CMD-UNDEF" title="undef"><b class="xref.cmd">undef</B
></A
> instead of <code class="literal">NULL</CODE
> to provide this functionality.<a class="indexterm" name="AUTOID-19411"></A
><a class="indexterm" name="AUTOID-19414"></A
><a class="indexterm" name="AUTOID-19417"></A
></P
><pre class="programlisting">use strict;
use Fcntl;
use DB_File;

my ($k, $v, %hash);

tie(%hash, 'DB_File', undef, O_RDWR|O_CREAT, 0, $DB_BTREE)
    or die &quot;can't tie DB_File: $!&quot;:

foreach $k (keys %ENV) {
    $hash{$k} = $ENV{$k};
}

# this will now come out in sorted lexical order 
# without the overhead of sorting the keys
while  (($k,$v) = each %hash) {
    print &quot;$k=$v\n&quot;;
}</PRE
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PERL2-CH-7-SECT-1.8">7.2.8.5 Using the Berkeley DB interface directly</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-19424"></A
>In addition to accessing Berkeley DB using a tied hash or array, you can
also make direct use of most functions defined in the
Berkeley DB documentation.</P
><p class="para">To do this you need to remember the return value from <a class="xref" href="ch03_171.htm#PERL2-CMD-TIE" title="tie"><b class="xref.cmd">tie</B
></A
>, or
use the <a class="xref" href="ch03_172.htm#PERL2-CMD-TIED" title="tied"><b class="xref.cmd">tied</B
></A
> function to get at it yourself later on.</P
><pre class="programlisting">$db = tie %hash, &quot;DB_File&quot;, &quot;filename&quot;;</PRE
><p class="para">Once you have done that, you can access the Berkeley DB API functions
directly.</P
><pre class="programlisting">$db-&gt;put($key, $value, R_NOOVERWRITE);  # invoke the DB &quot;put&quot; function</PRE
><p class="para">All the functions defined in the <em class="emphasis">dbopen</EM
>(3) manpage are available
except for
<code class="literal">close()</CODE
> and <code class="literal">dbopen()</CODE
> itself.  The DB_File interface to these
functions mirrors the way Berkeley DB
works.  In particular, note that all these functions return only a status
value.  Whenever a Berkeley DB function returns data via one of its
parameters, the DB_File equivalent does exactly the same thing.</P
><p class="para">All the constants defined in the <em class="emphasis">dbopen</EM
> manpage are also available.</P
><p class="para">Below is a list of the functions available.  (The comments only tell you
the differences from the C version.)</P
><dl class="variablelist"><dt class="term"><code class="literal">get</CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-19446"></A
>The <code class="literal">$flags</CODE
> parameter is optional.
The value associated with the key you request is returned in
the <code class="literal">$value</CODE
> parameter.</P
></DD
><dt class="term"><code class="literal">put</CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-19455"></A
>As usual the <code class="literal">flags</CODE
> parameter is optional.

If you use either the <code class="literal">R_IAFTER</CODE
> or <code class="literal">R_IBEFORE</CODE
> flags, the
<code class="literal">$key</CODE
> parameter will be set to the record number of the inserted
key/value pair.</P
></DD
><dt class="term"><code class="literal">del</CODE
></DT
><dd class="listitem"><p class="para">The <code class="literal">$flags</CODE
> parameter is optional.</P
></DD
><dt class="term"><code class="literal">fd  </CODE
></DT
><dd class="listitem"><p class="para">No differences encountered.</P
></DD
><dt class="term"><code class="literal">seq</CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-19477"></A
>The <code class="literal">$flags</CODE
> parameter is optional.  Both the <code class="literal">$key</CODE
> and
<code class="literal">$value</CODE
> parameters will be set.</P
></DD
><dt class="term"><code class="literal">sync</CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-19487"></A
>The <code class="literal">$flags</CODE
> parameter is optional.</P
></DD
></DL
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PERL2-CH-7-SECT-1.9">7.2.8.6 Examples</A
></H4
><p class="para">Here are a few examples.  First, using <code class="literal">$DB_HASH</CODE
>:</P
><pre class="programlisting">use DB_File;
use Fcntl;

tie %h,  &quot;DB_File&quot;, &quot;hashed&quot;, O_RDWR|O_CREAT, 0644, $DB_HASH;

# Add a key/value pair to the file
$h{apple} = &quot;orange&quot;;

# Check for value of a key
print &quot;No, we have some bananas.\n&quot; if $h{banana};

# Delete
delete $h{&quot;apple&quot;};
untie %h;</PRE
><p class="para">Here is an example using <code class="literal">$DB_BTREE</CODE
>.  Just to make life more
interesting, the default comparison function is not used.  Instead,
a Perl subroutine, <code class="literal">Compare()</CODE
>, does a case-insensitive comparison.</P
><pre class="programlisting">use DB_File;
use Fcntl;

sub Compare {
    my ($key1, $key2) = @_;
    &quot;\L$key1&quot; cmp &quot;\L$key2&quot;;
}

$DB_BTREE-&gt;{compare} = 'Compare';
tie %h,  'DB_File', &quot;tree&quot;, O_RDWR|O_CREAT, 0644, $DB_BTREE;

# Add a key/value pair to the file
$h{Wall}  = 'Larry';
$h{Smith} = 'John';
$h{mouse} = 'mickey';
$h{duck}  = 'donald';

# Delete
delete $h{duck};

# Cycle through the keys printing them in order.
# Note it is not necessary to sort the keys as
# the btree will have kept them in order automatically.
while ($key = each %h) { print &quot;$key\n&quot; }

untie %h;</PRE
><p class="para">The preceding code yields this output:</P
><pre class="programlisting">mouse
Smith
Wall</PRE
><p class="para">Next, an example using <code class="literal">$DB_RECNO</CODE
>.  You may access a regular textfile as 
an array of lines.  But the first line of the text file is the
zeroth element of the array, and so on.  This provides a clean 
way to seek to a particular line in a text file.<a class="indexterm" name="AUTOID-19503"></A
></P
><pre class="programlisting">my(@line, $number);
$number = 10;
use Fcntl;
use DB_File;
tie(@line, &quot;DB_File&quot;, &quot;/tmp/text&quot;, O_RDWR|O_CREAT, 0644, $DB_RECNO)
    or die &quot;can't tie file: $!&quot;;
$line[$number - 1] = &quot;this is a new line $number&quot;;</PRE
><p class="para">Here's an example of updating a file in place:</P
><pre class="programlisting">use Fcntl;
use DB_File;
tie(@file, 'DB_File', &quot;/tmp/sample&quot;, O_RDWR, 0644, $DB_RECNO)
    or die &quot;can't update /tmp/sample: $!&quot;;
print &quot;line #3 was &quot;, $file[2], &quot;\n&quot;;
$file[2] = `date`;
untie @file;</PRE
><p class="para">Note that the tied array interface is incomplete, causing
some operations on the resulting array to fail in strange ways.  See the
discussion of tied arrays in <a class="xref" href="ch05_01.htm" title="Packages, Modules, and Object Classes">Chapter 5</A
>.  Some object methods are provided 
to avoid this.  
Here's an example of reading a file backward:<a class="indexterm" name="AUTOID-19511"></A
><a class="indexterm" name="AUTOID-19514"></A
></P
><pre class="programlisting">use DB_File;
use Fcntl;
$H = tie(@h, &quot;DB_File&quot;, $file, O_RDWR, 0640, $DB_RECNO)
        or die &quot;Cannot open file $file: $!\n&quot;;
# print the records in reverse order
for ($i = $H-&gt;length - 1; $i &gt;= 0; --$i) { 
    print &quot;$i: $h[$i]\n&quot;;
}
untie @h;</PRE
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PERL2-CH-7-SECT-1.10">7.2.8.7 Locking databases</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-19521"></A
><a class="indexterm" name="AUTOID-19523"></A
><a class="indexterm" name="AUTOID-19525"></A
>Concurrent access of a read-write database by several parties requires
that each use some kind of locking.  Here's an example that uses the
<code class="literal">fd()</CODE
> method to get the file descriptor, and then a careful
<a class="xref" href="ch03_102.htm#PERL2-CMD-OPEN" title="open"><b class="xref.cmd">open</B
></A
> to give something Perl will <a class="xref" href="ch03_039.htm#PERL2-CMD-FLOCK" title="flock"><b class="xref.cmd">flock</B
></A
> for you.  Run this
repeatedly in the background to watch the locks granted in proper order.
You have to call the <code class="literal">sync()</CODE
> method to ensure that the writes make
it to disk between access, or else the library would normally hold some
in its own cache.</P
><pre class="programlisting">use Fcntl;
use DB_File;</PRE
><pre class="programlisting">use strict;</PRE
><pre class="programlisting">sub LOCK_SH { 1 }
sub LOCK_EX { 2 }
sub LOCK_NB { 4 }
sub LOCK_UN { 8 }</PRE
><pre class="programlisting">my($oldval, $fd, $db_obj, %db_hash, $value, $key);</PRE
><pre class="programlisting">$key   = shift || 'default';
$value = shift || 'magic';</PRE
><pre class="programlisting">$value .= &quot; $$&quot;;</PRE
><pre class="programlisting">$db_obj = tie(%db_hash, 'DB_File', '/tmp/foo.db', O_CREAT|O_RDWR, 0644)
                    or die &quot;dbcreat /tmp/foo.db $!&quot;;
$fd = $db_obj-&gt;fd;
print &quot;$$: db fd is $fd\n&quot;;
open(DB_FH, &quot;+&lt;&amp;=$fd&quot;) or die &quot;fdopen $!&quot;;</PRE
><pre class="programlisting">unless (flock (DB_FH, LOCK_SH | LOCK_NB)) {
    print &quot;$$: CONTENTION; can't read during write update!
                Waiting for read lock ($!) ....&quot;;
    unless (flock (DB_FH, LOCK_SH)) { die &quot;flock: $!&quot; }
}
print &quot;$$: Read lock granted\n&quot;;</PRE
><pre class="programlisting">$oldval = $db_hash{$key};
print &quot;$$: Old value was $oldval\n&quot;;
flock(DB_FH, LOCK_UN);</PRE
><pre class="programlisting">unless (flock (DB_FH, LOCK_EX | LOCK_NB)) {
    print &quot;$$: CONTENTION; must have exclusive lock!
                Waiting for write lock ($!) ....&quot;;
    unless (flock (DB_FH, LOCK_EX)) { die &quot;flock: $!&quot; }
}</PRE
><pre class="programlisting">print &quot;$$: Write lock granted\n&quot;;
$db_hash{$key} = $value;
sleep 10;</PRE
><pre class="programlisting">$db_obj-&gt;sync();                   # to flush
flock(DB_FH, LOCK_UN);
undef $db_obj;                     # removing the last reference to the DB
                                   # closes it. Closing DB_FH is implicit.
untie %db_hash;
print &quot;$$: Updated db to $key=$value\n&quot;;</PRE
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PERL2-CH-7-SECT-1.11">7.2.8.8 See also</A
></H4
><p class="para">Related manpages: <em class="emphasis">dbopen</EM
>(3),
<em class="emphasis">hash</EM
>(3), <em class="emphasis">recno</EM
>(3),
<em class="emphasis">btree</EM
>(3).</P
><p class="para">Berkeley DB is available from these locations:</P
><ul class="itemizedlist"><li class="listitem"><p class="para"><a class="systemitem.url" href="../../../WebStripper/protected.html#link=ftp://ftp.cs.berkeley.edu/ucb/4bsd/db.1.85.tar.gz">ftp://ftp.cs.berkeley.edu/ucb/4bsd/db.1.85.tar.gz</A
></P
></LI
><li class="listitem"><p class="para"><a class="systemitem.url" href="../../../../../../../www.perl.com/CPAN/src/misc/db.1.85.tar.gz">http://www.perl.com/CPAN/src/misc/db.1.85.tar.gz</A
><a class="indexterm" name="AUTOID-19558"></A
><a class="indexterm" name="AUTOID-19559"></A
></P
></LI
></UL
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT2" href="ch07_007.htm#AUTOID-19274" title="7.2.7 Cwd&nbsp;- Get Pathname of Current Working Directory"><img src="../gifs/txtpreva.gif" alt="Previous: 7.2.7 Cwd&nbsp;- Get Pathname of Current Working Directory" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Programming Perl"><img src="../gifs/txthome.gif" alt="Programming Perl" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT2" href="ch07_009.htm#AUTOID-19560" title="7.2.9 Devel::SelfStubber&nbsp;- Generate Stubs for a SelfLoading Module"><img src="../gifs/txtnexta.gif" alt="Next: 7.2.9 Devel::SelfStubber&nbsp;- Generate Stubs for a SelfLoading Module" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">7.2.7 Cwd&nbsp;- Get Pathname of Current Working Directory</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">7.2.9 Devel::SelfStubber&nbsp;- Generate Stubs for a SelfLoading Module</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
