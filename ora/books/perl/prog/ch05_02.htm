<html><head>
<title>[Chapter 5] 5.2 Modules</TITLE>
<meta name="DC.title" content="Programming Perl"><meta name="DC.creator" content="Larry Wall, Tom Christiansen &amp; Randal L. Schwartz"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:58:27Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-149-6" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch05_01.htm" title="5. Packages, Modules, and Object Classes"><link rel="prev" href="ch05_01.htm" title="5.1 Packages"><link rel="next" href="ch05_03.htm#PERL2-CH-5-SECT-3.9" title="5.3 Objects"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Programming Perl" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Programming Perl"><area shape="RECT" coords="467,0,514,18" href="../search/psrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch05_01.htm" title="5.1 Packages"><img src="../gifs/txtpreva.gif" alt="Previous: 5.1 Packages" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch05_01.htm" title="5. Packages, Modules, and Object Classes">Chapter 5<br>Packages, Modules, and Object Classes</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch05_03.htm#PERL2-CH-5-SECT-3.9" title="5.3 Objects"><img src="../gifs/txtnexta.gif" alt="Next: 5.3 Objects" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="PERL2-CH-5-SECT-2">5.2 Modules</A
></H2
><p class="para"><a class="indexterm" name="CH05.MOD1"></A
>A module is just a reusable package that is defined in a library file
whose name is the same as the name of the package (with a <em class="emphasis">.pm</EM
> on the
end).  A module may provide a mechanism for exporting some of its
symbols into the symbol table of any other package using it.  Or it may
function as a class definition and make its operations available
implicitly through method calls on the class and its objects, without
explicitly exporting any symbols.  Or it can do a little of both.</P
><p class="para">Most exporter modules rely on the customary exportation semantics
supplied by the Exporter module.
For example, to create an exporting module called Fred, create
a file called <em class="emphasis">Fred.pm</EM
> and put this at the start of it:</P
><p class="para"><pre class="programlisting">package      Fred;
require      Exporter;
@ISA       = qw(Exporter);
@EXPORT    = qw(func1 func2);
@EXPORT_OK = qw($sally @listabob %harry func3);</PRE
></P
><p class="para">Then go on to declare and use your variables and functions without any
qualifications.  See the Exporter module documentation in <a class="xref" href="ch07_01.htm" title="The Standard Perl Library">Chapter 7</A
> for
further information on the mechanics and style issues in module
creation.</P
><p class="para">Perl modules are included in your program by saying:</P
><pre class="programlisting">use Module;</PRE
><p class="para">or:</P
><pre class="programlisting">use Module <code class="replaceable"><i>LIST</I
></CODE
>;</PRE
><p class="para">This preloads Module at compile time, and then imports from it the
symbols you've requested, either implicitly or explicitly.  If you do
not supply a list of symbols in a <code class="replaceable"><i>LIST</I
></CODE
>, then the list from the module's
<code class="literal">@EXPORT</CODE
> array is used.  (And if you do supply a <code class="replaceable"><i>LIST</I
></CODE
>, all your symbols
should be mentioned in either <code class="literal">@EXPORT</CODE
> or <code class="literal">@EXPORT_OK</CODE
>, or an error
will result.) The two declarations above are exactly equivalent to:</P
><pre class="programlisting">BEGIN {
    require &quot;Module.pm&quot;;
    Module-&gt;import();
}</PRE
><p class="para">or:</P
><pre class="programlisting">BEGIN {
    require &quot;Module.pm&quot;;
    Module-&gt;import(<code class="replaceable"><i>LIST</I
></CODE
>);
}</PRE
><p class="para">(We said that the first example above
defaults to using the module's <code class="literal">@EXPORT</CODE
>
list, but that is a bit of a fib.  It does this if the module uses the
standard Exporter semantics.  But a module can do anything it jolly well<a class="indexterm" name="AUTOID-15430"></A
>
pleases when you do an import, since <a class="xref" href="ch03_185.htm#PERL2-CMD-USE" title="use"><b class="xref.cmd">use</B
></A
> just calls the ordinary <code class="literal">import()</CODE
> method for the module, as above, and that method can be defined to do anything.  Well, almost anything.)</P
><p class="para">Sometimes you might not wish to import anything from a module that
exports things by default.  As a special case, you can say:</P
><pre class="programlisting">use Module ();</PRE
><p class="para">which is exactly equivalent to</P
><pre class="programlisting">BEGIN { require &quot;Module.pm&quot;; }</PRE
><p class="para">Note that any initialization code in the Module is still run, as it<a class="indexterm" name="AUTOID-15439"></A
>
would be for an ordinary <a class="xref" href="ch03_123.htm#PERL2-CMD-REQUIRE" title="require"><b class="xref.cmd">require</B
></A
>.  It's only the <a class="xref" href="ch03_074.htm#PERL2-CMD-IMPORT" title="import"><b class="xref.cmd">import</B
></A
> that is
suppressed.  If you really don't care whether the module is pulled in at
compile-time or run-time, you can just say:</P
><pre class="programlisting">require Module;</PRE
><p class="para">This is slightly preferred over <code class="literal">require &quot;Module.pm&quot;;</CODE
> because it
introduces <code class="literal">Module</CODE
> as a package, which can clarify certain error
messages that the parser might emit.</P
><p class="para"><a class="indexterm" name="AUTOID-15448"></A
>All Perl module files have the extension <em class="emphasis">.pm</EM
>.  Both <a class="xref" href="ch03_185.htm#PERL2-CMD-USE" title="use"><b class="xref.cmd">use</B
></A
> and
<a class="xref" href="ch03_123.htm#PERL2-CMD-REQUIRE" title="require"><b class="xref.cmd">require</B
></A
> will assume this (as well as the quotes) so that you don't
have to spell out <code class="literal">&quot;Module.pm&quot;</CODE
>.  This helps to differentiate new
modules from the <em class="emphasis">.pl</EM
> and <em class="emphasis">.ph</EM
> files used by prior versions of Perl.
Module names are also capitalized unless they're functioning as pragmas.
Pragmas are in
effect compiler directives, and such modules are sometimes 
called &quot;pragmatic modules&quot;&nbsp;- or even &quot;pragmata&quot; if you're a classicist.</P
><p class="para"><a class="indexterm" name="AUTOID-15458"></A
>Because the <a class="xref" href="ch03_185.htm#PERL2-CMD-USE" title="use"><b class="xref.cmd">use</B
></A
> declaration (in any form) implies a <code class="literal">BEGIN</CODE
> block,
the module is loaded (and any executable initialization code in it run) as
soon as the <a class="xref" href="ch03_185.htm#PERL2-CMD-USE" title="use"><b class="xref.cmd">use</B
></A
> declaration is compiled, <em class="emphasis">before</EM
> the rest of the
file is compiled.  This is how <a class="xref" href="ch03_185.htm#PERL2-CMD-USE" title="use"><b class="xref.cmd">use</B
></A
> is able to function as a pragma
mechanism to change the compiler's behavior, and also how modules are
able to declare subroutines that are then visible as (unqualified) list
operators for the rest of the current file.  If, on the other hand, you
invoke <a class="xref" href="ch03_123.htm#PERL2-CMD-REQUIRE" title="require"><b class="xref.cmd">require</B
></A
> instead of <a class="xref" href="ch03_185.htm#PERL2-CMD-USE" title="use"><b class="xref.cmd">use</B
></A
>, you must explicitly qualify any
invocation of routines within the required package.</P
><pre class="programlisting">require Cwd;    # make Cwd:: accessible with qualification
$here = Cwd::getcwd();

use Cwd;        # import names from Cwd:: -- no qualification necessary
$here = getcwd();</PRE
><p class="para">In general, <a class="xref" href="ch03_185.htm#PERL2-CMD-USE" title="use"><b class="xref.cmd">use</B
></A
> is recommended over <a class="xref" href="ch03_123.htm#PERL2-CMD-REQUIRE" title="require"><b class="xref.cmd">require</B
></A
> because you get
your error messages sooner.  But <a class="xref" href="ch03_123.htm#PERL2-CMD-REQUIRE" title="require"><b class="xref.cmd">require</B
></A
> is useful for pulling
in modules lazily at run-time.</P
><p class="para">Perl packages may be nested inside other packages, so we can have
package names containing &quot;<code class="literal">::</CODE
>&quot;.  But such compound names don't work
well as filenames on many systems.  Therefore, if a module's name is,
say, <code class="literal">Text::Soundex</CODE
>, then its definition is actually found in the
library file <em class="emphasis">Text/Soundex.pm</EM
> (or whatever the equivalent pathname is
on your system).</P
><p class="para">Perl modules always load a <em class="emphasis">.pm</EM
> file, but there may also be dynamically
linked executables or autoloaded subroutine definitions associated with
the module.  If so, these will be entirely transparent to the user of
the module.  It is the responsibility of the <em class="emphasis">.pm</EM
> file to load (or
arrange to autoload) any additional functionality.  The POSIX module
happens to do both dynamic loading and autoloading, but the user can
just say</P
><pre class="programlisting">use POSIX;</PRE
><p class="para">to get it all.</P
><div class="sect2"><h3 class="sect2"><a class="title" name="PERL2-CH-5-SECT-2.1">5.2.1 Access to Modules</A
></H3
><p class="para">Perl does not patrol private/public borders within its modules&nbsp;- unlike
languages such as C++, Ada, and Modula-17, Perl isn't infatuated with
enforced privacy.  As we mentioned at the beginning of the chapter, a
Perl module would prefer that you stayed out of its living room because
you weren't invited, not because it has a shotgun.</P
><p class="para">The module and its user have a contract, part of which is common law and
part of which is written.  Part of the common law contract is that a
module doesn't pollute any namespace it wasn't asked to pollute.  The written
contract for the module (that is, the documentation) may make other
provisions.  But then, having read the written contract, you presumably
know that when you say:</P
><pre class="programlisting">use RedefineTheWorld;</PRE
><p class="para">you're redefining the world, and you're willing to take the consequences.
The next section talks about one way to redefine parts of the world.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PERL2-CH-5-SECT-2.2">5.2.2 Overriding Built-in Functions</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-15491"></A
><a class="indexterm" name="AUTOID-15494"></A
><a class="indexterm" name="AUTOID-15497"></A
>Many built-in functions may be <em class="emphasis">overridden</EM
>, although (like knocking holes
in your walls) you should only try this occasionally and for good
reason.  Typically, this might be done by a package attempting to
emulate missing built-in functionality on a non-UNIX system.  (Do not
confuse overriding with <em class="emphasis">overloading</EM
>, which adds additional
object-oriented meanings to built-in operators, but doesn't override much
of anything.  See the discussion of the overload module in <a class="xref" href="ch07_01.htm" title="The Standard Perl Library">Chapter 7</A
> for more on that.)</P
><p class="para">Overriding may be done only by importing the name from a
module&nbsp;- ordinary predeclaration isn't good enough.  To be perfectly
forthcoming, it's the assignment of a code reference to a typeglob that
triggers the override, as in <code class="literal">*open = \&amp;myopen</CODE
>, which is how importing
of functions is implemented.  Furthermore, the assignment must occur in
some other package; this makes unintentional overriding through typeglob
aliasing more difficult.  However, if you really want to do your own
overriding, don't despair, because the <code class="literal">subs</CODE
> pragma lets you predeclare
subroutines via the import syntax, and these names may then override the
built-in ones:</P
><pre class="programlisting">use subs qw(chdir chroot chmod chown);
chdir $somewhere;
sub chdir { ... }</PRE
><p class="para">Library modules should not in general export built-in names like
<b class="emphasis.bold">open</B
>
or <b class="emphasis.bold">chdir</B
> as part of their default
<code class="literal">@EXPORT</CODE
> list, since these names may
sneak into someone else's namespace and change the semantics unexpectedly.
Instead, if the module adds the name to the <code class="literal">@EXPORT_OK</CODE
> list, then it's
possible for users to import the name explicitly, but not implicitly.
That is, they could say</P
><pre class="programlisting">use Module 'open';</PRE
><p class="para">and it would import the <a class="xref" href="ch03_102.htm#PERL2-CMD-OPEN" title="open"><b class="xref.cmd">open</B
></A
> override, but if they said</P
><pre class="programlisting">use Module;</PRE
><p class="para">they would get the default imports without the overrides.</P
><p class="para">The original versions of the built-in functions are always accessible
via the <code class="literal">CORE</CODE
> pseudopackage.  Therefore,
<code class="literal">CORE::chdir()</CODE
> will always be the version that Perl was compiled
with, even if the regular <a class="xref" href="ch03_011.htm#PERL2-CMD-CHDIR" title="chdir"><b class="xref.cmd">chdir</B
></A
> function has been overridden.</P
><a class="indexterm" name="AUTOID-15521"></A
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch05_01.htm" title="5.1 Packages"><img src="../gifs/txtpreva.gif" alt="Previous: 5.1 Packages" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Programming Perl"><img src="../gifs/txthome.gif" alt="Programming Perl" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch05_03.htm#PERL2-CH-5-SECT-3.9" title="5.3 Objects"><img src="../gifs/txtnexta.gif" alt="Next: 5.3 Objects" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">5.1 Packages</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">5.3 Objects</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
