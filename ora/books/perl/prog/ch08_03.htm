<html><head>
<title>[Chapter 8] 8.3 Efficiency</TITLE>
<meta name="DC.title" content="Programming Perl"><meta name="DC.creator" content="Larry Wall, Tom Christiansen &amp; Randal L. Schwartz"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T02:07:13Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-149-6" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch08_01.htm" title="8. Other Oddments"><link rel="prev" href="ch08_02.htm#PERL2-CH-8-SECT-2.4" title="8.2 Common Goofs for Novices"><link rel="next" href="ch08_04.htm" title="8.4 Programming with Style"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Programming Perl" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Programming Perl"><area shape="RECT" coords="467,0,514,18" href="../search/psrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch08_02.htm#PERL2-CH-8-SECT-2.4" title="8.2 Common Goofs for Novices"><img src="../gifs/txtpreva.gif" alt="Previous: 8.2 Common Goofs for Novices" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch08_01.htm" title="8. Other Oddments">Chapter 8<br>Other Oddments</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch08_04.htm" title="8.4 Programming with Style"><img src="../gifs/txtnexta.gif" alt="Next: 8.4 Programming with Style" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="PERL2-CH-8-SECT-3">8.3 Efficiency</A
></H2
><p class="para"><a class="indexterm" name="CH08.PERF1"></A
><a class="indexterm" name="AUTOID-29353"></A
><a class="indexterm" name="AUTOID-29356"></A
><a class="indexterm" name="AUTOID-29359"></A
>While most of the work of programming may be simply getting a program
working properly, you may find yourself wanting more bang for the buck
out of your Perl program.  Perl's rich set of operators, datatypes, and
control constructs are not necessarily intuitive when it comes to speed
and space optimization.  Many trade-offs were made during Perl's design,
and such decisions are buried in the guts of the code.  In general, the
shorter and simpler your code is, the faster it runs, but there are
exceptions.  This section attempts to help you make it work just a wee
bit better.</P
><p class="para">(If you want it to work a lot better, you can play with the new Perl-to-C
translation modules, or rewrite your inner loop as a C extension.)</P
><p class="para"><a class="indexterm" name="AUTOID-29365"></A
>You'll note that sometimes optimizing for time may cost you in space or
programmer efficiency (indicated by conflicting hints below).  Them's
the breaks.  If programming were easy, they wouldn't need something as
complicated as a human being to do it, now would they?</P
><div class="sect2"><h3 class="sect2"><a class="title" name="PERL2-CH-8-SECT-3.1">8.3.1 Time Efficiency</A
></H3
><ul class="itemizedlist"><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-29372"></A
><a class="indexterm" name="AUTOID-29375"></A
>Use hashes instead of linear searches.
For example, instead of searching through <code class="literal">@keywords</CODE
> to see if
<b class="emphasis.bold">$_</B
> is a keyword, construct a hash with:</P
><pre class="programlisting">my %keywords;
for (@keywords) {
    $keywords{$_}++;
}</PRE
><p class="para">Then, you can quickly tell if <b class="emphasis.bold">$_</B
> contains a keyword by testing
<code class="literal">$keyword{$_}</CODE
> for a non-zero value.</P
></LI
><li class="listitem"><p class="para"> <a class="indexterm" name="AUTOID-29386"></A
><a class="indexterm" name="AUTOID-29388"></A
>
Avoid subscripting when a <b class="emphasis.bold">foreach</B
> or list operator will do.  Subscripting
sometimes forces conversion from floating point to integer, and
there's often a better way to do it.  Consider using <b class="emphasis.bold">foreach</B
>, <a class="xref" href="ch03_143.htm#PERL2-CMD-SHIFT" title="shift"><b class="xref.cmd">shift</B
></A
>,
and <a class="xref" href="ch03_154.htm#PERL2-CMD-SPLICE" title="splice"><b class="xref.cmd">splice</B
></A
> operations.  Consider saying
<code class="literal">use integer</CODE
>.  </P
></LI
><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-29397"></A
>Avoid <a class="xref" href="ch03_071.htm#PERL2-CMD-GOTO" title="goto"><b class="xref.cmd">goto</B
></A
>.
It scans outward from your current location for the indicated label.</P
></LI
><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-29402"></A
><a class="indexterm" name="AUTOID-29404"></A
>Avoid <a class="xref" href="ch03_111.htm#PERL2-CMD-PRINTF" title="printf"><b class="xref.cmd">printf</B
></A
> if <a class="xref" href="ch03_110.htm#PERL2-CMD-PRINT" title="print"><b class="xref.cmd">print</B
></A
> will work.
Quite apart from the extra overhead of <a class="xref" href="ch03_111.htm#PERL2-CMD-PRINTF" title="printf"><b class="xref.cmd">printf</B
></A
>, some
implementations have field length limitations that <a class="xref" href="ch03_110.htm#PERL2-CMD-PRINT" title="print"><b class="xref.cmd">print</B
></A
> gets
around.</P
></LI
><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-29412"></A
><a class="indexterm" name="AUTOID-29415"></A
><a class="indexterm" name="AUTOID-29418"></A
>Avoid <b class="emphasis.bold">$&amp;</B
>, <b class="emphasis.bold">$</B
><code class="literal">`</CODE
>, 
and <b class="emphasis.bold">$</B
><code class="literal">'</CODE
>.
Any occurrence in your program causes all matches to save the searched
string for possible future reference.  (However, once you've blown it, it
doesn't hurt to have more of them.)</P
></LI
><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-29428"></A
><a class="indexterm" name="AUTOID-29430"></A
>Avoid using <a class="xref" href="ch03_032.htm#PERL2-CMD-EVAL" title="eval"><b class="xref.cmd">eval</B
></A
> on a string.  An <a class="xref" href="ch03_032.htm#PERL2-CMD-EVAL" title="eval"><b class="xref.cmd">eval</B
></A
> of a string (not of a
<code class="replaceable"><i>BLOCK</I
></CODE
>) forces recompilation every time through.  The
Perl parser is pretty fast for a parser, but that's not saying much.  Nowadays
there's almost always a better way to do what you want anyway.  In particular,
any code that uses <a class="xref" href="ch03_032.htm#PERL2-CMD-EVAL" title="eval"><b class="xref.cmd">eval</B
></A
> merely to construct
variable names is obsolete, since you can now do the same directly using
symbolic references:</P
><pre class="programlisting">${$pkg . '::' . $varname} = &amp;{ &quot;fix_&quot; . $varname }($pkg);</PRE
><p class="para"></P
></LI
><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-29441"></A
><a class="indexterm" name="AUTOID-29444"></A
>Avoid string <a class="xref" href="ch03_032.htm#PERL2-CMD-EVAL" title="eval"><b class="xref.cmd">eval</B
></A
> inside a loop.
Put the loop into the <a class="xref" href="ch03_032.htm#PERL2-CMD-EVAL" title="eval"><b class="xref.cmd">eval</B
></A
> instead, to avoid redundant
recompilations of the code.  See the <a class="xref" href="ch03_160.htm#PERL2-CMD-STUDY" title="study"><b class="xref.cmd">study</B
></A
> operator
in <a class="xref" href="ch03_01.htm" title="Functions">Chapter 3</A
> for an example of this.</P
></LI
><li class="listitem"><p class="para"> 
Avoid run-time-compiled patterns. Use the
<code class="literal">/</CODE
><code class="replaceable"><i>pattern</I
></CODE
><code class="literal">/o</CODE
>
(once only) pattern modifier to avoid pattern recompilation when the
pattern doesn't change over the life of the process.
For patterns that change
occasionally, you can use the fact that a null pattern refers back to
the previous pattern, like this:</P
><pre class="programlisting">&quot;foundstring&quot; =~ /$currentpattern/;        # Dummy match (must succeed).
while (&lt;&gt;) {
    print if //;
}</PRE
><p class="para">You can also use <a class="xref" href="ch03_032.htm#PERL2-CMD-EVAL" title="eval"><b class="xref.cmd">eval</B
></A
> to recompile a subroutine that does the match (if
you only recompile occasionally).</P
></LI
><li class="listitem"><p class="para">Short-circuit alternation is often faster than the corresponding
regular expression.  So:</P
><pre class="programlisting">print if /one-hump/ || /two/;</PRE
><p class="para">is likely to be faster than:</P
><pre class="programlisting">print if /one-hump|two/;</PRE
><p class="para">at least for certain values of one-hump and two.
This is because the optimizer likes to hoist certain simple matching
operations up into higher parts of the syntax tree and do very fast
matching with a Boyer-Moore algorithm.  A complicated pattern defeats
this.</P
></LI
><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-29467"></A
>Reject common cases early with <code class="literal">next if</CODE
>.
As with simple regular expressions, the optimizer likes this.  And it just
makes sense to avoid unnecessary work.  You can typically discard comment
lines and blank lines even before you do a <b class="emphasis.bold">split</B
> or <b class="emphasis.bold">chop</B
>:</P
><pre class="programlisting">while (&lt;&gt;) {
    next if /^#/;
    next if /^$/;
    chop;
    @piggies = split(/,/);
    ...
}</PRE
><p class="para"></P
></LI
><li class="listitem"><p class="para"> <a class="indexterm" name="AUTOID-29477"></A
>
Avoid regular expressions with many quantifiers, or with big
<code class="literal">{</CODE
><code class="replaceable"><i>m,n</I
></CODE
><code class="literal">}</CODE
>
numbers on parenthesized expressions.  Such patterns can result in
exponentially slow backtracking behavior unless the quantified
subpatterns match on their first &quot;pass&quot;.  </P
></LI
><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-29484"></A
>Try to maximize the length of any non-optional literal strings in
regular expressions.  This is counterintuitive, but longer patterns
often match faster than shorter patterns.  That's because the
optimizer looks for constant strings and hands them off to a
Boyer-Moore search, which benefits from longer strings.  Compile your
pattern with the <code class="literal">-Dr</CODE
> debugging switch to see what
Perl thinks the longest literal string is.</P
></LI
><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-29490"></A
>Avoid expensive subroutine calls in tight loops.
There is overhead associated with calling subroutines, especially when
you pass lengthy parameter lists, or return lengthy values.  In
increasing order of desperation, try passing values by reference,
passing values as dynamically scoped globals, inlining the subroutine,
or rewriting the whole loop in C.</P
></LI
><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-29495"></A
>Avoid <a class="xref" href="ch03_043.htm#PERL2-CMD-GETC" title="getc"><b class="xref.cmd">getc</B
></A
> for anything but single-character terminal I/O.
In fact, don't use it for that either.  Use <a class="xref" href="ch03_166.htm#PERL2-CMD-SYSREAD" title="sysread"><b class="xref.cmd">sysread</B
></A
>.</P
></LI
><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-29501"></A
>Use <a class="xref" href="ch03_117.htm#PERL2-CMD-READDIR" title="readdir"><b class="xref.cmd">readdir</B
></A
> rather than <code class="literal">&lt;*&gt;</CODE
>.
To get all the non-dot files within a directory, say something like:</P
><pre class="programlisting">opendir(DIR,&quot;.&quot;);
@files = sort grep(!/^\./, readdir(DIR));
closedir(DIR);</PRE
><p class="para"></P
></LI
><li class="listitem"><p class="para">Avoid frequent <a class="xref" href="ch03_162.htm#PERL2-CMD-SUBSTR" title="substr"><b class="xref.cmd">substr</B
></A
> on long strings.</P
></LI
><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-29512"></A
>Use <a class="xref" href="ch03_105.htm#PERL2-CMD-PACK" title="pack"><b class="xref.cmd">pack</B
></A
> and <a class="xref" href="ch03_182.htm#PERL2-CMD-UNPACK" title="unpack"><b class="xref.cmd">unpack</B
></A
> 
instead of multiple <a class="xref" href="ch03_162.htm#PERL2-CMD-SUBSTR" title="substr"><b class="xref.cmd">substr</B
></A
>
invocations.</P
></LI
><li class="listitem"><p class="para">Use <a class="xref" href="ch03_162.htm#PERL2-CMD-SUBSTR" title="substr"><b class="xref.cmd">substr</B
></A
> as an lvalue rather than
concatenating substrings. For example, to replace the fourth through sixth
characters of <code class="literal">$foo</CODE
> with the contents of the variable
<code class="literal">$bar</CODE
>, don't do:</P
><pre class="programlisting">$foo = substr($foo,0,3) . $bar . substr($foo,6);</PRE
><p class="para">Instead, simply identify the part of the string to be replaced,
and assign into it, as in:</P
><pre class="programlisting">substr($foo,3,3) = $bar;</PRE
><p class="para">But be aware that if <code class="literal">$foo</CODE
> is a huge string, and <code class="literal">$bar</CODE
>
isn't exactly <code class="literal">3</CODE
> characters long, this can do a lot of copying too.</P
></LI
><li class="listitem"><p class="para">Use <code class="literal">s///</CODE
> rather than concatenating substrings.
This is especially true if you can replace one constant with another of
the same size.  This results in an in-place substitution.</P
></LI
><li class="listitem"><p class="para">Use modifiers and equivalent <b class="emphasis.bold">and</B
> and 
<b class="emphasis.bold">or</B
>, instead of
full-blown conditionals.
Statement modifiers and logical operators avoid the overhead of entering
and leaving a block.  They can often be more readable too.</P
></LI
><li class="listitem"><p class="para">Use <code class="literal">$foo = $a || $b || $c</CODE
>.
This is much faster (and shorter to say) than:</P
><pre class="programlisting">if ($a) {
    $foo = $a;
}
elsif ($b) {
    $foo = $b;
}
elsif ($c) {
    $foo = $c;
}</PRE
><p class="para">Similarly, set default values with:</P
><pre class="programlisting">$pi ||= 3;</PRE
><p class="para"></P
></LI
><li class="listitem"><p class="para">Group together any tests that want the same initial string.
When testing a string for various prefixes in anything resembling a
switch structure, put together all the <code class="literal">/^a/</CODE
> patterns, all the
<code class="literal">/^b/</CODE
> patterns, and so on.</P
></LI
><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-29549"></A
><a class="indexterm" name="AUTOID-29551"></A
>Don't test things you know won't match.
Use <a class="xref" href="ch03_081.htm#PERL2-CMD-LAST" title="last"><b class="xref.cmd">last</B
></A
> or <b class="emphasis.bold">elsif</B
> 
to avoid falling through to the next
case in your switch statement.</P
></LI
><li class="listitem"><p class="para">Use special operators like <a class="xref" href="ch03_160.htm#PERL2-CMD-STUDY" title="study"><b class="xref.cmd">study</B
></A
>, logical string operations,
<code class="literal">pack 'u'</CODE
> and <code class="literal">unpack '%'</CODE
> formats.</P
></LI
><li class="listitem"><p class="para">Beware of the tail wagging the dog.
Misstatements resembling <code class="literal">(&lt;STDIN&gt;)[0]</CODE
> and <code class="literal">0
.. 2000000</CODE
> can
cause Perl much unnecessary work.  In accord with UNIX philosophy, Perl
gives you enough rope to hang yourself.</P
></LI
><li class="listitem"><p class="para">Factor operations out of loops. The Perl optimizer does not attempt to
remove invariant code from loops. It expects you to exercise some sense.</P
></LI
><li class="listitem"><p class="para">Slinging strings can be faster than slinging arrays.</P
></LI
><li class="listitem"><p class="para">Slinging arrays can be faster than slinging strings.
It all depends on whether you're going to reuse the strings or arrays,
and on which operations you're going to perform.  Heavy modification of each
element implies that arrays will be better, and occasional modification of
some elements implies that strings will be better.  But you just have to
try it and see.</P
></LI
><li class="listitem"><p class="para"><a class="xref" href="ch03_097.htm#PERL2-CMD-MY" title="my"><b class="xref.cmd">my</B
></A
> variables are normally 
faster than <a class="xref" href="ch03_087.htm#PERL2-CMD-LOCAL" title="local"><b class="xref.cmd">local</B
></A
> variables.</P
></LI
><li class="listitem"><p class="para">Sorting on a manufactured key array may be faster than using a fancy sort
subroutine.
A given array value may participate in several sort comparisons, so if
the sort subroutine has to do much recalculation, it's better to
factor out that calculation to a separate pass before the actual sort.</P
></LI
><li class="listitem"><p class="para"><code class="literal">tr/abc//d</CODE
> is faster than <code class="literal">s/[abc]//g</CODE
>.</P
></LI
><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-29582"></A
><a class="indexterm" name="AUTOID-29584"></A
><a class="indexterm" name="AUTOID-29587"></A
><a class="indexterm" name="AUTOID-29589"></A
><a class="xref" href="ch03_110.htm#PERL2-CMD-PRINT" title="print"><b class="xref.cmd">print</B
></A
>
with a comma separator may be faster than concatenating strings.
For example:</P
><pre class="programlisting">print $fullname{$name} . &quot; has a new home directory &quot; .
    $home{$name} . &quot;\n&quot;;</PRE
><p class="para">has to glue together the two hashes and the two
fixed strings before passing them to the low-level print routines, whereas:</P
><pre class="programlisting">print $fullname{$name}, &quot; has a new home directory &quot;,
    $home{$name}, &quot;\n&quot;;</PRE
><p class="para">doesn't.  On the other hand, depending on the values and the architecture,
the concatenation may be faster.  Try it.</P
></LI
><li class="listitem"><p class="para">Prefer <code class="literal">join(&quot;&quot;, ...)</CODE
> to a series of concatenated strings.
Multiple concatenations may cause strings to be copied back and
forth multiple times.  The <a class="xref" href="ch03_078.htm#PERL2-CMD-JOIN" title="join"><b class="xref.cmd">join</B
></A
> operator avoids this.</P
></LI
><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-29603"></A
><a class="xref" href="ch03_155.htm#PERL2-CMD-SPLIT" title="split"><b class="xref.cmd">split</B
></A
> on a fixed string is generally faster than 
<a class="xref" href="ch03_155.htm#PERL2-CMD-SPLIT" title="split"><b class="xref.cmd">split</B
></A
> on a
pattern.
That is, use <code class="literal">split(/ /,...)</CODE
> rather than
<code class="literal">split(/ +/,...)</CODE
> if you know there will only be one space.
However, the patterns <code class="literal">/\s+/</CODE
>, <code class="literal">/^/</CODE
> and <code class="literal">/ /</CODE
> are
specially optimized, as is the <a class="xref" href="ch03_155.htm#PERL2-CMD-SPLIT" title="split"><b class="xref.cmd">split</B
></A
> on whitespace.</P
></LI
><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-29615"></A
><a class="indexterm" name="AUTOID-29618"></A
>Pre-extending an array or string can save some time.
As strings and arrays grow, Perl extends them by allocating a new copy
with some room for growth and copying in the old value.  Pre-extending a
string with the <b class="emphasis.bold">x</B
> operator or an array by setting <code class="literal">$#array</CODE
>
can prevent this occasional overhead, as well as minimize memory
fragmentation.</P
></LI
><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-29624"></A
>Don't <a class="xref" href="ch03_180.htm#PERL2-CMD-UNDEF" title="undef"><b class="xref.cmd">undef</B
></A
> long strings and arrays if they'll be reused for the
same purpose.
This helps prevent reallocation when the string or array must be re-extended.</P
></LI
><li class="listitem"><p class="para">Prefer <code class="literal">&quot;\0&quot; x 8192</CODE
> over <code class="literal">unpack(&quot;x8192&quot;,())</CODE
>.</P
></LI
><li class="listitem"><p class="para"><code class="literal">system(&quot;mkdir...&quot;)</CODE
> may be faster on multiple directories if
<em class="emphasis">mkdir</EM
>(2) isn't available.</P
></LI
><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-29637"></A
>Avoid using <a class="xref" href="ch03_031.htm#PERL2-CMD-EOF" title="eof"><b class="xref.cmd">eof</B
></A
> if return values will already indicate it.</P
></LI
><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-29642"></A
><a class="indexterm" name="AUTOID-29644"></A
>Cache entries from passwd and group (and so on) that are apt to be reused.
For example, to cache the return value from <a class="xref" href="ch03_047.htm#PERL2-CMD-GETHOSTBYADDR" title="gethostbyaddr"><b class="xref.cmd">gethostbyaddr</B
></A
> when
you are converting numeric addresses (like <code class="literal">198.112.208.11</CODE
>) to names
(like &quot;www.ora.com&quot;), you can use something like:</P
><pre class="programlisting">sub numtoname {
    local($_) = @_;
    unless (defined $numtoname{$_}) {
        local(@a) = gethostbyaddr(pack('C4', split(/\./)),2);
        $numtoname{$_} = @a &gt; 0 ? $a[0] : $_;
    }
    $numtoname{$_};
}</PRE
><p class="para"></P
></LI
><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-29652"></A
>Avoid unnecessary system calls.
Operating system calls tend to be rather expensive.  So for example,
don't call the <a class="xref" href="ch03_173.htm#PERL2-CMD-TIME" title="time"><b class="xref.cmd">time</B
></A
> operator when a cached value of <code class="literal">$now</CODE
>
would do.  Use the special <b class="emphasis.bold">_</B
> filehandle to avoid unnecessary
<em class="emphasis">stat</EM
>(2) calls.  On some systems, even a minimal system call may
execute a thousand instructions.</P
></LI
><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-29661"></A
>Avoid unnecessary <a class="xref" href="ch03_167.htm#PERL2-CMD-SYSTEM" title="system"><b class="xref.cmd">system</B
></A
> calls.
The <a class="xref" href="ch03_167.htm#PERL2-CMD-SYSTEM" title="system"><b class="xref.cmd">system</B
></A
> operator has to fork a subprocess and execute the
program you specify.  Or worse, execute a shell to execute the program
you specify.  This can easily execute a million instructions.</P
></LI
><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-29667"></A
>Worry about starting subprocesses, but only if they're frequent.
Starting a single <em class="emphasis">pwd</EM
>, <em class="emphasis">hostname</EM
>, or <em class="emphasis">find</EM
> process isn't
going to hurt you much&nbsp;- after all, a shell starts subprocesses all day
long.  We do occasionally encourage the toolbox approach, believe it or not.</P
></LI
><li class="listitem"><p class="para">Keep track of your working directory yourself rather than calling
<em class="emphasis">pwd</EM
> repeatedly.
(A package is provided in the standard library for this.
See the Cwd module in <a class="xref" href="ch07_01.htm" title="The Standard Perl Library">Chapter 7</A
>.)</P
></LI
><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-29678"></A
>Avoid shell metacharacters in commands&nbsp;- pass lists to <a class="xref" href="ch03_167.htm#PERL2-CMD-SYSTEM" title="system"><b class="xref.cmd">system</B
></A
> and
<a class="xref" href="ch03_033.htm#PERL2-CMD-EXEC" title="exec"><b class="xref.cmd">exec</B
></A
> where appropriate.</P
></LI
><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-29684"></A
><a class="indexterm" name="AUTOID-29686"></A
>Set the sticky bit on the Perl interpreter on machines without demand paging.

<pre class="programlisting">chmod +t /usr/bin/perl</PRE
></P
></LI
><li class="listitem"><p class="para">Using defaults doesn't make your program faster.</P
></LI
></UL
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PERL2-CH-8-SECT-3.2">8.3.2 Space Efficiency</A
></H3
><ul class="itemizedlist"><li class="listitem"><p class="para">Use <a class="xref" href="ch03_188.htm#PERL2-CMD-VEC" title="vec"><b class="xref.cmd">vec</B
></A
> for compact integer array storage.<a class="indexterm" name="AUTOID-29698"></A
></P
></LI
><li class="listitem"><p class="para">Prefer numeric values over string values&nbsp;- they require little additional
space over that allocated for the scalar header structure.</P
></LI
><li class="listitem"><p class="para">Use <a class="xref" href="ch03_162.htm#PERL2-CMD-SUBSTR" title="substr"><b class="xref.cmd">substr</B
></A
> to store constant-length strings in a longer string.</P
></LI
><li class="listitem"><p class="para">Use the Tie::SubstrHash module for very compact storage of a hash array,
if the key and value lengths are fixed.</P
></LI
><li class="listitem"><p class="para">Use <code class="literal">__END__</CODE
> and the <code class="literal">DATA</CODE
>
filehandle to avoid storing program data as both a string and an array.</P
></LI
><li class="listitem"><p class="para">Prefer <a class="xref" href="ch03_030.htm#PERL2-CMD-EACH" title="each"><b class="xref.cmd">each</B
></A
> to <a class="xref" href="ch03_079.htm#PERL2-CMD-KEYS" title="keys"><b class="xref.cmd">keys</B
></A
> where order doesn't matter.</P
></LI
><li class="listitem"><p class="para">Delete or <a class="xref" href="ch03_180.htm#PERL2-CMD-UNDEF" title="undef"><b class="xref.cmd">undef</B
></A
> globals that are no longer in use.</P
></LI
><li class="listitem"><p class="para">Use some kind of DBM to store hashes.</P
></LI
><li class="listitem"><p class="para">Use temp files to store arrays.</P
></LI
><li class="listitem"><p class="para">Use pipes to offload processing to other tools.</P
></LI
><li class="listitem"><p class="para">Avoid list operations and file slurps.</P
></LI
><li class="listitem"><p class="para">Avoid using <code class="literal">tr///</CODE
>, each of which must store a translation
table of 256 short integers (not characters, since we have to remember
which characters are to be deleted).</P
></LI
><li class="listitem"><p class="para">Don't unroll your loops or inline your subroutines.</P
></LI
></UL
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PERL2-CH-8-SECT-3.3">8.3.3 Programmer Efficiency</A
></H3
><ul class="itemizedlist"><li class="listitem"><p class="para">Use defaults.<a class="indexterm" name="AUTOID-29737"></A
></P
></LI
><li class="listitem"><p class="para">Use funky shortcut command-line switches like
<b class="emphasis.bold">-a, -n, -p, -s, -i</B
>.</P
></LI
><li class="listitem"><p class="para">Use <b class="emphasis.bold">for</B
> to mean <b class="emphasis.bold">foreach</B
>.</P
></LI
><li class="listitem"><p class="para">Sling UNIX commands around with backticks.</P
></LI
><li class="listitem"><p class="para">Use <code class="literal">&lt;*&gt;</CODE
> and such.</P
></LI
><li class="listitem"><p class="para">Use run-time-compiled patterns.</P
></LI
><li class="listitem"><p class="para">Use patterns with lots of <code class="literal">*</CODE
>, <code class="literal">+</CODE
>,
and <code class="literal">{}</CODE
>.  </P
></LI
><li class="listitem"><p class="para">Sling whole arrays and slurp entire files.</P
></LI
><li class="listitem"><p class="para">Use <a class="xref" href="ch03_043.htm#PERL2-CMD-GETC" title="getc"><b class="xref.cmd">getc</B
></A
>.</P
></LI
><li class="listitem"><p class="para">Use <b class="emphasis.bold">$&amp;</B
>, <b class="emphasis.bold">$</B
><code class="literal">`</CODE
>, and <b class="emphasis.bold">$</B
><code class="literal">'</CODE
>.</P
></LI
><li class="listitem"><p class="para">Don't check error values on <a class="xref" href="ch03_102.htm#PERL2-CMD-OPEN" title="open"><b class="xref.cmd">open</B
></A
>, since
<code class="literal">&lt;</CODE
><code class="replaceable"><i>HANDLE</I
></CODE
><code class="literal">&gt;</CODE
>
and <code class="literal">print</CODE
> <code class="replaceable"><i>HANDLE</I
></CODE
> will simply
no-op when given an invalid handle.  </P
></LI
><li class="listitem"><p class="para">Don't <a class="xref" href="ch03_018.htm#PERL2-CMD-CLOSE" title="close"><b class="xref.cmd">close</B
></A
> your files&nbsp;- they'll be
closed on the next <a class="xref" href="ch03_102.htm#PERL2-CMD-OPEN" title="open"><b class="xref.cmd">open</B
></A
>.</P
></LI
><li class="listitem"><p class="para">Pass subroutine arguments as globals.</P
></LI
><li class="listitem"><p class="para">Don't name your subroutine parameters.
You can access them directly as
<code class="literal">$_[</CODE
><code class="replaceable"><i>EXPR</I
></CODE
><code class="literal">]</CODE
>.</P
></LI
><li class="listitem"><p class="para">Use whatever you think of first.</P
></LI
></UL
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PERL2-CH-8-SECT-3.4">8.3.4 Maintainer Efficiency</A
></H3
><ul class="itemizedlist"><li class="listitem"><p class="para">Don't use defaults.</P
></LI
><li class="listitem"><p class="para">Use <b class="emphasis.bold">foreach</B
> to mean <b class="emphasis.bold">foreach</B
>.</P
></LI
><li class="listitem"><p class="para">Use meaningful loop labels with <a class="xref" href="ch03_099.htm#PERL2-CMD-NEXT" title="next"><b class="xref.cmd">next</B
></A
> and <a class="xref" href="ch03_081.htm#PERL2-CMD-LAST" title="last"><b class="xref.cmd">last</B
></A
>.</P
></LI
><li class="listitem"><p class="para">Use meaningful variable names.</P
></LI
><li class="listitem"><p class="para">Use meaningful subroutine names.</P
></LI
><li class="listitem"><p class="para">Put the important thing first on the line using <b class="emphasis.bold">and</B
>, <b class="emphasis.bold">or</B
>,
and statement modifiers.</P
></LI
><li class="listitem"><p class="para">Close your files as soon as you're done with them.</P
></LI
><li class="listitem"><p class="para">Use packages, modules, and classes to hide your implementation details.</P
></LI
><li class="listitem"><p class="para">Pass arguments as subroutine parameters.</P
></LI
><li class="listitem"><p class="para">Name your subroutine parameters using <a class="xref" href="ch03_097.htm#PERL2-CMD-MY" title="my"><b class="xref.cmd">my</B
></A
>.</P
></LI
><li class="listitem"><p class="para">Parenthesize for clarity.</P
></LI
><li class="listitem"><p class="para">Put in lots of (useful) comments.</P
></LI
><li class="listitem"><p class="para">Write the script as its own POD document.</P
></LI
></UL
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PERL2-CH-8-SECT-3.5">8.3.5 Porter Efficiency</A
></H3
><ul class="itemizedlist"><li class="listitem"><p class="para">Wave a handsome tip under his nose.<a class="indexterm" name="AUTOID-29833"></A
></P
></LI
><li class="listitem"><p class="para">Avoid functions that aren't implemented everywhere.
You can use <a class="xref" href="ch03_032.htm#PERL2-CMD-EVAL" title="eval"><b class="xref.cmd">eval</B
></A
> tests to see what's available.</P
></LI
><li class="listitem"><p class="para">Don't expect native float and double to <a class="xref" href="ch03_105.htm#PERL2-CMD-PACK" title="pack"><b class="xref.cmd">pack</B
></A
> and <a class="xref" href="ch03_182.htm#PERL2-CMD-UNPACK" title="unpack"><b class="xref.cmd">unpack</B
></A
> on
foreign machines.</P
></LI
><li class="listitem"><p class="para">Use network byte order when sending binary data over the network.</P
></LI
><li class="listitem"><p class="para">Don't send binary data over the network.</P
></LI
><li class="listitem"><p class="para">Check <b class="emphasis.bold">$]</B
> to see if the current version supports all the features
you use.</P
></LI
><li class="listitem"><p class="para">Don't use <b class="emphasis.bold">$]</B
>: use <a class="xref" href="ch03_123.htm#PERL2-CMD-REQUIRE" title="require"><b class="xref.cmd">require</B
></A
> with a version number.</P
></LI
><li class="listitem"><p class="para">Put in the <code class="literal">eval exec</CODE
> hack even if you don't use it.</P
></LI
><li class="listitem"><p class="para">Put the <code class="literal">#!/usr/bin/perl</CODE
> line in even if you don't use it.</P
></LI
><li class="listitem"><p class="para">Test for variants of UNIX commands.
Some <em class="emphasis">find</EM
>s can't handle <em class="emphasis">-xdev</EM
>, for example.</P
></LI
><li class="listitem"><p class="para">Avoid variant UNIX commands if you can do it internally.
UNIX commands don't work too well on MS-DOS or VMS.</P
></LI
><li class="listitem"><p class="para">Use the Config module or the <b class="emphasis.bold">$^O</B
> variable to find out what kind of
machine you're running on.</P
></LI
><li class="listitem"><p class="para">Put all your scripts and manpages into a single NFS filesystem that's
mounted everywhere.</P
></LI
></UL
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PERL2-CH-8-SECT-3.6">8.3.6 User Efficiency</A
></H3
><ul class="itemizedlist"><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-29875"></A
>Avoid forcing prompt order&nbsp;- pop users into their favorite editor with a form.</P
></LI
><li class="listitem"><p class="para">Better yet, use a GUI like the Perl Tk extension, where users can control the order of events.</P
></LI
><li class="listitem"><p class="para">Put up something for users to read while you continue doing work.</P
></LI
><li class="listitem"><p class="para">Use autoloading so that the program <em class="emphasis">appears</EM
> to run faster.</P
></LI
><li class="listitem"><p class="para">Give the option of helpful messages at every prompt.</P
></LI
><li class="listitem"><p class="para">Give a helpful usage message if users don't give correct input.</P
></LI
><li class="listitem"><p class="para">Display the default action at every prompt, and maybe a few alternatives.</P
></LI
><li class="listitem"><p class="para">Choose defaults for beginners.  Allow experts to change the defaults.</P
></LI
><li class="listitem"><p class="para">Use single character input where it makes sense.</P
></LI
><li class="listitem"><p class="para">Pattern the interaction after other things the user is familiar with.</P
></LI
><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-29898"></A
>Make error messages clear about what needs fixing.  Include all
pertinent information such as filename and <code class="literal">errno</CODE
>, like this:</P
><pre class="programlisting">open(FILE, $file) or die &quot;$0: Can't open $file for reading: $!\n&quot;;</PRE
><p class="para"></P
></LI
><li class="listitem"><p class="para">Use <a class="xref" href="ch03_040.htm#PERL2-CMD-FORK" title="fork"><b class="xref.cmd">fork</B
></A
> and <a class="xref" href="ch03_035.htm#PERL2-CMD-EXIT" title="exit"><b class="xref.cmd">exit</B
></A
> 
to detach when the rest of the script is batch processing.</P
></LI
><li class="listitem"><p class="para">Allow arguments to come either from the command line or via standard
input.</P
></LI
><li class="listitem"><p class="para">Use text-oriented network protocols.</P
></LI
><li class="listitem"><p class="para">Don't put arbitrary limitations into your program.</P
></LI
><li class="listitem"><p class="para">Prefer variable-length fields over fixed-length fields.</P
></LI
><li class="listitem"><p class="para">Be vicariously lazy.</P
></LI
><li class="listitem"><p class="para">Be nice.</P
></LI
></UL
><a class="indexterm" name="AUTOID-29919"></A
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch08_02.htm#PERL2-CH-8-SECT-2.4" title="8.2 Common Goofs for Novices"><img src="../gifs/txtpreva.gif" alt="Previous: 8.2 Common Goofs for Novices" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Programming Perl"><img src="../gifs/txthome.gif" alt="Programming Perl" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch08_04.htm" title="8.4 Programming with Style"><img src="../gifs/txtnexta.gif" alt="Next: 8.4 Programming with Style" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">8.2 Common Goofs for Novices</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">8.4 Programming with Style</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
