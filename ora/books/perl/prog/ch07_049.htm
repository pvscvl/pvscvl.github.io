<html><head>
<title>[Chapter 7] 7.2.49 POSIX&nbsp;- Perl Interface to IEEE Std 1003.1</TITLE>
<meta name="DC.title" content="Programming Perl"><meta name="DC.creator" content="Larry Wall, Tom Christiansen &amp; Randal L. Schwartz"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T02:03:10Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-149-6" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch07_02.htm" title="7.2 Library Modules"><link rel="prev" href="ch07_048.htm#PERL2-CH-7-SECT-1.58" title="7.2.48 overload&nbsp;- Overload Perl's Mathematical Operations"><link rel="next" href="ch07_050.htm#AUTOID-26188" title="7.2.50 Pod::Text&nbsp;- Convert POD Data to Formatted ASCII Text"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Programming Perl" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Programming Perl"><area shape="RECT" coords="467,0,514,18" href="../search/psrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT2" href="ch07_048.htm#PERL2-CH-7-SECT-1.58" title="7.2.48 overload&nbsp;- Overload Perl's Mathematical Operations"><img src="../gifs/txtpreva.gif" alt="Previous: 7.2.48 overload&nbsp;- Overload Perl's Mathematical Operations" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch07_01.htm" title="7. The Standard Perl Library">Chapter 7<br>The Standard Perl Library</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT2" href="ch07_050.htm#AUTOID-26188" title="7.2.50 Pod::Text&nbsp;- Convert POD Data to Formatted ASCII Text"><img src="../gifs/txtnexta.gif" alt="Next: 7.2.50 Pod::Text&nbsp;- Convert POD Data to Formatted ASCII Text" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT2"><h3 class="sect2"><a class="title" name="AUTOID-23950">7.2.49 POSIX&nbsp;- Perl Interface to IEEE Std 1003.1</A
></H3
><pre class="programlisting">use POSIX;                        # import all symbols
use POSIX qw(setsid);             # import one symbol
use POSIX qw(:errno_h :fcntl_h);  # import sets of symbols

printf &quot;EINTR is %d\n&quot;, EINTR;

$sess_id = POSIX::setsid();

$fd = POSIX::open($path, O_CREAT|O_EXCL|O_WRONLY, 0644);
# note: $fd is a filedescriptor, *NOT* a filehandle</PRE
><p class="para"><a class="indexterm" name="CH07.POSIX1"></A
>The POSIX module permits you to access all (or nearly all) the standard
POSIX 1003.1 identifiers.  Many of these identifiers have been given
Perl-ish interfaces.</P
><p class="para">This description gives a condensed list of the features available in the POSIX
module.  Consult your operating system's manpages for general information on
most features.  Consult the appropriate Perl built-in function whenever a
POSIX routine is noted as being identical to the function.</P
><p class="para">The &quot;Classes&quot; section later in this chapter describes some classes for signal
objects, TTY objects, and other miscellaneous objects.  The &quot;Functions&quot; section
later in this chapter describes POSIX functions from the 1003.1 specification.
The remaining sections list various constants and macros in an organization that
roughly follows IEEE Std 1003.1b-1993.</P
><blockquote class="warning"><p class="para"><strong>WARNING:</STRONG
> A few functions are not implemented because they are C-specific.[<a class="footnote" href="#AUTOID-23960">12</A
>]
If you attempt to call one of these functions, it will print a message
telling you that it isn't implemented, and will suggest using the Perl
equivalent, should one exist.  For example, trying to access the
<code class="literal">setjmp()</CODE
> call will elicit the message: &quot;<code class="literal">setjmp() is
C-specific: use eval {} instead</CODE
>&quot;.</P
><blockquote class="footnote"><div class="footnote"><p class="para"><a class="footnote" name="AUTOID-23960">[12]</A
> The 1003.1 standard wisely recommends that other language bindings
should avoid duplicating the idiosyncracies of C.  This is something we
were <em class="emphasis">glad</EM
> to comply with.</P
></DIV
></BLOCKQUOTE
><p class="para">Furthermore, some vendors will claim 1003.1 compliance without passing the POSIX
Compliance Test Suites (PCTS).  For example, one vendor may not define
<code class="literal">EDEADLK</CODE
>, or may incorrectly define the semantics of the
<em class="emphasis">errno</EM
> values set by <em class="emphasis">open</EM
>(2).
Perl does not attempt to verify POSIX compliance.  That means you can currently
say &quot;<code class="literal">use POSIX</CODE
>&quot; successfully, and then later in
your program find that your vendor has been lax and there's no usable
<code class="literal">ICANON</CODE
> macro after all.  This could be construed to be a bug.
Whose bug, we won't venture to guess.</P
></BLOCKQUOTE
><div class="sect3"><h4 class="sect3"><a class="title" name="PERL2-CH-7-SECT-1.66">7.2.49.1 Classes</A
></H4
><p class="para"><b class="emphasis.bold">POSIX::SigAction</B
></P
><dl class="variablelist"><dt class="term"><code class="literal">new</CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-23981"></A
>Creates a new POSIX::SigAction object that corresponds to the C
<code class="literal">struct sigaction</CODE
>.  This object will be destroyed automatically when
it is no longer needed.  The first parameter is the fully qualified name of a
subroutine which is a signal handler.  The second parameter is a
POSIX::SigSet
object.  The third parameter contains the <code class="literal">sa_flags</CODE
>.</P
><pre class="programlisting">$sigset = POSIX::SigSet-&gt;new;
$sigaction = POSIX::SigAction-&gt;new('main::handler', $sigset,
                 &amp;POSIX::SA_NOCLDSTOP);</PRE
><p class="para">This POSIX::SigAction
object should be used with the POSIX::sigaction()
function.</P
></DD
></DL
><p class="para"><b class="emphasis.bold">POSIX::SigSet</B
></P
><dl class="variablelist"><dt class="term"><code class="literal">new</CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-23995"></A
>Creates a new SigSet object.
This object will be destroyed automatically
when it is no longer needed.  Arguments may be supplied to initialize the
set. Create an empty set:</P
><pre class="programlisting">$sigset = POSIX::SigSet-&gt;new;</PRE
><p class="para">Create a set with <code class="literal">SIGUSR1</CODE
>:</P
><pre class="programlisting">$sigset = POSIX::SigSet-&gt;new(&amp;POSIX::SIGUSR1);</PRE
></DD
><dt class="term"><code class="literal">addset</CODE
></DT
><dd class="listitem"><p class="para">Adds a signal to a SigSet object.  Returns <a class="xref" href="ch03_180.htm#PERL2-CMD-UNDEF" title="undef"><b class="xref.cmd">undef</B
></A
> on failure.</P
><pre class="programlisting">$sigset-&gt;addset(&amp;POSIX::SIGUSR2);</PRE
></DD
><dt class="term"><code class="literal">delset</CODE
></DT
><dd class="listitem"><p class="para">Removes a signal from the SigSet object.  Returns <a class="xref" href="ch03_180.htm#PERL2-CMD-UNDEF" title="undef"><b class="xref.cmd">undef</B
></A
> on
failure.</P
><pre class="programlisting">$sigset-&gt;delset(&amp;POSIX::SIGUSR2);</PRE
></DD
><dt class="term"><code class="literal">emptyset</CODE
></DT
><dd class="listitem"><p class="para">Initializes the SigSet object to be empty.  Returns <a class="xref" href="ch03_180.htm#PERL2-CMD-UNDEF" title="undef"><b class="xref.cmd">undef</B
></A
> on
failure.</P
><pre class="programlisting">$sigset-&gt;emptyset();</PRE
></DD
><dt class="term"><code class="literal">fillset</CODE
></DT
><dd class="listitem"><p class="para">Initializes the SigSet object to include all signals.
Returns <a class="xref" href="ch03_180.htm#PERL2-CMD-UNDEF" title="undef"><b class="xref.cmd">undef</B
></A
> on failure.</P
><pre class="programlisting">$sigset-&gt;fillset();</PRE
></DD
><dt class="term"><code class="literal">ismember</CODE
></DT
><dd class="listitem"><p class="para">Tests the SigSet object to see whether it contains a specific signal.</P
><pre class="programlisting">if ($sigset-&gt;ismember(&amp;POSIX::SIGUSR1 ) ){
    print &quot;contains SIGUSR1\n&quot;;
}</PRE
></DD
></DL
><p class="para"><b class="emphasis.bold">POSIX::Termios</B
></P
><dl class="variablelist"><dt class="term"><code class="literal">new</CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-24043"></A
>Creates a new Termios object.  This object will be destroyed automatically
when it is no longer needed.</P
><pre class="programlisting">$termios = POSIX::Termios-&gt;new;</PRE
></DD
><dt class="term"><code class="literal">getattr</CODE
></DT
><dd class="listitem"><p class="para">Gets terminal control attributes for a given <em class="emphasis">fd</EM
>, 0 by default.
Returns <a class="xref" href="ch03_180.htm#PERL2-CMD-UNDEF" title="undef"><b class="xref.cmd">undef</B
></A
> on failure.

Obtain the attributes for standard input:</P
><pre class="programlisting">$termios-&gt;getattr()</PRE
><p class="para">Obtain the attributes for standard output:</P
><pre class="programlisting">$termios-&gt;getattr(1)</PRE
></DD
><dt class="term"><code class="literal">getcc</CODE
></DT
><dd class="listitem"><p class="para">Retrieves a value from the <code class="literal">c_cc</CODE
> field of a Termios object.
The <code class="literal">c_cc</CODE
> field is an array, so an index must be specified.</P
><pre class="programlisting">$c_cc[1] = $termios-&gt;getcc(&amp;POSIX::VEOF);</PRE
></DD
><dt class="term"><code class="literal">getcflag</CODE
></DT
><dd class="listitem"><p class="para">Retrieves the <code class="literal">c_cflag</CODE
> field of a Termios object.</P
><pre class="programlisting">$c_cflag = $termios-&gt;getcflag;</PRE
></DD
><dt class="term"><code class="literal">getiflag</CODE
></DT
><dd class="listitem"><p class="para">Retrieves the <code class="literal">c_iflag</CODE
> field of a Termios object.</P
><pre class="programlisting">$c_iflag = $termios-&gt;getiflag;</PRE
></DD
><dt class="term"><code class="literal">getispeed</CODE
></DT
><dd class="listitem"><p class="para">Retrieves the input baud rate.</P
><pre class="programlisting">$ispeed = $termios-&gt;getispeed;</PRE
></DD
><dt class="term"><code class="literal">getlflag</CODE
></DT
><dd class="listitem"><p class="para">Retrieves the <code class="literal">c_lflag</CODE
> field of a Termios object.</P
><pre class="programlisting">$c_lflag = $termios-&gt;getlflag;</PRE
></DD
><dt class="term"><code class="literal">getoflag</CODE
></DT
><dd class="listitem"><p class="para">Retrieves the <code class="literal">c_oflag</CODE
> field of a Termios object.</P
><pre class="programlisting">$c_oflag = $termios-&gt;getoflag;</PRE
></DD
><dt class="term"><code class="literal">getospeed</CODE
></DT
><dd class="listitem"><p class="para">Retrieves the output baud rate.</P
><pre class="programlisting">$ospeed = $termios-&gt;getospeed;</PRE
></DD
><dt class="term"><code class="literal">setattr</CODE
></DT
><dd class="listitem"><p class="para">Sets terminal control attributes for a given <em class="emphasis">fd</EM
>.  Returns
<a class="xref" href="ch03_180.htm#PERL2-CMD-UNDEF" title="undef"><b class="xref.cmd">undef</B
></A
> on failure.  The following sets attributes immediately for
standard output.</P
><pre class="programlisting">$termios-&gt;setattr(1, &amp;POSIX::TCSANOW);</PRE
></DD
><dt class="term"><code class="literal">setcc</CODE
></DT
><dd class="listitem"><p class="para">Sets a value in the <code class="literal">c_cc</CODE
> field of a Termios object.
The <code class="literal">c_cc</CODE
> field is an array, so an index must be specified.</P
><pre class="programlisting">$termios-&gt;setcc(&amp;POSIX::VEOF, 4);</PRE
></DD
><dt class="term"><code class="literal">setcflag</CODE
></DT
><dd class="listitem"><p class="para">Sets the <code class="literal">c_cflag</CODE
> field of a Termios object.</P
><pre class="programlisting">$termios-&gt;setcflag(&amp;POSIX::CLOCAL);</PRE
></DD
><dt class="term"><code class="literal">setiflag</CODE
></DT
><dd class="listitem"><p class="para">Sets the <code class="literal">c_iflag</CODE
> field of a Termios object.</P
><pre class="programlisting">$termios-&gt;setiflag(&amp;POSIX::BRKINT);</PRE
></DD
><dt class="term"><code class="literal">setispeed</CODE
></DT
><dd class="listitem"><p class="para">Sets the input baud rate.  Returns <a class="xref" href="ch03_180.htm#PERL2-CMD-UNDEF" title="undef"><b class="xref.cmd">undef</B
></A
> on failure.</P
><pre class="programlisting">$termios-&gt;setispeed(&amp;POSIX::B9600);</PRE
></DD
><dt class="term"><code class="literal">setlflag</CODE
></DT
><dd class="listitem"><p class="para">Sets the <code class="literal">c_lflag</CODE
> field of a Termios object.</P
><pre class="programlisting">$termios-&gt;setlflag(&amp;POSIX::ECHO);</PRE
></DD
><dt class="term"><code class="literal">setoflag</CODE
></DT
><dd class="listitem"><p class="para">Set the <code class="literal">c_oflag</CODE
> field of a Termios object.</P
><pre class="programlisting">$termios-&gt;setoflag(&amp;POSIX::OPOST);</PRE
></DD
><dt class="term"><code class="literal">setospeed</CODE
></DT
><dd class="listitem"><p class="para">Sets the output baud rate.  Returns <a class="xref" href="ch03_180.htm#PERL2-CMD-UNDEF" title="undef"><b class="xref.cmd">undef</B
></A
> on failure.</P
><pre class="programlisting">$termios-&gt;setospeed(&amp;POSIX::B9600);</PRE
></DD
><dt class="term">Baud rate values</DT
><dd class="listitem"><p class="para"><code class="literal">B0 B50 B75 B110 B134 B150 B200 B300 B600 B1200 B1800 B2400 B4800 B9600
B19200 B38400</CODE
></P
></DD
><dt class="term">Terminal interface values</DT
><dd class="listitem"><p class="para"><code class="literal">TCSADRAIN TCSANOW TCOON TCIOFLUSH TCOFLUSH TCION TCIFLUSH TCSAFLUSH
TCIOFF TCOOFF</CODE
></P
></DD
><dt class="term"><code class="literal">c_cc</CODE
> index values</DT
><dd class="listitem"><p class="para"><code class="literal">VEOF VEOL VERASE VINTR VKILL VQUIT VSUSP VSTART VSTOP VMIN VTIME NCCS</CODE
></P
></DD
><dt class="term"><code class="literal">c_cflag</CODE
> field values</DT
><dd class="listitem"><p class="para"><code class="literal">CLOCAL CREAD CSIZE CS5 CS6 CS7 CS8 CSTOPB HUPCL PARENB PARODD</CODE
></P
></DD
><dt class="term"><code class="literal">c_iflag</CODE
> field values</DT
><dd class="listitem"><p class="para"><code class="literal">BRKINT ICRNL IGNBRK IGNCR IGNPAR INLCR INPCK ISTRIP IXOFF IXON PARMRK</CODE
></P
></DD
><dt class="term"><code class="literal">c_lflag</CODE
> field values</DT
><dd class="listitem"><p class="para"><code class="literal">ECHO ECHOE ECHOK ECHONL ICANON IEXTEN ISIG NOFLSH TOSTOP</CODE
></P
></DD
><dt class="term"><code class="literal">c_oflag</CODE
> field values</DT
><dd class="listitem"><p class="para"><code class="literal">OPOST</CODE
></P
></DD
></DL
><p class="para">While these constants are associated with the Termios class, note that they are
actually symbols in the POSIX package. </P
><p class="para">Here's an example of a complete program
for getting unbuffered, single-character input on a POSIX system:<a class="indexterm" name="AUTOID-24204"></A
><a class="indexterm" name="AUTOID-24207"></A
></P
><pre class="programlisting">#!/usr/bin/perl -w
use strict;
$| = 1;
for (1..4) {
    my $got;
    print &quot;gimme: &quot;;
    $got = getone();
    print &quot;--&gt; $got\n&quot;;
}
exit;

BEGIN {
    use POSIX qw(:termios_h);

    my ($term, $oterm, $echo, $noecho, $fd_stdin);

    $fd_stdin = fileno(STDIN);

    $term     = POSIX::Termios-&gt;new();
    $term-&gt;getattr($fd_stdin);
    $oterm    = $term-&gt;getlflag();

    $echo     = ECHO | ECHOK | ICANON;
    $noecho   = $oterm &amp; ~$echo;

    sub cbreak {
        $term-&gt;setlflag($noecho);
        $term-&gt;setcc(VTIME, 1);
        $term-&gt;setattr($fd_stdin, TCSANOW);
    }

    sub cooked {
        $term-&gt;setlflag($oterm);
        $term-&gt;setcc(VTIME, 0);
        $term-&gt;setattr($fd_stdin, TCSANOW);
    }

    sub getone {
        my $key = &quot;&quot;;
        cbreak();
        sysread(STDIN, $key, 1);
        cooked();
        return $key;
    }

}

END { cooked() }</PRE
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PERL2-CH-7-SECT-1.67">7.2.49.2 Functions</A
></H4
><a class="indexterm" name="CH07.POSIX2"></A
><br><table class="table" border="1" cellpadding="3"><caption class="table"><a class="title" name="PERL2-CH-7-TAB-16">Table 7.12: Functions</A
></CAPTION
><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1">Function Name</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Definition</TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">_exit</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to the C function <em class="emphasis">_exit</EM
>(2).</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">abort</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to the C function <em class="emphasis">abort</EM
>(3).</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">abs</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to Perl's built-in <a class="xref" href="ch03_003.htm#PERL2-CMD-ABS" title="abs"><b class="xref.cmd">abs</B
></A
> function.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">access</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Determines the accessibility of a file.  Returns <a class="xref" href="ch03_180.htm#PERL2-CMD-UNDEF" title="undef"><b class="xref.cmd">undef</B
></A
> on failure.

<pre class="programlisting">if (POSIX::access(&quot;/&quot;, &amp;POSIX::R_OK ) ){
    print &quot;have read permission\n&quot;;
}</PRE
>&#13;</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">acos</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to the C function <em class="emphasis">acos</EM
>(3).</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">alarm</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to Perl's built-in <a class="xref" href="ch03_005.htm#PERL2-CMD-ALARM" title="alarm"><b class="xref.cmd">alarm</B
></A
> function.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">asctime</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to the C function <em class="emphasis">asctime</EM
>(3).</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">asin</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to the C function <em class="emphasis">asin</EM
>(3).</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">assert</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Similar to the C macro <em class="emphasis">assert</EM
>(3).</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">atan</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to the C function <em class="emphasis">atan</EM
>(3).</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">atan2</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to Perl's built-in <a class="xref" href="ch03_006.htm#PERL2-CMD-ATAN2" title="atan2"><b class="xref.cmd">atan2</B
></A
> function.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">atexit</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">C-specific: use <code class="literal">END {}</CODE
> instead.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">atof</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">C-specific.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">atoi</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">C-specific.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">atol</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">C-specific.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">bsearch</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Not supplied.  You should probably be using a hash anyway.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">calloc</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">C-specific.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">ceil</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to the C function <em class="emphasis">ceil</EM
>(3).</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">chdir</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to Perl's built-in <a class="xref" href="ch03_011.htm#PERL2-CMD-CHDIR" title="chdir"><b class="xref.cmd">chdir</B
></A
> function.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">chmod</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to Perl's built-in <a class="xref" href="ch03_012.htm#PERL2-CMD-CHMOD" title="chmod"><b class="xref.cmd">chmod</B
></A
> function.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">chown</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to Perl's built-in <a class="xref" href="ch03_015.htm#PERL2-CMD-CHOWN" title="chown"><b class="xref.cmd">chown</B
></A
> function.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">clearerr</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Use method <code class="literal">FileHandle::clearerr()</CODE
> instead.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">clock</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to the C function <em class="emphasis">clock</EM
>(3).</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">close</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Closes a file.  This uses file descriptors such as those obtained by calling
<code class="literal">POSIX::open()</CODE
>.  Returns <a class="xref" href="ch03_180.htm#PERL2-CMD-UNDEF" title="undef"><b class="xref.cmd">undef</B
></A
> on failure.

<pre class="programlisting">$fd = POSIX::open(&quot;foo&quot;, &amp;POSIX::O_RDONLY);
POSIX::close($fd);</PRE
>&#13;</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">closedir</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to Perl's built-in <a class="xref" href="ch03_019.htm#PERL2-CMD-CLOSEDIR" title="closedir"><b class="xref.cmd">closedir</B
></A
> function.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">cos</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to Perl's built-in <a class="xref" href="ch03_021.htm#PERL2-CMD-COS" title="cos"><b class="xref.cmd">cos</B
></A
> function.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">cosh</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to the C function <em class="emphasis">cosh</EM
>(3).</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">creat</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Creates a new file.  This returns a file descriptor like the ones returned by
<code class="literal">POSIX::open()</CODE
>.  Use <code class="literal">POSIX::close()</CODE
> to close the file.

<pre class="programlisting">$fd = POSIX::creat(&quot;foo&quot;, 0611);
POSIX::close($fd);</PRE
>&#13;</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">ctermid</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Generates the path name for the controlling terminal.

<pre class="programlisting">$path = POSIX::ctermid();</PRE
>&#13;</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">ctime</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to the C function <em class="emphasis">ctime</EM
>(3)</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">cuserid</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Gets the character login name of the user.

<pre class="programlisting">$name = POSIX::cuserid();</PRE
>&#13;</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">difftime</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to the C function <em class="emphasis">difftime</EM
>(3).</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">div</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">C-specific.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">dup</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Similar to the C function <em class="emphasis">dup</EM
>(2).
Uses file descriptors such as those obtained by calling
<code class="literal">POSIX::open()</CODE
>.  Returns <a class="xref" href="ch03_180.htm#PERL2-CMD-UNDEF" title="undef"><b class="xref.cmd">undef</B
></A
> on failure.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">dup2</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Similar to the C function <em class="emphasis">dup2</EM
>(2).
Uses file descriptors such as those obtained by calling
<code class="literal">POSIX::open()</CODE
>.  Returns <a class="xref" href="ch03_180.htm#PERL2-CMD-UNDEF" title="undef"><b class="xref.cmd">undef</B
></A
> on failure.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">errno</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Returns the value of <em class="emphasis">errno</EM
>.

<pre class="programlisting">$errno = POSIX::errno();</PRE
>&#13;</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">execl</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">C-specific; use Perl's <a class="xref" href="ch03_033.htm#PERL2-CMD-EXEC" title="exec"><b class="xref.cmd">exec</B
></A
> instead.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">execle</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">C-specific; use Perl's <a class="xref" href="ch03_033.htm#PERL2-CMD-EXEC" title="exec"><b class="xref.cmd">exec</B
></A
> instead.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">execlp</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">C-specific; use Perl's <a class="xref" href="ch03_033.htm#PERL2-CMD-EXEC" title="exec"><b class="xref.cmd">exec</B
></A
> instead.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">execv</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">C-specific; use Perl's <a class="xref" href="ch03_033.htm#PERL2-CMD-EXEC" title="exec"><b class="xref.cmd">exec</B
></A
> instead.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">execve</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">C-specific; use Perl's <a class="xref" href="ch03_033.htm#PERL2-CMD-EXEC" title="exec"><b class="xref.cmd">exec</B
></A
> instead.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">execvp</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">C-specific; use Perl's <a class="xref" href="ch03_033.htm#PERL2-CMD-EXEC" title="exec"><b class="xref.cmd">exec</B
></A
> instead.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">exit</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to Perl's built-in <a class="xref" href="ch03_035.htm#PERL2-CMD-EXIT" title="exit"><b class="xref.cmd">exit</B
></A
> function.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">exp</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to Perl's built-in <a class="xref" href="ch03_036.htm#PERL2-CMD-EXP" title="exp"><b class="xref.cmd">exp</B
></A
> function.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">fabs</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to Perl's built-in <a class="xref" href="ch03_003.htm#PERL2-CMD-ABS" title="abs"><b class="xref.cmd">abs</B
></A
> function.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">fclose</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Use method <code class="literal">FileHandle::close()</CODE
> instead.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">fcntl</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to Perl's built-in <a class="xref" href="ch03_037.htm#PERL2-CMD-FCNTL" title="fcntl"><b class="xref.cmd">fcntl</B
></A
> function.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">fdopen</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Use method <code class="literal">FileHandle::new_from_fd()</CODE
> instead.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">feof</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Use method <code class="literal">FileHandle::eof()</CODE
> instead.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">ferror</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Use method <code class="literal">FileHandle::error()</CODE
> instead.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">fflush</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Use method <code class="literal">FileHandle::flush()</CODE
> instead.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">fgetc</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Use method <code class="literal">FileHandle::getc()</CODE
> instead.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">fgetpos</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Use method <code class="literal">FileHandle::getpos()</CODE
> instead.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">fgets</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Use method <code class="literal">FileHandle::gets()</CODE
> instead.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">fileno</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Use method <code class="literal">FileHandle::fileno()</CODE
> instead.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">floor</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to the C function <em class="emphasis">floor</EM
>(3).</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">fmod</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to the C function <em class="emphasis">fmod</EM
>(3).</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">fopen</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Use method <code class="literal">FileHandle::open()</CODE
> instead.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">fork</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to Perl's built-in <a class="xref" href="ch03_040.htm#PERL2-CMD-FORK" title="fork"><b class="xref.cmd">fork</B
></A
> function.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">fpathconf</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Retrieves the value of a configurable limit on a file or directory.  This
uses file descriptors such as those obtained by calling <code class="literal">POSIX::open()</CODE
>.
Returns <a class="xref" href="ch03_180.htm#PERL2-CMD-UNDEF" title="undef"><b class="xref.cmd">undef</B
></A
> on failure. The following will determine the maximum length of the longest allowable
pathname on the filesystem that holds <em class="emphasis">/tmp/foo</EM
>.

<pre class="programlisting">$fd = POSIX::open(&quot;/tmp/foo&quot;, &amp;POSIX::O_RDONLY);
$path_max = POSIX::fpathconf($fd, &amp;POSIX::_PC_PATH_MAX);</PRE
>&#13;</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">fprintf</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">C-specific; use Perl's built-in <a class="xref" href="ch03_111.htm#PERL2-CMD-PRINTF" title="printf"><b class="xref.cmd">printf</B
></A
> function instead.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">fputc</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">C-specific; use Perl's built-in <a class="xref" href="ch03_110.htm#PERL2-CMD-PRINT" title="print"><b class="xref.cmd">print</B
></A
> function instead.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">fputs</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">C-specific; use Perl's built-in <a class="xref" href="ch03_110.htm#PERL2-CMD-PRINT" title="print"><b class="xref.cmd">print</B
></A
> function instead.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">fread</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">C-specific; use Perl's built-in <a class="xref" href="ch03_116.htm#PERL2-CMD-READ" title="read"><b class="xref.cmd">read</B
></A
> function instead.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">free</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">C-specific</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">freopen</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">C-specific; use Perl's built-in <a class="xref" href="ch03_102.htm#PERL2-CMD-OPEN" title="open"><b class="xref.cmd">open</B
></A
> function instead.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">frexp</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Returns the mantissa and exponent of a floating-point number.

<pre class="programlisting">($mantissa, $exponent) = POSIX::frexp(3.14);</PRE
>&#13;</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">fscanf</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">C-specific; use <code class="literal">&lt;&gt;</CODE
> and regular expressions instead.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">fseek</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Use method <code class="literal">FileHandle::seek()</CODE
> instead.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">fsetpos</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Use method <code class="literal">FileHandle::setpos()</CODE
> instead.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">fstat</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Gets file status.  This uses file descriptors such as those obtained by
calling <code class="literal">POSIX::open()</CODE
>.  The data returned is identical to the data from
Perl's built-in <a class="xref" href="ch03_159.htm#PERL2-CMD-STAT" title="stat"><b class="xref.cmd">stat</B
></A
> function.  Odd how that happens...

<pre class="programlisting">$fd = POSIX::open(&quot;foo&quot;, &amp;POSIX::O_RDONLY);
@stats = POSIX::fstat($fd);</PRE
>&#13;</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">ftell</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Use method <code class="literal">FileHandle::tell()</CODE
> instead.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">fwrite</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">C-specific; use Perl's built-in <a class="xref" href="ch03_110.htm#PERL2-CMD-PRINT" title="print"><b class="xref.cmd">print</B
></A
> function instead.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">getc</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to Perl's built-in <a class="xref" href="ch03_043.htm#PERL2-CMD-GETC" title="getc"><b class="xref.cmd">getc</B
></A
> function.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">getchar</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Returns one character from <code class="literal">STDIN</CODE
>.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">getcwd</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Returns the name of the current working directory.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">getegid</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Returns the effective group ID (gid).</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">getenv</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Returns the value of the specified environment variable.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">geteuid</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Returns the effective user ID (uid).</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">getgid</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Returns the user's real group ID (gid).</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">getgrgid</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to Perl's built-in <a class="xref" href="ch03_045.htm#PERL2-CMD-GETGRGID" title="getgrgid"><b class="xref.cmd">getgrgid</B
></A
> function.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">getgrnam</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to Perl's built-in <a class="xref" href="ch03_046.htm#PERL2-CMD-GETGRNAM" title="getgrnam"><b class="xref.cmd">getgrnam</B
></A
> function.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">getgroups</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Returns the ids of the user's supplementary groups.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">getlogin</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to Perl's built-in <a class="xref" href="ch03_050.htm#PERL2-CMD-GETLOGIN" title="getlogin"><b class="xref.cmd">getlogin</B
></A
> function.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">getpgrp</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to Perl's built-in <a class="xref" href="ch03_055.htm#PERL2-CMD-GETPGRP" title="getpgrp"><b class="xref.cmd">getpgrp</B
></A
> function.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">getpid</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Returns the process's ID (pid).</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">getppid</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to Perl's built-in <a class="xref" href="ch03_056.htm#PERL2-CMD-GETPPID" title="getppid"><b class="xref.cmd">getppid</B
></A
> function.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">getpwnam</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to Perl's built-in <a class="xref" href="ch03_062.htm#PERL2-CMD-GETPWNAM" title="getpwnam"><b class="xref.cmd">getpwnam</B
></A
> function.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">getpwuid</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to Perl's built-in <a class="xref" href="ch03_063.htm#PERL2-CMD-GETPWUID" title="getpwuid"><b class="xref.cmd">getpwuid</B
></A
> function.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">gets</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Returns one line from <code class="literal">STDIN</CODE
>.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">getuid</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Returns the user's ID (uid).</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">gmtime</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to Perl's built-in <a class="xref" href="ch03_070.htm#PERL2-CMD-GMTIME" title="gmtime"><b class="xref.cmd">gmtime</B
></A
> function.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">isalnum</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to the C function, except that it can apply to a single
character or to a whole string.  (If applied to a whole string, all characters
must be of the indicated category.)</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">isalpha</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to the C function, except that it can apply to a single
character or to a whole string.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">isatty</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Returns a Boolean indicating whether the specified filehandle is connected
to a TTY.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">iscntrl</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to the C function, except that it can apply to a single
character or to a whole string.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">isdigit</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to the C function, except that it can apply to a single
character or to a whole string.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">isgraph</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to the C function, except that it can apply to a single
character or to a whole string.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">islower</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to the C function, except that it can apply to a single
character or to a whole string.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">isprint</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to the C function, except that it can apply to a single
character or to a whole string.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">ispunct</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to the C function, except that it can apply to a single
character or to a whole string.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">isspace</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to the C function, except that it can apply to a single
character or to a whole string.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">isupper</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to the C function, except that it can apply to a single
character or to a whole string.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">isxdigit</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to the C function, except that it can apply to a single
character or to a whole string.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">kill</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to Perl's built-in <a class="xref" href="ch03_080.htm#PERL2-CMD-KILL" title="kill"><b class="xref.cmd">kill</B
></A
> function.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">labs</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">C-specific; use Perl's built-in <a class="xref" href="ch03_003.htm#PERL2-CMD-ABS" title="abs"><b class="xref.cmd">abs</B
></A
> function instead.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">ldexp</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to the C function <em class="emphasis">ldexp</EM
>(3).</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">ldiv</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">C-specific; use the division operator <code class="literal">/</CODE
> 
and Perl's built-in <a class="xref" href="ch03_076.htm#PERL2-CMD-INT" title="int"><b class="xref.cmd">int</B
></A
>
function instead.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">link</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to Perl's built-in <a class="xref" href="ch03_085.htm#PERL2-CMD-LINK" title="link"><b class="xref.cmd">link</B
></A
> function.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">localeconv</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Gets numeric formatting information.  Returns a reference to a hash
containing the current locale formatting values.

The database for the <code class="literal">de</CODE
> (Deutsch or German) locale:</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><pre class="programlisting">$loc = POSIX::setlocale(&amp;POSIX::LC_ALL, &quot;de&quot;);
print &quot;Locale = $loc\n&quot;;
$lconv = POSIX::localeconv();
print &quot;decimal_point     = &quot;, $lconv-&gt;{decimal_point},     &quot;\n&quot;;
print &quot;thousands_sep     = &quot;, $lconv-&gt;{thousands_sep},     &quot;\n&quot;;
print &quot;grouping          = &quot;, $lconv-&gt;{grouping},          &quot;\n&quot;;
print &quot;int_curr_symbol   = &quot;, $lconv-&gt;{int_curr_symbol},   &quot;\n&quot;;
print &quot;currency_symbol   = &quot;, $lconv-&gt;{currency_symbol},   &quot;\n&quot;;
print &quot;mon_decimal_point = &quot;, $lconv-&gt;{mon_decimal_point}, &quot;\n&quot;;
print &quot;mon_thousands_sep = &quot;, $lconv-&gt;{mon_thousands_sep}, &quot;\n&quot;;
print &quot;mon_grouping      = &quot;, $lconv-&gt;{mon_grouping},      &quot;\n&quot;;
print &quot;positive_sign     = &quot;, $lconv-&gt;{positive_sign},     &quot;\n&quot;;
print &quot;negative_sign     = &quot;, $lconv-&gt;{negative_sign},     &quot;\n&quot;;</PRE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><pre class="programlisting">print &quot;int_frac_digits   = &quot;, $lconv-&gt;{int_frac_digits},   &quot;\n&quot;;
print &quot;frac_digits       = &quot;, $lconv-&gt;{frac_digits},       &quot;\n&quot;;
print &quot;p_cs_precedes     = &quot;, $lconv-&gt;{p_cs_precedes},     &quot;\n&quot;;
print &quot;p_sep_by_space    = &quot;, $lconv-&gt;{p_sep_by_space},    &quot;\n&quot;;
print &quot;n_cs_precedes     = &quot;, $lconv-&gt;{n_cs_precedes},     &quot;\n&quot;;
print &quot;n_sep_by_space    = &quot;, $lconv-&gt;{n_sep_by_space},    &quot;\n&quot;;
print &quot;p_sign_posn       = &quot;, $lconv-&gt;{p_sign_posn},       &quot;\n&quot;;
print &quot;n_sign_posn       = &quot;, $lconv-&gt;{n_sign_posn},       &quot;\n&quot;;</PRE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">localtime</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to Perl's built-in <a class="xref" href="ch03_088.htm#PERL2-CMD-LOCALTIME" title="localtime"><b class="xref.cmd">localtime</B
></A
> function.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">log</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to Perl's built-in <a class="xref" href="ch03_089.htm#PERL2-CMD-LOG" title="log"><b class="xref.cmd">log</B
></A
> function.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">log10</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to the C function <em class="emphasis">log10</EM
>(3).</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">longjmp</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">C-specific; use Perl's built-in <a class="xref" href="ch03_027.htm#PERL2-CMD-DIE" title="die"><b class="xref.cmd">die</B
></A
> function instead.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">lseek</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Moves the read/write file pointer.  This uses file descriptors such as
those obtained by calling <code class="literal">POSIX::open()</CODE
>.

<pre class="programlisting">$fd = POSIX::open(&quot;foo&quot;, &amp;POSIX::O_RDONLY);
$off_t = POSIX::lseek($fd, 0, &amp;POSIX::SEEK_SET);</PRE
>

Returns <a class="xref" href="ch03_180.htm#PERL2-CMD-UNDEF" title="undef"><b class="xref.cmd">undef</B
></A
> on failure.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">malloc</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">C-specific.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">mblen</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to the C function <em class="emphasis">mblen</EM
>(3).</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">mbstowcs</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to the C function <em class="emphasis">mbstowcs</EM
>(3).</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">mbtowc</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to the C function <em class="emphasis">mbtowc</EM
>(3).</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">memchr</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">C-specific; use Perl's built-in <a class="xref" href="ch03_075.htm#PERL2-CMD-INDEX" title="index"><b class="xref.cmd">index</B
></A
> instead.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">memcmp</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">C-specific; use <b class="emphasis.bold">eq</B
> instead.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">memcpy</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">C-specific; use <b class="emphasis.bold">=</B
> instead.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">memmove</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">C-specific; use <b class="emphasis.bold">=</B
> instead.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">memset</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">C-specific; use <b class="emphasis.bold">x</B
> instead.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">mkdir</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to Perl's built-in <a class="xref" href="ch03_092.htm#PERL2-CMD-MKDIR" title="mkdir"><b class="xref.cmd">mkdir</B
></A
> function.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">mkfifo</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Similar to the C function <em class="emphasis">mkfifo</EM
>(2).
Returns <a class="xref" href="ch03_180.htm#PERL2-CMD-UNDEF" title="undef"><b class="xref.cmd">undef</B
></A
> on failure.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">mktime</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Converts date/time information to a calendar time.  Returns <a class="xref" href="ch03_180.htm#PERL2-CMD-UNDEF" title="undef"><b class="xref.cmd">undef</B
></A
> on failure.
Synopsis:</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><pre class="programlisting">mktime(<code class="replaceable"><i>sec</I
></CODE
>, <code class="replaceable"><i>min</I
></CODE
>, <code class="replaceable"><i>hour</I
></CODE
>, <code class="replaceable"><i>mday</I
></CODE
>, <code class="replaceable"><i>mon</I
></CODE
>, <code class="replaceable"><i>year</I
></CODE
>, <code class="replaceable"><i>wday</I
></CODE
> = 0,
                                     <code class="replaceable"><i>yday</I
></CODE
> = 0, <code class="replaceable"><i>isdst</I
></CODE
> = 0)</PRE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">The month (<code class="replaceable"><i>mon</I
></CODE
>), weekday (<code class="replaceable"><i>wday</I
></CODE
>), and yearday
(<code class="replaceable"><i>yday</I
></CODE
>) begin at zero.
That is, January is 0, not 1; Sunday is 0, not 1; January 1st is 0, not 1.  The
year (<code class="literal">year</CODE
>) is given in years since 1900.  That is, the year
1995 is 95; the
year 2001 is 101.  Consult your system's <em class="emphasis">mktime</EM
>(3) manpage for details
about these and the other arguments.

Calendar time for December 12, 1995, at 10:30 am.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><pre class="programlisting">$time_t = POSIX::mktime(0, 30, 10, 12, 11, 95);
print &quot;Date = &quot;, POSIX::ctime($time_t);</PRE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">modf</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Returns the integral and fractional parts of a floating-point number.

<pre class="programlisting">($fractional, $integral) = POSIX::modf(3.14);</PRE
>&#13;</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">nice</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Similar to the C function <em class="emphasis">nice</EM
>(3).
Returns <a class="xref" href="ch03_180.htm#PERL2-CMD-UNDEF" title="undef"><b class="xref.cmd">undef</B
></A
> on failure.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">offsetof</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">C-specific.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">open</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Opens a file for reading or writing.  This returns file descriptors, not
Perl filehandles.  Returns <a class="xref" href="ch03_180.htm#PERL2-CMD-UNDEF" title="undef"><b class="xref.cmd">undef</B
></A
> on failure.
Use <code class="literal">POSIX::close()</CODE
> to close the file.

Open a file read-only:

<pre class="programlisting">$fd = POSIX::open(&quot;foo&quot;);</PRE
>

Open a file for reading and writing:

<pre class="programlisting">$fd = POSIX::open(&quot;foo&quot;, &amp;POSIX::O_RDWR);</PRE
>

Open a file for writing, with truncation:

<pre class="programlisting">$fd = POSIX::open(&quot;foo&quot;, &amp;POSIX::O_WRONLY | &amp;POSIX::O_TRUNC);</PRE
>

Create a new file with mode 0644; set up the file for writing:

<pre class="programlisting">$fd = POSIX::open(&quot;foo&quot;, &amp;POSIX::O_CREAT | &amp;POSIX::O_WRONLY, 
        0644);</PRE
>&#13;</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">opendir</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Opens a directory for reading.  Returns <a class="xref" href="ch03_180.htm#PERL2-CMD-UNDEF" title="undef"><b class="xref.cmd">undef</B
></A
> on failure.

<pre class="programlisting">$dir = POSIX::opendir(&quot;/tmp&quot;);
@files = POSIX::readdir($dir);
POSIX::closedir($dir);</PRE
>&#13;</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">pathconf</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Retrieves the value of a configurable limit on a file or directory.
Returns <a class="xref" href="ch03_180.htm#PERL2-CMD-UNDEF" title="undef"><b class="xref.cmd">undef</B
></A
> on failure.
The following will determine the maximum length of the longest allowable
pathname on the filesystem that holds <em class="emphasis">/tmp</EM
>:

<pre class="programlisting">$path_max = POSIX::pathconf(&quot;/tmp&quot;, &amp;POSIX::_PC_PATH_MAX);</PRE
>&#13;</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">pause</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Similar to the C function <em class="emphasis">pause</EM
>(3).
Returns <a class="xref" href="ch03_180.htm#PERL2-CMD-UNDEF" title="undef"><b class="xref.cmd">undef</B
></A
> on failure.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">perror</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to the C function <em class="emphasis">perror</EM
>(3).</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">pipe</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Creates an interprocess channel.  Returns file descriptors like those
returned by <code class="literal">POSIX::open()</CODE
>.

<pre class="programlisting">($fd0, $fd1) = POSIX::pipe();
POSIX::write($fd0, &quot;hello&quot;, 5);
POSIX::read($fd1, $buf, 5);</PRE
>&#13;</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">pow</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Computes <code class="literal">$x</CODE
> raised to the power <code class="literal">$exponent</CODE
>.

<pre class="programlisting">$ret = POSIX::pow($x, $exponent);</PRE
>&#13;</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">printf</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Prints the specified arguments to <code class="literal">STDOUT</CODE
>.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">putc</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">C-specific; use Perl's built-in <a class="xref" href="ch03_110.htm#PERL2-CMD-PRINT" title="print"><b class="xref.cmd">print</B
></A
> function instead.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">putchar</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">C-specific; use Perl's built-in <a class="xref" href="ch03_110.htm#PERL2-CMD-PRINT" title="print"><b class="xref.cmd">print</B
></A
> function instead.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">puts</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">C-specific; use Perl's built-in <a class="xref" href="ch03_110.htm#PERL2-CMD-PRINT" title="print"><b class="xref.cmd">print</B
></A
> function instead.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">qsort</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">C-specific; use Perl's built-in <a class="xref" href="ch03_153.htm#PERL2-CMD-SORT" title="sort"><b class="xref.cmd">sort</B
></A
> function instead.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">raise</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Sends the specified signal to the current process.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">rand</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Non-portable; use Perl's built-in <a class="xref" href="ch03_115.htm#PERL2-CMD-RAND" title="rand"><b class="xref.cmd">rand</B
></A
> function instead.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">read</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Reads from a file.  This uses file descriptors such as those obtained by
calling <code class="literal">POSIX::open()</CODE
>.  If the buffer <code class="literal">$buf</CODE
> is not large
enough for the read, then Perl will extend it to make room for the request.
Returns <a class="xref" href="ch03_180.htm#PERL2-CMD-UNDEF" title="undef"><b class="xref.cmd">undef</B
></A
> on failure.

<pre class="programlisting">$fd = POSIX::open(&quot;foo&quot;, &amp;POSIX::O_RDONLY);
$bytes = POSIX::read($fd, $buf, 3);</PRE
>&#13;</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">readdir</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to Perl's built-in <a class="xref" href="ch03_117.htm#PERL2-CMD-READDIR" title="readdir"><b class="xref.cmd">readdir</B
></A
> function.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">realloc</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">C-specific.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">remove</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to Perl's built-in <a class="xref" href="ch03_181.htm#PERL2-CMD-UNLINK" title="unlink"><b class="xref.cmd">unlink</B
></A
> function.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">rename</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to Perl's built-in <a class="xref" href="ch03_122.htm#PERL2-CMD-RENAME" title="rename"><b class="xref.cmd">rename</B
></A
> function.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">rewind</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Seeks to the beginning of the file.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">rewinddir</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to Perl's built-in <a class="xref" href="ch03_127.htm#PERL2-CMD-REWINDDIR" title="rewinddir"><b class="xref.cmd">rewinddir</B
></A
> function.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">rmdir</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to Perl's built-in <a class="xref" href="ch03_129.htm#PERL2-CMD-RMDIR" title="rmdir"><b class="xref.cmd">rmdir</B
></A
> function.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">scanf</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">C-specific; use <code class="literal">&lt;&gt;</CODE
> and regular expressions instead.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">setgid</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Sets the real group id for this process, like assigning to the
special variable <b class="emphasis.bold">$(</B
>.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">setjmp</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">C-specific; use <code class="literal">eval {}</CODE
> instead.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">setlocale</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Modifies and queries program's locale.

The following will set the traditional UNIX system locale behavior.

<pre class="programlisting">$loc = POSIX::setlocale(&amp;POSIX::LC_ALL, &quot;C&quot;);</PRE
>&#13;</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">setpgid</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Similar to the C function <em class="emphasis">setpgid</EM
>(2).
Returns <a class="xref" href="ch03_180.htm#PERL2-CMD-UNDEF" title="undef"><b class="xref.cmd">undef</B
></A
> on failure.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">setsid</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to the C function <em class="emphasis">setsid</EM
>(8).</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">setuid</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Sets the real user ID for this process, like assigning to the
special variable <b class="emphasis.bold">$&lt;</B
>.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">sigaction</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Detailed signal management.  This uses POSIX::SigAction objects for the
<code class="literal">$action</CODE
> and <code class="literal">$oldaction</CODE
> arguments.  Consult your system's
<em class="emphasis">sigaction</EM
>(3) manpage for details.
Returns <a class="xref" href="ch03_180.htm#PERL2-CMD-UNDEF" title="undef"><b class="xref.cmd">undef</B
></A
> on failure.

<pre class="programlisting">POSIX::sigaction($sig, $action, $oldaction)</PRE
>&#13;</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">siglongjmp</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">C-specific; use Perl's built-in <a class="xref" href="ch03_027.htm#PERL2-CMD-DIE" title="die"><b class="xref.cmd">die</B
></A
> function instead.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">sigpending</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Examine signals that are blocked and pending.  This uses POSIX::SigSet
objects for the <code class="literal">$sigset</CODE
> argument.  Consult your system's
<em class="emphasis">sigpending</EM
>(2) manpage for details.
Returns <a class="xref" href="ch03_180.htm#PERL2-CMD-UNDEF" title="undef"><b class="xref.cmd">undef</B
></A
> on failure.

<pre class="programlisting">POSIX::sigpending($sigset)</PRE
>&#13;</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">sigprocmask</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Changes and/or examines this process's signal mask.  This uses
POSIX::SigSet objects for the <code class="literal">$sigset</CODE
> and <code class="literal">$oldsigset</CODE
>
arguments.  Consult your system's
<em class="emphasis">sigprocmask</EM
>(2) manpage for details.
Returns <a class="xref" href="ch03_180.htm#PERL2-CMD-UNDEF" title="undef"><b class="xref.cmd">undef</B
></A
> on failure.

<pre class="programlisting">POSIX::sigprocmask($how, $sigset, $oldsigset)</PRE
>&#13;</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">sigsetjmp</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">C-specific; use <code class="literal">eval {}</CODE
> instead.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">sigsuspend</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Install a signal mask and suspend process until signal arrives.  This uses
POSIX::SigSet objects for the <code class="literal">$signal_mask</CODE
> argument.
Consult your system's <em class="emphasis">sigsuspend</EM
>(2) manpage for details.
Returns <a class="xref" href="ch03_180.htm#PERL2-CMD-UNDEF" title="undef"><b class="xref.cmd">undef</B
></A
> on failure.

<pre class="programlisting">POSIX::sigsuspend($signal_mask)</PRE
>&#13;</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">sin</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to Perl's built-in <a class="xref" href="ch03_149.htm#PERL2-CMD-SIN" title="sin"><b class="xref.cmd">sin</B
></A
> function.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">sinh</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to the C function <em class="emphasis">sinh</EM
>(3).</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">sleep</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to Perl's built-in <a class="xref" href="ch03_150.htm#PERL2-CMD-SLEEP" title="sleep"><b class="xref.cmd">sleep</B
></A
> function.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">sprintf</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to Perl's built-in <a class="xref" href="ch03_156.htm#PERL2-CMD-SPRINTF" title="sprintf"><b class="xref.cmd">sprintf</B
></A
> function.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">sqrt</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to Perl's built-in <a class="xref" href="ch03_157.htm#PERL2-CMD-SQRT" title="sqrt"><b class="xref.cmd">sqrt</B
></A
> function.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">srand</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to Perl's built-in <a class="xref" href="ch03_158.htm#PERL2-CMD-SRAND" title="srand"><b class="xref.cmd">srand</B
></A
> function.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">sscanf</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">C-specific; use regular expressions instead.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">stat</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to Perl's built-in <a class="xref" href="ch03_159.htm#PERL2-CMD-STAT" title="stat"><b class="xref.cmd">stat</B
></A
> function.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">strcat</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">C-specific; use <code class="literal">.=</CODE
> instead.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">strchr</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">C-specific; use <a class="xref" href="ch03_075.htm#PERL2-CMD-INDEX" title="index"><b class="xref.cmd">index</B
></A
> instead.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">strcmp</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">C-specific; use <b class="emphasis.bold">eq</B
> instead.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">strcoll</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to the C function <em class="emphasis">strcoll</EM
>(3).</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">strcpy</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">C-specific; use <code class="literal">=</CODE
> instead.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">strcspn</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">C-specific; use regular expressions instead.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">strerror</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Returns the error string for the specified <em class="emphasis">errno</EM
>.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">strftime</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Converts date and time information to string.  Returns the string.

<pre class="programlisting">strftime(<code class="replaceable"><i>fmt</I
></CODE
>, <code class="replaceable"><i>sec</I
></CODE
>, <code class="replaceable"><i>min</I
></CODE
>, <code class="replaceable"><i>hour</I
></CODE
>, <code class="replaceable"><i>mday</I
></CODE
>, <code class="replaceable"><i>mon</I
></CODE
>, <code class="replaceable"><i>year</I
></CODE
>, 
            <code class="replaceable"><i>wday</I
></CODE
> = 0, <code class="replaceable"><i>yday</I
></CODE
> = 0, <code class="replaceable"><i>isdst</I
></CODE
> = 0)</PRE
>

The month (<code class="replaceable"><i>mon</I
></CODE
>), weekday (<code class="replaceable"><i>wday</I
></CODE
>), and yearday (<code class="replaceable"><i>yday</I
></CODE
>)
begin at zero.  That is, January is 0, not 1; Sunday is 0, not 1;
January 1st is 0, not 1.  The year (<code class="replaceable"><i>year</I
></CODE
>) is given in years since
1900.  That is, the year 1995 is 95; the year 2001 is 101.  Consult your
system's <em class="emphasis">strftime</EM
>(3) manpage for details about these and the
other arguments.

The string for Tuesday, December 12, 1995:

<pre class="programlisting">$str = POSIX::strftime(&quot;%A, %B %d, %Y&quot;, 0, 0, 0, 12, 
                        11, 95, 2);
print &quot;$str\n&quot;;</PRE
>&#13;</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">strlen</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">C-specific; use <a class="xref" href="ch03_084.htm#PERL2-CMD-LENGTH" title="length"><b class="xref.cmd">length</B
></A
> instead.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">strncat</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">C-specific; use <code class="literal">.=</CODE
> and/or <a class="xref" href="ch03_162.htm#PERL2-CMD-SUBSTR" title="substr"><b class="xref.cmd">substr</B
></A
> instead.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">strncmp</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">C-specific; use <b class="emphasis.bold">eq</B
> and/or <a class="xref" href="ch03_162.htm#PERL2-CMD-SUBSTR" title="substr"><b class="xref.cmd">substr</B
></A
> instead.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">strncpy</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">C-specific; use <code class="literal">=</CODE
> and/or <a class="xref" href="ch03_162.htm#PERL2-CMD-SUBSTR" title="substr"><b class="xref.cmd">substr</B
></A
> instead.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">strpbrk</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">C-specific.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">strrchr</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">C-specific; use <a class="xref" href="ch03_128.htm#PERL2-CMD-RINDEX" title="rindex"><b class="xref.cmd">rindex</B
></A
> and/or <a class="xref" href="ch03_162.htm#PERL2-CMD-SUBSTR" title="substr"><b class="xref.cmd">substr</B
></A
> instead.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">strspn</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">C-specific.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">strstr</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to Perl's built-in <a class="xref" href="ch03_075.htm#PERL2-CMD-INDEX" title="index"><b class="xref.cmd">index</B
></A
> function.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">strtod</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">C-specific.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">strtok</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">C-specific.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">strtol</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">C-specific.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">strtoul</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">C-specific.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">strxfrm</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">String transformation.  Returns the transformed string.

<pre class="programlisting">$dst = POSIX::strxfrm($src);</PRE
>&#13;</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">sysconf</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Retrieves values of system configurable variables.
Returns <a class="xref" href="ch03_180.htm#PERL2-CMD-UNDEF" title="undef"><b class="xref.cmd">undef</B
></A
> on failure.
The following will get the machine's clock speed.

<pre class="programlisting">$clock_ticks = POSIX::sysconf(&amp;POSIX::_SC_CLK_TCK);</PRE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">system</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to Perl's built-in <a class="xref" href="ch03_167.htm#PERL2-CMD-SYSTEM" title="system"><b class="xref.cmd">system</B
></A
> function.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">tan</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to the C function <em class="emphasis">tan</EM
>(3).</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">tanh</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to the C function <em class="emphasis">tanh</EM
>(3).</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">tcdrain</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Similar to the C function <em class="emphasis">tcdrain</EM
>(3).
Returns <a class="xref" href="ch03_180.htm#PERL2-CMD-UNDEF" title="undef"><b class="xref.cmd">undef</B
></A
> on failure.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">tcflow</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Similar to the C function <em class="emphasis">tcflow</EM
>(3).
Returns <a class="xref" href="ch03_180.htm#PERL2-CMD-UNDEF" title="undef"><b class="xref.cmd">undef</B
></A
> on failure.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">tcflush</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Similar to the C function <em class="emphasis">tcflush</EM
>(3).
Returns <a class="xref" href="ch03_180.htm#PERL2-CMD-UNDEF" title="undef"><b class="xref.cmd">undef</B
></A
> on failure.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">tcgetpgrp</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to the C function <em class="emphasis">tcgetpgrp</EM
>(3).</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">tcsendbreak</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Similar to the C function <em class="emphasis">tcsendbreak</EM
>(3).
Returns <a class="xref" href="ch03_180.htm#PERL2-CMD-UNDEF" title="undef"><b class="xref.cmd">undef</B
></A
> on failure.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">tcsetpgrp</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Similar to the C function <em class="emphasis">tcsetpgrp</EM
>(3).
Returns <a class="xref" href="ch03_180.htm#PERL2-CMD-UNDEF" title="undef"><b class="xref.cmd">undef</B
></A
> on failure.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">time</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to Perl's built-in <a class="xref" href="ch03_173.htm#PERL2-CMD-TIME" title="time"><b class="xref.cmd">time</B
></A
> function.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">times</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Returns elapsed realtime since some point in the past
(such as system startup), user and system times for this process, and user
and system times for child processes.  All times are returned in clock
ticks.

<pre class="programlisting">($realtime, $user, $system, $cuser, $csystem) = POSIX::times();</PRE
>

Note: Perl's built-in <a class="xref" href="ch03_174.htm#PERL2-CMD-TIMES" title="times"><b class="xref.cmd">times</B
></A
> function returns four values, measured in
seconds.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">tmpfile</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Use method <code class="literal">FileHandle::new_tmpfile()</CODE
> instead.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">tmpnam</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Returns a name for a temporary file.

<pre class="programlisting">$tmpfile = POSIX::tmpnam();</PRE
>&#13;</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">tolower</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to Perl's built-in <a class="xref" href="ch03_082.htm#PERL2-CMD-LC" title="lc"><b class="xref.cmd">lc</B
></A
> function.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">toupper</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to Perl's built-in <a class="xref" href="ch03_177.htm#PERL2-CMD-UC" title="uc"><b class="xref.cmd">uc</B
></A
> function.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">ttyname</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to the C function <em class="emphasis">ttyname</EM
>(3).</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">tzname</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Retrieves the time conversion information from the <code class="literal">tzname</CODE
> variable.

<pre class="programlisting">POSIX::tzset();
($std, $dst) = POSIX::tzname();</PRE
>&#13;</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">tzset</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to the C function <em class="emphasis">tzset</EM
>(3).</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">umask</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to Perl's built-in <a class="xref" href="ch03_179.htm#PERL2-CMD-UMASK" title="umask"><b class="xref.cmd">umask</B
></A
> function.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">uname</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Gets name of current operating system.

<pre class="programlisting">($sysname, $nodename, $release, 
     $version, $machine) = POSIX::uname();</PRE
>&#13;</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">ungetc</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Use method <code class="literal">FileHandle::ungetc()</CODE
> instead.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">unlink</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to Perl's built-in <a class="xref" href="ch03_181.htm#PERL2-CMD-UNLINK" title="unlink"><b class="xref.cmd">unlink</B
></A
> function.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">utime</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to Perl's built-in <a class="xref" href="ch03_186.htm#PERL2-CMD-UTIME" title="utime"><b class="xref.cmd">utime</B
></A
> function.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">vfprintf</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">C-specific.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">vprintf</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">C-specific.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">vsprintf</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">C-specific.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">wait</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to Perl's built-in <a class="xref" href="ch03_189.htm#PERL2-CMD-WAIT" title="wait"><b class="xref.cmd">wait</B
></A
> function.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">waitpid</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Wait for a child process to change state.  This is identical 
to Perl's built-in <a class="xref" href="ch03_190.htm#PERL2-CMD-WAITPID" title="waitpid"><b class="xref.cmd">waitpid</B
></A
> function.

<pre class="programlisting">$pid = POSIX::waitpid(-1, &amp;POSIX::WNOHANG);
print &quot;status = &quot;, ($? / 256), &quot;\n&quot;;</PRE
>&#13;</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">wcstombs</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to the C function <em class="emphasis">wcstombs</EM
>(3).</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">wctomb</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Identical to the C function <em class="emphasis">wctomb</EM
>(3).</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">write</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Writes to a file.  Uses file descriptors such as those obtained by
calling <code class="literal">POSIX::open()</CODE
>.  Returns <a class="xref" href="ch03_180.htm#PERL2-CMD-UNDEF" title="undef"><b class="xref.cmd">undef</B
></A
> on failure.

<pre class="programlisting">$fd = POSIX::open(&quot;foo&quot;, &amp;POSIX::O_WRONLY);
$buf = &quot;hello&quot;;
$bytes = POSIX::write($b, $buf, 5);</PRE
>&#13;</P
></TD
></TR
></TBODY
><a class="indexterm" name="AUTOID-25656"></A
></TABLE
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PERL2-CH-7-SECT-1.68">7.2.49.3 Pathname constants</A
></H4
><table class="simplelist" border="0"><a class="indexterm" name="AUTOID-25660"></A
><tr><td class="member"><code class="literal">_PC_CHOWN_RESTRICTED</CODE
></TD
><td class="member"><code class="literal">_PC_LINK_MAX</CODE
></TD
><td class="member"><code class="literal">_PC_MAX_CANON</CODE
></TD
></TR
><tr><td class="member"><code class="literal">_PC_MAX_INPUT</CODE
></TD
><td class="member"><code class="literal">_PC_NAME_MAX</CODE
></TD
><td class="member"><code class="literal">_PC_NO_TRUNC</CODE
></TD
></TR
><tr><td class="member"><code class="literal">_PC_PATH_MAX</CODE
></TD
><td class="member"><code class="literal">_PC_PIPE_BUF</CODE
></TD
><td class="member"><code class="literal">_PC_VDISABLE</CODE
></TD
></TR
></TABLE
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PERL2-CH-7-SECT-1.69">7.2.49.4 POSIX constants</A
></H4
><table class="simplelist" border="0"><tr><td class="member"><code class="literal">_POSIX_ARG_MAX</CODE
></TD
><td class="member"><code class="literal">_POSIX_CHILD_MAX</CODE
></TD
><td class="member"><code class="literal">_POSIX_CHOWN_RESTRICTED</CODE
></TD
></TR
><tr><td class="member"><code class="literal">_POSIX_JOB_CONTROL</CODE
></TD
><td class="member"><code class="literal">_POSIX_LINK_MAX</CODE
></TD
><td class="member"><code class="literal">_POSIX_MAX_CANON</CODE
></TD
></TR
><tr><td class="member"><code class="literal">_POSIX_MAX_INPUT</CODE
></TD
><td class="member"><code class="literal">_POSIX_NAME_MAX</CODE
></TD
><td class="member"><code class="literal">_POSIX_NGROUPS_MAX</CODE
></TD
></TR
><tr><td class="member"><code class="literal">_POSIX_NO_TRUNC</CODE
></TD
><td class="member"><code class="literal">_POSIX_OPEN_MAX</CODE
></TD
><td class="member"><code class="literal">_POSIX_PATH_MAX</CODE
></TD
></TR
><tr><td class="member"><code class="literal">_POSIX_PIPE_BUF</CODE
></TD
><td class="member"><code class="literal">_POSIX_SAVED_IDS</CODE
></TD
><td class="member"><code class="literal">_POSIX_SSIZE_MAX</CODE
></TD
></TR
><tr><td class="member"><code class="literal">_POSIX_STREAM_MAX</CODE
></TD
><td class="member"><code class="literal">_POSIX_TZNAME_MAX</CODE
></TD
><td class="member"><code class="literal">_POSIX_VDISABLE</CODE
></TD
></TR
><tr><td class="member"><code class="literal">_POSIX_VERSION</CODE
></TD
></TR
></TABLE
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PERL2-CH-7-SECT-1.70">7.2.49.5 System configuration</A
></H4
><table class="simplelist" border="0"><td class="member"><code class="literal">_SC_ARG_MAX</CODE
></TD
></TR
><tr><td class="member"><code class="literal">_SC_CHILD_MAX</CODE
></TD
><td class="member"><code class="literal">_SC_CLK_TCK</CODE
></TD
><td class="member"><code class="literal">_SC_JOB_CONTROL</CODE
></TD
><td class="member"><code class="literal">_SC_NGROUPS_MAX</CODE
></TD
></TR
><tr><td class="member"><code class="literal">_SC_OPEN_MAX</CODE
></TD
><td class="member"><code class="literal">_SC_SAVED_IDS</CODE
></TD
><td class="member"><code class="literal">_SC_STREAM_MAX</CODE
></TD
><td class="member"><code class="literal">_SC_TZNAME_MAX</CODE
></TD
></TR
><tr><td class="member"><code class="literal">_SC_VERSION</CODE
></TD
></TR
></TABLE
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PERL2-CH-7-SECT-1.71">7.2.49.6 Error constants</A
></H4
><table class="simplelist" border="0"><td class="member"><code class="literal">E2BIG</CODE
></TD
></TR
><tr><td class="member"><code class="literal">EACCES</CODE
></TD
><td class="member"><code class="literal">EAGAIN</CODE
></TD
><td class="member"><code class="literal">EBADF</CODE
></TD
><td class="member"><code class="literal">EBUSY</CODE
></TD
><td class="member"><code class="literal">ECHILD</CODE
></TD
><td class="member"><code class="literal">EDEADLK</CODE
></TD
><td class="member"><code class="literal">EDOM</CODE
></TD
></TR
><tr><td class="member"><code class="literal">EEXIST</CODE
></TD
><td class="member"><code class="literal">EFAUL</CODE
></TD
><td class="member"><code class="literal">EFBIG</CODE
></TD
><td class="member"><code class="literal">EINTR</CODE
></TD
><td class="member"><code class="literal">EINVAL</CODE
></TD
><td class="member"><code class="literal">EIO</CODE
></TD
><td class="member"><code class="literal">EISDIR</CODE
></TD
></TR
><tr><td class="member"><code class="literal">EMFILE</CODE
></TD
><td class="member"><code class="literal">EMLINK</CODE
></TD
><td class="member"><code class="literal">ENAMETOOLONG</CODE
></TD
><td class="member"><code class="literal">ENFILE</CODE
></TD
><td class="member"><code class="literal">ENODE</CODE
></TD
><td class="member"><code class="literal">ENOENT</CODE
></TD
><td class="member"><code class="literal">ENOEXEC</CODE
></TD
></TR
><tr><td class="member"><code class="literal">ENOLCK</CODE
></TD
><td class="member"><code class="literal">ENOMEM</CODE
></TD
><td class="member"><code class="literal">ENOSPC</CODE
></TD
><td class="member"><code class="literal">ENOSYS</CODE
></TD
><td class="member"><code class="literal">ENOTDIR</CODE
></TD
><td class="member"><code class="literal">ENOTEMPTY</CODE
></TD
><td class="member"><code class="literal">ENOTTY</CODE
></TD
></TR
><tr><td class="member"><code class="literal">ENXIO</CODE
></TD
><td class="member"><code class="literal">EPERM</CODE
></TD
><td class="member"><code class="literal">EPIPE</CODE
></TD
><td class="member"><code class="literal">ERANGE</CODE
></TD
><td class="member"><code class="literal">EROFS</CODE
></TD
><td class="member"><code class="literal">ESPIPE</CODE
></TD
><td class="member"><code class="literal">ESRCH</CODE
></TD
></TR
><tr><td class="member"><code class="literal">EXDEV</CODE
></TD
></TR
></TABLE
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PERL2-CH-7-SECT-1.72">7.2.49.7 File control constants</A
></H4
><table class="simplelist" border="0"><tr><td class="member"><code class="literal">FD_CLOEXEC</CODE
></TD
><td class="member"><code class="literal">F_DUPFD</CODE
></TD
><td class="member"><code class="literal">F_GETFD</CODE
></TD
><td class="member"><code class="literal">F_GETFL</CODE
></TD
><td class="member"><code class="literal">F_GETLK</CODE
></TD
><td class="member"><code class="literal">F_OK</CODE
></TD
></TR
><tr><td class="member"><code class="literal">F_RDLCK</CODE
></TD
><td class="member"><code class="literal">F_SETFD</CODE
></TD
><td class="member"><code class="literal">F_SETFL</CODE
></TD
><td class="member"><code class="literal">F_SETLK</CODE
></TD
><td class="member"><code class="literal">F_SETLKW</CODE
></TD
><td class="member"><code class="literal">F_UNLCK</CODE
></TD
></TR
><tr><td class="member"><code class="literal">F_WRLCK</CODE
></TD
><td class="member"><code class="literal">O_ACCMODE</CODE
></TD
><td class="member"><code class="literal">O_APPEND</CODE
></TD
><td class="member"><code class="literal">O_CREAT</CODE
></TD
><td class="member"><code class="literal">O_EXCL</CODE
></TD
><td class="member"><code class="literal">O_NOCTTY</CODE
></TD
></TR
><tr><td class="member"><code class="literal">O_NONBLOCK</CODE
></TD
><td class="member"><code class="literal">O_RDONLY</CODE
></TD
><td class="member"><code class="literal">O_RDWR</CODE
></TD
><td class="member"><code class="literal">O_TRUNC</CODE
></TD
><td class="member"><code class="literal">O_WRONLY</CODE
></TD
></TR
></TABLE
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PERL2-CH-7-SECT-1.73">7.2.49.8 Floating-point constants</A
></H4
><table class="simplelist" border="0"><td class="member"><code class="literal">DBL_DIG</CODE
></TD
><td class="member"><code class="literal">DBL_EPSILON</CODE
></TD
><td class="member"><code class="literal">DBL_MANT_DIG</CODE
></TD
></TR
><tr><td class="member"><code class="literal">DBL_MAX</CODE
></TD
><td class="member"><code class="literal">DBL_MAX_10_EXP</CODE
></TD
><td class="member"><code class="literal">DBL_MAX_EXP</CODE
></TD
><td class="member"><code class="literal">DBL_MIN</CODE
></TD
></TR
><tr><td class="member"><code class="literal">DBL_MIN_10_EXP</CODE
></TD
><td class="member"><code class="literal">DBL_MIN_EXP</CODE
></TD
><td class="member"><code class="literal">FLT_DIG</CODE
></TD
><td class="member"><code class="literal">FLT_EPSILON</CODE
></TD
></TR
><tr><td class="member"><code class="literal">FLT_MANT_DIG</CODE
></TD
><td class="member"><code class="literal">FLT_MAX</CODE
></TD
><td class="member"><code class="literal">FLT_MAX_10_EXP</CODE
></TD
><td class="member"><code class="literal">FLT_MAX_EXP</CODE
></TD
></TR
><tr><td class="member"><code class="literal">FLT_MIN</CODE
></TD
><td class="member"><code class="literal">FLT_MIN_10_EXP</CODE
></TD
><td class="member"><code class="literal">FLT_MIN_EXP</CODE
></TD
><td class="member"><code class="literal">FLT_RADIX</CODE
></TD
></TR
><tr><td class="member"><code class="literal">FLT_ROUNDS</CODE
></TD
><td class="member"><code class="literal">LDBL_DIG</CODE
></TD
><td class="member"><code class="literal">LDBL_EPSILON</CODE
></TD
><td class="member"><code class="literal">LDBL_MANT_DIG</CODE
></TD
></TR
><tr><td class="member"><code class="literal">LDBL_MAX</CODE
></TD
><td class="member"><code class="literal">LDBL_MAX_10_EXP</CODE
></TD
><td class="member"><code class="literal">LDBL_MAX_EXP</CODE
></TD
><td class="member"><code class="literal">LDBL_MIN</CODE
></TD
></TR
><tr><td class="member"><code class="literal">LDBL_MIN_10_EXP</CODE
></TD
><td class="member"><code class="literal">LDBL_MIN_EXP</CODE
></TD
></TR
></TABLE
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PERL2-CH-7-SECT-1.74">7.2.49.9 Limit constants</A
></H4
><table class="simplelist" border="0"><tr><td class="member"><code class="literal">ARG_MAX</CODE
></TD
><td class="member"><code class="literal">CHAR_BIT</CODE
></TD
><td class="member"><code class="literal">CHAR_MAX</CODE
></TD
><td class="member"><code class="literal">CHAR_MIN</CODE
></TD
><td class="member"><code class="literal">CHILD_MAX</CODE
></TD
></TR
><tr><td class="member"><code class="literal">INT_MAX</CODE
></TD
><td class="member"><code class="literal">INT_MIN</CODE
></TD
><td class="member"><code class="literal">LINK_MAX</CODE
></TD
><td class="member"><code class="literal">LONG_MAX</CODE
></TD
><td class="member"><code class="literal">LONG_MIN</CODE
></TD
></TR
><tr><td class="member"><code class="literal">MAX_CANON</CODE
></TD
><td class="member"><code class="literal">MAX_INPUT</CODE
></TD
><td class="member"><code class="literal">MB_LEN_MAX</CODE
></TD
><td class="member"><code class="literal">NAME_MAX</CODE
></TD
><td class="member"><code class="literal">NGROUPS_MAX</CODE
></TD
></TR
><tr><td class="member"><code class="literal">OPEN_MAX</CODE
></TD
><td class="member"><code class="literal">PATH_MAX</CODE
></TD
><td class="member"><code class="literal">PIPE_BUF</CODE
></TD
><td class="member"><code class="literal">SCHAR_MAX</CODE
></TD
><td class="member"><code class="literal">SCHAR_MIN</CODE
></TD
></TR
><tr><td class="member"><code class="literal">SHRT_MAX</CODE
></TD
><td class="member"><code class="literal">SHRT_MIN</CODE
></TD
><td class="member"><code class="literal">SSIZE_MAX</CODE
></TD
><td class="member"><code class="literal">STREAM_MAX</CODE
></TD
><td class="member"><code class="literal">TZNAME_MAX</CODE
></TD
></TR
><tr><td class="member"><code class="literal">UCHAR_MAX</CODE
></TD
><td class="member"><code class="literal">UINT_MAX</CODE
></TD
><td class="member"><code class="literal">ULONG_MAX USHRT_MAX</CODE
></TD
></TR
></TABLE
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PERL2-CH-7-SECT-1.75">7.2.49.10 Locale constants</A
></H4
><table class="simplelist" border="0"><td class="member"><code class="literal">LC_ALL</CODE
></TD
><td class="member"><code class="literal">LC_COLLATE</CODE
></TD
><td class="member"><code class="literal">LC_CTYPE</CODE
></TD
><td class="member"><code class="literal">LC_MONETARY</CODE
></TD
></TR
><tr><td class="member"><code class="literal">LC_NUMERIC</CODE
></TD
><td class="member"><code class="literal">LC_TIME</CODE
></TD
></TR
></TABLE
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PERL2-CH-7-SECT-1.76">7.2.49.11 Math constants</A
></H4
><table class="simplelist" border="0"><tr><td class="member"><code class="literal">HUGE_VAL</CODE
></TD
></TR
></TABLE
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PERL2-CH-7-SECT-1.77">7.2.49.12 Signal constants</A
></H4
><table class="simplelist" border="0"><td class="member"><code class="literal">SA_NOCLDSTOP</CODE
></TD
><td class="member"><code class="literal">SIGABRT</CODE
></TD
><td class="member"><code class="literal">SIGALRM</CODE
></TD
></TR
><tr><td class="member"><code class="literal">SIGCHLD</CODE
></TD
><td class="member"><code class="literal">SIGCONT</CODE
></TD
><td class="member"><code class="literal">SIGFPE</CODE
></TD
><td class="member"><code class="literal">SIGHUP</CODE
></TD
><td class="member"><code class="literal">SIGILL</CODE
></TD
><td class="member"><code class="literal">SIGINT</CODE
></TD
></TR
><tr><td class="member"><code class="literal">SIGKILL</CODE
></TD
><td class="member"><code class="literal">SIGPIPE</CODE
></TD
><td class="member"><code class="literal">SIGQUIT</CODE
></TD
><td class="member"><code class="literal">SIGSEGV</CODE
></TD
><td class="member"><code class="literal">SIGSTOP</CODE
></TD
><td class="member"><code class="literal">SIGTERM</CODE
></TD
></TR
><tr><td class="member"><code class="literal">SIGTSTP</CODE
></TD
><td class="member"><code class="literal">SIGTTIN</CODE
></TD
><td class="member"><code class="literal">SIGTTOU</CODE
></TD
><td class="member"><code class="literal">SIGUSR1</CODE
></TD
><td class="member"><code class="literal">SIGUSR2</CODE
></TD
><td class="member"><code class="literal">SIG_BLOCK</CODE
></TD
></TR
><tr><td class="member"><code class="literal">SIG_DFL</CODE
></TD
><td class="member"><code class="literal">SIG_ERR</CODE
></TD
><td class="member"><code class="literal">SIG_IGN</CODE
></TD
><td class="member"><code class="literal">SIG_SETMASK</CODE
></TD
><td class="member"><code class="literal">SIG_UNBLOCK</CODE
></TD
></TR
></TABLE
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PERL2-CH-7-SECT-1.78">7.2.49.13 Stat constants</A
></H4
><table class="simplelist" border="0"><td class="member"><code class="literal">S_IRGRP</CODE
></TD
><td class="member"><code class="literal">S_IROTH</CODE
></TD
><td class="member"><code class="literal">S_IRUSR</CODE
></TD
><td class="member"><code class="literal">S_IRWXG</CODE
></TD
><td class="member"><code class="literal">S_IRWXO</CODE
></TD
></TR
><tr><td class="member"><code class="literal">S_IRWXU</CODE
></TD
><td class="member"><code class="literal">S_ISGID</CODE
></TD
><td class="member"><code class="literal">S_ISUID</CODE
></TD
><td class="member"><code class="literal">S_IWGRP</CODE
></TD
><td class="member"><code class="literal">S_IWOTH</CODE
></TD
><td class="member"><code class="literal">S_IWUSR</CODE
></TD
><td class="member"><code class="literal">S_IXGRP</CODE
></TD
></TR
><tr><td class="member"><code class="literal">S_IXOTH</CODE
></TD
><td class="member"><code class="literal">S_IXUSR</CODE
></TD
></TR
></TABLE
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PERL2-CH-7-SECT-1.79">7.2.49.14 Stat macros</A
></H4
><table class="simplelist" border="0"><tr><td class="member"><code class="literal">S_ISBLK</CODE
></TD
><td class="member"><code class="literal">S_ISCHR</CODE
></TD
><td class="member"><code class="literal">S_ISDIR </CODE
></TD
><td class="member"><code class="literal">S_ISFIFO</CODE
></TD
><td class="member"><code class="literal">S_ISREG</CODE
></TD
></TR
></TABLE
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PERL2-CH-7-SECT-1.80">7.2.49.15 Stdlib constants</A
></H4
><table class="simplelist" border="0"><td class="member"><code class="literal">EXIT_FAILURE</CODE
></TD
><td class="member"><code class="literal">EXIT_SUCCESS</CODE
></TD
></TR
><tr><td class="member"><code class="literal">MB_CUR_MAX</CODE
></TD
><td class="member"><code class="literal">RAND_MAX</CODE
></TD
></TR
></TABLE
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PERL2-CH-7-SECT-1.81">7.2.49.16 Stdio constants</A
></H4
><table class="simplelist" border="0"><td class="member"><code class="literal">BUFSIZ</CODE
></TD
><td class="member"><code class="literal">EOF</CODE
></TD
><td class="member"><code class="literal">FILENAME_MAX</CODE
></TD
></TR
><tr><td class="member"><code class="literal">L_ctermid</CODE
></TD
><td class="member"><code class="literal">L_cuserid</CODE
></TD
><td class="member"><code class="literal">L_tmpname</CODE
></TD
><td class="member"><code class="literal">TMP_MAX</CODE
></TD
></TR
></TABLE
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PERL2-CH-7-SECT-1.82">7.2.49.17 Time constants</A
></H4
><table class="simplelist" border="0"><td class="member"><code class="literal">CLK_TCK</CODE
></TD
></TR
><tr><td class="member"><code class="literal">CLOCKS_PER_SEC</CODE
></TD
></TR
></TABLE
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PERL2-CH-7-SECT-1.83">7.2.49.18 Unistd constants</A
></H4
><table class="simplelist" border="0"><td class="member"><code class="literal">R_OK</CODE
></TD
><td class="member"><code class="literal">SEEK_CUR</CODE
></TD
></TR
><tr><td class="member"><code class="literal">SEEK_END</CODE
></TD
><td class="member"><code class="literal">SEEK_SET</CODE
></TD
><td class="member"><code class="literal">STDIN_FILENO</CODE
></TD
><td class="member"><code class="literal">STDOUT_FILENO</CODE
></TD
><td class="member"><code class="literal">STRERR_FILENO</CODE
></TD
></TR
><tr><td class="member"><code class="literal">W_OK</CODE
></TD
><td class="member"><code class="literal">X_OK</CODE
></TD
></TR
></TABLE
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PERL2-CH-7-SECT-1.84">7.2.49.19 Wait constants</A
></H4
><table class="simplelist" border="0"><tr><td class="member"><code class="literal">WNOHANG</CODE
></TD
><td class="member"><code class="literal">WUNTRACED</CODE
></TD
></TR
></TABLE
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PERL2-CH-7-SECT-1.85">7.2.49.20 Wait macros</A
></H4
><table class="simplelist" border="0"><tr><td class="member"><code class="literal">WIFEXITED</CODE
></TD
><td class="member"><code class="literal">WEXITSTATUS</CODE
></TD
><td class="member"><code class="literal">WIFSIGNALED</CODE
></TD
><td class="member"><code class="literal">WTERMSIG</CODE
></TD
><td class="member"><code class="literal">WIFSTOPPED</CODE
></TD
><td class="member"><code class="literal">WSTOPSIG</CODE
></TD
></TR
></TABLE
><a class="indexterm" name="AUTOID-26187"></A
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT2" href="ch07_048.htm#PERL2-CH-7-SECT-1.58" title="7.2.48 overload&nbsp;- Overload Perl's Mathematical Operations"><img src="../gifs/txtpreva.gif" alt="Previous: 7.2.48 overload&nbsp;- Overload Perl's Mathematical Operations" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Programming Perl"><img src="../gifs/txthome.gif" alt="Programming Perl" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT2" href="ch07_050.htm#AUTOID-26188" title="7.2.50 Pod::Text&nbsp;- Convert POD Data to Formatted ASCII Text"><img src="../gifs/txtnexta.gif" alt="Next: 7.2.50 Pod::Text&nbsp;- Convert POD Data to Formatted ASCII Text" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">7.2.48 overload&nbsp;- Overload Perl's Mathematical Operations</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">7.2.50 Pod::Text&nbsp;- Convert POD Data to Formatted ASCII Text</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
