<html><head>
<title>[Chapter 4] 4.2 Creating Hard References</TITLE>
<meta name="DC.title" content="Programming Perl"><meta name="DC.creator" content="Larry Wall, Tom Christiansen &amp; Randal L. Schwartz"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:57:35Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-149-6" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch04_01.htm" title="4. References and Nested Data Structures"><link rel="prev" href="ch04_01.htm" title="4.1 What Is a Reference?"><link rel="next" href="ch04_03.htm#PERL2-CH-4-SECT-3.5" title="4.3 Using Hard References"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Programming Perl" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Programming Perl"><area shape="RECT" coords="467,0,514,18" href="../search/psrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch04_01.htm" title="4.1 What Is a Reference?"><img src="../gifs/txtpreva.gif" alt="Previous: 4.1 What Is a Reference?" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch04_01.htm" title="4. References and Nested Data Structures">Chapter 4<br>References and Nested Data Structures</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch04_03.htm#PERL2-CH-4-SECT-3.5" title="4.3 Using Hard References"><img src="../gifs/txtnexta.gif" alt="Next: 4.3 Using Hard References" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="PERL2-CH-4-SECT-2">4.2 Creating Hard References</A
></H2
><p class="para"><a class="indexterm" name="CH04.HARD"></A
>There are several ways to compose references, most of which we will
describe before explaining how to use (dereference) the resulting
references.</P
><div class="sect2"><h3 class="sect2"><a class="title" name="PERL2-CH-4-SECT-2.1">4.2.1 The Backslash Operator</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-14437"></A
>You can create a reference to any named variable or subroutine by using
the unary backslash operator.  (You may also use it on an anonymous
scalar value.)  This works much like the <code class="literal">&amp;</CODE
> (address-of) operator in C.</P
><p class="para">Here are some examples:</P
><p class="para"><pre class="programlisting">$scalarref = \$foo;
$constref  = \186_282.42;
$arrayref  = \@ARGV;
$hashref   = \%ENV;
$code_ref   = \&amp;handler;
$globref   = \*STDOUT;</PRE
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PERL2-CH-4-SECT-2.2">4.2.2 The Anonymous Array Composer</A
></H3
><p class="para">You can create a reference to an anonymous array by using brackets:<a class="indexterm" name="AUTOID-14447"></A
><a class="indexterm" name="AUTOID-14450"></A
><a class="indexterm" name="AUTOID-14453"></A
></P
><p class="para"><pre class="programlisting">$arrayref = [1, 2, ['a', 'b', 'c']];</PRE
></P
><p class="para">Here we've composed a reference to an anonymous array of three elements
whose final element is a reference to another anonymous array of three
elements.</P
><p class="para">These square brackets work like this only where the Perl parser is
expecting a term in an expression, and should not be confused with the
brackets that are functioning as operators when used to subscript an
array (though there is an obvious mnemonic association with arrays).
Square brackets inside a quoted string do not result in the
interpolation of a reference to an anonymous array.  Rather, such
brackets become literal elements in the string.  (However, if you're
interpolating something into the string, and the expression defining
the interpolation contains brackets, they have their normal meaning
within the expression, since they are, after all, in an expression.)</P
><p class="para">Note that taking a reference to an enumerated list is not the same
as using brackets&nbsp;- instead it's treated as a shorthand for creating
a list of references:</P
><p class="para"><pre class="programlisting">@list = (\$a, \$b, \$c);  
@list = \($a, $b, $c);      # same thing!</PRE
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PERL2-CH-4-SECT-2.3">4.2.3 The Anonymous Hash Composer</A
></H3
><p class="para">You can create a reference to an anonymous hash by using braces:<a class="indexterm" name="AUTOID-14466"></A
><a class="indexterm" name="AUTOID-14469"></A
><a class="indexterm" name="AUTOID-14472"></A
></P
><p class="para"><pre class="programlisting">$hashref = {
    'Adam'  =&gt; 'Eve',
    'Clyde' =&gt; 'Bonnie',
};</PRE
></P
><p class="para">The values above are literal strings; variables and expressions would work
as well.  Also, for the values (but not the keys) of the hash, you
can freely mix anonymous hash and array composers to produce as
complicated a structure as you want.</P
><p class="para">These braces work like this only where the Perl parser is
expecting a term in an expression, and should not be confused with the
braces that are functioning as operators when used 
to subscript a
hash (though there is an obvious mnemonic association with hashes).
Braces inside a quoted string do not result in the
interpolation of a reference to an anonymous hash.  Rather, such
braces become literal elements in the string.  (However, the same caveat
about interpolating expressions applies to braces as it does to brackets.)</P
><p class="para">Since braces are also used for several other things including
<code class="replaceable"><i>BLOCK</I
></CODE
>s, you may occasionally have to disambiguate
braces at the beginning of a statement by putting a
+ or a <b class="emphasis.bold">return</B
> in front so that
Perl realizes the opening brace isn't starting a
<code class="replaceable"><i>BLOCK</I
></CODE
>.  For example, if you wanted a function to
make a new hash and return a reference to it, you have these options:</P
><p class="para"><pre class="programlisting">sub hashem {        { @_ } }   # silently WRONG
sub hashem {       +{ @_ } }   # ok
sub hashem { return { @_ } }   # ok</PRE
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PERL2-CH-4-SECT-2.4">4.2.4 The Anonymous Subroutine Composer</A
></H3
><p class="para">You can create a reference to an anonymous subroutine by
using <a class="xref" href="ch03_161.htm#PERL2-CMD-SUB" title="sub"><b class="xref.cmd">sub</B
></A
> without a subroutine name:<a class="indexterm" name="AUTOID-14489"></A
><a class="indexterm" name="AUTOID-14492"></A
><a class="indexterm" name="AUTOID-14494"></A
></P
><p class="para"><pre class="programlisting">$coderef = sub { print &quot;Boink!\n&quot; };</PRE
></P
><p class="para">Note the presence of the semicolon, which is required here to
terminate the expression.  (It wouldn't be required after the
declaration of a named subroutine.)  A nameless <code class="literal">sub
{}</CODE
> is not so much a declaration as it is an
operator&nbsp;- like <code class="literal">do {}</CODE
> or
<code class="literal">eval {}</CODE
>&nbsp;- except that the code inside isn't
executed immediately.  Instead, it just generates a reference to the
code and returns that.  However, no matter how many times you execute
the line shown above, <code class="literal">$coderef</CODE
> will still refer to
the same anonymous subroutine.[<a class="footnote" href="#AUTOID-14503">4</A
>]</P
><blockquote class="footnote"><div class="footnote"><p class="para"><a class="footnote" name="AUTOID-14503">[4]</A
> But see later about closures.  Even though there's only one anonymous
subroutine, there may be several copies of the lexical variables in
use by the subroutine, depending on when the subroutine reference was
generated.  </P
></DIV
></BLOCKQUOTE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PERL2-CH-4-SECT-2.5">4.2.5 Object Constructors</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-14508"></A
><a class="indexterm" name="AUTOID-14510"></A
><a class="indexterm" name="AUTOID-14514"></A
>Subroutines can also return references.  That may sound trite, but
sometimes you are <em class="emphasis">supposed</EM
> to use a subroutine to create a
reference rather than creating the reference yourself.  In particular,
special subroutines called <em class="emphasis">constructors</EM
> return references to objects.
An object is simply a special kind of thingy that happens to know which
class it's associated with.  Constructors know how to create that
association.  They do so by taking an ordinary thingy and turning it
into an object (which remains a thingy even while it's also being an
object).  The operator that a constructor uses to do this is called<a class="indexterm" name="AUTOID-14519"></A
>
<a class="xref" href="ch03_009.htm#PERL2-CMD-BLESS" title="bless"><b class="xref.cmd">bless</B
></A
>, so we can speak of an object as a blessed thingy.
Constructors are 
customarily named <code class="literal">new()</CODE
>, but don't have to be.
They're usually called in one of two ways:</P
><p class="para"><pre class="programlisting">$objref = new Doggie Tail =&gt; 'short', Ears =&gt; 'long';
   # same as
$objref = Doggie-&gt;new(Tail =&gt; 'short', Ears =&gt; 'long');</PRE
></P
><p class="para">See <a class="xref" href="ch05_01.htm" title="Packages, Modules, and Object Classes">Chapter 5, <cite class="chapter">Packages, Modules, and Object Classes</CITE
></A
>, for a discussion of Perl objects.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PERL2-CH-4-SECT-2.6">4.2.6 Filehandle Referencers</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-14530"></A
><a class="indexterm" name="AUTOID-14533"></A
>References to filehandles can be created by taking a
reference to a typeglob.  This is currently the best way to pass
named filehandles into or out of subroutines, or to store them in larger data
structures.</P
><p class="para"><pre class="programlisting">splutter(\*STDOUT);
sub splutter {
    my $fh = shift;
    print $fh &quot;her um well a hmmm\n&quot;;
}

$rec = get_rec(\*STDIN);
sub get_rec {
    my $fh = shift;
    return scalar &lt;$fh&gt;;
}</PRE
></P
><p class="para">However, if you don't need to refer to existing named filehandles, you
should consider using one of the newer, object-oriented library modules
that provide filehandle objects via a constructor (see the previous
section).  In either case, you won't use filehandle names directly, but
rather you'll use scalars (as above) to hold a reference to
something that will (one way or another) be interpreted as a
filehandle.  As we admitted earlier, there is some implicit
dereferencing magic going on here.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PERL2-CH-4-SECT-2.7">4.2.7 Implicit Creation of References</A
></H3
><p class="para">A final method for creating references is not really a method at all.
References of an appropriate type simply spring into existence if you
dereference them in a context that assumes they exist.  This is
extremely useful, and is also What You Expect.  This topic is covered in the
next section.</P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch04_01.htm" title="4.1 What Is a Reference?"><img src="../gifs/txtpreva.gif" alt="Previous: 4.1 What Is a Reference?" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Programming Perl"><img src="../gifs/txthome.gif" alt="Programming Perl" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch04_03.htm#PERL2-CH-4-SECT-3.5" title="4.3 Using Hard References"><img src="../gifs/txtnexta.gif" alt="Next: 4.3 Using Hard References" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">4.1 What Is a Reference?</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">4.3 Using Hard References</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
