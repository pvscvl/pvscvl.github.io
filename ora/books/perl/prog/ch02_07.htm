<html><head>
<title>[Chapter 2] 2.7 Subroutines</TITLE>
<meta name="DC.title" content="Programming Perl"><meta name="DC.creator" content="Larry Wall, Tom Christiansen &amp; Randal L. Schwartz"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:44:24Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-149-6" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch02_01.htm" title="2. The Gory Details"><link rel="prev" href="ch02_06.htm#PERL2-CH-2-SECT-6.5" title="2.6 Statements and Declarations"><link rel="next" href="ch02_08.htm#PERL2-CH-2-SECT-8.1" title="2.8 Formats"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Programming Perl" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Programming Perl"><area shape="RECT" coords="467,0,514,18" href="../search/psrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch02_06.htm#PERL2-CH-2-SECT-6.5" title="2.6 Statements and Declarations"><img src="../gifs/txtpreva.gif" alt="Previous: 2.6 Statements and Declarations" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch02_01.htm" title="2. The Gory Details">Chapter 2<br>The Gory Details</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch02_08.htm#PERL2-CH-2-SECT-8.1" title="2.8 Formats"><img src="../gifs/txtnexta.gif" alt="Next: 2.8 Formats" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="PERL2-CH-2-SECT-7">2.7 Subroutines</A
></H2
><p class="para"><a class="indexterm" name="CH02.SUB"></A
><a class="indexterm" name="AUTOID-6766"></A
><a class="indexterm" name="AUTOID-6769"></A
><a class="indexterm" name="AUTOID-6772"></A
><a class="indexterm" name="AUTOID-6775"></A
>Like many languages, Perl provides for user-defined subroutines.  (We'll
also call them <em class="emphasis">functions</EM
>, but functions are the
same thing as subroutines in Perl.)
These subroutines may be defined anywhere in the main program, loaded in
from other files via the <a class="xref" href="ch03_028.htm#PERL2-CMD-DO" title="do"><b class="xref.cmd">do</B
></A
>, <a class="xref" href="ch03_123.htm#PERL2-CMD-REQUIRE" title="require"><b class="xref.cmd">require</B
></A
>, or <a class="xref" href="ch03_185.htm#PERL2-CMD-USE" title="use"><b class="xref.cmd">use</B
></A
> keywords, or even
generated on the fly using <a class="xref" href="ch03_032.htm#PERL2-CMD-EVAL" title="eval"><b class="xref.cmd">eval</B
></A
>.  You can generate anonymous
subroutines, accessible only through references.  You can even call a
subroutine indirectly using a variable containing either its name or a
reference to the routine.</P
><p class="para"><a class="indexterm" name="AUTOID-6784"></A
><a class="indexterm" name="AUTOID-6787"></A
>To declare a subroutine, use one of these forms:</P
><p class="para"><pre class="programlisting">sub <code class="replaceable"><i>NAME</I
></CODE
>;              # A &quot;forward&quot; declaration.
sub <code class="replaceable"><i>NAME</I
></CODE
> (<code class="replaceable"><i>PROTO</I
></CODE
>);      # Ditto, but with prototype.</PRE
></P
><p class="para">To declare and define a subroutine, use one of these forms:</P
><p class="para"><pre class="programlisting">sub <code class="replaceable"><i>NAME</I
></CODE
> <code class="replaceable"><i>BLOCK</I
></CODE
>         # A declaration and a definition.
sub <code class="replaceable"><i>NAME</I
></CODE
> (<code class="replaceable"><i>PROTO</I
></CODE
>) <code class="replaceable"><i>BLOCK</I
></CODE
> # Ditto, but with prototype.</PRE
></P
><p class="para"><a class="indexterm" name="AUTOID-6803"></A
>To define an anonymous subroutine or closure at run-time, use a statement
like:</P
><p class="para"><pre class="programlisting">$subref = sub <code class="replaceable"><i>BLOCK</I
></CODE
>;</PRE
></P
><p class="para"><a class="indexterm" name="AUTOID-6810"></A
>To import subroutines defined in another package, say:</P
><p class="para"><pre class="programlisting">use <code class="replaceable"><i>PACKAGE</I
></CODE
> qw(<code class="replaceable"><i>NAME1 NAME2 NAME3</I
></CODE
>...);</PRE
></P
><p class="para">To call subroutines directly:</P
><p class="para"><pre class="programlisting"><code class="replaceable"><i>NAME</I
></CODE
>(<code class="replaceable"><i>LIST</I
></CODE
>);            # &amp; is optional with parentheses.
<code class="replaceable"><i>NAME</I
></CODE
> <code class="replaceable"><i>LIST</I
></CODE
>;             # Parens optional if predeclared/imported.
&amp;<code class="replaceable"><i>NAME;</I
></CODE
>                 # Passes current @_ to subroutine.</PRE
></P
><p class="para">To call subroutines indirectly (by name or by reference):</P
><p class="para"><pre class="programlisting">&amp;$subref(<code class="replaceable"><i>LIST</I
></CODE
>);        # &amp; is not optional on indirect call.
&amp;$subref;              # Passes current @_ to subroutine.</PRE
></P
><p class="para">The Perl model for passing data into and out of a subroutine is simple:
all function parameters are passed as one single, flat list of scalars,
and multiple return values are likewise returned to the caller as one single, flat
list of scalars.  As with any <code class="replaceable"><i>LIST</I
></CODE
>, any arrays or hashes passed in these
lists will interpolate their values into the flattened list, losing
their identities&nbsp;- but there are several ways to get around this, and the
automatic list interpolation is frequently quite useful.  Both parameter
lists and return lists may contain as many or as few scalar elements as
you'd like (though you may put constraints on the parameter list using
prototypes).  Indeed, Perl is designed around this notion of <em class="emphasis">variadic</EM
>
functions (those taking any number of arguments), unlike C, where they're sort of grudgingly kludged in so that
you can call <em class="emphasis">printf</EM
>(3).</P
><p class="para"><a class="indexterm" name="AUTOID-6834"></A
><a class="indexterm" name="AUTOID-6837"></A
>Now, if you're going to design a language around the notion of passing
varying numbers of arbitrary arguments, you'd better make it easy to
process those arbitrary lists of arguments.  In the interests of dealing
with the function parameters as a list, any arguments passed to a
Perl routine come in as the array <code class="literal">@_</CODE
>.  If you call a function with
two arguments, those would be stored in <code class="literal">$_[0]</CODE
> and <code class="literal">$_[1]</CODE
>.
Since <code class="literal">@_</CODE
> is an array, you can use any array operations you like
on the parameter list.  (This is an area where Perl is <em class="emphasis">more</EM
>
orthogonal than the typical computer language.)  The array <code class="literal">@_</CODE
> is a
local array, but its values are implicit references to the actual scalar
parameters.  Thus you can modify the actual parameters if you modify the
corresponding element of <code class="literal">@_</CODE
>.  (This is rarely done, however,
since it's so easy to return interesting values in Perl.)</P
><p class="para"><a class="indexterm" name="AUTOID-6848"></A
>The return value of the subroutine (or of any other block, for that
matter) is the value of the last expression evaluated.  Or you may use
an explicit <b class="emphasis.bold">return</B
> statement to specify the return value and exit the
subroutine from any point in the subroutine.  Either way, as the
subroutine is called in a scalar or list context, so also is the final
expression of the routine evaluated in the same scalar or list context.</P
><p class="para">Perl does not have named formal parameters, but in practice all you do is
assign the contents of <code class="literal">@_</CODE
> to a <a class="xref" href="ch03_097.htm#PERL2-CMD-MY" title="my"><b class="xref.cmd">my</B
></A
> list, which serves nicely for
a list of formal parameters.  But you don't have to, which is the whole
point of the <code class="literal">@_</CODE
> array.  </P
><p class="para">For example, to calculate a maximum, the
following routine just iterates over <code class="literal">@_</CODE
> directly:</P
><p class="para"><pre class="programlisting">sub max {
    my $max = shift(@_);
    foreach $foo (@_) {
        $max = $foo if $max &lt; $foo;
    }
    return $max;
}
$bestday = max($mon,$tue,$wed,$thu,$fri);</PRE
></P
><p class="para">Here's a routine that ignores its parameters entirely, since it wants to
keep a global lookahead variable:</P
><p class="para"><pre class="programlisting"># Get a line, combining continuation lines that start with whitespace

sub get_line {
    my $thisline = $LOOKAHEAD;
    LINE: while ($LOOKAHEAD = &lt;STDIN&gt;) {
        if ($LOOKAHEAD =~ /^[ \t]/) {
            $thisline .= $LOOKAHEAD;
        }
        else {
            last LINE;
        }
    }
    $thisline;
}

$LOOKAHEAD = &lt;STDIN&gt;;       # get first line
while ($_ = get_line()) {
    ...
}</PRE
></P
><p class="para">Use list assignment to a private list to name your formal arguments:</P
><p class="para"><pre class="programlisting">sub maybeset {
    my($key, $value) = @_;
    $Foo{$key} = $value unless $Foo{$key};
}</PRE
></P
><p class="para">This also has the effect of turning call-by-reference into call-by-value
(to borrow some fancy terms from computer science), since the assignment copies
the values.</P
><p class="para">Here's an example of <em class="emphasis">not</EM
> naming your formal arguments, so that you
can modify your actual arguments:</P
><p class="para"><pre class="programlisting">upcase_in($v1, $v2);  # this changes $v1 and $v2
sub upcase_in {
    for (@_) { tr/a-z/A-Z/ } 
}</PRE
></P
><p class="para">You aren't allowed to modify constants in this way, of course.  If an
argument were actually a literal and you tried to change it, you'd take an
exception (presumably fatal, possibly career-threatening).   For
example, this won't work:</P
><p class="para"><pre class="programlisting">upcase_in(&quot;frederick&quot;);</PRE
></P
><p class="para">It would be much safer if the <code class="literal">upcase_in()</CODE
> function were written to
return a copy of its parameters instead of changing them in place:</P
><p class="para"><pre class="programlisting">($v3, $v4) = upcase($v1, $v2);
sub upcase {
    my @parms = @_;
    for (@parms) { tr/a-z/A-Z/ } 
    # wantarray checks whether we were called in list context
    return wantarray ? @parms : $parms[0];
}</PRE
></P
><p class="para">Notice how this (unprototyped) function doesn't care whether it was passed
real scalars or arrays.  Perl will see everything as one big, long, flat
<code class="literal">@_</CODE
> parameter list.  This is one of the ways where Perl's simple
argument-passing style shines.  The <code class="literal">upcase</CODE
> function will work
perfectly well without changing the <code class="literal">upcase</CODE
> definition even if we feed
it things like this:</P
><p class="para"><pre class="programlisting">@newlist   = upcase(@list1, @list2);
@newlist   = upcase( split /:/, $var );</PRE
></P
><p class="para">Do not, however, be tempted to do this:</P
><p class="para"><pre class="programlisting">(@a, @b)   = upcase(@list1, @list2);   # WRONG</PRE
></P
><p class="para">Why not? Because, like the flat incoming parameter list, the return list is also
flat.  So all you have managed to do here is store everything in
<code class="literal">@a</CODE
> and make <code class="literal">@b</CODE
> an empty list.
See the later section on &quot;Passing References&quot; for alternatives.</P
><p class="para"><a class="indexterm" name="AUTOID-6890"></A
><a class="indexterm" name="AUTOID-6893"></A
>The official name of a subroutine includes the <code class="literal">&amp;</CODE
> prefix.  A
subroutine may be called using the prefix, but the <code class="literal">&amp;</CODE
> is usually
optional, and so are the parentheses if the subroutine has been predeclared.
(Note, however, that the <code class="literal">&amp;</CODE
> is not optional when you're
just naming the subroutine, such as when it's used as an argument to
<a class="xref" href="ch03_025.htm#PERL2-CMD-DEFINED" title="defined"><b class="xref.cmd">defined</B
></A
> or <a class="xref" href="ch03_180.htm#PERL2-CMD-UNDEF" title="undef"><b class="xref.cmd">undef</B
></A
>, or when you want to generate a reference
to a named subroutine by saying <code class="literal">$subref = \&amp;name</CODE
>.  Nor is the
<code class="literal">&amp;</CODE
> optional when you want to do an indirect subroutine call with
a subroutine name or reference using the <code class="literal">&amp;$subref()</CODE
> or
<code class="literal">&amp;{$subref}()</CODE
> constructs.  See <a class="xref" href="ch04_01.htm" title="References and Nested Data Structures">Chapter 4</A
> for more on that.)</P
><p class="para"><a class="indexterm" name="AUTOID-6907"></A
>Subroutines may be called recursively.  If a subroutine is called using
the <code class="literal">&amp;</CODE
> form, the argument list is optional, and if omitted, no <code class="literal">@_</CODE
>
array is set up for the subroutine: the <code class="literal">@_</CODE
> array of the calling
routine at the time of the call is visible to called subroutine instead.
This is an efficiency mechanism that new users may wish to avoid.</P
><p class="para"><pre class="programlisting">&amp;foo(1,2,3);    # pass three arguments
foo(1,2,3);     # the same

foo();          # pass a null list
&amp;foo();         # the same

&amp;foo;           # foo() gets current args, like foo(@_) !!
foo;            # like foo() if sub foo pre-declared, else bareword &quot;foo&quot;</PRE
></P
><p class="para">Not only does the <code class="literal">&amp;</CODE
> form make the argument list optional, but it also
disables any prototype checking on the arguments you do provide.  This
is partly for historical reasons, and partly for having a convenient way
to cheat if you know what you're doing.  See the section on
&quot;Prototypes&quot; later in this chapter.</P
><p class="para">Any variables you use in the function that aren't declared private are
global variables.  For more on creating private variables,
see <a class="xref" href="ch03_097.htm#PERL2-CMD-MY" title="my"><b class="xref.cmd">my</B
></A
> in <a class="xref" href="ch03_01.htm" title="Functions">Chapter 3</A
>.</P
><div class="sect2"><h3 class="sect2"><a class="title" name="PERL2-CH-2-SECT-7.1">2.7.1 Passing Symbol Table Entries (Typeglobs)</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-6923"></A
><a class="indexterm" name="AUTOID-6925"></A
><a class="indexterm" name="AUTOID-6927"></A
>Note that the mechanism described in this section was originally the only
way to simulate pass-by-reference in older versions of Perl.  While it
still works fine in modern versions, the new reference mechanism is
generally easier to work with.  See below.</P
><p class="para"><a class="indexterm" name="AUTOID-6931"></A
><a class="indexterm" name="AUTOID-6934"></A
>Sometimes you don't want to pass the value of an array to a subroutine
but rather the name of it, so that the subroutine can modify the global
copy of it rather than working with a local copy.  In Perl you can
refer to all objects of a particular name by prefixing the name
with a star: <code class="literal">*foo</CODE
>.  This is often known as a <em class="emphasis">typeglob</EM
>, since the
star on the front can be thought of as a wildcard match for all the
funny prefix characters on variables and subroutines and such.</P
><p class="para">When evaluated, a typeglob produces a scalar value that represents all
the objects of that name, including any scalar, array, or hash variable,
and also any filehandle, format, or subroutine.  When assigned to, a typeglob
sets up its own name to be an alias for whatever typeglob value was
assigned to it.  For example:</P
><p class="para"><pre class="programlisting">sub doubleary {
    local(*someary) = @_;
    foreach $elem (@someary) {
        $elem *= 2;
    }
}
doubleary(*foo);
doubleary(*bar);</PRE
></P
><p class="para">Note that scalars are already passed by reference, so you can modify
scalar arguments without using this mechanism by referring explicitly
to <code class="literal">$_[0]</CODE
>, and so on.  You can modify all the elements of an array by passing
all the elements as scalars, but you have to use the <code class="literal">*</CODE
> mechanism (or
the equivalent reference mechanism described below)
to <b class="emphasis.bold">push</B
>, <b class="emphasis.bold">pop</B
>, or change the size of
an array.  It will certainly be faster to pass the typeglob (or reference)
than to push a bunch of scalars onto the argument stack only to pop
them all back off again.</P
><p class="para">Even if you don't want to modify an array, this mechanism is useful for
passing multiple arrays in a single <code class="replaceable"><i>LIST</I
></CODE
>, since normally the
<code class="replaceable"><i>LIST</I
></CODE
>
mechanism will flatten all the list values so that you can't extract out
the individual arrays.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PERL2-CH-2-SECT-7.2">2.7.2 Passing References</A
></H3
><p class="para"><a class="indexterm" name="CH02.PASS1"></A
><a class="indexterm" name="CH02.PASS2"></A
>If you want to pass more than one array or hash into or out of a function
and have them maintain their integrity, then you're
going to want to use an explicit pass-by-reference.  Before you do that,
you need to understand references as detailed in <a class="xref" href="ch04_01.htm" title="References and Nested Data Structures">Chapter 4</A
>.  This
section may not make much sense to you otherwise.  But hey, you can
always look at the pictures.</P
><p class="para">Here are a few simple examples.  First, let's pass in several
arrays to a function and have it <b class="emphasis.bold">pop</B
> each of them, returning a new
list of all their former last elements:</P
><p class="para"><pre class="programlisting">@tailings = popmany ( \@a, \@b, \@c, \@d );

sub popmany {
    my $aref;
    my @retlist = ();
    foreach $aref ( @_ ) {
        push @retlist, pop @$aref;
    } 
    return @retlist;
}</PRE
></P
><p class="para">Here's how you might write a function that returns a 
list of keys occurring in all the hashes passed to it:</P
><p class="para"><pre class="programlisting">@common = inter( \%foo, \%bar, \%joe ); 
sub inter {
    my ($k, $href, %seen); # locals
    foreach $href (@_) {
        while ( ($k) = each %$href ) {
            $seen{$k}++;
        } 
    } 
    return grep { $seen{$_} == @_ } keys %seen;
}</PRE
></P
><p class="para">So far, we're just using the normal list return mechanism.
What happens if you want to pass or return a hash?  Well, 
if you're only using one of them, or you don't mind them 
concatenating, then the normal calling convention is OK, although
a little expensive.</P
><p class="para">Where people get into trouble is here:</P
><p class="para"><pre class="programlisting">(@a, @b) = func(@c, @d);</PRE
></P
><p class="para">or here:</P
><p class="para"><pre class="programlisting">(%a, %b) = func(%c, %d);</PRE
></P
><p class="para">That syntax simply won't work.  It just sets <code class="literal">@a</CODE
> or <code class="literal">%a</CODE
> and clears
<code class="literal">@b</CODE
> or <code class="literal">%b</CODE
>.  Plus the function doesn't get two
separate arrays or hashes as arguments: it gets one long list in <code class="literal">@_</CODE
>,
as always.</P
><p class="para">If you can arrange for the function to receive references as its parameters and
return them as its return results, it's cleaner code, although not so nice to
look at.  Here's a function that takes two array references as arguments,
returning the two array references ordered according to how many elements they
have in them:</P
><p class="para"><pre class="programlisting">($aref, $bref) = func(\@c, \@d);
print &quot;@$aref has more than @$bref\n&quot;;
sub func {
    my ($cref, $dref) = @_;
    if (@$cref &gt; @$dref) {
        return ($cref, $dref);
    } else {
        return ($dref, $cref);
    } 
}</PRE
></P
><p class="para"><a class="indexterm" name="AUTOID-6984"></A
>It turns out that you can actually mix the typeglob approach with the
reference approach, like this:</P
><p class="para"><pre class="programlisting">(*a, *b) = func(\@c, \@d);
print &quot;@a has more than @b\n&quot;;
sub func {
    local (*c, *d) = @_;
    if (@c &gt; @d) {
        return (\@c, \@d);
    } else {
        return (\@d, \@c);
    } 
}</PRE
></P
><p class="para">Here we're using the typeglobs to do symbol table aliasing.  It's a tad
subtle, though, and also won't work if you're using <a class="xref" href="ch03_097.htm#PERL2-CMD-MY" title="my"><b class="xref.cmd">my</B
></A
> variables,
since only globals (well, and <a class="xref" href="ch03_087.htm#PERL2-CMD-LOCAL" title="local"><b class="xref.cmd">local</B
></A
>s) are in the symbol table. 
When you assign a reference to a typeglob like that, only the one element
from the typeglob (in this case, the array element) is aliased, instead of
all the similarly named elements, since the reference knows what it's
referring to.</P
><p class="para"><a class="indexterm" name="AUTOID-6993"></A
>If you're passing around filehandles, you can usually just use the bare
typeglob, like <code class="literal">*STDOUT</CODE
>, but references to typeglobs work even better
because they still behave properly under <code class="literal">use strict 'refs'</CODE
>.  For
example:</P
><p class="para"><pre class="programlisting">splutter(\*STDOUT);
sub splutter {
    my $fh = shift;
    print $fh &quot;her um well a hmmm\n&quot;;
}

$rec = get_rec(\*STDIN);
sub get_rec {
    my $fh = shift;
    return scalar &lt;$fh&gt;;
}</PRE
></P
><p class="para">If you're planning on generating new filehandles, see the <b class="emphasis.bold">open</B
> entry in <a class="xref" href="ch03_01.htm" title="Functions">Chapter 3</A
> for an example using the FileHandle
module.<a class="indexterm" name="AUTOID-7003"></A
><a class="indexterm" name="AUTOID-7004"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PERL2-CH-2-SECT-7.3">2.7.3 Prototypes</A
></H3
><p class="para"><a class="indexterm" name="CH02.PROTO"></A
><a class="indexterm" name="AUTOID-7010"></A
>As of the 5.003 release of Perl, you can declare your subroutines to
take arguments just like many of the built-ins, that is, with certain
constraints on the number and types of arguments.  For instance,
if you declare:</P
><p class="para"><pre class="programlisting">sub mypush (\@@)</PRE
></P
><p class="para">then <code class="literal">mypush</CODE
> takes arguments exactly like <a class="xref" href="ch03_112.htm#PERL2-CMD-PUSH" title="push"><b class="xref.cmd">push</B
></A
> does.  The
declaration of the function to be called must be visible at compile time.
The prototype only affects the interpretation of new-style calls to the
function, where new-style is defined as &quot;not using the <code class="literal">&amp;</CODE
>
character&quot;.
In other words, if you call it like a built-in function, then it behaves
like a built-in function.  If you call it like an old-fashioned subroutine,
then it behaves like an old-fashioned subroutine.  It naturally falls out
from this rule that prototypes have no influence on subroutine references
like <code class="literal">\&amp;foo</CODE
> or on indirect subroutine calls like <code class="literal">&amp;{$subref}</CODE
>.</P
><p class="para">Method calls are not influenced by prototypes either. This is because the
function to be called is indeterminate at compile-time, depending as
it does on inheritance, which is dynamically determined in Perl.</P
><p class="para">Since the intent is primarily to let you define subroutines that work
like built-in commands, here are the prototypes for some other functions
that parse almost exactly like the corresponding built-ins.  (Note that
the &quot;<code class="literal">my</CODE
>&quot; on the front of each is just part of the name we picked, and
has nothing to do with Perl <a class="xref" href="ch03_097.htm#PERL2-CMD-MY" title="my"><b class="xref.cmd">my</B
></A
> operator.  You can name your prototyped
functions anything you like&nbsp;- we just picked our names to parallel the
built-in functions.)</P
><table class="informaltable" border="1" cellpadding="3"><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1">Declared as</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Called as</TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">sub mylink ($$)</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">mylink $old, $new</CODE
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">sub myvec ($$$)</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">myvec $var, $offset, 1</CODE
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">sub myindex ($$;$)</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">myindex &amp;getstring, &quot;substr&quot;</CODE
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">sub mysyswrite ($$$;$)</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">mysyswrite $buf, 0, length($buf) - $off, $off</CODE
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">sub myreverse (@)</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">myreverse $a,$b,$c</CODE
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">sub myjoin ($@)</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">myjoin &quot;:&quot;,$a,$b,$c</CODE
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">sub mypop (\@)</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">mypop @array</CODE
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">sub mysplice (\@$$@)</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">mysplice @array,@array,0,@pushme</CODE
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">sub mykeys (\%)</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">mykeys %{$hashref}</CODE
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">sub myopen (*;$)</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">myopen HANDLE, $name</CODE
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">sub mypipe (**)</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">mypipe READHANDLE, WRITEHANDLE</CODE
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">sub mygrep (&amp;@)</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">mygrep { /foo/ } $a,$b,$c</CODE
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">sub myrand ($)</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">myrand 42</CODE
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">sub mytime ()</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">mytime</CODE
></TD
></TR
></TBODY
></TABLE
><p class="para">Any backslashed prototype character (shown between parentheses in the
left column above) represents an actual argument (exemplified in the
right column) that absolutely must start with that character.  Just as
the first argument to <a class="xref" href="ch03_079.htm#PERL2-CMD-KEYS" title="keys"><b class="xref.cmd">keys</B
></A
> must start
with <code class="literal">%</CODE
>, so too must the first argument to
<code class="literal">mykeys</CODE
>.</P
><p class="para"><a class="indexterm" name="AUTOID-7107"></A
><a class="indexterm" name="AUTOID-7110"></A
><a class="indexterm" name="AUTOID-7113"></A
><a class="indexterm" name="AUTOID-7116"></A
><a class="indexterm" name="AUTOID-7118"></A
><a class="indexterm" name="AUTOID-7121"></A
><a class="indexterm" name="AUTOID-7124"></A
>Unbackslashed prototype characters have special meanings.  Any
unbackslashed @ or % eats all the rest of the actual arguments, and
forces list context.  (It's equivalent to <code class="replaceable"><i>LIST</I
></CODE
> in
a syntax diagram.) An argument represented by $ forces scalar context
on it.  An &amp; requires an anonymous subroutine (which, if passed as
the first argument, does not require the &quot;<code class="literal">sub</CODE
>&quot; keyword or a subsequent
comma).  And a <code class="literal">*</CODE
> does whatever it has to do to turn the argument into
a reference to a symbol table entry.  It's typically used for
filehandles.</P
><p class="para">A semicolon separates mandatory arguments from optional arguments.
(It would be redundant before <code class="literal">@</CODE
> or <code class="literal">%</CODE
>, since lists can be null.)</P
><p class="para">Note how the last three examples above are treated specially by the
parser.  <code class="literal">mygrep</CODE
> is parsed as a true list operator,
<code class="literal">myrand</CODE
> is parsed as a true unary operator with
unary precedence the same as <a class="xref" href="ch03_115.htm#PERL2-CMD-RAND" title="rand"><b class="xref.cmd">rand</B
></A
>, and
<code class="literal">mytime</CODE
> is truly argumentless, just like <a class="xref" href="ch03_173.htm#PERL2-CMD-TIME" title="time"><b class="xref.cmd">time</B
></A
>.  </P
><p class="para">That is, if you say:</P
><p class="para"><pre class="programlisting">mytime +2;</PRE
></P
><p class="para">you'll get <code class="literal">mytime() + 2</CODE
>, not
<code class="literal">mytime(2)</CODE
>, which is how it would be parsed without
the prototype, or with a unary prototype.</P
><p class="para">The interesting thing about <code class="literal">&amp;</CODE
> is that you can generate new
syntax with it:</P
><p class="para"><pre class="programlisting">sub try (&amp;$) {
    my($try,$catch) = @_;
    eval { &amp;$try };
    if ($@) {
        local $_ = $@;
        &amp;$catch;
    }
}
sub catch (&amp;) { shift }

try {
    die &quot;phooey&quot;;
} catch {
    /phooey/ and print &quot;unphooey\n&quot;;
};</PRE
></P
><p class="para">This prints &quot;<code class="literal">unphooey</CODE
>&quot;.  What happens is that <code class="literal">try</CODE
> is called with two
arguments, the anonymous function <code class="literal">{die &quot;phooey&quot;;}</CODE
> and the return value
of the <code class="literal">catch</CODE
> function, which in this case is nothing but its own
argument, the entire block of yet another anonymous function.  Within
<code class="literal">try</CODE
>, the first function argument is called while protected within an
<a class="xref" href="ch03_032.htm#PERL2-CMD-EVAL" title="eval"><b class="xref.cmd">eval</B
></A
> block to trap anything that blows up.  If something does blow up, the
second function is called with a local version of the global <code class="literal">$_</CODE
> variable
set to the raised exception.[<a class="footnote" href="#AUTOID-7157">47</A
>]
If this all sounds like pure gobbledygook, you'll have to read about
<a class="xref" href="ch03_027.htm#PERL2-CMD-DIE" title="die"><b class="xref.cmd">die</B
></A
> and <a class="xref" href="ch03_032.htm#PERL2-CMD-EVAL" title="eval"><b class="xref.cmd">eval</B
></A
> in <a class="xref" href="ch03_01.htm" title="Functions">Chapter 3</A
>, and then go
check out anonymous functions in <a class="xref" href="ch04_01.htm" title="References and Nested Data Structures">Chapter 4</A
>.</P
><blockquote class="footnote"><div class="footnote"><p class="para"><a class="footnote" name="AUTOID-7157">[47]</A
> Yes, there are still unresolved issues having to do with the visibility of
<code class="literal">@_</CODE
>.  We're ignoring that question for the moment.  (But note that if we
make <code class="literal">@_</CODE
> lexically scoped someday, those anonymous subroutines can act like
closures. (Gee, is this sounding a little Lispish?  (Nevermind.)))</P
></DIV
></BLOCKQUOTE
><p class="para">And here's a reimplementation of the <a class="xref" href="ch03_072.htm#PERL2-CMD-GREP" title="grep"><b class="xref.cmd">grep</B
></A
> operator (the built-in one is
more efficient, of course):</P
><p class="para"><pre class="programlisting">sub mygrep (&amp;@) {
    my $coderef = shift;
    my @result;
    foreach $_ (@_) {
        push(@result, $_) if &amp;$coderef;
    }
    @result;
}</PRE
></P
><p class="para">Some folks would prefer to see full alphanumeric prototypes.
Alphanumerics have been intentionally left out of prototypes for the
express purpose of someday adding named, formal parameters.
(Maybe.)  The current mechanism's main goal is to let module writers
provide better diagnostics for module users.  Larry feels that the notation
is quite understandable to Perl programmers, and that it will not intrude
greatly upon the meat of the module, nor make it harder to read.  The
line noise is visually encapsulated into a small pill that's easy to
swallow.</P
><p class="para">One note of caution.  It's probably best to put prototypes on new functions,
not retrofit prototypes onto older ones.  That's because you must be
especially careful about silently imposing a different context.  Suppose,
for example, you decide that a function should take just one parameter,
like this:</P
><p class="para"><pre class="programlisting">sub func ($) {
    my $n = shift;
    print &quot;you gave me $n\n&quot;;
}</PRE
></P
><p class="para">and someone has been calling it with an array or expression
returning a single-element list:</P
><p class="para"><pre class="programlisting">func(@foo);
func( split /:/ );</PRE
></P
><p class="para">Then you've just supplied an implicit <a class="xref" href="ch03_131.htm#PERL2-CMD-SCALAR" title="scalar"><b class="xref.cmd">scalar</B
></A
> in front of their
argument, which can be more than a bit surprising.  The old <code class="literal">@foo</CODE
>
that used to hold one thing doesn't get passed in.  Instead, 1 (the
number of elements in <code class="literal">@foo</CODE
>) is now passed to <code class="literal">func</CODE
>.
And the <a class="xref" href="ch03_155.htm#PERL2-CMD-SPLIT" title="split"><b class="xref.cmd">split</B
></A
> gets called in a scalar context and
starts scribbling on your <b class="emphasis.bold">@_</B
> parameter list.</P
><p class="para">But if you're careful, you can do a lot of neat things with prototypes.
This is all very powerful, of course, and should only be used in moderation
to make the world a better place.<a class="indexterm" name="AUTOID-7184"></A
><a class="indexterm" name="AUTOID-7185"></A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch02_06.htm#PERL2-CH-2-SECT-6.5" title="2.6 Statements and Declarations"><img src="../gifs/txtpreva.gif" alt="Previous: 2.6 Statements and Declarations" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Programming Perl"><img src="../gifs/txthome.gif" alt="Programming Perl" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch02_08.htm#PERL2-CH-2-SECT-8.1" title="2.8 Formats"><img src="../gifs/txtnexta.gif" alt="Next: 2.8 Formats" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">2.6 Statements and Declarations</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">2.8 Formats</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
