<html><head>
<title>[Chapter 3] 3.2.32 eval</TITLE>
<meta name="DC.title" content="Programming Perl"><meta name="DC.creator" content="Larry Wall, Tom Christiansen &amp; Randal L. Schwartz"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:49:05Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-149-6" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch03_02.htm" title="3.2 Perl Functions in Alphabetical Order"><link rel="prev" href="ch03_031.htm#PERL2-CMD-EOF" title="3.2.31 eof"><link rel="next" href="ch03_033.htm#PERL2-CMD-EXEC" title="3.2.33 exec"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Programming Perl" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Programming Perl"><area shape="RECT" coords="467,0,514,18" href="../search/psrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT2" href="ch03_031.htm#PERL2-CMD-EOF" title="3.2.31 eof"><img src="../gifs/txtpreva.gif" alt="Previous: 3.2.31 eof" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch03_01.htm" title="3. Functions">Chapter 3<br>Functions</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT2" href="ch03_033.htm#PERL2-CMD-EXEC" title="3.2.33 exec"><img src="../gifs/txtnexta.gif" alt="Next: 3.2.33 exec" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT2"><h3 class="sect2"><a class="title" name="PERL2-CMD-EVAL">3.2.32 eval</A
></H3
><pre class="programlisting">eval <code class="replaceable"><i>EXPR</I
></CODE
>
eval <code class="replaceable"><i>BLOCK</I
></CODE
></PRE
><p class="para"><a class="indexterm" name="CH03.EVAL"></A
>The value expressed by <code class="replaceable"><i>EXPR</I
></CODE
> is parsed and executed as though it were a
little Perl program.  It is executed in the context of the current
Perl program, so that any variable settings remain afterward, as do
any subroutine or format definitions.  The code of the <a class="xref" href="ch03_032.htm#PERL2-CMD-EVAL" title="eval"><b class="xref.cmd">eval</B
></A
> is treated as a
block, so any locally scoped variables declared within the <a class="xref" href="ch03_032.htm#PERL2-CMD-EVAL" title="eval"><b class="xref.cmd">eval</B
></A
> last
only until the <a class="xref" href="ch03_032.htm#PERL2-CMD-EVAL" title="eval"><b class="xref.cmd">eval</B
></A
> is done.
(See <a class="xref" href="ch03_087.htm#PERL2-CMD-LOCAL" title="local"><b class="xref.cmd">local</B
></A
> and <a class="xref" href="ch03_097.htm#PERL2-CMD-MY" title="my"><b class="xref.cmd">my</B
></A
>.)
As with any code in a block, a final semicolon is not required.
If <code class="replaceable"><i>EXPR</I
></CODE
> is omitted, the operator evaluates <b class="emphasis.bold">$_</B
>.</P
><p class="para">The value returned from an <a class="xref" href="ch03_032.htm#PERL2-CMD-EVAL" title="eval"><b class="xref.cmd">eval</B
></A
> is the value of the last expression evaluated, just
as with subroutines.  Similarly, you may use the <a class="xref" href="ch03_125.htm#PERL2-CMD-RETURN" title="return"><b class="xref.cmd">return</B
></A
> operator to
return a value from the middle of the <a class="xref" href="ch03_032.htm#PERL2-CMD-EVAL" title="eval"><b class="xref.cmd">eval</B
></A
>.
If there is a syntax error or run-time error
(including any produced by the <a class="xref" href="ch03_027.htm#PERL2-CMD-DIE" title="die"><b class="xref.cmd">die</B
></A
> operator), <a class="xref" href="ch03_032.htm#PERL2-CMD-EVAL" title="eval"><b class="xref.cmd">eval</B
></A
> returns
the undefined value and puts the error message in <b class="emphasis.bold">$@</B
>.
If there is no error, <b class="emphasis.bold">$@</B
> is guaranteed to be set to the null
string, so you can test it reliably afterward for errors.</P
><p class="para">Here's a statement that
assigns an element to a hash chosen at run-time:</P
><pre class="programlisting">eval &quot;\$$arrayname{\$key} = 1&quot;;</PRE
><p class="para">(You can accomplish that more simply with soft references&nbsp;- see
&quot;Symbolic References&quot; in <a class="xref" href="ch04_01.htm" title="References and Nested Data Structures">Chapter 4, <cite class="chapter">References and Nested Data Structures</CITE
></A
>.)
And here is a simple Perl shell:</P
><pre class="programlisting">while (&lt;&gt;) { eval; print $@; }</PRE
><p class="para">Since <a class="xref" href="ch03_032.htm#PERL2-CMD-EVAL" title="eval"><b class="xref.cmd">eval</B
></A
> traps otherwise-fatal errors, it is useful
for determining whether a particular feature (such as <a class="xref" href="ch03_151.htm#PERL2-CMD-SOCKET" title="socket"><b class="xref.cmd">socket</B
></A
> or
<a class="xref" href="ch03_163.htm#PERL2-CMD-SYMLINK" title="symlink"><b class="xref.cmd">symlink</B
></A
>) is implemented.
In fact, <a class="xref" href="ch03_032.htm#PERL2-CMD-EVAL" title="eval"><b class="xref.cmd">eval</B
></A
> is the way to do all
exception handling in Perl. If the code to be executed doesn't vary,
you should use the
<code class="literal">eval</CODE
> <code class="replaceable"><i>BLOCK</I
></CODE
> form to trap
run-time errors; 
the code in the block is
compiled only once rather than on each execution, yielding greater
efficiency.  The error, if any, is still
returned in <b class="emphasis.bold">$@</B
>.  Examples:</P
><pre class="programlisting"># make divide-by-zero non-fatal
eval { $answer = $a / $b; }; warn $@ if $@;

# same thing, but less efficient
eval '$answer = $a / $b'; warn $@ if $@;

# a compile-time error (not trapped)
eval { $answer = };

# a run-time error
eval '$answer =';  # sets $@</PRE
><p class="para">Here, the code in the <code class="replaceable"><i>BLOCK</I
></CODE
> has to be valid Perl code
to make it past the compilation phase.  The code in the string doesn't get
examined until run-time, and so doesn't cause an error until run-time.</P
><p class="para">With an <a class="xref" href="ch03_032.htm#PERL2-CMD-EVAL" title="eval"><b class="xref.cmd">eval</B
></A
> you should be careful
to remember what's being looked at when:</P
><pre class="programlisting">eval $x;          # CASE 1
eval &quot;$x&quot;;        # CASE 2

eval '$x';        # CASE 3
eval { $x };      # CASE 4

eval &quot;\$$x++&quot;;    # CASE 5
$$x++;            # CASE 6</PRE
><p class="para">Cases 1 and 2 above behave identically: they run the code contained in
the variable <code class="literal">$x</CODE
>.  (Case 2 has misleading double quotes,
making the reader wonder what else might be happening, when nothing is.
The contents of <code class="literal">$x</CODE
> would in any event have to be converted to
a string for parsing.)
Cases 3 and 4 likewise behave in the same way: they run the code
<code class="literal">$x</CODE
>, which does nothing at all except return the value of <code class="literal">$x</CODE
>.
(Case 4 is preferred since the expression doesn't need to recompiled each time.)
Case 5 is a place where normally you <em class="emphasis">would</EM
> like to use double quotes
to let you interpolate the variable name, except that in this particular
situation you can just use symbolic references instead, as in case 6.</P
><p class="para">A frequently asked question is how to set up an exit routine.
One common way is to use an <code class="literal">END</CODE
> block.
But you can also do it with an <a class="xref" href="ch03_032.htm#PERL2-CMD-EVAL" title="eval"><b class="xref.cmd">eval</B
></A
>, like this:</P
><pre class="programlisting">#!/usr/bin/perl

eval &lt;&lt;'EndOfEval';  $start = __LINE__;
   .
   .           # your ad here
   .
EndOfEval

# Cleanup

unlink &quot;/tmp/myfile$$&quot;;
$@ &amp;&amp; ($@ =~ s/\(eval \d+\) at line (\d+)/$0 .
    &quot; line &quot; . ($1+$start)/e, die $@);
exit 0;</PRE
><p class="para">Note that the code supplied for an <b class="emphasis.bold">eval</B
> might not
be recompiled if the text hasn't changed.  On the rare occasions when you want
to force a recompilation (because you want to reset a <code class="literal">..</CODE
> operator, for instance), you could say something like
this:<a class="indexterm" name="AUTOID-9828"></A
></P
><pre class="programlisting">eval $prog . '#' . ++$seq;</PRE
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT2" href="ch03_031.htm#PERL2-CMD-EOF" title="3.2.31 eof"><img src="../gifs/txtpreva.gif" alt="Previous: 3.2.31 eof" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Programming Perl"><img src="../gifs/txthome.gif" alt="Programming Perl" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT2" href="ch03_033.htm#PERL2-CMD-EXEC" title="3.2.33 exec"><img src="../gifs/txtnexta.gif" alt="Next: 3.2.33 exec" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">3.2.31 eof</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">3.2.33 exec</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
