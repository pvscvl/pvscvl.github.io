<html><head>
<title>[Chapter 3] 3.2.154 splice</TITLE>
<meta name="DC.title" content="Programming Perl"><meta name="DC.creator" content="Larry Wall, Tom Christiansen &amp; Randal L. Schwartz"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:54:26Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-149-6" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch03_02.htm" title="3.2 Perl Functions in Alphabetical Order"><link rel="prev" href="ch03_153.htm#PERL2-CMD-SORT" title="3.2.153 sort"><link rel="next" href="ch03_155.htm#PERL2-CMD-SPLIT" title="3.2.155 split"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Programming Perl" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Programming Perl"><area shape="RECT" coords="467,0,514,18" href="../search/psrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT2" href="ch03_153.htm#PERL2-CMD-SORT" title="3.2.153 sort"><img src="../gifs/txtpreva.gif" alt="Previous: 3.2.153 sort" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch03_01.htm" title="3. Functions">Chapter 3<br>Functions</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT2" href="ch03_155.htm#PERL2-CMD-SPLIT" title="3.2.155 split"><img src="../gifs/txtnexta.gif" alt="Next: 3.2.155 split" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT2"><h3 class="sect2"><a class="title" name="PERL2-CMD-SPLICE">3.2.154 splice</A
></H3
><pre class="programlisting">splice <code class="replaceable"><i>ARRAY</I
></CODE
>, <code class="replaceable"><i>OFFSET</I
></CODE
>, <code class="replaceable"><i>LENGTH</I
></CODE
>, <code class="replaceable"><i>LIST</I
></CODE
>
splice <code class="replaceable"><i>ARRAY</I
></CODE
>, <code class="replaceable"><i>OFFSET</I
></CODE
>, <code class="replaceable"><i>LENGTH</I
></CODE
>
splice <code class="replaceable"><i>ARRAY</I
></CODE
>, <code class="replaceable"><i>OFFSET</I
></CODE
></PRE
><p class="para"><a class="indexterm" name="AUTOID-13042"></A
><a class="indexterm" name="AUTOID-13044"></A
><a class="indexterm" name="AUTOID-13047"></A
><a class="indexterm" name="AUTOID-13050"></A
><a class="indexterm" name="AUTOID-13052"></A
>This function removes the elements designated by <code class="replaceable"><i>OFFSET</I
></CODE
> and
<code class="replaceable"><i>LENGTH</I
></CODE
>
from an array, and replaces them with the elements of <code class="replaceable"><i>LIST</I
></CODE
>, if any.
The function returns the elements removed from the array.  The array
grows or shrinks as necessary.
If <code class="replaceable"><i>LENGTH</I
></CODE
> is omitted, the function removes everything from
<code class="replaceable"><i>OFFSET</I
></CODE
>
onward.  The following equivalences hold (assuming <b class="emphasis.bold">$[</B
> is 0):</P
><table class="informaltable" border="1" cellpadding="3"><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1">Direct Method</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Splice Equivalent</TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">push(@a, $x, $y)</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">splice(@a, $#a+1, 0, $x, $y)</CODE
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">pop(@a)</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">splice(@a, -1)</CODE
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">shift(@a)</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">splice(@a, 0, 1)</CODE
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">unshift(@a, $x, $y)</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">splice(@a, 0, 0, $x, $y)</CODE
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">$a[$x] = $y</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">splice(@a, $x, 1, $y);</CODE
></TD
></TR
></TBODY
></TABLE
><p class="para">The <a class="xref" href="ch03_154.htm#PERL2-CMD-SPLICE" title="splice"><b class="xref.cmd">splice</B
></A
> function is also handy for
carving up the argument list passed to a subroutine.  For example, assuming list
lengths are passed before lists:</P
><pre class="programlisting">sub list_eq {       # compare two list values
    my @a = splice(@_, 0, shift);
    my @b = splice(@_, 0, shift);
    return 0 unless @a == @b;       # same len?
    while (@a) {
        return 0 if pop(@a) ne pop(@b);
    }
    return 1;
}
if (list_eq($len, @foo[1..$len], scalar(@bar), @bar)) { ... }</PRE
><p class="para">It would probably be cleaner just to use references for this, however.</P
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT2" href="ch03_153.htm#PERL2-CMD-SORT" title="3.2.153 sort"><img src="../gifs/txtpreva.gif" alt="Previous: 3.2.153 sort" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Programming Perl"><img src="../gifs/txthome.gif" alt="Programming Perl" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT2" href="ch03_155.htm#PERL2-CMD-SPLIT" title="3.2.155 split"><img src="../gifs/txtnexta.gif" alt="Next: 3.2.155 split" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">3.2.153 sort</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">3.2.155 split</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
