<html><head>
<title>[Chapter 3] 3.2.105 pack</TITLE>
<meta name="DC.title" content="Programming Perl"><meta name="DC.creator" content="Larry Wall, Tom Christiansen &amp; Randal L. Schwartz"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:51:58Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-149-6" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch03_02.htm" title="3.2 Perl Functions in Alphabetical Order"><link rel="prev" href="ch03_104.htm#PERL2-CMD-ORD" title="3.2.104 ord"><link rel="next" href="ch03_106.htm#PERL2-CMD-PACKAGE" title="3.2.106 package"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Programming Perl" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Programming Perl"><area shape="RECT" coords="467,0,514,18" href="../search/psrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT2" href="ch03_104.htm#PERL2-CMD-ORD" title="3.2.104 ord"><img src="../gifs/txtpreva.gif" alt="Previous: 3.2.104 ord" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch03_01.htm" title="3. Functions">Chapter 3<br>Functions</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT2" href="ch03_106.htm#PERL2-CMD-PACKAGE" title="3.2.106 package"><img src="../gifs/txtnexta.gif" alt="Next: 3.2.106 package" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT2"><h3 class="sect2"><a class="title" name="PERL2-CMD-PACK">3.2.105 pack</A
></H3
><pre class="programlisting">pack <code class="replaceable"><i>TEMPLATE</I
></CODE
>, <code class="replaceable"><i>LIST</I
></CODE
></PRE
><p class="para"><a class="indexterm" name="AUTOID-11625"></A
><a class="indexterm" name="CH03.PACK1"></A
><a class="indexterm" name="CH03.PACK2"></A
>This function takes a list of values and packs it into a
binary structure, returning the string containing the structure.
The <code class="replaceable"><i>TEMPLATE</I
></CODE
> is a sequence of characters that gives the order and type
of values, as follows:</P
><table class="informaltable" border="1" cellpadding="3"><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1">Character</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Meaning</TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">a</CODE
></TD
><td class="entry" rowspan="1" colspan="1">An ASCII string, will be null padded</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">A</CODE
></TD
><td class="entry" rowspan="1" colspan="1">An ASCII string, will be space padded</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">b</CODE
></TD
><td class="entry" rowspan="1" colspan="1">A bit string, low-to-high order (like <b class="emphasis.bold">vec</B
>())</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">B</CODE
></TD
><td class="entry" rowspan="1" colspan="1">A bit string, high-to-low order</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">c</CODE
></TD
><td class="entry" rowspan="1" colspan="1">A signed char value</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">C</CODE
></TD
><td class="entry" rowspan="1" colspan="1">An unsigned char value</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">d</CODE
></TD
><td class="entry" rowspan="1" colspan="1">A double-precision float in the native format</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">f</CODE
></TD
><td class="entry" rowspan="1" colspan="1">A single-precision float in the native format</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">h</CODE
></TD
><td class="entry" rowspan="1" colspan="1">A hexadecimal string, low nybble first</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">H</CODE
></TD
><td class="entry" rowspan="1" colspan="1">A hexadecimal string, high nybble first</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">i</CODE
></TD
><td class="entry" rowspan="1" colspan="1">A signed integer value</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">I</CODE
></TD
><td class="entry" rowspan="1" colspan="1">An unsigned integer value</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">l</CODE
></TD
><td class="entry" rowspan="1" colspan="1">A signed long value</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">L</CODE
></TD
><td class="entry" rowspan="1" colspan="1">An unsigned long value   <em class="emphasis">(continued)</EM
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">n</CODE
></TD
><td class="entry" rowspan="1" colspan="1">A short in &quot;network&quot; (big-endian) order</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">N</CODE
></TD
><td class="entry" rowspan="1" colspan="1">A long in &quot;network&quot; (big-endian) order</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">p</CODE
></TD
><td class="entry" rowspan="1" colspan="1">A pointer to a string</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">P</CODE
></TD
><td class="entry" rowspan="1" colspan="1">A pointer to a structure (fixed-length string)</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">s</CODE
></TD
><td class="entry" rowspan="1" colspan="1">A signed short value</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">S</CODE
></TD
><td class="entry" rowspan="1" colspan="1">An unsigned short value</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">v</CODE
></TD
><td class="entry" rowspan="1" colspan="1">A short in &quot;VAX&quot; (little-endian) order</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">V</CODE
></TD
><td class="entry" rowspan="1" colspan="1">A long in &quot;VAX&quot; (little-endian) order</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">u</CODE
></TD
><td class="entry" rowspan="1" colspan="1">A uuencoded string</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">x</CODE
></TD
><td class="entry" rowspan="1" colspan="1">A null byte</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">X</CODE
></TD
><td class="entry" rowspan="1" colspan="1">Back up a byte</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">@</CODE
></TD
><td class="entry" rowspan="1" colspan="1">Null-fill to absolute position</TD
></TR
></TBODY
></TABLE
><p class="para">Each character may optionally be followed by a number which gives a repeat
count.  Together the character and the repeat count make a field specifier.
Field specifiers may be separated by whitespace, which will be ignored.  With
all types except <code class="literal">&quot;a&quot;</CODE
> and <code class="literal">&quot;A&quot;</CODE
>, the <a class="xref" href="ch03_105.htm#PERL2-CMD-PACK" title="pack"><b class="xref.cmd">pack</B
></A
> function will gobble up that many values from
the <code class="replaceable"><i>LIST</I
></CODE
>.  Saying <code class="literal">&quot;*&quot;</CODE
> for the
repeat count means to use however many items are left.  The
<code class="literal">&quot;a&quot;</CODE
> and <code class="literal">&quot;A&quot;</CODE
> types gobble just one value,
but pack it as a string of length <em class="emphasis">count</EM
>, padding with nulls
or spaces as necessary.  (When unpacking, <code class="literal">&quot;A&quot;</CODE
> strips trailing
spaces and nulls, but <code class="literal">&quot;a&quot;</CODE
> does not.)  Real numbers (floats
and doubles) are in the native machine format only; due to the multiplicity of
floating formats around, and the lack of a standard network representation, no
facility for interchange has been made.  This means that packed floating-point
data written on one machine may not be readable on another&nbsp;- even if both
use IEEE floating-point arithmetic (as the endian-ness of the memory
representation is not part of the IEEE spec).  Also, Perl uses doubles
internally for all numeric calculation, and converting from double to float to
double will lose precision; that is, <code class="literal">unpack(&quot;f&quot;,
pack(&quot;f&quot;,$num))</CODE
> will not in general equal <code class="literal">$num</CODE
>.</P
><p class="para">This first pair of examples packs numeric values into bytes:</P
><pre class="programlisting">$out = pack &quot;cccc&quot;, 65, 66, 67, 68;      # $out eq &quot;ABCD&quot;
$out = pack &quot;c4&quot;, 65, 66, 67, 68;        # same thing</PRE
><p class="para">This does a similar thing, with a couple of nulls thrown in:</P
><pre class="programlisting">$out = pack &quot;ccxxcc&quot;, 65, 66, 67, 68;    # $out eq &quot;AB\0\0CD&quot;</PRE
><p class="para">Packing your shorts doesn't imply that you're portable:</P
><pre class="programlisting">$out = pack &quot;s2&quot;, 1, 2;    # &quot;\1\0\2\0&quot; on little-endian
                           # &quot;\0\1\0\2&quot; on big-endian</PRE
><p class="para">On binary and hex packs, the count refers to the number of bits or nybbles,
not the number of bytes produced:</P
><pre class="programlisting">$out = pack &quot;B32&quot;, &quot;01010000011001010111001001101100&quot;;
$out = pack &quot;H8&quot;, &quot;5065726c&quot;;    # both produce &quot;Perl&quot;</PRE
><p class="para">The length on an <code class="literal">&quot;a&quot;</CODE
> field applies only to one string:</P
><pre class="programlisting">$out = pack &quot;a4&quot;, &quot;abcd&quot;, &quot;x&quot;, &quot;y&quot;, &quot;z&quot;;      # &quot;abcd&quot;</PRE
><p class="para">To get around that limitation, use multiple specifiers:</P
><pre class="programlisting">$out = pack &quot;aaaa&quot;,  &quot;abcd&quot;, &quot;x&quot;, &quot;y&quot;, &quot;z&quot;;   # &quot;axyz&quot;
$out = pack &quot;a&quot; x 4, &quot;abcd&quot;, &quot;x&quot;, &quot;y&quot;, &quot;z&quot;;   # &quot;axyz&quot;</PRE
><p class="para">The <code class="literal">&quot;a&quot;</CODE
> format does null filling:</P
><pre class="programlisting">$out = pack &quot;a14&quot;, &quot;abcdefg&quot;;   # &quot;abcdefg\0\0\0\0\0\0\0&quot;</PRE
><p class="para">This template packs a C <code class="literal">struct tm</CODE
> record (at least on some
systems):</P
><pre class="programlisting">$out = pack &quot;i9pl&quot;, gmtime, $tz, $toff;</PRE
><p class="para">The same template may generally also be used in the <a class="xref" href="ch03_182.htm#PERL2-CMD-UNPACK" title="unpack"><b class="xref.cmd">unpack</B
></A
> function.  If you want to join variable length
fields with a delimiter, use the <a class="xref" href="ch03_078.htm#PERL2-CMD-JOIN" title="join"><b class="xref.cmd">join</B
></A
>
function.</P
><p class="para">Note that, although all of our examples use literal strings as templates,
there is no reason you couldn't pull in your templates from a disk file.
You could, in fact, build an entire relational database system around this
function.<a class="indexterm" name="AUTOID-11784"></A
><a class="indexterm" name="AUTOID-11785"></A
></P
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT2" href="ch03_104.htm#PERL2-CMD-ORD" title="3.2.104 ord"><img src="../gifs/txtpreva.gif" alt="Previous: 3.2.104 ord" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Programming Perl"><img src="../gifs/txthome.gif" alt="Programming Perl" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT2" href="ch03_106.htm#PERL2-CMD-PACKAGE" title="3.2.106 package"><img src="../gifs/txtnexta.gif" alt="Next: 3.2.106 package" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">3.2.104 ord</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">3.2.106 package</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
