<html><head>
<title>[Chapter 5] Packages, Modules, and Object Classes</TITLE>
<meta name="DC.title" content="Programming Perl"><meta name="DC.creator" content="Larry Wall, Tom Christiansen &amp; Randal L. Schwartz"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:57:56Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-149-6" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="index.htm" title="Programming Perl"><link rel="prev" href="ch04_07.htm#PERL2-CH-4-SECT-7.2" title="4.7 Data Structure Code Examples"><link rel="next" href="ch05_02.htm" title="5.2 Modules"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Programming Perl" usemap="#srchmap" border="0"></H1
><map name="srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Programming Perl"><area shape="RECT" coords="467,0,514,18" href="../search/psrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch04_07.htm#PERL2-CH-4-SECT-7.2" title="4.7 Data Structure Code Examples"><img src="../gifs/txtpreva.gif" alt="Previous: 4.7 Data Structure Code Examples" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 5</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch05_02.htm" title="5.2 Modules"><img src="../gifs/txtnexta.gif" alt="Next: 5.2 Modules" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="CHAPTER"><h1 class="chapter"><a class="title" name="PERL2-CH-5">5. Packages, Modules, and Object Classes</A
></H1
><div class="htmltoc"><p><b>Contents:</B
><br><a class="SECT1" href="#PERL2-CH-5-SECT-1" title="5.1 Packages">Packages</A
><br><a class="SECT1" href="ch05_02.htm" title="5.2 Modules">Modules</A
><br><a class="SECT1" href="ch05_03.htm#PERL2-CH-5-SECT-3.9" title="5.3 Objects">Objects</A
><br><a class="SECT1" href="ch05_04.htm#PERL2-CH-5-SECT-4.3" title="5.4 Using Tied Variables">Using Tied Variables</A
><br><a class="SECT1" href="ch05_05.htm#PERL2-CH-5-SECT-5.5" title="5.5 Some Hints About Object Design">Some Hints About Object Design</A
></P
><p></P
></DIV
><p class="para">This chapter, more than any other in this book, is about Laziness,
Impatience, and Hubris&nbsp;- because this chapter is about good software
design.</P
><p class="para"><a class="indexterm" name="CH05.PACK"></A
>We've all fallen into the trap of using cut-and-paste when we should
have chosen to define a higher-level abstraction, if only just a loop or
subroutine.[<a class="footnote" href="#AUTOID-15137">1</A
>]
To be sure, some folks have gone to the opposite extreme of defining
ever-growing mounds of higher-level abstractions when they should have
used cut-and-paste.[<a class="footnote" href="#AUTOID-15139">2</A
>]
Generally, though, most of us need to think about using more abstraction
rather than less.</P
><blockquote class="footnote"><div class="footnote"><p class="para"><a class="footnote" name="AUTOID-15137">[1]</A
> This is a form of False Laziness.</P
></DIV
><div class="footnote"><p class="para"><a class="footnote" name="AUTOID-15139">[2]</A
> This is a form of False Hubris.</P
></DIV
></BLOCKQUOTE
><p class="para">(Caught somewhere in the middle are the people who have a balanced view
of how much abstraction is good, but who jump the gun on writing their own
abstractions when they should be reusing existing code.)[<a class="footnote" href="#AUTOID-15142">3</A
>]</P
><blockquote class="footnote"><div class="footnote"><p class="para"><a class="footnote" name="AUTOID-15142">[3]</A
> You guessed it, this is False Impatience.  But if you're determined to
reinvent the wheel, at least try to invent a better one.</P
></DIV
></BLOCKQUOTE
><p class="para">Whenever you're tempted to do any of these things, you need to sit back
and think about what will do the most good for you and your neighbor
over the long haul.  If you're going to pour your creative energies into
a lump of code, why not make the world a better place while you're at
it?  (Even if you're only aiming for the program to <em class="emphasis">succeed</EM
>, you need
to make sure it fits its ecological niche.)</P
><p class="para"><a class="indexterm" name="AUTOID-15147"></A
>The first step toward ecologically sustainable programming is simply:
don't litter in the park.  When you write a chunk of code, think about
giving the code its own namespace, so that your variables and functions
don't clobber anyone else's, or vice versa.  A namespace is a bit like
your home, where you're allowed to be as messy as you like, as long
as you keep your external interface to other citizens moderately civil.
In Perl, a namespace is called a <em class="emphasis">package</EM
>.  Packages provide the
fundamental building block upon which the higher-level concepts of
modules and classes are constructed.</P
><p class="para">Like the notion of &quot;home&quot;, the notion of &quot;package&quot; is a bit nebulous.
Packages are independent of files.  You can have many packages in a
single file, or a single package that spans several files, just as your
home could be one part of a larger building, if you live in an apartment, or could comprise several
buildings, if your name happens to be Queen Elizabeth.  But the usual
size of a home is one building, and the usual size of a package is one
file.  Perl has some special help for people who want to put one package
in one file, as long as you're willing to name the file with the same
name as the package and give your file an extension of &quot;<em class="emphasis">.pm</EM
>&quot;,<a class="indexterm" name="AUTOID-15153"></A
><a class="indexterm" name="AUTOID-15155"></A
>
which is short for &quot;perl module&quot;. The <em class="emphasis">module</EM
> is the unit of
reusability in Perl.  Indeed, the way you <em class="emphasis">use</EM
> a module is with the
<a class="xref" href="ch03_185.htm#PERL2-CMD-USE" title="use"><b class="xref.cmd">use</B
></A
> command, which is a compiler directive that controls the
importation of functions and variables from a module.  Every example of
<a class="xref" href="ch03_185.htm#PERL2-CMD-USE" title="use"><b class="xref.cmd">use</B
></A
> you've seen until now has been an example of module reuse.</P
><p class="para"><a class="indexterm" name="AUTOID-15162"></A
><a class="indexterm" name="AUTOID-15164"></A
>Object classes are another concept built on the package concept.
The concept of classes therefore cuts across the concepts of files and
modules.  But the typical class is nevertheless implemented with a
module.  (If you're starting to get the feeling that much of Perl culture
is governed by mere convention, then you're starting to get the right
feeling, civilly speaking.  The trend over the last 20 years or so has
been to design computer languages that enforce a state of paranoia.
You're expected to program every module as if it were in a state of
siege.  Certainly there are some feudal cultures where this is
appropriate, but not all cultures are like this.  In Perl culture, by
contrast, you're expected to stay out of someone's home because you
weren't invited in, not because there are bars[<a class="footnote" href="#AUTOID-15167">4</A
>]
on the windows.)</P
><blockquote class="footnote"><div class="footnote"><p class="para"><a class="footnote" name="AUTOID-15167">[4]</A
> But Perl provides some bars if you want them, too.  See the Safe module in
<a class="xref" href="ch07_01.htm" title="The Standard Perl Library">Chapter 7, <cite class="chapter">The Standard Perl Library</CITE
></A
>, for instance.</P
></DIV
></BLOCKQUOTE
><p class="para">Anyway, back to classes.  When you <b class="emphasis.bold">use</B
> a module that implements a class,
you're benefiting from the direct reuse of the software that implements
that module.  But with object classes you can get the additional
benefits of <em class="emphasis">indirect</EM
> software reuse when the class you're using turns
around and reuses other classes that it gets some characteristics
from.  But this is not primarily a book about object-oriented
methodology, and we're not here to convert you into a raving
object-oriented zealot, even if you want to be converted.  There are
already plenty of books out there for that.
Perl's philosophy of object-oriented design fits right in with Perl's
philosophy of everything else: use object-oriented design where it makes
sense, and avoid it where it doesn't.  Your call.</P
><p class="para">As we mentioned in the previous chapter, object-oriented programming in
Perl is accomplished through use of references that happen to refer to
thingies that know which class they're associated with.  In fact, now
that you know about references, you know almost everything hard about
objects.  The rest of it just &quot;lays under the fingers&quot;, as a violinist
would say.  You will need to practice a little, though.</P
><p class="para">In this chapter we will discuss creation and use of packages, modules,
and classes.  Then we will review some of the essentials of
object-oriented programming, explain how references become objects, and
illustrate how these objects are manipulated as members
of one or more classes.  We'll also tell you how to <b class="emphasis.bold">tie</B
> ordinary
variables into object classes to turn them into magical variables.</P
><div class="sect1"><h2 class="sect1"><a class="title" name="PERL2-CH-5-SECT-1">5.1 Packages</A
></H2
><p class="para"><a class="indexterm" name="AUTOID-15179"></A
>Perl provides a mechanism to protect different sections of code from
inadvertently tampering with each other's variables.  In fact, apart
from certain magical variables, there's really no such thing as a global
variable in Perl.  Code is always compiled in the <em class="emphasis">current package</EM
>.
The initial current package is package main, but at any time you can
switch the current package to another one using the <a class="xref" href="ch03_106.htm#PERL2-CMD-PACKAGE" title="package"><b class="xref.cmd">package</B
></A
>
declaration.  The current package determines which symbol table is used
for name lookups (for names that aren't otherwise package-qualified).
The notion of &quot;current package&quot; is both a compile-time and run-time
concept.  Most name lookups happen at compile-time, but run-time lookups
happen when symbolic references are dereferenced, and also when new bits
of code are parsed under <a class="xref" href="ch03_032.htm#PERL2-CMD-EVAL" title="eval"><b class="xref.cmd">eval</B
></A
>.  In particular, <a class="xref" href="ch03_032.htm#PERL2-CMD-EVAL" title="eval"><b class="xref.cmd">eval</B
></A
> operations
know which package they were invoked in, and propagate that package
inward as the current package of the evaluated code.  (You can always
switch to a different package within the <a class="xref" href="ch03_032.htm#PERL2-CMD-EVAL" title="eval"><b class="xref.cmd">eval</B
></A
> string, of course,
since an <a class="xref" href="ch03_032.htm#PERL2-CMD-EVAL" title="eval"><b class="xref.cmd">eval</B
></A
> string counts as a block, as does a file loaded in with <b class="emphasis.bold">do</B
>,
<b class="emphasis.bold">require</B
>, or <b class="emphasis.bold">use</B
>.)</P
><p class="para">The scope of a <a class="xref" href="ch03_106.htm#PERL2-CMD-PACKAGE" title="package"><b class="xref.cmd">package</B
></A
> declaration is from the declaration itself
through the end of the innermost enclosing block (or until another
<a class="xref" href="ch03_106.htm#PERL2-CMD-PACKAGE" title="package"><b class="xref.cmd">package</B
></A
> declaration at the same level, which hides the earlier one).
All subsequent identifiers (except those declared with <a class="xref" href="ch03_097.htm#PERL2-CMD-MY" title="my"><b class="xref.cmd">my</B
></A
>, or those
qualified with a different package name) will be placed in the symbol
table belonging to the package.  Typically, you would put a <a class="xref" href="ch03_106.htm#PERL2-CMD-PACKAGE" title="package"><b class="xref.cmd">package</B
></A
>
declaration as the first declaration in a file to be included by
<a class="xref" href="ch03_123.htm#PERL2-CMD-REQUIRE" title="require"><b class="xref.cmd">require</B
></A
> or <a class="xref" href="ch03_185.htm#PERL2-CMD-USE" title="use"><b class="xref.cmd">use</B
></A
>.  But again, that's by convention.  You can put a
<a class="xref" href="ch03_106.htm#PERL2-CMD-PACKAGE" title="package"><b class="xref.cmd">package</B
></A
> declaration anywhere you can put a statement.  You could even
put it at the end of a block, in which case it would have no effect
whatsoever.  You can switch into a package in more than one place; it
merely influences which symbol table is used by the compiler for the
rest of that block.  (This is how a given package can span more than
one file.)</P
><p class="para"><a class="indexterm" name="AUTOID-15199"></A
>You can refer to identifiers[<a class="footnote" href="#AUTOID-15201">5</A
>]<a class="indexterm" name="AUTOID-15203"></A
>
in other packages by prefixing (&quot;qualifying&quot;) the identifier with the
package name and a double colon: <code class="literal">$Package::Variable</CODE
>.  If the
package name is null, the main package is assumed.  That is,
<code class="literal">$::sail</CODE
> is equivalent to <code class="literal">$main::sail</CODE
>.[<a class="footnote" href="#AUTOID-15209">6</A
>]
(The old package delimiter was a single quote, which produced things like
<code class="literal">$main'sail</CODE
> and <code class="literal">$'sail</CODE
>.  But a double colon is now the
preferred delimiter, in part because it's more readable to humans, and
in part because it's more readable to <em class="emphasis">emacs</EM
> macros.  It also gives
C++ programmers a warm feeling.)</P
><blockquote class="footnote"><div class="footnote"><p class="para"><a class="footnote" name="AUTOID-15201">[5]</A
> By identifiers, we mean the names used as symbol table keys to access
scalar variables, array variables, hash variables, functions, file or
directory handles, and formats.  Syntactically speaking, labels are also
identifiers, but they aren't put into a particular symbol table; rather,
they are attached directly to the statements in your program.  Labels
may not be package qualified.</P
></DIV
><div class="footnote"><p class="para"><a class="footnote" name="AUTOID-15209">[6]</A
> To clear up another bit of potential confusion, in a variable name like
<code class="literal">$main::sail</CODE
>, we use the term &quot;identifier&quot; to talk about <code class="literal">main</CODE
> and
<code class="literal">sail</CODE
>, but not <code class="literal">main::sail</CODE
>.  We call that a variable name instead,
because an identifier may not contain a colon.  The definition of an
identifier is lexical, in that an identifier is a token that matches
the pattern <code class="literal">/^[A-Za-z_][A-Za-z_0-9]*$/</CODE
>.</P
></DIV
></BLOCKQUOTE
><p class="para"><a class="indexterm" name="AUTOID-15220"></A
>Packages may be nested inside other packages:
<code class="literal">$OUTER::INNER::var</CODE
>.  This implies nothing about the order of
name lookups, however.  There are no fallback symbol tables.  All
undeclared symbols are either local to the current package, or must be
fully qualified from the outer package name down.  For instance, there
is nowhere within package <code class="literal">OUTER</CODE
> that <code class="literal">$INNER::var</CODE
> refers
to <code class="literal">$OUTER::INNER::var</CODE
>.  It would treat package <code class="literal">INNER</CODE
> as
a totally separate global package.  Similarly, every <b class="emphasis.bold">package</B
> declaration
must declare a complete package name.  No package name ever assumes any
kind of implied &quot;prefix&quot;, even if (seemingly) declared within the scope
of some other package declaration.</P
><p class="para">Only identifiers (names starting with letters or underscore) are stored
in the current package's symbol table.  All other symbols are kept in
package main, including all the magical punctuation-only variables
like <b class="emphasis.bold">$!</B
> and <b class="emphasis.bold">$_</B
>.  In addition, the identifiers <code class="literal">STDIN</CODE
>,
<code class="literal">STDOUT</CODE
>, <code class="literal">STDERR</CODE
>, <code class="literal">ARGV</CODE
>, <code class="literal">ARGVOUT</CODE
>, <code class="literal">ENV</CODE
>,
<code class="literal">INC</CODE
>, and <code class="literal">SIG</CODE
> are forced to be in package main even when
used for purposes other than their built-in ones.  Furthermore, if you
have a package called <code class="literal">m</CODE
>, <code class="literal">s</CODE
>, <code class="literal">y</CODE
>, or <code class="literal">tr</CODE
>,
then you can't use the qualified form of an identifier as a filehandle
because it will be interpreted instead as a pattern match, a
substitution, or a translation. Using uppercase package names avoids
this problem.</P
><p class="para">Assignment of a string to <b class="emphasis.bold">%SIG</B
> assumes the signal handler specified is
in the main package, if the name assigned is unqualified.  Qualify
the signal handler name if you want to have a signal handler in a
package, or don't use a string at all: assign a typeglob or a function
reference instead:</P
><p class="para"><pre class="programlisting">$SIG{QUIT} = &quot;quit_catcher&quot;;     # implies &quot;main::quit_catcher&quot;
$SIG{QUIT} = *quit_catcher;      # forces current package's sub
$SIG{QUIT} = \&amp;quit_catcher;     # forces current package's sub
$SIG{QUIT} = sub { print &quot;Caught SIGQUIT\n&quot; };  # anonymous sub</PRE
></P
><p class="para">See <a class="xref" href="ch03_097.htm#PERL2-CMD-MY" title="my"><b class="xref.cmd">my</B
></A
> and <a class="xref" href="ch03_087.htm#PERL2-CMD-LOCAL" title="local"><b class="xref.cmd">local</B
></A
> in <a class="xref" href="ch03_01.htm" title="Functions">Chapter 3, <cite class="chapter">Functions</CITE
></A
>, for other scoping
issues.  See the &quot;Signals&quot; section in <a class="xref" href="ch06_01.htm" title="Social Engineering">Chapter 6, <cite class="chapter">Social Engineering</CITE
></A
>, for more on signal handlers.</P
><div class="sect2"><h3 class="sect2"><a class="title" name="PERL2-CH-5-SECT-1.1">5.1.1 Symbol Tables</A
></H3
><p class="para"><a class="indexterm" name="CH05.SYM1"></A
><a class="indexterm" name="CH05.SYM2"></A
>The symbol table for a package happens to be stored in a hash whose name
is the same as the package name with two colons appended.  The
main symbol table's name is thus <code class="literal">%main::</CODE
>, or <code class="literal">%::</CODE
>
for short, since package main is the default.  Likewise, the symbol table
for the nested
package we mentioned earlier is named <code class="literal">%OUTER::INNER::</CODE
>.  As it
happens, the main symbol table contains all other top-level symbol
tables, including itself, so <code class="literal">%OUTER::INNER::</CODE
> is also
<code class="literal">%main::OUTER::INNER::</CODE
>.</P
><p class="para">When we say that a symbol table &quot;contains&quot; another symbol table, we mean that it contains a reference to the other symbol table. Since
package main is a top-level package, it contains a reference to itself,
with the result that <code class="literal">%main::</CODE
> is the same as
<code class="literal">%main::main::</CODE
>, and <code class="literal">%main::main::main::</CODE
>, and so on, ad
infinitum. It's important to check for this special case if you write
code to traverse all symbol tables.</P
><p class="para">The keys in a symbol table hash are the identifiers of the symbols in
the symbol table.  The values in a symbol table hash are the
corresponding typeglob values.  So when you use the <code class="literal">*name</CODE
> typeglob
notation, you're really just accessing a value in the hash that holds
the current package's symbol table.  In fact, the following have the
same effect, although the first is potentially more efficient because it does the
symbol table lookup at compile time:</P
><p class="para"><pre class="programlisting">local *somesym = *main::variable;
local *somesym = $main::{&quot;variable&quot;};</PRE
></P
><p class="para">Since a package is a hash, you can look up the keys of the package, and
hence all the variables of the package.  Try this:</P
><p class="para"><pre class="programlisting">foreach $symname (sort keys %main::) {
    local *sym = $main::{$symname};
    print &quot;\$$symname is defined\n&quot; if defined $sym;
    print &quot;\@$symname is defined\n&quot; if defined @sym;
    print &quot;\%$symname is defined\n&quot; if defined %sym;
}</PRE
></P
><p class="para">Since all packages are accessible (directly or indirectly) through
package main, you can visit every package variable in the program,
using code written in Perl.  The Perl debugger does precisely that when
you ask it to dump all your variables.</P
><p class="para">Assignment to a typeglob performs an aliasing operation; that is,</P
><p class="para"><pre class="programlisting">*dick = *richard;</PRE
></P
><p class="para">causes everything accessible via the identifier <code class="literal">richard</CODE
> to also be
accessible via the symbol <code class="literal">dick</CODE
>.  If you only want to alias a
particular variable or subroutine, assign a reference instead:</P
><p class="para"><pre class="programlisting">*dick = \$richard;</PRE
></P
><p class="para">This makes <code class="literal">$richard</CODE
> and <code class="literal">$dick</CODE
> the same variable, but leaves
<code class="literal">@richard</CODE
> and <code class="literal">@dick</CODE
> as separate arrays.  Tricky, eh?
&#13;</P
><p class="para">This mechanism may be used to pass and return cheap references
into or from subroutines if you don't want to copy the whole thing:</P
><p class="para"><pre class="programlisting">%some_hash = ();
*some_hash = fn( \%another_hash );
sub fn {
    local *hashsym = shift;
    # now use %hashsym normally, and you
    # will affect the caller's %another_hash
    my %nhash = (); # populate this hash at will
    return \%nhash;
}</PRE
></P
><p class="para">On return, the reference will overwrite the hash slot in the
symbol table specified by the <code class="literal">*some_hash</CODE
> typeglob.  This
is a somewhat sneaky way of passing around references cheaply
when you don't want to have to remember to dereference variables
explicitly. It only works on package variables though, which is why
we had to use <a class="xref" href="ch03_087.htm#PERL2-CMD-LOCAL" title="local"><b class="xref.cmd">local</B
></A
> there instead of <a class="xref" href="ch03_097.htm#PERL2-CMD-MY" title="my"><b class="xref.cmd">my</B
></A
>.</P
><p class="para">Another use of symbol tables is for making &quot;constant&quot; scalars:</P
><p class="para"><pre class="programlisting">*PI = \3.14159265358979;</PRE
></P
><p class="para">Now you cannot alter <code class="literal">$PI</CODE
>, which is probably a good thing, all in all.</P
><p class="para">When you do that assignment, you're just replacing one reference within
the typeglob.  If you think about it sideways, the typeglob itself can
be viewed as a kind of hash, with entries for the different variable
types in it.  In this case, the keys are fixed, since a typeglob can
contain exactly one scalar, one array, one hash, and so on.  But you can
pull out the individual references, like this:</P
><p class="para"><pre class="programlisting">*pkg::sym{SCALAR}      # same as \$pkg::sym
*pkg::sym{ARRAY}       # same as \@pkg::sym
*pkg::sym{HASH}        # same as \%pkg::sym
*pkg::sym{CODE}        # same as \&amp;pkg::sym
*pkg::sym{GLOB}        # same as \*pkg::sym
*pkg::sym{FILEHANDLE}  # internal filehandle, no direct equivalent
*pkg::sym{NAME}        # &quot;sym&quot; (not a reference)
*pkg::sym{PACKAGE}     # &quot;pkg&quot; (not a reference)</PRE
></P
><p class="para">This is primarily used to get at the internal filehandle reference,
since the other internal references are already accessible in other
ways.  But we thought we'd generalize it because it looks kind of
pretty.  Sort of.  You probably don't need to remember all this unless
you're planning to write a Perl debugger.  So let's get back to the
topic of writing good software.</P
><a class="indexterm" name="AUTOID-15307"></A
><a class="indexterm" name="AUTOID-15308"></A
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PERL2-CH-5-SECT-1.2">5.1.2 Package Constructors and Destructors: BEGIN and END</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-15312"></A
><a class="indexterm" name="AUTOID-15315"></A
><a class="indexterm" name="AUTOID-15317"></A
>Two special subroutine definitions that function as package
constructors and destructors[<a class="footnote" href="#AUTOID-15319">7</A
>]
are the <code class="literal">BEGIN</CODE
> and <code class="literal">END</CODE
> routines.  The <b class="emphasis.bold">sub</B
> is optional
for these routines.</P
><blockquote class="footnote"><div class="footnote"><p class="para"><a class="footnote" name="AUTOID-15319">[7]</A
> Strictly speaking, these aren't constructors and destructors, but
initializers and finalizers.  And strictly speaking, packages aren't
objects.  But strictly speaking, we don't speak strictly around here
too often.</P
></DIV
></BLOCKQUOTE
><p class="para">A <code class="literal">BEGIN</CODE
> subroutine is executed as soon as possible, that is, the
moment it is completely defined, even before the rest of the containing
file is parsed.  You may have multiple <code class="literal">BEGIN</CODE
> blocks within a
file&nbsp;- they will execute in order of definition.  Because a <code class="literal">BEGIN</CODE
>
block executes immediately, it can pull in definitions of subroutines
and such from other files in time to be visible during compilation of the
rest of the file.
This is important because subroutine declarations change how the rest
of the file will be parsed.  At the very least, declaring a subroutine
allows it to be used as a list operator, without parentheses.  And if
the subroutine is declared with a prototype, then calls to that
subroutine may be parsed like any of several built-in functions
(depending on which prototype is used).</P
><p class="para">An <code class="literal">END</CODE
> subroutine, by contrast, is executed as <em class="emphasis">late</EM
> as
possible, that is, when the
interpreter is being exited, even if it is exiting as a result of a
<a class="xref" href="ch03_027.htm#PERL2-CMD-DIE" title="die"><b class="xref.cmd">die</B
></A
> function, or from an internally generated exception such as you'd
get when you try to call an undefined function.  (But not if it's is
being blown out of the water by a signal&nbsp;- you have to trap that
yourself (if you can).)[<a class="footnote" href="#AUTOID-15332">8</A
>]
You may have multiple <code class="literal">END</CODE
> blocks within a file&nbsp;- they will execute
in reverse order of definition; that is: last in, first out (LIFO).
That is so that related <code class="literal">BEGIN</CODE
>s and <code class="literal">END</CODE
>s will nest the way you'd
expect, if you pair them up.</P
><blockquote class="footnote"><div class="footnote"><p class="para"><a class="footnote" name="AUTOID-15332">[8]</A
> See the sigtrap pragmatic module described in <a class="xref" href="ch07_01.htm" title="The Standard Perl Library">Chapter 7</A
> for
an easy way to do this.  For general information on signal handling,
see &quot;Signals&quot; in <a class="xref" href="ch06_01.htm" title="Social Engineering">Chapter 6</A
>.</P
></DIV
></BLOCKQUOTE
><p class="para">When you use the <b class="emphasis.bold">-n</B
> and <b class="emphasis.bold">-p</B
> switches to Perl, <code class="literal">BEGIN</CODE
>
and <code class="literal">END</CODE
> work just as they do in <em class="emphasis">awk</EM
>(1), as a degenerate case.
For example, the output order of colors if you run the following
program is red, green, and blue:</P
><p class="para"><pre class="programlisting">die &quot;green\n&quot;;
END   { print &quot;blue\n&quot; }
BEGIN { print &quot;red\n&quot; }</PRE
></P
><p class="para">Just as <a class="xref" href="ch03_032.htm#PERL2-CMD-EVAL" title="eval"><b class="xref.cmd">eval</B
></A
> provides a way to get compilation behavior during run-time,
so too <code class="literal">BEGIN</CODE
> provides a way to get run-time behavior during compilation.
But note that the compiler must execute <code class="literal">BEGIN</CODE
> blocks even if you're
just checking syntax with the <b class="emphasis.bold">-c</B
> switch.  By symmetry, <code class="literal">END</CODE
> blocks
are also executed when syntax checking.  Your <code class="literal">END</CODE
> blocks should not
assume that any or all of your main code ran.  (They shouldn't do this
in any
event, since the interpreter might exit early from an exception.)  This
is not a bad problem in general.  At worst, it means you should test the
&quot;definedness&quot; of a variable before doing anything rash with it.  In
particular, before saying something like:</P
><p class="para"><pre class="programlisting">system &quot;rm -rf '$dir'&quot;</PRE
></P
><p class="para">you should always check that <code class="literal">$dir</CODE
> contains something meaningful, whether
or not you're doing it in an <code class="literal">END</CODE
> block.  Caveat destructor.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PERL2-CH-5-SECT-1.3">5.1.3 Autoloading</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-15362"></A
><a class="indexterm" name="AUTOID-15364"></A
><a class="indexterm" name="AUTOID-15367"></A
><a class="indexterm" name="AUTOID-15370"></A
><a class="indexterm" name="AUTOID-15373"></A
>Normally you can't call a subroutine that isn't defined.  However, if
there is a subroutine named <code class="literal">AUTOLOAD</CODE
> in the undefined subroutine's
package (or in the case of an object method, in the package of any of
the object's base classes), then the <code class="literal">AUTOLOAD</CODE
> subroutine is called
with the same arguments as would have been passed to the original
subroutine.  The fully qualified name of the original subroutine
magically appears in the package-global <code class="literal">$AUTOLOAD</CODE
> variable, in the
same package as the <code class="literal">AUTOLOAD</CODE
> routine.</P
><p class="para">Most <code class="literal">AUTOLOAD</CODE
> routines will load a definition for the undefined
subroutine in question using <a class="xref" href="ch03_032.htm#PERL2-CMD-EVAL" title="eval"><b class="xref.cmd">eval</B
></A
> or <a class="xref" href="ch03_123.htm#PERL2-CMD-REQUIRE" title="require"><b class="xref.cmd">require</B
></A
>, then execute that
subroutine using a special form of <a class="xref" href="ch03_071.htm#PERL2-CMD-GOTO" title="goto"><b class="xref.cmd">goto</B
></A
> that erases the stack frame
of the <code class="literal">AUTOLOAD</CODE
> routine without a trace.</P
><p class="para">The standard AutoSplit module is a tool used by module writers to
help split their modules into separate files (with filenames ending
in <em class="emphasis">.al</EM
>), each holding one routine.  The files are placed in
the <em class="emphasis">auto/</EM
> directory of the Perl library.  These files can then be loaded
on demand by the standard AutoLoader module.  A similar approach is
taken by the SelfLoader module, except that it autoloads functions from
the file's own <code class="literal">DATA</CODE
> area (which is less efficient in some ways and
more efficient in others).  Autoloading of Perl functions is analogous
to dynamic loading of compiled C functions, except that autoloading (as
practiced by AutoLoader and SelfLoader) is done at the granularity of
the function call, whereas dynamic loading (as practiced by the
DynaLoader module) is done at the granularity of the complete module,
and will usually link in many C or C++ functions all at once.  (See also
the AutoLoader, SelfLoader, and DynaLoader modules in <a class="xref" href="ch07_01.htm" title="The Standard Perl Library">Chapter 7</A
>.)</P
><p class="para">But an <code class="literal">AUTOLOAD</CODE
> routine can also just emulate the routine and never
define it.   For example, let's pretend that any function that isn't defined
should just call <a class="xref" href="ch03_167.htm#PERL2-CMD-SYSTEM" title="system"><b class="xref.cmd">system</B
></A
> with its arguments.  All you'd do is this:</P
><pre class="programlisting">sub AUTOLOAD {
    my $program = $AUTOLOAD;
    $program =~ s/.*:://;  # trim package name
    system($program, @_);
} 
date();
who('am', 'i');
ls('-l');</PRE
><p class="para">In fact, if you predeclare the functions you want to call that way, you don't
even need the parentheses:</P
><p class="para"><pre class="programlisting">use subs qw(date who ls);
date;
who &quot;am&quot;, &quot;i&quot;;
ls &quot;-l&quot;;</PRE
></P
><p class="para">A more complete example of this is the standard Shell module described in
<a class="xref" href="ch07_01.htm" title="The Standard Perl Library">Chapter 7</A
>, which can treat undefined subroutine calls as calls to programs.</P
><a class="indexterm" name="AUTOID-15400"></A
></DIV
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch04_07.htm#PERL2-CH-4-SECT-7.2" title="4.7 Data Structure Code Examples"><img src="../gifs/txtpreva.gif" alt="Previous: 4.7 Data Structure Code Examples" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Programming Perl"><img src="../gifs/txthome.gif" alt="Programming Perl" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch05_02.htm" title="5.2 Modules"><img src="../gifs/txtnexta.gif" alt="Next: 5.2 Modules" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">4.7 Data Structure Code Examples</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">5.2 Modules</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
