<html><head>
<title>[Chapter 7] 7.2.12 DynaLoader&nbsp;- Automatic Dynamic Loading of Perl Modules</TITLE>
<meta name="DC.title" content="Programming Perl"><meta name="DC.creator" content="Larry Wall, Tom Christiansen &amp; Randal L. Schwartz"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T02:01:53Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-149-6" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch07_02.htm" title="7.2 Library Modules"><link rel="prev" href="ch07_011.htm#AUTOID-19686" title="7.2.11 DirHandle&nbsp;- Supply Object Methods for Directory Handles"><link rel="next" href="ch07_013.htm#AUTOID-19930" title="7.2.13 English&nbsp;- Use English or awk Names for Punctuation Variables"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Programming Perl" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Programming Perl"><area shape="RECT" coords="467,0,514,18" href="../search/psrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT2" href="ch07_011.htm#AUTOID-19686" title="7.2.11 DirHandle&nbsp;- Supply Object Methods for Directory Handles"><img src="../gifs/txtpreva.gif" alt="Previous: 7.2.11 DirHandle&nbsp;- Supply Object Methods for Directory Handles" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch07_01.htm" title="7. The Standard Perl Library">Chapter 7<br>The Standard Perl Library</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT2" href="ch07_013.htm#AUTOID-19930" title="7.2.13 English&nbsp;- Use English or awk Names for Punctuation Variables"><img src="../gifs/txtnexta.gif" alt="Next: 7.2.13 English&nbsp;- Use English or awk Names for Punctuation Variables" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT2"><h3 class="sect2"><a class="title" name="AUTOID-19707">7.2.12 DynaLoader&nbsp;- Automatic Dynamic Loading of Perl Modules</A
></H3
><pre class="programlisting">package YourModule;
require DynaLoader;
@ISA = qw(... DynaLoader ...);

bootstrap YourModule;</PRE
><p class="para"><a class="indexterm" name="CH07.DYNA1"></A
><a class="indexterm" name="CH07.DYNA2"></A
><a class="indexterm" name="CH07.DYNA3"></A
><a class="indexterm" name="CH07.DYNA4"></A
>This module defines the standard Perl interface to the dynamic linking
mechanisms available on many platforms.  A common theme throughout the
module system is that <em class="emphasis">using</EM
> a module should be easy, even if the
module itself (or the installation of the module) is more complicated as
a result.  This applies particularly to the DynaLoader.  To use it in
your own module, all you need are the incantations listed above in the
synopsis.  This will work whether YourModule is statically or
dynamically linked into Perl.  (This is a <em class="emphasis">Configure</EM
> option for each
module.) The <code class="literal">bootstrap()</CODE
> method will either 
call YourModule's bootstrap routine directly if YourModule is statically 
linked into Perl, or if not, YourModule will inherit the <code class="literal">bootstrap()</CODE
> method from DynaLoader, which will do everything necessary to load in your module, and then call YourModule's <code class="literal">bootstrap()</CODE
> method for you, as
if it were there all the time and you called it yourself.  Piece of cake,
of the have-it-and-eat-it-too variety.</P
><p class="para">The rest of this description talks about the DynaLoader from the
viewpoint of someone who wants to extend the DynaLoader module to a new
architecture.  The <em class="emphasis">Configure</EM
> process selects which kind of dynamic
loading to use by choosing to link in one of several C implementations,
which must be linked into <em class="emphasis">perl</EM
> statically.  (This is unlike other
C extensions, which provide a single implementation, which may be linked
in either statically or dynamically.)</P
><p class="para">The DynaLoader is designed to be a very simple, high-level interface that
is sufficiently general to cover the requirements of SunOS, HP-UX,
NeXT, Linux, VMS, Win-32, and other platforms.  By itself, though,
DynaLoader is practically useless for accessing non-Perl libraries
because it provides almost no Perl-to-C &quot;glue&quot;.  There is, for example,
no mechanism for calling a C library function or supplying its arguments
in any sort of portable form.  This job is delegated to the other
extension modules that you may load in by using DynaLoader.</P
><div class="sect3"><h4 class="sect3"><a class="title" name="AUTOID-19730">7.2.12.1 Internal interface summary</A
></H4
><pre class="programlisting"><em class="emphasis">Variables:</EM
>
    @dl_library_path
    @dl_resolve_using
    @dl_require_symbols
    $dl_debug

<em class="emphasis">Subroutines:</EM
>
    bootstrap($modulename);
    @filepaths = dl_findfile(@names);
    $filepath = dl_expandspec($spec);
    $libref  = dl_load_file($filename);
    $symref  = dl_find_symbol($libref, $symbol);
    @symbols = dl_undef_symbols();
    dl_install_xsub($name, $symref [, $filename]);
    $message = dl_error;</PRE
><p class="para"><a class="indexterm" name="AUTOID-19736"></A
>The <code class="literal">bootstrap()</CODE
> and <code class="literal">dl_findfile()</CODE
> routines
are standard across all platforms, and so are defined in
<em class="emphasis">DynaLoader.pm</EM
>.  The rest of the functions are supplied by
the particular <em class="emphasis">.xs</EM
> file that supplies the implementation
for the platform.  (You can examine the existing implementations in the
<em class="emphasis">ext/DynaLoader/</EM
>*<em class="emphasis">.xs</EM
> files in the Perl
source directory.  You should also read <em class="emphasis">DynaLoader.pm</EM
>, of
course.)  These implementations may also tweak the default values of the
variables listed below.</P
><dl class="variablelist"><dt class="term"><code class="literal">@dl_library_path</CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="CH07.DYNA6"></A
>The default list of directories in which <code class="literal">dl_findfile()</CODE
> will
search for libraries.  Directories are searched in the order they are
given in this array variable, beginning with subscript 0.

<code class="literal">@dl_library_path</CODE
> is initialized to hold the list of &quot;normal&quot;
directories (<em class="emphasis">/usr/lib</EM
> and so on) determined by the Perl installation
script, <em class="emphasis">Configure</EM
>, and given by 
<code class="literal">$Config{'libpth'}</CODE
>.  This
is to ensure portability across a wide range of platforms.

<code class="literal">@dl_library_path</CODE
> should also be initialized with any other directories
that can be determined from the environment at run-time (such as
<code class="literal">LD_LIBRARY_PATH</CODE
> for SunOS).

After initialization, <code class="literal">@dl_library_path</CODE
> can be manipulated by an
application using <a class="xref" href="ch03_112.htm#PERL2-CMD-PUSH" title="push"><b class="xref.cmd">push</B
></A
> and <a class="xref" href="ch03_183.htm#PERL2-CMD-UNSHIFT" title="unshift"><b class="xref.cmd">unshift</B
></A
> before calling
<code class="literal">dl_findfile()</CODE
>.
<a class="xref" href="ch03_183.htm#PERL2-CMD-UNSHIFT" title="unshift"><b class="xref.cmd">unshift</B
></A
> can be used to add directories to the front of the search order
either to save search time or to override standard libraries with the same
name.

The load function that <code class="literal">dl_load_file()</CODE
> calls might require an absolute
pathname.  The <code class="literal">dl_findfile()</CODE
> function and <code class="literal">@dl_library_path</CODE
>
can be used to search for and return the absolute pathname for the
library/object that you wish to load.</P
></DD
><dt class="term"><code class="literal">@dl_resolve_using</CODE
></DT
><dd class="listitem"><p class="para">A list of additional libraries or other shared objects that can be
used to resolve any undefined symbols that might be generated by a
later call to <code class="literal">dl_load_file()</CODE
>.
This is only required on some platforms that do not handle dependent
libraries automatically.  For example, the Socket extension shared library
(<em class="emphasis">auto/Socket/Socket.so</EM
>) contains references to many socket functions
that need to be resolved when it's loaded.  Most platforms will
automatically know where to find the &quot;dependent&quot; library (for example,
<em class="emphasis">/usr/lib/libsocket.so</EM
>). A few platforms 
need to be told the location
of the dependent library explicitly.  Use <code class="literal">@dl_resolve_using</CODE
> for this.

Example:</P
><pre class="programlisting">@dl_resolve_using = dl_findfile('-lsocket');</PRE
></DD
><dt class="term"><code class="literal">@dl_require_symbols</CODE
></DT
><dd class="listitem"><p class="para">A list of one or more symbol names that are in the library/object file
to be dynamically loaded.  This is only required on some platforms.</P
></DD
><dt class="term"><code class="literal">dl_error</CODE
></DT
><dd class="listitem"><pre class="programlisting">$message = dl_error();</PRE
><p class="para">Error message text from the last failed DynaLoader function.  Note that, similar
to <code class="literal">errno</CODE
> in UNIX, a successful function call does not reset
this message.  Implementations should detect the error as soon as it occurs in
any of the other functions and save the corresponding message for later
retrieval.  This will avoid problems on some platforms (such as SunOS) where the
error message is very temporary (see, for example, <em class="emphasis">dlerror</EM
>(3)).</P
></DD
><dt class="term"><code class="literal">$dl_debug</CODE
></DT
><dd class="listitem"><p class="para">Internal debugging messages are enabled when <code class="literal">$dl_debug</CODE
> is set
true.  Currently, setting <code class="literal">$dl_debug</CODE
> only affects the Perl side
of the DynaLoader.  These messages should help an application
developer to resolve any DynaLoader usage problems.

<code class="literal">$dl_debug</CODE
> is set to <code class="literal">$ENV{'PERL_DL_DEBUG'}</CODE
> if defined.

For the DynaLoader developer and porter there is a similar debugging
variable added to the C code (see <em class="emphasis">dlutils.c</EM
>) and enabled if Perl was
built with the <code class="literal">-DDEBUGGING</CODE
> flag.  This can also be set via the
<code class="literal">PERL_DL_DEBUG</CODE
> environment variable.  Set to 1 for minimal information or
higher for more.</P
></DD
><dt class="term"><code class="literal">dl_findfile</CODE
></DT
><dd class="listitem"><pre class="programlisting">@filepaths = dl_findfile(@names)</PRE
><p class="para">Determines the full paths (including file suffix) of one or more loadable files,
given their generic names and optionally one or more directories.  Searches
directories in <code class="literal">@dl_library_path</CODE
> by default and returns an
empty list if no files were found.  Names can be specified in a variety of
platform-independent forms.  Any names in the form <code class="literal">-lname</CODE
> are
converted into <em class="emphasis">libname.</EM
>*, where .* is an appropriate suffix
for the platform.  If a name does not already have a suitable prefix or suffix,
then the corresponding file will be sought by trying prefix and suffix
combinations appropriate to the platform: <em class="emphasis">$name.o</EM
>,
<em class="emphasis">lib$name.</EM
>* and <em class="emphasis">$name</EM
>.  If any
directories are included in <code class="literal">@names</CODE
>, they are searched before
<code class="literal">@dl_library_path</CODE
>.  Directories may be specified as
<code class="literal">-Ldir</CODE
>.  Any other names are treated as filenames to be
searched for.  
Using arguments of the form <code class="literal">-Ldir</CODE
> and
<code class="literal">-lname</CODE
> is recommended.  Example:</P
><pre class="programlisting">@dl_resolve_using = dl_findfile(qw(-L/usr/5lib -lposix));</PRE
></DD
><dt class="term"><code class="literal">dl_expandspec</CODE
></DT
><dd class="listitem"><pre class="programlisting">$filepath = dl_expandspec($spec)</PRE
><p class="para">Some unusual systems such as VMS require special filename handling in order to
deal with symbolic names for files (that is, VMS's Logical Names).  To support
these systems a <code class="literal">dl_expandspec()</CODE
> function can be implemented
either in the <em class="emphasis">dl_</EM
>*<em class="emphasis">.xs</EM
> file or code can
be added to the autoloadable <code class="literal">dl_expandspec()</CODE
> function in
<em class="emphasis">DynaLoader.pm</EM
>.</P
></DD
><dt class="term"><code class="literal">dl_load_file</CODE
></DT
><dd class="listitem"><pre class="programlisting">$libref = dl_load_file($filename)</PRE
><p class="para">Dynamically load <code class="literal">$filename</CODE
>, which must be the path to a shared object
or library.  An opaque &quot;library reference&quot; is returned as a handle for
the loaded object.  <code class="literal">dl_load_file()</CODE
> returns the undefined value on error.
(On systems that provide a handle for the loaded object such as SunOS
and HP-UX, the returned handle will be <code class="literal">$libref</CODE
>.  On other systems
<code class="literal">$libref</CODE
> will typically be <code class="literal">$filename</CODE
> or a pointer to a
buffer containing <code class="literal">$filename</CODE
>.
The application should not examine or alter <code class="literal">$libref</CODE
> in any way.)
Below are some of the functions that do the real work.  Such functions
should use the current values of <code class="literal">@dl_require_symbols</CODE
> and
<code class="literal">@dl_resolve_using</CODE
> if required.</P
><pre class="programlisting">SunOS:  dlopen($filename)
HP-UX:  shl_load($filename)
Linux:  dld_create_reference(@dl_require_symbols); dld_link($filename)
NeXT:   rld_load($filename, @dl_resolve_using)
VMS:    lib$find_image_symbol($filename, $dl_require_symbols[0])</PRE
></DD
><dt class="term"><code class="literal">dl_find_symbol</CODE
></DT
><dd class="listitem"><pre class="programlisting">$symref = dl_find_symbol($libref, $symbol)</PRE
><p class="para">Returns the address of the symbol <code class="literal">$symbol</CODE
>, or the undefined value
if not found.  If the
target system has separate functions to search for symbols of different
types, then <code class="literal">dl_find_symbol()</CODE
> should search for function symbols first
and then search for other types.

The exact manner in which the address is returned in <code class="literal">$symref</CODE
> is not
currently defined.  The only initial requirement is that <code class="literal">$symref</CODE
> can
be passed to, and understood by, <code class="literal">dl_install_xsub()</CODE
>.  Here are some
current implementations:</P
><pre class="programlisting">SunOS:  dlsym($libref, $symbol)
HP-UX:  shl_findsym($libref, $symbol)
Linux:  dld_get_func($symbol) and/or dld_get_symbol($symbol)
NeXT:   rld_lookup(&quot;_$symbol&quot;)
VMS:    lib$find_image_symbol($libref, $symbol)</PRE
></DD
><dt class="term"><code class="literal">dl_undef_symbols</CODE
></DT
><dd class="listitem"><pre class="programlisting">@symbols = dl_undef_symbols()</PRE
><p class="para">Returns a list of symbol names which remain undefined after
<code class="literal">dl_load_file()</CODE
>.  It returns <code class="literal">()</CODE
> if these
names are not known.  Don't worry if your platform does not provide a mechanism
for this.  Most platforms do not need it and hence do not provide it; they just
return an empty list.</P
></DD
><dt class="term"><code class="literal">dl_install_xsub</CODE
></DT
><dd class="listitem"><pre class="programlisting">dl_install_xsub($perl_name, $symref [, $filename])</PRE
><p class="para">Creates a new Perl external subroutine named <code class="literal">$perl_name</CODE
> using
<code class="literal">$symref</CODE
> as a pointer to the function that implements the routine.
This is simply a direct call to <code class="literal">newXSUB()</CODE
>. It returns a reference to
the installed function.

The <code class="literal">$filename</CODE
> parameter is used by Perl to identify the source file for
the function if required by <a class="xref" href="ch03_027.htm#PERL2-CMD-DIE" title="die"><b class="xref.cmd">die</B
></A
>, <a class="xref" href="ch03_010.htm#PERL2-CMD-CALLER" title="caller"><b class="xref.cmd">caller</B
></A
>, or the debugger.  If
<code class="literal">$filename</CODE
> is not defined, then <em class="emphasis">DynaLoader</EM
> will be used.<a class="indexterm" name="AUTOID-19882"></A
></P
></DD
><dt class="term"><code class="literal">bootstrap()</CODE
></DT
><dd class="listitem"><pre class="programlisting">bootstrap($module);</PRE
><p class="para">This is the normal entry point for automatic dynamic loading in Perl.<a class="indexterm" name="AUTOID-19889"></A
></P
><p class="para">It performs the following actions:</P
><ul class="itemizedlist"><li class="listitem"><p class="para">Locates an <em class="emphasis">auto/$module</EM
> directory by searching <code class="literal">@INC</CODE
></P
></LI
><li class="listitem"><p class="para">Uses <code class="literal">dl_findfile()</CODE
> to determine the filename to load</P
></LI
><li class="listitem"><p class="para">Sets <code class="literal">@dl_require_symbols</CODE
> to <code class="literal">(&quot;boot_$module&quot;)</CODE
></P
></LI
><li class="listitem"><p class="para">Executes an <em class="emphasis">auto/$module/$module.bs</EM
> file if it exists
(typically used to add to <code class="literal">@dl_resolve_using</CODE
> any files that
are required to load the module on the current platform)</P
></LI
><li class="listitem"><p class="para">Calls <code class="literal">dl_load_file()</CODE
> to load the file</P
></LI
><li class="listitem"><p class="para">Calls <code class="literal">dl_undef_symbols()</CODE
> and warns if any symbols are undefined</P
></LI
><li class="listitem"><p class="para">Calls <code class="literal">dl_find_symbol()</CODE
> for <code class="literal">&quot;boot_$module&quot;</CODE
></P
></LI
><li class="listitem"><p class="para">Calls <code class="literal">dl_install_xsub()</CODE
> to install it as <code class="literal">${module}::bootstrap</CODE
></P
></LI
><li class="listitem"><p class="para">Calls <code class="literal">&amp;{&quot;${module}::bootstrap&quot;}</CODE
> to bootstrap the module (actually
it uses the function reference returned by <code class="literal">dl_install_xsub()</CODE
> for speed)</P
></LI
></UL
></DD
></DL
><a class="indexterm" name="AUTOID-19926"></A
><a class="indexterm" name="AUTOID-19927"></A
><a class="indexterm" name="AUTOID-19928"></A
><a class="indexterm" name="AUTOID-19929"></A
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT2" href="ch07_011.htm#AUTOID-19686" title="7.2.11 DirHandle&nbsp;- Supply Object Methods for Directory Handles"><img src="../gifs/txtpreva.gif" alt="Previous: 7.2.11 DirHandle&nbsp;- Supply Object Methods for Directory Handles" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Programming Perl"><img src="../gifs/txthome.gif" alt="Programming Perl" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT2" href="ch07_013.htm#AUTOID-19930" title="7.2.13 English&nbsp;- Use English or awk Names for Punctuation Variables"><img src="../gifs/txtnexta.gif" alt="Next: 7.2.13 English&nbsp;- Use English or awk Names for Punctuation Variables" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">7.2.11 DirHandle&nbsp;- Supply Object Methods for Directory Handles</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">7.2.13 English&nbsp;- Use English or awk Names for Punctuation Variables</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
