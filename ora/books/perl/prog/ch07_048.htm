<html><head>
<title>[Chapter 7] 7.2.48 overload&nbsp;- Overload Perl's Mathematical Operations</TITLE>
<meta name="DC.title" content="Programming Perl"><meta name="DC.creator" content="Larry Wall, Tom Christiansen &amp; Randal L. Schwartz"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T02:03:05Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-149-6" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch07_02.htm" title="7.2 Library Modules"><link rel="prev" href="ch07_047.htm#AUTOID-23564" title="7.2.47 ODBM_File&nbsp;- Tied Access to ODBM Files"><link rel="next" href="ch07_049.htm#PERL2-CH-7-SECT-1.66" title="7.2.49 POSIX&nbsp;- Perl Interface to IEEE Std 1003.1"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Programming Perl" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Programming Perl"><area shape="RECT" coords="467,0,514,18" href="../search/psrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT2" href="ch07_047.htm#AUTOID-23564" title="7.2.47 ODBM_File&nbsp;- Tied Access to ODBM Files"><img src="../gifs/txtpreva.gif" alt="Previous: 7.2.47 ODBM_File&nbsp;- Tied Access to ODBM Files" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch07_01.htm" title="7. The Standard Perl Library">Chapter 7<br>The Standard Perl Library</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT2" href="ch07_049.htm#PERL2-CH-7-SECT-1.66" title="7.2.49 POSIX&nbsp;- Perl Interface to IEEE Std 1003.1"><img src="../gifs/txtnexta.gif" alt="Next: 7.2.49 POSIX&nbsp;- Perl Interface to IEEE Std 1003.1" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT2"><h3 class="sect2"><a class="title" name="AUTOID-23571">7.2.48 overload&nbsp;- Overload Perl's Mathematical Operations</A
></H3
><pre class="programlisting"># In the SomeThing module:
package SomeThing;

use overload
    '+' =&gt; \&amp;myadd,
    '-' =&gt; \&amp;mysub;

# In your other code:
use SomeThing;

$a = SomeThing-&gt;new(57);
$b=5+$a;

if (overload::Overloaded $b) {...}  # is $b subject to overloading?

$strval = overload::StrVal $b;</PRE
><p class="para"><a class="indexterm" name="CH07.OVER1"></A
><a class="indexterm" name="CH07.OVER2"></A
><a class="indexterm" name="CH07.OVER3"></A
><a class="indexterm" name="AUTOID-23583"></A
><em class="emphasis">Caveat Scriptor:</EM
>  This interface is the subject of ongoing
research.  Feel free to play with it, but don't be too surprised if the
interface changes subtly (or not so subtly) as it is developed further.
If you rely on it for a mission-critical application, please be sure to
write some good regression tests.  (Or perhaps in this case we should
call them &quot;progression&quot; tests.)</P
><p class="para">This module allows you to substitute class methods or your own subroutines
for standard Perl operators.  For example, the code:</P
><pre class="programlisting">package Number;
use overload
    &quot;+&quot;  =&gt; \&amp;add,
    &quot;*=&quot; =&gt; &quot;muas&quot;;</PRE
><p class="para">declares function <code class="literal">add()</CODE
> for addition, and method
<code class="literal">muas()</CODE
> in the Number class (or one of its base classes) for
the assignment form <code class="literal">*=</CODE
> of multiplication.</P
><p class="para">Arguments to <code class="literal">use overload</CODE
> come in key/value pairs.  Legal values
are values permitted inside a <code class="literal">&amp;{ ... }</CODE
> call, so the name of a
subroutine, a reference to a subroutine, or an anonymous subroutine will
all work.  Legal keys are listed below.</P
><p class="para">The subroutine <code class="literal">add()</CODE
> will be called to execute
<code class="literal">$a+$b</CODE
> if <code class="literal">$a</CODE
> is a reference to an object
blessed into the package <code class="literal">Number</CODE
>, or if <code class="literal">$a</CODE
>
is not an object from a package with overloaded addition, but
<code class="literal">$b</CODE
> is a reference to a <code class="literal">Number</CODE
>.  It can
also be called in other situations, like <code class="literal">$a+=7</CODE
>, or
<code class="literal">$a++</CODE
>.  See the section on &quot;Autogeneration&quot;.</P
><div class="sect3"><h4 class="sect3"><a class="title" name="PERL2-CH-7-SECT-1.54">7.2.48.1 Calling conventions for binary operations</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-23609"></A
>The functions specified with the <code class="literal">use overload</CODE
> directive are
typically called with three arguments.  (See the &quot;No Method&quot; section later in
this chapter for the four-argument case.)  If the corresponding operation is
binary, then the first two arguments are the two arguments of the operation.
However, due to general object-calling conventions, the first argument should
always be an object in the package, so in the situation of
<code class="literal">7+$a</CODE
>, the order of the arguments gets interchanged before the
method is called.  It probably does not matter when implementing the addition
method, but whether the arguments are reversed is vital to the subtraction
method.  The method can query this information by examining the third argument,
which can take three different values:</P
><dl class="variablelist"><dt class="term">false (0)</DT
><dd class="listitem"><p class="para">The order of arguments is as in the current operation.</P
></DD
><dt class="term">true (1)</DT
><dd class="listitem"><p class="para">The arguments are reversed.</P
></DD
><dt class="term">undefined</DT
><dd class="listitem"><p class="para">The current operation is an assignment variant (as in
<code class="literal">$a+=7</CODE
>), but the usual function is called instead.  This additional
information can be used to generate some optimizations.</P
></DD
></DL
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PERL2-CH-7-SECT-1.55">7.2.48.2 Calling conventions for unary operations</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-23631"></A
>Unary operations are considered binary operations with the second argument being
<a class="xref" href="ch03_180.htm#PERL2-CMD-UNDEF" title="undef"><b class="xref.cmd">undef</B
></A
>.  Thus the function that overloads
<code class="literal">{&quot;++&quot;}</CODE
> is called with arguments <code class="literal">($a, undef,
&quot;&quot;)</CODE
> when <code class="literal">$a</CODE
>++ is executed.</P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PERL2-CH-7-SECT-1.56">7.2.48.3 Overloadable operations</A
></H4
><p class="para">The following operations can be specified with <code class="literal">use overload</CODE
>:</P
><ul class="itemizedlist"><li class="listitem"><p class="para"><em class="emphasis">Arithmetic operations</EM
></P
><blockquote class="screen"><pre class="screen">+    -    *    /    %    **    &lt;&lt;    &gt;&gt;    x    .
+=   -=   *=   /=   %=   **=   &lt;&lt;=   &gt;&gt;=   x=   .=</PRE
></BLOCKQUOTE
><p class="para"><a class="indexterm" name="AUTOID-23647"></A
><a class="indexterm" name="AUTOID-23649"></A
>For these operations a substituted non-assignment variant can be called if
the assignment variant is not available.  Methods for operations &quot;<code class="literal">+</CODE
>&quot;,
&quot;<code class="literal">-</CODE
>&quot;, &quot;<code class="literal">+=</CODE
>&quot;, and &quot;<code class="literal">-=</CODE
>&quot; can be called to automatically generate
increment and decrement methods.  The operation &quot;<code class="literal">-</CODE
>&quot; can be used to
autogenerate missing methods for unary minus or <code class="literal">abs()</CODE
>.</P
></LI
><li class="listitem"><p class="para"><em class="emphasis">Comparison operations</EM
></P
><blockquote class="screen"><pre class="screen">&lt;   &lt;=  &gt;   &gt;=  ==  !=  &lt;=&gt;
lt  le  gt  ge  eq  ne  cmp</PRE
></BLOCKQUOTE
><p class="para"><a class="indexterm" name="AUTOID-23664"></A
>The <code class="literal">&lt;=&gt;</CODE
> operator can substitute for any of the other numeric compare
operators, and <b class="emphasis.bold">cmp</B
> can substitute for any missing string compare
operators.  When using <a class="xref" href="ch03_153.htm#PERL2-CMD-SORT" title="sort"><b class="xref.cmd">sort</B
></A
> on
arrays, <code class="literal">cmp</CODE
> is used to compare values subject to <code class="literal">use overload</CODE
>.</P
></LI
><li class="listitem"><p class="para"><em class="emphasis">Bit and unary operations</EM
><a class="indexterm" name="AUTOID-23674"></A
><a class="indexterm" name="AUTOID-23677"></A
><a class="indexterm" name="AUTOID-23679"></A
></P
><blockquote class="screen"><pre class="screen">&amp;   ^   |   neg   !   ~</PRE
></BLOCKQUOTE
><p class="para">&quot;<code class="literal">neg</CODE
>&quot; stands for unary minus.  If the method for <code class="literal">neg</CODE
> is not
specified, it can be autogenerated using the method for subtraction.</P
></LI
><li class="listitem"><p class="para"><em class="emphasis">Increment and decrement</EM
></P
><blockquote class="screen"><pre class="screen">++   --</PRE
></BLOCKQUOTE
><p class="para"><a class="indexterm" name="AUTOID-23691"></A
><a class="indexterm" name="AUTOID-23693"></A
><a class="indexterm" name="AUTOID-23695"></A
><a class="indexterm" name="AUTOID-23698"></A
>If undefined, addition and subtraction methods can be
used instead.  These operations are called both in prefix and
postfix form.</P
></LI
><li class="listitem"><p class="para"><em class="emphasis">Transcendental functions</EM
></P
><blockquote class="screen"><pre class="screen">atan2   cos   sin   exp   abs   log   sqrt</PRE
></BLOCKQUOTE
><p class="para">If <code class="literal">abs</CODE
> is unavailable, it can be autogenerated using methods
for &quot;<code class="literal">&lt;</CODE
>&quot; or &quot;<code class="literal">&lt;=&gt;</CODE
>&quot; combined with either unary minus or subtraction.</P
></LI
><li class="listitem"><p class="para"><em class="emphasis">Boolean, string and numeric conversion</EM
></P
><blockquote class="screen"><pre class="screen">bool   &quot;&quot;   0+</PRE
></BLOCKQUOTE
><p class="para">(Yes, that really is two double-quotes in a row.)  If one or two of these
operations are unavailable, the remaining ones can be used instead.
<code class="literal">bool</CODE
> is used in the flow control operators (like <b class="emphasis.bold">while</B
> and <b class="emphasis.bold">if</B
>) and for the
trinary &quot;<code class="literal">?:</CODE
>&quot; operation.  These functions can return any
arbitrary Perl value.  If the corresponding operation for this value is
overloaded, too, then that operation will be called again with this value.</P
></LI
><li class="listitem"><p class="para"><em class="emphasis">Special</EM
></P
><blockquote class="screen"><pre class="screen">nomethod  fallback  =</PRE
></BLOCKQUOTE
><p class="para">The following sections provide explanation.</P
></LI
></UL
><p class="para">Three keys are recognized by Perl that are not covered by the above
descriptions: &quot;<code class="literal">nomethod</CODE
>&quot;,
&quot;<code class="literal">fallback</CODE
>&quot;, and
&quot;<code class="literal">=</CODE
>&quot;.</P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PERL2-CH-7-SECT-1.57">7.2.48.4 No method</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-23730"></A
>&quot;<code class="literal">nomethod</CODE
>&quot; should be followed by a reference to a
function of four parameters.  If defined, it is called when the overloading
mechanism cannot find a method for some operation.  The first three arguments of
this function coincide with the arguments for the corresponding method if it
were found; the fourth argument is the symbol corresponding to the missing
method.  If several methods are tried, the last one is used.  </P
><p class="para">For example,
<code class="literal">1-$a</CODE
> can be equivalent to:</P
><pre class="programlisting">&amp;nomethodMethod($a, 1, 1, &quot;-&quot;)</PRE
><p class="para">if the pair <code class="literal">&quot;nomethod&quot; =&gt; &quot;nomethodMethod&quot;</CODE
> was specified in the <code class="literal">use
overload</CODE
> directive.</P
><p class="para">If some operation cannot be resolved and there is no function assigned to
&quot;<code class="literal">nomethod</CODE
>&quot;, then an exception will be raised via
<a class="xref" href="ch03_027.htm#PERL2-CMD-DIE" title="die"><b class="xref.cmd">die</B
></A
> unless
&quot;<code class="literal">fallback</CODE
>&quot; was specified as a key in a
<code class="literal">use overload</CODE
> directive.</P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PERL2-CH-7-SECT-1.58">7.2.48.5 Fallback</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-23747"></A
>The &quot;<code class="literal">fallback</CODE
>&quot; key governs what to do if a method for a
particular operation is not found.  Three different cases are possible depending
on the value of &quot;<code class="literal">fallback</CODE
>&quot;:</P
><dl class="variablelist"><dt class="term">undefined</DT
><dd class="listitem"><p class="para">Perl tries to use a substituted method (see the section later on
&quot;Autogeneration&quot;.  If this fails, it then tries to call the method
specified for &quot;<code class="literal">nomethod</CODE
>&quot;; if missing, an exception will be
raised.</P
></DD
><dt class="term">true</DT
><dd class="listitem"><p class="para">The same as for the undefined value, but no exception is raised.  Instead,
Perl silently reverts to what it would have done were there no <code class="literal">use
overload</CODE
> present.</P
></DD
><dt class="term">defined, but false</DT
><dd class="listitem"><p class="para">No autogeneration is tried.  Perl tries to call the method specified
for &quot;<code class="literal">nomethod</CODE
>&quot;, and if this is missing, raises an exception.</P
></DD
></DL
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PERL2-CH-7-SECT-1.59">7.2.48.6 Copy constructor</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-23770"></A
><a class="indexterm" name="AUTOID-23773"></A
>The value for &quot;<code class="literal">=</CODE
>&quot; is a reference to a function with three
arguments; that is, it looks like the other values in <code class="literal">use
overload</CODE
>.  However, it does not overload the Perl assignment
operator.  This would rub Camel hair the wrong way.</P
><p class="para">This operation is called when a <em class="emphasis">mutator</EM
> is applied
to a reference that shares its object with some other reference, such
as:</P
><pre class="programlisting">$a=$b;
$a++;</PRE
><p class="para">In order to change <code class="literal">$a</CODE
> but not <code class="literal">$b</CODE
>, a copy
of <code class="literal">$$a</CODE
> is made, and <code class="literal">$a</CODE
> is assigned a
reference to this new object.  This operation is done during execution of the
<code class="literal">$a++</CODE
>, and not during the assignment, (so before the increment
<code class="literal">$$a</CODE
> coincides with <code class="literal">$$b</CODE
>).  This is only
done if <code class="literal">++</CODE
> is expressed via a method for
&quot;<code class="literal">++</CODE
>&quot; or &quot;<code class="literal">+=</CODE
>&quot;.
Note that if this operation is expressed via &quot;<code class="literal">+</CODE
>&quot; (a nonmutator):</P
><pre class="programlisting">$a=$b;
$a=$a+1;</PRE
><p class="para">then <code class="literal">$a</CODE
> does not reference a new copy of <code class="literal">$$a</CODE
>, since
<code class="literal">$$a</CODE
> does not
appear as an lvalue when the above code is executed.</P
><p class="para">If the copy constructor is required during the execution of some mutator, but a
method for &quot;<code class="literal">=</CODE
>&quot; was not specified, it can be
autogenerated as a string copy if the object is a plain scalar.</P
><p class="para">As an example, the actually executed code for:</P
><pre class="programlisting">$a=$b;
# Something else which does not modify $a or $b...
++$a;</PRE
><p class="para">may be:</P
><pre class="programlisting">$a=$b;
# Something else which does not modify $a or $b...
$a = $a-&gt;clone(undef, &quot;&quot;);
$a-&gt;incr(undef, &quot;&quot;);</PRE
><p class="para">This assumes <code class="literal">$b</CODE
> is subject to overloading,
&quot;<code class="literal">++</CODE
>&quot; was overloaded with
<code class="literal">\&amp;incr</CODE
>, and &quot;<code class="literal">=</CODE
>&quot; was
overloaded with <code class="literal">\&amp;clone</CODE
>.</P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PERL2-CH-7-SECT-1.60">7.2.48.7 Autogeneration</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-23812"></A
><a class="indexterm" name="AUTOID-23814"></A
><a class="indexterm" name="AUTOID-23817"></A
>If a method for an operation is not found, and the value for
&quot;<code class="literal">fallback</CODE
>&quot; is true or undefined, Perl tries to
autogenerate a substitute method for the missing operation based on the defined
operations.  Autogenerated method substitutions are possible for the following
operations:</P
><dl class="variablelist"><dt class="term"><em class="emphasis">Assignment forms of arithmetic operations</EM
></DT
><dd class="listitem"><p class="para"><code class="literal">$a+=$b</CODE
> can use the method for
&quot;<code class="literal">+</CODE
>&quot; if the method for
&quot;<code class="literal">+=</CODE
>&quot; is not defined.</P
></DD
><dt class="term"><em class="emphasis">Conversion operations</EM
> </DT
><dd class="listitem"><p class="para">String, numeric, and Boolean conversion are calculated in terms of one
another if not all of them are defined.</P
></DD
><dt class="term"><em class="emphasis">Increment and decrement</EM
></DT
><dd class="listitem"><p class="para">The <code class="literal">++$a</CODE
> operation can be expressed in terms of
<code class="literal">$a+=1</CODE
> or <code class="literal">$a+1</CODE
>, and
<code class="literal">$a--</CODE
> in terms of <code class="literal">$a-=1</CODE
>
and <code class="literal">$a-1</CODE
>.</P
></DD
><dt class="term"><code class="literal">abs($a)</CODE
></DT
><dd class="listitem"><p class="para">Can be expressed in terms of <code class="literal">$a&lt;0</CODE
> and <code class="literal">-$a</CODE
> (or <code class="literal">0-$a</CODE
>).</P
></DD
><dt class="term"><em class="emphasis">Unary minus</EM
></DT
><dd class="listitem"><p class="para">Can be expressed in terms of subtraction.</P
></DD
><dt class="term"><em class="emphasis">Concatenation</EM
></DT
><dd class="listitem"><p class="para">Can be expressed in terms of string conversion.</P
></DD
><dt class="term"><em class="emphasis">Comparison operations</EM
> </DT
><dd class="listitem"><p class="para">Can be expressed in terms of its three-valued counterpart: either
<code class="literal">&lt;=&gt;</CODE
> or <code class="literal">cmp</CODE
>:</P
><blockquote class="screen"><pre class="screen">&lt;,  &gt;,  &lt;=, &gt;=, ==, !=    <em class="emphasis">in terms of </EM
>&lt;=&gt;
lt, gt, le, ge, eq, ne    <em class="emphasis">in terms of </EM
>cmp</PRE
></BLOCKQUOTE
></DD
><dt class="term"><em class="emphasis">Copy operator</EM
></DT
><dd class="listitem"><p class="para">Can be expressed in terms of an assignment to the dereferenced value if this
value is a scalar and not a reference.</P
></DD
></DL
><blockquote class="warning"><p class="para"><strong>WARNING:</STRONG
> One restriction for the comparison operation is that even if, for example,
<code class="literal">cmp</CODE
> returns a blessed reference, the autogenerated <code class="literal">lt</CODE
>
function will produce only a standard logical value based on the
numerical value of the result of <code class="literal">cmp</CODE
>.  In particular, a working
numeric conversion is needed in this case (possibly expressed in terms of
other conversions).</P
><p class="para">Similarly, <code class="literal">.=</CODE
>  and <code class="literal">x=</CODE
> operators lose their overloaded
properties if the string conversion substitution is applied.</P
><p class="para">When you <a class="xref" href="ch03_014.htm#PERL2-CMD-CHOP" title="chop"><b class="xref.cmd">chop</B
></A
> an object that is subject to overloaded operations, the
object is promoted to a string and its overloading properties are lost.
The same can happen with other operations as well.</P
></BLOCKQUOTE
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PERL2-CH-7-SECT-1.62">7.2.48.8 Run-time overloading</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-23892"></A
><a class="indexterm" name="AUTOID-23894"></A
>Since all <a class="xref" href="ch03_185.htm#PERL2-CMD-USE" title="use"><b class="xref.cmd">use</B
></A
> directives are executed at compile-time, the only way to
change overloading during run-time is:</P
><pre class="programlisting">eval 'use overload &quot;+&quot; =&gt; \&amp;addmethod';</PRE
><p class="para">You can also say:</P
><pre class="programlisting">eval 'no overload &quot;+&quot;, &quot;--&quot;, &quot;&lt;=&quot;';</PRE
><p class="para">although the use of these constructs during run-time is questionable.</P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PERL2-CH-7-SECT-1.63">7.2.48.9 Public functions</A
></H4
><p class="para">The <code class="literal">overload</CODE
> module provides the following public functions:</P
><dl class="variablelist"><dt class="term"><code class="literal">overload::StrVal(</CODE
><code class="replaceable"><i>arg</I
></CODE
><code class="literal">)</CODE
></DT
><dd class="listitem"><p class="para">Gives string value of <code class="replaceable"><i>arg</I
></CODE
> if stringify overloading is absent.<a class="indexterm" name="AUTOID-23915"></A
></P
></DD
><dt class="term"><code class="literal">overload::Overloaded(</CODE
><code class="replaceable"><i>arg</I
></CODE
><code class="literal">)</CODE
></DT
><dd class="listitem"><p class="para">Returns true if <code class="replaceable"><i>arg</I
></CODE
> is subject to overloading of some operations.<a class="indexterm" name="AUTOID-23925"></A
></P
></DD
><dt class="term"><code class="literal">overload::Method(</CODE
><code class="replaceable"><i>obj</I
></CODE
>, <code class="replaceable"><i>op</I
></CODE
>)</DT
><dd class="listitem"><p class="para">Returns the undefined value or a reference to the method that implements
<code class="replaceable"><i>op</I
></CODE
>.<a class="indexterm" name="AUTOID-23935"></A
></P
></DD
></DL
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PERL2-CH-7-SECT-1.64">7.2.48.10 Diagnostics</A
></H4
><p class="para">When Perl is run with the <code class="literal">-Do</CODE
> switch or its equivalent, overloading
induces diagnostic messages.</P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PERL2-CH-7-SECT-1.0.65">7.2.48.11 Bugs</A
></H4
><p class="para">Because it is used for overloading, the per-package associative array
<code class="literal">%OVERLOAD</CODE
> now has a special meaning in Perl.</P
><p class="para">Overloading is not yet inherited via the <b class="emphasis.bold">@ISA</B
> tree, though
individual methods may be.</P
><a class="indexterm" name="AUTOID-23947"></A
><a class="indexterm" name="AUTOID-23948"></A
><a class="indexterm" name="AUTOID-23949"></A
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT2" href="ch07_047.htm#AUTOID-23564" title="7.2.47 ODBM_File&nbsp;- Tied Access to ODBM Files"><img src="../gifs/txtpreva.gif" alt="Previous: 7.2.47 ODBM_File&nbsp;- Tied Access to ODBM Files" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Programming Perl"><img src="../gifs/txthome.gif" alt="Programming Perl" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT2" href="ch07_049.htm#PERL2-CH-7-SECT-1.66" title="7.2.49 POSIX&nbsp;- Perl Interface to IEEE Std 1003.1"><img src="../gifs/txtnexta.gif" alt="Next: 7.2.49 POSIX&nbsp;- Perl Interface to IEEE Std 1003.1" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">7.2.47 ODBM_File&nbsp;- Tied Access to ODBM Files</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">7.2.49 POSIX&nbsp;- Perl Interface to IEEE Std 1003.1</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="index.htm" title="Programming Perl">Programming Perl</A
> | <a href="../advprog/index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
