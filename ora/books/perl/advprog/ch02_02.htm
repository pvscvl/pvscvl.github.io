<html><head>
<title>[Chapter 2] 2.2 Example: Matrices</TITLE>
<meta name="DC.title" content="Advanced Perl Programming"><meta name="DC.creator" content="Sriram Srinivasan"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:30:41Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-220-4" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch02_01.htm" title="2. Implementing Complex Data Structures"><link rel="prev" href="ch02_01.htm" title="2.1 User-Defined Structures"><link rel="next" href="ch02_03.htm#ch02-pgfId-943836" title="2.3 Professors, Students, Courses"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Advanced Perl Programming" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,54" href="index.htm" alt="Advanced Perl Programming"><area shape="RECT" coords="467,0,514,18" href="../search/asrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch02_01.htm" title="2.1 User-Defined Structures"><img src="../gifs/txtpreva.gif" alt="Previous: 2.1 User-Defined Structures" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch02_01.htm" title="2. Implementing Complex Data Structures">Chapter 2<br>Implementing Complex Data Structures</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch02_03.htm#ch02-pgfId-943836" title="2.3 Professors, Students, Courses"><img src="../gifs/txtnexta.gif" alt="Next: 2.3 Professors, Students, Courses" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch02-18651">2.2 Example: Matrices</A
></H2
><p class="para"><em class="emphasis"></EM
><a class="indexterm" name="ch02-idx-949516-0"></A
><a class="indexterm" name="ch02-idx-949516-1"></A
><a class="indexterm" name="ch02-idx-949516-2"></A
>Before we embark on this example, you must know that if you really want a good efficient implementation of matrices, you should check out the <a class="indexterm" name="ch02-idx-949520-0"></A
>PDL module (Perl Data Language) from CPAN.</P
><p class="para">To gain a better understanding of different matrix representations, we will write routines to construct these structures from a data file and to multiply two matrices. The file is formatted as follows:</P
><pre class="programlisting">MAT1
1  2  4
10 30 0

MAT2
5  6 
1  10</PRE
><p class="para">Each matrix has a label and some data. We use these labels to create global variables with the corresponding names (<kbd class="command">@MAT1</KBD
> and <kbd class="command">@MAT2</KBD
>).</P
><p class="para"><a class="indexterm" name="ch02-idx-949521-0"></A
><a class="indexterm" name="ch02-idx-949521-1"></A
>An array of arrays is the most intuitive representation for a matrix in Perl, since there is no direct support for two-dimensional arrays: </P
><pre class="programlisting">@matrix = (
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9]
); 
# Change 6, the element at row  1, column 2 to 100
$matrix[1][2] = 100;</PRE
><p class="para">Note that <kbd class="command">@matrix</KBD
> is a simple array whose elements happen to be references to anonymous arrays. Further, recall that <kbd class="command">$matrix[1][2]</KBD
> is a simpler way of saying <kbd class="command">$matrix[1]-&gt;[2]</KBD
>.</P
><p class="para"><a class="xref" href="#ch02-35403" title="Reading a Matrix from a File">Example 2.1</A
> reads the file and creates the array of arrays structure for each matrix. Pay particular attention to the <kbd class="command">push</KBD
> statement (highlighted); it uses the symbolic reference facility to create variables (<kbd class="command">@{$matrix_name}</KBD
>) and appends a reference to a new row in every iteration. We are assured of newly allocated rows in every iteration because <kbd class="command">@row</KBD
> is local to that block, and when the <kbd class="command">if</KBD
> statement is done, its contents live on because we squirrel away a reference to the array's value. (Recall that it is the value that is reference counted, not the name.) </P
><div class="example"><h4 class="example"><a class="title" name="ch02-35403">Example 2.1: Reading a Matrix from a File</A
></H4
><pre class="programlisting">sub matrix_read_file {
    my ($filename) = @_;
    open (F, $filename) || die &quot;Could not open $filename: $!&quot;;
    while ($line = &lt;F&gt;) {
        chomp($line);
        next if $line =~ /^\s*$/; # skip blank lines
        if ($line =~ /^([A-Za-z]\w*)/) {
            $matrix_name = $1;
        } else {
            <b class="emphasis.bold">my (@row)</B
> = split (/\s+/, $line);
            <b class="emphasis.bold">push (@{$matrix_name}, \@row;) </B
># insert the row-array into
                                           # the outer matrix array
        }
    }
    close(F);
}</PRE
></DIV
><p class="para">Now let us use this array-of-arrays structure to multiply two matrices. In case you have forgotten how matrix multiplication works, the product of two matrices <b class="emphasis.bold">A</B
><sub class="subscript">mn</SUB
> (<em class="emphasis">m</EM
> rows, <em class="emphasis">n</EM
> columns) and <b class="emphasis.bold">B</B
><sub class="subscript">np</SUB
> is defined as</P
><img class="graphic" src="figs/eqn02_01.gif" alt="Equation 2.1"><p class="para">The element (i, j) of the matrix product is the sum of successive pairs of elements taken from the <em class="emphasis">i</EM
><sub class="subscript">th</SUB
> row of <b class="emphasis.bold">A</B
> and the <em class="emphasis">j</EM
><sub class="subscript">th</SUB
> column of <b class="emphasis.bold">B</B
>. Translated into Perl, it looks like <a class="xref" href="#ch02-13383" title="Matrix Multiply">Example 2.2</A
>.</P
><div class="example"><h4 class="example"><a class="title" name="ch02-13383">Example 2.2: Matrix Multiply</A
></H4
><pre class="programlisting">sub matrix_multiply {
    my ($r_mat1, $r_mat2) = @_;       # Taking matrices by reference
    my ($r_product);                  # Returing product by reference
    my ($r1, $c1) = matrix_count_rows_cols ($r_mat1);
    my ($r2, $c2) = matrix_count_rows_cols ($r_mat2);
    die &quot;Matrix 1 has $c1 columns and matrix 2 has $r2 rows.&quot; 
         . &quot; Cannot multiply\n&quot; unless ($c1 == $r2);
    for ($i = 0; $i &lt; $r1; $i++) {
        for ($j = 0; $j &lt; $c2; $j++) {
            $sum = 0;
            for ($k = 0; $k &lt; $c1; $k++) {
                $sum += <b class="emphasis.bold">$r_mat1-&gt;[$i][$k]</B
> * $r_mat2-&gt;[$k][$j];
            }
            $r_product-&gt;[$i][$j] = $sum; 
        }
    }
    $r_product;
}
       
sub matrix_count_rows_cols {  # return number of rows and columns
    my ($r_mat)  = @_;
    my $num_rows = <b class="emphasis.bold">@$r_mat</B
>;
    my $num_cols = <b class="emphasis.bold">@{$r_mat-&gt;[0]}</B
>; # Assume all rows have an equal no.
                                   # of columns. 
    ($num_rows, $num_cols); 
}</PRE
></DIV
><p class="para"><code class="literal">matrix_multiply</CODE
> takes two matrices by reference. A single element is obtained as <kbd class="command">$r_mat-&gt;[$i][$j]</KBD
>, and a single row is obtained as <kbd class="command">$r_mat-&gt;[0]</KBD
>.<a class="indexterm" name="ch02-idx-949526-0"></A
><a class="indexterm" name="ch02-idx-949526-1"></A
></P
><div class="sect2"><h3 class="sect2"><a class="title" name="ch02-pgfId-946158">2.2.1 Hash of Hashes Representation</A
></H3
><p class="para"><a class="indexterm" name="ch02-idx-949524-0"></A
>If the matrix is large and sparse (only a few elements have nonzero values), a hash of hashes is likely a more space-efficient representation. For example, the matrix </P
><img class="graphic" src="figs/eqn02_02.gif" alt="Equation 2.2"><p class="para">can be built like this:</P
><pre class="programlisting">$matrix{0}{2} = 100;
$matrix{1}{0} = 200;
$matrix{2}{1} = 300;</PRE
><p class="para">The code above creates a hash table, <kbd class="command">%matrix</KBD
>, which maps a row number to a nested hash. Only rows with nonzero elements are represented. Each nested hash maps a column number to the actual value of the element at that row and column. Again, only columns with nonzero values in that row are represented. Of course, we have to store the total number of rows and columns separately, since unlike the array representation, these numbers are not implicit. Since <kbd class="command">%matrix</KBD
> is a hash, they can be stored as <kbd class="command">$matrix{rows}</KBD
> and <kbd class="command">$matrix{cols}</KBD
>. Because hash indices are strings, this approach is efficient only if the matrix is large and sparse. </P
><p class="para">To make the matrix routines developed in the previous section work for this new representation, it might seem a simple matter to convert all square brackets to braces. True, it'll work, but there's a subtle problem. Let's say that the entire third row of a matrix is zero-valued (so there's no entry for <kbd class="command">$r_mat-&gt;{2}</KBD
>). Now, if you do this:</P
><pre class="programlisting">$element = $r_mat-&gt;{2}{3}; </PRE
><p class="para">Perl automatically creates an entry for <kbd class="command">$r_mat-&gt;{2}</KBD
>, and hangs a hash reference off this entry. (The nested hash table is not created.) Thus the very act of examining an element gobbles up space, which is what we had hoped to avoid in the first place when we chose the hash of hashes representation. To prevent this, we have to check for the presence of a hash element with <kbd class="command">exists</KBD
> before retrieving it, as shown next:</P
><pre class="programlisting">if ((exists $r_mat-&gt;{$row}) &amp;&amp; (exists $r_mat-&gt;{$row}{$col})) {<a class="indexterm" name="ch02-idx-949529-0"></A
>
   ....</PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch02-pgfId-946217">2.2.2 Other Matrix Representations</A
></H3
><p class="para"><a class="indexterm" name="ch02-idx-949531-0"></A
>If the columns are sparse but the rows are well represented, you could choose an array of hashes structure. It is possible to store a matrix even more economically in terms of space, using a single hash table, at the expense of more complex code. If you imagine the matrix as a grid and number each cell of the grid consecutively, any cell can then be identified with exactly one unique number. So in a matrix with 10 rows and 5 columns, the element (8, 4) will have the number 38 (7 * 5 + 3) and hence can be referred to as <kbd class="command">$r_mat-&gt;{38}</KBD
>. We actually use this scheme in <a class="xref" href="ch15_01.htm" title="GUI Example: Tetris">Chapter 15, <cite class="chapter">GUI Example: Tetris</CITE
></A
> (though that usage is more for convenience than for saving space). The choice of data structure depends on the size of the matrices, performance, and coding convenience. </P
><p class="para">Changing the data structure of a program clearly ends up changing all code that depends on it. To contain the amount of changes required (should the structure change), it is always a good idea to have only a small set of procedures that know the structure. For example, if you had procedures such as <code class="literal">create_matrix(  )</CODE
>, <code class="literal">get_element(mat,i,j)</CODE
>, and <code class="literal">set_element(mat,i,j)</CODE
>, other procedures do not have to know the internal representation. Coding for change is often better than coding for run-time efficiency. We'll discuss this approach a great deal more in <a class="xref" href="ch07_01.htm" title="Object-Oriented Programming">Chapter 7</A
>.<em class="emphasis"></EM
><a class="indexterm" name="ch02-idx-949512-0"></A
><a class="indexterm" name="ch02-idx-949512-1"></A
><a class="indexterm" name="ch02-idx-949512-2"></A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch02_01.htm" title="2.1 User-Defined Structures"><img src="../gifs/txtpreva.gif" alt="Previous: 2.1 User-Defined Structures" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Advanced Perl Programming"><img src="../gifs/txthome.gif" alt="Advanced Perl Programming" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch02_03.htm#ch02-pgfId-943836" title="2.3 Professors, Students, Courses"><img src="../gifs/txtnexta.gif" alt="Next: 2.3 Professors, Students, Courses" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">2.1 User-Defined Structures</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">2.3 Professors, Students, Courses</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
