<html><head>
<title>[Chapter 20] 20.7 A Peek into the Future</TITLE>
<meta name="DC.title" content="Advanced Perl Programming"><meta name="DC.creator" content="Sriram Srinivasan"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:42:58Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-220-4" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch20_01.htm" title="20. Perl Internals"><link rel="prev" href="ch20_06.htm" title="20.6 Easy Embedding API"><link rel="next" href="ch20_08.htm" title="20.8 Resources"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Advanced Perl Programming" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,54" href="index.htm" alt="Advanced Perl Programming"><area shape="RECT" coords="467,0,514,18" href="../search/asrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch20_06.htm" title="20.6 Easy Embedding API"><img src="../gifs/txtpreva.gif" alt="Previous: 20.6 Easy Embedding API" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch20_01.htm" title="20. Perl Internals">Chapter 20<br>Perl Internals</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch20_08.htm" title="20.8 Resources"><img src="../gifs/txtnexta.gif" alt="Next: 20.8 Resources" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch20-11388">20.7 A Peek into the Future</A
></H2
><p class="para"><a class="indexterm" name="ch20-idx-973059-0"></A
><a class="indexterm" name="ch20-idx-973059-1"></A
>In this section, I'll describe a few of the exciting things that we can look forward to, possibly in the next few major releases of Perl.</P
><dl class="variablelist"><dt class="term">Multithreaded interpreter</DT
><dd class="listitem"><p class="para"><a class="indexterm" name="ch20-idx-973060-0"></A
>Malcolm Beattie has released an early version of a thread-safe Perl interpreter based on POSIX threads. (Search for the "thrperl" in the Perl 5 Porters archive [<a class="xref" href="ch20_08.htm" title="">4</A
>].) This modified interpreter is not thread-hot; that is, it does not use threads itself (unlike the Java environment, for example, which uses separate threads for updating the user interface and for garbage collection). It  allows the user to create as many threads as required and provides support for standard thread primitives such as monitors and condition variables. As currently implemented, all global data structures introduced in this chapter have simply become per-thread entities. That is, each thread gets its own set of stacks, its own stashes, and thread-local variables such as <kbd class="command">errgv</KBD
> (<kbd class="command">$@</KBD
>). Lexical variables are allocated out of subroutine and thread-specific scratchpads.</P
></DD
><dt class="term">Static typing hints</DT
><dd class="listitem"><p class="para"><a class="indexterm" name="ch20-idx-973061-0"></A
><a class="indexterm" name="ch20-idx-973061-1"></A
><a class="indexterm" name="ch20-idx-973061-2"></A
><a class="indexterm" name="ch20-idx-973061-3"></A
>Give hints to the interpreter for better optimization and type-checking. Larry's example, which has acquired near "hello world" status on the <em class="emphasis">p5p</EM
> list, is as follows:</P
><pre class="programlisting">    my Dog $spot = new Dog;</PRE
><p class="para">Now <kbd class="command">$spot</KBD
> is tagged at compile time as belonging to a class called <kbd class="command">Dog</KBD
>, so a call such as <kbd class="command">$spot-&gt;meow()</KBD
> will be a compile-time error, unless you have a mutant dog. </P
></DD
><dt class="term">Faster objects</DT
><dd class="listitem"><p class="para"><a class="indexterm" name="ch20-idx-973062-0"></A
>Expect better support for objects and a possible standard replacement for the ObjectTemplate module. You may be able to say something like this:</P
><pre class="programlisting">    package Dog;
    use Fields qw(breed color);
    $spot = new Dog;
    print $spot-&gt;{color};</PRE
><p class="para">What looks like a hash access in the last statement may in fact be optimized at<em class="emphasis"> compile-time</EM
> to an array access, by replacing the attribute name with the field offset; that is, <kbd class="command">$spot-&gt;{color}</KBD
> becomes <kbd class="command">$spot-&gt;[1]</KBD
>.</P
></DD
><dt class="term">Perl compiler</DT
><dd class="listitem"><p class="para"><a class="indexterm" name="ch20-idx-973063-0"></A
><a class="indexterm" name="ch20-idx-973063-1"></A
>Malcolm has also submitted a Perl compiler extension [<a class="xref" href="ch20_08.htm" title="">7</A
>], which is in its early stages as of this writing. It can be asked to translate a script to C code, which can be compiled to form an executable; as it happens, this executable is not much faster than the interpreted script, because most of the action still takes place in opcode functions as they exist now. Static typing hints may usher in some aggressive optimizations. For example, if you say:</P
><pre class="programlisting">     my integer $i;</PRE
><p class="para">the compiler would use C's native integer type, rather than an SV&nbsp;- this would speed up loops and arithmetic expressions.</P
><p class="para">The compiler can alternatively produce a byte-code file and have the interpreter <code class="literal">eval</CODE
> it subsequently, similar to the facilities provided by Python and Java. It also supports much better debugging options than those currently provided with <em class="emphasis">-D</EM
>.<a class="indexterm" name="ch20-idx-973065-0"></A
><a class="indexterm" name="ch20-idx-973065-1"></A
></P
></DD
></DL
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch20_06.htm" title="20.6 Easy Embedding API"><img src="../gifs/txtpreva.gif" alt="Previous: 20.6 Easy Embedding API" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Advanced Perl Programming"><img src="../gifs/txthome.gif" alt="Advanced Perl Programming" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch20_08.htm" title="20.8 Resources"><img src="../gifs/txtnexta.gif" alt="Next: 20.8 Resources" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">20.6 Easy Embedding API</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">20.8 Resources</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
