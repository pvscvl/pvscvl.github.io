<html><head>
<title>[Chapter 1] 1.7 References in Other Languages</TITLE>
<meta name="DC.title" content="Advanced Perl Programming"><meta name="DC.creator" content="Sriram Srinivasan"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:30:19Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-220-4" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch01_01.htm" title="1. Data References and Anonymous Storage"><link rel="prev" href="ch01_06.htm#ch01-pgfId-945311" title="1.6 A View of the Internals"><link rel="next" href="ch01_08.htm" title="1.8 Resources"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Advanced Perl Programming" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,54" href="index.htm" alt="Advanced Perl Programming"><area shape="RECT" coords="467,0,514,18" href="../search/asrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch01_06.htm#ch01-pgfId-945311" title="1.6 A View of the Internals"><img src="../gifs/txtpreva.gif" alt="Previous: 1.6 A View of the Internals" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch01_01.htm" title="1. Data References and Anonymous Storage">Chapter 1<br>Data References and Anonymous Storage</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch01_08.htm" title="1.8 Resources"><img src="../gifs/txtnexta.gif" alt="Next: 1.8 Resources" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch01-25363">1.7 References in Other Languages</A
></H2
><div class="sect2"><h3 class="sect2"><a class="title" name="ch01-pgfId-937673">1.7.1 Tcl</A
></H3
><p class="para"><a class="indexterm" name="ch01-idx-953757-0"></A
><a class="indexterm" name="ch01-idx-953757-1"></A
><a class="indexterm" name="ch01-idx-953757-2"></A
>Tcl does not have a way of dynamically allocating anonymous data structures but, being a dynamic language, supports creation of new variables (names assigned automatically) at run-time. This approach is not only slow, but also highly error prone. In addition, the only way to pass a variable by reference is to pass the actual name of a variable, such as Perl's symbolic references. All this makes it very difficult to create complex data structures (and very unmaintainable if you do so). But, in all fairness, it must be stressed that Tcl is meant to be a glue language between applications and toolkits, and it is expected that most complex processing happens in the C-based application itself, rather than within the script. Tcl was not designed to be used as a full-fledged scripting or development language (though I have heard that its limited scope hasn't stopped people from writing 50,000-line scripts to drive oil rigs!). </P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch01-pgfId-953816">1.7.2 Python</A
></H3
><p class="para"><a class="indexterm" name="ch01-idx-953817-0"></A
>Python is similar to Java in that, except for fundamental types, all objects are passed around by reference. This means that assigning a list-valued variable to another simply results in the second list variable being an alias of the first; if you want a copy, you have to explicitly do so and pay the corresponding price in performance. I much prefer this style to Perl's because you typically refer to structures much more than making a copy, and it is nice to have a default that is efficient and eases typing. </P
><p class="para">Like Perl, Python reference counts each of its data types, including user-defined types defined in C/C++ extensions. <a class="indexterm" name="ch01-idx-953820-0"></A
><a class="indexterm" name="ch01-idx-953820-1"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch01-pgfId-937717">1.7.3 C/C++</A
></H3
><p class="para"><a class="indexterm" name="ch01-idx-953758-0"></A
>C and C++ support pointers whose type safety can be checked at compile time. Since a pointer contains the raw address of the data, a reference to a piece of data is as efficient and compact as it gets. On the other hand, this puts all the responsibility of memory management on the programmer. It is worth examining the implementation of interpreters such as Tcl, Perl, and Python (all having been implemented in C) to learn about memory management strategies.</P
><p class="para">C++ supports the notion of references, which allows you to create aliases to existing variables. This facility is reminiscent of the typeglob aliasing facility (which we'll study in <a class="xref" href="ch03_01.htm" title="Typeglobs and Symbol Tables">Chapter 3</A
>) but bears no resemblance to Perl references.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch01-pgfId-937724">1.7.4 Java</A
></H3
><p class="para">In <a class="indexterm" name="ch01-idx-953759-0"></A
>Java, everything is passed by reference except for fundamental types such as <em class="emphasis">int</EM
> and <em class="emphasis">float</EM
>. There are no issues of memory management, since the Java framework supports garbage collection (which runs in a separate thread so as not to freeze up the application threads). Being as rich as C++ in data types and with no memory management hassles, it holds immense promise for programming-in-the-large.</P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch01_06.htm#ch01-pgfId-945311" title="1.6 A View of the Internals"><img src="../gifs/txtpreva.gif" alt="Previous: 1.6 A View of the Internals" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Advanced Perl Programming"><img src="../gifs/txthome.gif" alt="Advanced Perl Programming" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch01_08.htm" title="1.8 Resources"><img src="../gifs/txtnexta.gif" alt="Next: 1.8 Resources" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">1.6 A View of the Internals</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">1.8 Resources</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
