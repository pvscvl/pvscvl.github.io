<html><head>
<title>[Chapter 9] 9.3 Tying Hashes</TITLE>
<meta name="DC.title" content="Advanced Perl Programming"><meta name="DC.creator" content="Sriram Srinivasan"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:34:55Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-220-4" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch09_01.htm" title="9. Tie"><link rel="prev" href="ch09_02.htm#ch09-pgfId-948823" title="9.2 Tying Arrays"><link rel="next" href="ch09_04.htm" title="9.4 Tying Filehandles"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Advanced Perl Programming" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,54" href="index.htm" alt="Advanced Perl Programming"><area shape="RECT" coords="467,0,514,18" href="../search/asrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch09_02.htm#ch09-pgfId-948823" title="9.2 Tying Arrays"><img src="../gifs/txtpreva.gif" alt="Previous: 9.2 Tying Arrays" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch09_01.htm" title="9. Tie">Chapter 9<br>Tie</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch09_04.htm" title="9.4 Tying Filehandles"><img src="../gifs/txtnexta.gif" alt="Next: 9.4 Tying Filehandles" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch09-42446">9.3 Tying Hashes</A
></H2
><p class="para"><a class="indexterm" name="ch09-idx-955111-0"></A
><a class="indexterm" name="ch09-idx-955111-1"></A
><a class="indexterm" name="ch09-idx-955111-2"></A
>Accesses to tied hash tables are fully supported, unlike arrays. The tie-hash facility allows you to trap operations on the entire hash table (<kbd class="command">%h</KBD
> <kbd class="command">=</KBD
> <kbd class="command">()</KBD
>), accesses to individual elements, and queries (<kbd class="command">exists</KBD
>, <kbd class="command">defined</KBD
>, <kbd class="command">each</KBD
>, <kbd class="command">keys</KBD
>, and <kbd class="command">values</KBD
>). <a class="xref" href="#ch09-38081" title="tie and Hash Access">Table 9.3</A
> shows how these actions are mapped to method invocations on the tied object. </P
><br><table class="table" border="1" cellpadding="3"><caption class="table"><a class="title" name="ch09-38081">Table 9.3: tie and Hash Access</A
></CAPTION
><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1"><p class="para">When you say:</P
></TH
><th class="entry" align="LEFT" rowspan="1" colspan="1"><p class="para">Perl translates it to:</P
></TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><pre class="programlisting">tie %h, 'Foo', 'a' =&gt; 1</PRE
></TD
><td class="entry" rowspan="1" colspan="1"><pre class="programlisting">$obj = Foo-&gt;TIEHASH('a',1);</PRE
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><pre class="programlisting">$h{a}</PRE
></TD
><td class="entry" rowspan="1" colspan="1"><pre class="programlisting">$obj-&gt;FETCH ('a')</PRE
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><pre class="programlisting">$h{a} = 1</PRE
></TD
><td class="entry" rowspan="1" colspan="1"><pre class="programlisting">$obj-&gt;STORE ('a', 1)</PRE
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><pre class="programlisting">delete $h{a}</PRE
></TD
><td class="entry" rowspan="1" colspan="1"><pre class="programlisting">$obj-&gt;DELETE('a')</PRE
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><pre class="programlisting">exists $h{a}</PRE
></TD
><td class="entry" rowspan="1" colspan="1"><pre class="programlisting">$obj-&gt;EXISTS('a')</PRE
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><pre class="programlisting">keys (%h),values(%h)
each (%h)</PRE
></TD
><td class="entry" rowspan="1" colspan="1"><pre class="programlisting">$lk = $obj-&gt;FIRSTKEY ();
do {
   $val = $obj-&gt;FETCH{$lk};
} while ($lk = $obj-&gt;NEXTKEY($lk));</PRE
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><pre class="programlisting">%h = ()</PRE
></TD
><td class="entry" rowspan="1" colspan="1"><pre class="programlisting">$obj-&gt;CLEAR()</PRE
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><pre class="programlisting">%h = (a=&gt; 1)</PRE
></TD
><td class="entry" rowspan="1" colspan="1"><pre class="programlisting">$obj-&gt;CLEAR()
$obj-&gt;STORE('a',1)</PRE
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><pre class="programlisting">untie %h</PRE
></TD
><td class="entry" rowspan="1" colspan="1"><pre class="programlisting">$obj-&gt;DESTROY()</PRE
></TD
></TR
></TBODY
></TABLE
><p class="para"><kbd class="command">FIRSTKEY</KBD
><a class="indexterm" name="ch09-idx-955153-0"></A
><a class="indexterm" name="ch09-idx-955153-1"></A
> and <kbd class="command">NEXTKEY</KBD
> are expected to return the next key in the sequence. This suffices if <kbd class="command">keys</KBD
> is invoked by the calling code; but if <kbd class="command">values</KBD
> or <kbd class="command">each</KBD
> is called, it calls <kbd class="command">FETCH</KBD
> for each key.</P
><p class="para"><a class="indexterm" name="ch09-idx-955154-0"></A
>The most common (and natural-looking) use of <kbd class="command">tie</KBD
> is as a frontend for DBM files, which, as we mentioned earlier, are disk-based hash tables. Perl comes enabled with various flavors of DBM support. The following example uses the <a class="indexterm" name="ch09-idx-955156-0"></A
>SDBM module, which comes with the standard Perl distribution: </P
><pre class="programlisting">use Fcntl;
use SDBM_File;
tie (%h, 'SDBM_File', 'foo.dbm', O_RDWR|O_CREAT, 0640)
     || die $!;                    # Open dbm file
$h{a} = 10;                        # Write to file transparently
while (($k, $v) = each %h) {       # Iterate over all keys in file
    print &quot;$k,$v\n&quot;
}
untie %h;                          # Flush and close the dbm file</PRE
><p class="para">Perl old-timers may recognize the similarity to the <kbd class="command">dbm_open</KBD
> function. <kbd class="command">tie</KBD
> just happens to be a more general facility. </P
><p class="para">Tied hashes have the same problem outlined in the last section: You cannot store references unless you explicitly serialize the structures referred to into one stream (from which you can recreate the data structure later). The MLDBM module, which we will explore further in <a class="xref" href="ch10_01.htm" title="Persistence">Chapter 10</A
>, attempts to tie multilevel hashes to a DBM file.</P
><p class="para">Two other modules in the standard Perl distribution use <kbd class="command">tie</KBD
> internally. Config makes all information known to the build environment (that is, to <kbd class="command">configure</KBD
>) as a hash (<kbd class="command">%Config</KBD
>) in the caller's namespace, like this:</P
><pre class="programlisting">use Config;
while (($k, $v) = each %Config) {
    print &quot;$k =&gt; $v \n&quot;;
}</PRE
><p class="para"><a class="indexterm" name="ch09-idx-955155-0"></A
>Env is another standard library that uses <kbd class="command">tie</KBD
> to make environment variables appear as ordinary variables. We saw a non-<kbd class="command">tie</KBD
> variant of Env in the section <a class="xref" href="ch06_05.htm#ch06-pgfId-956256" title="Importing Symbols">"Importing Symbols"</A
> in <a class="xref" href="ch06_01.htm" title="Modules">Chapter 6, <cite class="chapter">Modules</CITE
></A
>.<a class="indexterm" name="ch09-idx-955114-0"></A
><a class="indexterm" name="ch09-idx-955114-1"></A
><a class="indexterm" name="ch09-idx-955114-2"></A
></P
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch09_02.htm#ch09-pgfId-948823" title="9.2 Tying Arrays"><img src="../gifs/txtpreva.gif" alt="Previous: 9.2 Tying Arrays" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Advanced Perl Programming"><img src="../gifs/txthome.gif" alt="Advanced Perl Programming" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch09_04.htm" title="9.4 Tying Filehandles"><img src="../gifs/txtnexta.gif" alt="Next: 9.4 Tying Filehandles" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">9.2 Tying Arrays</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">9.4 Tying Filehandles</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
