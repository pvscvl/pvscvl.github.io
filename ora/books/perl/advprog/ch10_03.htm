<html><head>
<title>[Chapter 10] 10.3 Record-Oriented Approach</TITLE>
<meta name="DC.title" content="Advanced Perl Programming"><meta name="DC.creator" content="Sriram Srinivasan"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:35:33Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-220-4" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch10_01.htm" title="10. Persistence"><link rel="prev" href="ch10_02.htm#ch10-pgfId-976240" title="10.2 Streamed Data"><link rel="next" href="ch10_04.htm" title="10.4 Relational Databases"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Advanced Perl Programming" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,54" href="index.htm" alt="Advanced Perl Programming"><area shape="RECT" coords="467,0,514,18" href="../search/asrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch10_02.htm#ch10-pgfId-976240" title="10.2 Streamed Data"><img src="../gifs/txtpreva.gif" alt="Previous: 10.2 Streamed Data" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch10_01.htm" title="10. Persistence">Chapter 10<br>Persistence</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch10_04.htm" title="10.4 Relational Databases"><img src="../gifs/txtnexta.gif" alt="Next: 10.4 Relational Databases" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch10-39949">10.3 Record-Oriented Approach</A
></H2
><p class="para"><a class="indexterm" name="ch10-idx-982615-0"></A
><a class="indexterm" name="ch10-idx-982615-1"></A
>In this section, we will study three modules that essentially depend on the DBM library. DBM is a disk-based hash table, originally written by Ken <a class="indexterm" name="ch10-idx-982629-0"></A
>Thompson for the Seventh Edition Unix system. This library has since spawned many variants: SDBM (Simple DBM, a public-domain module bundled with Perl), NDBM (New DBM, which is packaged with some operating systems), and GDBM (from the Free Software Foundation). All these libraries can be accessed from equivalent Perl modules, which use Perl's <kbd class="command">tie</KBD
> facility to provide transparent access to the disk-based table. Performance and portability are the only criteria for selecting one of these systems. Be warned that the files produced by these approaches are not interchangeable.</P
><div class="sect2"><h3 class="sect2"><a class="title" name="ch10-pgfId-979759">10.3.1 DBM</A
></H3
><p class="para"><a class="indexterm" name="ch10-idx-982626-0"></A
><a class="indexterm" name="ch10-idx-982626-1"></A
>We use SDBM here, because it is bundled with Perl. The <a class="indexterm" name="ch10-idx-982614-0"></A
>SDBM_File module provides a wrapper over this extension:</P
><pre class="programlisting">use Fcntl;
use SDBM_File;
tie (%capital, 'SDBM_File', 'capitals.dat', O_RDWR|O_CREAT, 0666) 
     || die $!;
$capital{USA}      = &quot;Washington D.C.&quot;;
$capital{Colombia} = &quot;Bogota&quot;;
untie %capital;</PRE
><p class="para">The <kbd class="command">tie</KBD
> statement associates the in-memory hash variable, <kbd class="command">%capital</KBD
>, with the disk-based hash file, <i class="filename">capitals.dat</I
>. Read and write accesses to <kbd class="command">%capital</KBD
> are automatically translated to corresponding accesses to the file. <kbd class="command">untie</KBD
> breaks this association and flushes any pending changes to the disk. <kbd class="command">O_RDWR</KBD
> and <kbd class="command">O_CREAT</KBD
>, "constants" imported from <kbd class="command">Fcntl</KBD
>, specify that <i class="filename">capitals.dat</I
> is to be opened for reading and writing, and to create it if it doesn't exist. The file's mode (bitmask for access privileges) is set to the 0644 in this case&nbsp;- the result of 0666 &amp; ~022, where 022 is the umask. </P
><p class="para">The biggest problem with the DBM approaches mentioned earlier is that the value in a tied key-value pair has to be a string or number; if it is a reference, these modules do not dereference it automatically. So to associate a key with a complex data structure, you must serialize the structure using Data::Dumper or Freeze-Thaw, which is exactly what is done by MLDBM, described next.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch10-pgfId-977111">10.3.2 MLDBM</A
></H3
><p class="para">Gurusamy <a class="indexterm" name="ch10-idx-982628-0"></A
>Sarathy's <a class="indexterm" name="ch10-idx-982627-0"></A
>MLDBM (multilevel DBM) stores complex values in a DBM file. It uses Data::Dumper to serialize any data structures, and uses a DBM module of your choice (SDBM_File is used by default) to send it to disk. This is how it is used:</P
><pre class="programlisting">use SDBM_File;
use MLDBM qw (SDBM_File); 
use Fcntl;
tie (%h, 'MLDBM', 'bar', O_CREAT|O_RDWR, 0666) || die $!;
$sample   = {'burnt' =&gt; 'umber', 'brownian' =&gt; 'motion'} ;
$h{pairs} = $sample;   # Creating a disk-based hash of hashes
untie %h;</PRE
><p class="para">All parameters to <kbd class="command">tie</KBD
> following the string "MLDBM" are simply passed to the module specified in the <kbd class="command">use</KBD
> statement. </P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch10-pgfId-977293">10.3.3 Berkeley DB</A
></H3
><p class="para">DB [<a class="xref" href="ch10_05.htm" title="">5</A
>]&nbsp;- also referred to as <i class="firstterm">Berkeley DB</I
><a class="indexterm" name="ch10-idx-982630-0"></A
>&nbsp;- is a public-domain C library of database access methods, including B+Tree, Extended Linear Hashing, and fixed/variable length records. The latest release also supports concurrent updates, transactions, and recovery. The corresponding Perl module, <a class="indexterm" name="ch10-idx-982634-0"></A
>DB_File, puts a DBM wrapper around the B-tree and hashing implementations, and a tied array wrapper over the fixed/variable length record (also known as the <kbd class="command">recno</KBD
> access method).</P
><p class="para">The DBM usage is identical to the ones shown in the preceding sections. The <kbd class="command">tie</KBD
> statement is as follows:</P
><pre class="programlisting">use DB_File;
use Fcntl;    # For the constants O_RDWR and O_CREAT
tie (%h, 'DB_File', $file, O_RDWR|O_CREAT, 0666, $DB_BTREE);</PRE
><p class="para">The <kbd class="command">$DB_BTREE</KBD
> constant tells the library to use the btree format, allowing the key-value pairs to be stored in a sorted, balanced multiway tree; that is, the keys are stored in lexical order. You can also specify your custom sorting subroutine like this:</P
><pre class="programlisting">$DB_BTREE-&gt;{'compare'} = \&amp;sort_ignorecase;
sub sort_ignorecase {
    my ($key1, $key2) = @_;
    $key1 =~ s/\s*//g;          # Get rid of white space
    $key2 =~ s/\s*//g;
    lc($key1) cmp lc($key2);    # Ignore case when comparing
}</PRE
><p class="para">Now, when you use <kbd class="command">keys</KBD
>, <kbd class="command">values</KBD
>, or <kbd class="command">each</KBD
> to retrieve data from the tied hash, you get them in your custom sorted order. An ordinary hash and the other DBM modules do not give you this facility. </P
><p class="para">You can use <kbd class="command">$DB_RECNO</KBD
> instead of <kbd class="command">$DB_BTREE</KBD
>, which uses <kbd class="command">TIEARRAY</KBD
> to treat a file as a collection of variable-length records:</P
><pre class="programlisting">use Fcntl;
use DB_File;
tie (@l, 'DB_File', 'foo.txt', O_RDWR|O_CREAT,0666, $DB_RECNO);
print $l[1];                    # Retrieve second line
$l[3] = 'Three musketeers';     # Modify fourth line
untie @l;</PRE
><p class="para">As was mentioned in <a class="xref" href="ch09_01.htm" title="Tie">Chapter 9, <cite class="chapter">Tie</CITE
></A
>, the current <kbd class="command">TIEARRAY</KBD
> implementation allows only array indexing; operators like <kbd class="command">push</KBD
> and <kbd class="command">splice</KBD
> are not supported. The DB_File module provides extra methods called <kbd class="command">push</KBD
>, <kbd class="command">pop</KBD
>, <kbd class="command">shift</KBD
>, <kbd class="command">unshift</KBD
>, and <kbd class="command">length</KBD
>, which can be used like this:</P
><pre class="programlisting">$db = tied @l;<i class="firstterm"></I
><a class="indexterm" name="ch10-idx-982632-0"></A
><a class="indexterm" name="ch10-idx-982632-1"></A
>
$db-&gt;push($x);<a class="indexterm" name="ch10-idx-982621-0"></A
><a class="indexterm" name="ch10-idx-982621-1"></A
></PRE
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch10_02.htm#ch10-pgfId-976240" title="10.2 Streamed Data"><img src="../gifs/txtpreva.gif" alt="Previous: 10.2 Streamed Data" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Advanced Perl Programming"><img src="../gifs/txthome.gif" alt="Advanced Perl Programming" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch10_04.htm" title="10.4 Relational Databases"><img src="../gifs/txtnexta.gif" alt="Next: 10.4 Relational Databases" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">10.2 Streamed Data</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">10.4 Relational Databases</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
