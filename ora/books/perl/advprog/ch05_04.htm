<html><head>
<title>[Chapter 5] 5.4 Using Eval for Expression Evaluation</TITLE>
<meta name="DC.title" content="Advanced Perl Programming"><meta name="DC.creator" content="Sriram Srinivasan"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:32:39Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-220-4" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch05_01.htm" title="5. Eval"><link rel="prev" href="ch05_03.htm" title="5.3 Watch Your Quotes"><link rel="next" href="ch05_05.htm#ch05-pgfId-943315" title="5.5 Using Eval for Efficiency"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Advanced Perl Programming" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,54" href="index.htm" alt="Advanced Perl Programming"><area shape="RECT" coords="467,0,514,18" href="../search/asrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch05_03.htm" title="5.3 Watch Your Quotes"><img src="../gifs/txtpreva.gif" alt="Previous: 5.3 Watch Your Quotes" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch05_01.htm" title="5. Eval">Chapter 5<br>Eval</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch05_05.htm#ch05-pgfId-943315" title="5.5 Using Eval for Efficiency"><img src="../gifs/txtnexta.gif" alt="Next: 5.5 Using Eval for Efficiency" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch05-35706">5.4 Using Eval for Expression Evaluation</A
></H2
><p class="para"><a class="indexterm" name="ch05-idx-951186-0"></A
><a class="indexterm" name="ch05-idx-951186-1"></A
>There are a number of tasks, such as parsing and expression evaluation, in which you can make Perl do all the dirty work. Assuming, of course, that your parsing requirements are similar to Perl's own. Perl, after all, knows a thing or two about parsing and evaluating Perlish statements!</P
><p class="para">Let's assume that your input data is a bunch of quoted strings and you would like to verify that the quotes are balanced:</P
><pre class="programlisting">'He said, &quot;come on over&quot;'
'There are times when &quot;Peter&quot; doesn\'t work at all'</PRE
><p class="para">Instead of fretting over backslash escapes and writing code to check whether the quotes are correctly paired (balanced), you can simply <kbd class="command">eval</KBD
> the strings, as shown in <a class="xref" href="#ch05-24985" title="eval.pl">Example 5.1</A
>. Remember that a string is a correct Perl expression too. If Perl puts an error in <kbd class="command">$@</KBD
>, you can be sure you have faulty input.</P
><div class="example"><h4 class="example"><a class="title" name="ch05-24985">Example 5.1: eval.pl</A
></H4
><pre class="programlisting">while (defined($s = &lt;&gt;)) {          # Read a line into $s
    $result = eval $s;              # Evaluate that line
    if ($@) {                       # Check for compile or run-time errors.
        print &quot;Invalid string:\n $s&quot;;
    } else {
        print $result, &quot;\n&quot;;
    }
}</PRE
></DIV
><p class="para"><a class="indexterm" name="ch05-idx-951234-0"></A
>The neat thing about this code is that it works equally well as a fancy calculator, because <kbd class="command">$s</KBD
> can be <em class="emphasis">any</EM
> valid Perl statement, with arithmetic operators, loops, variable assignments, subroutines, and so on. Here's how you might use the program:</P
><pre class="programlisting"><b class="emphasis.bold">% perl eval.pl</B
>
<b class="emphasis.bold">2 * log (10);</B
>
4.60517018598809
<b class="emphasis.bold">$a = 10; $a += $a ** 2;</B
>
110
<b class="emphasis.bold">for (1..10) {print $_ , &quot; &quot; }</B
>
1 2 3 4 5 6 7 8 9 10</PRE
><p class="para">For each line you enter, Perl computes and prints out the result (shown in non-bold type). How much simpler a shell can you possibly ask for? Note that the code requires each input line to be a fully formed expression, so you cannot write multiline expressions, but you can always change the program to start evaluating only when the user enters a blank line.</P
><p class="para">It is worth contrasting these few lines with the effort of learning <em class="emphasis">lex</EM
> and <em class="emphasis">yacc</EM
>&nbsp;- see, for example, the <em class="emphasis">yacc</EM
>, <em class="emphasis">lex</EM
>, and C-based calculator ("hoc") developed by Kernighan and Pike in their classic, The Unix Programming Environment. Other static languages such as Java and C++ present similar challenges: you are forced to reinvent the wheel, since you don't have access to the power of the compiler itself.</P
><div class="sect2"><h3 class="sect2"><a class="title" name="ch05-pgfId-947223">5.4.1 Expression Evaluation in Substitutions</A
></H3
><p class="para"><a class="indexterm" name="ch05-idx-951240-0"></A
><a class="indexterm" name="ch05-idx-951240-1"></A
><a class="indexterm" name="ch05-idx-951240-2"></A
>The Perl substitution operator is ordinarily of the form <kbd class="command">s/<code class="replaceable"><i>regex</I
></CODE
>/<code class="replaceable"><i>replacement</I
></CODE
>/</KBD
> and substitutes the replacement string wherever the input string matches the regular expression pattern. The <kbd class="command">/e</KBD
> flag adds a twist to this: it tells the substitution operator that the second part is a <em class="emphasis">Perl expression</EM
>, not an ordinary replacement string; the <em class="emphasis">result</EM
> of the expression is used as the replacement instead. Consider</P
><pre class="programlisting">$line = 'Expression Evaluation';
$line =~ s/(\w+)/ <b class="emphasis.bold">scalar (reverse($1)) /e</B
>g;
print $line; # prints &quot;noisserpxE noitaulavE&quot;</PRE
><p class="para">The second parameter to the substitute operator is an expression: <kbd class="command">reverse</KBD
> is used in a scalar context to reverse the string given to it. The <kbd class="command">/g</KBD
> flag ensures that every word is matched and reversed. </P
><p class="para">This topic is somewhat tangential to the <kbd class="command">eval</KBD
> keyword, but it is still germane to our discussion about run-time expression evaluation; in fact, <kbd class="command">/e</KBD
> stands for "expression," not for "eval." This expression is checked for syntax at compile-time, so if you need to watch for run-time errors, you still need to put the entire statement within an <kbd class="command">eval</KBD
> block. Consider another example, which replaces any string containing the pattern "number/number" with an equivalent fraction:</P
><pre class="programlisting">$l = 'His chances of winning are between 2/5 and 1/3';
eval {
    $l =~ s|(\d+)/(\d+)| $1 / $2 |eg;
};
print $l unless $@;</PRE
><p class="para">This prints "His chances of winning are between 0.4 and 0.333333333333333." The <kbd class="command">eval</KBD
> block traps divide-by-zero<a class="indexterm" name="ch05-idx-951243-0"></A
><a class="indexterm" name="ch05-idx-951243-1"></A
><a class="indexterm" name="ch05-idx-951243-2"></A
> errors.<a class="indexterm" name="ch05-idx-951190-0"></A
><a class="indexterm" name="ch05-idx-951190-1"></A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch05_03.htm" title="5.3 Watch Your Quotes"><img src="../gifs/txtpreva.gif" alt="Previous: 5.3 Watch Your Quotes" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Advanced Perl Programming"><img src="../gifs/txthome.gif" alt="Advanced Perl Programming" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch05_05.htm#ch05-pgfId-943315" title="5.5 Using Eval for Efficiency"><img src="../gifs/txtnexta.gif" alt="Next: 5.5 Using Eval for Efficiency" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">5.3 Watch Your Quotes</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">5.5 Using Eval for Efficiency</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
