<html><head>
<title>[Chapter 14] 14.7 Event Loops</TITLE>
<meta name="DC.title" content="Advanced Perl Programming"><meta name="DC.creator" content="Sriram Srinivasan"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:39:15Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-220-4" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch14_01.htm" title="14. User Interfaces with Tk"><link rel="prev" href="ch14_06.htm" title="14.6 Event Bindings"><link rel="next" href="ch14_08.htm" title="14.8 Resources"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Advanced Perl Programming" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,54" href="index.htm" alt="Advanced Perl Programming"><area shape="RECT" coords="467,0,514,18" href="../search/asrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch14_06.htm" title="14.6 Event Bindings"><img src="../gifs/txtpreva.gif" alt="Previous: 14.6 Event Bindings" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch14_01.htm" title="14. User Interfaces with Tk">Chapter 14<br>User Interfaces with Tk</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch14_08.htm" title="14.8 Resources"><img src="../gifs/txtnexta.gif" alt="Next: 14.8 Resources" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch14-24907">14.7 Event Loops</A
></H2
><p class="para"><a class="indexterm" name="ch14-idx-1000893-0"></A
><a class="indexterm" name="ch14-idx-1000893-1"></A
><a class="indexterm" name="ch14-idx-1000893-2"></A
><code class="literal">MainLoop</CODE
> executes an event loop that picks up events from the underlying windowing system and dispatches it to the appropriate widgets. When a callback procedure is called in response to an event, it is the responsibility of the callback to return (or "yield") as soon as possible; otherwise, it holds up all events that have since arrived. </P
><p class="para">For long-running activities that are CPU-intensive, it is your responsibility to chop that activity up into manageable pieces and arrange for a timer to call the processing routine at regular intervals. This gives the event loop a chance to dispatch pending events. This kind of CPU sharing is called cooperative multitasking. Early versions of Microsoft Windows (until Version 3.1) similarly depended on your application being a good citizen; otherwise, it would hang the entire operating system.</P
><p class="para">For tasks such as ray-tracing and animations that are both CPU- and GUI-intensive, you can use the <kbd class="command">$widget-&gt;update</KBD
> method to process all events. This method doesn't return until all pending event messages (including repaint events) in the event queue have been processed. </P
><p class="para"><a class="indexterm" name="ch14-idx-1000905-0"></A
>Blocking system calls are not a very good idea in an event-driven environment, as we discussed in <a class="xref" href="ch12_01.htm" title="Networking with Sockets">Chapter 12</A
>. The most common of these are the <kbd class="command">read</KBD
> and <kbd class="command">write</KBD
> calls, especially if they are talking to pipes and sockets. For example, the diamond operator (<kbd class="command">&lt;&gt;</KBD
>) blocks until it can get a line of text. Instead of directly calling an I/O call, you must let Perl/Tk tell you that it is safe to use that call, since it won't block. Tk provides a procedure called <kbd class="command">fileevent</KBD
> that notifies a callback when the file descriptor becomes readable or writable. This is how you use it:</P
><pre class="programlisting">open (F, &quot;/tmp/foo&quot;);
$button-&gt;fileevent(F, &quot;readable&quot;, \&amp;read_file);
sub read_file {
    if (eof(F)) {
        $button-&gt;fileevent(F, &quot;readable&quot;, undef); # cancel binding
            return ;
    }
    if (sysread (F, $buf, 1024)) {
        $text-&gt;insert('end', $buf); # Append the data read
    } else {
        # sysread returned undef. Problem with file
        $text-&gt;insert('end', &quot;ERROR !!!&quot;; 
        button-&gt;fileevent(F, &quot;readable&quot;, undef); # cancel binding
    }
}</PRE
><p class="para">When the callback is invoked, Tk (which on Unix uses the <kbd class="command">select</KBD
> call internally) guarantees that at most one character is ready to be read or written. Beyond that it may or may not block; no assurances are given. The callback is also called if there's an end-of-file or error, so you must check both these conditions. Otherwise, the callback is called again as soon it returns, resulting in an infinite loop. As we discussed in the networking chapters, it is best to use nonblocking I/O if your system supports it. </P
><p class="para">In this chapter, we have studied widgets, event loops, timers, and event bindings. The next two chapters are designed to pull all these concepts together and to apply them to some practical problems. They also give us a chance to go beyond a mere test run of the two really neat widgets in the Tk pantheon: canvas and text.<a class="indexterm" name="ch14-idx-1000896-0"></A
><a class="indexterm" name="ch14-idx-1000896-1"></A
><a class="indexterm" name="ch14-idx-1000896-2"></A
><a class="indexterm" name="ch14-idx-1000896-3"></A
></P
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch14_06.htm" title="14.6 Event Bindings"><img src="../gifs/txtpreva.gif" alt="Previous: 14.6 Event Bindings" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Advanced Perl Programming"><img src="../gifs/txthome.gif" alt="Advanced Perl Programming" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch14_08.htm" title="14.8 Resources"><img src="../gifs/txtnexta.gif" alt="Next: 14.8 Resources" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">14.6 Event Bindings</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">14.8 Resources</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
