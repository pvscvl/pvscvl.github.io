<html><head>
<title>[Chapter 18] 18.3 SWIG Features</TITLE>
<meta name="DC.title" content="Advanced Perl Programming"><meta name="DC.creator" content="Sriram Srinivasan"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:40:10Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-220-4" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch18_01.htm" title="18. Extending Perl:A First Course"><link rel="prev" href="ch18_02.htm" title="18.2 Example: Fractals with Perl"><link rel="next" href="ch18_04.htm#ch18-pgfId-968095" title="18.4 XS Features"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Advanced Perl Programming" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,54" href="index.htm" alt="Advanced Perl Programming"><area shape="RECT" coords="467,0,514,18" href="../search/asrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch18_02.htm" title="18.2 Example: Fractals with Perl"><img src="../gifs/txtpreva.gif" alt="Previous: 18.2 Example: Fractals with Perl" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch18_01.htm" title="18. Extending Perl:A First Course">Chapter 18<br>Extending Perl:A First Course</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch18_04.htm#ch18-pgfId-968095" title="18.4 XS Features"><img src="../gifs/txtnexta.gif" alt="Next: 18.4 XS Features" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch18-11650">18.3 SWIG Features</A
></H2
><p class="para"><a class="indexterm" name="ch18-idx-971921-0"></A
>Having completed a tour of the extension process, let's zoom in for a closer look at SWIG's compendium of features. We mentioned earlier that SWIG handles a useful subset of ANSI C/C++, which means support for data structures as well as functions. Specifically, it supports the following:</P
><dl class="variablelist"><dt class="term">Constants and global variables</DT
><dd class="listitem"><p class="para">A C variable can be exported into Perl space as a scalar variable of the same name. SWIG supports the fundamental C data types, enums, and #defined constant values. Variables of complex or user-defined types are automatically mapped to a pair of get/set accessor functions.</P
></DD
><dt class="term">Pointers</DT
><dd class="listitem"><p class="para"><a class="indexterm" name="ch18-idx-971927-0"></A
>Every pointer is treated as a <kbd class="command">void</KBD
> <kbd class="command">*</KBD
> by default, regardless of whether it is a <kbd class="command">char**</KBD
> or <kbd class="command">Matrix*</KBD
> or <kbd class="command">double</KBD
> <kbd class="command">***</KBD
>. This strategy works especially well for user-defined types, because most C libraries don't expect you to dereference such pointers. For example, <code class="literal">fopen</CODE
> returns a <kbd class="command">FILE *</KBD
>, which is simply handed over to <kbd class="command">fread()</KBD
> and <kbd class="command">fwrite()</KBD
>. In Perl, this pointer is available as a scalar, and Perl doesn't have to know whether the pointer refers to an array, structure, or a typedef. On the other hand, if you want a <kbd class="command">Vector</KBD
> <kbd class="command">*</KBD
> to a list of integer-valued scalars, you will have to help SWIG out by providing a typemap.</P
></DD
><dt class="term">Typemaps</DT
><dd class="listitem"><p class="para"><a class="indexterm" name="ch18-idx-971928-0"></A
>Not every data type is a simple conversion from Perl to C or vice versa. SWIG (like <em class="emphasis">xsubpp</EM
>) provides a way for you to write arbitrary transformations, such as converting a Perl array to a 10-by-10 matrix. To write a typemap, you need to know Perl's API for accessing its internal data types, so we'll cover this topic  in the section <a class="xref" href="ch20_05.htm#ch20-pgfId-965850" title="SWIG Typemaps">"SWIG Typemaps"</A
> in <a class="xref" href="ch20_01.htm" title="Perl Internals">Chapter 20</A
>. Typemaps can be applied not just to function parameters, but also to structure members and global variables. You can also optionally create named typemaps, which apply to specific named entities (function arguments, variable names, function names), instead of all entities of that type.</P
></DD
><dt class="term">Arrays </DT
><dd class="listitem"><p class="para">Both simple <a class="indexterm" name="ch18-idx-971929-0"></A
>arrays (<kbd class="command">vector[100])</KBD
> and multidimensional arrays (<kbd class="command">vector[10][10]</KBD
>) are mapped to a simple pointer (<kbd class="command">vector</KBD
> <kbd class="command">*</KBD
>). Typemap support for arrays exists, but there are still a number of thorny issues for which SWIG cannot provide a general solution; please read the SWIG documentation for details.</P
></DD
><dt class="term">Structures and C++ classes</DT
><dd class="listitem"><p class="para"><a class="indexterm" name="ch18-idx-971930-0"></A
><a class="indexterm" name="ch18-idx-971930-1"></A
>SWIG automatically creates accessor functions for each member of a structure or class defined in the interface file. As with the other facilities, these declarations cannot have the full generality of a C structure or a C++ class, but they are powerful enough for handling most common interface issues. </P
></DD
><dt class="term">Methods</DT
><dd class="listitem"><p class="para"><a class="indexterm" name="ch18-idx-971934-0"></A
>SWIG provides constructor and destructor procedures, which allow you to allocate and free C structures from Perl space. You can convert basic C structures to objects in Perl space with a primitive called <kbd class="command">%addmethods</KBD
>.</P
></DD
><dt class="term">Ordinary functions</DT
><dd class="listitem"><p class="para"><a class="indexterm" name="ch18-idx-971931-0"></A
>SWIG creates function wrappers that look pretty similar to their C equivalents. Each parameter can be optionally typemapped, but since a typemap provides a translation in isolation (from other parameters), the <em class="emphasis">number</EM
> of parameters cannot be changed. This is not a constraint in XS. </P
><p class="para">In other words, with SWIG you cannot map the C function</P
><pre class="programlisting">    char ** permute(char *string); // returns permutations of string</PRE
><p class="para">to </P
><pre class="programlisting">    @array = permute ($str);
</PRE
><p class="para">because one parameter, <kbd class="command">char**</KBD
>, needs conversion to a variable number of scalars (to be assigned to <kbd class="command">@array</KBD
>). You can instead write a typemap to convert the <kbd class="command">char**</KBD
> to an array and <em class="emphasis">return its reference</EM
>, so in Perl space, it is accessible this way:</P
><pre class="programlisting">    $rarray = permute ($str);
    print join(' ', @$rarray);
</PRE
><p class="para">Of course, you can always write a wrapper Perl function and insert it in the <i class="filename">.pm</I
> file created automatically by SWIG:</P
><pre class="programlisting">    sub fancy_permute {
        @{permute($_[0])}; # dereferences array 
    }</PRE
></DD
><dt class="term">Default and optional parameters</DT
><dd class="listitem"><p class="para"><a class="indexterm" name="ch18-idx-971944-0"></A
>Parameters can have default values but, as in C++, can be applied only to the rightmost parameters. This is how you specify the function signature in the interface file:</P
><pre class="programlisting">    draw_mandel (file,width,height,orig_real,orig_imag,range,<b class="emphasis.bold">depth=30</B
>);
</PRE
><p class="para">This allows you to optionally skip the last parameter when calling from Perl.</P
></DD
><dt class="term">Centralized exception handling</DT
><dd class="listitem"><p class="para"><a class="indexterm" name="ch18-idx-971932-0"></A
>SWIG provides a <kbd class="command">%except</KBD
> directive to wrap all external library calls inside a generic exception handler. This way you can trap all user-defined errors and C++ exceptions in one central place and translate them into Perl exceptions. Please see the SWIG documentation for examples.</P
></DD
><dt class="term">Shadow classes</DT
><dd class="listitem"><p class="para"><a class="indexterm" name="ch18-idx-971933-0"></A
>SWIG optionally creates wrapper Perl code that allows you to access member attributes and functions of C or C++ objects using the Perl hash notation, <kbd class="command">$person-&gt;{age}</KBD
>. This mechanism is built on top of the attribute accessor functions mentioned earlier.</P
></DD
><dt class="term">Nested structures</DT
><dd class="listitem"><p class="para"><a class="indexterm" name="ch18-idx-971935-0"></A
><a class="indexterm" name="ch18-idx-971935-1"></A
><a class="indexterm" name="ch18-idx-971935-2"></A
>An embedded structure gets the same treatment as an outermost structure&nbsp;- accessor functions and support from shadow classes. </P
></DD
></DL
><p class="para">The following interface file shows an example of using classes, accessing methods, and creating shadow classes:</P
><pre class="programlisting">%module Graphics

class Shape {
public:
    int x, y; // origin
    int w, h; // width, ht (defines bounding area)
    draw();
};
class Polygon : public Shape {
public:
    Polygon(int x, int y, int w, int h);
    draw();
};</PRE
><p class="para">We invoke SWIG with the <kbd class="command">-c++</KBD
> option, since it is not enabled by default, and the <kbd class="command">-shadow</KBD
> option for creating shadow classes: </P
><pre class="programlisting">%<b class="emphasis.bold"> swig -c++ -shadow Graphics.i</B
></PRE
><p class="para">SWIG sets up an identical inheritance hierarchy in script space, and using this class in Perl feels completely natural:</P
><pre class="programlisting">use Graphics;
$poly = new Polygon(10, 10, 30, 40);
printf &quot;Origin: %d %d \n&quot;, $poly-&gt;{x}, poly-&gt;{y};
$poly-&gt;draw();</PRE
><p class="para">You'll be happy to know that SWIG properly handles the relationship between base classes and derived classes. For example, a function involving a base class will recognize pointers that have been blessed into a derived class. In the case of multiple inheritance, SWIG performs proper C++ type-casting to make sure the pointer values are correct. XS has no such feature.</P
><p class="para">While the shadow class feature is convenient, you should be aware that for every instance generated using <kbd class="command">new</KBD
>, an additional object is created internally. The reason is that to support the member access notation (<kbd class="command">$poly-&gt;{x}</KBD
>), <kbd class="command">new</KBD
> returns a tied hash, whose <kbd class="command">FETCH</KBD
> subroutine calls the appropriate accessor function. You know by now that the tie facility interposes an intermediate object.<a class="indexterm" name="ch18-idx-971924-0"></A
></P
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch18_02.htm" title="18.2 Example: Fractals with Perl"><img src="../gifs/txtpreva.gif" alt="Previous: 18.2 Example: Fractals with Perl" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Advanced Perl Programming"><img src="../gifs/txthome.gif" alt="Advanced Perl Programming" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch18_04.htm#ch18-pgfId-968095" title="18.4 XS Features"><img src="../gifs/txtnexta.gif" alt="Next: 18.4 XS Features" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">18.2 Example: Fractals with Perl</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">18.4 XS Features</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
