<html><head>
<title>[Chapter 7] Object-Oriented Programming</TITLE>
<meta name="DC.title" content="Advanced Perl Programming"><meta name="DC.creator" content="Sriram Srinivasan"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:33:38Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-220-4" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="index.htm" title="Advanced Perl Programming"><link rel="prev" href="ch06_09.htm#ch06-pgfId-951254" title="6.9 Language Comparisons"><link rel="next" href="ch07_02.htm#ch07-16028" title="7.2 Objects in Perl"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Advanced Perl Programming" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,54" href="index.htm" alt="Advanced Perl Programming"><area shape="RECT" coords="467,0,514,18" href="../search/asrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch06_09.htm#ch06-pgfId-951254" title="6.9 Language Comparisons"><img src="../gifs/txtpreva.gif" alt="Previous: 6.9 Language Comparisons" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 7</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch07_02.htm#ch07-16028" title="7.2 Objects in Perl"><img src="../gifs/txtnexta.gif" alt="Next: 7.2 Objects in Perl" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="chapter"><h1 class="chapter"><a class="title" name="ch07-24377">7. Object-Oriented Programming</A
></H1
><div class="htmltoc"><p><b>Contents:</B
><br><a class="sect1" href="#ch07-16694" title="7.1 OO: An Introduction">OO: An Introduction</A
><br><a class="sect1" href="ch07_02.htm#ch07-16028" title="7.2 Objects in Perl">Objects in Perl</A
><br><a class="sect1" href="ch07_03.htm" title="7.3 UNIVERSAL">UNIVERSAL</A
><br><a class="sect1" href="ch07_04.htm" title="7.4 Recap of Conventions">Recap of Conventions</A
><br><a class="sect1" href="ch07_05.htm#ch07-pgfId-969836" title="7.5 Comparison with Other OO Languages">Comparison with Other OO Languages</A
><br><a class="sect1" href="ch07_06.htm" title="7.6 Resources">Resources</A
></P
><p></P
></DIV
><div class="epigraph" align="right"><p class="para" align="right"><i>There was a child went forth every day,<br>And the first object he look'd upon, that object he became.</I
></P
><p class="attribution" align="right">-&nbsp;Walt Whitman, <cite class="citetitle">There Was a Child Went Forth</CITE
></P
></DIV
><p class="para">Object orientation (OO) is the latest software methodology to occupy the airwaves, hyped to a point where the term "object-oriented design" seems to automatically imply a good design. In this chapter, we will study what the noise is all about and build objects using Perl. I will leave it to the plethora of OO literature to convince you that there is a respectable middle-ground and that the object revolution is indeed a good thing.</P
><p class="para">If you are already conversant with OO, you could simply read the "Objects" section in <a class="xref" href="appb_01.htm" title="Syntax Summary">Appendix B, <cite class="appendix">Syntax Summary</CITE
></A
>. Among other things, it supplies a C++ example and translates it to equivalent Perl code.</P
><div class="sect1"><h2 class="sect1"><a class="title" name="ch07-16694">7.1 OO: An Introduction</A
></H2
><p class="para"><a class="indexterm" name="ch07-idx-969704-0"></A
><a class="indexterm" name="ch07-idx-969704-1"></A
>Fred <a class="indexterm" name="ch07-idx-969703-0"></A
>Brooks, in his classic <em class="emphasis">The Mythical Man-Month</EM
> [<a class="xref" href="ch07_06.htm" title="">18</A
>], says:</P
><blockquote class="blockquote"><p class="para">The programmer at wit's end for lack of space can often do best by disentangling himself from his code, rearing back, and contemplating his data. Representation <em class="emphasis">is</EM
> the essence of programming.</P
></BLOCKQUOTE
><p class="para">He was talking about space reduction, but it is nevertheless sage advice.</P
><p class="para">Complex systems are inherently hierarchical, and many abstractions and methodologies have been invented to take advantage of this aspect. Until the late seventies, functional decomposition (top-down design) held sway as the definitive method to understand and implement complex systems. A developer would begin by writing high-level pseudo-code and continue refining each part of it until it was detailed enough to be translated into an implementation language. Nicklaus <a class="indexterm" name="ch07-idx-969709-0"></A
>Wirth called this approach stepwise refinement. Then came structured methodologies, SA/SD (structured analysis/structured design) chief among them, which employed many tools and notations such as data-flow diagrams, process specifications, data dictionaries, state transition diagrams, and entity-relationship diagrams to design, document, and develop a system. The accent continued to be on the <em class="emphasis">procedural</EM
> side of systems development rather than on the <em class="emphasis">dynamic</EM
> (state transitions) or <em class="emphasis">structural</EM
> (data) facets.</P
><p class="para">The key realization in the last 15 years or so has been that a system's functionality tends to change a lot more than the data on which it acts. A personnel information system keeping track of employee details soon knows as much about an employee as it ever will. On the other hand, its functionality tends to track management reshuffles, tax laws, medical insurance changes, and the noisy arrivals and silent departures of Directors of Human Resources. </P
><p class="para">This realization has completely inverted the way a problem is tackled now. Data and ways of structuring it are now given primary importance, and code is organized in modules around important pieces of data. The benefits are immense and immediate.</P
><p class="para">First, the database and the code are in sync, since the code is organized along lines of data. There are those who cry about the "impedance mismatch" between object-oriented programs and <a class="indexterm" name="ch07-idx-969710-0"></A
><a class="indexterm" name="ch07-idx-969710-1"></A
>relational databases (RDBMSs), but that is because RDBMSs have been limited to simple data types; there is no fundamental mismatch between the relational and object models. Vendors such as Informix/Illustra and Oracle have recently begun to offer abstract data types also in their RDBMS offerings.</P
><p class="para">Focusing on data has another important advantage: Data structures tend to be something you can identify with. For example, an airline company has airplanes, routes, and flight legs as prominent entities. In designing a flight-planning system, these entities provide a good focus on which to center your discussions, analysis, and design. Anybody who has had writer's block when starting a brand-new design document would surely appreciate this approach! The final design and implementation are also more comprehensible (and hence maintainable) because it is easier to explain. Fred Brooks remarks in <cite class="citetitle">The Mythical Man-Month</CITE
>, "Show me your flowcharts and conceal your tables, and I'll continue to be mystified. Show me your tables, and I won't usually need your flowcharts; they'll be obvious." </P
><p class="para">Finally, a system divided into data-centric modules can be easily apportioned among a team of programmers. All changes to a given piece of data or a set of related data are done only by its "owner"; that developer becomes a component supplier for other people in the project. </P
><p class="para">Object orientation is the latest step along this course. Not only is the code data-centric, it also strives to <em class="emphasis">encapsulate</EM
><a class="indexterm" name="ch07-idx-969711-0"></A
> (hide) the actual data structures, preferring instead to expose a limited, well-documented interface: a set of functions that know how to manipulate these data structures. These data structures are called <em class="emphasis">objects</EM
>. VCRs, watches, cars, and other real-world objects are excellent examples of the kind of objects we wish to emulate, because they successfully hide all the myriad complexities behind really simple interfaces. (Of course, the fact that most VCRs show a blinking "12:00" indicates that there is still a considerable amount of interface simplification to be done.) While you can surely implement well-encapsulated data-centric designs using conventional languages such as C or COBOL or even assembler, object-oriented languages provide two features that are more than just syntactic conveniences: <em class="emphasis">polymorphism</EM
><a class="indexterm" name="ch07-idx-969713-0"></A
><a class="indexterm" name="ch07-idx-969713-1"></A
> and <em class="emphasis">inheritance</EM
>. We will see how these features facilitate the construction of reusable modules.</P
><p class="para">It must be stressed that OO methodologies are similar to SA/SD in that both account for the functional, dynamic, and structural aspects of a system. But they differ significantly in style and emphasis; OO design methodologies pay attention to data abstractions first and procedural abstractions last.<a class="indexterm" name="ch07-idx-969707-0"></A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch06_09.htm#ch06-pgfId-951254" title="6.9 Language Comparisons"><img src="../gifs/txtpreva.gif" alt="Previous: 6.9 Language Comparisons" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Advanced Perl Programming"><img src="../gifs/txthome.gif" alt="Advanced Perl Programming" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch07_02.htm#ch07-16028" title="7.2 Objects in Perl"><img src="../gifs/txtnexta.gif" alt="Next: 7.2 Objects in Perl" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">6.9 Language Comparisons</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">7.2 Objects in Perl</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
