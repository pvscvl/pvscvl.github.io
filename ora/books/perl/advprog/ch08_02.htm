<html><head>
<title>[Chapter 8] 8.2 Delegation</TITLE>
<meta name="DC.title" content="Advanced Perl Programming"><meta name="DC.creator" content="Sriram Srinivasan"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:34:41Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-220-4" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch08_01.htm" title="8. Object Orientation: The Next Few Steps"><link rel="prev" href="ch08_01.htm" title="8.1 Efficient Attribute Storage"><link rel="next" href="ch08_03.htm#ch08-pgfId-963783" title="8.3 On Inheritance"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Advanced Perl Programming" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,54" href="index.htm" alt="Advanced Perl Programming"><area shape="RECT" coords="467,0,514,18" href="../search/asrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch08_01.htm" title="8.1 Efficient Attribute Storage"><img src="../gifs/txtpreva.gif" alt="Previous: 8.1 Efficient Attribute Storage" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch08_01.htm" title="8. Object Orientation: The Next Few Steps">Chapter 8<br>Object Orientation: The Next Few Steps</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch08_03.htm#ch08-pgfId-963783" title="8.3 On Inheritance"><img src="../gifs/txtnexta.gif" alt="Next: 8.3 On Inheritance" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch08-27573">8.2 Delegation</A
></H2
><p class="para"><a class="indexterm" name="ch08-idx-968003-0"></A
><a class="indexterm" name="ch08-idx-968003-1"></A
>Delegation is a technique whereby an object forwards method calls to an appointed <em class="emphasis">delegate</EM
> object. In the following example, an <code class="literal">Employee</CODE
> class simply delegates all tax-related functionality to the <kbd class="command">$acccounting_dept</KBD
> object:</P
><pre class="programlisting">package Employee;
sub compute_after_tax_income {
    $me = $_[0];
    return $accounting_dept-&gt;compute_after_tax_income($me);
}</PRE
><p class="para">There are cases in which you want all method calls that are not handled by a class to be automatically forwarded to a delegate. This is a cinch in Perl, since the <kbd class="command">AUTOLOAD</KBD
> function is called when a procedure is not found within that package or its base classes:</P
><pre class="programlisting">package Employee;
sub AUTOLOAD {
    my $obj = $_[0];
    # $AUTOLOAD contains the name of the missing method

    # Never propagate DESTROY methods
    return if $AUTOLOAD =~ /::DESTROY$/;

    # Strip it off its leading package name (such as Employee::)
    $AUTOLOAD =~ s/^.*:://; 
    $obj-&gt;{delegate}-&gt;$AUTOLOAD(@_); # Note, $obj is still part of @_,
                                     # so the delegated function knows
                                     # the original target
}</PRE
><p class="para">Notice that <kbd class="command">AUTOLOAD</KBD
> is called if <kbd class="command">DESTROY</KBD
> is not defined, and it is important that you not forward that message, or the delegate will think Perl is about to destroy it and release its resources prematurely. </P
><p class="para">This technique is often employed in the guts of client/server libraries. In a typical client/server system, the server has the "real" objects. But the system is written in such a way that a client can remotely invoke a method of the object, with familiar OO syntax. For example, if a client program wants to invoke a method on a remote bank account, it should be able to say something like this:</P
><pre class="programlisting">$account-&gt;deposit(100); # Deposit 100 bucks.</PRE
><p class="para">On the surface, it seems like an ordinary method call. What the library hides from you is that the <kbd class="command">deposit()</KBD
> functionality is actually sitting on a different machine. How is this accomplished? Well, the <kbd class="command">$account</KBD
> object reference is actually a reference to a lightweight <em class="emphasis">proxy</EM
> object on the client side. Its sole purpose is to forward calls to the remote machine (by sending messages over a socket, for example) and to wait for the response to come back. In other words, the <kbd class="command">account</KBD
> object is not the real account. It is only a message forwarder. It delegates its functionality to the remote object with the help of the messaging system underneath. <a class="indexterm" name="ch08-idx-968005-0"></A
><a class="indexterm" name="ch08-idx-968005-1"></A
></P
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch08_01.htm" title="8.1 Efficient Attribute Storage"><img src="../gifs/txtpreva.gif" alt="Previous: 8.1 Efficient Attribute Storage" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Advanced Perl Programming"><img src="../gifs/txthome.gif" alt="Advanced Perl Programming" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch08_03.htm#ch08-pgfId-963783" title="8.3 On Inheritance"><img src="../gifs/txtnexta.gif" alt="Next: 8.3 On Inheritance" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">8.1 Efficient Attribute Storage</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">8.3 On Inheritance</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
