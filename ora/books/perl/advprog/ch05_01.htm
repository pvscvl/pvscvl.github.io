<html><head>
<title>[Chapter 5] Eval</TITLE>
<meta name="DC.title" content="Advanced Perl Programming"><meta name="DC.creator" content="Sriram Srinivasan"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:32:16Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-220-4" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="index.htm" title="Advanced Perl Programming"><link rel="prev" href="ch04_06.htm" title="4.6 Resources"><link rel="next" href="ch05_02.htm" title="5.2 The Block Form: Exception Handling"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Advanced Perl Programming" usemap="#srchmap" border="0"></H1
><map name="srchmap"><area shape="RECT" coords="0,0,466,54" href="index.htm" alt="Advanced Perl Programming"><area shape="RECT" coords="467,0,514,18" href="../search/asrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch04_06.htm" title="4.6 Resources"><img src="../gifs/txtpreva.gif" alt="Previous: 4.6 Resources" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 5</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch05_02.htm" title="5.2 The Block Form: Exception Handling"><img src="../gifs/txtnexta.gif" alt="Next: 5.2 The Block Form: Exception Handling" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="chapter"><h1 class="chapter"><a class="title" name="ch05-22043">5. Eval</A
></H1
><div class="htmltoc"><p><b>Contents:</B
><br><a class="sect1" href="#ch05-22194" title="5.1 The String Form: Expression Evaluation">The String Form: Expression Evaluation</A
><br><a class="sect1" href="ch05_02.htm" title="5.2 The Block Form: Exception Handling">The Block Form: Exception Handling</A
><br><a class="sect1" href="ch05_03.htm" title="5.3 Watch Your Quotes">Watch Your Quotes</A
><br><a class="sect1" href="ch05_04.htm#ch05-pgfId-947223" title="5.4 Using Eval for Expression Evaluation">Using Eval for Expression Evaluation</A
><br><a class="sect1" href="ch05_05.htm#ch05-pgfId-943315" title="5.5 Using Eval for Efficiency">Using Eval for Efficiency</A
><br><a class="sect1" href="ch05_06.htm" title="5.6 Using Eval for Time-Outs">Using Eval for Time-Outs</A
><br><a class="sect1" href="ch05_07.htm#ch05-pgfId-943598" title="5.7 Eval in Other Languages">Eval in Other Languages</A
><br><a class="sect1" href="ch05_08.htm" title="5.8 Resources">Resources</A
></P
><p></P
></DIV
><div class="epigraph" align="right"><p class="para" align="right"><i>One person's data is another person's program.</I
></P
><p class="attribution" align="right">-&nbsp;Programming Pearls, <cite class="citetitle">Communications of the ACM</CITE
>, Sept. 1985</P
></DIV
><p class="para">Years ago, a friend of mine showed me an elegant program running on a tiny 48K machine, the BBC Micro, that accepted any mathematical expression such as <code class="literal">sin(x)</CODE
> <code class="literal">+</CODE
> <code class="literal">cos</CODE
> <code class="literal">(x**2)</CODE
> and graphed it. Fresh from a study of parsers, I'd wondered how many hundreds of lines it took him to write it. He showed me the code; the entire program fit on the small screen. He had used the <code class="literal">eval</CODE
> statement provided by BASIC.</P
><p class="para">Most self-respecting scripting languages such as BASIC (some versions, anyway), Perl, Tcl, LISP, and Python have a feature that clearly sets them apart from systems programming languages like C: the ability to treat character strings as little programs.[<a class="footnote" href="#ch05-pgfId-947501">1</A
>]</P
><blockquote class="footnote"><div class="footnote"><p class="para"><a class="footnote" name="ch05-pgfId-947501">[1]</A
> On a related note, see the section <a class="xref" href="appb_06.htm" title="Dynamic Behavior">"Dynamic Behavior"</A
> in <a class="xref" href="appb_06.htm" title="Dynamic Behavior">Section 20.22</A
> for other Perl constructs that set Perl apart from systems programming languages.</P
></DIV
></BLOCKQUOTE
><p class="para">For me, Perl's <a class="indexterm" name="ch05-idx-951168-0"></A
><a class="indexterm" name="ch05-idx-951168-1"></A
><a class="indexterm" name="ch05-idx-951168-2"></A
>run-time evaluation capability is one of the biggest reasons for using the language. (The other is its terrific support for regular expressions.) I use run-time evaluation for creating little snippets of code on the fly, which then execute at typical Perl speeds (i.e., fast!), for writing sophisticated interpreters for little languages.[<a class="footnote" href="#ch05-pgfId-948916">2</A
>] The <kbd class="command">eval</KBD
> function is the gateway to this power. We will use this feature in <a class="xref" href="ch07_01.htm" title="Object-Oriented Programming">Chapter 7, <cite class="chapter">Object-Oriented Programming</CITE
></A
>, for creating object accessor functions, and in <a class="xref" href="ch11_01.htm" title="Implementing Object Persistence">Chapter 11, <cite class="chapter">Implementing Object Persistence</CITE
></A
>, for building an SQL query evaluator, among other things.</P
><blockquote class="footnote"><div class="footnote"><p class="para"><a class="footnote" name="ch05-pgfId-948916">[2]</A
> For a delightful discussion of little languages, do have a look at Jon Bentley's <em class="emphasis">More Programming Pearls</EM
> [<a class="xref" href="ch05_08.htm" title="">3</A
>].</P
></DIV
></BLOCKQUOTE
><p class="para">As it turns out, Perl's <kbd class="command">eval</KBD
> function works in two somewhat distinct ways, depending on the type of its argument. If given a <em class="emphasis">string</EM
>, <kbd class="command">eval</KBD
> treats the string as a little program and compiles and executes it (as mentioned above); this is called dynamic expression evaluation. The contents of the string may or may not be known at compile time. Alternatively, if given a <em class="emphasis">block</EM
> of code&nbsp;- that is, the code is known at compile time&nbsp;- <kbd class="command">eval </KBD
>traps run-time exceptions.</P
><p class="para">Dynamic expression evaluation and exception handling are very different topics and one would expect them to be performed by different keywords. Larry Wall once mentioned that he had toyed with the idea of using a different keyword, <kbd class="command">try</KBD
>, for the exception-handling version, but he was into keyword conservation at that point. I find that a single keyword actually works well because expressions evaluated on the fly have a greater chance of generating run-time exceptions as code known at compile-time.</P
><p class="para">In this chapter, you will gain an in-depth understanding of how the two forms of <kbd class="command">eval</KBD
> work and add an important dimension to your toolkit of idioms.</P
><div class="sect1"><h2 class="sect1"><a class="title" name="ch05-22194">5.1 The String Form: Expression Evaluation</A
></H2
><p class="para"><a class="indexterm" name="ch05-idx-951169-0"></A
><a class="indexterm" name="ch05-idx-951169-1"></A
>When Perl is given a file to execute or a string as a <a class="indexterm" name="ch05-idx-951213-0"></A
>command line option (using    <em class="emphasis">-e</EM
>), it needs to parse the contents, check it for syntax errors, and, if all is fine, execute it. Perl makes this feature available to the programmer through the <kbd class="command">eval</KBD
> <em class="emphasis">string</EM
> form. This contrasts powerfully with languages such as C, C++, or Java, where the compiler itself is a separate beast from your program, not available to it at run-time. In other words, the Perl interpreter itself works <em class="emphasis">somewhat</EM
> like this:</P
><pre class="programlisting"># Slurp in the entire file
while ($line = &lt;&gt;) {
    $str .= $line;   # Accumulate the entire file.
}

# $str now contains the entire file. Execute it !
eval $str;</PRE
><p class="para">As you can see, <kbd class="command">eval</KBD
> handles any Perl script handed to it. The beauty of this thing is that this facility is available not just to Larry, but to mortals like you and me. Try this:</P
><pre class="programlisting"># put some code inside $str
$str = '$c = $a + $b'; # Perl doesn't care what's inside $str
$a = 10; $b = 20;
eval $str;             # Treat $str as code, and execute it.
print $c;              # prints 30</PRE
><p class="para">In this snippet, <kbd class="command">$str</KBD
> is treated as an ordinary string at first, because that is what it is. But <kbd class="command">eval</KBD
> thinks of it as a program and executes it. The important point is that it doesn't think of it as a <em class="emphasis">separate</EM
> program, but as if it belonged right there in the original code <em class="emphasis">instead</EM
> of the <code class="literal">eval</CODE
> statement, as shown in <a class="xref" href="#ch05-17637" title="eval compiles and executes the string in its own context">Figure 5.1</A
>.</P
><h4 class="figure"><a class="title" name="ch05-17637">Figure 5.1: eval compiles and executes the string in its own context</A
></H4
><img class="graphic" src="figs/wpa_0501.gif" alt="Figure 5.1"><p class="para">For this reason, the string that is given to <kbd class="command">eval</KBD
> can use <a class="indexterm" name="ch05-idx-951214-0"></A
><a class="indexterm" name="ch05-idx-951214-1"></A
>variables and subroutines available to it at that point, including <kbd class="command">my</KBD
> and <kbd class="command">local</KBD
> variables, and optionally produce new ones in the same environment. In the preceding example, the string given to <kbd class="command">eval</KBD
> adds two initialized variables (<kbd class="command">$a</KBD
> and <kbd class="command">$b</KBD
>) and produces a new variable, <kbd class="command">$c</KBD
>. </P
><p class="para">If you have more than one statement inside the string (remember that the string can be as big a program as you want), <kbd class="command">eval</KBD
> evaluates all of them and returns the result of the last evaluation:</P
><pre class="programlisting">$str = '$a++; $a + $b'; # Contains two expressions
$a = 10; $b = 20;
$c = eval $str; # $c gets 31 (result of the 2nd expression, $a+$b)</PRE
><p class="para">Of course, it's quite pointless to <code class="literal">eval</CODE
> a piece of code that you know at compile time, as in the example above. Things get interesting if <kbd class="command">$str</KBD
> comes from elsewhere&nbsp;- standard input, a file, or over the network. We will shortly look at some examples that make use of this.</P
><blockquote class="note"><p class="para"><strong>NOTE:</STRONG
> <a class="indexterm" name="ch05-idx-951215-0"></A
><a class="indexterm" name="ch05-idx-951215-1"></A
>The string form of <kbd class="command">eval</KBD
> is a security risk. If the string argument comes from an untrusted source and contains, say,</P
><p class="para">     <kbd class="command">system(</KBD
>'<kbd class="command">rm</KBD
> <kbd class="command">*</KBD
>'<kbd class="command">)</KBD
></P
><p class="para">the code would be merrily executed&nbsp;- and result in a distinct lack of merriment on your part. In situations in which you cannot trust input, you can use the taint-checking option provided by Perl, which prevents you from using data derived from outside the program to affect files or things outside the program [<a class="xref" href="ch05_08.htm" title="">5</A
>]. You can also use the Safe module bundled with the Perl distribution, which provides safe compartments in which to <code class="literal">eval</CODE
> strings, similar to the environment that a web browser provides for Java or Tcl/Tk applets. </P
></BLOCKQUOTE
><p class="para">What if <kbd class="command">$str</KBD
> doesn't contain a valid Perl expression? Perl then puts an error message in a special variable called <kbd class="command">$@</KBD
><a class="indexterm" name="ch05-idx-951216-1"></A
><a class="indexterm" name="ch05-idx-951216-2"></A
> (or <kbd class="command">$EVAL_ERROR</KBD
>, if you use the English module). Since <kbd class="command">eval</KBD
> compiles the string before actually executing it, this can be either a compilation or a run-time error. <kbd class="command">$@</KBD
> is guaranteed to be <kbd class="command">undef</KBD
> if <kbd class="command">$str</KBD
> contains error-free code (well, I should say free of syntax errors, because it can't really protect you against flawed logic).</P
><p class="para">Since <kbd class="command">eval</KBD
> is used by the Perl interpreter itself to parse and execute a given script, the error strings (in <kbd class="command">$@</KBD
>) are exactly those you see on the standard error output when processing a flawed script.<kbd class="command"></KBD
><a class="indexterm" name="ch05-idx-951218-1"></A
><a class="indexterm" name="ch05-idx-951218-2"></A
></P
><p class="para">There is one subtle, yet important, point that needs to be mentioned. <kbd class="command">eval</KBD
> treats the string as a block, which is why it is able to process a number of statements (not just expressions) and return the value of the last statement. This also means that you don't see the changes to localized or lexical variables present in the <kbd class="command">eval</KBD
>'ed string.<a class="indexterm" name="ch05-idx-951172-0"></A
><a class="indexterm" name="ch05-idx-951172-1"></A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch04_06.htm" title="4.6 Resources"><img src="../gifs/txtpreva.gif" alt="Previous: 4.6 Resources" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Advanced Perl Programming"><img src="../gifs/txthome.gif" alt="Advanced Perl Programming" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch05_02.htm" title="5.2 The Block Form: Exception Handling"><img src="../gifs/txtnexta.gif" alt="Next: 5.2 The Block Form: Exception Handling" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">4.6 Resources</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">5.2 The Block Form: Exception Handling</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
