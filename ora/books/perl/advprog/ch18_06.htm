<html><head>
<title>[Chapter 18] 18.6 A Detour into Fractals</TITLE>
<meta name="DC.title" content="Advanced Perl Programming"><meta name="DC.creator" content="Sriram Srinivasan"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:40:24Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-220-4" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch18_01.htm" title="18. Extending Perl:A First Course"><link rel="prev" href="ch18_05.htm" title="18.5 Degrees of Freedom"><link rel="next" href="ch18_07.htm" title="18.7 Resources"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Advanced Perl Programming" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,54" href="index.htm" alt="Advanced Perl Programming"><area shape="RECT" coords="467,0,514,18" href="../search/asrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch18_05.htm" title="18.5 Degrees of Freedom"><img src="../gifs/txtpreva.gif" alt="Previous: 18.5 Degrees of Freedom" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch18_01.htm" title="18. Extending Perl:A First Course">Chapter 18<br>Extending Perl:A First Course</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch18_07.htm" title="18.7 Resources"><img src="../gifs/txtnexta.gif" alt="Next: 18.7 Resources" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch18-23045">18.6 A Detour into Fractals</A
></H2
><p class="para"><a class="indexterm" name="ch18-idx-971959-0"></A
><a class="indexterm" name="ch18-idx-971959-1"></A
>This chapter would be incomplete and dry without a small foray into Mandelbrot sets and the implementation of <kbd class="command">draw_mandel</KBD
>.</P
><p class="para">For starters, I highly recommend Ivars Peterson's book <em class="emphasis">The Mathematical Tourist</EM
> [<a class="xref" href="ch18_07.htm" title="">13</A
>] for its engaging style and treatment of a surprisingly wide set of mathematical topics. We'll begin by assuming that you already know about complex numbers. </P
><p class="para">We know that a complex number <kbd class="command">a</KBD
> + <kbd class="command">b</KBD
><em class="emphasis">i</EM
> is composed of two parts, the real part <kbd class="command">a</KBD
>, and the imaginary part <kbd class="command">b</KBD
>, that taken together constitute a point on a graph. Now consider the expression <kbd class="command">z</KBD
> = <kbd class="command">z</KBD
><sup class="superscript">2</SUP
> - <kbd class="command">1</KBD
>, where <kbd class="command">z</KBD
> is a complex number. We start with a complex number (<kbd class="command">z</KBD
><sup class="superscript">0</SUP
>) and plot it. We then substitute it in the above expression to produce a new complex number and plot this number. This exercise is repeated, say, 20 or 30 times. We find that different starting values of <kbd class="command">z</KBD
><sup class="superscript">0</SUP
> result either in this series trailing off to infinity, or remaining confined within a boundary. All <kbd class="command">z</KBD
><sup class="superscript">0</SUP
>'s that result in a bounded series belong to a <em class="emphasis">Julia set</EM
>, named after the mathematician Gaston Julia. In other words, if we plot all the <kbd class="command">z</KBD
><sup class="superscript">0</SUP
>'s that result in a bounded series, we will see a nice fractal picture (no, not the one we saw earlier).</P
><p class="para">Now, let us make the equation a bit more general: <kbd class="command">z</KBD
> <img src="../chars/larr.gif" alt="&lt;-"> <kbd class="command">z</KBD
><sup class="superscript">2</SUP
> <kbd class="command">+</KBD
>  <kbd class="command">c</KBD
>, where <kbd class="command">c</KBD
> is a complex number (the discussion above was for <kbd class="command">c</KBD
> = -1 + 0<em class="emphasis">i</EM
>). Now, if we plot the Julia sets for different values of <kbd class="command">c</KBD
>, we find that some plots show beautiful connected shapes while other disperse into a cloud of disconnected dots. Clearly, we are interested only in the former; all values of <kbd class="command">c</KBD
> that result in such nice-looking Julia sets are said to belong to the Mandelbrot set, after Benoit Mandelbrot.</P
><p class="para">Calculating the Mandelbrot set is obviously a pain, because for every <kbd class="command">c</KBD
> (an infinite set), you have to plot the Julia set to see whether it disperses or not. Enter mathematicians John <a class="indexterm" name="ch18-idx-971961-0"></A
><a class="indexterm" name="ch18-idx-971961-1"></A
>Hubbard and Adrien Douady. They proved that for a given value of <kbd class="command">c</KBD
>, it is enough to check whether a starting point of <kbd class="command">z</KBD
><sup class="superscript">0</SUP
> = 0 (that is, 0 + 0<em class="emphasis">i</EM
>) results in a bounded sequence. If it does, then that value of <kbd class="command">c</KBD
> yields a connected (nondispersing) Julia set. It has also been proven that all <kbd class="command">c</KBD
>'s belonging to the Mandelbrot set are contained within a small area that "looks like a small pimply snowman on his side," as Ivars Peterson puts it. This is the white central area inside <a class="xref" href="ch18_02.htm" title="Mandelbrot set">Figure 18.3</A
>, extending from -2 to +0.5 on the <em class="emphasis">x</EM
>-axis, and from -1.0 to +1.0 on the <em class="emphasis">y</EM
>-axis. So as soon as the series goes beyond 2, you know that it is not bounded, and, consequently, <kbd class="command">c</KBD
> is not going to be a part of the Mandelbrot set. To lend some more visual interest to the figure, we attempt to assign a color to every point within our viewing window, whether it belongs to the Mandelbrot set or not. Those that belong to this set are colored white, and those that don't are given a gray color, depending on how far the corresponding series attempts to jump out of the boundaries.</P
><p class="para"><code class="literal">draw_mandel</CODE
> (contained in the file <i class="filename">Fractal.c </I
>and shown in<i class="filename"> </I
><a class="xref" href="#ch18-41243" title="mandel.c">Example 18.3</A
>) implements the algorithm described previously. The parameters are explained below, and the values that generated <a class="xref" href="ch18_02.htm" title="Mandelbrot set">Figure 18.3</A
> are shown in parentheses:</P
><dl class="variablelist"><dt class="term"><em class="emphasis">filename</EM
> </DT
><dd class="listitem"><p class="para">The name of the GIF file to produce.</P
></DD
><dt class="term"><em class="emphasis">width</EM
>, <em class="emphasis">height</EM
> (400, 400)</DT
><dd class="listitem"><p class="para">The width and height of the GIF image in number of pixels.</P
></DD
><dt class="term"><em class="emphasis">origin_real</EM
>, <em class="emphasis">origin_imag</EM
> (-1.4,1.0)</DT
><dd class="listitem"><p class="para">What the top-left pixel corresponds to, given as a complex number.</P
></DD
><dt class="term"><em class="emphasis">range</EM
> (2.0)</DT
><dd class="listitem"><p class="para">The width and height spanned in the complex number plane. If the origin is -1.0 + 1.4<em class="emphasis">i</EM
> and the range is 2, the figure spans -1.0 + 1.4<em class="emphasis">i</EM
> to 1.0 - 0.6<em class="emphasis">i</EM
> (<em class="emphasis">y</EM
> decreases from top to bottom, <em class="emphasis">x</EM
> increases from left to right). If you reduce this number, the canvas is devoted to a smaller area of the complex plane. Consequently, range works as a zoom factor, the image varying inversely with this value.</P
></DD
><dt class="term"><em class="emphasis">max_iterations</EM
> (20)</DT
><dd class="listitem"><p class="para">The number of times one should iterate through z <img src="../chars/larr.gif" alt="&lt;-"> z<sup class="superscript">2</SUP
> + c before giving up to check before deciding whether the series is bounded.</P
></DD
></DL
><div class="example"><h4 class="example"><a class="title" name="ch18-41243">Example 18.3: mandel.c</A
></H4
><pre class="programlisting">#include &lt;math.h&gt;
#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
typedef struct {
    double r, i;
} complex;

int draw_mandel (char *filename,
                  int width, int height,
                  double origin_real,
                  double origin_imag,
                  double range,
                  double max_iterations)
{
    complex    origin;
    int        colors[51], color, white, x, y, i;
    FILE       *out;
    gdImagePtr im_out;

    origin.r = origin_real;  /* Measured from top-left */
    origin.i = origin_imag;  

    if (!(out = fopen(filename, &quot;wb&quot;))) {
        fprintf(stderr, &quot;File %s could not be opened\n&quot;);
        return 1;
    }
    
    im_out = gdImageCreate(width, height); /* Create a canvas */
    /* Allocate some gray colors. Start from black, and increment r,g,b
       values uniformly. This has the effect of varying the luminosity,
       while keeping the same hue. 
       (Black = 0,0,0 and white = 255, 255,255 */
    for (i = 0; i &lt; 50; i++) {
        color = i * 4;
        colors[i] = gdImageColorAllocate(im_out, color,color,color);
    }
    white = gdImageColorAllocate(im_out, 255,255,255);
    /* For each pixel on the canvas do ... */
    for (y = 0; y &lt; height; y++) {
        for (x = 0; x &lt; width; x++) {  
            complex z, c ;
            int  iter;
            /* Convert the pixel to an equivalent complex number c,
               given the origin and the range. The range acts like an 
               inverse zoom factor.*/

            c.r = origin.r + (double) x / (double) width * range;
            c.i = origin.i - (double) y / (double) height * range;

            /* Examine each point calculated above to see if repeated 
               substitutions into an equation like z(next) = z**z + c
               remains within a definite boundary. 
               If after &lt;max_iterations&gt; iterations it still hasn't gone
               beyond the white area, it belongs to the Mandelbrot set.
               But if it does, we assign it a color depending on how
               far the series wants to jump out of bounds*/
            color = white;
            z.r = z.i = 0.0; /* Starting point */
            for (iter = 0; iter &lt; max_iterations; iter++) {
                double dist, new_real, new_imag;
                /*calculate  z = z^2 + c */
                /* Recall that z^2  is a^2 - b^2 + 2abi, if z = a + bi, */
                new_real = z.r * z.r - z.i * z.i + c.r;
                new_imag = 2 * z.r * z.i + c.i;
                z.r = new_real; z.i = new_imag;
                /* Pythagorean distance from 0,0 */
                dist = new_real * new_real + new_imag * new_imag; 
                if (dist &gt;= 4) {
                    /* No point on the mandelbrot set is more than 2 units
                       away from the origin. If it quits the boundary, give
                       that 'c' an interesting color depending on how far
                       the series wants to jump out of its bounds */
                    color = colors[(int) dist % i];
                    break;
                }
            }
            gdImageSetPixel(im_out, x,y, color);
        }
     }
    gdImageGif(im_out,out);
    fclose(out);
    return 0;<a class="indexterm" name="ch18-idx-971963-0"></A
><a class="indexterm" name="ch18-idx-971963-1"></A
>
}<a class="indexterm" name="ch18-idx-971884-0"></A
><a class="indexterm" name="ch18-idx-971884-1"></A
></PRE
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch18_05.htm" title="18.5 Degrees of Freedom"><img src="../gifs/txtpreva.gif" alt="Previous: 18.5 Degrees of Freedom" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Advanced Perl Programming"><img src="../gifs/txthome.gif" alt="Advanced Perl Programming" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch18_07.htm" title="18.7 Resources"><img src="../gifs/txtnexta.gif" alt="Next: 18.7 Resources" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">18.5 Degrees of Freedom</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">18.7 Resources</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
