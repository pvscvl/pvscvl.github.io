<html><head>
<title>[Chapter 4] 4.2 Using Subroutine References</TITLE>
<meta name="DC.title" content="Advanced Perl Programming"><meta name="DC.creator" content="Sriram Srinivasan"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:31:40Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-220-4" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch04_01.htm" title="4. Subroutine References and Closures"><link rel="prev" href="ch04_01.htm" title="4.1 Subroutine References"><link rel="next" href="ch04_03.htm#ch04-pgfId-944893" title="4.3 Closures"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Advanced Perl Programming" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,54" href="index.htm" alt="Advanced Perl Programming"><area shape="RECT" coords="467,0,514,18" href="../search/asrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch04_01.htm" title="4.1 Subroutine References"><img src="../gifs/txtpreva.gif" alt="Previous: 4.1 Subroutine References" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch04_01.htm" title="4. Subroutine References and Closures">Chapter 4<br>Subroutine References and Closures</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch04_03.htm#ch04-pgfId-944893" title="4.3 Closures"><img src="../gifs/txtnexta.gif" alt="Next: 4.3 Closures" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch04-21969">4.2 Using Subroutine References</A
></H2
><p class="para">Let's look at some common examples of using subroutine references: callback functions and higher-order procedures.</P
><p class="para">A <a class="indexterm" name="ch04-idx-950822-0"></A
>callback function is an ordinary subroutine whose reference is passed around. The caller (who uses that reference) doesn't necessarily have an idea of which subroutine is getting invoked. Let's examine three simple examples involving callback functions: dispatch tables, signal handlers, and plotting functions.</P
><div class="sect2"><h3 class="sect2"><a class="title" name="ch04-pgfId-947892">4.2.1 Dispatch Table</A
></H3
><p class="para">A typical <a class="indexterm" name="ch04-idx-950823-0"></A
><a class="indexterm" name="ch04-idx-950823-1"></A
><a class="indexterm" name="ch04-idx-950823-2"></A
>dispatch table is an array of subroutine references. The following example shows <kbd class="command">%options</KBD
> as a dispatch table that maps a set of command-line options to different subroutines:</P
><pre class="programlisting">%options = (       # For each option, call appropriate subroutine.
   &quot;-h&quot;         =&gt; \&amp;help,
   &quot;-f&quot;         =&gt; sub {$askNoQuestions = 1},
   &quot;-r&quot;         =&gt; sub {$recursive = 1},
   &quot;_default_&quot;  =&gt; \&amp;default,
);

ProcessArgs (\@ARGV, \%options); # Pass both as references</PRE
><p class="para">Some of these references in this code are to named subroutines. Others don't do much, so it is just simpler to code them as inline, anonymous subroutines. <kbd class="command">ProcessArgs</KBD
> can now be written in a very generic way. It takes two arguments: a reference to an array that it parses and a mapping of options that it refers to while processing the array. For each option, it calls the appropriate "mapped" function, and if an invalid flag is supplied in <kbd class="command">@ARGV</KBD
>, it calls the function corresponding to the string  <kbd class="command">_default_.</KBD
></P
><p class="para"><kbd class="command">ProcessArgs</KBD
> is shown in <a class="xref" href="#ch04-30761" title="ProcessArgs">Example 4.1</A
>.</P
><div class="example"><h4 class="example"><a class="title" name="ch04-30761">Example 4.1: ProcessArgs</A
></H4
><pre class="programlisting">ProcessArgs (\@ARGV, \%options); # Pass both as references
sub ProcessArgs {
    # Notice the notation: rl = ref. to array, rh = ref. to hash
    my ($rlArgs, $rhOptions) = @_;
    foreach $arg (@$rlArgs) {
        if (exists $rhOptions-&gt;{$arg}) {
            # The value must be a reference to a subroutine
            $rsub = $rhOptions-&gt;{$arg};
            &amp;$rsub();   # Call it.
        } else {        #option does not exist.
            if (exists $rhOptions-&gt;{&quot;_default_&quot;}) {
                &amp;{$rhOptions{&quot;_default_&quot;}};
            }
        }
    }
}</PRE
></DIV
><p class="para">You can omit one step by using the block form of dereferencing (hark back to <a class="xref" href="ch01_02.htm#ch01-12670" title="A More General Rule">Section 1.2.5, "A More General Rule"</A
>), like this:</P
><pre class="programlisting">if (exists $rhOptions-&gt;{$arg}) {
    &amp;<b class="emphasis.bold">{$rhOptions-&gt;{$arg}}</B
>(); # Dereference and call sub in one shot
}</PRE
><p class="para">I prefer the more verbose version for its readability. <a class="indexterm" name="ch04-idx-950825-0"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch04-pgfId-939241">4.2.2 Signal Handlers</A
></H3
><p class="para">Usually, a program works by calling functions implemented by the operating system, not vice versa. An exception to this rule is when the operating system has an urgent message to deliver to the program. In many operating systems, the delivery is accomplished by means of <a class="indexterm" name="ch04-idx-950827-0"></A
><a class="indexterm" name="ch04-idx-950827-1"></A
>signals. A signal might be issued, for example, when a user presses <a class="indexterm" name="ch04-idx-950830-0"></A
>Ctrl-C, when a floating-point exception is trapped by the hardware, or when a child process dies. You can specify a function to be called whenever a signal is delivered to your program. This allows you to take appropriate action. A Ctrl-C handler, for example, might perform clean-up before exiting. A floating-point exception handler might set an error flag and resume normal operation. </P
><p class="para">Perl provides a convenient way to specify signal handlers for each type of signal. There's a special variable called <kbd class="command">%SIG</KBD
><a class="indexterm" name="ch04-idx-950828-0"></A
> whose keys are the names of signals, and its values correspond to subroutine names or references, which are called for the corresponding signal.</P
><pre class="programlisting">sub ctrl_c_handler  {
        print &quot;Ctrl C pressed \n&quot;;
}
$SIG {&quot;INT&quot;} = \&amp;ctrl_c_handler;  # &quot;INT&quot; indicates  &quot;Interrupt&quot; 
                                  # signal. </PRE
><p class="para">Here, the word <kbd class="command">INT</KBD
><a class="indexterm" name="ch04-idx-950829-0"></A
> is a reserved string and signifies keyboard interrupts with Ctrl-C. Your operating system's documentation for signals will tell you the names of signals that might be sent to your program or script. In fact, you can get this information from Perl also by asking it to print out some of its configuration information:</P
><pre class="programlisting">use Config; # Load the Config module
print $Config{sig_name};</PRE
><p class="para">When you assign values to <kbd class="command">%SIG</KBD
>, Perl also allows you to give the <em class="emphasis">name</EM
> of the subroutine, so you don't <em class="emphasis">have</EM
> to give it a subroutine reference:</P
><pre class="programlisting">$SIG {&quot;INT&quot;} = 'ctrl_c_handler';  # Name of the subroutine passed.</PRE
><p class="para">Incidentally, signal handlers are fraught with peril. Perl internally uses C library functions such as <kbd class="command">malloc</KBD
>, which are not <i class="firstterm">reentrant</I
>. If a signal handler is triggered just when such a function is being called and the signal handler also happens to call the same function, the function gets totally confused and is likely to crash the system. This behavior is even more insidious at the script level, because you have no idea when Perl might call <kbd class="command">malloc</KBD
>. (<a class="xref" href="ch20_01.htm" title="Perl Internals">Chapter 20, <cite class="chapter">Perl Internals</CITE
></A
>, should give you a very good idea.) The moral of the story is that you should attempt to do the least possible work in a signal handler, such as set a previously defined global variable to true, and check this variable's value in the code outside.<a class="indexterm" name="ch04-idx-950831-0"></A
><a class="indexterm" name="ch04-idx-950831-1"></A
></P
><div class="sect3"><h4 class="sect3"><a class="title" name="ch04-pgfId-939400">4.2.2.1 Expression plotting</A
></H4
><p class="para"><a class="indexterm" name="ch04-idx-950832-0"></A
><a class="indexterm" name="ch04-idx-950832-1"></A
>Suppose we want to plot a variety of functions, of the general type:</P
><pre class="programlisting">y = f(x)</PRE
><p class="para">where <code class="literal">f(x)</CODE
> is a function that takes a number as an argument and returns another number. Examples include <kbd class="command">sin(x)</KBD
>, <kbd class="command">cos(x)</KBD
>, and <kbd class="command">sqrt(x)</KBD
>. But in addition to such simple examples, we would like to be able to plot arbitrarily complex expressions such as</P
><pre class="programlisting">y = sin(2x) + cos<sup class="superscript">2</SUP
>(x); </PRE
><p class="para">It is easy to develop a subroutine <kbd class="command">plot</KBD
> that can plot this expression in the range 0 to 2<img src="../chars/pi.gif" alt="[pi]">:</P
><pre class="programlisting">$PI = 3.1415927;
$rs = sub {                           # Anonymous subroutine
    my($x) = @_;
    return sin (2*$x) + cos($x) ** 2; # Function to be plotted
};
plot ($rs, 0, 2 * $PI, 0.01);</PRE
><p class="para">This is an example of a <a class="indexterm" name="ch04-idx-950833-0"></A
>higher-order procedure that takes (a reference to) another user-defined subroutine as an input parameter and calls it one or more times. <kbd class="command">sort</KBD
> is an example of a built-in higher-order procedures; the difference is that it takes subroutine <em class="emphasis">names</EM
>, not references.<a class="indexterm" name="ch04-idx-950809-0"></A
><a class="indexterm" name="ch04-idx-950809-1"></A
></P
></DIV
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch04_01.htm" title="4.1 Subroutine References"><img src="../gifs/txtpreva.gif" alt="Previous: 4.1 Subroutine References" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Advanced Perl Programming"><img src="../gifs/txthome.gif" alt="Advanced Perl Programming" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch04_03.htm#ch04-pgfId-944893" title="4.3 Closures"><img src="../gifs/txtnexta.gif" alt="Next: 4.3 Closures" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">4.1 Subroutine References</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">4.3 Closures</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
