<html><head>
<title>[Chapter 20] 20.4 Stacks and Messaging Protocol</TITLE>
<meta name="DC.title" content="Advanced Perl Programming"><meta name="DC.creator" content="Sriram Srinivasan"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:42:19Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-220-4" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch20_01.htm" title="20. Perl Internals"><link rel="prev" href="ch20_03.htm#ch20-pgfId-948426" title="20.3 Perl Value Types"><link rel="next" href="ch20_05.htm#ch20-pgfId-965850" title="20.5 Meaty Extensions"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Advanced Perl Programming" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,54" href="index.htm" alt="Advanced Perl Programming"><area shape="RECT" coords="467,0,514,18" href="../search/asrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch20_03.htm#ch20-pgfId-948426" title="20.3 Perl Value Types"><img src="../gifs/txtpreva.gif" alt="Previous: 20.3 Perl Value Types" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch20_01.htm" title="20. Perl Internals">Chapter 20<br>Perl Internals</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch20_05.htm#ch20-pgfId-965850" title="20.5 Meaty Extensions"><img src="../gifs/txtnexta.gif" alt="Next: 20.5 Meaty Extensions" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch20-31893">20.4 Stacks and Messaging Protocol</A
></H2
><p class="para"><a class="indexterm" name="ch20-idx-972999-0"></A
><a class="indexterm" name="ch20-idx-972999-1"></A
><a class="indexterm" name="ch20-idx-972999-2"></A
>Whew! We have now finished a reasonably in-depth look at all the value types offered by Perl. The next half of this chapter is devoted to understanding the data structures, API, and protocol used between caller and called subroutines. </P
><p class="para">We mentioned earlier that the argument stack is the data structure used for passing parameters and results between functions. <a class="xref" href="#ch20-19421" title="Argument and mark stack after foo has been called and foo has just called bar">Figure 20.11</A
> shows the stack after calling <kbd class="command">foo(10,20)</KBD
>, which in turn has called<kbd class="command"> bar("hello",</KBD
> <kbd class="command">30.2,</KBD
> <kbd class="command">100)</KBD
>.</P
><h4 class="figure"><a class="title" name="ch20-19421">Figure 20.11: Argument and mark stack after foo has been called and foo has just called bar</A
></H4
><img class="graphic" src="figs/wpa_2011.gif" alt="Figure 20.11"><p class="para">How does <kbd class="command">bar</KBD
> know how many parameters it should pick up from the top of <kbd class="command">stack</KBD
>? Well, Perl keeps track of the stretches of the argument stack using another stack called a <kbd class="command">markstack</KBD
><a class="indexterm" name="ch20-idx-973005-0"></A
> (a stack of bookmarks, in a sense). <kbd class="command">bar</KBD
> knows the parameters meant for it by simply computing the difference between the current top of <kbd class="command">stack</KBD
> and the bookmark stored at the top of <kbd class="command">markstack</KBD
>. This stretch of the stack corresponds to <kbd class="command">bar</KBD
>'s <kbd class="command">@_</KBD
> array. Conversely, when <kbd class="command">bar</KBD
> is ready to return, it dumps one or more results in its stretch of stack, and <kbd class="command">foo</KBD
> knows how many scalars have been returned by looking at the markstack.</P
><p class="para">All these manipulations happen transparently when you are in script space. But if you write C routines that are called by Perl (extending Perl) or call Perl functions from C (embedding Perl), there are some details to contend with. Although tools such as XS and SWIG help you write extensions easily, you will find that the following sections will pave the way for even more powerful and intuitive extensions (intuitive, that is, for the script writer).</P
><div class="sect2"><h3 class="sect2"><a class="title" name="ch20-pgfId-952383">20.4.1 Calling a Perl Subroutine</A
></H3
><p class="para"><a class="indexterm" name="ch20-idx-973006-0"></A
>Let's start with the case in which you call a Perl subroutine from C, normally done when you embed the Perl interpreter in your application. <a class="xref" href="#ch20-34394" title="Macros Used in Calling a Perl Routine (Embedding)">Table 20.6</A
> contains the macros (defined in <i class="filename">pp.h</I
>) that you will need to use, <em class="emphasis">in the order given</EM
>. These macros may be difficult to remember on one reading, but the good news is that they are called exactly in the same order every time, and they sort of grow on you after a while.</P
><br><table class="table" border="1" cellpadding="3"><caption class="table"><a class="title" name="ch20-34394">Table 20.6: Macros Used in Calling a Perl Routine (Embedding)<a class="indexterm" name="ch20-idx-973204-0"></A
><a class="indexterm" name="ch20-idx-973204-1"></A
></A
></CAPTION
><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1"><p class="para">Function/Macro</P
></TH
><th class="entry" align="LEFT" rowspan="1" colspan="1"><p class="para">Description</P
></TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><pre class="programlisting">dSP</PRE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Declare a few variables used by the following macros.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><pre class="programlisting">ENTER</PRE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Start scope. </P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><pre class="programlisting">SAVETMPS</PRE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">All mortal variables created after this call will be deleted when <kbd class="command">FREETMPS</KBD
> is called.</P
><p class="para">See explanation of <kbd class="command">tmps_stack</KBD
> in the next section.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><pre class="programlisting">PUSHMARK</PRE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Remember the current top of <kbd class="command">stack</KBD
> (updates <kbd class="command">markstack</KBD
>).</P
><p class="para"><kbd class="command">ENTER</KBD
>, <kbd class="command">SAVETMPS</KBD
>, and <kbd class="command">PUSHMARK </KBD
>are called to prepare the stack for a subroutine call.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><pre class="programlisting">XPUSHs(SV*)</PRE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Now you can push any number of arguments onto the stack. If you push newly created SVs, you can mark them as mortal, and Perl will automatically delete them at end of scope.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><pre class="programlisting">PUTBACK</PRE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Indicates that all arguments have been pushed in. <kbd class="command">PUSHMARK</KBD
> and <kbd class="command">PUTBACK</KBD
> bracket the arguments, in a sense.</P
><p class="para">At this stage, the Perl procedure can be called using <kbd class="command">perl_call_pv</KBD
> or <kbd class="command">perl_call_sv</KBD
>. (See the following example.)</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><pre class="programlisting">SPAGAIN</PRE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Like <kbd class="command">PUSHMARK</KBD
>, it provides the opening bracket for the returned results. Even if there aren't any returned results, you must call it anyway.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><pre class="programlisting">POPi
POPl
POPn
POPp
POPs</PRE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Pop a scalar from the stack and return the appropriate type:</P
><p class="para">integer, long, double, pointer (typically to string), and SV.</P
><p class="para"><kbd class="command">perl_call_pv</KBD
> returns the number of result parameters pushed onto the stack, and you must take care to call these macros only that many times.</P
><p class="para">Keep in mind that <code class="literal">POP</CODE
> returns the results in the inverse order in which the Perl procedure pushed its results on the stack.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><pre class="programlisting">PUTBACK</PRE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Call this after all result parameters have been popped.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><pre class="programlisting">FREETMPS</PRE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">See <kbd class="command">SAVETMPS</KBD
>.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><pre class="programlisting">LEAVE</PRE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Ends scope. See <kbd class="command">ENTER</KBD
>.</P
></TD
></TR
></TBODY
></TABLE
><p class="para">The code snippet shown next illustrates how to invoke a Perl procedure called <kbd class="command">add</KBD
>, with two input parameters <kbd class="command">10</KBD
> and <kbd class="command">20</KBD
>, and how to retrieve the results. Note again that the macros are used in the order given in <a class="xref" href="#ch20-34394" title="Macros Used in Calling a Perl Routine (Embedding)">Table 20.6</A
>.</P
><pre class="programlisting">#include &lt;perl.h&gt;
void foo() {
    int n;         /* number of parameters returned by add       */
    dSP;  
    ENTER;         /* Tell perl we are entering a new scope      */
    SAVETMPS;      /* Ensure that FREETMPS will free only those
                      mortals created after this stmt            */
    PUSHMARK(sp);  /* Remember the current stack pointer. sp is 
                     declared by dSP                             */
    /* Push arguments */
    XPUSHs(sv_2mortal(newSViv(10)));         /* push an integer  */
    XPUSHs(sv_2mortal(newSViv(20)));         /* push another     */
    PUTBACK;                                 /* End of arguments */

    /* Call subroutine by name, and expect it to return a scalar */
    n = perl_call_pv (&quot;add&quot;, G_SCALAR); 

    SPAGAIN;                  /* Start looking at return results */

    /* Retrieve returned value from stack */
    if (n == 1)
        printf (&quot;Result: %d \n&quot;, POPi);
    /* Closing details                                           */ 
    PUTBACK;            /* Finished removing results from stack  */
    /* Time to clean up and leave ..                             */
    FREETMPS;  /* Frees the two mortal parameters passed to add  */
    LEAVE;     /* Leave scope                                    */
}</PRE
><p class="para">This is all you need to understand the section <a class="xref" href="ch20_06.htm" title="Easy Embedding API">"Easy Embedding API</A
>," which implements the <kbd class="command">perl_call_va</KBD
> convenience function introduced in <a class="xref" href="ch19_01.htm" title="Embedding Perl:The Easy Way">Chapter 19</A
>.<a class="indexterm" name="ch20-idx-973007-0"></A
><a class="indexterm" name="ch20-idx-973007-1"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch20-20585">20.4.2 The Called Side: Hand-Coding an XSUB</A
></H3
><p class="para"><a class="indexterm" name="ch20-idx-973008-0"></A
><a class="indexterm" name="ch20-idx-973008-1"></A
>Having seen what it takes to call a Perl subroutine, let's look at the stack from the viewpoint of a called subroutine. This is precisely the situation that all XSUBs are in, and after this section, you'll be able to completely understand the code produced by <a class="indexterm" name="ch20-idx-973011-0"></A
><a class="indexterm" name="ch20-idx-973011-1"></A
>SWIG and <em class="emphasis">xsubpp</EM
>.</P
><p class="para">First, let's settle the issue of how Perl discovers your XSUB. That is, if someone writes "<kbd class="command">add($a,$b,$c)</KBD
>" in a script, how does Perl know to call the C procedure <kbd class="command">add</KBD
>, or <kbd class="command">my_add</KBD
>, or whatever? Well, you have to create a binding between a subroutine name (as known in script space) and a C procedure, using the procedure <kbd class="command">newXS</KBD
> like this:</P
><pre class="programlisting">extern XS(add);             /* XS macro explained in <a class="xref" href="#ch20-22578" title="Macros Used to Manipulate the Stack (Embedding)">Table 20.7</A
> next */
newXS(&quot;add&quot;, add, &quot;add.c&quot;); /* Filename given for debugging reasons  */</PRE
><p class="para">For a module called <kbd class="command">foo</KBD
>, XS and SWIG generate a procedure called <kbd class="command">boot_foo</KBD
>, which uses <kbd class="command">newXS</KBD
> to bind all XSUBs in that module to the corresponding names. The elegant thing about this approach is that <kbd class="command">boot_foo</KBD
> itself is an XSUB, and if you use dynamic loading, this procedure is called by the Dynaloader module at run-time<em class="emphasis">.</EM
></P
><p class="para">XSUBs use the <a class="indexterm" name="ch20-idx-973019-0"></A
>macros (defined in <em class="emphasis">XSUB.h</EM
>) listed in <a class="xref" href="#ch20-22578" title="Macros Used to Manipulate the Stack (Embedding)">Table 20.7</A
> to examine the stack and return results. </P
><br><table class="table" border="1" cellpadding="3"><caption class="table"><a class="title" name="ch20-22578">Table 20.7: Macros Used to Manipulate the Stack (Embedding)</A
></CAPTION
><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1"><p class="para">Function/Macro</P
></TH
><th class="entry" align="LEFT" rowspan="1" colspan="1"><p class="para">Description</P
></TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><pre class="programlisting">XS</PRE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Supplies the standard signature required for your XSUB. For example, the procedure <kbd class="command">foo</KBD
> should be declared thus:<pre class="programlisting">   XS(foo) {
   }</PRE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><pre class="programlisting">dXSARGS</PRE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Defines some local variables used by the other macros. The important one is an integer called <kbd class="command">items</KBD
>, which contains the number of parameters pushed onto the stack by the caller.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><pre class="programlisting">SV* ST(n)</PRE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Retrieves the <em class="emphasis">n</EM
>th parameter (an SV*) from the stack. <kbd class="command">ST(0)</KBD
> refers to the first parameter (<kbd class="command">$_[0]</KBD
>), and <kbd class="command">ST(items-1)</KBD
> is the last parameter. </P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><pre class="programlisting">XSRETURN(n)</PRE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Indicates that you have left <em class="emphasis">n</EM
> result parameters on the stack and returns. In the typical case in which you have only one value to return, you can use one of the more convenient macros listed below.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><pre class="programlisting">XSRETURN_NO
XSRETURN_YES
XSRETURN_UNDEF</PRE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Issues <code class="literal">XSRETURN(1)</CODE
> after leaving an SV on the stack with a value of 0, 1, or undef.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><pre class="programlisting">XSRETURN_EMPTY</PRE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">The same as <kbd class="command">XSRETURN(0).</KBD
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><pre class="programlisting">XSRETURN_IV (int)
XSRETURN_NV (double)
XSRETURN_PV (char *) </PRE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Leaves a new mortal scalar with the appropriate value type. This scalar will be deleted when the caller invokes <kbd class="command">FREETMPS</KBD
>.</P
></TD
></TR
></TBODY
></TABLE
><p class="para">The following snippet shows the hand-coded XSUB <kbd class="command">add</KBD
>, which adds all its input parameters and returns the result:</P
><pre class="programlisting">#include &lt;perl.h&gt;
#include &lt;XSUB.h&gt;
XS(add)                              /* All XSUBs have this signature*/
{
    int sum = 0;
    dXSARGS;                         /* defines 'items', and inits it* 
                                      * with the number of params    */
    if (items == 0) 
        XSRETURN_IV(0);    /* Return 0 if param list is empty        */

    for (--items ; items &gt;= 0 ; --items) {
        if (SvIOK(ST(items))         /* If SV contains an integer    */
           sum += SvIV(ST(items));   
    }
    XSRETURN_IV (sum);
}</PRE
><div class="sect3"><h4 class="sect3"><a class="title" name="ch20-pgfId-967968">20.4.2.1 Returning a variable list of results</A
></H4
><p class="para">The subroutine in the preceding example returns one parameter. Returning multiple parameters is straightforward too. The following example shows how a null-terminated array of strings (<kbd class="command">argv</KBD
>) is converted to an equal number of result parameters on the stack:</P
><pre class="programlisting">int i = 0;
for ( ; *argv; argv++, i++) {
    ST(i) = sv_2mortal(newSVPV(*argv,0));
} 
XSRETURN(i);</PRE
><p class="para">As you can see, returned parameters occupy the stretch of argument stack between <kbd class="command">ST(0)</KBD
><a class="indexterm" name="ch20-idx-973020-0"></A
> and <kbd class="command">ST(n-1)</KBD
>. <kbd class="command">XSRETURN</KBD
><a class="indexterm" name="ch20-idx-973018-0"></A
> adjusts the markstack so that the caller can see the number of scalars being returned. It is important to note that the preceding code does not modify the <em class="emphasis">input arguments</EM
> that happen to live in the same stretch; it updates the <em class="emphasis">stack</EM
> to point to new SVs. (Remember that the stack is an array of SV*s.) To modify an input parameter directly, you would instead write:</P
><pre class="programlisting">sv_setpv(ST(i), &quot;hello&quot;, 0); /* Like modifying $_[<code class="replaceable"><i>i</I
></CODE
>] */</PRE
><p class="para">While functions such as <kbd class="command">read</KBD
> do this, I recommend that you refrain from taking advantage of it, and create new SVs instead. In addition, to save the calling code from worrying about memory management or reference counting issues, give that responsibility to Perl by making these new values mortal. They will then be automatically deleted at the end of scope.</P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="ch20-25223">20.4.2.2 Ensuring that the stack is big enough</A
></H4
><p class="para">The <kbd class="command">ST</KBD
> macro refers directly to the corresponding spot on the stack. Because the stack may not have been extended enough to accommodate the argument in the macro, you cannot arbitrarily say, for example, <kbd class="command">ST(100)</KBD
> without risking a crash. The <kbd class="command">EXTEND</KBD
><a class="indexterm" name="ch20-idx-973021-0"></A
> macro ensures that the stack is big enough to hold your data:</P
><pre class="programlisting">EXTEND(sp, 100); /* Extend stack by 100 elements */</PRE
><p class="para">This macro can be used in both the caller and the called subroutines. The variable <kbd class="command">sp</KBD
> (the stack pointer) is defined automatically for you (by the <kbd class="command">dSP</KBD
> and <kbd class="command">dXSARGS</KBD
> macros). <kbd class="command">ST()</KBD
> could have used <kbd class="command">av_store()</KBD
> to automatically extend the stack, but that would be considerably slower.</P
><p class="para">There's an alternative approach. If we reset the stack pointer back to the bottom of our stretch of stack, then we can use the <kbd class="command">XPUSH</KBD
><a class="indexterm" name="ch20-idx-973022-0"></A
>s macro, which automatically extends the stack for you: </P
><pre class="programlisting">i = 0;
sp -= items;          /* Resets stack pointer to beginning */
for ( ; *argv; argv++, i++) {
    /* Push fresh mortal string-valued scalars */
    XPUSHs(sv_2mortal(newSVpv(*argv, 0)));
}
XSRETURN(i);</PRE
><p class="para">This is precisely the strategy adopted by the <kbd class="command">PPCODE</KBD
> directive in XS, as we shall soon see. As I said earlier, this code doesn't modify the input parameters; it simply replaces those pointers in the stack with new ones. Note that if we forgot to reset the stack pointer, we would be piling stuff on top of the input parameters, and all hell would break loose when this procedure returns.<a class="indexterm" name="ch20-idx-973013-0"></A
><a class="indexterm" name="ch20-idx-973013-1"></A
><a class="indexterm" name="ch20-idx-973013-2"></A
><a class="indexterm" name="ch20-idx-973013-3"></A
><a class="indexterm" name="ch20-idx-973013-4"></A
></P
></DIV
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch20-14695">20.4.3 Inside Other Stacks</A
></H3
><p class="para">Let us take a brief look at the stacks available inside Perl (besides the argument and mark stacks) to understand what the macros described in the preceding sections do internally. Unless you are curious about these kind of details, you can safely skip this section without loss of continuity.</P
><dl class="variablelist"><dt class="term">Save stack (<kbd class="command">savestack</KBD
>)</DT
><dd class="listitem"><p class="para"><a class="indexterm" name="ch20-idx-973023-0"></A
>This stack is used as a repository for storing all pieces of global information that are liable to change within a nested scope. To safely squirrel away an integer, for example, Perl uses a macro called <kbd class="command">SSPUSHINT</KBD
> (in <i class="filename">scope.h</I
>). This macro pushes three pieces of information on <kbd class="command">savestack</KBD
>: the value of the integer, the address of the integer, and the fact that an integer has been stored. The value of this integer can now be changed freely within a nested scope. At the end of the current scope, Perl pops the savestack and knows that because an integer has been stored, it must also have stored the old pointer and value. Thus the original integer is efficiently restored.</P
><p class="para">A statement such as <kbd class="command">local($a)</KBD
> is implemented by saving the GV corresponding to "<kbd class="command">a</KBD
>" and its scalar value on the save stack; the scalar value is replaced with a new scalar. When the scope ends, the GV and its scalar pointer are automatically restored. </P
></DD
><dt class="term">Scope stack (<kbd class="command">scopestack</KBD
>)</DT
><dd class="listitem"><p class="para">The <a class="indexterm" name="ch20-idx-973024-0"></A
>scope stack is used to remember positions along the save stack that correspond to different scopes (analogous to the markstack providing bookmarks for the argument stack). When the scope ends (upon <kbd class="command">LEAVE</KBD
>), Perl knows exactly how many objects to pop off the save stack and restores them to their former values.</P
></DD
><dt class="term">Temporaries stack (<kbd class="command">tmps_stack</KBD
>)</DT
><dd class="listitem"><p class="para"><a class="indexterm" name="ch20-idx-973025-0"></A
><a class="indexterm" name="ch20-idx-973025-1"></A
>When you create a mortal variable or mark a variable as mortal (using <kbd class="command">sv_2mortal</KBD
> or <kbd class="command">local</KBD
>, in script space), Perl pushes this SV on to this stack (without touching its reference count). At the end of scope, it decrements the reference count of all temporary variables pushed into the stack in that scope. Recall that <kbd class="command">my</KBD
> variables (lexicals) sit in CV-specific scratchpads, so they never touch the temporaries stack. </P
></DD
><dt class="term">Return stack (<kbd class="command">retstack</KBD
>)</DT
><dd class="listitem"><p class="para"><a class="indexterm" name="ch20-idx-973026-0"></A
>Before calling a subroutine, Perl remembers the starting opcode of the statement following that subroutine call by pushing it on the <kbd class="command">retstack</KBD
>. </P
></DD
><dt class="term">Context stack (<kbd class="command">cxstack</KBD
>)</DT
><dd class="listitem"><p class="para"><a class="indexterm" name="ch20-idx-973027-0"></A
><a class="indexterm" name="ch20-idx-973027-1"></A
>This stack keeps track of the context information for the current block, such as the block label and the CV to execute when <kbd class="command">last</KBD
>, <kbd class="command">redo</KBD
>, or <kbd class="command">next</KBD
> are invoked. These are restored to the previous elements when the block is exited. I do not know why there are two stacks to deal with scope-related context information.<a class="indexterm" name="ch20-idx-973002-0"></A
><a class="indexterm" name="ch20-idx-973002-1"></A
><a class="indexterm" name="ch20-idx-973002-2"></A
></P
></DD
></DL
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch20_03.htm#ch20-pgfId-948426" title="20.3 Perl Value Types"><img src="../gifs/txtpreva.gif" alt="Previous: 20.3 Perl Value Types" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Advanced Perl Programming"><img src="../gifs/txthome.gif" alt="Advanced Perl Programming" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch20_05.htm#ch20-pgfId-965850" title="20.5 Meaty Extensions"><img src="../gifs/txtnexta.gif" alt="Next: 20.5 Meaty Extensions" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">20.3 Perl Value Types</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">20.5 Meaty Extensions</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
