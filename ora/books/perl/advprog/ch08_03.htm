<html><head>
<title>[Chapter 8] 8.3 On Inheritance</TITLE>
<meta name="DC.title" content="Advanced Perl Programming"><meta name="DC.creator" content="Sriram Srinivasan"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:34:42Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-220-4" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch08_01.htm" title="8. Object Orientation: The Next Few Steps"><link rel="prev" href="ch08_02.htm" title="8.2 Delegation"><link rel="next" href="ch08_04.htm" title="8.4 Resources"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Advanced Perl Programming" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,54" href="index.htm" alt="Advanced Perl Programming"><area shape="RECT" coords="467,0,514,18" href="../search/asrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch08_02.htm" title="8.2 Delegation"><img src="../gifs/txtpreva.gif" alt="Previous: 8.2 Delegation" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch08_01.htm" title="8. Object Orientation: The Next Few Steps">Chapter 8<br>Object Orientation: The Next Few Steps</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch08_04.htm" title="8.4 Resources"><img src="../gifs/txtnexta.gif" alt="Next: 8.4 Resources" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch08-30084">8.3 On Inheritance</A
></H2
><p class="para"><a class="indexterm" name="ch08-idx-968007-0"></A
><a class="indexterm" name="ch08-idx-968007-1"></A
>I have never been quite comfortable with using inheritance liberally, and I don't subscribe to the theory that this feature is essential for software reuse. There are three related but distinct flavors of inheritance, and in this section, I'll list what I like or dislike about these aspects. The three types of inheritance are as follows:</P
><ul class="itemizedlist"><li class="listitem"><p class="para"><a class="listitem" name="ch08-pgfId-963775"></A
>Attribute inheritance</P
></LI
><li class="listitem"><p class="para"><a class="listitem" name="ch08-pgfId-963776"></A
>Implementation inheritance</P
></LI
><li class="listitem"><p class="para"><a class="listitem" name="ch08-pgfId-963777"></A
>Interface inheritance</P
></LI
></UL
><div class="sect2"><h3 class="sect2"><a class="title" name="ch08-pgfId-963778">8.3.1 Attribute Inheritance</A
></H3
><p class="para"><a class="indexterm" name="ch08-idx-968008-0"></A
>The facility provided by a language for a subclass to inherit attributes from a base class or a structure is called attribute inheritance. While C++ and Java provide this facility, Perl doesn't. The onus is on the Perl programmer to figure out a way for a superclass and a subclass to agree on a common inheritable representation. For this reason, a hash table is a frequent choice, but not necessarily an economical one, as has been pointed out earlier.</P
><p class="para">My problem with attribute inheritance is that it introduces a tremendous amount of coupling between an inherited class and a derived class. A change in the way a base class is laid out has drastic consequences for the derived class. This is clearly a violation of encapsulation. C++ treats all attributes as private by default but then provides a keyword called "protected," whereby it makes them freely available to derived classes, while still hiding them from the general public. Bjarne Stroustrup, the creator of C++, regrets this in his excellent book <em class="emphasis">The Design and Evolution of C++</EM
> [<a class="xref" href="ch08_04.htm" title="">8</A
>]: </P
><blockquote class="blockquote"><p class="para">One of my concerns about <code class="literal">protected</CODE
> is exactly that it makes it too easy to use a common base the way one might sloppily have used global data....In retrospect, I think that <code class="literal">protected</CODE
> is a case where "good arguments" and fashion overcame my better judgement and my rules of thumb for accepting new features.</P
></BLOCKQUOTE
><p class="para">A better option is to provide accessor methods and rely on interface inheritance. More on this soon.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch08-pgfId-963783">8.3.2 Implementation Inheritance</A
></H3
><p class="para"><a class="indexterm" name="ch08-idx-968009-0"></A
>Perl supports only this flavor of inheritance. Implementation inheritance, like attribute inheritance, forces base and inherited classes to have a common understanding of the layout of the object's attributes; attribute inheritance is almost always required in using implementation inheritance.</P
><p class="para">Subclassing is not easy, as Erich Gamma et al. say in <em class="emphasis">Design Patterns</EM
> [<a class="xref" href="ch08_04.htm" title="">7</A
>]:</P
><blockquote class="blockquote"><p class="para">Designing a subclass also requires an in-depth understanding of the parent class. For example, overriding one operation might require overriding another. An overridden operation might be required to call an inherited operation. And subclassing can lead to an explosion of classes, because you might have to introduce many new subclasses for even a simple extension.</P
></BLOCKQUOTE
><p class="para">They suggest using composition instead, a topic we will touch on shortly.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch08-pgfId-963788">8.3.3 Interface Inheritance</A
></H3
><p class="para"><a class="indexterm" name="ch08-idx-968010-0"></A
>Attribute and implementation inheritance are for the convenience of the object implementor. Interface inheritance is for the user of a package. Perl supports only implementation inheritance.</P
><p class="para">The set of publicly available methods defines an object's interface. A derived class can add to this interface by adding new methods. But whether it actually overrides a base class implementation is strictly a matter of implementation detail; from the user's point of view, it still offers the same methods. </P
><p class="para">The important thing about an interface is that it represents the contract between the user and the object. If two objects have identical interfaces, they can be interchangeably used. This substitutability aspect represents the most important feature a language or a set of components can provide. </P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch08-pgfId-963791">8.3.4 Using Composition Instead</A
></H3
><p class="para"><a class="indexterm" name="ch08-idx-968014-0"></A
>I was once convinced about the need for implementation inheritance when I was writing some widgets for Xt/Motif (GUI frameworks for the X Windows platform). This framework goes to a great extent to provide single inheritance in C (both attribute and implementation), but the result isn't easy to work with. When C++ came along, I quickly became enthusiastic about a language that supported inheritance, and attempted to implement the widget set in C++. Then when John Ousterhout's Tk came along, I marveled at the ease of creating widgets, even though it was in C and provided all the features that Motif provides (and much more). The Tk architecture used composition, not inheritance. I have been suitably chastened.</P
><p class="para">The idea of composition is for an object to be composed out of other objects. That is, it forms a <em class="emphasis">has-a</EM
> or <em class="emphasis">uses-a</EM
> relationship with other classes, instead of an <em class="emphasis">is-a</EM
> relationship. Many examples in published literature glorify implementation inheritance, but these turn out to be far better (simpler and more readable) candidates for composition. Take this commonly illustrated example of a class called <code class="literal">Vice-President</CODE
>, inheriting from a class called <code class="literal">Manager</CODE
>, inheriting from a class called <code class="literal">Employee</CODE
>. It is true that a V.P. <em class="emphasis">is-a</EM
> Manager, who in turn is an Employee, so the case is made for attribute and implementation inheritance. But what happens when an employee is promoted? The object is forced to change its class&nbsp;- clearly, a terrible design. The better way to approach this issue is to realize that an employee plays one or more roles in a company (that of a manager, vice-president, or lead technical engineer), and when the employee is promoted, this role is merely updated. In other words, the <kbd class="command">Employee</KBD
> object <em class="emphasis">uses</EM
> the <kbd class="command">Role</KBD
> class, which for its part, captures everything to be known about that role, such as the job description, salary range, and prerequisites. </P
><p class="para">Composition is also called component-driven programming. The key to developing reusable software is to develop completely encapsulated components with well-defined and documented interfaces. Designing for inheritance has, in my experience, rarely yielded the benefit that the hype would suggest.</P
><p class="para">Perl provides the most crucial features required to create plug and play components: polymorphism and run-time binding. You can say <kbd class="command">$obj-&gt;draw()</KBD
>, and Perl calls the appropriate <kbd class="command">draw()</KBD
> method, depending on <kbd class="command">$obj</KBD
>'s class. Since Perl is an untyped language, it makes this statement work for graphic shapes, guns, and lotteries. I value this feature much more than its support for implementation inheritance.<a class="indexterm" name="ch08-idx-968012-0"></A
><a class="indexterm" name="ch08-idx-968012-1"></A
><a class="indexterm" name="ch08-idx-968012-2"></A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch08_02.htm" title="8.2 Delegation"><img src="../gifs/txtpreva.gif" alt="Previous: 8.2 Delegation" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Advanced Perl Programming"><img src="../gifs/txthome.gif" alt="Advanced Perl Programming" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch08_04.htm" title="8.4 Resources"><img src="../gifs/txtnexta.gif" alt="Next: 8.4 Resources" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">8.2 Delegation</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">8.4 Resources</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
