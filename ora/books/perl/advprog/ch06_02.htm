<html><head>
<title>[Chapter 6] 6.2 Packages and Files</TITLE>
<meta name="DC.title" content="Advanced Perl Programming"><meta name="DC.creator" content="Sriram Srinivasan"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:33:03Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-220-4" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch06_01.htm" title="6. Modules"><link rel="prev" href="ch06_01.htm" title="6.1 Basic Package"><link rel="next" href="ch06_03.htm" title="6.3 Package Initialization and Destruction"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Advanced Perl Programming" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,54" href="index.htm" alt="Advanced Perl Programming"><area shape="RECT" coords="467,0,514,18" href="../search/asrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch06_01.htm" title="6.1 Basic Package"><img src="../gifs/txtpreva.gif" alt="Previous: 6.1 Basic Package" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch06_01.htm" title="6. Modules">Chapter 6<br>Modules</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch06_03.htm" title="6.3 Package Initialization and Destruction"><img src="../gifs/txtnexta.gif" alt="Next: 6.3 Package Initialization and Destruction" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch06-19089">6.2 Packages and Files</A
></H2
><p class="para"><a class="indexterm" name="ch06-idx-960772-0"></A
><a class="indexterm" name="ch06-idx-960772-1"></A
>The same package declaration can be present in multiple files. Or multiple packages can be declared in one file. By convention, a package is usually assigned its own file and named <em class="emphasis">package.pm</EM
> or <em class="emphasis">package.pl</EM
>. <a class="indexterm" name="ch06-idx-960810-0"></A
>Files with the suffix <i class="filename">.pm</I
> are called Perl <i class="firstterm">modules</I
>, and packages inside files with the suffix <i class="filename">.pl</I
> are usually referred to as <i class="firstterm">libraries</I
><a class="indexterm" name="ch06-idx-960811-0"></A
>. The former naming convention is preferred now because the <kbd class="command">use</KBD
> statement requires it, as we will soon see.</P
><p class="para">The <kbd class="command">require</KBD
><a class="indexterm" name="ch06-idx-960812-0"></A
> keyword simply loads a file into your program (<em class="emphasis">sources</EM
> it, in shell parlance). This is identical in spirit to <code class="literal">#include</CODE
> in C, except that Perl does not bother about a file that has already been loaded:[<a class="footnote" href="#ch06-pgfId-957137">1</A
>]<pre class="programlisting">require &quot;test.pl&quot;; # load test.pl if it hasn't already been loaded</PRE
></P
><blockquote class="footnote"><div class="footnote"><p class="para"><a class="footnote" name="ch06-pgfId-957137">[1]</A
> Another important distinction from C or C++ is that modules are not split up into separate declaration and implementation files (header files versus ".c" files) and it is not necessary to go through a linker to bring modules together.</P
></DIV
></BLOCKQUOTE
><p class="para">If you omit the suffix and the quotes, a <i class="filename">.pm</I
> suffix is assumed. The <kbd class="command">use</KBD
><a class="indexterm" name="ch06-idx-960813-0"></A
><a class="indexterm" name="ch06-idx-960813-1"></A
> statement is similar in that respect, but is more restrictive in that it accepts only module names, not filenames. So, while there is no necessary relation between module names and filenames in general, <kbd class="command">use</KBD
> does force you to adopt a standard naming convention, which is a very good thing indeed, in my opinion. But there is more to <kbd class="command">use</KBD
> than just syntactic sugar.</P
><p class="para">The big difference between <kbd class="command">use</KBD
> and <kbd class="command">require</KBD
> is that the <kbd class="command">use</KBD
> statement is executed as soon as it is <em class="emphasis">parsed</EM
>. For this reason, the following attempt to load a module dynamically won't work, because the assignment statement is executed only after everything has been parsed and compiled:</P
><pre class="programlisting">$pkg_name = &quot;Account&quot;;  # executes at run-time
use $pkg_name;          # executes at compile-time</PRE
><p class="para">It is, in fact, a syntax error; you have to use <kbd class="command">require</KBD
> in this case. The advantage of <kbd class="command">use</KBD
> is that when a program starts executing, there's a guarantee that all required modules have been successfully loaded, and there won't be any surprises at run-time.</P
><p class="para">Another important difference between <kbd class="command">use</KBD
> and <kbd class="command">require</KBD
> is described later, in the section <a class="xref" href="ch06_05.htm#ch06-pgfId-956256" title="Importing Symbols">"Importing Symbols</A
>."</P
><p class="para">When a file is <kbd class="command">require</KBD
>'d or <kbd class="command">use</KBD
>'d, it is expected to return a Boolean success value (zero for failure, nonzero for success). That is, the last executing statement at global scope must be a statement such as "<kbd class="command">return</KBD
> <kbd class="command">1;</KBD
>" or just "<kbd class="command">1;</KBD
>". Note that this is not necessarily the last statement in the file; it is just the last executing statement.</P
><div class="sect2"><h3 class="sect2"><a class="title" name="ch06-pgfId-955483">6.2.1 Load Path</A
></H3
><p class="para"><a class="indexterm" name="ch06-idx-960814-0"></A
><a class="indexterm" name="ch06-idx-960814-1"></A
>Perl first looks for the file given to <kbd class="command">use</KBD
> or <kbd class="command">require</KBD
> in the current directory and then looks up the <kbd class="command">@INC</KBD
> built-in array to search the include paths. By default, <kbd class="command">@INC</KBD
> contains a few standard directory names specified when the interpreter was installed and built. On my machine, <kbd class="command">@INC</KBD
> looks like this:</P
><pre class="programlisting">%<b class="emphasis.bold"> perl -e 'print &quot;@INC \n&quot;;'</B
>
/opt/lib/perl5/sun4-solaris/5.004 /opt/lib/perl5 /opt/lib/perl5/site_perl/sun4-solaris /opt/lib/perl5/site_perl .</PRE
><p class="para">You can also use <kbd class="command">perl</KBD
> <kbd class="command">-V</KBD
><a class="indexterm" name="ch06-idx-960815-0"></A
> to get this and other configuration information.</P
><p class="para">If you want to specify additional directories of your own, you have these choices:</P
><ol class="orderedlist"><li class="listitem"><p class="para"><a class="listitem" name="ch06-pgfId-942924"></A
>Use the <kbd class="command">-I</KBD
><a class="indexterm" name="ch06-idx-960816-0"></A
> command-line option as you would with the C preprocessor:</P
><pre class="programlisting"><b class="emphasis.bold">   </B
>%<b class="emphasis.bold"> perl -I/home/sriram/perl -I/local/mylib script.pl</B
></PRE
><p class="para">I sometimes have instrumented or development versions of my modules in a separate directory. This option makes it easy to use these modules without having to change any of the code that uses them.</P
></LI
><li class="listitem"><p class="para"><a class="listitem" name="ch06-pgfId-942926"></A
>Set the <kbd class="command">PERL5LIB</KBD
><a class="indexterm" name="ch06-idx-960817-0"></A
> environment variable as a set of paths, separated by colons.</P
></LI
><li class="listitem"><p class="para"><a class="listitem" name="ch06-pgfId-946713"></A
>Modify <kbd class="command">@INC</KBD
> before calling <kbd class="command">require</KBD
>:</P
><pre class="programlisting">   unshift (@INC, &quot;/usr/perl/include&quot;); # Prepend a directory name
   require 'foo.pl';<a class="indexterm" name="ch06-idx-960790-0"></A
><a class="indexterm" name="ch06-idx-960790-1"></A
></PRE
></LI
></OL
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch06_01.htm" title="6.1 Basic Package"><img src="../gifs/txtpreva.gif" alt="Previous: 6.1 Basic Package" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Advanced Perl Programming"><img src="../gifs/txthome.gif" alt="Advanced Perl Programming" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch06_03.htm" title="6.3 Package Initialization and Destruction"><img src="../gifs/txtnexta.gif" alt="Next: 6.3 Package Initialization and Destruction" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">6.1 Basic Package</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">6.3 Package Initialization and Destruction</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
