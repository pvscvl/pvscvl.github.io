<html><head>
<title>[Chapter 4] Subroutine References and Closures</TITLE>
<meta name="DC.title" content="Advanced Perl Programming"><meta name="DC.creator" content="Sriram Srinivasan"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:31:37Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-220-4" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="index.htm" title="Advanced Perl Programming"><link rel="prev" href="ch03_04.htm#ch03-pgfId-951085" title="3.4 Filehandles, Directory Handles, and Formats"><link rel="next" href="ch04_02.htm#ch04-pgfId-939241" title="4.2 Using Subroutine References"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Advanced Perl Programming" usemap="#srchmap" border="0"></H1
><map name="srchmap"><area shape="RECT" coords="0,0,466,54" href="index.htm" alt="Advanced Perl Programming"><area shape="RECT" coords="467,0,514,18" href="../search/asrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch03_04.htm#ch03-pgfId-951085" title="3.4 Filehandles, Directory Handles, and Formats"><img src="../gifs/txtpreva.gif" alt="Previous: 3.4 Filehandles, Directory Handles, and Formats" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 4</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch04_02.htm#ch04-pgfId-939241" title="4.2 Using Subroutine References"><img src="../gifs/txtnexta.gif" alt="Next: 4.2 Using Subroutine References" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="chapter"><h1 class="chapter"><a class="title" name="ch04-41665">4. Subroutine References and Closures</A
></H1
><div class="htmltoc"><p><b>Contents:</B
><br><a class="sect1" href="#ch04-36372" title="4.1 Subroutine References">Subroutine References</A
><br><a class="sect1" href="ch04_02.htm#ch04-pgfId-939241" title="4.2 Using Subroutine References">Using Subroutine References</A
><br><a class="sect1" href="ch04_03.htm#ch04-pgfId-944893" title="4.3 Closures">Closures</A
><br><a class="sect1" href="ch04_04.htm#ch04-pgfId-945067" title="4.4 Using Closures">Using Closures</A
><br><a class="sect1" href="ch04_05.htm#ch04-pgfId-946252" title="4.5 Comparisons to Other Languages">Comparisons to Other Languages</A
><br><a class="sect1" href="ch04_06.htm" title="4.6 Resources">Resources</A
></P
><p></P
></DIV
><div class="epigraph" align="right"><p class="para" align="right"><i>Many are called, but few are called back.</I
></P
><p class="attribution" align="right">-&nbsp;Sister Mary Tricky</P
></DIV
><p class="para">As with ordinary variables, subroutines can be named or anonymous, and Perl has a syntax for taking a reference to either type. Such references work rather like pointers to functions in C, and they can be used to create such sophisticated structures as the following:</P
><ul class="itemizedlist"><li class="listitem"><p class="para"><a class="listitem" name="ch04-pgfId-947292"></A
><em class="emphasis">Dispatch tables</EM
>. Or data structures that map events to subroutine references. When an event comes in, a dispatch table is used to look up the corresponding subroutine. This is useful in creating large and efficient switch statements, finite state machines, signal handlers, and GUI toolkits.</P
></LI
><li class="listitem"><p class="para"><a class="listitem" name="ch04-pgfId-947293"></A
><em class="emphasis">Higher-order procedures</EM
>. A higher-order procedure takes other procedures as arguments (like the C library procedure <kbd class="command">qsort</KBD
>) or returns new procedures. The latter feature is available only in interpreted languages such as Perl, Python, and LISP (hey, LISPers, you have lambda functions!).</P
></LI
><li class="listitem"><p class="para"><a class="listitem" name="ch04-pgfId-947294"></A
><em class="emphasis">Closures</EM
>. A closure is a subroutine that, when created, packages its containing subroutine's environment (all the variables it requires and that are not local to itself). </P
></LI
></UL
><p class="para">In the following sections, we look at the syntax for taking and managing subroutine references and subsequently use them in the applications listed. </P
><div class="sect1"><h2 class="sect1"><a class="title" name="ch04-36372">4.1 Subroutine References</A
></H2
><p class="para"><a class="indexterm" name="ch04-idx-950805-0"></A
><a class="indexterm" name="ch04-idx-950805-1"></A
>There's nothing particularly fancy or magical about subroutine references. In this section, we'll study how to create references to named and anonymous subroutines and how to dereference them.</P
><div class="sect2"><h3 class="sect2"><a class="title" name="ch04-pgfId-947809">4.1.1 References to Named Subroutines</A
></H3
><p class="para">We saw earlier that to take a reference to an existing variable, we prefix it with a backslash. It is much the same with subroutines. <kbd class="command">\&amp;mysub</KBD
> is a reference to <kbd class="command">&amp;mysub</KBD
>. For example:</P
><pre class="programlisting">sub greet {
    print &quot;hello \n&quot;;
}
$rs = \&amp;greet; # Create a reference to subroutine greet</PRE
><p class="para">It is important to note that we are not<em class="emphasis"> calling</EM
> the <kbd class="command">greet</KBD
> subroutine here, in the same way that we don't evaluate the value of a scalar when we take a reference to it. </P
><p class="para">Contrast this to the following code, which uses parentheses: </P
><pre class="programlisting">$rs = \&amp;greet();</PRE
><p class="para">This expression likely doesn't do what you expect. It calls <kbd class="command">greet</KBD
> and produces a reference to its <em class="emphasis">return value</EM
>, which is the value of the last expression evaluated inside that subroutine. Since <kbd class="command">print</KBD
> executed last and returned a 1 or a 0 (indicating whether or not it was successful in printing the value), the result of this expression is a reference to a scalar containing 1 or 0! These are the kind of mistakes that make you wish for type-safety once in a while!</P
><p class="para">To summarize, do not use parentheses when taking a subroutine reference.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch04-pgfId-947810">4.1.2 References to Anonymous Subroutines</A
></H3
><p class="para"><a class="indexterm" name="ch04-idx-950813-0"></A
><a class="indexterm" name="ch04-idx-950813-1"></A
>You can create an anonymous subroutine simply by omitting the name in a subroutine declaration. In every other respect, the declaration is identical to a named one.</P
><pre class="programlisting">$rs = sub {
           print &quot;hello \n&quot;;
      };</PRE
><p class="para">This expression returns a reference to the newly declared subroutine. Notice that because it is an expression, it requires the semicolon at the end, unlike the declaration of a named subroutine.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch04-25598">4.1.3 Dereferencing Subroutine References</A
></H3
><p class="para"><a class="indexterm" name="ch04-idx-950817-0"></A
>Dereferencing a subroutine reference calls the subroutine indirectly. As with data references, Perl does not care whether <kbd class="command">$rs</KBD
> is pointing to a named or an anonymous subroutine; dereferencing works the same way in either case.</P
><p class="para">It should come as no surprise that prepending <kbd class="command">$rs</KBD
> with the appropriate prefix&nbsp;- "<kbd class="command">&amp;</KBD
>", in this case&nbsp;- dereferences it:</P
><pre class="programlisting"><b class="emphasis.bold">&amp;$rs</B
>(10, 20);  # Call the subroutine indirectly</PRE
><p class="para">That's all there is to it.</P
><p class="para">Just as you can use the <kbd class="command">-&gt;</KBD
> syntax with arrays or hashes (<kbd class="command">$ra-&gt;[10]</KBD
> or <kbd class="command">$rh-&gt;{'k2'}</KBD
>), you can call subroutines indirectly through references, like this: </P
><pre class="programlisting">$rsub-&gt;(10);</PRE
><p class="para">In fact, subroutine calls can be chained if the intermediate calls return subroutine references. For example:</P
><pre class="programlisting">$rs = \&amp;test1;
$rs-&gt;(&quot;Batman&quot;)-&gt;(&quot;Robin&quot;); # Prints &quot;Batman and Robin&quot;

sub test1 {
    my $arg = shift;
    print &quot;$arg&quot;;
    return \&amp;test2;
}
sub test2 {
    my $arg = shift;
    print &quot; and $arg\n&quot;;
}<a class="indexterm" name="ch04-idx-950819-0"></A
></PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch04-pgfId-948153">4.1.4 Symbolic References</A
></H3
><p class="para"><a class="indexterm" name="ch04-idx-950821-0"></A
><a class="indexterm" name="ch04-idx-950821-1"></A
>Recall that symbolic references contain names (strings), not real references. There is no difference in syntax between real and symbolic references. Consider</P
><pre class="programlisting">sub foo { print &quot;foo called\n&quot; }
$rs = &quot;foo&quot;; 
&amp;$rs();  # prints &quot;foo called&quot;</PRE
><p class="para">Using symbolic references is a mite slower than using real references.</P
></DIV
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch03_04.htm#ch03-pgfId-951085" title="3.4 Filehandles, Directory Handles, and Formats"><img src="../gifs/txtpreva.gif" alt="Previous: 3.4 Filehandles, Directory Handles, and Formats" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Advanced Perl Programming"><img src="../gifs/txthome.gif" alt="Advanced Perl Programming" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch04_02.htm#ch04-pgfId-939241" title="4.2 Using Subroutine References"><img src="../gifs/txtnexta.gif" alt="Next: 4.2 Using Subroutine References" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">3.4 Filehandles, Directory Handles, and Formats</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">4.2 Using Subroutine References</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
