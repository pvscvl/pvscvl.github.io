<html><head>
<title>[Chapter 1] 1.5 Symbolic References</TITLE>
<meta name="DC.title" content="Advanced Perl Programming"><meta name="DC.creator" content="Sriram Srinivasan"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:30:03Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-220-4" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch01_01.htm" title="1. Data References and Anonymous Storage"><link rel="prev" href="ch01_04.htm" title="1.4 Querying a Reference"><link rel="next" href="ch01_06.htm#ch01-pgfId-945311" title="1.6 A View of the Internals"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Advanced Perl Programming" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,54" href="index.htm" alt="Advanced Perl Programming"><area shape="RECT" coords="467,0,514,18" href="../search/asrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch01_04.htm" title="1.4 Querying a Reference"><img src="../gifs/txtpreva.gif" alt="Previous: 1.4 Querying a Reference" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch01_01.htm" title="1. Data References and Anonymous Storage">Chapter 1<br>Data References and Anonymous Storage</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch01_06.htm#ch01-pgfId-945311" title="1.6 A View of the Internals"><img src="../gifs/txtnexta.gif" alt="Next: 1.6 A View of the Internals" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch01-38915">1.5 Symbolic References</A
></H2
><p class="para"><a class="indexterm" name="ch01-idx-953732-0"></A
><a class="indexterm" name="ch01-idx-953732-1"></A
>Normally, a construct such as <kbd class="command">$$var</KBD
> indicates that <kbd class="command">$var</KBD
> is a reference variable, and the programmer expects this expression to return the value that was pointed to by <kbd class="command">$var</KBD
> when the references were taken.</P
><p class="para">What if <kbd class="command">$var</KBD
> is not a reference variable at all? Instead of complaining loudly, Perl checks to see whether <kbd class="command">$var</KBD
> contains a string. If so, it uses that string as a regular variable name and messes around with this variable! Consider the following:</P
><pre class="programlisting">$x = 10;
$var = &quot;x&quot;;
$$var = 30;   # Modifies $x to 30 , because $var is a symbolic
              # reference !</PRE
><p class="para">When evaluating <kbd class="command">$$var</KBD
>, Perl first checks to see whether <kbd class="command">$var</KBD
> is a reference, which it is not; it's a string. Perl then decides to give the expression one more chance: it treats <kbd class="command">$var</KBD
>'s contents as a variable identifier (<kbd class="command">$x</KBD
>). The example hence ends up modifying <kbd class="command">$x</KBD
> to 30.</P
><p class="para">It is important to note that symbolic references work only for global variables, not for those marked private using <kbd class="command">my</KBD
>. </P
><p class="para"><a class="indexterm" name="ch01-idx-953736-0"></A
><a class="indexterm" name="ch01-idx-953736-1"></A
>Symbolic references work equally well for arrays and hashes also:</P
><pre class="programlisting">$var = &quot;x&quot;;
@$var = (1, 2, 3);   # Sets @x to the enumerated list on the right</PRE
><p class="para">Note that the symbol used before <kbd class="command">$var</KBD
> dictates the type of variable to access: <kbd class="command">$$var</KBD
> is equivalent to <kbd class="command">$x</KBD
>, and <code class="literal">@</CODE
><kbd class="command">$var</KBD
> is equivalent to saying<b class="emphasis.bold"> </B
><code class="literal">@</CODE
><kbd class="command">x</KBD
>.</P
><p class="para">This facility is immensely useful, and, for those who have done this kind of thing before with earlier versions of Perl, is much more efficient than using <kbd class="command">eval</KBD
>. Let us say you want your script to process a command-line option such as "<kbd class="command">-Ddebug_level=3</KBD
>" and set the <kbd class="command">$debug_level</KBD
> variable. This is one way of doing it:</P
><pre class="programlisting">while ($arg = shift @ARGV){
    if ($arg =~ /-D(\w+)=(\w+)/) {
         $var_name = $1; $value = $2;
         $$var_name = $value;     # Or more compactly, $$1 = $2;
    }
}</PRE
><p class="para">On the other hand, Perl's eagerness to try its damnedest to get an expression to work sometimes doesn't help. In the preceding examples, if you expected the program logic to have a real reference instead of a string, then you would have wanted Perl to point it out instead of making assumptions about your usage. Fortunately, there's a way to switch this eagerness off. Perl has a number of compile-time directives, or pragmas. The <kbd class="command">strict</KBD
><a class="indexterm" name="ch01-idx-953737-0"></A
> pragma tells Perl to do strict error checking. You can even enumerate specific aspects to be strict about, one of which is `refs':</P
><pre class="programlisting">use strict 'refs';  # Tell Perl not to allow symbolic references
$var = &quot;x&quot;;
$$var = 30;</PRE
><p class="para">This results in a run-time error whenever you try to use a symbolic reference:</P
><pre class="programlisting">Can't use string (&quot;x&quot;) as a SCALAR ref while &quot;strict refs&quot; in use at try.pl line 3</PRE
><p class="para">The <kbd class="command">strict</KBD
> directive remains in effect until the end of the block. It can be turned off by saying <kbd class="command">no strict</KBD
> or, more specifically, <kbd class="command">no strict 'refs'</KBD
>.<a class="indexterm" name="ch01-idx-953734-0"></A
><a class="indexterm" name="ch01-idx-953734-1"></A
></P
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch01_04.htm" title="1.4 Querying a Reference"><img src="../gifs/txtpreva.gif" alt="Previous: 1.4 Querying a Reference" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Advanced Perl Programming"><img src="../gifs/txthome.gif" alt="Advanced Perl Programming" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch01_06.htm#ch01-pgfId-945311" title="1.6 A View of the Internals"><img src="../gifs/txtnexta.gif" alt="Next: 1.6 A View of the Internals" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">1.4 Querying a Reference</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">1.6 A View of the Internals</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
