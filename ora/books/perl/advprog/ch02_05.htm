<html><head>
<title>[Chapter 2] 2.5 Pretty-Printing</TITLE>
<meta name="DC.title" content="Advanced Perl Programming"><meta name="DC.creator" content="Sriram Srinivasan"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:31:02Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-220-4" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch02_01.htm" title="2. Implementing Complex Data Structures"><link rel="prev" href="ch02_04.htm" title="2.4 Pass the Envelope"><link rel="next" href="ch02_06.htm" title="2.6 Resources"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Advanced Perl Programming" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,54" href="index.htm" alt="Advanced Perl Programming"><area shape="RECT" coords="467,0,514,18" href="../search/asrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch02_04.htm" title="2.4 Pass the Envelope"><img src="../gifs/txtpreva.gif" alt="Previous: 2.4 Pass the Envelope" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch02_01.htm" title="2. Implementing Complex Data Structures">Chapter 2<br>Implementing Complex Data Structures</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch02_06.htm" title="2.6 Resources"><img src="../gifs/txtnexta.gif" alt="Next: 2.6 Resources" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch02-42235">2.5 Pretty-Printing</A
></H2
><p class="para"><a class="indexterm" name="ch02-idx-949564-0"></A
><a class="indexterm" name="ch02-idx-949564-1"></A
>In building complicated data structures, it is always nice to have a pretty-printer handy for debugging. There are at least two options for pretty-printing data structures. The first is the <a class="indexterm" name="ch02-idx-949565-0"></A
><a class="indexterm" name="ch02-idx-949565-1"></A
>Perl debugger itself. It uses a function called <code class="literal">dumpValue</CODE
> in a file called <em class="emphasis">dumpvar.pl</EM
>, which can be found in the standard library directory. We can help ourselves to it, with the caveat that it is an unadvertised function and could change someday. To pretty-print this structure, for example:</P
><pre class="programlisting">  @sample = (11.233,{3 =&gt; 4, &quot;hello&quot; =&gt; [6,7]});</PRE
><p class="para">we write the following:</P
><pre class="programlisting">require 'dumpvar.pl';
dumpValue(\@sample); # always pass by reference</PRE
><p class="para">This prints something like this:</P
><pre class="programlisting">0  11.233
1  HASH(0xb75dc0)
   3 =&gt; 4
   'hello' =&gt; ARRAY(0xc70858)
      0  6
      1  7</PRE
><p class="para">We will cover the <kbd class="command">require</KBD
> statement in <a class="xref" href="ch06_01.htm" title="Modules">Chapter 6, <cite class="chapter">Modules</CITE
></A
>. Meanwhile, just think of it as a fancy <kbd class="command">#include</KBD
> (which doesn't load the file if it is already loaded).<a class="indexterm" name="ch02-idx-949579-0"></A
><a class="indexterm" name="ch02-idx-949579-1"></A
> </P
><p class="para">The <a class="indexterm" name="ch02-idx-949567-0"></A
>Data::Dumper module available from CPAN is another viable alternative for pretty-printing. <a class="xref" href="ch10_01.htm" title="Persistence">Chapter 10, <cite class="chapter">Persistence</CITE
></A
>, covers this module in some detail, so we will not say any more about it here. Both modules detect circular references and handle subroutine and glob references.</P
><p class="para">It is fun and instructive to write a pretty-printer ourselves. <a class="xref" href="#ch02-11753" title="Pretty-Printing">Example 2.5</A
> illustrates a simple effort, which accounts for circular references but doesn't follow typeglobs or subroutine references. This example is used as follows:</P
><pre class="programlisting">pretty_print(@sample); # Doesn't <code class="replaceable"><i>need</I
></CODE
> a reference</PRE
><p class="para">This prints </P
><pre class="programlisting">11.233
{ # HASH(0xb78b00)
:  3 =&gt; 4
:  hello =&gt;
:  :  [ # ARRAY(0xc70858)
:  :  :  6
:  :  :  7
:  :  ]
}</PRE
><p class="para">The following code contains specialized procedures (<kbd class="command">print_array</KBD
>, <kbd class="command">print_hash</KBD
>, or <kbd class="command">print_scalar</KBD
>) that know how to print specific data types. <kbd class="command">print_ref</KBD
>, charged with the task of pretty-printing a reference, simply dispatches control to one of the above procedures depending upon the type of argument given to it. In turn, these procedures may call <code class="literal">print_ref</CODE
> recursively if the data types that they handle contain one or more references. </P
><p class="para">Whenever a reference is encountered, it is also checked with a hash <kbd class="command">%already_seen</KBD
> to determine whether the reference has been printed before. This prevents the routine from going into an infinite loop in the presence of circular references. All functions manipulate the global variable <kbd class="command">$level</KBD
> and call <kbd class="command">print_indented</KBD
>, which appropriately indents and prints the string given to it.</P
><div class="example"><h4 class="example"><a class="title" name="ch02-11753">Example 2.5: Pretty-Printing</A
></H4
><pre class="programlisting">$level = -1; # Level of indentation

sub pretty_print {
    my $var;
    foreach $var (@_) {
        if (ref ($var)) {
            print_ref($var);
        } else {
            print_scalar($var);
        }
    }
}

sub print_scalar {
    ++$level;
    my $var = shift;
    print_indented ($var);
    --$level;
}

sub print_ref {
    my $r = shift;
    if (exists ($already_seen{$r})) {
        print_indented (&quot;$r (Seen earlier)&quot;);
        return;
    } else {
        $already_seen{$r}=1;
    }
    my $ref_type = ref($r);
    if ($ref_type eq &quot;ARRAY&quot;) {
        print_array($r);
    } elsif ($ref_type eq &quot;SCALAR&quot;) {
        print &quot;Ref -&gt; $r&quot;;
        print_scalar($$r);
    } elsif ($ref_type eq &quot;HASH&quot;) {
        print_hash($r);
    } elsif ($ref_type eq &quot;REF&quot;) {
        ++$level;
        print_indented(&quot;Ref -&gt; ($r)&quot;);
        print_ref($$r);
        --$level;
    } else {
        print_indented (&quot;$ref_type (not supported)&quot;);
    }
}

sub print_array {
    my ($r_array) = @_;
    ++$level;
    print_indented (&quot;[ # $r_array&quot;);
    foreach $var (@$r_array) {
        if (ref ($var)) {
            print_ref($var);
        } else {
            print_scalar($var);
        }
    }
    print_indented (&quot;]&quot;);
    --$level;
}

sub print_hash {
    my($r_hash) = @_;
    my($key, $val);
    ++$level; 
    print_indented (&quot;{ # $r_hash&quot;);
    while (($key, $val) = each %$r_hash) {
        $val = ($val ? $val : '&quot;&quot;');
        ++$level;
        if (ref ($val)) {
            print_indented (&quot;$key =&gt; &quot;);
            print_ref($val);
        } else {
            print_indented (&quot;$key =&gt; $val&quot;);
        }
        --$level;
    }
    print_indented (&quot;}&quot;);
    --$level;
}

sub print_indented {
    $spaces = &quot;:  &quot; x $level;
    print &quot;${spaces}$_[0]\n&quot;;
}</PRE
></DIV
><p class="para"><kbd class="command">print_ref</KBD
> simply prints its argument (a reference) and returns if it has already seen this reference. If you were to read the output produced by this code, you would find it hard to imagine which reference points to which structure. As an exercise, you might try producing a better pretty-printer, which identifies appropriate structures by easily identifiable numeric labels like this:</P
><pre class="programlisting">:  hello =&gt;
:  :  [          # 10
:  :  :  6
:  :  :  7
:  :  ]
:  foobar =&gt; array-ref # 10
}</PRE
><p class="para">The number 10 is an automatically generated label, which is more easily identifiable than something like <kbd class="command">ARRAY(0xc70858)</KBD
>.<a class="indexterm" name="ch02-idx-949569-0"></A
><a class="indexterm" name="ch02-idx-949569-1"></A
></P
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch02_04.htm" title="2.4 Pass the Envelope"><img src="../gifs/txtpreva.gif" alt="Previous: 2.4 Pass the Envelope" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Advanced Perl Programming"><img src="../gifs/txthome.gif" alt="Advanced Perl Programming" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch02_06.htm" title="2.6 Resources"><img src="../gifs/txtnexta.gif" alt="Next: 2.6 Resources" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">2.4 Pass the Envelope</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">2.6 Resources</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
