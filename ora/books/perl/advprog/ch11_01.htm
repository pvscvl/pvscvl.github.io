<html><head>
<title>[Chapter 11] Implementing Object Persistence</TITLE>
<meta name="DC.title" content="Advanced Perl Programming"><meta name="DC.creator" content="Sriram Srinivasan"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:35:55Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-220-4" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="index.htm" title="Advanced Perl Programming"><link rel="prev" href="ch10_05.htm" title="10.5 Resources"><link rel="next" href="ch11_02.htm" title="11.2 Design Notes"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Advanced Perl Programming" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,54" href="index.htm" alt="Advanced Perl Programming"><area shape="RECT" coords="467,0,514,18" href="../search/asrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch10_05.htm" title="10.5 Resources"><img src="../gifs/txtpreva.gif" alt="Previous: 10.5 Resources" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 11</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch11_02.htm" title="11.2 Design Notes"><img src="../gifs/txtnexta.gif" alt="Next: 11.2 Design Notes" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="chapter"><h1 class="chapter"><a class="title" name="ch11-11833">11. Implementing Object Persistence</A
></H1
><div class="htmltoc"><p><b>Contents:</B
><br><a class="sect1" href="#ch11-31303" title="11.1 Adaptor: An Introduction">Adaptor: An Introduction</A
><br><a class="sect1" href="ch11_02.htm" title="11.2 Design Notes">Design Notes</A
><br><a class="sect1" href="ch11_03.htm" title="11.3 Implementation">Implementation</A
><br><a class="sect1" href="ch11_04.htm" title="11.4 Resources">Resources</A
></P
><p></P
></DIV
><div class="epigraph" align="right"><p class="para" align="right"><i>God gave us our memories so that we might have roses in December.</I
></P
><p class="attribution" align="right">-&nbsp;James Matthew Barrie</P
></DIV
><p class="para">The Amazon is formed by the confluence of two rivers: the Solim»es, a yellowish, silt-laden river, and the dramatic Rio Negro, a river with jet-black water.[<a class="footnote" href="#ch11-pgfId-983941">1</A
>] Twelve miles downstream of their meeting, the two rivers defiantly retain their separate identities while sharing the same bed. Somehow, this seems to bear a strange resemblance to the subject at hand: object persistence.</P
><blockquote class="footnote"><div class="footnote"><p class="para"><a class="footnote" name="ch11-pgfId-983941">[1]</A
> The color comes from suspended minerals and decomposed organic matter from marginal swamps.</P
></DIV
></BLOCKQUOTE
><p class="para"><a class="indexterm" name="ch11-idx-989183-0"></A
>There are two important camps in the commercial computing world: purveyors of OO (language designers, object evangelists) and persistence vendors (database and TP[<a class="footnote" href="#ch11-pgfId-988027">2</A
>] monitor implementors). Like the Solim»es and the Rio Negro, the two camps (and multiple camps within their ranks) have their own agendas, even as they strive to merge at some point in the future. </P
><blockquote class="footnote"><div class="footnote"><p class="para"><a class="footnote" name="ch11-pgfId-988027">[2]</A
> Transaction-processing.</P
></DIV
></BLOCKQUOTE
><p class="para">The OO folks would like nothing more than commercial-grade persistence (in terms of performance, stability, and scalability) and propose methods to retrofit various persistence stores onto an object model. Some of their prominent efforts include the CORBA Persistence Services specification from the Object Management Group, Sun's PJava (Persistent Java), and the OLE Persistence framework from Microsoft. Meanwhile, the database folks are grafting OO features onto their offerings: RDBMS vendors such as Informix and Oracle have announced object-relational databases (supporting abstract data types, not just plain scalar data), and the various TP monitor products from Tandem, IBM, Tuxedo, and Encina are sporting object-oriented interfaces. There is a tiny object persistence camp, the Object Database Management Group, comprising the OODB vendors, but their presence is quite negligible (commercially).</P
><p class="para">One of the hot topics in all these groups is the subject of "<a class="indexterm" name="ch11-idx-989187-0"></A
><a class="indexterm" name="ch11-idx-989187-1"></A
><a class="indexterm" name="ch11-idx-989187-2"></A
>orthogonal" persistence&nbsp;- the ability to make an application or object persistent without embedding any, or much, persistence-specific code in the object. The idea is very seductive: Design your object model, implement it in memory, and then add persistence on the "side." This way, the objects don't have to be cluttered with the myriad details (and differences) of databases, nor do they have to deal with filesystem errors, data formatting, and other problems.[<a class="footnote" href="#ch11-pgfId-986615">3</A
>] You can think of it this way: if you never embed user-interface-specific code inside an object, why would you do so for persistence?</P
><blockquote class="footnote"><div class="footnote"><p class="para"><a class="footnote" name="ch11-pgfId-986615">[3]</A
> For an excellent bibliography on the topic, please refer to the PJava design paper [<a class="xref" href="ch11_04.htm" title="">9</A
>].</P
></DIV
></BLOCKQUOTE
><p class="para">There have traditionally been two approaches to achieving the transparency mentioned above.</P
><p class="para">The first is to take advantage of the systems side of things, such as the hardware, operating system, and compiler. For example, object-oriented databases such as Object Store and the Texas Persistent Store (a public-domain library) use the Unix system's <code class="literal">mmap</CODE
> and <code class="literal">mprotect</CODE
> calls to transparently move data from memory to disk and back. Another interesting systems-oriented approach comes from a group at Bell Labs, which has built a library that stores the state of an application by having it simply dump core in a controlled fashion, thus faithfully rendering all memory-based data structures onto disk.[<a class="footnote" href="#ch11-pgfId-985688">4</A
>] They have augmented this facility with recovery and transactions and made this approach almost completely transparent to the application.</P
><blockquote class="footnote"><div class="footnote"><p class="para"><a class="footnote" name="ch11-pgfId-985688">[4]</A
> Note that Perl's <code class="literal">dump</CODE
> operator does produce a core file, but it also aborts the application, a somewhat unpleasant feature.</P
></DIV
></BLOCKQUOTE
><p class="para">The second approach for achieving transparent or orthogonal persistence is to supply application-level tools and libraries, an approach that is considerably more portable than the systems approach. CASE tools, for example, generate code to automate the task of sending objects to a persistent store (typically a relational database), while libraries such as Microsoft Foundation Classes ask the objects to stream themselves out to a file. In the latter case, the objects have to implement streaming methods. In either case, the code to be written by<em class="emphasis"> hand</EM
> is fairly minimal, so it is still a reasonably transparent approach.</P
><p class="para">In this chapter, we will discuss a pilot project called <a class="indexterm" name="ch11-idx-989188-0"></A
><a class="indexterm" name="ch11-idx-989188-1"></A
>Adaptor, a persistence framework for Perl objects (and written in Perl, of course). This is an application-level approach and doesn't expect the objects to implement persistence-specific methods. Unlike typical CASE tools, it does not generate any code files, because Perl is a dynamic language.</P
><p class="para">The primary objective of the Adaptor project was to study orthogonal persistence; this, I thought, could be done by "adapting" objects to specific types of persistent stores, using information completely outside the objects; the implementation described in this chapter depends on configuration files to describe which attributes map to which database columns, and how. </P
><p class="para">A secondary objective of this project was to study how you might code an application differently if you could <em class="emphasis">always</EM
> take queries and transaction atomicity for granted; that is, even if you didn't have a database at all, suppose you could ask some entity, "Give me all employees whose salary exceeds $100,000," and the application would be persistence-ready from the very beginning. I'm of the firm belief that you cannot simply <em class="emphasis">drop</EM
> persistence into an application; the object implementations look very different if they <em class="emphasis">know</EM
> that there is some kind of persistence up ahead (even if they don't quite have any specifics about the type of persistence). This is similar to the case of applications knowing that there may be a graphical user interface in the future and that it may be event-driven; for example, you may not write errors out to <kbd class="command">STDERR</KBD
>, and might make sure that no code gets indefinitely blocked on I/O. (We'll actually discuss these issues in <a class="xref" href="ch14_01.htm" title="Introduction to GUIs, Tk, and Perl/Tk">Section 14.1, "Introduction to GUIs, Tk, and Perl/Tk"</A
>.) </P
><p class="para">This chapter is probably more important for the issues it brings up than the specifics of the implementation; however, an implementation is necessary to clearly understand the problem.<a class="indexterm" name="ch11-idx-989185-0"></A
><a class="indexterm" name="ch11-idx-989185-1"></A
><a class="indexterm" name="ch11-idx-989185-2"></A
><a class="indexterm" name="ch11-idx-989185-3"></A
></P
><div class="sect1"><h2 class="sect1"><a class="title" name="ch11-31303">11.1 Adaptor: An Introduction</A
></H2
><p class="para">Adaptor is intended to be a group of modules that translate a uniform persistence interface to specific types of persistent stores, as shown in <a class="xref" href="#ch11-12105" title="Adaptor modules">Figure 11.1</A
>. This chapter describes the two that have been implemented: <a class="indexterm" name="ch11-idx-989209-0"></A
><a class="indexterm" name="ch11-idx-989209-1"></A
>Adaptor::File, capable of storing objects in plain files, and <a class="indexterm" name="ch11-idx-989210-0"></A
><a class="indexterm" name="ch11-idx-989210-1"></A
>Adaptor::DBI, which can store them in relational databases. From here on, we will use the term "adaptor" to mean an object of any of these modules.</P
><h4 class="figure"><a class="title" name="ch11-12105">Figure 11.1: Adaptor modules</A
></H4
><img class="graphic" src="figs/wpa_1101.gif" alt="Figure 11.1"><p class="para">An adaptor represents a typical persistent store capable of accommodating a heterogeneous collection of objects; an Adaptor::File object is a wrapper over a file, and an Adaptor::DBI object is a wrapper over a database connection. All adaptors provide basic SQL queries[<a class="footnote" href="#ch11-pgfId-986240">5</A
>] and transactions.[<a class="footnote" href="#ch11-pgfId-986242">6</A
>]</P
><blockquote class="footnote"><div class="footnote"><p class="para"><a class="footnote" name="ch11-pgfId-986240">[5]</A
> Only SQL <code class="literal">where</CODE
> clauses, not the entire select clause; joins are not supported either.</P
></DIV
><div class="footnote"><p class="para"><a class="footnote" name="ch11-pgfId-986242">[6]</A
> Adaptor::File implements a fairly limited model, but it does support the interface.</P
></DIV
></BLOCKQUOTE
><p class="para">Before we use these modules, let us create a few test application objects. We use the <a class="indexterm" name="ch11-idx-989211-0"></A
>ObjectTemplate library discussed in <a class="xref" href="ch08_01.htm" title="Efficient Attribute Storage">Section 8.1, "Efficient Attribute Storage"</A
>, for this task:</P
><pre class="programlisting">use ObjectTemplate;
#----------------------------------------
package Employee;
@ISA = ('ObjectTemplate');
@ATTRIBUTES = qw(_id name age dept);
#----------------------------------------
package Department;
@ISA = ('ObjectTemplate');
@ATTRIBUTES = qw(_id name address);
#----------------------------------------
$dept = new Department (name =&gt; 'Materials Handling');
$emp1 = new Employee   (name =&gt; 'John',  age =&gt; 23, dept =&gt; $dept);
$emp2 = new Employee   (name =&gt; 'Larry', age =&gt; 45, dept =&gt; $dept);</PRE
><p class="para">We now have three objects, free of database-specific code. To stow these objects into a persistent store, we start by creating an instance of a file or database adaptor as follows: </P
><pre class="programlisting">$db = <b class="emphasis.bold">Adaptor::File-&gt;new</B
>('test.dat', 'empfile.cfg');</PRE
><p class="para">The adaptor object, <kbd class="command">$db</KBD
>, is now associated with file <i class="filename">test.dat</I
> and stores all objects given to it in this file. An object may have attributes that it doesn't wish to be made persistent: some attributes may be computed (<kbd class="command">after_tax_salary</KBD
>), while others may refer to filehandles, sockets, or GUI widgets. For this reason, the adaptor expects the developer to state, in a configuration file (<i class="filename">empfile.cfg</I
>, in this example), which attributes must be made persistent. <i class="filename">empfile.cfg</I
> looks like this:</P
><pre class="programlisting">[Employee]
attributes = _id, name, age
[Department]
attributes = _id, name, address</PRE
><p class="para">The adaptor can now be asked to store objects in its file, <i class="filename">test.dat</I
>, as follows:</P
><pre class="programlisting"><b class="emphasis.bold">$db-&gt;store</B
>($dept);
$db-&gt;store($emp1);
$db-&gt;store($emp2);</PRE
><p class="para">Our "database" now has a number of objects, and we can query this database using the <kbd class="command">retrieve_where</KBD
><a class="indexterm" name="ch11-idx-989212-0"></A
> method, like this:</P
><pre class="programlisting">@emps = <b class="emphasis.bold">$db-&gt;retrieve_where</B
> ('Employee', &quot;age &lt; 40 &amp;&amp; name != 'John'&quot;);
foreach $emp (@emps) {
    $emp-&gt;print();
}</PRE
><p class="para">This method takes a class name and a query expression and returns object references of the specified class that match this criteria.</P
><p class="para">The <kbd class="command">flush</KBD
><a class="indexterm" name="ch11-idx-989213-0"></A
> method is used to ensure that the data in memory is flushed out to disk:</P
><pre class="programlisting"><b class="emphasis.bold">$db-&gt;flush</B
>();</PRE
><p class="para">You can store objects under the purview of transactions:</P
><pre class="programlisting"><b class="emphasis.bold">$db-&gt;begin_transaction</B
>();
$db-&gt;store($emp1);
$db-&gt;store($emp2);
<b class="emphasis.bold">$db-&gt;commit_transaction</B
>(); # or rollback_transaction</PRE
><p class="para">The file adaptor keeps track of all objects given to its store method, and it flushes them to disk on <kbd class="command">commit_transaction</KBD
><a class="indexterm" name="ch11-idx-989214-0"></A
>. If, instead, you call <kbd class="command">rollback_transaction</KBD
>, it simply discards its internal structures and reloads the file, thus getting rid of all changes you may have made to the objects. This is by no means a real transaction (it doesn't protect the data from system failures), but it does support atomic updates, which can be used as an automatic undo facility.</P
><p class="para">To store these objects in a database instead of a file, all we need to do is make <kbd class="command">$db</KBD
> an instance of the <a class="indexterm" name="ch11-idx-989215-0"></A
><a class="indexterm" name="ch11-idx-989215-1"></A
>Adaptor::DBI class. Everything else remains unchanged, except that you can feel a lot safer about your data because you get real transactions. </P
><p class="para">The Adaptor::DBI constructor's arguments are database-specific:</P
><pre class="programlisting">$db = <b class="emphasis.bold">Adaptor::DBI-&gt;new</B
>($user, $password, 'Sybase', 'empdb.cfg');</PRE
><p class="para">This method calls DBI::new with the first three parameters. The last parameter is, as before, a configuration file, with some extra database-specific <i class="filename">mapping</I
> information:</P
><pre class="programlisting">[Employee]
table      = emp
attributes = _id, name, age
columns    = _id, name, age
[Department]
table      = dept
attributes = _id, name, address
columns    = _id, name, address</PRE
><p class="para">The <em class="emphasis">attributes</EM
> parameter specifies the list of attributes to be extracted out of an instance of a given module, and <em class="emphasis">columns</EM
> lists the corresponding column names in the database. Many adaptors can use the same configuration file.</P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch10_05.htm" title="10.5 Resources"><img src="../gifs/txtpreva.gif" alt="Previous: 10.5 Resources" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Advanced Perl Programming"><img src="../gifs/txthome.gif" alt="Advanced Perl Programming" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch11_02.htm" title="11.2 Design Notes"><img src="../gifs/txtnexta.gif" alt="Next: 11.2 Design Notes" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">10.5 Resources</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">11.2 Design Notes</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
