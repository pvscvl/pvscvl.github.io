<html><head>
<title>[Chapter 6] 6.5 Importing Symbols</TITLE>
<meta name="DC.title" content="Advanced Perl Programming"><meta name="DC.creator" content="Sriram Srinivasan"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:33:09Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-220-4" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch06_01.htm" title="6. Modules"><link rel="prev" href="ch06_04.htm" title="6.4 Privacy"><link rel="next" href="ch06_06.htm" title="6.6 Nesting Packages"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Advanced Perl Programming" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,54" href="index.htm" alt="Advanced Perl Programming"><area shape="RECT" coords="467,0,514,18" href="../search/asrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch06_04.htm" title="6.4 Privacy"><img src="../gifs/txtpreva.gif" alt="Previous: 6.4 Privacy" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch06_01.htm" title="6. Modules">Chapter 6<br>Modules</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch06_06.htm" title="6.6 Nesting Packages"><img src="../gifs/txtnexta.gif" alt="Next: 6.6 Nesting Packages" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch06-33437">6.5 Importing Symbols</A
></H2
><p class="para"><a class="indexterm" name="ch06-idx-960833-0"></A
><a class="indexterm" name="ch06-idx-960833-1"></A
><a class="indexterm" name="ch06-idx-960833-2"></A
>Sometimes, you may want to selectively import symbols into your namespace, just for typing efficiency. For example, you might want to say <kbd class="command">sqrt</KBD
> instead of <kbd class="command">math::sqrt</KBD
> or <kbd class="command">deposit</KBD
> instead of <kbd class="command">BankAccount::deposit</KBD
>. The <kbd class="command">use</KBD
><a class="indexterm" name="ch06-idx-960837-0"></A
> statement allows you to specify an optional list of function names to be imported:</P
><pre class="programlisting">use BankAccount ('withdraw', 'deposit');
withdraw();  # Can now call function without fully qualifying it.</PRE
><p class="para">For its part, the module has to be ready to export these names (and only them) to whoever <kbd class="command">use</KBD
>s it. It should also have a policy for what it should do if the user does not specify a list at all. Both these tasks are handled for you by a standard module called <a class="indexterm" name="ch06-idx-960838-0"></A
><a class="indexterm" name="ch06-idx-960838-1"></A
>Exporter. The BankAccount class can be implemented as shown next:</P
><pre class="programlisting">package BankAccount;
use Exporter;
@ISA = ('Exporter');     # Inherit from Exporter
@EXPORT_OK = ('withdraw', 'deposit');

sub deposit  { .... }
sub withdraw { .... }</PRE
><p class="para">This code loads the Exporter module and arranges to inherit from that module, using the <kbd class="command">@ISA</KBD
> array. For now, take it on faith that this works; we will study inheritance shortly. The <kbd class="command">@EXPORT_OK</KBD
> array states which symbols are fine to export. The user of this module can in turn specify a list of one or more symbols specified in <kbd class="command">@EXPORT_OK</KBD
> to the <kbd class="command">use</KBD
> statement. If the user says,</P
><pre class="programlisting">use BankAccount ('deposit');</PRE
><p class="para">the <kbd class="command">deposit</KBD
> function can be called without fully qualifying the name, in contrast to <kbd class="command">withdraw()</KBD
>. To tell the Exporter module not to export any symbols into your namespace, leave the list blank. </P
><p class="para">If the module uses <kbd class="command">@EXPORT</KBD
> instead of <kbd class="command">@EXPORT_OK</KBD
>, the user gets all the exported symbols, regardless of whether they were mentioned in the import list or not. I recommend that as a module writer, you use the more polite <kbd class="command">@EXPORT_OK </KBD
>. </P
><p class="para">Please see the Exporter documentation for numerous other features, which, among other things, allow the user of the module to import groups of functions using tag names, or to specify the group using one or more regular expressions.</P
><div class="sect2"><h3 class="sect2"><a class="title" name="ch06-pgfId-956256">6.5.1 How Do use and Exporter Work?</A
></H3
><p class="para">If you are not interested in the details of how <kbd class="command">use</KBD
> and Exporter work, you can easily skip this section without loss of continuity. This is one of those "knowledge for knowledge's sake" kind of sections.</P
><p class="para">The statement</P
><pre class="programlisting">use BankAccount ('withdraw', 'deposit');</PRE
><p class="para">behaves exactly as if you had said</P
><pre class="programlisting">BEGIN { require BankAccount; 
        BankAccount::import('withdraw', 'deposit');}</PRE
><p class="para"><kbd class="command">BEGIN</KBD
> ensures that this statement is parsed and executed as soon as it is seen. <kbd class="command">require</KBD
> loads the file <i class="filename">BankAccount.pm</I
> if it has not been loaded already. Finally, the <kbd class="command">import</KBD
> subroutine is called on that module.[<a class="footnote" href="#ch06-pgfId-959331">3</A
>]</P
><blockquote class="footnote"><div class="footnote"><p class="para"><a class="footnote" name="ch06-pgfId-959331">[3]</A
> A bit of a white lie here. It actually does <kbd class="command">BankAccount-&gt;import</KBD
> (uses an arrow instead of the ::), a slightly different way of calling a subroutine. We'll study this notation in detail in <a class="xref" href="ch07_01.htm" title="Object-Oriented Programming">Chapter 7, <cite class="chapter">Object-Oriented Programming</CITE
></A
>. For now, this explanation is adequate.</P
></DIV
></BLOCKQUOTE
><p class="para"><kbd class="command">import</KBD
><a class="indexterm" name="ch06-idx-960839-0"></A
> is not a Perl keyword. It is simply a call to a user-defined subroutine known as <kbd class="command">import</KBD
>, and the module can define it any way it wishes and do what it wants with its argument list. If <kbd class="command">BankAccount</KBD
> does not define <kbd class="command">import</KBD
> and doesn't inherit it, there is no difference between <kbd class="command">use</KBD
> <kbd class="command">BankAccount</KBD
> and <kbd class="command">require</KBD
> <kbd class="command">BankAccount</KBD
>. By using Exporter, a module can simply inherit an <kbd class="command">import</KBD
> method without having to implement it.</P
><p class="para">To understand how Exporter works, let us build an <kbd class="command">import</KBD
> subroutine ourselves. We develop a simple module called Environment that lets us quickly access environment variables. This is how we want to use it:</P
><pre class="programlisting">use Environment;
print $USER, $PATH;</PRE
><p class="para">Instead of saying <kbd class="command">$ENV{'USER'}</KBD
>, we can now simply say <kbd class="command">$USER</KBD
>. In other words, the Environment module (and specifically a function called <kbd class="command">import</KBD
> in that module) installs variables like <kbd class="command">$USER</KBD
> and <kbd class="command">$PATH</KBD
> in its caller's namespace.</P
><p class="para"><a class="xref" href="#ch06-32152" title="Environment.pm: Create Variables Corresponding to Environment Variables">Example 6.1</A
> shows one way to do write this subroutine.</P
><div class="example"><h4 class="example"><a class="title" name="ch06-32152">Example 6.1: Environment.pm: Create Variables Corresponding to Environment Variables</A
></H4
><pre class="programlisting">package Environment;
sub import {
    # Get some caller details; its package name, and the current file name
    # and line number
    my ($caller_package) = caller; 
    foreach $envt_var_name (keys %ENV) {
         *{&quot;${caller_package}::${envt_var_name}&quot;} = \$ENV{$envt_var_name};
    }
}
1;  # To signify successful initialization</PRE
></DIV
><p class="para">To keep the example small, <kbd class="command">import</KBD
> ignores its parameter list. It uses the <kbd class="command">caller</KBD
> built-in function to find out the calling package's name and creates aliases in that package. For an environment variable <kbd class="command">USER</KBD
>, the statement inside the <kbd class="command">foreach</KBD
> line is translated to this:</P
><pre class="programlisting">*{&quot;main::USER&quot;} = \$ENV{USER};</PRE
><p class="para">assuming that <kbd class="command">main</KBD
> is the calling package.</P
><p class="para">This small nugget encapsulates most of the knowledge of <a class="xref" href="ch03_01.htm" title="Typeglobs and Symbol Tables">Chapter 3</A
>. The right-hand side returns a reference to the scalar containing the value of the environment variable, which is assigned to a typeglob. (Remember our discussion of selective aliasing?) The typeglob expression on the left creates a symbol table entry in <kbd class="command">main</KBD
>'s symbol table, whose scalar component is made to point to the value from the right-hand side. Exporter works exactly the same way, except that it aliases only function names.</P
><p class="para">Incidentally, the standard Perl distribution contains a module called <a class="indexterm" name="ch06-idx-960840-0"></A
>Env that looks quite similar to our Environment package. The only distinction is that instead of creating an alias of the environment variables, Env uses the <kbd class="command">tie</KBD
> mechanism,[<a class="footnote" href="#ch06-pgfId-958435">4</A
>] a much more inefficient way of doing things than the approach just shown.<a class="indexterm" name="ch06-idx-960835-0"></A
><a class="indexterm" name="ch06-idx-960835-1"></A
><a class="indexterm" name="ch06-idx-960835-2"></A
><a class="indexterm" name="ch06-idx-960835-3"></A
><a class="indexterm" name="ch06-idx-960835-4"></A
></P
><blockquote class="footnote"><div class="footnote"><p class="para"><a class="footnote" name="ch06-pgfId-958435">[4]</A
> We'll discuss the <code class="literal">tie</CODE
> approach in <a class="xref" href="ch09_01.htm" title="Tie">Chapter 9, <cite class="chapter">Tie</CITE
></A
>.</P
></DIV
></BLOCKQUOTE
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch06_04.htm" title="6.4 Privacy"><img src="../gifs/txtpreva.gif" alt="Previous: 6.4 Privacy" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Advanced Perl Programming"><img src="../gifs/txthome.gif" alt="Advanced Perl Programming" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch06_06.htm" title="6.6 Nesting Packages"><img src="../gifs/txtnexta.gif" alt="Next: 6.6 Nesting Packages" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">6.4 Privacy</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">6.6 Nesting Packages</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
