<html><head>
<title>[Chapter 11] 11.3 Implementation</TITLE>
<meta name="DC.title" content="Advanced Perl Programming"><meta name="DC.creator" content="Sriram Srinivasan"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:36:27Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-220-4" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch11_01.htm" title="11. Implementing Object Persistence"><link rel="prev" href="ch11_02.htm" title="11.2 Design Notes"><link rel="next" href="ch11_04.htm" title="11.4 Resources"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Advanced Perl Programming" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,54" href="index.htm" alt="Advanced Perl Programming"><area shape="RECT" coords="467,0,514,18" href="../search/asrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch11_02.htm" title="11.2 Design Notes"><img src="../gifs/txtpreva.gif" alt="Previous: 11.2 Design Notes" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch11_01.htm" title="11. Implementing Object Persistence">Chapter 11<br>Implementing Object Persistence</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch11_04.htm" title="11.4 Resources"><img src="../gifs/txtnexta.gif" alt="Next: 11.4 Resources" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch11-16700">11.3 Implementation</A
></H2
><p class="para"><a class="indexterm" name="ch11-idx-989197-0"></A
>This section explains the implementation of Adaptor::DBI and Adaptor::File. We will cover only the key procedures that perform query processing and file or database I/O. Pay as much attention to the design gotchas and unimplemented features as you do to the code.</P
><div class="sect2"><h3 class="sect2"><a class="title" name="ch11-pgfId-979742">11.3.1 Adaptor::File</A
></H3
><p class="para">An <a class="indexterm" name="ch11-idx-989267-0"></A
><a class="indexterm" name="ch11-idx-989267-1"></A
>Adaptor::File instance represents all objects stored in one file. When this adaptor is created (using <kbd class="command">new</KBD
>), it reads the entire file and translates the data to in-memory objects. Slurping the entire file into memory avoids the problem of having to implement fancy on-disk schemes for random access to variable-length data; after all, that is the job of DBM and database implementations. For this reason, this approach is not recommended for large numbers of objects (over 1,000, to pick a number).</P
><p class="para">The file adaptor has an attribute called <kbd class="command">all_instances</KBD
>, a hash table of all objects given to its <kbd class="command">store</KBD
> method (and indexed by their <kbd class="command">_id</KBD
>), as shown in <a class="xref" href="#ch11-14895" title="Structure of file adaptor">Figure 11.2</A
>.</P
><h4 class="figure"><a class="title" name="ch11-14895">Figure 11.2: Structure of file adaptor</A
></H4
><img class="graphic" src="figs/wpa_1102.gif" alt="Figure 11.2"><div class="sect3"><h4 class="sect3"><a class="title" name="ch11-pgfId-985117">11.3.1.1 Storing objects</A
></H4
><p class="para">Let us examine the two methods for storing objects to files: <kbd class="command">store()</KBD
> and <kbd class="command">flush</KBD
>. </P
><p class="para"><kbd class="command">store</KBD
><a class="indexterm" name="ch11-idx-989268-0"></A
> allocates a new unique identifier for the object (if necessary) and simply pegs the object onto the <kbd class="command">all_instances</KBD
> hash. It doesn't send the data to disk. </P
><pre class="programlisting">sub <b class="emphasis.bold">store</B
> {                    # adaptor-&gt;store($obj)
    (@_ == 2) || die  'Usage adaptor-&gt;store ($obj_to_store)';
    my ($this, $obj_to_store) = @_;  # $this  is 'all_instances'
    my ($id) = $obj_to_store-&gt;get_attributes('_id');
    my $all_instances = $this-&gt;{all_instances};
    if (!defined ($id )) {
        # Haven't seen this object before. Generate an id (doesn't
        # matter how this id is generated)
        $id = $this-&gt;_get_next_id(); 
        $obj_to_store-&gt;set_attributes('_id'=&gt; $id);
    }
    $all_instances-&gt;{$id} = $obj_to_store;
    $id;          # Return the object identifier
}</PRE
><p class="para">Note that the object is told about its new identifier (using <kbd class="command">set_attributes</KBD
>), so if it is given again to <kbd class="command">store</KBD
>, a new identifier is not allocated. </P
><p class="para">The real work of storing the data in the file is done by <kbd class="command">flush</KBD
><a class="indexterm" name="ch11-idx-989273-0"></A
>:</P
><pre class="programlisting">sub <b class="emphasis.bold">flush</B
> {    # adaptor-&gt;flush();
    my $this = $_[0];
    my $all_instances = $this-&gt;{'all_instances'};
    my $file          = $this-&gt;{'file'};
    return unless defined $file;
    open (F, &quot;&gt;$file&quot;) || die &quot;Error opening $file: $!\n&quot;;
    my ($id, $obj);
    while (($id, $obj) = each %$all_instances) {
        my $class = ref($obj);
        my @attrs = 
           $obj-&gt;get_attributes(@{$this-&gt;get_attrs_for_class($class)});
        Storable::store_fd([$class, $id, @attrs], \*F);
    }
    close(F);
}</PRE
><p class="para"><kbd class="command">flush</KBD
> simply walks the <kbd class="command">all_instances</KBD
> hash and, for each user-defined object, calls its <kbd class="command">get_attributes</KBD
> method. <kbd class="command">get_attrs_for_class</KBD
> returns a list of persistent attributes for each class (as an array reference) and is loaded from the configuration file supplied to the adaptor's constructor.</P
><p class="para">The attribute values, together with the class and instance identifier, are packaged in an anonymous array before being given to <kbd class="command">Storable::store_fd</KBD
>. </P
><p class="para">This implementation is unsatisfactorily slow (a second or two to store 1,000 objects), largely because so many lookups and accessor functions are called per object. At this stage of prototyping, I do not consider it a big issue.<a class="indexterm" name="ch11-idx-989276-0"></A
></P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="AUTOID-6589">11.3.1.2 Retrieving objects</A
></H4
><p class="para">The <kbd class="command">load_all</KBD
><a class="indexterm" name="ch11-idx-989278-0"></A
> method, called from <kbd class="command">new</KBD
>, simply does the reverse of <kbd class="command">flush</KBD
>. It reads the file, recreates each object, and inserts it in the <kbd class="command">all_instances</KBD
> attribute as shown:</P
><pre class="programlisting">sub <b class="emphasis.bold">load_all</B
> {  # $all_instances = load_all($file);
    my $file = shift;
    return undef unless -e $file;
    open(F, $file) || croak &quot;Unable to load $file: $!&quot;;
    # Global information first
    my ($class, $id, $obj, $rh_attr_names, @attrs, $all_instances);
    eval {
        while (1) {
            ($class, $id, @attrs) = @{Storable::retrieve_fd(\*F)};
            $obj = $all_instances-&gt;{$id};
            $obj = $class-&gt;new() unless defined($obj);
            $rh_attr_names = $this-&gt;get_attrs_for_class($class);
            $obj-&gt;set_attributes(
                    &quot;_id&quot; =&gt; $id,
                    map {$rh_attr_names-&gt;[$_] =&gt; $attrs[$_]}
                        (0 .. $#attrs)
            );
            $all_instances-&gt;{$id} = $obj;
        } 
    };
    $all_instances;
}</PRE
><p class="para"><kbd class="command">load_all</KBD
> calls <kbd class="command">Storable</KBD
>'s <kbd class="command">retrieve_fd</KBD
> function, calls the constructor of the appropriate class (<kbd class="command">new</KBD
>) to construct an uninitialized object of that class, and invokes <kbd class="command">set_attributes</KBD
> on this newly created object. The <kbd class="command">map</KBD
> statement constructs a list of attribute name-value pairs. When <kbd class="command">Storable::retrieve_fd</KBD
> has no more data, it throws an exception (using <kbd class="command">die</KBD
>). It breaks the infinite loop but is trapped by the <kbd class="command">eval</KBD
>.<kbd class="command"></KBD
><a class="indexterm" name="ch11-idx-989280-0"></A
></P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="ch11-pgfId-980275">11.3.1.3 Query processing</A
></H4
><p class="para">The <kbd class="command">retrieve_where</KBD
><a class="indexterm" name="ch11-idx-989282-0"></A
> method accepts a class name and a query expression, which is a subset of the SQL syntax. The query is not guaranteed to work for SQL keywords such as <kbd class="command">LIKE</KBD
>, <kbd class="command">BETWEEN</KBD
>, and <kbd class="command">IN</KBD
>; however, it will work for the database adaptor because it is sent untranslated to the database.</P
><p class="para">Writing a query processor for parsing and executing arbitrary query expressions is not a trivial task. But we know that Perl itself deals with expression evaluation, so if we can convert a query to a Perl expression, we can simply use <kbd class="command">eval</KBD
> to do the dirty work for us, as we saw in <a class="xref" href="ch05_01.htm" title="Eval">Chapter 5, <cite class="chapter">Eval</CITE
></A
>. </P
><p class="para"><kbd class="command">retrieve_where</KBD
> hence invokes <kbd class="command">parse_query</KBD
><a class="indexterm" name="ch11-idx-989283-0"></A
> to convert the expression to an <kbd class="command">eval</KBD
>able Perl Boolean expression and dynamically creates a piece of code incorporating this expression to traverse all the objects in the <kbd class="command">all_instances</KBD
> attribute. That is, a call such as:</P
><pre class="programlisting">retrieve_where ('Employee', 'age &lt; 45 &amp;&amp; name != 'John')</PRE
><p class="para">is translated to the following piece of Perl code, and <kbd class="command">eval</KBD
>ed:</P
><pre class="programlisting">my $dummy_key; my $obj;
while (($dummy_key, $obj) = each %$all_instances) {
    next unless ref($obj) eq &quot;<b class="emphasis.bold">Employee</B
>&quot;;
    my ($age, $name) = $obj-&gt;get_attributes(qw(age name));
    push (@retval, $obj) if <b class="emphasis.bold">$age &lt; 45 &amp;&amp; $name ne 'John'</B
>;
}</PRE
><p class="para">The Boolean expression in the <kbd class="command">push</KBD
> statement and the list of attribute names are both returned by <kbd class="command">parse_query</KBD
>, discussed later. <kbd class="command">retrieve_where</KBD
> is implemented like this:</P
><pre class="programlisting">sub retrieve_where {
    my ($this, $class, $query) = @_;
    my $all_instances = $$this;
    # blank queries result in a list of all objects
    return $this-&gt;retrieve_all() if ($query !~ /\S/);

    my ($boolean_expression, @attrs) = parse_query($query);
    # @attrs contains the attribute names used in the query
    # Construct a statement to fetch the required attributes, 
    # of the form:
    #   my ($name, $age) = $obj-&gt;get_attributes(qw(name age));
    my $fetch_stmt = &quot;my (&quot; . join(&quot;,&quot;,map{'$' . $_} @attrs) . &quot;) = &quot; .
               &quot;\$obj-&gt;get_attributes(qw(@attrs))&quot;;

    my (@retval);

    my $eval_str = qq{
        my \$dummy_key; my \$obj;
        while ((\$dummy_key, \$obj) = each \%\$all_instances) {
           next unless ref(\$obj) eq &quot;$class&quot;;
           $fetch_stmt;
           push (\@retval, \$obj) if ($boolean_expression);
        }
    };
    print STDERR &quot;EVAL:\n\t$eval_str\n&quot; if $debugging ;
    eval ($eval_str);
    if ($@) {
        print STDERR &quot;Ill-formed query:\n\t$query\n&quot;;
        print STDERR $@ if $debugging;
    }
    @retval;
}</PRE
><p class="para">Instead of constructing a list of objects for every query, <kbd class="command">retrieve_where</KBD
> should optionally take a callback reference as the third parameter, which can be called for every object that matches this query.<kbd class="command"></KBD
><a class="indexterm" name="ch11-idx-989285-0"></A
></P
><p class="para">Now let us take a look at <kbd class="command">parse_query</KBD
>, which, as was mentioned earlier, translates the SQL <code class="literal">where</CODE
> clause to a Perl expression. The input query expression is essentially a series of query terms of the form <em class="emphasis">variable</EM
> <em class="emphasis">op value</EM
>, strung together with logical operators (<kbd class="command">&amp;&amp;</KBD
> and <kbd class="command">||</KBD
>). The rules of the transformation are as follows:</P
><ol class="orderedlist"><li class="listitem"><p class="para"><a class="listitem" name="ch11-pgfId-981845"></A
>If query is blank, it should evaluate to TRUE.</P
></LI
><li class="listitem"><p class="para"><a class="listitem" name="ch11-pgfId-981912"></A
>Escaped quotes should be preserved. That is, a string such as <kbd class="command">&quot;foo\'bar&quot;</KBD
> should not cause confusion.</P
></LI
><li class="listitem"><p class="para"><a class="listitem" name="ch11-pgfId-981921"></A
>"<kbd class="command">=</KBD
>" is mapped to "<kbd class="command">==</KBD
>".</P
></LI
><li class="listitem"><p class="para"><a class="listitem" name="ch11-pgfId-981851"></A
><em class="emphasis">variable</EM
> is mapped to <em class="emphasis">$variable</EM
>. When processing this step, <kbd class="command">parse_query</KBD
> also keeps a note of the attribute names encountered. This list is returned to its calling procedure, <kbd class="command">retrieve_where</KBD
>.</P
></LI
><li class="listitem"><p class="para"><a class="listitem" name="ch11-pgfId-981860"></A
>If <em class="emphasis">value</EM
> is a quoted string, then <em class="emphasis">op</EM
> gets mapped to the appropriate string comparison operator (see <kbd class="command">%string_op</KBD
> below).</P
></LI
></OL
><p class="para"><kbd class="command">parse_query</KBD
> is implemented like this: </P
><pre class="programlisting">my %string_op = ( # Map from any operator to corresponding string op
              '=='  =&gt; 'eq',
              '&lt;'   =&gt;  'lt',
              '&lt;='  =&gt;  'le',
              '&gt;'   =&gt;  'gt',
              '&gt;='  =&gt;  'ge',
              '!='  =&gt;  'ne',
              );
my $ANY_OP = '&lt;=|&gt;=|&lt;|&gt;|!=|==';      # Any comparison operator
sub <b class="emphasis.bold">parse_query</B
> {
    my ($query) = @_;
    # Rule 1.
    return 1 if ($query =~ /^\s*$/);
    # First squirrel away all instances of escaped quotes - Rule 2.
    # This way it doesn't get in the way when we are processing 
    # rule 5.
    $query =~ s/\\[# Hopefully \200 and \201 aren't being
    $query =~ s/\\[&quot;]/\201/g; # being used. 
    # Rule 3 - Replace all '=' by '=='
    $query =~ s/([^!&gt;&lt;=])=/$1 == /g;
    my %attrs;
    # Rule 4 - extract fields, and replace <code class="replaceable"><i>var</I
></CODE
> with <code class="replaceable"><i>$var</I
></CODE
>
    $query =~
       s/(\w+)\s*($ANY_OP)/$attrs{$1}++, &quot;\$$1 $2&quot;/eg;
    # Rule 5 - replace comparison operators before quoted strings
    # with string comparison opersators
    $query =~ 
          s{
             ($ANY_OP)         (?# Any comparison operator)
             \s*               (?#  followed by zero or more spaces,)
             [' (?#  then by a quoted string )
           }{
             $string_op{$1} . ' \'' . $2 . '\''
           }goxse;   # global, compile-once, extended, 
                     # treat as single line, eval
    # Restore all escaped quote characters
    $query =~ s/\200/\\'/g;
    $query =~ s/\201/\\&quot;/g; 
    ($query, keys %attrs);  # Return modified query, and field list
}<kbd class="command"></KBD
><a class="indexterm" name="ch11-idx-989288-0"></A
><a class="indexterm" name="ch11-idx-989288-1"></A
><a class="indexterm" name="ch11-idx-989288-2"></A
></PRE
></DIV
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch11-pgfId-980155">11.3.2 Adaptor::DBI</A
></H3
><p class="para"><a class="indexterm" name="ch11-idx-989290-0"></A
><a class="indexterm" name="ch11-idx-989290-1"></A
>Adaptor::DBI is considerably simpler than Adaptor::File. It does not maintain a table of objects in memory; when asked to store an object, it sends it to the database, and when asked to retrieve one or more objects, it simply passes the request along to the database. This scheme is also its biggest failing, as was pointed out earlier in the section <a class="xref" href="ch11_02.htm" title="Uniqueness of Objects in Memory">"Uniqueness of Objects in Memory</A
>."</P
><p class="para">The <kbd class="command">new</KBD
><a class="indexterm" name="ch11-idx-989291-0"></A
> method simply opens a DBI connection, as was illustrated in <a class="xref" href="ch10_01.htm" title="Persistence">Chapter 10, <cite class="chapter">Persistence</CITE
></A
>, and creates an adaptor object with the connection handle as its sole attribute. No rocket science here. </P
><div class="sect3"><h4 class="sect3"><a class="title" name="ch11-pgfId-985414">11.3.2.1 Storing objects</A
></H4
><p class="para">The adaptor's <kbd class="command">store</KBD
><a class="indexterm" name="ch11-idx-989292-0"></A
> method sends an object to the database:</P
><pre class="programlisting">sub store {    # adaptor-&gt;store($obj)
    (@_ == 2) || croak  'Usage adaptor-&gt;store ($obj)';
    my $sql_cmd;
    my ($this, $obj) = @_;
    my $class = ref($obj);
    my $rh_class_info = $map_info{$class};
    my $table = $rh_class_info-&gt;{&quot;table&quot;};
    croak &quot;No mapping defined for package $class&quot; 
        unless defined($table);
    my $rl_attr_names = $rh_class_info-&gt;{&quot;attributes&quot;};
    my ($id)          = $obj-&gt;get_attributes('_id');
    my ($attr);
    if (!defined ($id )) {
        $id = $this-&gt;_get_next_id($table);
        $obj-&gt;set_attributes('_id'=&gt; $id);
        # Generate a statement like:
        #       insert into Employee (_id, name,    age) 
        #                     values (100, &quot;jason&quot;, 33)
        $sql_cmd  = &quot;insert into $table (&quot;;
        my ($col_name, $type, $attr);
        my (@attrs) = $obj-&gt;get_attributes(@$rl_attr_names);
        $sql_cmd .= join(&quot;,&quot;,@$rl_attr_names) . &quot;) values (&quot;;
        my $val_cmd = &quot;&quot;;
        foreach $attr (@attrs) {
            my $quote = ($attr =~ /\D/)
                           ? &quot;'&quot;
                           : &quot;&quot;;
            $val_cmd .= &quot;${quote}${attr}${quote},&quot;;
        }
        chop ($val_cmd);
        $sql_cmd .= $val_cmd . &quot;)&quot; ;
    } else {
        # Object already exists in the database. Update it
        # with a statement like:
        #       update Employee set name = &quot;jason&quot;, age = 33
        #                where _id  = 100;

        $sql_cmd = &quot;update $table set &quot;;
        my ($name, $quote);
        my @attrs = $obj-&gt;get_attributes(@$rl_attr_names);
        foreach $name (@$rl_attr_names) {
            if ($name eq '_id') {
                shift @attrs;   # Can't update primary row
                next;
            }
            $attr = shift @attrs;
            $quote = ($attr =~ /\D/)
                           ? &quot;'&quot;
                           : &quot;&quot;;
            $sql_cmd .= &quot;$name=${quote}${attr}${quote},&quot;;
        }
        chop($sql_cmd); # remove trailing comma
        $sql_cmd .= &quot; where _id = $id&quot;;
    }
    # Sql query constructed. Give it to the appropriate db connection
    # to execute. 
    $this-&gt;{dbconn}-&gt;do($sql_cmd); # 
    die &quot;DBI Error: $DBI::errstr&quot; if $DBI::err;
    $id;
}</PRE
><p class="para">The global variable <kbd class="command">%map_info</KBD
> stores database configuration information for every package mentioned in the configuration file: the name of the corresponding database table, the list of persistent attributes, and the corresponding database column names. If the object already has an attribute called <kbd class="command">_id </KBD
>, the corresponding database row is updated; otherwise, a new identifier is allocated and a new database row is inserted. All string valued attributes are automatically quoted. </P
><p class="para">Clearly, we can do much better than this implementation. If we create 1000 objects, the preceding code creates and evaluates 1000 fresh SQL insert statements. A better approach is to prepare <code class="literal">insert</CODE
>/<code class="literal">delete</CODE
>/<code class="literal">update</CODE
>/<code class="literal">fetch</CODE
> statements for each class the first time an object of that class is encountered, like this:</P
><pre class="programlisting">$insert{'Employee'} = $dbh-&gt;prepare (
                        &quot;insert into Employee (_id, name, age) 
                                       values (?  , ?   , ?  )&quot;);
$delete{'Employee'} = $dbh-&gt;prepare (
                        &quot;delete from Employee where _id = ?&quot;;
$update{'Employee'} = $dbh-&gt;prepare (
                        &quot;update Employee (name=?, age=?&quot;);
$fetch {'Employee'} = $dbh-&gt;prepare (
                        &quot;select name, age, from Employee
                                     where _id = ?&quot;);</PRE
><p class="para"><kbd class="command">store</KBD
> can simply execute these statements with the appropriate statements. An even faster way is to take advantage of stored procedures. As it stands, the current implementation works reasonably well for prototypes. <kbd class="command"></KBD
><a class="indexterm" name="ch11-idx-989294-0"></A
></P
><p class="para">Incidentally, Adaptor::DBI's <kbd class="command">flush()</KBD
><a class="indexterm" name="ch11-idx-989296-0"></A
> method does not do anything, because <kbd class="command">store()</KBD
> doesn't keep any object in memory.</P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="ch11-pgfId-980168">11.3.2.2 Queries</A
></H4
><p class="para"><kbd class="command">retrieve_where</KBD
><a class="indexterm" name="ch11-idx-989297-0"></A
> creates a select query from the mapping information for that class. As was pointed out earlier, the same query executed twice will get you two different sets of objects, whose data are duplicates of the other: </P
><pre class="programlisting">sub retrieve_where {
    my ($this, $class, $query) = @_;
    my $where;
    $where = ($query =~ /\S/)
                   ? &quot;where $query&quot;
                   : &quot;&quot;;
    my $rh_class_info = $map_info{$class};
    my $table = $rh_class_info-&gt;{&quot;table&quot;};
    croak &quot;No mapping defined for package $class&quot; 
          unless defined($table);
    my $rl_attr_names = $rh_class_info-&gt;{&quot;attributes&quot;};
    my $rl_col_names  = $rh_class_info-&gt;{&quot;columns&quot;};
    my $sql_cmd      = &quot;select &quot; 
                       . join(&quot;,&quot;, @{$rl_col_names}) 
                       . &quot; from $table $where&quot;;
    print $sql_cmd if $debugging;
    my $rl_rows      = $this-&gt;{d}-&gt;do($sql_cmd);
    my @retval;
    my $size = @$rl_attr_names - 1;
    
    if ($rl_rows &amp;&amp; @$rl_rows) {
        my $i; my $rl_row;
        foreach $rl_row (@$rl_rows) {
            my $obj = $class-&gt;new;
            $obj-&gt;set_attributes(map {
                                  $rl_attr_names-&gt;[$_] =&gt; $rl_row-&gt;[$_]
                                 }(0 .. $size));
            push (@retval, $obj);
        }
    }
    @retval;
}<kbd class="command"></KBD
><a class="indexterm" name="ch11-idx-989314-0"></A
></PRE
><p class="para">The preceding <kbd class="command">set_attributes</KBD
><a class="indexterm" name="ch11-idx-989316-0"></A
> statement perhaps requires some explanation. The objective of this statement is to set all the attributes returned by the database. Since <kbd class="command">set_attributes</KBD
> requires a list of name-value pairs, we use the <kbd class="command">map</KBD
> built-in function to return a list. This function takes two parameters&nbsp;- a block of code and a list&nbsp;- and, for each element of the list, evaluates the block in a list context. The function returns a list containing the result executing that block across all iterations.<a class="indexterm" name="ch11-idx-989318-0"></A
><a class="indexterm" name="ch11-idx-989318-1"></A
></P
><p class="para">At this point, if your enthusiasm continues unabated, you may find it worthwhile to go back and understand how Adaptor handles the issues raised in the "Design Notes" section.<a class="indexterm" name="ch11-idx-989194-0"></A
><a class="indexterm" name="ch11-idx-989194-1"></A
><a class="indexterm" name="ch11-idx-989194-2"></A
></P
></DIV
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch11_02.htm" title="11.2 Design Notes"><img src="../gifs/txtpreva.gif" alt="Previous: 11.2 Design Notes" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Advanced Perl Programming"><img src="../gifs/txthome.gif" alt="Advanced Perl Programming" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch11_04.htm" title="11.4 Resources"><img src="../gifs/txtnexta.gif" alt="Next: 11.4 Resources" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">11.2 Design Notes</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">11.4 Resources</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
