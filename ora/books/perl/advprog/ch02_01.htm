<html><head>
<title>[Chapter 2] Implementing Complex Data Structures</TITLE>
<meta name="DC.title" content="Advanced Perl Programming"><meta name="DC.creator" content="Sriram Srinivasan"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:30:26Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-220-4" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="index.htm" title="Advanced Perl Programming"><link rel="prev" href="ch01_08.htm" title="1.8 Resources"><link rel="next" href="ch02_02.htm#ch02-pgfId-946158" title="2.2 Example: Matrices"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Advanced Perl Programming" usemap="#srchmap" border="0"></H1
><map name="srchmap"><area shape="RECT" coords="0,0,466,54" href="index.htm" alt="Advanced Perl Programming"><area shape="RECT" coords="467,0,514,18" href="../search/asrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch01_08.htm" title="1.8 Resources"><img src="../gifs/txtpreva.gif" alt="Previous: 1.8 Resources" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 2</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch02_02.htm#ch02-pgfId-946158" title="2.2 Example: Matrices"><img src="../gifs/txtnexta.gif" alt="Next: 2.2 Example: Matrices" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="chapter"><h1 class="chapter"><a class="title" name="ch02-38478">2. Implementing Complex Data Structures</A
></H1
><div class="htmltoc"><p><b>Contents:</B
><br><a class="sect1" href="#ch02-36831" title="2.1 User-Defined Structures">User-Defined Structures</A
><br><a class="sect1" href="ch02_02.htm#ch02-pgfId-946158" title="2.2 Example: Matrices">Example: Matrices</A
><br><a class="sect1" href="ch02_03.htm#ch02-pgfId-943836" title="2.3 Professors, Students, Courses">Professors, Students, Courses</A
><br><a class="sect1" href="ch02_04.htm" title="2.4 Pass the Envelope">Pass the Envelope</A
><br><a class="sect1" href="ch02_05.htm" title="2.5 Pretty-Printing">Pretty-Printing</A
><br><a class="sect1" href="ch02_06.htm" title="2.6 Resources">Resources</A
></P
><p></P
></DIV
><div class="epigraph" align="right"><p class="para" align="right"><i>Don't worry, spiders,<br>I keep house<br>casually.</I
></P
><p class="attribution" align="right">-&nbsp;Kobayashi Issa</P
></DIV
><p class="para">The success of Perl is a tribute to the fact that many problems can be solved by using just its fundamental data types. Jon <a class="indexterm" name="ch02-idx-949482-0"></A
>Bentley's books <em class="emphasis">Programming Pearls</EM
> and <em class="emphasis">More Programming Pearls</EM
> are further testament to how much can be achieved if the basic data structures are dynamic and memory management is automatic. But as programs become more complex, moving from the domain of the script to that of the application, there is an increasing need for representing data in much more complex ways than can sometimes be achieved with the basic data types alone. </P
><p class="para">In this chapter, we will apply the syntax and concepts learned in <a class="xref" href="ch01_01.htm" title="Data References and Anonymous Storage">Chapter 1, <cite class="chapter">Data References and Anonymous Storage</CITE
></A
> to a few "real" examples. We will write bits of code that build complex structures from file-based data and use sequences of <kbd class="command">$</KBD
>'s and <kbd class="command">@</KBD
>'s without batting an eyelid. For each problem, we will examine different ways of representing the same data and study the trade-offs in program versus programmer efficiency. In the interest of clarity, we will not worry too much about error handling.</P
><p class="para">Tom <a class="indexterm" name="ch02-idx-949481-0"></A
><a class="indexterm" name="ch02-idx-949481-1"></A
>Christiansen has written an excellent series of tutorials called FMTEYEWTK (Far More Than Everything You've Ever Wanted to Know!) [<a class="xref" href="ch02_06.htm" title="">3</A
>]. This series contains a motley collection of topics that crop up on the Perl Usenet groups. I admire them for their lucid, patient, and detailed explanations and recommend that you read them at some point. (Now is better!) Some of them are now packaged with the Perl distribution; in particular, the <em class="emphasis">perldsc</EM
><a class="indexterm" name="ch02-idx-949483-0"></A
> (data structures cookbook) document is a tutorial for building and manipulating complex structures. </P
><p class="para">Before we start the examples, we will study what it takes to create structures <i class="foreignphrase">Á la</I
> C or C++. </P
><div class="sect1"><h2 class="sect1"><a class="title" name="ch02-36831">2.1 User-Defined Structures</A
></H2
><p class="para">The <em class="emphasis">struct</EM
><a class="indexterm" name="ch02-idx-949485-0"></A
><a class="indexterm" name="ch02-idx-949485-1"></A
><a class="indexterm" name="ch02-idx-949485-2"></A
><a class="indexterm" name="ch02-idx-949485-3"></A
> declaration in C provides a notion of user-defined types (though it doesn't quite have first-class status, like an <em class="emphasis">int</EM
>), and a <em class="emphasis">typedef</EM
> statement is then used to alias it to a new type name. Java and C++ have the <em class="emphasis">class</EM
> declaration to compose new data types out of fundamental data types. These constructs allow you to combine a bunch of named attributes under a single banner but still provide access to each individual attribute.</P
><p class="para"><a class="indexterm" name="ch02-idx-949518-0"></A
>Perl has no such built-in template feature.[<a class="footnote" href="#ch02-pgfId-946348">1</A
>] One commonly used <em class="emphasis">convention</EM
> is to simulate structures using a hash table, as shown in <a class="xref" href="#ch02-28484" title="Simulating C structures with Perl hashes">Figure 2.1</A
>. </P
><blockquote class="footnote"><div class="footnote"><p class="para"><a class="footnote" name="ch02-pgfId-946348">[1]</A
> We'll discuss a module called ObjectTemplate in <a class="xref" href="ch07_01.htm" title="Object-Oriented Programming">Chapter 7, <cite class="chapter">Object-Oriented Programming</CITE
></A
>, that provides this.</P
></DIV
></BLOCKQUOTE
><h4 class="figure"><a class="title" name="ch02-28484">Figure 2.1: Simulating C structures with Perl hashes</A
></H4
><img class="graphic" src="figs/wpa_0201.gif" alt="Figure 2.1"><p class="para">Perl's implementation of hash tables is actually quite efficient in terms of both performance and space. Since hash keys are immutable strings, Perl keeps only one systemwide copy of a hash key. This prevents a hundred <kbd class="command">foo</KBD
> structures from creating a hundred copies of the strings <kbd class="command">a</KBD
> and <kbd class="command">str</KBD
>.</P
><p class="para">Another way to create a user-defined collection of attributes is to use an array <kbd class="command">@foo</KBD
> instead, which is slightly more efficient, yet a tad more cumbersome:</P
><pre class="programlisting">$a = 0; $str = 1;     # Indices
$foo[$a]   = 10;      # Equivalent to foo.a = 10 in C.
$foo[$str] = &quot;hello&quot;; # equivalent to foo.str = &quot;hello&quot; in C.</PRE
><p class="para">Remember, if a certain data structure is represented far more easily in C than in Perl and requires a considerable amount of manipulation, you could consider keeping it in C/C++ itself and not bother duplicating it in Perl. You will need to provide a set of C procedures that can manipulate this data. A very simple tool called <a class="indexterm" name="ch02-idx-949519-0"></A
>SWIG (discussed in <a class="xref" href="ch18_01.htm" title="Extending Perl:A First Course">Chapter 18, <cite class="chapter">Extending Perl:A First Course</CITE
></A
>) allows you to do this painlessly. </P
><p class="para">You can also use <kbd class="command">pack</KBD
> or <kbd class="command">sprintf</KBD
> to encode a set of values to get one composite entity, but accessing individual data elements is neither convenient nor efficient (in time). <kbd class="command">pack</KBD
> is a good option when you need to be frugal about space, because it converts a list of values into one scalar value without necessarily changing each individual item's machine representation; <kbd class="command">sprintf</KBD
> is less efficient in this regard, because it converts everything to a printable representation.<em class="emphasis"></EM
><a class="indexterm" name="ch02-idx-949505-0"></A
><a class="indexterm" name="ch02-idx-949505-1"></A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch01_08.htm" title="1.8 Resources"><img src="../gifs/txtpreva.gif" alt="Previous: 1.8 Resources" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Advanced Perl Programming"><img src="../gifs/txthome.gif" alt="Advanced Perl Programming" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch02_02.htm#ch02-pgfId-946158" title="2.2 Example: Matrices"><img src="../gifs/txtnexta.gif" alt="Next: 2.2 Example: Matrices" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">1.8 Resources</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">2.2 Example: Matrices</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
