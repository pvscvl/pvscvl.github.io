<html><head>
<title>[Chapter 4] 4.3 Closures</TITLE>
<meta name="DC.title" content="Advanced Perl Programming"><meta name="DC.creator" content="Sriram Srinivasan"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:31:47Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-220-4" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch04_01.htm" title="4. Subroutine References and Closures"><link rel="prev" href="ch04_02.htm#ch04-pgfId-939241" title="4.2 Using Subroutine References"><link rel="next" href="ch04_04.htm#ch04-pgfId-945067" title="4.4 Using Closures"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Advanced Perl Programming" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,54" href="index.htm" alt="Advanced Perl Programming"><area shape="RECT" coords="467,0,514,18" href="../search/asrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch04_02.htm#ch04-pgfId-939241" title="4.2 Using Subroutine References"><img src="../gifs/txtpreva.gif" alt="Previous: 4.2 Using Subroutine References" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch04_01.htm" title="4. Subroutine References and Closures">Chapter 4<br>Subroutine References and Closures</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch04_04.htm#ch04-pgfId-945067" title="4.4 Using Closures"><img src="../gifs/txtnexta.gif" alt="Next: 4.4 Using Closures" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch04-36100">4.3 Closures</A
></H2
><p class="para"><a class="indexterm" name="ch04-idx-950834-0"></A
><a class="indexterm" name="ch04-idx-950834-1"></A
><a class="indexterm" name="ch04-idx-950834-2"></A
>Instead of returning <em class="emphasis">data</EM
>, a Perl subroutine can return a reference to a <em class="emphasis">subroutine</EM
>. This is really no different from any other ways of passing subroutine references around, except for a somewhat hidden feature involving anonymous subroutines and lexical (<kbd class="command">my</KBD
>) variables. Consider</P
><pre class="programlisting">$greeting = &quot;hello world&quot;;
$rs = sub {
    print $greeting;
};
&amp;$rs();  #prints &quot;hello world&quot;</PRE
><p class="para">In this example, the anonymous subroutine makes use of the global variable <kbd class="command">$greeting</KBD
>. No surprises here, right? Now, let's modify this innocuous example slightly:</P
><pre class="programlisting">sub generate_greeting {
    my($greeting) = &quot;hello world&quot;;
    return sub {print $greeting};
}
$rs = generate_greeting();
&amp;$rs(); # Prints &quot;hello world&quot;</PRE
><p class="para">The <kbd class="command">generate_greeting</KBD
> subroutine returns the reference to an anonymous subroutine, which in turn prints <kbd class="command">$greeting</KBD
>. The curious thing is that <kbd class="command">$greeting</KBD
> is a <kbd class="command">my</KBD
> variable that belongs to <kbd class="command">generate_greeting</KBD
>. Once <kbd class="command">generate_greeting</KBD
> finishes executing, you would expect all its local variables to be destroyed. But when you invoke the anonymous subroutine later on, using <kbd class="command">&amp;$rs()</KBD
>, it manages to still print <kbd class="command">$greeting</KBD
>. How does it work?</P
><p class="para">Any other expression in place of the anonymous subroutine definition would have used <kbd class="command">$greeting</KBD
> right away. A subroutine block, on the other hand, is a package of code to be invoked at a <em class="emphasis">later</EM
> time, so it keeps track of all the variables it is going to need later on (taking them "to go," in a manner of speaking). When this subroutine is called subsequently and invokes <kbd class="command">print</KBD
> &quot;<kbd class="command">$greeting&quot;</KBD
>, the subroutine remembers the value that <kbd class="command">$greeting</KBD
> had when that subroutine was <em class="emphasis">created</EM
>. </P
><p class="para">Let's modify this a bit more to really understand what this idiom is capable of:</P
><pre class="programlisting">sub generate_greeting {
    my($greeting) = @_;     # $greeting primed by arguments
    return sub {
                 my($subject)= @_;
                 print &quot;$greeting $subject \n&quot;;
           };
}
$rs1 = generate_greeting(&quot;hello&quot;);
$rs2 = generate_greeting(&quot;my fair&quot;);

# $rs1 and $rs2 are two subroutines holding on to different $greeting's
&amp;$rs1 (&quot;world&quot;) ;  # prints &quot;hello world&quot;
&amp;$rs2 (&quot;lady&quot;) ;   # prints &quot;my fair lady&quot;</PRE
><p class="para">Instead of hardcoding <kbd class="command">$greeting</KBD
>, we get it from <kbd class="command">generate_greeting</KBD
>'s arguments. When <kbd class="command">generate_greeting</KBD
> is called the first time, the anonymous subroutine that it returns holds onto <kbd class="command">$greeting</KBD
>'s value. Hence the subroutine referred to by <kbd class="command">$rs1</KBD
> behaves somewhat like this:</P
><pre class="programlisting">$rs1 = sub { 
    my ($subject) = @_;
    my $greeting = &quot;hello&quot;;
    print &quot;$greeting $subject\n&quot;;   # $greeting's value is &quot;hello&quot;
}</PRE
><p class="para">The subroutine is known as a <em class="emphasis">closure</EM
> (the term comes from the LISP world). As you can see, it captures <kbd class="command">$greeting</KBD
>'s value, and when it is invoked later on, it needs only one parameter. </P
><p class="para">Like some immigrants to a country who retain the culture and customs of the place in which they are born, closures are subroutines that package all the variables they need from the scope in which they are created. </P
><p class="para">As it happens, Perl creates closures only over lexical (<kbd class="command">my</KBD
>) variables and not over global or localized (tagged with <kbd class="command">local</KBD
>) variables. Let's take a peek under the covers to understand why this is so.</P
><div class="sect2"><h3 class="sect2"><a class="title" name="ch04-pgfId-944893">4.3.1 Closures, Behind the Scenes</A
></H3
><p class="para">If you are not interested in the details of how closures work, you can safely go on to the next section without loss of continuity.</P
><p class="para">Recall that the name of a variable and its value are separate entities. When it first sees <kbd class="command">$greeting</KBD
>, Perl binds the name "greeting" to a freshly allocated scalar value, setting the value's reference count to 1 (there's now an arrow pointing to the value). At the end of the block, Perl disassociates the name from the scalar value and decrements the value's reference count. In a typical block where you don't squirrel away references to that value, the value would be deallocated, since the reference count comes down to zero. In this example, however, the anonymous subroutine happens to use <kbd class="command">$greeting</KBD
>, so it increments that scalar value's reference count, thus preventing its automatic deallocation when <kbd class="command">generate_greeting</KBD
> finishes. When <kbd class="command">generate_greeting</KBD
> is called a second time, the name "greeting" is bound to a whole new scalar value, and so the second closure gets to hang on to <em class="emphasis">its own</EM
> scalar value.</P
><p class="para"><a class="indexterm" name="ch04-idx-950842-0"></A
><a class="indexterm" name="ch04-idx-950842-1"></A
>Why don't closures work with <kbd class="command">local</KBD
> variables? Recall from <a class="xref" href="ch03_01.htm" title="Typeglobs and Symbol Tables">Chapter 3, <cite class="chapter">Typeglobs and Symbol Tables</CITE
></A
>, that variables marked <kbd class="command">local</KBD
> are dynamically scoped (or "temporarily global"). A <kbd class="command">local</KBD
> variable's value depends on the call stack at the moment at which it is <em class="emphasis">used</EM
>. For this reason, if <kbd class="command">$greeting</KBD
> were declared <kbd class="command">local</KBD
>, Perl would look up its value when the anonymous subroutine is <em class="emphasis">called</EM
> (actually when <kbd class="command">print</KBD
> is called inside it), not when it is <em class="emphasis">defined</EM
>. You can verify this with a simple test:</P
><pre class="programlisting">sub generate_greeting {
    local ($greeting) = @_;
    return sub {
       print &quot;$greeting \n&quot; ;
    }
}
$rs = generate_greeting(&quot;hello&quot;);
$greeting = &quot;Goodbye&quot;;
&amp;$rs();      # Prints &quot;Goodbye&quot;, not &quot;hello&quot;</PRE
><p class="para">The anonymous subroutine is <em class="emphasis">not</EM
> a closure in this case, because it doesn't hang onto the local value of <kbd class="command">$greeting</KBD
> ("hello") at the time of its creation. Once <kbd class="command">generate_greeting</KBD
> has finished executing, <kbd class="command">$greeting</KBD
> is back to its old global value, which is what is seen by the anonymous subroutine while executing. </P
><p class="para">It might appear that every time <kbd class="command">generate_greeting</KBD
> returns an anonymous subroutine, it creates a whole new packet of code internally. That isn't so. The code for the anonymous subroutine is generated once during compile time. <kbd class="command">$rs</KBD
> is internally a reference to a "code value," which in turn keeps track not only of the byte-codes themselves (which it shares with all other subroutine references pointing to the same piece of code), but also all the variables it requires from its environment (each subroutine reference packs its own private context for later use). <a class="xref" href="ch20_01.htm" title="Perl Internals">Chapter 20</A
> does less hand-waving and supplies exact details.</P
><p class="para">To summarize, a closure is the special case of an anonymous subroutine holding onto data that used to belong to its scope at the time of its creation.</P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch04_02.htm#ch04-pgfId-939241" title="4.2 Using Subroutine References"><img src="../gifs/txtpreva.gif" alt="Previous: 4.2 Using Subroutine References" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Advanced Perl Programming"><img src="../gifs/txthome.gif" alt="Advanced Perl Programming" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch04_04.htm#ch04-pgfId-945067" title="4.4 Using Closures"><img src="../gifs/txtnexta.gif" alt="Next: 4.4 Using Closures" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">4.2 Using Subroutine References</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">4.4 Using Closures</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
