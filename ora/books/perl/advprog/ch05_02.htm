<html><head>
<title>[Chapter 5] 5.2 The Block Form: Exception Handling</TITLE>
<meta name="DC.title" content="Advanced Perl Programming"><meta name="DC.creator" content="Sriram Srinivasan"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:32:35Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-220-4" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch05_01.htm" title="5. Eval"><link rel="prev" href="ch05_01.htm" title="5.1 The String Form: Expression Evaluation"><link rel="next" href="ch05_03.htm" title="5.3 Watch Your Quotes"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Advanced Perl Programming" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,54" href="index.htm" alt="Advanced Perl Programming"><area shape="RECT" coords="467,0,514,18" href="../search/asrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch05_01.htm" title="5.1 The String Form: Expression Evaluation"><img src="../gifs/txtpreva.gif" alt="Previous: 5.1 The String Form: Expression Evaluation" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch05_01.htm" title="5. Eval">Chapter 5<br>Eval</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch05_03.htm" title="5.3 Watch Your Quotes"><img src="../gifs/txtnexta.gif" alt="Next: 5.3 Watch Your Quotes" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch05-14017">5.2 The Block Form: Exception Handling</A
></H2
><p class="para"><a class="indexterm" name="ch05-idx-951175-0"></A
><a class="indexterm" name="ch05-idx-951175-1"></A
><a class="indexterm" name="ch05-idx-951175-2"></A
><a class="indexterm" name="ch05-idx-951175-3"></A
><a class="indexterm" name="ch05-idx-951175-4"></A
>In this form, <kbd class="command">eval</KBD
> is followed by a block of code, not a scalar containing a string. It is used for handling run-time errors, or <i class="firstterm">exceptions</I
>. Errors can be internal built-in ones (out-of-memory, divide-by-zero) or user-defined ones produced by <kbd class="command">die</KBD
>. </P
><p class="para">The following example shows how you can use the block form <kbd class="command">eval</KBD
> to trap a run-time <a class="indexterm" name="ch05-idx-951220-0"></A
>divide-by-zero error:</P
><pre class="programlisting">eval {
     $a = 10; $b = 0;
     $c = $a / $b;     # Causes a run-time error, 
                       # which is trapped by eval
};
print $@;   # Prints  &quot;Illegal division by 0 at try.pl line 3</PRE
><p class="para">When the script is compiled, Perl syntax-checks the block of code and generates code. If it encounters a run-time error, Perl skips the rest of the <kbd class="command">eval</KBD
> block and sets <kbd class="command">$@</KBD
> to the corresponding error text.</P
><p class="para"><a class="indexterm" name="ch05-idx-951221-0"></A
>To signal your own errors, you use <kbd class="command">die</KBD
>. Perl knows whether a piece of code is currently executing inside an <kbd class="command">eval</KBD
>, and so, when <kbd class="command">die</KBD
> is called, Perl simply gives the error string&nbsp;- <kbd class="command">die</KBD
>'s argument&nbsp;- to the global <kbd class="command">$@</KBD
>, and jumps to the statement following the <kbd class="command">eval</KBD
> block. In the following example, <kbd class="command">open_file</KBD
> invokes <kbd class="command">die</KBD
> if it has trouble opening a file. To use this function, wrap it inside an eval.</P
><pre class="programlisting">sub open_file {
    open (F, $_[0]) || <b class="emphasis.bold">die &quot;Could not open file: $!&quot;</B
>;
}

$f = 'test.dat';
while (1) {    
    <b class="emphasis.bold">eval {</B
>
<b class="emphasis.bold">          open_file($f);   </B
># if open_file dies, the program doesn't quit
<b class="emphasis.bold">    };</B
>
    last unless $@;     # no error: break out of the loop.
    print &quot;$f is not present. Please enter new file name $f&quot;;
    chomp($f = &lt;STDIN&gt;);
}</PRE
><p class="para"><a class="indexterm" name="ch05-idx-951223-0"></A
><a class="indexterm" name="ch05-idx-951223-1"></A
>Java/C++ programmers would of course recognize the parallel to the <em class="emphasis">throw, try</EM
>, and <em class="emphasis">catch</EM
> statements, where <em class="emphasis">try</EM
> corresponds to the <kbd class="command">eval</KBD
> block, <em class="emphasis">catch</EM
> to the checking of <kbd class="command">$@</KBD
>, and <em class="emphasis">throw</EM
> to <kbd class="command">die</KBD
>. (Essentially, the caller says to the run-time environment, "Here, <em class="emphasis">try</EM
> this code, and <em class="emphasis">catch</EM
> whatever errors are <em class="emphasis">thrown</EM
> by the callee.") </P
><p class="para">One thing I like a lot about the Java environment is that both the interpreter and the standard libraries make extensive and <em class="emphasis">consistent</EM
> use of <em class="emphasis">try</EM
>, <em class="emphasis">throw</EM
>, and <em class="emphasis">catch</EM
> for error handling. In some ways, using these constructs is better than simply returning an error code, because it <em class="emphasis">requires</EM
> the programmer to pay attention to errors (if you ignore the error, the program dies).</P
><p class="para">In C++ and Java, a function can rethrow an exception if it doesn't want to handle it itself. In Perl, you can do so by calling <kbd class="command">die</KBD
> without arguments: </P
><pre class="programlisting">eval {
    ...
};
if ($@ =~ /sorry, bucko/) {
    ....
} else {
   # hmm .. don't know what to do with it.
   die;  # Identical to die $@
}</PRE
><p class="para">If there is an enclosing <kbd class="command">eval</KBD
> block, this exception will be caught; otherwise, the program terminates.<a class="indexterm" name="ch05-idx-951222-0"></A
></P
><div class="sect2"><h3 class="sect2"><a class="title" name="ch05-pgfId-951085">5.2.1 Standard Modules</A
></H3
><p class="para"><a class="indexterm" name="ch05-idx-951225-0"></A
>Since C++ and Java contain special constructs for trapping and handling errors, some Perl programmers would like them too. Here are a couple of options.</P
><div class="sect3"><h4 class="sect3"><a class="title" name="ch05-pgfId-951087">5.2.1.1 Exception.pm</A
></H4
><p class="para">As this book goes to press, a new module, <a class="indexterm" name="ch05-idx-951224-0"></A
>Exception, built over <kbd class="command">eval</KBD
> and <kbd class="command">die</KBD
>, is just being announced to CPAN. You need to understand Perl's support for object orientation to understand the following small example, so you might want to revisit this example on a subsequent reading. </P
><p class="para">This snippet throws exceptions if you attempt to withdraw more than $300 or exceed the current balance:</P
><pre class="programlisting">use Exception;
package AmountExceededException; # User-defined exception
@ISA = ('Exception');

package OverdraftException;      # User-defined exception
@ISA = ('Exception');

package BankAccount;
sub withdraw_money {
    my $amount = shift;
    if ($amount &gt; 300) {
        throw new AmountExceededException;
    }
    if ($amount &gt; $balance) {
         throw new OverdraftException;
    }
    ...    # Change balance
}

try {
    print &quot;How much do you need?&quot;; chomp($amount = &lt;STDIN&gt;);
    withdraw_money ($amount);
}
catch AmountExceededException =&gt; 
               sub {print 'Cannot withdraw more than $300'},
      OverdraftException      =&gt; 
               sub {print $_[0]-&gt;message},
      Default =&gt;
               sub {print &quot;Internal error. Try later&quot;};<a class="indexterm" name="ch05-idx-951227-0"></A
></PRE
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="ch05-pgfId-947853">5.2.1.2 exceptions.pl</A
></H4
><p class="para"><a class="indexterm" name="ch05-idx-951230-0"></A
>The standard Perl library currently has a module called <em class="emphasis">exceptions.pl</EM
>, which is also a thin wrapper over <kbd class="command">eval</KBD
> and <kbd class="command">die</KBD
> and provides subroutines called <kbd class="command">catch</KBD
> and <kbd class="command">throw</KBD
>. <kbd class="command">catch</KBD
> takes a piece of code as a <em class="emphasis">string</EM
> (instead of as a block, as the previous example) and a list of regular expressions to match against the error string when it <kbd class="command">eval</KBD
>'s the code. </P
><p class="para">This module has one serious problem, which is actually solved by the newer module, <em class="emphasis">Exception.pm:</EM
> because <code class="literal">catch</CODE
> is a subroutine, lexical variables in the current scope (localized with <kbd class="command">my</KBD
>) are not available to it. </P
><p class="para">I suspect that programmers disdain making a language look like another;[<a class="footnote" href="#ch05-pgfId-951096">3</A
>] in the final analysis, using <kbd class="command">eval</KBD
> and <kbd class="command">die</KBD
> in the raw is probably the easiest option.<a class="indexterm" name="ch05-idx-951179-0"></A
><a class="indexterm" name="ch05-idx-951179-1"></A
><a class="indexterm" name="ch05-idx-951179-2"></A
></P
><blockquote class="footnote"><div class="footnote"><p class="para"><a class="footnote" name="ch05-pgfId-951096">[3]</A
> That excludes Larry Wall, considering that he designed Perl to look like C, sh, and awk!</P
></DIV
></BLOCKQUOTE
></DIV
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch05_01.htm" title="5.1 The String Form: Expression Evaluation"><img src="../gifs/txtpreva.gif" alt="Previous: 5.1 The String Form: Expression Evaluation" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Advanced Perl Programming"><img src="../gifs/txthome.gif" alt="Advanced Perl Programming" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch05_03.htm" title="5.3 Watch Your Quotes"><img src="../gifs/txtnexta.gif" alt="Next: 5.3 Watch Your Quotes" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">5.1 The String Form: Expression Evaluation</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">5.3 Watch Your Quotes</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
