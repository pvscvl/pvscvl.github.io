<html><head>
<title>[Chapter 10] 10.4 Relational Databases</TITLE>
<meta name="DC.title" content="Advanced Perl Programming"><meta name="DC.creator" content="Sriram Srinivasan"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:35:40Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-220-4" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch10_01.htm" title="10. Persistence"><link rel="prev" href="ch10_03.htm#ch10-pgfId-977293" title="10.3 Record-Oriented Approach"><link rel="next" href="ch10_05.htm" title="10.5 Resources"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Advanced Perl Programming" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,54" href="index.htm" alt="Advanced Perl Programming"><area shape="RECT" coords="467,0,514,18" href="../search/asrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch10_03.htm#ch10-pgfId-977293" title="10.3 Record-Oriented Approach"><img src="../gifs/txtpreva.gif" alt="Previous: 10.3 Record-Oriented Approach" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch10_01.htm" title="10. Persistence">Chapter 10<br>Persistence</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch10_05.htm" title="10.5 Resources"><img src="../gifs/txtnexta.gif" alt="Next: 10.5 Resources" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch10-27798">10.4 Relational Databases</A
></H2
><p class="para"><a class="indexterm" name="ch10-idx-982635-0"></A
><a class="indexterm" name="ch10-idx-982635-1"></A
>Relational databases have been around for a while, and while most commercial implementations have standardized on SQL, they differ significantly in the native C API. There have been several solutions to this. Microsoft popularized the ODBC (Open DataBase Connectivity) initiative, which has become the de facto standard in the (Wintel) PC world and provides a standard frontend to a large number of relational databases. PC Perl users using the ActiveWare port can access the ODBC library using the Win32::ODBC module.</P
><p class="para">Meanwhile in the Perl/Unix world, Tim Bunce and other developers, who had been writing mutually incompatible wrapper modules for different databases, came up with the DBI (Database Interface) specification and implementation to merge their efforts. DBI is similar in spirit and interface to the <a class="indexterm" name="ch10-idx-982645-0"></A
>ODBC specification.</P
><p class="para">The ODBC specification has recently been accepted as the basis for the SQL CLI (Call-Level Interface) ISO standard, and it is expected that all database vendors will eventually provide a compliant-client library. When that becomes common-place, you can expect the DBI implementation to be rewritten to take advantage of this interface or go away completely. </P
><p class="para">In this section, we will take a look at both DBI and Win32::ODBC.</P
><div class="sect2"><h3 class="sect2"><a class="title" name="ch10-pgfId-976169">10.4.1 DBI (Database Interface)</A
></H3
><p class="para"><a class="indexterm" name="ch10-idx-982636-0"></A
>Back in the days when modules and dynamic loading were not built into Perl, the database wrappers had to be linked in to create custom Perl executables called <kbd class="command">sybperl</KBD
> (for Sybase), <kbd class="command">oraperl</KBD
> (for Oracle), and so on. These libraries have since been rewritten to take advantage of Perl Version 5's features but have preserved the old API, which means that your scripts written for one database won't work for another. If you want portability, the DBI module is the only option. DBI makes calls to modules called DBDs (database drivers), which are specific to a database vendor and drive the native vendor API. If you use Oracle, for example, you can use <a class="indexterm" name="ch10-idx-982646-0"></A
>oraperl for marginally better performance, or you can use the DBI and <a class="indexterm" name="ch10-idx-982647-0"></A
><a class="indexterm" name="ch10-idx-982647-1"></A
>DBD::Oracle combination for portability. Oraperl and DBD::Oracle are both based on the same underlying code. The following web site, maintained by Alligator Descartes, is a wonderful repository of things DBI: <a class="systemitem.url" href="../../../../../../../www.symbolstone.org/technology/perl/DBI/">http://www.symbolstone.org/technology/perl/DBI/</A
>.</P
><p class="para">Using DBI is a simple matter of connecting to the appropriate database and firing off SQL queries:[<a class="footnote" href="#ch10-pgfId-979797">4</A
>] </P
><blockquote class="footnote"><div class="footnote"><p class="para"><a class="footnote" name="ch10-pgfId-979797">[4]</A
> I'll assume that you are comfortable with SQL.</P
></DIV
></BLOCKQUOTE
><pre class="programlisting">use DBI;
$dbname = 'empdb'; $user = 'sriram'; 
$password = 'foobar'; $dbd = 'Oracle';
$dbh = <b class="emphasis.bold">DBI-&gt;connect</B
> ($dbname, $user, $password, $dbd); 
if (!$dbh) {
     print &quot;Error connecting to database; <b class="emphasis.bold">$DBI::errstr</B
>\n&quot;;
}</PRE
><p class="para"><kbd class="command">connect</KBD
> returns a <em class="emphasis">database handle</EM
>, which represents the connection to a specific database. The <kbd class="command">$dbd</KBD
> parameter in this example tells it to load the DBD::Oracle module. This parameter can be followed by a reference to a hash of driver or connection-specific attributes. Some database vendors allow multiple connections to be created.</P
><p class="para">All DBI statements return <kbd class="command">undef</KBD
> on failure. The error code and errors strings can be obtained from $DBI::err and $DBI::errstr; these reflect the errors in the last executed DBI statement.</P
><div class="sect3"><h4 class="sect3"><a class="title" name="ch10-pgfId-977670">10.4.1.1 Basic SQL accesses</A
></H4
><p class="para"><a class="indexterm" name="ch10-idx-982648-0"></A
>SQL statements can be executed like this (the equivalent of <em class="emphasis">execute immediate</EM
> in embedded SQL):</P
><pre class="programlisting"><b class="emphasis.bold">$dbh-&gt;do</B
>(&quot;delete from emptable where status != 'active'&quot;);
print &quot;Error: $DBI::err .... $DBI::errstr&quot; if $DBI::err;</PRE
><p class="para">If you make the same query or a similar-looking query a number of times, you force the system to parse it over and over again. To avoid this overhead, you can compile a parameterized query using <kbd class="command">prepare</KBD
>, and <kbd class="command">execute</KBD
> it many times.</P
><p class="para">The <kbd class="command">prepare</KBD
> method is given a query with parameter placeholders indicated by "<kbd class="command">?</KBD
>":</P
><pre class="programlisting">$sth = <b class="emphasis.bold">$dbh-&gt;prepare</B
> ('insert into emptable (name, age)
                                     values (?,    ?)');</PRE
><p class="para">You can <kbd class="command">execute</KBD
> this statement over and over again using the returned <em class="emphasis">statement handle</EM
>, each time supplying it an array of values corresponding to each placeholder. These values are sometimes referred to as <em class="emphasis">binding</EM
> parameters. In fact, <kbd class="command">do</KBD
> internally prepares and executes the query given to it.</P
><p class="para">The following piece of code reads employee names and ages from standard input and uses the statement handle created above to insert rows into the database:</P
><pre class="programlisting">while (defined($line = &lt;&gt;)) {
    chomp($line);

    # id, name, age separated by tab
    ($id, $name, $age) = split (/\t/, $line); 
    $sth-&gt;execute($id, $name, $age);
    die &quot;Error: $DBI::err .... $DBI::errstr&quot; if $DBI::err;
}</PRE
><p class="para">If the field is nullable, you can indicate a null value by passing <kbd class="command">undef</KBD
> to <kbd class="command">execute</KBD
>.<a class="indexterm" name="ch10-idx-982650-0"></A
></P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="ch10-pgfId-978279">10.4.1.2 Select</A
></H4
><p class="para">The following example shows how to retrieve information in bulk, using the SQL <code class="literal">select</CODE
><a class="indexterm" name="ch10-idx-982652-0"></A
> statement:</P
><pre class="programlisting">$cur = $dbh-&gt;prepare('select name, age from emptable where age &lt; 40');
$cur-&gt;execute();
die &quot;Prepare error: $DBI::err .... $DBI::errstr&quot; if $DBI::err;
while (($name, $age) = $cur-&gt;fetchrow) {
    print &quot;Name:$name, Age: $age \n&quot;;
}
$cur-&gt;finish();</PRE
><p class="para">The <kbd class="command">prepare</KBD
><a class="indexterm" name="ch10-idx-982653-0"></A
> statement returns a statement handle as before. When executed, this handle is associated internally with an open database cursor and is used to fetch each row returned by the database. <kbd class="command">fetchrow</KBD
> returns the values corresponding to the fields specified in the <code class="literal">select</CODE
> query. <kbd class="command">finish</KBD
> closes the cursor.</P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="ch10-28485">10.4.1.3 Query meta-data</A
></H4
><p class="para"><a class="indexterm" name="ch10-idx-982654-0"></A
><a class="indexterm" name="ch10-idx-982654-1"></A
>Once a statement is prepared and executed, DBI stores the following pieces of information as attributes of the statement handle: </P
><dl class="variablelist"><dt class="term"><code class="literal">$DBI::rows</CODE
><kbd class="command"> </KBD
></DT
><dd class="listitem"><p class="para">The number of rows affected or returned</P
></DD
><dt class="term"><code class="literal">$sth-&gt;{NUM_FIELDS}</CODE
><kbd class="command"> </KBD
></DT
><dd class="listitem"><p class="para">The number of fields returned by a select</P
></DD
><dt class="term"><code class="literal">$sth-&gt;{NUM_PARAMS}</CODE
><kbd class="command"> </KBD
></DT
><dd class="listitem"><p class="para">The number of parameters returned by any query</P
></DD
></DL
><p class="para">After a <code class="literal">select</CODE
> query, the following attributes contain references to arrays of field-specific information:</P
><dl class="variablelist"><dt class="term"><code class="literal">$sth-&gt;{NAME}</CODE
><kbd class="command"> </KBD
></DT
><dd class="listitem"><p class="para">Column names returned by the query</P
></DD
><dt class="term"><code class="literal">$sth-&gt;{NULLABLE}</CODE
><kbd class="command"> </KBD
></DT
><dd class="listitem"><p class="para">Booleans indicating whether fields are nullable or not</P
></DD
><dt class="term"><code class="literal">$sth-&gt;{TYPE}</CODE
><kbd class="command"> </KBD
></DT
><dd class="listitem"><p class="para">Field types</P
></DD
><dt class="term"><code class="literal">$sth-&gt;{PRECISION}</CODE
><kbd class="command"> </KBD
></DT
><dd class="listitem"><p class="para">Floating-point precision of field</P
></DD
><dt class="term"><code class="literal">$sth-&gt;{SCALE}</CODE
><kbd class="command"> </KBD
></DT
><dd class="listitem"><p class="para">Field lengths</P
></DD
></DL
><p class="para">Let us use what we have learned this far and create a Perl replacement for the interactive SQL frontends shipped with most relational databases (programs such as <code class="literal">sqlplus</CODE
> and <code class="literal">isql</CODE
>). <a class="xref" href="#ch10-15995" title="sql.pl: Interactive SQL Frontend">Example 10.1</A
> does this.</P
><div class="example"><h4 class="example"><a class="title" name="ch10-15995">Example 10.1: sql.pl: Interactive SQL Frontend</A
></H4
><pre class="programlisting">use DBI;
$dbname = 'DEMO732'; $user = 'scott'; 
$password = 'tiger'; $dbd = 'Oracle';

$dbh = DBI-&gt;connect($dbname,$user,$password,$dbd) ||
       die &quot;Error connecting $DBI::errstr\n&quot;;;

while(1) {
    print &quot;SQL&gt; &quot;;                      # Prompt
    $stmt = &lt;STDIN&gt;;
    last unless defined($stmt);
    last if ($stmt =~ /^\s*exit/);
    chomp ($stmt);
    $stmt =~ s/;\s*$//;

    $sth = $dbh-&gt;prepare($stmt);
    if ($DBI::err) {
        print STDERR &quot;$DBI::errstr\n&quot;;
        next;
    }
    $sth-&gt;execute() ;
    if ($DBI::err) {
        print STDERR &quot;$DBI::errstr\n&quot;;
        next;
    }
    if ($stmt =~ /^\s*select/i) {
        my $rl_names = $sth-&gt;{NAME};         # ref. to array of col. names
        while (@results = $sth-&gt;fetchrow) {  # retrieve results
            if ($DBI::err) {
                print STDERR $DBI::errstr,&quot;\n&quot;;
                last;
            }
            foreach $field_name (@$rl_names) {
                printf &quot;%10s: %s\n&quot;, $field_name, shift @results;
            }
            print &quot;\n&quot;;
        }
        $sth-&gt;finish;
    }
}
$dbh-&gt;commit;</PRE
></DIV
><p class="para">The script prepares and executes all statements. If the statement is a <code class="literal">select</CODE
> query, it fetches each row and prints out each value annotated by the corresponding column name. Note that <kbd class="command">fetchrow</KBD
> returns a reference to an array of values in a scalar context.<a class="indexterm" name="ch10-idx-982656-0"></A
><a class="indexterm" name="ch10-idx-982656-1"></A
></P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="ch10-pgfId-978218">10.4.1.4 Transactions</A
></H4
><p class="para"><a class="indexterm" name="ch10-idx-982658-0"></A
>When a database connection is created by using <kbd class="command">connect</KBD
>, DBI (or the database) automatically starts a transaction. To end a transaction, you can use the <kbd class="command">commit</KBD
> or <kbd class="command">rollback</KBD
> methods on the database handle; a new transaction is immediately started implicitly. Distributed transactions, as defined by the XA standard, are not supported.</P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="ch10-pgfId-978399">10.4.1.5 Special functions</A
></H4
><p class="para">Driver-specific functions can be called by using the <kbd class="command">func</KBD
> method of the database handle. For example, the mSQL database driver provides an internal function called <kbd class="command">_ListFields</KBD
>, which returns information about columns in a table. It is invoked as follows:</P
><pre class="programlisting">$ref = $dbh-&gt;func($table, '_ListFields');</PRE
><p class="para">Clearly, using <kbd class="command">func</KBD
> is a nonportable solution. </P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="ch10-pgfId-977531">10.4.1.6 What DBI does not provide</A
></H4
><p class="para">It is instructive to list common database tasks for which DBI does not currently provide an interface. This is not meant as a slight on the DBI/DBD implementors; it is just an indicator of the fact that databases vary enormously in every aspect not touched by the standards committees.</P
><dl class="variablelist"><dt class="term">Meta-data </DT
><dd class="listitem"><p class="para"><a class="indexterm" name="ch10-idx-982663-0"></A
>DBI provides a <kbd class="command">$dbh-&gt;tables()</KBD
> method to fetch a list of all accessible table names. However, there is no function to return the names of columns in a given table. Fortunately, there is a simple, portable solution. Because a <em class="emphasis">select</EM
> query returns meta-information, we can use a dummy query that we know will definitely <em class="emphasis">not</EM
> fetch any rows but will execute successfully:</P
><pre class="programlisting">    select * from $table where 1 = 0;</PRE
><p class="para">The <code class="literal">where</CODE
> clause is perfectly valid, but the condition will never succeed. The "*" makes it return all the columns, which we can study using <kbd class="command">$sth</KBD
>'s attributes, as explained earlier in the section <a class="xref" href="#ch10-28485" title="Query meta-data">Section 10.4.1.3, "Query meta-data</A
>."</P
></DD
><dt class="term">Creating databases</DT
><dd class="listitem"><p class="para">Database APIs differ widely in how databases (not tables) are created; you have to use vendor-specific APIs or tools for this. Once a database is set up, however, DBI can be used to create or drop tables in that database.</P
></DD
><dt class="term">Inserts/creates from arrays</DT
><dd class="listitem"><p class="para">Bulk insertion or updates of data from arrays is not a standard SQL CLI[<a class="footnote" href="#ch10-pgfId-980024">5</A
>] feature. If there is truly a large amount of data to be inserted, you are likely better off dumping the data into a file and using the appropriate bulk copy utility (such as Sybase's <kbd class="command">bcp</KBD
>) to transfer it to the database at high speeds. (For even better performance, drop the indexes before loading the data and recreate them later.)</P
><blockquote class="footnote"><div class="footnote"><p class="para"><a class="footnote" name="ch10-pgfId-980024">[5]</A
> Call Level Interface&nbsp;- another name for the standardized C API that all RDBMS vendors are expected to support.</P
></DIV
></BLOCKQUOTE
></DD
><dt class="term">Stored procedures and triggers</DT
><dd class="listitem"><p class="para"><a class="indexterm" name="ch10-idx-982665-0"></A
><a class="indexterm" name="ch10-idx-982665-1"></A
>Stored procedures and triggers are very different from vendor to vendor. All Perl database modules such as oraperl and sybperl provide such access to their native database facilities, but DBI does not attempt to generalize any of them. Please refer to the module documentation for details or to the DBI web site [<a class="xref" href="ch10_05.htm" title="">6</A
>] for suggested approaches.</P
></DD
><dt class="term">Uniform error numbers</DT
><dd class="listitem"><p class="para"><a class="indexterm" name="ch10-idx-982664-0"></A
>DBI may be portable, but it doesn't provide a portable set of common error codes. For example, assume that you want to create a table if it is not already present. You might try something like this:</P
><pre class="programlisting">$dbh-&gt;do(&quot;create table emptable (id   char(15), name char(40),
                                 age  integer)&quot;);</PRE
><p class="para">If <kbd class="command">$DBI::err</KBD
> contains an error code, you don't want to take it seriously if it says something like "table/view already present." Unfortunately, if you are using Oracle, this error code is 955, and for Sybase it is something entirely different. There goes portability out of the window!<a class="indexterm" name="ch10-idx-982638-0"></A
></P
></DD
></DL
></DIV
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch10-pgfId-977530">10.4.2 Win32::ODBC</A
></H3
><p class="para">The <a class="indexterm" name="ch10-idx-982666-0"></A
><a class="indexterm" name="ch10-idx-982666-1"></A
>Win32::ODBC module is available on the ActiveWare port of Microsoft Windows systems and resembles the DBI approach. Consider the following script, which retrieves all records from an employee table:</P
><pre class="programlisting">use Win32::ODBC;
$dbh = new Win32::ODBC ($dbname);
if $dbh-&gt;Sql(&quot;select * from emptable&quot;) {
    print 'Error: ', $db-&gt;Error(), &quot;\n&quot;;
    $dbh-&gt;Close();
    exit(1);
}
@names = $dbh-&gt;FieldNames();
while ($dbh-&gt;FetchFrow()) {
    # Data returns the values
    @values = $dbh-&gt;Data();
    ... <code class="replaceable"><i>do something with @names and @values.</I
></CODE
>
}</PRE
><p class="para">The <kbd class="command">Sql</KBD
><a class="indexterm" name="ch10-idx-982667-0"></A
> statement is equivalent to DBI's <kbd class="command">do</KBD
>. ODBC does not have the concept of statement handles; instead, the database handle is used to fetch the results of the last query.</P
><p class="para">Meta-data is available in the form of two methods: <kbd class="command">TableList</KBD
>, which returns a list of table names, and <kbd class="command">ColAttributes</KBD
>, which returns the specified attribute of each of the supplied field names in the current record.<a class="indexterm" name="ch10-idx-982584-0"></A
><a class="indexterm" name="ch10-idx-982584-1"></A
><a class="indexterm" name="ch10-idx-982584-2"></A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch10_03.htm#ch10-pgfId-977293" title="10.3 Record-Oriented Approach"><img src="../gifs/txtpreva.gif" alt="Previous: 10.3 Record-Oriented Approach" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Advanced Perl Programming"><img src="../gifs/txthome.gif" alt="Advanced Perl Programming" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch10_05.htm" title="10.5 Resources"><img src="../gifs/txtnexta.gif" alt="Next: 10.5 Resources" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">10.3 Record-Oriented Approach</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">10.5 Resources</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
