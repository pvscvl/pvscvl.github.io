<html><head>
<title>[Chapter 9] 9.2 Tying Arrays</TITLE>
<meta name="DC.title" content="Advanced Perl Programming"><meta name="DC.creator" content="Sriram Srinivasan"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:34:53Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-220-4" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch09_01.htm" title="9. Tie"><link rel="prev" href="ch09_01.htm" title="9.1 Tying Scalars"><link rel="next" href="ch09_03.htm" title="9.3 Tying Hashes"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Advanced Perl Programming" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,54" href="index.htm" alt="Advanced Perl Programming"><area shape="RECT" coords="467,0,514,18" href="../search/asrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch09_01.htm" title="9.1 Tying Scalars"><img src="../gifs/txtpreva.gif" alt="Previous: 9.1 Tying Scalars" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch09_01.htm" title="9. Tie">Chapter 9<br>Tie</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch09_03.htm" title="9.3 Tying Hashes"><img src="../gifs/txtnexta.gif" alt="Next: 9.3 Tying Hashes" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch09-29854">9.2 Tying Arrays</A
></H2
><p class="para"><a class="indexterm" name="ch09-idx-955105-0"></A
><a class="indexterm" name="ch09-idx-955105-1"></A
><a class="indexterm" name="ch09-idx-955105-2"></A
>Tying an array to a module runs along very similar lines, as shown in <a class="xref" href="#ch09-33110" title="tie and Array Access">Table 9.2</A
>. There are two levels at which you can work with a normal array. At one level, you can get and set the value of the entire array and the last element's index (using <kbd class="command">$#array</KBD
>). At another level, you can get or set individual elements and create or destroy its elements using <kbd class="command">splice</KBD
>, <kbd class="command">push</KBD
>, <kbd class="command">pop</KBD
>, and so on. As this book goes to print, <kbd class="command">tie</KBD
> handles reads and writes only to array elements and does not allow the array itself to be modified in any way. This situation is expected to be remedied in the not-too-distant future. </P
><br><table class="table" border="1" cellpadding="3"><caption class="table"><a class="title" name="ch09-33110">Table 9.2: tie and Array Access</A
></CAPTION
><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1"><p class="para">When you say:</P
></TH
><th class="entry" align="LEFT" rowspan="1" colspan="1"><p class="para">Perl translates it to:</P
></TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><pre class="programlisting">tie @array, 'Foo',1,2</PRE
></TD
><td class="entry" rowspan="1" colspan="1"><pre class="programlisting">$obj = Foo-&gt;TIEARRAY (1,2);</PRE
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><pre class="programlisting">$a = $array[5];</PRE
></TD
><td class="entry" rowspan="1" colspan="1"><pre class="programlisting">$obj-&gt;FETCH(5);</PRE
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><pre class="programlisting">$array[5] = &quot;aa&quot;</PRE
></TD
><td class="entry" rowspan="1" colspan="1"><pre class="programlisting">$obj-&gt;STORE(5, &quot;aa&quot;);</PRE
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><pre class="programlisting">untie @array;</PRE
></TD
><td class="entry" rowspan="1" colspan="1"><pre class="programlisting">$obj-&gt;DESTROY();</PRE
></TD
></TR
></TBODY
></TABLE
><p class="para">One useful example of tied arrays is to emulate a bitset. If you set the 200th element to 1, the module can set the 200th bit in a bit array, using <kbd class="command">vec()</KBD
>. </P
><p class="para">The next section shows an example of tied arrays to wrap a text file.</P
><div class="sect2"><h3 class="sect2"><a class="title" name="ch09-pgfId-948823">9.2.1 TIEARRAY Example: File as an Array</A
></H3
><p class="para"><a class="indexterm" name="ch09-idx-955146-0"></A
><a class="indexterm" name="ch09-idx-955146-1"></A
><a class="indexterm" name="ch09-idx-955146-2"></A
><a class="indexterm" name="ch09-idx-955146-3"></A
>This example builds a facility called TieFile to make a text file appear as an array. If you want to examine the 20th line of <em class="emphasis">foo.txt</EM
>, for example, you write:</P
><pre class="programlisting">tie @lines, 'TieFile', 'foo.txt';
print $lines[20];</PRE
><p class="para">For simplicity, this module does not accept updates to any element.</P
><p class="para">When asked to fetch the <em class="emphasis">n</EM
>th line, the TieFile module shown in <a class="xref" href="#ch09-15667" title="TieFile.pm: Mapping a File to an Array">Example 9.2</A
> reads the file until it reaches that line and returns it. Since it is wasteful to keep traversing the entire file every time a line is requested, TieFile keeps track of the file offsets of the beginning of each line so that when you ask it for a line that it has already visited, it knows the precise offset to <kbd class="command">seek</KBD
> to before reading. The object created by <kbd class="command">TIEARRAY</KBD
> has two fields: one to store this array of offsets and another to store the filehandle of the open file. These two fields are stored in an anonymous array. (Alternatively, you can use a hash or the ObjectTemplate module.)</P
><div class="example"><h4 class="example"><a class="title" name="ch09-15667">Example 9.2: TieFile.pm: Mapping a File to an Array</A
></H4
><pre class="programlisting">package TieFile;
use Symbol;
use strict;
# The object constructed in TIEARRAY is an array, and these are the
# fields
my $F_OFFSETS    = 0;  # List of file seek offsets (for each line)
my $F_FILEHANDLE = 1;  # Open filehandle

sub TIEARRAY {
   my ($pkg, $filename) = @_;
   my $fh = gensym();
   open ($fh, $filename) || die &quot;Could not open file: $!\n&quot;;
   bless [  [0],  # 0th line is at offset 0
            $fh
         ], $pkg;
}

sub FETCH {
   my ($obj, $index) = @_;
   # Have we already read this line?
   my $rl_offsets = $obj-&gt;[$F_OFFSETS];
   my $fh = $obj-&gt;[$F_FILEHANDLE];
   if ($index &gt; @$rl_offsets) {
       $obj-&gt;read_until ($index);
   } else {
       # seek to the appropriate file offset
       seek ($fh, $rl_offsets-&gt;[$index], 0); 
   }
   return (scalar &lt;$fh&gt;);  # Return a single line, by evaluating &lt;$fh&gt; 
                           # in a scalar context
}

sub STORE {
   die &quot;Sorry. Cannot update file using package TieFile\n&quot;;
}

sub DESTROY {
   my ($obj) = @_;
   # close the filehandle
   close($obj-&gt;[$F_FILEHANDLE]);
}

sub read_until {
   my ($obj, $index) = @_;
   my $rl_offsets = $obj-&gt;[$F_OFFSETS];
   my $last_index = @$rl_offsets - 1;
   my $last_offset = $rl_offsets-&gt;[$last_index];
   my $fh = $obj-&gt;[$F_FILEHANDLE];
   seek ($fh, $last_offset, 0); 
   my $buf;
   while (defined($buf = &lt;$fh&gt;)) {
      $last_offset += length($buf);
      $last_index++;
      push (@$rl_offsets, $last_offset);
      last if $last_index &gt; $index;
   }
}

1;</PRE
></DIV
><p class="para">You may have noticed that this module works only if you assign strings or numbers to the tied array's elements. If you assign it a reference, it simply converts it into a string and stores it into the file, which is patently useless when the data is read back from the file. In other words, this module should ideally "serialize" the data structure pointed to by the reference before storing it into the file, and recreate it when requested.<a class="indexterm" name="ch09-idx-955151-0"></A
><a class="indexterm" name="ch09-idx-955151-1"></A
><a class="indexterm" name="ch09-idx-955151-2"></A
><a class="indexterm" name="ch09-idx-955151-3"></A
> We'll have more to say on this subject in <a class="xref" href="ch10_01.htm" title="Persistence">Chapter 10, <cite class="chapter">Persistence</CITE
></A
>.<a class="indexterm" name="ch09-idx-955108-0"></A
><a class="indexterm" name="ch09-idx-955108-1"></A
><a class="indexterm" name="ch09-idx-955108-2"></A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch09_01.htm" title="9.1 Tying Scalars"><img src="../gifs/txtpreva.gif" alt="Previous: 9.1 Tying Scalars" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Advanced Perl Programming"><img src="../gifs/txthome.gif" alt="Advanced Perl Programming" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch09_03.htm" title="9.3 Tying Hashes"><img src="../gifs/txtnexta.gif" alt="Next: 9.3 Tying Hashes" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">9.1 Tying Scalars</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">9.3 Tying Hashes</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
