<html><head>
<title>[Chapter 12] Networking with Sockets</TITLE>
<meta name="DC.title" content="Advanced Perl Programming"><meta name="DC.creator" content="Sriram Srinivasan"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:36:46Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-220-4" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="index.htm" title="Advanced Perl Programming"><link rel="prev" href="ch11_04.htm" title="11.4 Resources"><link rel="next" href="ch12_02.htm#ch12-pgfId-974527" title="12.2 Socket API and IO::Socket"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Advanced Perl Programming" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,54" href="index.htm" alt="Advanced Perl Programming"><area shape="RECT" coords="467,0,514,18" href="../search/asrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch11_04.htm" title="11.4 Resources"><img src="../gifs/txtpreva.gif" alt="Previous: 11.4 Resources" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 12</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch12_02.htm#ch12-pgfId-974527" title="12.2 Socket API and IO::Socket"><img src="../gifs/txtnexta.gif" alt="Next: 12.2 Socket API and IO::Socket" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="chapter"><h1 class="chapter"><a class="title" name="ch12-18874">12. Networking with Sockets</A
></H1
><div class="htmltoc"><p><b>Contents:</B
><br><a class="sect1" href="#ch12-20324" title="12.1 Networking Primer">Networking Primer</A
><br><a class="sect1" href="ch12_02.htm#ch12-pgfId-974527" title="12.2 Socket API and IO::Socket">Socket API and IO::Socket</A
><br><a class="sect1" href="ch12_03.htm#ch12-pgfId-973651" title="12.3 Handling Multiple Clients">Handling Multiple Clients</A
><br><a class="sect1" href="ch12_04.htm" title="12.4 Real-World Servers">Real-World Servers</A
><br><a class="sect1" href="ch12_05.htm" title="12.5 IO Objects and Filehandles">IO Objects and Filehandles</A
><br><a class="sect1" href="ch12_06.htm" title="12.6 Prebuilt Client Modules">Prebuilt Client Modules</A
><br><a class="sect1" href="ch12_07.htm" title="12.7 Resources">Resources</A
></P
><p></P
></DIV
><div class="epigraph" align="right"><p class="para" align="right"><i>I plugged my phone in where the blender used to be. I called someone. They went "Aaaaahhh..."</I
></P
><p class="attribution" align="right">-&nbsp;Steven Wright</P
></DIV
><p class="para">Programs can communicate with each other in a variety of ways. They can use files, anonymous/named pipes, System V interprocess messaging primitives, BSD sockets, and TLI (Transport Layer Interface). Socket and TLI communications come under the purview of "networking," a step up from the other IPC (interprocess communication) mechanisms, because they don't constrain the communicating processes to be on the same machine. This chapter provides a primer on socket communications and builds simple client/server configurations using Graham Barr's IO library (part of the standard Perl distribution). This knowledge is put to use in the next chapter, where we build an asynchronous message passing module, and another for doing remote procedure calls (RPC).</P
><p class="para"><a class="indexterm" name="ch12-idx-978513-0"></A
>Networking is the second of four important technologies that we discuss in this book; the others are user interfaces, persistence, and code generation. This chapter, like the other three, is as much about the technology as it is about Perl's support for it. Andrew Tanenbaum's textbook on computer networks [<a class="xref" href="ch12_07.htm" title="">5</A
>] is a <em class="emphasis">wonderful</EM
> introduction to computer networking. (I also rate it as one of the best computer books ever written.) This chapter provides just enough introduction to networks to work with Perl, sockets, and TCP/IP.</P
><div class="sect1"><h2 class="sect1"><a class="title" name="ch12-20324">12.1 Networking Primer</A
></H2
><p class="para">Mail (paper and electronic) and telephones are two distinct forms of communication. A telephone conversation is <em class="emphasis">connection-oriented</EM
><a class="indexterm" name="ch12-idx-978518-0"></A
>, because the caller and the called "own" the line (have a continuous link) until the end of the conversation. Connection-oriented communication guarantees message delivery, preserves the order in which messages are sent, and allows a stream of data to be sent.<em class="emphasis"></EM
><a class="indexterm" name="ch12-idx-978520-0"></A
> Mail, in contrast, is a <a class="indexterm" name="ch12-idx-978522-0"></A
>connectionless mode of transfer, which transports information in packets (or <i class="option">datagrams</I
>) and gives no guarantees about message delivery and the order in which the packets are received. It has a higher overhead because each packet identifies its sender and the intended receiver; in contrast, a connection-oriented conversation proceeds without further ado, once the parties have identified themselves. Computer networks offer you a similar choice of connection versus connectionless mode of data transfer. It must be mentioned that there are connectionless protocols such as reliable UDP that do offer guaranteed delivery and sequence integrity.</P
><p class="para">The networking world assigns each computer an <a class="indexterm" name="ch12-idx-978523-0"></A
>internet address, also called an IP address (short for Internet Protocol), a sequence of four bytes typically written in a dot sequence, like this: 192.23.34.1. (This will change with IPv6, because the world is fast running out of four-byte IP addresses.) Just as you have convenient phone aliases such as 1-800-FLOWERS, computers are often given unique aliases, such as <a class="systemitem.url" href="../../../../../../../www.yahoo.com/">www.yahoo.com</A
>. Now, many programs can run on one machine, and it is not enough to deliver a message to the machine: it has to be handed over to the appropriate application program running on that machine. A program can ask for one or more <em class="emphasis">ports</EM
><a class="indexterm" name="ch12-idx-978524-0"></A
> to be opened, the equivalent of a private mailbox or telephone extension. To send a message to a program, you need its full address: its machine name and the port on which it is <em class="emphasis">listening</EM
>. Standard applications such as <em class="emphasis">ftp</EM
>, <em class="emphasis">telnet</EM
>, and <em class="emphasis">mail</EM
> actually come in pairs; for example, the <em class="emphasis">ftp</EM
> program you use talks to a counterpart server program called <em class="emphasis">ftpd</EM
> (ftp daemon) on the remote computer. Such server programs listen on standard port numbers; when you type <a class="systemitem.url" href="../../../../../../../www.yahoo.com/">www.yahoo.com</A
> on your web browser, the browser automatically connects to port 80 on that machine, where it assumes the corresponding web server to be listening. Port numbers 1-1024 are reserved for standard, well-known Internet applications. Many platforms reserve the name "localhost" (and the address 127.0.0.1) to mean the machine on which the program is running.</P
><p class="para">Once assigned a <a class="indexterm" name="ch12-idx-978525-0"></A
>socket, your program has a choice of using a connection-oriented protocol called <a class="indexterm" name="ch12-idx-978526-0"></A
>TCP/IP (Transport Control Protocol/IP) or a connectionless one, <a class="indexterm" name="ch12-idx-978527-0"></A
>UDP/IP (User Datagram Protocol). Clearly, sender and receiver must use the same protocol. The TCP/IP model is usually preferred over UDP because it provides for data sequencing, end-to-end reliability (checksums, positive acknowledgments, time-outs), and end-to-end flow control (if the sender is sending data faster than the receiver can handle it, it will <a class="indexterm" name="ch12-idx-978567-0"></A
>block the sender when the receiver's buffers are full). If the communications medium is very good, such as a LAN, UDP may perform much better because it doesn't spend time accounting for the worst case. In a production system, however, you can never really take a chance, so we will stick to TCP in this chapter. </P
><p class="para">The socket abstraction and API were introduced in BSD 4.2 to provide a uniform interface over different types of protocols (there are others besides TCP and UDP), and, depending on the protocol used, a socket behaves like either a telephone receiver or a mailbox. In either case, it takes one socket on each side to make a conversation (which is why sockets are also known as <em class="emphasis">communications end-points</EM
><a class="indexterm" name="ch12-idx-978528-0"></A
>). The socket API allows you to specify the <em class="emphasis">domain </EM
>of the communicating entities&nbsp;- the "Unix domain" is used for processes on the same machine, and the "Internet domain" is used for processes on different machines. This chapter examines the more generally accepted (and useful) "Internet domain" option.</P
><p class="para"><a class="indexterm" name="ch12-idx-978517-0"></A
>TLI (Transport Layer Interface), another API introduced in System V (Release 3.0, 1986), provides a very similar-looking alternative to the socket abstraction, but because it is not as widely used as the BSD socket interface, we will not discuss it in this chapter.<a class="indexterm" name="ch12-idx-978516-0"></A
><a class="indexterm" name="ch12-idx-978516-1"></A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch11_04.htm" title="11.4 Resources"><img src="../gifs/txtpreva.gif" alt="Previous: 11.4 Resources" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Advanced Perl Programming"><img src="../gifs/txthome.gif" alt="Advanced Perl Programming" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch12_02.htm#ch12-pgfId-974527" title="12.2 Socket API and IO::Socket"><img src="../gifs/txtnexta.gif" alt="Next: 12.2 Socket API and IO::Socket" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">11.4 Resources</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">12.2 Socket API and IO::Socket</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
