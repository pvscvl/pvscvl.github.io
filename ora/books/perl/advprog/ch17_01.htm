<html><head>
<title>[Chapter 17] Template-Driven Code Generation</TITLE>
<meta name="DC.title" content="Advanced Perl Programming"><meta name="DC.creator" content="Sriram Srinivasan"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:39:40Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-220-4" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="index.htm" title="Advanced Perl Programming"><link rel="prev" href="ch16_03.htm" title="16.3 Resources"><link rel="next" href="ch17_02.htm" title="17.2 Jeeves Example"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Advanced Perl Programming" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,54" href="index.htm" alt="Advanced Perl Programming"><area shape="RECT" coords="467,0,514,18" href="../search/asrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch16_03.htm" title="16.3 Resources"><img src="../gifs/txtpreva.gif" alt="Previous: 16.3 Resources" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 17</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch17_02.htm" title="17.2 Jeeves Example"><img src="../gifs/txtnexta.gif" alt="Next: 17.2 Jeeves Example" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="chapter"><h1 class="chapter"><a class="title" name="ch17-27627">17. Template-Driven Code Generation</A
></H1
><div class="htmltoc"><p><b>Contents:</B
><br><a class="sect1" href="#ch17-11204" title="17.1 On Code Generation">On Code Generation</A
><br><a class="sect1" href="ch17_02.htm" title="17.2 Jeeves Example">Jeeves Example</A
><br><a class="sect1" href="ch17_03.htm" title="17.3 Jeeves Overview">Jeeves Overview</A
><br><a class="sect1" href="ch17_04.htm#ch17-pgfId-972476" title="17.4 Jeeves Implementation">Jeeves Implementation</A
><br><a class="sect1" href="ch17_05.htm" title="17.5 Sample Specification Parser">Sample Specification Parser</A
><br><a class="sect1" href="ch17_06.htm" title="17.6 Resources">Resources</A
></P
><p></P
></DIV
><div class="epigraph" align="right"><p class="para" align="right"><i>I'd rather write programs to write programs than write programs.</I
></P
><p class="attribution" align="right">-&nbsp;Programming Pearls, <cite class="citetitle">Communications of the ACM</CITE
>, Sept. 1985</P
></DIV
><p class="para">This chapter builds a template-driven code generator, an indispensable tool in a C, C++, or Java programmer's toolbox. The chapter has two objectives: to make the case for code generation as a method of code reuse and to present a small but nontrivial problem that can exercise all the Perl concepts you learned in the first half of the book: complex data structures, modules, objects, and <kbd class="command">eval</KBD
>. Enjoy!</P
><div class="sect1"><h2 class="sect1"><a class="title" name="ch17-11204">17.1 On Code Generation</A
></H2
><p class="para"><a class="indexterm" name="ch17-idx-977817-0"></A
><a class="indexterm" name="ch17-idx-977817-1"></A
>Programmers create and use tiny specification languages all the time. Database schemas, resources (<i class="filename">rc</I
> files in Unix such as <i class="filename">.mwmrc</I
> and <i class="filename">.openwinrc</I
>), user interface specifications (Motif UIL files), network interface specifications (RPC or CORBA IDL files), and so on are all examples of such languages. These languages enable you to state your requirements in a high-level, compact, and declarative format; for example, in Motif's UIL (User Interface Language), you can simply state that you want two buttons inside a form and spare yourself the effort of writing 20 or so statements in C to achieve the same effect.</P
><p class="para">The semantic gap between these specification languages and conventional systems-programming languages such as C or C++ can be bridged in one of two ways. The first approach is for the C application to treat the specification as meta-data; that is, the application embeds the specification parser and exchanges information with it using C data structures and an internal API. The second approach is to have a standalone compiler to translate the specification to C, which in turn is linked to the application. RPC systems and CASE tools prefer this approach. </P
><p class="para">In the following pages, we will study the second alternative and build ourselves a configurable code generation framework called Jeeves.[<a class="footnote" href="#ch17-pgfId-972852">1</A
>] </P
><blockquote class="footnote"><div class="footnote"><p class="para"><a class="footnote" name="ch17-pgfId-972852">[1]</A
> Jeeves is the efficient butler in P.G. Wodehouse's novels, who does all the work for his bumbling master with at most a twitch of an eyebrow.</P
></DIV
></BLOCKQUOTE
><p class="para">The code generators we mentioned previously are clearly domain-specific. In practice, I have also found most of them to be needlessly specific in their output capabilities. Consider the following examples:</P
><dl class="variablelist"><dt class="term">RPC</DT
></DL
><blockquote class="note"><p class="para"><strong>NOTE:</STRONG
> The <a class="indexterm" name="ch17-idx-977822-0"></A
><a class="indexterm" name="ch17-idx-977822-1"></A
>Remote Procedure Call facility allows you to call a procedure in a different address space, possibly on a different machine. You specify a list of procedures that you wish to export in an <a class="indexterm" name="ch17-idx-977823-0"></A
><a class="indexterm" name="ch17-idx-977823-1"></A
>Interface Definition Language (IDL) and feed it to an IDL compiler, which produces some C code for the client and server ends. Link these pieces of code to your application, and voil¡, you have network transparency. </P
><p class="para">Most commercial IDL compilers are remarkably inflexible about changing their output code. They make it hard for you to insert probes for monitoring network performance or auditing data flowing across the network. If you want to transparently encrypt the data before it is put "on the wire," you are often out of luck. Sure, you can change the C code output by the IDL compiler, but your changes will get overwritten the next time you run the IDL compiler.</P
></BLOCKQUOTE
><dl class="variablelist"><dt class="term">CASE</DT
><dd class="listitem"><p class="para">Many <a class="indexterm" name="ch17-idx-977824-0"></A
>CASE tools generate C code from object model specifications. The following sample specification lists entity classes and their attributes and specifies the degree and cardinality of relationships between these classes:</P
><pre class="programlisting">    Employee {
        int         emp_id   key
        string[40]  name     
        Department  dept_id  
        double      salary   
    }
    Department {
        int         dept_id  key
        string[20]  name
    }
    Relationship Department(1) contains Employee (n)
</PRE
><p class="para">Given this tiny specification language, we can, for example, automatically generate C and embedded SQL code to maintain database tables, as shown below:</P
><pre class="programlisting">    int create_employee_table {
        exec sql create table employee_table (
             employee_id integer,
             name varchar, salary float);
        return check_db_error();
    }
    int create_employee (employee *e) {
        if (!check_dept(e-&gt;dept)) 
            return 0;
        e-&gt;employee_id = ++g_employee_id;
        exec sql insert into table employee_table (
                 employee_id, name, salary) 
                 values (:*e);
        return check_db_error();
    }</PRE
><p class="para">The specification also provides enough information to generate code for creating C++ classes for each entity and for managing referential integrity constraints ("cannot delete a department object if it contains one or more employees").</P
><p class="para">Most CASE tools suffer from the restriction that they can generate only a fixed pattern of code. Buy an object-oriented database tomorrow, and the output code shown earlier doesn't help much. If this pattern is hardcoded, you are left with a mere diagramming tool (a mighty expensive one too).<a class="indexterm" name="ch17-idx-977825-0"></A
></P
></DD
><dt class="term">POD, Javadoc</DT
><dd class="listitem"><p class="para">The entire Perl documentation is written in a format called <a class="indexterm" name="ch17-idx-977968-0"></A
><a class="indexterm" name="ch17-idx-977968-1"></A
>POD (plain old documentation). It provides simple, high-level primitives for specifying paragraph styles (<kbd class="command">=head1</KBD
>, <kbd class="command">=item</KBD
>) and character styles (<kbd class="command">B&lt;foo&gt;</KBD
> prints the word in boldface, for example). The distribution comes with tools such as <em class="emphasis">pod2text</EM
>, <em class="emphasis">pod2html</EM
>, <em class="emphasis">pod2man</EM
>, and so on. POD documents can be embedded in code, and extracted by these tools (the Perl interpreter ignores these directives). This facility reduces the possibility of mismatches between code and documentation since they are all in one place.</P
><p class="para">Similarly, all Java libraries are documented using a format known as <a class="indexterm" name="ch17-idx-977827-0"></A
>Javadoc. The documentation is extracted and converted to HTML by a tool called <em class="emphasis">javadoc</EM
>.</P
><p class="para">Both sets of tools are limited to specific outputs (ASCII, HTML, and so on). For example, if you want to write a <em class="emphasis">pod2rtf</EM
> translator (Rich Text Format, used on Microsoft Windows systems), you have to start from scratch, because the POD parser is not available as a separate package. The better option would have been to centralize the POD parser and allow several different plug-and-play back ends.</P
></DD
><dt class="term">SWIG, XS</DT
><dd class="listitem"><p class="para">In <a class="xref" href="ch18_01.htm" title="Extending Perl:A First Course">Chapter 18, <cite class="chapter">Extending Perl:A First Course</CITE
></A
>, we will have occasion to study two tools called <a class="indexterm" name="ch17-idx-977828-0"></A
><a class="indexterm" name="ch17-idx-977828-1"></A
>SWIG and XS. Given an interface specification, they generate code to bind Perl and custom C extensions together. In fact, SWIG is a classic example of the type of code generators we would like to build: From one specification language, this tool is capable of producing a variety of output code, because its back end is template-driven.</P
></DD
></DL
><p class="para">In most of these cases, the demand for different types of output typically exceeds the number of changes made to the input specification format. We can make two observations as a consequence. First, parsing the input and producing the final output are related but separate tasks. Second, the output needs to be configurable. This can be arranged either by having one <em class="emphasis">parameterizable</EM
> output generator or by having a number of output generators that can be used interchangeably with the input parser. In my experience, the first option is not often practical. For example, it is pointless to write one output generator in the POD case, which can output HTML or ASCII or RTF just by tweaking a few parameters; they are very different sets of outputs.</P
><p class="para">The Jeeves framework goes for the second option. It helps you write a configurable translator by supplying a template-driven code-generating back end. This module allows you to write configurable templates with loops, if/then conditions, variables, and bits of Perl code, so it is no ordinary cookie-cutter cookie-cutter (otherwise, it might have been called <em class="emphasis">yacccc</EM
>).</P
><p class="para">An example serves to better explain this framework.<a class="indexterm" name="ch17-idx-977820-0"></A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch16_03.htm" title="16.3 Resources"><img src="../gifs/txtpreva.gif" alt="Previous: 16.3 Resources" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Advanced Perl Programming"><img src="../gifs/txthome.gif" alt="Advanced Perl Programming" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch17_02.htm" title="17.2 Jeeves Example"><img src="../gifs/txtnexta.gif" alt="Next: 17.2 Jeeves Example" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">16.3 Resources</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">17.2 Jeeves Example</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
