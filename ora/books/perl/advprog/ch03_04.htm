<html><head>
<title>[Chapter 3] 3.4 Filehandles, Directory Handles, and Formats</TITLE>
<meta name="DC.title" content="Advanced Perl Programming"><meta name="DC.creator" content="Sriram Srinivasan"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:31:34Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-220-4" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch03_01.htm" title="3. Typeglobs and Symbol Tables"><link rel="prev" href="ch03_03.htm#ch03-pgfId-950681" title="3.3 Typeglobs and References"><link rel="next" href="ch04_01.htm" title="4. Subroutine References and Closures"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Advanced Perl Programming" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,54" href="index.htm" alt="Advanced Perl Programming"><area shape="RECT" coords="467,0,514,18" href="../search/asrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch03_03.htm#ch03-pgfId-950681" title="3.3 Typeglobs and References"><img src="../gifs/txtpreva.gif" alt="Previous: 3.3 Typeglobs and References" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch03_01.htm" title="3. Typeglobs and Symbol Tables">Chapter 3<br>Typeglobs and Symbol Tables</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="chapter" href="ch04_01.htm" title="4. Subroutine References and Closures"><img src="../gifs/txtnexta.gif" alt="Next: 4. Subroutine References and Closures" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch03-16077">3.4 Filehandles, Directory Handles, and Formats</A
></H2
><p class="para"><a class="indexterm" name="ch03-idx-954086-0"></A
><a class="indexterm" name="ch03-idx-954086-1"></A
><a class="indexterm" name="ch03-idx-954086-2"></A
><a class="indexterm" name="ch03-idx-954086-3"></A
><a class="indexterm" name="ch03-idx-954086-4"></A
>The built-in functions <kbd class="command">open</KBD
> and <kbd class="command">opendir</KBD
> initialize a filehandle and a directory handle, respectively:</P
><pre class="programlisting">open(F, &quot;/home/calvin&quot;);
opendir (D, &quot;/usr&quot;);</PRE
><p class="para">The symbols <kbd class="command">F</KBD
> and <kbd class="command">D</KBD
> are user-defined identifiers, but without a prefix symbol. Unfortunately, these handles don't have some basic facilities enjoyed by the important data types such as scalars, arrays, and hashes&nbsp;- you cannot assign handles, and you cannot create local handles:[<a class="footnote" href="#ch03-pgfId-950974">4</A
>]</P
><blockquote class="footnote"><div class="footnote"><p class="para"><a class="footnote" name="ch03-pgfId-950974">[4]</A
> I don't know why filehandles didn't get a standard prefix symbol and the other features enjoyed by the other data types.</P
></DIV
></BLOCKQUOTE
><pre class="programlisting">local (G);   # invalid 
G = F;       # also invalid</PRE
><p class="para">Before we go further, it is important to know that the standard Perl distribution comes with a module called <a class="indexterm" name="ch03-idx-954087-0"></A
>FileHandle that provides an object-oriented version of filehandles. This allows you to create filehandle "objects," to assign one to the other, and to create them local to the block. Similarly, directory handles are handled by <a class="indexterm" name="ch03-idx-954088-0"></A
>DirHandle. Developers are now encouraged to use these facilities instead of the techniques described next. But you still need to wade through the next discussion because there is a large amount of freeware code in which you will see these constructs; in fact, the standard modules FileHandle, DirHandle, and <a class="indexterm" name="ch03-idx-954089-0"></A
>Symbol, as well as the entire IO hierarchy of modules, are built on this foundation.</P
><p class="para">Why is it so important to be able to assign handles and create local filehandles? Without assignment, you cannot pass filehandles as parameters to subroutines or maintain them in data structures. Without local filehandles, you cannot create recursive subroutines that open files (for processing included files, which themselves might include more, for example).</P
><p class="para">The simple answer to this solution is to use <a class="indexterm" name="ch03-idx-954090-0"></A
>typeglob assignment. That is, if you feel the urge to say,</P
><pre class="programlisting">G = F;
# or,
local(F);</PRE
><p class="para">you can write it instead in terms of typeglobs:</P
><pre class="programlisting">*G = *F;
# or, 
local (*F);</PRE
><p class="para">Similarly, if you want to store filehandles in data structures or create references to them, you use the corresponding typeglob. All I/O operators that require filehandles also accept typeglob references. Let us take a look at what we can do with assigning filehandles and localizing them (using typeglobs, of course).</P
><div class="sect2"><h3 class="sect2"><a class="title" name="ch03-pgfId-951085">3.4.1 I/O Redirection</A
></H3
><p class="para"><a class="indexterm" name="ch03-idx-954091-0"></A
><a class="indexterm" name="ch03-idx-954091-1"></A
>The following example shows how I/O can be simply redirected:</P
><pre class="programlisting">open(F, '&gt;/tmp/x') || die;
*STDOUT = *F;
print &quot;hello world\n&quot;;</PRE
><p class="para">The <kbd class="command">print</KBD
> function thinks it is sending the output to <kbd class="command">STDOUT</KBD
> but ends up sending it to the open file instead, because the typeglob associated with <kbd class="command">STDOUT</KBD
> has been aliased to <kbd class="command">F</KBD
>. If you want this redirection to be temporary, you can localize <kbd class="command">*STDOUT</KBD
>.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch03-pgfId-951093">3.4.2 Passing Filehandles to Subroutines</A
></H3
><p class="para"><a class="indexterm" name="ch03-idx-954092-0"></A
><a class="indexterm" name="ch03-idx-954092-1"></A
>The following piece of code passes a filehandle to a subroutine:</P
><pre class="programlisting">open (F, &quot;/tmp/sesame&quot;) || die $!;
read_and_print(*F);
sub read_and_print {
    local (*G) = @_;  # Filehandle G is the same as filehandle F
    while (&lt;G&gt;) { print; }
}</PRE
><p class="para">You might wonder why you don't need to do the same with <kbd class="command">open</KBD
>; after all it is a subroutine too and takes a filehandle as a parameter. Well, for built-in functions such as <kbd class="command">open</KBD
>, <kbd class="command">read</KBD
>, <kbd class="command">write</KBD
>, and <kbd class="command">readdir</KBD
>, Perl automatically passes the typeglob of that symbol (instead of a string called "F", for example).</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch03-pgfId-946637">3.4.3 Localizing Filehandles</A
></H3
><p class="para"><a class="indexterm" name="ch03-idx-954093-0"></A
><a class="indexterm" name="ch03-idx-954093-1"></A
>Let us look at a subroutine that traverses include declarations in C header files. The subroutine shown next, <kbd class="command">ProcessFile</KBD
>, looks at each line of a file and, if it matches a <em class="emphasis">#include</EM
> declaration, extracts the filename and calls itself recursively. Since it has more lines to process in the original file, it cannot <kbd class="command">close</KBD
> the filehandle <kbd class="command">F</KBD
>. If <kbd class="command">F</KBD
> is global, it cannot be reused to open another file, so we use <kbd class="command">local(*F)</KBD
> to localize it. That way, each recursive invocation of <code class="literal">ProcessFile</CODE
> gets its own unique filehandle value. </P
><pre class="programlisting">sub ProcessFile {
    my ($filename) = @_;
    my ($line);
    <b class="emphasis.bold">local (*F);</B
>           # Save old value of typeglob, (which means
                          # its filehandles, among other things)
    open (F, $filename) || return; 
    while ($line = &lt;F&gt;) {
      # same as before
      ........
    }
    close(F);
}</PRE
><p class="para">Although we have not studied packages, it might be worth it to see how we could have used the <a class="indexterm" name="ch03-idx-954098-0"></A
>FileHandle module in this case:</P
><pre class="programlisting">use FileHandle;
sub ProcessFile {
    my ($filename) = @_;
    my ($line);
    <b class="emphasis.bold">my $fh = new FileHandle;</B
> # Create local filehandle
    open (<b class="emphasis.bold">$fh</B
>, $filename) || return; 
    while ($line = &lt;<b class="emphasis.bold">$fh</B
>&gt;) {
      ........
    }
    close(<b class="emphasis.bold">$fh</B
>);
}</PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch03-pgfId-946639">3.4.4 Strings as Handles</A
></H3
><p class="para"><a class="indexterm" name="ch03-idx-954094-0"></A
>It so happens that typeglobs and objects of the FileHandle module are not the only solution. All Perl I/O functions that accept a handle also happen to accept a string instead. Consider</P
><pre class="programlisting">$fh = &quot;foo&quot;;
open ($fh, &quot;&lt; /home/snoopy&quot;) ;
read ($fh, $buf, 1000);</PRE
><p class="para">When <kbd class="command">open</KBD
> examines its parameters, it finds a string where a typeglob should have been. In this case, it automatically creates a typeglob of that name and then proceeds as before. Similarly, when <kbd class="command">read</KBD
> gets a string instead of a typeglob, it looks up the corresponding typeglob from the symbol table, and then the internal filehandle, and proceeds to read the appropriate file.<kbd class="command"> </KBD
>This extra lookup is slightly slower than using a bareword symbol, but the time taken is insignificant if you do the I/O in reasonably large chunks (the optimal size varies from system to system).<a class="indexterm" name="ch03-idx-954096-0"></A
><a class="indexterm" name="ch03-idx-954096-1"></A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch03_03.htm#ch03-pgfId-950681" title="3.3 Typeglobs and References"><img src="../gifs/txtpreva.gif" alt="Previous: 3.3 Typeglobs and References" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Advanced Perl Programming"><img src="../gifs/txthome.gif" alt="Advanced Perl Programming" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="chapter" href="ch04_01.htm" title="4. Subroutine References and Closures"><img src="../gifs/txtnexta.gif" alt="Next: 4. Subroutine References and Closures" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">3.3 Typeglobs and References</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">4. Subroutine References and Closures</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
