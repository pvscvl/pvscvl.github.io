<html><head>
<title>[Chapter 19] 19.3 Examples</TITLE>
<meta name="DC.title" content="Advanced Perl Programming"><meta name="DC.creator" content="Sriram Srinivasan"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:40:39Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-220-4" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch19_01.htm" title="19. Embedding Perl:The Easy Way"><link rel="prev" href="ch19_02.htm" title="19.2 Embedding Overview"><link rel="next" href="ch19_04.htm" title="19.4 Adding Extensions"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Advanced Perl Programming" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,54" href="index.htm" alt="Advanced Perl Programming"><area shape="RECT" coords="467,0,514,18" href="../search/asrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch19_02.htm" title="19.2 Embedding Overview"><img src="../gifs/txtpreva.gif" alt="Previous: 19.2 Embedding Overview" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch19_01.htm" title="19. Embedding Perl:The Easy Way">Chapter 19<br>Embedding Perl:The Easy Way</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch19_04.htm" title="19.4 Adding Extensions"><img src="../gifs/txtnexta.gif" alt="Next: 19.4 Adding Extensions" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch19-24581">19.3 Examples</A
></H2
><p class="para"><a class="indexterm" name="ch19-idx-969760-0"></A
>Let us now write some code to see this API in action. Suppose you have a Perl script, <em class="emphasis">search.pl</EM
>, containing subroutine <kbd class="command">search_files</KBD
><a class="indexterm" name="ch19-idx-969768-0"></A
>, defined in <a class="xref" href="#ch19-11898" title="search.pl">Example 19.1</A
>. </P
><div class="example"><h4 class="example"><a class="title" name="ch19-11898">Example 19.1: search.pl</A
></H4
><pre class="programlisting"># search_files - a simple grep. Called as ...
#    search_files (&quot;struct&quot;, &quot;*.h&quot;)
sub search_files {
    my ($pattern, $filepattern) = @_;
    local (@ARGV) = glob($filepattern);
    return unless (@ARGV);
    while (&lt;&gt;) {       # Can do this because @ARGV has been primed
        if (/$pattern/o) {
            print &quot;$ARGV\[$.\]: $_&quot;; # File, line number, match line
        }
    }
}</PRE
></DIV
><p class="para"><kbd class="command">search_files</KBD
> takes two string parameters and returns nothing. There are several ways of calling this procedure from C. Let's start with <kbd class="command">perl_call_argv()</KBD
><a class="indexterm" name="ch19-idx-969774-0"></A
>, since it takes string arguments. The piece of code in <a class="xref" href="#ch19-25878" title="ex.c: Embedding Perl">Example 19.2</A
> searches for the word "struct" in all C header files.</P
><div class="example"><h4 class="example"><a class="title" name="ch19-25878">Example 19.2: ex.c: Embedding Perl</A
></H4
><pre class="programlisting">#include &lt;EXTERN.h&gt;
#include &lt;perl.h&gt;
static PerlInterpreter *my_perl;  
main(int argc, char **argv, char **env) {
<b class="emphasis.bold">    char *my_argv[] = {&quot;struct&quot;, &quot;*.h&quot;, NULL};</B
>
    my_perl = perl_alloc();
    perl_construct(my_perl);
    perl_parse(my_perl, NULL, argc, argv, env);

    <b class="emphasis.bold">perl_call_argv(&quot;search_files&quot;, G_DISCARD, my_argv);</B
>

perl_destruct(my_perl);
perl_free(my_perl);
}</PRE
></DIV
><p class="para">By passing <kbd class="command">NULL</KBD
> instead of <kbd class="command">xs_init</KBD
>, we indicate to <kbd class="command">perl_parse</KBD
><a class="indexterm" name="ch19-idx-969783-0"></A
> that we are not interested in loading any extensions. In addition, instead of calling <kbd class="command">perl_run</KBD
>, we call <kbd class="command">search_files</KBD
> using <kbd class="command">perl_call_argv</KBD
> (with the <kbd class="command">G_DISCARD</KBD
> flag to tell it to discard all returned results). This is how I compile and link this code on a Linux box:[<a class="footnote" href="#ch19-pgfId-968633">3</A
>]<pre class="programlisting"><b class="emphasis.bold">% </B
>gcc -o ex -I/usr/local/lib/perl5/i586-linux/5.004/CORE \
            -L/usr/local/lib/perl5/i586-linux/5.004/CORE \
            -Dbool=char -DHAS_BOOL                       \
         ex.c -lperl -lm</PRE
></P
><blockquote class="footnote"><div class="footnote"><p class="para"><a class="footnote" name="ch19-pgfId-968633">[3]</A
> You don't have to remember or look up the include and library directory paths. The last section in this chapter discusses a module called ExtUtils::Embed that makes creating embedded interpreters a snap.</P
></DIV
></BLOCKQUOTE
><p class="para">We have created our first custom Perl interpreter. Since <code class="literal">perl_parse</CODE
> is given all the command-line arguments, <i class="filename">ex</I
> can be invoked just like Perl, as shown:</P
><pre class="programlisting"><b class="emphasis.bold">% ex search.pl</B
></PRE
><p class="para">This outputs something like this (when invoked in the Perl source directory):</P
><pre class="programlisting">av.h[10]: struct xpvav {
cop.h[58]: struct cop {
cop.h[60]:     char *   cop_label;      /* label for this construct */
cop.h[75]: struct block_sub {
cop.h[98]:      { struct block_sub cxsub;
...</PRE
><p class="para">We need to give the name of the script as an argument because <kbd class="command">perl_parse</KBD
> is given the command-line arguments untranslated.</P
><p class="para">Instead of using <kbd class="command">perl_call_argv</KBD
>, we could have used the other two calls instead, as follows:</P
><pre class="programlisting"><a class="indexterm" name="ch19-idx-969784-0"></A
>perl_eval_va(&quot;search_files (qw(struct *.h))&quot;,
              NULL);           // No return parameters </PRE
><p class="para">or</P
><pre class="programlisting"><a class="indexterm" name="ch19-idx-969785-0"></A
>perl_call_va (&quot;search_files&quot;, 
              &quot;s&quot;, &quot;struct&quot;,    // First parameter of type string
              &quot;s&quot;, &quot;*.h&quot;,       // Second parameter also of type string
              NULL);</PRE
><p class="para">Clearly, the <kbd class="command">perl_eval_va</KBD
> approach is the easiest of the lot in this particular example. Incidentally, did you notice how we used the <kbd class="command">qw</KBD
> operator to avoid embedded quotes?</P
><p class="para">Let us now take a look at another small example that requires us to pass in a mixture of parameter types. This time we call a Perl subroutine, <kbd class="command">nice_number</KBD
>, to insert commas into big numbers (1000000 is formatted as "1,000,000"). The subroutine, shown below, interposes a comma whenever it sees a group of four consecutive digits, and continues to do so until it no longer matches this pattern. To test this subroutine, we use an additional subroutine called <kbd class="command">test_nice</KBD
>, which, given a number <em class="emphasis">n</EM
>, generates an <em class="emphasis">n</EM
>-digit number composed of 1's and feeds it to nice_number:</P
><pre class="programlisting">sub nice_number {
    my $num = shift;
    1 while ($num =~ s/(.*\d)(\d\d\d)/$1,$2/g);
    $num;
}
sub test_nice {                   # test_nice(4) produces 1,111
    my $len = shift; 
    nice_number(1 x $len);
}</PRE
><p class="para">Instead of putting this code into a file and parsing it using <kbd class="command">perl_parse</KBD
> (as we did earlier), we use <kbd class="command">perl_eval_va</KBD
> to parse and load this subroutine. It so happens that <kbd class="command">perl_parse</KBD
> does some crucial initializations, so we <em class="emphasis">have</EM
> to call it.[<a class="footnote" href="#ch19-pgfId-966014">4</A
>] If we give it a null <kbd class="command">argc</KBD
>/<kbd class="command">argv</KBD
> array, it has the unfortunate property of waiting on standard input, as you normally expect Perl to do. For this reason, we give it the shortest possible script that compiles cleanly and doesn't take any time to finish, as shown in the following command line:<pre class="programlisting">perl -e 0</PRE
></P
><blockquote class="footnote"><div class="footnote"><p class="para"><a class="footnote" name="ch19-pgfId-966014">[4]</A
> In fact, <kbd class="command">perl_parse</KBD
> should be called at most once, because it reinitializes the interpreter without checking that it has already been done.</P
></DIV
></BLOCKQUOTE
><p class="para">The only way to have a shorter script is to reduce the font size! Note the call to <kbd class="command">perl_parse</KBD
> in <a class="xref" href="#ch19-26409" title="ex2.c: Embedding Perl">Example 19.3</A
>. </P
><div class="example"><h4 class="example"><a class="title" name="ch19-26409">Example 19.3: ex2.c: Embedding Perl</A
></H4
><pre class="programlisting">#include &lt;EXTERN.h&gt;
#include &lt;perl.h&gt;
static PerlInterpreter *my_perl;  
main() {
    static char *dummy_argv[] = {&quot;&quot;,&quot;-e&quot;,&quot;0&quot;}; int num;
    my_perl = perl_alloc();
    perl_construct(my_perl);

    perl_parse(my_perl, NULL, 3, dummy_argv, env);

    if (perl_eval_va (                         # define code inline
                  &quot;sub main::nice_number {&quot;
                      &quot;my $num = shift;&quot;
                      &quot;1 while ($num =~ s/(.*\\d)(\\d\\d\\d)/$1,$2/g);&quot;
                      &quot;$num;&quot;
                 &quot;}&quot;
                 &quot;sub main::test_nice {&quot;
                     &quot;my $num = shift;&quot;
                     &quot;nice_number (1 x $num);&quot;
                 &quot;}&quot;, 
                 NULL ) == -1) {
            fprintf (stderr, &quot;Eval unsuccessful. Aborted\n&quot;);
            exit(1);
    }
    # Subroutines defined. Now call test_nice
    for (num = 1; num &lt;= 7; num++) {
        char buf[20];
        *buf = '\0';
        perl_call_va (&quot;test_nice&quot;,
                      &quot;i&quot;,  num,        /* Input parameters */
                      &quot;OUT&quot;,
                      &quot;s&quot;,  buf,        /* Output parameter */
                      NULL);            /* Don't forget this! */
        printf (&quot;%d: %s\n&quot;, num, buf);
    }
    perl_close();
}</PRE
></DIV
><p class="para">This prints</P
><pre class="programlisting">1: 1
2: 11
3: 111
4: 1,111
5: 11,111
6: 111,111<kbd class="command"></KBD
><a class="indexterm" name="ch19-idx-969771-0"></A
>
7: 1,111,111<a class="indexterm" name="ch19-idx-969763-0"></A
><a class="indexterm" name="ch19-idx-969763-1"></A
></PRE
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch19_02.htm" title="19.2 Embedding Overview"><img src="../gifs/txtpreva.gif" alt="Previous: 19.2 Embedding Overview" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Advanced Perl Programming"><img src="../gifs/txthome.gif" alt="Advanced Perl Programming" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch19_04.htm" title="19.4 Adding Extensions"><img src="../gifs/txtnexta.gif" alt="Next: 19.4 Adding Extensions" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">19.2 Embedding Overview</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">19.4 Adding Extensions</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
