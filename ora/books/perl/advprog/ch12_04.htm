<html><head>
<title>[Chapter 12] 12.4 Real-World Servers</TITLE>
<meta name="DC.title" content="Advanced Perl Programming"><meta name="DC.creator" content="Sriram Srinivasan"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:37:04Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-220-4" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch12_01.htm" title="12. Networking with Sockets"><link rel="prev" href="ch12_03.htm#ch12-pgfId-973651" title="12.3 Handling Multiple Clients"><link rel="next" href="ch12_05.htm" title="12.5 IO Objects and Filehandles"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Advanced Perl Programming" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,54" href="index.htm" alt="Advanced Perl Programming"><area shape="RECT" coords="467,0,514,18" href="../search/asrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch12_03.htm#ch12-pgfId-973651" title="12.3 Handling Multiple Clients"><img src="../gifs/txtpreva.gif" alt="Previous: 12.3 Handling Multiple Clients" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch12_01.htm" title="12. Networking with Sockets">Chapter 12<br>Networking with Sockets</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch12_05.htm" title="12.5 IO Objects and Filehandles"><img src="../gifs/txtnexta.gif" alt="Next: 12.5 IO Objects and Filehandles" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch12-17885">12.4 Real-World Servers</A
></H2
><p class="para"><a class="indexterm" name="ch12-idx-978614-0"></A
><a class="indexterm" name="ch12-idx-978614-1"></A
><a class="indexterm" name="ch12-idx-978614-2"></A
><a class="indexterm" name="ch12-idx-978614-3"></A
><a class="indexterm" name="ch12-idx-978614-4"></A
>Single-threaded servers are essentially event-driven&nbsp;- they execute in response to a time-out or an I/O event. They typically don't spend much CPU time for a given request, because they need to get back to <kbd class="command">select</KBD
> to service other events that might have queued up in the meantime. Most production single-threaded servers also use nonblocking filehandles (combining the second and third options listed in the section <a class="xref" href="ch12_03.htm#ch12-pgfId-973651" title="Handling Multiple Clients">"Handling Multiple Clients</A
>"). In the next chapter, we will build a small message-passing library using these techniques. The advantage of using single-threading is that frequent short-cycle requests are handled with very little overhead. In addition, data structures can easily be shared between all parallel conversations or cached for future conversations. A chat server, for example, benefits most from such an architecture.</P
><p class="para">The multiprocess solution is chosen when the server cannot guarantee how long a given request is going to take. Web servers follow this approach and simply spawn a CGI (Common Gateway Interface) program to handle the conversation with the corresponding web browser on the other end. Nowadays, the trend is to handle quick tasks in the web server itself and spawn programs only when the task might hold up the entire server. Of course, the problem is that spawning processes is expensive, so a popular option is to prespawn a fixed number of processes and hand the task to them whenever a request comes in. Clearly, if there are many more sockets than there are prespawned processes, the parent has no option but to use <kbd class="command">select</KBD
> to multiplex between them. As you can see, the options described in the previous section are by no means independent of each other. </P
><p class="para"><a class="indexterm" name="ch12-idx-978615-0"></A
>Multithreading is an option if the environment supports it (Perl doesn't yet). Java is enthusiastic about this approach and expects a thread to block on I/O calls; in fact, it doesn't even provide an interface to <kbd class="command">select</KBD
>. The advantage of this approach is that it is much more lightweight in comparison to the multiprocess version. In addition, you get parallelism <em class="emphasis">and</EM
> data sharing. The disadvantage is that typical workstations tend to perform badly if you introduce, say, 40 or more kernel level threads, so they can support only a limited number of concurrent clients. Threads on Solaris are better off, because they make a distinction between lightweight, user-level threads and kernel threads. In any case, this is not an option currently available to a Perl programmer, so the discussion is moot. </P
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch12_03.htm#ch12-pgfId-973651" title="12.3 Handling Multiple Clients"><img src="../gifs/txtpreva.gif" alt="Previous: 12.3 Handling Multiple Clients" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Advanced Perl Programming"><img src="../gifs/txthome.gif" alt="Advanced Perl Programming" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch12_05.htm" title="12.5 IO Objects and Filehandles"><img src="../gifs/txtnexta.gif" alt="Next: 12.5 IO Objects and Filehandles" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">12.3 Handling Multiple Clients</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">12.5 IO Objects and Filehandles</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
