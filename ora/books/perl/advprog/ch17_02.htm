<html><head>
<title>[Chapter 17] 17.2 Jeeves Example</TITLE>
<meta name="DC.title" content="Advanced Perl Programming"><meta name="DC.creator" content="Sriram Srinivasan"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:39:45Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-220-4" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch17_01.htm" title="17. Template-Driven Code Generation"><link rel="prev" href="ch17_01.htm" title="17.1 On Code Generation"><link rel="next" href="ch17_03.htm" title="17.3 Jeeves Overview"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Advanced Perl Programming" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,54" href="index.htm" alt="Advanced Perl Programming"><area shape="RECT" coords="467,0,514,18" href="../search/asrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch17_01.htm" title="17.1 On Code Generation"><img src="../gifs/txtpreva.gif" alt="Previous: 17.1 On Code Generation" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch17_01.htm" title="17. Template-Driven Code Generation">Chapter 17<br>Template-Driven Code Generation</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch17_03.htm" title="17.3 Jeeves Overview"><img src="../gifs/txtnexta.gif" alt="Next: 17.3 Jeeves Overview" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch17-22091">17.2 Jeeves Example</A
></H2
><p class="para"><a class="indexterm" name="ch17-idx-977829-0"></A
><a class="indexterm" name="ch17-idx-977829-1"></A
>We will consider a very simple object model specification file consisting of a list of classes, each of which contains a list of typed attributes:</P
><pre class="programlisting">// File: emp.om (om stands for object model)
class Employee { 
    int         id;
    string      name;
    int         dept_id;
};
class Department { 
    int    id;
    string name;
};</PRE
><p class="para">From this specification, we wish to produce a C++ header file for each class. Assume, for example, that the file <i class="filename">Employee.h</I
> is expected to look like this (and similarly for <i class="filename">Department.h</I
>):</P
><pre class="programlisting">#ifndef _Employee_h_
#define _Employee_h_
#include &lt;Object.h&gt;
// File : 'Employee.h'
// User : &quot;sriram&quot;
class Employee : Object {
   int id;
   string name;
   int dept_id;
   Employee(); // private constructor. Use Create()
public:
   // Methods
   Employee* Create();
    ~Employee();
   // Accessor Methods;
   int   get_id();
   void set_id(int);
   string   get_name();
   void set_name(string);
   int   get_dept_id();
   void set_dept_id(int);
}
#endif</PRE
><p class="para">Instead of succumbing to the temptation of writing a throwaway script to handle this specific job, we use Jeeves. This approach has three steps:</P
><ol class="orderedlist"><li class="listitem"><p class="para"><a class="listitem" name="ch17-pgfId-968059"></A
>Write a parser module for the object specification.</P
></LI
><li class="listitem"><p class="para"><a class="listitem" name="ch17-pgfId-968060"></A
>Write a template to create the output required.</P
></LI
><li class="listitem"><p class="para"><a class="listitem" name="ch17-pgfId-972057"></A
>Invoke Jeeves with the name of the specification parser, the template file, and the example specification file.</P
></LI
></OL
><p class="para">This approach forces you to separate the parsing and output stages into two different modules. You might think it is simpler to write a throwaway script, but that's not quite true: you still have the problem of parsing the specification and producing the output. If you play by Jeeves's rules, you can take advantage of its template-processing facility. Jeeves expects the parser to boil the specification down to a data structure known as an <em class="emphasis">abstract syntax tree</EM
><a class="indexterm" name="ch17-idx-977842-0"></A
><a class="indexterm" name="ch17-idx-977842-1"></A
><a class="indexterm" name="ch17-idx-977842-2"></A
> (AST). Jeeves does not help you with parsing; after all, how can it know about a language we randomly cooked up not too long ago?</P
><p class="para">The syntax tree is a simple hierarchical arrangement of properties and property lists and is shown in <a class="xref" href="#ch17-26708" title="Example syntax tree">Figure 17.1</A
> for our example problem. Shaded boxes represent AST nodes, and outer boxes represent collections of these nodes (vector properties). Each node in this syntax tree has one or more properties (or name-value pairs). A property value is either a scalar (<em class="emphasis">class_name</EM
>, <em class="emphasis">attr_name</EM
>, <em class="emphasis">attr_type</EM
>) or a vector of other nodes (<em class="emphasis">attr_list</EM
> and <em class="emphasis">class_list</EM
>). As currently implemented, Jeeves does not expect nodes to contain any other type of values (references to other types of arrays, or to hashes, for example).</P
><h4 class="figure"><a class="title" name="ch17-26708">Figure 17.1: Example syntax tree</A
></H4
><img class="graphic" src="figs/wpa_1701.gif" alt="Figure 17.1"><p class="para">To get a quick overview of the Jeeves process, we will assume for now that the <a class="indexterm" name="ch17-idx-977859-0"></A
><a class="indexterm" name="ch17-idx-977859-1"></A
><a class="indexterm" name="ch17-idx-977859-2"></A
>input specification parser has already been written and is capable of producing the syntax tree in <a class="xref" href="#ch17-26708" title="Example syntax tree">Figure 17.1</A
>. The implementation is explained later, in the section <a class="xref" href="ch17_05.htm" title="Sample Specification Parser">"Sample Specification Parser</A
>."<a class="indexterm" name="ch17-idx-977844-0"></A
><a class="indexterm" name="ch17-idx-977844-1"></A
><a class="indexterm" name="ch17-idx-977844-2"></A
></P
><p class="para">The next step is to write a <a class="indexterm" name="ch17-idx-977846-0"></A
>template file (call it <i class="filename">oo.tpl</I
>) to output the requested files. Jeeves allows you to use the properties in the syntax tree as variables and provides keywords to iterate through vector properties. The template in <a class="xref" href="#ch17-29701" title="oo.tpl: Template File">Example 17.1</A
> produces the two files in one fell swoop.</P
><div class="example"><h4 class="example"><a class="title" name="ch17-29701">Example 17.1: oo.tpl: Template File</A
></H4
><pre class="programlisting"><b class="emphasis.bold">&#13;@foreach class_list          </B
>
@//------------------------------------------------------------------
@// Note: we are opening a new &quot;.h&quot; file within the foreach above ...<b class="emphasis.bold">&#13;  @openfile ${class_name}.h </B
>
#ifndef _${class_name}_h_
#define _${class_name}_h_
#include &lt;Object.h&gt;<b class="emphasis.bold">&#13;  @perl $user = $ENV{&quot;USER&quot;};</B
>
// File : '${class_name}.h'
// User : &quot;$user&quot;
class $class_name : Object {<b class="emphasis.bold">&#13;  @foreach attr_list</B
>
   $attr_type $attr_name;<b class="emphasis.bold">&#13;  @end </B
>
   $class_name(); // private constructor. Use Create()
public:
   // Methods
   $class_name* Create();
    ~$class_name();
   // Accessor Methods;<b class="emphasis.bold">&#13;  @foreach attr_list</B
>
   $attr_type   get_${attr_name}();
   void set_${attr_name}($attr_type);<b class="emphasis.bold">&#13;  @end .. attr_list</B
>
}
#endif<b class="emphasis.bold">&#13;@end .. class_list</B
></PRE
></DIV
><p class="para">The template file contains a mixture of control statements (the highlighted lines starting with <kbd class="command">@</KBD
>), attributes (indicated by <em class="emphasis">$varname</EM
>), and ordinary text. The highlighted lines are indented to indicate nesting of control structures. Ordinary text is simply output after variable interpolations, and whitespace is faithfully preserved. </P
><p class="para">It is important for the template writer to know the kind of syntax tree that is being produced by the input parser and the set of properties at each type of node. In the preceding example, the template writer has to know that the list of classes is known as <kbd class="command">class_list</KBD
>, each element of which has properties such as <kbd class="command">class_name</KBD
> and <kbd class="command">attr_list</KBD
>.</P
><p class="para">Ordinarily, a line in the template is simply interpolated (all scalar variables are expanded <i class="foreignphrase">in situ</I
>) and written to the file last opened by the <kbd class="command">@openfile</KBD
> construct. If the line belongs inside an <kbd class="command">@foreach</KBD
> ... <kbd class="command">@end</KBD
> block, it gets interpolated and written several times. The <kbd class="command">@foreach</KBD
> block iterates through a list-valued property in the syntax tree and makes the properties of the <em class="emphasis">current</EM
> AST node available as global variables. For example, <kbd class="command">@foreach</KBD
> <kbd class="command">class_list</KBD
> "visits" each node pointed to by the <em class="emphasis">class_list</EM
> property and makes the variables <kbd class="command">$class_name</KBD
> and <kbd class="command">$attr_list</KBD
> (refer to <a class="xref" href="#ch17-26708" title="Example syntax tree">Figure 17.1</A
>) available for the text following the <kbd class="command">@foreach</KBD
> directive. In the sample template shown earlier, because <kbd class="command">@open_file</KBD
> is within such a block and uses the variable <kbd class="command">$class_name</KBD
> for the filename, the template produces a new file during each iteration. Ordinary template lines are simply funneled into the currently open file. The <kbd class="command">@perl</KBD
> command allows you to intersperse Perl code when the built-in primitives don't quite cut it. We'll cover some more template directives when we discuss the template parser implementation.</P
><p class="para">Having written the object model specification parser, <i class="filename">OO_Schema.pm</I
>, the template <i class="filename">oo.tpl</I
>, and our example specification, <i class="filename">emp.om</I
>, we invoke Jeeves as follows:</P
><pre class="programlisting">% <b class="emphasis.bold">jeeves -s OO_Schema -t oo.tpl emp.om</B
>
Translated oo.tpl to oo.tpl.pl
Parsed emp.om
<b class="emphasis.bold">% ls *.h</B
>
Department.h Employee.h</PRE
><p class="para">This template is now capable of generating C++ code for any class in your specification. One small change in the template can be instantly reflected in all pieces of code.<a class="indexterm" name="ch17-idx-977848-0"></A
></P
><div class="sect2"><h3 class="sect2"><a class="title" name="ch17-pgfId-967145">17.2.1 Oh, and Can You Do This Too?</A
></H3
><p class="para"><a class="indexterm" name="ch17-idx-977933-0"></A
><a class="indexterm" name="ch17-idx-977933-1"></A
>As soon as you finish doing this and are ready to go home, your remarkably prescient boss comes in and asks you to generate one more file: an SQL script to create the corresponding relational database schema. The script, <em class="emphasis">db.sql</EM
>, is expected to look like this:</P
><pre class="programlisting">create table Employee (
     id      integer,
     name    varchar,
     dept_id integer,
)
create table Department (
     id      integer,
     name    varchar,
)</PRE
><p class="para">Luckily, the Jeeves template makes this a two-minute task. Just create one more template file (or add the piece in <a class="xref" href="#ch17-37773" title="sql.tpl: Template File to Create a Relational Database Schema">Example 17.2</A
> to the earlier template).</P
><div class="example"><h4 class="example"><a class="title" name="ch17-37773">Example 17.2: sql.tpl: Template File to Create a Relational Database Schema</A
></H4
><pre class="programlisting"><b class="emphasis.bold">&#13;@openfile db.sql </B
><b class="emphasis.bold">&#13;@perl %db_typemap = (&quot;int&quot; =&gt; 'integer', string =&gt; 'varchar');</B
>
create table $class_name (<b class="emphasis.bold">&#13;  @foreach attr_list</B
><b class="emphasis.bold">&#13;    @perl my $db_type = $db_typemap{$attr_type};</B
>
     $attr_name $db_type,<b class="emphasis.bold">&#13;  @end</B
>
)<b class="emphasis.bold">&#13;@end .. class_list</B
></PRE
></DIV
><p class="para">The template maps each attribute's type to the corresponding SQL datatype, using a snippet of Perl code. </P
><p class="para">As you can see, this architecture allows us to reuse specification parsers; we have used the information generated by the parser to fashion a completely different output.<a class="indexterm" name="ch17-idx-977835-0"></A
><a class="indexterm" name="ch17-idx-977835-1"></A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch17_01.htm" title="17.1 On Code Generation"><img src="../gifs/txtpreva.gif" alt="Previous: 17.1 On Code Generation" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Advanced Perl Programming"><img src="../gifs/txthome.gif" alt="Advanced Perl Programming" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch17_03.htm" title="17.3 Jeeves Overview"><img src="../gifs/txtnexta.gif" alt="Next: 17.3 Jeeves Overview" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">17.1 On Code Generation</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">17.3 Jeeves Overview</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
