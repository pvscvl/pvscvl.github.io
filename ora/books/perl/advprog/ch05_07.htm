<html><head>
<title>[Chapter 5] 5.7 Eval in Other Languages</TITLE>
<meta name="DC.title" content="Advanced Perl Programming"><meta name="DC.creator" content="Sriram Srinivasan"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:32:48Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-220-4" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch05_01.htm" title="5. Eval"><link rel="prev" href="ch05_06.htm" title="5.6 Using Eval for Time-Outs"><link rel="next" href="ch05_08.htm" title="5.8 Resources"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Advanced Perl Programming" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,54" href="index.htm" alt="Advanced Perl Programming"><area shape="RECT" coords="467,0,514,18" href="../search/asrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch05_06.htm" title="5.6 Using Eval for Time-Outs"><img src="../gifs/txtpreva.gif" alt="Previous: 5.6 Using Eval for Time-Outs" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch05_01.htm" title="5. Eval">Chapter 5<br>Eval</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch05_08.htm" title="5.8 Resources"><img src="../gifs/txtnexta.gif" alt="Next: 5.8 Resources" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch05-11955">5.7 Eval in Other Languages</A
></H2
><p class="para"><a class="indexterm" name="ch05-idx-951206-0"></A
><a class="indexterm" name="ch05-idx-951206-1"></A
><a class="indexterm" name="ch05-idx-951206-2"></A
>Let's find out what other languages have by way of run-time evaluation and exception handling. </P
><div class="sect2"><h3 class="sect2"><a class="title" name="ch05-pgfId-946852">5.7.1 Tcl (Tool Command Language)</A
></H3
><p class="para">The <a class="indexterm" name="ch05-idx-951271-0"></A
>Tcl interpreter follows the typical shell syntax: each statement is a command followed by a bunch of arguments. If the command is known at compile-time, it generates byte-codes and executes it subsequently, but if it is a variable, the interpreter waits until run-time to compile and execute that statement. (Earlier versions of Tcl always treated the program as strings and parsed a statement every time it was hit, even if it was within a loop. As this book goes to press, the Tcl interpreter has just recently taken some steps toward becoming a byte-code interpreter.) Tcl supports a user-level <kbd class="command">eval</KBD
> call, which recursively calls the parser and interprets the contents of the string as a command followed by a bunch of parameters. </P
><p class="para">For error handling, Tcl provides the <kbd class="command">error</KBD
> and <kbd class="command">catch</KBD
> statements, equivalent to <kbd class="command">die</KBD
> and <kbd class="command">eval</KBD
> in Perl.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch05-pgfId-943591">5.7.2 Python</A
></H3
><p class="para"><a class="indexterm" name="ch05-idx-951273-0"></A
>Python's <kbd class="command">eval</KBD
> function allows a string to be evaluated and executed, but the string cannot contain newlines. An <kbd class="command">exec</KBD
> statement allows newlines, but since Python relies on leading whitespace instead of an explicit block structure, it is important that you get the whitespace correct in a dynamically constructed string to be given to <kbd class="command">exec</KBD
>. This is quite a bit more painful than getting the block scoping right in Perl.</P
><p class="para">Python goes through a compilation and execution stage similar to Perl, and for every module called <em class="emphasis">module.py</EM
>, it stores the intermediate byte codes in a file called <em class="emphasis">module.pyc</EM
>. The next time the module is used, the intermediate byte code file is automatically picked up. Perl is likely to see this kind of facility in the near future, considering that Malcolm Beattie's Perl compiler is in the alpha stage as of this writing.</P
><p class="para">For exception handling, Python supports the notion of exception classes as part of the language, like Java and C++. You raise exceptions with <kbd class="command">raise</KBD
> and trap them with a <kbd class="command">try</KBD
>/<kbd class="command">except</KBD
>/<kbd class="command">finally</KBD
> syntax. (<kbd class="command">try</KBD
> and <kbd class="command">except</KBD
> are equivalent to the <kbd class="command">eval</KBD
> <kbd class="command">BLOCK</KBD
> form. The <kbd class="command">finally</KBD
> keyword indicates a default <kbd class="command">except</KBD
> block that is invoked if none of the other <kbd class="command">except</KBD
> statements is able to trap the exception.) I especially like how the interpreter and the Python library make consistent use of this facility.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch05-pgfId-943598">5.7.3 C / C++</A
></H3
><p class="para"><a class="indexterm" name="ch05-idx-951296-0"></A
>There is no run-time evaluation, but there are a number of public domain and commercial interpreters that can be linked in with your C application to support C or C++-like interpreted languages. Look for C-Interp or XCoral in the free compilers list available from <a class="systemitem.url" href="../../../../../../../www.idiom.com/free-compilers">http://www.idiom.com/free-compilers</A
>.</P
><p class="para">C has no keywords for exception handling. C++ has a <code class="literal">try/catch/throw</CODE
> syntax identical to Java's. Exceptions can be user-defined objects and can have their own private data as well as behavior.<a class="indexterm" name="ch05-idx-951289-0"></A
><a class="indexterm" name="ch05-idx-951289-1"></A
><a class="indexterm" name="ch05-idx-951289-2"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch05-pgfId-951327">5.7.4 Java</A
></H3
><p class="para"><a class="indexterm" name="ch05-idx-951328-0"></A
>Java goes through the same two phases as Perl: (1) compilation to an intermediate byte-code form, and (2) execution of this intermediate code. What it doesn't allow, however, is the production and evaluation of <em class="emphasis">new</EM
> code on the fly. There is really no reason why this isn't technically feasible, because the <kbd class="command">javac</KBD
> compiler itself is written in Java, and it should be possible to package it as a library instead of a standalone program without violating new security constraints.</P
><p class="para">For error handling, Java has a <code class="literal">try/catch</CODE
> syntax that is equivalent to the <kbd class="command">eval BLOCK</KBD
> approach in Perl, in that all the code is known at compile-time. Exceptions are true first-class objects in Java, so you can discriminate between them much better than the string comparison required in Perl. Java has the <code class="literal">throw </CODE
>keyword to raise a user-defined exception, similar to Perl's <kbd class="command">die</KBD
>. </P
><p class="para">Java does strict type-checking and requires that a function enumerate the exceptions it might throw (this is considered part of the signature of the function). So if you call a function that throws an exception, Java either requires your function to either not rethrow it or, if you want to pass it on, you have to include that exception as part of your function's signature. This way, when you see a function, you know the exact list of exceptions you have to deal with, which is very important for big applications written by a team of people. Depending on your viewpoint, Perl doesn't have any such feature or restriction. <a class="indexterm" name="ch05-idx-951332-0"></A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch05_06.htm" title="5.6 Using Eval for Time-Outs"><img src="../gifs/txtpreva.gif" alt="Previous: 5.6 Using Eval for Time-Outs" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Advanced Perl Programming"><img src="../gifs/txthome.gif" alt="Advanced Perl Programming" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch05_08.htm" title="5.8 Resources"><img src="../gifs/txtnexta.gif" alt="Next: 5.8 Resources" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">5.6 Using Eval for Time-Outs</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">5.8 Resources</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
