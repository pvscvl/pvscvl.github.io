<html><head>
<title>[Chapter 17] 17.3 Jeeves Overview</TITLE>
<meta name="DC.title" content="Advanced Perl Programming"><meta name="DC.creator" content="Sriram Srinivasan"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:39:47Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-220-4" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch17_01.htm" title="17. Template-Driven Code Generation"><link rel="prev" href="ch17_02.htm" title="17.2 Jeeves Example"><link rel="next" href="ch17_04.htm#ch17-pgfId-972476" title="17.4 Jeeves Implementation"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Advanced Perl Programming" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,54" href="index.htm" alt="Advanced Perl Programming"><area shape="RECT" coords="467,0,514,18" href="../search/asrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch17_02.htm" title="17.2 Jeeves Example"><img src="../gifs/txtpreva.gif" alt="Previous: 17.2 Jeeves Example" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch17_01.htm" title="17. Template-Driven Code Generation">Chapter 17<br>Template-Driven Code Generation</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch17_04.htm#ch17-pgfId-972476" title="17.4 Jeeves Implementation"><img src="../gifs/txtnexta.gif" alt="Next: 17.4 Jeeves Implementation" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch17-41414">17.3 Jeeves Overview</A
></H2
><p class="para"><a class="xref" href="#ch17-42278" title="Components of a running Jeeves-based translator">Figure 17.2</A
> illustrates <a class="indexterm" name="ch17-idx-977902-0"></A
><a class="indexterm" name="ch17-idx-977902-1"></A
>how various components of a Jeeves-based translator relate to each other. Gray rectangles constitute the Jeeves framework. </P
><h4 class="figure"><a class="title" name="ch17-42278">Figure 17.2: Components of a running Jeeves-based translator</A
></H4
><img class="graphic" src="figs/wpa_1702.gif" alt="Figure 17.2"><p class="para">The Jeeves framework supplies a driver program, <kbd class="command">jeeves</KBD
><a class="indexterm" name="ch17-idx-977934-0"></A
>, a template-parsing module, <a class="indexterm" name="ch17-idx-977935-0"></A
>TemplateParser.pm, and a utility module for creating and accessing the syntax tree, AST.pm. </P
><p class="para">You supply a specification parser for a given application domain, such as <i class="filename">OO_Schema.pm</I
>, a specification file (<i class="filename">emp.om</I
>), and one or more templates, such as <i class="filename">oo.tpl</I
>.</P
><p class="para">The driver starts by calling the <code class="literal">parse</CODE
> function of the specification parser. This calls the AST functions <kbd class="command">new</KBD
>, <code class="literal">add_prop</CODE
>, and <code class="literal">add_prop_list</CODE
> to convert all "relevant" data from the specification file to a tree of properties.</P
><p class="para">The driver then calls the template parser's <kbd class="command">parse</KBD
> function, which converts the given template file to an intermediate perl file. (Note the line <kbd class="command">Translated</KBD
> <kbd class="command">oo.tpl</KBD
> <kbd class="command">to oo.tpl.pl</KBD
> in the command-line invocation shown earlier.) The template contains variables along with looping and conditional constructs, all of which are more than adequately supported by Perl itself, so by converting the template to Perl code, we are able to leverage all of Perl's power. This is similar to early versions of C++ compilers (<kbd class="command">cfront</KBD
>), which simply converted C++ files to intermediate C files, thus taking advantage of the power, optimization features, and portability of existing C compilers.</P
><p class="para">Finally, the driver loads the intermediate file using <code class="literal">require</CODE
>, which is an <kbd class="command">eval</KBD
> in disguise. When evaluated, this code traverses the syntax tree and produces the required output files. </P
><div class="sect2"><h3 class="sect2"><a class="title" name="ch17-pgfId-967467">17.3.1 Advantages of This Architecture</A
></H3
><p class="para"><a class="indexterm" name="ch17-idx-977890-0"></A
><a class="indexterm" name="ch17-idx-977890-1"></A
><a class="indexterm" name="ch17-idx-977890-2"></A
>So what have we gained by this seemingly complicated arrangement? The input parser is written once to produce a standardized data structure. The template parser knows how to make this data structure available to the template and traverse it in a controlled fashion. The result is that you can write all kinds of templates while reusing the input parser.</P
><p class="para">This arrangement works very well in big projects. Someone with parsing experience writes the parser, and another who knows the application well writes templates. Others simply write different specifications and run the tool. Tomorrow, if you, an applications developer, write a template to automatically generate a Motif-based user interface from an object model, the others don't have to learn Motif to generate custom UIs for their object models.</P
><p class="para">The <kbd class="command">jeeves</KBD
> driver takes the name of a specification parser on the command line. This means that you can have a library of specification parsers for all kinds of problems and a library of templates corresponding to these parsers. The framework itself is independent of application domains.</P
><p class="para">The advantage of writing it in Perl is that no other language comes anywhere close to Perl's text-processing abilities. Besides, you can use modules such as Tk and IO::Socket within your templates.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch17-pgfId-973971">17.3.2 Intermediate Perl Code</A
></H3
><p class="para">Most of Jeeves is extremely simple; the only piece of code that warrants some attention is the template parser. </P
><p class="para">The following snippet shows a sample conversion of a template to the intermediate Perl file:</P
><pre class="programlisting"><b class="emphasis.bold">@foreach class_list</B
>
Name: $class_name
<b class="emphasis.bold">  @foreach attr_list</B
>
  Attr: $attr_name, $attr_type
<b class="emphasis.bold">  @end</B
>
<b class="emphasis.bold">@end</B
></PRE
><p class="para">Stripped to its essence, the corresponding intermediate file looks like this:</P
><pre class="programlisting">$ROOT-&gt;visit();
foreach $class_list_i (@class_list) {
    $class_list_i-&gt;visit();
    print &quot;Name : $class_name\n&quot;;
    foreach $attr_list_i (@attr_list) {
         $attr_list_i-&gt;visit();
         print &quot;Attr: $attr_name, $attr_type\n&quot;;
         Ast-&gt;bye();
    }
    Ast-&gt;bye();
}</PRE
><p class="para">Ast::visit converts all properties of the AST node being visited to global Perl variables in package <kbd class="command">main</KBD
>. The root node of the syntax tree is "visited" first, which results in the creation of one global variable, <kbd class="command">@class_list</KBD
>, since that is the sole property of the root node. <kbd class="command">@class_list</KBD
> consists of one or more AST nodes itself, and when one of them is visited, the properties <em class="emphasis">class_name</EM
> and <em class="emphasis">attr_list</EM
> become available as <kbd class="command">$class_name</KBD
> and <kbd class="command">@attr_list</KBD
>. This code has to account for the possibility that a given global variable already exists, either because of a similarly named property at an outer level of nesting or because one was defined by the template writer using an <kbd class="command">@perl</KBD
> directive. For this reason <kbd class="command">visit()</KBD
><a class="indexterm" name="ch17-idx-977936-0"></A
> keeps track of the old value of a variable if necessary; <kbd class="command">bye()</KBD
><a class="indexterm" name="ch17-idx-977937-0"></A
> restores it to the old value at the end of a <kbd class="command">@FOREACH</KBD
> block. This arrangement hence implements dynamic scoping.<a class="indexterm" name="ch17-idx-977906-0"></A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch17_02.htm" title="17.2 Jeeves Example"><img src="../gifs/txtpreva.gif" alt="Previous: 17.2 Jeeves Example" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Advanced Perl Programming"><img src="../gifs/txthome.gif" alt="Advanced Perl Programming" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch17_04.htm#ch17-pgfId-972476" title="17.4 Jeeves Implementation"><img src="../gifs/txtnexta.gif" alt="Next: 17.4 Jeeves Implementation" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">17.2 Jeeves Example</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">17.4 Jeeves Implementation</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
