<html><head>
<title>[Chapter 6] Modules</TITLE>
<meta name="DC.title" content="Advanced Perl Programming"><meta name="DC.creator" content="Sriram Srinivasan"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:32:53Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-220-4" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="index.htm" title="Advanced Perl Programming"><link rel="prev" href="ch05_08.htm" title="5.8 Resources"><link rel="next" href="ch06_02.htm#ch06-pgfId-955483" title="6.2 Packages and Files"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Advanced Perl Programming" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,54" href="index.htm" alt="Advanced Perl Programming"><area shape="RECT" coords="467,0,514,18" href="../search/asrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch05_08.htm" title="5.8 Resources"><img src="../gifs/txtpreva.gif" alt="Previous: 5.8 Resources" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 6</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch06_02.htm#ch06-pgfId-955483" title="6.2 Packages and Files"><img src="../gifs/txtnexta.gif" alt="Next: 6.2 Packages and Files" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="chapter"><h1 class="chapter"><a class="title" name="ch06-34307">6. Modules</A
></H1
><div class="htmltoc"><p><b>Contents:</B
><br><a class="sect1" href="#ch06-31040" title="6.1 Basic Package">Basic Package</A
><br><a class="sect1" href="ch06_02.htm#ch06-pgfId-955483" title="6.2 Packages and Files">Packages and Files</A
><br><a class="sect1" href="ch06_03.htm" title="6.3 Package Initialization and Destruction">Package Initialization and Destruction</A
><br><a class="sect1" href="ch06_04.htm" title="6.4 Privacy">Privacy</A
><br><a class="sect1" href="ch06_05.htm#ch06-pgfId-956256" title="6.5 Importing Symbols">Importing Symbols</A
><br><a class="sect1" href="ch06_06.htm" title="6.6 Nesting Packages">Nesting Packages</A
><br><a class="sect1" href="ch06_07.htm" title="6.7 Autoloading">Autoloading</A
><br><a class="sect1" href="ch06_08.htm" title="6.8 Accessing the Symbol Table">Accessing the Symbol Table</A
><br><a class="sect1" href="ch06_09.htm#ch06-pgfId-951254" title="6.9 Language Comparisons">Language Comparisons</A
></P
><p></P
></DIV
><div class="epigraph" align="right"><p class="para" align="right"><i>Life is a struggle with things to maintain itself among them. Concepts are the strategic plan we form in answer to the attack.</I
></P
><p class="attribution" align="right">-&nbsp;Jose Ortega y Gasset, <cite class="citetitle">The Revolt of the Masses</CITE
></P
></DIV
><p class="para">One of the chief reasons why languages such as <em class="emphasis">awk</EM
> and the various Unix shells don't get used for building even moderately complex systems is their lack of support for modular programming. There are no bodies of code that you can just pick up and plug into your application; instead, you end up cutting and pasting from other standalone scripts. In contrast, languages such as Perl have been highly successful because of the wide availability of third-party modules (libraries). When comparing languages, I consider the availability of libraries to be more important than pure language features.</P
><p class="para">Perl allows you to partition your code into one or more reusable <a class="indexterm" name="ch06-idx-960749-0"></A
>modules. In this chapter, we will study how to:</P
><ul class="itemizedlist"><li class="listitem"><p class="para"><a class="listitem" name="ch06-pgfId-958361"></A
>Define modules using the <kbd class="command">package</KBD
> keyword.</P
></LI
><li class="listitem"><p class="para"><a class="listitem" name="ch06-pgfId-958362"></A
>Load predefined modules with <kbd class="command">use</KBD
> and <kbd class="command">require</KBD
>; we have already seen a few examples of <kbd class="command">use</KBD
> in the earlier chapters.</P
></LI
><li class="listitem"><p class="para"><a class="listitem" name="ch06-pgfId-958366"></A
>Access package specific variables and subroutines using the "::" notation.</P
></LI
><li class="listitem"><p class="para"><a class="listitem" name="ch06-pgfId-949424"></A
>Load functions at run-time.</P
></LI
></UL
><div class="sect1"><h2 class="sect1"><a class="title" name="ch06-31040">6.1 Basic Package</A
></H2
><p class="para">The <kbd class="command">package</KBD
><a class="indexterm" name="ch06-idx-960750-0"></A
><a class="indexterm" name="ch06-idx-960750-1"></A
> keyword signifies the beginning of a new namespace. All global identifiers (names of variables, subroutines, filehandles, formats, and directory handles) mentioned after this statement "belong" to that package. For example:</P
><pre class="programlisting"><b class="emphasis.bold">package BankAccount</B
>;
$total = 0;
sub deposit {
    my ($amount)= @_;
    $total += $amount;
    print &quot;You now have $total dollars \n&quot;;
}
sub withdraw {
    my ($amount)= @_;
    $total -= $amount; 
    $total = 0  if $total &lt; 0;
    print &quot;You now have $total dollars \n&quot;;
}</PRE
><p class="para">The user-defined global identifiers <kbd class="command">$total</KBD
>, <kbd class="command">deposit</KBD
>, and <kbd class="command">withdraw</KBD
> belong to the BankAccount package. The scope of a package lasts until the end of the innermost enclosing block (if it is declared inside that block) or until another <kbd class="command">package</KBD
> statement is encountered. In the absence of an explicit package declaration, Perl assumes a package name called <kbd class="command">main</KBD
>. </P
><p class="para"><a class="indexterm" name="ch06-idx-960765-0"></A
><a class="indexterm" name="ch06-idx-960765-1"></A
><a class="indexterm" name="ch06-idx-960765-2"></A
><a class="indexterm" name="ch06-idx-960765-3"></A
><a class="indexterm" name="ch06-idx-960765-4"></A
>This is how you use the global symbols from another package:</P
><pre class="programlisting">package ATM;               # Start a different name-space now
BankAccount::deposit(10);  # Call a foreign subroutine
print $BankAccount::total; # Access a foreign variable</PRE
><p class="para">To access an identifier in a different <a class="indexterm" name="ch06-idx-960767-0"></A
><a class="indexterm" name="ch06-idx-960767-1"></A
>namespace, you need to put the package name before the variable name; this is called <i class="firstterm">fully qualifying</I
> the name. Note that you must say <kbd class="command">$BankAccount::total</KBD
>, not <kbd class="command">BankAccount::$total</KBD
>; the <code class="literal">$ </CODE
>sign is followed by the fully qualified name. If an identifier is not fully qualified, Perl looks for it in the currently active package. </P
><p class="para">Since the <kbd class="command">package</KBD
> statement simply dictates the effective namespace, you can switch between different namespaces at will:</P
><pre class="programlisting"><b class="emphasis.bold">package A</B
>;
$a = 10;      # This $a is in package A
package B;
$a = 20;      # This $a is in package B, and is completely independent
              # of the other $a
<b class="emphasis.bold">package A</B
>;     # Make A the current package.
print $a;     # prints 10;</PRE
><p class="para">C++ programmers will recognize the resemblance to that language's namespace facility.</P
><div class="sect2"><h3 class="sect2"><a class="title" name="ch06-pgfId-954553">6.1.1 Packages and Variables</A
></H3
><p class="para">In <a class="xref" href="ch03_01.htm" title="Typeglobs and Symbol Tables">Chapter 3, <cite class="chapter">Typeglobs and Symbol Tables</CITE
></A
>, I mentioned that all global names go into a symbol table. That was a bit of a white lie. Each package actually gets its <em class="emphasis">own</EM
> <a class="indexterm" name="ch06-idx-960768-0"></A
>symbol table, distinct from all others. (We will have more to say on this subject in the section <a class="xref" href="ch06_08.htm" title="Accessing the Symbol Table">"Accessing the Symbol Table</A
>" later in this chapter). User-defined identifiers in package <kbd class="command">main</KBD
> are not treated specially in any way except that you can also refer to a variable, say <kbd class="command">$x</KBD
>, in that package as <code class="literal">&quot;$::x&quot;</CODE
>. </P
><p class="para">The built-in variables such as <kbd class="command">$|</KBD
>, <kbd class="command">$_</KBD
>, <kbd class="command">@ARGV</KBD
>, and <kbd class="command">%ENV</KBD
> always belong to package <kbd class="command">main</KBD
>, and Perl allows you to refer to these variables in any package without having to prefix them with <kbd class="command">main::</KBD
>. These are the only truly global variables in Perl.</P
><p class="para">You may also recall that <a class="indexterm" name="ch06-idx-960770-0"></A
><a class="indexterm" name="ch06-idx-960770-1"></A
>lexical (<kbd class="command">my</KBD
>) variables are not associated with symbols and typeglobs and therefore have nothing to do with packages. It is a compile-time error to say something like</P
><pre class="programlisting">my $BankAccount::total; # Error</PRE
><p class="para">This also means that you can have two variables of the same type and the same name, if one is a package global and one is a lexical. The following piece of code is legal, but definitely not recommended:</P
><pre class="programlisting">$x = 10 ;   # global to package main
my $x = 20; # lexical at file scope
print $x;   # prints 20. Lexical variables are given priority.<a class="indexterm" name="ch06-idx-960769-0"></A
></PRE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch06-pgfId-959435">6.1.2 Symbolic References</A
></H3
><p class="para"><a class="indexterm" name="ch06-idx-960771-0"></A
><a class="indexterm" name="ch06-idx-960771-1"></A
>Symbolic references work as we have seen earlier, for variables as well as functions. Consider</P
><pre class="programlisting">package A;
$x = 10;

package B;
# Access $A::x symbolically
print ${&quot;A::x&quot;};

# or even more indirectly
$pkg      = &quot;A&quot;;
$var_name = &quot;x&quot;;
print ${&quot;${pkg}::$var_name&quot;};

# Call a subroutine indirectly
&amp;{&quot;A::foo&quot;}(10, 20); # Identical to A::foo(10,20);</PRE
><p class="para">We will make extensive use of this facility in <a class="xref" href="ch08_01.htm" title="Object Orientation: The Next Few Steps">Chapter 8, <cite class="chapter">Object Orientation: The Next Few Steps</CITE
></A
>.</P
></DIV
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch05_08.htm" title="5.8 Resources"><img src="../gifs/txtpreva.gif" alt="Previous: 5.8 Resources" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Advanced Perl Programming"><img src="../gifs/txthome.gif" alt="Advanced Perl Programming" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch06_02.htm#ch06-pgfId-955483" title="6.2 Packages and Files"><img src="../gifs/txtnexta.gif" alt="Next: 6.2 Packages and Files" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">5.8 Resources</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">6.2 Packages and Files</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
