<html><head>
<title>[Chapter 6] 6.4 Privacy</TITLE>
<meta name="DC.title" content="Advanced Perl Programming"><meta name="DC.creator" content="Sriram Srinivasan"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:33:07Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-220-4" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch06_01.htm" title="6. Modules"><link rel="prev" href="ch06_03.htm" title="6.3 Package Initialization and Destruction"><link rel="next" href="ch06_05.htm#ch06-pgfId-956256" title="6.5 Importing Symbols"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Advanced Perl Programming" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,54" href="index.htm" alt="Advanced Perl Programming"><area shape="RECT" coords="467,0,514,18" href="../search/asrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch06_03.htm" title="6.3 Package Initialization and Destruction"><img src="../gifs/txtpreva.gif" alt="Previous: 6.3 Package Initialization and Destruction" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch06_01.htm" title="6. Modules">Chapter 6<br>Modules</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch06_05.htm#ch06-pgfId-956256" title="6.5 Importing Symbols"><img src="../gifs/txtnexta.gif" alt="Next: 6.5 Importing Symbols" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch06-15700">6.4 Privacy</A
></H2
><p class="para"><a class="indexterm" name="ch06-idx-960825-0"></A
><a class="indexterm" name="ch06-idx-960825-1"></A
><a class="indexterm" name="ch06-idx-960825-2"></A
><a class="indexterm" name="ch06-idx-960825-3"></A
>Symbols in Perl are freely accessible; privacy is not enforced. The online documentation says, rather colorfully, "Perl does not enforce private and public parts of its modules as you may have been used to in other languages like C++, Ada, or Modula-17. Perl doesn't have an infatuation with enforced privacy. It would prefer that you stayed out of its living room because you weren't invited, not because it has a shotgun."[<a class="footnote" href="#ch06-pgfId-955886">2</A
>]</P
><blockquote class="footnote"><div class="footnote"><p class="para"><a class="footnote" name="ch06-pgfId-955886">[2]</A
> I once saw this gem in a piece of C++ code: "<code class="literal">#define private public</CODE
>", just before including a header file. Someone who wants data that badly will find a means to get at it!</P
></DIV
></BLOCKQUOTE
><p class="para">In addition to accessing a foreign package's existing variables or subroutines, a package can easily create new names in another package's <a class="indexterm" name="ch06-idx-960829-0"></A
>namespace, as we saw earlier. Consider</P
><pre class="programlisting">package Test;
# Create a variable subroutine and subroutine in another package
$main::foo = 10;    
sub <b class="emphasis.bold">main::myFunc</B
> {  
    print &quot;Hello \n&quot;;
}

package main;
myFunc();   #  prints &quot;Hello&quot;</PRE
><p class="para">Although this is not a very kosher thing to do in a normal application, this facility can be put to good use if applied in a controlled manner. You can use it to import foreign package symbol names into your own namespace; we will study this in the next section. </P
><div class="sect2"><h3 class="sect2"><a class="title" name="ch06-pgfId-955919">6.4.1 Enforcing Privacy</A
></H3
><p class="para">You can use the <kbd class="command">my</KBD
> operator at file scope to get unassailably private variables. Because they are not associated in any way with a package, they cannot be accessed from a different scope (in this case, file scope). But because they don't have anything to do with packages, they are restricted at most to file boundaries. Consider</P
><pre class="programlisting">package A;
my $a = 10;   # A lexical variable

package B; 
print $A::a;  # No such variable in package A
print $a;     # prints 10, because it can see the lexical variable
              # (even though package B is in effect)</PRE
><p class="para">What if you want to make a <a class="indexterm" name="ch06-idx-960832-0"></A
>subroutine name private? You cannot use <kbd class="command">my</KBD
> to declare a private subroutine, but you can use anonymous subroutines and hold references to them in lexical variables:</P
><pre class="programlisting">my $rs_func = sub {
                    ....
              };</PRE
><p class="para">Now, <kbd class="command">$rs_func</KBD
> can be dereferenced from within that scope (if it is a global variable anywhere within that file), but it cannot be accessed in another file. Whenever you want to call this function, you can either say <kbd class="command">&amp;$rs_func</KBD
> or, if you intend to call it a number of times, use typeglob aliasing for convenience and efficiency:</P
><pre class="programlisting">{
    local (*func) = $rs_func;
    for (1..100) {func()};
}</PRE
><p class="para">While you can hide your own global identifiers, there's nothing you can do to prevent another module from installing new names into your namespace. In fact, older Perl libraries took this liberty a lot more. (Look at the <em class="emphasis">bigint.pl</EM
> package in the standard Perl library, for example.)<a class="indexterm" name="ch06-idx-960827-0"></A
><a class="indexterm" name="ch06-idx-960827-1"></A
><a class="indexterm" name="ch06-idx-960827-2"></A
><a class="indexterm" name="ch06-idx-960827-3"></A
><a class="indexterm" name="ch06-idx-960827-4"></A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch06_03.htm" title="6.3 Package Initialization and Destruction"><img src="../gifs/txtpreva.gif" alt="Previous: 6.3 Package Initialization and Destruction" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Advanced Perl Programming"><img src="../gifs/txthome.gif" alt="Advanced Perl Programming" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch06_05.htm#ch06-pgfId-956256" title="6.5 Importing Symbols"><img src="../gifs/txtnexta.gif" alt="Next: 6.5 Importing Symbols" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">6.3 Package Initialization and Destruction</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">6.5 Importing Symbols</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
