<html><head>
<title>[Chapter 9] 9.6 Comparisons with Other Languages</TITLE>
<meta name="DC.title" content="Advanced Perl Programming"><meta name="DC.creator" content="Sriram Srinivasan"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:35:09Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-220-4" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch09_01.htm" title="9. Tie"><link rel="prev" href="ch09_05.htm" title="9.5 Example: Monitoring Variables"><link rel="next" href="ch10_01.htm" title="10. Persistence"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Advanced Perl Programming" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,54" href="index.htm" alt="Advanced Perl Programming"><area shape="RECT" coords="467,0,514,18" href="../search/asrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch09_05.htm" title="9.5 Example: Monitoring Variables"><img src="../gifs/txtpreva.gif" alt="Previous: 9.5 Example: Monitoring Variables" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch09_01.htm" title="9. Tie">Chapter 9<br>Tie</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="chapter" href="ch10_01.htm" title="10. Persistence"><img src="../gifs/txtnexta.gif" alt="Next: 10. Persistence" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch09-40546">9.6 Comparisons with Other Languages</A
></H2
><p class="para"><a class="indexterm" name="ch09-idx-955096-0"></A
>We have used the <kbd class="command">tie</KBD
> facility in two ways. One is to give an existing package an easy frontend (as Perl does for DBM files); another is to monitor an existing variable. Let us examine what the other languages have to offer in these contexts.</P
><div class="sect2"><h3 class="sect2"><a class="title" name="ch09-pgfId-947435">9.6.1 Tcl</A
></H3
><p class="para"><a class="indexterm" name="ch09-idx-955092-0"></A
>Tcl provides a command called <kbd class="command">trace</KBD
> to trap read and write accesses to scalars and associative arrays. (Scalars and lists are interchangeable, so there's no separate facility for the latter.) The Tk toolkit puts tracing to good use, as we shall soon see in <a class="xref" href="ch14_01.htm" title="Introduction to GUIs, Tk, and Perl/Tk">Section 14.1, "Introduction to GUIs, Tk, and Perl/Tk"</A
>. <kbd class="command">trace</KBD
> doesn't occlude the previous value, so writing a monitoring package is simpler.</P
><p class="para">Tcl's C API allows you to create traces much more easily than is possible with Perl. (Actually, this ease of use factor is true of the rest of the Tcl API also, as we shall see in <a class="xref" href="ch20_01.htm" title="Perl Internals">Chapter 20, <cite class="chapter">Perl Internals</CITE
></A
>.)</P
><p class="para">While an existing Tcl package can use this facility to provide an easy frontend for a package, I'm not aware of any that take advantage of it, as Perl does for DBM files.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch09-pgfId-955068">9.6.2 Python</A
></H3
><p class="para"><a class="indexterm" name="ch09-idx-955093-0"></A
>Python allows you to write special functions per class called <kbd class="command">__getattr__</KBD
> and  <kbd class="command">__setattr __</KBD
> that allow you to trap accesses to member attributes (or simulate new attributes). Similarly, you can make a class simulate an array by providing special methods called <kbd class="command">__getitem__</KBD
> and <kbd class="command">__setitem__</KBD
>. There are 40 such methods to overload all kinds of behavior.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch09-pgfId-949110">9.6.3 C++</A
></H3
><p class="para"><a class="indexterm" name="ch09-idx-955095-0"></A
>C++ does not allow dynamic traces to be put on a variable. On the other hand, it does provide an extensive set of operators and operator-overloading syntactic structures to allow you to substitute an object where fundamental data types or other objects are used.</P
><p class="para">Commercial tools and libraries such as Purify are capable of setting a dynamic trace on any region of memory. They also provide a C API to write your own callbacks on such an event.<a class="indexterm" name="ch09-idx-955098-0"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch09-pgfId-955176">9.6.4 Java</A
></H3
><p class="para"><a class="indexterm" name="ch09-idx-955177-0"></A
>Java does not allow you to arbitrarily trap accesses. Some commercial transaction- processing systems go to the extent of looking at the byte-code to recognize accesses to member attributes and insert traces where necessary. This allows them to make any object transactional without the explicit cooperation of the object. This approach is clearly not for the faint of heart!</P
><p class="para">Java does not have any way to implement the other aspect either: making a class appear as an ordinary variable. </P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch09_05.htm" title="9.5 Example: Monitoring Variables"><img src="../gifs/txtpreva.gif" alt="Previous: 9.5 Example: Monitoring Variables" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Advanced Perl Programming"><img src="../gifs/txthome.gif" alt="Advanced Perl Programming" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="chapter" href="ch10_01.htm" title="10. Persistence"><img src="../gifs/txtnexta.gif" alt="Next: 10. Persistence" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">9.5 Example: Monitoring Variables</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">10. Persistence</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
