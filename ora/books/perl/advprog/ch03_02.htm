<html><head>
<title>[Chapter 3] 3.2 Typeglobs</TITLE>
<meta name="DC.title" content="Advanced Perl Programming"><meta name="DC.creator" content="Sriram Srinivasan"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:31:23Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-220-4" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch03_01.htm" title="3. Typeglobs and Symbol Tables"><link rel="prev" href="ch03_01.htm" title="3.1 Perl Variables, Symbol Table, and Scoping"><link rel="next" href="ch03_03.htm#ch03-pgfId-950681" title="3.3 Typeglobs and References"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Advanced Perl Programming" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,54" href="index.htm" alt="Advanced Perl Programming"><area shape="RECT" coords="467,0,514,18" href="../search/asrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch03_01.htm" title="3.1 Perl Variables, Symbol Table, and Scoping"><img src="../gifs/txtpreva.gif" alt="Previous: 3.1 Perl Variables, Symbol Table, and Scoping" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch03_01.htm" title="3. Typeglobs and Symbol Tables">Chapter 3<br>Typeglobs and Symbol Tables</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch03_03.htm#ch03-pgfId-950681" title="3.3 Typeglobs and References"><img src="../gifs/txtnexta.gif" alt="Next: 3.3 Typeglobs and References" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch03-22568">3.2 Typeglobs</A
></H2
><p class="para"><a class="indexterm" name="ch03-idx-954045-0"></A
><a class="indexterm" name="ch03-idx-954045-1"></A
>Typeglobs, we mentioned earlier, can be localized (with <kbd class="command">local</KBD
> only) and assigned to one another. Assigning a typeglob has the effect of aliasing one identifier name to another. Consider</P
><pre class="programlisting">$spud   = &quot;Wow!&quot;;
@spud   = (&quot;idaho&quot;, &quot;russet&quot;);
<b class="emphasis.bold">*potato </B
>=<b class="emphasis.bold"> *spud;</B
>   # Alias potato to spud using typeglob assignment
print &quot;$potato\n&quot;; # prints &quot;Wow!&quot;
print @potato, &quot;\n&quot;; # prints &quot;idaho russet&quot;</PRE
><p class="para">Once the typeglob assignment is made, all entities that were called "spud" can now also be referred to as "potato"&nbsp;- the names are freely interchangeable. That is, <kbd class="command">$spud</KBD
> and <kbd class="command">$potato</KBD
> are the same thing, and so are the subroutines <kbd class="command">&amp;spud</KBD
> and <kbd class="command">&amp;potato</KBD
>. <a class="xref" href="#ch03-35920" title="Assigning *spud to *potato: both symbol table entries point to the same typeglob">Figure 3.2</A
> shows the picture after a typeglob assignment; both entries in the symbol table end up pointing to the same typeglob value.[<a class="footnote" href="#ch03-pgfId-950509">3</A
>] </P
><blockquote class="footnote"><div class="footnote"><p class="para"><a class="footnote" name="ch03-pgfId-950509">[3]</A
> There is a wee bit of simplification here, which we will clarify in <a class="xref" href="ch20_01.htm" title="Perl Internals">Chapter 20</A
>.</P
></DIV
></BLOCKQUOTE
><h4 class="figure"><a class="title" name="ch03-35920">Figure 3.2: Assigning *spud to *potato: both symbol table entries point to the same typeglob</A
></H4
><img class="graphic" src="figs/wpa_0302.gif" alt="Figure 3.2"><p class="para">The alias holds true until the typeglob is reassigned or removed. (We will shortly see how to remove a typeglob.) In the example, there is no subroutine called <kbd class="command">spud</KBD
>, but if we define it <em class="emphasis">after</EM
> the typeglobs have been assigned, that subroutine can also be invoked as <kbd class="command">potato</KBD
>. It turns out that the alias works the other way too. If you assign a new list to <kbd class="command">@potato</KBD
>, it will also be automatically accessible as <kbd class="command">@spud</KBD
>. </P
><div class="sect2"><h3 class="sect2"><a class="title" name="ch03-pgfId-946506">3.2.1 Temporary Aliases</A
></H3
><p class="para"><a class="indexterm" name="ch03-idx-954046-0"></A
><a class="indexterm" name="ch03-idx-954046-1"></A
>For now, there is no easy, intuitive way to get rid of an alias created by a typeglob assignment (you may reassign it, of course). You can, however, get temporary aliases using <kbd class="command">local</KBD
>, because it restores the typeglob's values at the end of the block. </P
><p class="para">Consider</P
><pre class="programlisting">$b = 10;
{
    local *b;    # Save *b's values
    *b = *a;     # Alias b to a
    $b = 20;     # Same as modifying $a instead
}                # *b restored at end of block
print $a;        # prints &quot;20&quot;
print $b;        # prints &quot;10&quot;</PRE
><p class="para"><kbd class="command">local</KBD
> <kbd class="command">*b</KBD
> localizes all changes to variables named "<kbd class="command">b</KBD
>"; that is, it puts all of <kbd class="command">*b</KBD
>'s value pointers into safekeeping and substitutes an <kbd class="command">undef</KBD
> value for all of them. This lasts until the end of the block, whereupon the previous values of everything named "<kbd class="command">b</KBD
>" are restored (<kbd class="command">$b</KBD
> becomes 10 again). Now, because of the alias (<kbd class="command">*b</KBD
> <kbd class="command">=</KBD
> <kbd class="command">*a</KBD
>), the assignment <kbd class="command">$b</KBD
> <kbd class="command">=</KBD
> <kbd class="command">20</KBD
> has the effect of modifying both <kbd class="command">$a</KBD
> and <kbd class="command">$b</KBD
>. But at the end of the block, only <kbd class="command">$b</KBD
> is restored, and <kbd class="command">$a</KBD
> is left with the new value. </P
><p class="para">While we are on the subject, it is important to recall that lexical variables and the symbol table have nothing to do with each other; for this reason, localizing a typeglob with <kbd class="command">my</KBD
> is a compile-time error:<a class="indexterm" name="ch03-idx-954050-0"></A
><a class="indexterm" name="ch03-idx-954050-1"></A
></P
><pre class="programlisting">my(*F);</PRE
><p class="para">The script dies with this error: "Can't declare ref-to-glob cast in my."<a class="indexterm" name="ch03-idx-954048-0"></A
><a class="indexterm" name="ch03-idx-954048-1"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch03-pgfId-949336">3.2.2 Using Typeglob Aliases</A
></H3
><p class="para"><a class="indexterm" name="ch03-idx-954051-0"></A
>This section discusses a number of places where typeglob aliases work very well.</P
><div class="sect3"><h4 class="sect3"><a class="title" name="ch03-pgfId-946507">3.2.2.1 Efficient parameter passing</A
></H4
><p class="para"><a class="indexterm" name="ch03-idx-954055-0"></A
><a class="indexterm" name="ch03-idx-954055-1"></A
>Aliases happen to be quite a bit faster than references, because they don't need to do any dereferencing. Consider</P
><pre class="programlisting">$a = 10;
*b = *a ; $b++ ;  # 1. Increment $a indirectly through the typeglob
$r = \$a; $$r++;  # 2. Increment $a indirectly through the reference</PRE
><p class="para">Case 1 is around one and a half times faster than case 2 on my PC. </P
><p class="para">The example code below uses typeglobs to efficiently pass an array by reference to a subroutine, <kbd class="command">DoubleEachEntry</KBD
>, which doubles each element of the array: </P
><pre class="programlisting">@array = (10,20);
DoubleEachEntry(<b class="emphasis.bold">*array</B
>); # @array and @copy are identical.
print &quot;@array \n&quot;; # prints 20 40

sub DoubleEachEntry {
    # $_[0] contains *array
    local <b class="emphasis.bold">*copy</B
> = shift;  # Create a local alias
    foreach $element (@copy) {
        $element *= 2;
    }
}</PRE
><p class="para">Note that only one parameter is passed to the subroutine. The typeglob <kbd class="command">*copy</KBD
> springs into existence when it is first encountered, but because it didn't exist prior to the <kbd class="command">local</KBD
> statement, it and the corresponding entry in the symbol table are removed at the end of the block. </P
><p class="para">Incidentally, the code also takes advantage of the fact that the <kbd class="command">foreach</KBD
><a class="indexterm" name="ch03-idx-954056-0"></A
> statement internally aliases each successive element of <kbd class="command">@copy</KBD
> to <kbd class="command">$element</KBD
>, so modifying <kbd class="command">$element</KBD
> affects the elements of <kbd class="command">@copy</KBD
> (and therefore <kbd class="command">@array</KBD
> as well). </P
><p class="para">You cannot use a lexically scoped array as a parameter to <kbd class="command">DoubleEachEntry</KBD
>, because lexical variables don't have typeglobs associated with them. The restriction is easily circumvented, however. Typeglobs and references are strangely equivalent, as it turns out. You can pass in an ordinary reference to a subroutine expecting a typeglob, and it'll work well. (We'll have a little more to say about this in the section <a class="xref" href="ch03_03.htm#ch03-pgfId-950681" title="Typeglobs and References">"Typeglobs and References</A
>.") That is, you can pass lexically scoped arrays to <kbd class="command">DoubleEachEntry</KBD
> like this:</P
><pre class="programlisting">my @array  = (1, 2, 3);
DoubleEachEntry(\@array); # Instead of *array, which wouldn't work</PRE
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="ch03-pgfId-950632">3.2.2.2 Aliasing on command lines</A
></H4
><p class="para"><a class="indexterm" name="ch03-idx-954057-0"></A
><a class="indexterm" name="ch03-idx-954057-1"></A
>I often embed the Perl interpreter in my C/C++ programs to provide a powerful shell-like frontend. While I like to use long and descriptive subroutine names in Perl scripts, it is painful to keep typing them on the frontend's prompt. Aliases are very useful here:</P
><pre class="programlisting">sub a_long_drawn_out_sub_name {
   print &quot;A sub by any other name is still a sub \n&quot;;
}
*f = *a_long_drawn_out_sub_name; # create an alias </PRE
><p class="para">Now typing <kbd class="command">f()</KBD
> on the command line is the same as calling the original subroutine but much easier on the carpals!</P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="ch03-pgfId-946565">3.2.2.3 Friendly predefined variables with aliases</A
></H4
><p class="para"><a class="indexterm" name="ch03-idx-954058-0"></A
><a class="indexterm" name="ch03-idx-954058-1"></A
>Consider the opposite case. Perl has a number of cryptic built-in variables such as <kbd class="command">$!</KBD
>, <kbd class="command">$/</KBD
>, and <kbd class="command">$@ </KBD
>, and many people would much rather work with longer descriptive names. The module English.pm in the standard Perl library comes to the rescue; it provides nice big, long aliased names, such as <kbd class="command">$ERRNO</KBD
>, <kbd class="command">$INPUT_RECORD_SEPARATOR</KBD
>, and <kbd class="command">$EVAL_ERROR</KBD
> (respectively). Try this:</P
><pre class="programlisting">use English;    # Import the module file called English.pm
# Try deleting a non-existent file
unlink ('/tmp/foo');
if (<b class="emphasis.bold">$ERRNO</B
>)  {  # Use $ERRNO instead of $!
    print $ERRNO, &quot;\n&quot;; # Prints &quot;No such file or directory&quot;
}</PRE
><p class="para">(We'll cover packages and the <kbd class="command">use</KBD
> statement in <a class="xref" href="ch06_01.htm" title="Modules">Chapter 6</A
>.) I think these well-known names should have been in there from the very beginning, instead of having to memorize funny-looking variables and an accompanying list of mnemonics. Some argue that you can use the same scheme for other languages ("<kbd class="command">use</KBD
> <kbd class="command">Dutch;</KBD
>"), but considering that the other system calls are in English anyway, I think that there's no point providing specific aliases for a small subset of the things you have to remember.<a class="indexterm" name="ch03-idx-954053-0"></A
></P
></DIV
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch03-pgfId-952904">3.2.3 Aliasing Problem: Variable Suicide</A
></H3
><p class="para"><a class="indexterm" name="ch03-idx-954059-0"></A
><a class="indexterm" name="ch03-idx-954059-1"></A
><a class="indexterm" name="ch03-idx-954059-2"></A
><a class="indexterm" name="ch03-idx-954059-3"></A
>Aliases, combined with the fact that <kbd class="command">local</KBD
> doesn't really create new variables (it temporarily slaps a new value onto a global variable), often leads to weird values of variables that presumably haven't even been touched. Consider the following simple case:</P
><pre class="programlisting">$x = 10;
foo(*x);
sub foo {
    local(*y) = @_;
    print &quot;Before value of y : $y \n&quot;;
    local($x) = 100;
    print &quot;After value of y : $y \n&quot;;
}</PRE
><p class="para">This prints the following:</P
><pre class="programlisting">Before value of y : 10
After value of y : 100</PRE
><p class="para">Can you resolve the mystery? Clearly, <kbd class="command">$y</KBD
> has not been touched between the two <code class="literal">print</CODE
> statements, but its value seems to have changed. Hint: it reflects that of <kbd class="command">$x</KBD
>.</P
><p class="para">Let's trace the events in sequence:</P
><pre class="programlisting">$x = 10;                  # Assign a value to global $x
                          # function called
local *y = *x;            # Save global *y's values. Alias it to *x
print &quot;before value&quot;      # Because of the alias, $y is the same as $x,
                          # hence this prints 10
local $x = 100;           # IMPORTANT: local saves $x's value (10)
                          # and substitutes 100. Note that it does not
                          # create a new $x variable
                          # replaced by 100
print &quot;after value&quot;;      # But *y is still aliased to *x. Therefore,
                          # $y now contains 100</PRE
><p class="para">The interaction of aliases and <kbd class="command">local</KBD
> can be even more subtle. Consider</P
><pre class="programlisting">foreach $f (10, 20, 30) {
    foo (*f);
}
sub foo {
    local (*g) = @_;
    $g++;
}</PRE
><p class="para">This prints the error: "Modification of a read-only value attempted at try.pl line 6."</P
><p class="para">The sequence is as follows: For efficiency, the <kbd class="command">foreach</KBD
> operator aliases <kbd class="command">$f</KBD
> to the next element of the list in every iteration, each of which is a constant. The subroutine <kbd class="command">foo</KBD
> aliases <kbd class="command">*g</KBD
> to <kbd class="command">*f</KBD
>, which means that <kbd class="command">$g</KBD
> is aliased to a constant. For this reason, the operation <kbd class="command">$g++</KBD
> causes a problem.</P
><p class="para">Moral of the story: if you want truly local variables, use <kbd class="command">my</KBD
>. Use typeglob aliasing and <kbd class="command">local</KBD
> sparingly.<a class="indexterm" name="ch03-idx-954061-0"></A
><a class="indexterm" name="ch03-idx-954061-1"></A
><a class="indexterm" name="ch03-idx-954061-2"></A
><a class="indexterm" name="ch03-idx-954061-3"></A
><a class="indexterm" name="ch03-idx-954061-4"></A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch03_01.htm" title="3.1 Perl Variables, Symbol Table, and Scoping"><img src="../gifs/txtpreva.gif" alt="Previous: 3.1 Perl Variables, Symbol Table, and Scoping" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Advanced Perl Programming"><img src="../gifs/txthome.gif" alt="Advanced Perl Programming" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch03_03.htm#ch03-pgfId-950681" title="3.3 Typeglobs and References"><img src="../gifs/txtnexta.gif" alt="Next: 3.3 Typeglobs and References" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">3.1 Perl Variables, Symbol Table, and Scoping</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">3.3 Typeglobs and References</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
