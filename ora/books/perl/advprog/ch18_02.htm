<html><head>
<title>[Chapter 18] 18.2 Example: Fractals with Perl</TITLE>
<meta name="DC.title" content="Advanced Perl Programming"><meta name="DC.creator" content="Sriram Srinivasan"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:40:05Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-220-4" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch18_01.htm" title="18. Extending Perl:A First Course"><link rel="prev" href="ch18_01.htm" title="18.1 Writing an Extension: Overview"><link rel="next" href="ch18_03.htm" title="18.3 SWIG Features"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Advanced Perl Programming" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,54" href="index.htm" alt="Advanced Perl Programming"><area shape="RECT" coords="467,0,514,18" href="../search/asrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch18_01.htm" title="18.1 Writing an Extension: Overview"><img src="../gifs/txtpreva.gif" alt="Previous: 18.1 Writing an Extension: Overview" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch18_01.htm" title="18. Extending Perl:A First Course">Chapter 18<br>Extending Perl:A First Course</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch18_03.htm" title="18.3 SWIG Features"><img src="../gifs/txtnexta.gif" alt="Next: 18.3 SWIG Features" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch18-34609">18.2 Example: Fractals with Perl</A
></H2
><p class="para"><a class="indexterm" name="ch18-idx-971907-0"></A
><a class="indexterm" name="ch18-idx-971907-1"></A
><a class="indexterm" name="ch18-idx-971907-2"></A
><a class="indexterm" name="ch18-idx-971907-3"></A
>Enough general talk! Let us test-drive both tools using a simple piece of fractal-drawing code. This problem is tailor-made for C, because generating a fractal image involves performing a series of computations on every pixel, which calls for compact data structures <em class="emphasis">and</EM
> fast number-crunching. This exercise creates the familiar Mandelbrot set image shown in <a class="xref" href="#ch18-20212" title="Mandelbrot set">Figure 18.3</A
>.</P
><h4 class="figure"><a class="title" name="ch18-20212">Figure 18.3: Mandelbrot set</A
></H4
><img class="graphic" src="figs/wpa_1803.gif" alt="Figure 18.3"><p class="para">Our Mandelbrot code is implemented in <i class="filename">mandel.c</I
> and <i class="filename">mandel.h</I
>. To avoid a non-portable GUI solution, we use a public domain library, <em class="emphasis">gd</EM
>, written by Tom Boutell [<a class="xref" href="ch18_07.htm" title="">14</A
>], which allows you to treat a GIF file as a canvas and render points, lines, and circles on it. This GIF file can then be viewed by using any web browser. </P
><p class="para"><i class="filename">mandel.c</I
> implements one function called <kbd class="command">draw_mandel</KBD
>, with the signature shown in <a class="xref" href="#ch18-26415" title="Mandel.h">Example 18.1</A
>.</P
><div class="example"><h4 class="example"><a class="title" name="ch18-26415">Example 18.1: Mandel.h</A
></H4
><pre class="programlisting">extern int 
draw_mandel (char *filename,
              int width, int height,
              double origin_real, double origin_imag,
              double range, double depth);</PRE
></DIV
><p class="para">The meaning of the parameters will be explained in the <a class="xref" href="ch18_06.htm" title="A Detour into Fractals">Section 18.6, "A Detour into Fractals</A
>," later in this chapter. First, we'll first concentrate on making it callable from Perl.</P
><div class="sect2"><h3 class="sect2"><a class="title" name="ch18-pgfId-963937">18.2.1 Fractals Using SWIG</A
></H3
><p class="para">We start by writing a <a class="indexterm" name="ch18-idx-971909-0"></A
>SWIG interface file, <i class="filename">Fractal.i</I
>, as in <a class="xref" href="#ch18-21722" title="Fractal.i&nbsp- SWIG Interface File">Example 18.2</A
>.</P
><div class="example"><h4 class="example"><a class="title" name="ch18-21722">Example 18.2: Fractal.i&nbsp;- SWIG Interface File</A
></H4
><pre class="programlisting">%module Fractal
%{
#include &quot;mandel.h&quot;
%}
%include mandel.h</PRE
></DIV
><p class="para">The <kbd class="command">%module</KBD
> statement gives a unique namespace to all the interface declarations in that file. We call the module Fractal because we would like to have one namespace for all fractal drawing code, and the Mandelbrot set is only one of many choices.</P
><p class="para">The statements between <kbd class="command">%{</KBD
> and <kbd class="command">%}</KBD
> are meant for "raw" C code. We include <i class="filename">mandel.h</I
> here because the interface file is soon going to be converted to C glue code, which in turn needs this header. Now comes the portion where all data structures and exported functions (with complete signatures) are to be listed. Since the interface file format is very close to ANSI C, we can simply <kbd class="command">%include</KBD
> <i class="filename">mandel.h</I
>. Unlike the first include, which began with a <kbd class="command">#</KBD
> because it is called later from C code, this include starts with <kbd class="command">%</KBD
> because it is called immediately within SWIG.</P
><p class="para">Next, we invoke SWIG on this interface file and specify perl5 as the scripting language:</P
><pre class="programlisting"><b class="emphasis.bold">% swig -perl5 Fractal.i</B
>
Generating wrappers for Perl 5
<b class="emphasis.bold">% ls</B
>
mandel.h     mandel.c        Fractal_wrap.doc
Fractal.i    Fractal.pm      Fractal_wrap.c</PRE
><p class="para">SWIG creates four files from the interface file. <i class="filename">Fractal.pm</I
> contains some code to make the C library dynamically loadable. <i class="filename">Fractal_wrap.c</I
> contains the wrapper code; for a function <i class="function">foo</I
> listed in the interface file, this wrapper file contains a function called <kbd class="command">_wrap_foo</KBD
> that translates Perl argument values to C, calls <kbd class="command">foo</KBD
>, and packages the return results back into Perl data types. You don't have to understand the contents of <i class="filename">Fractal.pm</I
> and <i class="filename">Fractal_wrap.c</I
>. SWIG also extracts all documentation out of the interface file into <i class="filename">Fractal_wrap.doc</I
> (ASCII)<i class="filename">, </I
>or <i class="filename">Fractal_wrap.html</I
> (HTML), or <i class="filename">Fractal_wrap.tex</I
> (LaTeX). </P
><p class="para">All we have left to do is to compile the two <i class="filename">.c</I
> files and make them dynamically loadable.[<a class="footnote" href="#ch18-pgfId-967898">3</A
>] SWIG (as well as XS) simplifies this part again by helping you create a makefile. Because a makefile is dependent on machine- and site-specific details such as operating system peculiarities, compiler, linker options, Perl installation directories, the name and location of the C compiler, and so on, these tools do not generate a makefile directly. <a class="indexterm" name="ch18-idx-971917-0"></A
>Instead they generate a Perl script called <i class="filename">Makefile.PL</I
>, which, when executed, produces a makefile that is customized for your system. This script is very simple, shown here after manually adding the LIBS and OBJECT lines:<pre class="programlisting">use ExtUtils::MakeMaker;
WriteMakefile(
    'NAME'       =&gt; 'Fractal',    # Name of module
    'LIBS'       =&gt; [M    # All custom libraries to be linked with
    'OBJECT' =&gt; 'mandel.o Fractal_wrap.o'  # All object files
);</PRE
></P
><blockquote class="footnote"><div class="footnote"><p class="para"><a class="footnote" name="ch18-pgfId-967898">[3]</A
> Since this is a much simpler option than static linking, and since most self-respecting operating systems support it, we consider only dynamic linking in this book. </P
></DIV
></BLOCKQUOTE
><p class="para">The standard ExtUtils::MakeMaker module does all the magic of finding out about the configuration of your system and creating a custom makefile.<a class="indexterm" name="ch18-idx-971919-0"></A
></P
><p class="para">The next three steps build and install this extension:</P
><pre class="programlisting">% <b class="emphasis.bold">perl Makefile.PL      </B
># create Makefile
% <b class="emphasis.bold">make                  </B
># compiles sources and creates shared library
% <b class="emphasis.bold">make install          </B
># optional. installs library </PRE
><p class="para">(How much easier and more portable do you want it to get?)</P
><p class="para">We are now all set to create fractal images. The following call to <kbd class="command">draw_mandel()</KBD
> creates the beautiful image shown in <a class="xref" href="#ch18-20212" title="Mandelbrot set">Figure 18.3</A
>.</P
><pre class="programlisting"><b class="emphasis.bold">use Fractal;</B
>
Fractal::draw_mandel('mandel.gif', 300, 300,  # file, width, height
                      -1.5, 1.0,              # origin x, y
                       2.0, 20);              # range, max iterations</PRE
><p class="para">Since the chief purpose of this chapter is to illustrate writing extensions, we'll (reluctantly) put off the discussion of <i class="function">draw_mandel</I
> to the end.<a class="indexterm" name="ch18-idx-971915-0"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch18-pgfId-964366">18.2.2 Fractals Using XS</A
></H3
><p class="para">The <a class="indexterm" name="ch18-idx-971913-0"></A
>XS process is also extremely straightforward. <em class="emphasis">h2xs</EM
> understands normal C header files, so a fractal extension is produced as follows:</P
><pre class="programlisting"><b class="emphasis.bold">% h2xs -x -n Fractal mandel.h</B
></PRE
><p class="para">This creates <em class="emphasis">Fractal.pm</EM
>, the Perl module, <i class="filename">Makefile.PL</I
>, the makefile-generating script, and <i class="filename">Fractal.xs</I
>. At this point, you don't need to know what this file contains. </P
><p class="para">Since <i class="filename">Makefile.PL</I
> is automatically generated, you will need to add or modify the <kbd class="command">OBJECT</KBD
> and <kbd class="command">LIB</KBD
> lines, as shown earlier. The build and install are identical to what we saw earlier:</P
><pre class="programlisting">% <b class="emphasis.bold">perl Makefile.PL</B
>
% <b class="emphasis.bold">make</B
>
% <b class="emphasis.bold">make install</B
></PRE
><p class="para">The makefile generated in the first step notices <i class="filename">Fractal.xs</I
>, and feeds it to <kbd class="command">xsubpp</KBD
> to create the glue code in <i class="filename">Fractal.c</I
>. Note that the name is not <em class="emphasis">Fractal_wrap.c</EM
> as with SWIG, so the <kbd class="command">OBJECT</KBD
> line in <i class="filename">Makefile.PL</I
> should look like this:</P
><pre class="programlisting">'OBJECT' =&gt; 'mandel.o Fractal.o' # mandel.o contains the real function
                                 # Fractal.o contains the glue code<a class="indexterm" name="ch18-idx-971911-0"></A
><a class="indexterm" name="ch18-idx-971911-1"></A
><a class="indexterm" name="ch18-idx-971911-2"></A
><a class="indexterm" name="ch18-idx-971911-3"></A
></PRE
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch18_01.htm" title="18.1 Writing an Extension: Overview"><img src="../gifs/txtpreva.gif" alt="Previous: 18.1 Writing an Extension: Overview" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Advanced Perl Programming"><img src="../gifs/txthome.gif" alt="Advanced Perl Programming" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch18_03.htm" title="18.3 SWIG Features"><img src="../gifs/txtnexta.gif" alt="Next: 18.3 SWIG Features" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">18.1 Writing an Extension: Overview</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">18.3 SWIG Features</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
