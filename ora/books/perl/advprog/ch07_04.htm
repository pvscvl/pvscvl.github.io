<html><head>
<title>[Chapter 7] 7.4 Recap of Conventions</TITLE>
<meta name="DC.title" content="Advanced Perl Programming"><meta name="DC.creator" content="Sriram Srinivasan"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:34:12Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-220-4" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch07_01.htm" title="7. Object-Oriented Programming"><link rel="prev" href="ch07_03.htm" title="7.3 UNIVERSAL"><link rel="next" href="ch07_05.htm#ch07-pgfId-969836" title="7.5 Comparison with Other OO Languages"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Advanced Perl Programming" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,54" href="index.htm" alt="Advanced Perl Programming"><area shape="RECT" coords="467,0,514,18" href="../search/asrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch07_03.htm" title="7.3 UNIVERSAL"><img src="../gifs/txtpreva.gif" alt="Previous: 7.3 UNIVERSAL" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch07_01.htm" title="7. Object-Oriented Programming">Chapter 7<br>Object-Oriented Programming</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch07_05.htm#ch07-pgfId-969836" title="7.5 Comparison with Other OO Languages"><img src="../gifs/txtnexta.gif" alt="Next: 7.5 Comparison with Other OO Languages" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch07-27435">7.4 Recap of Conventions</A
></H2
><p class="para"><a class="indexterm" name="ch07-idx-969806-0"></A
>While Perl allows us infinite flexibility in how we organize our modules, we choose to stick to the particular set of conventions introduced in this chapter so that everyone deals with modules in a consistent fashion. Let us quickly summarize these conventions:</P
><ul class="itemizedlist"><li class="listitem"><p class="para"><a class="listitem" name="ch07-pgfId-967791"></A
>A module must be present in its own file called &lt;<i class="filename">module&gt;.pm</I
>. (Remember that the last executing global statement must return 1 to signify successful loading.) </P
></LI
><li class="listitem"><p class="para"><a class="listitem" name="ch07-pgfId-967781"></A
>All subroutines in a module should be designed as methods. That is, they should expect either the name of a class or an object reference as their first parameter. For added convenience, they should be able to deal with either.</P
></LI
><li class="listitem"><p class="para"><a class="listitem" name="ch07-pgfId-967782"></A
>Package names should never be hardcoded. You must always use the package name obtained as the first argument to supply to <kbd class="command">bless</KBD
>. This enables a constructor to be inherited.</P
></LI
><li class="listitem"><p class="para"><a class="listitem" name="ch07-pgfId-967813"></A
>Always provide accessor methods for class and instance attributes. </P
></LI
></UL
><p class="para">The following example puts all these techniques and conventions into practice.</P
><div class="sect2"><h3 class="sect2"><a class="title" name="ch07-19986">7.4.1 Example</A
></H3
><p class="para">Consider a store that sells computers and individual components. Each component has a model number, a price, and a rebate. A customer can buy individual components, but can also put together a custom computer with specific components. The store adds a sales tax to the final price. The objective of this example is to provide the net price on any item you can buy from the store. </P
><p class="para">We need to account for the facts that a part may consist of other parts, that the sales tax may depend on the type of part and the customer's location, and that we may have to charge for labor to assemble a computer</P
><p class="para">One useful technique for jump-starting a design is to use <i class="firstterm">case analysis</I
>, as propounded by Ivar Jacobson [<a class="xref" href="ch07_06.htm" title="">19</A
>]. You look at the interface from the point of view of the user, without worrying about specific objects' attributes. That way, we can understand the objects' interface without worrying about implementation details. Let's say this is how we want to use the system:</P
><pre class="programlisting">$cdrom   = new CDROM   (&quot;Toshiba 5602&quot;);

$monitor = new Monitor (&quot;Viewsonic 15GS&quot;);
print $monitor-&gt;net_price();

$computer = new Computer($monitor, $cdrom); 
print $computer-&gt;net_price();</PRE
><p class="para"><a class="xref" href="#ch07-20761" title="Object model for computer store example">Figure 7.1</A
> shows one way of designing the object model. I have used Rumbaugh's OMT (Object Modeling Technique) notation to depict classes, inheritance hierarchies, and associations between classes. The triangle indicates an is-a relationship, and the line with the <kbd class="command">1+</KBD
> indicates a one-to-many relationship. The computer <em class="emphasis">is-a</EM
> store item and contains other components (has-a relationship). A CD-ROM or monitor is a component, which in turn is a store item.</P
><h4 class="figure"><a class="title" name="ch07-20761">Figure 7.1: Object model for computer store example</A
></H4
><img class="graphic" src="figs/wpa_0701.gif" alt="Figure 7.1"><p class="para">All attributes common to all store items are captured in the <kbd class="command">StoreItem</KBD
> class. To compute the net price of any component, we have to take rebate and sales tax into account. But when assembling components to build a computer, we have to add sales tax only at the end; we can't simply add up all the components' net prices. For this reason, we split the calculation into two: <kbd class="command">price</KBD
>, which subtracts the rebate from the price, and <kbd class="command">net_price</KBD
>, which adds on the sales tax. At present, the component classes are empty classes, because their entire functionality is captured by <kbd class="command">StoreItem</KBD
>. Clearly, if the problem stopped here, this design would be unnecessarily complex; we could have simply had one lookup table for prices and rebates and one function to calculate the prices. But we are designing for change here. We expect it to get fleshed out when we start accounting for taxes by location, dealing with components containing other components, and charging for labor. It is best to adopt a generalized mentality from the very beginning.</P
><p class="para">The <kbd class="command">Computer</KBD
> class does not use its price attribute; instead, it adds up the prices of its constituent components. It doesn't need to override the <kbd class="command">net_price</KBD
> functionality, because that function simply adds the sales tax onto an object's price, regardless of the type of the object. </P
><p class="para"><a class="xref" href="#ch07-24953" title="Sample Object Implementation">Example 7.1</A
> gives a translation of the object model into code. </P
><div class="example"><h4 class="example"><a class="title" name="ch07-24953">Example 7.1: Sample Object Implementation</A
></H4
><pre class="programlisting">package <b class="emphasis.bold">StoreItem</B
>;

my $_sales_tax = 8.5;  # 8.5% added to all components's post rebate price

sub new {
    my ($pkg, $name, $price, $rebate) = @_;
    bless {
       # Attributes are marked with a leading underscore, to signify that
       # they are private (just a convention)
        _name =&gt; $name, _price =&gt; $price, _rebate =&gt; $rebate
    }, $pkg;
}

# Accessor methods
sub sales_tax {shift; @_ ? $_sales_tax = shift : $_sales_tax}
sub name {my $obj = shift; @_ ? $obj-&gt;{_name} = shift : $obj-&gt;{_name}}
sub rebate {my $obj = shift; @_ ? $obj-&gt;{_rebate} = shift 
                                : $obj-&gt;{_rebate}}
sub price  {my $obj = shift; @_ ? $obj-&gt;{_price} = shift
                                : $obj-&gt;{_price} - $obj-&gt;_rebate}
}

sub net_price {
    my $obj = shift;
    return $obj-&gt;price * (1 + $obj-&gt;sales_tax / 100);
}
#--------------------------------------------------------------------------
package Component;
@ISA = qw(StoreItem);

#--------------------------------------------------------------------------
package Monitor;
@ISA = qw(Component);
# Hard-code prices and rebates for now
sub new { $pkg = shift; $pkg-&gt;SUPER::new(&quot;Monitor&quot;, 400, 15)}

#--------------------------------------------------------------------------
package CDROM;
@ISA = qw(Component);
sub new { $pkg = shift; $pkg-&gt;SUPER::new(&quot;CDROM&quot;, 200, 5)}

#--------------------------------------------------------------------------
package Computer;
@ISA = qw(StoreItem);

sub new {
    my $pkg = shift; 
    my $obj = $pkg-&gt;SUPER::new(&quot;Computer&quot;, 0, 0); # Dummy value for price
    $obj-&gt;{_components} = [];                     # list of components
    $obj-&gt;components(@_);
    $obj;
}

# Accessors
sub components {
    my $obj = shift;
    @_ ? push (@{$obj-&gt;{_components}}, @_)
       : @{$obj-&gt;{_components}};
}
sub price {
    my $obj = shift;
    my $price = 0;
    my $component;
    foreach $component ($obj-&gt;components()) {
        $price += $component-&gt;price();
    }
    $price;
}</PRE
></DIV
><p class="para">The design for change philosophy is in evidence here. All instance variables get accessor methods, which makes it possible for us to override <kbd class="command">price()</KBD
> in the <kbd class="command">Computer</KBD
> class. The <kbd class="command">Computer::components</KBD
> accessor method can now be changed at a later date to check for compatibility of different components. Even the package global variable <kbd class="command">$sales_tax</KBD
> is retrieved through an accessor method, because we expect that different components may later on get different sales taxes, so we ask the object for the sales tax.</P
><p class="para">Notice also that the constructors use <kbd class="command">SUPER</KBD
> to access their super classes' <kbd class="command">new</KBD
> routines. This way, if you create a <kbd class="command">Component::new</KBD
> tomorrow, none of the other packages need to be changed. <kbd class="command">StoreItem::new</KBD
> blesses the object into a package given to it; it does not hardcode its own package name. </P
><p class="para">If you put these packages into different files, recall from <a class="xref" href="ch06_01.htm" title="Modules">Chapter 6, <cite class="chapter">Modules</CITE
></A
>, that the files should have the <i class="filename">&lt;package name&gt;.pm</I
> naming convention. In addition, they should have a <kbd class="command">1;</KBD
> or <kbd class="command">return 1;</KBD
> as the last executing statement.<a class="indexterm" name="ch07-idx-969808-0"></A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch07_03.htm" title="7.3 UNIVERSAL"><img src="../gifs/txtpreva.gif" alt="Previous: 7.3 UNIVERSAL" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Advanced Perl Programming"><img src="../gifs/txthome.gif" alt="Advanced Perl Programming" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch07_05.htm#ch07-pgfId-969836" title="7.5 Comparison with Other OO Languages"><img src="../gifs/txtnexta.gif" alt="Next: 7.5 Comparison with Other OO Languages" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">7.3 UNIVERSAL</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">7.5 Comparison with Other OO Languages</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
