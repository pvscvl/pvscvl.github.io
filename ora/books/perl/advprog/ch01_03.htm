<html><head>
<title>[Chapter 1] 1.3 Nested Data Structures</TITLE>
<meta name="DC.title" content="Advanced Perl Programming"><meta name="DC.creator" content="Sriram Srinivasan"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:29:59Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-220-4" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch01_01.htm" title="1. Data References and Anonymous Storage"><link rel="prev" href="ch01_02.htm#ch01-12670" title="1.2 Using References"><link rel="next" href="ch01_04.htm" title="1.4 Querying a Reference"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Advanced Perl Programming" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,54" href="index.htm" alt="Advanced Perl Programming"><area shape="RECT" coords="467,0,514,18" href="../search/asrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch01_02.htm#ch01-12670" title="1.2 Using References"><img src="../gifs/txtpreva.gif" alt="Previous: 1.2 Using References" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch01_01.htm" title="1. Data References and Anonymous Storage">Chapter 1<br>Data References and Anonymous Storage</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch01_04.htm" title="1.4 Querying a Reference"><img src="../gifs/txtnexta.gif" alt="Next: 1.4 Querying a Reference" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch01-37579">1.3 Nested Data Structures</A
></H2
><p class="para"><a class="indexterm" name="ch01-idx-953711-0"></A
><a class="indexterm" name="ch01-idx-953711-1"></A
><a class="indexterm" name="ch01-idx-953711-2"></A
>Recall that arrays and hashes contain only scalars; they cannot directly contain another array or hash as such. But considering that references can refer to an array or a hash and that references are scalars, you can see how one or more elements in an array or hash can point to other arrays or hashes. In this section, we will study how to build nested, heterogeneous data structures.</P
><p class="para"><a class="indexterm" name="ch01-idx-953717-0"></A
><a class="indexterm" name="ch01-idx-953717-1"></A
>Let us say we would like to track a person's details and that of their dependents. One approach is to create separate <em class="emphasis">named</EM
> hash tables for each person:</P
><pre class="programlisting">%sue = (              # Parent
    'name' =&gt; 'Sue',
    'age'  =&gt; '45');
%john = (             # Child
    'name' =&gt; 'John',
    'age'  =&gt; '20');
%peggy = (            # Child
    'name' =&gt; 'Peggy',
    'age'  =&gt; '16');</PRE
><p class="para">The structures for John and Peggy can now be related to Sue like this:</P
><pre class="programlisting">@children = (\%john, \%peggy);
$sue{'children'} = \@children;

# Or
$sue{'children'} = [\%john, \%peggy];</PRE
><p class="para"><a class="xref" href="#ch01-28104" title="Mixing scalars with arrays and hashes.">Figure 1.2</A
> shows this structure after it has been built.</P
><h4 class="figure"><a class="title" name="ch01-28104">Figure 1.2: Mixing scalars with arrays and hashes.</A
></H4
><img class="graphic" src="figs/wpa_0102.gif" alt="Figure 1.2"><p class="para">This is how you can print Peggy's age, given <kbd class="command">%sue</KBD
>:</P
><pre class="programlisting">print $sue{children}-&gt;[1]-&gt;{age};</PRE
><div class="sect2"><h3 class="sect2"><a class="title" name="ch01-pgfId-951202">1.3.1 Implicit Creation of Complex Structures</A
></H3
><p class="para">Suppose the first line in your program is this: </P
><pre class="programlisting">$sue{children}-&gt;[1]-&gt;{age} = 10;</PRE
><p class="para">Perl automatically creates the hash <kbd class="command">%sue</KBD
>, gives it a hash element indexed by the string <code class="literal">children</CODE
>, points that entry to a newly allocated array, whose second element is made to refer to a freshly allocated hash, which gets an entry indexed by the string <code class="literal">age</CODE
>. Talk about programmer efficiency. </P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch01-pgfId-948957">1.3.2 Final Shortcut: Omit Arrows Between Subscripts</A
></H3
><p class="para"><a class="indexterm" name="ch01-idx-953724-0"></A
><a class="indexterm" name="ch01-idx-953724-1"></A
>While on the subject of programmer efficiency, let us discuss one more optimization for typing. You can omit -<kbd class="command">&gt;</KBD
> if (and only if) it is between subscripts. That is, the following expressions are identical:</P
><pre class="programlisting">print $sue{children}-&gt;[1]-&gt;{age};
print $sue{children}[1]{age};</PRE
><p class="para">This is similar to the way C implements <a class="indexterm" name="ch01-idx-953726-0"></A
><a class="indexterm" name="ch01-idx-953726-1"></A
>multidimensional arrays, in which every index except the last one behaves like a pointer to the next level (or dimension) and the final index corresponds to the actual data. The difference&nbsp;- which doesn't really matter at a usage level&nbsp;- between C's and Perl's approaches is that C treats an <em class="emphasis">n</EM
>-dimensional array as a contiguous stream of bytes and does not allocate space for pointers to subarrays, whereas Perl allocates space for references to intermediate single-dimension arrays.</P
><p class="para">Continuing from where we left off, you will find that even such a simple example benefits from using <em class="emphasis">anonymous</EM
><a class="indexterm" name="ch01-idx-953727-0"></A
><a class="indexterm" name="ch01-idx-953727-1"></A
><a class="indexterm" name="ch01-idx-953727-2"></A
><a class="indexterm" name="ch01-idx-953727-3"></A
> arrays and hashes, rather than named ones, as shown in the following snippet:</P
><pre class="programlisting">%sue = (                                    # Parent
    'name'     =&gt; 'Sue',
    'age'      =&gt; '45',
    'children' =&gt; [                         # Anon array of two hashes
                      {                     # Anon hash 1
                         'name' =&gt; 'John',
                         'age'  =&gt; '20'
                      },
                      {                     # Anon hash 2
                         'name' =&gt; 'Peggy',
                         'age'  =&gt; '16'
                      }
                  ]
);</PRE
><p class="para">This snippet of code contains only one named variable. The "children" attribute is a reference to an anonymous array, which itself contains references to anonymous hashes containing the children's details. This nesting can be as deep as you want; for example, you might represent John's educational qualifications as a reference to an anonymous array of hash records (each of which contain details of school attended, grade points, and so on). None of these arrays or hashes actually embed the next level hash or array; recall that the anonymous array and hash syntax yields references, which is what the containing structures see. In other words, such a nesting does not reflect a <em class="emphasis">containment</EM
> hierarchy. Try <kbd class="command">print values(%sue)</KBD
> to convince yourself.</P
><p class="para">It is comforting to know that Perl automatically deletes all nested structures as soon as the top-level structure (<kbd class="command">%sue</KBD
>) is deleted or reassigned to something else. Internal structures or elements that are are still referred to elsewhere aren't deleted.<a class="indexterm" name="ch01-idx-953714-0"></A
><a class="indexterm" name="ch01-idx-953714-1"></A
><a class="indexterm" name="ch01-idx-953714-2"></A
><a class="indexterm" name="ch01-idx-953714-3"></A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch01_02.htm#ch01-12670" title="1.2 Using References"><img src="../gifs/txtpreva.gif" alt="Previous: 1.2 Using References" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Advanced Perl Programming"><img src="../gifs/txthome.gif" alt="Advanced Perl Programming" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch01_04.htm" title="1.4 Querying a Reference"><img src="../gifs/txtnexta.gif" alt="Next: 1.4 Querying a Reference" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">1.2 Using References</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">1.4 Querying a Reference</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
