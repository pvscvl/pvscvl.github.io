<html><head>
<title>[Chapter 14] 14.6 Event Bindings</TITLE>
<meta name="DC.title" content="Advanced Perl Programming"><meta name="DC.creator" content="Sriram Srinivasan"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:39:11Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-220-4" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch14_01.htm" title="14. User Interfaces with Tk"><link rel="prev" href="ch14_05.htm" title="14.5 Timers"><link rel="next" href="ch14_07.htm" title="14.7 Event Loops"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Advanced Perl Programming" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,54" href="index.htm" alt="Advanced Perl Programming"><area shape="RECT" coords="467,0,514,18" href="../search/asrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch14_05.htm" title="14.5 Timers"><img src="../gifs/txtpreva.gif" alt="Previous: 14.5 Timers" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch14_01.htm" title="14. User Interfaces with Tk">Chapter 14<br>User Interfaces with Tk</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch14_07.htm" title="14.7 Event Loops"><img src="../gifs/txtnexta.gif" alt="Next: 14.7 Event Loops" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch14-26608">14.6 Event Bindings</A
></H2
><p class="para">An <a class="indexterm" name="ch14-idx-1000888-0"></A
><a class="indexterm" name="ch14-idx-1000888-1"></A
><a class="indexterm" name="ch14-idx-1000888-2"></A
>event binding associates a <a class="indexterm" name="ch14-idx-1000898-0"></A
>callback function with any type of event. You have already seen instances of event bindings&nbsp;- the button widget's <kbd class="command">command</KBD
> property arranges for a user-defined procedure to be called on a mouse click, for example. The <kbd class="command">bind()</KBD
><a class="indexterm" name="ch14-idx-1000899-0"></A
> command provides a more general (and hence low-level) access to the most fundamental events such as keyboard and mouse button presses and releases. (A mouse click is a press and release, so we are talking about really low-level events here.) Other "interesting" event types include mouse motion, the mouse pointer entering or leaving a window, and windows getting mapped or resized on the display. All widgets themselves rely on the <kbd class="command">bind</KBD
> method for their own functionality, and allow you to create extra bindings yourself. The bound procedure executes if the event you're tracking happens inside that widget or is related to that widget (such as a window resize). </P
><p class="para">The syntax of bind is as follows:</P
><pre class="programlisting">$widget-&gt;bind(<code class="replaceable"><i>event sequence, callback</I
></CODE
>);</PRE
><p class="para">The event sequence is a string containing a sequence of basic events, with each basic event contained in angle brackets. Examples of event sequences are as follows:</P
><pre class="programlisting">&quot;&lt;a&gt;&quot;                   # Key &quot;a&quot; pressed (Control/shift/meta not
                        # pressed)
&quot;&lt;Control-a&gt;            # Control and a pressed
&quot;&lt;Escape&gt; &lt;Control-a&gt;&quot;  # Two-event sequence
&quot;&lt;Button1&gt;&quot;             # Mouse button 1 clicked
&quot;&lt;Button1-Motion&gt;&quot;      # Mouse moves while Button 1 is down</PRE
><p class="para">A single event (within angle brackets) has the following generic syntax:</P
><pre class="programlisting">&quot;&lt;<code class="replaceable"><i>modifier-modifier...-modifier-type-detail</I
></CODE
>&gt;&quot; </PRE
><p class="para">Examples of <i class="firstterm">modifiers</I
><a class="indexterm" name="ch14-idx-1000901-0"></A
><a class="indexterm" name="ch14-idx-1000901-1"></A
> are <code class="literal">Control</CODE
>, <code class="literal">Meta</CODE
>, <code class="literal">Alt</CODE
>, <code class="literal">Shift</CODE
>, <code class="literal">Button1</CODE
> (or <code class="literal">B1</CODE
>), <code class="literal">Button2</CODE
>, <code class="literal">Double</CODE
> (double click), and <code class="literal">Triple</CODE
>. The modifier <code class="literal">Any</CODE
> is a wildcard&nbsp;- all possible modifiers (including none of them) match the basic event.</P
><p class="para">The <i class="firstterm">type</I
> of the event is one of <kbd class="command">KeyPress</KBD
>, <kbd class="command">KeyRelease</KBD
>, <kbd class="command">ButtonPress</KBD
> (or <kbd class="command">Button</KBD
>), <kbd class="command">ButtonRelease</KBD
>, <kbd class="command">Enter</KBD
>, <kbd class="command">Leave</KBD
>, and <kbd class="command">Motion</KBD
>. </P
><p class="para">For <a class="indexterm" name="ch14-idx-1000900-0"></A
>keyboard event specifications, the <i class="firstterm">detail</I
> is a textual string describing the exact key. X Windows calls this a <em class="emphasis">keysym</EM
>. For printable ASCII characters, the keysym is the printed character itself. Other examples of keysyms are <kbd class="command">Enter</KBD
>, <kbd class="command">Right</KBD
>, <kbd class="command">Pickup</KBD
>, <kbd class="command">Delete</KBD
>, <kbd class="command">BackSpace</KBD
>, <kbd class="command">Escape</KBD
>, <kbd class="command">Help</KBD
>, <kbd class="command">F1</KBD
> (function key), and so on.</P
><p class="para">The most common event types are key presses and button clicks, so Tk allows an abbreviated form of binding: instead of saying <kbd class="command">&lt;KeyPress-a&gt;</KBD
>, you can say, <kbd class="command">&lt;a&gt;</KBD
>; instead of writing <kbd class="command">&lt;Button1-ButtonPress&gt;</KBD
>, you can say, <kbd class="command">&lt;1&gt;</KBD
>.</P
><p class="para">The text and canvas widgets support bindings at a finer level of granularity. They support event bindings for different tags in addition to bindings for the widget itself. <kbd class="command">bind</KBD
> allows you to specify the name of the tag as the first parameter and the event sequence and callback as the second and third parameters, respectively:</P
><pre class="programlisting">$text-&gt;bind('hyper-link', '&lt;1&gt;', \&amp;open_page);</PRE
><p class="para">This code ensures that any stretch of text tagged with "hyper-link" will respond to a button click event and call the procedure <kbd class="command">open_page</KBD
>.</P
><div class="sect2"><h3 class="sect2"><a class="title" name="ch14-pgfId-996204">14.6.1 Multiple Bindings</A
></H3
><p class="para"><a class="indexterm" name="ch14-idx-1000902-0"></A
><a class="indexterm" name="ch14-idx-1000902-1"></A
>It is possible to have several bindings to respond to the same event. For example, when a mouse button is pressed, both <kbd class="command">&lt;Button1&gt;</KBD
> and <kbd class="command">&lt;Double-Button1&gt;</KBD
> are candidates. If there's a conflict for a given widget (or tag), the rule is that the most specific binding is called. <kbd class="command">&lt;Double-Button1&gt;</KBD
> is more specific than <kbd class="command">&lt;Button1&gt;</KBD
>, since it is a longer specification.</P
><p class="para">In addition to matching the most specific binding at the widget level, Tk matches the most specific bindings at the class level (the class that represents all buttons, for example), then at the widget's top level, then at a level called "all." All four categories of bindings are executed. This order itself can be changed using the <kbd class="command">bindtags()</KBD
> method, but I recommend that you avoid doing this.</P
><p class="para">Although Tk allows you to change default widget bindings, I recommend that you don't modify them because people get used to them working in a certain way. For example, a double-click inside a text widget usually selects the word under the mouse pointer, and it would be quite disconcerting for a user if you happened to change that behavior. On the other hand, there are plenty of other places where you can, and need to, add your own bindings. Canvas and text widget tags are the most frequent target of event bindings, as we shall see in the next two chapters.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch14-pgfId-996207">14.6.2 Event Details</A
></H3
><p class="para">We have seen how to specify an event accurately. There are times when we do exactly the opposite&nbsp;- make the event specifier most general, such as <kbd class="command">&lt;Any-KeyPress&gt;</KBD
>. For instance, you probably don't want to specify a unique binding for each character on the keyboard. But when a key is pressed, the callback might like to know which key was pressed. This is where <a class="indexterm" name="ch14-idx-1000903-0"></A
>event details come in.</P
><p class="para">Each event carries with it all the details related to that event, and the function <kbd class="command">Ev()</KBD
><a class="indexterm" name="ch14-idx-1000904-0"></A
> is used to get at those details. The parameter to <kbd class="command">Ev()</KBD
> is a single character that specifies the part of the event record you are interested in. <kbd class="command">Ev('k')</KBD
> specifies the keycode, <kbd class="command">Ev('x')</KBD
> and <kbd class="command">Ev('y')</KBD
> specify the <em class="emphasis">x</EM
> and <em class="emphasis">y</EM
> coordinates of the mouse pointer, and <kbd class="command">Ev('t')</KBD
> specifies the time of the event. There are over 30 such parameters to <kbd class="command">Ev</KBD
>. The following example shows how you can use this facility:</P
><pre class="programlisting">$label-&gt;bind(&quot;&lt;Any-KeyPress&gt;&quot; =&gt; [\&amp;move, Ev('k')]);
sub move {
    my $key = shift;
    if ($key eq 'k') {
       move_left();
    } elsif ($key eq 'l') {
       move_right();
    }
}</PRE
><p class="para">In this example, the <kbd class="command">bind</KBD
> specification registers its interest in key events and specifies that it wants the keycode supplied to the callback procedure whenever it is invoked. <a class="indexterm" name="ch14-idx-1000890-0"></A
><a class="indexterm" name="ch14-idx-1000890-1"></A
><a class="indexterm" name="ch14-idx-1000890-2"></A
><a class="indexterm" name="ch14-idx-1000890-3"></A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch14_05.htm" title="14.5 Timers"><img src="../gifs/txtpreva.gif" alt="Previous: 14.5 Timers" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Advanced Perl Programming"><img src="../gifs/txthome.gif" alt="Advanced Perl Programming" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch14_07.htm" title="14.7 Event Loops"><img src="../gifs/txtnexta.gif" alt="Next: 14.7 Event Loops" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">14.5 Timers</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">14.7 Event Loops</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
