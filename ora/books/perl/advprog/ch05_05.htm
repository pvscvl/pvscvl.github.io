<html><head>
<title>[Chapter 5] 5.5 Using Eval for Efficiency</TITLE>
<meta name="DC.title" content="Advanced Perl Programming"><meta name="DC.creator" content="Sriram Srinivasan"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:32:42Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-220-4" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch05_01.htm" title="5. Eval"><link rel="prev" href="ch05_04.htm#ch05-pgfId-947223" title="5.4 Using Eval for Expression Evaluation"><link rel="next" href="ch05_06.htm" title="5.6 Using Eval for Time-Outs"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Advanced Perl Programming" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,54" href="index.htm" alt="Advanced Perl Programming"><area shape="RECT" coords="467,0,514,18" href="../search/asrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch05_04.htm#ch05-pgfId-947223" title="5.4 Using Eval for Expression Evaluation"><img src="../gifs/txtpreva.gif" alt="Previous: 5.4 Using Eval for Expression Evaluation" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch05_01.htm" title="5. Eval">Chapter 5<br>Eval</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch05_06.htm" title="5.6 Using Eval for Time-Outs"><img src="../gifs/txtnexta.gif" alt="Next: 5.6 Using Eval for Time-Outs" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="ch05-39060">5.5 Using Eval for Efficiency</A
></H2
><p class="para"><a class="indexterm" name="ch05-idx-951194-0"></A
><a class="indexterm" name="ch05-idx-951194-1"></A
><a class="indexterm" name="ch05-idx-951194-2"></A
>Here are some examples where run-time evaluation can greatly speed up execution.</P
><div class="sect2"><h3 class="sect2"><a class="title" name="ch05-pgfId-951102">5.5.1 A Fast Multipattern grep</A
></H3
><p class="para"><a class="indexterm" name="ch05-idx-951250-0"></A
><a class="indexterm" name="ch05-idx-951250-1"></A
><a class="indexterm" name="ch05-idx-951250-2"></A
><a class="indexterm" name="ch05-idx-951250-3"></A
>Consider a <em class="emphasis">grep</EM
>-like Perl script that can search for any number of patterns and print out only those lines that match <em class="emphasis">all</EM
> the given patterns (the order of the patterns being unimportant). You might structure the code like this:</P
><pre class="programlisting">while ($s = &lt;&gt;) {
    $all_matched = 1;     # start by assuming all patterns match $s
    foreach $pat (@patterns) {
       if ($s !~ /$pat/) {
            $all_matched = 0; # No, our assumption was wrong
            last;
        }
    }
    print $s if $all_matched;
}</PRE
><p class="para">The problem with this code is that the regular expression (/<kbd class="command">$pat/</KBD
>) is compiled afresh for every line and for every pattern. That is, if you have, say, 10,000 lines in the text to be searched, and three patterns to search for, <kbd class="command">a.*b</KBD
>, <kbd class="command">[0-9]</KBD
>, and <kbd class="command">[^def]</KBD
>, the patterns will be compiled 30,000 times. The <kbd class="command">/o</KBD
> flag, which tells Perl to compile the regular expression, cannot be used here because <kbd class="command">$pat</KBD
> can vary as the program executes.</P
><p class="para">The fastest approach would be to hardcode the patterns as shown next. Unfortunately, it is also the least reusable approach.</P
><pre class="programlisting">while ($s = &lt;&gt; ) {
    if (  ($s =~ /a.*b/) &amp;&amp;
          ($s =~ /[0-9]$/) &amp;&amp;
          ($s =~ /[^def]/)) {
        print $s;
    }
}</PRE
><p class="para">The good news is that it is possible to get this level of efficiency without losing generality. The idea is to hand-craft the "hard-wired" code above at run-time and then to <kbd class="command">eval</KBD
> it. </P
><p class="para">The strings constituting the code to be generated are shown in bold in <a class="xref" href="#ch05-35396" title="Compiling Regular Expression Strings for Blazing Speed">Example 5.2</A
>.</P
><div class="example"><h4 class="example"><a class="title" name="ch05-35396">Example 5.2: Compiling Regular Expression Strings for Blazing Speed</A
></H4
><pre class="programlisting">$code = '<b class="emphasis.bold">while (&lt;&gt;) {</B
>'; 
$code .= '<b class="emphasis.bold">if (/</B
>';
$code .= join ('<b class="emphasis.bold">/ &amp;&amp; /</B
>', @patterns);
$code .= '<b class="emphasis.bold">/) {print $_;}}</B
>';
print $code, &quot;\n&quot;;
eval $code;   # Ahh, finally !
# Check if faulty regular expressions given as input patterns
die &quot;Error ---: $@\n Code:\n$code\n&quot;    if ($@);</PRE
></DIV
><p class="para">If <kbd class="command">@patterns</KBD
> contains the three strings "<kbd class="command">^abc</KBD
>", "<kbd class="command">ghi</KBD
>", "<kbd class="command">efg$</KBD
>", for example, the code supplied to <kbd class="command">eval</KBD
> looks like this:</P
><pre class="programlisting">while (&lt;&gt;) {if (/^foo/ &amp;&amp; /bar$/ &amp;&amp; /ghi/) {print $_;}}</PRE
><p class="para">One way to make this example even more efficient is to sort the patterns such that those patterns with beginning- or end-of-line markers (<kbd class="command">^</KBD
> and <kbd class="command">$</KBD
>) are evaluated first. It is much faster to check for a pattern anchored to the beginning or end of the line than to search all over the string. Another enhancement to make is for the user to supply the Boolean operator instead of hardcoding <kbd class="command">&amp;&amp;</KBD
>. See the <i class="filename">perlfaq6</I
> document (FAQ on regular expressions) that is bundled with the Perl distribution.<a class="indexterm" name="ch05-idx-951247-0"></A
><a class="indexterm" name="ch05-idx-951247-1"></A
><a class="indexterm" name="ch05-idx-951247-2"></A
><a class="indexterm" name="ch05-idx-951247-3"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="ch05-pgfId-943315">5.5.2 Extracting Columns from a File</A
></H3
><p class="para"><a class="indexterm" name="ch05-idx-951259-0"></A
><a class="indexterm" name="ch05-idx-951259-1"></A
>Let us look at another example that builds and evaluates Perl code dynamically, for efficiency. We build a program called <kbd class="command">col</KBD
>, which extracts columns from a file, similar to the Unix <kbd class="command">cut(1)</KBD
> command. It is invoked as shown below:</P
><pre class="programlisting">% col -s80 8-14 20+8 test.dat</PRE
><p class="para">This invocation treats <em class="emphasis">test.dat</EM
> as a fixed-format file with 80-column records and extracts two columns from each record, one starting at character position 8 and ending at 14 (the index of the leftmost column is 1, not 0) and the other going from 20 through 28, as shown in <a class="xref" href="#ch05-16400" title="Using col for extracting columns">Figure 5.2</A
>. If the <em class="emphasis">-s</EM
> option is not given, the script treats newlines as record terminators and reads the file line by line. <code class="literal">col </CODE
>allows column ranges to overlap.</P
><h4 class="figure"><a class="title" name="ch05-16400">Figure 5.2: Using col for extracting columns</A
></H4
><img class="graphic" src="figs/wpa_0502.gif" alt="Figure 5.2"><p class="para">You already know that <kbd class="command">substr</KBD
><a class="indexterm" name="ch05-idx-951253-0"></A
> extracts substrings given a starting location and the substring length. Writing <kbd class="command">col</KBD
> is a simple matter of calling <kbd class="command">substr</KBD
> in a loop, once for each range given on the command line:</P
><pre class="programlisting">for each line in the file {
     for each column range in the command line arguments {
         print substr (line, range);
     }
}</PRE
><p class="para">As an aside, we don't use <kbd class="command">unpack</KBD
> instead of <kbd class="command">substr</KBD
> because we would like the input ranges to overlap. </P
><p class="para">A more efficient alternative to the preceding solution is to "flatten the loop" and use constants wherever possible, as shown in the following code snippet (for the specific command-line invocation above). For each record read from a file, this code extracts the substring indicated by input range and pads it with spaces as necessary. It also appends a delimiter ("|") to each extracted column.</P
><pre class="programlisting">#PART 1 ---------------------------------------------------------
sub col {
   my $tmp;
   while (1) {
      $s = get_next_line();
      $col = &quot;&quot;;

#PART 2 ----------------------------------------------------------
      $s .= ' ' x (14 - length($s))  if (length($s) &lt; 14);
      $tmp = substr($s, 7, 7);
      $tmp .= &quot; &quot; x (7 - length($tmp));
      $col .= '|' . $tmp;
      $s .= ' ' x (28 - length($s))    if (length($s) &lt; (28));
      $tmp = substr($s, 19, 9);
      $tmp .= &quot; &quot; x (9 - length($tmp));
      $col .= '|' . $tmp;

#PART 3 ----------------------------------------------------------
      print $col, &quot;\n&quot;;
   }
}</PRE
><p class="para"><kbd class="command">$tmp</KBD
> contains one column at any time, and <kbd class="command">$col</KBD
> accumulates each such column to be output and is finally printed. </P
><p class="para">Given the command line as shown, let's compose this subroutine at run-time. Notice that parts 1 and 3 are independent of the command-line arguments. Part 2, which extracts all the columns in each line, is the only one that is shaped by command-line arguments.</P
><p class="para">As was mentioned earlier, you must watch your quotes carefully. Assume that <kbd class="command">$col1</KBD
> and <kbd class="command">$offset</KBD
> hold 7 and 6, respectively, so that we need to insert this line of code into our executable string:</P
><pre class="programlisting">$tmp = substr($s, 7, 6); </PRE
><p class="para">Here is how we can generate this line:</P
><pre class="programlisting">$code = '$tmp = substr($s, ' . &quot;$col1, $offset)&quot;;</PRE
><p class="para">Note how we use single and double quotes to carefully control variable interpolation. <a class="xref" href="#ch05-33772" title="col: A Script to Extract Columns from a File">Example 5.3</A
> shows the three parts being generated by <kbd class="command">generate_part1</KBD
>, <kbd class="command">generate_part2</KBD
>, and <kbd class="command">generate_part3</KBD
>. The subroutine <kbd class="command">get_next_line</KBD
> converts tabs to equivalent spaces to preserve the visual effect of a tab. <kbd class="command">generate_part3</KBD
> also <kbd class="command">evals</KBD
> this generated code and introduces the new subroutine <kbd class="command">col</KBD
>. As before, the strings representing the code are  shown in bold lettering.</P
><div class="example"><h4 class="example"><a class="title" name="ch05-33772">Example 5.3: col: A Script to Extract Columns from a File</A
></H4
><pre class="programlisting"># Extracts columns of text from a file
# Usage : col [-s&lt;n&gt;] col-range1, col-range2, files ...
# where col-range is specified as col1-col2 (column 1 through column2) 
#         or col1+n, where n is the number of columns.
$size = 0;          # 0 =&gt; line-oriented input, else fixed format.
@files = ();        # List of files
$open_new_file = 1; # force get_next_line() to open the first file
$debugging = 0;     # Enable with -d commmand line flag
$col = &quot;&quot;; 
$code = &quot;&quot;;
generate_part1();  
generate_part2();
generate_part3();
col();           # sub col has now been generated. Call it !
exit(0);


#------------------------------------------------------------------
sub generate_part1 {
    # Generate the initial invariant code of sub col()
    $code  = '<b class="emphasis.bold">sub col { my $tmp;</B
>';           # Note the single quotes
    $code .= '<b class="emphasis.bold">while (1) {$s = get_next_line(); $col = &quot;&quot;;</B
>';
    $delimiter = '|';
}

#------------------------------------------------------------------
sub generate_part2 {
    # Process arguments
    my ($col1, $col2);
    foreach $arg (@ARGV) {
        if (($col1, $col2) = ($arg =~ /^(\d+)-(\d+)/)) {
            $col1--;# Make it 0 based
            $offset = $col2 - $col1;
            add_range($col1, $offset);
        } elsif (($col1, $offset) = ($arg =~ /^(\d+)\+(\d+)/)) {
            $col1--;
            add_range($col1, $offset);
        } elsif ($size = ($arg =~ /-s(\d+)/)) {
            # noop
        } elsif ($arg =~ /^-d/) {
            $debugging = 1;
        } else {
            # Must be a file name
            push (@files, $arg);
        }
    }
}

#------------------------------------------------------------------
sub generate_part3 {
    $code .= '<b class="emphasis.bold">print $col, &quot;\n&quot;;}}</B
>';

    print $code if $debugging; # -d flag enables debugging.
    eval $code;
    if ($@) {
        die &quot;Error ...........\n $@\n $code \n&quot;;
    }
}

#------------------------------------------------------------------
sub add_range { 
    my ($col1, $numChars) = @_;
    # substr complains (under -w) if we look past the end of a string
    # To prevent this, pad the string with spaces if necessary.
    $code .= &quot;<b class="emphasis.bold">\$s .= ' ' x ($col1 + $numChars - length(\$s))</B
>&quot;;
    $code .= &quot;<b class="emphasis.bold">    if (length(\$s) &lt; ($col1+$numChars)
);</B
>&quot;;
    $code .= &quot;<b class="emphasis.bold">\$tmp = substr(\$s, $col1, $numChars);</B
>&quot;;
    $code .= '<b class="emphasis.bold">$tmp .= &quot; &quot; x (' . $numChars .  ' - length($tmp));</B
>';
    $code .= &quot;<b class="emphasis.bold">\$col .= '$delimiter' . \$tmp; </B
>&quot;;
}

#------------------------------------------------------------------
sub get_next_line {
    my($buf);

  NEXTFILE:
    if ($open_new_file) {
        $file = shift @files || exit(0);
        open (F, $file) || die &quot;$@ \n&quot;;
        $open_new_file = 0;
    }
    if ($size) {
        read(F, $buf, $size);
    } else {
        $buf = &lt;F&gt;;
    }
    if (! $buf) {
        close(F);
        $open_new_file = 1;
        goto NEXTFILE;
    }
    chomp($buf);
    # Convert tabs to spaces (assume tab stop width == 8)

    # expand leading tabs first--the common case
    $buf =~ s/^(\t+)/' ' x (8 * length($1))/e;

    # Now look for nested tabs. Have to expand them one at a time - hence
    # the while loop. In each iteration, a tab is replaced by the number of
    # spaces left till the next tab-stop. The loop exits when there are
    # no more tabs left
    1 while ($buf =~ s/\t/' ' x (8 - length($`)%8)/e);

    $buf;
}</PRE
></DIV
><p class="para"><kbd class="command">get_next_line</KBD
> uses the substitute operator's <kbd class="command">/e</KBD
> option to remove tabs. Can you guess why we have to use the <kbd class="command">while</KBD
> loop instead of the <kbd class="command">/g</KBD
> option? The reason is that to expand a tab to the correct number of spaces, we have to know where the tab and the next tab stop are located. This means we have to know the number of characters from the beginning of the line to the tab, which is obtained by computing <kbd class="command">length($`)</KBD
>. In the next iteration, this length needs to account for the previously expanded tab. While <kbd class="command">/g</KBD
> does a global replace, it never revisits a substituted portion (that is, it always moves forward), with the result that by using this option, you can never find out how long the partially substituted string is at any point. Instead, we use the <code class="literal">while</CODE
> loop to traverse the string from the beginning for each tab<a class="indexterm" name="ch05-idx-951255-0"></A
><a class="indexterm" name="ch05-idx-951255-1"></A
> found.<a class="indexterm" name="ch05-idx-951197-0"></A
><a class="indexterm" name="ch05-idx-951197-1"></A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch05_04.htm#ch05-pgfId-947223" title="5.4 Using Eval for Expression Evaluation"><img src="../gifs/txtpreva.gif" alt="Previous: 5.4 Using Eval for Expression Evaluation" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Advanced Perl Programming"><img src="../gifs/txthome.gif" alt="Advanced Perl Programming" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch05_06.htm" title="5.6 Using Eval for Time-Outs"><img src="../gifs/txtnexta.gif" alt="Next: 5.6 Using Eval for Time-Outs" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">5.4 Using Eval for Expression Evaluation</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">5.6 Using Eval for Time-Outs</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
