<html><head>
<title>[Chapter 10] Persistence</TITLE>
<meta name="DC.title" content="Advanced Perl Programming"><meta name="DC.creator" content="Sriram Srinivasan"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-07-02T01:35:20Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-220-4" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="index.htm" title="Advanced Perl Programming"><link rel="prev" href="ch09_06.htm#ch09-pgfId-949110" title="9.6 Comparisons with Other Languages"><link rel="next" href="ch10_02.htm#ch10-pgfId-976240" title="10.2 Streamed Data"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Advanced Perl Programming" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,54" href="index.htm" alt="Advanced Perl Programming"><area shape="RECT" coords="467,0,514,18" href="../search/asrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch09_06.htm#ch09-pgfId-949110" title="9.6 Comparisons with Other Languages"><img src="../gifs/txtpreva.gif" alt="Previous: 9.6 Comparisons with Other Languages" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 10</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch10_02.htm#ch10-pgfId-976240" title="10.2 Streamed Data"><img src="../gifs/txtnexta.gif" alt="Next: 10.2 Streamed Data" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="chapter"><h1 class="chapter"><a class="title" name="ch10-17210">10. Persistence</A
></H1
><div class="htmltoc"><p><b>Contents:</B
><br><a class="sect1" href="#ch10-22576" title="10.1 Persistence Issues">Persistence Issues</A
><br><a class="sect1" href="ch10_02.htm#ch10-pgfId-976240" title="10.2 Streamed Data">Streamed Data</A
><br><a class="sect1" href="ch10_03.htm#ch10-pgfId-977293" title="10.3 Record-Oriented Approach">Record-Oriented Approach</A
><br><a class="sect1" href="ch10_04.htm" title="10.4 Relational Databases">Relational Databases</A
><br><a class="sect1" href="ch10_05.htm" title="10.5 Resources">Resources</A
></P
><p></P
></DIV
><div class="epigraph" align="right"><p class="para" align="right"><i>There must be at least 500,000,000 rats in the United States. Of course, I'm speaking only from memory.</I
></P
><p class="attribution" align="right">-&nbsp;Edgar Wilson Nye</P
></DIV
><p class="para"><a class="indexterm" name="ch10-idx-982582-0"></A
>It would be an ideal world indeed if we never had to worry about fatal bugs or power failures.[<a class="footnote" href="#ch10-pgfId-978661">1</A
>] For now, we have to contend with the fact that the attention span of a computer is only as long as its cord and that our data is too precious to be left within the confines of electronic memory. The ability of a system or module to make an application's data live longer than its application is called <em class="emphasis">persistence</EM
>.[<a class="footnote" href="#ch10-pgfId-981204">2</A
>]</P
><blockquote class="footnote"><div class="footnote"><p class="para"><a class="footnote" name="ch10-pgfId-978661">[1]</A
> Or end-users, as a letter to <em class="emphasis">Byte</EM
> magazine once complained!</P
></DIV
><div class="footnote"><p class="para"><a class="footnote" name="ch10-pgfId-981204">[2]</A
> We'll use the term "system" to mean a C implementation, such as a DBM library or a database, and "module" to refer to a Perl module.</P
></DIV
></BLOCKQUOTE
><p class="para">Considering that databases amount to a multi-billion-dollar industry and that DBI (Database Interface) and associated Perl modules are next only to CGI in CPAN's download statistics, it would not be a stretch to say that persistence is the most important of all technologies. In this chapter, we first study the myriad factors to be considered in making our data persistent; we then play with most of the freely available Perl persistence modules and hold them up against the checklist of factors, to clearly understand their strengths and weaknesses and what they provide and where they expect the developer to step in. In the next chapter, we will use some of these modules to create an object persistence framework to store an object transparently in files and databases.</P
><div class="sect1"><h2 class="sect1"><a class="title" name="ch10-22576">10.1 Persistence Issues</A
></H2
><p class="para">Data ranges from simple comma-delimited records to complex self-referential structures. Users vary in level of paranoia and their ability (and need) to share persistent data. Application programmers attempt to juggle between solutions that are varying combinations of simple, robust, and efficient. The following list examines these differences in a slightly greater detail: </P
><dl class="variablelist"><dt class="term">Serialization</DT
><dd class="listitem"><p class="para"><a class="indexterm" name="ch10-idx-982586-0"></A
>Ordinary arrays and hashes can be written to a file using tabs, commas, and so on. Nested structures such as arrays of hashes or arrays of arrays have to be flattened, or <em class="emphasis">serialized</EM
>, before they can be dumped into a file. If you have ever packed the wiring for your holiday lights, you know that not only do you have to strive for a tight packing, you have to do it in a way that it can be easily and efficiently unscrambled the next time you need to use it. Further, data items can be typeglobs, can contain pointers to native C data structures, or can be references to other data items (making the structures cyclic or self-referential). In this chapter, we will study three modules that serialize data: FreezeThaw, Data::Dumper, and Storable.</P
></DD
><dt class="term">Boundaries</DT
><dd class="listitem"><p class="para"><a class="indexterm" name="ch10-idx-982589-0"></A
>Ordinary files, being byte streams, neither offer nor impose any kind of boundaries; you have to decide how you keep each data item distinct and recognizable on disk. DBM and ISAM systems impose a record-oriented structure. Relational databases provide record and column boundaries; if your data can be slotted into such a grid structure, you are in luck; otherwise, you have what is commonly called an "<a class="indexterm" name="ch10-idx-982588-0"></A
>impedance mismatch." Newer technologies, such as object-relational and object-oriented databases, attempt to make this "restriction" or "failure" a nonissue.[<a class="footnote" href="#ch10-pgfId-979917">3</A
>]</P
><blockquote class="footnote"><div class="footnote"><p class="para"><a class="footnote" name="ch10-pgfId-979917">[3]</A
> E.F. Codd, considered the father of relational database theory, has constantly maintained that this mismatch is not an inherent part of the theory itself; it is an artifact of the RDBMS implementation technology. </P
></DIV
></BLOCKQUOTE
></DD
><dt class="term">Concurrency</DT
><dd class="listitem"><p class="para"><a class="indexterm" name="ch10-idx-982587-0"></A
>Multiple applications or users may want concurrent access to persistent data stores. Some systems ignore this issue altogether; others offer different types of locking schemes.</P
></DD
><dt class="term">Access privileges</DT
><dd class="listitem"><p class="para"><a class="indexterm" name="ch10-idx-982590-0"></A
>Most persistence solutions leave it to the operating system to enforce file-level privileges (create, update, read, or delete). Databases offer a finer level of access restriction. </P
></DD
><dt class="term">Random access and insertion</DT
><dd class="listitem"><p class="para"><a class="indexterm" name="ch10-idx-982596-0"></A
>Databases make it easy to insert a new record or update a single attribute. With streams, you have no option but to serialize and rewrite the entire data into the file. </P
></DD
><dt class="term">Queries</DT
><dd class="listitem"><p class="para"><a class="indexterm" name="ch10-idx-982591-0"></A
>DBM and ISAM files allow you to selectively fetch records on the basis of the primary key, and databases allow you to selectively fetch records on the basis of any field. The more data you have, the less you can afford the luxury of examining each record to see whether it matches your criteria.</P
></DD
><dt class="term">Transactions</DT
><dd class="listitem"><p class="para"><a class="indexterm" name="ch10-idx-982592-0"></A
>Important commercial applications require "ACID" properties from persistence solutions [<a class="xref" href="ch10_05.htm" title="">3</A
>]:</P
><dl class="variablelist"><dd class="listitem"><p class="para"><a class="listitem" name="ch10-pgfId-978956"></A
><em class="emphasis">Atomicity </EM
>: A series of actions that happen as one unit or not at all.</P
></DD
><dd class="listitem"><p class="para"><a class="listitem" name="ch10-pgfId-978962"></A
><em class="emphasis">Consistency </EM
>:<em class="emphasis"> </EM
>The transaction must leave the system in a consistent state. Consistency is the responsibility of the application; a transaction monitor or a database knows nothing about specific application domains to judge what is consistent and what is not. </P
></DD
><dd class="listitem"><p class="para"><a class="listitem" name="ch10-pgfId-978963"></A
><em class="emphasis">Isolation</EM
>:<em class="emphasis"> </EM
>Reads and writes from independent transactions must be isolated from each other; the result should be identical to what would result if the applications were forced to operate on the data in serial order, one at a time.</P
></DD
><dd class="listitem"><p class="para"><a class="listitem" name="ch10-pgfId-978972"></A
><em class="emphasis">Durability </EM
>: Once a transaction finishes, its results must be firmly committed to disk. </P
></DD
></DL
><p class="para">Currently, only databases provide this facility, and there are very few transactional file systems going around. The 2.0 release of the Berkeley DB library provides concurrency, transactions, and recovery, but the Perl wrappers have not been updated to take advantage of it, as of this writing.</P
></DD
><dt class="term">Meta-data</DT
><dd class="listitem"><p class="para"><a class="indexterm" name="ch10-idx-982593-0"></A
>If you have access to information that describes your data&nbsp;- <em class="emphasis">meta-data</EM
>&nbsp;- you can afford to hardcode less. Databases make meta-data explicitly available, while the other solutions simply translate from disk to in-memory Perl structures and let Perl provide the meta-information.</P
></DD
><dt class="term">Machine independence</DT
><dd class="listitem"><p class="para"><a class="indexterm" name="ch10-idx-982594-0"></A
><a class="indexterm" name="ch10-idx-982594-1"></A
>You may want to retrieve data from a file that has been created on a different type of machine. You have to contend with differences in integer and floating-point representation: size as well as byte order. </P
></DD
><dt class="term">Portability and transparency</DT
><dd class="listitem"><p class="para"><a class="indexterm" name="ch10-idx-982595-0"></A
><a class="indexterm" name="ch10-idx-982595-1"></A
>Finally, requirements change, and an application that accounts for some of the factors listed above may have to account for more factors&nbsp;- or worse, a different set of factors. There have been several attempts to provide a layer of uniformity between different solutions; for example, DBI and ODBC are two efforts that specify a consistent API across competing relational database implementations. We will be more ambitious in the next chapter: we will build ourselves a set of modules that hide the API differences between file and database storage. It is a fact that the more transparency you look for, the more of an impact there is on performance.</P
></DD
></DL
><p class="para">In the following pages we examine a variety of Perl modules that enable us to persistently store our data. We classify them by the boundary constraints:  streamed (no boundaries), record-oriented, and grid-oriented (relational databases).</P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="sect1" href="ch09_06.htm#ch09-pgfId-949110" title="9.6 Comparisons with Other Languages"><img src="../gifs/txtpreva.gif" alt="Previous: 9.6 Comparisons with Other Languages" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Advanced Perl Programming"><img src="../gifs/txthome.gif" alt="Advanced Perl Programming" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="sect1" href="ch10_02.htm#ch10-pgfId-976240" title="10.2 Streamed Data"><img src="../gifs/txtnexta.gif" alt="Next: 10.2 Streamed Data" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">9.6 Comparisons with Other Languages</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">10.2 Streamed Data</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.html" title="The Perl CD Bookshelf">Library Home</A
> | <a href="../perlnut/index.htm" title="Perl in a Nutshell">Perl in a Nutshell</A
> | <a href="../learn/index.htm" title="Learning Perl">Learning Perl</A
> | <a href="../learn32/index.htm" title="Learning Perl on Win32 Systems">Learning Perl on Win32</A
> | <a href="../prog/index.htm" title="Programming Perl">Programming Perl</A
> | <a href="index.htm" title="Advanced Perl Programming">Advanced Perl Programming</A
> | <a href="../cookbook/index.htm" title="Perl Cookbook">Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
