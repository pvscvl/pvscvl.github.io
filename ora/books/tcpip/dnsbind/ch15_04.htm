<html><head>
<title>[Chapter 15] 15.4 DNS and Internet Firewalls</TITLE>
<meta name="DC.title" content="DNS &amp; BIND"><meta name="DC.creator" content="Cricket Liu &amp; Paul Albitz"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-01-06T18:43:19Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-512-2" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch15_01.htm" title="15. Miscellaneous"><link rel="prev" href="ch15_03.htm" title="15.3 A Limitation of MX Records"><link rel="next" href="ch15_05.htm" title="15.5 Dialup Connections"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="DNS &amp; BIND" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="DNS &amp; BIND"><area shape="RECT" coords="467,0,514,18" href="../search/dsrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch15_03.htm" title="15.3 A Limitation of MX Records"><img src="../gifs/txtpreva.gif" alt="Previous: 15.3 A Limitation of MX Records" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 15<br>Miscellaneous</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch15_05.htm" title="15.5 Dialup Connections"><img src="../gifs/txtnexta.gif" alt="Next: 15.5 Dialup Connections" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="AUTOID-16556">15.4 <span class="acronym">DNS</SPAN
> and Internet Firewalls</A
></H2
><p class="para"><a class="indexterm" name="CH15.FIREWALL1"></A
><a class="indexterm" name="CH15.FIREWALL2"></A
><a class="indexterm" name="CH15.FIREWALL3"></A
><a class="indexterm" name="CH15.FIREWALL4"></A
><a class="indexterm" name="CH15.FIREWALL5"></A
><a class="indexterm" name="CH15.FIREWALL6"></A
>The Domain Name System wasn't designed to work with Internet firewalls.
It's a testimony to the flexibility of <span class="acronym">DNS</SPAN
> and of the <span class="acronym">BIND</SPAN
> implementation
that you can configure <span class="acronym">DNS</SPAN
> to work with, or even through, an Internet firewall.</P
><p class="para">That said, configuring <span class="acronym">BIND</SPAN
> to work in a firewalled environment,
although not difficult, takes a good, complete understanding of
<span class="acronym">DNS</SPAN
> and a few of <span class="acronym">BIND</SPAN
>'s more obscure features. Describing it also
requires a large portion of this chapter, so here's a roadmap.</P
><p class="para">We start by describing the two major families of Internet
firewall software&nbsp;- packet filters and application gateways.  The
capabilities of each family have a bearing on how you'll need to
configure <span class="acronym">BIND</SPAN
> to work through the firewall.  The next section details
the two most common <span class="acronym">DNS</SPAN
> architectures used with firewalls, forwarders and
internal roots, and describes the advantages and disadvantages of
each.  Then we introduce a new feature, conditional forwarding,
which combines the best of internal roots and forwarders.  Finally,
we discuss shadow namespaces and the configuration of the bastion
host, the host at the core of your firewall system.</P
><div class="sect2"><h3 class="sect2"><a class="title" name="AUTOID-16587">15.4.1 Types of Firewall Software</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-16590"></A
>Before you start configuring <span class="acronym">BIND</SPAN
>
to work with your firewall, it's important you understand what your
firewall is capable of.  Your firewall's capabilities may influence
your choice of <span class="acronym">DNS</SPAN
> architecture and will determine how you implement
it.  If you don't know the answers to the questions in this section, track
down someone in your organization who does know and ask.  Better
yet, work with your firewall's administrator when designing your
architecture to ensure it will coexist with the firewall.</P
><p class="para"><a class="indexterm" name="AUTOID-16595"></A
>Note that this is far from a complete explanation of Internet
firewalls.  These few paragraphs only describe the two most common
types of Internet firewalls, and only in enough detail to show how the
differences in their capabilities impact name servers.  For a
comprehensive treatment of Internet firewalls, see Brent Chapman and
Elizabeth Zwicky's <cite class="citetitle">Building Internet Firewalls</CITE
>
(O'Reilly &amp; Associates).</P
><div class="sect3"><h4 class="sect3"><a class="title" name="AUTOID-16599">15.4.1.1 Packet filters</A
></H4
><p class="para">The first type of firewall
we'll cover is the packet filtering firewall.<a class="indexterm" name="AUTOID-16602"></A
><a class="indexterm" name="AUTOID-16604"></A
>
Packet filtering firewalls
operate largely at the transport and network levels of the <span class="acronym">TCP</SPAN
>/<span class="acronym">IP</SPAN
>
stack (layers three and four of the <span class="acronym">OSI</SPAN
> reference model, if you
dig that).  They decide whether to route a packet based upon packet-level
criteria like the transport protocol (i.e., whether it's <span class="acronym">TCP</SPAN
> or
<span class="acronym">UDP</SPAN
>), the source and destination <span class="acronym">IP</SPAN
> address, and the destination
port (see <a class="xref" href="#DNS3-CHP-15-FIG-1" title="Packet filters operate at the network and transport layers of the stack">Figure 15.1</A
>).</P
><h4 class="figure"><a class="title" name="DNS3-CHP-15-FIG-1">Figure 15.1: Packet filters operate at the network and transport layers of the stack</A
></H4
><img class="graphic" src="figs/dns3_1501.gif" alt="Figure 15.1"><p class="para">What's most important to us about packet
filtering firewalls is that you can typically configure them to
allow <span class="acronym">DNS</SPAN
> traffic selectively between hosts on the Internet and
your internal hosts. That is, you can let an arbitrary set of internal
hosts communicate with Internet name servers.  Some packet filtering
firewalls can even permit your name servers to query name servers
on the Internet, but not vice versa. All router-based Internet firewalls
are packet filtering firewalls.  Checkpoint's FireWall-1, Cisco's
<span class="acronym">PIX</SPAN
>, and Sun's SunScreen are popular commercial packet filtering
firewalls.</P
><div class="sidebar"><h4 class="sidebar"><a class="title" name="GOTCHA-FIREWALLS">A Gotcha with <span class="acronym">BIND</SPAN
> 8 and Packet Filtering
Firewalls</A
></H4
><p class="para"><span class="acronym">BIND</SPAN
> 4 name servers
always send queries from port 53, the well-known port for <span class="acronym">DNS</SPAN
> servers,
to port 53.  Resolvers, on the other hand, usually send queries
from high-numbered ports (above 1023) to port 53.  Though name servers
clearly have to send their queries to the <span class="acronym">DNS</SPAN
> port on a remote host,
there's no reason they have to send the queries <em class="emphasis">from</EM
> the <span class="acronym">DNS</SPAN
> port.
 And, wouldn't you know it, <span class="acronym">BIND</SPAN
> 8 name servers don't send queries from
port 53 by default.  Instead, they send queries from high-numbered
ports, same as resolvers do.</P
><p class="para">This can cause problems with
packet filtering firewalls that have been configured to allow server-to-server
traffic but not resolver-to-server traffic, because they typically
expect server-to-server traffic to originate from port 53 and terminate
at port 53.</P
><p class="para">There are two solutions to this problem:</P
><ol class="orderedlist"><li class="listitem"><p class="para">Reconfigure the firewall to allow name
server queries from ports other than 53 (assuming this doesn't
compromise the security of the firewall by allowing packets from
Internet hosts to high-numbered ports on internal name
servers).</P
></LI
><li class="listitem"><p class="para">Configure BIND to revert to its old behavior with the
<i class="function">query-source</I
>
substatement.</P
></LI
></OL
><p class="para"><i class="function">query-source</I
> takes as arguments an address specification and an
optional port number.  For example:</P
><blockquote class="screen"><pre class="screen">     options { query-source address * port 53;};</PRE
></BLOCKQUOTE
><p class="para">tells <span class="acronym">BIND</SPAN
> to use port 53 as the source port for queries sent
from all interfaces.  You can use a non-wildcard address specification
to limit the addresses that <span class="acronym">BIND</SPAN
> will send queries from.  For example,
on <i class="systemitem.sitename">wormhole</I
>:</P
><blockquote class="screen"><pre class="screen">     options { query-source 192.249.294.1 port *;};</PRE
></BLOCKQUOTE
><p class="para">would tell <span class="acronym">BIND</SPAN
> to send all queries from the 192.249.249.1
address (i.e., not from 192.253.253.1), and to use dynamic,
high-numbered ports.</P
></DIV
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="AUTOID-16648">15.4.1.2 Application gateways</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-16651"></A
><a class="indexterm" name="AUTOID-16653"></A
>Application gateways operate at the application protocol level, several layers
higher in the <span class="acronym">OSI</SPAN
> reference model than most packet filters (<a class="xref" href="#DNS3-CHP-15-FIG-2" title=" Application gateways operate at the application layer of the stack">Figure 15.2</A
>).  In a sense, they &quot;understand&quot; the
application protocol in the same way a server for that particular
application would. An <span class="acronym">FTP</SPAN
> application gateway, for example, can make
the decision to allow or deny a particular <span class="acronym">FTP</SPAN
> operation, like a <kbd class="command">RETR</KBD
>
(a <kbd class="command">get</KBD
>) or a <kbd class="command">STOR</KBD
> (a <kbd class="command">put</KBD
>).</P
><h4 class="figure"><a class="title" name="DNS3-CHP-15-FIG-2">Figure 15.2:  Application gateways operate at the application layer of the stack</A
></H4
><img class="graphic" src="figs/dns3_1502.gif" alt="Figure 15.2"><p class="para">The bad news, and what's important for our
purposes, is that most application gateway firewalls handle only<a class="indexterm" name="AUTOID-16667"></A
>
<span class="acronym">TCP</SPAN
>-based application protocols. <span class="acronym">DNS</SPAN
>,
of course, is largely <span class="acronym">UDP</SPAN
>-based, and we know of no application gateways
for <span class="acronym">DNS</SPAN
>.  This implies that if you run an application gateway firewall,
your internal hosts will likely not be able to communicate directly
with name servers on the Internet.</P
><p class="para"><a class="indexterm" name="AUTOID-16675"></A
>The popular Firewall
Toolkit from Trusted Information Systems (<span class="acronym">TIS</SPAN
>) is a suite of application
gateways for common Internet protocols like Telnet, <span class="acronym">FTP</SPAN
>, and <span class="acronym">HTTP</SPAN
>. <span class="acronym">TIS</SPAN
>'s
Gauntlet product is also based on application gateways, as is Raptor's
Eagle Firewall.</P
><p class="para">Note that these two categories of firewall
are really just generalizations.  The state of the art in firewalls
changes very quickly, and by the time you read this, you may have
a firewall that includes an application gateway for <span class="acronym">DNS</SPAN
>.  Which
family your firewall falls into is only important because it <em class="emphasis">suggests</EM
>
what that firewall is capable of; what's more important is whether
your particular firewall will let you permit <span class="acronym">DNS</SPAN
> traffic between
arbitrary internal hosts and the Internet.</P
></DIV
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="AUTOID-16685">15.4.2 A Bad Example</A
></H3
><p class="para">The simplest configuration
is to allow <span class="acronym">DNS</SPAN
> traffic to pass freely through your firewall (assuming
you can configure your firewall to do that).  That way, any internal
name server can query any name server on the Internet, and any Internet
name server can query any of your internal name servers.  You don't
need any special configuration.</P
><p class="para">Unfortunately, this is a really bad idea, for a number of reasons:</P
><dl class="variablelist"><dt class="term">Version control</DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-16695"></A
><a class="indexterm" name="AUTOID-16697"></A
>The developers of <span class="acronym">BIND</SPAN
> are constantly finding and
fixing security-related bugs in the <span class="acronym">BIND</SPAN
> code.  Consequently, it's
important to run the latest released version of <span class="acronym">BIND</SPAN
>, especially
on name servers that are directly exposed to the Internet.  If one
or just a few of your name servers communicate directly with name
servers on the Internet, upgrading to a new version is easy.  If
any of the name servers on your network can, it's another story.</P
></DD
><dt class="term">Possible vector for attack</DT
><dd class="listitem"><p class="para">Even if you're not running a name server on a particular
host, a hacker might be able to take advantage of the fact that
you allow <span class="acronym">DNS</SPAN
> traffic through your firewall to attack that host.
 For example, a co-conspirator working on the inside could set up
a Telnet daemon listening on the host's <span class="acronym">DNS</SPAN
> port, allowing the hacker
to <kbd class="command">telnet</KBD
> right in.</P
></DD
></DL
><p class="para">For the rest of this chapter, we'll try to set a good example.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="AUTOID-16711">15.4.3 Internet Forwarders</A
></H3
><p class="para"><a class="indexterm" name="CH15.FORWARDER"></A
>Given the dangers
of allowing bidirectional <span class="acronym">DNS</SPAN
> traffic through the firewall unrestricted,
most organizations elect to limit the internal hosts that can &quot;talk
<span class="acronym">DNS</SPAN
>&quot; to the Internet.  In an application gateway firewall, or any
firewall without the ability to pass <span class="acronym">DNS</SPAN
> traffic, the only host
that can communicate with Internet name servers is the bastion host (see <a class="xref" href="#DNS3-CHP-15-FIG-3" title="Diagram of a small network, showing the bastion host">Figure 15.3</A
>).</P
><h4 class="figure"><a class="title" name="DNS3-CHP-15-FIG-3">Figure 15.3: Diagram of a small network, showing the bastion host</A
></H4
><img class="graphic" src="figs/dns3_1503.gif" alt="Figure 15.3"><p class="para">In a packet-filtering firewall, the firewall's
administrator can configure the firewall to let any set of internal
name servers communicate with Internet name servers.  Often, this
is a small set of hosts that run name servers under the direct control
of the domain administrator (see <a class="xref" href="#DNS3-CHP-15-FIG-4" title="Diagram of a small network, showing select internal name servers">Figure 15.4</A
>).</P
><h4 class="figure"><a class="title" name="DNS3-CHP-15-FIG-4">Figure 15.4: Diagram of a small network, showing select internal name servers</A
></H4
><img class="graphic" src="figs/dns3_1504.gif" alt="Figure 15.4"><p class="para">Servers that can query name servers on the
Internet directly don't require any special configuration.  Their
hints files contain the Internet's root name servers, which enables
them to resolve Internet domain names.  Internal name servers that
<em class="emphasis">can't</EM
> query name servers on the Internet, however, need to know
to forward queries they can't resolve to one of the name servers
that can.  This is done with the <i class="function">forwarders</I
> directive or substatement,
introduced in <a class="xref" href="ch10_01.htm" title="Advanced Features and Security">Chapter 10, <cite class="chapter">Advanced Features and Security</CITE
></A
>.</P
><p class="para"><a class="xref" href="#DNS3-CHP-15-FIG-5" title="Using forwarders">Figure 15.5</A
> illustrates a common
forwarding setup, with internal name servers forwarding queries to a
name server running on a bastion host.</P
><h4 class="figure"><a class="title" name="DNS3-CHP-15-FIG-5">Figure 15.5: Using forwarders</A
></H4
><img class="graphic" src="figs/dns3_1505.gif" alt="Figure 15.5"><p class="para">At Movie U., we put in a firewall to protect ourselves from the
Big Bad Internet several years ago.  Ours is a packet-filtering
firewall, and we negotiated with our firewall administrator to allow
<span class="acronym">DNS</SPAN
> traffic between Internet name servers and two
of our name servers, <i class="systemitem.sitename">terminator.movie.edu</I
> and <i class="systemitem.sitename">wormhole.movie.edu</I
>.  Here's how we
configured the other internal name servers at the university.  For our
<span class="acronym">BIND</SPAN
> 8 name servers:</P
><blockquote class="screen"><pre class="screen">options {
                forwarders { 192.249.249.1; 192.249.249.3; };
                forward only;
};</PRE
></BLOCKQUOTE
><p class="para">and for our <span class="acronym">BIND</SPAN
> 4 name servers:</P
><blockquote class="screen"><pre class="screen">forwarders 192.249.249.3 192.249.249.1
options forward-only</PRE
></BLOCKQUOTE
><p class="para"> (We vary the order in which the forwarders appear
to help spread the load between them.)</P
><p class="para">When an internal
name server receives a query for a name it can't resolve locally,
like an Internet domain name, it forwards that query to one of our
forwarders, which can resolve the name using name servers on the
Internet.  Simple!</P
><div class="sect3"><h4 class="sect3"><a class="title" name="AUTOID-16748">15.4.3.1 The trouble with forwarding</A
></H4
><p class="para">Unfortunately,
it's a little too simple.  Forwarding starts to get in the way once
you implement subdomains or build an extensive network.  To explain
what we mean, take a look at part of the configuration file on <i class="systemitem.sitename">zardoz.movie.edu</I
>:</P
><blockquote class="screen"><pre class="screen">options {
                directory &quot;/usr/local/named&quot;;
                forwarders { 192.249.249.1; 192.253.253.3; };
};

zone &quot;movie.edu&quot; {
                type slave;
                file &quot;db.movie&quot;;
                masters { 192.249.249.3; };
};</PRE
></BLOCKQUOTE
><p class="para"><i class="systemitem.sitename">zardoz.movie.edu</I
> is a slave for <i class="systemitem.sitename">movie.edu</I
> and uses
our two forwarders.  What happens when <i class="systemitem.sitename">zardoz</I
> receives a query for
a name in <i class="systemitem.sitename">fx.movie.edu</I
>? <i class="systemitem.sitename">zardoz</I
>, as an authoritative <i class="systemitem.sitename">movie.edu</I
> name
server, has the <span class="acronym">NS</SPAN
> records that delegate <i class="systemitem.sitename">fx.movie.edu</I
> to its authoritative
name servers.  But it's also been configured to forward queries
it can't resolve locally to <i class="systemitem.sitename">terminator</I
> and <i class="systemitem.sitename">wormhole</I
>.  Which will
it do?</P
><p class="para">It turns out that <i class="systemitem.sitename">zardoz</I
> will ignore the delegation
information and forward the query to <i class="systemitem.sitename">terminator</I
>.  That'll work,
since <i class="systemitem.sitename">terminator</I
> will receive the recursive query and ask an <i class="systemitem.sitename">fx.movie.edu</I
>
name server on <i class="systemitem.sitename">zardoz</I
>'s behalf.  But it's not particularly efficient,
since <i class="systemitem.sitename">zardoz</I
> could easily have sent the query directly.</P
><p class="para">Now
imagine the scale of the network is much larger: a corporate network
that spans many continents, with tens of thousands of hosts and hundreds
or thousands of name servers.  All of the internal name servers
that don't have direct Internet connectivity&nbsp;- the vast majority of
them&nbsp;- use a small set of forwarders.  What are the problems with
this picture?</P
><dl class="variablelist"><dt class="term">Single point of failure</DT
><dd class="listitem"><p class="para">If the forwarders fail, your name servers lose the
ability to resolve both Internet domain names and internal domain
names that they don't have cached or in authoritative data.</P
></DD
><dt class="term">Concentration of load</DT
><dd class="listitem"><p class="para">The forwarders will have an enormous query load
placed on them.  This is both because of the large number of internal
name servers that use them and because the queries are recursive
and require a good deal of work to answer.</P
></DD
><dt class="term">Inefficient resolution</DT
><dd class="listitem"><p class="para">Imagine two internal name servers, authoritative
for <i class="systemitem.sitename">west.acmebw.com</I
> and <i class="systemitem.sitename">east.acmebw.com</I
>, respectively, both on the
same network segment in Boulder, Colorado.  Both are configured
to use the company's forwarder in Bethesda, Maryland.  For the <i class="systemitem.sitename">west.acmebw.com</I
>
name server to resolve a name in <i class="systemitem.sitename">east.acmebw.com</I
>, it sends a query
to the forwarder in Bethesda.  The forwarder in Bethesda then sends
a query back to Boulder to the <i class="systemitem.sitename">east.acmebw.com</I
> name server, the
original querier's neighbor.  The <i class="systemitem.sitename">east.acmebw.com</I
> name server replies
by sending a response back to Bethesda, which the forwarder sends
back to Boulder.</P
><p class="para">In a traditional configuration with root name servers,
the <i class="systemitem.sitename">west.acmebw.com</I
> name server would quickly have learned that
an <i class="systemitem.sitename">east.acmebw.com</I
> name server was next door, and would favor it
(because of its low round-trip time).  Using forwarders &quot;short-circuits&quot;
the normally efficient resolution process.</P
></DD
></DL
><p class="para">The upshot is that forwarding is fine for small networks and
simple namespaces, but probably inadequate for large networks and
complex namespaces.  We found this out the hard way at Movie U.
as our network grew, and were forced to implement internal roots.</P
></DIV
><a class="indexterm" name="AUTOID-16795"></A
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="AUTOID-16796">15.4.4 Internal Roots</A
></H3
><p class="para"><a class="indexterm" name="CH15.INTERNAL1"></A
><a class="indexterm" name="CH15.INTERNAL2"></A
><a class="indexterm" name="CH15.INTERNAL3"></A
>If you want to avoid the
scalability problems of forwarding, you can set up your own root
name servers.  These internal roots will serve only the name servers in
your organization.  They'll only know about the portions of the
namespace relevant to your organization.</P
><p class="para">What good are
they?  By using an architecture based on root name servers, you
gain the scalability of the Internet's namespace (which should be good
enough for most companies), plus redundancy, distributed load, and
efficient resolution. You can have as many internal roots as the
Internet has roots&nbsp;- thirteen or so&nbsp;- whereas having that many forwarders
may be an undue security exposure and a configuration burden.  Most
of all, the internal roots don't get used frivolously. Name servers
only need to consult an internal root when they time out the <span class="acronym">NS</SPAN
>
records for your top-level zones. Using forwarders, name servers
may have to query a forwarder once <em class="emphasis">per resolution</EM
>.</P
><p class="para">The moral of our story is that if you have, or intend to have,
a large name space and lots of internal name servers, internal root
name servers will scale better than any other solution.</P
><div class="sect3"><h4 class="sect3"><a class="title" name="AUTOID-16810">15.4.4.1 Where to put internal root name servers</A
></H4
><p class="para">Since
name servers &quot;lock on&quot; to the closest root name server by favoring
the one with the lowest roundtrip time, it pays to pepper your network
with internal root name servers.  If your organization's network spans
the U.S., Europe, and the Pacific Rim, consider locating at least
one internal root name server on each continent.  If you have three
major sites in Europe, give each of them an internal root.</P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="AUTOID-16813">15.4.4.2 Forward mapping delegation</A
></H4
><p class="para">Here's how
an internal root name server is configured.<a class="indexterm" name="AUTOID-16816"></A
>
An internal root delegates directly
to any domains you administer. For example, on the <em class="emphasis">movie.edu</EM
> network,
the root zone's data file would contain:</P
><blockquote class="screen"><pre class="screen">movie.edu.  86400  <span class="acronym">IN</SPAN
>  <span class="acronym">NS</SPAN
>  terminator.movie.edu.
            86400  <span class="acronym">IN</SPAN
>  <span class="acronym">NS</SPAN
>  wormhole.movie.edu.
            86400  <span class="acronym">IN</SPAN
>  <span class="acronym">NS</SPAN
>  zardoz.movie.edu.
terminator.movie.edu.  86400  <span class="acronym">IN</SPAN
>  A  192.249.249.3
wormhole.movie.edu.    86400  <span class="acronym">IN</SPAN
>  A  192.249.249.1
                       86400  <span class="acronym">IN</SPAN
>  A  192.253.253.1
zardoz.movie.edu.      86400  <span class="acronym">IN</SPAN
>  A  192.249.249.9
                       86400  <span class="acronym">IN</SPAN
>  A  192.253.253.9</PRE
></BLOCKQUOTE
><p class="para">On the Internet, this information would appear in
the <em class="emphasis">edu</EM
> name servers' databases. On the <em class="emphasis">movie.edu</EM
> network,
of course, there aren't any <em class="emphasis">edu</EM
> name servers,
so you delegate directly to <em class="emphasis">movie.edu</EM
> from
the root.</P
><p class="para">Notice that this doesn't contain delegation
to <em class="emphasis">fx.movie.edu</EM
> or any other subdomain of <em class="emphasis">movie.edu</EM
>.
The <em class="emphasis">movie.edu</EM
> name servers know which name
servers are authoritative for all <em class="emphasis">movie.edu</EM
> subdomains,
and all queries for information in those subdomains will pass through
the <em class="emphasis">movie.edu</EM
> name servers, so there's no need
to delegate them here.</P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="AUTOID-16843">15.4.4.3 in-addr.arpa delegation</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-16846"></A
><a class="indexterm" name="AUTOID-16849"></A
><a class="indexterm" name="AUTOID-16852"></A
><a class="indexterm" name="AUTOID-16855"></A
>We also need to delegate from the internal
roots to the <em class="emphasis">in-addr.arpa</EM
> domains that correspond
to the networks <em class="emphasis">movie.edu</EM
> uses:</P
><blockquote class="screen"><pre class="screen">249.249.192.in-addr.arpa.  86400  <span class="acronym">IN</SPAN
>  <span class="acronym">NS</SPAN
>  terminator.movie.edu.
                           86400  <span class="acronym">IN</SPAN
>  <span class="acronym">NS</SPAN
>  wormhole.movie.edu.
                           86400  <span class="acronym">IN</SPAN
>  <span class="acronym">NS</SPAN
>  zardoz.movie.edu.
253.253.192.in-addr.arpa.  86400  <span class="acronym">IN</SPAN
>  <span class="acronym">NS</SPAN
>  terminator.movie.edu.
                           86400  <span class="acronym">IN</SPAN
>  <span class="acronym">NS</SPAN
>  wormhole.movie.edu.
                           86400  <span class="acronym">IN</SPAN
>  <span class="acronym">NS</SPAN
>  zardoz.movie.edu.
254.253.192.in-addr.arpa.  86400  <span class="acronym">IN</SPAN
>  <span class="acronym">NS</SPAN
>  bladerunner.fx.movie.edu.
                           86400  <span class="acronym">IN</SPAN
>  <span class="acronym">NS</SPAN
>  outland.fx.movie.edu.
                           86400  <span class="acronym">IN</SPAN
>  <span class="acronym">NS</SPAN
>  alien.fx.movie.edu.
20.254.192.in-addr.arpa.   86400  <span class="acronym">IN</SPAN
>  <span class="acronym">NS</SPAN
>  bladerunner.fx.movie.edu.
                           86400  <span class="acronym">IN</SPAN
>  <span class="acronym">NS</SPAN
>  outland.fx.movie.edu.
                           86400  <span class="acronym">IN</SPAN
>  <span class="acronym">NS</SPAN
>  alien.fx.movie.edu.</PRE
></BLOCKQUOTE
><p class="para">Notice that we <em class="emphasis">did</EM
> include delegation
for the <em class="emphasis">254.253.192.in-addr.arpa</EM
> and <em class="emphasis">20.254.192.in-addr.arpa</EM
> zones,
even though they correspond to the <em class="emphasis">fx.movie.edu</EM
> zone.
We didn't need to delegate to <em class="emphasis">fx.movie.edu</EM
>, because
we'd already delegated to its parent. The <em class="emphasis">movie.edu</EM
> name
servers delegate to <em class="emphasis">fx.movie.edu</EM
>, so by transitivity
the roots delegate to <em class="emphasis">fx.movie.edu</EM
>. Since neither
of the other <em class="emphasis">in-addr.arpa</EM
> zones is a parent
of <em class="emphasis">254.253.192.in-addr.arpa</EM
> or <em class="emphasis">20.254.192.in-addr.arpa</EM
>,
we needed to delegate both zones from the root. As we've covered
earlier, we don't need to add address records for the three Special
Effects name servers, <em class="emphasis">bladerunner, outland</EM
>, and <em class="emphasis">alien</EM
>, because
a remote name server can already find their addresses by following
delegation from <em class="emphasis">movie.edu</EM
>.</P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="AUTOID-16900">15.4.4.4 The db.root file</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-16903"></A
><a class="indexterm" name="AUTOID-16905"></A
>All that's left is to add an <span class="acronym">SOA</SPAN
> record for the
root zone and <span class="acronym">NS</SPAN
> records for this internal root name server and
any others:</P
><blockquote class="screen"><pre class="screen">.  <span class="acronym">IN</SPAN
>  <span class="acronym">SOA</SPAN
>  rainman.movie.edu.  hostmaster.movie.edu.  (
            1       ; serial
            86400   ; refresh
            3600    ; retry
            608400  ; expire
            86400 ) ; minimum

   <span class="acronym">IN</SPAN
>  <span class="acronym">NS</SPAN
>  rainman.movie.edu.
   <span class="acronym">IN</SPAN
>  <span class="acronym">NS</SPAN
>  awakenings.movie.edu.

rainman.movie.edu.    86400  <span class="acronym">IN</SPAN
>  A  192.249.249.254
awakenings.movie.edu. 86400  <span class="acronym">IN</SPAN
>  A  192.253.253.254</PRE
></BLOCKQUOTE
><p class="para"><em class="emphasis">rainman.movie.edu</EM
> and <em class="emphasis">awakenings.movie.edu</EM
> are
the hosts running internal root name servers. We shouldn't run an internal
root on a bastion host, because if a name server on the Internet
accidentally queries it for data it's not authoritative for, the
internal root will respond with its list of roots&nbsp;- all internal!</P
><p class="para">So the whole <em class="emphasis">db.root</EM
> file (by convention,
we call the root zone's data file <em class="emphasis">db.root</EM
>)
looks like this:</P
><blockquote class="screen"><pre class="screen">.  <span class="acronym">IN</SPAN
>  <span class="acronym">SOA</SPAN
>  rainman.movie.edu.  hostmaster.movie.edu.  (
            1       ; serial
            86400   ; refresh
            3600    ; retry
            608400  ; expire
            86400 ) ; minimum

   <span class="acronym">IN</SPAN
>  <span class="acronym">NS</SPAN
>  rainman.movie.edu.
   <span class="acronym">IN</SPAN
>  <span class="acronym">NS</SPAN
>  awakenings.movie.edu.

rainman.movie.edu.    604800  <span class="acronym">IN</SPAN
>  A  192.249.249.254
awakenings.movie.edu. 604800  <span class="acronym">IN</SPAN
>  A  192.253.253.254

movie.edu.  86400  <span class="acronym">IN</SPAN
>  <span class="acronym">NS</SPAN
>  terminator.movie.edu.
            86400  <span class="acronym">IN</SPAN
>  <span class="acronym">NS</SPAN
>  wormhole.movie.edu.
            86400  <span class="acronym">IN</SPAN
>  <span class="acronym">NS</SPAN
>  zardoz.movie.edu.

terminator.movie.edu.  86400  <span class="acronym">IN</SPAN
>  A  192.249.249.3
wormhole.movie.edu.    86400  <span class="acronym">IN</SPAN
>  A  192.249.249.1
                       86400  <span class="acronym">IN</SPAN
>  A  192.253.253.1
zardoz.movie.edu.      86400  <span class="acronym">IN</SPAN
>  A  192.249.249.9
                       86400  <span class="acronym">IN</SPAN
>  A  192.253.253.9

249.249.192.in-addr.arpa.  86400  <span class="acronym">IN</SPAN
>  <span class="acronym">NS</SPAN
>  terminator.movie.edu.
                           86400  <span class="acronym">IN</SPAN
>  <span class="acronym">NS</SPAN
>  wormhole.movie.edu.
                           86400  <span class="acronym">IN</SPAN
>  <span class="acronym">NS</SPAN
>  zardoz.movie.edu.
253.253.192.in-addr.arpa.  86400  <span class="acronym">IN</SPAN
>  <span class="acronym">NS</SPAN
>  terminator.movie.edu.
                           86400  <span class="acronym">IN</SPAN
>  <span class="acronym">NS</SPAN
>  wormhole.movie.edu.
                           86400  <span class="acronym">IN</SPAN
>  <span class="acronym">NS</SPAN
>  zardoz.movie.edu.
254.253.192.in-addr.arpa.  86400  <span class="acronym">IN</SPAN
>  <span class="acronym">NS</SPAN
>  bladerunner.fx.movie.edu.
                           86400  <span class="acronym">IN</SPAN
>  <span class="acronym">NS</SPAN
>  outland.fx.movie.edu.
                           86400  <span class="acronym">IN</SPAN
>  <span class="acronym">NS</SPAN
>  alien.fx.movie.edu.
20.254.192.in-addr.arpa.   86400  <span class="acronym">IN</SPAN
>  <span class="acronym">NS</SPAN
>  bladerunner.fx.movie.edu.
                           86400  <span class="acronym">IN</SPAN
>  <span class="acronym">NS</SPAN
>  outland.fx.movie.edu.
                           86400  <span class="acronym">IN</SPAN
>  <span class="acronym">NS</SPAN
>  alien.fx.movie.edu.</PRE
></BLOCKQUOTE
><p class="para">The <em class="emphasis">named.conf</EM
> file on both
of the internal root name servers, <em class="emphasis">rainman</EM
> and <em class="emphasis">awakenings</EM
>,
contains the lines:</P
><blockquote class="screen"><pre class="screen">zone &quot;.&quot; {
                type master;
                file &quot;db.root&quot;;
};</PRE
></BLOCKQUOTE
><p class="para">Or, for a <span class="acronym">BIND</SPAN
> 4 server's <i class="filename">named.boot</I
> file:</P
><blockquote class="screen"><pre class="screen">primary    .    db.root</PRE
></BLOCKQUOTE
><p class="para">This replaces a <em class="emphasis">zone</EM
> statement
of type <em class="emphasis">hint</EM
> or a<a class="indexterm" name="AUTOID-16981"></A
>
<em class="emphasis">cache</EM
> directive&nbsp;- a root
name server doesn't need a cache file to tell it where the other
roots are; it can find that in <em class="emphasis">db.root</EM
>. Did
we really mean that <em class="emphasis">each</EM
> root name server is
a primary for the root domain? Actually, that depends on the version
of <span class="acronym">BIND</SPAN
> you're running. <span class="acronym">BIND</SPAN
> versions after 4.9 will let you declare
a server a slave for the root domain, but <span class="acronym">BIND</SPAN
> 4.8.3 and earlier
insist that all root name servers load <em class="emphasis">db.root</EM
> as
primaries.</P
><p class="para">If you don't have a lot of idle hosts sitting
around that you can turn into internal roots, don't despair!  Any
internal name server (i.e., one that's not running on a bastion
host or outside your firewall) can serve double duty as an internal
root <em class="emphasis">and</EM
> as an authoritative name server for whatever other zones
you need it to load. Remember, a single name server can be authoritative
for many, many zones, including the root.<a class="indexterm" name="AUTOID-16992"></A
><a class="indexterm" name="AUTOID-16994"></A
></P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="AUTOID-16997">15.4.4.5 Configuring other internal name servers</A
></H4
><p class="para">Once
you've set up internal root name servers, configure all your name
servers on hosts anywhere on your internal network to use them.
Any name server running on a host without direct Internet connectivity should
list the internal roots in its hints file:</P
><blockquote class="screen"><pre class="screen">; Internal db.cache file, for movie.edu hosts without direct
; Internet connectivity
;
; Don't use this cache file on a host with Internet connectivity!
;

.  99999999  <span class="acronym">IN</SPAN
>  <span class="acronym">NS</SPAN
>  rainman.movie.edu.
   99999999  <span class="acronym">IN</SPAN
>  <span class="acronym">NS</SPAN
>  awakenings.movie.edu.

rainman.movie.edu.     99999999  <span class="acronym">IN</SPAN
>  A  192.249.249.254
awakenings.movie.edu.  99999999  <span class="acronym">IN</SPAN
>  A  192.253.253.254</PRE
></BLOCKQUOTE
><p class="para">Name servers running on hosts using this cache file
will be able to resolve names in <em class="emphasis">movie.edu</EM
> and
in Movie U.'s <em class="emphasis">in-addr.arpa</EM
> domains, but not
outside of those domains.</P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="AUTOID-17010">15.4.4.6 How internal name servers use internal roots</A
></H4
><p class="para">To tie together how this whole scheme works, let's go through
an example of name resolution on an internal caching-only name server
using these internal root name servers. First, the internal name
server receives a query for a domain name in <em class="emphasis">movie.edu</EM
>,
say the address of <em class="emphasis">gump.fx.movie.edu</EM
>. If the
internal name server doesn't have any &quot;better&quot; information cached,
it starts by querying an internal root name server. If it has communicated
with the internal roots before, it has a round-trip time associated
with each, which tells it which of the internal roots is responding
to it most quickly. It sends a <em class="emphasis">nonrecursive</EM
> query
to that internal root for <em class="emphasis">gump.fx.movie.edu</EM
>'s
address. The internal root answers with a referral to the <em class="emphasis">movie.edu</EM
> name
servers on <em class="emphasis">terminator.movie.edu</EM
>, <em class="emphasis">wormhole.movie.edu</EM
>, and <em class="emphasis">zardoz.movie.edu</EM
>.
The caching-only name server follows up by sending another nonrecursive
query to one of the <em class="emphasis">movie.edu</EM
> name servers
for <em class="emphasis">gump</EM
>'s address. The <em class="emphasis">movie.edu</EM
> name
server responds with a referral to the <em class="emphasis">fx.movie.edu</EM
> name
servers. The caching-only name server sends the same nonrecursive
query for <em class="emphasis">gump</EM
>'s address to one of the <em class="emphasis">fx.movie.edu</EM
> name
servers, and finally receives a response.</P
><p class="para">Contrast this
with the way a forwarding setup would have worked.  Let's imagine
that instead of using internal root name servers, our caching-only
name server were configured to forward queries to first <em class="emphasis">terminator</EM
> and
then <em class="emphasis">wormhole</EM
>.  In that case, the caching-only
name server would have checked its cache for the address of <em class="emphasis">gump.fx.movie.edu</EM
> and,
not finding it, would have forwarded the query to <em class="emphasis">terminator</EM
>.  <em class="emphasis">terminator</EM
> would
have queried an <em class="emphasis">fx.movie.edu</EM
> name server on
the caching-only name server's behalf and returned the answer.
Should the caching-only name server need to look up another name
in <em class="emphasis">fx.movie.edu</EM
>, it would still ask the forwarder,
even though the forwarder's response to the query for <em class="emphasis">gump.fx.movie.edu</EM
>'s address
may have contained the names and addresses of the <em class="emphasis">fx.movie.edu</EM
> name
servers.</P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="AUTOID-17037">15.4.4.7 Mail from internal hosts to the Internet</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-17040"></A
>But wait! That's not all internal roots
will do for you. We talked about getting mail to the Internet without
changing <em class="emphasis">sendmail</EM
>'s configuration all over
the network.</P
><p class="para"><a class="indexterm" name="AUTOID-17045"></A
><a class="indexterm" name="AUTOID-17048"></A
>Wildcard records are the key to getting mail to work&nbsp;- specifically, wildcard
<span class="acronym">MX</SPAN
> records. Let's say we'd like mail to the Internet to be forwarded
through <em class="emphasis">postmanrings2x.movie.edu</EM
>, the Movie
U. bastion host, which has direct Internet connectivity. Then adding
these records to <em class="emphasis">db.root</EM
>:</P
><blockquote class="screen"><pre class="screen">*        <span class="acronym">IN</SPAN
>    <span class="acronym">MX</SPAN
>    5 postmanrings2x.movie.edu.
*.edu.   <span class="acronym">IN</SPAN
>    <span class="acronym">MX</SPAN
>    10 postmanrings2x.movie.edu.</PRE
></BLOCKQUOTE
><p class="para">will get the job done. We need the *<em class="emphasis">.edu</EM
> <span class="acronym">MX</SPAN
>
record in addition to the * record because
of the <span class="acronym">DNS</SPAN
> wildcard production rules we described in the wildcards
section in <a class="xref" href="ch10_01.htm" title="Advanced Features and Security">Chapter 10</A
>. Since there are explicit data for <em class="emphasis">movie.edu</EM
> in
the zone, the first wildcard won't match <em class="emphasis">movie.edu</EM
> or
any other subdomains of <em class="emphasis">edu</EM
>. We need another,
explicit wildcard record for <em class="emphasis">edu</EM
> to match these domains.</P
><p class="para">Now mailers on our internal <em class="emphasis">movie.edu</EM
> hosts
will send mail addressed to Internet domains to <em class="emphasis">postmanrings2x</EM
> for
forwarding. For example, mail addressed to <em class="emphasis">nic.ddn.mil</EM
> will
match the first wildcard <span class="acronym">MX</SPAN
> record:</P
><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>nslookup -type=mx nic.ddn.mil.</B
></CODE
> <i class="lineannotation">&nbsp;- Matches the <span class="acronym">MX</SPAN
> record for *</I
>
Server:  rainman.movie.edu
Address:  192.249.249.19

nic.ddn.mil
     preference = 5, mail exchanger = postmanrings2x.movie.edu
postmanrings2x.movie.edu    internet address = 192.249.249.20</PRE
></BLOCKQUOTE
><p class="para">while mail addressed to <em class="emphasis">vangogh.cs.berkeley.edu</EM
> will
match the second <span class="acronym">MX</SPAN
> record:</P
><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>nslookup -type=mx vangogh.cs.berkeley.edu.</B
></CODE
> <i class="lineannotation">&nbsp;- Matches the <span class="acronym">MX</SPAN
> record for *.edu</I
>
Server:  rainman.movie.edu
Address:  192.249.249.19

vangogh.cs.berkeley.edu
     preference = 10, mail exchanger = postmanrings2x.movie.edu
postmanrings2x.movie.edu    internet address = 192.249.249.20</PRE
></BLOCKQUOTE
><p class="para">Once the mail reaches <em class="emphasis">postmanrings2x</EM
>,
our bastion host, <em class="emphasis">postmanrings2x</EM
>'s mailer will
look up the <span class="acronym">MX</SPAN
> records for these addresses itself. Since <em class="emphasis">postmanrings2x</EM
> will
resolve the name using the Internet's name space instead of the
internal name space, it will find the real <span class="acronym">MX</SPAN
> records for the destination
domain and deliver the mail. No changes to <em class="emphasis">sendmail</EM
>'s configuration are
necessary.</P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="AUTOID-17090">15.4.4.8 <a class="indexterm" name="AUTOID-17092"></A
>Mail to specific Internet domains</A
></H4
><p class="para">Another nice perk of this internal root scheme is that it gives
you the ability to forward mail addressed to certain Internet domains
through particular bastion hosts, if you have more than one. We can
choose, for example, to send all mail addressed to
<em class="emphasis">uk</EM
> domain recipients to our bastion host in
London first, and then out onto the Internet. This can be very useful
if our internal network's connectivity or reliability is better than
the U.K.'s section of the Internet.</P
><p class="para">Movie U. has a private network connection
to our sister university in London near Pinewood Studios. As it
turns out, sending mail across our private link, and then through
the Pinewood host to correspondents in the U.K., is more reliable
than sending it directly across the Internet. So we add the following
wildcard records to <em class="emphasis">db.root</EM
>:</P
><blockquote class="screen"><pre class="screen">; holygrail is at the other end of the U.K. Internet link
*.uk.    IN    MX    10 holygrail.movie.ac.uk.
holygrail.movie.ac.uk.    IN   A    192.168.76.4</PRE
></BLOCKQUOTE
><p class="para">Now, mail addressed to users in subdomains of <em class="emphasis">uk</EM
> will
be forwarded to the host <em class="emphasis">holygrail.movie.ac.uk</EM
> at
our sister university, which presumably has facilities to forward
that mail to other domains in the U.K.</P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="AUTOID-17103">15.4.4.9 The trouble with internal roots</A
></H4
><p class="para">Unfortunately,
just as forwarding has its problems, internal roots have their limitations.
Chief among these is the fact that your internal hosts can't see
the Internet namespace.  On some networks, this isn't an issue,
because most internal hosts don't have any direct Internet connectivity.
On others, however, the Internet firewall or other software may
require that all internal hosts have the ability to resolve names
in the Internet's namespace.  For these networks, an internal root architecture
won't work.</P
></DIV
><a class="indexterm" name="AUTOID-17106"></A
><a class="indexterm" name="AUTOID-17107"></A
><a class="indexterm" name="AUTOID-17108"></A
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="AUTOID-17109">15.4.5 Views</A
></H3
><p class="para"><a class="indexterm" name="CH15.VIEWS"></A
>The solution to this problem may be views, which the ISC hopes
to introduce to BIND sometime soon in the version 8 release
stream.[2]

Views would allow you to specify when during resolution a name server
tries its forwarders and under what conditions.[3]</P
><blockquote class="footnote"><p class="para">[2] Views haven't been implemented yet, but we were granted a peek
at how they may work and are documenting them in the hope that
they'll beat this book to production.</P
><p class="para">[3] <a class="indexterm" name="AUTOID-17118"></A
>Todd Aven's <i class="function">noforward</I
> patch for
<span class="acronym">BIND</SPAN
> 4.9 was a precursor to this functionality.
It's still available from <i class="systemitem.ftp">ftp://ftp.isc.org/isc/bind/src/4.9.3/contrib/noforward.tar.gz</I
>.</P
></BLOCKQUOTE
><p class="para">By default, a <span class="acronym">BIND</SPAN
> name server configured to
use forwarders consults them <em class="emphasis">before</EM
> attempting
normal resolution, or instead of normal iterative resolution. Also,
when a <span class="acronym">BIND</SPAN
> name server is configured to use
forwarders, it will consult those forwarders for queries about
<em class="emphasis">any</EM
> domain name. A view lets you specify whose
queries are forwarded and what those queries have to be about (which
domain names) in order to be forwarded.</P
><p class="para">The syntax of the <i class="function">view</I
> statement might look
something like this:</P
><blockquote class="screen"><pre class="screen">view <code class="replaceable"><i>viewname</I
></CODE
> {
                [ interface <code class="replaceable"><i>ip_list</I
></CODE
>; ]
                [ domain <code class="replaceable"><i>domain_list</I
></CODE
>; ]
                [ client <code class="replaceable"><i>ip_list</I
></CODE
>; ]
                forward on <code class="replaceable"><i>reasons</I
></CODE
> [ to <code class="replaceable"><i>ip_list</I
></CODE
> ];
 };</PRE
></BLOCKQUOTE
><p class="para">Here's how the statement works: <i class="function">domain</I
>
specifies the domains to which the view
applies. <i class="function">domain</I
> takes a list of domain names as
an argument. The <i class="function">client</I
> substatement determines
which addresses this view applies to. <i class="function">client</I
>
takes an address match list as an argument (as described in <a class="xref" href="ch10_01.htm" title="Advanced Features and Security">Chapter 10</A
>). <i class="function">interface</I
> specifies the
interfaces on the local host to which the view applies.  If the server
receives a query on one of the interfaces specified, from a client
whose address matches an address in the <i class="function">client</I
>
substatement, <em class="emphasis">and</EM
> about a domain name specified in
<i class="function">domain</I
>, the view applies.  The default for
<i class="function">interface</I
> is the built-in address match list
<i class="filename">localhost</I
>, the default for
<i class="function">client</I
> is <i class="parameter">any</I
>, and the
default for <i class="function">domain</I
> is &quot;.&quot;, the root, meaning that
by default, the view applies to queries from any <span class="acronym">IP</SPAN
>
address looking up any name.</P
><p class="para"><i class="function">forward</I
> would replace and extend the
<i class="function">forwarders</I
> substatement of the
<i class="function">options</I
> statement.  It lists the
<span class="acronym">IP</SPAN
> addresses of the forwarders to use for queries
that match the specifications of this view. The forwarders are listed
in the order in which you want them queried. What's new is the
<i class="function">reasons</I
> clause. <i class="function">reasons</I
>
might include <i class="parameter">no-domain</I
> and
<i class="parameter">no-answer</I
>. These are the conditions under which
the forwarders are used:</P
><ul class="itemizedlist"><li class="listitem"><p class="para"><i class="parameter">no-domain</I
> corresponds to an <span class="acronym">NXDOMAIN</SPAN
>
(no such domain) response.</P
></LI
><li class="listitem"><p class="para"><i class="parameter">no-answer</I
> corresponds to a <span class="acronym">NOERROR</SPAN
>/no records response
(that is, the domain name exists but the record type doesn't).</P
></LI
></UL
><p class="para">If we were to implement views in our internal root environment
at Movie U., here's how our internal name server's
<i class="function">view</I
> statements might look:</P
><blockquote class="screen"><pre class="screen">view {
    client { 192.249.249/24; 192.253.253/24; 192.253.254/24 };
    domain { &quot;!movie.edu&quot;; &quot;!249.249.192.in-addr.arpa&quot;;
        &quot;!253.253.192.in-addr.arpa&quot;; &quot;!254.253.192.in-addr.arpa&quot;; };
    forward on no-domain to { 192.249.249.3; 192.249.249.1; };
};</PRE
></BLOCKQUOTE
><p class="para">This tells our internal name servers (all except <i class="systemitem.sitename">terminator</I
> and <i class="systemitem.sitename">wormhole</I
>, which can resolve Internet
domain names directly) to forward queries <em class="emphasis">from</EM
>
our internal <span class="acronym">IP</SPAN
> addresses and
<em class="emphasis">about</EM
> domain names that are not (note the
negation operator) in <i class="systemitem.sitename">movie.edu</I
> or our <i class="systemitem.sitename">in-addr.arpa</I
> subdomains to <i class="systemitem.sitename">terminator</I
> and <i class="systemitem.sitename">wormhole</I
>, in that order.</P
><p class="para">Please note that we've described just one possible
implementation of views. The actual implementation the ISC decides
upon may differ, both in features and in syntax.</P
><a class="indexterm" name="AUTOID-17185"></A
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="AUTOID-17186">15.4.6 A Shadow Namespace</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-17189"></A
><a class="indexterm" name="AUTOID-17191"></A
>Many organizations
would like to advertise different zone data to the Internet than
they do internally.  In most cases, much of the internal zone data is
irrelevant to the Internet because of the organization's Internet
firewall.  The firewall may not allow direct access to most internal
hosts, and may also translate internal, unregistered <span class="acronym">IP</SPAN
> addresses
into a range of <span class="acronym">IP</SPAN
> addresses registered to the organization.  Therefore,
the organization may need to trim out irrelevant information from the
external view of the zone, or change internal addresses to their
external equivalents.</P
><p class="para">Unfortunately, <span class="acronym">BIND</SPAN
> doesn't support
automatic filtering and translation of zone data.  Consequently,
many organizations manually create what have become known as &quot;split
namespaces.&quot;  In a split namespace, the real namespace is available
only internally, while a pared-down, translated version of it, called
&quot;the shadow namespace,&quot; is visible to the Internet.</P
><p class="para">The
shadow namespace contains the name-to-address and address-to-name
mappings of only those hosts that are accessible from the Internet, through
the firewall.  The addresses advertised may be the translated equivalents
of real internal addresses.  The shadow namespace may also contain
one or more <span class="acronym">MX</SPAN
> records to direct email from the Internet through
the firewall to a mail server.</P
><p class="para">Since Movie U. has an
Internet firewall that greatly limits access from the Internet to
the internal network, we elected to create a shadow namespace.
For <em class="emphasis">movie.edu</EM
>, the only information we need
to give out is about the zone (an <span class="acronym">SOA</SPAN
> and a few <span class="acronym">NS</SPAN
> records), the
bastion host (<em class="emphasis">postmanrings2x</EM
>), and the new
external name server, <em class="emphasis">ns.movie.edu</EM
>, which also
functions as an external web server, <em class="emphasis">www.movie.edu</EM
>.
The address of the external interface on the bastion host is 200.1.4.2,
while the address of the name/web server is 200.1.4.3. The shadow <em class="emphasis">movie.edu</EM
> zone
data file looks like this:</P
><blockquote class="screen"><pre class="screen">@    <span class="acronym">IN</SPAN
>    <span class="acronym">SOA</SPAN
>    ns.movie.edu.    hostmaster.movie.edu. (
                           1       ; Serial
                           86400   ; Refresh
                           3600    ; Retry
                           608400  ; Expire
                           86400 ) ; Default <span class="acronym">TTL</SPAN
>

    <span class="acronym">IN</SPAN
>    <span class="acronym">NS</SPAN
>    ns.movie.edu.
    <span class="acronym">IN</SPAN
>    <span class="acronym">NS</SPAN
>    ns.isp.net.        ; our <span class="acronym">ISP</SPAN
>'s name server

    <span class="acronym">IN</SPAN
>    A     200.1.4.3
    <span class="acronym">IN</SPAN
>    <span class="acronym">MX</SPAN
>    10 postmanrings2x.movie.edu.
    <span class="acronym">IN</SPAN
>    <span class="acronym">MX</SPAN
>    100 mail.isp.net.

www             <span class="acronym">IN</SPAN
>    <span class="acronym">CNAME</SPAN
> movie.edu.

postmanrings2x  <span class="acronym">IN</SPAN
>    A     200.1.4.2
                <span class="acronym">IN</SPAN
>    <span class="acronym">MX</SPAN
>    10 postmanrings2x.movie.edu.
                <span class="acronym">IN</SPAN
>    <span class="acronym">MX</SPAN
>    100 mail.isp.net.

;postmanrings2x handles mail addressed to ns
ns              <span class="acronym">IN</SPAN
>    A     200.1.4.3
                <span class="acronym">IN</SPAN
>    <span class="acronym">MX</SPAN
>    10 postmanrings2x.movie.edu.
                <span class="acronym">IN</SPAN
>    <span class="acronym">MX</SPAN
>    100 mail.isp.net.

*               <span class="acronym">IN</SPAN
>    <span class="acronym">MX</SPAN
>    10 postmanrings2x.movie.edu.
                <span class="acronym">IN</SPAN
>    <span class="acronym">MX</SPAN
>    100 mail.isp.net.</PRE
></BLOCKQUOTE
><p class="para">Note that there's no mention of any of the subdomains
of <em class="emphasis">movie.edu</EM
>, including any delegation to the
servers for those subdomains. The information simply isn't necessary,
since there's nothing in any of the subdomains that you can get
to from the Internet, and inbound mail addressed to hosts in the
subdomains is caught by the wildcard.</P
><p class="para">The <em class="emphasis">db.200.1.4</EM
> file,
which we need to reverse map the two Movie U. <span class="acronym">IP</SPAN
> addresses that
hosts on the Internet might see, looks like this:</P
><blockquote class="screen"><pre class="screen">@    <span class="acronym">IN</SPAN
>    <span class="acronym">SOA</SPAN
>    ns.movie.edu.    hostmaster.movie.edu. (
                           1       ; Serial
                           86400   ; Refresh
                           3600    ; Retry
                           608400  ; Expire
                           86400 ) ; Default <span class="acronym">TTL</SPAN
>

    <span class="acronym">IN</SPAN
>    <span class="acronym">NS</SPAN
>    ns.movie.edu.
    <span class="acronym">IN</SPAN
>    <span class="acronym">NS</SPAN
>    ns.isp.net.

2    <span class="acronym">IN</SPAN
>    <span class="acronym">PTR</SPAN
>    postmanrings2x.movie.edu.
3    <span class="acronym">IN</SPAN
>    <span class="acronym">PTR</SPAN
>    ns.movie.edu.</PRE
></BLOCKQUOTE
><p class="para">One precaution that we need to take is to make sure
that the resolver on our bastion host isn't configured to use the
server on <em class="emphasis">ns.movie.edu</EM
>. Since that server can't
see the real <em class="emphasis">movie.edu</EM
>, using it would render <em class="emphasis">postmanrings2x</EM
> unable
to map internal names to addresses or addresses to names.<a class="indexterm" name="AUTOID-17259"></A
><a class="indexterm" name="AUTOID-17261"></A
></P
><div class="sect3"><h4 class="sect3"><a class="title" name="AUTOID-17264">15.4.6.1 The bastion host</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-17267"></A
><a class="indexterm" name="AUTOID-17269"></A
>The bastion host is
a special case in a split namespace.  The bastion host has a foot
in each environment: one network interface connects it to the Internet, and
another connects it to the internal network.  Now that we have split
our name space in two, how can our bastion host see both the
Internet name space and our real internal name space? If we configure
it with the Internet root name servers in its hints file, it will
follow delegation from the Internet's <em class="emphasis">edu</EM
> name
servers to an external <em class="emphasis">movie.edu</EM
> name server
with shadow zone data.  It would be blind to our internal name space,
which it needs to see to log connections, deliver inbound mail,
and more. On the other hand, if we configure it with our internal
roots, then it won't see the Internet's name space, which it clearly
needs to do in order to function as a bastion host. What to do?</P
><p class="para">If we have internal name servers that support conditional
forwarding, we can simply configure the bastion host's resolver
to query those servers, since they can already see both the internal
and Internet namespaces.  If we use forwarding internally, depending
on the type of firewall we're running, we may also need to run a name
server on the bastion host itself.  If the firewall won't pass <span class="acronym">DNS</SPAN
>
traffic, we'll need to run at least a caching-only name server,
configured with the Internet roots, on the bastion host, so that
our internal name servers will have somewhere to forward their unresolved
queries.</P
><p class="para">Without conditional forwarding, the simplest
solution is to run a name server on the bastion host (if you aren't
already doing so). The name server must be configured as a slave
for <em class="emphasis">movie.edu</EM
> and any <em class="emphasis">in-addr.arpa</EM
> subdomains
in which it needs to resolve addresses. This way, if it receives
a query for a name in <em class="emphasis">movie.edu</EM
>, it'll use
its local authoritative data to resolve the name. If the name is
in a subdomain of <em class="emphasis">movie.edu</EM
>, it'll follow <span class="acronym">NS</SPAN
>
records in the zone data to query an internal name server for the
name. Therefore, it doesn't need to be configured as a slave for
any <em class="emphasis">movie.edu</EM
> subdomains, such as <em class="emphasis">fx.movie.edu</EM
>,
just the &quot;top&quot; domain (see <a class="xref" href="#DNS3-CHP-15-FIG-6" title="A split DNS solution">Figure 15.6</A
>).</P
><h4 class="figure"><a class="title" name="DNS3-CHP-15-FIG-6">Figure 15.6: A split DNS solution</A
></H4
><img class="graphic" src="figs/dns3_1506.gif" alt="Figure 15.6"><p class="para">The <em class="emphasis">named.conf</EM
> file
on our bastion host looks like this:</P
><blockquote class="screen"><pre class="screen">options {
                directory &quot;/var/named&quot;;
};

zone &quot;movie.edu&quot; {
                type slave;
                file &quot;db.movie&quot;;
                masters { 192.249.249.3; };
};

zone &quot;249.249.192.in-addr.arpa&quot; {
                type slave;
                file &quot;db.192.249.249&quot;;
                masters { 192.249.249.3; };
};

zone &quot;253.253.192.in-addr.arpa&quot; {
                type slave;
                file &quot;db.192.253.253.in-addr.arpa&quot;;
                masters { 192.249.249.3; };
};

zone &quot;254.253.192.in-addr.arpa&quot; {
                type slave;
                file &quot;db.192.253.254&quot;;
                masters { 192.253.254.2; };
};

zone &quot;20.254.192.in-addr.arpa&quot; {
                type slave;
                file &quot;db.192.254.20&quot;;
                masters { 192.253.254.2; };
};

zone &quot;.&quot; {
                type hint;
                file &quot;db.cache&quot;;
};&#13;</PRE
></BLOCKQUOTE
><p class="para">An equivalent <i class="filename">named.boot</I
> file would look like this:</P
><blockquote class="screen"><pre class="screen">directory    /var/named
secondary    movie.edu    192.249.249.3    db.movie
secondary    249.249.192.in-addr.arpa    192.249.249.3    db.192.249.249
secondary    253.253.192.in-addr.arpa    192.249.249.3    db.192.253.253
secondary    254.253.192.in-addr.arpa    192.253.254.2    db.192.253.254
secondary    20.254.192.in-addr.arpa     192.253.254.2    db.192.254.20
cache    .    db.cache    ; lists Internet roots</PRE
></BLOCKQUOTE
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="AUTOID-17294">15.4.6.2 Protecting zone data on the bastion host</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-17297"></A
>Unfortunately,
loading these zones on the bastion host also exposes them to the
possibility of disclosure on the Internet, which we were trying
to avoid by splitting the name space. But as long as we're running
<span class="acronym">BIND</SPAN
> 4.9 or better, we can protect the zone data using the<a class="indexterm" name="AUTOID-17301"></A
>
<em class="emphasis">secure_zone</EM
> <span class="acronym">TXT</SPAN
>
record or the <em class="emphasis">allow-query</EM
> substatement. With
<em class="emphasis">allow-query</EM
>, we can place a global access list
on our zone data.  Here's the new <em class="emphasis">options</EM
> statement
from our <em class="emphasis">named.conf</EM
> file:</P
><blockquote class="screen"><pre class="screen">options {
                directory &quot;/var/named&quot;;
                allow-query { 127/8; 192.249.249/24; 192.253.253/24;
                                192.253.254/24; 192.254.20/24; };
};</PRE
></BLOCKQUOTE
><p class="para">With <span class="acronym">BIND</SPAN
> 4.9's <em class="emphasis">secure_zone</EM
>,
we can turn off all external access to our zone data by including
these <span class="acronym">TXT</SPAN
> records in each db file:</P
><blockquote class="screen"><pre class="screen">secure_zone     <span class="acronym">IN</SPAN
>    <span class="acronym">TXT</SPAN
>    &quot;192.249.249.0:255.255.255.0&quot;
                <span class="acronym">IN</SPAN
>    <span class="acronym">TXT</SPAN
>    &quot;192.253.253.0:255.255.255.0&quot;
                <span class="acronym">IN</SPAN
>    <span class="acronym">TXT</SPAN
>    &quot;192.253.254.0:255.255.255.0&quot;
                <span class="acronym">IN</SPAN
>    <span class="acronym">TXT</SPAN
>    &quot;192.254.20.0:255.255.255.0&quot;
                <span class="acronym">IN</SPAN
>    <span class="acronym">TXT</SPAN
>    &quot;127.0.0.1:H&quot;</PRE
></BLOCKQUOTE
><p class="para">Don't forget to include the loopback address in the
list, or the bastion host's own resolver may not get answers from
the name server! </P
></DIV
></DIV
><a class="indexterm" name="AUTOID-17326"></A
><a class="indexterm" name="AUTOID-17327"></A
><a class="indexterm" name="AUTOID-17328"></A
><a class="indexterm" name="AUTOID-17329"></A
><a class="indexterm" name="AUTOID-17330"></A
><a class="indexterm" name="AUTOID-17331"></A
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch15_03.htm" title="15.3 A Limitation of MX Records"><img src="../gifs/txtpreva.gif" alt="Previous: 15.3 A Limitation of MX Records" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="DNS &amp; BIND"><img src="../gifs/txthome.gif" alt="DNS &amp; BIND" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch15_05.htm" title="15.5 Dialup Connections"><img src="../gifs/txtnexta.gif" alt="Next: 15.5 Dialup Connections" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">15.3 A Limitation of MX Records</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">15.5 Dialup Connections</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.htm" title="The Networking CD Bookshelf">Library Home</A
> | <a href="index.htm" title="DNS &amp; BIND">DNS &amp; BIND</A
> | <a href="../tcpip/index.htm" title="TCP/IP Network Administration">TCP/IP</A
> | <a href="../sendmail/index.htm" title="sendmail">sendmail</A
> | <a href="../smdref/index.htm" title="sendmail Desktop Reference">sendmail Reference</A
> | <a href="../firewall/index.htm" title="Building Internet Firewalls">Firewalls</A
> | <a href="../puis/index.htm" title="Practical UNIX &amp; Internet Security">Practical Security</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
