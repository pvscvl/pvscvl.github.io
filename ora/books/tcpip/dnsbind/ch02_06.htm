<html><head>
<title>[Chapter 2] 2.6 Resolution</TITLE>
<meta name="DC.title" content="DNS &amp; BIND"><meta name="DC.creator" content="Cricket Liu &amp; Paul Albitz"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-01-06T18:23:54Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-512-2" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch02_01.htm" title="2. How Does DNS Work?"><link rel="prev" href="ch02_05.htm" title="2.5 Resolvers"><link rel="next" href="ch02_07.htm" title="2.7 Caching"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="DNS &amp; BIND" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="DNS &amp; BIND"><area shape="RECT" coords="467,0,514,18" href="../search/dsrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch02_05.htm" title="2.5 Resolvers"><img src="../gifs/txtpreva.gif" alt="Previous: 2.5 Resolvers" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 2<br>How Does <span class="acronym">DNS</SPAN
> Work?</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch02_07.htm" title="2.7 Caching"><img src="../gifs/txtnexta.gif" alt="Next: 2.7 Caching" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="AUTOID-1429">2.6 Resolution</A
></H2
><p class="para"><a class="indexterm" name="DNS3-IDX-2-RESOLUTION"></A
><a class="indexterm" name="AUTOID-1434"></A
><a class="indexterm" name="AUTOID-1437"></A
><a class="indexterm" name="AUTOID-1441"></A
><a class="indexterm" name="AUTOID-1444"></A
>Name servers are adept at retrieving data from the domain name
space. They have to be, given the limited intelligence of some
resolvers. Not only can they give you data about zones for which
they're authoritative, they can also search through the domain name
space to find data for which they're not authoritative. This process
is called <i class="firstterm">name resolution</I
> or simply
<i class="firstterm">resolution</I
>.</P
><p class="para">Because the name space is structured as an inverted tree, a name
server needs only one piece of information to find its way to any
point in the tree: the domain names and addresses of the root name
servers (is that more than one piece?). A name server can issue a
query to a root name server for any name in the domain name space, and
the root name server will start the name server on its way.</P
><div class="sect2"><h3 class="sect2"><a class="title" name="AUTOID-1450">2.6.1 Root Name Servers</A
></H3
><p class="para">The<a class="indexterm" name="DNS3-IDX-2-ROOT-NAME-SERVERS"></A
><a class="indexterm" name="DNS3-IDX-2-TOP-LEVEL-DOMAINS-ROOT-NAME-SERVERS"></A
><a class="indexterm" name="DNS3-IDX-2-NAME-SERVERS-ROOT-NAME-SERVERS"></A
>
root name servers know where there are authoritative name servers for
each of the top-level domains.  (In fact, most of the root name servers
<em class="emphasis">are</EM
> authoritative for the generic top-level
domains.) Given a query about any domain name, the root name servers
can at least provide the names and addresses of the name servers that
are authoritative for the top-level domain that the domain name is
in. And the top-level name servers can provide the list of name
servers that are authoritative for the second-level domain that the
domain name is in. Each name server queried gives the querier
information about how to get <span class="quote">"closer"</SPAN
> to the answer it's
seeking, or it provides the answer itself.</P
><p class="para">The root name servers are clearly important to
resolution. Because they're so important, <span class="acronym">DNS</SPAN
>
provides mechanisms&nbsp;- such as caching, which we'll discuss a
little later&nbsp;- to help offload the root name servers. But in the
absence of other information, resolution has to start at the root name
servers. This makes the root name servers crucial to the operation of
<span class="acronym">DNS</SPAN
>; if all the Internet root name servers were
unreachable for an extended period, all resolution on the Internet
would fail.  To protect against this, the Internet has thirteen root
name servers (as of this writing) spread across different parts of the
network.  Two are on the <span class="acronym">MILNET</SPAN
>, the
U.S. military's portion of the Internet; one is on
<span class="acronym">SPAN</SPAN
>, <span class="acronym">NASA</SPAN
>'s internet; two are
in Europe; and one is in Japan.</P
><p class="para">Being the focal point for so many queries keeps the roots busy;
even with thirteen, the<a class="indexterm" name="AUTOID-1470"></A
>
traffic to each root name server is very high. A recent informal poll
of root name server administrators showed some roots receiving
thousands of queries per second.</P
><p class="para">Despite the load placed on root name servers, resolution on the
Internet works quite well. <a class="xref" href="#DNS3-CHP-2-FIG-12" title="Resolution of girigiri.gbrmpa.gov.au on the Internet">Figure 2.12</A
> shows
the resolution process for the address of a real host in a real
domain, including how the process corresponds to traversing the domain
name space tree.</P
><h4 class="figure"><a class="title" name="DNS3-CHP-2-FIG-12">Figure 2.12: Resolution of girigiri.gbrmpa.gov.au on the Internet</A
></H4
><img class="graphic" src="figs/dns3_0212.gif" alt="Figure 2.12"><p class="para">The local name server queries a root name server for the address
of <i class="systemitem.sitename">girigiri.gbrmpa.gov.au</I
> and
is referred to the <i class="systemitem.sitename">au</I
> name
servers. The local name server asks an <i class="systemitem.sitename">au</I
> name server the same question, and is
referred to the <i class="systemitem.sitename">gov.au</I
> name
servers. The <i class="systemitem.sitename">gov.au</I
> name
server refers the local name server to the <i class="systemitem.sitename">gbrmpa.gov.au</I
> name servers. Finally, the
local name server asks a <i class="systemitem.sitename">gbrmpa.gov.au</I
> name server for the address
and gets the answer.</P
><a class="indexterm" name="AUTOID-1486"></A
><a class="indexterm" name="AUTOID-1487"></A
><a class="indexterm" name="AUTOID-1488"></A
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="AUTOID-1489">2.6.2 Recursion</A
></H3
><p class="para"><a class="indexterm" name="DNS3-IDX-2-RECURSIVE-RESOLUTION"></A
><a class="indexterm" name="DNS3-IDX-2-QUERIES-RECURSIVE"></A
><a class="indexterm" name="DNS3-IDX-2-RESOLUTION-RECURSIVE"></A
><a class="indexterm" name="AUTOID-1500"></A
><a class="indexterm" name="AUTOID-1504"></A
>You may have noticed a big difference in the amount of work done by
the name servers in the previous example. Four of the name servers
simply returned the best answer they already had&nbsp;- mostly
referrals to other name servers&nbsp;- to the queries they
received. They didn't have to send their own queries to find the data
requested. But one name server&nbsp;- the one queried by the
resolver&nbsp;- had to follow successive referrals until it received an
answer.</P
><p class="para">Why couldn't the local name server simply have referred the
resolver to another name server? Because a stub resolver wouldn't have
had the intelligence to follow a referral.  And how did the name
server know not to answer with a referral?  Because the resolver
issued a <em class="emphasis">recursive</EM
> query.</P
><p class="para">Queries come in two flavors, <i class="firstterm">recursive</I
>
and <i class="firstterm">iterative</I
>, also called<a class="indexterm" name="DNS3-IDX-2-NONRECURSIVE-ITERATIVE-RESOLUTION"></A
><a class="indexterm" name="DNS3-IDX-2-NONRECURSIVE-ITERATIVE-RESOLUTION2"></A
><a class="indexterm" name="DNS3-IDX-2-QUERIES-ITERATIVE-NONRECURSIVE"></A
><a class="indexterm" name="DNS3-IDX-2-RESOLUTION-ITERATIVE-NONRECURSIVE"></A
>
<i class="firstterm">nonrecursive</I
>. Recursive queries place most of
the burden of resolution on a single name
server. <i class="firstterm">Recursion</I
>, or <i class="firstterm">recursive
resolution</I
>, is just a name for the resolution process used
by a name server when it receives recursive queries.</P
><p class="para"><a class="indexterm" name="AUTOID-1526"></A
><a class="indexterm" name="AUTOID-1529"></A
><a class="indexterm" name="AUTOID-1531"></A
><i class="firstterm">Iteration</I
>, or <i class="firstterm">iterative
resolution</I
>, on the other hand, refers to the resolution
process used by a name server when it receives iterative
queries.</P
><p class="para">In recursion a resolver sends a recursive query to a name server
for information about a particular domain name. The queried name
server is then obliged to respond with the requested data or with an
error stating that data of the requested type don't exist or that the
domain name specified doesn't exist.[8] The name server can't just refer the querier to a
different name server, because the query was recursive.</P
><blockquote class="footnote"><p class="para">[8] The <span class="acronym">BIND</SPAN
> 8 name server can be configured to
refuse recursive queries; see <a class="xref" href="ch10_01.htm" title="Advanced Features and Security">Chapter 10, <cite class="chapter">Advanced Features and Security</CITE
></A
>, for how and
why you'd want to do this.</P
></BLOCKQUOTE
><p class="para">If the queried name server isn't authoritative for the data
requested, it will have to query other name servers to find the
answer. It could send recursive queries to those name servers, thereby
obliging them to find the answer and return it (and passing the
buck). Or it could send iterative queries and possibly be referred to
other name servers <span class="quote">"closer"</SPAN
> to the domain name it's
looking for. Current implementations are polite and do the latter,
following the referrals until an answer is found.[9]</P
><blockquote class="footnote"><p class="para">[9] The exception is a name server configured to forward all
unresolved queries to a designated name server, called a
<i class="firstterm">forwarder</I
>. See <a class="xref" href="ch10_01.htm" title="Advanced Features and Security">Chapter 10</A
> for more information on
using forwarders.</P
></BLOCKQUOTE
><p class="para">A name server that receives a recursive query that it can't
answer itself will query the <span class="quote">"closest known"</SPAN
> name
servers.  The<a class="indexterm" name="AUTOID-1548"></A
><a class="indexterm" name="AUTOID-1550"></A
>
closest known name servers are the servers authoritative
for the zone closest to the domain name being looked up.  For example,
if the name server receives a recursive query for the address of the
domain name <i class="systemitem.sitename">girigiri.gbrmpa.gov.au</I
>, it will first
check whether it knows the name servers for <i class="systemitem.sitename">girigiri.gbrmpa.gov.au</I
>.  If it does, it
will send the query to one of them. If not, it will check whether it
knows the name servers for <i class="systemitem.sitename">gbrmpa.gov.au</I
>, and after that <i class="systemitem.sitename">gov.au</I
>, and then <i class="systemitem.sitename">au</I
>.  The default, where the check is
guaranteed to stop, is the root zone, since every name server knows
the domain names and addresses of the root name servers.</P
><p class="para">Using the closest known name servers ensures that the resolution
process is as short as possible.  A <i class="systemitem.sitename">berkeley.edu</I
> name server receiving a
recursive query for the address of <i class="systemitem.sitename">waxwing.ce.berkeley.edu</I
> shouldn't have to
consult the root name servers; it can simply follow delegation
information directly to the <i class="systemitem.sitename">ce.berkeley.edu</I
> name servers. Likewise, a
name server that has just looked up a domain name in <i class="systemitem.sitename">ce.berkeley.edu</I
> shouldn't have to start
resolution at the roots to look up another <i class="systemitem.sitename">ce.berkeley.edu</I
> (or <i class="systemitem.sitename">berkeley.edu</I
>) domain name; we'll show how
this works in the upcoming section on caching.</P
><p class="para">The name server that receives the recursive query always sends
the same query that the resolver sends it, for example, for the
address of <i class="systemitem.sitename">waxwing.ce.berkeley.edu</I
>.  It never sends
explicit queries for the name servers for <i class="systemitem.sitename">ce.berkeley.edu</I
> or <i class="systemitem.sitename">berkeley.edu</I
>, though this information is
also stored in the name space. Sending explicit queries could cause
problems: There may be no <i class="systemitem.sitename">ce.berkeley.edu</I
> name servers (that is,
<i class="systemitem.sitename">ce.berkeley.edu</I
> may be part
of the <i class="systemitem.sitename">berkeley.edu</I
>
zone). Also, it's always possible that an <i class="systemitem.sitename">edu</I
> or <i class="systemitem.sitename">berkeley.edu</I
> name server would know
<i class="systemitem.sitename">waxwing.ce.berkeley.edu</I
>'s
address.  An explicit query for the <i class="systemitem.sitename">berkeley.edu</I
> or <i class="systemitem.sitename">ce.berkeley.edu</I
> name servers would miss
this information.</P
><a class="indexterm" name="AUTOID-1577"></A
><a class="indexterm" name="AUTOID-1578"></A
><a class="indexterm" name="AUTOID-1579"></A
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="AUTOID-1580">2.6.3 Iteration</A
></H3
><p class="para">Iterative<a class="indexterm" name="AUTOID-1583"></A
>
resolution, on the other hand, doesn't require nearly as much work on
the part of the queried name server. In iterative resolution, a name
server simply gives the best answer <em class="emphasis">it already
knows</EM
> back to the querier. No additional querying is
required. The queried name server consults its local data (including
its cache, which we're about to talk about), looking for the data
requested. If it doesn't find the data there, it makes its best
attempt to give the querier data that will help it continue the
resolution process. Usually these are the domain names and addresses
of the closest known name servers.</P
><p class="para">What this amounts to is a resolution process that, taken as a
whole, looks like <a class="xref" href="#DNS3-CHP-2-FIG-13" title="The resolution process">Figure 2.13</A
>.</P
><h4 class="figure"><a class="title" name="DNS3-CHP-2-FIG-13">Figure 2.13: The resolution process</A
></H4
><img class="graphic" src="figs/dns3_0213.gif" alt="Figure 2.13"><p class="para">A resolver queries a local name server, which then queries a
number of other name servers in pursuit of an answer for the
resolver. Each name server it queries refers it to another name server
that is authoritative for a zone further down in the name space and
closer to the domain name sought. Finally, the local name server
queries the authoritative name server, which returns an answer.<a class="indexterm" name="AUTOID-1593"></A
><a class="indexterm" name="AUTOID-1594"></A
><a class="indexterm" name="AUTOID-1595"></A
><a class="indexterm" name="AUTOID-1596"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="AUTOID-1597">2.6.4 Mapping Addresses to Names</A
></H3
><p class="para"><a class="indexterm" name="DNS3-IDX-2-ADDRESSES-MAPPING-TO-NAMES"></A
><a class="indexterm" name="DNS3-IDX-2-MAPPING-ADDRESSES-TO-NAMES"></A
><a class="indexterm" name="DNS3-IDX-2-DOMAIN-NAMES-MAPPING-ADDRESSES-TO"></A
><a class="indexterm" name="AUTOID-1609"></A
>One major piece of functionality missing from the resolution process
as explained so far is how addresses get mapped back to
names. Address-to-name mapping is used to produce output that is
easier for humans to read and interpret (in log files, for
instance). It's also used in some authorization
checks. <span class="acronym">UNIX</SPAN
> hosts map addresses to domain names to
compare against entries in <i class="filename">.rhosts</I
> and
<i class="filename">hosts.equiv</I
> files, for example. When using host
tables, address-to-name mapping is trivial. It requires a
straightforward sequential search through the host table for an
address. The search returns the official host name listed. In
<span class="acronym">DNS</SPAN
>, however, address-to-name mapping isn't so
simple.  Data, including addresses, in the domain name space are
indexed by name. Given a domain name, finding an address is relatively
easy.  But finding the domain name that maps to a given address would
seem to require an exhaustive search of the data attached to every
domain name in the tree.</P
><p class="para">Actually, there's a better solution that's both clever and
effective. Because it's easy to find data once you're given the domain
name that indexes that data, why not create a part of the domain name
space that uses addresses as labels?  In the Internet's domain name
space, this portion of the name space is the<a class="indexterm" name="AUTOID-1617"></A
>
<i class="systemitem.sitename">in-addr.arpa</I
> domain.</P
><p class="para">Nodes in the <i class="systemitem.sitename">in-addr.arpa</I
> domain are labelled after
the numbers in the dotted-octet representation of
<span class="acronym">IP</SPAN
> addresses.<a class="indexterm" name="AUTOID-1623"></A
><a class="indexterm" name="AUTOID-1625"></A
>
(Dotted-octet representation refers to the common method of expressing
32-bit <span class="acronym">IP</SPAN
> addresses as four numbers in the range 0
to 255, separated by dots.) The <i class="systemitem.sitename">in-addr.arpa</I
> domain, for example, could
have up to 256 subdomains, one corresponding to each possible value in
the first octet of an <span class="acronym">IP</SPAN
> address. Each of these
subdomains could have up to 256 subdomains of its own, corresponding
to the possible values of the second octet. Finally, at the fourth
level down, there are resource records attached to the final octet
giving the full domain name of the host or network at that
<span class="acronym">IP</SPAN
> address. That makes for an awfully big domain:
<i class="systemitem.sitename">in-addr.arpa</I
>, shown in <a class="xref" href="#DNS3-CHP-2-FIG-14" title="addr.arpa domain">Figure 2.14</A
>, is roomy enough for every
<span class="acronym">IP</SPAN
> address on the Internet.</P
><h4 class="figure"><a class="title" name="DNS3-CHP-2-FIG-14">Figure 2.14: addr.arpa domain</A
></H4
><img class="graphic" src="figs/dns3_0214.gif" alt="Figure 2.14"><p class="para">Note that when read in a domain name, the <span class="acronym">IP</SPAN
>
address appears backward because the name is read from leaf to root.
For example, if <i class="systemitem.sitename">winnie.corp.hp.com</I
>'s
<span class="acronym">IP</SPAN
> address is 15.16.192.152, the corresponding
<i class="systemitem.sitename">in-addr.arpa</I
> subdomain is
<i class="systemitem.sitename">152.192.16.15.in-addr.arpa</I
>,
which maps back to the domain name <i class="systemitem.sitename">winnie.corp.hp.com</I
>.</P
><p class="para"><span class="acronym">IP</SPAN
> addresses could have been represented the
opposite way in the name space, with the first octet of the
<span class="acronym">IP</SPAN
> address at the bottom of the <i class="systemitem.sitename">in-addr.arpa</I
> domain. That way, the
<span class="acronym">IP</SPAN
> address would have read correctly (forward) in
the domain name.</P
><p class="para"><span class="acronym">IP</SPAN
> addresses are hierarchical, however, just
like domain names. Network numbers are doled out much as domain names
are, and administrators can then subnet their address space and
further delegate numbering. The difference is that
<span class="acronym">IP</SPAN
> addresses get more specific from left to right,
while domain names get less specific from left to right. <a class="xref" href="#DNS3-CHP-2-FIG-15" title="Hierarchical names and addresses">Figure 2.15</A
> shows what we mean.</P
><h4 class="figure"><a class="title" name="DNS3-CHP-2-FIG-15">Figure 2.15: Hierarchical names and addresses</A
></H4
><img class="graphic" src="figs/dns3_0215.gif" alt="Figure 2.15"><p class="para">Making the first octets in the <span class="acronym">IP</SPAN
> address
appear highest in the tree gives administrators the ability to
delegate authority for <i class="systemitem.sitename">in-addr.arpa</I
> domains along network
lines. For example, the <i class="systemitem.sitename">15.in-addr.arpa</I
> domain, which contains
the reverse mapping information for all hosts whose
<span class="acronym">IP</SPAN
> addresses start with 15, can be delegated to the
administrators of network 15.0.0.0. This would be impossible if the
octets appeared in the opposite order. If the <span class="acronym">IP</SPAN
>
addresses were represented the other way around, <i class="systemitem.sitename">15.in-addr.arpa</I
> would consist of every
host whose <span class="acronym">IP</SPAN
> address <em class="emphasis">ended</EM
>
with 15&nbsp;- not a practical domain to try to delegate.
<a class="indexterm" name="AUTOID-1665"></A
><a class="indexterm" name="AUTOID-1666"></A
><a class="indexterm" name="AUTOID-1667"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="AUTOID-1668">2.6.5 Inverse Queries</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-1671"></A
><a class="indexterm" name="AUTOID-1674"></A
><a class="indexterm" name="AUTOID-1676"></A
><a class="indexterm" name="AUTOID-1679"></A
><a class="indexterm" name="AUTOID-1682"></A
>The <i class="systemitem.sitename">in-addr.arpa</I
> name space
is clearly only useful for <span class="acronym">IP</SPAN
> address-to-domain
name mapping.  Searching for a domain name that indexes an
<em class="emphasis">arbitrary</EM
> piece of data&nbsp;- something besides
an address&nbsp;- in the domain name space would require another
specialized name space like <i class="systemitem.sitename">in-addr.arpa</I
> or an exhaustive
search.</P
><p class="para">That exhaustive search is to some extent possible, and it's
called an <i class="firstterm">inverse query</I
>. An inverse query is a search for the domain
name that indexes a given datum. It's processed solely by the name
server receiving the query. That name server searches all of its local
data for the item sought and returns the domain name that indexes it,
if possible. If it can't find the data, it gives up. No attempt is
made to forward the query to another name server.</P
><p class="para">Because any one name server only knows about part of the overall
domain name space, an inverse query is never guaranteed to return an
answer. For example, if a name server receives an inverse query for an
<span class="acronym">IP</SPAN
> address it knows nothing about, it can't return
an answer, but it also doesn't know that the <span class="acronym">IP</SPAN
>
address doesn't exist, because it only holds part of the
<span class="acronym">DNS</SPAN
> database. What's more, the implementation of
inverse queries is optional according to the <span class="acronym">DNS</SPAN
>
specification; <span class="acronym">BIND</SPAN
> 4.9.7 still contains the code
that implements inverse queries, but it's commented out by
default. <span class="acronym">BIND</SPAN
> 8 no longer includes that code at
all, though it does recognize inverse queries and can make up fake
responses to them.[10] That's fine with us, because very little software (such as
archaic versions of <kbd class="command">nslookup</KBD
>) actually still uses
inverse queries.<a class="indexterm" name="AUTOID-1702"></A
></P
><blockquote class="footnote"><p class="para">[10]  For details on this functionality, see <a class="xref" href="ch11_07.htm#QUERY-REFUSED" title="Query Refused">Section 11.7.4, "Query Refused"</A
>.</P
></BLOCKQUOTE
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch02_05.htm" title="2.5 Resolvers"><img src="../gifs/txtpreva.gif" alt="Previous: 2.5 Resolvers" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="DNS &amp; BIND"><img src="../gifs/txthome.gif" alt="DNS &amp; BIND" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch02_07.htm" title="2.7 Caching"><img src="../gifs/txtnexta.gif" alt="Next: 2.7 Caching" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">2.5 Resolvers</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">2.7 Caching</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.htm" title="The Networking CD Bookshelf">Library Home</A
> | <a href="index.htm" title="DNS &amp; BIND">DNS &amp; BIND</A
> | <a href="../tcpip/index.htm" title="TCP/IP Network Administration">TCP/IP</A
> | <a href="../sendmail/index.htm" title="sendmail">sendmail</A
> | <a href="../smdref/index.htm" title="sendmail Desktop Reference">sendmail Reference</A
> | <a href="../firewall/index.htm" title="Building Internet Firewalls">Firewalls</A
> | <a href="../puis/index.htm" title="Practical UNIX &amp; Internet Security">Practical Security</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
