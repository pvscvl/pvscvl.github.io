<html><head>
<title>[Chapter 14] Programming with the Resolver and Name Server Library Routines</TITLE>
<meta name="DC.title" content="DNS &amp; BIND"><meta name="DC.creator" content="Cricket Liu &amp; Paul Albitz"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-01-06T18:41:17Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-512-2" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="index.htm" title="DNS &amp; BIND"><link rel="prev" href="ch13_06.htm#AUTOID-14707" title="13.6 Problem Symptoms"><link rel="next" href="ch14_02.htm" title="14.2 C Programming with the Resolver Library Routines"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="DNS &amp; BIND" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="DNS &amp; BIND"><area shape="RECT" coords="467,0,514,18" href="../search/dsrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch13_06.htm#AUTOID-14707" title="13.6 Problem Symptoms"><img src="../gifs/txtpreva.gif" alt="Previous: 13.6 Problem Symptoms" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 14</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch14_02.htm" title="14.2 C Programming with the Resolver Library Routines"><img src="../gifs/txtnexta.gif" alt="Next: 14.2 C Programming with the Resolver Library Routines" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="CHAPTER"><h1 class="chapter"><a class="title" name="DNS3-CHP-14">14. Programming with the Resolver and Name Server Library
Routines</A
></H1
><div class="htmltoc"><p><b>Contents:</B
><br><a class="sect1" href="#AUTOID-15082" title="14.1 Shell Script Programming with nslookup">Shell Script Programming with nslookup</A
><br><a class="sect1" href="ch14_02.htm" title="14.2 C Programming with the Resolver Library Routines">C Programming with the Resolver Library Routines</A
><br><a class="sect1" href="ch14_03.htm#AUTOID-16260" title="14.3 Perl Programming with Net::DNS">Perl Programming with Net::DNS</A
></P
><p></P
></DIV
><div class="epigraph"><p class="para" align="right"><i>&quot;I know what you're thinking about,&quot; said Tweedledum; &quot;but it isn't so, nohow.&quot;</I
></P
><p class="para" align="right"><i>&quot;Contrariwise,&quot; continued Tweedledee, &quot;if it was so, it might be; and if it were so, it would be; but as it isn't, it ain't. That's logic.&quot;</I
></P
></DIV
><p class="para"><a class="indexterm" name="CH14.PROGRAMRESOLVERS2"></A
><a class="indexterm" name="CH14.PROGRAMRESOLVERS1"></A
>I bet you think resolver programming
is hard. Contrariwise! It isn't very hard, really. The format of
<span class="acronym">DNS</SPAN
> packets is quite straightforward&nbsp;- you don't have to deal with
<span class="acronym">ASN</SPAN
>.1[1]
at all, as you have to do with <span class="acronym">SNMP</SPAN
>. And you have nifty library
routines to make parsing <span class="acronym">DNS</SPAN
> packets easy. We've included portions
of <span class="acronym">RFC</SPAN
> 1035 in <a class="xref" href="appa_01.htm" title="DNS Message Format and Resource Records">Appendix A, <cite class="appendix">DNS Message Format and Resource
Records</CITE
></A
>.
However, you might find it handy to have a copy of <span class="acronym">RFC</SPAN
> 1035 to look
at while we are going through this chapter; at least have a copy
of it nearby when you write your own <span class="acronym">DNS</SPAN
> program.</P
><blockquote class="footnote"><p class="para">[1] <span class="acronym">ASN</SPAN
>.1 stands for Abstract Syntax Notation. <span class="acronym">ASN</SPAN
>.1
is a language for encoding object types, accepted as an international
standard by the International Organization for Standardization.</P
></BLOCKQUOTE
><div class="sect1"><h2 class="sect1"><a class="title" name="AUTOID-15082">14.1 Shell Script Programming with nslookup</A
></H2
><p class="para"><a class="indexterm" name="CH14.SHELL1"></A
><a class="indexterm" name="CH14.SHELL2"></A
>Before you go off and write a
C program to do your <span class="acronym">DNS</SPAN
> chore, you should write the program as
a shell script using <em class="emphasis">nslookup</EM
>. There are good
reasons to start with a shell script:</P
><ul class="itemizedlist"><li class="listitem"><p class="para">You'll write the shell script much
faster than you'll write the C program. </P
></LI
><li class="listitem"><p class="para">If you are not comfortable with <span class="acronym">DNS</SPAN
>, you can work
out the muck in your program's logic with a quick shell script prototype.
When you finally write the C program, you can focus on the additional
control you have with C, rather than spending your time reworking
the basic functionality. </P
></LI
><li class="listitem"><p class="para">You might find out that the shell script version
does your task well enough so that you don't have to write the C
program after all. Not only is the coding time shorter, but shell
scripts are easier to maintain if you stick with them for the long
run.</P
></LI
></UL
><p class="para">If you prefer Perl over
plain old shell programming, you can do that too.  At the end of
this chapter, we'll show you how to use the Perl Net::<span class="acronym">DNS</SPAN
> module
written by Michael Fuhr.</P
><div class="sect2"><h3 class="sect2"><a class="title" name="AUTOID-15102">14.1.1 A Typical Problem</A
></H3
><p class="para">Before you write a
program, you have to have a problem to solve. Let's suppose you
want your network management system to watch over your primary and
secondary name servers. You want it to notify you of several problems:
a name server that is not running (it might have died), a name server
that is not authoritative for a domain that it is supposed to be
authoritative for (the boot file might have been messed up), or
a name server that has fallen behind in updating its data (the primary's
serial number might have been decreased accidentally). </P
><p class="para">Each
of these problems is easily detectable. If a name server is not
running on a host, the host will send back an<a class="indexterm" name="AUTOID-15106"></A
>
<span class="acronym">ICMP</SPAN
>
<em class="emphasis">port unreachable</EM
> message.
You can find this out with both <em class="emphasis">nslookup</EM
> and
the resolver routines. Checking if a name server is authoritative
for a domain is easy: ask it for the domain's<a class="indexterm" name="AUTOID-15111"></A
>
<span class="acronym">SOA</SPAN
> record. If the answer is nonauthoritative,
or the name server does not have the <span class="acronym">SOA</SPAN
> record, there is a problem.
You'll have to ask for the <span class="acronym">SOA</SPAN
> record in a<a class="indexterm" name="AUTOID-15116"></A
><a class="indexterm" name="AUTOID-15118"></A
><a class="indexterm" name="AUTOID-15120"></A
>
<em class="emphasis">nonrecursive</EM
> query
so that the name server doesn't go off and look up the <span class="acronym">SOA</SPAN
> record
from another server. Once you have the <span class="acronym">SOA</SPAN
> record, you can extract
the serial number.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="AUTOID-15126">14.1.2 Solving This Problem with a Script</A
></H3
><p class="para">This
problem requires a program that takes the domain name of a zone
as an argument, looks up the name servers for that zone, and then
queries each of those name servers for the <span class="acronym">SOA</SPAN
> record for the zone.
The response will show if the server is authoritative, and it will
show the zone's serial number. If there is no response, the program
needs to determine if a name server is even running on the host.
Once this program is written, it needs to be called for every zone
you want to watch over. Since this program looks up the name servers
(by looking up the <span class="acronym">NS</SPAN
> records for the zone), we assume that you
have listed all your name servers in <span class="acronym">NS</SPAN
> records in your zone data.
If that is not the case, then you will have to change this program
to take a list of name servers from the command line.</P
><p class="para">Let's
write the basic program as a shell script that uses <em class="emphasis">nslookup</EM
>.
First, we must figure out what the output of <em class="emphasis">nslookup</EM
> looks
like, so that we can parse it with <span class="acronym">UNIX</SPAN
> tools. We'll look up <span class="acronym">NS</SPAN
>
records to find out which servers are supposed to be authoritative
for a zone, both when the server is authoritative for the <span class="acronym">NS</SPAN
> records
and when it isn't:</P
><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>nslookup</B
></CODE
>
Default Server:  relay.hp.com
Address:  15.255.152.2

&gt; <code class="userinput"><b>set type=ns</B
></CODE
></PRE
></BLOCKQUOTE
><p class="para">Find out what the response looks like when the server is not
authoritative for the NS records:</P
><blockquote class="screen"><pre class="screen">&gt; <code class="userinput"><b>mit.edu.</B
></CODE
>
Server:  relay.hp.com
Address:  15.255.152.2

Non-authoritative answer:
mit.edu nameserver = <span class="acronym">STRAWB</SPAN
>.<span class="acronym">MIT</SPAN
>.<span class="acronym">EDU</SPAN
>
mit.edu nameserver = W20<span class="acronym">NS</SPAN
>.<span class="acronym">MIT</SPAN
>.<span class="acronym">EDU</SPAN
>
mit.edu nameserver = <span class="acronym">BITSY</SPAN
>.<span class="acronym">MIT</SPAN
>.<span class="acronym">EDU</SPAN
>

Authoritative answers can be found from:
<span class="acronym">MIT</SPAN
>.<span class="acronym">EDU</SPAN
> nameserver = <span class="acronym">STRAWB</SPAN
>.<span class="acronym">MIT</SPAN
>.<span class="acronym">EDU</SPAN
>
<span class="acronym">MIT</SPAN
>.<span class="acronym">EDU</SPAN
> nameserver = W20<span class="acronym">NS</SPAN
>.<span class="acronym">MIT</SPAN
>.<span class="acronym">EDU</SPAN
>
<span class="acronym">MIT</SPAN
>.<span class="acronym">EDU</SPAN
> nameserver = <span class="acronym">BITSY</SPAN
>.<span class="acronym">MIT</SPAN
>.<span class="acronym">EDU</SPAN
>
<span class="acronym">STRAWB</SPAN
>.<span class="acronym">MIT</SPAN
>.<span class="acronym">EDU</SPAN
>  internet address = 18.71.0.151
W20<span class="acronym">NS</SPAN
>.<span class="acronym">MIT</SPAN
>.<span class="acronym">EDU</SPAN
>   internet address = 18.70.0.160
BITSY.MIT.EDU   internet address = 18.72.0.3</PRE
></BLOCKQUOTE
><p class="para">Find out what the response looks like when the server is
authoritative for the <span class="acronym">NS</SPAN
> records:</P
><blockquote class="screen"><pre class="screen">&gt; <code class="userinput"><b>server strawb.mit.edu.</B
></CODE
>
Default Server:  strawb.mit.edu
Address:  18.71.0.151

&gt; <code class="userinput"><b>mit.edu.</B
></CODE
>
Server:  strawb.mit.edu
Address:  18.71.0.151

mit.edu nameserver = <span class="acronym">BITSY</SPAN
>.<span class="acronym">MIT</SPAN
>.<span class="acronym">EDU</SPAN
>
mit.edu nameserver = <span class="acronym">STRAWB</SPAN
>.<span class="acronym">MIT</SPAN
>.<span class="acronym">EDU</SPAN
>
mit.edu nameserver = W20<span class="acronym">NS</SPAN
>.<span class="acronym">MIT</SPAN
>.<span class="acronym">EDU</SPAN
>
<span class="acronym">BITSY</SPAN
>.<span class="acronym">MIT</SPAN
>.<span class="acronym">EDU</SPAN
>   internet address = 18.72.0.3
<span class="acronym">STRAWB</SPAN
>.<span class="acronym">MIT</SPAN
>.<span class="acronym">EDU</SPAN
>  internet address = 18.71.0.151
W20<span class="acronym">NS</SPAN
>.<span class="acronym">MIT</SPAN
>.<span class="acronym">EDU</SPAN
>   internet address = 18.70.0.160</PRE
></BLOCKQUOTE
><p class="para">You can see from this output that we can grab the
name server names by looking for the lines that contain <kbd class="command">nameserver</KBD
> and
saving the last field. When the server was not authoritative for
the <span class="acronym">NS</SPAN
> records, it printed them twice, so we'll have to weed out
duplicates.</P
><p class="para">Next, we look up the <span class="acronym">SOA</SPAN
> record for the
zone, both when the server is authoritative for the <span class="acronym">SOA</SPAN
> record and
when it isn't. We turn off<a class="indexterm" name="AUTOID-15203"></A
>
<em class="emphasis">recurse</EM
> so the name server doesn't go off and
query an authoritative name server for the <span class="acronym">SOA</SPAN
>:</P
><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>nslookup</B
></CODE
>
Default Server:  relay.hp.com
Address:  15.255.152.2

&gt; <code class="userinput"><b>set type=soa</B
></CODE
>
&gt; <code class="userinput"><b>set norecurse</B
></CODE
></PRE
></BLOCKQUOTE
><p class="para">Find out what the response looks like when the server does not have the <span class="acronym">SOA</SPAN
> record:</P
><blockquote class="screen"><pre class="screen">&gt; <code class="userinput"><b>mit.edu.</B
></CODE
>
Server:  relay.hp.com
Address:  15.255.152.2

Authoritative answers can be found from:
MIT.EDU nameserver = STRAWB.MIT.EDU
MIT.EDU nameserver = W20NS.MIT.EDU
MIT.EDU nameserver = BITSY.MIT.EDU
STRAWB.MIT.EDU  internet address = 18.71.0.151
W20NS.MIT.EDU   internet address = 18.70.0.160
BITSY.MIT.EDU   internet address = 18.72.0.3</PRE
></BLOCKQUOTE
><p class="para">Find out what the response looks like when the server is authoritative for the zone: </P
><blockquote class="screen"><pre class="screen">&gt; <code class="userinput"><b>server strawb.mit.edu.</B
></CODE
>
Default Server:  strawb.mit.edu
Address:  18.71.0.151

&gt; <code class="userinput"><b>mit.edu.</B
></CODE
>
Server:  strawb.mit.edu
Address:  18.71.0.151

mit.edu
        origin = <span class="acronym">BITSY</SPAN
>.<span class="acronym">MIT</SPAN
>.<span class="acronym">EDU</SPAN
>
        mail addr = <span class="acronym">NETWORK</SPAN
>-<span class="acronym">REQUEST</SPAN
>.<span class="acronym">BITSY</SPAN
>.<span class="acronym">MIT</SPAN
>.<span class="acronym">EDU</SPAN
>
        serial = 378
        refresh = 3600 (1 hour)
        retry   = 300 (5 mins)
        expire  = 3600000 (41 days 16 hours)
        minimum ttl = 21600 (6 hours)</PRE
></BLOCKQUOTE
><p class="para">When the name server was not authoritative for the zone,
it returned references to other name servers. If the name server
had previously looked up the <span class="acronym">SOA</SPAN
> record and cached it, the name
server would have returned the <span class="acronym">SOA</SPAN
> record and said it was &quot;non-authoritative.&quot;
We need to check for both cases. When the name server returns the
<span class="acronym">SOA</SPAN
> record and it is authoritative, we can grab the serial number
from the line that contains <kbd class="command">serial</KBD
>.</P
><p class="para">Now,
we need to see what <em class="emphasis">nslookup</EM
> returns when no
name server is running on a host. We'll change servers to a host
that does not normally run a name server and look up an <span class="acronym">SOA</SPAN
> record:</P
><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>nslookup</B
></CODE
>
Default Server:  relay.hp.com
Address:  15.255.152.2

&gt; <code class="userinput"><b>server galt.cs.purdue.edu.</B
></CODE
>
Default Server:  galt.cs.purdue.edu
Address:  128.10.2.39

&gt; <code class="userinput"><b>set type=soa</B
></CODE
>
&gt; <code class="userinput"><b>mit.edu.</B
></CODE
>
Server:  galt.cs.purdue.edu
Address:  128.10.2.39

*** galt.cs.purdue.edu can't find mit.edu.: No response from server</PRE
></BLOCKQUOTE
><p class="para">Last, we need to see what <em class="emphasis">nslookup</EM
> returns
if a host is not responding. We can test this by switching servers
to an unused <span class="acronym">IP</SPAN
> address on our <span class="acronym">LAN</SPAN
>: </P
><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>nslookup</B
></CODE
>
Default Server:  relay.hp.com
Address:  15.255.152.2

&gt; <code class="userinput"><b>server 15.255.152.100</B
></CODE
>
Default Server:  [15.255.152.100]
Address:  15.255.152.100

&gt; <code class="userinput"><b>set type=soa</B
></CODE
>
&gt; <code class="userinput"><b>mit.edu.</B
></CODE
>
Server:  [15.255.152.100]
Address:  15.255.152.100

*** Request to [15.255.152.100] timed-out</PRE
></BLOCKQUOTE
><p class="para">In the last two error cases, the error message was written
to <em class="emphasis">stderr</EM
>. We can make use of that fact when
writing our shell script. Now we are ready to compose the shell
script. We'll call it <em class="emphasis">check_soa</EM
>:</P
><blockquote class="screen"><pre class="screen">#!/bin/sh
if test &quot;$1&quot; = &quot;&quot;
then
    echo usage: $0 domain
    exit 1
fi
<span class="acronym">DOMAIN</SPAN
>=$1
#
# Use nslookup to discover the nameservers for this domain ($1).
# Use awk to grab the name server names from the nameserver lines.
# (The names are always in the last field.)  Use sort -u to weed out
# duplicates; we don't actually care about collation.
#
<span class="acronym">SERVERS</SPAN
>=`nslookup -type=ns $<span class="acronym">DOMAIN</SPAN
> |\
                 awk '/nameserver/ {print $<span class="acronym">NF</SPAN
>}' | sort -u`
if test &quot;$<span class="acronym">SERVERS</SPAN
>&quot; = &quot;&quot;
then
    #
    # Didn't find any servers.  Just quit silently; nslookup will
    # have detected this error and printed a message.  That will
    # suffice.
    #
    exit 1
fi
#
# Check each server's <span class="acronym">SOA</SPAN
> serial number.  The output from
# nslookup is saved in two tmp files: nso.$$ (standard output)
# and nse.$$ (standard error).  These files are rewritten on
# every iteration.  Turn off defname and search since we
# should be dealing with fully qualified names.
#
# <span class="acronym">NOTE</SPAN
>: this loop is rather long; don't be fooled.
#
for i in $<span class="acronym">SERVERS</SPAN
>
do
  nslookup &gt;/tmp/nso.$$ 2&gt;/tmp/nse.$$ &lt;&lt;-<span class="acronym">EOF</SPAN
>
    server $i
    set nosearch
    set nodefname
    set norecurse
    set q=soa
    $<span class="acronym">DOMAIN</SPAN
>
<span class="acronym">EOF</SPAN
>
  #
  # Does this response indicate that the current server ($i) is
  # authoritative?  The server is <span class="acronym">NOT</SPAN
> authoritative if (a) the
  # response says so, or (b) the response tells you to find
  # authoritative info elsewhere.
  #
  if egrep &quot;Non-authoritative|Authoritative answers can be&quot; \
                                          /tmp/nso.$$ &gt;/dev/null
  then
    echo $i is not authoritative for $<span class="acronym">DOMAIN</SPAN
>
    continue
  fi
  #
  # We know the server is authoritative; extract the serial number.
  #
  <span class="acronym">SERIAL</SPAN
>=`cat /tmp/nso.$$ | grep serial | sed -e &quot;s/.*= //&quot;`
  if test &quot;$<span class="acronym">SERIAL</SPAN
>&quot; = &quot;&quot;
  then
    #
    # We get here if <span class="acronym">SERIAL</SPAN
> is null.  In this case, there should
    # be an error message from nslookup; so cat the &quot;standard
    # error&quot; file.
    #
    cat /tmp/nse.$$
  else
    #
    # Report the server's name and its serial number.
    #
    echo $i has serial number $<span class="acronym">SERIAL</SPAN
>
  fi
done  # end of the &quot;for&quot; loop
#
# Delete the temporary files.
#
rm -f /tmp/nso.$$ /tmp/nse.$$</PRE
></BLOCKQUOTE
><p class="para">Here is what the output looks like:</P
><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>check_soa mit.edu</B
></CODE
>
<span class="acronym">BITSY</SPAN
>.<span class="acronym">MIT</SPAN
>.<span class="acronym">EDU</SPAN
> has serial number 378
<span class="acronym">STRAWB</SPAN
>.<span class="acronym">MIT</SPAN
>.<span class="acronym">EDU</SPAN
> has serial number 378
W20<span class="acronym">NS</SPAN
>.<span class="acronym">MIT</SPAN
>.<span class="acronym">EDU</SPAN
> has serial number 378</PRE
></BLOCKQUOTE
><p class="para">If you are pressed for time, this short tool will solve
your problem, and you can go on to other work. If you find that
you are checking lots of zones and that this tool is too slow, you'll
want to convert it to a C program. Also, if you want more control
over the error messages&nbsp;- rather than relying on <em class="emphasis">nslookup</EM
> for
error messages&nbsp;- then you'll have to write a C program. We'll do just
that, later on in this chapter.</P
></DIV
><a class="indexterm" name="AUTOID-15284"></A
><a class="indexterm" name="AUTOID-15285"></A
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch13_06.htm#AUTOID-14707" title="13.6 Problem Symptoms"><img src="../gifs/txtpreva.gif" alt="Previous: 13.6 Problem Symptoms" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="DNS &amp; BIND"><img src="../gifs/txthome.gif" alt="DNS &amp; BIND" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch14_02.htm" title="14.2 C Programming with the Resolver Library Routines"><img src="../gifs/txtnexta.gif" alt="Next: 14.2 C Programming with the Resolver Library Routines" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">13.6 Problem Symptoms</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">14.2 C Programming with the Resolver Library Routines</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.htm" title="The Networking CD Bookshelf">Library Home</A
> | <a href="index.htm" title="DNS &amp; BIND">DNS &amp; BIND</A
> | <a href="../tcpip/index.htm" title="TCP/IP Network Administration">TCP/IP</A
> | <a href="../sendmail/index.htm" title="sendmail">sendmail</A
> | <a href="../smdref/index.htm" title="sendmail Desktop Reference">sendmail Reference</A
> | <a href="../firewall/index.htm" title="Building Internet Firewalls">Firewalls</A
> | <a href="../puis/index.htm" title="Practical UNIX &amp; Internet Security">Practical Security</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
