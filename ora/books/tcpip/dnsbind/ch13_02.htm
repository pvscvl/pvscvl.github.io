<html><head>
<title>[Chapter 13] 13.2 Troubleshooting Tools and Techniques</TITLE>
<meta name="DC.title" content="DNS &amp; BIND"><meta name="DC.creator" content="Cricket Liu &amp; Paul Albitz"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-01-06T18:38:52Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-512-2" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch13_01.htm" title="13. Troubleshooting DNS and BIND"><link rel="prev" href="ch13_01.htm" title="13.1 Is NIS Really Your Problem?"><link rel="next" href="ch13_03.htm#AUTOID-13910" title="13.3 Potential Problem List"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="DNS &amp; BIND" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="DNS &amp; BIND"><area shape="RECT" coords="467,0,514,18" href="../search/dsrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch13_01.htm" title="13.1 Is NIS Really Your Problem?"><img src="../gifs/txtpreva.gif" alt="Previous: 13.1 Is NIS Really Your Problem?" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 13<br>Troubleshooting <span class="acronym">DNS</SPAN
> and
<span class="acronym">BIND</SPAN
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch13_03.htm#AUTOID-13910" title="13.3 Potential Problem List"><img src="../gifs/txtnexta.gif" alt="Next: 13.3 Potential Problem List" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="AUTOID-13411">13.2 Troubleshooting Tools and Techniques</A
></H2
><p class="para"><a class="indexterm" name="CH13.TOOLS"></A
>We went over <kbd class="command">nslookup</KBD
> and the name server's debugging
output in the last two chapters. Before we go on, let's introduce
two new tools that can be useful in troubleshooting: <kbd class="command">named-xfer</KBD
> and
name server database dumps.</P
><div class="sect2"><h3 class="sect2"><a class="title" name="USE-NAMED-XFER">13.2.1 How to Use named-xfer</A
></H3
><p class="para"><a class="indexterm" name="CH13.XFER1"></A
><a class="indexterm" name="CH13.XFER2"></A
><a class="indexterm" name="AUTOID-13427"></A
><kbd class="command">named-xfer</KBD
> is
the program <kbd class="command">named</KBD
> starts to perform zone transfers.
<kbd class="command">named-xfer</KBD
> checks whether the slave's copy
of the zone data is up-to-date, and transfers a new zone, if necessary.
(In versions 4.9 and 8, <kbd class="command">named</KBD
> checks first
if a zone is up to date in order to avoid starting up child processes
when no transfer is necessary.)</P
><p class="para">In <a class="xref" href="ch12_01.htm" title="Reading BIND Debugging Output">Chapter 12, <cite class="chapter">Reading <span class="acronym">BIND</SPAN
> Debugging Output</CITE
></A
>, we showed you the debugging output
a slave name server logged as it checked its zone. When the slave
server transferred the zone, it started a child process (<kbd class="command">named-xfer</KBD
>)
to pull the data to the local file system. We didn't tell you, however,
that you can also start <kbd class="command">named-xfer</KBD
> manually, instead
of waiting for <kbd class="command">named</KBD
> to start it, and that
you can tell it to produce debugging output independently of <kbd class="command">named</KBD
>.</P
><p class="para">This can be useful if you're tracking down a problem with
zone transfers but don't want to wait for <kbd class="command">named</KBD
> to
schedule one. To test a<a class="indexterm" name="AUTOID-13443"></A
><a class="indexterm" name="AUTOID-13446"></A
>
zone transfer manually,
you need to specify a number of command-line options:</P
><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>/etc/named-xfer</B
></CODE
>
Usage: xfer
        -z zone_to_transfer
        -f db_file
        -s serial_no
        [-d debug_level]
        [-l debug_log_file]
        [-t trace_file]
        [-p port]
        [-S]
        [-C class]
        servers...</PRE
></BLOCKQUOTE
><p class="para">When <kbd class="command">named</KBD
> starts <kbd class="command">named-xfer</KBD
>,
it specifies the <i class="option">-z</I
> option (the zone <kbd class="command">named</KBD
> wants
to check), the <i class="option">-f</I
> option (the name of the db
file that corresponds to the zone, from <i class="filename">named.boot</I
>),
the <i class="option">-s</I
> option (the zone's serial number on
the slave, from the current <span class="acronym">SOA</SPAN
> record), and the addresses of
the servers the secondary was instructed to load from (the <span class="acronym">IP</SPAN
> addresses
from the <em class="emphasis">masters</EM
> substatement in the <i class="structfield">zone</I
> statement
in <i class="filename">named.conf</I
>, or from the <kbd class="command">secondary</KBD
> directive in <i class="filename">named.boot</I
>).
If <kbd class="command">named</KBD
> is running in debug mode, it also
specifies the debug level for <kbd class="command">named-xfer</KBD
> with
the <i class="option">-d</I
> option.</P
><p class="para">When you run <kbd class="command">named-xfer</KBD
> manually,
you can also specify the debug level on the command line with <i class="option">-d</I
>.
(Don't forget, though, that debug levels above three will produce
tons of debugging output if the transfer succeeds!) You can also
specify an alternate filename for the debug file with the <i class="option">-l</I
> option.
The default log file is <i class="filename">/usr/tmp/xfer.ddt.XXXXXX</I
>, where <i class="filename">XXXXXX</I
> is
a suffix appended to preserve uniqueness, or
a file by the same name in <i class="filename">/var/tmp</I
>. And you
can specify the name of the host to load from, instead of its <span class="acronym">IP</SPAN
> address.</P
><p class="para">For example, you could check to see whether zone transfers
from <i class="systemitem.sitename">terminator</I
> were working, with the following
command line:</P
><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>/etc/named-xfer -z movie.edu -f /tmp/db.movie -s 0 terminator</B
></CODE
>
% <code class="userinput"><b>echo $?</B
></CODE
>
1</PRE
></BLOCKQUOTE
><p class="para">In this command, we specified a serial number of
zero because we wanted to force <kbd class="command">named-xfer</KBD
> to
attempt a zone transfer, even if it wasn't needed. Zero is a special
serial number&nbsp;- <kbd class="command">named-xfer</KBD
> will transfer the
zone regardless of the actual zone serial number. Also, we told <kbd class="command">named-xfer</KBD
> to
put the new zone file in <i class="filename">/tmp</I
>, rather than
overwriting the zone's working data file.</P
><p class="para">We can tell
if the transfer succeeded by looking at <kbd class="command">named-xfer</KBD
>'s return
value, which has four possible values:</P
><dl class="variablelist"><dt class="term"><code class="literal">0</CODE
></DT
><dd class="listitem"><p class="para">The zone data is up-to-date and no transfer was needed</P
></DD
><dt class="term"><code class="literal">1</CODE
></DT
><dd class="listitem"><p class="para">Indicates a successful transfer</P
></DD
><dt class="term"><code class="literal">2</CODE
></DT
><dd class="listitem"><p class="para">The host(s) <kbd class="command">named-xfer</KBD
> queried
can't be reached, or an error occurred and <kbd class="command">named-xfer</KBD
> may
have logged an error message</P
></DD
><dt class="term"><code class="literal">3</CODE
></DT
><dd class="listitem"><p class="para">An error occurred and <kbd class="command">named-xfer</KBD
> logged
an error message</P
></DD
></DL
><a class="indexterm" name="AUTOID-13513"></A
><a class="indexterm" name="AUTOID-13514"></A
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="AUTOID-13515">13.2.2 How to Read a Database Dump</A
></H3
><p class="para"><a class="indexterm" name="CH13.DUMP1"></A
><a class="indexterm" name="AUTOID-13520"></A
><a class="indexterm" name="CH13.DUMP2"></A
><a class="indexterm" name="CH13.DUMP3"></A
>Poring over a dump of the name server's
internal database&nbsp;- including cached information&nbsp;- can also help you
track down problems. The <span class="acronym">INT</SPAN
> signal causes <kbd class="command">named</KBD
> to<a class="indexterm" name="CH13.DUMP4"></A
>
dump its authoritative data, cache data, and hints data to <i class="filename">named_dump.db</I
> in
<span class="acronym">BIND</SPAN
>'s running directory (or in <i class="filename">/usr/tmp/named_dump.db</I
> or
<i class="filename">/var/tmp/named_dump.db</I
>, for
<span class="acronym">BIND</SPAN
> 4). An example of a <i class="filename">named_dump.db</I
> file
follows. The authoritative data and cache entries, mixed together,
appear first in the file. At the end of the file are the hints data:</P
><blockquote class="screen"><pre class="screen">; Dumped at Tue Jan  6 10:49:08 1998
;; ++zone table++
; 0.0.127.in-addr.arpa (type 1, class 1, source db.127.0.0)
;   time=0, lastupdate=0, serial=1,
;   refresh=0, retry=3600, expire=608400, minimum=86400
;   ftime=884015430, xaddr=[0.0.0.0], state=0041, pid=0
;; --zone table--
; Note: Cr=(auth,answer,addtnl,cache) tag only shown for non-auth RR's
; Note: NT=milliseconds for any A RR which we've used as a nameserver
; --- Cache &amp; Data ---
$ORIGIN .
.   518375  IN      NS  G.ROOT-SERVERS.NET.   ;Cr=auth [128.8.10.90]
    518375  IN      NS  J.ROOT-SERVERS.NET.   ;Cr=auth [128.8.10.90]
    518375  IN      NS  K.ROOT-SERVERS.NET.   ;Cr=auth [128.8.10.90]
    518375  IN      NS  L.ROOT-SERVERS.NET.   ;Cr=auth [128.8.10.90]
    518375  IN      NS  M.ROOT-SERVERS.NET.   ;Cr=auth [128.8.10.90]
    518375  IN      NS  A.ROOT-SERVERS.NET.   ;Cr=auth [128.8.10.90]
    518375  IN      NS  H.ROOT-SERVERS.NET.   ;Cr=auth [128.8.10.90]
    518375  IN      NS  B.ROOT-SERVERS.NET.   ;Cr=auth [128.8.10.90]
    518375  IN      NS  C.ROOT-SERVERS.NET.   ;Cr=auth [128.8.10.90]
    518375  IN      NS  D.ROOT-SERVERS.NET.   ;Cr=auth [128.8.10.90]
    518375  IN      NS  E.ROOT-SERVERS.NET.   ;Cr=auth [128.8.10.90]
    518375  IN      NS  I.ROOT-SERVERS.NET.   ;Cr=auth [128.8.10.90]
    518375  IN      NS  F.ROOT-SERVERS.NET.   ;Cr=auth [128.8.10.90]
EDU  86393  IN      SOA A.ROOT-SERVERS.NET.  hostmaster.INTERNIC.NET. (
         1998010500 1800 900 604800 86400 )   ;Cr=addtnl [128.63.2.53]
$ORIGIN  0.127.in-addr.arpa.
0        IN    SOA cujo.movie.edu. root.cujo.movie.edu. (
         1998010600 10800 3600 608400 86400 )        ;Cl=5
         IN    NS  cujo.movie.edu.   ;Cl=5
$ORIGIN  0.0.127.in-addr.arpa.
1        IN    PTR localhost.    ;Cl=5
$ORIGIN EDU.
PURDUE   172787  IN  NS  NS.PURDUE.EDU.           ;Cr=addtnl [192.36.148.17]
         172787  IN  NS  MOE.RICE.EDU.            ;Cr=addtnl [192.36.148.17]
         172787  IN  NS  PENDRAGON.CS.PURDUE.EDU.  ;Cr=addtnl [192.36.148.17]
         172787  IN  NS  HARBOR.ECN.PURDUE.EDU.    ;Cr=addtnl [192.36.148.17]
$ORIGIN  movie.EDU.
;cujo    593     IN  SOA  A.ROOT-SERVERS.NET. hostmaster.INTERNIC. NET. (
;        1998010500 1800 900 604800 86400 );EDU.; NXDOMAIN  ;-$
   ;Cr=auth [128.63.2.53]
$ORIGIN   RICE.EDU.
MOE      172787  IN  A   128.42.5.4        ;NT=84 Cr=addtnl [192.36.148.17]
$ORIGIN   PURDUE.EDU.
CS       86387   IN  NS  pendragon.cs.PURDUE.edu.    ;Cr=addtnl [128.42.5.4]
         86387   IN  NS  ns.PURDUE.edu.              ;Cr=addtnl [128.42.5.4]
         86387   IN  NS  harbor.ecn.PURDUE.edu.      ;Cr=addtnl [128.42.5.4]
         86387   IN  NS  moe.rice.edu.               ;Cr=addtnl [128.42.5.4]
NS       172787   IN  A  128.210.11.5        ;NT=4 Cr=addtnl [192.36.148.17]
$ORIGIN   ECN.PURDUE.EDU.
HARBOR   172787  IN   A  128.46.199.76       ;NT=6 Cr=addtnl [192.36.148.17]
$ORIGIN   CS.PURDUE.EDU.
galt     86387   IN   A  128.10.2.39                 ;Cr=auth [128.42.5.4]
PENDRAGON  172787  IN  A  128.10.2.5         ;NT=20 Cr=addtnl [192.36.148.17]
$ORIGIN   ROOT-SERVERS.NET.
K        604775    IN  A  193.0.14.129       ;NT=10 Cr=answer [128.8.10.90]
A        604775    IN  A  198.41.0.4         ;NT=20 Cr=answer [128.8.10.90]
L        604775    IN  A  198.32.64.12       ;NT=8 Cr=answer [128.8.10.90]
B        604775    IN  A  128.9.0.107        ;NT=9 Cr=answer [128.8.10.90]
M        604775    IN  A  202.12.27.33       ;NT=20 Cr=answer [128.8.10.90]
C        604775    IN  A  192.33.4.12        ;NT=17 Cr=answer [128.8.10.90]
D        604775    IN  A  128.8.10.90        ;NT=11 Cr=answer [128.8.10.90]
E        604775    IN  A  192.203.230.10     ;NT=9 Cr=answer [128.8.10.90]
F        604775    IN  A  192.5.5.241        ;NT=73 Cr=answer [128.8.10.90]
G        604775    IN  A  192.112.36.4       ;NT=14 Cr=answer [128.8.10.90]
H        604775    IN  A  128.63.2.53        ;NT=160 Cr=answer [128.8.10.90]
I        604775    IN  A  192.36.148.17      ;NT=102 Cr=answer [128.8.10.90]
J        604775    IN  A  198.41.0.10        ;NT=21 Cr=answer [128.8.10.90]
; --- Hints ---
$ORIGIN .
.   3600           IN  NS  A.ROOT-SERVERS.NET.     ;Cl=0
    3600           IN  NS  B.ROOT-SERVERS.NET.     ;Cl=0
    3600           IN  NS  C.ROOT-SERVERS.NET.     ;Cl=0
    3600           IN  NS  D.ROOT-SERVERS.NET.     ;Cl=0
    3600           IN  NS  E.ROOT-SERVERS.NET.     ;Cl=0
    3600           IN  NS  F.ROOT-SERVERS.NET.     ;Cl=0
    3600           IN  NS  G.ROOT-SERVERS.NET.     ;Cl=0
    3600           IN  NS  H.ROOT-SERVERS.NET.     ;Cl=0
    3600           IN  NS  I.ROOT-SERVERS.NET.     ;Cl=0
    3600           IN  NS  J.ROOT-SERVERS.NET.     ;Cl=0
    3600           IN  NS  K.ROOT-SERVERS.NET.     ;Cl=0
    3600           IN  NS  L.ROOT-SERVERS.NET.     ;Cl=0
    3600           IN  NS  M.ROOT-SERVERS.NET.     ;Cl=0
$ORIGIN   ROOT-SERVERS.NET.
K     3600         IN   A  193.0.14.129      ;NT=11 Cl=0
L     3600         IN   A  198.32.64.12      ;NT=9 Cl=0
A     3600         IN   A  198.41.0.4        ;NT=10 Cl=0
M     3600         IN   A  202.12.27.33      ;NT=11 Cl=0
B     3600         IN   A  128.9.0.107       ;NT=1288 Cl=0
C     3600         IN   A  192.33.4.12       ;NT=21 Cl=0
D     3600         IN   A  128.8.10.90       ;NT=1288 Cl=0
E     3600         IN   A  192.203.230.10    ;NT=19 Cl=0
F     3600         IN   A  192.5.5.241       ;NT=23 Cl=0
G     3600         IN   A  192.112.36.4      ;NT=18 Cl=0
H     3600         IN   A  128.63.2.53       ;NT=11 Cl=0
I     3600         IN   A  192.36.148.17     ;NT=21 Cl=0
J     3600         IN   A  198.41.0.10       ;NT=13 Cl=0</PRE
></BLOCKQUOTE
><p class="para">The name server that created this <i class="filename">named_dump.db</I
> file
was authoritative only for <i class="systemitem.sitename">0.0.127.in-addr.arpa</I
>.
Only two names have been looked up by this server: <i class="systemitem.sitename">galt.cs.purdue.edu</I
> and <i class="systemitem.sitename">cujo.movie.edu</I
>.
In the process of looking up <i class="systemitem.sitename">galt</I
>, this server
cached not only the address of <i class="systemitem.sitename">galt</I
>, but also
the list of name servers for <i class="systemitem.sitename">purdue.edu</I
> and
the addresses for those servers. The name <i class="systemitem.sitename">cujo.movie.edu</I
>,
however, doesn't really exist (nor does the domain <i class="systemitem.sitename">movie.edu</I
>, except
in our examples), so the server cached the negative response. In
the dump file, the negative response is commented out (the line
starts with a semicolon), and the reason is listed (<span class="acronym">NXDOMAIN</SPAN
>) instead
of real data. You'll notice the <span class="acronym">TTL</SPAN
> is quite low (593). Negative
responses are only cached for 10 minutes (600 seconds).</P
><p class="para">The
hints section at the bottom of the file contains the data from the <i class="filename">db.cache</I
> file.
The <span class="acronym">TTL</SPAN
> of the hints data is decremented, and it may go to zero,
but the hints are never discarded.</P
><p class="para">Note that some of
the resource records are followed by a semicolon and <span class="acronym">NT</SPAN
>=. You will
only see these on the <i class="structfield">address</I
> records of <em class="emphasis">name
servers</EM
>. The number is a round-trip time calculation
that the name server keeps so that it knows which name servers have
responded most quickly in the past; the name server with the lowest
round-trip time will be tried first the next time.</P
><p class="para">The
cache data is easy to pick out&nbsp;- those entries have a<a class="indexterm" name="AUTOID-13558"></A
>
<i class="firstterm">credibility</I
> tag
(Cr=) and the <span class="acronym">IP</SPAN
> address of the server the data came from. The zone
data and hint data are tagged with (Cl=), which is just a count
of the level in the domain tree. (<i class="systemitem.sitename">root</I
> is level
0, <i class="systemitem.sitename">foo</I
> is level 1, <i class="systemitem.sitename">foo.foo</I
> is
level 2, etc.) Let's digress a moment to explain the concept of
credibility.</P
><p class="para">One of the advances between version 4.8.3
and 4.9 is the addition of a credibility measure. This allows a
name server to make more intelligent decisions about what to do
with new data from a remote server.</P
><p class="para">A 4.8.3 name server
only had two credibility levels&nbsp;- locally authoritative data, and
everything else. The locally authoritative data were data from your
zone files&nbsp;- your name server knew better than to update its internal
copy of what came from your zone file. But, all data from remote
name servers were considered equal.</P
><p class="para">Here is a situation
that could happen, and the way a 4.8.3 server would deal with it.
Suppose that your server looked up an address for <i class="systemitem.sitename">terminator.movie.edu</I
>
and received an authoritative answer from the <i class="systemitem.sitename">movie.edu</I
> name
server. (Remember, an authoritative answer is the best you can get.)
Sometime later while looking up <i class="systemitem.sitename">foo.ora.com</I
>,
your server receives another address record for <i class="systemitem.sitename">terminator.movie.edu</I
>,
but this time as part of the delegation info for <i class="systemitem.sitename">ora.com</I
> (which <i class="systemitem.sitename">terminator.movie.edu</I
> backs
up). The 4.8.3 name server would update the cached address record for <i class="systemitem.sitename">terminator.movie.edu</I
>,
even though the data came from the <i class="systemitem.sitename">com</I
> name
server instead of the authoritative <i class="systemitem.sitename">movie.edu</I
> name
server. Of course, the <i class="systemitem.sitename">com</I
> and <i class="systemitem.sitename">movie.edu</I
> name servers
will have exactly the same data for <i class="systemitem.sitename">terminator</I
>,
so this won't be a problem, right? Yeah, and it never rains in southern
California, either.</P
><p class="para">A 4.9 or 8 name server is more
intelligent. Like a 4.8.3 name server, it still considers your zone
data beyond any doubt. But a 4.9 name server distinguishes among
the different data from remote name servers. Here is the hierarchy
of remote data credibility from most credible to least:</P
><dl class="variablelist"><dt class="term">auth</DT
><dd class="listitem"><p class="para">These records are data from authoritative answers&nbsp;- the
answer section of a response packet with the authoritative answer
bit set.</P
></DD
><dt class="term">answer</DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-13590"></A
>These
records are data from nonauthoritative, or cached, answers&nbsp;- the answer
section of a response packet without the authoritative answer bit
set.</P
></DD
><dt class="term">addtnl</DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-13596"></A
><a class="indexterm" name="AUTOID-13598"></A
>These
records are data from the rest of the response packet&nbsp;- the <i class="function">authority</I
>
and <i class="function">additional</I
>. The <i class="function">authority</I
> section of the response contains
<span class="acronym">NS</SPAN
> records that delegate a domain to an authoritative name server.
The <i class="function">additional</I
> section contains address records that may complete
information in other sections (i.e., address records that go with
<span class="acronym">NS</SPAN
> records in the authority section).</P
></DD
></DL
><p class="para">There is one exception to this rule: when the server is priming
its root name server cache, the records that would be at credibility <em class="emphasis">addtnl</EM
> are
bumped up to <em class="emphasis">answer</EM
> credibility, to make them
harder to change accidentally. Notice in the dump that the address
records for root name servers are at credibility <em class="emphasis">answer</EM
>,
but the address records for the <i class="systemitem.sitename">purdue.edu</I
> name
servers are at credibility <em class="emphasis">addtnl</EM
>.</P
><p class="para">In
the situation just described, a 4.9 or 8 name server would not replace
the authoritative data (credibility = <em class="emphasis">auth</EM
>)
for <i class="systemitem.sitename">terminator.movie.edu</I
> with the delegation data
(credibility = <em class="emphasis">addtnl</EM
>) because the authoritative
answer has higher credibility.</P
><a class="indexterm" name="AUTOID-13616"></A
><a class="indexterm" name="AUTOID-13617"></A
><a class="indexterm" name="AUTOID-13618"></A
><a class="indexterm" name="AUTOID-13619"></A
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="AUTOID-13620">13.2.3 Logging Queries</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-13623"></A
><a class="indexterm" name="AUTOID-13626"></A
><span class="acronym">BIND</SPAN
> version 4.9
added a feature, query logging, which can be used to help diagnose
certain problems. When query logging is turned on, a running name server
will log every query with syslog. This feature could help you find
resolver configuration errors, because you can check that the name
you think is being looked up really is the name being looked up.</P
><p class="para">First you must make sure that <span class="acronym">LOG_INFO</SPAN
> messages are being
logged by syslog for the facility <i class="firstterm">daemon</I
>.
Next you need to turn on query logging. This can be done three ways:<a class="indexterm" name="AUTOID-13632"></A
><a class="indexterm" name="AUTOID-13634"></A
>
for <span class="acronym">BIND</SPAN
> 4.9, set<kbd class="command"> options query-log</KBD
> in your name
server boot file; for <span class="acronym">BIND</SPAN
> 4.9 or <span class="acronym">BIND</SPAN
> 8, start the name server
with <kbd class="command">-q</KBD
> on the command line, or send a<a class="indexterm" name="AUTOID-13642"></A
>
<span class="acronym">WINCH</SPAN
> signal to a running name server.
You'll start seeing syslog messages like this:</P
><blockquote class="screen"><pre class="screen">Feb 20 21:43:25 terminator named[3830]:
                     XX /192.253.253.2/carrie.movie.edu/A
Feb 20 21:43:32 terminator named[3830]:
                     XX /192.253.253.2/4.253.253.192.in-addr.arpa/PTR</PRE
></BLOCKQUOTE
><p class="para">These messages include the <span class="acronym">IP</SPAN
> address of the host
that made the query and the query itself. Inverse queries will have
a dash before the query type (i.e., an inverse query for an address
record would be logged as <span class="quote">"-A"</SPAN
> instead of just <span class="quote">"A"</SPAN
>). After enough
queries have been logged, you can turn off query logging by sending
a <span class="acronym">WINCH</SPAN
> signal to your name server.</P
></DIV
><a class="indexterm" name="AUTOID-13651"></A
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch13_01.htm" title="13.1 Is NIS Really Your Problem?"><img src="../gifs/txtpreva.gif" alt="Previous: 13.1 Is NIS Really Your Problem?" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="DNS &amp; BIND"><img src="../gifs/txthome.gif" alt="DNS &amp; BIND" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch13_03.htm#AUTOID-13910" title="13.3 Potential Problem List"><img src="../gifs/txtnexta.gif" alt="Next: 13.3 Potential Problem List" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">13.1 Is NIS Really Your Problem?</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">13.3 Potential Problem List</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.htm" title="The Networking CD Bookshelf">Library Home</A
> | <a href="index.htm" title="DNS &amp; BIND">DNS &amp; BIND</A
> | <a href="../tcpip/index.htm" title="TCP/IP Network Administration">TCP/IP</A
> | <a href="../sendmail/index.htm" title="sendmail">sendmail</A
> | <a href="../smdref/index.htm" title="sendmail Desktop Reference">sendmail Reference</A
> | <a href="../firewall/index.htm" title="Building Internet Firewalls">Firewalls</A
> | <a href="../puis/index.htm" title="Practical UNIX &amp; Internet Security">Practical Security</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
