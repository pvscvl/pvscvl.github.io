<html><head>
<title>[Chapter 14] 14.3 Perl Programming with Net::DNS</TITLE>
<meta name="DC.title" content="DNS &amp; BIND"><meta name="DC.creator" content="Cricket Liu &amp; Paul Albitz"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-01-06T18:42:30Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-512-2" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch14_01.htm" title="14. Programming with the Resolver and Name Server Library Routines"><link rel="prev" href="ch14_02.htm" title="14.2 C Programming with the Resolver Library Routines"><link rel="next" href="ch15_01.htm" title="15. Miscellaneous"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="DNS &amp; BIND" usemap="#srchmap" border="0"></H1
><map name="srchmap"index.html><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="DNS &amp; BIND"><area shape="RECT" coords="467,0,514,18" href="../search/dsrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch14_02.htm" title="14.2 C Programming with the Resolver Library Routines"><img src="../gifs/txtpreva.gif" alt="Previous: 14.2 C Programming with the Resolver Library Routines" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 14<br>Programming with the Resolver and Name Server Library
Routines</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="CHAPTER" href="ch15_01.htm" title="15. Miscellaneous"><img src="../gifs/txtnexta.gif" alt="Next: 15. Miscellaneous" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="AUTOID-16195">14.3 Perl Programming with Net::DNS</A
></H2
><p class="para"><a class="indexterm" name="CH14.PERLPROGRAMMING1"></A
><a class="indexterm" name="CH14.PERLPROGRAMMING2"></A
><a class="indexterm" name="CH14.PERLPROGRAMMING3"></A
>If using
the shell to parse <kbd class="command">nslookup</KBD
>'s output seems too awkward and writing
a C program seems too complicated, consider writing your program
in Perl using the Net::DNS module written by Michael Fuhr.  You'll
find the package at <a class="systemitem.url" href="../../../../../../../www.perl.com/CPAN-local/modules/by-module/Net/">http://www.perl.com/CPAN-local/modules/by-module/Net/</A
>.</P
><p class="para">Net::DNS treats resolvers, DNS packets, sections of DNS packets,
and individual resource records as objects and provides methods
for setting or querying each object's attributes.  We'll examine
each object type first, then give a Perl version of our <i class="function">check_soa</I
>
program.</P
><div class="sect2"><h3 class="sect2"><a class="title" name="AUTOID-16209">14.3.1 Resolver Objects</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-16212"></A
>Before making any queries,
you must first create a resolver object:</P
><blockquote class="screen"><pre class="screen">$res = new Net::DNS::Resolver;</PRE
></BLOCKQUOTE
><p class="para">Resolver objects are initialized from your <i class="filename">resolv.conf</I
>
file, but you can change the default settings by making calls to
the object's methods.  Many of the methods described in the Net::DNS::Resolver
manual page correspond to fields and options of the <i class="function">_res</I
> structure
described earlier in the C programming section.  For example, if
you want to set the number of times the resolver tries each query
before timing out, you can call the <i class="function">$res-&gt;retry</I
> method:</P
><blockquote class="screen"><pre class="screen">$res-&gt;retry(2);</PRE
></BLOCKQUOTE
><p class="para">To make a query, call one of the following methods:</P
><blockquote class="screen"><pre class="screen">$res-&gt;search
$res-&gt;query
$res-&gt;send</PRE
></BLOCKQUOTE
><p class="para">These methods behave like the <i class="function">res_search</I
>, <i class="function">res_query</I
>,
and <i class="function">res_send</I
> library functions described in the C programming section,
though they take fewer arguments.  You must provide a name, and
you can optionally provide a DNS record type and class (the default behavior
is to query for A records in the IN class).  These methods return
Net::DNS::Packet objects, which we'll describe shortly.  Here are
a few examples:</P
><blockquote class="screen"><pre class="screen">$packet = $res-&gt;search(&quot;terminator&quot;);
$packet = $res-&gt;query(&quot;movie.edu&quot;, &quot;MX&quot;);
$packet = $res-&gt;send(&quot;version.bind&quot;, &quot;TXT&quot;, &quot;CH&quot;);</PRE
></BLOCKQUOTE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="AUTOID-16228">14.3.2 Packet Objects</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-16231"></A
>Resolver queries return
Net::DNS::Packet objects, whose methods you can use to access the
header, question, answer, authority, and additional sections of
a DNS packet:</P
><blockquote class="screen"><pre class="screen">$header     = $packet-&gt;header;
@question   = $packet-&gt;question;
@answer     = $packet-&gt;answer;
@authority  = $packet-&gt;authority;
@additional = $packet-&gt;additional;</PRE
></BLOCKQUOTE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="AUTOID-16235">14.3.3 Header Objects</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-16238"></A
>DNS packet headers are
returned as Net::DNS::Header objects.  The methods described in
the Net::DNS::Header manual page correspond to the header fields described
in RFC 1035 and in the <i class="function">HEADER</I
> structure used in C programs.  For
example, if you want to find out if this is an authoritative answer,
you would call the <i class="function">$header-&gt;aa</I
> method:</P
><blockquote class="screen"><pre class="screen">if ($header-&gt;aa) {
    print &quot;answer is authoritative\n&quot;;
} else {
    print &quot;answer is not authoritative\n&quot;;
}</PRE
></BLOCKQUOTE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="AUTOID-16244">14.3.4 Question Objects</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-16247"></A
>The question section
of a DNS packet is returned as a list of Net::DNS::Question objects.
 You can find the name, type, and class of a question object with
the following methods:</P
><blockquote class="screen"><pre class="screen">$question-&gt;qname
$question-&gt;qtype
$question-&gt;qclass</PRE
></BLOCKQUOTE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="AUTOID-16251">14.3.5 Resource Record Objects</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-16254"></A
>The answer, authority,
and additional sections of a DNS packet are returned as lists of
Net::DNS::RR objects.  You can find the name, type, class, and TTL
of an RR object with the following methods:</P
><blockquote class="screen"><pre class="screen">$rr-&gt;name
$rr-&gt;type
$rr-&gt;class
$rr-&gt;ttl</PRE
></BLOCKQUOTE
><p class="para">Each record type is a subclass of Net::DNS::RR and
has its own type-specific methods.  Here's an example that shows
how to get the preference and mail exchange out of an MX record:</P
><blockquote class="screen"><pre class="screen">$preference = $rr-&gt;preference;
$exchange   = $rr-&gt;exchange;</PRE
></BLOCKQUOTE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="AUTOID-16260">14.3.6 A Perl Version of check_soa</A
></H3
><p class="para"><a class="indexterm" name="CH14.EXAMPLE1A"></A
><a class="indexterm" name="CH14.EXAMPLE2A"></A
>Now that
we've described the objects Net::DNS uses, let's look at how to
use them in a complete program.  We've rewritten <i class="function">check_soa</I
> in Perl:</P
><blockquote class="screen"><pre class="screen">#!/usr/local/bin/perl -w

use Net::DNS;

#----------------------------------------------------------------------
# Get the domain from the command line.
#----------------------------------------------------------------------

die &quot;Usage:  check_soa domain\n&quot; unless @ARGV == 1;
$domain = $ARGV[0];

#----------------------------------------------------------------------
# Find all the nameservers for the domain.
#----------------------------------------------------------------------

$res = new Net::DNS::Resolver;

$res-&gt;defnames(0);
$res-&gt;retry(2);

$ns_req = $res-&gt;query($domain, &quot;NS&quot;);
die &quot;No nameservers found for $domain: &quot;, $res-&gt;errorstring, &quot;\n&quot;
    unless defined($ns_req) and ($ns_req-&gt;header-&gt;ancount &gt; 0);

@nameservers = grep { $_-&gt;type eq &quot;NS&quot; } $ns_req-&gt;answer;

#----------------------------------------------------------------------
# Check the SOA record on each nameserver.
#----------------------------------------------------------------------

$| = 1;
$res-&gt;recurse(0);

foreach $nsrr (@nameservers) {

  #------------------------------------------------------------------
  # Set the resolver to query this nameserver.
  #------------------------------------------------------------------

  $ns = $nsrr-&gt;nsdname;
  print &quot;$ns &quot;;

  unless ($res-&gt;nameservers($ns)) {
      warn &quot;: can't find address: &quot;, $res-&gt;errorstring, &quot;\n&quot;;
      next;
  }

  #------------------------------------------------------------------
  # Get the SOA record.
  #------------------------------------------------------------------

  $soa_req = $res-&gt;send($domain, &quot;SOA&quot;);
  unless (defined($soa_req)) {
      warn &quot;: &quot;, $res-&gt;errorstring, &quot;\n&quot;;
      next;
  }

  #------------------------------------------------------------------
  # Is this nameserver authoritative for the domain?
  #------------------------------------------------------------------

  unless ($soa_req-&gt;header-&gt;aa) {
      warn &quot;is not authoritative for $domain\n&quot;;
      next;
  }

  #------------------------------------------------------------------
  # We should have received exactly one answer.
  #------------------------------------------------------------------

  unless ($soa_req-&gt;header-&gt;ancount == 1) {
      warn &quot;: expected 1 answer, got &quot;,
            $soa_req-&gt;header-&gt;ancount, &quot;\n&quot;;
      next;
  }

  #------------------------------------------------------------------
  # Did we receive an SOA record?
  #------------------------------------------------------------------

   unless (($soa_req-&gt;answer)[0]-&gt;type eq &quot;SOA&quot;) {
       warn &quot;: expected SOA, got &quot;,
            ($soa_req-&gt;answer)[0]-&gt;type, &quot;\n&quot;;
       next;
  }

  #------------------------------------------------------------------
  # Print the serial number.
  #------------------------------------------------------------------

  print &quot;has serial number &quot;, ($soa_req-&gt;answer)[0]-&gt;serial, &quot;\n&quot;;
}</PRE
></BLOCKQUOTE
><p class="para">Now that you've seen how to write a DNS program using
a shell script, a Perl script, and C code, you should be able to
write one on your own using the language that best fits your situation.<a class="indexterm" name="AUTOID-16271"></A
><a class="indexterm" name="AUTOID-16274"></A
></P
><a class="indexterm" name="AUTOID-16276"></A
><a class="indexterm" name="AUTOID-16277"></A
></DIV
><a class="indexterm" name="AUTOID-16278"></A
><a class="indexterm" name="AUTOID-16279"></A
><a class="indexterm" name="AUTOID-16280"></A
><a class="indexterm" name="AUTOID-16281"></A
><a class="indexterm" name="AUTOID-16282"></A
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch14_02.htm" title="14.2 C Programming with the Resolver Library Routines"><img src="../gifs/txtpreva.gif" alt="Previous: 14.2 C Programming with the Resolver Library Routines" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="DNS &amp; BIND"><img src="../gifs/txthome.gif" alt="DNS &amp; BIND" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="CHAPTER" href="ch15_01.htm" title="15. Miscellaneous"><img src="../gifs/txtnexta.gif" alt="Next: 15. Miscellaneous" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">14.2 C Programming with the Resolver Library Routines</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">15. Miscellaneous</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.htm" title="The Networking CD Bookshelf">Library Home</A
> | <a href="index.htm" title="DNS &amp; BIND">DNS &amp; BIND</A
> | <a href="../tcpip/index.htm" title="TCP/IP Network Administration">TCP/IP</A
> | <a href="../sendmail/index.htm" title="sendmail">sendmail</A
> | <a href="../smdref/index.htm" title="sendmail Desktop Reference">sendmail Reference</A
> | <a href="../firewall/index.htm" title="Building Internet Firewalls">Firewalls</A
> | <a href="../puis/index.htm" title="Practical UNIX &amp; Internet Security">Practical Security</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
