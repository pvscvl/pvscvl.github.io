<html><head>
<title>[Chapter 8] 8.14 Network File System (NFS)</TITLE>
<meta name="DC.title" content="Building Internet Firewalls"><meta name="DC.creator" content="D. Brent Chapman &amp; Elizabeth D. Zwicky"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-02-04T00:26:12Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-124-0" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch08_01.htm" title="8. Configuring Internet Services"><link rel="prev" href="ch08_13.htm#FIRE-08-S2-47" title="8.13 Network Time Protocol (NTP)"><link rel="next" href="ch08_15.htm#FIRE-08-S2-55" title="8.15 Network Information Service/Yellow Pages (NIS/YP)"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Building Internet Firewalls" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Building Internet Firewalls"><area shape="RECT" coords="467,0,514,18" href="../search/fsrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch08_13.htm#FIRE-08-S2-47" title="8.13 Network Time Protocol (NTP)"><img src="../gifs/txtpreva.gif" alt="Previous: 8.13 Network Time Protocol (NTP)" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 8<br>Configuring Internet Services</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch08_15.htm#FIRE-08-S2-55" title="8.15 Network Information Service/Yellow Pages (NIS/YP)"><img src="../gifs/txtnexta.gif" alt="Next: 8.15 Network Information Service/Yellow Pages (NIS/YP)" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="FIRE-08-S1-14">8.14 Network File System
(<span class="acronym">NFS</SPAN
>)</A
></H2
><p class="para"><a class="indexterm" name="CH08NFS"></A
><a class="indexterm" name="CH08CONFNFS"></A
><a class="indexterm" name="AUTOID-16145"></A
>The <span class="acronym">NFS</SPAN
> protocol is designed to allow systems to access
files across the network on a remote system, as conveniently as if the
files were on directly attached disks. Machines may be
<span class="acronym">NFS</SPAN
> servers (exporting their disks for access by
other machines), <span class="acronym">NFS</SPAN
> clients (accessing disks
exported by <span class="acronym">NFS</SPAN
> servers), or
both. <span class="acronym">NFS</SPAN
> is heavily used within
<span class="acronym">LAN</SPAN
>s, but it is unsafe to allow across a firewall
for a variety of reasons.</P
><p class="para"><a class="indexterm" name="AUTOID-16156"></A
>The primary problem with <span class="acronym">NFS</SPAN
> is its weak
authentication of requests. Access to a given
<span class="acronym">NFS</SPAN
>-exported filesystem is all or nothing; a given
client machine is either trusted to access the filesystem, or it
isn't. If the server trusts a given client machine, the server
believes whatever the client tells it about who
is trying to access which files. It then uses that information for
authorization according to the standard <span class="acronym">UNIX</SPAN
> file
protection mechanisms (i.e., user, group, and other
permissions). There are a few extra protections some
<span class="acronym">NFS</SPAN
> servers can optionally apply.</P
><p class="para">The server's trust in the client is established when the client mounts
the filesystem from the server. The client contacts the server and
tells the server what filesystem it wants to access. The server checks
whether or not the client (based on <span class="acronym">IP</SPAN
> address) is
allowed to access that filesystem. If it is, the server gives the
client a &quot;file handle&quot; (basically a magic set of
credentials for the client), which the client uses for all further
access to the filesystem.</P
><p class="para">Once the client has mounted the filesystem (and received a file handle
from the server) the client sends a request to the server each time it
wants to act on a file on that filesystem. The request describes the
action the client wants to take and includes the file handle obtained
from the server, so the server assumes that the client is
authorized to request that action.</P
><p class="para"><span class="acronym">NFS</SPAN
>'s main security problems are:</P
><ul class="itemizedlist"><li class="listitem"><p class="para">The <span class="acronym">NFS</SPAN
> server relies on <span class="acronym">IP</SPAN
>
address to authenticate client hosts, making it vulnerable to address
forgery.</P
></LI
><li class="listitem"><p class="para">The <span class="acronym">NFS</SPAN
> server relies on the client to authenticate
the user, making it vulnerable to any user who has compromised a
client machine.</P
></LI
><li class="listitem"><p class="para">The <span class="acronym">NFS</SPAN
> server doesn't recheck the client
authentication on every request. The server assumes that if the client
uses a valid file handle, the client is authorized to access that
filesystem. An attacker with a forged or captured file handle can
access the filesystem just as easily as a legitimate client can.</P
></LI
></UL
><p class="para">The file handle for a given filesystem is established when the
filesystem is created on the server or when it is mounted for the
first time on a new server mount point or from a new disk/controller
pair. Unfortunately, the method for generating file handles is fairly
predictable, and an attacker can probably guess the file handle if
he can guess when the filesystem was created. 
Most <span class="acronym">NFS</SPAN
> servers 
will allow any number of bad guesses without
complaining or shutting down. If the attacker can somehow guess at
least the day the filesystem was created&nbsp;- which is especially easy if
the attack is against a newly installed machine&nbsp;- he can
probably guess the file handle without too much difficulty, by trying
the range of file handles that would have been assigned to filesystems
created that day.</P
><p class="para"><span class="acronym">NFS</SPAN
> servers have no mechanism for
canceling file handles; once a file handle has been
issued, it's good until the server filesystem is reinitialized or
mounted elsewhere (even if only temporarily; when it is remounted in
its original location again, it will have a new file handle). A client
which had access at one time can keep using the file handle it
obtained, even if the access controls (the
<em class="emphasis">/etc/exports</EM
> file on most <span class="acronym">UNIX</SPAN
>
<span class="acronym">NFS</SPAN
> servers) are later changed to deny access to
that client.</P
><p class="para">Under <span class="acronym">NFS</SPAN
>, root may be treated differently from
normal users. Some <span class="acronym">UNIX</SPAN
> <span class="acronym">NFS</SPAN
>
servers always treat root the same way they treat normal users: the
client's root user gets the same access that the server's root user
would have. Some of them always translate the client's root user to a
<span class="acronym">UID</SPAN
> known as &quot;nobody&quot; that is never
used as a regular user; thus, this user will only have the permissions
granted to the world. This &quot;nobody&quot; 
<span class="acronym">UID</SPAN
> may be either
the highest possible <span class="acronym">UID</SPAN
>, or a
<span class="acronym">UID</SPAN
> which translates to -1 (which might be written
as -1, or as the highest possible <span class="acronym">UID</SPAN
> plus 1). On
some <span class="acronym">UNIX</SPAN
> machines, all three of these numbers (-1,
65535, and 65536) are listed in the password file as
&quot;nobody.&quot; Most <span class="acronym">UNIX</SPAN
>
<span class="acronym">NFS</SPAN
> servers allow you to choose whether you wish to
allow root access or translate it to &quot;nobody&quot; via an
option in the <em class="emphasis">/etc/exports</EM
>
file. Non-<span class="acronym">UNIX</SPAN
> servers normally treat root as if it
were any other user, but because that user is unlikely to have special
privileges on the server, this isn't a problem.</P
><p class="para">Translating root to &quot;nobody&quot; is an extremely
minor security improvement. Anybody who is capable of being
root on the client is capable of pretending to be any
user whatsoever on the client, and can therefore see and do anything
any user can do. The translation hides only those files on the
server restricted to access by root itself. You will still probably
want to use translation wherever you can for the minimal protection
it does give you, but you should not feel that it makes it safe to
export filesystems to possibly hostile clients.</P
><p class="para">Better protection for the server is available by exporting the
filesystem read-only. If the filesystem is exported purely read-only
(no host is allowed to write it) you can be reasonably certain the
data cannot be modified via <span class="acronym">NFS</SPAN
>. If you allow any
host to write it, you're vulnerable to forgery.</P
><p class="para"><span class="acronym">NFS</SPAN
> clients may also be in danger from
<span class="acronym">NFS</SPAN
> servers. For example, an
<span class="acronym">NFS</SPAN
>-mounted filesystem may contain 
<em class="emphasis">setuid</EM
>
programs; users on the client would be able to use those programs to
become root. Device entries on an <span class="acronym">NFS</SPAN
>-mounted
partition are considered to apply to the client's devices, not the
server's devices. Somebody with an account on an
<span class="acronym">NFS</SPAN
> client and root permission on an
<span class="acronym">NFS</SPAN
> server, can use this to get unlimited, if
inconvenient, read-write access to all data on the client.&#13;</P
><p class="para">Some <span class="acronym">NFS</SPAN
> clients provide options to
<em class="emphasis">mount</EM
> that can be used to disable devices and
<em class="emphasis">setuid/setgid</EM
> 
on mounted filesystems. If <em class="emphasis">mount</EM
> is not
available to users other than root, or if it always uses these options
for users other than root, this will protect the client from the
server. If these options are not available, even if only root can
mount filesystems, you should consider mounting a filesystem to be
equivalent to granting root access to the server machine.</P
><p class="para">Some vendors also support a version of <span class="acronym">NFS</SPAN
> based on
Secure <span class="acronym">RPC</SPAN
>. Secure
<span class="acronym">RPC</SPAN
> has several problems that also apply to
<span class="acronym">NFS</SPAN
> implemented on top of it:</P
><ul class="itemizedlist"><li class="listitem"><p class="para">It is not widely supported; it is available almost exclusively on
Suns.</P
></LI
><li class="listitem"><p class="para">The process of exchanging keys between machines is difficult.</P
></LI
><li class="listitem"><p class="para">It doesn't perform as well as standard <span class="acronym">RPC</SPAN
>.
(<span class="acronym">NFS</SPAN
> is particularly performance-sensitive.)</P
></LI
></UL
><p class="para">If you have an immutable requirement to run <span class="acronym">NFS</SPAN
>
across your firewall to some other site, you should investigate either
a private connection to that site or network-level encryption
(described in <a class="xref" href="ch10_01.htm" title="Authentication and Inbound Services">Chapter 10</A
>). Be aware that
<span class="acronym">NFS</SPAN
> generally doesn't perform well over networks
running at anything less than Ethernet speed anyway. You might want to
investigate alternatives such as <span class="acronym">FTP</SPAN
> for your
particular situation or alternate network filesystems such as the
Andrew File System (<span class="acronym">AFS</SPAN
>) (see <a class="xref" href="appb_01.htm" title="Tools">Appendix B</A
> for more information).</P
><div class="sect2"><h3 class="sect2"><a class="title" name="FIRE-08-S2-53">8.14.1 Packet Filtering Characteristics of
<span class="acronym">NFS</SPAN
></A
></H3
><p class="para"><a class="indexterm" name="AUTOID-16241"></A
><span class="acronym">NFS</SPAN
> is an <span class="acronym">RPC</SPAN
>-based service. As
mentioned in <a class="xref" href="ch06_01.htm" title="Packet Filtering">Chapter 6</A
>, it's very difficult to
handle <span class="acronym">RPC</SPAN
>-based services with a packet filtering
system, because the servers normally don't use predictable port
numbers. While the port numbers to be used are too unpredictable for a
packet filtering system to cope with, they're not so unpredictable an
attacker can't find them. (If nothing else, the attacker could try
sending <span class="acronym">NFS</SPAN
> requests to all ports to see which
respond as he would expect an <span class="acronym">NFS</SPAN
> server to
respond.)</P
><p class="para"><span class="acronym">NFS</SPAN
> is generally provided over
<span class="acronym">UDP</SPAN
>; there are <span class="acronym">TCP</SPAN
>-based
<span class="acronym">NFS</SPAN
> servers and clients available, but they are
rare and seldom used. <span class="acronym">NFS</SPAN
> is somewhat
unusual for an <span class="acronym">RPC</SPAN
>-based service in that it normally
uses a predictable port number (port 2049)&nbsp;- apparently for obscure
reasons related to how <span class="acronym">NFS</SPAN
> servers interact with
the kernel on most <span class="acronym">UNIX</SPAN
> systems. We wouldn't
recommend depending on <span class="acronym">NFS</SPAN
> servers to always wind
up on port 2049, however. <span class="acronym">RFC</SPAN
> 1094, the
<span class="acronym">NFS</SPAN
> protocol specification, says &quot;The
<span class="acronym">NFS</SPAN
> protocol currently uses the
<span class="acronym">UDP</SPAN
> port number 2049. This is not an officially
assigned port, so later versions of the protocol use the
`Portmapping' facility of <span class="acronym">RPC</SPAN
>.&quot;</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="FIRE-08-S2-52">8.14.2 Proxying Characteristics of
<span class="acronym">NFS</SPAN
></A
></H3
><p class="para"><a class="indexterm" name="AUTOID-16270"></A
><span class="acronym">RPC</SPAN
>-based protocols are almost as unpleasant to
proxy as they are to allow with packet filtering; they cannot be
adequately handled with generic proxies. A dedicated
<span class="acronym">NFS</SPAN
> proxy server would be possible, but we do not
know of one. <span class="acronym">NFS</SPAN
> is particularly problematic for
proxying, because it is data-intense, exchanging large volumes of data
in situations where delay is very noticeable to the user. A host doing
<span class="acronym">NFS</SPAN
> proxying is going to need to deal with multiple
connections transferring large packets at high speeds.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="FIRE-08-S2-54">8.14.3 Summary of <span class="acronym">NFS</SPAN
>
Recommendations </A
></H3
><ul class="itemizedlist"><li class="listitem"><p class="para">Don't allow <span class="acronym">NFS</SPAN
> across your firewall. </P
></LI
></UL
><a class="indexterm" name="AUTOID-16285"></A
><a class="indexterm" name="AUTOID-16286"></A
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch08_13.htm#FIRE-08-S2-47" title="8.13 Network Time Protocol (NTP)"><img src="../gifs/txtpreva.gif" alt="Previous: 8.13 Network Time Protocol (NTP)" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Building Internet Firewalls"><img src="../gifs/txthome.gif" alt="Building Internet Firewalls" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch08_15.htm#FIRE-08-S2-55" title="8.15 Network Information Service/Yellow Pages (NIS/YP)"><img src="../gifs/txtnexta.gif" alt="Next: 8.15 Network Information Service/Yellow Pages (NIS/YP)" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">8.13 Network Time Protocol (NTP)</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_a.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">8.15 Network Information Service/Yellow Pages (NIS/YP)</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.htm" title="The Networking CD Bookshelf">Library Home</A
> | <a href="../dnsbind/index.htm" title="DNS &amp; BIND">DNS &amp; BIND</A
> | <a href="../tcpip/index.htm" title="TCP/IP Network Administration">TCP/IP</A
> | <a href="../sendmail/index.htm" title="sendmail">sendmail</A
> | <a href="../smdref/index.htm" title="sendmail Desktop Reference">sendmail Reference</A
> | <a href="index.htm" title="Building Internet Firewalls">Firewalls</A
> | <a href="../puis/index.htm" title="Practical UNIX &amp; Internet Security">Practical Security</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
