<html><head>
<title>[Chapter 8] 8.6 World Wide Web (WWW) and HTTP</TITLE>
<meta name="DC.title" content="Building Internet Firewalls"><meta name="DC.creator" content="D. Brent Chapman &amp; Elizabeth D. Zwicky"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-02-04T00:24:04Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-124-0" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch08_01.htm" title="8. Configuring Internet Services"><link rel="prev" href="ch08_05.htm#FIRE-08-S2-14" title="8.5 Network News Transfer Protocol (NNTP)"><link rel="next" href="ch08_07.htm#FIRE-08-S3-48" title="8.7 Other Information Services"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Building Internet Firewalls" usemap="#srchmap" border="0"></H1
><map name="srchmindex.htmlap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Building Internet Firewalls"><area shape="RECT" coords="467,0,514,18" href="../search/fsrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch08_05.htm#FIRE-08-S2-14" title="8.5 Network News Transfer Protocol (NNTP)"><img src="../gifs/txtpreva.gif" alt="Previous: 8.5 Network News Transfer Protocol (NNTP)" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 8<br>Configuring Internet Services</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch08_07.htm#FIRE-08-S3-48" title="8.7 Other Information Services"><img src="../gifs/txtnexta.gif" alt="Next: 8.7 Other Information Services" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="FIRE-08-S1-6">8.6 World Wide Web (<span class="acronym">WWW</SPAN
>) and <span class="acronym">HTTP</SPAN
></A
></H2
><p class="para"><a class="indexterm" name="CH08WWWCONF"></A
><a class="indexterm" name="CH08CONFWWW"></A
><a class="indexterm" name="CH08HTTPCONF"></A
>The existence of the World Wide Web (<span class="acronym">WWW</SPAN
>) is a
major factor behind the recent explosive growth of the Internet.
Since the introduction of the <span class="acronym">NCSA</SPAN
> Mosaic package (the
first graphical user interface to the <span class="acronym">WWW</SPAN
> to gain
widespread acceptance) in 1993, <span class="acronym">WWW</SPAN
> traffic on the
Internet has been growing at an explosive rate, far faster than any
other kind of traffic (e.g., <span class="acronym">SMTP</SPAN
> email,
<span class="acronym">FTP</SPAN
> file transfers, Telnet remote terminal
sessions, etc.). You will certainly want to let your users use a
browser to access <span class="acronym">WWW</SPAN
> sites, and you will very
likely to want to run a site yourself, if you do anything that might
benefit from publicity.</P
><p class="para">Most <span class="acronym">WWW</SPAN
> browsers are capable of using protocols
other than <span class="acronym">HTTP</SPAN
>, which is the basic protocol of the
Web. For example, these browsers are usually also
Gopher and <span class="acronym">FTP</SPAN
>
clients, or are capable of using your existing Telnet and
<span class="acronym">FTP</SPAN
> clients transparently (without its being
visible to the user that he is starting an external program). Many
of them are also <span class="acronym">NNTP</SPAN
>, <span class="acronym">SMTP</SPAN
>, and
Archie clients. They use a single, consistent notation called a
Uniform Resource Locator (<span class="acronym">URL</SPAN
>) (see sidebar) to specify
connections of various types.</P
><div class="sidebar"><h4 class="sidebar"><a class="title" name="AUTOID-11034">Uniform Resource Locator (<span class="acronym">URL</SPAN
>) Syntax</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-11038"></A
>The general form of <span class="acronym">URL</SPAN
>s is
<code class="literal">service://host/path/to/file/or/page</CODE
>.</P
><p class="para">There are several possible values for the <em class="emphasis">service</EM
>
field, including &quot;ftp&quot;, &quot;http&quot;,
&quot;gopher&quot;, and &quot;telnet&quot;.</P
><p class="para">The <em class="emphasis">host</EM
> part generally specifies the hostname or
<span class="acronym">IP</SPAN
> address of the host to connect to. If the
service to be accessed is on a nonstandard port on that host (for
example, if it's an <span class="acronym">HTTP</SPAN
> server on something other
than port 80), the host field can be optionally specified as
&quot;host:port&quot; (e.g.,
<i class="systemitem.example">http://www.somewhere.com:8080</I
> would refer to an
<span class="acronym">HTTP</SPAN
> server on port 8080 on machine
<code class="literal">www.somewhere.com</CODE
>).</P
><p class="para">The <em class="emphasis">path</EM
> field (what comes after the
&quot;/&quot; following the host part) varies by type of
<span class="acronym">URL</SPAN
>, but generally that field specifies the
particular file or document to access on that server using that
service. For example, the <span class="acronym">URL</SPAN
>
<a class="systemitem.url" href="../../../WebStripper/protected.html#link=ftp://ftp.greatcircle.com/pub/firewalls/FAQ">ftp://ftp.greatcircle.com/pub/firewalls/FAQ</A
> refers
to the file <code class="literal">/pub/firewalls/FAQ</CODE
> to be obtained via
anonymous <span class="acronym">FTP</SPAN
> from host
<code class="literal">ftp.greatcircle.com</CODE
>.</P
><p class="para">For more information about <span class="acronym">URL</SPAN
>s, see any good book
on the World Wide Web.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="FIRE-08-S2-20">8.6.1 Packet Filtering Characteristics of
<span class="acronym">HTTP</SPAN
></A
></H3
><p class="para"><a class="indexterm" name="CH08PFHTTP"></A
><span class="acronym">HTTP</SPAN
> is a <span class="acronym">TCP</SPAN
>-based
service. Clients use random ports above 1023. Most servers use port
80, but some don't. To understand why, you need some history.</P
><p class="para">Many of the modern information access services (notably
<span class="acronym">HTTP</SPAN
>, <span class="acronym">WAIS</SPAN
>, and Gopher) were
designed so that the servers don't <em class="emphasis">have</EM
> to run on
a fixed well-known port on all machines. A standard well-known port
was established for each of these services, but the clients and
servers are all capable of using alternate ports as well. When you
reference one of these servers, you can include the port number it's
running on (assuming that it's not the standard port for that service)
in addition to the name of the machine it's running on. For example,
an <span class="acronym">HTTP URL</SPAN
> of the form
<i class="systemitem.example">http://host.domain.net/file.html</I
> is assumed to
refer to a server on the standard <span class="acronym">HTTP</SPAN
> port (port
80); if the server were on an alternate port (port 8000, for example),
the <span class="acronym">URL</SPAN
> would be written
<i class="systemitem.example">http://host.domain.net:8000/file.html</I
>.</P
><p class="para">The protocol designers had two good and valid reasons for designing
these services this way:</P
><ul class="itemizedlist"><li class="listitem"><p class="para"> Doing so allows a single machine to run multiple
servers for multiple data sets. You could, for example, run one
<span class="acronym">HTTP</SPAN
> server that's accessible to the world with
data that you wish to make available to the public, and another that
has other, nonpublic data on a different port that's restricted (via
packet filtering or the authentication available in the
<span class="acronym">HTTP</SPAN
> server, for example). </P
></LI
><li class="listitem"><p class="para">Doing so allows users to run their own servers (which may be a
blessing or a curse, depending on your particular security policy).
Because the standard well-known ports are all in the &quot;below
1024&quot; range that's reserved for use only by root
on <span class="acronym">UNIX</SPAN
> machines, unprivileged users can't run
their servers on the standard port numbers.</P
></LI
></UL
><p class="para">The ability to provide these services on nonstandard ports has its
uses, but it complicates things considerably from a packet filtering
point of view. If your users wish to access a server running on a
nonstandard port, you have several choices:</P
><ul class="itemizedlist"><li class="listitem"><p class="para">You can tell the users they can't do it; this may or may not be
acceptable, depending on your environment. </P
></LI
><li class="listitem"><p class="para">You can add a special exception for that service to your packet
filtering setup. This is bad for your users because it means that they
first have to recognize the problem and then wait until you've fixed it,
and it's bad for you because you'll constantly have to be adding
exceptions to the filter list. </P
></LI
><li class="listitem"><p class="para">You can try to convince the server's owner to move the server to
the standard port. While encouraging folks to use the standard ports as
much as possible is a good long-term solution, it's not likely to yield
immediate results. </P
></LI
><li class="listitem"><p class="para">You can use some kind of proxied version of the client. This
requires setup on your end, and may restrict your choice of clients. On
the other hand, both Mosaic and Netscape Navigator support proxying, and
they are by far the most popular clients.</P
></LI
><li class="listitem"><p class="para">If you can filter on the <span class="acronym">ACK</SPAN
> bit, you can allow all
outbound connections, regardless of destination port. This opens up a
wide variety of services, including passive-mode
<span class="acronym">FTP</SPAN
>. It also is a noticeable increase in your
vulnerability.</P
></LI
></UL
><p class="para">The good news is that the vast majority of these servers (probably
much greater than 90%) use the standard port, and that the more
widely used and important the server is, the more likely it is to use
the standard port. Many servers that use nonstandard ports use one of
a few easily recognizable substitutes (81, 800, 8000, and 8080).</P
><p class="para">Your firewall will probably prevent people on your internal network
from setting up their own servers at nonstandard ports (you're not
going to want to allow inbound connection to arbitrary ports above
1023). You could set up such servers on a bastion host, but wherever
possible, it's kinder to other sites to leave your servers on the
standard port.</P
><table class="informaltable"><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1">Direc-</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Source</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Dest.</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Pro-</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Source</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Dest.</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">ACK</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1"></TH
></TR
><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1">tion</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Addr.</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Addr.</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">tocol</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Port</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Port</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Set</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Notes</TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">In</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Ext</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Int</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><span class="acronym">TCP</SPAN
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">&gt;1023</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">80[18]</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">[19]</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Incoming session, client to server</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">Out</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Int</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Ext</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><span class="acronym">TCP</SPAN
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">80[18] </P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">&gt;1023</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Yes</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Incoming session, server to client</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">Out</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Int</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Ext</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><span class="acronym">TCP</SPAN
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">&gt;1023</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">80[18] </P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">[19]</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Outgoing session, client to server</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">In</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Ext</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Int</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><span class="acronym">TCP</SPAN
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">80[18] </P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">&gt;1023</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Yes</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Outgoing session, server to client</P
></TD
></TR
></TBODY
></TABLE
><blockquote class="footnote"><p class="para">[18] 80 is the standard port number for <span class="acronym">HTTP</SPAN
> servers,
but some servers run on different port
numbers.</P
><p class="para">[19] <span class="acronym">ACK</SPAN
> is not set on the first packet of this
type (establishing connection) but will be set on the rest.</P
></BLOCKQUOTE
><a class="indexterm" name="AUTOID-11217"></A
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="FIRE-08-S2-21">8.6.2 Proxying Characteristics of
<span class="acronym">HTTP</SPAN
></A
></H3
><p class="para"><a class="indexterm" name="AUTOID-11222"></A
>Various <span class="acronym">HTTP</SPAN
> clients (such as Mosaic and Netscape
Navigator) transparently support various proxying schemes. Some
clients support <span class="acronym">SOCKS</SPAN
>; others support
user-transparent proxying via special <span class="acronym">HTTP</SPAN
> servers,
and some support both. (See the discussion of <span class="acronym">SOCKS</SPAN
>
and proxying in general in <a class="xref" href="ch07_01.htm" title="Proxy Systems">Chapter 7</A
>.)</P
><p class="para"><a class="indexterm" name="AUTOID-11232"></A
><a class="indexterm" name="AUTOID-11235"></A
>The <span class="acronym">CERN HTTP</SPAN
> server, developed at the European
Particle Physics Laboratory in Geneva, Switzerland, has a proxy mode
in which the server handles all requests for remote documents from
browsers inside the firewall. The server makes the remote connection,
passing the information back to the clients transparently. See <a class="xref" href="appb_01.htm" title="Tools">Appendix B</A
> for information about getting the <span class="acronym">CERN HTTP</SPAN
> server.</P
><p class="para">Using the <span class="acronym">CERN HTTP</SPAN
> server as a proxy server can
provide an additional benefit, because the server can locally cache
<span class="acronym">WWW</SPAN
> pages obtained from the Internet. This caching
can significantly improve client performance and reduce network
bandwidth requirements. It does this by ensuring that popular
<span class="acronym">WWW</SPAN
> pages are retrieved only once at your site. The
second and subsequent requests get the locally cached copy of the
page, rather than a new copy each time from the original server out on
the Internet.</P
><p class="para"><a class="indexterm" name="AUTOID-11245"></A
><a class="indexterm" name="AUTOID-11247"></A
><a class="indexterm" name="AUTOID-11250"></A
>The <span class="acronym">TIS FWTK</SPAN
> also includes an <span class="acronym">HTTP</SPAN
>
proxy server, called <em class="emphasis">http-gw</EM
>, that can be used
with any client program. Clients that support <span class="acronym">HTTP</SPAN
>
proxying can use the <span class="acronym">FWTK HTTP</SPAN
> proxy server
transparently (all you have to do is configure the client to tell it
where the server is), but you must enforce custom user procedures for
clients that don't support <span class="acronym">HTTP</SPAN
> proxying.
Basically, <span class="acronym">URL</SPAN
>s have to be modified to direct the
clients to the proxy server rather than the real
server. <span class="acronym">URL</SPAN
>s embedded in <span class="acronym">HTML</SPAN
>
documents that pass through the server are modified automatically, but
users must know how to do it by hand for <span class="acronym">URL</SPAN
>s they
type in from scratch or obtain through other channels. <a class="xref" href="ch07_01.htm" title="Proxy Systems">Chapter 7</A
> describes the <span class="acronym">TIS FWTK</SPAN
> in
more detail.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="FIRE-08-S2-22">8.6.3 <span class="acronym">HTTP</SPAN
> Security
Concerns</A
></H3
><p class="para"><a class="indexterm" name="CH08SECHTTP"></A
>There are two basic sets of security concerns regarding
<span class="acronym">HTTP</SPAN
>:</P
><ul class="itemizedlist"><li class="listitem"><p class="para">What can a malicious client do to your <span class="acronym">HTTP</SPAN
> server?</P
></LI
><li class="listitem"><p class="para">What can a malicious <span class="acronym">HTTP</SPAN
> server do to your
clients?</P
></LI
></UL
><p class="para">The following sections describe these concerns:</P
><div class="sect3"><h4 class="sect3"><a class="title" name="FIRE-08-S3-40">8.6.3.1 What can a malicious client do to
your <span class="acronym">HTTP</SPAN
> server?</A
></H4
><p class="para">In most ways, the security concerns we have for an
<span class="acronym">HTTP</SPAN
> server are very similar to the security
concerns we have for any other server that handles connections from
the Internet, e.g., an anonymous <span class="acronym">FTP</SPAN
>
server. You want to make sure that the users of those connections can
access only what you want them to access, and that they
can't trick your server so they get to something they shouldn't.</P
><p class="para">There are a variety of methods to accomplish these goals, including:</P
><ul class="itemizedlist"><li class="listitem"><p class="para">Carefully configure the security and access control features of
your server to restrict its capabilities and what users can access with
it.[20] </P
><blockquote class="footnote"><p class="para">[20] For a more complete discussion of these features and their use, see
the chapters on <span class="acronym">HTTP</SPAN
> servers in 
<em class="emphasis">Managing Internet Information Services</EM
>.</P
></BLOCKQUOTE
></LI
><li class="listitem"><p class="para">Run the server as an unprivileged user.</P
></LI
><li class="listitem"><p class="para">Use the <em class="emphasis">chroot</EM
> mechanism to restrict the server's
operation to a particular section of your filesystem hierarchy. You can
use chroot either within the server or through an external wrapper
program. </P
></LI
><li class="listitem"><p class="para">Don't put anything sensitive on the server machine in the first
place. In this way, even if somebody does &quot;break out&quot;
somehow, there's nothing else of interest on the machine; at least,
nothing that they couldn't already get to anyway via the normal access
procedures.</P
></LI
><li class="listitem"><p class="para">Configure the rest of your network security so that even if an
attacker manages to totally, compromise the server host,
they're going to have a hard time getting any further into your
network. To start with, don't put the server on an internal net.</P
></LI
></UL
><p class="para"><span class="acronym">HTTP</SPAN
> servers themselves are providing a limited
service and don't pose major security concerns. However, there is one
unique feature of <span class="acronym">HTTP</SPAN
> servers that you need to
worry about: their use of external programs, particularly ones that<a class="indexterm" name="AUTOID-11307"></A
><a class="indexterm" name="AUTOID-11309"></A
>
interact with the user via the Common Gateway Interface
(<span class="acronym">CGI</SPAN
>) which is the piece of
<span class="acronym">HTTP</SPAN
> that specifies how user information is
communicated to the server and from it to external programs. Many
<span class="acronym">HTTP</SPAN
> servers are configured to run other programs
to generate HTML pages on the fly. These programs are generically
called <span class="acronym">CGI</SPAN
> scripts, even if they
don't use <span class="acronym">CGI</SPAN
> and aren't scripts. For example, if
someone issues a database query to an <span class="acronym">HTTP</SPAN
> server,
the <span class="acronym">HTTP</SPAN
> server runs an external program to perform
the query and generate an <span class="acronym">HTML</SPAN
> page with the answers. </P
><p class="para">There are two
things you need to worry about with these external programs:</P
><ul class="itemizedlist"><li class="listitem"><p class="para">Can an attacker trick the external programs into doing something
they shouldn't?</P
></LI
><li class="listitem"><p class="para">Can an attacker upload his own external programs and cause them to be
executed?</P
></LI
></UL
><p class="para">You may want to run your <span class="acronym">HTTP</SPAN
> server on a
Macintosh, <span class="acronym">DOS</SPAN
>, or Windows machine. These machines
have good <span class="acronym">HTTP</SPAN
> server implementations available,
but don't generally have the other capabilities that would make those
servers insecure. For example, they are unlikely to be running other
servers, they don't have a powerful and easily available scripting
facility, and they're less likely to have other data or trusted access
to other machines. The downside of this is that it's hard to do
interesting things on them; the easier it gets, the less secure
they'll be.</P
>Tricking external programs<p class="para"><a class="indexterm" name="CH08EXTPROG"></A
>The external programs run by <span class="acronym">HTTP</SPAN
> servers are often
shell scripts written by folks who have information they want to
provide access to, but who know little or nothing about writing secure
shell scripts (which is by no means trivial, even for an expert).</P
><p class="para">Because it's difficult to ensure the security of the scripts
themselves, about the best you can do is try to provide a secure
environment (using <em class="emphasis">chroot</EM
> 
and other mechanisms) that the scripts can
run in (one which, you hope, they can't get out of). There should be
nothing in the environment you'd worry about being revealed to
the world. Nothing should trust the machine the server is running
on. If you set up the environment in this way, then even if attackers
somehow manage to break out of the restricted environment and gain
full access to the machine, they're not much further along towards
breaking into the really interesting stuff on your internal network.</P
><p class="para">Alternatively, or in addition, if you have people who you feel sure
are capable of writing secure scripts, you can have all the scripts
written, or at least reviewed, by these people. Most sites don't have
people like this readily available, but if you are going to be
seriously involved in providing <span class="acronym">WWW</SPAN
> service, you
may want to hire one. It's still a good idea to run the scripts
in a restricted environment; nobody's perfect.</P
>Uploading external programs<p class="para"><a class="indexterm" name="AUTOID-11343"></A
>The second concern is that attackers might be able to upload their own
external programs and cause your server to run them. How
could attackers do this? Suppose the following:</P
><ul class="itemizedlist"><li class="listitem"><p class="para">Your <span class="acronym">HTTP</SPAN
> server and your anonymous
<span class="acronym">FTP</SPAN
> server both run on the same machine.</P
></LI
><li class="listitem"><p class="para">They can both access the same areas of the filesystem.</P
></LI
><li class="listitem"><p class="para">There is a writable directory somewhere in those areas, 
so that customers can upload core dumps from your product via
<span class="acronym">FTP</SPAN
> for analysis by your programmers, for example.</P
></LI
></UL
><p class="para">In this case, the attacker might be able to upload his own script or
binary to that writable directory using anonymous
<span class="acronym">FTP</SPAN
>, and then cause the <span class="acronym">HTTP</SPAN
>
server to run it.</P
><p class="para">What is your defense against things like this? Once again, your best
bet is to restrict what filesystem areas each server can access
(generally using <em class="emphasis">chroot</EM
>), and to provide a restricted environment in
which each server can run.<a class="indexterm" name="AUTOID-11360"></A
></P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="FIRE-08-S3-41">8.6.3.2 What can a malicious server do to
your <span class="acronym">HTTP</SPAN
> clients?</A
></H4
><p class="para">The security problems of <span class="acronym">HTTP</SPAN
> clients are far more
complex that those of <span class="acronym">HTTP</SPAN
> servers. The basis of
these client problems is that <span class="acronym">HTTP</SPAN
> clients (like
Mosaic and Netscape Navigator) are generally designed to be
extensible and to run particular external programs to deal with
particular data types. This extensibility can be abused by an
attacker.</P
><p class="para"><span class="acronym">HTTP</SPAN
> servers can provide data in any number of
formats: plain text files, <span class="acronym">HTML</SPAN
> files, PostScript
documents, still video files (<span class="acronym">GIF</SPAN
> and
<span class="acronym">JPEG</SPAN
>), movie files (<span class="acronym">MPEG</SPAN
>), audio
files, and so on. The servers use <span class="acronym">MIME</SPAN
>, discussed
briefly above in the section on electronic mail, to format the data
and specify its type. <span class="acronym">HTTP</SPAN
> clients generally don't
attempt to understand and process all of these different data
formats. They understand a few (such as <span class="acronym">HTML</SPAN
>, plain
text, and <span class="acronym">GIF</SPAN
>), and they rely on external programs
to deal with the rest. These external programs will display, play,
preview, print, or do whatever is appropriate for the format.</P
><p class="para">For example, <span class="acronym">UNIX</SPAN
> Web browsers confronted with a
PostScript file will ordinarily invoke the
GhostScript program, and <span class="acronym">UNIX</SPAN
>
Web browsers confronted with a <span class="acronym">JPEG</SPAN
> file will
ordinarily invoke the <em class="emphasis">xv</EM
> program. The user
controls (generally via a configuration file) what data types the
<span class="acronym">HTTP</SPAN
> client knows about, which programs to invoke
for which data types, and what arguments to pass to those programs. If
the user hasn't provided his own configuration file, the
<span class="acronym">HTTP</SPAN
> client generally uses a built-in default or a
systemwide default.</P
><p class="para">All of these external programs present two security concerns:</P
><ul class="itemizedlist"><li class="listitem"><p class="para">What are the inherent capabilities of the external programs an
attacker might take advantage of?</P
></LI
><li class="listitem"><p class="para">What new programs (or new arguments for existing programs) might
an attacker be able to convince the user to add to his configuration?</P
></LI
></UL
>An example<p class="para">Let's consider, for example, what an <span class="acronym">HTTP</SPAN
> client is
going to do with a PostScript file. PostScript is a language for
controlling printers. While primarily intended for that purpose, it
is a full programming language, complete with data structures, flow of
control operators, and file input/output operators. These operators
(&quot;read file&quot;, &quot;write file&quot;, &quot;create
file&quot;, &quot;delete file&quot;, etc.) are seldom used, except
on printers with local disks for font storage, but they're there as
part of the language. PostScript previewers (such as GhostScript)
generally implement these operators for completeness.</P
><p class="para">Suppose that a user uses Mosaic to pull down a PostScript document. 
Mosaic invokes GhostScript, and it turns out that the document has
PostScript commands in it that say &quot;delete all files in the
current directory.&quot; If GhostScript executes the commands, who's
to blame? You can't really expect Mosaic to scan the PostScript on the
way through to see if it's dangerous; that's an impossible problem. You
can't really expect GhostScript not to do what it's told in valid
PostScript code. You can't really expect your users not to download
PostScript code, or to scan it themselves.</P
><p class="para">Current versions of GhostScript have a safer mode they run in by
default. This mode disables &quot;dangerous&quot; operators such as
those for file input/output. But what about all the other PostScript
interpreters or previewers? And what about the applications to handle
all the other data types? How safe are they? Who knows?</P
><p class="para">Even if you have safe versions of these auxiliary applications, how do
you keep your users from changing their configuration files to add new
applications, run different applications, or pass different arguments
(for example, to disable the safer mode of GhostScript) to the
existing applications?</P
><p class="para">Why would a user do this? Suppose that the user found something in the
<span class="acronym">WWW</SPAN
> that claimed to be something he really
wanted&nbsp;- a game demo, a graphics file, a copy of Madonna's new song,
whatever. And, suppose that this desirable something came with a note
that said &quot;Hey, before you can access this Really Cool Thing,
you need to modify your Mosaic configuration, because the standard
configuration doesn't know how to deal with this thing; here's what
you do...&quot; And, suppose that the instructions were something
like &quot;remove the `-dSAFER' flag from the
`ghostscript' line of your <em class="emphasis">.mosaicrc</EM
>
file,&quot; or &quot;add this line to your
<em class="emphasis">.mosaicrc</EM
> file.&quot;</P
><p class="para">Would your users recognize that they were being instructed to disable
the safer mode in GhostScript, or to add some new data
type with <em class="emphasis">/bin/sh</EM
> as its auxiliary program, so that
whatever data of that type came down was passed as
commands straight to the shell? Even if they recognized it, would they
do it anyway (nice, trusting people that they are)?</P
><p class="para">Some people believe that Macintosh and <span class="acronym">PC</SPAN
>-based
versions of <span class="acronym">WWW</SPAN
> browsers are less susceptible to
some of these security problems than <span class="acronym">UNIX</SPAN
>-based
browsers. On Mac and <span class="acronym">PC</SPAN
> machines, there is usually
no shell (or only a shell of limited power, like the
<span class="acronym">MS-DOS</SPAN
> command interpreter) that an attacker can
break out to, and a limited and highly unpredictable set of programs
to access once they're there. Also, if any damage occurs, it can 
often be more easily isolated to a single machine. On the other hand, 
&quot;highly unpredictable&quot; does not
mean &quot;completely unpredictable&quot;. (For example, a very
large percentage of Macs and <span class="acronym">PC</SPAN
>s have copies of
standard Microsoft applications, like Word and Excel.) Further, if
your Macs and <span class="acronym">PC</SPAN
>s are networked with AppleShare,
Novell, <span class="acronym">PC-NFS</SPAN
>, or something similar, you can't
make any assumptions about damage being limited to a single machine.</P
>What can you do?<p class="para">There is no simple, foolproof defense against the type of problem we've
described. At this point in time, you have to rely on a combination of
carefully installed and configured client and auxiliary programs, and a
healthy dose of user education and awareness training. This is an area
of active research and development, and both the safeguards and the
attacks will probably develop significantly over the next couple of
years.</P
><p class="para">Because Mac and <span class="acronym">PC</SPAN
> clients seem less susceptible to
some of the client-side problems, some sites take the approach of
allowing <span class="acronym">WWW</SPAN
> access only from Macs or PCs. Some go
even further and limit access to particular machines (often placed in
easily accessible locations like libraries or cafeterias) that have
been carefully configured so they have no sensitive information on
them, and no access to such information. The idea is this: If anything
bad happens, it will affect only this one easily rebuilt machine. The
machine can't be used to access company data on other machines.</P
><p class="para">Some people have experimented, at least in <span class="acronym">UNIX</SPAN
>
environments, with running Mosaic and its auxiliary programs under the
X Window System in a restricted environment&nbsp;- or on a
&quot;sacrificial goat&quot; machine that has nothing else on
it&nbsp;- with the displays directed to their workstation. This provides a
certain measure of protection, but it also imposes a certain amount of
inconvenience. Consider the following problems with this approach:</P
><ul class="itemizedlist"><li class="listitem"><p class="para">This approach works only for the <span class="acronym">UNIX</SPAN
>/X version of
Mosaic. If you have Mac and <span class="acronym">PC</SPAN
> users, they're going
to have to run X on their system, log in to the goat
system, set up the restricted environment, and start Mosaic. All in
all, this may be more interaction with <span class="acronym">UNIX</SPAN
> than
they're willing to put up with.</P
></LI
><li class="listitem"><p class="para">Any files legitimately retrieved during the session are going to wind
up in the restricted environment or on the goat
machine. Then, they're going to have to be transferred separately to
the machine where they are really wanted.</P
></LI
><li class="listitem"><p class="para">This approach generally doesn't work for audio files, which will end
up being played on the audio system of the goat machine
(or wherever the restricted environment is), not on the user's
machine.</P
></LI
></UL
><p class="para">As discussed above in the section called &quot;Packet Filtering
Characteristics of <span class="acronym">HTTP</SPAN
>,&quot; there is another
complication of <span class="acronym">WWW</SPAN
> clients in environments in
which packet filtering is part of the firewall solution: not all
<span class="acronym">HTTP</SPAN
> servers run on port 80. To address this, you
might consider using proxy servers for <span class="acronym">HTTP</SPAN
>
access. If you do this, the internal clients talk on standard ports
through the packet filtering system to the proxy server, and the proxy
server talks on arbitrary ports (because it's outside the packet
filtering system) to the real server.</P
></DIV
><a class="indexterm" name="AUTOID-11436"></A
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="FIRE-08-S2-23">8.6.4 Secure <span class="acronym">HTTP</SPAN
></A
></H3
><p class="para"><a class="indexterm" name="AUTOID-11441"></A
><a class="indexterm" name="AUTOID-11443"></A
>You may hear discussions of Secure <span class="acronym">HTTP</SPAN
> and wonder
how it relates to firewalls and the configuring of services. Secure
<span class="acronym">HTTP</SPAN
> is not designed to solve the kinds of problems
we've been discussing in this section. It's designed to deal with
privacy issues by encrypting the information that is being passed
around via <span class="acronym">HTTP</SPAN
>. A mechanism like Secure
<span class="acronym">HTTP</SPAN
> is necessary to be able to do business using
<span class="acronym">HTTP</SPAN
> so that things like credit card numbers can be
passed over the Internet without fear of capture by packet
sniffers. In order to distinguish between privacy issues, on the one
hand, and vulnerability to malicious servers, on the other hand,
people working on <span class="acronym">HTTP</SPAN
> and similar extensible
protocols usually use the word &quot;safe&quot; to refer to
protocols that protect you from hostile servers, and the word
&quot;secure&quot; to refer to protocols that protect you from data
snooping.</P
><p class="para">Because it provides authentication as well as encryption, Secure
<span class="acronym">HTTP</SPAN
> could eventually provide some assistance with
safety. If you are willing to connect only to sites that you know,
that run Secure <span class="acronym">HTTP</SPAN
>, and that authenticate
themselves, you can be sure that you're not talking to a hostile
site. However, even when Secure <span class="acronym">HTTP</SPAN
> is released
and in wide usage, this approach (limited connections) is unlikely to
be a popular and practical one; part of the glory of the Web is being
able to go to new and unexpected places.</P
><p class="para">Although people are working on <span class="acronym">HTTP</SPAN
>-like protocols
that are safe, safe <span class="acronym">HTTP</SPAN
> is probably not a viable
concept. It's not <span class="acronym">HTTP</SPAN
> that's unsafe; it's the fact
that <span class="acronym">HTTP</SPAN
> is transferring programs in other
languages. This is a major design feature of <span class="acronym">HTTP</SPAN
>
and one of the things responsible for its rapid spread.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="FIRE-08-S2-24">8.6.5 Summary of <span class="acronym">WWW</SPAN
>
Recommendations</A
></H3
><ul class="itemizedlist"><li class="listitem"><p class="para">If you're going to run an <span class="acronym">HTTP</SPAN
> server, use a
dedicated bastion host if possible.</P
></LI
><li class="listitem"><p class="para">If you're going to run an <span class="acronym">HTTP</SPAN
> server, carefully
configure the <span class="acronym">HTTP</SPAN
> server to control what it has
access to; in particular, watch out for ways that someone could upload
a program to the system somehow (via mail or <span class="acronym">FTP</SPAN
>,
for example), and then execute it via the <span class="acronym">HTTP</SPAN
>
server.</P
></LI
><li class="listitem"><p class="para">Carefully control the external programs your <span class="acronym">HTTP</SPAN
>
server can access.</P
></LI
><li class="listitem"><p class="para">You can't allow internal hosts to access all <span class="acronym">HTTP</SPAN
>
servers without allowing them to access all <span class="acronym">TCP</SPAN
>
ports, because some <span class="acronym">HTTP</SPAN
> servers use nonstandard
port numbers. If you don't mind allowing your users access to all
<span class="acronym">TCP</SPAN
> ports, you can use packet filtering to examine
the <span class="acronym">ACK</SPAN
> bit to allow outgoing connections to those
ports (but not incoming connections from those ports). If you do mind,
then either restrict your users to servers on the standard port (80),
or use proxying.</P
></LI
><li class="listitem"><p class="para">Proxying <span class="acronym">HTTP</SPAN
> is easy, and a caching proxy server
offers network bandwidth benefits as well as security benefits.</P
></LI
><li class="listitem"><p class="para">Configure your <span class="acronym">HTTP</SPAN
> clients carefully and warn
your users not to reconfigure them based on external advice.</P
></LI
></UL
><a class="indexterm" name="AUTOID-11491"></A
><a class="indexterm" name="AUTOID-11492"></A
><a class="indexterm" name="AUTOID-11493"></A
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch08_05.htm#FIRE-08-S2-14" title="8.5 Network News Transfer Protocol (NNTP)"><img src="../gifs/txtpreva.gif" alt="Previous: 8.5 Network News Transfer Protocol (NNTP)" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Building Internet Firewalls"><img src="../gifs/txthome.gif" alt="Building Internet Firewalls" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch08_07.htm#FIRE-08-S3-48" title="8.7 Other Information Services"><img src="../gifs/txtnexta.gif" alt="Next: 8.7 Other Information Services" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">8.5 Network News Transfer Protocol (NNTP)</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_a.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">8.7 Other Information Services</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.htm" title="The Networking CD Bookshelf">Library Home</A
> | <a href="../dnsbind/index.htm" title="DNS &amp; BIND">DNS &amp; BIND</A
> | <a href="../tcpip/index.htm" title="TCP/IP Network Administration">TCP/IP</A
> | <a href="../sendmail/index.htm" title="sendmail">sendmail</A
> | <a href="../smdref/index.htm" title="sendmail Desktop Reference">sendmail Reference</A
> | <a href="index.htm" title="Building Internet Firewalls">Firewalls</A
> | <a href="../puis/index.htm" title="Practical UNIX &amp; Internet Security">Practical Security</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
