<html><head>
<title>[Appendix C] C.6 Transport Layer</TITLE>
<meta name="DC.title" content="Building Internet Firewalls"><meta name="DC.creator" content="D. Brent Chapman &amp; Elizabeth D. Zwicky"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-02-04T00:30:52Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-124-0" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="appc_01.htm" title="C. TCP/IP Fundamentals"><link rel="prev" href="appc_05.htm#FIRE-C-S2-5" title="C.5 Internet Layer"><link rel="next" href="appc_07.htm" title="C.7 Application Layer"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Building Internet Firewalls" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Building Internet Firewalls"><area shape="RECT" coords="467,0,514,18" href="../search/fsrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="appc_05.htm#FIRE-C-S2-5" title="C.5 Internet Layer"><img src="../gifs/txtpreva.gif" alt="Previous: C.5 Internet Layer" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Appendix C<br><span class="acronym">TCP/IP</SPAN
> Fundamentals</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="appc_07.htm" title="C.7 Application Layer"><img src="../gifs/txtnexta.gif" alt="Next: C.7 Application Layer" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="FIRE-C-S1-6">C.6 Transport Layer</A
></H2
><p class="para">The protocol layer just above the Internet Layer is the Host-to-Host
Transport Layer. This name is usually shortened to Transport
Layer. The two most important protocols in the Transport Layer are
Transmission Control Protocol (<span class="acronym">TCP</SPAN
>) and User
Datagram Protocol (<span class="acronym">UDP</SPAN
>). <span class="acronym">TCP</SPAN
>
provides reliable data delivery service with end-to-end error
detection and correction. <span class="acronym">UDP</SPAN
> provides
low-overhead, connectionless datagram delivery service. Both protocols
deliver data between the Application Layer and the Internet Layer.
Applications programmers can choose whichever service is more
appropriate for their specific applications.</P
><div class="sect2"><h3 class="sect2"><a class="title" name="FIRE-C-S2-6">C.6.1 User Datagram Protocol</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-23821"></A
>The User Datagram Protocol gives application programs direct access to
a datagram delivery service, like the delivery service that IP
provides. This allows applications to exchange messages over the
network with a minimum of protocol overhead.</P
><p class="para"><span class="acronym">UDP</SPAN
> is an unreliable, connectionless datagram
protocol. (As noted before, &quot;unreliable&quot; merely means that there are
no techniques in the protocol for verifying that the data reached the
other end of the network correctly.) Within your computer,
<span class="acronym">UDP</SPAN
> will deliver data
correctly. <span class="acronym">UDP</SPAN
> uses 16-bit <em class="emphasis">Source
Port</EM
> and <em class="emphasis">Destination Port </EM
>numbers in
word 1 of the message header, to deliver data to the correct
applications process. <a class="xref" href="#FIRE-C-FIG-7" title="UDP message format">Figure 13.11</A
> shows the
<span class="acronym">UDP</SPAN
> message format.</P
><h4 class="figure"><a class="title" name="FIRE-C-FIG-7">Figure 13.11: <span class="acronym">UDP</SPAN
> message format</A
></H4
><img class="graphic" src="figs/firec07.gif" alt="Figure 13.11"><p class="para">Why do applications programmers choose <span class="acronym">UDP</SPAN
> as a
data transport service? There are a number of good reasons. If the
amount of data being transmitted is small, the overhead of creating
connections and ensuring reliable delivery may be greater than the
work of retransmitting the entire data set. In this case,
<span class="acronym">UDP</SPAN
> is the most efficient choice for a Transport
Layer protocol. Applications that fit a &quot;query-response&quot; model are
also excellent candidates for using <span class="acronym">UDP</SPAN
>. The
response can be used as a positive acknowledgment to the query. If a
response isn't received within a certain time period, the application
just sends another query. Still other applications provide their own
techniques for reliable data delivery, and don't require that service
from the transport layer protocol. Imposing another layer of
acknowledgment on any of these types of applications is inefficient.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="FIRE-C-S2-7">C.6.2 Transmission Control Protocol</A
></H3
><p class="para"><a class="indexterm" name="CTCP"></A
>Applications that require the transport protocol to provide reliable
data delivery use <span class="acronym">TCP</SPAN
> because it verifies that data
is delivered across the network accurately and in the proper
sequence. <span class="acronym">TCP</SPAN
> is a <em class="emphasis">reliable</EM
>,
<em class="emphasis">connection-oriented</EM
>,
<em class="emphasis">byte-stream</EM
> protocol. Let's look at each of the
terms&nbsp;- reliable, connection-oriented, and byte-stream&nbsp;- in more detail.</P
><p class="para"><a class="indexterm" name="AUTOID-23850"></A
><span class="acronym">TCP</SPAN
> provides reliability with a mechanism called
<em class="emphasis">Positive Acknowledgment with Re-transmission
(<span class="acronym">PAR</SPAN
>)</EM
>. Simply stated, a system using
<span class="acronym">PAR</SPAN
> sends the data again, unless it hears from the
remote system that the data arrived okay. The unit of data exchanged
between cooperating <span class="acronym">TCP</SPAN
> modules is called a segment
(see <a class="xref" href="#FIRE-C-FIG-8" title="TCP segment format">Figure 13.12</A
>). Each segment contains a checksum
that the recipient uses to verify that the data is undamaged. If the
data segment is received undamaged, the receiver sends a
<em class="emphasis">positive acknowledgment </EM
>back to the sender. If
the data segment is damaged, the receiver discards it. After an
appropriate time-out period, the sending <span class="acronym">TCP</SPAN
> module
retransmits any segment for which no positive acknowledgment has been
received.</P
><h4 class="figure"><a class="title" name="FIRE-C-FIG-8">Figure 13.12: <span class="acronym">TCP</SPAN
> segment format</A
></H4
><img class="graphic" src="figs/firec08.gif" alt="Figure 13.12"><p class="para"><a class="indexterm" name="AUTOID-23865"></A
><span class="acronym">TCP</SPAN
> is connection-oriented. It establishes a
logical end-to-end connection between the two communicating
hosts. Control information, called a<em class="emphasis"> handshake</EM
>,
is exchanged between the two endpoints to establish a dialogue before
data is transmitted. <span class="acronym">TCP</SPAN
> indicates the control
function of a segment by setting the appropriate bit in the Flags
field in word 4 of the <em class="emphasis">segment header</EM
>.</P
><p class="para"><a class="indexterm" name="AUTOID-23872"></A
>The type of handshake used by <span class="acronym">TCP</SPAN
> is called a
<em class="emphasis">three-way handshake</EM
> because three segments are
exchanged. <a class="xref" href="#FIRE-C-FIG-9" title="Three-way handshake">Figure 13.13</A
> shows the simplest form of
the three-way handshake. Host A begins the connection by sending host<a class="indexterm" name="AUTOID-23877"></A
><a class="indexterm" name="AUTOID-23879"></A
>
B a segment with the &quot;Synchronize sequence numbers&quot;
(<span class="acronym">SYN</SPAN
>) bit set. This segment tells host B what sequence
number host A will use as a starting number for its
segments. (Sequence numbers are used to keep data in the proper
order.) Host B responds to A with a segment that has the
&quot;Acknowledgment&quot; (<span class="acronym">ACK</SPAN
>) and <span class="acronym">SYN</SPAN
>
bits set. B's segment acknowledges the receipt of A's segment, and
informs A which Sequence Number host B will start with. Finally, host
A sends a segment that acknowledges receipt of B's segment, and
transfers the first actual data.</P
><p class="para">In this figure, note that the first packet in each direction has the
<span class="acronym">SYN</SPAN
> bit set, and all subsequent packets have the
<span class="acronym">ACK</SPAN
> bit set.</P
><h4 class="figure"><a class="title" name="FIRE-C-FIG-9">Figure 13.13: Three-way handshake</A
></H4
><img class="graphic" src="figs/firec09.gif" alt="Figure 13.13"><p class="para">After this exchange, host A's <span class="acronym">TCP</SPAN
> has positive
evidence that the remote <span class="acronym">TCP</SPAN
> is alive and ready to
receive data. As soon as the connection is established, data can be
transferred. When the cooperating modules have concluded the data
transfers, they will exchange a three-way handshake with segments
containing the &quot;No more data from sender&quot; bit (called the
<em class="emphasis">FIN bit</EM
>) to close the connection. It is the
end-to-end exchange of data that provides the logical connection
between the two systems.</P
><p class="para">TCP views the data it sends as a continuous stream of bytes, not as
independent packets. Therefore, <span class="acronym">TCP</SPAN
> takes care to
maintain the sequence in which bytes are sent and received. The
&quot;Sequence Number&quot; and &quot;Acknowledgment Number&quot; fields in the
<span class="acronym">TCP</SPAN
> segment header keep track of the bytes.</P
><p class="para">The <span class="acronym">TCP</SPAN
> standard does not require that each system
start numbering bytes with any specific number; each system chooses
the number it will use as a starting point. To keep track of the data
stream correctly, each end of the connection must know the other end's
initial number. The two ends of the connection synchronize
byte-numbering systems by exchanging <span class="acronym">SYN</SPAN
> segments
during the handshake. The &quot;Sequence Number&quot; field in the
<span class="acronym">SYN</SPAN
> segment contains the Initial Sequence Number
(<span class="acronym">ISN</SPAN
>), which is the starting point for the
byte-numbering system. The <span class="acronym">ISN</SPAN
> is chosen at
random.</P
><p class="para">Each byte of data is numbered sequentially from the
<span class="acronym">ISN</SPAN
>, so the first real byte of data sent has a
sequence number of <span class="acronym">ISN</SPAN
>+1. The Sequence Number in
the header of a data segment identifies the sequential position in the
data stream of the first data byte in the segment. For example, if the
first byte in the data stream was sequence number 1
(<span class="acronym">ISN</SPAN
>=0) and 4,000 bytes of data have already been
transferred, then the first byte of data in the current segment is
byte 4001, and the Sequence Number would be 4001.</P
><p class="para"><a class="indexterm" name="AUTOID-23908"></A
><a class="indexterm" name="AUTOID-23910"></A
>The Acknowledgment Segment (ACK) performs two
functions: <em class="emphasis">positive acknowledgment</EM
> and <em class="emphasis">flow
control</EM
>. The acknowledgment tells the sender how much data
has been received, and how much more the receiver can accept. The
Acknowledgment Number is the sequence number of the last byte received
at the remote end. The standard does not require an individual
acknowledgment for every packet. The acknowledgment number is a
positive acknowledgment of all bytes up through that number. For
example, if the first byte sent was numbered 1 and 2,000 bytes have
been successfully received, the Acknowledgment Number would be 2000.</P
><p class="para">The Window field contains the number of bytes the remote end is able
to accept. If the receiver is capable of accepting 6,000 more bytes,
the Window would be 6000. The window indicates to the sender that it
can continue sending segments as long as the total number of bytes
that it sends is smaller than the window of bytes that the receiver
can accept. The receiver controls the flow of bytes from the sender
by changing the size of the window. A zero window tells the sender to
cease transmission until it receives a non-zero window value.</P
><p class="para"><a class="xref" href="#FIRE-C-FIG-10" title="TCP data stream">Figure 13.14</A
> shows a <span class="acronym">TCP</SPAN
> data
stream that starts with an Initial Sequence Number of 0. The
receiving system has received and acknowledged 2,000 bytes, so the
current Acknowledgment Number is 2000. The receiver also has enough
buffer space for another 6,000 bytes, so it has advertised a Window of
6000. The sender is currently sending a segment of 1,000 bytes
starting with Sequence Number 4001. The sender has received no
acknowledgment for the bytes from 2001 on, but continues sending data
as long as it is within the window. If the sender fills the window and
receives no acknowledgment of the data previously sent, it will, after
an appropriate time-out, send the data again starting from the first
unacknowledged byte. In <a class="xref" href="#FIRE-C-FIG-10" title="TCP data stream">Figure 13.14</A
>,
retransmission would start from byte 2001 if no further
acknowledgments are received. This procedure ensures that data is
reliably received at the far end of the network.</P
><p class="para"><span class="acronym">TCP</SPAN
> is also responsible for delivering data
received from <span class="acronym">IP</SPAN
> to the correct application. The
application that the data is bound for is identified by a 16-bit
number called the <em class="emphasis">port number.</EM
> The
<em class="emphasis">Source Port</EM
> and 
<em class="emphasis">Destination Port </EM
> are contained in 
the first word of the segment
header. Correctly passing data to and from the Application Layer is an
important part of what the Transport Layer services do.</P
><h4 class="figure"><a class="title" name="FIRE-C-FIG-10">Figure 13.14: <span class="acronym">TCP</SPAN
> data stream</A
></H4
><img class="graphic" src="figs/firec10.gif" alt="Figure 13.14"><a class="indexterm" name="AUTOID-23929"></A
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="appc_05.htm#FIRE-C-S2-5" title="C.5 Internet Layer"><img src="../gifs/txtpreva.gif" alt="Previous: C.5 Internet Layer" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Building Internet Firewalls"><img src="../gifs/txthome.gif" alt="Building Internet Firewalls" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="appc_07.htm" title="C.7 Application Layer"><img src="../gifs/txtnexta.gif" alt="Next: C.7 Application Layer" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">C.5 Internet Layer</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_a.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">C.7 Application Layer</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.htm" title="The Networking CD Bookshelf">Library Home</A
> | <a href="../dnsbind/index.htm" title="DNS &amp; BIND">DNS &amp; BIND</A
> | <a href="../tcpip/index.htm" title="TCP/IP Network Administration">TCP/IP</A
> | <a href="../sendmail/index.htm" title="sendmail">sendmail</A
> | <a href="../smdref/index.htm" title="sendmail Desktop Reference">sendmail Reference</A
> | <a href="index.htm" title="Building Internet Firewalls">Firewalls</A
> | <a href="../puis/index.htm" title="Practical UNIX &amp; Internet Security">Practical Security</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
