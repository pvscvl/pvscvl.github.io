<html><head>
<title>[Appendix C] C.12 Protocols, Ports, and Sockets</TITLE>
<meta name="DC.title" content="Building Internet Firewalls"><meta name="DC.creator" content="D. Brent Chapman &amp; Elizabeth D. Zwicky"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-02-04T00:31:01Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-124-0" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="appc_01.htm" title="C. TCP/IP Fundamentals"><link rel="prev" href="appc_11.htm" title="C.11 The Routing Table"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Building Internet Firewalls" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Building Internet Firewalls"><area shape="RECT" coords="467,0,514,18" href="../search/fsrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="appc_11.htm" title="C.11 The Routing Table"><img src="../gifs/txtpreva.gif" alt="Previous: C.11 The Routing Table" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Appendix C<br><span class="acronym">TCP/IP</SPAN
> Fundamentals</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172">&nbsp;</TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="FIRE-C-S1-12">C.12 Protocols, Ports, and Sockets</A
></H2
><p class="para">Once data is routed through the network and delivered to a specific
host, it must be delivered to the correct user or process. As the data
moves up or down the layers of <span class="acronym">TCP/IP</SPAN
>, a mechanism
is needed to deliver data to the correct protocols in each layer. The
system must be able to combine data from many applications into a few
transport protocols, and from the transport protocols into
<span class="acronym">IP</SPAN
>. Combining many sources of data into a single
data stream is called <em class="emphasis">multiplexing</EM
>. Data arriving
from the network must be <em class="emphasis">demultiplexed</EM
>&nbsp;- divided
for delivery to multiple processes. To accomplish this,
<span class="acronym">IP</SPAN
> uses <em class="emphasis">protocol numbers</EM
> to
identify transport protocols, and the transport protocols use
<em class="emphasis">port numbers</EM
> to identify applications.</P
><p class="para">Some protocol and port numbers are reserved to identify
<em class="emphasis">well-known services.</EM
> Well-known services are
standard network protocols, such as <span class="acronym">FTP</SPAN
> and Telnet
that are commonly used throughout the network. The protocol numbers
and port numbers allocated to well-known services are documented in
the <em class="emphasis">Assigned Numbers</EM
>
<span class="acronym">RFC</SPAN
>. <span class="acronym">UNIX</SPAN
> systems define
protocol and port numbers in two simple text files,
<em class="emphasis">/etc/protocols </EM
>and
<em class="emphasis">/etc/services</EM
>.</P
><div class="sect2"><h3 class="sect2"><a class="title" name="FIRE-C-S2-10">C.12.1 Protocol Numbers</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-24490"></A
><a class="indexterm" name="AUTOID-24493"></A
>The protocol number is a single byte in the third word of the datagram
header. The value identifies the protocol in the layer above
<span class="acronym">IP</SPAN
> to which the data should be passed.</P
><p class="para">On a <span class="acronym">UNIX</SPAN
> system, the protocol numbers are defined
in the <em class="emphasis">/etc/protocols </EM
>file. This file is a simple
table containing the protocol name and the protocol number associated
with that name. The format of the table is a single entry per line,
consisting of the official protocol name, separated by white space
from the protocol number. The protocol number is separated by white
space from the &quot;alias&quot; for the protocol name. Comments in the table
begin with #. An<em class="emphasis">/etc/protocol</EM
> file is shown
below.</P
><blockquote class="screen"><pre class="screen">% cat /etc/protocols
#
# @(#)protocols 1.8 88/02/07 SMI
#
# Internet (IP) protocols #
ip     0      IP     # internet protocol, pseudo protocol number
icmp   1      ICMP   # internet control message protocol
igmp   2      IGMP   # internet group multicast protocol
ggp    3      GGP    # gateway-gateway protocol
tcp    6      TCP    # transmission control protocol
pup    12     PUP    # PARC universal packet protocol
udp    17     UDP    # user datagram protocol</PRE
></BLOCKQUOTE
><p class="para">The listing shown above is the contents of the
<em class="emphasis">/etc/protocols</EM
> file from an actual workstation.
This list of numbers is by no means complete. If you refer to the
Protocol Numbers section of the<em class="emphasis"> Assigned Numbers</EM
>
<span class="acronym">RFC</SPAN
> (which itself gets a new <span class="acronym">RFC</SPAN
>
number every time it is updated; that's why we don't give you the
<span class="acronym">RFC</SPAN
> number for it here), you'll see many more
protocol numbers. However, a system only needs to include the numbers
of the protocols it actually uses. Even the list shown above is
more than this specific workstation needed, but the additional entries
do no harm.</P
><p class="para">What exactly does this table mean? When a datagram arrives and its
destination address matches the local <span class="acronym">IP</SPAN
> address,
the <span class="acronym">IP</SPAN
> layer knows the datagram has to be
delivered to one of the transport protocols above it. To decide which
protocol should receive the datagram, <span class="acronym">IP</SPAN
> looks at
the datagram's protocol number. Using this table you can see that, if
the datagram's protocol number is 6, <span class="acronym">IP</SPAN
> delivers
the datagram to <span class="acronym">TCP</SPAN
>. If the protocol number is 17,
<span class="acronym">IP</SPAN
> delivers the datagram to <span class="acronym">UDP</SPAN
>.
<span class="acronym">TCP</SPAN
> and <span class="acronym">UDP</SPAN
> are the two
transport layer services we are concerned with, but all of the
protocols listed in the table use <span class="acronym">IP</SPAN
> datagram
delivery service directly. Some, such as <span class="acronym">ICMP</SPAN
> and
<span class="acronym">GGP</SPAN
>, have already been mentioned. You don't need to
be concerned with these minor protocols, but <span class="acronym">IGMP</SPAN
>
is an extension to <span class="acronym">IP</SPAN
> for multicasting explained in
<span class="acronym">RFC</SPAN
> 988, and <span class="acronym">PUP</SPAN
> is a packet
protocol similar to <span class="acronym">UDP</SPAN
>.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="FIRE-C-S2-11">C.12.2 Port Numbers</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-24528"></A
><a class="indexterm" name="AUTOID-24530"></A
>After <span class="acronym">IP</SPAN
> passes incoming data to the transport
protocol (<span class="acronym">TCP</SPAN
> or <span class="acronym">UDP</SPAN
>), the
transport protocol passes the data to the correct application process.
Application processes (also called network services are identified by
port numbers, which are 16-bit values. The <em class="emphasis">source port
number</EM
>, which identifies the process that sent the data,
and the <em class="emphasis">destination port number</EM
>, which identifies
the process that is to receive the data, are contained in the first
header word of each <span class="acronym">TCP</SPAN
> segment and
<span class="acronym">UDP</SPAN
> packet.</P
><p class="para">On <span class="acronym">UNIX</SPAN
> systems, port numbers are defined in the
<em class="emphasis">/etc/services </EM
>file. There are many more network
applications than there are transport layer protocols, as the size of
the table shows. Port numbers below 256 are reserved for well-known
services (like <span class="acronym">FTP</SPAN
> and Telnet) and are defined in
the <em class="emphasis">Assigned Numbers </EM
> <span class="acronym">RFC</SPAN
>.
Ports numbered from 256 to 1024 are used for
<span class="acronym">UNIX</SPAN
>-specific services, which are services like
<em class="emphasis">rlogin</EM
>, that were originally developed for
<span class="acronym">UNIX</SPAN
> systems. However, most of them are no longer
<span class="acronym">UNIX</SPAN
>-specific.</P
><p class="para">Port numbers are not unique between transport layer protocols; the
numbers are only unique within a specific transport protocol. In other
words, <span class="acronym">TCP</SPAN
> and <span class="acronym">UDP</SPAN
> can, and do,
both assign the same port numbers. It is the combination of protocol
and port numbers that uniquely identifies the specific process the
data should be delivered to.</P
><p class="para">A partial <em class="emphasis">/etc/services</EM
> file is shown below. The
format of this file is very similar to the
<em class="emphasis">/etc/protocols</EM
> file. Each single-line entry
starts with the official name of the service, separated by white space
from the port number/protocol pairing associated with that
service. The port numbers are paired with transport protocol names,
because different transport protocols may use the same port number. An
optional list of aliases for the official service name may be provided
after the port number/protocol pair.</P
><blockquote class="screen"><pre class="screen">peanut% cat /etc/services
#
# @(#)services 1.12 88/02/07 SMI
#
# Network services, Internet style
#
echo            7/udp
echo            7/tcp
ftp-data        20/tcp
ftp             21/tcp
telnet          23/tcp
smtp            25/tcp          mail
time            37/tcp          timserver
time            37/udp          timserver
domain          53/udp
domain          53/tcp
#
# Host specific functions
#
finger          79/tcp
nntp            119/tcp         usenet    # Network News Transfer
ntp             123/tcp                   # Network Time Protocol
#
# UNIX specific services
#
exec            512/tcp
login           513/tcp
shell           514/tcp         cmd       # no passwords used
biff            512/udp         comsat
who             513/udp         whod
syslog          514/udp
talk            517/udp
route           520/udp         router routed</PRE
></BLOCKQUOTE
><p class="para">This table, combined with the<em class="emphasis">/etc/protocols</EM
>
table, provides all of the information necessary to deliver data to
the correct application. A datagram arrives at its destination based
on the destination address in the fifth word of the datagram
header. <span class="acronym">IP</SPAN
> uses the protocol number in the third
word of the datagram header, to deliver the data from the datagram, to
the proper transport layer protocol. The first word of the data
delivered to the transport protocol contains the destination port
number that tells the transport protocol to pass the data up to a
specific application. <a class="xref" href="#FIRE-C-FIG-17" title="Protocol and port numbers">Figure 13.21</A
> shows this
delivery process.</P
><h4 class="figure"><a class="title" name="FIRE-C-FIG-17">Figure 13.21: Protocol and port numbers</A
></H4
><img class="graphic" src="figs/firec17.gif" alt="Figure 13.21"></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="FIRE-C-S2-12">C.12.3 Sockets</A
></H3
><p class="para"><a class="indexterm" name="CSOCK"></A
><a class="indexterm" name="CPORTSWK"></A
><a class="indexterm" name="CWKP"></A
><em class="emphasis">Well-known ports</EM
> are standardized port numbers
that enable remote computers to know which port to connect to for a
particular network service. This simplifies the connection process
because both the sender and receiver know in advance that data bound
for a specific process will use a specific port. For example, all
systems that offer Telnet, offer it on port 23.</P
><p class="para">There is a second type of port number called a <em class="emphasis">dynamically
allocated port</EM
>. As the name implies, dynamically allocated
ports are not preassigned. They are assigned to processes when
needed. The system ensures that it does not assign the same port
number to two processes, and that the numbers assigned are above the
range of standard port numbers.</P
><p class="para">Dynamically assigned ports provide the flexibility needed to support
multiple users. If a Telnet user is assigned port number 23 for both
the source and destination ports, what port numbers are assigned to
the second concurrent Telnet user? To uniquely identify every
connection, the source port is assigned a dynamically allocated port
number, and the well-known port number is used for the destination
port.</P
><p class="para">In the Telnet example, the first user is given a random source port
number and a destination port number of 23 (Telnet). The second user
is given a different random source port number and the same
destination port. It is the pair of port numbers, source and
destination, that uniquely identifies each network connection. The
destination host knows the source port, because it is provided in both
the <span class="acronym">TCP</SPAN
> segment header and the
<span class="acronym">UDP</SPAN
> packet header. Both hosts know the destination
port because it is a well-known port.</P
><p class="para"><a class="xref" href="#FIRE-C-FIG-18" title="Passing port numbers">Figure 13.22</A
> shows the exchange of port numbers
during the <span class="acronym">TCP</SPAN
> handshake. The source host randomly
generates a source port, in this example 3044. It sends out a segment
with a source port of 3044 and a destination port of 23. The
destination host receives the segment, and responds back using 23 as
its source port and 3044 as its destination port.</P
><h4 class="figure"><a class="title" name="FIRE-C-FIG-18">Figure 13.22: Passing port numbers</A
></H4
><img class="graphic" src="figs/firec18.gif" alt="Figure 13.22"><p class="para">The combination of an <span class="acronym">IP</SPAN
> address and a port number
is called a <em class="emphasis">socket.</EM
> A socket uniquely identifies
a single network process within the entire Internet. Sometimes the
terms &quot;socket&quot; and &quot;port number&quot; are used interchangeably. In fact,
well-known services are frequently referred to as &quot;well-known
sockets.&quot; In the context of this discussion, a &quot;socket&quot; is the
combination of an <span class="acronym">IP</SPAN
> address and a port number. A
pair of sockets, one socket for the receiving host and one for the
sending host, define the connection for connection-oriented protocols
such as <span class="acronym">TCP</SPAN
>.</P
><p class="para">Let's build on the example of dynamically assigned ports and
well-known ports. Assume a user on host 128.66.12.2 uses Telnet to
connect to host 192.178.16.2. Host 128.66.12.2 is the source host. The
user is dynamically assigned a unique port number&nbsp;- 3382. The
connection is made to the Telnet service on the remote host which is,
according to the standard, assigned well-known port 23. The socket for
the source side of the connection is 128.66.12.2.3382
(<span class="acronym">IP</SPAN
> address 128.66.12.2 plus port number 3382). For
the destination side of the connection, the socket is 192.178.16.2.23
(address 192.178.16.2 plus port 23). The port of the destination
socket is known by both systems because it is a well-known port. The
port of the source socket is known, because the source host informed
the destination host of the source socket when the connection request
was made. The socket pair is therefore known by both the source and
destination computers. The combination of the two sockets uniquely
identifies this connection; no other connection in the Internet has
this socket pair.</P
><p class="para"><a class="xref" href="#FIRE-C-FIG-19" title="Clients on multiple hosts connecting to the same port on a server">Figure 13.23</A
> shows 
how clients on multiple machines can all connect to the same port on a
single server. The server can tell the difference between the
connections because they each involve different remote IP addresses.
Even if the connections are all coming from a single remote machine,
as shown in <a class="xref" href="#FIRE-C-FIG-20" title="Multiple clients on a single host connecting to the same port on a server">Figure 13.24</A
>, the server can still tell
them apart because each connection uses a different port number on the
remote machine. </P
><h4 class="figure"><a class="title" name="FIRE-C-FIG-19">Figure 13.23: Clients on multiple hosts connecting to the same port on a
server</A
></H4
><img class="graphic" src="figs/firec19.gif" alt="Figure 13.23"><h4 class="figure"><a class="title" name="FIRE-C-FIG-20">Figure 13.24: Multiple clients on a single host connecting to the same port
on a server</A
></H4
><img class="graphic" src="figs/firec20.gif" alt="Figure 13.24"></DIV
><a class="indexterm" name="AUTOID-24601"></A
><a class="indexterm" name="AUTOID-24602"></A
><a class="indexterm" name="AUTOID-24603"></A
><a class="indexterm" name="AUTOID-24604"></A
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="appc_11.htm" title="C.11 The Routing Table"><img src="../gifs/txtpreva.gif" alt="Previous: C.11 The Routing Table" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Building Internet Firewalls"><img src="../gifs/txthome.gif" alt="Building Internet Firewalls" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">&nbsp;</TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">C.11 The Routing Table</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_a.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">&nbsp;</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.htm" title="The Networking CD Bookshelf">Library Home</A
> | <a href="../dnsbind/index.htm" title="DNS &amp; BIND">DNS &amp; BIND</A
> | <a href="../tcpip/index.htm" title="TCP/IP Network Administration">TCP/IP</A
> | <a href="../sendmail/index.htm" title="sendmail">sendmail</A
> | <a href="../smdref/index.htm" title="sendmail Desktop Reference">sendmail Reference</A
> | <a href="index.htm" title="Building Internet Firewalls">Firewalls</A
> | <a href="../puis/index.htm" title="Practical UNIX &amp; Internet Security">Practical Security</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
