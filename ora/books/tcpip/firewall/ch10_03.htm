<html><head>
<title>[Chapter 10] 10.3 Authentication Mechanisms</TITLE>
<meta name="DC.title" content="Building Internet Firewalls"><meta name="DC.creator" content="D. Brent Chapman &amp; Elizabeth D. Zwicky"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-02-04T00:28:42Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-124-0" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch10_01.htm" title="10. Authentication and Inbound Services"><link rel="prev" href="ch10_02.htm#FIRE-10-S2-4" title="10.2 What Is Authentication?"><link rel="next" href="ch10_04.htm#FIRE-10-S2-10" title="10.4 Complete Authentication Systems"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Building Internet Firewalls" usemap="#srchmap" border="0"></H1
><map name="srcindex.htmlhmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Building Internet Firewalls"><area shape="RECT" coords="467,0,514,18" href="../search/fsrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch10_02.htm#FIRE-10-S2-4" title="10.2 What Is Authentication?"><img src="../gifs/txtpreva.gif" alt="Previous: 10.2 What Is Authentication?" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 10<br>Authentication and Inbound
Services</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch10_04.htm#FIRE-10-S2-10" title="10.4 Complete Authentication Systems"><img src="../gifs/txtnexta.gif" alt="Next: 10.4 Complete Authentication Systems" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="FIRE-10-S1-3">10.3 Authentication Mechanisms</A
></H2
><p class="para">In order to use any of the methods of authentication we've outlined
above, you need hardware or software to implement them. This section
discusses some of the commonly available hardware and software
authentication mechanisms that are at the heart of authentication
systems (in particular, it discusses those supported by the
<span class="acronym">TIS FWTK</SPAN
>, which is the most widely available
system). The most popular of the full-blown systems are discussed in
&quot;Complete Authentication Systems&quot; later in this chapter.</P
><div class="sect2"><h3 class="sect2"><a class="title" name="FIRE-10-S2-7">10.3.1 One-Time Passwords</A
></H3
><p class="para"><a class="indexterm" name="CH10PASSONE"></A
><a class="indexterm" name="CH10ONE"></A
>There are two ways a one-time password system may work:

<ul class="itemizedlist"><li class="listitem"><p class="para">The list can be generated randomly, and a copy kept by the
user and the system.</P
></LI
><li class="listitem"><p class="para">The list (or, more likely, a specific entry from the list) can be
generated on demand by the user and validated by the system. </P
></LI
></UL
></P
><p class="para">The problem with keeping a list on the system is that if the system is
compromised, so is the list, and the list could then be used for future
access. This is as bad as having someone snoop on a reusable password
while you use it.</P
><p class="para"><a class="indexterm" name="CH10TISFWTKSKEY"></A
><a class="indexterm" name="CH10SKEY"></A
>The <span class="acronym">TIS FWTK</SPAN
> supports an elegant, one-time
password solution called S/Key, originally designed by
Leslie Lamport and developed by Bellcore, which addresses this
problem. While it allows a system to reliably authenticate a user,
there is nothing on the system that compromises the user's password
if the system itself is compromised. The system has the ability to
validate a user's current response, but does not have the ability to
predict what that user's <em class="emphasis">next</EM
> response will be.</P
><p class="para">S/Key works by iteratively applying a cryptographically secure hash
algorithm, starting with some initial seed value. A cryptographically
secure hash algorithm is one that takes an arbitrary-sized input and
produces a much smaller output (something like a checksum) that has two
special properties:

<ul class="itemizedlist"><li class="listitem"><p class="para">The input cannot be regenerated from the output; thus, it's not
simply a compression or encryption algorithm.</P
></LI
><li class="listitem"><p class="para">The probability of two different inputs (particularly two different
inputs of the same size) producing the same output is vanishingly small.</P
></LI
></UL
></P
><p class="para"><a class="indexterm" name="AUTOID-20424"></A
>S/Key uses such an algorithm, known as <span class="acronym">MD</SPAN
>4.[2]

S/Key works by starting with a seed (which is either provided by the
user or generated randomly), and applying <span class="acronym">MD</SPAN
>4
iteratively to get a sequence of keys. It applies
<span class="acronym">MD</SPAN
>4 to the seed to get the first key, applies
<span class="acronym">MD</SPAN
>4 to the first key to get the second key, applies
<span class="acronym">MD</SPAN
>4 to the second key to get the third key, and so
on. In order to validate a user, the system has to know some key (call
it key number <em class="emphasis">n</EM
>) in the sequence. The system
prompts the user for the previous key (key <em class="emphasis">n-</EM
>1),
applies <span class="acronym">MD</SPAN
>4 to the user's answer (supposedly
key <em class="emphasis">n</EM
>-1), and checks to see if the result is the
key <em class="emphasis">n</EM
> that it knows. If the result is the key
<em class="emphasis">n</EM
>, the user must have supplied the correct key
<em class="emphasis">n</EM
>-1.</P
><blockquote class="footnote"><p class="para">[2] <span class="acronym">MD</SPAN
>4 stands for Message Digest function #4 and was
developed by Ron Rivest, the codeveloper of the
<span class="acronym">RSA</SPAN
> algorithm.</P
></BLOCKQUOTE
><p class="para">S/Key encodes each key into a series of short words, so they are
easier for a user to read and type, rather than simply generating a
random-looking jumble of characters. <a class="xref" href="#FIRE-10-FIG-1" title="How S/Key works">Figure 10.1</A
>
shows how S/Key works.</P
><h4 class="figure"><a class="title" name="FIRE-10-FIG-1">Figure 10.1: How S/Key works</A
></H4
><img class="graphic" src="figs/fire1001.gif" alt="Figure 10.1"><p class="para">Because <span class="acronym">MD</SPAN
>4 is nonreversible (you can't determine
the input given the output), the system can't easily figure out what
key <em class="emphasis">n</EM
>-1 is, even though it knows key
<em class="emphasis">n</EM
>. All the server can do is to verify that key
<em class="emphasis">n</EM
>-1 (when presented by the user) is the key that
generates key <em class="emphasis">n</EM
>. This means that even if an
attacker can somehow obtain key <em class="emphasis">n</EM
> (for example,
by snooping on a user's login session), he won't be able to easily
figure out the next key (key <em class="emphasis">n-</EM
>1).</P
><p class="para">S/Key isn't absolutely invulnerable to attack. Several attacks are
possible:</P
><dl class="variablelist"><dt class="term"><em class="emphasis">Brute force attacks</EM
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-20462"></A
>Attackers could try a whole series of possibilities for key
<em class="emphasis">n</EM
>-1 until they found one that
<span class="acronym">MD</SPAN
>4 translated to key <em class="emphasis">n</EM
>.
However, this type of attack is very unlikely to succeed. Because of
the size of the key space (the number of possible keys) and the
computation requirements of the <span class="acronym">MD</SPAN
>4 algorithm, a
brute force approach of this kind is considered to be computationally
infeasible for all but the most serious and well-financed
attackers. (It would probably take a significant amount of
supercomputer time before they found the right key.)</P
></DD
><dt class="term"><em class="emphasis">Dictionary attacks</EM
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-20474"></A
>If the user provides the initial seed (rather than having the initial
seed be generated randomly), dictionary attacks are
possible. Attackers could guess at the seed in the same way that they
might guess at reusable passwords; they'd typically try things like
words from the dictionary, names, places, etc. To these words, they
would apply the <span class="acronym">MD</SPAN
>4 algorithm an appropriate number
of times to see if it generates a key they've seen used.</P
></DD
><dt class="term"><em class="emphasis">Modified sniffing attacks </EM
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-20482"></A
>An attacker can run a packet sniffer and collect the beginning of an
S/Key password (all but the last few characters), and then try all the
possible combinations for the last characters, before the user
finishes. This relies on extremely delicate timing, but in Telnet
connections, user input is frequently set keystroke by keystroke as it
is generated. This creates a lag which is significant for a
computer. An attacker probably won't be able to try all possible
combinations, but may be able to try all possible combinations that
make English words.</P
></DD
></DL
><p class="para">There are two ways for users to use S/Key: either keys can be
generated on demand, or the user can be supplied with a printed list of
keys. </P
><p class="para">To generate S/Key keys on demand, the user needs a computer and a
program to generate them. That user will have to provide the seed and
the key number desired, and the program will iterate the MD4 algorithm
that many times to generate the key desired. The seed will have to be
either entered by the user or read from a file on the computer. If the
seed is entered by the user, the user would probably pick a seed the
same way he'd pick a password. Because users are notoriously poor
at picking passwords, this makes the system subject to dictionary
attacks, as we've described above. If the seed is read from a file, it
can be more random (and therefore less guessable) than something the
user would provide, but you have to worry about the risks&nbsp;- probably
low&nbsp;- of the computer or file being stolen.</P
><p class="para">The alternative way to use S/Key is to have the system generate and
print a list of keys, enough keys to last the user for a reasonable
period of time. In this case, the system randomly generates the initial
seed, thus protecting itself against dictionary attacks. The printout
should simply be a numbered list of keys, with no further identification
or explanation. It is possible that the list could be stolen from a
user, but you have to decide which you think is more likely: that the
list will be stolen (and that the thief will know what it is and what to
do with it), or that the user's session will be snooped on. If your
users are generating keys on demand, they're probably using a seed
that's subject to dictionary attack (otherwise, they would find it too
hard to remember the seed); if one of their sessions is snooped on,
their keys can be attacked. </P
><p class="para">We think that using a seed that's subject to dictionary attack is a
bigger risk than having a list of keys stolen, so we prefer using
printed lists of keys to using keys generated on demand.<a class="indexterm" name="AUTOID-20488"></A
><a class="indexterm" name="AUTOID-20489"></A
><a class="indexterm" name="AUTOID-20490"></A
><a class="indexterm" name="AUTOID-20491"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="FIRE-10-S2-8">10.3.2 Time-based Passwords</A
></H3
><p class="para"><a class="indexterm" name="CH10PASSTB"></A
><a class="indexterm" name="CH10TBPASS"></A
><a class="indexterm" name="CH10SDCARDS"></A
>Time-based password systems, such as those implemented by Security
Dynamics products, are a special type of one-time password. In such a
system, the password varies every minute or so, by an algorithm known to
the system and the user's authentication device. This device is
typically a small card, which Security Dynamics calls SecurID, with a
liquid crystal display readout for the current password. One possible
algorithm would be to encrypt the current time with a key known by the
system and programmed into the card. With such an algorithm, the system
would have to make allowances for clock drift (i.e., the clock in the
card running at a slightly different rate from that of the system
clock).</P
><p class="para">The Security Dynamics cards are supported by a wide variety of
commercial products. The <span class="acronym">TIS FWTK</SPAN
> doesn't support
the cards directly, but it includes hooks to libraries that you can
license separately (at a significant cost) from Security Dynamics.</P
><p class="para">The Security Dynamics cards are not without their critics. 
Various security professionals have expressed concern over Security 
Dynamics' decision to use a secret, proprietary encryption algorithm, 
rather than an algorithm, such as <span class="acronym">DES</SPAN
> 
or <span class="acronym">IDEA</SPAN
>, that has
been subjected to public scrutiny and analysis. Other people don't like 
the fact that some versions of the
Security Dynamics cards combine &quot;something you have&quot; with &quot;something you
know&quot; by having the user send a traditional password over the Internet
along with the key displayed by the card; if an attacker monitors a
connection made using the card, and then steals the card itself, he
now
has everything he needs to break in. Finally, since the cards don't 
have replaceable batteries, the entire card has to be replaced when the
batteries die (typically after about three years).</P
><p class="para">On the plus side, the keypad-less Security Dynamics cards are
user-friendly; it's hard to use something incorrectly when it has
exactly one button to press. If the button is accidentally pressed,
nothing horrible happens; it will wear the battery down faster, but it
won't make it impossible for you to authenticate. Also, because the
cards turn themselves off as soon as the displayed key
times out, pressing the button accidentally doesn't wear the
battery down that fast.</P
><p class="para">By contrast, cards that require <span class="acronym">PIN</SPAN
>s are more
complex to use and usually disable themselves if the wrong buttons are
pressed too often. This means they can't be kept loose in a
purse or backpack without extra protection. Keypad-less Security
Dynamics cards are perfectly happy rattling around in a purse or
backpack. The three-year battery life is also arguably about the
expected lifetime of an authentication mechanism anyway; at the end of
three years, you may want to change the entire system, not just the
batteries.</P
><p class="para">Programming a Security Dynamics card, e.g., to set it for the system
with which it needs to synchronize, generally requires special
hardware.<a class="indexterm" name="AUTOID-20511"></A
><a class="indexterm" name="AUTOID-20512"></A
><a class="indexterm" name="AUTOID-20513"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="FIRE-10-S2-9">10.3.3 Challenge-Response Schemes</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-20517"></A
><a class="indexterm" name="AUTOID-20519"></A
><a class="indexterm" name="AUTOID-20522"></A
>Challenge-response systems are another way to support nonreusable
passwords.</P
><p class="para">The <span class="acronym">TIS FWTK</SPAN
> supports the
<span class="acronym">SNK</SPAN
>-004 card from Digital Pathways for
challenge-response. When the user attempts to log in, the system
generates a random challenge. The user unlocks the
<span class="acronym">SNK</SPAN
>-004 card with a 4-digit <span class="acronym">PIN</SPAN
>,
and then keys in the challenge. The card encrypts the challenge, using
the <span class="acronym">DES</SPAN
> algorithm and a key programmed into the
memory of the card, and displays the encrypted result. The user sends
the result back to the system as his response to the challenge.</P
><p class="para">In the meantime, the system has encrypted the same challenge with the
key that is supposed to be in this user's card. If the system's result
is the same as the user's response, then the user has successfully
authenticated himself. All that has passed over the wire (and thus all
that could be snooped on) is the random challenge and the encrypted
result: not the user's <span class="acronym">PIN</SPAN
> (used to unlock the
<span class="acronym">SNK</SPAN
>-004 card) or the key (programmed into the
memory of the <span class="acronym">SNK</SPAN
>-004 card, and known by the
system).</P
><p class="para"><a class="xref" href="#FIRE-10-FIG-2" title="How the SNK-004 card works">Figure 10.2</A
> shows how this challenge-response
works.</P
><h4 class="figure"><a class="title" name="FIRE-10-FIG-2">Figure 10.2: How the <span class="acronym">SNK</SPAN
>-004 card works</A
></H4
><img class="graphic" src="figs/fire1002.gif" alt="Figure 10.2"><p class="para">The <span class="acronym">TIS FWTK</SPAN
> includes, for free, almost everything
you need to support the <span class="acronym">SNK</SPAN
>-004 cards; the
only exception is a <span class="acronym">DES</SPAN
> library, several of which
are available for free on the Internet.</P
><p class="para">Digital Pathways also sells programs for Macintosh,
<span class="acronym">MS-DOS</SPAN
>, and Microsoft Windows that emulate the
<span class="acronym">SNK</SPAN
>-004 card in software. Users who carry portable
computers they log in from (or who always connect from the same
desktop computer) will probably find it more convenient to use that
software than to carry the separate <span class="acronym">SNK</SPAN
>-004 card.</P
><p class="para"><span class="acronym">SNK</SPAN
>-004 cards can be configured to disable
themselves if the wrong <span class="acronym">PIN</SPAN
> is entered more than
five consecutive times. Unfortunately, accidentally turning on the card
counts as a &quot;wrong <span class="acronym">PIN</SPAN
>&quot; attempt, so the
card can end up disabling itself if it's floating around loose in your
luggage and something keeps pressing the &quot;On&quot; button; many
people carry them in hard cases to prevent accidental activations.
(Digital Pathways doesn't provide a hard case, but an 8mm tape case
makes a good improvised one.) Digital Pathways reportedly has a new
card to replace the <span class="acronym">SNK</SPAN
>-004 that addresses this
problem and may have other new features.</P
><p class="para">The <span class="acronym">SNK</SPAN
>-004 can be programmed from its own keyboard
with no special hardware, but anybody who doesn't do it every day will
need to step through the procedure from the manual. (Warning: The
<span class="acronym">SNK</SPAN
>-004 programming procedure makes
<span class="acronym">VCR</SPAN
> programming look intuitive by contrast!)
Programming hardware is available, and is probably a useful investment
if you need to initialize more than a handful of the units.</P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch10_02.htm#FIRE-10-S2-4" title="10.2 What Is Authentication?"><img src="../gifs/txtpreva.gif" alt="Previous: 10.2 What Is Authentication?" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Building Internet Firewalls"><img src="../gifs/txthome.gif" alt="Building Internet Firewalls" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch10_04.htm#FIRE-10-S2-10" title="10.4 Complete Authentication Systems"><img src="../gifs/txtnexta.gif" alt="Next: 10.4 Complete Authentication Systems" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">10.2 What Is Authentication?</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_a.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">10.4 Complete Authentication Systems</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.htm" title="The Networking CD Bookshelf">Library Home</A
> | <a href="../dnsbind/index.htm" title="DNS &amp; BIND">DNS &amp; BIND</A
> | <a href="../tcpip/index.htm" title="TCP/IP Network Administration">TCP/IP</A
> | <a href="../sendmail/index.htm" title="sendmail">sendmail</A
> | <a href="../smdref/index.htm" title="sendmail Desktop Reference">sendmail Reference</A
> | <a href="index.htm" title="Building Internet Firewalls">Firewalls</A
> | <a href="../puis/index.htm" title="Practical UNIX &amp; Internet Security">Practical Security</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
