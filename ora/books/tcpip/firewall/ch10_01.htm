<html><head>
<title>[Chapter 10] Authentication and Inbound Services</TITLE>
<meta name="DC.title" content="Building Internet Firewalls"><meta name="DC.creator" content="D. Brent Chapman &amp; Elizabeth D. Zwicky"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-02-04T00:28:31Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-124-0" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="part02.htm" title="II. Building Firewalls"><link rel="prev" href="ch09_02.htm#FIRE-09-S3-26" title="9.2 Screened Host Architecture"><link rel="next" href="ch10_02.htm#FIRE-10-S2-4" title="10.2 What Is Authentication?"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Building Internet Firewalls" usemap="#srchmap" border="0"></H1
><index.htmlmap name="srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Building Internet Firewalls"><area shape="RECT" coords="467,0,514,18" href="../search/fsrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch09_02.htm#FIRE-09-S3-26" title="9.2 Screened Host Architecture"><img src="../gifs/txtpreva.gif" alt="Previous: 9.2 Screened Host Architecture" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 10</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch10_02.htm#FIRE-10-S2-4" title="10.2 What Is Authentication?"><img src="../gifs/txtnexta.gif" alt="Next: 10.2 What Is Authentication?" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="CHAPTER"><h1 class="chapter"><a class="title" name="FIRE-10-CHP">10. Authentication and Inbound
Services</A
></H1
><div class="htmltoc"><p><b>Contents:</B
><br><a class="SECT1" href="#FIRE-10-S1-1" title="10.1 Risks of Using Inbound Services">Risks of Using Inbound Services</A
><br><a class="SECT1" href="ch10_02.htm#FIRE-10-S2-4" title="10.2 What Is Authentication?">What Is Authentication?</A
><br><a class="SECT1" href="ch10_03.htm#FIRE-10-S2-7" title="10.3 Authentication Mechanisms">Authentication Mechanisms</A
><br><a class="SECT1" href="ch10_04.htm#FIRE-10-S2-10" title="10.4 Complete Authentication Systems">Complete Authentication
Systems</A
><br><a class="SECT1" href="ch10_05.htm#FIRE-10-S2-16" title="10.5 Network-Level Encryption">Network-Level Encryption</A
><br><a class="SECT1" href="ch10_06.htm" title="10.6 Terminal Servers and Modem Pools">Terminal Servers and Modem Pools</A
></P
><p></P
></DIV
><p class="para"><a class="indexterm" name="CH10INSERV"></A
><a class="indexterm" name="AUTOID-20172"></A
><a class="indexterm" name="CH10AUTH"></A
>This book concentrates primarily on how to safely let your users go
<em class="emphasis">out to</EM
> the Internet, but there's also another
side to Internet security: how do you safely allow users to come
<em class="emphasis">in</EM
> <em class="emphasis">from</EM
> the Internet?&#13;</P
><p class="para">For anonymous services, such as accessing an anonymous
<span class="acronym">FTP</SPAN
> server, <span class="acronym">HTTP</SPAN
> server, or
Gopher server that you provide, the solution is clear: you protect the
servers as best you can to allow outsiders to access the information
you want to provide and to prevent them from accessing anything
else. In these anonymous services, all the information you release is
intended to be readable by anybody. (See the discussion of these
services in <a class="xref" href="ch08_01.htm" title="Configuring Internet Services">Chapter 8, <cite class="chapter">Configuring Internet Services</CITE
></A
>.)</P
><p class="para">For nonanonymous services, however, the situation is much more complex.
For nonanonymous services (or &quot;authenticated&quot; services, as
they're commonly called), the user who is attempting to access the
service first needs to prove his identity to your server so that your
server can decide whether the user is authorized to do what he is
requesting. Examples of authenticated services you might want to
provide include:

<ul class="itemizedlist"><li class="listitem"><p class="para"> 
Allowing your users to log in (via Telnet) from the
Internet, e.g., while they're away at conferences or visiting
other sites.</P
></LI
><li class="listitem"><p class="para">Allowing researchers and collaborators from affiliated sites to log in
to your systems.</P
></LI
><li class="listitem"><p class="para">Allowing selected customers or clients to log in to your systems.</P
></LI
></UL
></P
><p class="para">Authentication is basically verified, proven identification. How do
 users prove to a system that they're really who they say they are?
Don't confuse authentication (figuring out who somebody is) and
authorization (figuring out what they're allowed to
do). Authentication is a prerequisite for authorization (unless
everybody is authorized to do something, such as anonymous
<span class="acronym">FTP</SPAN
>), but they are separate and distinct concepts.</P
><p class="para">This chapter focuses on inbound services and how authentication can
reduce the risks associated with using these services. It also touches
on a few additional encryption and authentication issues that apply to
both inbound and outbound services, such as network-level encryption
and where to place modem pools.</P
><div class="sidebar"><h4 class="sidebar"><a class="title" name="AUTOID-20195">Cryptography</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-20198"></A
><a class="indexterm" name="AUTOID-20200"></A
>What are the basic differences between private and public key
cryptography?</P
><p class="para"><a class="indexterm" name="AUTOID-20204"></A
>
<em class="emphasis">Private key algorithms </EM
> include the Data
Encryption Standard (<span class="acronym">DES</SPAN
>) (used by Kerberos),
<span class="acronym">IDEA</SPAN
>, and the Skipjack algorithm that underlies the
Clipper Chip. With private key, a single key is shared by two parties
and must be kept secret by both of them (this is the private
key). The sender of a communication encrypts the message with this
secret key; the recipient must decrypt it with the same
key. To communicate with someone securely, you must tell
that person the cryptographic key you are using; you must
also keep anyone else from discovering or overhearing the key. This
process, called key distribution, is difficult and cumbersome to do
securely.</P
><p class="para"><a class="indexterm" name="AUTOID-20211"></A
><em class="emphasis">Public key algorithms</EM
> include
<span class="acronym">RSA</SPAN
>, and Diffie-Hellman. With public key systems, a
mathematical process generates two mathematically related keys for
each individual. A message encrypted with one key (the public key) can
be decrypted only with the other key (secret or private key). Public
keys can be known to anyone, but secret keys must be kept so. To
transmit a secret message, the sender encrypts his message with the
public key of the intended recipient. The recipient decrypts that
message with his own secret key; the only key that will decrypt the
message is the secret key associated with the public key used to
encrypt it. Public key cryptography also gives you the ability to
&quot;sign&quot; messages. If the sender signs a message with his
secret key, the recipient can validate the signature by applying the
sender's public key to the message; if the public key successfully
decrypts the message, it must have been signed with the corresponding
secret key.</P
><p class="para">Public key algorithms are slow, often thousands of times slower than
equivalently secure private key algorithms. For this reason, public
and private key algorithms are often used in conjunction with each
other. For example, the Pretty Good Privacy (<span class="acronym">PGP</SPAN
>)
encryption package works this way. To send an encrypted message to a
recipient, the sending <span class="acronym">PGP</SPAN
> program generates a
random &quot;session key.&quot; This session key is used with a
private key algorithm to encrypt the message to be sent (this is
fast). The session key itself is encrypted with a public key algorithm
(this is slow, but the session key is small, especially compared to
the whole message), using the recipient's public key, and is sent
along with the encrypted message. The recipient first uses the public
key algorithm and his secret key to decrypt the session key (this is
slow, but the session key is small), and then uses the session key and
private key algorithm to decrypt the whole message (this is fast). For
a detailed discussion of <span class="acronym">PGP</SPAN
>, see Simson
Garfinkel's book, <em class="emphasis"><span class="acronym">PGP</SPAN
>: Pretty Good
Privacy</EM
> (referenced in <a class="xref" href="appa_01.htm" title="Resources">Appendix A, <cite class="appendix">Resources</CITE
></A
>).</P
></DIV
><blockquote class="note"><p class="para"><strong>NOTE:</STRONG
> Although this chapter mentions aspects of cryptography&nbsp;- cryptography
is the basis for many of the authentication mechanisms described in
this book&nbsp;- we do not attempt to discuss cryptography itself here in
any depth. There are many excellent books on this broad and complex
topic, and we can't hope to do justice to the topic in a few pages
here, where our focus is practical, rather than theoretical. You will
be better served by referring to a book such as Bruce Schneier's
<em class="emphasis">Applied Cryptography</EM
> for a definitive
treatment. (See <a class="xref" href="appa_01.htm" title="Resources">Appendix A</A
> for information.)</P
></BLOCKQUOTE
><div class="sect1"><h2 class="sect1"><a class="title" name="FIRE-10-S1-1">10.1 Risks of Using Inbound Services</A
></H2
><p class="para">Inbound services pose a number of security risks. In this section, we
focus on Telnet as an example, but the same problems, principles, and
solutions apply to other authenticated services (such as nonanonymous
<span class="acronym">FTP</SPAN
>) as well.</P
><p class="para">There are three principal risks associated with allowing inbound
services:

<dl class="variablelist"><dt class="term"><em class="emphasis">Hijacking</EM
></DT
><dd class="listitem"><p class="para">Having someone steal a connection after the user has
authenticated himself or herself to your system.</P
></DD
><dt class="term"><em class="emphasis">Packet sniffing</EM
></DT
><dd class="listitem"><p class="para">Having someone read confidential data as it
passes across the network, without interfering with the connection
itself.</P
></DD
><dt class="term"><em class="emphasis">False authentication</EM
></DT
><dd class="listitem"><p class="para">Having someone who is not a valid user
convince your system he or she <em class="emphasis">is</EM
> a valid user.</P
></DD
></DL
></P
><div class="sect2"><h3 class="sect2"><a class="title" name="FIRE-10-S2-1">10.1.1 Hijacking</A
></H3
><p class="para"><a class="indexterm" name="CH10HI"></A
><a class="indexterm" name="CH10INCHI"></A
><a class="indexterm" name="CH10MACHHI"></A
><a class="indexterm" name="CH10REMHI"></A
><em class="emphasis">Hijacking</EM
> attacks allow an attacker to take over
an open terminal or login session from a user who has been
authenticated by the system. Hijacking attacks generally take place on
a remote computer, although it is sometimes possible to hijack a
connection from a computer on the route between the remote computer
and your local computer.</P
><p class="para">How can you protect yourself from hijacking attacks on the remote
computer? The only way is to allow connections only from remote
computers whose security you trust; ideally, these computers should be
at least as secure as your own. You can apply this kind of
restriction by using either packet filters or modified servers. Packet
filters are easier to apply to a collection of systems, but modified
servers on individual systems allow you more flexibility. For example,
a modified <span class="acronym">FTP</SPAN
> server might allow anonymous
<span class="acronym">FTP</SPAN
> from any host, but authenticated
<span class="acronym">FTP</SPAN
> only from specified hosts. You can't get this
kind of control from packet filtering. Connection control at the host
level is available from wrappers in the <span class="acronym">TIS FWTK</SPAN
> 
(the <em class="emphasis">netacl </EM
>program) or Wietse Venema's
<span class="acronym">TCP</SPAN
> Wrapper; these may be easier to configure than
packet filters, but provide the same level of discrimination&nbsp;- by host
only.</P
><p class="para">Hijacking by intermediate sites can be avoided using end-to-end
encryption. (See the discussion of network-level encryption later in
this chapter.) If you use end-to-end encryption, intermediate sites
won't be able to encrypt the data stream properly (because they don't
know the appropriate key), and therefore won't be able to hijack
sessions traversing them.</P
><p class="para">Hijacking is a fairly technical attack. The overall risk to an
organization from hijacking attacks is probably pretty small. Most
sites choose to accept this small risk and allow some accounts to
access systems from anywhere on the Internet. You may decide that
hijacking is an acceptable risk for your own organization,
particularly if you are able to minimize the number of accounts that
have full access and the time they spend logged in remotely. However,
you probably do not want to allow hundreds of people to log in from
anywhere on the Internet. Similarly, you do not want to allow users
to log in consistently from particular remote sites without taking
special precautions.<a class="indexterm" name="AUTOID-20272"></A
><a class="indexterm" name="AUTOID-20273"></A
><a class="indexterm" name="AUTOID-20274"></A
><a class="indexterm" name="AUTOID-20275"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="FIRE-10-S2-2">10.1.2 Packet Sniffing</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-20279"></A
><a class="indexterm" name="AUTOID-20282"></A
>Attackers may not need to hijack a connection in order to get the
information you want to keep secret. By simply watching packets
pass&nbsp;- anywhere between the remote site and your site&nbsp;- they can see any
information that is being transferred. <em class="emphasis">Packet
sniffing </EM
>programs automate this watching of packets.</P
><p class="para">Sniffers may go after passwords or data. There are different risks
associated with each type of attack. Protecting your passwords against
sniffing is easy: use one of the several mechanisms described later in
this chapter to use nonreusable passwords. With nonreusable
passwords, it doesn't matter if the password is captured by a sniffer;
it's of no use to them, because it cannot be reused.</P
><p class="para"><a class="indexterm" name="AUTOID-20287"></A
>Protecting your data against sniffers is more difficult. You could
encrypt the data at your site if you always knew in advance which data
to encrypt, and if you could rely on the remote site to have the
appropriate decryption programs. It isn't safe for a user to ask for
data to be encrypted while the user is logged in across the network;
the sniffer will see the commands issued by the user (perhaps even the
key used for encryption), and may be able to use that information to
decrypt the data. If the user doesn't provide a key directly, the
system has to somehow use a stored key, which might be compromised in
other ways (such as a break-in to the system doing the encryption).</P
><p class="para">Unfortunately, encryption in advance is not practical. It may
serve if you need to transfer files occasionally, but it isn't
going to provide any kind of meaningful connection. In order to preserve
data confidentiality for real interactive access, you'll need end-to-end
encryption. Most end-to-end encryption systems require advance
coordination between the two ends in order to set the system up. If you
have ongoing sensitive interactions with particular sites, however, it
may be worth the effort.</P
><p class="para">As we've described for hijacking, if only a small number of people from
a site are doing occasional work from random hosts over the Internet,
most organizations are willing to accept the relatively small risk
associated with the sniffing of data. However, you need to make sure
that nobody at your site purposefully accesses confidential information
across the Internet without taking precautions. Moreover, you certainly
do not want to set up situations in which confidential information
consistently crosses the Internet unencrypted. For example, you would
not want a human resources person to work from home on your unencrypted
personnel files across the Internet.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="FIRE-10-S2-3">10.1.3 False Authentication</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-20295"></A
><a class="indexterm" name="AUTOID-20298"></A
>The third main risk to inbound services is <em class="emphasis">false
authentication</EM
>: the subversion of the authentication that
you require of your users, so that an attacker can successfully
masquerade as one of your users.</P
><p class="para"><a class="indexterm" name="AUTOID-20302"></A
>In most cases, if you have a secret you want to pass across the network,
you can encrypt the secret and pass it that way. There is one
case in which the encryption solution does not work, and that is
the case in which information does not have to be understood to be used.
For instance, encrypting passwords will not work,
because an attacker who is using packet sniffing can simply intercept
and resend the encrypted password without having to decrypt it. (This is
called a <em class="emphasis">playback attack</EM
>, because the attacker
records an interaction and plays it back later.) Therefore,
dealing with authentication across the Internet requires something more
complex than encrypting passwords. What you need is an
authentication method where the data that passes across the network is
nonreusable, so an attacker can't capture it and play it back.</P
><p class="para">The next section describes authentication and how it works. As we
explain there, there are many types of authentication methods, some more
secure than others. </P
></DIV
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch09_02.htm#FIRE-09-S3-26" title="9.2 Screened Host Architecture"><img src="../gifs/txtpreva.gif" alt="Previous: 9.2 Screened Host Architecture" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Building Internet Firewalls"><img src="../gifs/txthome.gif" alt="Building Internet Firewalls" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch10_02.htm#FIRE-10-S2-4" title="10.2 What Is Authentication?"><img src="../gifs/txtnexta.gif" alt="Next: 10.2 What Is Authentication?" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">9.2 Screened Host Architecture</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_a.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">10.2 What Is Authentication?</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.htm" title="The Networking CD Bookshelf">Library Home</A
> | <a href="../dnsbind/index.htm" title="DNS &amp; BIND">DNS &amp; BIND</A
> | <a href="../tcpip/index.htm" title="TCP/IP Network Administration">TCP/IP</A
> | <a href="../sendmail/index.htm" title="sendmail">sendmail</A
> | <a href="../smdref/index.htm" title="sendmail Desktop Reference">sendmail Reference</A
> | <a href="index.htm" title="Building Internet Firewalls">Firewalls</A
> | <a href="../puis/index.htm" title="Practical UNIX &amp; Internet Security">Practical Security</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
