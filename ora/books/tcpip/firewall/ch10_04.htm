<html><head>
<title>[Chapter 10] 10.4 Complete Authentication Systems</TITLE>
<meta name="DC.title" content="Building Internet Firewalls"><meta name="DC.creator" content="D. Brent Chapman &amp; Elizabeth D. Zwicky"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-02-04T00:28:45Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-124-0" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch10_01.htm" title="10. Authentication and Inbound Services"><link rel="prev" href="ch10_03.htm#FIRE-10-S2-7" title="10.3 Authentication Mechanisms"><link rel="next" href="ch10_05.htm#FIRE-10-S2-16" title="10.5 Network-Level Encryption"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Building Internet Firewalls" usemap="#srchmap" border="0"></H1
><map namindex.htmle="srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Building Internet Firewalls"><area shape="RECT" coords="467,0,514,18" href="../search/fsrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch10_03.htm#FIRE-10-S2-7" title="10.3 Authentication Mechanisms"><img src="../gifs/txtpreva.gif" alt="Previous: 10.3 Authentication Mechanisms" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 10<br>Authentication and Inbound
Services</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch10_05.htm#FIRE-10-S2-16" title="10.5 Network-Level Encryption"><img src="../gifs/txtnexta.gif" alt="Next: 10.5 Network-Level Encryption" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="FIRE-10-S1-4">10.4 Complete Authentication
Systems</A
></H2
><p class="para"><a class="indexterm" name="CH10AUTHCOMP"></A
>There are two common freely available systems that allow you to avoid
sending reusable passwords over the Internet. These are Kerberos and
the authentication server portion of the <span class="acronym">TIS FWTK</SPAN
>.
The number of commercial authentication solutions is growing as well.</P
><div class="sect2"><h3 class="sect2"><a class="title" name="FIRE-10-S2-10">10.4.1 Kerberos</A
></H3
><p class="para"><a class="indexterm" name="CH10K"></A
>Kerberos was developed at <span class="acronym">MIT</SPAN
> by Project Athena
(the same folks who developed the X Window System). It is designed to
provide authentication and encryption services through modified
versions of standard clients and servers, e.g., Telnet clients
and servers.</P
><p class="para">Kerberos provides strong authentication in a distributed environment,
and it is widely available. Some vendors provide Kerberos support with
their operating systems; <span class="acronym">MIT</SPAN
> has freely available
implementations for many versions of <span class="acronym">UNIX</SPAN
>; and the
code is freely available if you wish it to port it to an operating
system that does not yet have an implementation.</P
><p class="para">Kerberos isn't an ideal solution, though. There are three major
problems with it: 

<ul class="itemizedlist"><li class="listitem"><p class="para"> Kerberos requires custom client and server
software. As with proxy systems, this limits your choice of client and
server software. If the software you want to use doesn't support
Kerberos, and if you can't modify it to support Kerberos (because the
source code isn't available, or because you simply don't have the time
or expertise required), you're out of luck, and you won't be able to
use it. Unlike proxy systems, Kerberos does not let you use custom
user procedures to make Kerberos work with arbitrary client/server
software. </P
></LI
><li class="listitem"><p class="para">Kerberos tends to be difficult to set up and manage. Unless your
operating-system vendor supports Kerberos (or you can find a
third-party vendor who supports it for your platform), you'll have to
obtain the Kerberos software and integrate it into your environment
yourself. This is a nontrivial task, typically much more difficult
than the integration work required for most other solutions outlined
in this book. Once Kerberos is set up, management of it provides
another ongoing challenge. Kerberos requires a dedicated, carefully
secured server, which is accessible to all clients.</P
></LI
><li class="listitem"><p class="para">Kerberos doesn't scale up well beyond a single administrative
domain (a single set of machines managed in common, which share user
names and passwords). Each Kerberos realm (the Kerberos term for a
single administrative domain) is independent. To do inter-realm
authentication, the Kerberos servers in the two realms essentially have
to trust each other, and have to share a key known only to each other. 
A separate key is required for each pair of realms that are going to do
inter-realm authentication; as the number of realms involved increases,
the number of keys required increases geometrically, to the point where
it quickly becomes unmanageable.</P
></LI
></UL
></P
><p class="para">Kerberos shows great promise for the future, particularly if more
sites adopt the Distributed Computing Environment
(<span class="acronym">DCE</SPAN
>), which uses Kerberos as the basis of its
security. It could very well become the de facto standard mechanism
for authentication on the Internet sometime in the next decade or
so. In order for that to happen, though, it will need wider support
from developers and vendors, and easier setup and
maintenance. Meanwhile, it will probably only be used within
individual sites.</P
><p class="para">Right now, most sites don't have Kerberos clients available, so even if
you install Kerberos versions of your servers, your users will not be
able to log in from arbitrary other sites, because it requires modified
software on both ends.<a class="indexterm" name="AUTOID-20584"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="FIRE-10-S2-11">10.4.2 <span class="acronym">TIS FWTK</SPAN
> 
Authentication Server</A
></H3
><p class="para"><a class="indexterm" name="CH10TISFWTKAUTH"></A
><a class="indexterm" name="CH10AUTHSERV"></A
>The authentication server in the <span class="acronym">TIS FWTK</SPAN
> is
another commonly used solution for authenticating users coming in from
the Internet. The server implements a variety of authentication
mechanisms, such as standard reusable passwords (not recommended),
S/Key, Security Dynamics Secur<span class="acronym">ID</SPAN
> cards, and Digital
Pathways <span class="acronym">SNK</SPAN
>-004 cards. In addition, the server is
modular and extensible, and is designed so that new authentication
mechanisms can easily be integrated.</P
><p class="para">Traditionally, programs wishing to authenticate a user (such as the
<em class="emphasis">login</EM
> program, or the <em class="emphasis">ftpd</EM
>
daemon) have had to know <em class="emphasis">how</EM
> to authenticate a
user; they have had to understand and implement whatever
authentication method or methods were to be used. In a
<span class="acronym">UNIX</SPAN
> system, this means that these programs have to
do all of the following to authenticate a user:

<ol class="orderedlist"><li class="listitem"><p class="para">Prompt the user for a login name.</P
></LI
><li class="listitem"><p class="para">Look up that login name and obtain its encrypted password.</P
></LI
><li class="listitem"><p class="para">Prompt the user for a password.</P
></LI
><li class="listitem"><p class="para">Use the user-provided password and the first two characters from
the encrypted password to encrypt a known string (eight bytes of nulls).</P
></LI
><li class="listitem"><p class="para">Check to see if the result of this encryption matches the
encrypted password for the user.</P
></LI
></OL
></P
><p class="para">If you want to add a second authentication mechanism (for example, the
S/Key mechanism, which we discussed earlier), you have to modify all
of these programs to understand this second mechanism as well as, or
instead of, the standard <span class="acronym">UNIX</SPAN
> password
mechanism. And if you later want to add a third authentication
mechanism (for example, support for the SecurID cards), you have to
modify the programs yet again; and so it would go for each additional
authentication mechanism. Each time you modify these programs, you're
making them bigger and more complex, and increasing the chances that
you've introduced some kind of bug that's going to result in a
security problem. (This is a serious risk because these are very
security-critical programs&nbsp;- they control access to your system.)</P
><p class="para">The <span class="acronym">TIS FWTK</SPAN
> authentication server takes a
different approach. With it, you modify all the authenticating
programs (e.g., <em class="emphasis">login</EM
>, <em class="emphasis">ftpd</EM
>)
once, to make them talk to the authentication server instead of doing
the authentication themselves. All of the details of the
authentication mechanism&nbsp;- e.g., what to prompt the user with, how to
validate the user's response, etc.&nbsp;- are then handled by the
authentication server. When you want to add or modify authentication
methods, you do so by changing the authentication server (which is
modular and designed to accommodate such changes), not by changing the
individual authenticating programs.</P
><p class="para">A single authentication server can handle any number of client
machines and programs, and any number of different authentication
methods; different users within the same server can use different
authentication methods. For example, some might use S/Key while some
might use the Digital Pathways <span class="acronym">SNK</SPAN
>-004 cards.</P
><p class="para">When a client program (such as <em class="emphasis">login</EM
>, or
<em class="emphasis">ftpd</EM
>) wishes to authenticate someone using the
<span class="acronym">TIS FWTK</SPAN
> authentication
server, it has to go through the following steps:

<ol class="orderedlist"><li class="listitem"><p class="para">Prompt the user for a login name.</P
></LI
><li class="listitem"><p class="para">Contact the authentication server and tell it who is trying to log
in.</P
></LI
><li class="listitem"><p class="para">Receive a response from the authentication server that tells it
what to prompt the user with.</P
></LI
><li class="listitem"><p class="para">Display the prompt specified by the authentication server.</P
></LI
><li class="listitem"><p class="para">Collect the user's response and send it to the authentication
server.</P
></LI
><li class="listitem"><p class="para">Receive either an <span class="acronym">OK</SPAN
> or an error message from the
authentication server.</P
></LI
><li class="listitem"><p class="para">Allow the user access (if <span class="acronym">OK</SPAN
>) or display the error
message.</P
></LI
></OL
></P
><p class="para">This whole process is carried out with a single <span class="acronym">TCP</SPAN
>
connection between the client and the authentication server, so that
the server knows it's talking to the same client and the client knows
it's talking to the same server throughout the authentication process.</P
><p class="para">The authentication server consults its databases to determine how to
authenticate that user and determines the appropriate prompt for the
authentication mechanism for that user. For example:

<ul class="itemizedlist"><li class="listitem"><p class="para">If traditional passwords are being used as the authentication
method, the prompt will be a simple &quot;Password:&quot; prompt.</P
></LI
><li class="listitem"><p class="para">If the authentication method is S/Key,<em class="emphasis"> </EM
>the
prompt will be the number of the key the user is to respond with. </P
></LI
><li class="listitem"><p class="para">If the authentication method is the Digital Pathways
<span class="acronym">SKN</SPAN
>-004 card, the prompt will be a randomly
generated challenge number.</P
></LI
></UL
></P
><p class="para"><a class="xref" href="#FIRE-10-FIG-3" title="How the TIS FWTK authentication server works">Figure 10.3</A
> shows how the <span class="acronym">TIS FWTK</SPAN
> authentication server works.</P
><h4 class="figure"><a class="title" name="FIRE-10-FIG-3">Figure 10.3: How the <span class="acronym">TIS FWTK</SPAN
> authentication server
works</A
></H4
><img class="graphic" src="figs/fire1003.gif" alt="Figure 10.3"><p class="para">The <span class="acronym">TIS FWTK</SPAN
> includes a number
of programs (such as <em class="emphasis">ftpd</EM
>) that, in addition to
other modifications and enhancements for security, have already been
modified to use the authentication server. Converting an existing
program to use the authentication server, rather than traditional
<span class="acronym">UNIX</SPAN
> passwords, is pretty straightforward. It
typically involves only 20 or so lines of C code, examples of which
are given in the toolkit.</P
><p class="para">The toolkit also includes some programs to support binary-only systems
where you don't have the source to modify. For example, for systems in
which you don't have the source code to the <em class="emphasis">login</EM
>
program available for modification, the toolkit includes a program 
you can use as the user's shell (which is specified for each user in the
<em class="emphasis">/etc/passwd</EM
> file) instead of one of the normal
shells (e.g., <em class="emphasis">/bin/csh</EM
> or
<em class="emphasis">/bin/sh</EM
>) This replacement shell authenticates the
user with the authentication server, and, if the user passes, starts his
real shell.</P
><div class="sect3"><h4 class="sect3"><a class="title" name="FIRE-10-S3-1">10.4.2.1 Problems with the authentication server</A
></H4
><p class="para">The major problem in running an authentication server is getting secure
communication between the client and the server. An attacker who can
convincingly pretend to be the authentication server can authenticate as
anybody.</P
><p class="para">Some configurations may have additional problems; for example, using
shell replacement can produce problems, because not all programs deal
well with situations in which a user's shell environment variable and
the entry for that user in the <em class="emphasis">/etc/passwd</EM
> file
do not match.<a class="indexterm" name="AUTOID-20676"></A
><a class="indexterm" name="AUTOID-20677"></A
></P
></DIV
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="FIRE-10-S2-12">10.4.3 Commercial Solutions</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-20681"></A
><a class="indexterm" name="AUTOID-20684"></A
>Many commercial systems offering to do authentication are now on the
market. In particular, &quot;single sign-on&quot; systems are a hot
topic right now. These are systems that supposedly let a user log in
once (presumably once each day), and then automatically log the user in
to whatever other systems that user needs to access, without the user
having to log in to each system individually. </P
><p class="para">There are a variety of issues you need to think about when you are
considering a commercial solution; the primary considerations are
availability, security, and cost.</P
><dl class="variablelist"><dt class="term"><em class="emphasis">Availability</EM
></DT
><dd class="listitem"><p class="para">This is a simple consideration. Is the system available for all the
platforms and programs you need to use it for? Many systems address
only certain types of machines (e.g., <span class="acronym">PC</SPAN
>s or
<span class="acronym">UNIX</SPAN
> systems), and many handle only certain types
of access (e.g., login but not <span class="acronym">FTP</SPAN
> access).</P
></DD
><dt class="term"><em class="emphasis">Security</EM
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-20701"></A
>This consideration is tougher to get a handle on. There are several
things you need to think about. First, how hard is the system going
to be to compromise? Second, if it <em class="emphasis">is</EM
>
compromised, what implications does that have for the rest of your
security?</P
><p class="para">Many of these commercial systems use proprietary algorithms that are
not available for client or academic scrutiny. Unfortunately,
there are a lot more ways to do these algorithms wrong than to do them
right. Without an independent analysis of the system, you have to
rely on the vendor's word that they got it right.</P
><p class="para">Other systems build their single sign-on capability on top of the
standard <span class="acronym">UNIX</SPAN
> <em class="emphasis">.rhosts</EM
>
mechanisms used by the so-called Berkeley &quot;r&quot; commands
(<em class="emphasis">rsh, rlogin rcp, rdist, </EM
>etc.). These commands
are notoriously easy for an attacker to exploit because they create a
web of trust among machines. (The weaknesses and vulnerabilities of
these commands are discussed in <a class="xref" href="ch08_01.htm" title="Configuring Internet Services">Chapter 8</A
>.)</P
></DD
><dt class="term"><em class="emphasis">Cost</EM
></DT
><dd class="listitem"><p class="para">This consideration is almost always an issue. What will it cost to
deploy this system in your environment to meet your needs? Some costs
are one-time capital expenses; e.g., some systems require a
dedicated piece of hardware, essentially a single-purpose
<span class="acronym">PC</SPAN
>, to generate the challenges and check the
responses. Others are per-user expenses; for example, some systems
require smart cards for all your users. Still others are licensing or
support expenses. The systems are often priced depending on the number
of users you'll support; systems to support more users obviously cost
more.</P
></DD
></DL
><p class="para">The only commercial authentication system that is used extensively on
the Internet is the Secur<span class="acronym">ID</SPAN
> system from Security
Dynamics discussed earlier. A variety of commercial products,
particularly terminal servers, support the system.[3]</P
><blockquote class="footnote"><p class="para">[3] Apparently because of aggressive marketing and partnering by Security
Dynamics, and not because of any inherent advantage of the product.</P
></BLOCKQUOTE
><a class="indexterm" name="AUTOID-20721"></A
></DIV
><a class="indexterm" name="AUTOID-20722"></A
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch10_03.htm#FIRE-10-S2-7" title="10.3 Authentication Mechanisms"><img src="../gifs/txtpreva.gif" alt="Previous: 10.3 Authentication Mechanisms" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Building Internet Firewalls"><img src="../gifs/txthome.gif" alt="Building Internet Firewalls" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch10_05.htm#FIRE-10-S2-16" title="10.5 Network-Level Encryption"><img src="../gifs/txtnexta.gif" alt="Next: 10.5 Network-Level Encryption" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">10.3 Authentication Mechanisms</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_a.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">10.5 Network-Level Encryption</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.htm" title="The Networking CD Bookshelf">Library Home</A
> | <a href="../dnsbind/index.htm" title="DNS &amp; BIND">DNS &amp; BIND</A
> | <a href="../tcpip/index.htm" title="TCP/IP Network Administration">TCP/IP</A
> | <a href="../sendmail/index.htm" title="sendmail">sendmail</A
> | <a href="../smdref/index.htm" title="sendmail Desktop Reference">sendmail Reference</A
> | <a href="index.htm" title="Building Internet Firewalls">Firewalls</A
> | <a href="../puis/index.htm" title="Practical UNIX &amp; Internet Security">Practical Security</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
