<html><head>
<title>[Chapter 19] 19.3 Secure RPC (AUTH_DES)</TITLE>
<meta name="DC.title" content="Practical UNIX &amp; Internet Security"><meta name="DC.creator" content="Simson Garfinkel &amp; Gene Spafford"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-02-04T00:15:08Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-148-8" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch19_01.htm" title="19. RPC, NIS, NIS+,  and Kerberos"><link rel="prev" href="ch19_02.htm#PUIS-CHP-19-SECT-2.2.4" title="19.2 Sun's Remote Procedure Call (RPC)"><link rel="next" href="ch19_04.htm#PUIS-CHP-19-SECT-4.3" title="19.4 Sun's Network Information Service (NIS)"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Practical UNIX &amp; Internet Security" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Practical UNIX &amp; Internet Security"><area shape="RECT" coords="467,0,514,18" href="../search/psrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch19_02.htm#PUIS-CHP-19-SECT-2.2.4" title="19.2 Sun's Remote Procedure Call (RPC)"><img src="../gifs/txtpreva.gif" alt="Previous: 19.2 Sun's Remote Procedure Call (RPC)" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 19<br>RPC, NIS, NIS+,  and Kerberos</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch19_04.htm#PUIS-CHP-19-SECT-4.3" title="19.4 Sun's Network Information Service (NIS)"><img src="../gifs/txtnexta.gif" alt="Next: 19.4 Sun's Network Information Service (NIS)" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="PUIS-CHP-19-SECT-3">19.3 Secure RPC (AUTH_DES)</A
></H2
><p class="para"><a class="indexterm" name="AUTOID-26038"></A
><a class="indexterm" name="AUTOID-26040"></A
>In
the late 1980s, Sun Microsystems developed a system for improving
<span class="acronym">UNIX</SPAN
> network security. Called Secure <span class="acronym">RPC</SPAN
>,
Sun's system was first released with the SunOS 4.0 operating
system. Although early versions of Secure <span class="acronym">RPC</SPAN
>
were difficult to use, later releases of the Solaris operating system
have integrated Secure <span class="acronym">RPC</SPAN
> into Sun's
<span class="acronym">NIS</SPAN
>+ network information system (described
later in this chapter), which makes administration very simple.</P
><p class="para">Secure <span class="acronym">RPC</SPAN
> is based on a combination of
public key cryptography and secret key cryptography, which we describe
in <a class="xref" href="ch06_01.htm" title="Cryptography">Chapter 6, <cite class="chapter">Cryptography</CITE
></A
>.
Sun's implementation uses the <a class="indexterm" name="AUTOID-26052"></A
>
Diffie-Hellman mechanism for key
exchange between users, and <span class="acronym">DES</SPAN
> secret key cryptography
for encrypting information that is sent over the network. <span class="acronym">DES</SPAN
>
is also used to encrypt the user's secret key that is stored
in a central network server. This encryption eliminates the need
for users to memorize or carry around the hundred-digit numbers
that make up their secret keys.</P
><p class="para">Secure <span class="acronym">RPC</SPAN
>
solves many of the problems of <span class="acronym">AUTH_UNIX</SPAN
> style
authentication. Because both users and computers must be authenticated,
it eliminates many of the spoofing problems to which other systems
lend themselves. Indeed, when used with higher-level protocols,
such as <span class="acronym">NFS</SPAN
>, Secure <span class="acronym">RPC</SPAN
> can
bring unprecedented security to the networked environment. Nevertheless,
Secure <span class="acronym">RPC</SPAN
>, has not enjoyed the widespread adoption
that Sun's original <span class="acronym">RPC</SPAN
> did. There are
probably several reasons:</P
><ul class="itemizedlist"><li class="listitem"><p class="para">The University of California at Berkeley
did not write a free implementation of Secure <span class="acronym">RPC</SPAN
>.[5]
As a result, the only way for vendors to implement Secure <span class="acronym">RPC</SPAN
>
was to write their own version (an expensive proposition) or to
license the code from Sun.</P
><blockquote class="footnote"><p class="para">[5] Because Secure RPC is based on public key cryptography, using
it within the United States would have required a license from the
holder of the particular patents in question. At the time that Berkeley
was developing its free version of the UNIX operating system, the
holder of the public key cryptography patents, a California partnership
called Public Key Partners, was notoriously hesitant to give licenses
to people who were writing free versions of programs implementing
the PKP algorithms. This situation might change after 1997, when
the patents covering Diffie-Hellman cryptography expire.</P
></BLOCKQUOTE
></LI
><li class="listitem"><p class="para">For whatever reason, many <span class="acronym">UNIX</SPAN
>
vendors were unwilling or unable to license or implement Secure
<span class="acronym">RPC</SPAN
> from Sun. Thus, it is not possible to interoperate
with those systems.</P
></LI
></UL
><div class="sect2"><h3 class="sect2"><a class="title" name="PUIS-CHP-19-SECT-3.1">19.3.1 Secure RPC Authentication</A
></H3
><p class="para">Secure <span class="acronym">RPC</SPAN
>
authentication is based on the <a class="indexterm" name="AUTOID-26078"></A
><a class="indexterm" name="AUTOID-26081"></A
>
Diffie-Hellman
<i class="firstterm">exponential key exchange </I
>system. Each Secure <span class="acronym">RPC</SPAN
>
principal[6] has a secret key and a public key, both of
which are stored on the Secure <span class="acronym">RPC</SPAN
> server. The
public key is stored unencrypted; the secret key is stored encrypted
with the principal's password. Both keys are typically
hexadecimal numbers of several hundred digits.</P
><blockquote class="footnote"><p class="para">[6] Secure RPC principals are users that have
Secure RPC passwords and computers that are configured to use Secure
RPC.</P
></BLOCKQUOTE
><p class="para">A Secure
<span class="acronym">RPC</SPAN
> principal proves his, her or its identity
by being able to decrypt the stored secret key and participating
in the Diffie-Hellman key exchange. Each principal combines its
secret key with the other's public key, allowing both to
arrive independently at a common mutually known key. This key is
then used to exchange a session key.</P
><div class="sect3"><h4 class="sect3"><a class="title" name="PUIS-CHP-19-SECT-3.1.1">19.3.1.1 Proving your identity</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-26095"></A
><a class="indexterm" name="AUTOID-26098"></A
>The
way you prove your identity with a public key system is by knowing
your secret key. Unfortunately, most people aren't good
at remembering hundred-digit numbers, and deriving a good pair of
numbers for a {public key, secret key} pair from
a <span class="acronym">UNIX</SPAN
> password is relatively difficult.</P
><p class="para">Sun solves these problems by distributing a database consisting
of usernames, public keys, and encrypted secret keys using the Sun
<span class="acronym">NIS</SPAN
> or <span class="acronym">NIS</SPAN
>+ network
database system. (Both <span class="acronym">NIS</SPAN
> and <span class="acronym">NIS</SPAN
>+
are described later in this chapter.) The secret key is encrypted
using the user's <span class="acronym">UNIX</SPAN
> password as the
key and the <span class="acronym">DES</SPAN
> encryption algorithm. If you
know your <span class="acronym">UNIX</SPAN
> password, your workstation software
can get your secret key and decrypt it.</P
><p class="para">For each user,
the following information is maintained:[7]</P
><blockquote class="footnote"><p class="para">[7] The information
could be maintained in the files<i class="filename"> /etc/publickey</I
>
and<i class="filename"> /etc/netid</I
>. If you are using NIS, the data
is stored in the NIS maps <i class="filename">publickey.byname</I
>
and <i class="firstterm">netid.byname</I
>. With NIS+, all
of this information is combined in a single NIS+ table
<i class="filename">cred.org_dir</I
>.</P
></BLOCKQUOTE
><dl class="variablelist"><dt class="term">Netname or canonical name</DT
><dd class="listitem"><p class="para">This is the user's definitive name over
the network. An example is <i class="systemitem">fred.sun.com</I
>,
which signifies the user <i class="systemitem">fred </I
>in
the domain <i class="systemitem">sun.com</I
>.
Older versions of <span class="acronym">NIS</SPAN
> used the form <i class="systemitem.example">UID.UNIX@domain</I
>.</P
></DD
><dt class="term">User's public key</DT
><dd class="listitem"><p class="para">A hexadecimal representation of the user's
public key.</P
></DD
><dt class="term">User's secret key</DT
><dd class="listitem"><p class="para">A hexadecimal representation of the user's
secret key, encrypted using the user's password.</P
></DD
></DL
><p class="para">The user's keys are created with either the <a class="indexterm" name="AUTOID-26137"></A
>
<kbd class="command">chkey</KBD
> command or the <a class="indexterm" name="AUTOID-26140"></A
>
<kbd class="command">nisaddcred</KBD
>
command. Normally, this process is transparent to the user.</P
><p class="para">When the user logs in to a computer running Secure <span class="acronym">RPC</SPAN
>,
the computer obtains a copy of the user's encrypted secret
key. The computer then attempts to decrypt the secret key using
the user's provided password. The secret key must now be
stored for use in communication with the Secure <span class="acronym">RPC</SPAN
>
server. In Version 4.1 and above, the unencrypted key is kept in
the memory of the <a class="indexterm" name="AUTOID-26146"></A
>
<kbd class="command">keyserv</KBD
> key server process. (In the original version of Secure <span class="acronym">RPC</SPAN
>,
shipped with SunOS 4.0, the unencrypted secret key is then stored
in the <a class="indexterm" name="AUTOID-26150"></A
><a class="indexterm" name="AUTOID-26153"></A
>
<i class="filename">/etc/keystore</I
> file. This was
less secure, as anyone gaining access to the user's workstation
as either that user or as <i class="filename">root</I
> would be able to easily access the
user's secret key.)</P
><p class="para">Next, the software on the
workstation uses the user's secret key and the server's
public key to generate a <a class="indexterm" name="AUTOID-26158"></A
>
<i class="filename">session key.</I
> (The server meanwhile has done the same thing using its secret
key and the user's public key). The workstation then generates
a random 56-bit conversation key and sends it to the server, encrypted
with the session key. The conversation key is used for the duration
of the login, and is stored in the key server process.</P
><p class="para">The
file server knows that the user is who he claims to be because:</P
><ul class="itemizedlist"><li class="listitem"><p class="para">The packet that the user sent was
encrypted using a conversation key.</P
></LI
><li class="listitem"><p class="para">The only way that the user could know the conversation
key would be by generating it, using the server's public
key and the user's secret key.</P
></LI
><li class="listitem"><p class="para">To know the user's secret key, the workstation
had to look up the secret key using <span class="acronym">NIS</SPAN
> and decrypt
it.</P
></LI
><li class="listitem"><p class="para">To decrypt the encrypted secret key, the user had
to have known the key that it was encrypted with--which is, in fact,
the user's password.</P
></LI
></UL
><p class="para">Notice
the following:</P
><ul class="itemizedlist"><li class="listitem"><p class="para">The user's password is never
transmitted over the network.</P
></LI
><li class="listitem"><p class="para">The only time the secret key is transmitted over
the network is when it is encrypted using the user's password.</P
></LI
><li class="listitem"><p class="para">There is no &quot;secret&quot; information
on the file server that must be protected from attackers.[8]</P
><blockquote class="footnote"><p class="para">[8] In contrast, the Kerberos system, as we shall see, requires
that the master Kerberos Server be protected literally with lock
and key; if the information stored on the Kerberos Server is stolen
by an attacker, the entire system is compromised.</P
></BLOCKQUOTE
></LI
><li class="listitem"><p class="para">The entire security of the system depends on the
difficulty of breaking a 56-bit key.</P
></LI
></UL
><p class="para">Because public key encryption is slow and difficult to use
for large amounts of data, the only thing that it is used for is
initially proving your identity and exchanging the session key.
Secure <span class="acronym">RPC</SPAN
> then uses the session key and <span class="acronym">DES</SPAN
>
encryption (described in <a class="xref" href="ch06_01.htm" title="Cryptography">Chapter 6</A
>)
for all subsequent communications between the workstation and the
server. <a class="indexterm" name="AUTOID-26189"></A
><a class="indexterm" name="AUTOID-26192"></A
></P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PUIS-CHP-19-SECT-3.1.2">19.3.1.2 Using Secure RPC services</A
></H4
><p class="para">After your
workstation and the server have agreed upon a session key, Secure
<span class="acronym">RPC</SPAN
> authenticates all <span class="acronym">RPC</SPAN
>
requests.</P
><p class="para">When your workstation communicates with a
server, the user provides a netname which the server is supposed
to translate automatically into a local <span class="acronym">UID</SPAN
> and
<span class="acronym">GID</SPAN
>. Ideally, this means that the user's
<span class="acronym">UID</SPAN
> on the server does not have to be the same
as the user's <span class="acronym">UID</SPAN
> on the workstation.
In practice, most organizations insist that its users have a single
<span class="acronym">UID</SPAN
> through the organization, so the ability
of Secure <span class="acronym">RPC</SPAN
> to map <span class="acronym">UIDS</SPAN
>
from one computer to another is not terribly important.</P
><p class="para">When
your session key expires, your workstation and the server automatically
renegotiate a new session key.</P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PUIS-CHP-19-SECT-3.1.3">19.3.1.3 Setting the window</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-26212"></A
><a class="indexterm" name="AUTOID-26215"></A
><a class="indexterm" name="AUTOID-26218"></A
><a class="indexterm" name="AUTOID-26221"></A
><a class="indexterm" name="AUTOID-26224"></A
>Inside the header sent with every Secure
<span class="acronym">RPC</SPAN
> request is a timestamp. This time-stamp prevents
an attacker from capturing the packets from an active session and
replaying them at a later time.</P
><p class="para">For a timestamp-based
system to operate properly, it's necessary for both the
client and the server to agree on what time it is. Unfortunately,
the real-time clocks on computers sometimes drift in relation to
one another. This can present a serious problem to the user of Secure
<span class="acronym">RPC</SPAN
>: if the clock on the workstation and the
clock on the file server drift too far apart, the server will not
accept any more requests from the client! The client and server
will then have to reauthenticate each other.</P
><p class="para"><a class="indexterm" name="AUTOID-26231"></A
><a class="indexterm" name="AUTOID-26234"></A
>Because
reauthenticating takes time, Secure <span class="acronym">RPC</SPAN
> allows
the workstation system administrator to set the &quot;window&quot;
that the server uses to determine how far the client's
clock can drift and remain acceptable. Obviously, using a large
window reduces the danger of drift. Unfortunately, large windows
similarly increase the chance of a playback attack, in which an
attacker sniffs a packet from the network, then uses the authenticated
credentials for his or her own purposes. Larger windows increase
the possibility of a playback attack because any packet that is
intercepted will be good for a longer period of time.</P
><p class="para"><a class="indexterm" name="AUTOID-26239"></A
>Solaris versions 2.3 and 2.4 use a default
window of 60 minutes; Solaris version 2.5 uses a window of 300 seconds
(5 minutes). This window is what Sun Microsystems recommends for
security-sensitive applications.</P
><p class="para">The size of the Secure
<span class="acronym">RPC</SPAN
> window is set in the kernel by the variable
<a class="indexterm" name="AUTOID-26244"></A
>
<i class="filename">authdes_win,</I
>
which stores the value of the window in seconds. On a System VR4
machine such as Solaris 2.x, you modify the <i class="filename">authdes_win</I
>
variable from the <i class="filename">/etc/system</I
> file:</P
><blockquote class="screen"><pre class="screen">set nfs:authdes_win=300</PRE
></BLOCKQUOTE
><p class="para">You then reboot with the modified <i class="filename">/etc/system</I
>
file.</P
><p class="para">If you have a <a class="indexterm" name="AUTOID-26253"></A
>
SunOS system, you can modify the value of <i class="filename">_authdes_win</I
>
by using the <a class="indexterm" name="AUTOID-26257"></A
>
<kbd class="command">adb</KBD
> debugger program.
Execute the following commands as superuser:</P
><blockquote class="screen"><pre class="screen"># <b class="emphasis.bold">adb -w /vmunix 
- authdes_win?D </B
>
_authdes_win: _authdes_win: 3600									 		The default window 
<b class="emphasis.bold">?W0t600 </B
>
_authdes_win: 0xe10 = 0x258 _authdes_win: 300 
<b class="emphasis.bold">$q											 Write the result out 
#</B
></PRE
></BLOCKQUOTE
><p class="para">You do
not need to reboot under SunOS, as the <kbd class="command">adb</KBD
> command modifies both
the kernel and the running image.</P
><p class="para">Using a network time
service like <a class="indexterm" name="AUTOID-26267"></A
><a class="indexterm" name="AUTOID-26270"></A
>
<span class="acronym">NTP</SPAN
> (Network
Time Protocol) can eliminate time skew between servers and workstations.
Even without <span class="acronym">NTP</SPAN
>, clocks typically don't
skew more than five seconds during the course of a single day's
operation. However, <span class="acronym">NTP</SPAN
> servers can get skewed,
and sometimes can even be maliciously led astray of the correct
time. If you are depending on the correct time for a protocol, you
might consider obtaining a clock that synchronizes with a radio
time signal, so that you can set up your own time server.</P
></DIV
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PUIS-CHP-19-SECT-3.2">19.3.2 Setting Up Secure RPC with NIS</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-26279"></A
><a class="indexterm" name="AUTOID-26282"></A
><a class="indexterm" name="AUTOID-26285"></A
>To use
Secure <span class="acronym">RPC</SPAN
>, your client computers need a way
of obtaining keys from the Secure <span class="acronym">RPC</SPAN
> server.
You can distribute the keys in standard <span class="acronym">UNIX</SPAN
>
files, or you can have them distributed automatically with either
<span class="acronym">NIS</SPAN
> or <span class="acronym">NIS</SPAN
>+.[9]</P
><blockquote class="footnote"><p class="para">[9] If you are using Secure RPC on something other than a Sun
system, be sure to check your documentation &nbsp;-  there may
be some other way to distribute the key information.</P
></BLOCKQUOTE
><p class="para">The easiest way to set up Secure <span class="acronym">RPC</SPAN
> is
to set up <span class="acronym">NIS</SPAN
>+. Sun's <span class="acronym">NIS</SPAN
>+
requires Secure <span class="acronym">RPC</SPAN
> to function properly. As
a result, the <span class="acronym">NIS</SPAN
>+ installation procedure
will automatically create the appropriate Secure <span class="acronym">RPC</SPAN
>
keys and credentials. When you add new <span class="acronym">NIS</SPAN
>+
users, their Secure <span class="acronym">RPC</SPAN
> keys will automatically
be created.</P
><p class="para">Running Secure <span class="acronym">RPC</SPAN
> with
<span class="acronym">NIS</SPAN
> is more difficult. You will need to manually
create the keys and place them in the appropriate <span class="acronym">NIS</SPAN
>
maps. If you are not using <span class="acronym">NIS</SPAN
>, you can simply
place the keys in the file <i class="filename">/etc/publickey</I
>.
For detailed information, you should refer to your vendor documentation
for explicit instructions on how to set up Secure <span class="acronym">RPC</SPAN
>.
Nevertheless, this guide may be helpful.</P
><div class="sect3"><h4 class="sect3"><a class="title" name="PUIS-CHP-19-SECT-3.2.1">19.3.2.1 Creating passwords for users</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-26314"></A
><a class="indexterm" name="AUTOID-26317"></A
>Before you enable
Secure <span class="acronym">RPC</SPAN
>, make sure that every user has been
assigned a public key and a secret key. Check the file <i class="filename"><a class="indexterm" name="AUTOID-26322"></A
><a class="indexterm" name="AUTOID-26325"></A
>/etc/publickey</I
>
on the master <span class="acronym">NIS</SPAN
> server. If a user doesn't
have an entry in the database, you can create an entry for that
user by becoming the superuser on the <span class="acronym">NIS</SPAN
> master
server and typing:</P
><blockquote class="screen"><pre class="screen">#  <b class="emphasis.bold">newkey -u username</B
><a class="indexterm" name="AUTOID-26331"></A
>
 </PRE
></BLOCKQUOTE
><p class="para">Alternatively, you create an entry
in the database for the special user nobody. <a class="indexterm" name="AUTOID-26334"></A
><a class="indexterm" name="AUTOID-26336"></A
>
After an entry is created for nobody, users
can run the chkey program on any client to create their own entries
in the database.</P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PUIS-CHP-19-SECT-3.2.2">19.3.2.2 Creating passwords for hosts</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-26342"></A
>Secure <span class="acronym">RPC</SPAN
> also allows
you to create public key/secret key pairs for the superuser
account on each host of your network. To do so, type:</P
><blockquote class="screen"><pre class="screen"># <b class="emphasis.bold">newkey -h hostname</B
></PRE
></BLOCKQUOTE
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PUIS-CHP-19-SECT-3.2.3">19.3.2.3 Making sure Secure RPC programs are running on every
workstation</A
></H4
><p class="para">Log into a workstation and make sure that
the <a class="indexterm" name="AUTOID-26351"></A
><a class="indexterm" name="AUTOID-26353"></A
>
<kbd class="command">keyserv</KBD
>
and <kbd class="command">ypbind</KBD
> daemons are running. The programs should be started by
a command in the appropriate system startup file (e.g., <i class="filename">/etc/rc.local</I
>
for <span class="acronym">BSD</SPAN
>-derived systems, and <i class="filename">/etc/rc2.d/s?rpc</I
>
for System V-derived systems). You also need to make sure that the
<i class="filename">rpc.yp.updated</I
> is run from either <i class="filename">inetd.conf</I
> or <i class="filename">rc.local</I
> on the
server.</P
><p class="para">You can check for these daemons with the <a class="indexterm" name="AUTOID-26364"></A
>
<kbd class="command">ps</KBD
> command (you would use the -ef flags to ps
on a Solaris 2.X system):</P
><blockquote class="screen"><pre class="screen">% <b class="emphasis.bold">ps aux | egrep 'keyserv|ypbind' </B
>
root 63 0.0 0.0 56 32 ? IW Jul 30 0:30 
keyserv  root 60 0.3 0.7 928 200 ? S Jul 30 3:10 ypbind</PRE
></BLOCKQUOTE
><p class="para">You should log
onto an <span class="acronym">NIS</SPAN
> client and make sure that the <kbd class="command">publickey</KBD
>
map is available. Use the <a class="indexterm" name="AUTOID-26372"></A
>
<kbd class="command">ypcat
publickey</KBD
> command. If the map is not available, log into the server
and push it.</P
><blockquote class="note"><p class="para"><strong>NOTE:</STRONG
> There is a very nasty vulnerability with <i class="filename">rpc.ypupdated</I
>
that allows external users access on servers or clients.
See &quot;<span class="acronym">CERT</SPAN
> advisory CA-95:17.
rpc.ypupdated.vul.&quot;</P
></BLOCKQUOTE
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PUIS-CHP-19-SECT-3.2.4">19.3.2.4 Using Secure NFS</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-26382"></A
><a class="indexterm" name="AUTOID-26384"></A
>Once
you've gone to all of the trouble of setting up Secure
<span class="acronym">RPC</SPAN
>, your next step is to set up Secure <span class="acronym">NFS</SPAN
>.
We'll cover this in detail in <a class="xref" href="ch20_01.htm" title="NFS">Chapter 20</A
>. But if you want to go ahead and do it right now,
here are the steps to follow for a <span class="acronym">BSD</SPAN
>-derived
system such as SunOS; the procedure is the same, but the filenames
are different for other systems.</P
><p class="para"><a class="indexterm" name="AUTOID-26393"></A
><a class="indexterm" name="AUTOID-26396"></A
><a class="indexterm" name="AUTOID-26398"></A
>On
the file server, edit the <i class="filename">/etc/exports</I
> file and
add the <kbd class="command">-secure</KBD
> option for every filesystem that should
be exported using Secure <span class="acronym">NFS</SPAN
>. For example, suppose
the old <i class="filename">/etc/exports </I
>file exported the mail spool
directory <i class="filename">/usr/spool/mail</I
> with the line:</P
><blockquote class="screen"><pre class="screen">/usr/spool/mail -access=allws</PRE
></BLOCKQUOTE
><p class="para">To make the filesystem be exported using Secure <span class="acronym">NFS</SPAN
>,
change the line to read:</P
><blockquote class="screen"><pre class="screen">/usr/spool/mail -secure,access=allws</PRE
></BLOCKQUOTE
><p class="para">After changing <i class="filename">/etc/exports</I
>, you need to
do an <kbd class="command">exportfs</KBD
> (or equivalent).</P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PUIS-CHP-19-SECT-3.2.5">19.3.2.5 Mounting a secure filesystem</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-26415"></A
><a class="indexterm" name="AUTOID-26418"></A
><a class="indexterm" name="AUTOID-26420"></A
><a class="indexterm" name="AUTOID-26423"></A
>You
must modify the <i class="filename">/etc/fstab</I
> file on every workstation
that mounts a Secure <span class="acronym">NFS</SPAN
> filesystem to include
the secure option as a mount option.</P
><p class="para">To continue the
above example, suppose your workstation mounted the <i class="filename">/usr/spool/mail</I
>
directory with the line:</P
><blockquote class="screen"><pre class="screen">mailhub:/usr/spool/mail /usr/spool/mail nfs rw,intr,bg 0 0</PRE
></BLOCKQUOTE
><p class="para">To mount this filesystem with the <kbd class="command">secure</KBD
> option, you would
change the line to read:</P
><blockquote class="screen"><pre class="screen">mailhub:/usr/spool/mail /usr/spool/mail nfs rw,intr,bg,secure 00</PRE
></BLOCKQUOTE
><p class="para">After changing <i class="filename">/etc/fstab,</I
>
you need to <kbd class="command">umount</KBD
> and <kbd class="command">mount</KBD
> the filesystems again.</P
></DIV
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PUIS-CHP-19-SECT-3.3">19.3.3 Using Secure RPC</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-26441"></A
><a class="indexterm" name="AUTOID-26444"></A
>Using Secure <span class="acronym">RPC</SPAN
>
is very similar to using standard <span class="acronym">RPC</SPAN
>. If you
log in by typing your username and password (either at the <i class="filename">login</I
>
window on the console or by using <kbd class="command">telnet</KBD
> or <kbd class="command">rlogin</KBD
> to reach your
machine), your secret key is automatically decrypted and stored
in the key server. Secure <span class="acronym">RPC</SPAN
> automatically performs
the authentication &quot;handshake&quot; every time you
contact a service for the first time. In the event that your session
key expires&nbsp;- either because of a time expiration or a crash
and reboot&nbsp;- Secure <span class="acronym">RPC</SPAN
> automatically
obtains another session key.</P
><p class="para">If you log in over the
network without having to type a password&nbsp;- for example,
you use <kbd class="command">rlogin</KBD
> to reach your computer from a trusted machine&nbsp;- you
will need to use the <a class="indexterm" name="AUTOID-26455"></A
>
<kbd class="command">keylogin</KBD
>
program to have your secret key calculated and stored in the key
server. Unfortunately, this will result in your key being sent over
the network and makes it subject to eavesdropping.</P
><p class="para">Before
you log out of your workstation, be sure to run the <a class="indexterm" name="AUTOID-26459"></A
>
<kbd class="command">keylogout</KBD
> program to destroy the copy of your
secret key stored in the key server. If you use <kbd class="command">csh</KBD
> as your shell,
you can run this program automatically by placing the command <kbd class="command">keylogout</KBD
>
in your <a class="indexterm" name="AUTOID-26464"></A
>
<i class="filename">~/.logout</I
>
file:</P
><blockquote class="screen"><pre class="screen"># 
# ~/.logout file  
#  
# Destroy secret keys  
keylogout </PRE
></BLOCKQUOTE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PUIS-CHP-19-SECT-3.4">19.3.4 Limitations of Secure RPC</A
></H3
><p class="para">Sun's
Secure <span class="acronym">RPC</SPAN
> represents a quantum leap in security
over Sun's standard <span class="acronym">RPC</SPAN
>. This is good
news for sites that use <span class="acronym">NFS</SPAN
>: with Secure <span class="acronym">RPC</SPAN
>,
<span class="acronym">NFS</SPAN
> can be used with relative safety. Nevertheless,
Secure <span class="acronym">RPC</SPAN
> it is not without its problems:</P
><ul class="itemizedlist"><li class="listitem"><p class="para"><b class="emphasis.bold">Every network client must be individually
modified for use with Secure <span class="acronym">RPC</SPAN
></B
>. Although Secure
<span class="acronym">RPC</SPAN
> is a transparent modification to Sun's
underlying <span class="acronym">RPC</SPAN
> system, the current design of
Sun's <span class="acronym">RPC</SPAN
> library requires an application
program to specify individually which authentication system (<span class="acronym">AUTH_NONE</SPAN
>,
<span class="acronym">AUTH_UNIX</SPAN
>, <span class="acronym">AUTH_DES</SPAN
>,
or <span class="acronym">AUTH_KERB</SPAN
>) the program wants to use.
For this reason, every client that uses a network service must be
individually modified to use <span class="acronym">AUTH_DES</SPAN
>
authentication.</P
><p class="para">Although the modifications required
are trivial, a better approach would be to allow the user to specify
the authentication service requested in an environment variable,
or on some other per-user or per-site, rather than per-program,
basis.[10]</P
><blockquote class="footnote"><p class="para">[10] We said the same thing five years ago, in
the first version of this book.</P
></BLOCKQUOTE
></LI
><li class="listitem"><p class="para"><b class="emphasis.bold">There is a <a class="indexterm" name="AUTOID-26496"></A
>
performance penalty</B
>. Secure <span class="acronym">RPC</SPAN
>
penalizes every <span class="acronym">RPC</SPAN
> transaction that uses it,
because the <span class="acronym">RPC</SPAN
> authenticator must be decrypted
using <span class="acronym">DES</SPAN
> to verify each transmission. Fortunately,
the performance penalty is small: On a Sun-4, only 1.5 milliseconds
are required for the decryption. In comparison, the time to complete
an average <span class="acronym">NFS</SPAN
> transaction is about 20 milliseconds,
making the performance penalty about eight percent.</P
></LI
><li class="listitem"><p class="para"><b class="emphasis.bold">Secure <span class="acronym">RPC</SPAN
> does not provide for
data <a class="indexterm" name="AUTOID-26508"></A
><a class="indexterm" name="AUTOID-26511"></A
>
integrity
or confidentiality</B
>. Secure <span class="acronym">RPC</SPAN
> authenticates
the user, but it does not protect the data that is transmitted with
either encryption or digital signatures. It is the responsibility
of programs using Secure <span class="acronym">RPC</SPAN
> to encrypt using
a suitable key and algorithm.</P
></LI
><li class="listitem"><p class="para"><b class="emphasis.bold">It may be possible to break the public key. </B
><a class="indexterm" name="AUTOID-26519"></A
>
Any piece of information encrypted
with the <a class="indexterm" name="AUTOID-26522"></A
>
Diffie-Hellman
public key encryption system used in Secure <span class="acronym">RPC</SPAN
>
can be decrypted if an attacker can calculate the discrete logarithm
of the public key. In 1989, Brian LaMacchia <a class="indexterm" name="AUTOID-26526"></A
><a class="indexterm" name="AUTOID-26528"></A
>
and Andrew Odlyzko at AT&amp;T's
Bell Laboratories in New Jersey discovered a significant performance
improvement for the computation of discrete logarithms. Since then,
numerous other advances in this field of mathematics have taken
place. Secure <span class="acronym">RPC</SPAN
> makes the public key and the
encrypted secret key available to <span class="acronym">RPC</SPAN
> client
computers on the network. Thus, keys that are secure today may be
broken tomorrow.</P
></LI
><li class="listitem"><p class="para"><b class="emphasis.bold">It may be possible to break the secret key.</B
> The
Secure <span class="acronym">RPC</SPAN
> secret key is encrypted with a 56-bit
<span class="acronym">DES</SPAN
> key and is made publicly available on the
network server. As computers become faster, the possibility of a
brute force attack against the user's encrypted secret
key may become a reality.</P
></LI
></UL
><p class="para">In
the final analysis, using Secure <span class="acronym">RPC</SPAN
> appears
to provide much better protection than many other approaches, especially
with multiuser machines. Secure <span class="acronym">RPC</SPAN
> is clearly
better than plain <span class="acronym">RPC</SPAN
>. Unfortunately, because
Secure <span class="acronym">RPC</SPAN
> requires the use of either <span class="acronym">NIS</SPAN
>
or <span class="acronym">NIS</SPAN
>+, some multi-vendor sites have
chosen not to use it. These sites should consider <span class="acronym">DCE</SPAN
>,
which provides a workable solution for a heterogeneous <a class="indexterm" name="AUTOID-26545"></A
><a class="indexterm" name="AUTOID-26548"></A
><a class="indexterm" name="AUTOID-26551"></A
>
environment.<a class="indexterm" name="AUTOID-26554"></A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch19_02.htm#PUIS-CHP-19-SECT-2.2.4" title="19.2 Sun's Remote Procedure Call (RPC)"><img src="../gifs/txtpreva.gif" alt="Previous: 19.2 Sun's Remote Procedure Call (RPC)" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Practical UNIX &amp; Internet Security"><img src="../gifs/txthome.gif" alt="Practical UNIX &amp; Internet Security" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch19_04.htm#PUIS-CHP-19-SECT-4.3" title="19.4 Sun's Network Information Service (NIS)"><img src="../gifs/txtnexta.gif" alt="Next: 19.4 Sun's Network Information Service (NIS)" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">19.2 Sun's Remote Procedure Call (RPC)</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">19.4 Sun's Network Information Service (NIS)</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.htm" title="The Networking CD Bookshelf">Library Home</A
> | <a href="../dnsbind/index.htm" title="DNS &amp; BIND">DNS &amp; BIND</A
> | <a href="../tcpip/index.htm" title="TCP/IP Network Administration">TCP/IP</A
> | <a href="../sendmail/index.htm" title="sendmail">sendmail</A
> | <a href="../smdref/index.htm" title="sendmail Desktop Reference">sendmail Reference</A
> | <a href="../firewall/index.htm" title="Building Internet Firewalls">Firewalls</A
> | <a href="index.htm" title="Practical UNIX &amp; Internet Security">Practical Security</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
