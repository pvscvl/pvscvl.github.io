<html><head>
<title>[Chapter 17] TCP/IP Services</TITLE>
<meta name="DC.title" content="Practical UNIX &amp; Internet Security"><meta name="DC.creator" content="Simson Garfinkel &amp; Gene Spafford"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-02-04T00:12:50Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-148-8" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="part04.htm" title="IV. Network and Internet Security"><link rel="prev" href="ch16_05.htm" title="16.5 Summary"><link rel="next" href="ch17_02.htm" title="17.2 Controlling Access to Servers"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Practical UNIX &amp; Internet Security" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Practical UNIX &amp; Internet Security"><area shape="RECT" coords="467,0,514,18" href="../search/psrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch16_05.htm" title="16.5 Summary"><img src="../gifs/txtpreva.gif" alt="Previous: 16.5 Summary" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 17</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch17_02.htm" title="17.2 Controlling Access to Servers"><img src="../gifs/txtnexta.gif" alt="Next: 17.2 Controlling Access to Servers" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="CHAPTER"><h1 class="chapter"><a class="title" name="PUIS-CHP-17">17. TCP/IP Services</A
></H1
><div class="htmltoc"><p><b>Contents:</B
><br><a class="SECT1" href="#PUIS-CHP-17-SECT-1" title="17.1 Understanding UNIX Internet Servers">Understanding UNIX Internet Servers</A
><br><a class="SECT1" href="ch17_02.htm" title="17.2 Controlling Access to Servers">Controlling Access to Servers</A
><br><a class="SECT1" href="ch17_03.htm#PUIS-CHP-17-SECT-3.21.3" title="17.3 Primary UNIX Network Services">Primary UNIX Network Services</A
><br><a class="SECT1" href="ch17_04.htm" title="17.4 Security Implications of Network Services">Security Implications of Network Services</A
><br><a class="SECT1" href="ch17_05.htm" title="17.5 Monitoring Your Network with netstat">Monitoring Your Network with netstat</A
><br><a class="SECT1" href="ch17_06.htm#PUIS-CHP-17-SECT-6.1" title="17.6 Network Scanning">Network Scanning</A
><br><a class="SECT1" href="ch17_07.htm" title="17.7 Summary">Summary</A
></P
><p></P
></DIV
><p class="para"><a class="indexterm" name="AUTOID-21431"></A
>Connecting
a <span class="acronym">UNIX</SPAN
> computer to the Internet is not an action
that should be taken lightly. Although the <span class="acronym">TCP/IP</SPAN
>
protocol suite and the <span class="acronym">UNIX</SPAN
> operating system
themselves have few inherent security problems, many of the problems
that do exist have a strange way of showing themselves when computers
running the <span class="acronym">UNIX</SPAN
> operating system are put on
the global network.</P
><p class="para">The reason for caution has a lot to do with the flexibility
of both <span class="acronym">UNIX</SPAN
> and the Internet. A network connection
gives users on the network dozens of different ways to form connections
with your computer: they can send it mail, they can access a <span class="acronym">WWW</SPAN
>
server, and they can look up the names and addresses of your users.
Unfortunately, each of these services can contain potential security
holes, both as the result of bugs, and because of fundamental shortcomings
in the services themselves.</P
><p class="para">Over the years many security problems have been discovered
in network services, and workable solutions have been found. Unfortunately,
some <span class="acronym">UNIX</SPAN
> vendors have been slow to incorporate
these security-related fixes into their standard offerings. If you
are the system manager of any <span class="acronym">UNIX</SPAN
> computer that
is connected to a network, you must therefore be aware of the security
failings of your own computer, and take appropriate measures to
counteract them. To do so, you first need to understand how the
<span class="acronym">UNIX</SPAN
> operating system works with the Internet.</P
><p class="para">This chapter is not a definitive description of the <span class="acronym">TCP/IP</SPAN
>
services offered by <span class="acronym">UNIX</SPAN
>. Instead, it presents
a brief introduction to the various services, and describes security-related
concerns of each. For a more definitive discussion, we recommend
the following books:</P
><ul class="itemizedlist"><li class="listitem"><p class="para"><em class="emphasis">Building Internet Firewalls,</EM
> by D.
Brent Chapman and Elizabeth D. Zwicky (O'Reilly &amp;
Associates, 1995).</P
></LI
><li class="listitem"><p class="para"><em class="emphasis">Managing Internet Information Services,</EM
>by Cricket Liu, Jerry Peek, Russ Jones, Bryan Buus, and
Adrian Nye (O'Reilly &amp; Associates, 1994).</P
></LI
><li class="listitem"><p class="para"><em class="emphasis">DNS and BIND,</EM
> by Paul Albitz
and Cricket Liu (O'Reilly &amp; Associates, 1992).</P
></LI
><li class="listitem"><p class="para"><em class="emphasis">sendmail,</EM
> by Bryan Costales,
with Eric Allman and Neil Rickert (O'Reilly &amp;
Associates, 1993).</P
></LI
><li class="listitem"><p class="para"><em class="emphasis">UNIX Network Programming</EM
>, by W. Richard Stevens
(Prentice Hall, 1990).</P
></LI
></UL
><div class="sect1"><h2 class="sect1"><a class="title" name="PUIS-CHP-17-SECT-1">17.1 Understanding UNIX Internet Servers</A
></H2
><p class="para"><a class="indexterm" name="AUTOID-21466"></A
>Most <span class="acronym">UNIX</SPAN
>
network services are provided by individual programs called <i class="firstterm">servers</I
>.
For a server to operate, it must be assigned a protocol (<span class="acronym">TCP</SPAN
>
or <span class="acronym">UDP</SPAN
>), be assigned a port number, and be started
when the system boots or as needed, as we'll describe in
&quot;Starting the Servers&quot; below.</P
><div class="sect2"><h3 class="sect2"><a class="title" name="PUIS-CHP-17-SECT-1.1">17.1.1 The /etc/services File</A
></H3
><p class="para">The <em class="emphasis">/etc/services</EM
><a class="indexterm" name="AUTOID-21476"></A
><a class="indexterm" name="AUTOID-21479"></A
>
file is a relational database file. Each line of the <em class="emphasis">/etc/services</EM
>
file consists of a service name, a network port number, a protocol
name, and a list of aliases. A rather extensive list of Internet
services, including their uses on <span class="acronym">UNIX</SPAN
> systems,
their security implications, and our recommendations as to whether
or not you should run them, appears in <a class="xref" href="appg_01.htm" title="Table of IP Services">Appendix G, <cite class="appendix">Table of IP Services</CITE
></A
>.</P
><p class="para">The <em class="emphasis">/etc/services</EM
> file is referenced
by both Internet client programs and servers. The information in
the <em class="emphasis">/etc/services</EM
> file comes from Internet
<span class="acronym">RFC</SPAN
>s[1]
and other sources. Some of the services listed in the <em class="emphasis">/etc/services</EM
>
file are no longer in widespread use; nevertheless, their names
still appear in the file to prevent the accidental reassignment
of their ports in the event that the services are still used somewhere
on the global network.</P
><blockquote class="footnote"><p class="para">[1] RFC stands for Request For
Comment. The RFCs describe many of the actual standards, proposed
standards, and operational characteristics of the Internet. There
are many online sources for obtaining the RFCs.</P
></BLOCKQUOTE
><p class="para">The following is an excerpt from the <em class="emphasis">/etc/services</EM
>
file that specifies the Telnet, <span class="acronym">SMTP</SPAN
>, and Network
Time Protocol (<span class="acronym">NTP</SPAN
>) services:</P
><blockquote class="screen"><pre class="screen"># /etc/services 
# 
telnet 23 /tcp 
smtp   25 /tcp mail 
time   37 /udp timeserver
...</PRE
></BLOCKQUOTE
><p class="para"><span class="acronym">UNIX</SPAN
> servers should determine their port
numbers by looking up each port in the <i class="filename">/etc/services</I
>
file using the <span class="acronym">UNIX</SPAN
> system call <a class="indexterm" name="AUTOID-21500"></A
>
<i class="filename">getservicebyname().</I
>
The <em class="emphasis">/etc/services</EM
> file can be supplemented
or replaced by distributed database systems such as <span class="acronym">NIS</SPAN
>,
<span class="acronym">NIS</SPAN
>+, Netinfo, or <span class="acronym">DCE</SPAN
>
Most of these systems patch the system's <i class="filename">getservicebyname()</I
>
system call, so that they are transparent to the application.</P
><div class="sidebar"><h4 class="sidebar"><a class="title" name="AUTOID-21508">Trusted Ports</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-21511"></A
><a class="indexterm" name="AUTOID-21513"></A
><a class="indexterm" name="AUTOID-21515"></A
>Ports in the range 0 to 1023 are
sometimes referred to as <i class="firstterm">trusted ports</I
>. On
<span class="acronym">UNIX</SPAN
>, these ports are restricted to the superuser;
a program must be running as <em class="emphasis">root</EM
> to listen
to a trusted port or to originate a connection from any of these
port numbers. (Note that any user can connect to a trusted port.)</P
><p class="para">The
concept of trusted ports is intended to prevent a regular user from
obtaining privileged information. For example, if a regular user
could write a program that listened to port 23, that program could
masquerade as a Telnet server, receiving connections from unsuspecting
users, and obtain their passwords.</P
><p class="para">This idea of trusted
ports is a <span class="acronym">UNIX</SPAN
> convention. It is not part of
the Internet standard, and manufacturers are not bound to observe
this protocol. It is simply the way that the designers of <span class="acronym">UNIX</SPAN
>
network services decided to approach the problem.</P
><p class="para">Thus,
trusted ports are not very trustworthy. <em class="emphasis">Using a non</EM
><span class="acronym">-UNIX</SPAN
><em class="emphasis">machine, such as an IBM PC with an Ethernet board in place, it is
possible to spoof </EM
><span class="acronym">UNIX</SPAN
><em class="emphasis"> network
software by sending packets from, or listening to, low-numbered
trusted ports. </EM
></P
></DIV
><p class="para">Some programmers bypass this system call and simply hard-code
the service number into their programs. Thus, if you make a change
to a program's port number in the <em class="emphasis">/etc/services</EM
>
file, the server may or may not change the port to which it is listening.
This can result in significant problems if a change is necessary,
although well-known services seldom change their ports.<a class="indexterm" name="AUTOID-21534"></A
><a class="indexterm" name="AUTOID-21537"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PUIS-CHP-17-SECT-1.2">17.1.2 Starting the Servers</A
></H3
><p class="para">There are fundamentally two kinds of <span class="acronym">UNIX</SPAN
>
servers:</P
><ul class="itemizedlist"><li class="listitem"><p class="para">Servers that are always running. These
servers are started automatically from the <em class="emphasis"><a class="indexterm" name="AUTOID-21547"></A
>/etc/rc*</EM
>
files when the operating system starts up.[2] Servers started at boot time are usually
the servers that should provide rapid responses to user requests,
must handle many network requests from a single server process,
or both. Servers in this category include <i class="systemitem">nfsd</I
>
(Network Filesystem daemon) and <em class="emphasis">sendmail</EM
>.</P
><blockquote class="footnote"><p class="para">[2] On System
V-derived operating systems, such as Solaris 2.x, these servers
are usually started by an entry in a file located inside the <em class="emphasis">/etc/rc2.d/</EM
>
directory.</P
></BLOCKQUOTE
></LI
><li class="listitem"><p class="para">Servers that are run only when needed. These servers
are usually started from <em class="emphasis"><a class="indexterm" name="AUTOID-21558"></A
><a class="indexterm" name="AUTOID-21560"></A
>inetd</EM
>,
the <span class="acronym">UNIX</SPAN
> &quot;Internet&quot; daemon.
<em class="emphasis">inetd</EM
> is a flexible program that can listen
to dozens of Internet ports and automatically start the appropriate
daemon as needed. Servers started by <em class="emphasis">inetd</EM
>
include <em class="emphasis">popper</EM
> (Post Office Protocol daemon)
and <em class="emphasis">fingerd</EM
> (the <i class="filename">finger</I
>
daemon).</P
></LI
></UL
><p class="para">Servers that are always running are usually started by a command
in the <em class="emphasis">/etc/rc*</EM
> files. For example, the lines
in the <i class="filename">/etc/rc</I
> file that start up the Simple
Mail Transfer Protocol (<span class="acronym">SMTP</SPAN
>) server looks like
this:</P
><blockquote class="screen"><pre class="screen">if [ -f /usr/lib/sendmail -a -f /etc/sendmail/sendmail.cf ]; then  
/usr/lib/sendmail -bd -q1h &amp;&amp; (echo -n ' sendmail') &gt; /dev/console 
fi</PRE
></BLOCKQUOTE
><p class="para">This example checks for the existence of <em class="emphasis">/usr/lib/sendmail</EM
>
and the program's control file, <em class="emphasis">/etc/sendmail/sendmail.cf.</EM
>
If the two files exist, <em class="emphasis">/etc/rc</EM
> runs the <em class="emphasis">sendmail</EM
>
program and prints the word &quot;<kbd class="command">sendmail</KBD
>&quot;
on the system console. After the program is running, <em class="emphasis">sendmail</EM
>
will bind to <span class="acronym">TCP/IP</SPAN
> port number 25 and listen
for connections.[3]</P
><blockquote class="footnote"><p class="para">[3] The option <em class="emphasis">-bd</EM
>
makes the <i class="filename">sendmail </I
>program &quot;be a daemon&quot;
while the option <em class="emphasis">-q1h</EM
> causes the program to
process the mail queue every hour.</P
></BLOCKQUOTE
><p class="para">Each time the <em class="emphasis">sendmail</EM
> program receives
a connection, it uses the <em class="emphasis">fork</EM
>()<em class="emphasis"></EM
>system call to create a new process to handle that connection.
The original <em class="emphasis">sendmail</EM
> process then continues
listening for new connections.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PUIS-CHP-17-SECT-1.3">17.1.3 The /etc/inetd Program</A
></H3
><a class="indexterm" name="AUTOID-21595"></A
><p class="para">The first version of <span class="acronym">UNIX</SPAN
> to support the
Internet, <span class="acronym">BSD</SPAN
> 4.2, set a different server program
running for every network service.[4] As the number of services
grew in the mid-1980s, <span class="acronym">UNIX</SPAN
> systems started having
more and more server programs sleeping in the background, waiting
for network connections. Although the servers were sleeping, they
nevertheless consumed valuable system resources such as process
table entries and swap space. Eventually, a single program called
<em class="emphasis">/etc/inetd</EM
> (the Internet daemon) was developed,
which listened on many network ports at a time and ran the appropriate
<span class="acronym">TCP</SPAN
>-based or <span class="acronym">UDP</SPAN
>-based server
on demand when a connection was received.</P
><blockquote class="footnote"><p class="para">[4] BSD 4.1a was an
early test release of UNIX with TCP/IP support. BSD 4.2,
released in September 1983, was the first non-test release with
TCP/IP support.</P
></BLOCKQUOTE
><p class="para"><em class="emphasis">inetd</EM
> is run at boot time as part of
the start-up procedure. When it starts execution, it examines the
contents of the <em class="emphasis">/etc/inetd.conf</EM
> file to determine
which network services it is supposed to manage. <em class="emphasis">inetd</EM
>
uses the <em class="emphasis"><a class="indexterm" name="AUTOID-21613"></A
>bind</EM
>()
call to attach itself to many network ports and then uses the <em class="emphasis"><a class="indexterm" name="AUTOID-21616"></A
><a class="indexterm" name="AUTOID-21618"></A
><a class="indexterm" name="AUTOID-21621"></A
>
select</EM
>()
call to cause notification when a connection is made on any of the
ports.</P
><p class="para">A sample <em class="emphasis">inetd.conf</EM
> file might look like
this:</P
><blockquote class="screen"><pre class="screen"># @(#)inetd.conf 1.1 87/08/12 3.2/4.3NFSSRC 
# 
# Internet server configuration database 
# 
ftp      stream tcp nowait root    /usr/etc/ftpd ftpd 
telnet   stream tcp nowait root    /usr/etc/telnetd telnetd 
shell    stream tcp nowait root    /usr/etc/rshd rshd 
login    stream tcp nowait root    /usr/etc/rlogind rlogind 
exec     stream tcp nowait root    /usr/etc/rexecd rexecd 
uucp     stream tcp nowait uucp    /usr/etc/uucpd uucpd 
finger   stream tcp nowait nobody  /usr/etc/fingerd fingerd 
tftp     dgram  udp wait   nobody  /usr/etc/tftpd tftpd 
comsat   dgram  udp wait   root    /usr/etc/comsat comsat 
talk     dgram  udp wait   root    /usr/etc/talkd talkd 
ntalk    dgram  udp wait   root    /usr/etc/ntalkd ntalkd 
echo     stream tcp nowait root    internal 
discard  stream tcp nowait root    internal 
chargen  stream tcp nowait root    internal 
daytime  stream tcp nowait root    internal 
time     stream tcp nowait root    internal 
echo     dgram  udp wait   root    internal 
discard  dgram  udp wait   root    internal 
chargen  dgram  udp wait   root    internal 
daytime  dgram  udp wait   root    internal 
time     dgram  udp wait   root    internal</PRE
></BLOCKQUOTE
><p class="para">Each line contains at least six fields, separated by spaces
or tabs:</P
><dl class="variablelist"><dt class="term">Service name</DT
><dd class="listitem"><p class="para">The service name that appears in the <em class="emphasis">/etc/services</EM
>
file. <em class="emphasis">inetd</EM
> uses this name to determine which
port number it should listen to.</P
></DD
><dt class="term">Socket type</DT
><dd class="listitem"><p class="para">Whether the service expects to communicate via a
stream or on a datagram basis.</P
></DD
><dt class="term">Protocol type</DT
><dd class="listitem"><p class="para">Whether the service expects to use <span class="acronym">TCP</SPAN
>-
or <span class="acronym">UDP</SPAN
>-based communications. <span class="acronym">TCP</SPAN
>
is used with <em class="emphasis">stream</EM
> sockets, while <span class="acronym">UDP</SPAN
>
is used with <em class="emphasis">dgram</EM
>, or datagrams.</P
></DD
><dt class="term">Wait/nowait</DT
><dd class="listitem"><p class="para">If the entry is &quot;wait,&quot; the server
is expected to process all subsequent connections received on the
socket. If &quot;nowait&quot; is specified, <em class="emphasis">inetd</EM
>
will <em class="emphasis">fork</EM
>()
and <em class="emphasis">exec</EM
>()<em class="emphasis"></EM
>a new server process for each additional datagram or
connection request received. Most <span class="acronym">UDP</SPAN
> services
are wait, while most <span class="acronym">TCP</SPAN
> services are nowait,
although this is not a firm rule. Although some <i class="systemitem">man</I
> pages indicate that this
field is only used with datagram sockets, the field is actually
interpreted for all services.</P
></DD
><dt class="term">User</DT
><dd class="listitem"><p class="para">Specifies the <span class="acronym">UID</SPAN
> that the server
process is to be run as. This can be <em class="emphasis">root </EM
>(<span class="acronym">UID</SPAN
>
0), <em class="emphasis">daemon</EM
> (<span class="acronym">UID</SPAN
> 1), <em class="emphasis">nobody</EM
>
(often <span class="acronym">UID</SPAN
> -2 or 65534), or an actual
user of your system. This field allows server processes to be run
with fewer permissions than <em class="emphasis">root</EM
>, to minimize
the damage that could be done if a security hole is discovered in
a server program.</P
></DD
><dt class="term">Command name and arguments</DT
><dd class="listitem"><p class="para">The remaining arguments specify the command name
to execute and the arguments that the command is passed, starting
with <em class="emphasis">argv[0]</EM
>.</P
></DD
></DL
><p class="para"><a class="indexterm" name="AUTOID-21678"></A
><a class="indexterm" name="AUTOID-21681"></A
><a class="indexterm" name="AUTOID-21684"></A
>Some services,
like <em class="emphasis">echo</EM
>, <em class="emphasis">time</EM
>, and <em class="emphasis">discard</EM
>,
are listed as &quot;internal.&quot; These services are fairly
trivial, and they are handled internally by <em class="emphasis">inetd</EM
>
rather than requiring a special program to be run. Although these
services are useful for testing, they can also be used for denial
of service attacks. You should disable them.</P
><p class="para">You should routinely check the entries in the <i class="filename">/etc/inetd.conf</I
>
file and verify that you understand why each of the services in
the file is being offered to the Internet. Sometimes, when attackers
break into systems, they create new services to make future break-ins
easier. If you cannot explain why a service is being offered at
your site, you may wish to disable it until you know what purpose
it serves. <a class="indexterm" name="AUTOID-21693"></A
><a class="indexterm" name="AUTOID-21695"></A
></P
></DIV
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch16_05.htm" title="16.5 Summary"><img src="../gifs/txtpreva.gif" alt="Previous: 16.5 Summary" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Practical UNIX &amp; Internet Security"><img src="../gifs/txthome.gif" alt="Practical UNIX &amp; Internet Security" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch17_02.htm" title="17.2 Controlling Access to Servers"><img src="../gifs/txtnexta.gif" alt="Next: 17.2 Controlling Access to Servers" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">16.5 Summary</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">17.2 Controlling Access to Servers</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.htm" title="The Networking CD Bookshelf">Library Home</A
> | <a href="../dnsbind/index.htm" title="DNS &amp; BIND">DNS &amp; BIND</A
> | <a href="../tcpip/index.htm" title="TCP/IP Network Administration">TCP/IP</A
> | <a href="../sendmail/index.htm" title="sendmail">sendmail</A
> | <a href="../smdref/index.htm" title="sendmail Desktop Reference">sendmail Reference</A
> | <a href="../firewall/index.htm" title="Building Internet Firewalls">Firewalls</A
> | <a href="index.htm" title="Practical UNIX &amp; Internet Security">Practical Security</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
