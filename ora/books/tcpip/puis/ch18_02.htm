<html><head>
<title>[Chapter 18] 18.2 Running a Secure Server</TITLE>
<meta name="DC.title" content="Practical UNIX &amp; Internet Security"><meta name="DC.creator" content="Simson Garfinkel &amp; Gene Spafford"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-02-04T00:14:22Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-148-8" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch18_01.htm" title="18. WWW Security"><link rel="prev" href="ch18_01.htm" title="18.1 Security and the World Wide Web"><link rel="next" href="ch18_03.htm" title="18.3 Controlling Access to Files on Your Server"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Practical UNIX &amp; Internet Security" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Practical UNIX &amp; Internet Security"><area shape="RECT" coords="467,0,514,18" href="../search/psrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch18_01.htm" title="18.1 Security and the World Wide Web"><img src="../gifs/txtpreva.gif" alt="Previous: 18.1 Security and the World Wide Web" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 18<br>WWW Security</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch18_03.htm" title="18.3 Controlling Access to Files on Your Server"><img src="../gifs/txtnexta.gif" alt="Next: 18.3 Controlling Access to Files on Your Server" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="PUIS-CHP-18-SECT-2">18.2 Running a Secure Server</A
></H2
><p class="para"><a class="indexterm" name="AUTOID-24375"></A
><a class="indexterm" name="AUTOID-24377"></A
>Web servers are designed to receive anonymous
requests from unauthenticated hosts on the Internet and to deliver
the requested information in a quick and efficient manner. As such,
they provide a portal into your computer that can be used by friend
and foe alike.</P
><p class="para">No piece of software is without its risk. Web servers, by
their nature, are complicated programs. Furthermore, many organizations
use Web servers with source code that is freely available over the
Internet. Although this means that the source code is available
for inspection by the organization, it also means that an attacker
can scan that same source code and look for vulnerabilities.</P
><p class="para">The ability to add functions to a Web server through the use
of <a class="indexterm" name="AUTOID-24383"></A
><a class="indexterm" name="AUTOID-24386"></A
><a class="indexterm" name="AUTOID-24389"></A
><a class="indexterm" name="AUTOID-24393"></A
>
<span class="acronym">CGI</SPAN
> scripts
tremendously complicates their security. While a <span class="acronym">CGI</SPAN
>
script can add new features to a Web server, it can also introduce
security problems of its own. For example, a Web server may be configured
so that it can only access files stored in a particular directory
on your computer, but a user may innocently install a <span class="acronym">CGI</SPAN
>
script that allows outsiders to read any file on your computer.
Furthermore, because many users do not have experience in writing
secure programs, it is possible (and likely) that locally written
<span class="acronym">CGI</SPAN
> scripts will contain bugs allowing an outsider
to execute arbitrary commands on your system. Indeed, several books
that have been published on <span class="acronym">CGI</SPAN
> programming have
included such flaws.</P
><p class="para">Because of the richness of its tools, the plethora of programming
languages, and the ability of multiple users to be logged in at
the same time from remote sites over a network, the <span class="acronym">UNIX</SPAN
><a class="indexterm" name="AUTOID-24403"></A
><a class="indexterm" name="AUTOID-24406"></A
>
operating system is a remarkably bad choice for running secure Web
servers. Because many PC-based operating systems share many of these
characteristics, they are also not very good choices. Experience
has shown that the most secure Web server is a computer that runs
a Web server and no other applications, that does not have a readily
accessible scripting language, and that does not support remote
logins. In practice, this describes an Apple <a class="indexterm" name="AUTOID-24409"></A
><a class="indexterm" name="AUTOID-24411"></A
><a class="indexterm" name="AUTOID-24414"></A
>
Macintosh computer running <span class="acronym">M</SPAN
>ac<span class="acronym">HTTP</SPAN
>,
WebStar, or a similar Web server. According to recent surveys, such
computers comprise as many as 15% of the Web servers on
the Internet.</P
><p class="para">Of course, there are many advantages to running a Web server
on a <span class="acronym">UNIX</SPAN
> computer instead of a Macintosh. <span class="acronym">UNIX</SPAN
>
generally runs faster than MacOS on comparable hardware, and <span class="acronym">UNIX</SPAN
>
is available for hardware platforms that run faster than PowerPC-based
computers. Furthermore, it is generally easier for organizations
to integrate <span class="acronym">UNIX</SPAN
>-based Web servers with their
existing information infrastructure, creating interesting possibilities
for Web offerings. Finally, more <span class="acronym">MIS</SPAN
> professionals
have familiarity with building <span class="acronym">UNIX</SPAN
>-based Internet
servers than with building MacOS-based ones. Nonetheless, we suggest
that the security-conscious administrator give the Mac-based approach
serious thought.</P
><p class="para">To build a secure Web server on any platform, you must be
able to assure a variety of things, including:</P
><ul class="itemizedlist"><li class="listitem"><p class="para">Network users must <em class="emphasis">never</EM
>
be able to execute arbitrary programs or shell commands on your
server.</P
></LI
><li class="listitem"><p class="para"><span class="acronym">CGI</SPAN
> scripts that run on your
server must perform either the expected function or return an error
message. Scripts should expect and be able to handle any maliciously
tailored input.</P
></LI
><li class="listitem"><p class="para">In the event that your server is compromised, an
attacker should not be able to use it for further attacks against
your organization.</P
></LI
></UL
><p class="para">The following sections explore a variety of techniques for
dealing with these issues.</P
><div class="sect2"><h3 class="sect2"><a class="title" name="PUIS-CHP-18-SECT-2.1">18.2.1 The Server's UID</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-24439"></A
><a class="indexterm" name="AUTOID-24442"></A
><a class="indexterm" name="AUTOID-24445"></A
><a class="indexterm" name="AUTOID-24447"></A
><a class="indexterm" name="AUTOID-24450"></A
>Most
Web servers are designed to be started by the superuser. The server
needs to be run as root so it can listen to requests on port 80,
the standard <span class="acronym">HTTP</SPAN
> port.</P
><p class="para">Once the server starts running, it changes its <span class="acronym">UID</SPAN
>
to the username that is specified in a configuration file. In the
case of the <span class="acronym">NCSA</SPAN
> server, this configuration file
is called <i class="filename">conf/httpd.conf</I
>. In the file, there are three
lines that read:</P
><blockquote class="screen"><pre class="screen"># User/Group: The name (or #number) of the user/group to run httpd as.
User http 
Group http</PRE
></BLOCKQUOTE
><p class="para">This username should <i class="systemitem">not</I
>
be <i class="filename">root</I
>. Instead, the user and group should specify a user that
has no special access on your server.</P
><p class="para">In the example above, the user changes his <span class="acronym">UID</SPAN
>
to the <i class="filename">http </I
>user before accessing files or
running <span class="acronym">CGI</SPAN
> scripts. If you have a <span class="acronym">CGI</SPAN
>
script that is to be run as superuser (and you should think very
carefully about doing so), it must be <span class="acronym">SUID</SPAN
> <i class="filename">root</I
>.
Before you write such a script, carefully read <a class="xref" href="ch23_01.htm" title="Writing Secure SUID and Network Programs">Chapter 23</A
>.</P
><blockquote class="note"><p class="para"><strong>NOTE:</STRONG
> <em class="emphasis">Do not run your server as root!</EM
>
Although your server must be started by <i class="filename">root</I
>, the <i class="filename">http.conf</I
> file
must not contain the line &quot;User root&quot;. If it does,
then every script that your Web server executes will be run as superuser,
creating many potential problems.</P
></BLOCKQUOTE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PUIS-CHP-18-SECT-2.2">18.2.2 Understand Your Server's Directory Structure</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-24478"></A
>Web
servers are complicated pieces of software. They use many files
in many directories. The contents of some directories are made available
over the network. The contents of other directories must <em class="emphasis">not</EM
>
be made available over the network, and, for safety, should not
be readable by users on your system. To run a secure server, you
must understand the purpose of each directory, and the necessary
protections that it must have.</P
><p class="para">The <span class="acronym">NCSA</SPAN
> sever has six directories:</P
><table class="informaltable"><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1"><p class="para">Directory</P
></TH
><th class="entry" align="LEFT" rowspan="1" colspan="1"><p class="para">Purpose</P
></TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">cgi-bin</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Holds <span class="acronym">CGI</SPAN
> scripts</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">conf</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Holds server configuration files</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">htdocs</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Holds Web documents</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">icons</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Holds Web documents</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">logs</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Records server activity</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">support</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Holds supplemental programs for the server</P
></TD
></TR
></TBODY
></TABLE
><p class="para">Many sources recommend creating a user called <a class="indexterm" name="AUTOID-24525"></A
><a class="indexterm" name="AUTOID-24527"></A
><a class="indexterm" name="AUTOID-24530"></A
><a class="indexterm" name="AUTOID-24533"></A
><a class="indexterm" name="AUTOID-24537"></A
>
www and a group called www which
can be used by the Web administrator to administrate the Web server:</P
><blockquote class="screen"><pre class="screen">drwxr-xr-x   5 www      www          1024 Aug  8 00:01 cgi-bin/
drwxr-x---   2 www      www          1024 Jun 11 17:21 conf/
-rwx------   1 www      www        109674 May  8 23:58 httpd
drwxrwxr-x   2 www      www          1024 Aug  8 00:01 htdocs/
drwxrwxr-x   2 www      www          1024 Jun  3 21:15 icons/
drwxr-x---   2 www      www          1024 May  4 22:23 logs/</PRE
></BLOCKQUOTE
><p class="para">This is an interesting approach, but we don't think
that it adds much in the way of security. Because the <kbd class="command">httpd</KBD
> program
is run as <i class="filename">root</I
>, anybody who has the ability to modify this program
has the ability to become the superuser. This is a particular vulnerability
if you should ever move the server or configuration files onto an
<span class="acronym">NFS</SPAN
>-exported partition. Therefore, we recommend
acknowledging this fact, and setting up your Web server directory
with <i class="filename">root</I
> ownership:</P
><blockquote class="screen"><pre class="screen">drwx--x--x  8 root     www         1024 Nov 23 09:25 cgi-bin/
drwx------  2 root     www         1024 Nov 26 11:00 conf/
drwxr-xr-x  2 root     www         1024 Dec  7 18:22 htdocs/
-rwx------  1 root     www       482168 Aug  6 00:29 httpd*
drwxrwxr-x  2 root     www         1024 Dec  1 18:15 icons/
drwx------  2 root     www         1024 Nov 25 16:18 logs/
drwxr-xr-x  2 root     www         1024 Aug  6 00:31 support/</PRE
></BLOCKQUOTE
><p class="para">Notice that the <a class="indexterm" name="AUTOID-24549"></A
>
<i class="filename">cgi-bin</I
>
directory has access mode 711; this allows the httpd server to run
programs that it contains, but it doesn't allow a person
on the server to view the contents of the directory. More restrictions
make probing for vulnerabilities more difficult.</P
><div class="sect3"><h4 class="sect3"><a class="title" name="PUIS-CHP-18-SECT-2.2.1">18.2.2.1 Configuration files</A
></H4
><p class="para">Inside the <a class="indexterm" name="AUTOID-24555"></A
><a class="indexterm" name="AUTOID-24557"></A
>
<i class="filename">conf</I
> directory, the <span class="acronym">NCSA</SPAN
>
server has the following files:</P
><table class="informaltable"><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1"><p class="para">File</P
></TH
><th class="entry" align="LEFT" rowspan="1" colspan="1"><p class="para">Purpose</P
></TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><i class="filename">access.conf</I
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Controls access to the server's
files.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><i class="filename">httpd.conf</I
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Configuration file for the server.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><i class="filename">mime.types</I
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Determines the mapping of file extensions
to <span class="acronym">MIME</SPAN
> file types.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><i class="filename">srm.conf</I
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Server Resource Map. This file contains
more server configuration information. It determines the document
root, whether or not users can have their own Web directories, the
icon that is used for directory listings, the location of your <span class="acronym">CGI</SPAN
>
script directory, document redirections, and error messages.</P
></TD
></TR
></TBODY
></TABLE
><p class="para">Because the information in these files can be used to subvert
your server or your entire system, you should protect the scripts
so they can only be read and modified by the superuser:</P
><blockquote class="screen"><pre class="screen">-rw-------  1 root     wheel        954 Aug  6 01:00 access.conf
-rw-------  1 root     wheel       2840 Aug  6 01:05 httpd.conf
-rw-------  1 root     wheel       3290 Aug  6 00:30 mime.types
-rw-------  1 root     wheel       4106 Nov 26 11:00 srm.conf</PRE
></BLOCKQUOTE
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PUIS-CHP-18-SECT-2.2.2">18.2.2.2 Additional configuration issues</A
></H4
><p class="para">Besides the setting of permissions, you may wish to enable
or disable the following configuration options:</P
><dl class="variablelist"><dt class="term">Automatic directory listings</DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-24608"></A
><a class="indexterm" name="AUTOID-24611"></A
><a class="indexterm" name="AUTOID-24614"></A
><a class="indexterm" name="AUTOID-24617"></A
>Most Web servers will automatically
list the contents of a directory if a file called <i class="filename">index.html</I
>
is not present in directory. This feature can cause security problems,
however, as it gives outsiders the ability to scan for files and
vulnerabilities on your system.</P
></DD
><dt class="term">Symbolic-link following</DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-24624"></A
><a class="indexterm" name="AUTOID-24627"></A
><a class="indexterm" name="AUTOID-24629"></A
><a class="indexterm" name="AUTOID-24632"></A
>Some
servers allow you to follow symbolic links outside of the Web server's
document tree. This allows somebody who has access to your Web server's
tree to make other documents on your computer available for Web
access. You may not want people to be able to do this, so don't
enable the following of symbolic links. Alternatively, you may wish
to set your Web server's symlinks &quot;If Owner Match&quot;
option, so that links are followed only if the owner of the link
matches the owner of the file that it points to.</P
></DD
><dt class="term">Server-side includes</DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-24639"></A
><a class="indexterm" name="AUTOID-24641"></A
>Server-side includes are directives that can
be embedded in an <span class="acronym">HTML</SPAN
> document. The includes
are processed by the <span class="acronym">HTML</SPAN
> server before the document
is sent to a requesting client. Server-side includes can be used
to include other documents or to execute documents, and output the
result.</P
><p class="para">Here are two sample server-side includes that demonstrate
why their use is a bad idea:</P
><p class="para">&lt;!--#include file=&quot;/etc/passwd&quot;&gt;</P
><p class="para">&lt;!--#exec cmd=&quot;rm -rf
/&amp;;cat /etc/passwd&quot;&gt;</P
><p class="para">The first include provides an attacker with the
contents of your <i class="filename">/etc/passwd</I
> file, allowing them
to wage a password-cracking attack. The second launches a background
process that attempts to delete every writable file on your computer.
<em class="emphasis">Then</EM
> it provides the attacker with a copy of
your <i class="filename">/etc/passwd</I
> file.</P
><p class="para">Fortunately, server-side includes must be specifically
enabled on most Web servers. They are normally turned off.</P
></DD
></DL
><p class="para">Some servers, such as the <span class="acronym">NCSA</SPAN
> server,
allow you to limit processing of server-side includes to specific
directories. The <span class="acronym">NCSA</SPAN
> server uses the <i class="filename">Options</I
> directive to control includes. Specify the option <i class="filename">Includes</I
>
for all server-side includes; specify the option <i class="filename">IncludesNOEXEC</I
>
to specify textual includes but to disable the execution of commands.</P
><blockquote class="note"><p class="para"><strong>NOTE:</STRONG
> Server-side includes should <em class="emphasis">never</EM
>
be enabled for script directories. This is because it is possible
that a script will output something that the user has typed, and
the Web server will attempt to interpret the output, giving an attacker
the ability to include arbitrary files or to execute arbitrary commands.<a class="indexterm" name="AUTOID-24663"></A
></P
></BLOCKQUOTE
></DIV
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PUIS-CHP-18-SECT-2.3">18.2.3 Writing Secure CGI Scripts and Programs[1]</A
></H3
><blockquote class="footnote"><p class="para">[1] The
difference between programs and scripts is not always simple to
discern, and the terms are not used consistently by everyone. We
define a <i class="filename">program</I
> to be code that must be compiled
and linked before execution, and a script as a program that is usually
interpreted without first being compiled into binary.</P
></BLOCKQUOTE
><p class="para"><a class="indexterm" name="AUTOID-24672"></A
><a class="indexterm" name="AUTOID-24675"></A
>Writing a secure <span class="acronym">CGI</SPAN
>
script has all of the same problems as writing a secure <span class="acronym">SUID</SPAN
>
program or network server, plus many more. That's because
there can be unexpected interactions between the Web environment,
the Web server and the <span class="acronym">CGI</SPAN
> script, creating problems
with the combined system where no problems obviously were present
in any single part. Therefore, we recommend that you read <a class="xref" href="ch23_01.htm" title="Writing Secure SUID and Network Programs">Chapter 23</A
>
 before you embark on writing <span class="acronym">CGI</SPAN
> scripts.</P
><p class="para">In addition to the information that we describe in that chapter,
there are additional issues in writing programs for the World Wide
Web.</P
><p class="para">Most security holes are not intentional. Nonetheless, the
more people who have the ability to write scripts on your Web server,
the greater the chance that one of those scripts will contain a
significant flaw.</P
><ul class="itemizedlist"><li class="listitem"><p class="para">Do not allow users to place scripts
on your server unless a qualified security professional has personally
read through the scripts and assured you of their safety.</P
></LI
></UL
><div class="sect3"><h4 class="sect3"><a class="title" name="PUIS-CHP-18-SECT-2.3.1">18.2.3.1 Do not trust the user's browser!</A
></H4
><p class="para"><span class="acronym">HTML</SPAN
> includes the ability to display selection
lists, limit the length of fields to a certain number of characters,
embed hidden data within forms, and specify variables that should
be provided to <span class="acronym">CGI</SPAN
> scripts. Nevertheless, you
cannot make your <span class="acronym">CGI</SPAN
> script depend on any of
these restrictions. That is because any <span class="acronym">CGI</SPAN
> script
can be run by directly requesting the script's <span class="acronym">URL</SPAN
>;
attackers do not need to go through your form or use the interface
that you provide.</P
><p class="para">Be especially careful of the following:</P
><ul class="itemizedlist"><li class="listitem"><p class="para">If you create a <a class="indexterm" name="AUTOID-24700"></A
>
selection list, the value that is returned for
the input field will not necessarily match the allowable values
that you have defined.</P
></LI
><li class="listitem"><p class="para">If you specify a maximum length for a <a class="indexterm" name="AUTOID-24704"></A
>
variable, the length
of the variable that is provided to your script may be significantly
longer. (What would your script do if provided with a username that
is 4000 characters long?)</P
></LI
><li class="listitem"><p class="para">Variables that are provided to your script may have
names not defined in your script.</P
></LI
><li class="listitem"><p class="para">The values for variables that are provided may contain
special characters.</P
></LI
><li class="listitem"><p class="para">The user may view <a class="indexterm" name="AUTOID-24713"></A
>
data that is marked as &quot;hidden.&quot;</P
></LI
><li class="listitem"><p class="para">If you use <a class="indexterm" name="AUTOID-24718"></A
>
cookies
or special hidden tags to maintain state on your server, your script
may receive cookies or tags that it never created.</P
></LI
></UL
><p class="para">Attackers are by definition malicious. They do not follow
the rules. Never trust anything that is provided over the network.</P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PUIS-CHP-18-SECT-2.3.2">18.2.3.2 Testing is not enough!</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-24724"></A
><a class="indexterm" name="AUTOID-24727"></A
>One of the reasons that it is surprisingly easy
to create an unsecure <span class="acronym">CGI</SPAN
> script is that it is
very difficult to test your scripts against the wide variety of
<span class="acronym">HTTP</SPAN
> clients available. For example, most client
programs will &quot;escape,&quot; or specially encode, characters
such as the <a class="indexterm" name="AUTOID-24732"></A
>
backquote
(`), which are specially interpreted by the <span class="acronym">UNIX</SPAN
>
shell. As a result, many <span class="acronym">CGI</SPAN
> programmers do not
expect the unencoded characters to be present in the input stream
for their applications, and they do not protect their scripts against
the possibility that the characters <em class="emphasis">are </EM
>present.
Nevertheless, it is easy for the characters to be in the input stream,
either as the result of a bug in a particular Web browser or, more
likely, because a malicious attacker is attempting to subvert your
<span class="acronym">CGI</SPAN
> script and gain control of your server.</P
><ul class="itemizedlist"><li class="listitem"><p class="para">Check all values that are provided
to your program for special characters and appropriate length.</P
></LI
></UL
><p class="para">By all values, we mean <em class="emphasis">all values</EM
>. This
includes the contents of environment variables, host addresses,
host names, <span class="acronym">URLS</SPAN
>, user-supplied data, values
chosen from selection lists, and even data that your script has
inserted onto a <span class="acronym">WWW</SPAN
> form through the use of the
<em class="emphasis">hidden</EM
> data type.</P
><p class="para">Consider the case of a <span class="acronym">CGI</SPAN
> script that
creates a series of log files for each host that contacts your <span class="acronym">WWW</SPAN
>
server. The name of the log file might be the following: <i class="filename">logfile/{hostname}.</I
>
What will this program do if it is contacted by the &quot;host&quot; <i class="filename">../../../../etc/passwd.company.com</I
>?
Such a script, if improperly constructed, could end up appending
a line to a system's <i class="filename">/etc/passwd</I
> file.
This could then be used as a way of creating unauthorized accounts
on the system.</P
><ul class="itemizedlist"><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-24755"></A
><a class="indexterm" name="AUTOID-24757"></A
><a class="indexterm" name="AUTOID-24759"></A
><a class="indexterm" name="AUTOID-24761"></A
>Beware of <i class="filename">system(  )</I
>, <i class="filename">popen (  )</I
>, pipes, backquotes
(`), and Perl's <i class="filename">eval  (  )</I
>
function.</P
></LI
></UL
><p class="para">Many programming languages, including C, <i class="filename">ksh</I
>,
<i class="filename">sh</I
>, <i class="filename">csh</I
>, and Perl, provide
the means to spawn subprocesses. You should try to avoid using these
features when writing <span class="acronym">CGI</SPAN
> scripts. If you <em class="emphasis">must</EM
>
spawn a subprocess, avoid passing through any strings that are provided
by the user. If you <em class="emphasis">must</EM
> pass strings from
the user to the subprocess, be sure that it does not pass shell
meta characters including the `$|;&gt;*&lt;&amp;&gt;
characters.</P
><p class="para">It is generally better to specify a list of allowable characters
than to specify a list of dangerous characters. If you forget to
specify an allowable character, there is no real harm done. But
if you forget to specify a dangerous character, such as a backquote,
you can compromise the security of your entire system.</P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PUIS-CHP-18-SECT-2.3.3">18.2.3.3 Sending mail</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-24777"></A
>If you
are writing a <span class="acronym">CGI</SPAN
> script that allows a user to
send mail, use the <i class="filename">/usr/lib/sendmail</I
> program
to send the mail, rather than <i class="filename">/bin/mailx</I
> or
<i class="filename">/usr/ucb/mail</I
>. The reason is that <i class="filename">/usr/lib/sendmail</I
>
does not have shell escapes, whereas the other mailers do.</P
><p class="para">Here is a bit of Perl that you can use to send mail securely.
It bypasses the shell by using <a class="indexterm" name="AUTOID-24786"></A
>
<i class="filename">exec
 (  )</I
> with a fixed string to run <i class="filename">/usr/lib/sendmail</I
>directly:</P
><blockquote class="screen"><pre class="screen"> open (WRITE, &quot;|-&quot;)
|| exec (&quot;usr/lib/sendmail&quot;, &quot;-oi,&quot; &quot;-t&quot;)
|| die &quot;Can't fork$!\n&quot;:

print WRITE &quot;To: $address\n&quot;;
print WRITE &quot;Subject: $subject\n&quot;;
print WRITE &quot;From: $sender\n&quot;;
print WRITE &quot;\n$message\n.\n&quot;;
close(WRITE);</PRE
></BLOCKQUOTE
><p class="para">There are many commands in Perl that will run the shell, possibly
without your knowledge. These include <a class="indexterm" name="AUTOID-24792"></A
><a class="indexterm" name="AUTOID-24794"></A
><a class="indexterm" name="AUTOID-24796"></A
><a class="indexterm" name="AUTOID-24798"></A
>
<kbd class="command">system (  ),</KBD
>
<kbd class="command">eval (  )</KBD
>, pipes, backquotes, and, occasionally,
<kbd class="command">exec (  )</KBD
> (if shell meta characters are present
on the command line).</P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PUIS-CHP-18-SECT-2.3.4">18.2.3.4 Tainting with Perl</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-24806"></A
><a class="indexterm" name="AUTOID-24809"></A
><a class="indexterm" name="AUTOID-24812"></A
>If you are using the
Perl programming language, you can use Perl's &quot;tainting&quot;
facility to track information that has been provided by the user.
Perl marks such information as &quot;tainted.&quot; The
only way to untaint information is to match it using a Perl regular
expression, and then to copy out the matched values using Perl's
string match variables.</P
><p class="para">For example, if you have a name that has been provided by
the user, you can untaint the value to be sure that it only contains
letters, numbers, commas, spaces, and periods by using the following
Perl statements:</P
><blockquote class="screen"><pre class="screen">$tainted_username =~ m/([a-zA-Z. ]*)/;
$untainted_username = $1;</PRE
></BLOCKQUOTE
><p class="para">You can use the following to extract an email address:</P
><blockquote class="screen"><pre class="screen">$tainted_email =~ /([\w-.%]+\@[\w.-]+)/;
$untainted_email = $1;</PRE
></BLOCKQUOTE
><p class="para">There are two ways to enable tainting. If you are using Perl
4, you should invoke the<i class="filename"> <a class="indexterm" name="AUTOID-24820"></A
>
taintperl</I
>
command instead of the Perl command, by placing the following statement
(or something similar) at the beginning of your file:</P
><blockquote class="screen"><pre class="screen">#!/usr/local/bin/taintperl</PRE
></BLOCKQUOTE
><p class="para"><a class="indexterm" name="AUTOID-24824"></A
>If you are using
Perl version 5, you accomplish the same result by using the -T flag:</P
><blockquote class="screen"><pre class="screen">#!/usr/local/bin/perl -T</PRE
></BLOCKQUOTE
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PUIS-CHP-18-SECT-2.3.5">18.2.3.5 Beware stray CGI scripts</A
></H4
><p class="para">Most Web servers can be configured so that all <span class="acronym">CGI</SPAN
>
scripts must be confined to a single directory. We recommend this
configuration, because it makes it easier for you to find and examine
all of the <span class="acronym">CGI</SPAN
> scripts on your system. We do
not recommend the practice of allowing any file on the Web server
with the extension &quot;<i class="filename">.cgi</I
>&quot;
to be run as a <span class="acronym">CGI</SPAN
> script.</P
><p class="para">Instead, we recommend that you:</P
><ul class="itemizedlist"><li class="listitem"><p class="para">Configure your Web server so that
all <span class="acronym">CGI</SPAN
> scripts must be placed in a single directory
(typically, the directory is called <i class="filename">cgi-bin</I
>).</P
></LI
><li class="listitem"><p class="para">Use a program such as Tripwire (see <a class="xref" href="ch09_01.htm" title="Integrity Management">Chapter 9, <cite class="chapter">Integrity Management</CITE
></A
>) to monitor for unauthorized changes to these
scripts.</P
></LI
><li class="listitem"><p class="para">Allow limited access to this directory and its contents.
Local users should not be allowed to install or remove scripts,
or to edit existing scripts without administrative review. You also
may want to prevent these scripts from being read, to prevent someone
from snooping.</P
></LI
><li class="listitem"><p class="para">Remove the backup <a class="indexterm" name="AUTOID-24848"></A
><a class="indexterm" name="AUTOID-24852"></A
><a class="indexterm" name="AUTOID-24855"></A
><a class="indexterm" name="AUTOID-24858"></A
><a class="indexterm" name="AUTOID-24861"></A
>
files that are automatically
generated by your editor. Many system administrators use text editors
such as Emacs to edit scripts that are in place on the running server.
Frequently, this leaves behind backup files, with names such as
<i class="filename">start~</I
> or <i class="filename">create-account~</I
>.
These backup files can be executed an attacker, usually with unwanted
results.</P
></LI
></UL
></DIV
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PUIS-CHP-18-SECT-2.4">18.2.4 Keep Your Scripts Secret!</A
></H3
><p class="para">Throughout this book, we have railed against the practice
of <i class="firstterm"><a class="indexterm" name="AUTOID-24870"></A
>security
through obscurity</I
>&nbsp;- the practice of basing some
of the security of your system upon undocumented aspects. Nevertheless,
the fact remains that the ready availability of <span class="acronym">UNIX</SPAN
>
source code, as opposed to the relative &quot;obscurity&quot;
of the source code for other operating systems such as <span class="acronym">VMS</SPAN
>
or Windows/NT, means that potential attackers can search
through the operating system looking for avenues of attack, and
then craft their attacks in such a way as to guarantee the maximum
possible access. One good way to prevent these sorts of attacks
is to limit the access to source code.</P
><p class="para">Because it is so easy to make a mistake when writing a <span class="acronym">CGI</SPAN
>
program, it behooves sites to keep your <span class="acronym">CGI</SPAN
> scripts
and programs confidential. This does not guarantee security for
buggy scripts: a determined attacker can still probe and, frequently,
find flaws with your system. However, it does significantly increase
the work that is involved. Determined attackers will still get through,
but casual attackers may move on to other, more inviting systems.</P
><ul class="itemizedlist"><li class="listitem"><p class="para">Prevent network users from reading
the contents of your <span class="acronym">CGI</SPAN
> scripts. This will help
keep an attacker from analyzing the scripts to discover security
flaws. This is especially important for scripts that are written
inside your organization, and thus might not be subject to the same
degree of certification and checking as scripts that are written
for publication or redistribution.</P
></LI
></UL
><div class="sect3"><h4 class="sect3"><a class="title" name="PUIS-CHP-18-SECT-2.4.1">18.2.4.1 Beware mixing HTTP with anonymous FTP</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-24885"></A
><a class="indexterm" name="AUTOID-24888"></A
><a class="indexterm" name="AUTOID-24891"></A
>Many
sites use the same directory for storing documents that are accessed
through anonymous <span class="acronym">FTP</SPAN
> and the World Wide Web.
For example, you may have a directory called <i class="filename">/NetDocs</I
> on
your server that is both the home directory of the <span class="acronym">FTP</SPAN
>
user and the root directory of your Web server. This would allow
files to be referred to by two <span class="acronym">URLS</SPAN
>, such as
<a class="systemitem.url" href="../../../../../../../server.com/nosmis/myfile.html">http://server.com/nosmis/myfile.html</A
>
or <a class="systemitem.url" href="../../../WebStripper/protected.html#link=ftp://server.com/nosmis/myfile.html.">ftp://server.com/nosmis/myfile.html.</A
></P
><p class="para">The primary advantage of <span class="acronym">HTTP</SPAN
> over <span class="acronym">FTP</SPAN
>
is speed and efficiency. <span class="acronym">HTTP</SPAN
> is optimized for
anonymous access from a stateless server. <span class="acronym">FTP</SPAN
>,
on the other hand, had anonymous access added as an afterthought,
and requires that the server maintain a significant amount of state
for the client</P
><p class="para">Mixing <span class="acronym">HTTP</SPAN
> and <span class="acronym">FTP</SPAN
>
directories poses a variety of security issues, including:</P
><ul class="itemizedlist"><li class="listitem"><p class="para">Allowing anonymous <span class="acronym">FTP</SPAN
>
access to the <span class="acronym">HTTP</SPAN
> directories gives users a
means of bypassing any restrictions on document access that the
Web server may be providing. Thus, if you have confidential documents
stored on your Web server, they may not remain confidential for
long with this arrangement.</P
></LI
><li class="listitem"><p class="para">If an attacker can download your <span class="acronym">CGI</SPAN
>
scripts with <span class="acronym">FTP</SPAN
>, he can search them for avenues
for attack.</P
></LI
><li class="listitem"><p class="para">You must be very sure that there is no way for an
<span class="acronym">FTP</SPAN
> user to upload a script that will be run
on your server.</P
></LI
><li class="listitem"><p class="para">The <i class="filename">/etc/passwd </I
>file present
for your <span class="acronym">FTP</SPAN
> service might be visible to someone
using the <span class="acronym">WWW</SPAN
> service, thus leading to a compromise
of its contents. If you have included any real passwords in that
file, they will be available to the client for remote password cracking.<a class="indexterm" name="AUTOID-24926"></A
><a class="indexterm" name="AUTOID-24929"></A
></P
></LI
></UL
></DIV
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PUIS-CHP-18-SECT-2.5">18.2.5 Other Issues</A
></H3
><p class="para">There are many other measures that you can take to make your
server more secure. For example, you can limit the use of the computer
so that it is solely a Web server. This will make it harder for
an attacker to break in to your server and, if an attacker does,
it will limit the amount of damage that he can do to the rest of
your network.</P
><p class="para">If you do chose to make your server a stand-alone computer,
read over <a class="xref" href="ch21_01.htm" title="Firewalls">Chapter 21, <cite class="chapter">Firewalls</CITE
></A
>, for a list of techniques
that you can use to isolate your computer from your network and
make the computer difficult for an attacker to use. In particular,
you may wish to consider the following options:</P
><ul class="itemizedlist"><li class="listitem"><p class="para">Delete all unnecessary accounts.</P
></LI
><li class="listitem"><p class="para">Do not <span class="acronym">NFS</SPAN
> mount or export any
directories.</P
></LI
><li class="listitem"><p class="para">Delete all compilers.</P
></LI
><li class="listitem"><p class="para">Delete all utility programs that are not used during
boot or by the Web server.</P
></LI
><li class="listitem"><p class="para">Provide as few network services as possible.</P
></LI
><li class="listitem"><p class="para">Do not run a mail server.</P
></LI
></UL
><p class="para">Another option, but one that may require a non-trivial amount
of work, is to place your <span class="acronym">WWW</SPAN
> server and all
files in a separate directory structure. The <span class="acronym">WWW</SPAN
>
server is then wrapped with a small program that does a <kbd class="command">chroot ( )</KBD
>
to the directory (see <a class="xref" href="ch22_01.htm" title="Wrappers and Proxies">Chapter 22, <cite class="chapter">Wrappers and Proxies</CITE
></A
>). Thus, if some way is found to break out of the controls
you have placed on the server, the regular filesystem is hidden
and protected from attack. Some <span class="acronym">WWW</SPAN
> servers may
have this approach included as an install-time option, so check
the documentation.<a class="indexterm" name="AUTOID-24957"></A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch18_01.htm" title="18.1 Security and the World Wide Web"><img src="../gifs/txtpreva.gif" alt="Previous: 18.1 Security and the World Wide Web" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Practical UNIX &amp; Internet Security"><img src="../gifs/txthome.gif" alt="Practical UNIX &amp; Internet Security" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch18_03.htm" title="18.3 Controlling Access to Files on Your Server"><img src="../gifs/txtnexta.gif" alt="Next: 18.3 Controlling Access to Files on Your Server" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">18.1 Security and the World Wide Web</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">18.3 Controlling Access to Files on Your Server</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.htm" title="The Networking CD Bookshelf">Library Home</A
> | <a href="../dnsbind/index.htm" title="DNS &amp; BIND">DNS &amp; BIND</A
> | <a href="../tcpip/index.htm" title="TCP/IP Network Administration">TCP/IP</A
> | <a href="../sendmail/index.htm" title="sendmail">sendmail</A
> | <a href="../smdref/index.htm" title="sendmail Desktop Reference">sendmail Reference</A
> | <a href="../firewall/index.htm" title="Building Internet Firewalls">Firewalls</A
> | <a href="index.htm" title="Practical UNIX &amp; Internet Security">Practical Security</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
