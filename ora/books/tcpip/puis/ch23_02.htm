<html><head>
<title>[Chapter 23] 23.2 Tips on Avoiding Security-related Bugs</TITLE>
<meta name="DC.title" content="Practical UNIX &amp; Internet Security"><meta name="DC.creator" content="Simson Garfinkel &amp; Gene Spafford"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-02-04T00:17:33Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-148-8" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch23_01.htm" title="23. Writing Secure SUID and Network Programs"><link rel="prev" href="ch23_01.htm" title="23.1 One Bug Can Ruin Your Whole Day..."><link rel="next" href="ch23_03.htm" title="23.3 Tips on Writing Network Programs"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Practical UNIX &amp; Internet Security" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Practical UNIX &amp; Internet Security"><area shape="RECT" coords="467,0,514,18" href="../search/psrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch23_01.htm" title="23.1 One Bug Can Ruin Your Whole Day..."><img src="../gifs/txtpreva.gif" alt="Previous: 23.1 One Bug Can Ruin Your Whole Day..." border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 23<br>Writing Secure SUID and Network Programs</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch23_03.htm" title="23.3 Tips on Writing Network Programs"><img src="../gifs/txtnexta.gif" alt="Next: 23.3 Tips on Writing Network Programs" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="PUIS-CHP-23-SECT-2">23.2 Tips on Avoiding Security-related Bugs</A
></H2
><p class="para"><a class="indexterm" name="IDX-BUGS-TIPS-ON-AVOIDING"></A
><a class="indexterm" name="AUTOID-32108"></A
>Software engineers define <i class="firstterm">errors</I
>

as mistakes made by humans when designing and coding software. <i class="firstterm">Faults</I
>

are manifestations of errors in programs that may result in <i class="firstterm"><a class="indexterm" name="AUTOID-32114"></A
>
failures</I
>. Failures

are deviations from program <i class="firstterm">specifications</I
>.

In common usage, faults are called <i class="firstterm">bugs</I
>.</P
><p class="para">Why do we bother to explain these formal terms? For three

reasons:</P
><ol class="orderedlist"><li class="listitem"><p class="para">To remind you that although bugs (faults)

may be present in the code, they aren't necessarily a problem

until they trigger a failure. Testing is designed to trigger such

a failure before the program becomes operational...and results

in damage.</P
></LI
><li class="listitem"><p class="para">Bugs don't suddenly appear in code. They

are there because some person made a mistake&nbsp;- from ignorance,

from haste, from carelessness, or for some other reason. Ultimately,

unintentional flaws that allow someone to compromise your system

are caused by people who made errors.</P
></LI
><li class="listitem"><p class="para">Almost every piece of <span class="acronym">UNIX</SPAN
> software

has been developed without comprehensive specifications. As a result,

you cannot easily tell when a program has actually failed. Indeed,

what appears to be a bug to users of the program might be a feature

that was intentionally planned by the program's authors.[5]</P
><blockquote class="footnote"><p class="para">[5] &quot;It's not a bug, it's a feature!&quot;</P
></BLOCKQUOTE
></LI
></OL
><p class="para">When you write a program that will run as superuser or in

some other critical context, you must try to make the program as

bug free as possible because a bug in a program that runs as superuser

can leave your entire computer system wide open.</P
><p class="para">Of

course, no program can be guaranteed perfect. A library routine

can be faulty, or a stray gamma ray may flip a bit in memory to

cause your program to misbehave. Nevertheless, there are a variety

of techniques that you can employ when writing programs that will

tend to minimize the security implications of any bugs that may

be present. You can also program defensively to try to counter any

problems that you can't anticipate now.</P
><p class="para">Here

are some general rules to code by:</P
><ol class="orderedlist"><li class="listitem"><p class="para">Carefully design the program before you
start. </P
><p class="para"><a class="indexterm" name="AUTOID-32136"></A
><a class="indexterm" name="AUTOID-32138"></A
>Be certain that you
understand what you are trying to build. Carefully consider the
environment in which it will run, the input and output behavior, files
used, arguments recognized, signals caught, and other aspects of
behavior. Try to list all of the errors that might occur, and how you
will deal with them. Consider writing a specification document for the
code. If you can't or won't do that, at least consider
writing documentation including a <em class="emphasis">complete</EM
> manual
page before you write any code. That can serve as a valuable exercise
to focus your thoughts on the code and its intended behavior.</P
></LI
><li class="listitem"><p class="para">Check all of your arguments. </P
><p class="para"><a class="indexterm" name="AUTOID-32144"></A
><a class="indexterm" name="AUTOID-32146"></A
>An astonishing number of
security-related bugs arise because an attacker sends an unexpected
argument or an argument with unanticipated format to a program or a
function within a program. A simple way to avoid these kinds of
problems is by having your program <em class="emphasis">always check all of its
arguments</EM
>. Argument checking will not noticeably slow down
most programs, but it will make them less susceptible to hostile
users. As an added benefit, argument checking and error reporting will
make the process of catching non-security-related bugs easier.</P
><p class="para">When you are checking arguments in your program, pay extra
attention to the following:</P
><ul class="itemizedlist"><li class="listitem"><p class="para">Check arguments passed to your program
on the command line. Check to make sure that each command-line
argument is properly formed and bounded. </P
></LI
><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-32156"></A
>Check arguments that you pass to
<span class="acronym">UNIX</SPAN
> system functions. Even though your program is
calling the system function, you should check the arguments to be sure
that they are what you expect them to be. For example, if you think
that your program is opening a file in the current directory, you
might want to use the <em class="emphasis">index( )</EM
> function to see if
the filename contains a slash character (/). If the file does
contain the slash, and it shouldn't, the program should not open
the file.</P
></LI
><li class="listitem"><p class="para">Check arguments passed in environment variables
to your program, including general environment variables and such
variables as the <span class="acronym">LESS</SPAN
> argument.</P
></LI
><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-32165"></A
>Do bounds checking on every variable. If
you only define an option as valid from 1 to 5, be sure that no one
tries to set it to 0, 6, -1, 32767, or 32768. If string arguments are
supposed to be 16 bytes or less, check the length
<em class="emphasis">before</EM
> you copy them into a local buffer (and
don't forget the room required for the terminating null
byte). If you are supposed to have three arguments, be sure you got
three.</P
></LI
></UL
></LI
><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-32171"></A
><a class="indexterm" name="AUTOID-32174"></A
> Don't use routines that fail to
check buffer boundaries when manipulating strings of arbitrary
length.</P
><p class="para">In the C programming language particularly, note the
following:</P
><table class="informaltable"><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1"><p class="para">Avoid</P
></TH
><th class="entry" align="LEFT" rowspan="1" colspan="1"><p class="para">Use Instead</P
></TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><kbd class="command">gets</KBD
>()</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><kbd class="command">fget</KBD
>()</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><kbd class="command">strcpy</KBD
>()</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><kbd class="command">strncpy</KBD
>()</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><kbd class="command">strcat</KBD
>()</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><kbd class="command">strncat</KBD
>()</P
></TD
></TR
></TBODY
></TABLE
><p class="para">Use the following library calls with great
care&nbsp;- they can overflow either a destination buffer or an
internal, static buffer on some systems if the input is &quot;cooked&quot;
to do so:
[6]
<a class="indexterm" name="AUTOID-32210"></A
><a class="indexterm" name="AUTOID-32212"></A
><a class="indexterm" name="AUTOID-32214"></A
><a class="indexterm" name="AUTOID-32216"></A
><a class="indexterm" name="AUTOID-32218"></A
><a class="indexterm" name="AUTOID-32220"></A
><a class="indexterm" name="AUTOID-32222"></A
><a class="indexterm" name="AUTOID-32224"></A
><a class="indexterm" name="AUTOID-32226"></A
><a class="indexterm" name="AUTOID-32228"></A
><a class="indexterm" name="AUTOID-32230"></A
>

<kbd class="command">sprintf( ),
fscanf( ), scanf( ), sscanf( ), vsprintf( ), realpath( ), getopt(
), getpass( ), streadd( ), strecpy( ), </KBD
> and
<kbd class="command"> strtrns( )</KBD
>. Check to make sure that you have the version of the
syslog() library which checks the length of its arguments.</P
><blockquote class="footnote"><p class="para">[6] Not all of these will be available under
every version of UNIX.</P
></BLOCKQUOTE
><p class="para">There may be other routines in libraries on your system of
which you should be somewhat cautious. Note carefully if a copy
or transformation is performed into a string argument without benefit
of a length parameter to delimit it. Also note if the documentation
for a function says that the routine returns a pointer to a result
in static storage. If an attacker can provide the necessary input
to overflow these buffers, you may have a major problem.</P
></LI
><li class="listitem"><p class="para">&#13;Check all return codes from system
calls.</P
><p class="para"><a class="indexterm" name="AUTOID-32238"></A
><a class="indexterm" name="AUTOID-32240"></A
><a class="indexterm" name="AUTOID-32242"></A
><a class="indexterm" name="AUTOID-32244"></A
><a class="indexterm" name="AUTOID-32246"></A
>The
<span class="acronym">UNIX</SPAN
> operating system has almost every single
system call provide a return code.  Even system calls that you think
cannot fail, such as <kbd class="command">write()</KBD
>,
<kbd class="command">chdir()</KBD
>, or
<kbd class="command">chown()</KBD
>, can fail under exceptional
circumstances and return appropriate return codes.</P
><div class="sidebar"><h4 class="sidebar"><a class="title" name="AUTOID-32252">When Good Calls Fail</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-32255"></A
>You may not believe that system calls can
fail for a program that is running as root. For instance, you might
not believe that a
<kbd class="command">chdir</KBD
>()<kbd class="command"></KBD
> call could fail, as <i class="filename">root</I
> has permission to change into any
directory. However, if the directory in question is mounted via
<span class="acronym">NFS</SPAN
>, <i class="filename">root</I
> has no special privileges. The directory
might not exist, again causing the
chdir() call to fail. If the target
program is started in the wrong directory and you fail to check the
return codes, the results will not be what you expected when you wrote
the code.</P
><p class="para">Or consider the
<kbd class="command"><a class="indexterm" name="AUTOID-32264"></A
>open</KBD
>()
call. It can fail for <i class="filename">root</I
>, too. For example, you can't open a
file on a<span class="acronym"> CD-ROM</SPAN
> for writing, because
<span class="acronym">CD-ROM</SPAN
> is a read-only media. Or consider someone
creating several thousand zero-length files to use up all the inodes
on the disk. Even <i class="filename">root</I
> can't create a file if all the fre inodes
are gone.</P
><p class="para">The <a class="indexterm" name="AUTOID-32271"></A
>
<kbd class="command">fork($a)</KBD
>
 system call may fail if the process table is full,<a class="indexterm" name="AUTOID-32274"></A
>
<kbd class="command">exec()</KBD
>
may fail if the swap space is exhausted, and<a class="indexterm" name="AUTOID-32277"></A
>
<kbd class="command">sbrk()</KBD
>
 (the call which allocates memory for <kbd class="command">malloc( )</KBD
>) may fail if a process has already allocated the maximum
amount of memory allowed by process limits. An attacker can easily
arrange for these cases to occur. The difference between a safe and an
unsafe program may be how that program deals with these
situations.</P
><p class="para">If you don't like to type explicit
checks for each call, then consider writing a set of macros to
&quot;wrap&quot; the calls and do it for you. You will need one
macro for calls that return -1 on failure, and another for calls that
return 0 on failure.</P
><p class="para">Here are some macros that you may
find helpful:</P
><blockquote class="screen"><pre class="screen">#include &lt;assert.h&gt;
#define Call0(s) assert((s) != 0)
#define Call1(s) assert((s) &gt;= 0)</PRE
></BLOCKQUOTE
><p class="para">Here is how
to use them:</P
><blockquote class="screen"><pre class="screen">Call0(fd =open(&quot;foo&quot;, O_RDWR, 0666));</PRE
></BLOCKQUOTE
><p class="para">Note,
however, that these simply cause the program to terminate without
any cleanup. You may prefer to change the macros to call some common
routine first to do cleanup and logging.</P
></DIV
><p class="para"> When the calls fail, check the <i class="filename">errno</I
> variable
to determine <em class="emphasis">why</EM
> they failed. Have your program
log the unexpected value and then cleanly terminate if the system
call fails for any unexpected reason. This approach will be a great
help in tracking down problems later on.</P
><p class="para">If you think
that a system call should not fail and it does, do something appropriate.
If you can't think of anything appropriate to do, then
have your program delete all of its temporary files and exit. </P
></LI
><li class="listitem"><p class="para">Don't design your program
to depend on <span class="acronym">UNIX</SPAN
> <a class="indexterm" name="AUTOID-32294"></A
>environment
variables. </P
><p class="para">The simplest way to write a secure program
is to make absolutely no assumptions about your environment and
to <em class="emphasis">set everything explicitly </EM
>(e.g. signals,
umask, current directory, environment variables). A common way of
attacking programs is to make changes in the runtime environment
that the programmer did not anticipate.</P
><p class="para">Thus, you want to make certain that your program environment
is in a known state. Here are some of the things you want to do:</P
><ul class="itemizedlist"><li class="listitem"><p class="para">If you absolutely must pass information
to the program in its environment, then have your program test for
the necessary environment variables and then erase the environment
completely. </P
></LI
><li class="listitem"><p class="para">Otherwise, wipe the environment clean of all but
the most essential variables. On most systems, this is the <a class="indexterm" name="AUTOID-32304"></A
>TZ variable that specifies the local time zone,
and possibly some variables to indicate locale. Cleaning the environment
avoids any possible interactions between it and the <span class="acronym">UNIX</SPAN
>
system libraries.</P
></LI
><li class="listitem"><p class="para">You might also consider constructing a new <i class="filename">envp</I
>
and passing that to <kbd class="command">exec()</KBD
>, rather than using even a scrubbed
original <i class="filename">envp</I
>. Doing so is safer because you explicitly create the
environment rather than trying to clean it.</P
></LI
><li class="listitem"><p class="para">Make sure that the <a class="indexterm" name="AUTOID-32314"></A
>file
descriptors that you expect to be open are open, and that the file
descriptors you expect to be closed are closed.</P
></LI
><li class="listitem"><p class="para">Ensure that your signals are set to a sensible state.</P
></LI
><li class="listitem"><p class="para">Set your umask appropriately.</P
></LI
><li class="listitem"><p class="para">Explicitly <kbd class="command">chdir</KBD
>()
 to an appropriate directory when the program starts.</P
></LI
><li class="listitem"><p class="para">Set whatever limit values are necessary so that
your program will not leave a <a class="indexterm" name="AUTOID-32326"></A
>core
file if it fails. Consider setting your other limits on number of
files and stack size to appropriate values if they might not be
appropriate at program start.</P
></LI
></UL
></LI
><li class="listitem"><p class="para">Have internal consistency-checking
code. </P
><p class="para">Use the <em class="emphasis"><a class="indexterm" name="AUTOID-32332"></A
>assert</EM
>
macro if you are programming in C. If you have a variable that you
know should either be a 1 or a 2, then your program should not be
running if the variable is anything else.</P
></LI
><li class="listitem"><p class="para">Include lots of <a class="indexterm" name="AUTOID-32336"></A
>logging.</P
><p class="para">You are almost always better having too much logging
rather than too little. Report your log information into a dedicated
log file. Or, consider using the <kbd class="command">syslog</KBD
> facility, so that logs can
be redirected to users or files, piped to programs, and/or
sent to other machines. And remember to do bounds checking on arguments
passed to <kbd class="command">syslog()</KBD
> to avoid buffer overflows.</P
><p class="para">Here is specific information that you might wish to log:</P
><ul class="itemizedlist"><li class="listitem"><p class="para">The time that the program was run.</P
></LI
><li class="listitem"><p class="para">The <span class="acronym">UID</SPAN
> and effective <span class="acronym">UID</SPAN
>
of the process.</P
></LI
><li class="listitem"><p class="para">The <span class="acronym">GID</SPAN
> and effective <span class="acronym">GID</SPAN
>
of the process.</P
></LI
><li class="listitem"><p class="para">The terminal from which it was run.</P
></LI
><li class="listitem"><p class="para">The process number (<span class="acronym">PID</SPAN
>).</P
></LI
><li class="listitem"><p class="para">Command-line arguments.</P
></LI
><li class="listitem"><p class="para">Invalid arguments, or failures in consistency
checking.</P
></LI
><li class="listitem"><p class="para">The host from which the request came (in the case
of network servers).</P
></LI
></UL
></LI
><li class="listitem"><p class="para">Make the critical portion of your program
as small and as simple as possible. </P
></LI
><li class="listitem"><p class="para">Read through your code. </P
><p class="para">Think of how
you might attack it yourself. What happens if the program gets unexpected
input? What happens if you are able to delay the program between
two system calls?</P
></LI
><li class="listitem"><p class="para">Always use full <a class="indexterm" name="AUTOID-32371"></A
>pathnames
for any filename argument, for both commands and data
files.</P
></LI
><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-32375"></A
><a class="indexterm" name="AUTOID-32377"></A
>Check anything supplied by the user
for shell meta characters if the user-supplied input is passed on
to another program, written into a file, or used as a filename.
In general, checking for good characters is safer than checking
for a set of &quot;bad characters&quot; and is not that
restrictive in most situations.</P
></LI
><li class="listitem"><p class="para">Examine your code and test it carefully for assumptions
about the operating environments. For example:</P
><p class="para"></P
><ul class="itemizedlist"><li class="listitem"><p class="para">If you assume that the program is
always run by somebody who is not <i class="filename">root</I
>, what happens if the program
is run by <i class="systemitem">root?</I
> (Many
programs designed to be run as <i class="systemitem">daemon</I
>
or <i class="systemitem">bin</I
> can cause security
problems when run as <i class="filename">root</I
>, for instance.)</P
></LI
><li class="listitem"><p class="para">If you assume that it will be run by <i class="filename">root</I
>, what
happens if it is not run as root? </P
></LI
><li class="listitem"><p class="para">If you assume that a program always runs in the
<i class="filename">/tmp</I
> or <i class="filename">/tmp/root</I
>

[7]
directory, what happens if it is run
somewhere else?</P
><blockquote class="footnote"><p class="para">[7] We use <i class="filename">/tmp/root</I
>, with the understanding that
youhave a directory <i class="filename">/tmp/root</I
> automatically created by your
start-up scripts, and that this directory has a mode of 0700. Your
<i class="filename">/tmp</I
> directory should have mode 1777, which prevents ordinary
users from deleting the <i class="filename">/tmp/root</I
> directory.</P
></BLOCKQUOTE
></LI
></UL
></LI
><li class="listitem"><p class="para">Make good use of available tools. </P
><p class="para"><a class="indexterm" name="AUTOID-32407"></A
><a class="indexterm" name="AUTOID-32409"></A
><a class="indexterm" name="AUTOID-32411"></A
>If
you are using C and have an <span class="acronym">ANSI</SPAN
> C compiler available,
use it, and use prototypes for calls. If you don't have
an <span class="acronym">ANSI</SPAN
> C compiler, then be sure to use the <kbd class="command">-Wall</KBD
>
option to your C compiler (if supported) or the <kbd class="command">lint</KBD
>
program to check for common mistakes.</P
></LI
><li class="listitem"><p class="para">Test your program thoroughly. </P
><p class="para"><a class="indexterm" name="AUTOID-32421"></A
><a class="indexterm" name="AUTOID-32424"></A
><a class="indexterm" name="AUTOID-32426"></A
><a class="indexterm" name="AUTOID-32428"></A
><a class="indexterm" name="AUTOID-32430"></A
>If you have a system
based on <span class="acronym">SVR4</SPAN
>, consider using (at the least)
<kbd class="command">tcov</KBD
>, a statement-coverage tester. Consider using commercial products,
such as CodeCenter and Purify (from personal experience, we can
tell you that these programs are very useful). Look into <span class="acronym">GCT</SPAN
>,
a test tool developed by Brian Marick at the University of Illinois.[8]
Remember that finding a bug in testing is better than letting some

anonymous system cracker find it for you!</P
><blockquote class="footnote"><p class="para">[8] Available for FTP from <a class="systemitem.ftpserver" href="../../../WebStripper/protected.html#link=ftp://ftp.cs.uiuc.edu.">ftp.cs.uiuc.edu.</A
></P
></BLOCKQUOTE
></LI
><li class="listitem"><p class="para">Be aware of <a class="indexterm" name="AUTOID-32440"></A
><a class="indexterm" name="AUTOID-32442"></A
><a class="indexterm" name="AUTOID-32444"></A
><a class="indexterm" name="AUTOID-32447"></A
><a class="indexterm" name="AUTOID-32449"></A
><a class="indexterm" name="AUTOID-32452"></A
><a class="indexterm" name="AUTOID-32455"></A
>
race conditions.
These can be manifest as a deadlock, or as failure of two calls
to execute in close sequence. </P
><ul class="itemizedlist"><li class="listitem"><p class="para"><em class="emphasis">Deadlock conditions.</EM
>
Remember: more than one copy of your program may be running at the
same time. Consider using file locking for any files that you modify.
Provide a way to recover the locks in the event that the program
crashes while a lock is held. Avoid deadlocks or &quot;deadly
embraces,&quot; which can occur when one program attempts to
lock file A then file B, while another program already holds a lock
for file B and then attempts to lock file A.</P
></LI
><li class="listitem"><p class="para"><em class="emphasis">Sequence
conditions</EM
><a class="indexterm" name="AUTOID-32466"></A
><a class="indexterm" name="AUTOID-32468"></A
>
. Be aware that your program
does not execute atomically. That is, the program can be interrupted
between any two operations to let another program run for a
while&nbsp;- including one that is trying to abuse yours. Thus, check
your code carefully for any pair of operations that might fail if
arbitrary code is executed between them.</P
><p class="para">In particular,
when you are performing a series of operations on a file, such as
changing its owner, <i class="filename">stat'</I
>ing the file, or
changing its mode, first open the file and then use the
<kbd class="command">fchown()</KBD
>, <kbd class="command">fstat()</KBD
>, or <kbd class="command">fchmod()</KBD
> system
calls. Doing so will prevent the file from being replaced while your
program is running (a possible race condition). Also avoid the use of
the <a class="indexterm" name="AUTOID-32475"></A
>
<i class="filename">access()</I
> function to determine
your ability to access a file: Using the <i class="filename">access()</I
> function
followed by an <kbd class="command">open()</KBD
> is a race condition, and almost always a
bug.</P
></LI
></UL
></LI
><li class="listitem"><p class="para">Don't have your program dump core except during
your testing. </P
><p class="para"><a class="indexterm" name="AUTOID-32483"></A
><a class="indexterm" name="AUTOID-32485"></A
>Core files can fill up a filesystem. Core
files can contain confidential information. In some cases, an
attacker can actually use the fact that a program dumps core to break
into a system. Instead of dumping core, have your program log the
appropriate problem and exit. Use the
<em class="emphasis"><a class="indexterm" name="AUTOID-32489"></A
>setrlimit</EM
>() function
to limit the size of the core file to 0.</P
></LI
><li class="listitem"><p class="para">Do not provide shell escapes (with job control,
they are no longer needed).</P
></LI
><li class="listitem"><p class="para"><em class="emphasis">Never</EM
> use <a class="indexterm" name="AUTOID-32496"></A
><a class="indexterm" name="AUTOID-32498"></A
>
<kbd class="command">system()</KBD
> or <kbd class="command">popen()</KBD
>
calls. </P
><p class="para">Both invoke the shell, and can have unexpected
results when they are passed arguments with funny characters, or
in cases in which environment variables have peculiar definitions.</P
></LI
><li class="listitem"><p class="para">If you are expecting to create a new file with the
open call, then use the O_EXCL | <a class="indexterm" name="AUTOID-32505"></A
>O_CREAT flags
to cause the routine to fail if the file exists. </P
><p class="para">If you expect the file to be there, be sure to omit the
O_CREAT flag so that the routine will fail if the file is not
there.[9]</P
><blockquote class="footnote"><p class="para">[9] Note that on some systems, if the pathname in
the open call refers to a symbolic link that names a file that does
not exist, the call may not behave as you expect. This scenario should
be tested on your system so you know what to expect.</P
></BLOCKQUOTE
></LI
><li class="listitem"><p class="para">If you think that a file should be a file, use<a class="indexterm" name="AUTOID-32513"></A
>
<kbd class="command">lstat()</KBD
> to make sure that it is
not a link. </P
><p class="para">However, remember that what you check may change before you can
get around to opening it if it is in a public directory.  (See item
)</P
></LI
><li class="listitem"><p class="para">If you need to create a temporary file, consider
using the <a class="indexterm" name="AUTOID-32519"></A
><a class="indexterm" name="AUTOID-32521"></A
>
<kbd class="command">tmpfile( )</KBD
> or <kbd class="command">mktemp( )</KBD
> function. </P
><p class="para">This step will
create a temporary file, open the file, delete the file, and return
a file handle. The open file can be passed to a subprocess created
with <kbd class="command">fork( )</KBD
> and <kbd class="command">exec( )</KBD
>,
but the contents of the file cannot be read by any other program
on the system. The space associated with the file will automatically
be returned to the operating system when your program exits. If
possible, create the temporary file in a closed directory, such
as <i class="filename">/tmp/root/</I
>.</P
><blockquote class="note"><p class="para"><strong>NOTE:</STRONG
> The <a class="indexterm" name="AUTOID-32531"></A
>
<kbd class="command">mktemp()</KBD
>
library call is not safe to use in a program that is running with
extra privilege. The code as provided on most versions of
<span class="acronym">UNIX</SPAN
> has a race condition between a file test and a
file open. This condition is a well-known problem, and relatively easy
to exploit. Avoid the standard
<kbd class="command">mktemp()</KBD
> call.</P
></BLOCKQUOTE
></LI
><li class="listitem"><p class="para">Do not create files in world-writable directories.</P
></LI
><li class="listitem"><p class="para">Have your code reviewed by another competent programmer
(or two, or more). </P
><p class="para">After they have reviewed it, &quot;walk
through&quot; the code with them and explain what each part
does. We have found that such reviews are a surefire way to discover
logic errors. Trying to explain why something is done a certain
way often results in an exclamation of &quot;Wait a moment ...why
did I do <em class="emphasis">that?&quot;</EM
></P
></LI
><li class="listitem"><p class="para">If you need to use a shell as part of your program,
don't use the <a class="indexterm" name="AUTOID-32544"></A
>C shell.</P
><p class="para">Many versions have known flaws that can be exploited, and
nearly every version performs an implicit <i class="filename">eval $TERM</I
> on
start-up, enabling all sorts of attacks. Furthermore, the C shell
makes it difficult to do things that you may want to do, such as
capture error output to another file or pipe.</P
><p class="para">We recommend the use of <a class="indexterm" name="AUTOID-32549"></A
>
<kbd class="command">ksh93</KBD
> (used for most of the shell scripts
in this book). It is well designed, fast, powerful, and well
documented (see <a class="xref" href="appd_01.htm" title="Paper Sources">Appendix D</A
>).</P
></LI
></OL
><p class="para">Remember, many security bugs are actually programming bugs,
which is good news for programmers. When you make your program more
secure, you'll simultaneously be making it more
reliable.<a class="indexterm" name="AUTOID-32554"></A
></P
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch23_01.htm" title="23.1 One Bug Can Ruin Your Whole Day..."><img src="../gifs/txtpreva.gif" alt="Previous: 23.1 One Bug Can Ruin Your Whole Day..." border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Practical UNIX &amp; Internet Security"><img src="../gifs/txthome.gif" alt="Practical UNIX &amp; Internet Security" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch23_03.htm" title="23.3 Tips on Writing Network Programs"><img src="../gifs/txtnexta.gif" alt="Next: 23.3 Tips on Writing Network Programs" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">23.1 One Bug Can Ruin Your Whole Day...</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">23.3 Tips on Writing Network Programs</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.htm" title="The Networking CD Bookshelf">Library Home</A
> | <a href="../dnsbind/index.htm" title="DNS &amp; BIND">DNS &amp; BIND</A
> | <a href="../tcpip/index.htm" title="TCP/IP Network Administration">TCP/IP</A
> | <a href="../sendmail/index.htm" title="sendmail">sendmail</A
> | <a href="../smdref/index.htm" title="sendmail Desktop Reference">sendmail Reference</A
> | <a href="../firewall/index.htm" title="Building Internet Firewalls">Firewalls</A
> | <a href="index.htm" title="Practical UNIX &amp; Internet Security">Practical Security</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
