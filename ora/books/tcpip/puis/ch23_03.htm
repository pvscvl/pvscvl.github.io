<html><head>
<title>[Chapter 23] 23.3 Tips on Writing Network Programs</TITLE>
<meta name="DC.title" content="Practical UNIX &amp; Internet Security"><meta name="DC.creator" content="Simson Garfinkel &amp; Gene Spafford"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-02-04T00:17:39Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-148-8" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch23_01.htm" title="23. Writing Secure SUID and Network Programs"><link rel="prev" href="ch23_02.htm" title="23.2 Tips on Avoiding Security-related Bugs"><link rel="next" href="ch23_04.htm" title="23.4 Tips on Writing SUID/SGID Programs"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Practical UNIX &amp; Internet Security" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Practical UNIX &amp; Internet Security"><area shape="RECT" coords="467,0,514,18" href="../search/psrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch23_02.htm" title="23.2 Tips on Avoiding Security-related Bugs"><img src="../gifs/txtpreva.gif" alt="Previous: 23.2 Tips on Avoiding Security-related Bugs" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 23<br>Writing Secure SUID and Network Programs</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch23_04.htm" title="23.4 Tips on Writing SUID/SGID Programs"><img src="../gifs/txtnexta.gif" alt="Next: 23.4 Tips on Writing SUID/SGID Programs" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="PUIS-CHP-23-SECT-3">23.3 Tips on Writing Network Programs</A
></H2
><p class="para"><a class="indexterm" name="IDX-NETWORK-SERVICES"></A
><a class="indexterm" name="IDX-PROGRAMS-FOR-NETWORK-SERVICES"></A
>If
you are coding a new network service, there are also a number of
pitfalls to consider. This is a partial list of concerns and advice
for writing more secure network code:</P
><ol class="orderedlist"><li class="listitem"><p class="para">Don't make any hard-coded
assumptions about service <a class="indexterm" name="AUTOID-32566"></A
>port
numbers. </P
><p class="para">Use the library <kbd class="command">getservbyname()</KBD
>
and related calls, plus system include files, to get important values.
Remember that sometimes constants aren't constant.</P
></LI
><li class="listitem"><p class="para">Don't place undue reliance on the fact
that any incoming packets are from (or claim to be from) a low-numbered,
privileged port. </P
><p class="para">Any PC can send from those ports,
and forged packets can claim to be from any port.</P
></LI
><li class="listitem"><p class="para">Don't place undue reliance on the source
IP address in the packets of connections you received. Such items
may be forged or altered.</P
></LI
><li class="listitem"><p class="para">Do a <a class="indexterm" name="AUTOID-32577"></A
>reverse
lookup on connections when you need a hostname for any reason. </P
><p class="para">After you have obtained a hostname to go with the IP address
you have, do another lookup on that hostname to ensure that its
IP address matches what you have.</P
></LI
><li class="listitem"><p class="para">Include some form of <a class="indexterm" name="AUTOID-32582"></A
><a class="indexterm" name="AUTOID-32584"></A
>
load shedding or load limiting in your server
to handle cases of excessive load. </P
><p class="para">Consider what should happen if someone makes a concerted effort
to direct a denial of service attack against your server. For example,
you may wish to have a server stop processing incoming requests if the
load goes over some predefined value.</P
></LI
><li class="listitem"><p class="para">Put reasonable <a class="indexterm" name="AUTOID-32590"></A
><a class="indexterm" name="AUTOID-32592"></A
>
time-outs on each network-oriented read request. </P
><p class="para">A remote server that does not respond quickly may be common,
but one that does not respond for days may hang up your code awaiting
a reply. This rule is especially important in <span class="acronym">TCP</SPAN
>-based
servers that may continue attempting delivery indefinitely.</P
></LI
><li class="listitem"><p class="para">Put reasonable time-outs on each network <a class="indexterm" name="AUTOID-32599"></A
>write request. </P
><p class="para">If some
remote server accepts the first few bytes and then blocks indefinitely,
you do not want it to lock up your code awaiting completion.</P
></LI
><li class="listitem"><p class="para">Make no assumptions about the content of input data,
no matter what the source is. </P
><p class="para">For instance, do not
assume that input is null-terminated, contains linefeeds, or is
even in standard <span class="acronym">ASCII</SPAN
> format. Your program should
behave in a defined manner if it receives random binary data as
well as expected input.</P
></LI
><li class="listitem"><p class="para">Make no assumptions about the amount of input sent
by the remote machine. </P
><p class="para">Put in bounds checking on individual
items read, and on the total amount of data read (see the sidebar
for one reason why).</P
><div class="sidebar"><h4 class="sidebar"><a class="title" name="AUTOID-32610">Getting More Than You Expected</A
></H4
><p class="para">You must ensure that your programs, whether they run locally
or over a network, properly handle extended and ill-defined input.
We illustrate this point with an edited retelling of an anecdote
related to one of us by <a class="indexterm" name="AUTOID-32613"></A
>Tsutomu
Shimomura.</P
><p class="para">One day, Shimomura noticed that a certain
Department of Energy <span class="acronym">FTP</SPAN
> server machine was set
to <kbd class="command">finger</KBD
> any machine from which it received an anonymous <span class="acronym">FTP</SPAN
>
request. This bothered Shimomura a little, as anonymous <span class="acronym">FTP</SPAN
>
is more or less as the name implies. Why should the administrators
of that site care? If who was on the machines connecting to theirs
mattered, they shouldn't have put up anonymous <span class="acronym">FTP</SPAN
>.</P
><p class="para">This also piqued Shimomura's scientific curiosity,
however. Were they using standard <i class="filename">finger?</I
> He
modified his local <kbd class="command">inetd</KBD
> configuration to point incoming <kbd class="command">finger</KBD
>
requests to his character generator (<kbd class="command">chargen</KBD
>). He then connected
to the remote <span class="acronym">FTP</SPAN
> server and logged out again.</P
><p class="para">Over the next few hours, Shimomura's machine shipped
tens of megabytes of characters to the remote site. Eventually,
late at night, the connection was broken. The remote machine no
longer answered any network requests and appeared to have disappeared
from the network. When it reappeared the next morning, the automatic
<kbd class="command">finger</KBD
>-of-machines connection for <span class="acronym">FTP</SPAN
> was no
longer present.</P
><p class="para">The moral of this little story is that
if you are going to ask for something, be sure that you are able
to handle <em class="emphasis">anything</EM
> that you might get.</P
></DIV
></LI
><li class="listitem"><p class="para">Consider doing a call to the <a class="indexterm" name="AUTOID-32634"></A
>
<kbd class="command">authd</KBD
> service on the remote site to identify
the putative source of the connection. </P
><p class="para">However, remember
not to place too much trust in the response.</P
></LI
><li class="listitem"><p class="para">Do not require the user to send a reusable <a class="indexterm" name="AUTOID-32640"></A
><a class="indexterm" name="AUTOID-32643"></A
>
password
in cleartext over the network connection to authenticate himself.</P
><p class="para">Either use one-time passwords, or some shared, secret
method of authentication that does not require sending compromisable
information across the network.</P
><p class="para">For instance, the <span class="acronym">APOP</SPAN
> protocol used in the
<span class="acronym">POP</SPAN
> mail service has the server send the client a
unique character string, usually including the current date and
time.[10]

The client then hashes the timestamp together with the user's
password. The result is sent back to the server. The server also
has the password and performs the same operation to determine if
there is a match. The password is never transmitted across the network.
This approach is described further in the discussion of <span class="acronym">POP</SPAN
>
in <a class="xref" href="ch17_01.htm" title="TCP/IP Services">Chapter 17, <cite class="chapter">TCP/IP Services</CITE
></A
>.</P
><blockquote class="footnote"><p class="para">[10] This string is usually referred to as a
<i class="firstterm"><a class="indexterm" name="AUTOID-32652"></A
>nonce</I
>.</P
></BLOCKQUOTE
></LI
><li class="listitem"><p class="para">Consider adding some form of session
encryption to prevent eavesdropping and foil session hijacking.</P
><p class="para">But don't try writing your own cryptography
functions; see <a class="xref" href="ch06_01.htm" title="Cryptography">Chapter 6, <cite class="chapter">Cryptography</CITE
></A
>,
for algorithms that are known to be strong.</P
></LI
><li class="listitem"><p class="para">Build in support to use a proxy. </P
><p class="para">Consider
using <span class="acronym">SOCKS</SPAN
>, described in <a class="xref" href="ch22_01.htm" title="Wrappers and Proxies">Chapter 22, <cite class="chapter">Wrappers and Proxies</CITE
></A
>) so that the code is firewall
friendly.</P
></LI
><li class="listitem"><p class="para">Make sure that good logging is performed. </P
><p class="para">This
includes logging connections, disconnects, rejected connections,
detected errors, and format problems.</P
></LI
><li class="listitem"><p class="para">Build in a graceful shutdown so that the system
operator can signal the program to shut down and clean up sensitive
materials. </P
><p class="para">Usually, this process means trapping the
<span class="acronym">TERM</SPAN
> signal and cleaning up afterwards.</P
></LI
><li class="listitem"><p class="para">Consider programming a &quot;heartbeat&quot;
log function in servers that can be enabled dynamically. </P
><p class="para">This
function will periodically log a message indicating that the server
was still active and working correctly, and possibly record some
cumulative activity statistics.</P
></LI
><li class="listitem"><p class="para">Build in some self recognition or locking to prevent
more than one copy of a server from running at a time. </P
><p class="para">Sometimes, services are accidentally restarted, which may lead
to race conditions and the destruction of logs if it's not
recognized and stopped early.<a class="indexterm" name="AUTOID-32678"></A
><a class="indexterm" name="AUTOID-32679"></A
></P
></LI
></OL
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch23_02.htm" title="23.2 Tips on Avoiding Security-related Bugs"><img src="../gifs/txtpreva.gif" alt="Previous: 23.2 Tips on Avoiding Security-related Bugs" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Practical UNIX &amp; Internet Security"><img src="../gifs/txthome.gif" alt="Practical UNIX &amp; Internet Security" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch23_04.htm" title="23.4 Tips on Writing SUID/SGID Programs"><img src="../gifs/txtnexta.gif" alt="Next: 23.4 Tips on Writing SUID/SGID Programs" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">23.2 Tips on Avoiding Security-related Bugs</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">23.4 Tips on Writing SUID/SGID Programs</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.htm" title="The Networking CD Bookshelf">Library Home</A
> | <a href="../dnsbind/index.htm" title="DNS &amp; BIND">DNS &amp; BIND</A
> | <a href="../tcpip/index.htm" title="TCP/IP Network Administration">TCP/IP</A
> | <a href="../sendmail/index.htm" title="sendmail">sendmail</A
> | <a href="../smdref/index.htm" title="sendmail Desktop Reference">sendmail Reference</A
> | <a href="../firewall/index.htm" title="Building Internet Firewalls">Firewalls</A
> | <a href="index.htm" title="Practical UNIX &amp; Internet Security">Practical Security</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
