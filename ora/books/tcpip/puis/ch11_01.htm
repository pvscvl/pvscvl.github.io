<html><head>
<title>[Chapter 11] Protecting Against Programmed Threats</TITLE>
<meta name="DC.title" content="Practical UNIX &amp; Internet Security"><meta name="DC.creator" content="Simson Garfinkel &amp; Gene Spafford"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-02-04T00:07:53Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-148-8" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="part03.htm" title="III. System Security"><link rel="prev" href="ch10_08.htm" title="10.8 Managing Log Files"><link rel="next" href="ch11_02.htm" title="11.2 Damage"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Practical UNIX &amp; Internet Security" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Practical UNIX &amp; Internet Security"><area shape="RECT" coords="467,0,514,18" href="../search/psrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch10_08.htm" title="10.8 Managing Log Files"><img src="../gifs/txtpreva.gif" alt="Previous: 10.8 Managing Log Files" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 11</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch11_02.htm" title="11.2 Damage"><img src="../gifs/txtnexta.gif" alt="Next: 11.2 Damage" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="CHAPTER"><h1 class="chapter"><a class="title" name="PUIS-CHP-11">11. Protecting Against Programmed Threats</A
></H1
><div class="htmltoc"><p><b>Contents:</B
><br><a class="SECT1" href="#PUIS-CHP-11-SECT-1" title="11.1 Programmed Threats: Definitions">Programmed Threats: Definitions</A
><br><a class="SECT1" href="ch11_02.htm" title="11.2 Damage">Damage</A
><br><a class="SECT1" href="ch11_03.htm" title="11.3 Authors">Authors</A
><br><a class="SECT1" href="ch11_04.htm" title="11.4 Entry">Entry</A
><br><a class="SECT1" href="ch11_05.htm#PUIS-CHP-11-SECT-5.2.7" title="11.5 Protecting Yourself">Protecting Yourself</A
><br><a class="SECT1" href="ch11_06.htm#PUIS-CHP-11-SECT-6.1.2" title="11.6 Protecting Your System">Protecting Your System</A
></P
><p></P
></DIV
><p class="para">The <a class="indexterm" name="AUTOID-14592"></A
><a class="indexterm" name="AUTOID-14595"></A
>
day is Friday, August 13, 1999. Hilary Nobel,
a vice president at a major accounting firm, turns on her desktop
computer to finish working on the financial analysis that she has
been spending the last two months developing. But instead of seeing
the usual <kbd class="command">login:</KBD
> and <kbd class="command">password:</KBD
>
prompts, she sees a devilish message:</P
><blockquote class="screen"><pre class="screen">Unix 5.0 Release 4
Your operating license has been revoked by Data Death.
Encrypting all user files.... 
Call +011 49 4555 1234 to purchase the decryption key. </PRE
></BLOCKQUOTE
><p class="para">What has happened?
And how could Ms. Nobel have protected herself from the catastrophe?</P
><div class="sect1"><h2 class="sect1"><a class="title" name="PUIS-CHP-11-SECT-1">11.1 Programmed Threats: Definitions</A
></H2
><p class="para">Computers
are designed to execute instructions one after another. These instructions
usually do something useful&nbsp;- calculate values, maintain
databases, and communicate with users and with other systems. Sometimes,
however, the instructions executed can be damaging or malicious
in nature. When the damage happens by accident, we call the code
involved a software bug. Bugs are perhaps the most common cause
of unexpected program behavior.</P
><p class="para">But if the source of
the damaging instructions is an individual who intended that the
abnormal behavior occur, we call the instructions malicious code,
or a programmed threat. Some people use the term <i class="firstterm"><a class="indexterm" name="AUTOID-14606"></A
>malware</I
>
to describe malicious software.</P
><p class="para">There are many different
kinds of programmed threats. Experts classify threats by the way
they behave, how they are triggered, and how they spread. In recent
years, occurrences of these programmed threats have been described
almost uniformly by the media as viruses. However, viruses make
up only a small fraction of the malicious code that has been devised.
Saying that all programmed data loss is caused by viruses is as
inaccurate as saying that all human diseases are caused by viruses.</P
><p class="para">Experts who work in this area have formal definitions
of all of these types of software. However, not all the experts
agree on common definitions. Thus, we'll consider the following
practical definitions of malicious software:</P
><ul class="itemizedlist"><li class="listitem"><p class="para"><i class="firstterm"><a class="indexterm" name="AUTOID-14614"></A
>Security tools and toolkits</I
>, which are
usually designed to be used by security professionals to protect
their sites, but which can also be used by unauthorized individuals
to probe for weaknesses</P
></LI
><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-14619"></A
><a class="indexterm" name="AUTOID-14621"></A
><i class="firstterm">Back doors,</I
> sometimes called <i class="firstterm">trap doors</I
>,
which allow unauthorized access to your system</P
></LI
><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-14628"></A
><i class="firstterm">Logic bombs,</I
> or
hidden features in programs that go off after certain conditions
are met</P
></LI
><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-14633"></A
><i class="firstterm">Viruses,</I
> or programs
that modify other programs on a computer, inserting copies of themselves</P
></LI
><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-14638"></A
><i class="firstterm">Worms,</I
> programs that
propagate from computer to computer on a network, without necessarily
modifying other programs on the target machines</P
></LI
><li class="listitem"><p class="para"><i class="firstterm">Trojan horses</I
>, or programs that appear to have one
function but actually perform another function</P
></LI
><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-14646"></A
><a class="indexterm" name="AUTOID-14648"></A
><a class="indexterm" name="AUTOID-14650"></A
><i class="firstterm">Bacteria</I
>,
or <i class="firstterm">rabbit programs, </I
>make copies of themselves
to overwhelm a computer system's resources</P
></LI
></UL
><p class="para">Some of the threats mentioned above also have nondestructive
uses. For example, worms can be used to do distributed computation
on idle processors; back doors are useful for debugging programs;
and viruses can be written to update source code and patch bugs.
The purpose, not the approach, makes a programmed threat threatening.</P
><p class="para">This chapter provides a general description of each
threat, explains how it can affect your <span class="acronym">UNIX</SPAN
>
system, and describes how you can protect yourself against it. For
more detailed information, refer to the books mentioned in <a class="xref" href="appd_01.htm" title="Paper Sources">Appendix D, <cite class="appendix">Paper Sources</CITE
></A
>.</P
><div class="sect2"><h3 class="sect2"><a class="title" name="PUIS-CHP-11-SECT-1.1">11.1.1 Security Tools</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-14662"></A
><a class="indexterm" name="AUTOID-14665"></A
><a class="indexterm" name="AUTOID-14668"></A
><a class="indexterm" name="AUTOID-14671"></A
>Recently,
many programs have been written that can automatically scan for
computer security weaknesses. These programs can quickly probe a
computer or an entire network of computers for hundreds of weaknesses
within a short period of time. <span class="acronym">SATAN</SPAN
>, Tiger,
<span class="acronym">ISS</SPAN
>, and <span class="acronym">COPS</SPAN
> are all examples
of such tools.</P
><p class="para">Most security tools are designed to be
used by computer professionals to find problems with their own sites.
The tools are highly automated and thorough. Naturally, these tools
need to report the problems that they find, so that they can be
corrected. Unfortunately, this requirement makes these tools useful
to someone seeking flaws to exploit. Because these tools are readily
obtainable, they are sometimes used by attackers seeking to compromise
a system.</P
><p class="para">There are also programs and tool sets whose
only function is to attack computers. These programs are increasingly
sophisticated and readily available on the Internet and various
bulletin boards. These often require minimal knowledge and sophistication
to use. Sites have reported break-ins from people using these tools
to manipulate protocol-timing vulnerabilities and to change kernel
data structures, only to have the intruders try to issue <span class="acronym">DOS</SPAN
>
commands on the <span class="acronym">UNIX</SPAN
> machines: they were completely
unfamiliar with <span class="acronym">UNIX</SPAN
> itself!</P
><p class="para">Because
of the availability of security tools and high-quality attackware,
you must be aware of potential vulnerabilities in your systems,
and keep them protected and monitored. Some people believe that
the only effective strategy for the security professional is to
obtain the tools and run them before the bad guys do. There is some
merit to this argument, but there are also many dangers. Some of
the tools are not written with safety or portability in mind, and
may damage your systems. Other tools can be booby-trapped to compromise
your system clandestinely, when you think you are simply scanning
for problems. And then there are always the questions of whether
the tools are scanning for real problems, and whether system administrators
can understand the output.</P
><p class="para">For all these reasons, we
suggest that you be aware of the tools and toolkits that may be
available, but don't rush to use them yourself unless you
are <em class="emphasis">very</EM
> certain you understand what they do
and how they might help you secure your own system.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PUIS-CHP-11-SECT-1.2">11.1.2 Back Doors and Trap Doors</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-14688"></A
><i class="firstterm">Back doors,</I
> also called <i class="firstterm">trap doors</I
>, are pieces
of code written into applications or operating systems to grant
programmers access to programs without requiring them to go through
the normal methods of access authentication. Back doors and trap
doors have been around for many years. They're typically
written by application programmers who need a means of debugging
or monitoring code that they are developing.</P
><p class="para">Most back
doors are inserted into applications that require lengthy authentication
procedures, or long setups, requiring a user to enter many different
values to run the application. When debugging the program, the developer
may wish to gain special privileges, or to avoid all the necessary
setup and authentication steps. The programmer also may want to
ensure that there is a method of activating the program should something
be wrong with the authentication procedure that is being built into
the application. The back door is code that either recognizes some
special sequence of input, or is triggered by being run from a certain
user ID. It then grants special access.</P
><p class="para">Back doors
become threats when they're used by unscrupulous programmers
to gain unauthorized access. They are also a problem when the initial
application developer forgets to remove a back door after the system
has been debugged and some other individual discovers the door's
existence.</P
><p class="para">Perhaps the most famous <span class="acronym">UNIX</SPAN
>
back door was the <span class="acronym">DEBUG</SPAN
> option of the <a class="indexterm" name="AUTOID-14697"></A
>
sendmail
program, exploited by the Internet worm program in November of 1988.
The <span class="acronym">DEBUG</SPAN
> option was added for debugging sendmail.
Unfortunately, the <span class="acronym">DEBUG</SPAN
> option also had a back
door in it, which allowed remote access of the computer over the
network without an initial login. The <span class="acronym">DEBUG</SPAN
> option
was accidentally left enabled in the version of the program that
was distributed by Sun Microsystems, Digital Equipment Corporation,
and others.</P
><p class="para">Sometimes, a cracker inserts a back door
in a system after he successfully penetrates that system, or to
become root, at a later time. The back door gives the cracker a
way to get back into the system. Back doors take many forms. A cracker
might:</P
><ul class="itemizedlist"><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-14706"></A
><a class="indexterm" name="AUTOID-14709"></A
><a class="indexterm" name="AUTOID-14711"></A
><a class="indexterm" name="AUTOID-14713"></A
><a class="indexterm" name="AUTOID-14715"></A
>Install
an altered version of login, telnetd, ftpd, rshd, or some other
program; the altered program usually accepts a special input sequence
and spawns a shell for the user</P
></LI
><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-14719"></A
>Plant an entry in the .rhosts file of a user
or the superuser to allow future unauthorized access for the attacker</P
></LI
><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-14724"></A
><a class="indexterm" name="AUTOID-14727"></A
><a class="indexterm" name="AUTOID-14729"></A
>Change the <i class="filename">/etc/fstab</I
>
file on an <span class="acronym">NFS</SPAN
> system to remove the nosuid designator,
allowing a legitimate user to become root without authorization
through a remote program</P
></LI
><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-14735"></A
><a class="indexterm" name="AUTOID-14738"></A
>Add
an alias to the mail system, so that when mail is sent to that alias,
the mailer runs a program of the cracker's designation,
possibly creating an entry into the system</P
></LI
><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-14742"></A
>Change
the owner of the <i class="filename">/etc</I
> directory so the intruder can rename
and subvert files such as <i class="filename">/etc/passwd</I
> and <i class="filename">/etc/group</I
>
at a later time</P
></LI
><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-14749"></A
><a class="indexterm" name="AUTOID-14752"></A
>Change the file permissions of <i class="filename">/dev/kmem</I
>
or your disk devices so they can be modified by someone other than
root</P
></LI
><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-14757"></A
>Install
a harmless-looking shell file somewhere that sets <span class="acronym">SUID</SPAN
>
so a user can use the shell to become root</P
></LI
><li class="listitem"><p class="para">Change or add a network service to provide a root
shell to a remote caller</P
></LI
></UL
><p class="para">Coupled
with all of these changes, the intruder can modify timestamps, checksums,
and audit programs so that the system administrator cannot detect
the alteration!</P
><p class="para">Protecting against back doors is complicated.
The foremost defense is to check the integrity of important files
regularly (see <a class="xref" href="ch09_01.htm" title="Integrity Management">Chapter 9, <cite class="chapter">Integrity Management</CITE
></A
>).
Also, scan the system periodically for <span class="acronym">SUID/SGID</SPAN
>
files, and check permissions and ownership of important files and
directories periodically. For more information, see <a class="xref" href="ch05_01.htm" title="The UNIX Filesystem">Chapter 5, <cite class="chapter">The UNIX Filesystem</CITE
></A
>, and <a class="xref" href="ch06_01.htm" title="Cryptography">Chapter 6, <cite class="chapter">Cryptography</CITE
></A
>.</P
><p class="para">Checking new <a class="indexterm" name="AUTOID-14770"></A
>
software is also important, because new software&nbsp;- especially
from sources that are unknown or not well-known&nbsp;- can (and
occasionally does) contain back doors. If possible, read through
and understand the source code of all software (if available) before
installing it on your system. If you are suspicious of the software,
don't use it, especially if it requires special privileges
(being <span class="acronym">SUID</SPAN
> root). Accept software only from
trusted sources.</P
><p class="para">As a matter of good policy, new software
should first be installed on some noncritical systems for testing
and familiarization. This practice gives you an opportunity to isolate
problems, identify incompatibilities, and note quirks. Don't
install new software first on a &quot;live&quot; production
system!</P
><p class="para">Note that you should not automatically trust
software from a commercial firm or group. Sometimes commercial firms
insert back doors into their code to allow for maintenance, or recovering
lost passwords. These back doors might be secret today, but become
well-known tomorrow. As long as customers (you) are willing to purchase
software that comes with broad disclaimers of warranty and liability,
there will be little incentive for vendors to be accountable for
the code they sell. Thus, you might want to seek other, written
assurances about any third-party code you buy and install on your
computers.<a class="indexterm" name="AUTOID-14776"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PUIS-CHP-11-SECT-1.3">11.1.3 Logic Bombs</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-14781"></A
><a class="indexterm" name="AUTOID-14783"></A
><a class="indexterm" name="AUTOID-14786"></A
><i class="firstterm">Logic bombs</I
> are programmed
threats that lie dormant in commonly used software for an extended
period of time until they are triggered; at this point, they perform
a function that is not the intended function of the program in which
they are contained. Logic bombs usually are embedded in programs
by software developers who have legitimate access to the system.</P
><p class="para">Conditions that might trigger a logic bomb include
the presence or absence of certain files, a particular day of the
week, or a particular user running the application. The logic bomb
might check first to see which users are logged in, or which programs
are currently in use on the system. Once triggered, a logic bomb
can destroy or alter data, cause machine halts, or otherwise damage
the system. In one classic example, a logic bomb checked for a certain
employee ID number and then was triggered if the ID failed to appear
in two consecutive payroll calculations (i.e., the employee had
left the company).</P
><p class="para"><a class="indexterm" name="AUTOID-14792"></A
>Time-outs
are a special kind of logic bomb that are occasionally used to enforce
payment or other contract provisions. Time-outs make a program stop
running after a certain amount of time unless some special action
is taken. The <span class="acronym">SCRIBE</SPAN
> text formatting system uses
quarterly time-outs to require licensees to pay their quarterly
license fees.</P
><p class="para">Protect against malicious logic bombs
in the same way that you protect against back doors: don't
install software without thoroughly testing it and reading it. Keep
regular backups so that if something happens, you can restore your
data.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PUIS-CHP-11-SECT-1.4">11.1.4 Trojan Horses</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-14799"></A
><a class="indexterm" name="AUTOID-14801"></A
><i class="firstterm">Trojan horses</I
> are named
after the Trojan horse of myth. Analogous to their namesake, modern-day
Trojan horses resemble a program that the user wishes to run&nbsp;- a
game, a spreadsheet, or an editor. While the program appears to
be doing what the user wants, it actually is doing something else
unrelated to its advertised purpose, and without the user's
knowledge. For example, the user may think that the program is a
game. While it is printing messages about initializing databases
and asking questions like &quot;What do you want to name your
player?&quot; and &quot;What level of difficulty do you
want to play?&quot; the program may actually be deleting files,
reformatting a disk, or otherwise altering information. All the
user sees, until it's too late, is the interface of a program
that the user is trying to run. Trojan horses are, unfortunately,
as common as jokes within some programming environments. They are
often planted as cruel tricks on bulletin boards and circulated
among individuals as shared software.</P
><p class="para">One memorable
example was posted as a <a class="indexterm" name="AUTOID-14806"></A
>
<i class="filename">shar</I
>
format file on one of the Usenix source code groups several years
back. The <i class="filename">shar</I
> file was long, and contained commands to unpack a
number of files into the local directory. However, a few hundred
lines into the <i class="filename">shar</I
> file was a command sequence like this one:</P
><blockquote class="screen"><pre class="screen">rm -rf $HOME
echo Boom! </PRE
></BLOCKQUOTE
><p class="para">Many sites reported losing files to this code. A few reported
losing most of their filesystems because they were unwise enough
to unpack the software while running as user root.</P
><p class="para"><a class="indexterm" name="AUTOID-14814"></A
><a class="indexterm" name="AUTOID-14816"></A
><a class="indexterm" name="AUTOID-14818"></A
><a class="indexterm" name="AUTOID-14820"></A
>An attacker
can embed commands in places other than compiled programs. Shell
files (especially <i class="filename">shar</I
> files), <kbd class="command">awk</KBD
>, <kbd class="command">Perl</KBD
>, and <kbd class="command">sed</KBD
> scripts, TeX files,
<i class="filename">PostScript</I
> files, <span class="acronym">MIME</SPAN
>-encoded mail, <span class="acronym">WWW</SPAN
>
pages, and even editor buffers can all contain commands that can
cause you unexpected problems.</P
><p class="para"><a class="indexterm" name="AUTOID-14830"></A
><a class="indexterm" name="AUTOID-14833"></A
>Commands embedded
in editor buffers present an especially subtle problem. Most editors
allow commands to be embedded in the first few lines or the last
few lines of files to let the editor automatically initialize itself
and execute commands. By planting the appropriate few lines in a
file, you could wreak all kinds of damage when the victim reads
the buffer into his or her editor. See the documentation for your
own editor to see how to disable this feature; see the later section
called &quot;Startup File Attacks,&quot; for the instructions
to do this in <span class="acronym">GNU</SPAN
> Emacs.</P
><p class="para"><a class="indexterm" name="AUTOID-14838"></A
><a class="indexterm" name="AUTOID-14840"></A
>Another form of a Trojan
horse makes use of <em class="emphasis">block-send</EM
> commands or <i class="filename">answerback</I
> modes in some
terminals. Many brands of terminals support modes where certain
sequences of control characters will cause the current line or status
line to be answered back to the system as if it had been typed on
the keyboard. Thus, a command can be embedded in mail that may read
like this one:</P
><blockquote class="screen"><pre class="screen">rm -rf $HOME &amp; logout &lt;clear screen, send sequence&gt; </PRE
></BLOCKQUOTE
><p class="para">When
the victim reads her mail, the line is echoed back as a command
to be executed at the next prompt, and the evidence is wiped off
the screen. By the time the victim logs back in, she is too late.
Avoid or disable this feature if it is present on your terminal!</P
><p class="para">A related form of a Trojan coerces a <em class="emphasis"><a class="indexterm" name="AUTOID-14848"></A
>talk</EM
> program into transmitting characters
that lock up a keyboard, do a block send as described above, or
otherwise change terminal settings. There are several utility programs
available off the net to perform these functions, and more than
a few multi-user games and <span class="acronym">IRC</SPAN
> clients have hidden
code to allow a knowledgeable user to execute these functions.</P
><p class="para">The best way to avoid Trojan horses is to never execute anything,
as a program or as input to an interpreter, until you have carefully
read through the entire file. When you read the file, use a program
or editor that displays control codes in a visible manner. If you
do not understand what the file does, do not run it until you do.
And never, ever run anything as root unless you absolutely must.</P
><p class="para">If you are unpacking files or executing scripts for
the first time, you might wish to do so on a secondary machine or
use the <a class="indexterm" name="AUTOID-14853"></A
>
<kbd class="command">chroot()</KBD
>
system call in a restricted environment, to prevent the package
from accessing files or directories outside its work area. (Starting
a <kbd class="command">chroot()</KBD
> session requires superuser privilege, but you can change
your user ID to a nonprivileged ID after the call is executed.)<a class="indexterm" name="AUTOID-14857"></A
><a class="indexterm" name="AUTOID-14859"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PUIS-CHP-11-SECT-1.5">11.1.5 Viruses</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-14865"></A
><a class="indexterm" name="AUTOID-14867"></A
><a class="indexterm" name="AUTOID-14870"></A
><a class="indexterm" name="AUTOID-14873"></A
><a class="indexterm" name="AUTOID-14876"></A
>A true
virus is a sequence of code that is inserted into other executable
code, so that when the regular program is run, the viral code is
also executed. The viral code causes a copy of itself to be inserted
in one or more other programs. Viruses are not distinct programs&nbsp;- they
cannot run on their own, and need to have some host program, of
which they are a part, executed to activate them.</P
><p class="para">Viruses
are usually found on personal computers running unprotected operating
systems, such as the Apple Macintosh and the <span class="acronym">IBM</SPAN
>
<span class="acronym">PC</SPAN
>. Although viruses have been written for <span class="acronym">UNIX</SPAN
>
systems,[1] traditional viruses do not currently appear
to pose a major threat to the <span class="acronym">UNIX</SPAN
> community.
Basically, any task that could be accomplished by a virus&nbsp;- from
gaining <i class="filename">root</I
> access to destroying files&nbsp;- can be accomplished
through other, less difficult means. While <span class="acronym">UNIX</SPAN
>
binary-file viruses have been written as an intellectual curiosity,
they are unlikely to become a major threat.</P
><blockquote class="footnote"><p class="para">[1] For a detailed account of one such virus,
see &quot;Experiences with Viruses on UNIX Systems&quot;
by Tom Duff in Computing Systems, Usenix, Volume 2, Number 2, Spring
1989.</P
></BLOCKQUOTE
><p class="para">The increased
popularity of <a class="indexterm" name="AUTOID-14890"></A
>
World
Wide Web browsers and their kin, plus an increased market for cross-platform
compatibility of office productivity tools, lead to an environment
where macro viruses and Trojan horses can thrive and spread. This
environment in <span class="acronym">UNIX</SPAN
> includes:</P
><ul class="itemizedlist"><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-14897"></A
>PostScript
files that are <span class="acronym">FTP</SPAN
>'d or transferred
via <span class="acronym">WWW</SPAN
> and automatically interpreted. PostScript
can embed commands to alter the filesystem and execute commands,
and an interpreter without a safety switch can cause widespread
damage.</P
></LI
><li class="listitem"><p class="para"><span class="acronym">WWW</SPAN
> pages containing <i class="firstterm"><a class="indexterm" name="AUTOID-14905"></A
><a class="indexterm" name="AUTOID-14907"></A
>
applets</I
>
in languages such as Java that are downloaded and executed on the
client host. Some of these languages allow the applets to open network
connections to arbitrary machines, to spawn other processes, and
to modify files. Denial of service attacks, and possibly others,
are trivial using these mechanisms.</P
></LI
><li class="listitem"><p class="para"><span class="acronym">MIME</SPAN
>-encoded<a class="indexterm" name="AUTOID-14912"></A
>
mail can contain files designed to overwrite local files, or contain
encoded applications that, when run, perform malicious acts, including
resending the same malicious code back out in mail.</P
></LI
><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-14916"></A
><span class="acronym">PC</SPAN
>-based
productivity tools that have been ported to <span class="acronym">UNIX</SPAN
>.
Many large companies want to transition their PC users to <span class="acronym">UNIX</SPAN
>
using the same software that they use on PCs. Thus, there is a market
for firms who make PC software to have identical behavior in a <span class="acronym">UNIX</SPAN
>-based
version of their code. The result is software that can exchange
macro-based viruses with PCs through sharing of data and macro source
files.</P
></LI
></UL
><p class="para">There is also the rather
interesting case now of versions of <span class="acronym">UNIX</SPAN
> (and
<span class="acronym">UNIX</SPAN
>-like systems, such as Linux) that run on
PC hardware. Some PC-based viruses, and boot-sector viruses in particular,
can actually infect PCs running <span class="acronym">UNIX</SPAN
>, although
the infection is unlikely to spread very far. The computer usually
becomes infected when a person leaves an infected floppy disk in
the computer's disk drive and then reboots. The computer
attempts to boot the floppy disk, and the virus executes, copying
itself onto the computer's hard disk. The usual effect
of these viruses is to make the <span class="acronym">UNIX</SPAN
> PC fail
to boot. That is because the viruses are written for PC execution
and not for <span class="acronym">UNIX</SPAN
>.</P
><p class="para">You can protect
yourself against viruses by means of the same techniques you use
to protect your system against back doors and crackers:</P
><ol class="orderedlist"><li class="listitem"><p class="para">Run <a class="indexterm" name="AUTOID-14933"></A
>
integrity
checks on your system on a regular basis; this practice helps detect
viruses as well as other tampering. (See <a class="xref" href="ch09_01.htm" title="Integrity Management">Chapter 9</A
>.)</P
></LI
><li class="listitem"><p class="para">Don't include nonstandard directories (including
.) in your execution search path.</P
></LI
><li class="listitem"><p class="para">Don't leave common <a class="indexterm" name="AUTOID-14940"></A
><a class="indexterm" name="AUTOID-14942"></A
><a class="indexterm" name="AUTOID-14945"></A
>
bin directories (<i class="filename">/bin, /usr/bin,
/usr/ucb,</I
> etc.) unprotected.</P
></LI
><li class="listitem"><p class="para">Set the file <a class="indexterm" name="AUTOID-14951"></A
>
permissions
of commands to a mode such as 555 or 511 to protect them against
unauthorized alteration.</P
></LI
><li class="listitem"><p class="para">Don't load <a class="indexterm" name="AUTOID-14955"></A
>
binary
code onto your machine from untrusted sources.</P
></LI
><li class="listitem"><p class="para">Make sure your own directories are writable only
by you and not by group or world.</P
></LI
></OL
><p class="para">If you are using <span class="acronym">UNIX</SPAN
> on a PC machine,
be sure not to <a class="indexterm" name="AUTOID-14961"></A
><a class="indexterm" name="AUTOID-14963"></A
>
boot
from questionable diskettes. The most widespread viruses in the
PC world, and the ones that can have some effect on a <span class="acronym">UNIX</SPAN
>
<span class="acronym">PC</SPAN
>, are boot viruses. These become active during
the start-up process from an infected disk, and they alter the boot
sector(s) on the internal hard disk. If you restart your PC with
a diskette in the drive that has also been in an infected PC, you
won't be able to boot to <span class="acronym">UNIX</SPAN
>, and you
may transfer a PC virus to your hard-disk boot block. The best defense
is to always ensure that there is no floppy disk in your PC when
you reboot: reboot from your hard drive.</P
><p class="para">If your <span class="acronym">UNIX PC</SPAN
> is infected with a virus, then you can disinfect it
by booting from a trusted floppy and then rewriting the boot block.
<a class="indexterm" name="AUTOID-14971"></A
><a class="indexterm" name="AUTOID-14973"></A
><a class="indexterm" name="AUTOID-14976"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PUIS-CHP-11-SECT-1.6">11.1.6 Worms</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-14982"></A
><a class="indexterm" name="AUTOID-14984"></A
><a class="indexterm" name="AUTOID-14987"></A
><a class="indexterm" name="AUTOID-14990"></A
><i class="firstterm">Worms</I
>
are programs that can run independently and travel from machine
to machine across network connections; worms may have portions of
themselves running on many different machines. Worms do not change
other programs, although they may carry other code that does (for
example, a true virus). We have seen about a dozen network worms,
at least two of which were in the <span class="acronym">UNIX</SPAN
> environment.
Worms are difficult to write, but can cause much damage. Developing
a worm requires a network environment and an author who is familiar
not only with the network services and facilities, but also with
the operating facilities required to support them once they've
reached the machine.[2]</P
><blockquote class="footnote"><p class="para">[2] See &quot;Computer Viruses
and Programmed Threats&quot; in <a class="xref" href="appd_01.htm" title="Paper Sources">Appendix D</A
> for other sources
of information about the Internet worm of 1988, which clogged machines
and networks as it spread.</P
></BLOCKQUOTE
><p class="para">Protection
against worm programs is like protection against break-ins. If an
intruder can enter your machine, so can a worm program. If your
machine is secure from unauthorized access, it should be secure
from a worm program. All of our advice about protecting against
unauthorized access applies here as well.</P
><p class="para">An anecdote
illustrates this theory. At the Second Conference on Artificial
Life in Santa Fe, New Mexico, in 1989, Russell Brand recounted a
story of how one machine on which he was working appeared to be
under attack by a worm program. Dozens of connections, one after
another, were made to the machine. Each connection had the same
set of commands executed, one after another, as attempts were made
(and succeeded) to break in.</P
><p class="para">After noticing that one
sequence of commands had some typing errors, the local administrators
realized that it wasn't a worm attack, but a large number
of individuals breaking into the machine. Apparently, one person
had found a security hole, had broken in, and had then posted a
how-to script to a local bulletin board. The result: dozens of <span class="acronym">BBS</SPAN
>
users trying the same &quot;script&quot; to get on themselves!
The sheer number of attempts being made at almost the same time
appeared to be some form of automated attack.</P
><p class="para">One bit
of advice we do have: if you suspect that your machine is under
attack by a worm program across the network, call one of the computer-incident
response centers (see <a class="xref" href="appf_01.htm" title="Organizations">Appendix F, <cite class="appendix">Organizations</CITE
></A
>)
to see if other sites have made similar reports. You may be able
to get useful information about how to protect or recover your system
in such a case. We also recommend that you sever your network connections
immediately to isolate your local network. If there is already a
worm program loose in your system, you may help prevent it from
spreading, and you may also prevent important data from being sent
outside of your local area network. If you've done a good
job with your backups and other security, little should be damaged.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PUIS-CHP-11-SECT-1.7">11.1.7 Bacteria and Rabbits</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-15007"></A
><a class="indexterm" name="AUTOID-15009"></A
><a class="indexterm" name="AUTOID-15011"></A
><a class="indexterm" name="AUTOID-15014"></A
><a class="indexterm" name="AUTOID-15017"></A
><i class="firstterm">Bacteria,</I
>
also known as <i class="firstterm">rabbits,</I
> are programs that do not explicitly damage
any files. Their sole purpose is to replicate themselves. A typical
bacteria or rabbit program may do nothing more than execute two
copies of itself simultaneously on multiprogramming systems, or
perhaps create two new files, each of which is a copy of the original
source file of the bacteria program. Both of those programs then
may copy themselves twice, and so on. Bacteria reproduce exponentially,
eventually taking up all the processor capacity, memory, or disk
space, denying the user access to those resources.</P
><p class="para">This
kind of attack is one of the oldest forms of programmed threats.
Users of some of the earliest multiprocessing machines ran these
programs either to take down the machine or simply to see what would
happen. Machines without quotas and resource-usage limits are especially
susceptible to this form of attack.</P
><p class="para">The kinds of bacteria
programs you are likely to encounter on a <span class="acronym">UNIX</SPAN
>
system are described in <a class="xref" href="ch25_01.htm" title="Denial of Service Attacks and Solutions">Chapter 25, <cite class="chapter">Denial of Service Attacks and Solutions</CITE
></A
>.</P
><blockquote class="note"><p class="para"><strong>NOTE:</STRONG
> We suggest that you be extremely cautious about importing
source code and command files from outside, untrusted sources. Programs
shipped on Usenet source code groups should not be considered as
completely trusted, nor should source code obtained by <span class="acronym">FTP</SPAN
>
(e.g., do you read the entire source code for <span class="acronym">EMACS</SPAN
>
each time a new release is issued? How do you know there is no unfriendly
code patched in?). We strongly urge that you never download binary
files from newsgroups and accept only binary code from sites under
conditions where you absolutely trust the source.</P
></BLOCKQUOTE
></DIV
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch10_08.htm" title="10.8 Managing Log Files"><img src="../gifs/txtpreva.gif" alt="Previous: 10.8 Managing Log Files" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Practical UNIX &amp; Internet Security"><img src="../gifs/txthome.gif" alt="Practical UNIX &amp; Internet Security" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch11_02.htm" title="11.2 Damage"><img src="../gifs/txtnexta.gif" alt="Next: 11.2 Damage" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">10.8 Managing Log Files</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">11.2 Damage</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.htm" title="The Networking CD Bookshelf">Library Home</A
> | <a href="../dnsbind/index.htm" title="DNS &amp; BIND">DNS &amp; BIND</A
> | <a href="../tcpip/index.htm" title="TCP/IP Network Administration">TCP/IP</A
> | <a href="../sendmail/index.htm" title="sendmail">sendmail</A
> | <a href="../smdref/index.htm" title="sendmail Desktop Reference">sendmail Reference</A
> | <a href="../firewall/index.htm" title="Building Internet Firewalls">Firewalls</A
> | <a href="index.htm" title="Practical UNIX &amp; Internet Security">Practical Security</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
