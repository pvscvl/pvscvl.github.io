<html><head>
<title>[Chapter 8] 8.6 The UNIX Encrypted Password System</TITLE>
<meta name="DC.title" content="Practical UNIX &amp; Internet Security"><meta name="DC.creator" content="Simson Garfinkel &amp; Gene Spafford"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-02-04T00:05:57Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-148-8" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch08_01.htm" title="8. Defending  Your Accounts"><link rel="prev" href="ch08_05.htm#PUIS-CHP-8-SECT-5.3.2" title="8.5 Protecting the root Account"><link rel="next" href="ch08_07.htm#PUIS-CHP-8-SECT-7.3" title="8.7 One-Time Passwords"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Practical UNIX &amp; Internet Security" usemap="#srchmap" border="0"></H1
><index.htmlmap name="srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Practical UNIX &amp; Internet Security"><area shape="RECT" coords="467,0,514,18" href="../search/psrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch08_05.htm#PUIS-CHP-8-SECT-5.3.2" title="8.5 Protecting the root Account"><img src="../gifs/txtpreva.gif" alt="Previous: 8.5 Protecting the root Account" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 8<br>Defending  Your Accounts</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch08_07.htm#PUIS-CHP-8-SECT-7.3" title="8.7 One-Time Passwords"><img src="../gifs/txtnexta.gif" alt="Next: 8.7 One-Time Passwords" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="PUIS-CHP-8-SECT-6">8.6 The UNIX Encrypted Password System</A
></H2
><p class="para"><a class="indexterm" name="AUTOID-11044"></A
><a class="indexterm" name="AUTOID-11047"></A
>When <span class="acronym">UNIX</SPAN
>
requests your password, it needs some way of determining that the
password you type is the correct one. Many early computer systems
(and quite a few still around today!) kept the passwords for all
of their accounts plainly visible in a so-called &quot;password
file&quot; that really contained the passwords. Under normal
circumstances, the system protected the passwords so that they could
be accessed only by privileged users and operating system utilities.
But through accident, programming error, or deliberate act, the
contents of the password file almost invariably become available
to unprivileged users. This scenario is illustrated in the following
remembrance:</P
><blockquote class="blockquote"><p class="para">Perhaps the most memorable such occasion occurred
in the early 1960s when a system administrator on the <span class="acronym">CTSS</SPAN
>
system at MIT was editing the password file and another system administrator
was editing the daily message that is printed on everyone's
terminal on login. Due to a software design error, the temporary
editor files of the two users were interchanged and thus, for a
time, the password file was printed on every terminal when it was
logged in.  	&nbsp;- Robert Morris and Ken Thompson,  		Password
Security: A Case History<a class="indexterm" name="AUTOID-11054"></A
><a class="indexterm" name="AUTOID-11056"></A
></P
></BLOCKQUOTE
><p class="para">The real danger posed by such systems, wrote Morris and Thompson,
is not that software problems will cause a recurrence of this event,
but that people can make copies of the password file and purloin
them without the knowledge of the system administrator. For example,
if the password file is saved on backup tapes, then those backups
must be kept in a physically secure place. If a backup tape is stolen,
then<em class="emphasis"> everybody's</EM
> password must be changed.</P
><p class="para"><span class="acronym">UNIX</SPAN
> avoids this problem by not keeping
actual passwords anywhere on the system. Instead, <span class="acronym">UNIX</SPAN
>
stores a value that is generated by using the password to encrypt
a block of zero bits with a one-way function called <em class="emphasis"><a class="indexterm" name="AUTOID-11064"></A
>
crypt( )</EM
>;
the result of the calculation is (usually) stored in the file <i class="filename"><a class="indexterm" name="AUTOID-11067"></A
><a class="indexterm" name="AUTOID-11069"></A
>/etc/passwd</I
>.
When you try to log in, the program <em class="emphasis">/<a class="indexterm" name="AUTOID-11073"></A
>
bin/login</EM
><kbd class="command"> </KBD
>does
not actually decrypt your password. Instead, <em class="emphasis">/bin/login</EM
>
takes the password that you typed, uses it to transform another
block of zeros, and compares the newly transformed block with the
block stored in the <i class="filename">/etc/passwd</I
> file. If the
two encrypted results match, the system lets you in.</P
><p class="para">The security of this approach rests upon the strength of the
encryption algorithm and the difficulty of guessing the user's
password. To date, the <em class="emphasis">crypt </EM
>() algorithm
has proven highly resistant to attacks. Unfortunately, users have
a habit of picking easy-to-guess passwords (see <a class="xref" href="ch03_06.htm#PUIS-CHP-3-SECT-6.2" title="Bad Passwords: Open Doors">Section 3.6.1, "Bad Passwords: Open Doors"</A
>), which creates the need
for shadow password files.</P
><blockquote class="note"><p class="para"><strong>NOTE:</STRONG
> Don't confuse the <em class="emphasis">crypt ( )</EM
>
algorithm with the <em class="emphasis"><a class="indexterm" name="AUTOID-11085"></A
>crypt</EM
>
encryption program. The <em class="emphasis">crypt</EM
> program uses
a different encryption system from <em class="emphasis">crypt ( )</EM
>
and is very easy to break. See <a class="xref" href="ch06_01.htm" title="Cryptography">Chapter 6, <cite class="chapter">Cryptography</CITE
></A
>,
for more details.</P
></BLOCKQUOTE
><div class="sect2"><h3 class="sect2"><a class="title" name="PUIS-CHP-8-SECT-6.1">8.6.1 The crypt()
Algorithm</A
></H3
><p class="para">The algorithm that <em class="emphasis">crypt (  )</EM
> uses is
based on the <a class="indexterm" name="AUTOID-11094"></A
>
Data
Encryption Standard (<span class="acronym">DES</SPAN
>) of the National Institute
of Standards and Technology (<span class="acronym">NIST</SPAN
>). In normal
operation, <span class="acronym">DES</SPAN
> uses a 56-bit key (eight 7-bit
<span class="acronym">ASCII</SPAN
> characters, for instance) to encrypt blocks
of original text, or <i class="firstterm"><a class="indexterm" name="AUTOID-11101"></A
>clear
text</I
>, that are 64 bits in length. The resulting 64-bit
blocks of encrypted text, or <i class="firstterm"><a class="indexterm" name="AUTOID-11104"></A
>ciphertext</I
>,
cannot easily be decrypted to the original clear text without knowing
the original 56-bit key.</P
><p class="para">The <span class="acronym">UNIX</SPAN
> <em class="emphasis">crypt (  )</EM
>
function takes the user's password as the encryption key
and uses it to encrypt a 64-bit block of zeros. The resulting 64-bit
block of cipher text is then encrypted again with the user's
password; the process is repeated a total of 25 times. The final
64 bits are unpacked into a string of 11 printable characters that
are stored in the <i class="filename">/etc/passwd</I
> file.[8]</P
><blockquote class="footnote"><p class="para">[8] Each of the 11 characters holds six bits of the
result, represented as one of 64 characters in the set &quot;.&quot;,
&quot;/&quot;, 0-9, A-Z, a-z,
in that order. Thus, the value 0 is represented as &quot;.&quot;,
and 32 is the letter &quot;U&quot;.</P
></BLOCKQUOTE
><p class="para">Although the source code to <i class="systemitem">crypt
( )</I
> is readily available, no technique has been discovered
(and publicized) to translate the encrypted password back into the
original password. Such reverse translation may not even be possible.
As a result, the only known way to defeat <span class="acronym">UNIX</SPAN
>
password security is via a brute-force attack (see the note below),
or by a <i class="firstterm"><a class="indexterm" name="AUTOID-11117"></A
>dictionary
attack</I
>. A dictionary attack is conducted by choosing
likely passwords, as from a dictionary, encrypting them, and comparing
the results with the value stored in <em class="emphasis">/etc/passwd</EM
>.
This approach to breaking a cryptographic cipher is also called
a <i class="firstterm"><a class="indexterm" name="AUTOID-11121"></A
><a class="indexterm" name="AUTOID-11124"></A
><a class="indexterm" name="AUTOID-11127"></A
><a class="indexterm" name="AUTOID-11130"></A
>key search</I
>
or <i class="firstterm">password cracking.</I
></P
><p class="para">Robert Morris and Ken Thompson designed <em class="emphasis">crypt (
)</EM
> to make a key search computationally expensive, and
therefore too difficult to be successful. At the time, software
implementations of <span class="acronym">DES</SPAN
> were usually slow; iterating
the encryption process 25 times made the process of encrypting a
single password 25 times slower still. On the original <a class="indexterm" name="AUTOID-11137"></A
>
<span class="acronym">PDP</SPAN
>-11 processors, upon
which <span class="acronym">UNIX</SPAN
> was designed, nearly a full second
of computer time was required to encrypt a single password. To eliminate
the possibility of using <span class="acronym">DES</SPAN
> hardware encryption
chips, which were a thousand times faster than software running
on a <span class="acronym">PDP</SPAN
>-11, Morris and Thompson modified the
<span class="acronym">DES</SPAN
> tables used by their software implementation,
rendering the two incompatible. The same modification also served
to prevent a bad guy from simply pre-encrypting an entire dictionary
and storing it.</P
><p class="para">What was the modification? Morris and Thompson added a bit
of <i class="firstterm">salt</I
>, as we'll describe below.</P
><blockquote class="note"><p class="para"><strong>NOTE:</STRONG
> There is no published or known method to easily decrypt
<span class="acronym">DES</SPAN
>-encrypted text without knowing the key.[9] However,
there have been many advances in hardware design since the <span class="acronym">DES</SPAN
>
was developed. Although there is no known software algorithm to
&quot;break&quot; the encryption, you can build a highly
parallel, special-purpose <span class="acronym">DES</SPAN
> decryption engine
that can try all possible keys in a matter of hours.</P
><p class="para">The cost of such a machine is estimated at several millions
of dollars. It would work by using a brute-force attack of trying
all possible keys until intelligible text is produced. Several million
dollars is well within the budget of most governments, and a significant
number of large corporations. A similar machine for finding <span class="acronym">UNIX</SPAN
>
passwords is feasible. Thus, passwords should not be considered
as completely &quot;unbreakable.&quot; <a class="indexterm" name="AUTOID-11155"></A
></P
></BLOCKQUOTE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PUIS-CHP-8-SECT-6.2">8.6.2 What Is Salt?</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-11160"></A
>As table salt adds
zest to popcorn, the salt that Morris and Thompson sprinkled into
the <span class="acronym">DES</SPAN
> algorithm added a little more spice and
variety. The <span class="acronym">DES</SPAN
> salt is a 12-bit number, between
0 and 4095, which slightly changes the result of the <span class="acronym">DES</SPAN
>
function. Each of the 4096 different salts makes a password encrypt
a different way.</P
><p class="para">When you change your password, the <i class="filename">/bin/passwd</I
>
<a class="indexterm" name="AUTOID-11167"></A
><a class="indexterm" name="AUTOID-11169"></A
><a class="indexterm" name="AUTOID-11173"></A
>
program selects a salt based on the time of day.
The salt is converted into a two-character string and is stored
in the <i class="filename">/etc/passwd</I
> file along with the encrypted
&quot;password.&quot;[10] In this manner, when
you type your password at login time, the same salt is used again.
<span class="acronym">UNIX</SPAN
> stores the salt as the first two characters
of the encrypted password.</P
><blockquote class="footnote"><p class="para">[10] By now,
you know that what is stored in the <i class="filename">/etc/passwd</I
>
file is not really the encrypted password. However, everyone calls
it that, and we will do the same from here on. Otherwise, we'll
need to keep typing &quot;the superencrypted block of zeros
that is used to verify the user's password&quot; everywhere
in the book, filling many extra pages and contributing to the premature
demise of yet more trees.</P
></BLOCKQUOTE
><p class="para"><a class="xref" href="#PUIS-CHP-8-TAB-2" title="Passwords and Salts">Table 8.2</A
> shows how a few different words encrypt with different
salts.</P
><table class="table"><caption class="table"><a class="title" name="PUIS-CHP-8-TAB-2">Table 8.2: Passwords and
Salts</A
></CAPTION
><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1"><p class="para">Password</P
></TH
><th class="entry" align="LEFT" rowspan="1" colspan="1"><p class="para">Salt</P
></TH
><th class="entry" align="LEFT" rowspan="1" colspan="1"><p class="para">Encrypted Password</P
></TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">nutmeg</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Mi</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">MiqkFWCm1fNJI</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">ellen1</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">ri</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">ri79KNd7V6.Sk</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">Sharon</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">./</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">./2aN7ysff3qM</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">norahs</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">am</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">amfIADT2iqjAf</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">norahs</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">7a</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">7azfT5tIdyh0I</P
></TD
></TR
></TBODY
></TABLE
><p class="para">Notice that the last password, <i class="systemitem">norahs</I
>,
was encrypted two different ways with two different salts.</P
><p class="para">Having a salt means that the same password can encrypt in
4096 different ways. This makes it much harder for an attacker to
build a reverse dictionary for translated encrypted passwords back
into their unencrypted form: to build a reverse dictionary of 100,000
words, an attacker would need to have 409,600,000 entries. As a
side effect, the salt makes it possible for a user to have the same
password on a number of different computers and to keep this fact
a secret (usually), even from somebody who has access to the <em class="emphasis">/etc/passwd</EM
>
files on all of those computers; two systems would not likely assign
the same salt to the user, thus ensuring that the encrypted password
field is different.[11]</P
><blockquote class="footnote"><p class="para">[11] This case occurs only when the
user actually types in his or her password on the second computer.
Unfortunately, in practice system administrators commonly cut and
paste <em class="emphasis">/etc/passwd</EM
> entries from one computer
to another when they build accounts for users on new computers.
As a result, others can easily tell when a user has the same password
on more than one system.</P
></BLOCKQUOTE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PUIS-CHP-8-SECT-6.3">8.6.3 What the Salt Doesn't Do</A
></H3
><p class="para">Unfortunately, salt is not a cure-all. Although it makes the
attacker's job of building a database of all encrypted
passwords more difficult, it doesn't increase the amount
of time required to search for a single user's password.</P
><p class="para">Another problem with the salt is that it is limited, by design,
to one of 4096 different possibilities. In the 20 years since passwords
have been salted, computers have become faster, hard disks have
become bigger, and you can now put 4, 10, or even 20 gigabytes of
information onto a single tape drive. As a result, password files
have become once again a point of vulnerability, and <span class="acronym">UNIX</SPAN
>
vendors are increasingly turning to shadow password files and other
techniques to fight password-guessing attacks. Yet another problem
is that the salt is selected based on the time of day, which makes
some salts more likely than others.<a class="indexterm" name="AUTOID-11245"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PUIS-CHP-8-SECT-6.4">8.6.4 Crypt16() and Other Algorithms</A
></H3
><p class="para">Some <span class="acronym">UNIX</SPAN
> operating systems, such as HP-UX,
Ultrix, and <span class="acronym">BSD</SPAN
> 4.4 can be configured to use
a different <em class="emphasis">crypt ( )</EM
> system library that uses
16 or more significant characters in each password. The algorithm
may also use a significantly larger salt. This algorithm is often
referred to as <em class="emphasis"><a class="indexterm" name="AUTOID-11254"></A
><a class="indexterm" name="AUTOID-11256"></A
>bigcrypt</EM
>() or <em class="emphasis">crypt16 </EM
>().
You should check your user documentation to see if this algorithm
is an option available on your system. If so, you should consider
using it. The advantage is that these systems will have more secure
passwords. The disadvantage is that the encrypted passwords on these
systems will not be compatible with the encrypted passwords on other
systems.<a class="indexterm" name="AUTOID-11259"></A
><a class="indexterm" name="AUTOID-11262"></A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch08_05.htm#PUIS-CHP-8-SECT-5.3.2" title="8.5 Protecting the root Account"><img src="../gifs/txtpreva.gif" alt="Previous: 8.5 Protecting the root Account" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Practical UNIX &amp; Internet Security"><img src="../gifs/txthome.gif" alt="Practical UNIX &amp; Internet Security" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch08_07.htm#PUIS-CHP-8-SECT-7.3" title="8.7 One-Time Passwords"><img src="../gifs/txtnexta.gif" alt="Next: 8.7 One-Time Passwords" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">8.5 Protecting the root Account</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">8.7 One-Time Passwords</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.htm" title="The Networking CD Bookshelf">Library Home</A
> | <a href="../dnsbind/index.htm" title="DNS &amp; BIND">DNS &amp; BIND</A
> | <a href="../tcpip/index.htm" title="TCP/IP Network Administration">TCP/IP</A
> | <a href="../sendmail/index.htm" title="sendmail">sendmail</A
> | <a href="../smdref/index.htm" title="sendmail Desktop Reference">sendmail Reference</A
> | <a href="../firewall/index.htm" title="Building Internet Firewalls">Firewalls</A
> | <a href="index.htm" title="Practical UNIX &amp; Internet Security">Practical Security</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
