<html><head>
<title>[Chapter 19] 19.2 Sun's Remote Procedure Call (RPC)</TITLE>
<meta name="DC.title" content="Practical UNIX &amp; Internet Security"><meta name="DC.creator" content="Simson Garfinkel &amp; Gene Spafford"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-02-04T00:14:59Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-148-8" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch19_01.htm" title="19. RPC, NIS, NIS+,  and Kerberos"><link rel="prev" href="ch19_01.htm" title="19.1 Securing Network Services"><link rel="next" href="ch19_03.htm#PUIS-CHP-19-SECT-3.4" title="19.3 Secure RPC (AUTH_DES)"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Practical UNIX &amp; Internet Security" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Practical UNIX &amp; Internet Security"><area shape="RECT" coords="467,0,514,18" href="../search/psrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch19_01.htm" title="19.1 Securing Network Services"><img src="../gifs/txtpreva.gif" alt="Previous: 19.1 Securing Network Services" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 19<br>RPC, NIS, NIS+,  and Kerberos</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch19_03.htm#PUIS-CHP-19-SECT-3.4" title="19.3 Secure RPC (AUTH_DES)"><img src="../gifs/txtnexta.gif" alt="Next: 19.3 Secure RPC (AUTH_DES)" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="PUIS-CHP-19-SECT-2">19.2 Sun's Remote Procedure Call (RPC)</A
></H2
><p class="para">The
fundamental building block of all network information systems is
a mechanism for performing remote procedure calls. This mechanism,
usually called <span class="acronym">RPC</SPAN
>, allows a program running
on one computer to more-or-less transparently execute a function
that is actually running on another computer.</P
><p class="para"><span class="acronym">RPC</SPAN
>
systems can be categorized as <em class="emphasis"><a class="indexterm" name="AUTOID-25783"></A
><a class="indexterm" name="AUTOID-25785"></A
><a class="indexterm" name="AUTOID-25787"></A
>blocking systems</EM
>,
which cause the calling program to cease execution until a result
is returned, or as <i class="firstterm">non-blocking</I
> (<i class="firstterm">asynchronou</I
><em class="emphasis">s
systems</EM
>), which means that the calling program continues
running while the remote procedure call is performed. (The results
of a non-blocking <span class="acronym">RPC</SPAN
>, if they are returned,
are usually provided through some type of callback scheme.)</P
><p class="para"><span class="acronym">RPC</SPAN
> allows programs to be distributed:
a computationally intensive algorithm can be run on a high-speed
computer, a remote sensing device can be run on another computer,
and the results can be compiled on a third. <span class="acronym">RPC</SPAN
>
also makes it easy to create network-based client/server
programs: the clients and servers communicate with each other using
remote procedure calls.</P
><p class="para">One of the first <span class="acronym">UNIX</SPAN
>
remote procedure call systems was developed by Sun Microsystems
for use with <span class="acronym">NIS</SPAN
> and <span class="acronym">NFS</SPAN
>.
Sun's <span class="acronym">RPC</SPAN
> uses a system called <a class="indexterm" name="AUTOID-25801"></A
><a class="indexterm" name="AUTOID-25803"></A
>
<span class="acronym">XDR</SPAN
>
(external data representation), to represent binary information
in a uniform manner and bit order. <span class="acronym">XDR</SPAN
> allows
a program running on a computer with one byte order, such as a <span class="acronym">SPARC</SPAN
>
workstation, to communicate seamlessly with a program running on
a computer with an opposite byte order, such as a workstation with
an Intel x86 microprocessor. <span class="acronym">RPC</SPAN
> messages can
be sent with either the <span class="acronym">TCP</SPAN
> or <span class="acronym">UDP</SPAN
>
IP protocols (currently, the <span class="acronym">UDP</SPAN
> version is more
common). After their creation by Sun, <span class="acronym">XDR</SPAN
> and
<span class="acronym">RPC</SPAN
> were reimplemented by the University of California
at Berkeley and are now freely available.</P
><p class="para">Sun's
<span class="acronym">RPC</SPAN
> is not unique. A different <span class="acronym">RPC</SPAN
>
system is used by the Open Software Foundation's <a class="indexterm" name="AUTOID-25817"></A
><a class="indexterm" name="AUTOID-25819"></A
>
Distributed Computing Environment
(<span class="acronym">DCE</SPAN
>). Yet another <span class="acronym">RPC</SPAN
> system
has been proposed by the Object Management Group. Called <a class="indexterm" name="AUTOID-25824"></A
>
<span class="acronym">CORBA</SPAN
>
(Common Object Request Broker Architecture), this system is optimized
for <span class="acronym">RPC</SPAN
> between object-oriented programs written
in C++ or SmallTalk.</P
><p class="para">In the following
sections, we'll discuss the Sun <span class="acronym">RPC</SPAN
>
mechanism, as it seems to be the most widely used. The continuing
popularity of <span class="acronym">NFS</SPAN
> (described in <a class="xref" href="ch20_01.htm" title="NFS">Chapter 20</A
>) suggests
that Sun <span class="acronym">RPC</SPAN
> will be in widespread use for some
time to come.</P
><div class="sect2"><h3 class="sect2"><a class="title" name="PUIS-CHP-19-SECT-2.1">19.2.1 Sun's portmap/rpcbind</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-25836"></A
><a class="indexterm" name="AUTOID-25838"></A
><a class="indexterm" name="AUTOID-25840"></A
>For
an <span class="acronym">RPC</SPAN
> client to communicate with an <span class="acronym">RPC</SPAN
>
server, many things must happen:</P
><ul class="itemizedlist"><li class="listitem"><p class="para">The <span class="acronym">RPC</SPAN
> client
must be running.</P
></LI
><li class="listitem"><p class="para">The <span class="acronym">RPC</SPAN
> server must be running
on the server machine (or it must be automatically started when
the request is received).</P
></LI
><li class="listitem"><p class="para">The client must know on which host the <span class="acronym">RPC</SPAN
>
server is located.</P
></LI
><li class="listitem"><p class="para">The client and the server must agree to communicate
on a particular <span class="acronym">TCP</SPAN
> or <span class="acronym">UDP</SPAN
>
port.</P
></LI
></UL
><p class="para">The simplest way to
satisfy this list of conditions is to have the <span class="acronym">UNIX</SPAN
>
computer start the server when the computer boots, to have the server
running on a well-known host, and to have the port numbers predefined.
This is the approach that <span class="acronym">UNIX</SPAN
> takes with standard
Internet services such as Telnet and <span class="acronym">SMTP</SPAN
>.</P
><p class="para">The approach that Sun took for <span class="acronym">RPC</SPAN
> was
different. Instead of having servers run on a well-known port, Sun
developed a program called <kbd class="command">portmap</KBD
> in SunOS 4.x,
and renamed <kbd class="command">rpcbind</KBD
> in Solaris 2.x. We will refer to the program
as the <kbd class="command">portmapper</KBD
>.</P
><p class="para">When an <span class="acronym">RPC</SPAN
> server
starts, it dynamically obtains a free <span class="acronym">UDP</SPAN
> or
<span class="acronym">TCP</SPAN
> port, then registers itself with the <kbd class="command">portmapper</KBD
>.
When a client wishes to communicate with a particular server, it
contacts the <kbd class="command">portmapper</KBD
> process, determines the port number used
by the server, and then initiates communication.</P
><p class="para">The
<kbd class="command">portmapper</KBD
> approach has the advantage that you can have many more
<span class="acronym">RPC</SPAN
> services (in theory, 232) than there are
IP port numbers (216).[2] In practice,
however, the greater availability of <span class="acronym">RPC</SPAN
> server
numbers has not been very important. Indeed, one of the most widely
used <span class="acronym">RPC</SPAN
> services, <span class="acronym">NFS</SPAN
>, usually
has a fixed <span class="acronym">UDP</SPAN
> port of 2049.</P
><blockquote class="footnote"><p class="para">[2] Of course, you can't
really have <em class="emphasis">2</EM
>32 RPC services, because there
aren't enough programmers to write them, or enough computers
and RAM for them to run. The reason for having <em class="emphasis">2</EM
>32
different RPC service numbers available was that different vendors
could pick RPC numbers without the possibility of conflict. A better
way to have reached this goal would have been to allow RPC services
to use names, so that companies and organizations could have registered
their RPC services using their names as part of the service names&nbsp;- but
the designers didn't ask us.</P
></BLOCKQUOTE
><p class="para">The
<kbd class="command">portmapper</KBD
> program also complicates building Internet <a class="indexterm" name="AUTOID-25887"></A
><a class="indexterm" name="AUTOID-25890"></A
>
firewalls,
because you almost never know in advance the particular IP port
that will be used by <span class="acronym">RPC</SPAN
>-based services.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PUIS-CHP-19-SECT-2.2">19.2.2 RPC Authentication</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-25898"></A
><a class="indexterm" name="AUTOID-25901"></A
><a class="indexterm" name="AUTOID-25904"></A
>Client programs contacting an <span class="acronym">RPC</SPAN
>
server need a way to authenticate themselves to the server, so that
the server can determine what information the client should be able
to access, and what functions should be allowed. Without authentication,
any client on the network that can send packets to the <span class="acronym">RPC</SPAN
>
server could access any function.</P
><p class="para">There are several
different forms of authentication available for <span class="acronym">RPC</SPAN
>,
as described in <a class="xref" href="#PUIS-CHP-19-TAB-1" title="RPC Authentication Options">Table 19.1</A
>. Not all authentication
systems are available in all versions of <span class="acronym">RPC</SPAN
>:</P
><table class="table"><caption class="table"><a class="title" name="PUIS-CHP-19-TAB-1">Table 19.1: RPC Authentication Options</A
></CAPTION
><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1"><p class="para">System</P
></TH
><th class="entry" align="LEFT" rowspan="1" colspan="1"><p class="para">Authentication Technique</P
></TH
><th class="entry" align="LEFT" rowspan="1" colspan="1"><p class="para">Comments</P
></TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">AUTH_NONE</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">None</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">No authentication. Anonymous access.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">AUTH_UNIX[3]</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">RPC client sends the UNIX UID and GIDs
for the user.</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Not secure. Server implicitly trusts
that the user is who the user claims to be.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">AUTH_DES</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Authentication based on public key cryptography
and DES</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Reasonably secure, although not widely
available from manufacturers other than Sun.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">AUTH_KERB</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Authentication based on Kerberos</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Very secure, but requires that you set
up a Kerberos Server (described later in this chapter). As with
AUTH_DES, AUTH_KERB is not widely available.</P
></TD
></TR
></TBODY
></TABLE
><blockquote class="footnote"><p class="para">[3] AUTH_UNIX
is called AUTH_SYS in at least one version of Sun Solaris.</P
></BLOCKQUOTE
><div class="sect3"><h4 class="sect3"><a class="title" name="PUIS-CHP-19-SECT-2.2.1">19.2.2.1 AUTH_NONE</A
></H4
><p class="para">Live fast, die young.
<a class="indexterm" name="AUTOID-25961"></A
>
<span class="acronym">AUTH_NONE</SPAN
>
is bare-bones <span class="acronym">RPC</SPAN
> with no user authentication.
You might use it for services that require and provide no useful
information, such as time of day. On the other hand, why do you
want other computers on the network to be able to find out the setting
of your's system's time-of-day clock? (Furthermore,
because the system's time of day is used in a variety of
cryptographic protocols, even that information might be usable in
an attack against your computer.)</P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PUIS-CHP-19-SECT-2.2.2">19.2.2.2 AUTH_UNIX</A
></H4
><p class="para"><span class="acronym">AUTH_UNIX</SPAN
><a class="indexterm" name="AUTOID-25969"></A
>
was the only authentication
system provided by Sun through Release 4.0 of the SunOS operating
systems, and it is the only form of <span class="acronym">RPC</SPAN
> authentication
offered by many <span class="acronym">UNIX</SPAN
> vendors. It is widely used.
Unfortunately, it is fundamentally unsecure.</P
><p class="para"><a class="indexterm" name="AUTOID-25974"></A
>With <span class="acronym">AUTH_UNIX</SPAN
>, each <span class="acronym">RPC</SPAN
>
request is accompanied with a <span class="acronym">UID</SPAN
> and a set of
<span class="acronym">GIDS</SPAN
>[4]
for authentication.
The server implicitly trusts the <span class="acronym">UID</SPAN
> and <span class="acronym">GIDS</SPAN
>
presented by the client, and uses this information to determine
if the action should be allowed or not. Anyone with access to the
network can craft an <span class="acronym">RPC</SPAN
> packet with any arbitrary
values for <span class="acronym">UID</SPAN
> and <span class="acronym">GID</SPAN
>. Obviously,
<span class="acronym">AUTH_UNIX</SPAN
> is not secure, because the client is
free to claim any identity, and there is no provision for checking
on the part of the server.</P
><blockquote class="footnote"><p class="para">[4] Some versions of RPC present eight additional
GIDs, while others present up to 16.</P
></BLOCKQUOTE
><p class="para">In recent years, Sun has
changed the name <span class="acronym">AUTH_UNIX</SPAN
> to <span class="acronym">AUTH_SYS</SPAN
>.
Nevertheless, it's still the same system.</P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PUIS-CHP-19-SECT-2.2.3">19.2.2.3 AUTH_DES</A
></H4
><p class="para"><span class="acronym">AUTH_DES</SPAN
><a class="indexterm" name="AUTOID-25996"></A
>
is the basis of Sun's
&quot;Secure <span class="acronym">RPC</SPAN
>&quot; (described later
in this chapter). <span class="acronym">AUTH_DES</SPAN
> uses a combination
of secret key and public key cryptography to allow security in a
networked environment. It was developed several years after <span class="acronym">AUTH_UNIX</SPAN
>,
and is not widely available on <span class="acronym">UNIX</SPAN
> platforms
other than Sun's SunOS and Solaris 2.x operating systems.</P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PUIS-CHP-19-SECT-2.2.4">19.2.2.4 AUTH_KERB</A
></H4
><p class="para"><span class="acronym">AUTH_KERB</SPAN
><a class="indexterm" name="AUTOID-26006"></A
><a class="indexterm" name="AUTOID-26008"></A
>
is a modification to Sun's <span class="acronym">RPC</SPAN
> system
that allows it to interoperate with <span class="acronym">MIT</SPAN
>'s
Kerberos system for authentication. Although Kerberos was developed
in the mid 1980s, <span class="acronym">AUTH_KERB</SPAN
> authentication for
<span class="acronym">RPC</SPAN
> was not incorporated into Sun's
<span class="acronym">RPC</SPAN
> until the early 1990s.</P
><blockquote class="note"><p class="para"><strong>NOTE:</STRONG
> Carefully review the <span class="acronym">RPC</SPAN
> services
that are configured into your system for automatic start when the
system boots, or for automatic dispatch from the <i class="filename">inetd</I
>
(see <a class="xref" href="ch17_01.htm" title="TCP/IP Services">Chapter 17, <cite class="chapter">TCP/IP Services</CITE
></A
>).
If you don't need a service, disable it.</P
><p class="para">In
particular, if your version of the <a class="indexterm" name="AUTOID-26022"></A
>
rexd
service cannot be forced into only accepting connections authenticated
with Kerberos or Secure <span class="acronym">RPC</SPAN
>, then it should be
turned off. The <i class="filename">rexd</I
> daemon (which executes
commands issued with the on command) otherwise is easily fooled
into executing commands on behalf of any non-root <a class="indexterm" name="AUTOID-26026"></A
><a class="indexterm" name="AUTOID-26029"></A
>
user.<a class="indexterm" name="AUTOID-26032"></A
></P
></BLOCKQUOTE
></DIV
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch19_01.htm" title="19.1 Securing Network Services"><img src="../gifs/txtpreva.gif" alt="Previous: 19.1 Securing Network Services" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Practical UNIX &amp; Internet Security"><img src="../gifs/txthome.gif" alt="Practical UNIX &amp; Internet Security" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch19_03.htm#PUIS-CHP-19-SECT-3.4" title="19.3 Secure RPC (AUTH_DES)"><img src="../gifs/txtnexta.gif" alt="Next: 19.3 Secure RPC (AUTH_DES)" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">19.1 Securing Network Services</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">19.3 Secure RPC (AUTH_DES)</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.htm" title="The Networking CD Bookshelf">Library Home</A
> | <a href="../dnsbind/index.htm" title="DNS &amp; BIND">DNS &amp; BIND</A
> | <a href="../tcpip/index.htm" title="TCP/IP Network Administration">TCP/IP</A
> | <a href="../sendmail/index.htm" title="sendmail">sendmail</A
> | <a href="../smdref/index.htm" title="sendmail Desktop Reference">sendmail Reference</A
> | <a href="../firewall/index.htm" title="Building Internet Firewalls">Firewalls</A
> | <a href="index.htm" title="Practical UNIX &amp; Internet Security">Practical Security</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
