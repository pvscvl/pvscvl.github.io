<html><head>
<title>[Chapter 23] 23.5 Tips on Using Passwords</TITLE>
<meta name="DC.title" content="Practical UNIX &amp; Internet Security"><meta name="DC.creator" content="Simson Garfinkel &amp; Gene Spafford"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-02-04T00:17:54Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-148-8" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch23_01.htm" title="23. Writing Secure SUID and Network Programs"><link rel="prev" href="ch23_04.htm" title="23.4 Tips on Writing SUID/SGID Programs"><link rel="next" href="ch23_06.htm" title="23.6 Tips on Generating Random Numbers"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Practical UNIX &amp; Internet Security" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Practical UNIX &amp; Internet Security"><area shape="RECT" coords="467,0,514,18" href="../search/psrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch23_04.htm" title="23.4 Tips on Writing SUID/SGID Programs"><img src="../gifs/txtpreva.gif" alt="Previous: 23.4 Tips on Writing SUID/SGID Programs" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 23<br>Writing Secure SUID and Network Programs</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch23_06.htm" title="23.6 Tips on Generating Random Numbers"><img src="../gifs/txtnexta.gif" alt="Next: 23.6 Tips on Generating Random Numbers" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="PUIS-CHP-23-SECT-5">23.5 Tips on Using Passwords</A
></H2
><p class="para"><a class="indexterm" name="IDX-PASSWORDS"></A
>Lots
of computer programs use passwords for user authentication. Beyond
the standard <span class="acronym">UNIX</SPAN
> password, users soon find that
they have passwords for special electronic mail accounts, special
accounting programs, and even fantasy role-playing games.</P
><p class="para">Few
users are good at memorizing passwords, and there is a great temptation
to use a single password for all uses. This is a bad idea. Users
should be encouraged to not type their login password into some
<span class="acronym">MUD</SPAN
> that's running over at the local
university, for example.</P
><p class="para">As a programmer, there are
several steps that you can take in programs that ask for passwords
to make the process more secure:</P
><ol class="orderedlist"><li class="listitem"><p class="para">Don't echo the password as
the user types it.</P
><p class="para"><a class="indexterm" name="AUTOID-32857"></A
><a class="indexterm" name="AUTOID-32859"></A
>Normally, <span class="acronym">UNIX</SPAN
> turns off echo
when people type passwords. You can do this yourself by using the
<kbd class="command">getpass()</KBD
> function. In recent years, however, a trend
has evolved to echo asterisks (*) for each character of
the password typed. This provides some help for the person typing
the password to see if they have made a mistake in their typing,
but it also enables somebody looking over the user's shoulders
to see how many characters are in the password.</P
></LI
><li class="listitem"><p class="para">When you store the user's password on the
computer, encrypt it. </P
><p class="para">If nothing else, use the <a class="indexterm" name="AUTOID-32866"></A
><a class="indexterm" name="AUTOID-32868"></A
>
<kbd class="command">crypt()</KBD
>
library function. Use random numbers to choose the password's
salt. When the user provides a password, check to see if it is the
original password by encrypting the provided password with the same
salt.</P
><p class="para">For example, the following bit of a simple Perl
code takes a password in the $password variable, generates
a random salt, and places an encrypted password in the variable
<i class="filename">$encrypted_password:</I
></P
><blockquote class="screen"><pre class="screen">$salts=&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789./&quot;;
srand(time);
local($s1) = rand(64);
local($s2) = rand(64);
$salt = substr($salts,$s1,1) . substr($salts,$s2,1);
$encrypted_password= crypt($password,&amp;salt)</PRE
></BLOCKQUOTE
><p class="para">You can then check to see if a newly provided password is
in fact the encrypted password with this simple Perl fragment:</P
><p class="para"><blockquote class="screen"><pre class="screen">if($encrypted_password eq
  crypt($new_password, $encrypted_password){
  print &quot;password matched.\n&quot;;}</PRE
></BLOCKQUOTE
></P
></LI
><li class="listitem"><p class="para">If you need access to <kbd class="command">crypt()</KBD
>
from a shell script, consider using <i class="filename">/usr/lib/makekey,</I
>
which provides much the same functionality.</P
></LI
></OL
><div class="sect2"><h3 class="sect2"><a class="title" name="PUIS-CHP-23-SECT-5.1">23.5.1 Use Message Digests for Storing Passwords</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-32885"></A
><a class="indexterm" name="AUTOID-32887"></A
><a class="indexterm" name="AUTOID-32889"></A
><a class="indexterm" name="AUTOID-32892"></A
>Instead of using the 
<kbd class="command">crypt()</KBD
>
function to store an encrypted password, consider using a cryptographic
hash function such as MD5. Using a cryptographic hash allows the
user to type a password (or, properly, a passphrase) of any length.</P
><p class="para">This technique is the one that <span class="acronym">PGP</SPAN
> uses
for encrypting files with &quot;conventional cryptography,&quot;
as well as for encrypting the secret key that is stored on your
hard disk. When you type in a passphrase, this phrase is processed
with the MD5 message digest algorithm (described in <a class="xref" href="ch06_01.htm" title="Cryptography">Chapter 6</A
>). The resulting 128-bit hash is used
as the key for the <span class="acronym">IDEA</SPAN
> encryption algorithm.</P
><p class="para">If you need to be able to verify a password, but you do not
need an encryption key, you can store the MD5 hash. When you need
to verify the user's password, take the new value entered
by the user, compute the value's MD5, and see if the new
MD5 matches the stored value.</P
><p class="para">As with the <kbd class="command">crypt()</KBD
>
function, you can include a random salt with the passphrase. If
you do so, you must record the salt with the saved MD5 and use it
whenever you wish to verify the user's password.</P
><p class="para">The primary benefit to using a cryptographic hash value is that
it takes whatever input the user types as the password, no matter how
long that output might be.
[13]
 This may encourage users to type longer
passwords or passphrases that will be resistant to dictionary
attacks. You might also remind them of this practice when you prompt
them for new
passwords.<a class="indexterm" name="AUTOID-32906"></A
></P
><blockquote class="footnote"><p class="para">[13] But remember to check for buffer overflow when reading the
password.</P
></BLOCKQUOTE
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch23_04.htm" title="23.4 Tips on Writing SUID/SGID Programs"><img src="../gifs/txtpreva.gif" alt="Previous: 23.4 Tips on Writing SUID/SGID Programs" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Practical UNIX &amp; Internet Security"><img src="../gifs/txthome.gif" alt="Practical UNIX &amp; Internet Security" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch23_06.htm" title="23.6 Tips on Generating Random Numbers"><img src="../gifs/txtnexta.gif" alt="Next: 23.6 Tips on Generating Random Numbers" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">23.4 Tips on Writing SUID/SGID Programs</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">23.6 Tips on Generating Random Numbers</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.htm" title="The Networking CD Bookshelf">Library Home</A
> | <a href="../dnsbind/index.htm" title="DNS &amp; BIND">DNS &amp; BIND</A
> | <a href="../tcpip/index.htm" title="TCP/IP Network Administration">TCP/IP</A
> | <a href="../sendmail/index.htm" title="sendmail">sendmail</A
> | <a href="../smdref/index.htm" title="sendmail Desktop Reference">sendmail Reference</A
> | <a href="../firewall/index.htm" title="Building Internet Firewalls">Firewalls</A
> | <a href="index.htm" title="Practical UNIX &amp; Internet Security">Practical Security</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
