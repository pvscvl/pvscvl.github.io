<html><head>
<title>[Chapter 9] Integrity Management</TITLE>
<meta name="DC.title" content="Practical UNIX &amp; Internet Security"><meta name="DC.creator" content="Simson Garfinkel &amp; Gene Spafford"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-02-04T00:07:04Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-148-8" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="part03.htm" title="III. System Security"><link rel="prev" href="ch08_08.htm#PUIS-CHP-8-SECT-8.3.1" title="8.8 Administrative Techniques for Conventional Passwords"><link rel="next" href="ch09_02.htm#PUIS-CHP-9-SECT-2.1" title="9.2 Detecting Change"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Practical UNIX &amp; Internet Security" usemap="#srchmap" border="0"></H1
><map name="srchmap"index.html><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Practical UNIX &amp; Internet Security"><area shape="RECT" coords="467,0,514,18" href="../search/psrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch08_08.htm#PUIS-CHP-8-SECT-8.3.1" title="8.8 Administrative Techniques for Conventional Passwords"><img src="../gifs/txtpreva.gif" alt="Previous: 8.8 Administrative Techniques for Conventional Passwords" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 9</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch09_02.htm#PUIS-CHP-9-SECT-2.1" title="9.2 Detecting Change"><img src="../gifs/txtnexta.gif" alt="Next: 9.2 Detecting Change" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="CHAPTER"><h1 class="chapter"><a class="title" name="PUIS-CHP-9">9. Integrity Management</A
></H1
><div class="htmltoc"><p><b>Contents:</B
><br><a class="SECT1" href="#PUIS-CHP-9-SECT-1" title="9.1 Prevention">Prevention</A
><br><a class="SECT1" href="ch09_02.htm#PUIS-CHP-9-SECT-2.1" title="9.2 Detecting Change">Detecting Change</A
><br><a class="SECT1" href="ch09_03.htm" title="9.3 A Final Note">A Final Note</A
></P
><p></P
></DIV
><p class="para">As <a class="indexterm" name="AUTOID-11874"></A
><a class="indexterm" name="AUTOID-11876"></A
><a class="indexterm" name="AUTOID-11879"></A
><a class="indexterm" name="AUTOID-11883"></A
>
we noted in
<a class="xref" href="ch02_01.htm" title="Policies and Guidelines">Chapter 2, <cite class="chapter">Policies and Guidelines</CITE
></A
>, there are several different aspects to computer
security. <i class="firstterm">Integrity</I
> is, in most environments,
the most important aspect of computer security. Paradoxically, integrity
is also the aspect of security that has also been given low priority
by practitioners over the years. This is so, in large part, because
integrity is not the central concern of military security&nbsp;- the
driving force behind most computer security research and commercial
development over the past few decades. In the military model of
security, we want to prevent unauthorized personnel from reading
any sensitive data. We also want to prevent anyone from reading
data that may not be sensitive, but that can be combined with other
data to compromise information. This is called <em class="emphasis">confidentiality</EM
>
and is of paramount importance in the military view of computer
security.</P
><p class="para">Confidentiality is a weird priority. It leads us to security
policies in which it is acceptable, at some level, to blow up the
computer center, burn the backup tapes, and kill all the users&nbsp;- provided
that the data files are not read by the attacker!</P
><p class="para">In most commercial and research environments, integrity is
more important than confidentiality. If integrity were not the priority,
the following scenarios might actually seem reasonable:</P
><blockquote class="blockquote"><p class="para">&quot;Well, whoever came in over the net
wiped out all of <em class="emphasis">/usr</EM
> and <em class="emphasis">/etc</EM
>,
but they weren't able to read any of the files in <em class="emphasis">/tmp</EM
>.
I guess our security worked!&quot;</P
><p class="para">-or-</P
><p class="para">&quot;Somebody compromised the root account and added
15 new users to <em class="emphasis">/etc/passwd</EM
>, but our security
system kept them from doing an <i class="filename">ls</I
> of the <em class="emphasis">/usr/spool/mail</EM
>
directory. We dodged a bullet on this one!&quot;  	-or-</P
><p class="para">&quot;As near as we can tell, one of the people we fired
last week planted a virus in the system that has added itself to
every system binary, and the virus is causing the system to crash
every 15 minutes. We don't have a security problem, though,
because we have shut off the network connection to the outside,
so nobody will know about it.&quot;</P
></BLOCKQUOTE
><p class="para">These examples are obviously silly in most settings. We do
care about integrity: protecting our data from unauthorized modification
or deletion. In many commercial environments, both confidentiality
and integrity are important, but integrity is more important. Most
banks, for example, desire to keep the account balances of their
depositors both secret and correct. But, given a choice between
having balances revealed and having them altered, the first is preferable
to the second. Integrity is more important than confidentiality.</P
><p class="para">In a typical <span class="acronym">UNIX</SPAN
> system, protecting the
integrity of system and user data can be a major challenge. There
are many ways to alter and remove data, and often as little as a
single bit change (like a protection bit or owner <span class="acronym">UID</SPAN
>)
can result in the opportunity to make more widespread changes.</P
><p class="para">But ensuring integrity is difficult. Consider some of the
ways that an unauthorized user could change or delete the file <i class="filename">/usr/spaf/notes</I
>
owned by user <i class="filename">spaf</I
>:</P
><ul class="itemizedlist"><li class="listitem"><p class="para">Permissions on <i class="filename">notes</I
>
allow modification by other users.</P
></LI
><li class="listitem"><p class="para">Someone is able to compromise the login password
of user <i class="filename">spaf.</I
></P
></LI
><li class="listitem"><p class="para">Someone is able to compromise user <i class="filename">root</I
>.</P
></LI
><li class="listitem"><p class="para"><i class="filename">setuid </I
>programs to <i class="filename">root</I
>
or to <i class="filename">spaf</I
> allow the file to be altered.</P
></LI
><li class="listitem"><p class="para">Permissions on one of the directories <i class="filename">/,
/usr,</I
> or <i class="filename">/usr/spaf</I
> allow the file
to be deleted.</P
></LI
><li class="listitem"><p class="para">Permissions can also allow the file <em class="emphasis">/usr/spaf/notes</EM
>
to be moved and a new file created in its place. The new file would
have ownership and permissions based on who created it. In a sense,
the original file would not have been deleted, but only renamed.</P
></LI
><li class="listitem"><p class="para">Permissions for the group &quot;owner&quot;
of the file or one of the containing directories allow another user
to modify it.</P
></LI
><li class="listitem"><p class="para"><i class="filename">/etc/passwd</I
> can be altered
by an unauthorized user, allowing someone to become <i class="filename">root</I
>
or user <i class="filename">spaf.</I
></P
></LI
><li class="listitem"><p class="para">The block device representing the disk containing
the file can be written to by an unprivileged user.</P
></LI
><li class="listitem"><p class="para">The raw device representing the disk containing
the file can be written to by an unprivileged user.</P
></LI
><li class="listitem"><p class="para">The directory is exported using some network filesystem
that can be compromised and written to by an external host.</P
></LI
><li class="listitem"><p class="para">Buggy software allows the file to be altered by
an unauthorized user.</P
></LI
><li class="listitem"><p class="para">Permissions on a system binary allow an unauthorized
individual to plant a Trojan Horse or virus that modifies the file.</P
></LI
></UL
><p class="para">And that is a partial list!</P
><p class="para">The goal of good integrity management is to prevent alterations
to (or deletions of) data, to detect modifications or deletions
if they occur, and to recover from alterations or deletions if they
happen. In the next few sections, we'll present methods
of attaining these goals.</P
><div class="sect1"><h2 class="sect1"><a class="title" name="PUIS-CHP-9-SECT-1">9.1 Prevention</A
></H2
><p class="para">Whenever possible, we would like to prevent unauthorized alteration
or deletion of data on our systems. We can do so via software controls
and some hardware means. We have discussed many of the software
methods available on <span class="acronym">UNIX</SPAN
> systems in other chapters.
These have included setting appropriate permissions on files and
directories, restricting access to the <i class="filename">root</I
>
account, and controlling access to remote services.</P
><p class="para">Unfortunately, no matter how vigilant we may be, bugs occur
in software (more often than they should!), and <a class="indexterm" name="AUTOID-11956"></A
><a class="indexterm" name="AUTOID-11959"></A
>
configuration
errors are made.[1] In such cases, we desire
that data be protected by something at a lower level &nbsp;- 
something in which we might have more confidence.</P
><blockquote class="footnote"><p class="para">[1] In a presentation by Professor Matt
Bishop of UC Davis, he concluded that as many as 95% of
reported UNIX security incidents that he studied might be the results
of misconfiguration!</P
></BLOCKQUOTE
><div class="sect2"><h3 class="sect2"><a class="title" name="PUIS-CHP-9-SECT-1.1">9.1.1 Immutable and Append-Only Files</A
></H3
><p class="para">Two new mechanisms were built into the <span class="acronym">BSD</SPAN
>
4.4 version of <span class="acronym">UNIX</SPAN
>: the <i class="firstterm"><a class="indexterm" name="AUTOID-11970"></A
><a class="indexterm" name="AUTOID-11972"></A
><a class="indexterm" name="AUTOID-11975"></A
><a class="indexterm" name="AUTOID-11978"></A
><a class="indexterm" name="AUTOID-11981"></A
><a class="indexterm" name="AUTOID-11984"></A
>immutable</I
>and<i class="firstterm"> append-only files</I
>. These
wonderful mechanisms are present only (at the time of this writing,
to the best of our knowledge) in the Free<span class="acronym">BSD</SPAN
>,
Net<span class="acronym">BSD</SPAN
>, and <span class="acronym">BSDI</SPAN
> versions
of <span class="acronym">UNIX</SPAN
>. The fact that more commercial vendors
have not seen fit to integrate this idea in their products is a
pity.</P
><p class="para">As their names imply, immutable files are files that cannot
be modified once the computer is running. They are ideally suited
to system configuration files, such as <i class="filename">/etc/rc</I
>
and <i class="filename">/etc/inetd.conf</I
>. Append-only files are
files to which data can be appended, but in which existing data
cannot be changed. They are ideally suited to log files.</P
><p class="para">To implement these new file types, <span class="acronym">BSD</SPAN
>
4.4 introduced a new concept called the <i class="firstterm">kernel security
level</I
>. Briefly, the kernel security level defines four
levels of security. Any process running as superuser can raise the
security level, but only the init process (process number 1) can
lower it. There are four security levels (see <a class="xref" href="#PUIS-CHP-9-TAB-1" title="BSD 4.4 Security Levels">Table 9.1</A
>).:</P
><table class="table"><caption class="table"><a class="title" name="PUIS-CHP-9-TAB-1">Table 9.1: BSD 4.4 Security
Levels</A
></CAPTION
><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1"><p class="para">Security Level</P
></TH
><th class="entry" align="LEFT" rowspan="1" colspan="1"><p class="para">Mode</P
></TH
><th class="entry" align="LEFT" rowspan="1" colspan="1"><p class="para">Meaning</P
></TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">-1</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Permanently insecure</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Normal <span class="acronym">UNIX</SPAN
> behavior</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">0</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Insecure mode</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Immutable and append-only flags can be
changed.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">1</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Secure mode</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">The immutable and append-only flags cannot
be changed. <span class="acronym">UNIX</SPAN
> devices that correspond to mounted
filesystems, as well as the <i class="filename">/dev/mem</I
> and <i class="filename">/dev/kmem</I
>
devices, are read-only.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">2</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Highly secure mode</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">A superset of the secure mode. All disk
devices are read-only, whether or not they correspond to mounted
filesystems. This prevents an attacker from unmounting a filesystem
to modify the raw bits on the device, but it prevents you from creating
new filesystems with the <i class="filename">newfs</I
> command while
the system is operational.</P
></TD
></TR
></TBODY
></TABLE
><p class="para">The 4.4 <span class="acronym">BSD</SPAN
> filesystem does not allow
any changes to files that are immutable or append-only. Thus, even
if an attacker obtains superuser access, he cannot modify these
files. Furthermore, the system prevents &quot;on-the-fly&quot;
patching of the operating system by making writes to the <i class="filename">/dev/mem</I
>
or <i class="filename">/dev/kmem</I
> devices. Properly configured,
these new innovations can dramatically improve a system's
resistance to a determined attacker.</P
><p class="para">Of course, immutable files can be overcome by an attacker
who has physical access to the computer: the attacker could simply
reboot the computer in single-user mode, before the system switches
into secure mode. However, if someone has physical access, that
person could just as easily remove the disk and modify it on another
computer system. In most environments, physical access can be restricted
somewhat. If an attacker at a remote site shuts down the system,
thus enabling writing of the partition, that attacker also shuts
down any connection he would use to modify that partition.</P
><p class="para">Although these new filesystem structures are a great idea,
it is still possible to modify data within immutable files if care
is not taken. For instance, an attacker might compromise <i class="filename">root</I
>
and alter some of the programs used by the system during start-up.
Thus, many files need to be protected with immutability if the system
is to be used effectively.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PUIS-CHP-9-SECT-1.2">9.1.2 Read-only Filesystems</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-12057"></A
><a class="indexterm" name="AUTOID-12059"></A
><a class="indexterm" name="AUTOID-12062"></A
><a class="indexterm" name="AUTOID-12065"></A
><a class="indexterm" name="AUTOID-12068"></A
>A
somewhat stronger preventive mechanism is to use <em class="emphasis">hardware</EM
>
read-only protection of the data. To do so requires setting a physical
<a class="indexterm" name="AUTOID-12072"></A
>
write-protect
switch on a disk drive or mounting the data using a <span class="acronym">CD-ROM</SPAN
>.<a class="indexterm" name="AUTOID-12075"></A
>
The material is then
mounted using the software read-only option with the <em class="emphasis">mount</EM
>
command. The best crackers in the business can't come across
the network and write to a read-only <span class="acronym">CD-ROM</SPAN
>!</P
><blockquote class="note"><p class="para"><strong>NOTE:</STRONG
> The read-only option to the <em class="emphasis">mount</EM
>
command does <em class="emphasis">not</EM
> protect data! Disks mounted
with the read-only option can still be written to using the raw
device interface to the disk&nbsp;- the option only protects access
to the files via the block device interface. Furthermore, an attacker
who has gained the appropriate privileges (e.g., <em class="emphasis">root</EM
>)
can always remount the disk read/write.</P
><p class="para">The existence of the read-only option to the <i class="filename">mount</I
>command is largely for when a physically protected disk
is mounted read-only; without the option, <span class="acronym">UNIX</SPAN
>
would attempt to modify the &quot;last access&quot; times
of files and directories as they were read, which would lead to
many error messages.</P
></BLOCKQUOTE
><p class="para">If it is possible to structure the system to place all the
commands, system libraries, system databases, and important directories
on read-only media, the system can be made considerably safer. To
modify one of these files, an unauthorized user would require physical
access to the disk drive to reset the switch, and sufficient access
to the system (physical access or operator privileges) to remount
the partition. In many cases, this access can be severely restricted.
Unmounting and remounting a disk would likely be noticed, too!</P
><p class="para">In those cases in which the owner needs to modify software
or install updates, it should be a simple matter to shut down the
system in an orderly manner and then make the necessary changes.
As an added benefit, the additional effort required to make changes
in a multiuser system might help deter spur-of-the-moment changes,
or the installation of software that is too experimental in nature.
(Of course, this whole mechanism would not be very helpful to a
dedicated Linux hacker who may be making daily changes. As with
any approach, it isn't for everyone.)</P
><p class="para">The way to organize a system to use read-only disks requires
assistance from the vendor of the system. The vendor needs to structure
the system so that the few system files that need to be modified
on a frequent basis are located on a different partition from the
system files that are to be protected. These special files include
log files, <i class="filename">/etc/motd</I
>, <i class="filename">utmp</I
>,
and other files that might need to be altered as part of regular
operation (including, perhaps, <i class="filename">/etc/passwd</I
>
if your users change passwords or shells frequently). Most modern
systems have symbolic links that can be used for this purpose. In
fact, systems that support diskless workstations are often already
configured in this manner: volatile files are symbolically linked
to a location on a <i class="filename"><a class="indexterm" name="AUTOID-12094"></A
>/var</I
> partition. This link allows the binaries to be mounted
read-only from the server and shared by many clients.</P
><p class="para">There are some additional benefits to using read-only storage
for system files. Besides the control over modification (friendly
and otherwise) already noted, consider the following:</P
><ul class="itemizedlist"><li class="listitem"><p class="para">You only need to do <a class="indexterm" name="AUTOID-12100"></A
>
backups
of the read-only partitions once after each change&nbsp;- there
is no need to waste time or tapes performing daily or weekly backups</P
></LI
><li class="listitem"><p class="para">In a large organization, you can put a &quot;standard&quot;
set of binaries up on a network file server&nbsp;- or cut a &quot;standard&quot;
<span class="acronym">CD-ROM</SPAN
> to be used by all the systems making <a class="indexterm" name="AUTOID-12105"></A
>
configuration management and portability
much simpler</P
></LI
><li class="listitem"><p class="para">There is no need to set disk quotas on these partitions,
as the contents will not grow except in well-understood (and monitored)
ways</P
></LI
><li class="listitem"><p class="para">There is no need to run periodic file clean or scan
operations on these disks as the contents will not change</P
></LI
></UL
><p class="para">There are some drawbacks and limitations to read-only media,
however:</P
><ul class="itemizedlist"><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-12116"></A
>This media is difficult to employ for
user data protection. Usually, user data is too volatile for read-only
media. Furthermore, it would require that the system administrator
shut down the system each time a user wanted to make a change. This
requirement would not work well in a multiuser environment.</P
></LI
><li class="listitem"><p class="para">Few vendors supply disks capable of operating in
this mode as a matter of course. Most disks in workstations are
internal, and do not have a write-protect switch.</P
></LI
><li class="listitem"><p class="para">It requires that an entire disk be made read-only.[2] There may be a large
amount of wasted space on the disk.</P
><blockquote class="footnote"><p class="para">[2] Some disks allow only a range of sectors to be protected,
but these are not the norm.</P
></BLOCKQUOTE
></LI
><li class="listitem"><p class="para">This media requires at least two physical disks
per machine (unless you import network partitions)&nbsp;- the
read-only disk for system files, and a disk for user files.</P
></LI
><li class="listitem"><p class="para">If you are operating from a <span class="acronym">CD-ROM</SPAN
>
disk, these may have slower access times than a standard internal
read/write disk.<a class="indexterm" name="AUTOID-12130"></A
><a class="indexterm" name="AUTOID-12132"></A
><a class="indexterm" name="AUTOID-12135"></A
><a class="indexterm" name="AUTOID-12138"></A
></P
></LI
></UL
></DIV
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch08_08.htm#PUIS-CHP-8-SECT-8.3.1" title="8.8 Administrative Techniques for Conventional Passwords"><img src="../gifs/txtpreva.gif" alt="Previous: 8.8 Administrative Techniques for Conventional Passwords" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Practical UNIX &amp; Internet Security"><img src="../gifs/txthome.gif" alt="Practical UNIX &amp; Internet Security" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch09_02.htm#PUIS-CHP-9-SECT-2.1" title="9.2 Detecting Change"><img src="../gifs/txtnexta.gif" alt="Next: 9.2 Detecting Change" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">8.8 Administrative Techniques for Conventional Passwords</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">9.2 Detecting Change</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.htm" title="The Networking CD Bookshelf">Library Home</A
> | <a href="../dnsbind/index.htm" title="DNS &amp; BIND">DNS &amp; BIND</A
> | <a href="../tcpip/index.htm" title="TCP/IP Network Administration">TCP/IP</A
> | <a href="../sendmail/index.htm" title="sendmail">sendmail</A
> | <a href="../smdref/index.htm" title="sendmail Desktop Reference">sendmail Reference</A
> | <a href="../firewall/index.htm" title="Building Internet Firewalls">Firewalls</A
> | <a href="index.htm" title="Practical UNIX &amp; Internet Security">Practical Security</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
