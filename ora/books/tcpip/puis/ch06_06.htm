<html><head>
<title>[Chapter 6] 6.6 Encryption Programs Available for UNIX</TITLE>
<meta name="DC.title" content="Practical UNIX &amp; Internet Security"><meta name="DC.creator" content="Simson Garfinkel &amp; Gene Spafford"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-02-04T00:02:59Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-148-8" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch06_01.htm" title="6. Cryptography"><link rel="prev" href="ch06_05.htm#PUIS-CHP-6-SECT-5.3" title="6.5 Message Digests and Digital Signatures"><link rel="next" href="ch06_07.htm" title="6.7 Encryption and U.S. Law"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Practical UNIX &amp; Internet Security" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Practical UNIX &amp; Internet Security"><area shape="RECT" coords="467,0,514,18" href="../search/psrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch06_05.htm#PUIS-CHP-6-SECT-5.3" title="6.5 Message Digests and Digital Signatures"><img src="../gifs/txtpreva.gif" alt="Previous: 6.5 Message Digests and Digital Signatures" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 6<br>Cryptography</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch06_07.htm" title="6.7 Encryption and U.S. Law"><img src="../gifs/txtnexta.gif" alt="Next: 6.7 Encryption and U.S. Law" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="PUIS-CHP-6-SECT-6">6.6 Encryption Programs Available for UNIX</A
></H2
><p class="para"><a class="indexterm" name="AUTOID-8089"></A
><a class="indexterm" name="AUTOID-8092"></A
>This section describes three encryption programs
that are available today on many <span class="acronym">UNIX</SPAN
> systems:</P
><dl class="variablelist"><dt class="term">crypt </DT
><dd class="listitem"><p class="para">The original <span class="acronym">UNIX</SPAN
> encryption
application.</P
></DD
><dt class="term">des</DT
><dd class="listitem"><p class="para">An implementation of the Data Encryption Standard.</P
></DD
><dt class="term">pgp</DT
><dd class="listitem"><p class="para">Phil Zimmermann's Pretty Good Privacy.</P
></DD
></DL
><p class="para">Each of these programs offers increasing amounts of security,
but the more secure programs have more legal restrictions on their
use in the United States.[24]
Many other countries have passed legislation severely restricting
or outlawing the use of strong cryptography by private citizens.</P
><blockquote class="footnote"><p class="para">[24] We don't mean
to slight our readers in countries other than the U.S., but we are
not familiar with all of the various national laws and regulations
around the world. You should check your local laws to discover if
there are restrictions on your use of these programs.</P
></BLOCKQUOTE
><div class="sect2"><h3 class="sect2"><a class="title" name="PUIS-CHP-6-SECT-6.1">6.6.1 UNIX crypt: The Original UNIX Encryption Command</A
></H3
><p class="para"><span class="acronym">UNIX</SPAN
> <kbd class="command"><a class="indexterm" name="AUTOID-8118"></A
><a class="indexterm" name="AUTOID-8120"></A
>crypt</KBD
>
is an encryption program that is included as a standard part of
the <span class="acronym">UNIX</SPAN
> operating system. It is a very simple
encryption program that is easily broken, as evidenced by AT&amp;T's
uncharacteristic disclaimer on the man page:</P
><blockquote class="blockquote"><p class="para">BUGS: There is no warranty of merchantability
nor any warranty of fitness for a particular purpose nor any other
warranty, either express or implied, as to the accuracy of the enclosed
materials or as to their suitability for any particular purpose.
Accordingly, Bell Telephone Laboratories assumes no responsibility
for their use by the recipient. Further, Bell Laboratories assumes
no obligation to furnish any assistance of any kind whatsoever,
or to furnish any additional information or documentation.</P
></BLOCKQUOTE
><p class="para">&nbsp;- crypt reference page</P
><p class="para">Note that the <kbd class="command">crypt</KBD
> program is different from the more secure
<kbd class="command">crypt()</KBD
> library call, which is described in
<a class="xref" href="ch08_01.htm" title="Defending  Your Accounts">Chapter 8, <cite class="chapter">Defending  Your Accounts</CITE
></A
>.</P
><div class="sect3"><h4 class="sect3"><a class="title" name="PUIS-CHP-6-SECT-6.1.1">6.6.1.1 The crypt program</A
></H4
><p class="para">The <kbd class="command">crypt</KBD
> program uses a simplified simulation of the <a class="indexterm" name="AUTOID-8136"></A
><a class="indexterm" name="AUTOID-8138"></A
><a class="indexterm" name="AUTOID-8141"></A
>
Enigma encryption machine
described in &quot;The Enigma Encryption System&quot; earlier
in this chapter. Unlike Enigma, which had to encrypt only letters,
<kbd class="command">crypt</KBD
> must be able to encrypt any block of 8-bit
data. As a result, the rotors used with crypt must have 256 &quot;connectors&quot;
on each side. A second difference between Enigma and <kbd class="command">crypt</KBD
>
is that, while Enigma used three or four rotors and a reflector,
<kbd class="command">crypt</KBD
> uses only a single rotor and reflector.
The encryption key provided by the user determines the placement
of the virtual wires in the rotor and reflector.</P
><p class="para">Partially because <kbd class="command">crypt</KBD
> has but a single rotor, files encrypted
with <kbd class="command">crypt</KBD
> are exceedingly easy for a cryptographer
to break. For several years, noncryptographers have been able to
break messages encrypted with <kbd class="command">crypt</KBD
> as well, thanks to a program
developed in 1986 by Robert <a class="indexterm" name="AUTOID-8152"></A
>
Baldwin,
then at the <span class="acronym">MIT</SPAN
> Laboratory for Computer Science.
Baldwin's program, <a class="indexterm" name="AUTOID-8155"></A
><a class="indexterm" name="AUTOID-8157"></A
>
Crypt Breaker's
Workbench (<span class="acronym">CBW</SPAN
>), decrypts text files encrypted
with <kbd class="command">crypt</KBD
> within a matter of minutes, with minimal help from the
user.</P
><p class="para"><span class="acronym">CBW</SPAN
> breaks <kbd class="command">crypt</KBD
> by searching for arrangements
of &quot;wires&quot; within the &quot;rotor&quot;
that cause a file encrypted with crypt to decrypt into plain <span class="acronym">ASCII</SPAN
>
text. The task is considerably simpler than it may sound at first,
because normal <span class="acronym">ASCII</SPAN
> text uses only 127 of the
possible 256 different code combinations (the <span class="acronym">ASCII</SPAN
>
codes 0 and 128 through 255 do not appear in normal <span class="acronym">UNIX</SPAN
>
text). Thus, most arrangements of the &quot;wires&quot;
produce invalid characters when the file is decrypted; <span class="acronym">CBW</SPAN
>
automatically discards these arrangements.</P
><p class="para"><span class="acronym">CBW</SPAN
> has been widely distributed; as a result,
files encrypted with crypt should not be considered secure. (They
weren't secure before <span class="acronym">CBW</SPAN
> was distributed;
fewer people simply had the technical skill necessary to break them.)</P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PUIS-CHP-6-SECT-6.1.2">6.6.1.2 Ways of improving the security of crypt</A
></H4
><p class="para">We recommend that you do not use <kbd class="command">crypt</KBD
>
to encrypt files more than 1K long. Nevertheless, you may have no
other encryption system readily available to you. If this is the
case, you are better off using <kbd class="command">crypt</KBD
> than nothing
at all. You can also take a few simple precautions that will decrease
the chances that your encrypted files will be decrypted:[25]</P
><blockquote class="footnote"><p class="para">[25] In particular, these precautions will defeat CBW's
automatic crypt-breaking activities.</P
></BLOCKQUOTE
><ul class="itemizedlist"><li class="listitem"><p class="para">Encrypt the file multiple times, using
different keys at each stage. This essentially changes the transformation.</P
></LI
><li class="listitem"><p class="para">Compress your files before encrypting them. Compressing
a file alters the information&nbsp;- the plain <span class="acronym">ASCII</SPAN
>
text&nbsp;- that programs such as <span class="acronym">CBW</SPAN
> use to
determine when they have correctly assembled part of the encryption
key. If your message does not decrypt into plain text, <span class="acronym">CBW</SPAN
>
will not determine when it has correctly decrypted your message.
However, if your attackers know you have done this, they can modify
their version of <span class="acronym">CBW</SPAN
> accordingly.</P
></LI
><li class="listitem"><p class="para">If you use <a class="indexterm" name="AUTOID-8190"></A
><a class="indexterm" name="AUTOID-8192"></A
>
<kbd class="command">compress</KBD
>
or <kbd class="command">pack</KBD
> to compress your file, remove the 3-byte header. Files compressed
with <kbd class="command">compress</KBD
> contain a 3-byte signature, or header, consisting
of the hexadecimal values 1f, 9d and 90 (in that order). If your
attacker believes that your file was compressed before it was encrypted,
knowing how the first three bytes decrypt can help him to decrypt
the rest of the file. You can strip these three bytes with the <a class="indexterm" name="AUTOID-8197"></A
>
<kbd class="command">dd</KBD
> command:[26]</P
><blockquote class="footnote"><p class="para">[26] Using <kbd class="command">dd</KBD
>
this way is very slow and inefficient. If you are going to be encrypting
a lot of compressed files, you may wish to write a small program
to remove the headers more efficiently.</P
></BLOCKQUOTE
><blockquote class="screen"><pre class="screen">% compress -c &lt;plaintext | dd bs=3 skip=1 | crypt &gt;encrypted</PRE
></BLOCKQUOTE
></LI
></UL
><p class="para">Of course, you must remember to replace the 3-byte header
before you attempt to uncompress the file:</P
><blockquote class="screen"><pre class="screen">% (compress -cf /dev/null;crypt &lt;encrypted) | uncompress -c &gt;plaintext</PRE
></BLOCKQUOTE
><p class="para">If you do not have <kbd class="command">compress</KBD
>, use <a class="indexterm" name="AUTOID-8208"></A
>
tar
to bundle your file to be encrypted with other files containing
random data; then encrypt the tar file. The presence of random data
will make it more difficult for decryption programs such as <span class="acronym">CBW</SPAN
>
to isolate your plaintext.</P
><p class="para">As encrypted files contain binary information, you must process
them with <a class="indexterm" name="AUTOID-8212"></A
>
<kbd class="command">uuencode</KBD
> if you
wish to email them.</P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PUIS-CHP-6-SECT-6.1.3">6.6.1.3 Example</A
></H4
><p class="para">To <kbd class="command">compress</KBD
>, <kbd class="command">encrypt</KBD
>, <kbd class="command">unencode</KBD
>, and send a file with electronic
mail:</P
><blockquote class="screen"><pre class="screen">% <b class="emphasis.bold">ls -l myfile</B
> 
-rw-r--r-- 1 fred 166328 Nov 16 15:25 myfile 
% <b class="emphasis.bold">compress myfile</B
> 
% <b class="emphasis.bold">ls -l myfile.Z</B
> 
-rw-r--r-- 1 fred 78535 Nov 16 15:25 myfile.Z 
% <b class="emphasis.bold">dd if=myfile.Z of=myfile.Z.strip bs=3 skip=1</B
> 
26177+1 records in 
26177+1 records out 
% <b class="emphasis.bold">crypt akey &lt; myfile.Z.strip | uuencode afile | mail spook@nsa.gov</B
></PRE
></BLOCKQUOTE
><p class="para">To decrypt a file that you have received and saved in the
<i class="filename">file</I
> text file:</P
><blockquote class="screen"><pre class="screen">% <b class="emphasis.bold">head -3 file</B
> 
begin 0600 afile 
M?Z/#V3V,IGO!](D!175:;S9_IU\A7K;:'LBB,8363R,T+/WZSOC4PQ,U/6Q 
MX,T8&amp;XZDQ1+[4Y[*N4W@A3@9YM*4XV+U\)X9NT.7@Z+W&quot;WY^9-?(JRU,-4% 
% <b class="emphasis.bold">uudecode file</B
> 
% <b class="emphasis.bold">ls -l afile</B
> 
-rw-r--r-- 1 fred 78532 Nov 16 15:32 afile 
% <b class="emphasis.bold">(compress -cf /dev/null;crypt &lt; afile) | uncompress -c &gt; myfile</B
></PRE
></BLOCKQUOTE
><p class="para"><kbd class="command">myfile</KBD
> now contains the original file. <a class="indexterm" name="AUTOID-8236"></A
><a class="indexterm" name="AUTOID-8238"></A
></P
></DIV
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PUIS-CHP-6-SECT-6.2">6.6.2 des: The Data Encryption Standard</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-8245"></A
><a class="indexterm" name="AUTOID-8247"></A
>There are several software implementations
of the Data Encryption Standard that are commonly available for
<span class="acronym">UNIX</SPAN
> computers. Several of the most popular implementations
are based on the <kbd class="command">des</KBD
> code written by <a class="indexterm" name="AUTOID-8252"></A
>
Phil Karn, a <span class="acronym">UNIX</SPAN
> guru (and ham
radio operator whose call sign is KA9Q). In the past, some <span class="acronym">UNIX</SPAN
>
vendors have included des commands as part of their operating system,
although many of these implementations have been removed so that
the companies can maintain a single version of their operating system
for both export and domestic use.[27] Nevertheless,
<kbd class="command">des</KBD
> software is widely available both inside
and outside the United States.</P
><blockquote class="footnote"><p class="para">[27] For example, Sun
Microsystems ships the easily broken crypt encryption program with
Solaris, and sells a &quot;US Encryption Kit&quot; which
contains the des program at a nominal cost.</P
></BLOCKQUOTE
><p class="para">The des command is a filter that reads from standard input
and writes to standard output. It usually accepts the following
command-line options:</P
><blockquote class="screen"><pre class="screen">% des -e|-d [-h] [-k key] [-b] </PRE
></BLOCKQUOTE
><p class="para">When using the <span class="acronym">DES</SPAN
>, encryption and decryption
are not identical operations, but are inverses of each other. The
option -e specifies that you are encrypting a file. For example:</P
><blockquote class="screen"><pre class="screen">% des -e &lt;message &gt; message.des
Enter key: <i class="systemitem.password">mykey</I
>
Enter key again: <i class="systemitem.password">mykey</I
>
% cat message.des
&quot;UI}mE8NZlOi\Iy| </PRE
></BLOCKQUOTE
><p class="para">(The <kbd class="command">Enter key:</KBD
> prompt is from the program;
the key is not echoed.)</P
><p class="para">Use the <kbd class="command">-d</KBD
> option to decrypt your file:</P
><blockquote class="screen"><pre class="screen">% des -d &lt; message.des
Enter key: mykey
Enter key again: mykey
This is the secret message.&#13;</PRE
></BLOCKQUOTE
><p class="para">You can use the <kbd class="command">-k</KBD
> option to specify the key on the command
line. On most versions of <span class="acronym">UNIX</SPAN
>, any user of the
system can use the <a class="indexterm" name="AUTOID-8274"></A
>
<kbd class="command">ps</KBD
> command to
see what commands other users are running. Karn's version
of <kbd class="command">des</KBD
> tries to mitigate the danger of the <kbd class="command">ps</KBD
> command by making
a copy of its command line arguments and erasing the original. Nevertheless,
this is a potential vulnerability, and should be used with caution.</P
><blockquote class="note"><p class="para"><strong>NOTE:</STRONG
> You should never specify a key in a shell script: anybody
who has access to read the script will be able to decode your files.</P
></BLOCKQUOTE
><p class="para">A <kbd class="command">-b</KBD
> option to the command selects <a class="indexterm" name="AUTOID-8283"></A
><a class="indexterm" name="AUTOID-8286"></A
>
Electronic Code
Book (<span class="acronym">ECB</SPAN
>) mode. The default is <a class="indexterm" name="AUTOID-8289"></A
><a class="indexterm" name="AUTOID-8292"></A
>
Cipher Block
Chaining (<span class="acronym">CBC</SPAN
>). As described in &quot;DES
modes&quot; earlier in this chapter, <span class="acronym">ECB</SPAN
>
mode encodes a block at a time, with identical input blocks encoding
to identical output blocks. This encoding will reveal if there is
a pattern to the input. However, it will also be able to decrypt
most of the file even if parts of it are corrupted or deleted. <span class="acronym">CBC</SPAN
>
mode hides repeated patterns, and results in a file that cannot
be decrypted after any point of change or deletion.</P
><p class="para">If you use the <kbd class="command">-h</KBD
> option, <kbd class="command">des</KBD
> will allow
you to specify a key in hexadecimal. Such keys should be randomly
generated. If you do not specify a key in hexadecimal, then your
key will most likely be restricted to characters that you can type
on your keyboard. Many people further restrict their keys to words
or phrases that they can remember (see the sidebar entitled &quot;Number
of Passwords&quot; in <a class="xref" href="ch03_01.htm" title="Users and Passwords">Chapter 3, <cite class="chapter">Users and Passwords</CITE
></A
>). Unfortunately, this
method makes it dramatically easier for an attacker to decrypt a
<span class="acronym">DES</SPAN
>-encrypted file by doing a key search. To
see why, consider the following table:</P
><table class="table"><caption class="table"><a class="title" name="PUIS-CHP-6-TAB-3">Table 6.3: Key Search Comparisons</A
></CAPTION
><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1"><p class="para">Key Choice Algorithm</P
></TH
><th class="entry" align="LEFT" rowspan="1" colspan="1"><p class="para">Keyspace</P
></TH
><th class="entry" align="LEFT" rowspan="1" colspan="1"><p class="para">Number of Possible Keys</P
></TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">Random <span class="acronym">DES</SPAN
> key</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">128<sup class="superscript">8</SUP
> = 2<sup class="superscript">56</SUP
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">7.2 x 10<sup class="superscript">16</SUP
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">Typeable characters[28]</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">127<sup class="superscript">8</SUP
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">6.8 x 10<sup class="superscript">16</SUP
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">Printable characters</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">96<sup class="superscript">8</SUP
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">7.2 x 10<sup class="superscript">15</SUP
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">Two words</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">1,000,000<sup class="superscript">2</SUP
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">10<sup class="superscript">12</SUP
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">One word</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">1,000,000</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">10<sup class="superscript">6</SUP
></P
></TD
></TR
></TBODY
></TABLE
><blockquote class="footnote"><p class="para">[28] You
can't enter null as a character in your key.</P
></BLOCKQUOTE
><p class="para">Some versions of <kbd class="command">des</KBD
> will encrypt a file if it is specified
on the command line. Input and output filenames are optional. If
only one filename is given, it is assumed to be the input file.</P
><p class="para">Some versions of <span class="acronym">UNIX</SPAN
> designed for export
include a des command that doesn't do anything. Instead
of encrypting your file, it simply prints an error message explaining
that the software version of des is not available. <a class="indexterm" name="AUTOID-8369"></A
><a class="indexterm" name="AUTOID-8371"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PUIS-CHP-6-SECT-6.3">6.6.3 PGP: Pretty Good Privacy</A
></H3
><p class="para">In 1991, <a class="indexterm" name="AUTOID-8377"></A
><a class="indexterm" name="AUTOID-8379"></A
><a class="indexterm" name="AUTOID-8381"></A
><a class="indexterm" name="AUTOID-8384"></A
>
Phil Zimmermann wrote a program called <span class="acronym">PGP</SPAN
>
which performs both private key and public key cryptography. That
program was subsequently released on the Internet and improved by
numerous programmers, mostly outside of the United States.[29] In 1994, Zimmermann turned
the distribution of <span class="acronym">PGP</SPAN
> over to the Massachusetts
Institute of Technology, which makes the software available for
anonymous <span class="acronym">FTP</SPAN
> from the computer <i class="systemitem">net-dist.mit.edu</I
>.</P
><blockquote class="footnote"><p class="para">[29] Get the whole story! Although this section presents a good
introduction to PGP, the program is far too complicated to describe
here. For a full description of PGP, we recommend the book PGP:
Pretty Good Privacy by Simson Garfinkel (O'Reilly &amp;
Associates, 1995).</P
></BLOCKQUOTE
><p class="para">The version of <span class="acronym">PGP</SPAN
> that is distributed
from <span class="acronym">MIT</SPAN
> uses the <span class="acronym">RSA</SPAN
> Data
Security software package <span class="acronym">RSAREF</SPAN
>. This software
is only available for noncommercial use. If you wish to use <span class="acronym">PGP</SPAN
>
for commercial purposes, you should purchase it from ViaCrypt International
(whose address is listed in <a class="xref" href="appd_01.htm" title="Paper Sources">Appendix D</A
>).</P
><p class="para"><span class="acronym">PGP</SPAN
> Version 2 uses <span class="acronym">IDEA</SPAN
>
as its private key encryption algorithm and <span class="acronym">RSA</SPAN
>
for its public key encryption. (Later versions of <span class="acronym">PGP</SPAN
>
may allow a multiplicity of encryption algorithms to be used, such
as Triple <span class="acronym">DES</SPAN
>.) <span class="acronym">PGP</SPAN
> can also
seal and verify digital signatures, and includes sophisticated key-management
software. It also has provisions for storing public and private
keys in special files called <i class="firstterm">key rings</I
> (illustrated
in <a class="xref" href="#PUIS-CHP-6-FIG-5" title="PGP key rings">Figure 6.5</A
>). Finally, <span class="acronym">PGP</SPAN
>
has provisions for certifying keys, again using digital signatures.</P
><h4 class="figure"><a class="title" name="PUIS-CHP-6-FIG-5">Figure 6.5: PGP key rings</A
></H4
><img class="graphic" src="figs/puis_0605.gif" alt="Figure 6.5"><div class="sect3"><h4 class="sect3"><a class="title" name="PUIS-CHP-6-SECT-6.3.1">6.6.3.1 Encrypting files with IDEA</A
></H4
><p class="para">You can use <span class="acronym">PGP</SPAN
> to encrypt a file with
the <a class="indexterm" name="AUTOID-8418"></A
><a class="indexterm" name="AUTOID-8420"></A
>
<span class="acronym">IDEA</SPAN
>
encryption cipher with the following command line:</P
><blockquote class="screen"><pre class="screen">% pgp -c message
Pretty Good Privacy(tm) 2.6.1 - Public-key encryption for the masses.
(c) 1990-1994 Philip Zimmermann, Phil's Pretty Good Software. 29 Aug 94
Distributed by the Massachusetts Institute of Technology.  Uses RSAREF.
Export of this software may be restricted by the U.S. government.
Current time: 1995/02/12 03:32 GMT

You need a pass phrase to encrypt the file.
Enter pass phrase:<i class="systemitem.password">some days green tomatoes</I
>
Enter same pass phrase again: <i class="systemitem.password">some days green tomatoes</I
>
Just a moment....
Ciphertext file: message.pgp
%</PRE
></BLOCKQUOTE
><p class="para">Rather than using your pass phrase as the cryptographic key,
<span class="acronym">PGP</SPAN
> instead calculates the MD5 hash function
and uses the hash. This means that you can use a pass phrase of
any length. Because <span class="acronym">IDEA</SPAN
> uses a 128-bit key,
key-search attacks are not feasible.</P
><p class="para"><span class="acronym">PGP</SPAN
> automatically compresses everything
that it encrypts, which is fortunate, because after a file is encrypted,
it cannot be compressed further: the output will appear random,
and file compression requires some repeated patterns to compress.</P
><p class="para">If you want to decrypt your file, run <span class="acronym">PGP</SPAN
>
with the encrypted file as its sole argument:</P
><blockquote class="screen"><pre class="screen">% pgp message.pgp
Pretty Good Privacy(tm) 2.6.1 - Public-key encryption for the masses.
(c) 1990-1994 Philip Zimmermann, Phil's Pretty Good Software. 29 Aug 94
Distributed by the Massachusetts Institute of Technology.  Uses RSAREF.
Export of this software may be restricted by the U.S. government.
Current time: 1995/02/12 03:47 GMT

File is conventionally encrypted.
You need a pass phrase to decrypt this file.
Enter pass phrase: <i class="systemitem.password">some days green tomatoes</I
>
Just a moment....Pass phrase appears good. .
Plaintext filename: message
%</PRE
></BLOCKQUOTE
><p class="para">If you do not type the correct <a class="indexterm" name="AUTOID-8436"></A
><a class="indexterm" name="AUTOID-8438"></A
>
pass
phrase, <span class="acronym">PGP</SPAN
> will not decrypt your file:</P
><blockquote class="screen"><pre class="screen">% pgp message.pgp
Pretty Good Privacy(tm) 2.6.1 - Public-key encryption for the masses.
(c) 1990-1994 Philip Zimmermann, Phil's Pretty Good Software. 29 Aug 94
Distributed by the Massachusetts Institute of Technology.  Uses RSAREF.
Export of this software may be restricted by the U.S. government.
Current time: 1995/02/12 03:48 GMT

File is conventionally encrypted.
You need a pass phrase to decrypt this file.
Enter pass phrase: <i class="systemitem.password">I am the walrus</I
>
Just a moment...
Error:  Bad pass phrase.

You need a pass phrase to decrypt this file.
Enter pass phrase: <i class="systemitem.password">Love will find a way</I
>
Just a moment...
Error:  Bad pass phrase.

For a usage summary, type:  pgp -h
For more detailed help, consult the PGP User's Guide.
%</PRE
></BLOCKQUOTE
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PUIS-CHP-6-SECT-6.3.2">6.6.3.2 Creating your PGP public key</A
></H4
><p class="para">The <a class="indexterm" name="AUTOID-8448"></A
><a class="indexterm" name="AUTOID-8451"></A
>
real power of <span class="acronym">PGP</SPAN
> is not
the encryption of files, but the encryption of electronic mail messages.
<span class="acronym">PGP</SPAN
> uses public key cryptography, which allows
anybody to create a message and encrypt it using your public key.
After the message is encrypted, no one can decrypt it unless someone
has your secret key. (Ideally, nobody other than you should have
a copy of your key.) <span class="acronym">PGP</SPAN
> also allows you to electronically
&quot;sign&quot; a document with a digital signature, which
other people can verify.</P
><p class="para">To make use of these features, you will first need to create
a public key for yourself and distribute it among your correspondents.
Do this with <span class="acronym">PGP</SPAN
>'s <a class="indexterm" name="AUTOID-8460"></A
>
<kbd class="command">-kg</KBD
>
option:</P
><blockquote class="screen"><pre class="screen">% pgp -kg
Pretty Good Privacy(tm) 2.6.1 - Public-key encryption for the masses.
(c) 1990-1994 Philip Zimmermann, Phil's Pretty Good Software. 29 Aug 94
Distributed by the Massachusetts Institute of Technology.  Uses RSAREF.
Export of this software may be restricted by the U.S. government.
Current time: 1995/02/12 04:01 GMT
Pick your RSA key size:
    1)   512 bits- Low commercial grade, fast but less secure
    2)   768 bits- High commercial grade, medium speed, good security
    3)  1024 bits- &quot;Military&quot; grade, slow, highest security
Choose 1, 2, or 3, or enter desired number of bits: 3
Generating an RSA key with a 1024-bit modulus.

You need a user ID for your public key.  The desired form for this
user ID is your name, followed by your E-mail address enclosed in
&lt;angle brackets&gt;, if you have an E-mail address.
For example:  John Q. Smith &lt;12345.6789@compuserve.com&gt;
Enter a user ID for your public key:
<b class="emphasis.bold">Michelle Love &lt;love@michelle.org&gt;</B
>

You need a pass phrase to protect your RSA secret key.
Your pass phrase can be any sentence or phrase and may have many
words, spaces, punctuation, or any other printable characters.

Enter pass phrase:<i class="systemitem.password">every thought burns into substance</I
>
Enter same pass phrase again:<i class="systemitem.password">every thought burns into substance</I
>
Note that key generation is a lengthy process.

We need to generate 720 random bits.  This is done by measuring the
time intervals between your keystrokes.  Please enter some random text
on your keyboard until you hear the beep:
<i class="systemitem.password">Here you type a lot of random data that nobody else really sees. It doesn't really matter what you type, just don't hold down the key.</I
> 0 * -Enough, thank you.
..........................++++ ..........++++
Key generation completed.
%</PRE
></BLOCKQUOTE
><p class="para">The passphrase is used to encrypt the secret key that is stored
on your computer. In this manner, if somebody breaks into your account
or steals your computer, they won't be able to read your
encrypted messages.</P
><p class="para">After you've generated your key, you should do two
things with it immediately:</P
><ol class="orderedlist"><li class="listitem"><p class="para">Sign it yourself. You should always
sign your own key right away. Do this as:</P
><blockquote class="screen"><pre class="screen">% pgp -ks love@michelle.org</PRE
></BLOCKQUOTE
><p class="para">There are some obscure ways that your key might be abused
if it is circulated without a signature in place, so be sure that
you sign it yourself.</P
></LI
><li class="listitem"><p class="para">Generate a <a class="indexterm" name="AUTOID-8478"></A
>
revocation
certificate and store it offline somewhere. <em class="emphasis">Don't send
it to anyone!</EM
> The idea behind generating the revocation
right now is that you still remember the passphrase and have the
secret key available. If something should happen to your stored
key, or you forget the passphrase, the public/private key
pair becomes useless. Having the revocation certificate ready in
advance allows you to send it out if that should ever happen. You
generate the certificate by:</P
><blockquote class="screen"><pre class="screen">% pgp -kx Michelle revoke.pgp
Pretty Good Privacy(tm) 2.6.1 - Public-key encryption for the masses.
(c) 1990-1994 Philip Zimmermann, Phil's Pretty Good Software. 29 Aug 94
Uses the RSAREF(tm) Toolkit, which is copyright RSA Data Security, Inc.
Distributed by the Massachusetts Institute of Technology.
Export of this software may be restricted by the U.S. government.
Current time: 1995/02/12 04:06 GMT

Extracting from key ring: `/Users/simsong/Library/pgp/pubring.pgp', 
userid &quot;Michelle&quot;.

Key for user ID: Michelle Love &lt;love@michelle.org&gt;
1024-bit key, Key ID 0A965505, created 1995/02/12

Key extracted to file `revoke.pgp'.
% pgp -kd Michelle revoke.pgp
Pretty Good Privacy(tm) 2.6.1 - Public-key encryption for the masses.
(c) 1990-1994 Philip Zimmermann, Phil's Pretty Good Software. 29 Aug 94
Uses the RSAREF(tm) Toolkit, which is copyright RSA Data Security, Inc.
Distributed by the Massachusetts Institute of Technology.
Export of this software may be restricted by the U.S. government.
Current time: 1995/02/12 04:07 GMT

Key for user ID: Michelle Love &lt;love@michelle.org&gt;
1024-bit key, Key ID 0A965505, created 1995/02/12

Do you want to permanently revoke your public key
by issuing a secret key compromise certificate
for &quot;Michelle&quot; (y/N)? y

You need a pass phrase to unlock your RSA secret key. 
Key for user ID &quot;Michelle&quot;

Enter pass phrase: every thought burns into substance
Pass phrase is good.  Just a moment....
Key compromise certificate created.
Warning: `revoke.pgp' is not a public keyring</PRE
></BLOCKQUOTE
></LI
></OL
><p class="para">Now, save the <i class="filename">revoke.pgp</I
> file in a safe
place, off line. For example, you might put it on a clearly labeled
floppy disk, then place the disk inside a clearly labeled envelope.
Write your signature across the envelope's flap. Then store
the envelope in your safe-deposit box.</P
><p class="para">To extract a printable, <span class="acronym">ASCII</SPAN
> version of
your key, use <span class="acronym">PGP</SPAN
>'s <a class="indexterm" name="AUTOID-8487"></A
>
<kbd class="command">-kxaf</KBD
>
(Key extract <span class="acronym">ASCII</SPAN
> filter) command:</P
><blockquote class="screen"><pre class="screen">% pgp -kxaf Michelle
Pretty Good Privacy(tm) 2.6.1 - Public-key encryption for the masses.
(c) 1990-1994 Philip Zimmermann, Phil's Pretty Good Software. 29 Aug 94
Distributed by the Massachusetts Institute of Technology.  Uses RSAREF.
Export of this software may be restricted by the U.S. government.
Current time: 1995/02/12 04:11 GMT

Extracting from key ring: '/Users/simsong/Library/pgp/pubring.pgp', userid &quot;Mic.

Key for user ID: Michelle Love &lt;love@michelle.org&gt;
1024-bit key, Key ID 0A965505, created 1995/02/12

Key extracted to file 'pgptemp.$00'.
-----BEGIN PGP PUBLIC KEY BLOCK-----
Version: 2.6.1

mQCNAy89iJMAAAEEALrXJQpVmkTCtjp5FrkCvceFZydiEq2xGgoBvDUOn92XtJiH
PVvope9VA4Lw2wDAbZDD5oucpGg8I1E4luvHVsvF0mpk2JzzWE1hVxWv4rpYIM+x
qSbCryUU5iSneFGPBI5D3nue4wC3XbvQmvYYp5LR6r2eyHU3ktazHzgKllUFAAUR
tCFNaWNoZWxsZSBMb3ZlIDxsb3ZlQG1pY2hlbGxlLm9yZz4=
=UPJB
-----END PGP PUBLIC KEY BLOCK-----
%</PRE
></BLOCKQUOTE
><p class="para">You can redirect the output of this command to a file, or
simply use your window system's cut-and-paste feature to
copy the key into an email message.</P
><p class="para">If you get somebody else's <span class="acronym">PGP</SPAN
>
key, you can add it to your keyring with the <span class="acronym">PGP</SPAN
>
<a class="indexterm" name="AUTOID-8497"></A
>
<kbd class="command">-ka</KBD
> (key add) option. Simply save
the key in a file, then type:</P
><blockquote class="screen"><pre class="screen">% pgp -ka michelle.pgp
Pretty Good Privacy(tm) 2.6.1 - Public-key encryption for the masses.
(c) 1990-1994 Philip Zimmermann, Phil's Pretty Good Software. 29 Aug 94
Distributed by the Massachusetts Institute of Technology.  Uses RSAREF.
Export of this software may be restricted by the U.S. government.
Current time: 1995/02/12 04:15 GMT

Looking for new keys...
pub  1024/0A965505 1995/02/12  Michelle Love &lt;love@michelle.org&gt;

Checking signatures...


Keyfile contains:
   1 new key(s)

One or more of the new keys are not fully certified.
Do you want to certify any of these keys yourself (y/N)? y

Key for user ID: Michelle Love &lt;love@michelle.org&gt;
1024-bit key, Key ID 0A965505, created 1995/02/12
Key fingerprint =  0E 8A 9C C4 CE 44 96 60  83 79 CB F1 F3 02 0C 7E
This key/userID association is not certified.

Do you want to certify this key yourself (y/N)? n
%</PRE
></BLOCKQUOTE
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PUIS-CHP-6-SECT-6.3.3">6.6.3.3 Encrypting a message</A
></H4
><p class="para">After you have somebody's public key, you can encrypt
a message using the <span class="acronym">PGP</SPAN
>'s <a class="indexterm" name="AUTOID-8506"></A
><a class="indexterm" name="AUTOID-8509"></A
>
<kbd class="command">-eat</KBD
> command. This will encrypt the message, save
it in <span class="acronym">ASCII</SPAN
> (so you can send it with electronic
mail), and properly preserve end-of-line characteristics (assuming
that this is a text message). You can sign the message with your
own <i class="firstterm">digital signature</I
> by specifying <kbd class="command">-seat</KBD
> instead of <kbd class="command">-eat</KBD
>. If you
want to use <span class="acronym">PGP</SPAN
> as a filter, add the letter &quot;<i class="filename">f</I
>&quot;
to your command. This process is shown graphically in <a class="xref" href="#PUIS-CHP-6-FIG-6" title="Encrypting email with PGP">Figure 6.6</A
>.</P
><h4 class="figure"><a class="title" name="PUIS-CHP-6-FIG-6">Figure 6.6: Encrypting email with PGP</A
></H4
><img class="graphic" src="figs/puis_0606.gif" alt="Figure 6.6"><p class="para">For example, you can take the file message, sign it with your
digital signature, encrypt it with Michelle's public key,
and send it to her, by using the command:</P
><blockquote class="screen"><pre class="screen">% cat message | pgp -seatf message Michelle | mail -s message 
:w
love@michelle.org</PRE
></BLOCKQUOTE
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PUIS-CHP-6-SECT-6.3.4">6.6.3.4 Adding a digital signature to an announcement</A
></H4
><p class="para">With <span class="acronym">PGP</SPAN
>, you can add a <a class="indexterm" name="AUTOID-8529"></A
>
digital signature
to a message so that people who receive the message can verify that
it is from you (provided that they have your public key).</P
><p class="para">For example, if you wanted to send out a <span class="acronym">PGP</SPAN
>-signed
message designed to warm the hearts but dull the minds of your students,
you might do it like this:</P
><blockquote class="screen"><pre class="screen"> <a class="indexterm" name="AUTOID-8535"></A
> 
% <b class="emphasis.bold">pgp -sat classes</B
>
Pretty Good Privacy(tm) 2.6.1 - Public-key encryption for the masses.
(c) 1990-1994 Philip Zimmermann, Phil's Pretty Good Software. 29 Aug 94
Distributed by the Massachusetts Institute of Technology.  Uses RSAREF.
Export of this software may be restricted by the U.S. government.
Current time: 1995/02/12 04:30 GMT

A secret key is required to make a signature.
You need a pass phrase to unlock your RSA secret key.
Key for user ID &quot;simson&quot;

Enter pass phrase: <i class="systemitem.password">all dogs go to heaven</I
>Pass phrase is good.
Key for user ID: Simson L. Garfinkel &lt;simsong@acm.org&gt;
1024-bit key, Key ID 903C9265, created 1994/07/15
Also known as: simsong@pleasant.cambridge.ma.us
Also known as: simsong@next.cambridge.ma.us
Also known as: simsong@mit.edu
Just a moment....
Clear signature file: classes.asc
%</PRE
></BLOCKQUOTE
><p class="para">The signed message itself looks like this:</P
><blockquote class="screen"><pre class="screen">% <b class="emphasis.bold">cat classes.asc</B
>
-----BEGIN PGP SIGNED MESSAGE-----

Classes are cancelled for the following two months. Everybody enrolled
in the course will get an A.

- -Your Professor

-----BEGIN PGP SIGNATURE-----
Version: 2.6.1

iQCVAwUBLz2Ow3D7CbCQPJJlAQH7CAP/V5COuOPGTDhSeGl6XkxKiVAPD9JDfeNd
5mFr8K/N7W9tyj7THiS/eI92e5/cRI/5z6KzxbSNIx8gGe4h9/bjO5a6rUfa3C+K
j0zCIwETQzSE3tVWXxQv7it4HBZY+xJL8C1CinEckZZc09PvGwyYbPe4tSF8GHHl
0zyTTtueqLg=
=3ihy
-----END PGP SIGNATURE-----
%</PRE
></BLOCKQUOTE
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PUIS-CHP-6-SECT-6.3.5">6.6.3.5 Decrypting messages and verifying signatures</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-8546"></A
><a class="indexterm" name="AUTOID-8549"></A
>To decrypt a message or verify
a signature on a message, simply save the message into a file. Then
run <span class="acronym">PGP</SPAN
>, specifying the filename as your sole
argument. If you are decrypting a message, you will need to type
your pass phrase. For example, to decrypt a message that has been
sent you, use the following command:</P
><blockquote class="screen"><pre class="screen">% <b class="emphasis.bold">cat message.asc</B
>
-----BEGIN PGP MESSAGE-----
Version: 2.6.1

hIwDcPsJsJA8kmUBBACN/HinvYo1GRL+p6pT14OV3L50q/v1aqGsHHSOa37t89O1
23/jm6lzTuh83Qy5KbMpLkMbRg/5FqTD56GX9MoyP4IuLzKxtuA87n9j/pYv4ES3
I0aCUMOvU8SqNTM1qC+ZV7j6NeseCUiRrMFVVlr5uZ2TH8kkDiQBd0x1/h7LNaYA
AACFsT5sa/rd1uh/1A7yDSqZZNGzlCn0aC55o8lgSoPKOgvT0JGZFFOS5h+v3wxw
/U752OaQaSIIj0rVK8UT0thSxyM8xoMIRmBJgmwoloKI+/THy5/Toy8FIqS5taHu
o0wkuhDwcjNg4PJ3dZkoLwnGWwwM3y5vKqrMFHQfNnO6xJ9qBqnKLg==
=EEko
-----END PGP MESSAGE-----
%</PRE
></BLOCKQUOTE
><p class="para">Process the file with <span class="acronym">PGP</SPAN
>:</P
><blockquote class="screen"><pre class="screen">% <b class="emphasis.bold">pgp message.asc</B
>
Pretty Good Privacy(tm) 2.6.1 - Public-key encryption for the masses.
(c) 1990-1994 Philip Zimmermann, Phil's Pretty Good Software. 29 Aug 94
Distributed by the Massachusetts Institute of Technology.  Uses RSAREF.
Export of this software may be restricted by the U.S. government.
Current time: 1995/02/12 04:54 GMT

File is encrypted.  Secret key is required to read it.
Key for user ID: simson
1024-bit key, Key ID 903C9265, created 1994/07/15
Also known as: simsong@pleasant.cambridge.ma.us
Also known as: simsong@next.cambridge.ma.us
Also known as: simsong@mit.edu
Also known as: Simson L. Garfinkel &lt;simsong@acm.org&gt;

You need a pass phrase to unlock your RSA secret key.
Enter pass phrase: subcommander marcos
Pass phrase is good.  Just a moment......
Plaintext filename: message
% cat message
Hi Simson!

Things are all set. We are planning the military takeover for next 
Tuesday. Bring your lasers.

-Carlos
%</PRE
></BLOCKQUOTE
><p class="para">You can also specify the &quot;<kbd class="command">f</KBD
>&quot;
option, which causes <span class="acronym">PGP</SPAN
> to simply send the decrypted
file to stdout.</P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PUIS-CHP-6-SECT-6.3.6">6.6.3.6 PGP detached signatures</A
></H4
><p class="para"><span class="acronym">PGP</SPAN
> has the ability to store digital signatures
in a separate file from the original document. Such a signature
is called a <i class="firstterm"><a class="indexterm" name="AUTOID-8567"></A
><a class="indexterm" name="AUTOID-8569"></A
>detached signature</I
>. Detached signatures
are recommended for binary files, such as programs, because the
signature will not change the data.</P
><p class="para">For the <span class="acronym">UNIX</SPAN
> <a class="indexterm" name="AUTOID-8574"></A
>
system administrator, one of the truly
valuable things that you can do with <span class="acronym">PGP</SPAN
> is to
create detached signatures of your critical system files. These
signatures will be signed by you, the system administrator. You
(or other users on your system) can then use these signatures to
detect unauthorized modification in the critical system files: if
the files that you sign are ever modified, the signature will no
longer validate.</P
><p class="para">For example, to create a detached signature for the <kbd class="command">/bin/login</KBD
>
program, you could use <span class="acronym">PGP</SPAN
>'s <a class="indexterm" name="AUTOID-8581"></A
>
<kbd class="command">-sb</KBD
>
flags:</P
><blockquote class="screen"><pre class="screen"># pgp -sb /bin/login -u simsong
Pretty Good Privacy(tm) 2.6.1 - Public-key encryption for the masses.
(c) 1990-1994 Philip Zimmermann, Phil's Pretty Good Software. 29 Aug 94
Distributed by the Massachusetts Institute of Technology.  Uses RSAREF.
Export of this software may be restricted by the U.S. government.
Current time: 1995/09/12 15:28 GMT

A secret key is required to make a signature. 
You need a pass phrase to unlock your RSA secret key. 
Key for user ID &quot;simsong@pleasant.cambridge.ma.us&quot;

Enter pass phrase: nobody knows my name
Pass phrase is good.  
Key for user ID: Simson L. Garfinkel &lt;simsong@acm.org&gt;
1024-bit key, Key ID 903C9265, created 1994/07/15
Also known as: simsong@pleasant.cambridge.ma.us
Also known as: simsong@next.cambridge.ma.us
Also known as: simsong@mit.edu
Just a moment....
Signature file: /bin/login.sig
#</PRE
></BLOCKQUOTE
><p class="para">In this example, the superuser ran <span class="acronym">PGP</SPAN
>
so that the signature for /bin/login could be
recorded in <kbd class="command">/bin/login.sig</KBD
> (the default location).
You could specify a different location to save the signature by
using <a class="indexterm" name="AUTOID-8589"></A
>
<span class="acronym">PGP</SPAN
>'s
-<i class="filename">o</I
> <i class="filename">filename</I
> option.</P
><p class="para">To verify the signature, simply run <span class="acronym">PGP</SPAN
>,
supplying the signature and the original file as command line arguments:</P
><blockquote class="screen"><pre class="screen">% pgp /bin/login.sig /bin/login
Pretty Good Privacy(tm) 2.6.1 - Public-key encryption for the masses.
(c) 1990-1994 Philip Zimmermann, Phil's Pretty Good Software. 29 Aug 94
Distributed by the Massachusetts Institute of Technology.  Uses RSAREF.
Export of this software may be restricted by the U.S. government.
Current time: 1995/09/12 15:32 GMT

File has signature.  Public key is required to check signature. 
File '/bin/login.sig' has signature, but with no text.
Text is assumed to be in file '/bin/login'.
.
Good signature from user &quot;Simson L. Garfinkel &lt;simsong@acm.org&gt;&quot;.
Signature made 1995/09/12 15:28 GMT

Signature and text are separate.  No output file produced. 
% </PRE
></BLOCKQUOTE
><p class="para">Using digital signatures to validate the integrity of your
system's executables is a better technique than using simple
cryptographic checksum schemes, such as <a class="indexterm" name="AUTOID-8599"></A
>
MD5. Digital signatures are better
because with a simple MD5 scheme, you risk an attacker's
modifying <em class="emphasis">both </EM
>the binary file and the file
containing the MD5 checksums. With digital signatures, you don't
have to worry about an attacker's recreating the signature,
because the attacker does not have access to the secret key. (However,
you still need to worry about someone altering the source code of
your checksum program to make a copy of your secret key when you
type it.)</P
><blockquote class="note"><p class="para"><strong>NOTE:</STRONG
> <em class="emphasis">Protect your key! </EM
>No matter how
secure your encryption system is, you should take the same precautions
with your encryption key that you take with your password: there
is no sense in going to the time and expense of encrypting all of
your data with strong ciphers such as <span class="acronym">DES</SPAN
> or
<span class="acronym">RSA</SPAN
> if you keep your encryption keys in a file
in your home directory, or write them on a piece of paper attached
to your terminal.</P
><p class="para">Finally, <em class="emphasis">never use any of your passwords as an encryption
key!</EM
> If an attacker learns your password, your encryption
key will be the only protection for your data. Likewise, if the
encryption program is weak or compromised, you do not want your
attacker to learn your password by decrypting your files. The only
way to prevent this scenario is by using different words for your
password and encryption keys.</P
></BLOCKQUOTE
><div class="sidebar"><h4 class="sidebar"><a class="title" name="AUTOID-8610">Our PGP Keys</A
></H4
><p class="para">One way to verify someone's key is by getting it
from him or her in person. If you get the key directly from the
person involved, you can have some confidence that the key is really
his. Alternatively, you can get the key from a public keyserver,
<span class="acronym">WWW</SPAN
> page, or other location. Then, you verify
the <i class="firstterm"><a class="indexterm" name="AUTOID-8615"></A
>key fingerprint</I
>.
This is normally generated as <kbd class="command">pgp -<a class="indexterm" name="AUTOID-8619"></A
>
kvc
keyid</KBD
>. You can do this over the telephone, or in person.
You can also do it by finding the key fingerprint in a trusted location
... such as printed in a book.</P
><p class="para">Here are the key ids and fingerprints for our keys. The keys
themselves may be obtained from the public key servers. If you don't
know how to access the key servers, read the <span class="acronym">PGP</SPAN
>
documentation, or Simson's <span class="acronym">PGP</SPAN
> book,
also from O'Reilly.</P
><blockquote class="screen"><pre class="screen">pub  1024/FC0C02D5 1994/05/16 Eugene H. Spafford &lt;spaf@cs.purdue.edu&gt;
Key fingerprint =  9F 30 B7 C5 8B 52 35 8A  42 4B 73 EE 55 EE C5 41

pub 1024/903C9265 1994/07/15 Simson L. Garfinkel &lt;simsong@acm.org&gt;
Key fingerprint =  68 06 7B 9A 8C E6 58 3D  6E D8 0E 90 01 C5 DE 01 <a class="indexterm" name="AUTOID-8626"></A
><a class="indexterm" name="AUTOID-8629"></A
><a class="indexterm" name="AUTOID-8632"></A
>
 </PRE
></BLOCKQUOTE
></DIV
></DIV
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch06_05.htm#PUIS-CHP-6-SECT-5.3" title="6.5 Message Digests and Digital Signatures"><img src="../gifs/txtpreva.gif" alt="Previous: 6.5 Message Digests and Digital Signatures" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Practical UNIX &amp; Internet Security"><img src="../gifs/txthome.gif" alt="Practical UNIX &amp; Internet Security" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch06_07.htm" title="6.7 Encryption and U.S. Law"><img src="../gifs/txtnexta.gif" alt="Next: 6.7 Encryption and U.S. Law" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">6.5 Message Digests and Digital Signatures</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">6.7 Encryption and U.S. Law</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.htm" title="The Networking CD Bookshelf">Library Home</A
> | <a href="../dnsbind/index.htm" title="DNS &amp; BIND">DNS &amp; BIND</A
> | <a href="../tcpip/index.htm" title="TCP/IP Network Administration">TCP/IP</A
> | <a href="../sendmail/index.htm" title="sendmail">sendmail</A
> | <a href="../smdref/index.htm" title="sendmail Desktop Reference">sendmail Reference</A
> | <a href="../firewall/index.htm" title="Building Internet Firewalls">Firewalls</A
> | <a href="index.htm" title="Practical UNIX &amp; Internet Security">Practical Security</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
