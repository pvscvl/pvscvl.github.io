<html><head>
<title>[Chapter 20] 20.4 Improving NFS Security</TITLE>
<meta name="DC.title" content="Practical UNIX &amp; Internet Security"><meta name="DC.creator" content="Simson Garfinkel &amp; Gene Spafford"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-02-04T00:16:04Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-148-8" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch20_01.htm" title="20. NFS"><link rel="prev" href="ch20_03.htm" title="20.3 Client-Side NFS Security"><link rel="next" href="ch20_05.htm" title="20.5 Some Last Comments"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Practical UNIX &amp; Internet Security" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Practical UNIX &amp; Internet Security"><area shape="RECT" coords="467,0,514,18" href="../search/psrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch20_03.htm" title="20.3 Client-Side NFS Security"><img src="../gifs/txtpreva.gif" alt="Previous: 20.3 Client-Side NFS Security" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 20<br>NFS</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch20_05.htm" title="20.5 Some Last Comments"><img src="../gifs/txtnexta.gif" alt="Next: 20.5 Some Last Comments" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="PUIS-CHP-20-SECT-4">20.4 Improving NFS Security</A
></H2
><p class="para">There are many techniques that you can use to improve overall
NFS security:</P
><ol class="orderedlist"><li class="listitem"><p class="para">Limit the use of <span class="acronym">NFS</SPAN
>
by limiting the machines to which filesystems are exported, and
limit the number of filesystems that each client mounts.</P
></LI
><li class="listitem"><p class="para">Export filesystems read-only if possible.</P
></LI
><li class="listitem"><p class="para">Use root ownership of exported files and directories.</P
></LI
><li class="listitem"><p class="para">Remove group write permissions from exported files
and directories.</P
></LI
><li class="listitem"><p class="para">Do not export the server's executables.</P
></LI
><li class="listitem"><p class="para">Do not export home directories.</P
></LI
><li class="listitem"><p class="para">Do not allow users to log into the server.</P
></LI
><li class="listitem"><p class="para">Use the <kbd class="command">fsirand</KBD
> program, as described below.</P
></LI
><li class="listitem"><p class="para">Set the <kbd class="command">portmon</KBD
> variable, so that <span class="acronym">NFS</SPAN
>
requests that are not received from privileged ports will be ignored.</P
></LI
><li class="listitem"><p class="para">Use <kbd class="command">showmount -e</KBD
> to verify that you are only exporting
the filesystem you wish to export to the hosts specified with the
correct flags.</P
></LI
><li class="listitem"><p class="para">Use Secure <span class="acronym">NFS</SPAN
>.</P
></LI
></OL
><p class="para">These techniques are described below.</P
><div class="sect2"><h3 class="sect2"><a class="title" name="PUIS-CHP-20-SECT-4.1">20.4.1 Limit Exported and Mounted Filesystems</A
></H3
><p class="para">The best way to limit the danger of <span class="acronym">NFS</SPAN
>
is by having each computer only export and/or mount the
particular filesystems that are needed.</P
><p class="para">If a filesystem does not need to be exported, do not export
it. If it must be exported, export it to as few machines as possible
by judiciously using restrictions in the exports list. If you have
a sizeable number of machines to export to and such lists are tedious
to maintain, consider careful use of the <kbd class="command">netgroups</KBD
> mechanism, if
you have it. Do not export a filesystem to any computer unless you
have to. If possible, export filesystems read-only, as we'll
describe in the next section.</P
><p class="para">If you only need to export part of a filesystem, then export
only that part. Do not export an entire filesystem if you only need
access to a particular directory.</P
><p class="para">Likewise, your clients should only mount the <span class="acronym">NFS</SPAN
>
servers that are needed. Don't simply have every client
in your organization mount every <span class="acronym">NFS</SPAN
> server.
Limiting the number of mounted <span class="acronym">NFS</SPAN
> filesystems
will improve overall security, and will improve performance and
reliability as well.</P
><p class="para">The above advice may seem simple, but it is advice that is
rarely followed. Many organizations have configured their computers
so that every server exports all of its filesystems, and so that
every client mounts every exported filesystem. And the configuration
gets worse: many computers on the Internet today make filesystems
available without restriction to any other computer on the Internet.
Usually, carelessness or ignorance is to blame: a system administrator
faced with the need to allow access to a directory believes that
the easiest (or only) way to provide the access is to simply enable
file sharing for everybody.</P
><div class="sidebar"><h4 class="sidebar"><a class="title" name="AUTOID-28885">Export Can Be Forever</A
></H4
><p class="para">Some
versions of <span class="acronym">NFS</SPAN
> enforce the <i class="filename">exports</I
> file only
during mount, which means that clients that mount filesystems on
a server will continue to have access to those filesystems until
the clients unmount the server's filesystems or until they
are rebooted. Even if the client is removed from the server's
exports file and the server is rebooted, the client will continue
to have access and can continue to use a filesystem after unmounting
it, unless the directory is no longer exported at all, or unless
<i class="filename">fsirand</I
> is run on the exported filesystem to
change the generation count of each inode.</P
><p class="para">Distinguishing
a file handle that is guessed from one that is returned to the client
by the <kbd class="command">mount</KBD
> daemon is impossible. Thus, on systems where the exports
are only examined upon mounting, any file on the <span class="acronym">NFS</SPAN
>
server can by accessed by an adversary who has the ability and determination
to search for valid file handles.</P
></DIV
><p class="para">Not too long ago, one of us watched a student in a lab in
the Netherlands mount filesystems from more than 25 U.S. universities
and corporations on his workstation&nbsp;- most with read/write
access!</P
><div class="sect3"><h4 class="sect3"><a class="title" name="PUIS-CHP-20-SECT-4.1.1">20.4.1.1 The example explained</A
></H4
><p class="para">In the example we presented earlier in this chapter, <a class="xref" href="ch20_02.htm#PUIS-CHP-20-SECT-2.1.1" title="An /etc/dfs/dfstab file With Some Problems">Example 20.1</A
>An
<i class="filename">/etc/dfs/dfstab</I
> file with some problems&quot;
a system administrator made three dangerous mistakes. On the third
line, the administrator exported the directory <i class="filename">/tftpboot.</I
>
This directory is exported to any computer on the network that wishes
to mount it; if the computer is on the Internet, then any other
computer on the Internet has access to this server's <i class="filename">/tftpboot</I
>
directory.</P
><p class="para">What's the harm? First of all, users of the <i class="filename">/tftpboot</I
>
directory may not be aware that files that they place in it can
be so widely accessed. Another problem arises if the directory can
be written: in this case, there is a possibility that the storage
space will be hijacked by software pirates and used as a software
pirate &quot;warez&quot; repository. Perhaps worse, the
software on that partition can be replaced with hacked versions
that may not perform as the real owners would wish! (In this case,
<i class="filename">/tftpboot</I
> is probably used for providing bootstrap code
to machines on the network. By modifying this code, a resourceful
attacker could force arbitrary computers to run password sniffers,
erase their hard drives, or do other unwanted things.)</P
><p class="para">The last two lines of the sample configuration file have a
similar problem: they export the directories <i class="filename">/usr/lib/X11/ncd</I
>
and <i class="filename">/usr/openwin</I
> freely over the network. Although
the directories are exported read only, there is still a chance
that a software pirate could use the exported filesystems to obtain
copies of copyrighted software. This scenario could create a legal
liability for the site running the <span class="acronym">NFS</SPAN
> server.</P
><p class="para">You can make your server more secure by only exporting filesystems
to the particular computers that need to use those filesystems.
<em class="emphasis">Don't</EM
> export filesystems that don't
have to be exported. And don't export filesystems to the
entire Internet&nbsp;- otherwise you will only be asking for trouble.</P
><p class="para">Here is a revised <i class="filename">dfstab</I
> file that is
properly configured:</P
><blockquote class="screen"><pre class="screen">#       place share(1M) commands here for automatic execution
#       on entering init state 3.
#
#&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This configuration is more secure.
#
share -F nfs -o rw=red:blue:green /cpg
share -F nfs -o rw=clients -d &quot;spool&quot; /var/spool
share -F nfs -o ro=clients /tftpboot
share -F nfs -o ro=clients /usr/lib/X11/ncd
share -F nfs -o ro=clients /usr/openwin</PRE
></BLOCKQUOTE
><blockquote class="note"><p class="para"><strong>NOTE:</STRONG
> Be aware that the options on export commands and configuration
files have different semantics under <span class="acronym">SVR4</SPAN
> and
earlier, <span class="acronym">BSD</SPAN
>-like systems (including SunOS).
Under earlier <span class="acronym">BSD</SPAN
>-like systems, the -ro
option does not take hostnames as parameters, and there is an -access
option to limit access. If you specified an export list under SunOS
such as in the above example:</P
><blockquote class="screen"><pre class="screen">		exportfs -i -o rw=clients /var/spool</PRE
></BLOCKQUOTE
><p class="para">then the directory is exported read/write to
the members of the clients netgroup, but it is <em class="emphasis">also exported read-only
to everyone else on the network!</EM
> You must also specify the <kbd class="command">-access</KBD
>
option with the <kbd class="command">-rw</KBD
> option to limit the scope of the export. Thus,
to prevent other machines from reading exported files, you must
use the following command:</P
><blockquote class="screen"><pre class="screen">		exportfs -i -o rw=clients,access=clients /var/spool</PRE
></BLOCKQUOTE
><p class="para">Under <span class="acronym">SVR4</SPAN
>, both the <kbd class="command">-rw</KBD
>
and <kbd class="command">-ro</KBD
> options can take a host list to restrict the export
of the files. The directory is exported <em class="emphasis">only</EM
>
to the hosts named in the union of the two lists. There is no -access
option in <span class="acronym">SVR4</SPAN
>.</P
></BLOCKQUOTE
></DIV
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PUIS-CHP-20-SECT-4.2">20.4.2 Export Read-only</A
></H3
><p class="para">Many filesystems contain information that is only read, never
(or rarely) written. These filesystems can be exported read-only.
Exporting the filesystems read-only adds to both security and reliability:
it prevents the filesystems from being modified by <span class="acronym">NFS</SPAN
>
clients, limiting the damage that can be done by attackers, ignorant
users, and buggy software.</P
><p class="para">Many kinds of filesystems are candidates for read-only export:</P
><ul class="itemizedlist"><li class="listitem"><p class="para">Filesystems containing applications</P
></LI
><li class="listitem"><p class="para">Organizational reference matter, such as policies
and documents</P
></LI
><li class="listitem"><p class="para">Netnews (if you do not read news with <span class="acronym">NNTP</SPAN
>)</P
></LI
></UL
><p class="para">If you have programs or other files that must be exported
read-write, you can improve your system's overall performance,
reliability, and security by placing these items on their own filesystem
that is separately exported.</P
><p class="para">To export a filesystem read-only, specify the <i class="filename">ro=</I
><em class="emphasis">clients</EM
>
option in either your <i class="filename">exports</I
> file or your
<i class="filename">dfstab</I
> file (depending on which version of
<span class="acronym">UNIX</SPAN
> you are using). In the following example,
the <i class="filename">/LocalLibrary</I
> directory is exported read-only:</P
><blockquote class="screen"><pre class="screen">share -F nfs -o ro=clients /LocalLibrary</PRE
></BLOCKQUOTE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PUIS-CHP-20-SECT-4.3">20.4.3 Use Root Ownership</A
></H3
><p class="para">Because the <span class="acronym">NFS</SPAN
> server maps <i class="filename">root</I
> to <i class="filename">nobody</I
>,
you can protect files and directories on your server by setting
their owner to root and their protection mode to 755 (in the case
of programs and directories) or 644 (in the case of data files).
This setup will prevent the contents of the files from being modified
by a client machine.</P
><p class="para">If you have information on an <span class="acronym">NFS</SPAN
> server
that should not be accessible to <span class="acronym">NFS</SPAN
> clients,
you can use the file protection mode 700 (in the case of programs
and directories) or 600 (in the case of data files). However, a
better strategy is not to place the files on the <span class="acronym">NFS</SPAN
>
server in the first place.</P
><p class="para">Remember, this system protects only files on the server that
are owned by root. Also, this technique does not work if you have
patched your kernel to set the value of <i class="systemitem"> nobody</I
> to 0, or if you export the filesystems to a particular
host with the <i class="filename">-root=</I
> option.</P
><blockquote class="note"><p class="para"><strong>NOTE:</STRONG
> Protecting an executable file to be execute-only will
not work as you expect in an <span class="acronym">NFS</SPAN
> environment.
Because you must read a file into memory before it can be executed,
any file marked executable can also be read from a server using
<span class="acronym">NFS</SPAN
> commands (although it may not be possible
to do so using standard calls through a client). The server has
no way of knowing if the requests to be read are a prelude to execution
or not. Thus, putting execute-only files on an exported partition
may allow them to be examined or copied from a client machine.</P
></BLOCKQUOTE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PUIS-CHP-20-SECT-4.4">20.4.4 Remove Group-write Permission for Files and Directories</A
></H3
><p class="para">If you are using standard <span class="acronym">AUTH_UNIX</SPAN
> authentication
with <span class="acronym">NFS</SPAN
>, then users can effectively place themselves
in any group. Thus, to protect files and directories that are owned
by <i class="filename">root</I
>, they must <em class="emphasis">not</EM
> be group-writable.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PUIS-CHP-20-SECT-4.5">20.4.5 Do Not Export Server Executables</A
></H3
><p class="para">If your server is running the same operating system on the
same <span class="acronym">CPU</SPAN
> architecture as your client computers,
then you might be tempted to have the server export its own executables
(such as the programs stored in <i class="filename">/bin, /usr/bin,
/etc.</I
>) for use by the clients. Don't do so without
careful thought about the consequences.</P
><p class="para">At first, exporting a server's own executables seems
like a good way to save disk space: this way, you only need to have
one copy of each program, which is then shared between the clients
and the servers, rather than two copies.</P
><p class="para">But exporting your server's executables poses several
security problems:</P
><ul class="itemizedlist"><li class="listitem"><p class="para">It allows an attacker to easily determine
which version of each executable your server is running, which enables
the attacker to probe for weak spots with greater ease.</P
></LI
><li class="listitem"><p class="para">If there is an error in your system's configuration,
you may be exporting the binaries on a writable filesystem. An attacker
could then modify the server's own binaries, and possibly
break in (or at least cause you serious problems).</P
></LI
></UL
><p class="para">You can minimize the need for exporting server binaries by
using the <i class="firstterm">dataless client configuration</I
> that
is available on some versions of <span class="acronym">UNIX</SPAN
>. In this
case, &quot;dataless&quot; means that each client computer
maintains a complete copy of all of its executable files, but stores
all of its data that is subject to change on a central server.</P
><p class="para">If you simply <em class="emphasis">must </EM
>export the server's
binaries, then export the filesystem read-only.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PUIS-CHP-20-SECT-4.6">20.4.6 Do Not Export Home Directories</A
></H3
><p class="para">If you export a filesystem that has users' home directories
on it and you do not use Secure <span class="acronym">RPC</SPAN
>, then all
other clients mounting that directory, as well as the server itself,
can be placed at risk.</P
><p class="para">If you export a filesystem that contains users' home
directories, then there is a risk that an attacker could alter the
information stored on the <span class="acronym">NFS</SPAN
> server. This is
normally a serious risk in itself. However, if the partition being
exported includes users' home directories, then one of
the things that an attacker can do is create files in the users'
home directories.</P
><p class="para">A simple attack is for an attacker to create a <i class="filename">.rhosts</I
> file
in a users's home directory that specifically allows access
to the attacker. Having created this file, the attacker could now
log onto the server and proceed to look for additional security
holes. Perhaps the greatest danger in this attack is that it can
be aimed against system accounts (such as <i class="filename">daemon</I
> and <i class="filename">bin</I
>) as easily
as accounts used by human users.</P
><p class="para">Likewise, you should avoid exporting filesystems that contain
world-writable directories (e.g., <i class="filename">/tmp, /usr/tmp,
/usr/spool/uucppublic)</I
>.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PUIS-CHP-20-SECT-4.7">20.4.7 Do Not Allow Users to Log into the Server</A
></H3
><p class="para"><span class="acronym">NFS</SPAN
> and direct logins are two fundamentally
different ways to use a computer. If you allow users to log into
a server, the user can use that access to probe for weaknesses that
can be exploited from <span class="acronym">NFS</SPAN
>, and vice versa.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PUIS-CHP-20-SECT-4.8">20.4.8 Use fsirand</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-29014"></A
>One of the security
problems with <span class="acronym">NFS</SPAN
> is that the file handles used
to reference a file consist solely of a filesystem ID, an inode
number, and a generation count. Guessing valid file handles is easy
in most circumstances. Filesystem IDs are normally small numbers;
the root directory on the standard <span class="acronym">UNIX</SPAN
> filesystem
has the inode number 2, <i class="filename">/lost+found</I
> has the inode
number 3, and so on. The only difficulty in guessing a file handle
is the generation count. For many important inodes, including the
root inode, we would expect the generation count to be very small&nbsp;- we
don't normally delete a filesystem's root entry!</P
><p class="para">The <kbd class="command">fsirand</KBD
> program increases the difficulty of guessing a
valid file handle by randomizing the generation number of every
inode on a filesystem. The effect is transparent to the user&nbsp;- files
and directories are still fetched as appropriate when a reference
is made&nbsp;- but someone on the outside is unable to guess file
handles for files and directories anymore.</P
><p class="para">You can run <kbd class="command">fsirand</KBD
> on the <i class="filename">root</I
> directory while in single-user
mode or on any unmounted filesystem that will <kbd class="command">fsck</KBD
> without error.</P
><p class="para">For example, to run <kbd class="command">fsirand</KBD
> on your <i class="filename">/dev/sd1a</I
>
partition, type the following:</P
><blockquote class="screen"><pre class="screen"># <b class="emphasis.bold">umount /dev/sd1a</B
>				<em class="emphasis">Unmount the filesystem</EM
>
# <b class="emphasis.bold">fsirand /dev/sd1a</B
>				<em class="emphasis">Run fsirand</EM
></PRE
></BLOCKQUOTE
><p class="para">You might benefit from running <kbd class="command">fsirand</KBD
> once a month on your
exported partitions. Some people run it automatically every time
the system boots, but this has the disadvantage of making all legitimate
file handles stale, too. Consider your environment before taking
such a drastic step.</P
><p class="para">The <kbd class="command">fsirand</KBD
> program is not available on all versions of <span class="acronym">UNIX</SPAN
>.
In particular, it is not available under Linux.</P
><blockquote class="note"><p class="para"><strong>NOTE:</STRONG
> Older versions of Sun's <kbd class="command">fsirand</KBD
> contained buggy
code that made the &quot;random&quot; values quite predictable.
Be sure you have the latest version of <kbd class="command">fsirand</KBD
> from your vendor.
Most newer versions of the <kbd class="command">newfs</KBD
> command automatically run <kbd class="command">fsirand</KBD
>,
but not all do. The functionality of <kbd class="command">fsirand</KBD
> is incorporated into
the Solaris 2.5 <kbd class="command">mkfs</KBD
> command.</P
></BLOCKQUOTE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PUIS-CHP-20-SECT-4.9">20.4.9 Set the portmon Variable</A
></H3
><p class="para">Normally, <span class="acronym">NFS</SPAN
> servers respond to requests
that are transmitted from any <span class="acronym">UDP</SPAN
> port. However,
because <span class="acronym">NFS</SPAN
> requests are supposed to come from
<i class="systemitem">kernels</I
> of other computers,
and not from <em class="emphasis">users</EM
> who are running user-level
programs on other computers, a simple way to improve the security
of <span class="acronym">NFS</SPAN
> servers is to program them to reject <span class="acronym">NFS</SPAN
>
requests that do not come from privileged ports. On many <span class="acronym">NFS</SPAN
>
servers, the way that this restriction is established is by setting
the kernel variable <i class="filename">nfs_portmon</I
> to 1. It's important
to do this if you want even a minimal amount of <span class="acronym">NFS</SPAN
>
security.[10]</P
><blockquote class="footnote"><p class="para">[10] The value of 1 is not the default because
some vendors' NFS implementations don't send requests
from ports &lt;1024. If you set <kbd class="command">portmon</KBD
>, those vendors'
machines will not be able to be NFS clients from this NFS server.</P
></BLOCKQUOTE
><p class="para">If you are using SunOS, you can set the nfs_portmon
variable to 1 using the <kbd class="command">adb</KBD
> debugger:[11]</P
><blockquote class="footnote"><p class="para">[11] If you rebuild
the kernel, these modifications will be lost. You may want to consider
adding them to <i class="filename">/etc/rc/local.</I
> (A version
of this command is in <i class="filename">/etc/rc/*</I
>
on some systems.)</P
></BLOCKQUOTE
><blockquote class="screen"><pre class="screen"># <b class="emphasis.bold">adb -k -w /vmunix /dev/mem</B
>		<em class="emphasis">Changes kernel disk file</EM
>
<b class="emphasis.bold">nfs_portmon/W1</B
>	<em class="emphasis">Changes running kernel</EM
>
_nfs_portmon: _nfs_portmon: 0				<em class="emphasis">The default setting </EM
>?W1									<em class="emphasis">Change to 1 </EM
>$q									<em class="emphasis">Write the result out </EM
>#</PRE
></BLOCKQUOTE
><p class="para">If you are using Solaris 2.1-2.4, you can set the <i class="filename">portmon</I
>
variable by inserting this line into your /etc/system
file:</P
><blockquote class="screen"><pre class="screen">set nfs:nfs_portmon = 1</PRE
></BLOCKQUOTE
><p class="para">If you are using Solaris 2.5 and above, you can set the variable
by inserting this line into your /etc/system file:</P
><blockquote class="screen"><pre class="screen">set nfssrv:nfs_portmon = 1</PRE
></BLOCKQUOTE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PUIS-CHP-20-SECT-4.10">20.4.10 Use showmount -e</A
></H3
><p class="para">The <i class="filename">showmount -e</I
> command, mentioned earlier
in this chapter, lists the host&quot;s export lists&nbsp;- -that
is, the directories and hosts that can be mounted. The <i class="filename">showmount</I
>
command allows an optional argument, <i class="filename">host</I
>.
When this argument is provided, the <i class="filename">showmount</I
>
command can be used to remotely inspect another computer's
export list. The command is useful for finding <span class="acronym">NFS</SPAN
>
servers which are insecurely configured. For example:</P
><blockquote class="screen"><pre class="screen">% /usr/etc/showmount -e deadly.org
export list for deadly.org:
/bigusers       (everyone)
/tmp2           (everyone)
/               (everyone)
/usr            (everyone)
/var            (everyone)
/usr/public     (everyone)
/usr/public/pub (everyone)
%</PRE
></BLOCKQUOTE
><p class="para">In this case, the computer <i class="filename">deadly.org</I
> appears to be exporting
its <i class="filename">/bigusers</I
>, <i class="filename">/tmp2</I
>,
<i class="filename">/</I
>, <i class="filename">/usr</I
>, <i class="filename">/var</I
>,
<i class="filename">/usr/public</I
>, and <i class="filename">/usr/public/pub</I
> directories to every other computer on the Internet.</P
><p class="para">Fortunately, things aren't as bad as they seem at
<i class="systemitem">deadly.org</I
>. That's
because they are using Secure <span class="acronym">NFS</SPAN
>. Here's
what happens when you try to mount the filesystem:</P
><blockquote class="screen"><pre class="screen"># <b class="emphasis.bold">mount deadly.org:/ /nfs/tmp</B
>
nfs: bad MNT RPC: RPC: Authentication error; why = Client credential too weak</PRE
></BLOCKQUOTE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PUIS-CHP-20-SECT-4.11">20.4.11 Use Secure NFS</A
></H3
><p class="para">The biggest security problem with <span class="acronym">NFS</SPAN
>,
as it is normally configured, is that it uses Sun's <span class="acronym">AUTH_UNIX</SPAN
>
<span class="acronym">RPC</SPAN
> authentication system. With <span class="acronym">AUTH_UNIX</SPAN
>,
a user simply provides his <span class="acronym">UID</SPAN
> and a list of
<span class="acronym">GIDS</SPAN
> with every request. The <span class="acronym">NFS</SPAN
>
server trusts that the users are who they claim to be.</P
><p class="para">In a friendly environment, <span class="acronym">AUTH_UNIX</SPAN
> authentication
presents no problems, because requests sent out by the <span class="acronym">NFS</SPAN
>
client always have the same <span class="acronym">UID</SPAN
> and <span class="acronym">GIDS</SPAN
>
as the person who has logged in and is using the workstation. However,
if the workstation user has <i class="filename">root</I
> access, that person can use the
root access to become any other user, with that other user's
corresponding rights and privileges on the <span class="acronym">RPC</SPAN
>
server. A second problem with <span class="acronym">AUTH_UNIX</SPAN
> is that
user-written programs can have their <span class="acronym">AUTH_UNIX</SPAN
>
<span class="acronym">UID</SPAN
> and <span class="acronym">GIDS</SPAN
> set to any value.[12]
When reserved port checking is enabled, <span class="acronym">AUTH_UNIX</SPAN
>
offers roughly the same level of security as the <i class="filename">rsh/rlogin</I
>
trusted-host facility.</P
><blockquote class="footnote"><p class="para">[12] We have seen several &quot;NFS shells&quot; that allow
a user to make such accesses in a largely automated way.</P
></BLOCKQUOTE
><p class="para">Secure <span class="acronym">NFS</SPAN
> overcomes these problems by
using <span class="acronym">AUTH_DES</SPAN
> <span class="acronym">RPC</SPAN
> authentication
instead of <span class="acronym">AUTH_UNIX</SPAN
>. With Secure <span class="acronym">NFS</SPAN
>,
users must be able to decrypt a special key stored on the <span class="acronym">NIS</SPAN
>
or <span class="acronym">NIS</SPAN
>+ server before the <span class="acronym">NFS</SPAN
>
filesystem will allow the user to access his or her files.</P
><p class="para">To specify Secure <span class="acronym">NFS</SPAN
>, you must specify
the secure option both on the <span class="acronym">NFS</SPAN
> server (in
the <i class="filename">exports</I
> file or the <i class="filename">dfstab</I
>)
and on the client (in the /<i class="filename">etc/fstab</I
>
or <i class="filename">/etc/vfstab</I
> file).</P
><blockquote class="note"><p class="para"><strong>NOTE:</STRONG
> Secure <span class="acronym">NFS</SPAN
> requires Secure <span class="acronym">RPC</SPAN
>
to function, and therefore may not be available on all versions
of <span class="acronym">UNIX</SPAN
>. If you are in doubt about your system,
check your documentation to see if your <span class="acronym">NFS</SPAN
> <i class="filename">mount</I
>
command supports the secure option. Also note that Secure <span class="acronym">RPC</SPAN
>
may not be available on non-<span class="acronym">UNIX</SPAN
> implementations
of <span class="acronym">NFS</SPAN
>, either.</P
></BLOCKQUOTE
><p class="para">Here is an example of using Secure <span class="acronym">NFS</SPAN
>.
Suppose that a server has a filesystem <i class="filename">/Users</I
> that it will
export using Secure <span class="acronym">NFS</SPAN
>. The server's
<i class="filename">/etc/dfs/dfstab</I
> file might contain the following
line:</P
><blockquote class="screen"><pre class="screen">share -F nfs -o secure,rw=clients /Users</PRE
></BLOCKQUOTE
><p class="para">Meanwhile, the clients <i class="filename">/etc/vfstab</I
> file
would have a matching line:</P
><blockquote class="screen"><pre class="screen">#device&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;device&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mount&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FS&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fsck&nbsp;&nbsp;&nbsp;&nbsp;mount&nbsp;&nbsp;&nbsp;&nbsp;mount
#to&nbsp;moun&nbsp;&nbsp;&nbsp;&nbsp;to&nbsp;fsck&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pont&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type&nbsp;&nbsp;&nbsp;pass&nbsp;&nbsp;&nbsp;&nbsp;at&nbsp;boot&nbsp;&nbsp;options
#
server:/Users &nbsp;-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/Users&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nfs&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;yes&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;secure</PRE
></BLOCKQUOTE
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch20_03.htm" title="20.3 Client-Side NFS Security"><img src="../gifs/txtpreva.gif" alt="Previous: 20.3 Client-Side NFS Security" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Practical UNIX &amp; Internet Security"><img src="../gifs/txthome.gif" alt="Practical UNIX &amp; Internet Security" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch20_05.htm" title="20.5 Some Last Comments"><img src="../gifs/txtnexta.gif" alt="Next: 20.5 Some Last Comments" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">20.3 Client-Side NFS Security</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">20.5 Some Last Comments</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.htm" title="The Networking CD Bookshelf">Library Home</A
> | <a href="../dnsbind/index.htm" title="DNS &amp; BIND">DNS &amp; BIND</A
> | <a href="../tcpip/index.htm" title="TCP/IP Network Administration">TCP/IP</A
> | <a href="../sendmail/index.htm" title="sendmail">sendmail</A
> | <a href="../smdref/index.htm" title="sendmail Desktop Reference">sendmail Reference</A
> | <a href="../firewall/index.htm" title="Building Internet Firewalls">Firewalls</A
> | <a href="index.htm" title="Practical UNIX &amp; Internet Security">Practical Security</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
