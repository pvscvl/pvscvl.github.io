<html><head>
<title>[Chapter 8] 8.7 One-Time Passwords</TITLE>
<meta name="DC.title" content="Practical UNIX &amp; Internet Security"><meta name="DC.creator" content="Simson Garfinkel &amp; Gene Spafford"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-02-04T00:06:07Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-148-8" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch08_01.htm" title="8. Defending  Your Accounts"><link rel="prev" href="ch08_06.htm#PUIS-CHP-8-SECT-6.1" title="8.6 The UNIX Encrypted Password System"><link rel="next" href="ch08_08.htm#PUIS-CHP-8-SECT-8.3.1" title="8.8 Administrative Techniques for Conventional Passwords"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Practical UNIX &amp; Internet Security" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Practical UNIX &amp; Internet Security"><area shape="RECT" coords="467,0,514,18" href="../search/psrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch08_06.htm#PUIS-CHP-8-SECT-6.1" title="8.6 The UNIX Encrypted Password System"><img src="../gifs/txtpreva.gif" alt="Previous: 8.6 The UNIX Encrypted Password System" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 8<br>Defending  Your Accounts</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch08_08.htm#PUIS-CHP-8-SECT-8.3.1" title="8.8 Administrative Techniques for Conventional Passwords"><img src="../gifs/txtnexta.gif" alt="Next: 8.8 Administrative Techniques for Conventional Passwords" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="PUIS-CHP-8-SECT-7">8.7 One-Time Passwords</A
></H2
><p class="para"><a class="indexterm" name="AUTOID-11268"></A
><a class="indexterm" name="AUTOID-11270"></A
>If
you manage computers that people will access over the Internet or
other computer networks, then you should seriously consider implementing
some form of one-time password system. Otherwise, an attacker can
eavesdrop on your legitimate users, capture their passwords, and
use those passwords again at a later time.</P
><p class="para">Is such network espionage likely? Absolutely. In recent years,
people have broken into computers on key networks throughout the
Internet and have installed programs called <i class="firstterm"><a class="indexterm" name="AUTOID-11275"></A
><a class="indexterm" name="AUTOID-11278"></A
>password
sniffers </I
>(illustrated in <a class="xref" href="#PUIS-CHP-8-FIG-2" title="Password sniffing">Figure 8.2</A
>)<i class="firstterm">. </I
>These
programs monitor all information sent over a local area network
and silently record the first 20, 50 or 128 characters sent over
each network connection.[12]
In at least one case, a password sniffer
captured tens of thousands of passwords within the space of a few
weeks before the sniffer was noticed; the only reason the sniffer's
presence was brought to the attention of the authorities was because
the attacker was storing the captured passwords on the compromised
computer's hard disk. Eventually, the hard disk filled
up, and the computer crashed!</P
><blockquote class="footnote"><p class="para">[12] Some sniffers have been discovered
&quot;in the wild&quot; that record 1024 characters, or
even the entire Telnet session. Sniffers have also recorded FTP
and NFS transactions.</P
></BLOCKQUOTE
><h4 class="figure"><a class="title" name="PUIS-CHP-8-FIG-2">Figure 8.2: Password sniffing</A
></H4
><img class="graphic" src="figs/puis_0802.gif" alt="Figure 8.2"><p class="para">One-time passwords,[13] as their name
implies, are passwords which can be used only once, as we explained
in <a class="xref" href="ch03_01.htm" title="Users and Passwords">Chapter 3, <cite class="chapter">Users and Passwords</CITE
></A
>. They are one of the only ways of protecting against
password sniffers.</P
><blockquote class="footnote"><p class="para">[13] Encryption offers another
solution against password sniffing, although it is harder to implement
in practice because of the need for compatible software on both
sides of the network connection.</P
></BLOCKQUOTE
><p class="para"><a class="indexterm" name="AUTOID-11292"></A
><a class="indexterm" name="AUTOID-11294"></A
>Another
application which demands one-time passwords is mobile network computing,
where the connection between computers is established over a radio
channel. When radio is used, passwords are literally broadcast through
the air, available for capture by anybody with a radio receiver.
One way to ensure that a computer account will not be compromised
is to make sure that a password, after transmittal, can never be
used again.</P
><p class="para">There are many different one-time password systems available.
Some of them require that the user carry a hardware device, such
as a smart card or a special calculator. Others are based on cryptography,
and require that the user run special software. Still others are
based on paper. <a class="xref" href="#PUIS-CHP-8-FIG-3" title="Security Dynamics SECURID cards and fob">Figure 8.3</A
>,
 <a class="xref" href="#PUIS-CHP-8-FIG-4" title="Digital Pathways SecureNet key card">Figure 8.4</A
>, and <a class="xref" href="#PUIS-CHP-8-FIG-5" title="S/Key password printout">Figure 8.5</A
> show three commonly used
systems; we'll describe them briefly in the following sections.</P
><div class="sect2"><h3 class="sect2"><a class="title" name="PUIS-CHP-8-SECT-7.1">8.7.1 Integrating One-time Passwords with UNIX</A
></H3
><p class="para">In general, you do not need to modify existing software to
use these one-time password systems. The simplest way to use them
is to replace the user's login <a class="indexterm" name="AUTOID-11304"></A
><a class="indexterm" name="AUTOID-11307"></A
>
shell (as represented in the <i class="filename">/etc/passwd</I
>
file; see &quot;Changing the Account's Login Shell&quot;)
with a specialized program to prompt for the one-time password.
If the user enters the correct password, the program then runs the
user's real command interpreter. If an incorrect password
is entered, the program can exit, effectively logging the user out.
This puts two passwords on the account&nbsp;- the traditional
account password, followed by the one-time password.</P
><p class="para">For example, here is an <em class="emphasis">/etc/passwd</EM
> entry
for an account to which a Security Dynamics SecurID card key will
be required to log in (see the next section):</P
><blockquote class="screen"><pre class="screen">tla:TcHypr3FOlhAg:237:20:Ted L. Abel:/u/tla:/usr/local/etc/sdshell</PRE
></BLOCKQUOTE
><p class="para">If you wish to use this technique, you must be sure that users
cannot use the <em class="emphasis"><a class="indexterm" name="AUTOID-11316"></A
>chsh</EM
>
program to change their shell back to a program such as <em class="emphasis">/bin/sh</EM
><kbd class="command"></KBD
>which does not require one-time passwords.</P
><p class="para">A few versions of <span class="acronym">UNIX</SPAN
> allow the system
administrator to specify a program (or series of programs) to be
used instead of, or in addition to, the standard password authentication.
In these systems, the program(s) are run, one after another, and
their return codes are examined. If any exit with an error code,
the login is refused. <a class="indexterm" name="AUTOID-11322"></A
><a class="indexterm" name="AUTOID-11324"></A
>
<span class="acronym">AIX</SPAN
>
is one such system, and future versions of Solaris are slated to
include such functionality.</P
><blockquote class="note"><p class="para"><strong>NOTE:</STRONG
> There are many ways to gain access to a <span class="acronym">UNIX</SPAN
>
system that do not involve running a shell, such as <span class="acronym">FTP</SPAN
>
and <span class="acronym">NFS</SPAN
>. If you use a special shell to implement
one-time-passwords, these methods of access will not use the alternative
authentication system unless they are specifically modified. You
may wish to disable them if you are unable to replace them with
versions that use the alternate authentication mechanism.</P
></BLOCKQUOTE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PUIS-CHP-8-SECT-7.2">8.7.2 Token Cards</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-11335"></A
><a class="indexterm" name="AUTOID-11337"></A
>One method is to use some form of token-based password
generator. In this scheme, the user has a small card or calculator
with a built-in set of pre-programmed authentication functions and
a serial number. To log in to the host, the user must use the card,
in conjunction with a password, to determine the one-time password.
Each time the user needs to use a password, the card is consulted
to generate one. Each use of the card requires a password known
to the user so that the card cannot be used by anyone stealing it.</P
><p class="para">The approach is for the card to have some calculation based
on the time and a secret function or serial number. The user reads
a number from a display on the card, combines it with a password
value, and uses this as the password. The displayed value on the
card changes periodically, in a non-obvious manner, and the host
will not accept two uses of the same number within this interval.</P
><p class="para">The <a class="indexterm" name="AUTOID-11342"></A
>
SecurID shown in <a class="xref" href="#PUIS-CHP-8-FIG-3" title="Security Dynamics SECURID cards and fob">Figure 8.3</A
> is one of the best-known examples of a time-based token. One
version of the SecurID card is based on a patented technology to
display a number that changes every 30-90 seconds. The number that
is displayed is a function of the current time and date, and the
ID of that particular card, and is synchronized with the server.
Another version has a keypad which is used to enter a personal identification
number (<span class="acronym">PIN</SPAN
>) code. (Without the keypad, a password
must be sent, and this password is vulnerable to eavesdropping.)
The fob version shown in the figure provides stronger packaging;
it's especially good for people who don't carry
wallets or handbags, and carry the device in a pocket. The cards
are the size of a credit card and have a small <span class="acronym">LCD</SPAN
>
window to display the output.</P
><h4 class="figure"><a class="title" name="PUIS-CHP-8-FIG-3">Figure 8.3: Security Dynamics SECURID
cards and fob</A
></H4
><img class="graphic" src="figs/puis_0803.gif" alt="Figure 8.3"><p class="para">A second approach taken with tokens is to present the user
with a challenge at login. The <a class="indexterm" name="AUTOID-11351"></A
>
SecureNet
key shown in <a class="xref" href="#PUIS-CHP-8-FIG-4" title="Digital Pathways SecureNet key card">Figure 8.4</A
> is a token that implements a simple, but
secure, challenge-response system. Unlike the Security Dynamics
products, the SecureNet key does not have an internal clock. To
log in, the user contacts the remote machine, which displays a number
as a challenge. The user types the challenge number into the card,
along with its <span class="acronym">PIN</SPAN
>. The key calculates a response
and displays it. The user then types the response into the remote
computer as her one-time password. The SecureNet key can be programmed
to self-destruct if an incorrect password is entered more than a
predefined number of times.</P
><h4 class="figure"><a class="title" name="PUIS-CHP-8-FIG-4">Figure 8.4: Digital Pathways SecureNet
key card</A
></H4
><img class="graphic" src="figs/puis_0804.gif" alt="Figure 8.4"><p class="para">There are many other vendors of one-time tokens, but the ideas
behind their products are all basically the same. Some of these
systems also can provide interesting add-on features, such as a
<i class="firstterm"><a class="indexterm" name="AUTOID-11360"></A
>duress code</I
>.
If the user is being coerced to enter the correct password with
the card value, he can enter a different password that will allow
limited access, but will also trigger a remote alarm to notify management
that something is wrong.</P
><p class="para">There are two common drawbacks of these systems: the cards
tend to be a bit fragile, and they have batteries that eventually
discharge. The cost-per-unit may be a significant barrier for an
organization that doesn't have an appropriate budget for
security (but they are cheaper than many major break-ins!). And
the cards can be annoying, especially when you take 90 minutes to
get to work, only to discover that you left your token card at home.</P
><p class="para">However, the token approach does work reliably and effectively.
The vendors of these systems typically provide packages that easily
integrate them into programs such as /bin/login,
as well as libraries that allow you to integrate these tokens into
your own systems as well. Several major corporations and labs have
used these systems for years. Tokens eliminate the risks of password
sniffing. They cannot be shared like passwords. Indeed, the tokens
do work as advertised&nbsp;- something that may make them well
worth the cost involved.<a class="indexterm" name="AUTOID-11364"></A
><a class="indexterm" name="AUTOID-11366"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PUIS-CHP-8-SECT-7.3">8.7.3 Code Books</A
></H3
><p class="para">A second popular method for supplying one-time passwords is
to generate a <a class="indexterm" name="AUTOID-11372"></A
>
codebook of some sort.
This is a list of passwords that are used, one at a time, and then
never reused. The passwords are generated in some way based on a
shared secret. This method is a form of <a class="indexterm" name="AUTOID-11374"></A
>
one-time pad (see <a class="xref" href="ch06_04.htm#PUIS-CHP-6-SECT-4.4.2" title="An Unbreakable Encryption Algorithm">Section 6.4.7, "An Unbreakable Encryption Algorithm"</A
>).</P
><p class="para">When a user wishes to log in to the system in question, the
user either looks up the next password in the code book, or generates
the next password in the virtual codebook. This password is then
used as the password to give to the system. The user may also need
to specify a fixed password along with the codebook entry.</P
><p class="para">Codebooks can be static, in which case they may be printed
out on a small sheet of paper to be carried by the user. Each time
a password is used, the user crosses the entry off the list. After
the list is completely used, the system administrator or user generates
another list. Alternatively, the codebook entries can be generated
by any PC the user may have (this makes it like a token-based system).
However, this means that if the user is careless and leaves critical
information on the PC (as in a programmed function key), anyone
else with access to the PC may be able to log in as the user.</P
><p class="para">One of the best known forms of codebook schemes is that presented
by <a class="indexterm" name="AUTOID-11380"></A
>
S/Key. S/Key
is a one-time password system developed at Bellcore based on a 1981
article by Leslie Lamport. With the system, each user is given a
mathematical algorithm, which is used to generate a sequence of
passwords. The user can either run this algorithm on a portable
computer when needed, or can print out a listing of &quot;good
passwords&quot; as a paper codebook. <a class="xref" href="#PUIS-CHP-8-FIG-5" title="S/Key password printout">Figure 8.5</A
> shows such a
list.</P
><p class="para">Unfortunately, the developers of S/Key did not maintain
the system or integrate it into freely redistributable versions
of <i class="filename">/bin/login</I
>, <i class="filename">/usr/ucb/ftpd</I
>,
and other programs that require user authentication. As a result,
others undertook those tasks, and there are now a variety of S/Key
implementations available on the Internet. Each of these has different
features and functionality. We note the location of several <a class="indexterm" name="AUTOID-11386"></A
><a class="indexterm" name="AUTOID-11388"></A
>
of these systems in <a class="xref" href="appe_01.htm" title="Electronic Resources">Appendix E, <cite class="appendix">Electronic Resources</CITE
></A
>.</P
><h4 class="figure"><a class="title" name="PUIS-CHP-8-FIG-5">Figure 8.5: S/Key password printout</A
></H4
><img class="graphic" src="figs/puis_0805.gif" alt="Figure 8.5"><div class="sidebar"><h4 class="sidebar"><a class="title" name="AUTOID-11395">Kerberos and DCE: Alternatives
to One-Time Passwords?</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-11398"></A
><a class="indexterm" name="AUTOID-11400"></A
>Kerberos
and <span class="acronym">DCE</SPAN
> are two systems which allow workstations
to authenticate themselves to services running on servers without
ever sending a password in clear text over the network. At first
glance, then, Kerberos and <span class="acronym">DCE</SPAN
> appear immune
to password sniffers. If used properly, they are so.</P
><p class="para">Unfortunately, Kerberos and <span class="acronym">DCE</SPAN
> have their
drawbacks. The first is that both systems require modification to
both the client and the server: you cannot connect to a Kerberos
service from any workstation on the Internet. Instead, you can only
use workstations that are specially configured to run the exact
version of Kerberos or <span class="acronym">DCE</SPAN
> which your server
happens to use.</P
><p class="para">A bigger problem, though, happens when users try to log into
computers running Kerberos over the network. Take the example of
an <span class="acronym">MIT</SPAN
> professor, who wishes to access her <span class="acronym">MIT</SPAN
>
computer account from a colleague's computer at Stanford.
In this case, the professor will sit down at the Stanford computer,
telnet to the <span class="acronym">MIT</SPAN
> computer, and type her password.
As a result, her password will travel over the Internet in the clear
on its way to the secure Kerberos workstation. In the process, it
may be picked up by a password sniffer. The same could happen if
she were using one of the many <span class="acronym">DCE</SPAN
> implementations
currently available.</P
><p class="para">Of course, Kerberos isn't supposed to work in this
manner. At Stanford, the <span class="acronym">MIT</SPAN
> professor is supposed
to be able sit down at a Kerberos-equipped workstation and use it
to transmit an encrypted password over the Internet using the standard
Kerberos encryption scheme. The problem, though, is that the workstation
must be able to locate the Kerberos server at <span class="acronym">MIT</SPAN
>
to use it, which often requires prior setup. And the Kerberos- (or
<span class="acronym">DCE</SPAN
>-) equipped workstation, with compatible versions
of the software, needs to be at Stanford in the first place. Thus,
while Kerberos and <span class="acronym">DCE</SPAN
> may seem as if they are
alternatives to one-time passwords, they unfortunately are not in
many real-world cases.</P
><p class="para">The Kerberos system's biggest problem, though, is
that it still allows users to pick bad passwords and to write them
down.</P
></DIV
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch08_06.htm#PUIS-CHP-8-SECT-6.1" title="8.6 The UNIX Encrypted Password System"><img src="../gifs/txtpreva.gif" alt="Previous: 8.6 The UNIX Encrypted Password System" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Practical UNIX &amp; Internet Security"><img src="../gifs/txthome.gif" alt="Practical UNIX &amp; Internet Security" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch08_08.htm#PUIS-CHP-8-SECT-8.3.1" title="8.8 Administrative Techniques for Conventional Passwords"><img src="../gifs/txtnexta.gif" alt="Next: 8.8 Administrative Techniques for Conventional Passwords" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">8.6 The UNIX Encrypted Password System</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">8.8 Administrative Techniques for Conventional Passwords</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.htm" title="The Networking CD Bookshelf">Library Home</A
> | <a href="../dnsbind/index.htm" title="DNS &amp; BIND">DNS &amp; BIND</A
> | <a href="../tcpip/index.htm" title="TCP/IP Network Administration">TCP/IP</A
> | <a href="../sendmail/index.htm" title="sendmail">sendmail</A
> | <a href="../smdref/index.htm" title="sendmail Desktop Reference">sendmail Reference</A
> | <a href="../firewall/index.htm" title="Building Internet Firewalls">Firewalls</A
> | <a href="index.htm" title="Practical UNIX &amp; Internet Security">Practical Security</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
