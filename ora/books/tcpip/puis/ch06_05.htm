<html><head>
<title>[Chapter 6] 6.5 Message Digests and Digital Signatures</TITLE>
<meta name="DC.title" content="Practical UNIX &amp; Internet Security"><meta name="DC.creator" content="Simson Garfinkel &amp; Gene Spafford"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-02-04T00:02:46Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-148-8" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch06_01.htm" title="6. Cryptography"><link rel="prev" href="ch06_04.htm#PUIS-CHP-6-SECT-4.4.2" title="6.4 Common Cryptographic Algorithms"><link rel="next" href="ch06_06.htm#PUIS-CHP-6-SECT-6.2" title="6.6 Encryption Programs Available for UNIX"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Practical UNIX &amp; Internet Security" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Practical UNIX &amp; Internet Security"><area shape="RECT" coords="467,0,514,18" href="../search/psrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch06_04.htm#PUIS-CHP-6-SECT-4.4.2" title="6.4 Common Cryptographic Algorithms"><img src="../gifs/txtpreva.gif" alt="Previous: 6.4 Common Cryptographic Algorithms" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 6<br>Cryptography</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch06_06.htm#PUIS-CHP-6-SECT-6.2" title="6.6 Encryption Programs Available for UNIX"><img src="../gifs/txtnexta.gif" alt="Next: 6.6 Encryption Programs Available for UNIX" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="PUIS-CHP-6-SECT-5">6.5 Message Digests and Digital Signatures</A
></H2
><p class="para">A <i class="firstterm"><a class="indexterm" name="AUTOID-7818"></A
><a class="indexterm" name="AUTOID-7820"></A
>message digest</I
> (also known as a <i class="firstterm">cryptographic
checksum</I
> or <i class="firstterm">cryptographic hashcode</I
>)
is nothing more than a number&nbsp;- a special number that is
effectively a hashcode produced by a function that is very difficult
to reverse.</P
><p class="para">A <em class="emphasis">digital signature</EM
> is (most often) a message digest encrypted
with someone's private key to certify the contents. This
process of encryption is called signing. Digital signatures can
perform two different functions, both very important to the security
of your system:</P
><ul class="itemizedlist"><li class="listitem"><p class="para"><em class="emphasis">Integrity</EM
>&nbsp;- A digital signature
indicates whether a file or a message has been modified.</P
></LI
><li class="listitem"><p class="para"><em class="emphasis">Authentication</EM
>&nbsp;- A digital signature makes
possible mathematically verifying the name of the person who signed
the message.</P
></LI
></UL
><p class="para">A third function that is quite valuable in some contexts is
called <i class="firstterm"><a class="indexterm" name="AUTOID-7835"></A
>non-repudiation</I
>.
Non-repudiation means that after you have signed and sent a message,
you cannot later claim that you did not sign the original message.
You cannot repudiate your signature, because the message was signed
with your private key (which, presumably, no one else has).</P
><p class="para">We'll outline the first two of these concepts here,
and refer to them in later chapters (and especially in <a class="xref" href="ch09_01.htm" title="Integrity Management">Chapter 9, <cite class="chapter">Integrity Management</CITE
></A
>). Non-repudiation is not of major
concern to us here, although it is important in many other contexts,
especially that of email.</P
><div class="sect2"><h3 class="sect2"><a class="title" name="PUIS-CHP-6-SECT-5.1">6.5.1 Message Digests</A
></H3
><p class="para">A simple <a class="indexterm" name="AUTOID-7842"></A
>
hash function
takes some input, usually of indefinite length, and produces a small
number that is significantly shorter than the input. The function
is <i class="firstterm">many to one</I
>, in that many (possibly infinite)
inputs may generate the same output value. The function is also
<em class="emphasis">deterministic</EM
> in that the same output value is always generated
for identical inputs. Hash functions are often used in mechanisms
that require fast lookup for various inputs, such as symbol tables
in compilers and spelling checkers.</P
><p class="para">A message digest is also a hash function. It takes a variable
length input&nbsp;- often an entire disk file&nbsp;- and reduces
it to a small value (typically 128 to 512 bits). Give it the same
input, and it always produces the same output. And, because the
output is very much smaller than the potential input, for at least
one of the output values there must be more than one input value
that can produce it; we would expect that to be true for all possible
output values for a good message digest algorithm.</P
><p class="para">There are two other important properties of good message digest
algorithms. The first is that the algorithm cannot be predicted
or reversed. That is, given a particular output value, we cannot
come up with an input to the algorithm that will produce that output,
either by trying to find an inverse to the algorithm, or by somehow
predicting the nature of the input required. With at least 128 bits
of output, a brute force attack is pretty much out of the question,
as there will be 1.7 x 10<sup class="superscript">38</SUP
> possible input values of the same length
to try, on average, before finding one that generates the correct
output. Compare this with some of the figures given in &quot;Strength
of RSA&quot; earlier in this chapter, and you'll see
that this task is beyond anything anyone would be able to try with
current technology. With numbers as large as these, the idea that
any two <em class="emphasis">different</EM
> documents produced at random
during the course of human history would have the same 128-bit message
digest is unlikely!</P
><p class="para">The second useful property of message digest algorithms is
that a small change in the input results in a significant change
in the output. Change a single input bit, and roughly half of the
output bits should change. This is actually a consequence of the
first property, because we don't want the output to be
predictable based on the input. However, this aspect is a valuable
property of the message digest all by itself.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PUIS-CHP-6-SECT-5.2">6.5.2 Using Message Digests</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-7854"></A
>Given
the way that a message digest works, you can understand how it can
be used as an authentication system for anyone who is distributing
digital documents: simply publish your documents electronically,
distribute them on the Internet, and for each document also publish
its message digest. Then, if you want to be sure that the copy of
the document you download from the Internet is an unaltered copy
of the original, simply recalculate the document's message
digest and compare it with the one for the document that you published.
If they match, you know you've got the same document as
the original.</P
><p class="para">In fact, the <a class="indexterm" name="AUTOID-7858"></A
><a class="indexterm" name="AUTOID-7861"></A
><a class="indexterm" name="AUTOID-7864"></A
>
Computer Emergency Response
Team (<span class="acronym">CERT</SPAN
>) does this via the Internet when they
distribute patches and bug fixes for security-related problems.
The following is a portion of a 1994 message from <span class="acronym">CERT</SPAN
>
advising recipients to replace the <span class="acronym">FTP</SPAN
><i class="filename"></I
>programs on their computers with more secure versions:</P
><blockquote class="screen"><pre class="screen">Date: Thu, 14 Apr 94 16:00:00 EDT
Subject: CERT Advisory CA-94:08.ftpd.vulnerabilities
To: cert-advisory-request@cert.org
From: cert-advisory@cert.org (CERT Advisory)
Organization: CERT Coordination Center
Address:      Software Engineering Institute
              Carnegie Mellon University
              Pittsburgh, Pennsylvania 15213-3890
=======================================================================
CA-94:08                     CERT Advisory
                            April 14, 1994
                         ftpd Vulnerabilities
-----------------------------------------------------------------------

The CERT Coordination Center has received information concerning two
vulnerabilities in some ftpd implementations.  The first is a
vulnerability with the SITE EXEC command feature of the FTP daemon
(ftpd) found in versions of ftpd that support the SITE EXEC feature.
This vulnerability allows local or remote users to gain root access.
The second vulnerability involves a race condition found in the ftpd
implementations listed in Section I. below.  This vulnerability allows
local users to gain root access.

Sites using these implementations are vulnerable even if they do not
support anonymous FTP.

								. . .

II.  Impact

Anyone (remote or local) can gain root access on a host running a
vulnerable FTP daemon.  Support for anonymous FTP is not required
to exploit this vulnerability.

III. Solution

Affected sites can solve both of these problems by upgrading to
the latest version of ftpd. These versions are listed below. Be
certain to verify the checksum information to confirm that you
have retrieved a valid copy.

If you cannot install the new version in a timely manner, you
should disable FTP service until you have corrected this problem.
It is not sufficient to disable anonymous FTP.  You must disable
the FTP daemon.

For wuarchive ftpd, you can obtain version 2.4 via anonymous
FTP from wuarchive.wustl.edu, in the &quot;/packages/wuarchive-ftpd&quot;
directory.  If you are currently running version 2.3, a patch
file is available.


&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BSD        SVR4         
File               Checksum   Checksum    MD5 Digital Signature
-----------------  --------   ---------   -----------------------------
wu-ftpd2.4.tar.Z&nbsp;&nbsp;&nbsp;&nbsp;38213&nbsp;181&nbsp;&nbsp;&nbsp;20337&nbsp;362&nbsp;&nbsp;cdcb237b71082fa23706429134d8c32e
patch_2.3-2.4.Z&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;09291&nbsp;&nbsp;&nbsp;8&nbsp;&nbsp;&nbsp;51092&nbsp;&nbsp;16&nbsp;&nbsp;5558a04d9da7cdb1113b158aff89be8f

								. . .</PRE
></BLOCKQUOTE
><p class="para">As you can tell from the tone of the message, <span class="acronym">CERT</SPAN
>
considers the security problem to be extremely serious: anyone on
the Internet could break into a computer running a particular <i class="filename">ftpd</I
>
program and become the superuser! <span class="acronym">CERT</SPAN
> had a
fix for this bug but rather than distribute it to each site individually,
they identified a principal site with the fix (<i class="systemitem">wuarchive.wustl.edu</I
>) and advised
people to download the fix.</P
><p class="para"><a class="indexterm" name="AUTOID-7877"></A
><a class="indexterm" name="AUTOID-7880"></A
>MD5 is a commonly used message-digest algorithm.
<span class="acronym">CERT</SPAN
> publishes the MD5 &quot;digital signature&quot;
of the files so that people can verify the authenticity of the patch
before they install it. After receiving the message from <span class="acronym">CERT</SPAN
>
and downloading the patch, system administrators are supposed to
compute the MD5 of the binary. This process provides two indications.</P
><ol class="orderedlist"><li class="listitem"><p class="para">If the MD5 of the binary matches the
one published in the <span class="acronym">CERT</SPAN
> message, a system administrator
knows the file wasn't damaged during the download.</P
></LI
><li class="listitem"><p class="para">More importantly, if the two MD5 codes match, a
system administrator can be certain that hackers haven't
broken into the computer<i class="filename"> </I
><i class="systemitem">wuarchive.wustl.edu</I
> and replaced
the patch with a program that contains security holes.</P
></LI
></OL
><p class="para">Although <span class="acronym">CERT</SPAN
>'s interest in security
is commendable, there is an important flaw in this approach. Nothing
guarantees that the <span class="acronym">CERT</SPAN
> message itself isn't
forged. In other words, any hacker with sufficient skill to break
into an anonymous <span class="acronym">FTP</SPAN
> repository and play switcheroo
with the binaries might also be able to send a forged email message
to <span class="acronym">CERT</SPAN
>'s mailing lists telling system
administrators to install new (and faulty) software. Unsuspecting
administrators would receive the email message, download the patch,
check the MD5 codes, and install the software&nbsp;- creating
a new security hole for the hackers to exploit.</P
><p class="para"><span class="acronym">CERT</SPAN
>'s problem, then, is this:
while the MD5 code in the email message is a signature for the patch,
<em class="emphasis">there is no signature for the message from </EM
><span class="acronym">CERT</SPAN
>
<em class="emphasis">itself!</EM
> There is no way to verify that the <span class="acronym">CERT</SPAN
>
message is authentic.</P
><p class="para"><span class="acronym">CERT</SPAN
> personnel are aware of the problem
that alerts can be forged. For this reason, <span class="acronym">CERT</SPAN
>
uses digital signatures for all its alerts available via anonymous
<span class="acronym">FTP</SPAN
> from the computer <a class="systemitem.ftpserver" href="../../../WebStripper/protected.html#link=ftp://ftp.cert.org">ftp.cert.org</A
>.
For each alert, you find a file with an <i class="filename">.asc</I
>
file extension, which contains a digital signature. Unfortunately,
<span class="acronym">CERT</SPAN
> (at this time) does not distribute its alerts
with the digital signature at the bottom of the message, which would
make things easier for everybody.<a class="indexterm" name="AUTOID-7910"></A
><a class="indexterm" name="AUTOID-7912"></A
><a class="indexterm" name="AUTOID-7915"></A
><a class="indexterm" name="AUTOID-7919"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PUIS-CHP-6-SECT-5.3">6.5.3 Digital Signatures</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-7926"></A
><a class="indexterm" name="AUTOID-7930"></A
>As
we pointed out in the last section, a message digest function is
only half of the solution to creating a reliable digital signature.
The other half is public key encryption&nbsp;- only run in reverse.</P
><p class="para"><a class="indexterm" name="AUTOID-7935"></A
><a class="indexterm" name="AUTOID-7937"></A
>Recall
that when we introduced public key encryption earlier in this chapter,
we said that it depends on two keys:</P
><dl class="variablelist"><dt class="term">Public key</DT
><dd class="listitem"><p class="para">A key that is used for encrypting a secret message.
Normally, the public key is widely published.</P
></DD
><dt class="term">Secret key</DT
><dd class="listitem"><p class="para">A key that is kept secret, for decrypting messages
once they are received.</P
></DD
></DL
><p class="para">By using a little bit of mathematical gymnastics, you can
run the public key algorithm in reverse. That is, you could encrypt
messages with your secret key; these messages can then be decrypted
by anyone who possesses your public key. Why would anyone want to
do this? Each public key has one and only one matching secret key.
If a particular public key can decrypt a message, you can be sure
that the matching secret key was used to encrypt it. And that is
how digital signatures work.</P
><p class="para">When you apply your secret key to a message, you are signing
it. By using your secret key and the message digest function, you
are able to calculate a digital signature for the message you're
sending. In principle, a public key algorithm could be used without
a message digest algorithm: we could encrypt the whole message with
our private key. However, every public key algorithm in use requires
a large amount of processor time to encrypt even moderate-size inputs.
Thus, to sign a multi-megabyte file might take hours or days if
we only used the public key encryption algorithm.</P
><p class="para">Instead, we use a fast message digest algorithm to calculate
a hash value, and then we sign that small hash value with our secret
key. When you, the recipient, get that small value, you can decrypt
the hash value using our public key. You can also recreate the hash
value from the input. If those two values match, you are assured
that you got the same file we signed.</P
><p class="para">The most common digital signature in use today is the combination
of the MD5 message digest algorithm and the <a class="indexterm" name="AUTOID-7953"></A
>
<span class="acronym">RSA</SPAN
>
public key encryption mechanism. Another likely possibility is to
use the <a class="indexterm" name="AUTOID-7956"></A
><a class="indexterm" name="AUTOID-7958"></A
>
<span class="acronym">SHA</SPAN
> (Secure Hash Algorithm)
and <a class="indexterm" name="AUTOID-7961"></A
>
ElGamal public-key mechanism;
together, these two algorithms form the <span class="acronym">NIST</SPAN
>
<a class="indexterm" name="AUTOID-7964"></A
><a class="indexterm" name="AUTOID-7966"></A
>
<span class="acronym">DSA</SPAN
>&nbsp;- Digital
Signature Algorithm.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PUIS-CHP-6-SECT-5.4">6.5.4 Common Digest Algorithms</A
></H3
><p class="para">There are many message-digest functions available today. All
of them work in roughly the same way, but they differ in speed and
specific features. Details of these functions may be found in the
references in <a class="xref" href="appd_01.htm" title="Paper Sources">Appendix D</A
>.</P
><div class="sect3"><h4 class="sect3"><a class="title" name="PUIS-CHP-6-SECT-5.4.1">6.5.4.1 MD2, MD4, and MD5</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-7978"></A
><a class="indexterm" name="AUTOID-7980"></A
><a class="indexterm" name="AUTOID-7982"></A
>One
of the most widely used message digest functions is the MD5 function,
which was developed by Ronald Rivest, is distributed by <span class="acronym">RSA</SPAN
>
Data Security, and may be used freely without license costs. It
is based on the MD4 algorithm, which in turn was based on the MD2
algorithm.</P
><p class="para">The MD2, MD4, and MD5 message digest functions all produce
a 128-bit number from a block of text of any length. Each of them
pads the text to a fixed-block size, and then each performs a series
of mathematical operations on successive blocks of the input.</P
><p class="para">MD2 was designed by Ronald Rivest and published in <span class="acronym">RFC</SPAN
>
1319. There are no known weaknesses in it, but it is very slow.
To create a faster message-digest, Rivest developed MD4, which was
published in Internet <span class="acronym">RFCS</SPAN
> 1186 and 1320. The
MD4 algorithm was designed to be fast, compact, and optimized for
machines with &quot;little-endian&quot; architectures.</P
><p class="para">Some potential attacks against MD4 were published in the cryptographic
literature, so Dr. Rivest developed the MD5 algorithm, published
in <span class="acronym">RFC</SPAN
> 1321.[21] It was largely a redesign
of MD4, and includes one more round of internal operations and several
significant algorithmic changes. Because of the changes, MD5 is
somewhat slower than MD4. However, it is more widely accepted and
used than the MD4 algorithm.</P
><blockquote class="footnote"><p class="para">[21] Internet RFCs are
a form of open standards documents. They can be downloaded or mailed,
and they describe a common set of protocols and data structures
for interpretability.</P
></BLOCKQUOTE
><p class="para">As of early 1996, significant flaws have been discovered in
MD4. As a result, the algorithm should not be used.<a class="indexterm" name="AUTOID-7994"></A
></P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PUIS-CHP-6-SECT-5.4.2">6.5.4.2 SHA</A
></H4
><p class="para">The <a class="indexterm" name="AUTOID-7999"></A
><a class="indexterm" name="AUTOID-8001"></A
>
Secure Hash Algorithm was developed by <span class="acronym">NIST</SPAN
>
with some assistance by the <span class="acronym">NSA</SPAN
>. The algorithm
appears to be closely related to the MD4 algorithm, except that
it produces an output of 160 bits instead of 128. Analysis of the
algorithm reveals that some of the differences from the MD4 algorithm
are similar in purpose to the improvements added to the MD5 algorithm
(although different in nature).</P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PUIS-CHP-6-SECT-5.4.3">6.5.4.3 HAVAL</A
></H4
><p class="para">The <a class="indexterm" name="AUTOID-8008"></A
>
<span class="acronym">HAVAL</SPAN
>
algorithm is a modification of the MD5 algorithm, developed by Yuliang
Zheng, Josef <a class="indexterm" name="AUTOID-8011"></A
><a class="indexterm" name="AUTOID-8013"></A
><a class="indexterm" name="AUTOID-8015"></A
>
Pieprzyk,
and Jennifer Seberry. It can be modified to produce output hash
values of various lengths, from 92 bits to 256. It also has an adjustable
number of &quot;rounds&quot; (application of the internal
algorithm). The result is that <span class="acronym">HAVAL</SPAN
> can be made
to run faster than MD5, although there may be some corresponding
decrease in the strength of the output. Alternatively, <span class="acronym">HAVAL</SPAN
>
can be tuned to produce larger and potentially more secure hash
codes.[22]</P
><blockquote class="footnote"><p class="para">[22] You should note that merely having <em class="emphasis">longer</EM
>
hash values does not necessarily make a message digest algorithm
more secure.</P
></BLOCKQUOTE
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PUIS-CHP-6-SECT-5.4.4">6.5.4.4 SNEFRU</A
></H4
><p class="para"><span class="acronym">SNEFRU</SPAN
><a class="indexterm" name="AUTOID-8026"></A
>
was designed by Ralph Merkle to produce either 128-bit or 256-bit
hash codes. The algorithm can also be run with a variable number
of &quot;rounds&quot; of the internal algorithm. However,
analysis by several cryptographers has shown that <span class="acronym">SNEFRU</SPAN
>
has weaknesses that can be exploited, and that you can find arbitrary
messages that hash to a given 128-bit value if the 4-round version
is used. Dr. Merkle currently recommends that only 8-round <span class="acronym">SNEFRU</SPAN
>
be used, but this algorithm is significantly slower than the MD5
or <span class="acronym">HAVAL</SPAN
> algorithms.</P
></DIV
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PUIS-CHP-6-SECT-5.5">6.5.5 Other Codes</A
></H3
><p class="para">For the sake of completeness, we will describe two other types
of &quot;signature&quot; functions.</P
><div class="sect3"><h4 class="sect3"><a class="title" name="PUIS-CHP-6-SECT-5.5.1">6.5.5.1 Checksums</A
></H4
><p class="para">A <i class="firstterm"><a class="indexterm" name="AUTOID-8038"></A
><a class="indexterm" name="AUTOID-8040"></A
><a class="indexterm" name="AUTOID-8043"></A
>checksum</I
>
is a function that is calculated over an input to determine if that
input has been corrupted. Most often, checksums are used to verify
that data communications over a modem or network link have not undergone
&quot;bit-rot,&quot; or random changes from noise. They
may also be built into storage controllers to perform checks on
data moved to and from media: if a checksum doesn't agree
with the data, then there may be a problem on the disk or tape.</P
><p class="para">Checksums are usually calculated as simple linear or polynomial
functions over their input, and result in small values (16 or 32
bits). <span class="acronym">CRC</SPAN
> polynomials, or cyclic-redundancy
checksums, are a particular form of checksum that are commonly used.
The <kbd class="command"><a class="indexterm" name="AUTOID-8049"></A
>sum</KBD
> command
in <span class="acronym">UNIX</SPAN
> will generate a <span class="acronym">CRC</SPAN
>
checksum, although there appear to be at least three major versions
of <kbd class="command">sum</KBD
> available on modern <span class="acronym">UNIX</SPAN
>
systems, and they do not generate the same values!</P
><p class="para">Checksums are easy to calculate, and are simple to fool. You
can alter a file in such a way that it has the same simple checksum
as before the alteration. In fact, many &quot;hacker toolkits&quot;
circulating in the hacker underground have tools to recreate <kbd class="command">sum</KBD
>
output for system commands after they have been modified! Thus,
checksums should <em class="emphasis">never</EM
> be used as a verification
against malicious tampering.</P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PUIS-CHP-6-SECT-5.5.2">6.5.5.2 Message authentication codes</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-8061"></A
><a class="indexterm" name="AUTOID-8063"></A
><a class="indexterm" name="AUTOID-8065"></A
>Message
Authentication Codes, or <span class="acronym">MACS</SPAN
>
[23]
 are basically message digests with a password thrown
in. The intent is that the <span class="acronym">MAC</SPAN
> cannot be recreated
by someone with the same input unless that person also knows the
secret key (password). These may or may not be safer than a simple
message digest&nbsp;- depending on the algorithm used, the strength
of the key, and the length of the output <span class="acronym">MAC</SPAN
>.</P
><blockquote class="footnote"><p class="para">[23] Not to be confused with the Mandatory Access Control,
whose acronym is also MAC.</P
></BLOCKQUOTE
><p class="para">One simple form of <span class="acronym">MAC</SPAN
> appends the message
to the key and then generates a message digest. Because the key
is part of the input, it alters the message digest in a way that
can be recreated. Because two keys will generate very different
output for the same data input, we achieve our goal of a password-dependent
<span class="acronym">MAC</SPAN
>.</P
><p class="para">A second form of <span class="acronym">MAC</SPAN
> uses some form of
stream encryption method, such as RC4 or <span class="acronym">DES</SPAN
>
in <span class="acronym">CFB</SPAN
> mode. The key in this case is the encryption
password, and the <span class="acronym">MAC</SPAN
> is the last block of bits
from the encryption algorithm. As the encryption output depends
on all the bits of input and the secret password, the last block
of the output will be different for a different input or a different
password. However, if the encryption block size is small (e.g.,
64 bits), the <span class="acronym">MAC</SPAN
> may be more susceptible to
brute-force guessing attacks than a larger message digest value
would be.</P
><p class="para">A public key digital signature may be thought of as a <span class="acronym">MAC</SPAN
>,
too, as it depends on the message digest output and the secret key.
A change in either will result in a change in the overall value
of the function.<a class="indexterm" name="AUTOID-8084"></A
></P
></DIV
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch06_04.htm#PUIS-CHP-6-SECT-4.4.2" title="6.4 Common Cryptographic Algorithms"><img src="../gifs/txtpreva.gif" alt="Previous: 6.4 Common Cryptographic Algorithms" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Practical UNIX &amp; Internet Security"><img src="../gifs/txthome.gif" alt="Practical UNIX &amp; Internet Security" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch06_06.htm#PUIS-CHP-6-SECT-6.2" title="6.6 Encryption Programs Available for UNIX"><img src="../gifs/txtnexta.gif" alt="Next: 6.6 Encryption Programs Available for UNIX" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">6.4 Common Cryptographic Algorithms</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">6.6 Encryption Programs Available for UNIX</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.htm" title="The Networking CD Bookshelf">Library Home</A
> | <a href="../dnsbind/index.htm" title="DNS &amp; BIND">DNS &amp; BIND</A
> | <a href="../tcpip/index.htm" title="TCP/IP Network Administration">TCP/IP</A
> | <a href="../sendmail/index.htm" title="sendmail">sendmail</A
> | <a href="../smdref/index.htm" title="sendmail Desktop Reference">sendmail Reference</A
> | <a href="../firewall/index.htm" title="Building Internet Firewalls">Firewalls</A
> | <a href="index.htm" title="Practical UNIX &amp; Internet Security">Practical Security</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
