<html><head>
<title>[Chapter 23] 23.4 Tips on Writing SUID/SGID Programs</TITLE>
<meta name="DC.title" content="Practical UNIX &amp; Internet Security"><meta name="DC.creator" content="Simson Garfinkel &amp; Gene Spafford"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-02-04T00:17:48Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-148-8" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch23_01.htm" title="23. Writing Secure SUID and Network Programs"><link rel="prev" href="ch23_03.htm" title="23.3 Tips on Writing Network Programs"><link rel="next" href="ch23_05.htm" title="23.5 Tips on Using Passwords"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Practical UNIX &amp; Internet Security" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Practical UNIX &amp; Internet Security"><area shape="RECT" coords="467,0,514,18" href="../search/psrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch23_03.htm" title="23.3 Tips on Writing Network Programs"><img src="../gifs/txtpreva.gif" alt="Previous: 23.3 Tips on Writing Network Programs" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 23<br>Writing Secure SUID and Network Programs</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch23_05.htm" title="23.5 Tips on Using Passwords"><img src="../gifs/txtnexta.gif" alt="Next: 23.5 Tips on Using Passwords" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="PUIS-CHP-23-SECT-4">23.4 Tips on Writing SUID/SGID Programs</A
></H2
><p class="para"><a class="indexterm" name="IDX-SUID-SGID-PROGRAMS-WRITING"></A
>If you are writing programs that are
<span class="acronym">SUID</SPAN
> or <span class="acronym">SGID</SPAN
>, you must take
added precautions in your programming. <em class="emphasis">An</EM
> <em class="emphasis">overwhelming
number of </EM
><span class="acronym">UNIX</SPAN
><em class="emphasis"> security
problems have been caused by SUID/SGID programs. </EM
>These
rules should be considered in addition to the previous list<em class="emphasis">.</EM
></P
><p class="para">Here are some rules for writing (and not writing) <span class="acronym">SUID/SGID</SPAN
>
programs:</P
><ol class="orderedlist"><li class="listitem"><p class="para">&quot;Don't do it. Most
of the time, it's not necessary.&quot;[11]</P
><blockquote class="footnote"><p class="para">[11] Thanks to Patrick H. Wood and Stephen G. Kochan, <em class="emphasis">UNIX
System Security, </EM
>Hayden Books, 1985, for this insightful
remark.</P
></BLOCKQUOTE
></LI
><li class="listitem"><p class="para">Avoid writing <span class="acronym">SUID</SPAN
> shell scripts.</P
></LI
><li class="listitem"><p class="para">If you are using <span class="acronym">SUID</SPAN
> to access
a special set of files, don't. </P
><p class="para">Instead, create
a special group for your files and make the program <span class="acronym">SGID</SPAN
>
to <em class="emphasis">that group</EM
>. If you must use <span class="acronym">SUID</SPAN
>,
create a special user for the purpose.</P
></LI
><li class="listitem"><p class="para">If your program needs to perform some functions
as superuser, but generally does not require <span class="acronym">SUID</SPAN
>
permissions, consider putting the <span class="acronym">SUID</SPAN
> part in
a different program, and constructing a carefully controlled and
monitored interface between the two.</P
></LI
><li class="listitem"><p class="para">If you need <span class="acronym">SUID</SPAN
> or <span class="acronym">SGID</SPAN
>
permissions, use them for their intended purpose as early in the
program as possible, and then revoke them by returning the effective,
and real, <span class="acronym">UIDS</SPAN
> and <span class="acronym">GIDS</SPAN
> to
those of the process that invoked the program.</P
></LI
><li class="listitem"><p class="para">If you have a program that absolutely must run as
<span class="acronym">SUID</SPAN
>, try to avoid equipping the program with
a general-purpose interface that allows users to specify much in
the way of commands or options. </P
></LI
><li class="listitem"><p class="para">Erase the execution environment, if at all possible,
and start fresh. </P
><p class="para">Many security problems have been caused because there was a
significant difference between the environment in which the program
was run by an attacker and the environment under which the program was
developed. (See item 5 under <a class="xref" href="ch23_02.htm" title="Tips on Avoiding Security-related Bugs">Section 23.2, "Tips on Avoiding Security-related Bugs</A
>&quot;
earlier in this chapter for more information about this
suggestion.)</P
></LI
><li class="listitem"><p class="para">If your program must spawn processes, use only the
<em class="emphasis"><a class="indexterm" name="AUTOID-32731"></A
><a class="indexterm" name="AUTOID-32733"></A
><a class="indexterm" name="AUTOID-32735"></A
><a class="indexterm" name="AUTOID-32737"></A
><a class="indexterm" name="AUTOID-32739"></A
>execve(

)</EM
>, <em class="emphasis">execv( )</EM
>, or <em class="emphasis">execl(
)</EM
> calls, and use them with great care. </P
><p class="para">Avoid
the <em class="emphasis">execlp( )</EM
> and <em class="emphasis">execvp(  )</EM
>
calls because they use the <span class="acronym">PATH</SPAN
> environment variable
to find an executable, and you might not run what you think you
are running.</P
></LI
><li class="listitem"><p class="para">If you must provide a shell escape, be sure to <a class="indexterm" name="AUTOID-32749"></A
><a class="indexterm" name="AUTOID-32751"></A
>
<kbd class="command">setgid(getgid( ))</KBD
> and
<i class="filename">setuid(getuid( ))</I
> before executing the user's
command.</P
></LI
><li class="listitem"><p class="para">In general, use the <kbd class="command">setuid()</KBD
> and <kbd class="command">setgid()</KBD
>
functions to bracket the sections of your code which require superuser
privileges. For example:</P
><blockquote class="screen"><pre class="screen">setuid(0);				/* Become superuser to open the master file */
fd = open(&quot;/etc/masterfile&quot;,O_RDONLY);
setuid(-1);				/* Give up superuser for now */
if(fd&lt;0) error_open();	/* Handle errors */</PRE
></BLOCKQUOTE
></LI
></OL
><p class="para">Not all versions of <span class="acronym">UNIX</SPAN
> allow you to switch
<span class="acronym">UIDS</SPAN
> like this; however, most modern versions
do.</P
><ol class="orderedlist"><li class="listitem"><p class="para">If you must use pipes or subshells,
be especially careful with the environment variables <a class="indexterm" name="AUTOID-32766"></A
><a class="indexterm" name="AUTOID-32768"></A
>
<span class="acronym">PATH</SPAN
> and <span class="acronym">IFS</SPAN
>.</P
><p class="para">If at all possible, erase these variables and set them
to safe values. For example:</P
><blockquote class="screen"><pre class="screen">putenv(&quot;PATH=/bin:/usr/bin:/usr/ucb&quot;);
putenv(&quot;IFS= \t\n&quot;);</PRE
></BLOCKQUOTE
><p class="para">Then, examine the
environment to be certain that there is only <em class="emphasis">one</EM
> instance of the
variable: the one you set. An attacker can run your code from another
program that creates multiple instances of an environment variable.
Without an explicit check, you may find the first instance, but
not the others; such a situation could result in problems later
on. In particular, step through the elements of the environment
yourself rather than depending on the library <kbd class="command">getenv()</KBD
>
function.</P
></LI
><li class="listitem"><p class="para">Use the full pathname for all files that you open.</P
><p class="para">Do not make any assumptions about the current directory.
(You can enforce this requirement by doing a <em class="emphasis">chdir(/tmp/root/)</EM
>as one of the first steps in your program, but be sure
to check the return code!)</P
></LI
><li class="listitem"><p class="para">Consider <a class="indexterm" name="AUTOID-32783"></A
><a class="indexterm" name="AUTOID-32785"></A
>
statically
linking your program, if possible. </P
><p class="para">If a user can substitute
a different module in a dynamic library, even carefully coded programs
are vulnerable. (We have some serious misgivings about the trend
in commercial systems towards completely shared, dynamic libraries.
See our comments in the section <a class="xref" href="ch11_01.htm" title="Protecting Against Programmed Threats">Chapter 11, <cite class="chapter">Protecting Against Programmed Threats</CITE
></A
>.)</P
></LI
><li class="listitem"><p class="para">Consider using <em class="emphasis"><a class="indexterm" name="AUTOID-32793"></A
><a class="indexterm" name="AUTOID-32796"></A
><a class="indexterm" name="AUTOID-32798"></A
>perl -T </EM
>or <kbd class="command">taintperl</KBD
>
for your <span class="acronym">SUID</SPAN
> programs and scripts. </P
><p class="para">Perl's
tainting features make it more suited to <span class="acronym">SUID</SPAN
>
programming than C. For example, <kbd class="command">taintperl</KBD
> will
insist that you set the <span class="acronym">PATH</SPAN
> environment variable
to a known &quot;safe value&quot; before calling <em class="emphasis">system().</EM
>
The program will also require that you &quot;untaint&quot;
any variable that is input from the user before using it (or any
variable dependent on that variable) as an argument for opening
a file.</P
><p class="para">However, note that you can still get yourself
in a great deal of trouble with <kbd class="command">taintperl</KBD
> if
you circumvent its checks or you are careless in writing code. Also
note that using <kbd class="command">taintperl</KBD
> introduces dependence
on another large body of code working correctly: we'd suggest
you skip using <kbd class="command">taintperl</KBD
> if you believe you can
code at least as well as Larry Wall.[12]</P
><blockquote class="footnote"><p class="para">[12] Hint: if you
think you can, you are probably wrong.</P
></BLOCKQUOTE
></LI
></OL
><div class="sect2"><h3 class="sect2"><a class="title" name="PUIS-CHP-23-SECT-4.1">23.4.1 Using chroot()</A
></H3
><p class="para">If you are writing a <span class="acronym">SUID</SPAN
> <i class="filename">root</I
> program,
you can enhance its security by using the <a class="indexterm" name="AUTOID-32818"></A
>
<kbd class="command">chroot()</KBD
> system call. The <kbd class="command">chroot()</KBD
>
call changes the root directory of a process to a specified subdirectory
within your filesystem. This change essentially gives the calling
process a private world from which it cannot escape.</P
><p class="para">For
example, if you have a program which only needs to listen to the
network and write into a log file that is stored in the directory
<i class="filename">/usr/local/logs</I
>, then you could execute
the following system call to restrict the program to that directory:</P
><blockquote class="screen"><pre class="screen">chroot(&quot;/usr/local/logs&quot;);</PRE
></BLOCKQUOTE
><p class="para">There are several issues that you must be aware of when using
the <kbd class="command">chroot()</KBD
> system call that are not immediately obvious:</P
><ol class="orderedlist"><li class="listitem"><p class="para">If your operating system supports shared
libraries and you are able to statically link your program, you
should be sure that your program is statically linked. On some systems,
static linking is not possible. On these systems, you should make
certain that the necessary shared libraries are available within
the restricted directory (as copies).</P
></LI
><li class="listitem"><p class="para">You should not give users write access to the <kbd class="command">chroot()</KBD
>'ed
directory.</P
></LI
><li class="listitem"><p class="para">If you intend to log with <kbd class="command">syslog()</KBD
>, you
should call the <kbd class="command">openlog()</KBD
> function before executing the
<kbd class="command">chroot()</KBD
> system call, or make sure that a <i class="filename">/dev/log</I
>
device file exists within the <kbd class="command">chroot()</KBD
> directory.</P
></LI
></OL
><p class="para">Note that under some versions of <span class="acronym">UNIX</SPAN
>,
a user with a root shell and the ability to copy compiled code into
the <i class="filename">chroot'</I
>d environment may be able to &quot;break
out.&quot; Thus, don't put all your faith in this mechanism.<a class="indexterm" name="AUTOID-32843"></A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch23_03.htm" title="23.3 Tips on Writing Network Programs"><img src="../gifs/txtpreva.gif" alt="Previous: 23.3 Tips on Writing Network Programs" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Practical UNIX &amp; Internet Security"><img src="../gifs/txthome.gif" alt="Practical UNIX &amp; Internet Security" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch23_05.htm" title="23.5 Tips on Using Passwords"><img src="../gifs/txtnexta.gif" alt="Next: 23.5 Tips on Using Passwords" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">23.3 Tips on Writing Network Programs</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">23.5 Tips on Using Passwords</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.htm" title="The Networking CD Bookshelf">Library Home</A
> | <a href="../dnsbind/index.htm" title="DNS &amp; BIND">DNS &amp; BIND</A
> | <a href="../tcpip/index.htm" title="TCP/IP Network Administration">TCP/IP</A
> | <a href="../sendmail/index.htm" title="sendmail">sendmail</A
> | <a href="../smdref/index.htm" title="sendmail Desktop Reference">sendmail Reference</A
> | <a href="../firewall/index.htm" title="Building Internet Firewalls">Firewalls</A
> | <a href="index.htm" title="Practical UNIX &amp; Internet Security">Practical Security</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
