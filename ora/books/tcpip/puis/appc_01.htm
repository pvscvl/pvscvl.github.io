<html><head>
<title>[Appendix C] UNIX Processes</TITLE>
<meta name="DC.title" content="Practical UNIX &amp; Internet Security"><meta name="DC.creator" content="Simson Garfinkel &amp; Gene Spafford"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-02-04T00:22:03Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-148-8" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="part07.htm" title="VII. Appendixes"><link rel="prev" href="appb_03.htm" title="B.3 SUID and SGID Files"><link rel="next" href="appc_02.htm" title="C.2 Creating Processes"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Practical UNIX &amp; Internet Security" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Practical UNIX &amp; Internet Security"><area shape="RECT" coords="467,0,514,18" href="../search/psrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="appb_03.htm" title="B.3 SUID and SGID Files"><img src="../gifs/txtpreva.gif" alt="Previous: B.3 SUID and SGID Files" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Appendix C</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="appc_02.htm" title="C.2 Creating Processes"><img src="../gifs/txtnexta.gif" alt="Next: C.2 Creating Processes" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="APPENDIX"><h1 class="appendix"><a class="title" name="PUIS-APP-C">C. UNIX Processes</A
></H1
><div class="htmltoc"><p><b>Contents:</B
><br><a class="SECT1" href="#PUIS-APP-C-SECT-1" title="C.1 About Processes">About Processes</A
><br><a class="SECT1" href="appc_02.htm" title="C.2 Creating Processes">Creating Processes</A
><br><a class="SECT1" href="appc_03.htm" title="C.3 Signals">Signals</A
><br><a class="SECT1" href="appc_04.htm" title="C.4 The kill Command">The kill Command</A
><br><a class="SECT1" href="appc_05.htm#PUIS-APP-C-SECT-5.2" title="C.5 Starting Up UNIX and Logging In">Starting Up UNIX and Logging In</A
></P
><p></P
></DIV
><p class="para">This appendix provides technical background on how the <span class="acronym">UNIX</SPAN
>operating system manages processes. The information presented
in this chapter is important to understand if you are concerned
with the details of system administration or are simply interested
in <span class="acronym">UNIX</SPAN
> internals, but we felt that it was too
technical to present early in this book.</P
><div class="sect1"><h2 class="sect1"><a class="title" name="PUIS-APP-C-SECT-1">C.1 About Processes</A
></H2
><p class="para"><span class="acronym">UNIX</SPAN
><a class="indexterm" name="AUTOID-38874"></A
>
is a multitasking operating system. Every task that the computer
is performing at any moment&nbsp;- every user running a word processor
program, for example&nbsp;- has a <em class="emphasis">process</EM
>.
The process is the operating system's fundamental tool
for controlling the computer.</P
><p class="para">Nearly everything that <span class="acronym">UNIX</SPAN
> does is done
with a process. One process displays the word <em class="emphasis">login:</EM
> on the user's
terminal and reads the characters that the user types to log into
the system. Another process controls the line printer. On a workstation,
a special process called the &quot;window server&quot; displays
text in windows on the screen. Another process called the &quot;window
manager&quot; lets the user move those windows around.</P
><p class="para">At any given moment, the average <span class="acronym">UNIX</SPAN
> operating
system might be running anywhere from ten to several hundred different
processes; large mainframes might be running several thousand. <span class="acronym">UNIX</SPAN
>
runs at least one process for every user who is logged in, another
process for every program that every user is running, and another
process for every hard-wired terminal that is waiting for a new
user to log in. <span class="acronym">UNIX</SPAN
> also uses a variety of special
processes for system functions.</P
><div class="sect2"><h3 class="sect2"><a class="title" name="PUIS-APP-C-SECT-1.1">C.1.1 Processes and Programs</A
></H3
><p class="para">A process is an abstraction of control that has certain special
properties associated with it. These include a private stack, values
of registers, a program counter, an address space containing program
code and data, and so on. The underlying hardware and operating
system software manage the contents of registers in such a way that
each process views the computer's resources as its &quot;own&quot;
while it is running. With a single processor, only one process at
a time is actually running, with the operating system swapping processes
from time to time to give the illusion that they are all running
concurrently. Multi-processor computers can naturally run several
processes with true synchronicity.</P
><p class="para">Every <span class="acronym">UNIX</SPAN
> process has a program that it
is running, even if that program is part of the <span class="acronym">UNIX</SPAN
>
operating system (a special program). Programs are usually referred
to by the names of the files in which they are kept. For example,
the program that lists files is called <i class="filename">/bin/ls</I
>
and the program that runs the line printer may be called <i class="filename">/usr/lib/lpd.</I
></P
><p class="para">A process can run a program that is not stored in a file in
either of two ways:</P
><ul class="itemizedlist"><li class="listitem"><p class="para">The program's file can be
deleted after its process starts up. In this case, the process's
program is really stored in a file, but the file no longer has a
name and cannot be accessed by any other processes. The file is
deleted automatically when the process exits or runs another program.</P
></LI
><li class="listitem"><p class="para">The process may have been specially created in the
computer's memory. This is the method that the <span class="acronym">UNIX</SPAN
>
kernel uses to begin the first process when the operating system
starts up. This usually happens only at start-up, but some programming
languages such as <span class="acronym">LISP</SPAN
> can load additional object
modules as they are running.</P
></LI
></UL
><p class="para">Normally, processes run a single program and then exit. However,
a program can cause another program to be run. In this case, the
same process starts running another program.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PUIS-APP-C-SECT-1.2">C.1.2 The ps Command</A
></H3
><p class="para">The <a class="indexterm" name="AUTOID-38904"></A
>
<kbd class="command">ps</KBD
> command
gives you a snapshot of all of the processes running at any given
moment. <kbd class="command">ps</KBD
> tells you who is running programs on your system, as
well as which programs the operating system is spending its time
executing.</P
><p class="para">Most system administrators routinely use the <kbd class="command">ps</KBD
> command to
see why their computers are running so slowly; system administrators
should also regularly use the command to look for suspicious processes.
(Suspicious processes are any processes that you don't
expect to be running. Methods of identifying suspicious processes
are described in detail in earlier chapters.)</P
><div class="sect3"><h4 class="sect3"><a class="title" name="PUIS-APP-C-SECT-1.2.1">C.1.2.1 Listing processes with systems derived from System
V</A
></H4
><p class="para">The <a class="indexterm" name="AUTOID-38913"></A
>
System
V <kbd class="command">ps</KBD
> command will normally only print the processes that are associated
with the terminal on which the program is being run. To list all
of the processes that are running on your computer, you must run
the program with the <i class="filename">-ef</I
> options. The options are:</P
><table class="informaltable"><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1"><p class="para">Option</P
></TH
><th class="entry" align="LEFT" rowspan="1" colspan="1"><p class="para">Effect</P
></TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">e</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">List all processes</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">f</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Produce a full listing</P
></TD
></TR
></TBODY
></TABLE
><p class="para">For example:</P
><blockquote class="screen"><pre class="screen">sun.vineyard.net% /bin/ps -ef
     UID   PID  PPID  C    STIME TTY      TIME COMD
    root     0     0 64   Nov 16 ?        0:01 sched
    root     1     0 80   Nov 16 ?        9:56 /etc/init -
    root     2     0 80   Nov 16 ?        0:10 pageout
    root     3     0 80   Nov 16 ?       78:20 fsflush
    root   227     1 24   Nov 16 ?        0:00 /usr/lib/saf/sac -t 300
    root   269     1 18   Nov 16 console  0:00 /usr/lib/saf/ttymon -g -    root    97     1 80   Nov 16 ?        1:02 /usr/sbin/rpcbind
    root   208     1 80   Nov 16 ?        0:01 /usr/dt/bin/dtlogin
    root    99     1 21   Nov 16 ?        0:00 /usr/sbin/keyserv
    root   117     1 12   Nov 16 ?        0:00 /usr/lib/nfs/statd
    root   105     1 12   Nov 16 ?        0:00 /usr/sbin/kerbd
    root   119     1 27   Nov 16 ?        0:00 /usr/lib/nfs/lockd
    root   138     1 12   Nov 16 ?        0:00 /usr/lib/autofs/automoun    root   162     1 62   Nov 16 ?        0:01 /usr/lib/lpsched
    root   142     1 41   Nov 16 ?        0:00 /usr/sbin/syslogd
    root   152     1 80   Nov 16 ?        0:07 /usr/sbin/cron
    root   169   162  8   Nov 16 ?        0:00 lpNet
    root   172     1 80   Nov 16 ?        0:02 /usr/lib/sendmail -q1h
    root   199     1 80   Nov 16 ?        0:02 /usr/sbin/vold
    root   180     1 80   Nov 16 ?        0:04 /usr/lib/utmpd
    root   234   227 31   Nov 16 ?        0:00 /usr/lib/saf/listen tcp
 simsong 14670 14563 13 12:22:12 pts/11   0:00 rlogin next
    root   235   227 45   Nov 16 ?        0:00 /usr/lib/saf/ttymon
 simsong 14673 14535 34 12:23:06 pts/5    0:00 rlogin next
 simsong 14509     1 80 11:32:43 ?        0:05 /usr/dt/bin/dsdm
 simsong 14528 14520 80 11:32:51 ?        0:18 dtwm
 simsong 14535 14533 66 11:33:04 pts/5    0:01 /usr/local/bin/tcsh
 simsong 14529 14520 80 11:32:56 ?        0:03 dtfile -session dta003TF
    root 14467     1 11 11:32:23 ?        0:00 /usr/openwin/bin/fbconso simsong 14635 14533 80 11:48:18 pts/12   0:01 /usr/local/bin/tcsh
 simsong 14728 14727 65 15:29:20 pts/9    0:01 rlogin next
    root   332   114 80   Nov 16 ?        0:02 /usr/dt/bin/rpc.ttdbserv    root 14086   208 80   Dec 01 ?        8:26 /usr/openwin/bin/Xsun :0 simsong 13121 13098 80   Nov 29 pts/6    0:01 /usr/local/bin/tcsh
 simsong 15074 14635 20 10:48:34 pts/12   0:00 /bin/ps -ef</PRE
></BLOCKQUOTE
><p class="para"><a class="xref" href="#PUIS-APP-C-TAB-1" title="Feild in ps Output (System V)">Table 27.2</A
> describes the meaning of each field in this output.</P
><p class="para"><em class="emphasis">Field in ps Output (System V)</EM
></P
><table class="table"><caption class="table"><a class="title" name="PUIS-APP-C-TAB-1">Table C.1: Feild in ps Output (System V)</A
></CAPTION
><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1"><p class="para">Field</P
></TH
><th class="entry" align="LEFT" rowspan="1" colspan="1"><p class="para">Meaning</P
></TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">UID</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">The username of the person running the
command</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">PID</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">The process's identification
number (see next section)</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">PPID</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">The process ID of the process's
parent process</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">C</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">The processor utilization; an indication
of how much CPU time the process is using at the moment</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">STIME</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">The time that the process started executing</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">TTY</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">The controlling terminal for the process</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">TIME</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">The total amount of CPU time that the
process has used</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">COMD</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">The command that was used to start the
process</P
></TD
></TR
></TBODY
></TABLE
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PUIS-APP-C-SECT-1.2.2">C.1.2.2 Listing processes with Berkeley-derived versions of
UNIX</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-38998"></A
>With Berkeley
<span class="acronym">UNIX</SPAN
>, you can use the command:</P
><blockquote class="screen"><pre class="screen">% <b class="emphasis.bold">ps -auxww</B
>  </PRE
></BLOCKQUOTE
><p class="para">to display detailed information about every process running
on your computer. The options specified in this command are:</P
><table class="informaltable"><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1"><p class="para">Option</P
></TH
><th class="entry" align="LEFT" rowspan="1" colspan="1"><p class="para">Effect</P
></TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">a</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">List all processes</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">u</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Display the information in a user-oriented
style</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">x</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Include information on processes that
do not have controlling <kbd class="command">ttys</KBD
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">ww</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Include the complete command lines, even
if they run past 132 columns</P
></TD
></TR
></TBODY
></TABLE
><p class="para">For example:[1]</P
><blockquote class="footnote"><p class="para">[1] Many Berkeley-derived versions
also show a start time (START) between STAT and TIME.</P
></BLOCKQUOTE
><blockquote class="screen"><pre class="screen">% <b class="emphasis.bold">ps -auxww</B
>
USER       PID %CPU %MEM   SZ  RSS TT STAT   TIME COMMAND
simsong   1996 62.6  0.6 1136 1000 q8 R      0:02 ps auxww
root       111  0.0  0.0   32   16 ?  I      1:10 /etc/biod 4
daemon     115  0.0  0.1  164  148 ?  S      2:06 /etc/syslog
root       103  0.0  0.1  140  116 ?  I      0:44 /etc/portmap
root       116  0.0  0.5  860  832 ?  I     12:24 /etc/mountd -i -s
root       191  0.0  0.2  384  352 ?  I      0:30 /usr/etc/bin/lpd
root        73  0.0  0.3  528  484 ?  S &lt;    7:31 /usr/etc/ntpd -n
root         4  0.0  0.0    0    0 ?  I      0:00 tpathd
root         3  0.0  0.0    0    0 ?  R      0:00  idleproc
root         2  0.0  0.0 4096    0 ?  D      0:00  pagedaemon
root       239  0.0  0.1  180  156 co I      0:00  std.9600 console 
root         0  0.0  0.0    0    0 ?  D      0:08  swapper
root       178  0.0  0.3  700  616 ?  I      6:31 /etc/snmpd
root       174  0.0  0.1  184  148 ?  S      5:06 /etc/inetd
root       168  0.0  0.0   56   44 ?  I      0:16 /etc/cron
root       132  0.0  0.2  452  352 co I      0:11 /usr/etc/lockd
jdavis     383  0.0  0.1  176   96 p0 I      0:03 rlogin hymie
ishii     1985  0.0  0.1  284  152 q1 S      0:00 /usr/ucb/mail bl
root     26795  0.0  0.1  128   92 ?  S      0:00 timed
root     25728  0.0  0.0  136   56 t3 I      0:00 telnetd
jdavis     359  0.0  0.1  540  212 p0 I      0:00 -tcsh (tcsh)
root       205  0.0  0.1  216  168 ?  I      0:04 /usr/local/cap/atis
kkarahal 16296  0.0  0.4 1144  640 ?  I      0:00 emacs 
root       358  0.0  0.0  120   44 p0 I      0:03 rlogind
root     26568  0.0  0.0    0    0 ?  Z      0:00 &lt;exiting&gt;
root     10862  0.0  0.1  376  112 ?  I      0:00 rshd</PRE
></BLOCKQUOTE
><p class="para">The fields in this output are described in <a class="xref" href="#PUIS-APP-C-TAB-2" title="Fields in ps Output (Berkeley-derived)">Table 27.3</A
>.
Individual <span class="acronym">STAT</SPAN
> characters are described in Tables
C-3, C-4, and C-5.</P
><table class="table"><caption class="table"><a class="title" name="PUIS-APP-C-TAB-2">Table C.2: Fields in ps Output (Berkeley-derived)</A
></CAPTION
><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1"><p class="para">Field</P
></TH
><th class="entry" align="LEFT" rowspan="1" colspan="1"><p class="para">Meaning</P
></TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">USER</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">The username of the process. If the process
has a UID (described in the next section) that does not appear in
<i class="filename">/etc/passwd</I
>, the UID is printed instead.[2]</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">PID</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">The process's identification
number</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">%CPU, %MEM</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">The percentage of the system's
CPU and memory that the process is using</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">SZ</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">The amount of virtual memory that the
process is using</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">RSS</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">The resident set size of the process&nbsp;- the
amount of physical memory that the process is occupying</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">TT</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">The terminal that is controlling the
process</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">STAT</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">A field denoting the status of the process;
up to three letters (four under SunOS) are shown</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">TIME</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">CPU time used by the process</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">COMMAND</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">The name of the command (and arguments)</P
></TD
></TR
></TBODY
></TABLE
><blockquote class="footnote"><p class="para">[2] If this happens, follow up to be sure you don't have
an intruder.</P
></BLOCKQUOTE
><table class="table"><caption class="table"><a class="title" name="PUIS-APP-C-TAB-3">Table C.3: . Runnability of Process (First Letter of STAT Field)</A
></CAPTION
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">Letter</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Meaning</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">R</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Actually running or runnable</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">S</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Sleeping (sleeping &gt; 20 seconds)</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">I</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Idle (sleeping &lt; 20 seconds)</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">T</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Stopped</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">H</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Halted</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">P</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">In page wait</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">D</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">In disk wait</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">Z</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Zombie</P
></TD
></TR
></TBODY
></TABLE
><table class="table"><caption class="table"><a class="title" name="PUIS-APP-C-TAB-4">Table C.4: . Whether Process Swapped (Second Letter of STAT
Field)</A
></CAPTION
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">Letter</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Meaning</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">&lt;Blank&gt;</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">In core</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">W</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Swapped out</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">&gt;</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">A process that has exceeded a soft limit
on memory requirements</P
></TD
></TR
></TBODY
></TABLE
><table class="table"><caption class="table"><a class="title" name="PUIS-APP-C-TAB-5">Table C.5: . Whether Process Is running with Altered CPU Schedule
(Third Letter of STAT Field)</A
></CAPTION
><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1"><p class="para">Letter</P
></TH
><th class="entry" align="LEFT" rowspan="1" colspan="1"><p class="para">Meaning</P
></TH
></TR
><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1"><p class="para">N</P
></TH
><th class="entry" align="LEFT" rowspan="1" colspan="1"><p class="para">The process is running at a low priority</P
></TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">#</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><i class="filename">nice</I
> (a number greater than 0).</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">&lt;</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">The process is running at a high priority.</P
></TD
></TR
></TBODY
></TABLE
><p class="para"></P
><blockquote class="note"><p class="para"><strong>NOTE:</STRONG
> Because command arguments are stored in the process's
own memory space, a process can change what appears on its command
line. If you suspect that a process may not be what it claims to
be, type:</P
></BLOCKQUOTE
><blockquote class="screen"><pre class="screen">	<kbd class="command">%</KBD
> <b class="emphasis.bold">ps -c</B
></PRE
></BLOCKQUOTE
><p class="para">This causes <kbd class="command">ps</KBD
> to print the name of the command stored in
the kernel. This approach is substantially faster than the standard
<i class="filename">ps</I
>, and is more suitable for use with scripts
that run periodically. Unfortunately, the <kbd class="command">ps</KBD
> -c display does not
include the arguments of each command that is running.<a class="indexterm" name="AUTOID-39218"></A
></P
></DIV
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PUIS-APP-C-SECT-1.3">C.1.3 Process Properties</A
></H3
><p class="para">The kernel maintains a set of properties for every <span class="acronym">UNIX</SPAN
>
process. Most of these properties are denoted by numbers. Some of
these numbers refer to processes, while others determine what privileges
the processes have.</P
><div class="sect3"><h4 class="sect3"><a class="title" name="PUIS-APP-C-SECT-1.3.1">C.1.3.1 <a class="indexterm" name="AUTOID-39226"></A
>Process identification
numbers (PID)</A
></H4
><p class="para">Every process is assigned a unique number called the process
identifier, or <span class="acronym">PID</SPAN
>. The first process to run,
called <kbd class="command">init</KBD
>, is given the number 1. Process numbers can range from
1 to 65535.[3]
When the kernel runs out of process numbers, it recycles them. The
kernel guarantees that no two <em class="emphasis">active</EM
> processes
will ever have the same number.</P
><blockquote class="footnote"><p class="para">[3] Some versions of UNIX may allow process
numbers in a range different from 1 to 65535.</P
></BLOCKQUOTE
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PUIS-APP-C-SECT-1.3.2">C.1.3.2 Process real and effective UID</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-39237"></A
><a class="indexterm" name="AUTOID-39240"></A
><a class="indexterm" name="AUTOID-39242"></A
><a class="indexterm" name="AUTOID-39244"></A
>Every
<span class="acronym">UNIX</SPAN
> process has two user identifiers: a real
<span class="acronym">UID</SPAN
> and an effective <span class="acronym">UID</SPAN
>.</P
><p class="para">The <em class="emphasis">real UID</EM
> (<span class="acronym">RUID</SPAN
>) is the actual user
identifier (<span class="acronym">UID</SPAN
>) of the person who is running
the program. It is usually the same as the <span class="acronym">UID</SPAN
>
of the actual person who is logged into the computer, sitting in
front of the terminal (or workstation).</P
><p class="para">The <em class="emphasis">effective UID</EM
> (<span class="acronym">EUID</SPAN
>) identifies the
actual privileges of the process that is running.</P
><p class="para">Normally, the real <span class="acronym">UID</SPAN
> and the effective
<span class="acronym">UID</SPAN
> are the same. That is, normally you have
only the privileges associated with your own <span class="acronym">UID</SPAN
>.
Sometimes, however, the real and effective <span class="acronym">UID</SPAN
>
can be different. This occurs when a user runs a special kind of
program, called a <span class="acronym">SUID</SPAN
> program, which is used
to accomplish a specific function (such as changing the user's
password). <span class="acronym">SUID</SPAN
> programs are described in <a class="xref" href="ch04_01.htm" title="Users, Groups, and the Superuser">Chapter 4, <cite class="chapter">Users, Groups, and the Superuser</CITE
></A
>.</P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PUIS-APP-C-SECT-1.3.3">C.1.3.3 Process priority and niceness</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-39269"></A
><a class="indexterm" name="AUTOID-39272"></A
><a class="indexterm" name="AUTOID-39274"></A
>Although
<span class="acronym">UNIX</SPAN
> is a multitasking operating system, most
computers that run <span class="acronym">UNIX</SPAN
> can run only a single
process at a time.[4]
Every fraction of a second, the <span class="acronym">UNIX</SPAN
> operating
system rapidly switches between many different processes, so that
each one gets a little bit of work done within a given amount of
time. A tiny but important part of the <span class="acronym">UNIX</SPAN
> kernel
called the <a class="indexterm" name="AUTOID-39282"></A
><a class="indexterm" name="AUTOID-39285"></A
>
<em class="emphasis">process scheduler</EM
> decides which process is allowed to run at any given moment
and how much <span class="acronym">CPU</SPAN
> time that process should get.</P
><blockquote class="footnote"><p class="para">[4] Multiprocessor computers can run
as many processes at a time as they have processors.</P
></BLOCKQUOTE
><p class="para">To calculate which process it should run next, the scheduler
computes the <em class="emphasis">priority</EM
> of every process. The process with the lowest
priority number (or the highest priority) runs. A process's
priority is determined with a complex formula that includes what
the process is doing and how much <span class="acronym">CPU</SPAN
> time the
process has already consumed. A special number, called the <em class="emphasis">nice
number</EM
> or simply the <em class="emphasis">nice</EM
>, biases this calculation: the lower a
process's <em class="emphasis">nice</EM
> number, the higher its priority, and the
more likely that it will be run.</P
><p class="para">On most versions of <span class="acronym">UNIX</SPAN
>, <a class="indexterm" name="AUTOID-39298"></A
>
<em class="emphasis">nice</EM
> numbers are limited from -20 to
+20. Most processes have a <em class="emphasis">nice</EM
> of 0. A process with a
<em class="emphasis">nice</EM
> number of +19 will probably not run until the system
is almost completely idle; likewise, a process with a nice number
of -19 will probably preempt every other user process on
the system.</P
><p class="para">Sometimes you will want to make a process run slower. In some
cases, processes take more than their &quot;fair share&quot;
of the <span class="acronym">CPU</SPAN
>, but you don't want to kill
them outright. An example is a program that a researcher has left
running overnight to perform mathematical calculations that isn't
finished the next morning. In this case, rather than killing the
process and forcing the researcher to restart it later from the
beginning, you could simply cut the amount of <span class="acronym">CPU</SPAN
>
time that the process is getting and let it finish slowly during
the day. The program <i class="filename">/etc/renice</I
> lets you change
a process's niceness.</P
><p class="para">For example, suppose that Mike left a program running before
he went home. Now it's late at night, and Mike's
program is taking up most of the computer's <span class="acronym">CPU</SPAN
>
time:</P
><blockquote class="screen"><pre class="screen">% <b class="emphasis.bold">ps aux | head -5 </B
>
USER     PID %CPU  %MEM  VSIZE  RSIZE   TT STAT TIME   COMMAND  
mike     211 70.0   6.7  2.26M  1.08M   01  R   4:01   cruncher 
mike     129  8.2  15.1  7.06M  2.41M   01  S   0:48   csh  
donna    212  7.0   7.3  2.56M  1.16M   p1  S   1:38   csh 
michelle 290  4.0  11.9  14.4M  1.91M   03  R   19:00  rogue % </PRE
></BLOCKQUOTE
><p class="para">You could slow down Mike's program by renicing it
to a higher <em class="emphasis">nice</EM
> number.</P
><p class="para">For security reasons, normal users are only allowed to increase
the <em class="emphasis">nice</EM
> numbers of their own processes. Only the superuser can
lower the <em class="emphasis">nice</EM
> number of a process or raise the <em class="emphasis">nice</EM
> number of somebody
else's process. (Fortunately, in this example, we know
the superuser 
password!)</P
><blockquote class="screen"><pre class="screen">% <b class="emphasis.bold">/bin/su </B
>
password: <i class="systemitem.password">another39</I
>
# <b class="emphasis.bold">/etc/renice +4 211 </B
>
211: old priority 0, new priority 4  
# <b class="emphasis.bold">ps u211 </B
>
USER PID %CPU  %MEM  VSIZE   RSIZE   TT  STAT  TIME  COMMAND  
mike  211  1.5  6.7  2.26M   1.08M   01  R  N  4:02  cruncher</PRE
></BLOCKQUOTE
><p class="para">The <em class="emphasis">N</EM
> in the STAT field indicates that the <kbd class="command">cruncher</KBD
> process
is now running at a lower priority (it is &quot;niced&quot;).
Notice that the process's <span class="acronym">CPU</SPAN
> consumption
has already decreased. Any new processes that are spawned by the
process with <span class="acronym">PID</SPAN
> 211 will inherit this new nice
value, too.</P
><p class="para">You can also use <a class="indexterm" name="AUTOID-39328"></A
><a class="indexterm" name="AUTOID-39330"></A
>
<i class="filename">/etc/renice</I
>
to lower the nice number of a process to make it finish faster.[5] Although setting a process to a
lower priority won't speed up the <span class="acronym">CPU</SPAN
>
or make your computer's hard disk transfer data faster,
the negative nice number will cause <span class="acronym">UNIX</SPAN
> to run
a particular process more than it runs others on the system. Of
course, if you ran <em class="emphasis">every</EM
> process with the same negative priority,
there wouldn't be any apparent benefit.</P
><blockquote class="footnote"><p class="para">[5] Only <i class="filename">root</I
> can renice a process to make it faster. Normal processes
can't even change themselves back to what they were (if
they've been niced down). Normal users can't even
raise the priority of their processes to the value at which they
were started.</P
></BLOCKQUOTE
><p class="para">Some versions of the <kbd class="command">renice</KBD
> command allow you to change the
nice of all processes belonging to a user or all processes in a
process group (described in the next section). For instance, to
speed up all of Mike's processes, you might type:</P
><blockquote class="screen"><pre class="screen"># <b class="emphasis.bold">renice -2 -u mike</B
></PRE
></BLOCKQUOTE
><p class="para">Remember, processes with a lower nice number run faster.</P
><p class="para">Note that because of the <span class="acronym">UNIX</SPAN
> scheduling
system, renicing several processes to lower numbers is likely to
increase paging activity if there is limited physical memory, and
therefore adversely impact overall system performance.</P
><p class="para">What do process priority and niceness have to do with security?
If an intruder has broken into your system and you have contacted
the authorities and are tracing the phone call, slowing the intruder
down with a priority of +10 or +15 will limit
the damage that the intruder can do without hanging up the phone
(and losing your chance to catch the intruder). Of course, any time
that an intruder is on a system, exercise extreme caution.</P
><p class="para">Also, running your own shell with a higher priority may give
you an advantage if the system is heavily loaded. The easiest way
to do so is by typing:</P
><blockquote class="screen"><pre class="screen"># <b class="emphasis.bold">renice -5 $$</B
></PRE
></BLOCKQUOTE
><p class="para">The shell will replace the $$ with the <span class="acronym">PID</SPAN
>
of the shell's process.</P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PUIS-APP-C-SECT-1.3.4">C.1.3.4 Process groups and sessions</A
></H4
><p class="para">With Berkeley-derived versions of <span class="acronym">UNIX</SPAN
>,
including <span class="acronym">SVR4</SPAN
>, each process is assigned a <a class="indexterm" name="AUTOID-39359"></A
>
process ID (<span class="acronym">PID</SPAN
>), a
<a class="indexterm" name="AUTOID-39362"></A
><a class="indexterm" name="AUTOID-39365"></A
>
process group
ID, and a session ID. Process groups and sessions are used to implement
job control.</P
><p class="para">For each process, the <span class="acronym">PID</SPAN
> is a unique number,
the process group ID is the <span class="acronym">PID</SPAN
> of the process
group leader process, and the session ID is the <span class="acronym">PID</SPAN
>
of the session leader process. When a process is created, it inherits
the process group ID and the session ID of its parent process. Any
process may create a new process group by calling <a class="indexterm" name="AUTOID-39372"></A
>
<kbd class="command">setpgrp()</KBD
>
and may create a new session by calling the <span class="acronym">UNIX</SPAN
>
system call <a class="indexterm" name="AUTOID-39376"></A
>
<kbd class="command">setsid()</KBD
>.
All processes that have the same process group ID are said to be
in the same process group.</P
><p class="para">Each <span class="acronym">UNIX</SPAN
> process group belongs to a session
group. This is used to help manage signals and orphaned processes.
Once a user has logged in, the user may start multiple sets of processes,
or jobs, using the shell's job-control mechanism. A job
may have a single process, such as a single invocation of the <kbd class="command">ls</KBD
>
command. Alternatively, a job may have several processes, such as
a complex shell pipeline. For each of these jobs, there is a process
group. <span class="acronym">UNIX</SPAN
> also keeps track of the particular
process group which is controlling the terminal. This can be set
or changed with <a class="indexterm" name="AUTOID-39383"></A
>
<i class="filename">ioctl()</I
>
system calls. Only the controlling process group can read or write
to the terminal.</P
><p class="para">A process could become an orphan if its parent process exits
but it continues to run. Historically, these processes would be
inherited by the <kbd class="command">init</KBD
> process but would remain in their original
process group. If a signal were sent by the controlling terminal
(process group), then it would go to the orphaned process, even
though it no longer had any real connection to the terminal or the
rest of the process group.</P
><p class="para">To counter this, <a class="indexterm" name="AUTOID-39389"></A
>
<span class="acronym">POSIX</SPAN
>
defines an orphaned process group. This is a process group where
the parent of every member is either not a member of the process
group's session, or is itself a member of the same process
group. Orphaned process groups are not sent terminal signals when
they are generated. Because of the way in which new sessions are
created, the initial process in the first process group is always
an orphan (its ancestor is not in the session). Command interpreters
are usually spawned as session leaders so they ignore <span class="acronym">TSTP</SPAN
>
signals from the terminal.</P
></DIV
></DIV
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="appb_03.htm" title="B.3 SUID and SGID Files"><img src="../gifs/txtpreva.gif" alt="Previous: B.3 SUID and SGID Files" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Practical UNIX &amp; Internet Security"><img src="../gifs/txthome.gif" alt="Practical UNIX &amp; Internet Security" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="appc_02.htm" title="C.2 Creating Processes"><img src="../gifs/txtnexta.gif" alt="Next: C.2 Creating Processes" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">B.3 SUID and SGID Files</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">C.2 Creating Processes</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.htm" title="The Networking CD Bookshelf">Library Home</A
> | <a href="../dnsbind/index.htm" title="DNS &amp; BIND">DNS &amp; BIND</A
> | <a href="../tcpip/index.htm" title="TCP/IP Network Administration">TCP/IP</A
> | <a href="../sendmail/index.htm" title="sendmail">sendmail</A
> | <a href="../smdref/index.htm" title="sendmail Desktop Reference">sendmail Reference</A
> | <a href="../firewall/index.htm" title="Building Internet Firewalls">Firewalls</A
> | <a href="index.htm" title="Practical UNIX &amp; Internet Security">Practical Security</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
