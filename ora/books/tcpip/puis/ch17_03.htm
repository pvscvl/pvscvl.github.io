<html><head>
<title>[Chapter 17] 17.3 Primary UNIX Network Services</TITLE>
<meta name="DC.title" content="Practical UNIX &amp; Internet Security"><meta name="DC.creator" content="Simson Garfinkel &amp; Gene Spafford"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-02-04T00:13:07Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-148-8" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch17_01.htm" title="17. TCP/IP Services"><link rel="prev" href="ch17_02.htm" title="17.2 Controlling Access to Servers"><link rel="next" href="ch17_04.htm" title="17.4 Security Implications of Network Services"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Practical UNIX &amp; Internet Security" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Practical UNIX &amp; Internet Security"><area shape="RECT" coords="467,0,514,18" href="../search/psrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch17_02.htm" title="17.2 Controlling Access to Servers"><img src="../gifs/txtpreva.gif" alt="Previous: 17.2 Controlling Access to Servers" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 17<br>TCP/IP Services</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch17_04.htm" title="17.4 Security Implications of Network Services"><img src="../gifs/txtnexta.gif" alt="Next: 17.4 Security Implications of Network Services" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="PUIS-CHP-17-SECT-3">17.3 Primary UNIX Network Services</A
></H2
><p class="para"><a class="indexterm" name="AUTOID-21760"></A
>This
section describes selected network services that are usually provided
as part of the standard <span class="acronym">UNIX</SPAN
> network package.
It further discusses some of the major security implications of
each of these services.</P
><p class="para">Every network service carries both known and unknown security
risks. Some services have relatively small known risks, while others
have substantial ones. And with every network service there is the
possibility that a security flaw in the protocol or the server will
be discovered at some point in the future. Thus, a conservative
security policy would remove every service for which there is no
demonstrated need.</P
><p class="para"><a class="indexterm" name="AUTOID-21766"></A
><a class="indexterm" name="AUTOID-21768"></A
><a class="indexterm" name="AUTOID-21770"></A
>If you think that the
risk of a service outweighs its benefit, then you can disable the
service simply by placing a hash mark (#) at the beginning
of the lines in the <em class="emphasis"><a class="indexterm" name="AUTOID-21773"></A
><a class="indexterm" name="AUTOID-21777"></A
><a class="indexterm" name="AUTOID-21779"></A
>/etc/rc*</EM
>
file(s) or the <em class="emphasis">/etc/inetd.conf</EM
> file that cause
the server program to be executed. This will serve to comment out
those lines. Of course, if you turn off a needed service, people
who wish to use it are likely to complain! Remember, too, that disabling
the ability to receive network connections does not prevent people
on your computer from initiating outbound network connections.</P
><p class="para">Note that the <em class="emphasis">inetd</EM
> program may not take
notice of any changes to its configuration until it is restarted
or sent a signal (usually the <span class="acronym">HUP</SPAN
> signal; consult
the <em class="emphasis">inetd</EM
> man page for your system). Changes
in the <i class="filename">/etc/rc*</I
> file(s) may not take effect
until you change the run level or restart your system. Thus, if
you disable a service, the change may not cause a currently running
invocation of the server to terminate&nbsp;- you may need to take
some other action before you can verify that you have properly disabled
the service.</P
><p class="para">We recommend that you save a copy of any configuration files
<em class="emphasis">before</EM
> you begin to edit them. That way, if
you make a mistake or if something doesn't work as expected,
you can roll back to an earlier version of the files to determine
what happened. You might consider using the <a class="indexterm" name="AUTOID-21790"></A
><a class="indexterm" name="AUTOID-21792"></A
><a class="indexterm" name="AUTOID-21794"></A
>
<span class="acronym">RCS</SPAN
> or <span class="acronym">SCCS</SPAN
>
revision-control systems to manage these files. These systems allow
you to put date stamps and comments on each set of changes, for
future reference. Such markings may also be useful for comparison
purposes if you believe that the files have been changed by an intruder,
although this isn't a particularly strong form of detection.</P
><div class="sect2"><h3 class="sect2"><a class="title" name="PUIS-CHP-17-SECT-3.1">17.3.1 systat (TCP Port 11)</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-21801"></A
><a class="indexterm" name="AUTOID-21803"></A
>The
<em class="emphasis">systat</EM
> service is designed to provide status
information about your computer to other computers on the network.</P
><p class="para">Many sites have configured their <i class="filename">/etc/inetd.conf</I
>file so that connections to <span class="acronym">TCP</SPAN
> port
11 are answered with the output of the <em class="emphasis"><a class="indexterm" name="AUTOID-21811"></A
><a class="indexterm" name="AUTOID-21813"></A
>who</EM
> or <em class="emphasis">w</EM
>
command. You can verify if your system is configured in this manner
with the <em class="emphasis">telnet</EM
><kbd class="command"> </KBD
>command:</P
><blockquote class="screen"><pre class="screen">unix% telnet media.mit.edu 11
Trying 18.85.0.2... Connected to media.mit.edu.
Escape character is '^]'.
lieber   ttyp0   Aug 12 19:01   (liebernardo.medi)
cahn     ttyp1   Aug 13 14:47   (remedios:0.0)
foner    ttyp2   Aug 11 16:25   (18.85.3.35:0.2)
jrs      ttyp3   Aug 13 17:12   (pu.media.mit.edu)
ereidell ttyp4   Aug 14 08:47   (ISAAC.MIT.EDU)
felice   ttyp5   Aug 14 09:40   (gaudy.media.mit.)
das      ttyp6   Aug 10 19:00   (18.85.4.207:0.0)
...</PRE
></BLOCKQUOTE
><p class="para">Although providing this information is certainly a friendly
thing to do, usernames, login times, and origination hosts can be
used to target specific attacks against your system. We therefore
recommend against running this service.</P
><p class="para">To disable the service, simply comment or remove the line
beginning with the word &quot;systat&quot; from your <i class="filename">/etc/inetd.conf</I
>file. You can also verify that the service has been disabled
by using the <em class="emphasis">telnet</EM
> command:</P
><blockquote class="screen"><pre class="screen">unix% telnet media.mit.edu 11
Trying 18.85.0.2... Connection refused.
unix% </PRE
></BLOCKQUOTE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PUIS-CHP-17-SECT-3.2">17.3.2 (FTP) File Transfer Protocol (TCP Ports 20 and 21)</A
></H3
><p class="para">The <a class="indexterm" name="AUTOID-21827"></A
><a class="indexterm" name="AUTOID-21830"></A
>
File Transfer Protocol (<span class="acronym">FTP</SPAN
>)
allows you to transfer complete files between systems. Its <span class="acronym">UNIX</SPAN
>
implementation consists of two programs: <em class="emphasis">ftp</EM
>
is the client program; <em class="emphasis"><a class="indexterm" name="AUTOID-21836"></A
><a class="indexterm" name="AUTOID-21838"></A
>/etc/ftpd</EM
>
(sometimes called <em class="emphasis">/usr/etc/in.ftpd</EM
>) is the
server. <span class="acronym">TCP</SPAN
> port 21 is used for sending commands;
port 20 is occasionally used for the data stream, although it is
more common for the client and server to mutually negotiate a set
of port numbers greater than 1024.</P
><p class="para"><a class="indexterm" name="AUTOID-21845"></A
><a class="indexterm" name="AUTOID-21848"></A
>When you
use <span class="acronym">FTP</SPAN
> to contact a remote machine, the remote
computer requires that you log in by providing your username and
password; <span class="acronym">FTP</SPAN
> logins are usually recorded on
the remote machine in the <em class="emphasis">/usr/adm/wtmp</EM
> file.
Because the passwords typed to <span class="acronym">FTP</SPAN
> are transmitted
unencrypted over the network, they can be intercepted (as with the
<em class="emphasis">telnet</EM
> and <em class="emphasis">rexec</EM
> commands);
for this reason, some sites may wish to disable the <em class="emphasis">ftp</EM
>
and <em class="emphasis">ftpd</EM
> programs, or modify them to use alternative
authentication protocols.</P
><div class="sect3"><h4 class="sect3"><a class="title" name="PUIS-CHP-17-SECT-3.2.1">17.3.2.1 Using anonymous FTP</A
></H4
><p class="para"><span class="acronym">FTP</SPAN
><a class="indexterm" name="AUTOID-21863"></A
><a class="indexterm" name="AUTOID-21865"></A
><a class="indexterm" name="AUTOID-21868"></A
><a class="indexterm" name="AUTOID-21871"></A
>
can be set up for anonymous access,
which allows people on the network who do not have an account on
your machine to deposit or retrieve files from a special directory.
Many institutions use anonymous <span class="acronym">FTP</SPAN
> as a low-cost
method to distribute software and databases to the public.</P
><p class="para">To use anonymous <span class="acronym">FTP</SPAN
>, simply specify <em class="emphasis">ftp</EM
>
[6]
as your username, and your real identity&nbsp;- your email address&nbsp;- as
the password.</P
><blockquote class="footnote"><p class="para">[6] Some older servers require that you specify &quot;anonymous&quot;
for anonymous FTP; most servers accept either username.</P
></BLOCKQUOTE
><blockquote class="screen"><pre class="screen">% <b class="emphasis.bold">ftp athena-dist.mit.edu </B
>
Connected to AENEAS.MIT.EDU. 
220 aeneas FTP server (Version 4.136 Mon Oct 31 23:18:38 EST 1988) ready. 
Name (athena-dist.mit.edu:fred): <kbd class="command">ftp</KBD
> 
331 Guest login ok, send ident as password. 
password: <i class="systemitem.password">Rachel@ora.com</I
>
230 Guest login ok, access restrictions apply. 
ftp&gt;</PRE
></BLOCKQUOTE
><p class="para">Increasingly, systems on the Internet require that you specify
an email address as your &quot;password.&quot; However,
few of these systems verify that the email address you type is your
actual email address.</P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PUIS-CHP-17-SECT-3.2.2">17.3.2.2 Passive vs. active FTP</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-21889"></A
><a class="indexterm" name="AUTOID-21891"></A
><a class="indexterm" name="AUTOID-21893"></A
>The <span class="acronym">FTP</SPAN
> protocol
supports two modes of operations, <i class="firstterm">active</I
>
(often called <em class="emphasis">normal)</EM
> and <i class="firstterm">passive</I
>.
These modes determine whether the <span class="acronym">FTP</SPAN
> server
or the client initiates the <span class="acronym">TCP</SPAN
> connections that
are used to send information from the server to the host.</P
><p class="para">Active mode is the default. In active mode, the server opens
a connection to the client, as illustrated in <a class="xref" href="#PUIS-CHP-17-FIG-1" title="Active-mode FTP connection">Figure 17.1</A
>. Active
mode complicates the construction of firewalls, because the firewall
must anticipate the connection from the <span class="acronym">FTP</SPAN
> server
back to the <span class="acronym">FTP</SPAN
> client program and permit that
connection through the firewall.</P
><h4 class="figure"><a class="title" name="PUIS-CHP-17-FIG-1">Figure 17.1: Active-mode FTP connection</A
></H4
><img class="graphic" src="figs/puis_1701.gif" alt="Figure 17.1"><h4 class="figure"><a class="title" name="PUIS-CHP-17-FIG-2">Figure 17.2:  Passive-mode FTP connection</A
></H4
><img class="graphic" src="figs/puis_1702.gif" alt="Figure 17.2"></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PUIS-CHP-17-SECT-3.2.3">17.3.2.3 FTP passive mode</A
></H4
><p class="para">Under normal circumstances, the <span class="acronym">FTP</SPAN
> server
initiates the data connection back to the <span class="acronym">FTP</SPAN
>
client. Many <span class="acronym">FTP</SPAN
> servers and clients support
an alternative mode of operation called passive mode. In passive
mode, the <span class="acronym">FTP</SPAN
> client initiates the connection
that the server uses to send data back to client. Passive mode is
shown in <a class="xref" href="#PUIS-CHP-17-FIG-2" title=" Passive-mode FTP connection">Figure 17.2</A
>. Passive mode is desirable, because it simplifies
the task of building a firewall: the firewall simply allows internal
connections to pass through to the outside world, but it does not
need to allow outside connections to come back in. Not all <span class="acronym">FTP</SPAN
>
clients support passive mode, but many do, including the <span class="acronym">FTP</SPAN
>
clients that are built in to most popular <span class="acronym">WWW</SPAN
>
browsers. If your software does not yet include it, you should upgrade
to software that does.<a class="indexterm" name="AUTOID-21923"></A
><a class="indexterm" name="AUTOID-21925"></A
></P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PUIS-CHP-17-SECT-3.2.4">17.3.2.4 Setting up an FTP server</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-21931"></A
><a class="indexterm" name="AUTOID-21934"></A
>If you wish to provide
<span class="acronym">FTP</SPAN
> service, you have three choices for <span class="acronym">FTP</SPAN
>
servers:</P
><ol class="orderedlist"><li class="listitem"><p class="para">You can use the standard <span class="acronym">UNIX</SPAN
>
<em class="emphasis"><a class="indexterm" name="AUTOID-21944"></A
>ftpd</EM
> that
comes with your system. Depending on your <span class="acronym">UNIX</SPAN
>
vendor, this version may or may not be secure and bug free. Over
the years, many security problems have been found with <em class="emphasis">ftpd</EM
>.
Some vendors have been quick to implement the necessary bug fixes;
others have not.</P
></LI
><li class="listitem"><p class="para">You can run <em class="emphasis"><a class="indexterm" name="AUTOID-21951"></A
>wuftpd</EM
>,
an excellent <span class="acronym">FTP</SPAN
> server originally written at
Washington University in Saint Louis. The <em class="emphasis">wuftpd </EM
>server
has many useful options that allow you to create different categories
of <span class="acronym">FTP</SPAN
> users, allow you to set limits on the
number of simultaneous file transfers, and allow you to save network
bandwidth by automatically compressing and archiving files as they
are transferred. Unfortunately, the program itself is quite complex,
is somewhat difficult to configure, and has had security problems
in the past. Nevertheless, <em class="emphasis">wuftpd</EM
> is the <span class="acronym">FTP</SPAN
>
server of choice for many major archive sites.</P
></LI
><li class="listitem"><p class="para">If you only want to provide anonymous <span class="acronym">FTP</SPAN
>
access, you can use one of several stripped-down, minimal implementations
of <span class="acronym">FTP</SPAN
> servers. One such version is the <i class="filename"><a class="indexterm" name="AUTOID-21963"></A
>aftpd </I
>server, written by Marcus Ranum
when he was at Trusted Information Systems. The <i class="filename">aftp</I
>
server is designed to be as simple as possible so as to minimize
potential security problems; therefore, it has far fewer features
and options than other servers. In particular, it will only serve
files in anonymous transfer mode. We suggest that you consider getting
a copy of <i class="filename">aftp</I
> (or something like it) if you
only want to offer anonymous access.[7]</P
><blockquote class="footnote"><p class="para">[7] This is <em class="emphasis">not</EM
> the same FTP server as the one included in the TIS Firewall
Toolkit. <i class="filename">aftp</I
> is available from the TIS FTP
site, <a class="systemitem.ftpserver" href="../../../WebStripper/protected.html#link=ftp://ftp.tis.com">ftp.tis.com</A
>.</P
></BLOCKQUOTE
></LI
></OL
><p class="para">All of these servers are started by the <i class="filename">inetd</I
>
daemon, and thus require an entry in the <i class="filename">/etc/inetd.conf</I
>file. You can either have the <span class="acronym">FTP</SPAN
>
server run directly or run through a wrapper such as <i class="filename">tcpwrapper.</I
>
Our discussion of <span class="acronym">FTP</SPAN
> services in the following
sections applies to the standard <span class="acronym">UNIX</SPAN
> <i class="filename">ftpd</I
> server.</P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PUIS-CHP-17-SECT-3.2.5">17.3.2.5 Restricting FTP with the standard UNIX FTP server</A
></H4
><p class="para">The <a class="indexterm" name="AUTOID-21983"></A
><a class="indexterm" name="AUTOID-21985"></A
><a class="indexterm" name="AUTOID-21988"></A
><a class="indexterm" name="AUTOID-21991"></A
>
<em class="emphasis">/etc/ftpusers</EM
>
file contains a list of the accounts that are<em class="emphasis"> not </EM
>allowed
to use <span class="acronym">FTP</SPAN
> to transfer files. This file should
contain all accounts that do not belong to actual human beings:</P
><blockquote class="screen"><pre class="screen"># <b class="emphasis.bold">cat /etc/ftpusers </B
>
root 
uucp 
news 
bin 
ingres 
nobody 
daemon</PRE
></BLOCKQUOTE
><p class="para">In this example, we specifically block access to the <em class="emphasis">root</EM
>,
<em class="emphasis">uucp</EM
>, <em class="emphasis">news</EM
>, <em class="emphasis">bin</EM
>,
and other accounts so that attackers on the Internet will not be
able to break into these accounts using the <span class="acronym">FTP</SPAN
>
program. Blocking system accounts in this manner also prevents the
system manager from transferring files to these accounts using <span class="acronym">FTP</SPAN
>,
which is a risk because the passwords can be intercepted with a
packet sniffer.</P
><p class="para">Additionally, most versions of <span class="acronym">FTP</SPAN
> will
not allow a user to transfer files if the account's shell,
as given in the <em class="emphasis">/etc/passwd</EM
> file of the system,
is not also listed in the <em class="emphasis">/etc/shells</EM
>[8] file. This is to prevent users who have had
accounts disabled, or who are using restricted shells, from using
<span class="acronym">FTP</SPAN
>. You should test this feature with your own
server to determine if it works correctly.</P
><blockquote class="footnote"><p class="para">[8] Note that <em class="emphasis">/etc/shells</EM
> is also used by
<em class="emphasis">chfn</EM
> as a list of allowable shells to change
to.</P
></BLOCKQUOTE
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PUIS-CHP-17-SECT-3.2.6">17.3.2.6 Setting up anonymous FTP with the standard UNIX FTP
server</A
></H4
><p class="para">Setting up <a class="indexterm" name="AUTOID-22018"></A
><a class="indexterm" name="AUTOID-22020"></A
><a class="indexterm" name="AUTOID-22023"></A
>
anonymous <span class="acronym">FTP</SPAN
>
on a server is relatively easy, but you must do it correctly, because
you are potentially giving access to your system to everybody on
the network.</P
><p class="para">To set up anonymous <span class="acronym">FTP</SPAN
>, you must create
a special account with the name <em class="emphasis">ftp</EM
>. For example:</P
><blockquote class="screen"><pre class="screen">ftp:*:400:400:Anonymous FTP:/var/spool/ftp:/bin/false</PRE
></BLOCKQUOTE
><p class="para">Files that are available by anonymous <span class="acronym">FTP</SPAN
>
will be placed in the <em class="emphasis">ftp</EM
> home directory; you
should therefore put the directory in a special place, such as <em class="emphasis">/var/spool/ftp</EM
>.</P
><p class="para">When it is used for anonymous <span class="acronym">FTP</SPAN
>, <em class="emphasis">ftpd</EM
>
uses the <em class="emphasis"><a class="indexterm" name="AUTOID-22039"></A
>chroot</EM
>()
function call to change the root of the perceived filesystem to
the home directory of the <em class="emphasis">ftp</EM
> account. For
this reason, you must set up that account's home directory
as a mini filesystem. Three directories go into this mini filesystem:</P
><dl class="variablelist"><dt class="term"><em class="emphasis">bin</EM
></DT
><dd class="listitem"><p class="para">This <a class="indexterm" name="AUTOID-22049"></A
>
directory
holds a copy of the <i class="filename">/bin/ls</I
> program, which
<em class="emphasis">ftpd</EM
> uses to list files. If your system uses
dynamic linking and shared libraries, you must either install programs
that are statically linked or install the dynamic libraries in the
appropriate directory (for example, <i class="systemitem">/var/spool/ftp/lib</I
>).</P
></DD
><dt class="term"><em class="emphasis">etc</EM
></DT
><dd class="listitem"><p class="para">This <a class="indexterm" name="AUTOID-22060"></A
>
directory
holds a version of the <em class="emphasis">/etc/passwd</EM
> and <em class="emphasis">/etc/group</EM
>
files, which are put there so the <em class="emphasis">/bin/ls</EM
> command
will print usernames and groupnames when it lists files. Replace
the encrypted passwords in this file with asterisks. Some security-conscious
sites may wish to delete some or all account names from the <em class="emphasis">passwd</EM
>
file; the only one that needs to be present is <em class="emphasis">ftp</EM
>.
(Actually, if neither file exists, most <span class="acronym">FTP</SPAN
> servers
will still work normally.)</P
></DD
><dt class="term"><em class="emphasis">pub</EM
></DT
><dd class="listitem"><p class="para">This <a class="indexterm" name="AUTOID-22074"></A
>
directory,
short for public, holds the files that are actually made available
for anonymous <span class="acronym">FTP</SPAN
> transfer. You can have as many
subdirectories as you wish in the <i class="filename">pub </I
>directory.</P
></DD
></DL
><p class="para">Be sure to place the actual files in these directories, rather
than using symbolic links pointing to other places on your system.
Because the <em class="emphasis">ftpd</EM
> program uses the <em class="emphasis">chroot</EM
>()<em class="emphasis"></EM
>system call, symbolic links may not behave properly with
anonymous <span class="acronym">FTP</SPAN
>. In general, symbolic links to
inside your <em class="emphasis">chroot</EM
> area will work, and they
are commonly used on anonymous <span class="acronym">FTP</SPAN
> sites. However,
any symbolic link which points outside the <em class="emphasis">chroot</EM
>
area or is an absolute symbolic link will not work.</P
><p class="para">Now execute the following commands as the superuser. We assume
that you've already created <i class="filename">~ftp</I
>.</P
><blockquote class="screen"><pre class="screen"># <b class="emphasis.bold">mkdir ~ftp/bin ~ftp/etc ~ftp/pub</B
>			Create needed directories. </PRE
></BLOCKQUOTE
><p class="para">Set up <em class="emphasis">~ftp/bin</EM
>:</P
><blockquote class="screen"><pre class="screen"># <b class="emphasis.bold">chown root ~ftp/bin/ls</B
>		 		 	Make sure root owns the directory	.
# <b class="emphasis.bold">cp /bin/ls ~ftp/bin</B
>			Make a copy of the ls program. 
# <b class="emphasis.bold">chmod 111 ~ftp/bin/ls</B
>			Make sure ls can't be changed. 
# <b class="emphasis.bold">chmod 111 ~ftp/bin</B
>			Make directory execute only. 
# <b class="emphasis.bold">chown root ~ftp/bin</B
>			Make sure root owns the directory. </PRE
></BLOCKQUOTE
><p class="para">Set up <em class="emphasis">~ftp/etc</EM
>:</P
><blockquote class="screen"><pre class="screen"># <b class="emphasis.bold">cat-passwd awk -F: '{printf &quot;%s:*:%s:%s::\n&quot;,$1,$2,$3}' \
	&gt; ~ftp/etc/passwd</B
>
			Make a copy of /etc/passwd with 
			all passwords changed to asterisks.
# <b class="emphasis.bold">awk -F: '{printf &quot;%s::%s:%s\n&quot;,$1,$3,$4}' /etc/group &gt; ~ftp/etc/group</B
>
			Make a copy of /etc/group.

# <b class="emphasis.bold">chmod 444 ~ftp/etc/*</B
>			Make sure files in etc are not writable.

# <b class="emphasis.bold">chmod 111 ~ftp/etc</B
>			Make directory execute-only.

# <b class="emphasis.bold">chown root ~ftp/etc</B
>			Make sure root owns the directory.</PRE
></BLOCKQUOTE
><p class="para">Alternatively, note that most <em class="emphasis">ftp</EM
> servers
will work fine if the only entries in the passwd file are for <em class="emphasis">root</EM
>
and <i class="systemitem">ftp</I
>, and the only
entry in the group file is for group <em class="emphasis">ftp</EM
>. The
only side-effect is that files left in the <em class="emphasis">ftp</EM
>
directories will show numeric owner and groups when clients do a
directory listing. The advantage to having a trimmed file is that
outsiders cannot gain any clues as to your system's user
population if they should obtain a copy of the file.</P
><p class="para">Some systems will require you to install dynamic libraries
and even device files to make the <span class="acronym">FTP</SPAN
> server's
file list command work. This is particularly a problem on Solaris
systems. In general, the fewer files accessed in the anonymous <span class="acronym">FTP</SPAN
>
area, the harder the system will be to compromise.</P
><p class="para">Set up <em class="emphasis">~ftp/pub</EM
>:</P
><blockquote class="screen"><pre class="screen"># <b class="emphasis.bold">chown root.wheel ~ftp/pub</B
>			Make sure root owns the directory. 
# <b class="emphasis.bold">chmod 555 ~ftp/pub</B
>			Make directory writable by nobody.[9] 
			(See warning.)</PRE
></BLOCKQUOTE
><p class="para">And finally, secure the <em class="emphasis">~ftp</EM
> directory:</P
><blockquote class="screen"><pre class="screen"># <b class="emphasis.bold">chmod 555 ~ftp</B
>
# <b class="emphasis.bold">chown root ~ftp</B
></PRE
></BLOCKQUOTE
><blockquote class="note"><p class="para"><strong>NOTE:</STRONG
> Note that some <em class="emphasis">man</EM
> pages from some
vendors state that the <i class="filename">~ftp</I
> directory should
be owned by user <em class="emphasis">ftp</EM
>. <em class="emphasis">This practice
is dangerous!</EM
> If user <em class="emphasis">ftp</EM
> owns the
home directory, anonymous users can change the <span class="acronym">FTP</SPAN
>
environment, can delete or create new files at will, and can run
any program that they choose. They can also create .<i class="filename">rhosts</I
>
files to gain direct access to your system!</P
></BLOCKQUOTE
><p class="para">You should also set up a mail alias for the ftp user, so that
mail sent to <em class="emphasis">ftp</EM
> is delivered to one of your
system <a class="indexterm" name="AUTOID-22140"></A
><a class="indexterm" name="AUTOID-22143"></A
>
administrators.</P
><div class="sidebar"><h4 class="sidebar"><a class="title" name="AUTOID-22146">Don't Become an FTP-Software Pirate Repository!</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-22149"></A
><a class="indexterm" name="AUTOID-22152"></A
><a class="indexterm" name="AUTOID-22155"></A
><a class="indexterm" name="AUTOID-22157"></A
><a class="indexterm" name="AUTOID-22160"></A
>Years ago, organizations that
ran <span class="acronym">FTP</SPAN
> servers would routinely create an &quot;open&quot;
directory on their servers so that users on the network could leave
files for users of the system. Unfortunately, software pirates soon
started using those directories as repositories for illegally copied
programs, files of stolen passwords, and pornographic pictures.
Collectively, this information is sometimes known as <em class="emphasis">warez</EM
>,
although that name is usually reserved for the pirated software
alone. Today, if you have a directory on an anonymous <span class="acronym">FTP</SPAN
>
server that is writable by the <span class="acronym">FTP</SPAN
> user, the
odds are quite high that it eventually will be discovered and used
in this manner.</P
><p class="para"><a class="indexterm" name="AUTOID-22168"></A
>Of
course, some sites still wish to create &quot;depository&quot;
directories on their <span class="acronym">FTP</SPAN
> servers, so that users
on the network can leave files for users of their system. The correct
way to do so is to create a depository that is carefully controlled
and automatically emptied:</P
><ol class="orderedlist"><li class="listitem"><p class="para">Create
a directory that is writable, but not readable, by the ftp user.
The easiest way to do so is to make the directory owned by root,
and give it a mode of 1733. In this manner, files can be left for
users, but other users who connect to your system using anonymous
<span class="acronym">FTP</SPAN
> will not be able to list the content of the
directory.[10]</P
><blockquote class="footnote"><p class="para">[10] If you are using the wu archive server,
you can configure it so that uploaded files are uploaded in mode
004, so that they cannot be read by another client. If you are writing
your own server, this is a good idea to include in your code.</P
></BLOCKQUOTE
></LI
><li class="listitem"><p class="para">Put a file quota on the ftp user, to limit the total
number of bytes that can be received. (Alternatively, locate the
anonymous <span class="acronym">FTP</SPAN
> directory on an isolated partition.)</P
></LI
><li class="listitem"><p class="para">Create a shell script that automatically moves any
files left in the depository that are more than 15 (or 30 or 60)
minutes old into another directory that is not accessible by the
anonymous <span class="acronym">FTP</SPAN
> user. You may also wish to have
your program send you email when files are received.</P
></LI
><li class="listitem"><p class="para">Place an entry in your /usr/lib/crontab
file so this script runs automatically every 15-30 minutes.</P
></LI
></OL
></DIV
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PUIS-CHP-17-SECT-3.2.7">17.3.2.7 Allowing only FTP access</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-22189"></A
>Sometimes,
you may wish to give people permission to <span class="acronym">FTP</SPAN
>
files to and from your computer, but you may not want to give them
permission to actually log in. One simple way to accomplish this
goal is to set up the person's account with a special shell,
such as <i class="filename">/bin/ftponly</I
>. Follow these directions:[11]</P
><blockquote class="footnote"><p class="para">[11] If you are using wuftpd, note that there is a feature which
allows a similar configuration.</P
></BLOCKQUOTE
><ol class="orderedlist"><li class="listitem"><p class="para">Create a shell script <i class="filename">/bin/ftponly</I
>,
which prints a polite error message if the user attempts to log
into his account. Here is an example:</P
><blockquote class="screen"><pre class="screen">#!/bin/sh
/bin/cat &lt;&lt; XX

You may use FTP to put files on this computer, but you may
not use this account to login.
-The Management

XX
/usr/bin/sleep 10</PRE
></BLOCKQUOTE
></LI
><li class="listitem"><p class="para">Create your user account with <i class="filename">/bin/ftponly</I
>
as its shell:</P
><blockquote class="screen"><pre class="screen">kelly:Mqu3lQJ41kf/E:502:20:Jim Kelly:/Users/kelly:/bin/ftponly</PRE
></BLOCKQUOTE
></LI
><li class="listitem"><p class="para">Finally, add the file <i class="filename">/bin/ftponly</I
>
to the file <i class="filename">/etc/shells:</I
>[12]</P
><blockquote class="footnote"><p class="para">[12] On AIX,
shells must be added to the /etc/security/login.cfg
file.</P
></BLOCKQUOTE
><blockquote class="screen"><pre class="screen"># List of acceptable shells for chsh/passwd -s
# Ftpd will not allow users to connect who do not have one of 
# these shells
#
/bin/sh
/bin/csh
/bin/ftponly <a class="indexterm" name="AUTOID-22212"></A
><a class="indexterm" name="AUTOID-22215"></A
><a class="indexterm" name="AUTOID-22217"></A
><a class="indexterm" name="AUTOID-22221"></A
><a class="indexterm" name="AUTOID-22224"></A
>
 </PRE
></BLOCKQUOTE
></LI
></OL
></DIV
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PUIS-CHP-17-SECT-3.3">17.3.3 TELNET (TCP Port 23)</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-22231"></A
><a class="indexterm" name="AUTOID-22233"></A
>Telnet is a service designed to allow you
to log onto a remote computer on the Internet. Telnet gives you
a &quot;virtual terminal&quot; on the remote computer. The
<span class="acronym">UNIX</SPAN
> version of Telnet is implemented with the
telnet client and telnetd server programs.</P
><p class="para">To use telnet, type the name of the command followed by the
name of the computer to which you wish to connect. When you get
the prompt, simply log in as if you had called your computer using
a modem or connected via a hard-wired terminal:</P
><blockquote class="screen"><pre class="screen">% <b class="emphasis.bold">telnet prose </B
>
Trying... 
Connected to prose 
Escape character is '^]'  

4.3 BSD UNIX (prose.cambridge.ma.us)  

login: <b class="emphasis.bold">nancy </B
>
password: <i class="systemitem.password">T wrink</I
></PRE
></BLOCKQUOTE
><p class="para">Because of the risk of <a class="indexterm" name="AUTOID-22244"></A
><a class="indexterm" name="AUTOID-22247"></A
>
packet sniffing, logging into your computer with
Telnet can pose a greater security risk than simply dialing into
your computer. On many kinds of networks, such as Ethernet, the
packets sent between computers are actually delivered to every computer
on the physical piece of wire. The computers on the network are
programmed to only respond to the packets that are intended for
them. But it is possible to program a computer to force it to listen
to and record every packet transmitted. Special programs can capture
the first hundred characters (or more) sent in both directions on
a Telnet connection and thereby capture your username and password.</P
><p class="para">Packet sniffing is not only a danger on your local area network,
because the Telnet session packets are vulnerable throughout their
journey. In recent years, there have been many cases of Internet
Service Providers who have had a single computer on their internal
network compromised; every Telnet connection passing through that
<span class="acronym">ISP</SPAN
> had its password sniffed as a result. The
best ways to defeat packet sniffing are through the use of one-time
passwords and encryption.</P
><p class="para">A second danger of Telnet is that an attacker can hijack a
Telnet session that is in progress using a technique that is sometimes
called <a class="indexterm" name="AUTOID-22253"></A
><a class="indexterm" name="AUTOID-22256"></A
><a class="indexterm" name="AUTOID-22258"></A
>
session hijacking. Thus, after you
log in using your password, the attacker can seize control of the
session and type whatever commands he wishes. The only way to eliminate
the possibility of Telnet hijacking is through the use of encryption.</P
><p class="para"><a class="indexterm" name="AUTOID-22262"></A
>Telnet also
presents many of the same risks as dial-in modems. Unfortunately,
allowing access to your computer by Telnet is significantly more
risky than allowing telephone access for a variety of reasons:</P
><ul class="itemizedlist"><li class="listitem"><p class="para">Although finding the telephone number
of a computer's modems can be difficult, one can easily
find out the address of a computer on the Internet. Few computer
centers publish the telephone numbers of their computer's
modems, but a computer's Internet address can be easily
determined from its hostname. Although this availability makes access
easier for authorized users, it also makes access easier for attackers.</P
></LI
><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-22270"></A
><a class="indexterm" name="AUTOID-22273"></A
>Because
connecting to a computer via Telnet is significantly faster than
calling the computer with a modem, an attacker can try to guess
more passwords in a given amount of time.</P
></LI
><li class="listitem"><p class="para">As <a class="indexterm" name="AUTOID-22278"></A
>
long
distance calls cost the caller money, few attackers try to break
into computers outside their local calling area. On the other hand,
there is usually no incremental cost associated with using Telnet
to break into distant machines. Somebody trying to log into your
computer with a stolen password might be across the street, or they
might be on the other side of the globe.</P
></LI
><li class="listitem"><p class="para">Because the Internet lacks a sophisticated technology
for tracing calls (often available on telephone networks), the Internet
gives attackers the added protection of near anonymity.</P
></LI
><li class="listitem"><p class="para">Many modems ring or produce other audible sounds
when they receive incoming calls. Telnet connections are silent,
and thus less likely to attract outside attention.</P
></LI
><li class="listitem"><p class="para">A <a class="indexterm" name="AUTOID-22286"></A
>
network
connection allows an attacker to gain much more information about
a target machine, which can be used to locate additional points
of vulnerability.</P
></LI
></UL
><p class="para">Telnet is a useful service. To make it safer, you should avoid
using reusable passwords. You can also assign users different passwords
on different computers, so that if one account is compromised, others
will not be.<a class="indexterm" name="AUTOID-22289"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PUIS-CHP-17-SECT-3.4">17.3.4 Simple Mail Transfer Protocol (SMTP) (TCP Port 25)</A
></H3
><p class="para">The <a class="indexterm" name="AUTOID-22294"></A
><a class="indexterm" name="AUTOID-22296"></A
><a class="indexterm" name="AUTOID-22298"></A
><a class="indexterm" name="AUTOID-22300"></A
>
Simple Mail Transfer Protocol
(<span class="acronym">SMTP</SPAN
>) is an Internet standard for transferring
electronic mail between computers. The <span class="acronym">UNIX</SPAN
> program
<a class="indexterm" name="AUTOID-22306"></A
>
<i class="filename">/usr/lib/sendmail</I
>
usually implements both the client side and the server side of the
protocol, and seems to be the predominant software used in <span class="acronym">UNIX</SPAN
>
email systems. Using sendmail, mail can be:</P
><ul class="itemizedlist"><li class="listitem"><p class="para">Delivered to individual users</P
></LI
><li class="listitem"><p class="para">Distributed to mailing lists (of many users)</P
></LI
><li class="listitem"><p class="para">Sent automatically to another machine</P
></LI
><li class="listitem"><p class="para">Appended to files</P
></LI
><li class="listitem"><p class="para">Provided as standard input to programs</P
></LI
></UL
><p class="para"><a class="indexterm" name="AUTOID-22324"></A
><a class="indexterm" name="AUTOID-22327"></A
>A
legitimate mail address can be a username or an entry in the alias
database. The aliases are located in the aliases file, usually in
the <i class="filename">/usr/lib</I
>, <i class="filename">/etc</I
>, <i class="filename">/etc/mail,</I
>
or <i class="filename">/etc/sendmail</I
> directories.</P
><p class="para">The <kbd class="command">sendmail</KBD
> program also allows individual users to set up
an alias for their accounts by placing a file with the name <i class="filename">.forward</I
>
in their home directories.</P
><p class="para">Another file, <a class="indexterm" name="AUTOID-22339"></A
><a class="indexterm" name="AUTOID-22341"></A
>
<i class="filename">sendmail.cf</I
>, <kbd class="command">controls</KBD
> sendmail's
configuration. The <i class="filename">sendmail.cf</I
> file can also be found in various
directories, depending on the version in use and the configuration
options chosen.</P
><blockquote class="note"><p class="para"><strong>NOTE:</STRONG
> The <kbd class="command">sendmail</KBD
> program is only one of many different systems
for delivering email over the Internet. Others include <kbd class="command">smail</KBD
>, <span class="acronym">MMDF</SPAN
>,
and <span class="acronym">PMDF</SPAN
>. However, Berkeley's <kbd class="command">sendmail</KBD
>
is by far the most common mailer on the Internet. It also seems
to be the mailer that is the most plagued with security problems.
Whether these problems are because the design of <kbd class="command">sendmail</KBD
> is fundamentally
flawed, because the coding of <kbd class="command">sendmail</KBD
> is particularly sloppy, or
simply because more people are looking for flaws in <kbd class="command">sendmail</KBD
> than
in any other program remains an open question.</P
></BLOCKQUOTE
><div class="sect3"><h4 class="sect3"><a class="title" name="PUIS-CHP-17-SECT-3.4.1">17.3.4.1 sendmail and security</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-22360"></A
><a class="indexterm" name="AUTOID-22363"></A
><a class="indexterm" name="AUTOID-22366"></A
><kbd class="command">sendmail</KBD
> has been
the source of numerous security breaches on <span class="acronym">UNIX</SPAN
>
systems. For example:</P
><ul class="itemizedlist"><li class="listitem"><p class="para">Early versions of <kbd class="command">sendmail</KBD
> allowed
mail to be sent directly to any file on the system, including files
like <i class="filename">/etc/passwd.</I
></P
></LI
><li class="listitem"><p class="para"><kbd class="command">sendmail</KBD
> supports a &quot;<a class="indexterm" name="AUTOID-22379"></A
><a class="indexterm" name="AUTOID-22381"></A
>
wizard's
password,&quot; set in the configuration file, that can be used
to get a shell on a remote system without logging in.</P
></LI
><li class="listitem"><p class="para"><kbd class="command">sendmail</KBD
> allows <a class="indexterm" name="AUTOID-22387"></A
><a class="indexterm" name="AUTOID-22390"></A
>
trusted users, who are permitted
to forge mail that is delivered to the local machine.</P
></LI
><li class="listitem"><p class="para"><kbd class="command">sendmail</KBD
> can be compiled in &quot;debug mode,&quot;
a mode that in the past has been used to allow outsiders unrestricted
access to the system <kbd class="command">sendmail</KBD
> is running on.</P
></LI
><li class="listitem"><p class="para"><kbd class="command">sendmail</KBD
> used to accept <a class="indexterm" name="AUTOID-22401"></A
>
mail with a program as the recipient, thus
allowing remote users to invoke shells and other programs on the
destination host.</P
></LI
><li class="listitem"><p class="para"><kbd class="command">sendmail</KBD
> has done a poor job of validating its arguments,
thus allowing users to overwrite arbitrary locations in memory,
or provide input that results in very bad side effects.</P
></LI
></UL
><p class="para">One of the main reasons for <kbd class="command">sendmail</KBD
>'s problems is
its all-in-one design. The program is extremely complicated, runs
as superuser, freely accepts connections from any computer on the
Internet, and has a rich command language. We are not surprised
that the program has been plagued with problems, although it seems
to have had more than its share.</P
><p class="para">Fortunately, there are alternatives. Instead of having a large
all-in-one program receive messages from the Internet and then deliver
the mail, you could split this functionality into two different
programs. The Firewall Toolkit from Trusted Information Systems
contains a program called <kbd class="command"><a class="indexterm" name="AUTOID-22411"></A
>smap</KBD
>
that does exactly this. Even if you do not have a firewall, you
may wish to use smap for accepting <span class="acronym">SMTP</SPAN
> connections
from outside sites. For instructions on how to do this, see &quot;Installing
the TIS smap/smapd sendmail Wrapper&quot; in <a class="xref" href="ch22_01.htm" title="Wrappers and Proxies">Chapter 22</A
>.</P
><div class="sidebar"><h4 class="sidebar"><a class="title" name="AUTOID-22415">What's My sendmail Version?</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-22418"></A
>If you are using the version of sendmail that
was supplied with your operating system, then you may have difficulty
figuring out which version of sendmail you are actually running.
Your <i class="filename">sendmail</I
> program should print its version
number when you telnet to it (port 25). Beware: if sendmail does
not print a version number, there is no easy way to determine what
version number you have.</P
><p class="para">One way that you can determine
your sendmail version is to download a new version and install it
yourself.</P
><p class="para">You can get the current version of sendmail
from the following locations:</P
><blockquote class="literallayout"><p class="literallayout"><a class="systemitem.url" href="../../../WebStripper/protected.html#link=ftp://ftp.cs.berkeley.edu/ucb/sendmail">ftp://ftp.cs.berkeley.edu/ucb/sendmail</A
><br><a class="systemitem.url" href="../../../WebStripper/protected.html#link=ftp://info.cert.org/pub/tools/sendmail/">ftp://info.cert.org/pub/tools/sendmail/</A
><br><a class="systemitem.url" href="../../../WebStripper/protected.html#link=ftp://auscert.org.au/pub/mirrors/ftp.cs.berkeley.edu/ucb/sendmail">ftp://auscert.org.au/pub/mirrors/ftp.cs.berkeley.edu/ucb/sendmail</A
> </P
></BLOCKQUOTE
><p class="para">Some vendors make proprietary changes to
the sendmail program, so you may not be able to use Berkeley's
unmodified version on your system. (For example, Berkeley's
unmodified sendmail will not read mail aliases from systems using
Sun Microsystem's <span class="acronym">NIS</SPAN
>+ network
name service.) In these cases, your only solution is to speak with
your vendor.</P
></DIV
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PUIS-CHP-17-SECT-3.4.2">17.3.4.2 Using sendmail to receive email</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-22433"></A
>If you must
run <kbd class="command">sendmail</KBD
> to receive electronic mail, you should take extra measures
to protect your system's security.</P
><ol class="orderedlist"><li class="listitem"><p class="para">Make sure that your <kbd class="command">sendmail</KBD
> program
does not support the <a class="indexterm" name="AUTOID-22441"></A
><a class="indexterm" name="AUTOID-22443"></A
><a class="indexterm" name="AUTOID-22445"></A
>
<kbd class="command">debug</KBD
>,
<kbd class="command">wiz</KBD
>, or <kbd class="command">kill</KBD
> commands. You can test your <kbd class="command">sendmail</KBD
> with the following
command sequence:</P
><blockquote class="screen"><pre class="screen">% <b class="emphasis.bold">telnet localhost smtp </B
>
Connected to localhost. 
Escape character is &quot;^]&quot;. 
220 prose.cambridge.ma.us Sendmail 5.52 ready at Mon, 2 Jul 90 
15:57:29 EDT 
<b class="emphasis.bold">wiz </B
>
500 Command unrecognized 
<b class="emphasis.bold">debug</B
> 
500 Command unrecognized 
<b class="emphasis.bold">kill </B
>
500 Command unrecognized 
<b class="emphasis.bold">quit </B
>
221 prose.cambridge.ma.us 
closing connection 
Connection closed by foreign host 
%</PRE
></BLOCKQUOTE
><p class="para">The command <kbd class="command">telnet localhost smtp</KBD
> opens up a <span class="acronym">TCP</SPAN
>
connection between your terminal and the <kbd class="command">smtp</KBD
> part of your local
computer (which always has the alias <kbd class="command">localhost</KBD
>). You are then able
to type commands to your <kbd class="command">sendmail</KBD
>'s command interpreter.
If your <kbd class="command">sendmail</KBD
> responds to the <kbd class="command">debug</KBD
> or <kbd class="command">wiz</KBD
> command with any of
the following messages&nbsp;- or any message other than &quot;command
unrecognized&quot;&nbsp;- replace the version of <kbd class="command">sendmail</KBD
>
that you are running (but see #4 below):</P
><blockquote class="screen"><pre class="screen">200 Debug set 
200 Mother is dead 
500 Can't kill Mom 
200 Please pass, oh mighty wizard 
500 You are no wizard!</PRE
></BLOCKQUOTE
></LI
><li class="listitem"><p class="para"></P
><p class="para">Delete the &quot;<a class="indexterm" name="AUTOID-22471"></A
><a class="indexterm" name="AUTOID-22473"></A
><a class="indexterm" name="AUTOID-22476"></A
>
decode&quot;
aliases from the alias file. The decode alias is a single line that
looks like this:</P
><blockquote class="screen"><pre class="screen">decode: &quot;|/usr/bin/uudecode&quot;</PRE
></BLOCKQUOTE
><p class="para"><a class="indexterm" name="AUTOID-22481"></A
>The
decode alias allows mail to be sent directly to the <a class="indexterm" name="AUTOID-22485"></A
>
<kbd class="command">uudecode</KBD
> program. This ability has been shown
to be a security hole. Examine carefully every alias that points
to a file or program instead of a user account. Remember to run
newaliases after changing the <i class="filename">aliases</I
> file.</P
></LI
><li class="listitem"><p class="para">Make sure that your <i class="filename">aliases</I
>
file is protected so that it cannot be modified by people who are
not system administrators. Otherwise, people might add new aliases
that run programs, redirect email for system administrators, or
play other games. If your version of <kbd class="command">sendmail</KBD
> creates aliases.dir
and aliases.pag <i class="filename">dbm</I
> files, those files should
also be protected.</P
></LI
><li class="listitem"><p class="para">Make sure that the &quot;wizard&quot; password
is disabled in the <i class="filename">sendmail.cf</I
> file. If it is not, then a person
who knows the wizard password can connect to your computer's
<kbd class="command">sendmail</KBD
> daemon and start up a shell without logging in! If this
feature is enabled in your version of <kbd class="command">sendmail</KBD
>, you will note that
the wizard password is a line that begins with the letters OW (uppercase
O, uppercase W). For example: <a class="indexterm" name="AUTOID-22499"></A
></P
><blockquote class="screen"><pre class="screen"># Let the wizard do what she wants 
OWsitrVlWxktZ67 </PRE
></BLOCKQUOTE
><p class="para">If you find a line like this, change it to disallow the wizard password: </P
><blockquote class="screen"><pre class="screen"># Disallow wizard password: 
OW*</PRE
></BLOCKQUOTE
></LI
><li class="listitem"><p class="para">Make sure that you have the most recent
version of <kbd class="command">sendmail</KBD
> installed on your computer. Monitor the <span class="acronym">CERT</SPAN
>
mailing list for problems with <kbd class="command">sendmail</KBD
> and be prepared to upgrade
as soon as vulnerabilities are posted.  </P
></LI
></OL
><div class="sidebar"><h4 class="sidebar"><a class="title" name="AUTOID-22509">Stamp Out Phantom Mail!</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-22512"></A
><a class="indexterm" name="AUTOID-22514"></A
><a class="indexterm" name="AUTOID-22517"></A
>The <span class="acronym">UNIX</SPAN
> operating system
uses accounts without corresponding real users to perform many system
functions. Examples of these accounts include <i class="systemitem">uucp</I
>, <i class="systemitem">news</I
>,
and <i class="systemitem">root</I
>. Unfortunately,
the mail system will happily receive email for these users.</P
><p class="para">Email delivered to one of these accounts normally goes only
to a mail file. There, it resides in your <i class="filename">/var/spool/mail</I
>
directory until it is finally read. On some systems, there is mail
waiting for users with the names news or ingres that is more than
five years old.</P
><p class="para">Is this a problem? Absolutely:</P
><ul class="itemizedlist"><li class="listitem"><p class="para">These mail files can grow to be megabytes long,
consuming valuable system resources.</P
></LI
><li class="listitem"><p class="para">Many programs that run autonomously will send mail
to an address such as news or uucp when they encounter a problem.
If this mail is not monitored by the system administrator, problems
can go undiagnosed.</P
></LI
></UL
><p class="para">You can
avoid the problem of phantom mail by creating mail aliases for all
of your system, nonuser accounts. To make things easy for future
system administrators, you should put these aliases at the beginning
of your aliases file. For example:</P
><blockquote class="screen"><pre class="screen">#
# System aliases
#

root:           simsong
Postmaster:     root
usenet:         root
news:           root
agent:          root
sybase:         root
MAILER-DAEMON:  postmaster</PRE
></BLOCKQUOTE
></DIV
><blockquote class="note"><p class="para"><strong>NOTE:</STRONG
> When security flaws are announced, potential intruders
are often much quicker to attack than system administrators are
to upgrade. We advise you to upgrade as quickly as possible. Sites
have been attacked within six hours of the release of a <span class="acronym">CERT</SPAN
>
advisory.</P
></BLOCKQUOTE
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PUIS-CHP-17-SECT-3.4.3">17.3.4.3 Improving the security of Berkeley sendmail V8</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-22540"></A
>If
you are intent on using Berkeley <kbd class="command">sendmail</KBD
> for your mail server,
you can still improve your security by using <kbd class="command">sendmail</KBD
> Version 8.
If you are not running <kbd class="command">sendmail</KBD
> Version 8, then you are probably
running Version 5; Versions 6 and 7 did not make it out the door.</P
><blockquote class="note"><p class="para"><strong>NOTE:</STRONG
> Be sure that you track the current version of <i class="filename">sendmail</I
>,
and obtain new versions as necessary. New security-related bugs
are (seemingly) constantly being discovered in <i class="filename">sendmail</I
>.
If you do not keep up, your site may be compromised!</P
></BLOCKQUOTE
><p class="para">There are well-known vulnerabilities, with exploit scripts,
in most older versions of <kbd class="command">sendmail</KBD
>, including versions provided
by many vendors. Besides containing numerous bug fixes over previous
versions of <kbd class="command">sendmail</KBD
>, Version 8 offers a variety of &quot;security
options&quot; that can be enabled by inserting a statement in
your <i class="filename">sendmail.cf </I
>configuration file. Many of
these options are designed to control the release of information
about your internal organization on the Internet.[13]
These options are summarized in <a class="xref" href="#PUIS-CHP-17-TAB-1" title="Security Options in Version 8 Sendmail">Table 17.1</A
>:</P
><blockquote class="footnote"><p class="para">[13] We recommend
that you read the security chapter in Sendmail by Bryan Costales
et al. (O'Reilly &amp; Associates, 1993) for additional
information.</P
></BLOCKQUOTE
><table class="table"><caption class="table"><a class="title" name="PUIS-CHP-17-TAB-1">Table 17.1: Security Options
in Version 8 Sendmail</A
></CAPTION
><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1"><p class="para">Option</P
></TH
><th class="entry" align="LEFT" rowspan="1" colspan="1"><p class="para">Effect</P
></TH
><th class="entry" align="LEFT" rowspan="1" colspan="1"><p class="para">Purpose</P
></TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><a class="indexterm" name="AUTOID-22575"></A
><kbd class="command">novrfy</KBD
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Disables VRFY command.</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">VRFY can be used by outsiders to determine
the names of valid users; use <i class="filename">novrfy</I
> to disable
this command.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><a class="indexterm" name="AUTOID-22586"></A
><i class="filename">noexpn</I
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Disables EXPN command.</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">EXPN reveals the actual delivery addresses
of mail aliases and mailing lists; <i class="filename">noexpn</I
> disables
this command.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><a class="indexterm" name="AUTOID-22597"></A
><kbd class="command">needmailhelo</KBD
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Requires HELO before a MAIL command.</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Refuses mail unless the sending site
has properly identified itself.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><a class="indexterm" name="AUTOID-22607"></A
><kbd class="command">needvrfyhelo</KBD
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Requires HELO before VRFY command.</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Allows the use of the VRFY command, but
only after the network user has identified himself.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><a class="indexterm" name="AUTOID-22617"></A
><kbd class="command">needexpnhelo</KBD
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Requires HELO before EXPN command.</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Allows use of the EXPN command, but only
after the network user has identified himself.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><a class="indexterm" name="AUTOID-22627"></A
><kbd class="command">restrictmailq</KBD
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Restricts use of <i class="filename">mailq </I
>command.</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">If set, allows only users who belong
to the group that owns the mail queue directory to view the mail
queue. This restriction can prevent others from monitoring mail
that is exchanged between your computer and the outside world.</P
></TD
></TR
></TBODY
></TABLE
><p class="para">You can increase the logging level of sendmail to level 9
by inserting the line &quot;OL9&quot; in your <i class="filename">sendmail.cf</I
>
file, and we recommend that you do so; higher levels are used for
debugging and do not serve any obvious security purpose. This will
log lots of interesting information to <i class="filename"><a class="indexterm" name="AUTOID-22638"></A
><a class="indexterm" name="AUTOID-22640"></A
>syslog</I
>. Be
sure that your <i class="filename">syslog.conf</I
> file is configured
so that this information is written to a reasonable place, and be
sure to check the logs.</P
><p class="para">There have been a number of problems with addresses that send
mail to programs. This should be disabled, if not needed, by setting
the <i class="filename">progmailer </I
>to a program such as <i class="filename">/bin/false</I
>.
If you do need progmailer functionality, use smrsh (bundled with
8.7.x).</P
><p class="para">Here is an example of when you might use the security options.
Suppose that you have a company-wide alias such as all or marketing,
and that you wish to prevent outsiders (such as recruiters) from
learning the email addresses of people on these mailing lists. At
the same time, you may wish to prevent outsiders from learning the
names of valid accounts on your system, to avoid accepting email
from sites that do not properly identify themselves, and to prevent
employees from spying on another's email correspondence.
In this case, you would insert the following line into your <i class="filename">sendmail.cf
 </I
>file; note that the &quot;O&quot; is required
at the beginning of the Option line.</P
><blockquote class="screen"><pre class="screen">Onovrfy,noexpn,needmailhelo,restrictmailq</PRE
></BLOCKQUOTE
><p class="para">We recommend that you use this setting unless you have a specific
reason for divulging your internal account information to the Internet
at large. Be aware, though, that sendmail's <a class="indexterm" name="AUTOID-22651"></A
>
<span class="acronym">VERB</SPAN
> (verbose)
command will still be active, which may still be used by attackers
to gain insight into your vulnerabilities. The <span class="acronym">VERB</SPAN
>
command cannot be easily disabled.</P
><p class="para">Note that if you disable the <a class="indexterm" name="AUTOID-22656"></A
>
finger
command and also turn off the <a class="indexterm" name="AUTOID-22658"></A
>
<span class="acronym">VRFY</SPAN
>
option in your mailer, you can make it difficult for someone outside
your site to determine a valid email address for a user that may
be at your site. You should probably set up some form of modified
<i class="filename">finger </I
>service in this case to respond with
information about how to obtain a valid email address.<a class="indexterm" name="AUTOID-22662"></A
><a class="indexterm" name="AUTOID-22664"></A
><a class="indexterm" name="AUTOID-22667"></A
><a class="indexterm" name="AUTOID-22669"></A
></P
></DIV
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PUIS-CHP-17-SECT-3.5">17.3.5 TACACS (UDP Port 49)</A
></H3
><p class="para"><span class="acronym">TACACS</SPAN
><a class="indexterm" name="AUTOID-22675"></A
><a class="indexterm" name="AUTOID-22677"></A
><a class="indexterm" name="AUTOID-22680"></A
>
is the
<span class="acronym">TAC</SPAN
> Access Control Server protocol. It is a protocol
that is used to authenticate logins to terminal servers.</P
><p class="para"><span class="acronym">TACACS</SPAN
> defines a set of packet types that
can be sent from the terminal server to an authentication server.
The <span class="acronym">LOGIN</SPAN
> packet is a query indicating that a
user wishes to log in to the terminal server. The <span class="acronym">TACACS</SPAN
>
server examines the username and the password that are present in
the <span class="acronym">LOGIN</SPAN
> packet and sends back an <span class="acronym">ANSWER</SPAN
>
packet that either accepts the login or rejects it.</P
><p class="para">The <span class="acronym">TACACS</SPAN
> and <a class="indexterm" name="AUTOID-22692"></A
>
<span class="acronym">XTACACS</SPAN
> (Extended <span class="acronym">TACACS</SPAN
>)
support a variety of additional packets, which allow the terminal
server to notify the host when users connect, hang up, log in, log
out, and switch into <span class="acronym">SLIP</SPAN
> mode.</P
><p class="para">Passwords are not encrypted with <span class="acronym">TACACS</SPAN
>.
Thus, they are susceptible to packet sniffing.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PUIS-CHP-17-SECT-3.6">17.3.6 Domain Name System (DNS) (TCP and UDP Port 53)</A
></H3
><p class="para">The <a class="indexterm" name="AUTOID-22703"></A
><a class="indexterm" name="AUTOID-22705"></A
>
Domain Name System (<span class="acronym">DNS</SPAN
>)
is a distributed database that is used so that computers may determine
IP addresses from hostnames, determine where to deliver mail within
an organization, and determine a hostname from an IP address. The
process of using this distributed system is called <i class="firstterm"><a class="indexterm" name="AUTOID-22711"></A
>
resolving.</I
></P
><p class="para">When <span class="acronym">DNS</SPAN
> looks up a hostname (or other
information), the computer performing the lookup contacts one or
more nameservers, seeking records that match the hostname that is
currently being resolved.[14]
One or more nameserver
records can be returned in response to a name lookup. <a class="xref" href="#PUIS-CHP-17-TAB-2" title="DNS-supported Record Types">Table 17.2</A
>
lists some of the kinds of records that are supported:</P
><blockquote class="footnote"><p class="para">[14] Most UNIX DNS implementations use
a file called <i class="filename">/etc/resolv.conf </I
>to specify the
IP addresses of the nameservers that should be queried. Further,
a default domain can be specified.</P
></BLOCKQUOTE
><table class="table"><caption class="table"><a class="title" name="PUIS-CHP-17-TAB-2">Table 17.2: DNS-supported
Record Types</A
></CAPTION
><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1"><p class="para">Record Type</P
></TH
><th class="entry" align="LEFT" rowspan="1" colspan="1"><p class="para">Purpose</P
></TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">A</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Authoritative address. For the IN domain,
this is an IP address.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">AAAA</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">IP version 6 authoritative address.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">CNAME</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Canonical name of an alias for a host.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">PTR</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Pointer record; maps IP addresses to
a hostname (for IP host).</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><a class="indexterm" name="AUTOID-22754"></A
>MX</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Mail exchange; specifies a different
computer that should actually receive mail destined for this host.</P
></TD
></TR
></TBODY
></TABLE
><p class="para">For example, using <span class="acronym">DNS</SPAN
>, a computer on the
Internet might look up the name <i class="systemitem">www.cs.purdue.edu</I
> and receive an A record indicating that the computer's
IP address is 128.10.19.20. An MX query about the address cs.purdue.edu
might return a record indicating that mail for that address should
actually be delivered to the machine arthur.cs.purdue.edu. You can
have multiple MX records for robustness; if the first host is unavailable,
the program attempting to deliver your electronic mail will try
the second, and then the third. Of course, a program trying to deliver
email would then have to resolve each of the MX hostnames to determine
that computer's IP address.</P
><p class="para"><span class="acronym">DNS</SPAN
> also makes provision for mapping IP
addresses back to hostnames. This reverse translation is accomplished
with a special domain called IN-ADDR.ARPA, which is populated exclusively
by <span class="acronym">PTR</SPAN
> records. In this example, attempting to
resolve the address 20.19.10.128. IN-ADDR.ARPA would return a <span class="acronym">PTR</SPAN
>
record pointing to the hostname, which is lucan.cs.purdue.edu (the
<span class="acronym">CNAME</SPAN
> of www.cs.purdue.edu).</P
><p class="para">Besides individual hostname resolutions, <span class="acronym">DNS</SPAN
>
also provides a system for downloading a copy of the entire database
from a nameserver. This process is called a <i class="firstterm"><a class="indexterm" name="AUTOID-22769"></A
><a class="indexterm" name="AUTOID-22771"></A
>zone
transfer</I
>, and it is the process that secondary servers
use to obtain a copy of the primary server's database.</P
><p class="para"><span class="acronym">DNS</SPAN
> communicates over both <span class="acronym">UDP</SPAN
>
and <span class="acronym">TCP</SPAN
>, using the different protocols for different
purposes. Because <span class="acronym">UDP</SPAN
> is a quick, packet-based
protocol that allows for limited data transfer, it is used for the
actual process of hostname resolution. <span class="acronym">TCP</SPAN
>, meanwhile,
is used for transactions that require large, reliable, and sustained
data transfer&nbsp;- that is, zone transfers.</P
><div class="sect3"><h4 class="sect3"><a class="title" name="PUIS-CHP-17-SECT-3.6.1">17.3.6.1 DNS zone transfers</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-22783"></A
>Zone
transfers can be a security risk, as they potentially give outsiders
a complete list of all of an organization's computers connected
to the internal network. Many sites choose to allow <span class="acronym">UDP</SPAN
>
<span class="acronym">DNS</SPAN
> packets through their firewalls and routers,
but explicitly block <span class="acronym">DNS</SPAN
> zone transfers originating
at external sites. This design is a compromise between safety and
usability: it allows outsiders to determine the IP addresses of
each internal computer, but only if the computer's name
is already known.</P
><p class="para">You can block zone transfers with a router that can screen
packets, by blocking incoming <span class="acronym">TCP</SPAN
> connections
on port 53. Some versions of the Berkeley-named nameserver allow
you to place an <a class="indexterm" name="AUTOID-22791"></A
>
<i class="filename">xfrnets</I
>
directive in the <a class="indexterm" name="AUTOID-22794"></A
><a class="indexterm" name="AUTOID-22796"></A
>
<i class="filename">/etc/named.boot</I
>
file. If this option is specified, zone transfers will only be permitted
from the hosts listed on the <kbd class="command">xfernets</KBD
> line. This option is useful
if you wish to allow zone transfers to a secondary nameserver that
is not within your organization, but you don't want to
allow zone transfers to anyone else.</P
><p class="para">For example, if your site operates a single domain, bigcorp.com,
and you have a secondary nameserver at IP address 204.17.199.40,
you might have the following <i class="filename">/etc/named.boot</I
> file:</P
><blockquote class="screen"><pre class="screen">; BigCorp's /etc/named.boot
; 
directory		/var/named
;
primary		bigcorp.com		  named.bigcorp
primary		199.17.204.in-addr.arpa		  named.204.17.199
cache		.		  root.ca
xfrnets		204.17.199.40 <a class="indexterm" name="AUTOID-22804"></A
><a class="indexterm" name="AUTOID-22806"></A
><a class="indexterm" name="AUTOID-22809"></A
>
 </PRE
></BLOCKQUOTE
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PUIS-CHP-17-SECT-3.6.2">17.3.6.2 DNS nameserver attacks</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-22815"></A
><a class="indexterm" name="AUTOID-22818"></A
><a class="indexterm" name="AUTOID-22820"></A
>Because
many <span class="acronym">UNIX</SPAN
> applications use hostnames as the basis
of access control lists, an attacker who can gain control of your
<span class="acronym">DNS</SPAN
> nameserver or corrupt its contents can use
that to break into your systems.</P
><p class="para">There are two fundamental ways that an attacker can cause
a nameserver to serve incorrect information:</P
><ol class="orderedlist"><li class="listitem"><p class="para">Incorrect information can be fraudulently
loaded into your nameserver's cache over the network, as
a false reply to a query.</P
></LI
><li class="listitem"><p class="para">An attacker can change the nameserver's
configuration files on the computer where your nameserver resides.</P
></LI
></OL
><p class="para">If your nameserver has contact with the outside network, there
is a possibility that attackers can exploit a programming bug or
a configuration error to load your nameserver with erroneous information.
The best way to protect your nameserver from these kinds of attacks
is to isolate it from the outside network, so that no contact is
made. If you have a firewall, you can achieve this isolation by
running two nameservers: one in front of the <a class="indexterm" name="AUTOID-22832"></A
>
firewall, and one behind it. The nameserver in front
of the firewall contains only the names and IP addresses of your
gate computer; the nameserver behind the firewall contains the names
and IP addresses of all of your internal hosts. If you couple these
nameservers with static routing tables, damaging information will
not likely find its way into your nameservers.</P
><p class="para">To change your configuration files, an attacker must have
access to the filesystem of the computer on which the nameserver
is running and be able to modify the files. After the files are
modified, the nameserver must be restarted (by sending it a <kbd class="command">kill -HUP</KBD
>
signal). As the nameserver must run as superuser, an attacker would
need to have superuser access on the server machine to carry out
this attack. Unfortunately, by having control of your nameserver,
a skillful attacker could use control over the nameserver to parlay
control of a single machine into control of your entire network.
Furthermore, if the attacker does not have <i class="filename">root</I
> but can modify the
nameserver files, then he can simply wait until the nameserver is
restarted by somebody else, or until the system crashes and every
program is restarted.</P
><p class="para">You can minimize the possibility of an attacker modifying
your nameserver by following these recommendations:</P
><ul class="itemizedlist"><li class="listitem"><p class="para">Run your nameserver on a special computer
that does not have user accounts.</P
></LI
><li class="listitem"><p class="para">If you must run the nameserver on a computer that
is used by ordinary users, make sure that the nameserver's
files are all owned by <i class="filename">root</I
> and have their protection mode set to
444 or 400 (depending on your site's policy). Any directories
that are used to store nameserver files should be owned by root
and have their protection mode set to 755 or 700 (again, depending
on your site's policy). And all parent directories of those
directories should be owned by root, mode 755 or 700.</P
></LI
><li class="listitem"><p class="para">Remember, there are <em class="emphasis">many</EM
> files
that are used by the nameserver. For example, the Berkeley <kbd class="command"><a class="indexterm" name="AUTOID-22849"></A
><a class="indexterm" name="AUTOID-22851"></A
><a class="indexterm" name="AUTOID-22853"></A
>named</KBD
> nameserver (by far the most common
on <span class="acronym">UNIX</SPAN
> systems) first looks at the file <i class="filename">/etc/named.boot</I
>when it starts up. This file specifies other files and
other directories that may be located anywhere on your computer.
Be sure that all of these files are properly protected.</P
></LI
><li class="listitem"><p class="para">If you know of a specific site that is attempting
to attack your nameserver, you can use <span class="acronym">BIND</SPAN
>'s
<a class="indexterm" name="AUTOID-22861"></A
>
bogusns directive to prevent
the program from sending nameserver queries to that host.</P
></LI
></UL
><p class="para">You can further protect yourself from nameserver attacks by
using IP addresses in your access control lists, rather than by
using hostnames. Unfortunately, several significant programs do
not allow the use of IP addresses. For example, the Solaris <i class="filename">rlogind/rshd</I
>
does not allow you to specify an IP address in the <i class="filename">/etc/hosts.equiv</I
>
file or the <i class="filename">.rhosts</I
> file. We believe that vendors should modify
their software to permit an IP address to be specified wherever
hostnames are currently allowed.<a class="indexterm" name="AUTOID-22867"></A
><a class="indexterm" name="AUTOID-22870"></A
><a class="indexterm" name="AUTOID-22872"></A
><a class="indexterm" name="AUTOID-22875"></A
></P
></DIV
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PUIS-CHP-17-SECT-3.7">17.3.7 Trivial File Transfer Protocol (TFTP) (UDP Port 69)</A
></H3
><p class="para">The <a class="indexterm" name="AUTOID-22880"></A
><a class="indexterm" name="AUTOID-22882"></A
><a class="indexterm" name="AUTOID-22884"></A
>
Trivial File Transfer Protocol (<span class="acronym">TFTP</SPAN
>)
is a <span class="acronym">UDP</SPAN
>-based file-transfer program that provides
no security. There is a set of files that the <span class="acronym">TFTP</SPAN
>
program is allowed to transmit from your computer, and the program
will transmit them to anybody on the Internet who asks for them.
One of the main uses of <span class="acronym">TFTP</SPAN
> is to allow workstations
to boot over the network; the <span class="acronym">TFTP</SPAN
> protocol is
simple enough to be programmed into a small read-only memory chip.</P
><p class="para">Because <span class="acronym">TFTP</SPAN
> has no security, <a class="indexterm" name="AUTOID-22895"></A
>
<kbd class="command">tftpd</KBD
>, the <span class="acronym">TFTP</SPAN
> daemon, is
normally restricted so that it can transfer files only to or from
a certain directory. Unfortunately, many early versions of <kbd class="command">tftpd</KBD
>
had no such restriction. For example, versions of the <a class="indexterm" name="AUTOID-22900"></A
>
SunOS operating systems prior
to Release 4.0 did not restrict file transfer from the <span class="acronym">TFTP</SPAN
>
program.</P
><p class="para">You can test your version of <kbd class="command">tftpd</KBD
> for this restriction with
the following sequence:</P
><blockquote class="screen"><pre class="screen">% <b class="emphasis.bold">tftp localhost </B
>
tftp&gt; <b class="emphasis.bold">get /etc/passwd tmp </B
>
Error code 1: File not found 
tftp&gt; <b class="emphasis.bold">quit </B
>
%</PRE
></BLOCKQUOTE
><p class="para">If <kbd class="command">tftp</KBD
> does not respond with &quot;Error code 1: File
not found,&quot; or simply hangs with no message, then get a
current version of the program.</P
><p class="para">On <a class="indexterm" name="AUTOID-22913"></A
><a class="indexterm" name="AUTOID-22916"></A
>
<span class="acronym">AIX</SPAN
>, <kbd class="command">tftp</KBD
> access
can be restricted through the use of the<i class="filename"> /etc/tftpaccess.ctl</I
>
file.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PUIS-CHP-17-SECT-3.8">17.3.8 finger (TCP Port 79)</A
></H3
><p class="para">The <a class="indexterm" name="AUTOID-22926"></A
>
<kbd class="command">finger</KBD
>
program has two uses:</P
><ul class="itemizedlist"><li class="listitem"><p class="para">If you run <kbd class="command">finger</KBD
> with no arguments,
the program prints the username, full name, location, login time,
and office telephone number of every user currently logged into
your system (assuming that this information is stored in the <i class="filename">/etc/passwd</I
>
file).</P
></LI
><li class="listitem"><p class="para">If you run <kbd class="command">finger</KBD
> with a name argument, the program
searches through the <i class="filename">/etc/passwd</I
> file and prints
detailed information for every user with a first name, last name,
or username that matches the name you specified.</P
></LI
></UL
><p class="para">Normally, <kbd class="command">finger</KBD
> runs on the local machine. However, you can
find out who is logged onto a remote machine (in this case, a machine
at <span class="acronym">MIT</SPAN
>) by typing:</P
><blockquote class="screen"><pre class="screen">% finger @media-lab.media.mit.edu</PRE
></BLOCKQUOTE
><p class="para">To look up a specific user's <kbd class="command">finger</KBD
> entry on this
machine, you might type:</P
><blockquote class="screen"><pre class="screen">% finger gandalf@media-lab.media.mit.edu</PRE
></BLOCKQUOTE
><p class="para">The <a class="indexterm" name="AUTOID-22946"></A
>
<i class="filename">/etc/fingerd</I
>
program implements the network <kbd class="command">finger</KBD
> protocol, which makes <kbd class="command">finger</KBD
>
service available to anybody on the network.</P
><p class="para"><kbd class="command">finger</KBD
> provides a simple, easy-to-use system for making personal
information (like telephone numbers) available to other people.
Novice users are often surprised, however, that information that
is available on their local machine is also available to anyone
on any network to which their local machine is connected. Thus,
users should be cautioned to think twice about the information they
store using the <kbd class="command">chfn</KBD
> command, and in their files printed by <kbd class="command">finger</KBD
>.
<kbd class="command">finger</KBD
> makes it easy for intruders to get a list of the users on
your system, which dramatically increases the intruders'
chances of breaking into your system.</P
><div class="sect3"><h4 class="sect3"><a class="title" name="PUIS-CHP-17-SECT-3.8.1">17.3.8.1 The .plan and .project files</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-22961"></A
><a class="indexterm" name="AUTOID-22963"></A
>Most
versions of the <span class="acronym">UNIX</SPAN
> <kbd class="command">finger</KBD
> program display the
contents of the <i class="filename">.plan</I
> and <i class="filename">.project</I
> files in
a person's home directory when that person is &quot;fingered.&quot;
On older versions of <span class="acronym">UNIX</SPAN
>, the finger daemon
ran as root. As a result, an intrepid user could read the contents
of any file on the system by making her .plan a symbolic link to
that file, and then running <i class="filename">finger</I
> against
her own account.</P
><p class="para">One easy way that you can check for this is to create a <i class="filename">.plan</I
>
file and change its file mode to 000. Then run finger against your
own account. If you see the contents of your <i class="filename">.plan</I
> file, then your
version of <kbd class="command">fingerd</KBD
> is unsecure.</P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PUIS-CHP-17-SECT-3.8.2">17.3.8.2 Disabling finger</A
></H4
><p class="para">The <a class="indexterm" name="AUTOID-22978"></A
><a class="indexterm" name="AUTOID-22981"></A
><a class="indexterm" name="AUTOID-22984"></A
>
<kbd class="command">finger</KBD
>
system reveals information that could be used as the basis for a
social engineering attack. For example, an attacker could &quot;finger&quot;
a user on the system, determine their name and office number, then
call up the system operator and say &quot;Hi, this is Jack Smith.
I work in office E15, but I'm at home today. I've
forgotten my password; could you please change my password to foo*bar
so that I can log on?&quot;</P
><p class="para">Many system administrators choose to disable the <kbd class="command">finger</KBD
> system.
There are two ways that you can do this:</P
><ul class="itemizedlist"><li class="listitem"><p class="para">You can remove (or comment out) the
<kbd class="command">finger</KBD
> server line in the file <i class="filename">/etc/inetd.conf</I
>.
This change will cause people trying to <kbd class="command">finger</KBD
> your site to receive
a &quot;Connection refused&quot; error. Disabling <i class="filename">finger</I
>
in this way can cause problems for trying to determine mail addresses
or phone numbers. Outsiders may be attempting to contact you to
warn you that your site has been broken into by others. Therefore,
completely disabling <kbd class="command">finger</KBD
> in this way might actually decrease
your overall security, in addition to causing an overall inconvenience
for everybody.</P
></LI
><li class="listitem"><p class="para">You can replace the <kbd class="command">finger</KBD
> server with a shell script
that prints a message instructing people how to contact your site.
For example, you might use a script that looks like this:</P
><blockquote class="screen"><pre class="screen">#!/bin/sh
#
/bin/cat &lt;&lt; 'XX'
Welcome to Big Whammix Inc.

For information on contacting a specific employee, please call our
company operator at 1-999-555-1212 or send electronic mail to
the address postmaster@whammix.com

Thank you.

XX
exit 0</PRE
></BLOCKQUOTE
><p class="para">Store this script in an executable file, such as <i class="filename">/usr/local/etc/no_finger.</I
>
Then in the file <i class="filename">/etc/inetd.conf,</I
> replace the
normal finger entry with this line:</P
><blockquote class="screen"><pre class="screen">finger  stream  tcp   nowait  nobody /usr/local/etc/no_finger no_finger</PRE
></BLOCKQUOTE
><p class="para">Remember to restart <kbd class="command">inetd</KBD
>.</P
></LI
></UL
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PUIS-CHP-17-SECT-3.8.3">17.3.8.3 Replacing finger</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-23011"></A
>As an alternative
to <kbd class="command">finger</KBD
>, you can use the <kbd class="command">ph</KBD
> (phone book) server. This server allows
you to place information into a database, and specify which information
should be returned for queries originating from inside and outside
your network.</P
><p class="para"><a class="indexterm" name="AUTOID-23016"></A
>You can download the <kbd class="command">ph</KBD
> server from <a class="systemitem.url" href="../../../WebStripper/protected.html#link=ftp://vixen.cso.uiuc.edu/pub/ph.tar.gz.">ftp://vixen.cso.uiuc.edu/pub/ph.tar.gz.</A
></P
></DIV
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PUIS-CHP-17-SECT-3.9">17.3.9 HyperText Transfer Protocol (HTTP) (TCP Port 80)</A
></H3
><p class="para">The <a class="indexterm" name="AUTOID-23023"></A
><a class="indexterm" name="AUTOID-23025"></A
><a class="indexterm" name="AUTOID-23029"></A
>
Hypertext Transfer Protocol is the protocol that
is used to request and receive documents from servers on the World
Wide Web (<span class="acronym">WWW</SPAN
>). Access to the World Wide Web
is one of the driving forces behind the growth of the Internet,
and many sites that have Internet connectivity will be pressured
to provide both client applications and <span class="acronym">WWW</SPAN
> servers
for their users.</P
><p class="para">One of the reasons for the success of <span class="acronym">HTTP</SPAN
>
is its simplicity. When a client contacts a <span class="acronym">WWW</SPAN
>
server, the client asks for a filename; the server responds with
a <span class="acronym">MIME</SPAN
> document formatted in either plain <span class="acronym">ASCII</SPAN
>
or <span class="acronym">HTML</SPAN
> (HyperText Markup Language). The document
is then displayed.[15]</P
><blockquote class="footnote"><p class="para">[15] HTML is a simple use of SGML (Standard
Generalized Markup Language).</P
></BLOCKQUOTE
><p class="para"><span class="acronym">WWW</SPAN
> browsers can implement as much (or
as little) of <span class="acronym">HTML</SPAN
> as they wish; the documents
displayed will still be viewable. <span class="acronym">HTML</SPAN
> documents
can have embedded tags for images (which are separately retrieved)
and for hypertext links to other documents. The servers are configured
so that a specified directory on the system (for example, <i class="filename">/usr/local/etc/httpd/htdocs)</I
>
corresponds with the root directory of the <span class="acronym">WWW</SPAN
>
client (for example, <a class="systemitem.url" href="../../../../../../../www.oreilly.com/">http://www.oreilly.com/</A
>).</P
><p class="para">Because there are many security considerations when setting
up a <span class="acronym">WWW</SPAN
> server and using a <span class="acronym">WWW</SPAN
>
client, we have written a whole chapter about them. See <a class="xref" href="ch18_01.htm" title="WWW Security">Chapter 18, <cite class="chapter">WWW Security</CITE
></A
>, for the complete story.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PUIS-CHP-17-SECT-3.10">17.3.10 Post Office Protocol (POP) (TCP Ports
109 and 110)</A
></H3
><p class="para">The <a class="indexterm" name="AUTOID-23056"></A
><a class="indexterm" name="AUTOID-23058"></A
><a class="indexterm" name="AUTOID-23062"></A
>
Post
Office Protocol (<span class="acronym">POP</SPAN
>) is a system that provides
users on client machines a way to retrieve their electronic mail&nbsp;- without
mounting a shared mail-spool directory using a remote file-access
protocol such as <span class="acronym">NFS</SPAN
>. <span class="acronym">POP</SPAN
>
allows users to access individual mail messages, to set limits on
the maximum length of the message that the client wishes to retrieve,
and to leave mail on the server until the message has been explicitly
deleted.</P
><p class="para"><span class="acronym">POP</SPAN
> requires that users authenticate themselves
before they can access their mail. There are at least three ways
to do this:</P
><ol class="orderedlist"><li class="listitem"><p class="para">You can use simple <a class="indexterm" name="AUTOID-23073"></A
>
passwords. This is by far the most
common way for <span class="acronym">POP</SPAN
> users to authenticate themselves
to <span class="acronym">POP</SPAN
> servers. Unfortunately, most <span class="acronym">POP</SPAN
>
clients use the same password for retrieving mail that they do for
unrestricted system access. As a result, the user's password
is a tempting target for an attacker armed with a packet sniffer.
And it's an easy target, as it is always sent properly,
it is always sent to the same port, and it is sent frequently&nbsp;- typically
every few minutes.</P
></LI
><li class="listitem"><p class="para">You can use <span class="acronym">POP</SPAN
>'s <a class="indexterm" name="AUTOID-23082"></A
>
<span class="acronym">APOP</SPAN
> option. Instead
of passwords, <span class="acronym">APOP</SPAN
> uses a simple challenge/response
system. It is described in <span class="acronym">RFC</SPAN
> 1725, the same
<span class="acronym">RFC</SPAN
> that describes <span class="acronym">POP3</SPAN
>.</P
><p class="para">When a client program connects to a <span class="acronym">POP3</SPAN
>
server, the server sends a banner that must include a unique timestamp
string located within a pair of angle-brackets. For example, the
<span class="acronym">UNIX</SPAN
> <span class="acronym">POP</SPAN
> server might return
the following:</P
><blockquote class="screen"><pre class="screen">+OK POP3 server ready &lt;1896.697170952@dbc.mtview.ca.us&gt;</PRE
></BLOCKQUOTE
><p class="para">When using simple passwords, the client program would next
send through the username and the password, like this:</P
><blockquote class="screen"><pre class="screen">+OK POP3 server ready &lt;1896.697170952@dbc.mtview.ca.us&gt;
<b class="emphasis.bold">user mrose</B
>
+OK Password required for mrose.
<b class="emphasis.bold">pass fooby$#</B
>
+OK maildrop has 1 message (369 octets)</PRE
></BLOCKQUOTE
><p class="para">With <span class="acronym">APOP</SPAN
>, the client program does not
send the <span class="acronym">USER</SPAN
> and <span class="acronym">PASS</SPAN
> commands;
instead, it sends an <span class="acronym">APOP</SPAN
> command that contains
the username and a 128-bit hexadecimal number that is the <a class="indexterm" name="AUTOID-23103"></A
>
MD5 hash code of
the timestamp (including the angle brackets) and a secret passphrase
that is known to both the user and the <span class="acronym">POP</SPAN
> server.
For example, the user might have the password tanstaaf. To determine
the appropriate MD5 code, the user's client program would
compute the MD5 hash of:</P
><blockquote class="screen"><pre class="screen">&lt;1896.697170952@dbc.mtview.ca.us&gt;tanstaaf</PRE
></BLOCKQUOTE
><p class="para">which is:</P
><blockquote class="screen"><pre class="screen">c4c9334bac560ecc979e58001b3e22fb</PRE
></BLOCKQUOTE
><p class="para">Thus, the <span class="acronym">APOP</SPAN
> message sent to the server
would be:</P
><blockquote class="screen"><pre class="screen"><b class="emphasis.bold">APOP mrose c4c9334bac560ecc979e58001b3e22fb</B
>
+OK maildrop has 1 message (369 octets)</PRE
></BLOCKQUOTE
><p class="para">Note that because the <span class="acronym">POP3</SPAN
> server must
know the shared secret, it should not be the same phrase as your
password.</P
></LI
><li class="listitem"><p class="para">You can use a version of <span class="acronym">POP</SPAN
>
that has been modified to work with Kerberos. (Kerberos is described
in <a class="xref" href="ch19_01.htm" title="RPC, NIS, NIS+,  and Kerberos">Chapter 19, <cite class="chapter">RPC, NIS, NIS+,  and Kerberos</CITE
></A
>.)</P
></LI
></OL
><p class="para">Note that both your <span class="acronym">POP</SPAN
> server and your
<span class="acronym">POP</SPAN
> client must support the authentication system
that you wish to use. For example, early popular Eudora email clients
only support traditional passwords, but later versions include support
for both <span class="acronym">APOP</SPAN
> and Kerberos.[16]</P
><blockquote class="footnote"><p class="para">[16] Actually,
Eudora doesn't support Kerberos directly. Instead, it uses
the Kclient application program that is available for both the Macintosh
and Windows.</P
></BLOCKQUOTE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PUIS-CHP-17-SECT-3.11">17.3.11 Sun RPC's portmapper (UDP and TCP Ports 111)</A
></H3
><p class="para">The <a class="indexterm" name="AUTOID-23129"></A
><a class="indexterm" name="AUTOID-23131"></A
>
portmapper program is used as part of Sun Microsystem's
Remote Procedure Call (<span class="acronym">RPC</SPAN
>) system to dynamically
assign the <span class="acronym">TCP</SPAN
> and <span class="acronym">UDP</SPAN
> ports
used for remote procedure calls. portmapper is thus similar to the
<kbd class="command">inetd</KBD
> daemon, in that it mediates communications
between network clients and network servers that may have security
problems.</P
><p class="para">The standard <span class="acronym">UNIX</SPAN
> portmapper assumes that
security will be handled by the servers, and therefore allows any
network client to communicate with any <span class="acronym">RPC</SPAN
> server.
You can improve security by using Wietse Venema's portmapper
replacement program, which can be obtained via anonymous <span class="acronym">FTP</SPAN
>
from the site <i class="filename">ftp.win.tue.nl /pub/security/portmap.shar</I
>.
This portmapper allows for improved logging, as well as access control
lists.</P
><p class="para">Many sites further restrict access to their portmappers by
setting their firewalls to block packets on port 111.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PUIS-CHP-17-SECT-3.12">17.3.12 Identification Protocol (auth) (TCP Port
113)</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-23147"></A
><a class="indexterm" name="AUTOID-23149"></A
>The <span class="acronym">TCP/IP</SPAN
> protocol is a
system for creating communication channels between computers, not
users. However, it is sometimes useful to know the name of the user
associated with a particular <span class="acronym">TCP/IP</SPAN
> connection.
For example, when somebody sends mail to your computer, you should
be able to verify that the username in the mail message's
&quot;<kbd class="command">From:</KBD
>&quot; field is actually the
name of the user who is sending the message.</P
><p class="para">The identification protocol gives you a way of addressing
this problem with a simple callback scheme. When a server wants
to know the &quot;real name&quot; of a person initiating
a <span class="acronym">TCP/IP</SPAN
> connection, it simply opens a connection
to the client machine's <kbd class="command"><a class="indexterm" name="AUTOID-23158"></A
>identd</KBD
> daemon and sends a description of the <span class="acronym">TCP/IP</SPAN
>
connection in progress; the remote machine sends a human-readable
representation of the user who is initiating the connection&nbsp;- usually
the user's username and the full name from the <i class="filename">/etc/passwd</I
>
file.</P
><p class="para">The identification protocol is usually not a very good approach
to network security, because it depends on the honesty of the computer
at the other end of the <span class="acronym">TCP/IP</SPAN
> connection. Thus,
if somebody is trying to break into your computer from another computer
that they have already gained control of, ident will not tell you
that person's name. On the other hand, it is useful for
organizations such as universities who want to track down the perpetrators
of simplistic, sophomoric email forgery attempts.</P
><p class="para">If an intruder has a normal account (no root privileges) that
he is using as a stepping stone to other hosts, running an ident
server may be very useful in tracking down the intruder. Sites that
have a reasonable number of users should run ident to help track
down accounts that have been compromised during an incident.</P
><p class="para">In general, the responses of ident queries are more useful
to the administrators of the site that sends the response than the
site that receives it. Thus, logging ident queries may not help
you, but can be a courtesy to others.</P
><p class="para">To make use of the identification protocol, you need to have
a server program that understands the protocol and knows to place
the callback. sendmail version 8 will do so, for instance, as will
<i class="filename">tcpwrapper</I
>.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PUIS-CHP-17-SECT-3.13">17.3.13 Network News Transport Protocol (NNTP)  (TCP Port
119)</A
></H3
><p class="para">The <a class="indexterm" name="AUTOID-23171"></A
><a class="indexterm" name="AUTOID-23173"></A
><a class="indexterm" name="AUTOID-23176"></A
><a class="indexterm" name="AUTOID-23179"></A
><a class="indexterm" name="AUTOID-23182"></A
>
Network
News Transport Protocol (<span class="acronym">NNTP</SPAN
>) is used by many
large sites to transport Usenet articles between news servers. The
protocol also allows users on distributed workstations to read news
and post messages to the Usenet.</P
><p class="para"><span class="acronym">NNTP</SPAN
> can be configured with an <a class="indexterm" name="AUTOID-23189"></A
><a class="indexterm" name="AUTOID-23192"></A
><a class="indexterm" name="AUTOID-23195"></A
>
access control list (<span class="acronym">ACL</SPAN
>)
to determine which computers are allowed to use which features.
The access control list is based on hostname; thus <span class="acronym">NNTP</SPAN
>'s
security can be bypassed through IP spoofing or through <span class="acronym">DNS</SPAN
>
attacks.</P
><p class="para">Under normal circumstances, a compromised <span class="acronym">NNTP</SPAN
>
server does not represent a serious security <a class="indexterm" name="AUTOID-23203"></A
>
threat&nbsp;- it simply means that
an unauthorized individual may be able to read or post Usenet articles
without permission. However, there are two potential circumstances
in which unauthorized use of <span class="acronym">NNTP</SPAN
> could cause
problems:</P
><ul class="itemizedlist"><li class="listitem"><p class="para">If you have special newsgroups for
your own organization's internal discussions, there is
a chance that a compromised <span class="acronym">NNTP</SPAN
> server could
reveal confidential information to outsiders.</P
></LI
><li class="listitem"><p class="para">If an outsider can post from your <span class="acronym">NNTP</SPAN
>
server, that outsider could post a message that is libelous, scandalous,
or offensive&nbsp;- potentially causing a liability for your organization.</P
></LI
></UL
><p class="para">You can protect your <span class="acronym">NNTP</SPAN
> server from these
forms of abuse with a good firewall.</P
><p class="para"><span class="acronym">INND</SPAN
><a class="indexterm" name="AUTOID-23218"></A
>
is an alternative Usenet news transport program written by Rich
Salz. If you are running <span class="acronym">INND</SPAN
>, make sure that
you have at least version 1.4 and have applied the relevant security
patches, or have a version higher than 1.4. Versions of <span class="acronym">INND</SPAN
>
prior to and including version 1.4 had a serious problem.[17]</P
><blockquote class="footnote"><p class="para">[17] For any software like this that you install, you should check
to be sure that you have the most current version.</P
></BLOCKQUOTE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PUIS-CHP-17-SECT-3.14">17.3.14 Network Time Protocol (NTP) (UDP Port 123)</A
></H3
><p class="para">The <a class="indexterm" name="AUTOID-23227"></A
><a class="indexterm" name="AUTOID-23229"></A
><a class="indexterm" name="AUTOID-23232"></A
><a class="indexterm" name="AUTOID-23234"></A
><a class="indexterm" name="AUTOID-23237"></A
><a class="indexterm" name="AUTOID-23241"></A
>
Network
Time Protocol (<span class="acronym">NTP</SPAN
>) is the latest in a long series
of protocols designed to let computers on a local or wide area network
figure out the current time. <span class="acronym">NTP</SPAN
> is a sophisticated
protocol that can take into account network delay and the existence
of different servers with different clocks. Nevertheless, <span class="acronym">NTP</SPAN
>
was not designed to resist attack, and several versions of <kbd class="command">ntpd</KBD
>,
the <span class="acronym">NTP</SPAN
> daemon, can be fooled into making significant
and erroneous changes to the system's clock.</P
><p class="para">A variety of problems can arise if an attacker can change
your system clock:</P
><ul class="itemizedlist"><li class="listitem"><p class="para">The attacker can attempt a <i class="firstterm"><a class="indexterm" name="AUTOID-23255"></A
><a class="indexterm" name="AUTOID-23257"></A
><a class="indexterm" name="AUTOID-23260"></A
><a class="indexterm" name="AUTOID-23263"></A
>
replay attack.</I
>
For example, if your system uses Kerberos, old Kerberos tickets
may work once again. If you use a time-based password system, old
passwords may work.</P
></LI
><li class="listitem"><p class="para">Your system <a class="indexterm" name="AUTOID-23268"></A
>
log
files will no longer accurately indicate the correct time at which
events took place. If your attacker can move the system's
clock far into the future, he or she might even be able to cause
your system to erase all of its log files as the result of a weekly
or monthly cleanup procedure.</P
></LI
><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-23273"></A
><a class="indexterm" name="AUTOID-23276"></A
>Batch jobs run from the <kbd class="command">cron</KBD
>
daemon may not be executed if your system's clock jumps
over the time specified in your <i class="filename">crontab</I
> file
or directory. This type of failure in your system's clock
may have an impact on your security.</P
></LI
></UL
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PUIS-CHP-17-SECT-3.15">17.3.15 Simple Network Management Protocol (SNMP) (UDP Ports
161 and 162)</A
></H3
><p class="para">The <a class="indexterm" name="AUTOID-23284"></A
><a class="indexterm" name="AUTOID-23287"></A
><a class="indexterm" name="AUTOID-23290"></A
><a class="indexterm" name="AUTOID-23292"></A
><a class="indexterm" name="AUTOID-23295"></A
>
Simple
Network Management Protocol (<span class="acronym">SNMP</SPAN
>) is a protocol
designed to allow the remote management of devices on your network.
To be managed with <span class="acronym">SNMP</SPAN
>, a device must be able
to receive packets over a network.</P
><p class="para"><span class="acronym">SNMP</SPAN
> allows for two types of management
messages:</P
><ul class="itemizedlist"><li class="listitem"><p class="para">Messages that monitor the current
status of the network (for example, the current load of a communications
link)</P
></LI
><li class="listitem"><p class="para">Messages that change the status of network devices
(for example, take a communications link up or down)</P
></LI
></UL
><p class="para"><span class="acronym">SNMP</SPAN
> can be of great value to attackers.
With carefully constructed <span class="acronym">SNMP</SPAN
> messages, an
attacker can learn the internal structure of your network, change
your network configuration, and even shut down your operations.
Although some <span class="acronym">SNMP</SPAN
> systems include provisions
for password-based security, others don't. <span class="acronym">SNMP</SPAN
>
version 2.0 was intended to include better security features, but
as this book goes to press, the standards committee is unable to
agree on the necessary features, so the prospects look bleak. Each
site must therefore judge the value of each particular <span class="acronym">SNMP</SPAN
>
service and weigh that value against the risk.</P
><blockquote class="note"><p class="para"><strong>NOTE:</STRONG
> If you use <span class="acronym">SNMP</SPAN
>, you should be sure
to change your <span class="acronym">SNMP</SPAN
> &quot;community&quot;
from &quot;public&quot; to some other value. When an <span class="acronym">SNMP</SPAN
>
monitoring program queries an <span class="acronym">SNMP</SPAN
> agent for
information, the monitoring program must provide the correct community
or the agent does not return any information. By changing your <span class="acronym">SNMP</SPAN
>
community from the default (public) to some other value, you can
limit the amount of information that an unknowledgeable attacker
can learn about your network.</P
></BLOCKQUOTE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PUIS-CHP-17-SECT-3.16">17.3.16 NEXTSTEP Window Server (NSWS) (TCP Port 178)</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-23324"></A
><a class="indexterm" name="AUTOID-23326"></A
><a class="indexterm" name="AUTOID-23328"></A
>

<span class="acronym">NEXTSTEP</SPAN
> applications (don't laugh;
there are still quite a few out there) use <span class="acronym">TCP</SPAN
>
connections on port 178 to communicate with the <span class="acronym">NEXTSTEP</SPAN
>
Display PostScript Window Server. An application that can connect
to the Window Server has total control of the workstation on which
that Window Server is running: as with X, the application can read
the contents of the screen and send events to other applications.
Furthermore, the application can use the Display PostScript Server
to read or write any file on the workstation to which the logged-in
user has access.</P
><p class="para">Current versions of the <span class="acronym">NEXTSTEP</SPAN
> Window
Server have a simplistic approach to security. There is no authentication
of incoming connections. The Window Server either accepts connections
from remote machines or it doesn't. Whether or not connections
are accepted is set by a check box in the <span class="acronym">NEXTSTEP</SPAN
>
Preference application. The preference is stored in the user's
&quot;defaults database,&quot; which means that it can be
toggled on by rogue applications without the user's knowledge.</P
><p class="para">Accept remote connections at your own risk.</P
><p class="para">If you place a computer running <span class="acronym">NEXTSTEP</SPAN
>
on the Internet, be sure that you place it behind a firewall, or
be absolutely sure that you do not allow remote applications to
connect to your Window Server.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PUIS-CHP-17-SECT-3.17">17.3.17 rexec (TCP Port 512)</A
></H3
><p class="para">The remote execution daemon <a class="indexterm" name="AUTOID-23343"></A
><a class="indexterm" name="AUTOID-23346"></A
><a class="indexterm" name="AUTOID-23349"></A
><a class="indexterm" name="AUTOID-23352"></A
><a class="indexterm" name="AUTOID-23354"></A
>
<i class="filename">/usr/sbin/rexecd</I
>
allows users to execute commands on other computers without having
to log into them. The client opens up a connection and transmits
a message that specifies the username, the password, and the name
of the command to execute. As rexecd does not use the trusted host
mechanism, it can be issued from any host on the network. However,
because <kbd class="command">rexecd</KBD
> requires that the password be transmitted over the
network, it is susceptible to the same password snooping as Telnet.</P
><p class="para">Unlike <kbd class="command">login</KBD
> and <kbd class="command">telnet</KBD
>, <kbd class="command">rexecd</KBD
> provides different error messages
for invalid usernames and invalid passwords. If the username that
the client program provides is invalid, <kbd class="command">rexecd</KBD
> returns the error
message &quot;Login incorrect.&quot; If the username is
correct and the password is wrong, however, <kbd class="command">rexecd</KBD
> returns the error
message &quot;Password incorrect.&quot;</P
><p class="para"><a class="indexterm" name="AUTOID-23367"></A
>Because of this
flaw, a cracker can use <kbd class="command">rexecd</KBD
> to probe your system for the names
of valid accounts and then to target those accounts for password
guessing attacks.</P
><p class="para">If you do not expect to use this service, disable it in <i class="filename">/etc/inetd.conf.</I
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PUIS-CHP-17-SECT-3.18">17.3.18 rlogin and rsh (TCP Ports 513 and 514)</A
></H3
><p class="para">The <a class="indexterm" name="AUTOID-23376"></A
><a class="indexterm" name="AUTOID-23379"></A
><a class="indexterm" name="AUTOID-23382"></A
><a class="indexterm" name="AUTOID-23384"></A
><a class="indexterm" name="AUTOID-23386"></A
>
<kbd class="command">rlogin</KBD
>
and <kbd class="command">rlogind</KBD
> programs provide remote terminal service that is similar
to <kbd class="command">telnet</KBD
>. <kbd class="command">rlogin</KBD
> is the client program, and <kbd class="command">rlogind</KBD
> is the server.
There are two important differences between <kbd class="command">rlogin</KBD
> and <kbd class="command">telnet</KBD
>:</P
><ol class="orderedlist"><li class="listitem"><p class="para"><kbd class="command">rlogind</KBD
> does not require that the user
type his or her username; the username is automatically transmitted
at the start of the connection.</P
></LI
><li class="listitem"><p class="para">If the connection is coming from a &quot;trusted
host&quot; or &quot;trusted user,&quot; (described in
the next section), <em class="emphasis">the receiving computer lets the user
log in without typing a password. </EM
></P
></LI
></OL
><p class="para"><i class="filename">rsh/rshd</I
> are similar to <i class="filename">rlogin/rlogind,</I
>
except that instead of logging the user in, they simply allow the
user to run a single command on the remote system. <kbd class="command">rsh</KBD
> is the client
program, while <kbd class="command">rshd</KBD
> is the server. <i class="filename">rsh/rshd</I
> only works
from trusted hosts or trusted users (described in the next section).</P
><p class="para"><kbd class="command">rlogin</KBD
> is used both with local area networks and over the
Internet. Unfortunately, it poses security problems in both environments.</P
><p class="para"><kbd class="command">rlogin</KBD
> and <kbd class="command">rsh</KBD
> are designed for communication only between
Berkeley <span class="acronym">UNIX</SPAN
> systems. Users who want to communicate
between <span class="acronym">UNIX</SPAN
> and <span class="acronym">TOPS</SPAN
>, <span class="acronym">VMS</SPAN
>,
or other kinds of systems should use the <kbd class="command">telnet</KBD
> protocol, not the
<kbd class="command">rlogin</KBD
> protocol.</P
><div class="sect3"><h4 class="sect3"><a class="title" name="PUIS-CHP-17-SECT-3.18.1">17.3.18.1 Trusted hosts and users</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-23422"></A
><a class="indexterm" name="AUTOID-23425"></A
><i class="firstterm">Trusted host</I
> is a term that was invented by the people who developed the
Berkeley <span class="acronym">UNIX</SPAN
> networking software. If one host
trusts another host, then any user who has the same username on
both hosts can log in from the trusted host to the other computer
without typing a password.</P
><p class="para"><i class="firstterm">Trusted</I
> users are like trusted hosts, except they are users,
not hosts. If you designate a user on another computer as a trusted
user for your account, then that user can log into your account
without typing a password.</P
><p class="para">The <span class="acronym">UNIX</SPAN
> system of trusted hosts allows
you to use the network to its fullest extent. <kbd class="command">rlogin</KBD
> lets you easily
jump from computer to computer, and rsh lets you run a command on
a remote computer without even having to log in!</P
><p class="para">Trust has a lot of advantages. In a small, closed environment,
computers often trust each other. Trust allows a user to provide
a password once, the first time he logs in, and then to use any
other machine in the cluster without having to provide a password
a second time. If one user sometimes uses the network to log into
an account at another organization, then that user can set up the
accounts to trust each other, thus speeding up the process of jumping
between the two organizations.</P
><p class="para">But trust is also dangerous, because there are numerous ways
that it can be compromised.</P
><blockquote class="note"><p class="para"><strong>NOTE:</STRONG
> The trusted-host mechanism uses IP addresses for authentication
and is thus vulnerable to IP spoofing (as well as to <span class="acronym">DNS</SPAN
>
attacks). Do not use trusted hosts in security-critical environments.</P
></BLOCKQUOTE
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PUIS-CHP-17-SECT-3.18.2">17.3.18.2 The problem with trusted hosts</A
></H4
><p class="para">Because you don't need to type your password when
you use <kbd class="command">rlogin</KBD
> to log into a computer from another machine that
is a trusted host, <kbd class="command">rlogin</KBD
> is usually less susceptible to eavesdropping
than <kbd class="command">telnet</KBD
>. However, trusted hosts introduce security problems
for two reasons: you can't always trust a host, and you
can't trust the users on that host.</P
><p class="para">If an attacker manages to break into the account of someone
who has an account on two computers&nbsp;- and the two computers
trust each other&nbsp;- then the person's account on
the second computer is also compromised. Having an attacker break
into the first computer is easier than it may sound. Most workstations
can be booted in single-user mode with relative ease. As the superuser,
the attacker can su to any account at all. If the server trusts
the workstation&nbsp;- perhaps to let users execute commands on
the server with <kbd class="command">rsh</KBD
>&nbsp;- then the attacker can use <kbd class="command">rlogin</KBD
> to
log into the server and thereby gain access to anybody's
files.</P
><p class="para">Although some workstations can be password protected against
being booted in single-user mode, this protection gives only an
illusion of security. In theory, an attacker could simply unplug
the current workstation and plug in her own. Portable <span class="acronym">UNIX</SPAN
>
workstations with Ethernet boards are available that weigh less
than four pounds. By reconfiguring her portable workstation's
network address and hostname, she could program it to masquerade
as any other computer on the local area network.</P
><p class="para">Another problem with trusted hosts involves <a class="indexterm" name="AUTOID-23452"></A
><a class="indexterm" name="AUTOID-23455"></A
>
<span class="acronym">NFS</SPAN
>.
Often, a user's home directory is exported with <span class="acronym">NFS</SPAN
>
to other machines. Someone who is able to write to the user's
home directory on that partition on a remote machine can add arbitrary
entries to the <i class="filename">.rhosts</I
> file. These additions then allow the attacker
to log in to that account on every machine that imports the home
directory.</P
><p class="para">Trusted hosts and trusted users have been responsible for
many security breaches in recent years. Trust causes breaches in
security to propagate quickly: If <i class="filename">charon</I
> trusts <i class="filename">ringworld</I
> and an
intruder breaks into <i class="filename">ringworld</I
>, then <i class="filename">charon</I
> is also compromised.
Nevertheless, system administrators frequently set up computers
as trusted clusters to enable users to take advantage of the network
environment with greater ease. Although there is technically no
reason to create these trusted clusters in a networked computing
environment, at many computing facilities administrators believe
that the benefits outweigh the risks.</P
><p class="para">Trusted hosts are also vulnerable to IP spoofing, a technique
in which one computer sends out IP packets that appear to come from
a different computer. Using a form of IP spoofing, users on one
host can masquerade, and appear to come from a second host. They
can then log into your computer, if the second host is trusted.</P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PUIS-CHP-17-SECT-3.18.3">17.3.18.3 Setting up trusted hosts</A
></H4
><p class="para">The <i class="filename">/etc/hosts.equiv</I
> file contains a list
of trusted hosts for your computer. Each line of the file lists
a different host. If you have Sun's <span class="acronym">NIS</SPAN
>
(or use another system that supports netgroups), you can also extend
or remove trust from entire groups of machines.</P
><p class="para">Any hostname listed in <i class="filename">hosts.equiv</I
> is considered trusted;
a user who connects with <kbd class="command">rlogin</KBD
> or <kbd class="command">rsh</KBD
> from that host will be allowed
to log in or execute a command from a local account with the same
username, without typing a password. When using Sun's <span class="acronym">NIS</SPAN
>
(described in <a class="xref" href="ch19_01.htm" title="RPC, NIS, NIS+,  and Kerberos">Chapter 19</A
>), a line of the form 
<i class="filename">+@hostgroup</I
>
makes all of the hosts in the network group <i class="filename">hostgroup</I
> trusted; likewise,
a line that has the form <i class="filename">-@anotherhostgroup</I
> makes
all of the hosts in the network group <i class="filename">anotherhostgroup</I
> specifically
not trusted. The file is scanned from the beginning to the end;
the scanning stops after the first match.[18]</P
><blockquote class="footnote"><p class="para">[18] Beware
that +@hostgroup and -@hostgroup features
are broken in some NIS implementations. Check to be sure they are
doing what you intend.</P
></BLOCKQUOTE
><p class="para">Consider this example file:</P
><blockquote class="screen"><pre class="screen">gold.acs.com 
silver.acs.com 
platinum.acs.com 
-@metals 
+@gasses</PRE
></BLOCKQUOTE
><p class="para">This file makes your computer trust the computers <i class="filename">gold</I
>, <i class="filename">silver</I
>,
and <i class="filename">platinum</I
> in the <i class="filename">acs.com</I
> domain. Furthermore, your computer will
trust all of the machines in the <i class="filename">gasses</I
> netgroup, except for the
hosts that are also in the <i class="filename">metals</I
> netgroup.</P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PUIS-CHP-17-SECT-3.18.4">17.3.18.4 The ~/.rhosts file</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-23497"></A
>After
scanning the <i class="filename">hosts.equiv</I
> file, the <kbd class="command">rlogind</KBD
> and <kbd class="command">rshd</KBD
> programs scan
the <i class="filename">user's</I
> home directory for a file called <i class="filename">.rhosts.</I
> A
user's <i class="filename">.rhosts</I
> file allows each user to build a set of
trusted hosts applicable only to that user.</P
><p class="para">For example, suppose the <i class="filename">~keith/.rhosts</I
> file on the
<i class="filename">math.harvard.edu</I
> computer contains the lines:</P
><blockquote class="screen"><pre class="screen">prose.cambridge.ma.us 
garp.mit.edu</PRE
></BLOCKQUOTE
><p class="para">With this <i class="filename">.rhosts</I
> file, a user name <i class="filename">keith</I
> on <i class="filename">prose</I
> or on <i class="filename">garp</I
>
can <kbd class="command">rlogin</KBD
> into <i class="filename">keith</I
>'s account on <i class="filename">math</I
> without typing
a password.</P
><p class="para">A user's <i class="filename">.rhosts</I
> file can also contain hostname-username
pairs extending trust to other usernames. For example, suppose that
<i class="filename">keith</I
>'s <i class="filename">.rhosts </I
>file also contains the line:</P
><blockquote class="screen"><pre class="screen">hydra.gatech.edu lenny</PRE
></BLOCKQUOTE
><p class="para">In this case, the user named <i class="filename">lenny</I
> at the host <i class="filename">hydra</I
> could
log into <i class="filename">keith</I
>'s account without providing a password.</P
><blockquote class="note"><p class="para"><strong>NOTE:</STRONG
> Only place machine names in the <a class="indexterm" name="AUTOID-23528"></A
><a class="indexterm" name="AUTOID-23530"></A
><a class="indexterm" name="AUTOID-23534"></A
>
<i class="filename">/etc/hosts.equiv</I
>
file; do not place machine /username pairs! Although
many versions of <span class="acronym">UNIX</SPAN
> allow you to add usernames
to the file, the <span class="acronym">UNIX</SPAN
> networking utilities do
not do the sensible thing by extending trust only to that particular
user on that particular machine. Instead, they allow that particular
user on that particular machine to log into <em class="emphasis">any account
on your system</EM
>! If you wish to extend trust to a particular
user on a particular machine, have that user create a <i class="filename">~/.rhosts</I
>
file, described below.</P
></BLOCKQUOTE
><p class="para"><i class="filename">.rhosts</I
> files are powerful and dangerous. If a person works
at two organizations, using a <i class="filename">.rhosts</I
> file allows that person to
use the <kbd class="command">rsh</KBD
> command between the two machines. It also lets you make
your account available to your friends without telling them your
password. (We don't recommend this as sound policy, however!)
Also, note that the superusers of each organization can make use
of the entries in <i class="filename">.rhosts </I
>files to gain access
to your account in the other organization. This could lead to big
problems in some situations.</P
><p class="para">The trust implied by the <i class="filename">~/.rhosts</I
> file is transitive.
If you trust somebody, then you trust everybody that they trust,
and so on.<a class="indexterm" name="AUTOID-23550"></A
></P
><p class="para"><i class="filename">.rhosts</I
> files are easily exploited for unintended purposes.
For example, crackers who break into computer systems frequently
add their usernames to unsuspecting users' <i class="filename">.rhosts</I
> files
so that they can more easily break into the systems again in the
future. For this reason, you may not want to allow these files on
your computer.</P
><blockquote class="note"><p class="para"><strong>NOTE:</STRONG
> <a class="indexterm" name="AUTOID-23558"></A
>The <i class="filename">~/.rhosts</I
> file should be set up with
mode 600 so that other users on your system cannot easily determine
the hosts that you trust. Always use fully qualified domain names
in this file, and do not include any comment characters. (#
or ! can create vulnerabilities.) The same restrictions apply to
<i class="filename">hosts.equiv</I
> and <i class="filename">hosts.lpd</I
>.</P
></BLOCKQUOTE
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PUIS-CHP-17-SECT-3.18.5">17.3.18.5 Searching for .rhosts files</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-23567"></A
><a class="indexterm" name="AUTOID-23570"></A
>Because of the obvious
risks posted by <i class="filename">.rhosts</I
> files, many system administrators have chosen
to disallow them entirely. How do you do this? One approach is to
remove (or comment out) the entries for <i class="filename">rshd </I
>and
<i class="filename">rlogind </I
>in the <i class="filename">inetd.conf </I
>file,
thus disabling the commands that might use the files. Another way
is to use Wietse Venema's <a class="indexterm" name="AUTOID-23576"></A
><a class="indexterm" name="AUTOID-23578"></A
>
<kbd class="command">logdaemon</KBD
> package.
A third option is to obtain the source code for the <kbd class="command">rshd</KBD
> and <kbd class="command">rlogind</KBD
>
programs and remove the feature directly.[19]
This method is relatively easy to do. Another approach is to scan
your system periodically for users who have these files and to take
appropriate action when you find them. Finally, you can patch the
binary of your <kbd class="command">rshd</KBD
> and <kbd class="command">rlogind</KBD
> programs, search for the string
<i class="filename">/.rhosts</I
>, and then change it to the empty string.</P
><blockquote class="footnote"><p class="para">[19] Before
you hack the code, try checking your <kbd class="command">rshd</KBD
> documentation. Some vendors
have a flag to limit <i class="filename">.rhosts</I
> (usually to just the supervisor).</P
></BLOCKQUOTE
><p class="para">You can find all of the .rhosts files on your system using
a simple shell script:</P
><blockquote class="screen"><pre class="screen">#!/bin/ksh
# Search for .rhosts files in home directories

PATH=/usr/bin

for user in $(cat-passwd | awk -F: 'length($6) &gt; 0 {print $6}'| sort -u)
do
    [[ -f $user/.rhosts ]] &amp;&amp; print &quot;There is a .rhosts file in $user&quot;
done</PRE
></BLOCKQUOTE
><p class="para"></P
><p class="para">where the <i class="filename">cat-passwd</I
> command is the same
one we described earlier.</P
><p class="para">To delete the <i class="filename">.rhosts</I
> files automatically, add a <kbd class="command">rm</KBD
> command
to the shell script after the <kbd class="command">print</KBD
>:</P
><blockquote class="screen"><pre class="screen">#!/bin/ksh
# Search for .rhosts files in home directories

PATH=/usr/bin

for user in $(cat-passwd | awk -F: 'length($6) &gt; 0 {print $6}'| sort -u)
do
    [[ -f $user/.rhosts ]] || continue
    rm -f $user/.rhosts
    print &quot;$user/.rhosts has been deleted&quot;
done</PRE
></BLOCKQUOTE
><blockquote class="note"><p class="para"><strong>NOTE:</STRONG
> Many older <a class="indexterm" name="AUTOID-23604"></A
><a class="indexterm" name="AUTOID-23607"></A
><a class="indexterm" name="AUTOID-23610"></A
>
SunOS systems
were distributed with a single line containing only a plus sign
(+) as their <i class="filename">hosts.equiv</I
> file: The plus sign has the effect
of making every host a trusted host, which is precisely the wrong
thing to do. This line is a major security hole, because hosts outside
the local organization (over which the system administrator has
no control) should never be trusted. If you have a plus sign in
your <i class="filename">hosts.equiv</I
> file, <span class="acronym">REMOVE IT</SPAN
>. This change
will disable some other features, such as the ability for other
machines to print on your printer using the remote printer system.
To retain remote printing, follow the steps detailed later. <a class="indexterm" name="AUTOID-23616"></A
></P
></BLOCKQUOTE
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PUIS-CHP-17-SECT-3.18.6">17.3.18.6 /etc/hosts.lpd file</A
></H4
><a class="indexterm" name="AUTOID-23620"></A
><a class="indexterm" name="AUTOID-23622"></A
><a class="indexterm" name="AUTOID-23625"></A
><a class="indexterm" name="AUTOID-23628"></A
><p class="para">Normally, the <span class="acronym">UNIX</SPAN
> <kbd class="command">lpd</KBD
> system allows only
trusted hosts to print on your local printer. However, this restriction
presents a security problem, because you may wish to let some computers
use your printer without making them equivalent hosts.</P
><p class="para">The way out of this quandary is to amend the <i class="filename">/etc/hosts.lpd</I
>
file. By placing a hostname in this file, you let that host use
your printers without making it an equivalent host. For example,
if you want to let the machines dearth and black use your computer's
printer, you can insert their names in /etc/hosts.lpd:</P
><blockquote class="screen"><pre class="screen">% <b class="emphasis.bold">cat /etc/hosts.lpd </B
>
dearth 
black 
%</PRE
></BLOCKQUOTE
><p class="para">The <i class="filename">hosts.lpd</I
> file has the same format as the <i class="filename">hosts.equiv</I
>
file. Thus, to allow any computer on the Internet to print on your
printer, you could use the following entry:</P
><blockquote class="screen"><pre class="screen">% <b class="emphasis.bold">cat /etc/hosts.lpd </B
>
+ 
% <a class="indexterm" name="AUTOID-23642"></A
><a class="indexterm" name="AUTOID-23644"></A
><a class="indexterm" name="AUTOID-23646"></A
>
 </PRE
></BLOCKQUOTE
><p class="para">We do not recommend that you do this, however!</P
></DIV
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PUIS-CHP-17-SECT-3.19">17.3.19 Routing Internet Protocol (RIP routed)  (UDP Port
520)</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-23652"></A
><a class="indexterm" name="AUTOID-23654"></A
><a class="indexterm" name="AUTOID-23656"></A
><a class="indexterm" name="AUTOID-23658"></A
>The
<span class="acronym">RIP</SPAN
> routing protocol is used by Internet gateways
to exchange information about new networks and gateways. It is implemented
on many <span class="acronym">UNIX</SPAN
> systems by the <kbd class="command">routed </KBD
>daemon.
An alternative daemon called <kbd class="command">gated</KBD
> offers more
control over which routing information is accepted and distributed.</P
><p class="para">The <kbd class="command">routed</KBD
> daemon is quite a trusting program: it will happily
receive (and believe) a packet from another computer on the network
that says, in effect, &quot;I am the best gateway to get anywhere;
send all of your packets to me.&quot; Clearly, this trust presents
even inexperienced attackers with a simple way for confounding your
network. Even worse: it gives sophisticated attackers a way to eavesdrop
on all of your communications.</P
><p class="para">For these reasons, many sites no longer run the <kbd class="command">routed</KBD
>
daemon. Instead, they use static routes. For most network configurations,
static routing is all that is really needed: if there is only one
gateway out of the local network, all traffic should be routed to
it.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PUIS-CHP-17-SECT-3.20">17.3.20 UUCP over TCP (TCP Port 540)</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-23672"></A
><a class="indexterm" name="AUTOID-23675"></A
>The main use for sending <span class="acronym">UUCP</SPAN
> data over
<span class="acronym">TCP</SPAN
> connections is that some <span class="acronym">UUCP</SPAN
>
systems can transmit Usenet news more efficiently than the more
modern <span class="acronym">NNTP</SPAN
>.</P
><p class="para"><span class="acronym">UUCP</SPAN
> over <span class="acronym">TCP</SPAN
> presents
a security risk, as <span class="acronym">UUCP</SPAN
> passwords are sent unencrypted.
Furthermore, if you use news to transfer confidential information
between corporate sites, that information may be monitored by other
sites situated between the two endpoints.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PUIS-CHP-17-SECT-3.21">17.3.21 The X Window System (TCP Ports 6000-6063)</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-23689"></A
>X is a popular network-based window system that allows many
programs to share a single graphical display. X-based programs display
their output in windows, which can be either on the same computer
on which the program is running or on any other computer on the
network.</P
><p class="para">Each graphical device that runs X is controlled by a special
program, called the X Window Server. Other programs, called X clients,
connect to the X Window Server over the network and tell it what
to display. Two popular X clients are xterm (the X terminal emulator)
and xclock (which displays an analog or digital clock on the screen).</P
><div class="sect3"><h4 class="sect3"><a class="title" name="PUIS-CHP-17-SECT-3.21.1">17.3.21.1 /etc/fbtab and /etc/logindevperm</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-23695"></A
><a class="indexterm" name="AUTOID-23698"></A
><a class="indexterm" name="AUTOID-23700"></A
><a class="indexterm" name="AUTOID-23703"></A
><a class="indexterm" name="AUTOID-23705"></A
><a class="indexterm" name="AUTOID-23707"></A
><a class="indexterm" name="AUTOID-23710"></A
>Multiuser workstations provide a challenge for X security.
On early implementations of X, the logical devices for the keyboard,
screen, and sound devices were world readable and world writable;
this availability caused security problems, because it meant that
anybody could read the contents of the user's screen or
keyboard, or could listen to the microphone in his office.</P
><p class="para">Some versions of <span class="acronym">UNIX</SPAN
> have a special file
that is used to solve this problem. The file, which is called <i class="filename">/etc/fbtab</I
>
under SunOS and <i class="filename">/etc/logindevperm</I
> under Solaris
(for example), specifies a list of devices that should have their
owner changed to the account that has logged into the <span class="acronym">UNIX</SPAN
>
workstation. This approach is similar to the way that the <i class="filename">/bin/login</I
>
changes the ownership of tty devices to the person who has logged
into a serial device.</P
><p class="para">Here is a portion of the Solaris <i class="filename">/etc/logindevperm</I
>
file. Under Solaris, the file is read by the <i class="filename">/bin/ttymon</I
>
program. When a person logs onto the device that is listed in the
first field, the program sets the device listed in the third field
to the <span class="acronym">UID</SPAN
> of the user that has logged in. The
mode of the device is set to the value contained in the second field:</P
><blockquote class="screen"><pre class="screen">/dev/console    0600    /dev/mouse:/dev/kbd
/dev/console    0600    /dev/sound/*        # audio devices
/dev/console    0600    /dev/fbs/*          # frame buffers
/dev/console    0600    /dev/rtvc0          # nachos capture device 0
/dev/console    0400    /dev/rtvcctl0       # nachos control device 0</PRE
></BLOCKQUOTE
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PUIS-CHP-17-SECT-3.21.2">17.3.21.2 X security</A
></H4
><p class="para">The <a class="indexterm" name="AUTOID-23727"></A
>
X
Window System has a simple security model&nbsp;- all or nothing.
The X security mechanisms are used to determine whether or not a
client can connect to the X Window Server. After a client successfully
connects, that client can exercise complete control over the display.</P
><p class="para">X clients can take over the mouse or the keyboard, send keystrokes
to other applications, or even kill the windows associated with
other clients. This capability allows considerable flexibility in
the creation of new clients. Unfortunately, it also creates a rich
opportunity for <a class="indexterm" name="AUTOID-23731"></A
><a class="indexterm" name="AUTOID-23734"></A
><a class="indexterm" name="AUTOID-23737"></A
><a class="indexterm" name="AUTOID-23740"></A
><a class="indexterm" name="AUTOID-23743"></A
>
Trojan horse
programs: the multi-user tank war game that you are running in a
corner of your screen may actually be covertly monitoring all of
the email messages that you type on your keyboard, or may be making
a copy of every password that you type.</P
><p class="para">The simplest way for an X client program to monitor your keystrokes
is to overlay the entire screen with a transparent, invisible window.
Such a program records keystrokes, saves them for later use, and
forwards the event to the appropriate subwindows so that the user
can't tell that he or she is being monitored. Releases
of the X Window System later than X11R4 have a &quot;secure&quot;
feature on the<i class="filename"> xterm</I
> command that grabs the
input from the keyboard and mouse in such a way that no transparent
overlay can intercept the input. The <i class="filename">xterm </I
>window
changes color to show that this is in effect. The option is usually
on a pop-up menu that is selected by holding down both the control
key and the left mouse button. This is a partial fix, but it is
not complete.</P
><p class="para"><a class="indexterm" name="AUTOID-23751"></A
>Rather
than develop a system that uses access control lists and multiple
levels of privilege, the designers of the X Window System have merely
worked to refine the all-or-nothing access control. X Version 11,
Release 6 has five different mechanisms for implementing access
control. They are listed in <a class="xref" href="#PUIS-CHP-17-TAB-3" title="X Access Control Systems">Table 17.3</A
>.</P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PUIS-CHP-17-SECT-3.21.3">17.3.21.3 The xhost facility</A
></H4
><p class="para">X maintains a host access control list of all hosts that are
allowed to access the X server. The host list is maintained via
the <a class="indexterm" name="AUTOID-23758"></A
>
<kbd class="command">xhost</KBD
> command.
The host list is always active, no matter what other forms of authentication
are used. Thus, you should fully understand the <kbd class="command">xhost</KBD
> facility and
the potential problems that it can create.</P
><p class="para">The <kbd class="command">xhost</KBD
> command lets users view and change the current list
of &quot;<kbd class="command">xhosted</KBD
>&quot; hosts. Typing xhost by itself displays
a list of the current hosts that may connect to your X Window Server.</P
><blockquote class="screen"><pre class="screen">% <b class="emphasis.bold">xhost</B
> 
prose.cambridge.ma.us 
next.cambridge.ma.us 
%</PRE
></BLOCKQUOTE
><table class="table"><caption class="table"><a class="title" name="PUIS-CHP-17-TAB-3">Table 17.3: X Access Control Systems</A
></CAPTION
><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1"><p class="para">System</P
></TH
><th class="entry" align="LEFT" rowspan="1" colspan="1"><p class="para">Technique</P
></TH
><th class="entry" align="LEFT" rowspan="1" colspan="1"><p class="para">Advantages</P
></TH
><th class="entry" align="LEFT" rowspan="1" colspan="1"><p class="para">Disadvantages</P
></TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">xhost</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">User specifies the hosts from which client
connections are allowed; all others are rejected.</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Simple to use and understand.</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Not suited to environments in which workstations
or servers are used by more than one person at a time. Server is
susceptible to IP spoofing.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">MIT-MAGIC-COOKIE-1</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Xdm or user creates a 128-bit &quot;cookie&quot;
that is stored in the user's <i class="filename">.Xauthority</I
> file at login.
Each client program reads the cookie from the <i class="filename">.Xauthority</I
> file and
passes it to the server when the connection is established.</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Access to the user's display
is limited to processes that have access to the user's
<i class="filename">.Xauthority</I
> file.</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Cookies are transmitted over the network
without encryption, allowing them to be intercepted. Cookies are
stored in the user's <i class="filename">.Xauthority</I
> file, making it a target.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">XDM-AUTHORIZATION-1</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Xdm creates a 56-bit DES key and a 64-bit
random &quot;authenticator&quot; that are stored in the
user's <i class="filename">.Xauthority</I
> file. Each client uses the DES key to
encrypt a 192-bit packet that is sent to the X server to validate
the connection.</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">X authenticator is not susceptible to
network eavesdropping.</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">The authenticator is stored in the <i class="filename">.Xauthority</I
>
file, making it a target. If the user's home directory
is mounted using NFS or another network filesystem, the 56-bit DES
can be eavesdropped from the network when it is read by the X client
program.

This authorization system uses
strong encryption and is therefore not exportable.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">SUN-DES-1</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Authentication based on Sun's
Secure RPC. Uses the <kbd class="command">xhost</KBD
> command as its interface.</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Communication to the X server is encrypted
with the X server's public key; the secret key is not stored
in the <i class="filename">.Xauthority file,</I
> removing it as a target.</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Only runs on systems that have Sun Microsystem's
Secure RPC (mostly Solaris).

This authorization
system uses strong encryption and is therefore not exportable.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">MIT-KERBEROS-5</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Xdm obtains Kerberos tickets when the
user logs in; these tickets are stored in a special credentials
cache file that is pointed to by the KRB5CCNAME environment variable.</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Extends the Kerberos network-based authentication
system to the X Window System.</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Credentials file is a target. Stolen
tickets can be used after the user logs out. Kerberos can be a challenge
to install.<a class="indexterm" name="AUTOID-23838"></A
><a class="indexterm" name="AUTOID-23841"></A
></P
></TD
></TR
></TBODY
></TABLE
><p class="para"></P
><p class="para">You can add a host to the <kbd class="command">xhost</KBD
> list by supplying a plus sign,
followed by the host's name on the command line after the
<kbd class="command">xhost</KBD
> command. You can remove a host from the <kbd class="command">xhost</KBD
> list by supplying
its name preceded by a hyphen:</P
><blockquote class="screen"><pre class="screen">% <b class="emphasis.bold">xhost +idr.cambridge.ma.us  </B
>
idr.cambridge.ma.us being added to access control list
% <b class="emphasis.bold">xhost </B
>
next.cambridge.ma.us 
prose.cambridge.ma.us 
idr.cambridge.ma.us 
% <b class="emphasis.bold">xhost -next.cambridge.ma.us </B
>
next.cambridge.ma.us being removed from access control list
% <b class="emphasis.bold">xhost </B
>
prose.cambridge.ma.us 
idr.cambridge.ma.us</PRE
></BLOCKQUOTE
><p class="para">If you <kbd class="command">xhost</KBD
> a computer, any user on that computer can connect
to your X Server and issue commands. If a client connects to your
X Window Server, removing that host from your <kbd class="command">xhost</KBD
> list will not
terminate the connection. The change will simply prevent future
access from that host.</P
><p class="para">If you are using <a class="indexterm" name="AUTOID-23858"></A
><a class="indexterm" name="AUTOID-23860"></A
><a class="indexterm" name="AUTOID-23863"></A
>
<span class="acronym">SUN-DES</SPAN
>-1
authentication, you can use the <kbd class="command">xhost</KBD
> command to specify the network
principals (users) who are allowed to connect to your X server.
The <kbd class="command">xhost</KBD
> command distinguishes principals from usernames because
principals contain an at sign (@). For example, to allow
the network principal <i class="filename">debby@oreilly</I
> to access your server,
you could type:</P
><blockquote class="screen"><pre class="screen">prose% <b class="emphasis.bold">xhost debby@oreilly</B
></PRE
></BLOCKQUOTE
><p class="para">If you are using <a class="indexterm" name="AUTOID-23873"></A
>
<span class="acronym">MIT-KERBEROS</SPAN
>-5
authentication, you can use the <kbd class="command">xhost</KBD
> command to specify the Kerberos
users who are allowed to connect to your server. Kerberos usernames
must be preceded by the string <i class="filename">krb5</I
>:. For example, if you wished
to allow the Kerberos user alice to access your server, you would
use the command:</P
><blockquote class="screen"><pre class="screen">prose% <b class="emphasis.bold">xhost krb5:alice</B
></PRE
></BLOCKQUOTE
><p class="para">The file <i class="filename">/etc/X0.hosts</I
> contains a default
list of <kbd class="command">xhost</KBD
> hosts for X display 0. This file contains a list of
lines that determine the default host access to the X display. The
format is the same as the <kbd class="command">xhost</KBD
> command: if a hostname appears by
itself or is preceded by a plus sign, that host is allowed. If a
hostname appears preceded by a minus sign, that host is denied.
If a plus sign appears on a line by itself, access control is disabled.</P
><p class="para">For example, this file allows default access to X display
0 for the hosts <i class="filename">oreo</I
> and <i class="filename">nutterbutter</I
>:</P
><blockquote class="screen"><pre class="screen">% <b class="emphasis.bold">cat /etc/X0.hosts</B
>
-
+oreo
+nutterbutter</PRE
></BLOCKQUOTE
><p class="para">If you have more than one display, you can create files <i class="filename">/etc/X1.hosts</I
>,
<i class="filename">/etc/X2.hosts</I
>, and so forth.<a class="indexterm" name="AUTOID-23892"></A
></P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PUIS-CHP-17-SECT-3.21.4">17.3.21.4 Using Xauthority magic cookies</A
></H4
><p class="para">Normally, the <a class="indexterm" name="AUTOID-23897"></A
><a class="indexterm" name="AUTOID-23899"></A
><a class="indexterm" name="AUTOID-23901"></A
><a class="indexterm" name="AUTOID-23903"></A
><a class="indexterm" name="AUTOID-23905"></A
>
Xauthority
facility is automatically invoked when you use the <kbd class="command">xdm</KBD
> terminal
management system. However, you can also enable it manually if you
start the X server yourself.</P
><p class="para">To start, you should preload your <i class="filename">.Xauthority</I
> file with an
appropriate key for your display. If you have the Kerberos or Sun
Secure <span class="acronym">RPC</SPAN
> mechanisms available, you should use
those. Otherwise, you need to create a &quot;magic cookie&quot;
for your current session. This cookie should be a random value that
is not predictable to an attacker. (The script given in &quot;A
Good Random Seed Generator&quot; in <a class="xref" href="ch23_01.htm" title="Writing Secure SUID and Network Programs">Chapter 23, <cite class="chapter">Writing Secure SUID and Network Programs</CITE
></A
> can
be used for this.) You should generate your &quot;cookie&quot;
and store it in your <i class="filename">.Xauthority</I
> file (normally, <i class="filename">$HOME/.Xauthority)</I
>:</P
><blockquote class="screen"><pre class="screen">$ typeset -RZ28 key=$(randbits -n 14)
$ EXPORT XAUTHORITY=${XAUTHORITY:=$HOME/.Xauthority}
$ umask 077
$ rm -f $XAUTHORITY
$ cp /dev/null $XAUTHORITY
$ chmod 600 $XAUTHORITY
$ xauth add $HOSTNAME:$displ . $key 
$ xauth add $HOSTNAME/unix:$displ . $key
$ xauth add localhost:$displ . $key 
$ unset key</PRE
></BLOCKQUOTE
><p class="para">Next, when you start your X server, do so with the -auth
option:</P
><blockquote class="screen"><pre class="screen">$ xinit -- -auth $XAUTHORITY </PRE
></BLOCKQUOTE
><p class="para">All your local client programs will now consult the <i class="filename">.Xauthority</I
>
file to identify the correct &quot;magic cookie&quot; and
then send it to the server. If you want to run a program from another
machine to display on this one, you will need to export the &quot;cookies&quot;
to the other machine. If your home directory is exported with <span class="acronym">NFS</SPAN
>,
the file should already be available&nbsp;- you simply need to
set the <span class="acronym">XAUTHORITY</SPAN
> environment variable to the
pathname of the <i class="filename">.Xauthority</I
> file (or whatever else you've
named it).</P
><p class="para">Otherwise, you can do something similar to:</P
><blockquote class="screen"><pre class="screen">$ xauth extract - $DISPLAY | rsh otherhost xauth merge -</PRE
></BLOCKQUOTE
><p class="para">Keep in mind that the &quot;magic cookies&quot; in
this scheme can be read from your account or found by anyone reading
network packets. However, this method is considerably safer than
using the <kbd class="command">xhosts</KBD
> mechanism, and should be used in preference to
<kbd class="command">xhosts</KBD
> when feasible.</P
><blockquote class="note"><p class="para"><strong>NOTE:</STRONG
> Versions of X11R6 <kbd class="command">xdm</KBD
> prior to public patch 13 contain
a weakness in the <kbd class="command">xauth</KBD
> generation method, which allows an intruder
to access its display. For details, see &quot;<span class="acronym">CERT</SPAN
>
advisory VB-95:08.X_Authentication_Vul.&quot;</P
></BLOCKQUOTE
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PUIS-CHP-17-SECT-3.21.5">17.3.21.5 Denial of service attacks under X</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-23936"></A
><a class="indexterm" name="AUTOID-23939"></A
><a class="indexterm" name="AUTOID-23942"></A
><a class="indexterm" name="AUTOID-23945"></A
><a class="indexterm" name="AUTOID-23948"></A
>Even
if you use the <kbd class="command">xhost</KBD
> facility, your X Window System may be vulnerable
to attack from computers that are not in your <kbd class="command">xhost</KBD
> list. Some X
window servers read a small packet from the client before they determine
whether or not the client is in the <kbd class="command">xhost</KBD
> list. If a client connects
to the X server but does not transmit this initial packet, the X
server halts all operation until it times out in 30 seconds.</P
><p class="para">You can determine whether your X server has this problem by
executing the following command:</P
><blockquote class="screen"><pre class="screen">prose% <b class="emphasis.bold">telnet localhost 6000</B
></PRE
></BLOCKQUOTE
><p class="para">Here, 6000 is the <span class="acronym">TCP/IP</SPAN
> port address of
the first X server on the system. (The second X display on the system
has a <span class="acronym">TCP/IP</SPAN
> address of 6001.)</P
><p class="para">If your X server has this problem, your workstation's
display will freeze. The cursor will not move, and you will be unable
to type anything. In some X implementations, the X server will time
out after 30 seconds and resume normal operations. Under other X
implementations, the server will remain blocked until the connection
is aborted.</P
><p class="para">Although this attack cannot be used to destroy information,
it can be used to incapacitate any workstation that runs one of
these servers and is connected to the network. If you have this
problem with your software, ask your vendor for a corrected update.
<a class="indexterm" name="AUTOID-23962"></A
></P
></DIV
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PUIS-CHP-17-SECT-3.22">17.3.22 RPC rpc.rexd (TCP Port 512)</A
></H3
><p class="para">The <a class="indexterm" name="AUTOID-23967"></A
><a class="indexterm" name="AUTOID-23969"></A
>
rpc.rexd
is a Sun <span class="acronym">RPC</SPAN
> server that allows for remote program
execution. Using rpc.rexd, any user who can execute <span class="acronym">RPC</SPAN
>
commands on your machine can run arbitrary shell commands.</P
><p class="para">The <i class="filename">rpc.rexd</I
> daemon is usually started from the <i class="filename">/etc/inetd.conf</I
>
file with the following line:</P
><blockquote class="screen"><pre class="screen"># We are being stupid and running the rexd server without Secure RPC:
#
rexd/1          tli  rpc/tcp wait root /usr/sbin/rpc.rexd     rpc.rexd</PRE
></BLOCKQUOTE
><p class="para">As the comment indicates, you should not run the <i class="filename">rexd</I
> server.
We make this warning because running <i class="filename">rexd</I
> without secure <span class="acronym">RPC</SPAN
>
basically leaves your computer wide open, which is why Sun distributes
their <i class="filename">/etc/inetd.conf</I
> file with <i class="filename">rexd</I
> commented
out:</P
><blockquote class="screen"><pre class="screen"># The rexd server provides only minimal 
# authentication and is often not run
#
#rexd/1          tli  rpc/tcp wait root /usr/sbin/rpc.rexd     rpc.rexd</PRE
></BLOCKQUOTE
><p class="para">We think that vendors should remove the <i class="filename">rexd</I
> line from the
<i class="filename">/etc/inetd.conf</I
> file altogether.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PUIS-CHP-17-SECT-3.23">17.3.23 Other TCP Ports: MUDs and Internet Relay Chat (IRC)</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-23990"></A
><a class="indexterm" name="AUTOID-23992"></A
>Multi-User
Dungeons (<span class="acronym">MUDS</SPAN
>) are role-playing games that allow
many people over a network to interact in the same virtual environment.
Most <span class="acronym">MUDS</SPAN
> are recreational, although some <span class="acronym">MUDS</SPAN
>
have been created to allow scientists and other professionals to
interact. (The <span class="acronym">MIT</SPAN
> Media Lab's Media<span class="acronym">MOO</SPAN
>
is an example of such a virtual environment.)</P
><p class="para"><a class="indexterm" name="AUTOID-24000"></A
><a class="indexterm" name="AUTOID-24002"></A
>Internet
Relay Chat (<span class="acronym">IRC</SPAN
>) is the Citizen's Band
radio of the Internet. <span class="acronym">IRC</SPAN
> permits real-time
communication between many different people on different computers.
Messages can be automatically forwarded from system to system.</P
><p class="para">While both <span class="acronym">MUDS</SPAN
> and <span class="acronym">IRC</SPAN
>
can be useful and entertaining to use, these systems can also have
profound security implications:</P
><ul class="itemizedlist"><li class="listitem"><p class="para">Because these systems permit unrestricted
communication between people on your computer and others on the
Internet, they create an excellent opportunity for social engineering.
Often an attacker will tell a naive user that there is some &quot;great
new feature&quot; that they can enable simply by typing a certain
command&nbsp;- a command that then allows the attacker to log
in and take over the user's account. Unfortunately, there
is no simple way to protect users from this kind of attack, other
than to educate them to be suspicious of what they are told by strangers
on the net.</P
></LI
><li class="listitem"><p class="para">Most <a class="indexterm" name="AUTOID-24014"></A
>
<span class="acronym">MUDS</SPAN
>
require users to create an account with a username and a password.
Unfortunately, many users will blindly type the same username and
password that they use for their <span class="acronym">UNIX</SPAN
> account.
This creates a profound security risk, as it permits anybody who
has access to the <span class="acronym">MUD</SPAN
> server (such as its administrator)
to break into the user's <span class="acronym">UNIX</SPAN
> account.</P
></LI
><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-24023"></A
>Although
many <span class="acronym">MUDS</SPAN
> and <span class="acronym">IRCS</SPAN
> can be
used with Telnet, they are more fun when used with specially written
client programs. Unfortunately, some of these programs have been
distributed with intentional security holes and back doors. Determining
whether or not a client program is equipped with this kind of &quot;feature&quot;
is very difficult.</P
></LI
><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-24030"></A
>Even
if your <span class="acronym">MUD</SPAN
> or <span class="acronym">IRC</SPAN
> client
doesn't have a built-in back door, many of these clients
will execute commands from remote machines if such a feature is
enabled by the user. The world of <span class="acronym">MUDS</SPAN
> and <span class="acronym">IRCS</SPAN
>
is rife with malicious users who attempt to get unsuspecting users
to enable these features.</P
></LI
><li class="listitem"><p class="para">The server programs for <span class="acronym">MUDS</SPAN
>
and <span class="acronym">IRCS</SPAN
> can place a significant load on the
computers on which they reside. Unfortunately, as <span class="acronym">MUDS</SPAN
>
and <span class="acronym">IRCS</SPAN
> do not use &quot;trusted ports,&quot;
users can run their own servers even if they don't have
<i class="filename">root</I
> access.<a class="indexterm" name="AUTOID-24044"></A
></P
></LI
></UL
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch17_02.htm" title="17.2 Controlling Access to Servers"><img src="../gifs/txtpreva.gif" alt="Previous: 17.2 Controlling Access to Servers" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Practical UNIX &amp; Internet Security"><img src="../gifs/txthome.gif" alt="Practical UNIX &amp; Internet Security" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch17_04.htm" title="17.4 Security Implications of Network Services"><img src="../gifs/txtnexta.gif" alt="Next: 17.4 Security Implications of Network Services" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">17.2 Controlling Access to Servers</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">17.4 Security Implications of Network Services</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.htm" title="The Networking CD Bookshelf">Library Home</A
> | <a href="../dnsbind/index.htm" title="DNS &amp; BIND">DNS &amp; BIND</A
> | <a href="../tcpip/index.htm" title="TCP/IP Network Administration">TCP/IP</A
> | <a href="../sendmail/index.htm" title="sendmail">sendmail</A
> | <a href="../smdref/index.htm" title="sendmail Desktop Reference">sendmail Reference</A
> | <a href="../firewall/index.htm" title="Building Internet Firewalls">Firewalls</A
> | <a href="index.htm" title="Practical UNIX &amp; Internet Security">Practical Security</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
