<html><head>
<title>[Chapter 9] 9.2 Detecting Change</TITLE>
<meta name="DC.title" content="Practical UNIX &amp; Internet Security"><meta name="DC.creator" content="Simson Garfinkel &amp; Gene Spafford"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-02-04T00:07:08Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-148-8" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch09_01.htm" title="9. Integrity Management"><link rel="prev" href="ch09_01.htm" title="9.1 Prevention"><link rel="next" href="ch09_03.htm" title="9.3 A Final Note"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Practical UNIX &amp; Internet Security" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Practical UNIX &amp; Internet Security"><area shape="RECT" coords="467,0,514,18" href="../search/psrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch09_01.htm" title="9.1 Prevention"><img src="../gifs/txtpreva.gif" alt="Previous: 9.1 Prevention" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 9<br>Integrity Management</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch09_03.htm" title="9.3 A Final Note"><img src="../gifs/txtnexta.gif" alt="Next: 9.3 A Final Note" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="PUIS-CHP-9-SECT-2">9.2 Detecting Change</A
></H2
><p class="para"><a class="indexterm" name="AUTOID-12144"></A
><a class="indexterm" name="AUTOID-12146"></A
><a class="indexterm" name="AUTOID-12149"></A
>As we saw in the
last section, there may be circumstances in which we cannot use
read-only media to protect files and directories. Or, we may have
a case in which some of the important files are relatively volatile
and need to change on a regular basis. In cases such as these, we
want to be able to detect if unauthorized changes occur.</P
><p class="para">There are basically three approaches to detecting changes
to files and inodes. The first and most certain way is to use comparison
copies of the data to be monitored. A second way is to monitor <em class="emphasis">metadata</EM
>
about the items to be protected. This includes monitoring the modification
time of entries as kept by the operating system, and monitoring
any logs or audit trails that show alterations to files. The third
way is to use some form of <i class="firstterm">signature </I
>of the
data to be monitored, and to periodically recompute and compare
the <a class="indexterm" name="AUTOID-12155"></A
>
signature against a stored value.
Each of these approaches has drawbacks and benefits, as we discuss
below.</P
><div class="sect2"><h3 class="sect2"><a class="title" name="PUIS-CHP-9-SECT-2.1">9.2.1 Comparison Copies</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-12160"></A
><a class="indexterm" name="AUTOID-12162"></A
>The
most direct and assured method of detecting changes to data is to
keep a copy of the unaltered data, and do a byte-by-byte comparison
when needed. If there is a difference, this indicates not only that
a change occurred, but what that change involved. There is no more
certain and complete method of detecting changes.</P
><p class="para"><a class="indexterm" name="AUTOID-12165"></A
><a class="indexterm" name="AUTOID-12167"></A
>Comparison
copies, however, are unwieldy. They require that you keep copies
of every file of interest. Not only does such a method require twice
as much storage as the original files, it also may involve a violation
of <a class="indexterm" name="AUTOID-12170"></A
>
license
or copyright of the files (copyright law allows <a class="indexterm" name="AUTOID-12173"></A
>
one
copy for archival purposes, and your distribution media is that
one copy).[3] To use a comparison copy means that
both the original and the copy must be read through byte by byte
each time a check is made. And, of course, the comparison copy needs
to be saved in a protected location.</P
><blockquote class="footnote"><p class="para">[3] Copyright law does not allow for copies
on backups.</P
></BLOCKQUOTE
><p class="para">Even with these drawbacks, comparison copies have a particular
benefit&nbsp;- if you discover an unauthorized change, you can
simply replace the altered version with the saved comparison copy,
thus restoring the system to normal.</P
><div class="sect3"><h4 class="sect3"><a class="title" name="PUIS-CHP-9-SECT-2.1.1">9.2.1.1 Local copies</A
></H4
><p class="para">One standard method of storing comparison copies is to put
them on another disk. Many people report success at storing copies
of critical system files on removable media, such as Syquest or
Bernoulli drives. If there is any question about a particular file,
the appropriate disk is placed in the drive, mounted, and compared.
If you are careful about how you configure these disks, you get
the added (and valuable) benefit of having a known good version
of the system to boot up if the system is compromised by accident
or attack.</P
><p class="para">A second standard method of storing comparison copies is to
make on-disk copies somewhere else on the system. For instance,
you might keep a copy of <i class="filename">/bin/login</I
> in <i class="filename">/usr/adm/.hidden/.bin/login</I
>.
Furthermore, you might compress and/or encrypt the copy
to help reduce disk use and keep it safe from tampering; if an attacker
were to alter both the original <i class="filename">/bin/login </I
>and
the copy, then any comparison you made would show no change. The
disadvantage to compression and encryption is that it then requires
extra processing to recover the files if you want to compare them
against the working copies. This extra effort may be significant
if you wish to do comparisons daily (or more often!).</P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PUIS-CHP-9-SECT-2.1.2">9.2.1.2 Remote copies</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-12188"></A
>A third method
of using comparison copies is to store them on a remote site and
make them available remotely in some manner. For instance, you might
place copies of all the system files on a disk partition on a secured
server, and export that partition read-only using <span class="acronym">NFS</SPAN
>
or some similar protocol. All the client hosts could then mount
that partition and use the copies in local comparisons. Of course,
you need to ensure that whatever programs are used in the comparison
(e.g., <i class="firstterm">cmp</I
>, <i class="filename">find</I
>, and
<i class="filename">diff</I
>) are taken from the remote partition and
not from the local disk. Otherwise, an attacker could modify those
files to not report changes!</P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PUIS-CHP-9-SECT-2.1.3">9.2.1.3 rdist</A
></H4
><p class="para">Another method of remote comparison would be to use a program
to do the comparison across the network. The <em class="emphasis"><a class="indexterm" name="AUTOID-12199"></A
>rdist</EM
> utility is one such program
that works well in this context. The drawback to using <em class="emphasis">rdist</EM
>,
however, is the same as with using full comparison copies: you need
to read both versions of each file, byte by byte. The problem is
compounded, however, because you need to transfer one copy of each
file across the network each time you perform a check. Another drawback
is that <em class="emphasis">rdist</EM
> depends on the Berkeley trusted
hosts mechanism to work correctly (unless you have Kerberos installed),
and this may open the systems more than you want to allow.</P
><blockquote class="note"><p class="para"><strong>NOTE:</STRONG
> If you have an older version of <em class="emphasis">rdist</EM
>,
be certain to check with your vendor for an update. Some versions
of <em class="emphasis">rdist</EM
> can be exploited to gain root access
to a system. See <span class="acronym">CERT</SPAN
> advisories 91-20 and 94-04
for more information.</P
></BLOCKQUOTE
><p class="para">One scenario we have found to work well with <em class="emphasis">rdist</EM
>
is to have a &quot;master&quot; configuration for each architecture
you support at your site. This &quot;master&quot; machine
should not generally support user accounts, and it should have extra
security measures in place. On this machine, you put your master
software copies, possibly installed on read-only disks.</P
><p class="para">Periodically, the master machine copies a clean copy of the
<em class="emphasis">rdist</EM
> binary to the client machine to be checked.
The master machine then initiates an <i class="filename">rdist </I
>session
involving the <kbd class="command">-b</KBD
> option (byte-by-byte compare) against the client.
Differences are reported, or optionally, fixed. In this manner you
can scan and correct dozens or hundreds of machines automatically.
If you use the -R option, you can also check for new files or directories
that are not supposed to be present on the client machine.</P
><p class="para">An <em class="emphasis">rdist</EM
> &quot;master&quot; machine
has other advantages. It makes it much easier to install new and
updated software on a large set of client machines. This feature
is especially helpful when you are in a rush to install the latest
security patch in software on every one of your machines. It also
provides a way to ensure that the owners and modes of system files
are set correctly on all the clients. The down side of this is that
if you are not careful, and an attacker modifies your master machine,
<em class="emphasis">rdist</EM
> will as efficiently install the same
security hole on every one of your clients, automatically!</P
><p class="para">Note that the normal mode of operation of <em class="emphasis">rdist</EM
>,
without the -b option, does not do a byte-by-byte compare. Instead,
it only compares the metadata in the Inode concerning times and
file sizes. As we discuss in the next section, this information
can be spoofed. <a class="indexterm" name="AUTOID-12219"></A
><a class="indexterm" name="AUTOID-12221"></A
></P
></DIV
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PUIS-CHP-9-SECT-2.2">9.2.2 Checklists and Metadata</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-12226"></A
><a class="indexterm" name="AUTOID-12228"></A
>Saving
an extra copy of each critical file and performing a byte-by-byte
comparison can be unduly expensive. It requires substantial disk
space to store the copies. Furthermore, if the comparison is performed
over the network, either via <em class="emphasis">rdist</EM
> or <span class="acronym">NFS</SPAN
>,
it will involve substantial disk and network overhead each time
the comparisons are made.</P
><p class="para">A more efficient approach would be to store a summary of important
characteristics of each file and directory. When the time comes
to do a comparison, the characteristics are regenerated and compared
with the saved information. If the characteristics are comprehensive
and smaller than the file contents (on average), then this method
is clearly a more efficient way of doing the comparison.</P
><p class="para">Furthermore, this approach can capture changes that a simple
comparison copy cannot: comparison copies detect changes in the
contents of files, but do little to detect changes in metadata such
as file owners or protection modes. It is this data &nbsp;- the
data normally kept in the Inodes of files and directories&nbsp;- that
is sometimes more important than the data within the files themselves.
For instance, changes in owner or protection bits may result in
disaster if they occur to the wrong file or directory.</P
><p class="para">Thus, we would like to compare the values in the inodes of
critical files and directories with a database of comparison values.
The values we wish to compare and monitor for critical changes are
owner, group, and protection modes. We also wish to monitor the
<a class="indexterm" name="AUTOID-12235"></A
><a class="indexterm" name="AUTOID-12237"></A
><a class="indexterm" name="AUTOID-12239"></A
><a class="indexterm" name="AUTOID-12242"></A
><a class="indexterm" name="AUTOID-12245"></A
>
mtime (modification time) and the
file size to determine if the file contents change in an unauthorized
or unexpected manner. We may also wish to monitor the link count,
Inode number, and ctime as additional indicators of change. All
of this material can be listed with the <em class="emphasis">ls</EM
>
command.</P
><div class="sect3"><h4 class="sect3"><a class="title" name="PUIS-CHP-9-SECT-2.2.1">9.2.2.1 Simple listing</A
></H4
><p class="para">The simplest form of a checklist mechanism is to run the <i class="systemitem">ls</I
> command on a list of files
and compare the output against a saved version. The most primitive
approach might be a shell script such as this:</P
><blockquote class="screen"><pre class="screen">#!/bin/sh  

cat /usr/adm/filelist | xargs ls -ild &gt; /tmp/now 
diff -b /usr/adm/savelist /tmp/now </PRE
></BLOCKQUOTE
><p class="para">The file <em class="emphasis">/usr/adm/filelist</EM
> would contain
a list of files to be monitored. The <em class="emphasis">/usr/adm/savelist</EM
>
file would contain a base listing of the same files, generated on
a known secure version of the system. The <em class="emphasis"><a class="indexterm" name="AUTOID-12257"></A
><a class="indexterm" name="AUTOID-12260"></A
>-i</EM
>
option adds the inode number in the listing. The <em class="emphasis">-d</EM
>
option includes directory properties, rather than contents, if the
entry is a directory name.</P
><p class="para">This approach has some drawbacks. First of all, the output
does not contain all of the information we might want to monitor.
A more complete listing can be obtained by using the <em class="emphasis"><a class="indexterm" name="AUTOID-12266"></A
>
find</EM
> command:</P
><blockquote class="screen"><pre class="screen">#!/bin/sh

find `cat /usr/adm/filelist` -ls &gt; /tmp/now 
diff -b /usr/adm/savelist /tmp/now</PRE
></BLOCKQUOTE
><p class="para">This will not only give us the data to compare on the entries,
but it will also disclose if files have been deleted or added to
any of the monitored directories.</P
><blockquote class="note"><p class="para"><strong>NOTE:</STRONG
> Writing a script to do the above and running it periodically
from a <i class="filename"><a class="indexterm" name="AUTOID-12274"></A
>cron</I
>
file can seem tempting. The difficulty with this approach is that
an attacker may modify the <em class="emphasis">cron</EM
> entry or the
script itself to not report any changes. Thus, be cautious if you
take this approach and be sure to review and then execute the script
manually on a regular basis.</P
></BLOCKQUOTE
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PUIS-CHP-9-SECT-2.2.2">9.2.2.2 Ancestor directories</A
></H4
><p class="para">We should mention here that you must check the <a class="indexterm" name="AUTOID-12280"></A
><a class="indexterm" name="AUTOID-12282"></A
>
ancestor directories
of all critical files and directories&nbsp;- all the directories
between the <em class="emphasis">root</EM
> directory and the files being
monitored. These are often overlooked, but can present a significant
problem if their owner or permissions are altered. An attacker could
then be able to rename one of the directories and install a replacement
or a symbolic link to a replacement that contains dangerous information.
For instance, if the <em class="emphasis">/etc</EM
> directory becomes
mode 777, then anyone could temporarily rename the password file,
install a replacement containing a <em class="emphasis">root</EM
> entry
with no password, run <em class="emphasis">su</EM
>, and reinstall the
old password file. Any commands or scripts you have that monitor
the password file would show no change unless they happen to run
during the few seconds of the actual attack&nbsp;- something the
attacker can usually avoid.</P
><p class="para">The following script takes a list of absolute file pathnames,
determines the names of all containing directories, and then prints
them. These files can then be added to your comparison list (checklist)
such as the script shown earlier:</P
><blockquote class="screen"><pre class="screen">#!/bin/ksh

typeset pdir

function getdir &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# Gets the real, physical pathname
{
&nbsp;&nbsp;&nbsp;if [[ $1 != /* ]]
&nbsp;&nbsp;&nbsp;then
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print -u2 &quot;$1 is not an absolute pathname&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 1
&nbsp;&nbsp;&nbsp;elif cd &quot;${1%/*}&quot;
&nbsp;&nbsp;&nbsp;then
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pdir=$(pwd -P)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cd ~-
&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print -u2 &quot;Unable to attach to directory of $1&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 2
&nbsp;&nbsp;&nbsp;fi
&nbsp;&nbsp;&nbsp;return 0
}

cd /
print /&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# ensure we always have the root directory included

while read name
do
&nbsp;&nbsp;&nbsp;getdir $name || continue
&nbsp;&nbsp;&nbsp;while [[ -n $pdir ]]
&nbsp;&nbsp;&nbsp;do
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print $pdir
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pdir=${pdir%/*}
&nbsp;&nbsp;&nbsp;done
done | sort -u <a class="indexterm" name="AUTOID-12291"></A
> </PRE
></BLOCKQUOTE
></DIV
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PUIS-CHP-9-SECT-2.3">9.2.3 Checksums and Signatures</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-12296"></A
><a class="indexterm" name="AUTOID-12298"></A
>Unfortunately,
the approach we described above for monitoring files can be defeated
with a little effort. Files can be modified in such a way that the
information we monitor will not disclose the change. For instance,
a file might be modified by writing to the raw disk device after
the appropriate block is known. As the modification did not go through
the filesystem, none of the information in the inodes will be altered.</P
><p class="para"><a class="indexterm" name="AUTOID-12302"></A
><a class="indexterm" name="AUTOID-12305"></A
><a class="indexterm" name="AUTOID-12308"></A
>You
could also surreptitiously alter a file by setting the system clock
back to the time of the last legitimate change, making the edits,
and then setting the clock forward again. If this is done quickly
enough, no one will notice the change. Furthermore all the times
on the file (including the ctime) will be set to the &quot;correct&quot;
values. Several hacker toolkits in widespread use on the Internet
actually take this approach. It is easier and safer than writing
to the raw device. It is also more portable.</P
><p class="para">Thus, we need to have some stronger approach in place to check
the contents of files against a known good value. Obviously, we
could use comparison copies, but we have already noted that they
are expensive. A second approach would be to create a signature
of the file's contents to determine if a change occurred.</P
><p class="para">The first, naive approach with such a signature might involve
the use of a standard <span class="acronym">CRC</SPAN
> checksum, as implemented
by the <em class="emphasis"><a class="indexterm" name="AUTOID-12314"></A
>sum</EM
>
command. <span class="acronym">CRC</SPAN
> polynomials are often used to detect
changes in message transmissions, so they could logically be applied
here. However, this application would be a mistake.</P
><p class="para"><span class="acronym">CRC</SPAN
> checksums are designed to detect random
bit changes, not purposeful alterations. As such, <span class="acronym">CRC</SPAN
>
checksums are good at finding a few bits changed at random. However,
because they are generated with well-known polynomials, one can
alter the input file so as to generate an arbitrary <span class="acronym">CRC</SPAN
>
polynomial after an edit. In fact, some of the same hacker toolkits
that allow files to be changed without altering the time also contain
code to set the file contents to generate the same <em class="emphasis">sum</EM
>
outputs for the altered file as for the original.</P
><p class="para">To generate a checksum that cannot be easily spoofed, we need
to use a stronger mechanism, such as the <a class="indexterm" name="AUTOID-12323"></A
><a class="indexterm" name="AUTOID-12325"></A
><a class="indexterm" name="AUTOID-12327"></A
>
message digests
described in &quot;Message Digests and Digital Signatures&quot;
in <a class="xref" href="ch06_01.htm" title="Cryptography">Chapter 6, <cite class="chapter">Cryptography</CITE
></A
>. These are also dependent on the contents of
the file, but they are too difficult to spoof after changes have
been made.</P
><p class="para">If we had a program to generate the MD5 checksum of a file,
we might alter our checklist script to be:</P
><blockquote class="screen"><pre class="screen">#!/bin/sh  

find `cat /usr/adm/filelist` -ls -type f -exec md5 {}\; &gt; /tmp/now 
diff -b /usr/adm/savelist /tmp/now  <a class="indexterm" name="AUTOID-12333"></A
>
 </PRE
></BLOCKQUOTE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PUIS-CHP-9-SECT-2.4">9.2.4 Tripwire</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-12338"></A
><a class="indexterm" name="AUTOID-12340"></A
><a class="indexterm" name="AUTOID-12343"></A
>Above, we described
a method of generating a list of file attributes and message digests.
The problem with this approach is that we don't really
want that information for every file. For instance, we want to know
if the owner or protection modes of <i class="filename">/etc/passwd</I
>
change, but we don't care about the size or checksum because
we expect the contents to change. At the same time, we are very
concerned if the contents of <i class="filename">/bin/login</I
> are
altered.</P
><p class="para">We would also like to be able to use different message digest
algorithms. In some cases, we are concerned enough that we want
to use three strong algorithms, even if they take a long time to
make the comparison; after all, one of the algorithms might be broken
soon.[4] In other environments, a fast but less
secure algorithm, used in conjunction with other methods, might
be all that is necessary.</P
><blockquote class="footnote"><p class="para">[4] This is not so farfetched. As this book went
to press, reports circulated of a weakness in the MD4 message digest
algorithm.</P
></BLOCKQUOTE
><p class="para">In an attempt to meet these needs[5]
the Tripwire package was written at Purdue by Gene Kim and Gene
Spafford. Tripwire is a program that runs on every major version
of <span class="acronym">UNIX</SPAN
> (and several obscure versions). It reads
a configuration file of files and directories to monitor, and then
tracks changes to inode information and contents. The database is
highly configurable, and allows the administrator to specify particular
attributes to monitor, and particular message digest algorithms
to use for each file.</P
><blockquote class="footnote"><p class="para">[5] And more:
see the papers that come with the distribution.</P
></BLOCKQUOTE
><div class="sect3"><h4 class="sect3"><a class="title" name="PUIS-CHP-9-SECT-2.4.1">9.2.4.1 Building Tripwire</A
></H4
><p class="para">To build the Tripwire package, you must first download a copy
from the canonical distribution site, located at <a class="systemitem.url" href="../../../WebStripper/protected.html#link=ftp://coast.cs.purdue.edu/pub/COAST/Tripwire">ftp://coast.cs.purdue.edu/pub/COAST/Tripwire</A
>.[6]
The distribution has been signed with a detached <span class="acronym">PGP</SPAN
>
digital signature to verify that the version you download has not
been altered in an unauthorized manner (See the discussion of digital
signatures in &quot;PGP detached signatures&quot; in <a class="xref" href="ch06_01.htm" title="Cryptography">Chapter 6</A
>.)</P
><blockquote class="footnote"><p class="para">[6] As this book goes to press, several companies are discussing
a commercial version of Tripwire. If one is available, a note will
be on the FTP site noting its source. Be aware that Purdue University
holds the copyright on Tripwire and only allows its use for limited,
noncommercial use without additional license.</P
></BLOCKQUOTE
><p class="para">Next, read all the <span class="acronym">README</SPAN
> files in the
distribution. Be certain you understand the topics discussed. Pay
special attention to the details of customization for local considerations,
including the adaption for the local operating system. These changes
normally need to be made in the<i class="filename"> include/config.h</I
>
file. You also need to set the <span class="acronym">CONFIG_PATH</SPAN
> and
<span class="acronym">DATABASE_PATH</SPAN
> defines to the secured directory
where you will store the data.</P
><p class="para">One additional change that might be made is to the default
flags field, defined in the <span class="acronym">DEFAULTIGNORE</SPAN
> field.
This item specifies the fields that Tripwire, by default, will monitor
or ignore for files without an explicit set of flags. As shipped,
this is set to the value &quot;R-3456789&quot;&nbsp;- the
flags for read-only files, and only message digests 1 and 2. These
are the MD5 and Snefru signatures. You may want to change this to
include other signatures, or replace one of these signatures with
a different one; the MD5, <span class="acronym">SHA</SPAN
>, and Haval algorithms
appear to be the strongest algorithms to use.</P
><p class="para">Next, you will want to do a <i class="filename">make </I
>followed
by a <i class="filename">make test</I
>. The test exercises all of the
Tripwire functions, and ensures that it was built properly for your
machine. This will also demonstrate how the output from Tripwire
appears.</P
><p class="para">The next step is to build the configuration file. Tripwire
scans files according to a configuration file. The file contains
the names of files and directories to scan, and flags to specify
what to note for changes. For example, you might have the following
in your configuration file:</P
><table class="informaltable"><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">/.rhosts                R     &nbsp;&nbsp;&nbsp; # may not exist</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">/.profile               R      &nbsp;&nbsp;&nbsp;# may not exist</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">/.forward               R-12+78 &nbsp; # may not exist</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">/usr/spool/at &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;L</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">=/tmp                   L-n</TD
></TR
></TBODY
></TABLE
><p class="para">In this example, the <em class="emphasis">/.rhosts</EM
>, <em class="emphasis">/.profile</EM
>,
and <em class="emphasis">/.forward</EM
> file have everything in the inode
checked for changes <em class="emphasis">except</EM
> the access time.
Thus, the owner, group, size, protection modes, modification time,
link count, and ctime are all monitored for change. Further, the
first two files are also checksummed using the MD5 and Snefru signatures,
and the <em class="emphasis">/.forward</EM
> file is checksummed with
the <span class="acronym">SHA</SPAN
> and <span class="acronym">HAVAL</SPAN
> algorithms.
The directory <em class="emphasis">/usr/spool/at</EM
> and everything
inside it is checked for changes to owner, group, protection modes,
and link count; changes to contents are allowed and ignored. The
<em class="emphasis">/tmp</EM
> directory is checked for the same changes,
but its contents are not checked.</P
><p class="para">Other flags and combinations are also possible. Likely skeleton
configuration files are provided for several major platforms.</P
><p class="para">Finally, you will want to move the binary for <em class="emphasis">Tripwire</EM
>
and the configuration file to the protected directory that is located
on (normally) read-only storage. You will then need to initialize
the database; be sure that you are doing this on a known clean system&nbsp;- reinstall
the software, if necessary. After you have generated the database,
set the protections on the database and binary.</P
><p class="para">When you build the database, you will see output similar to
this:</P
><blockquote class="screen"><pre class="screen">### Phase 1:   Reading configuration file
### Phase 2:   Generating file list
### Phase 3:   Creating file information database
###
### Warning:   Database file placed in ./databases/tw.db_mordor.cs.purdue.edu.
###
###            Make sure to move this file file and the configuration
###            to secure media!
###
###            (<em class="emphasis">Tripwire</EM
> expects to find it in `/floppy/system.db'.)</PRE
></BLOCKQUOTE
><blockquote class="note"><p class="para"><strong>NOTE:</STRONG
> When possible, build <em class="emphasis">Tripwire</EM
> statically
to prevent its using shared libraries which might have Trojan horses
in them. This type of attack is one of the few remaining vulnerabilities
in the use of <em class="emphasis">Tripwire</EM
>.</P
></BLOCKQUOTE
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="PUIS-CHP-9-SECT-2.4.2">9.2.4.2 Running Tripwire</A
></H4
><p class="para">You run Tripwire from the protected version on a periodic
basis to check for changes. You should run it manually sometimes
rather than only from <em class="emphasis">cron</EM
>. This step ensures
that Tripwire is actually run and you will see the output. When
you run it and everything checks out as it should, you will see
output something like this:</P
><blockquote class="screen"><pre class="screen">### Phase 1:   Reading configuration file
### Phase 2:   Generating file list
### Phase 3:   Creating file information database
### Phase 4:   Searching for inconsistencies
###
###                     Total files scanned:            2640
###                           Files added:              0
###                           Files deleted:            0
###                           Files changed:            2586
###
###                     After applying rules:
###                           Changes discarded:        2586
###                           Changes remaining:        0
###</PRE
></BLOCKQUOTE
><p class="para">This output indicates no changes. If files or directories
had changed, you would instead see output similar to:</P
><blockquote class="screen"><pre class="screen">### Phase 1:   Reading configuration file
### Phase 2:   Generating file list
### Phase 3:   Creating file information database
### Phase 4:   Searching for inconsistencies
###
###                     Total files scanned:            2641
###                           Files added:              1
###                           Files deleted:            0
###                           Files changed:            2588
###
###                     After applying rules:
###                           Changes discarded:        2587
###                           Changes remaining:        3
###
added:   -rw------- root           27 Nov  8 00:33:40 1995 /.login
changed: -rw-r--r-- root         1594 Nov  8 00:36:00 1995 /etc/mnttab
changed: drwxrwxrwt root         1024 Nov  8 00:42:37 1995 /tmp
### Phase 5:   Generating observed/expected pairs for changed files
###
### Attr        Observed (what it is) &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Expected (what it should be)
### =========== ================================================
/etc/mnttab
      st_mtime: Wed Nov  8 00:36:00 1995      Tue Nov  7 18:44:47 1995      
      st_ctime: Wed Nov  8 00:36:00 1995      Tue Nov  7 18:44:47 1995      
    md5 (sig1): 2tIRAXU5G9WVjUKuRGTkdi        0TbwgJStEO1boHRbXkBwcD        
 snefru (sig2): 1AvEJqYMlsOMUAE4J6byKJ        3A2PMKEy3.z8KIbwgwBkRs        

/tmp
      st_nlink: 5                             4                             &#13;</PRE
></BLOCKQUOTE
><p class="para">This output shows that a file has been added to a monitored
directory (Tripwire also detects when files are deleted), and that
both a directory and a file had changes. In each case, the nature
of the changes are reported to the user. This report can then be
used to determine what to do next.</P
><p class="para">Tripwire has many options, and can be used for several things
other than simple change detection. The papers and man pages provided
in the distribution are quite detailed and should be consulted for
further information<a class="indexterm" name="AUTOID-12417"></A
><a class="indexterm" name="AUTOID-12419"></A
><a class="indexterm" name="AUTOID-12422"></A
>
.</P
></DIV
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch09_01.htm" title="9.1 Prevention"><img src="../gifs/txtpreva.gif" alt="Previous: 9.1 Prevention" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Practical UNIX &amp; Internet Security"><img src="../gifs/txthome.gif" alt="Practical UNIX &amp; Internet Security" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch09_03.htm" title="9.3 A Final Note"><img src="../gifs/txtnexta.gif" alt="Next: 9.3 A Final Note" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">9.1 Prevention</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">9.3 A Final Note</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.htm" title="The Networking CD Bookshelf">Library Home</A
> | <a href="../dnsbind/index.htm" title="DNS &amp; BIND">DNS &amp; BIND</A
> | <a href="../tcpip/index.htm" title="TCP/IP Network Administration">TCP/IP</A
> | <a href="../sendmail/index.htm" title="sendmail">sendmail</A
> | <a href="../smdref/index.htm" title="sendmail Desktop Reference">sendmail Reference</A
> | <a href="../firewall/index.htm" title="Building Internet Firewalls">Firewalls</A
> | <a href="index.htm" title="Practical UNIX &amp; Internet Security">Practical Security</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
