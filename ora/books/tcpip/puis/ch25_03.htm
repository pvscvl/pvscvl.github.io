<html><head>
<title>[Chapter 25] 25.3 Network Denial of Service Attacks</TITLE>
<meta name="DC.title" content="Practical UNIX &amp; Internet Security"><meta name="DC.creator" content="Simson Garfinkel &amp; Gene Spafford"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-02-04T00:19:49Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-148-8" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch25_01.htm" title="25. Denial of Service Attacks and Solutions"><link rel="prev" href="ch25_02.htm#PUIS-CHP-25-SECT-2.2.6" title="25.2 Overload Attacks"><link rel="next" href="ch26_01.htm" title="26. Computer Security and U.S. Law"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Practical UNIX &amp; Internet Security" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Practical UNIX &amp; Internet Security"><area shape="RECT" coords="467,0,514,18" href="../search/psrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch25_02.htm#PUIS-CHP-25-SECT-2.2.6" title="25.2 Overload Attacks"><img src="../gifs/txtpreva.gif" alt="Previous: 25.2 Overload Attacks" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 25<br>Denial of Service Attacks and Solutions</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="CHAPTER" href="ch26_01.htm" title="26. Computer Security and U.S. Law"><img src="../gifs/txtnexta.gif" alt="Next: 26. Computer Security and U.S. Law" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="PUIS-CHP-25-SECT-3">25.3 Network Denial of Service Attacks</A
></H2
><p class="para"><a class="indexterm" name="AUTOID-34924"></A
><a class="indexterm" name="AUTOID-34927"></A
>Networks
are also vulnerable to denial of service attacks. In attacks of
this kind, someone prevents legitimate users from using the network.
The three common types of network denial of service attacks are
<i class="firstterm">service overloading, message flooding</I
>, and <i class="firstterm">signal grounding.</I
> A fourth
kind of attack is less common, but possible, and we describe it
as <i class="firstterm">clogging.</I
></P
><div class="sect2"><h3 class="sect2"><a class="title" name="PUIS-CHP-25-SECT-3.1">25.3.1 Service Overloading</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-34936"></A
><a class="indexterm" name="AUTOID-34938"></A
><a class="indexterm" name="AUTOID-34941"></A
><i class="firstterm">Service overloading</I
> occurs when floods
of network requests are made to a server daemon on a single computer.
These requests can be initiated in a number of ways, many intentional.
The result of these floods can cause your system to be so busy servicing
interrupt requests and network packets that it is unable to process
regular tasks in a timely fashion. Many requests will be thrown
away as there is no room to queue them. If it is a <span class="acronym">TCP</SPAN
>-based
service, they will be resent and will add to the load. Such attacks
can also mask an attack on another machine by preventing audit records
and remote login requests from being processed in a timely manner.
They deny access to a particular service.</P
><p class="para">You can use a network monitor to reveal the type, and sometimes
the origin, of overload attacks. If you have a list of machines
and the low-level network address (i.e., Ethernet board-level address,
not IP address) this may help you track the source of the problem
if it is local to your network. Isolating your local subnet or network
while finding the problem may also help. If you have logging on
your firewall or router, you can quickly determine if the attack
is coming from outside your network or inside[10]&nbsp;- you
cannot depend on the IP address in the packet being correct.</P
><blockquote class="footnote"><p class="para">[10] We
are unaware of any firewall offering reliable protection against
denial of service attacks of this kind.</P
></BLOCKQUOTE
><p class="para">Unfortunately, there is little that you, as an end user or
administrator, can do to help make the protocols and daemons more
robust in the face of such attacks. The best you can hope to do,
at present, is to limit their effect. Partitioning your local network
into subnets of only a few dozen machines each is one good approach.
That way, if one subnet gets flooded as part of an attack or accident,
not all of your machines are disabled.</P
><p class="para">Another action you can take is to prepare ahead of time for
an attack. If you have the budget, buy a network monitor and have
(protected) spare taps on your subnet so you can quickly hook up
and monitor network traffic. Have printed lists of machine low-level
and high-level addresses available so you can determine the source
of the overload by observing packet flow.</P
><p class="para">One partial help is if the service being attacked is spawned
from the <a class="indexterm" name="AUTOID-34952"></A
>
inetd
with the nowait option. inetd, by default, has a &quot;throttle&quot;
built in. If too many requests are received in too short a time
for any of the services it monitors, it will start rejecting requests
and syslog a message that the service is failing. This is done under
the assumption that some bug has been triggered to cause all the
traffic. This has the side-effect of disabling your service as surely
as if all the requests were accepted for processing. However, it
may prevent the server itself from failing, and it results in an
audit record showing when the problem occurred.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PUIS-CHP-25-SECT-3.2">25.3.2 Message Flooding</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-34958"></A
><a class="indexterm" name="AUTOID-34960"></A
><a class="indexterm" name="AUTOID-34963"></A
><i class="firstterm">Message flooding</I
> occurs when a user slows down
the processing of a system on the network to prevent the system
from processing its normal workload, by &quot;flooding&quot;
the machine with network messages addressed to it. These may be
requests for file service or login, or they may be simple echo-back
requests. Whatever the form, the flood of messages overwhelms the
target so it spends most of its resources responding to the messages.
In extreme cases, this flood may cause the machine to crash with
errors or lack of memory to buffer the incoming packets. This attack
denies access to a network server.</P
><p class="para">A server that is being flooded may not be able to respond
to network requests in a timely manner. An attacker can take advantage
of this behavior by writing a program that answers network requests
in the server's place. For example, an attacker could flood
an <span class="acronym">NIS</SPAN
> server and then issue his own replies
for <span class="acronym">NIS</SPAN
> requests&nbsp;- specifically, requests
for passwords.</P
><p class="para">Suppose an attacker writes a program that literally bombards
an <span class="acronym">NIS</SPAN
> server machine with thousands of echo
requests every second directed to the echo service. The attacker
simultaneously attempts to log into a privileged account on a workstation.
The workstation would request the <span class="acronym">NIS</SPAN
> <kbd class="command">passwd</KBD
>
information from the real server, which would be unable to respond
quickly because of the flood. The attacker's machine could
then respond, masquerading as the server, and supply bogus information,
such as a record with no password. Under normal circumstances, the
real server would notice this false packet and repudiate it. However,
if the server machine is so loaded that it never receives the packet,
or fails to receive it in a timely fashion, it cannot respond. The
client workstation would believe the false response to be correct
and process the attacker's login attempt with the false
<kbd class="command">passwd</KBD
> entry.[11]</P
><blockquote class="footnote"><p class="para">[11] Yes, we are leaving out some low-level
details here. This form of masquerade is not as simple as we describe
it, but it is possible.</P
></BLOCKQUOTE
><p class="para">A similar type of attack is a <a class="indexterm" name="AUTOID-34978"></A
><a class="indexterm" name="AUTOID-34980"></A
>
<i class="firstterm">broadcast storm</I
>. By careful crafting of network
messages, you can create a special message that instructs every
computer receiving the message to reply or retransmit it. The result
is that the network becomes saturated and unusable. Broadcast storms
rarely result from intentional attack; more often, they result from
failing hardware or from software that is under development, buggy,
or improperly installed.</P
><p class="para">Broadcasting incorrectly formatted messages can also bring
a network of machines to a grinding halt. If each machine is configured
to log the reception of bad messages to disk or console, they could
broadcast so many messages that the clients can do nothing but process
the errors and log them to disk or console.</P
><p class="para">Again, preparing ahead with a monitor and breaking your network
into subnets will help you prevent and deal with this kind of problem,
although such planning will not eliminate the problem completely.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PUIS-CHP-25-SECT-3.3">25.3.3 Signal Grounding</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-34989"></A
><a class="indexterm" name="AUTOID-34991"></A
><a class="indexterm" name="AUTOID-34994"></A
><a class="indexterm" name="AUTOID-34997"></A
>Physical
methods can also be used to disable a network. Grounding the signal
on a network cable, introducing some other signal, or removing an
Ethernet terminator all have the effect of preventing clients from
transmitting or receiving messages until the problem is fixed. This
type of attack can be used not only to disable access to various
machines that depend on servers to supply programs and disk resources,
but also to mask break-in attempts on machines that report bad logins
or other suspicious behavior to master machines across the network.
For this reason, you should be suspicious of any network outage;
it might be masking break-ins on individual machines.</P
><p class="para">Another method of protection, which also helps to reduce the
threat of eavesdropping, is to protect the network cable physically
from tapping. This protection reduces the threat of eavesdroppers
and spoofers to well-defined points on the cable. It also helps
reduce the risk of denial of service attacks from signal grounding.
<a class="xref" href="ch12_01.htm" title="Physical Security">Chapter 12, <cite class="chapter">Physical Security</CITE
></A
>,
discusses the physical protection of networks.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PUIS-CHP-25-SECT-3.4">25.3.4 Clogging</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-35004"></A
><a class="indexterm" name="AUTOID-35006"></A
><a class="indexterm" name="AUTOID-35009"></A
>The implementation of
the <span class="acronym">TCP/IP</SPAN
> protocols on many versions of <span class="acronym">UNIX</SPAN
>
allow them to be abused in various ways. To deny service, one way
is to use up the limit of partially open connections. <span class="acronym">TCP</SPAN
>
connections open on a multi-way handshake to open a connection and
set parameters. If an attacker sends multiple requests to initiate
a connection but then fails to follow through with the subsequent
parts of the connection, the recipient will be left with multiple
half-open connections that are occupying limited resources. Usually,
these connection requests have forged source addresses that specify
nonexistent or unreachable hosts that cannot be contacted. Thus,
there is also no way to trace the connections back. They remain
until they time out (or until they are reset by the intruder).</P
><p class="para">By analogy, consider what happens when your phone rings. You
answer and say &quot;hello&quot; but no one responds. You
wait a few seconds, then say &quot;hello&quot; again. You
may do this one or two more times until you &quot;time out&quot;
and hang up. However, during the time you are waiting for someone
to answer your &quot;hello&quot; (and there may be no one
there), the phone line is tied up and can process no other incoming
calls.</P
><p class="para">There is little you can do in these situations. Modifications
to the operating system sources could result in a tunable time-out,
better logging of these problems, and a higher limit on the number
of half-open connections allowed before new requests are rejected.
However, these modifications are not simple to make.</P
><p class="para">Firewalls generally do not address this problem either. The
best you can achieve is to reject connection attempts from unknown
hosts and networks at the firewall. The only other alternative is
to rethink the protocols involved, and perhaps set much higher limits
on the existing implementations. However, any finite limit can be
exceeded. Networks based on virtual circuits (e.g., <span class="acronym">ATM</SPAN
>)
may provide a solution by bypassing the protocol problems completely.
However, <span class="acronym">ATM</SPAN
> and related technologies probably
have their own set of vulnerabilities that we have yet to <a class="indexterm" name="AUTOID-35020"></A
><a class="indexterm" name="AUTOID-35023"></A
>
discover.<a class="indexterm" name="AUTOID-35026"></A
><a class="indexterm" name="AUTOID-35029"></A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch25_02.htm#PUIS-CHP-25-SECT-2.2.6" title="25.2 Overload Attacks"><img src="../gifs/txtpreva.gif" alt="Previous: 25.2 Overload Attacks" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Practical UNIX &amp; Internet Security"><img src="../gifs/txthome.gif" alt="Practical UNIX &amp; Internet Security" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="CHAPTER" href="ch26_01.htm" title="26. Computer Security and U.S. Law"><img src="../gifs/txtnexta.gif" alt="Next: 26. Computer Security and U.S. Law" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">25.2 Overload Attacks</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">26. Computer Security and U.S. Law</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.htm" title="The Networking CD Bookshelf">Library Home</A
> | <a href="../dnsbind/index.htm" title="DNS &amp; BIND">DNS &amp; BIND</A
> | <a href="../tcpip/index.htm" title="TCP/IP Network Administration">TCP/IP</A
> | <a href="../sendmail/index.htm" title="sendmail">sendmail</A
> | <a href="../smdref/index.htm" title="sendmail Desktop Reference">sendmail Reference</A
> | <a href="../firewall/index.htm" title="Building Internet Firewalls">Firewalls</A
> | <a href="index.htm" title="Practical UNIX &amp; Internet Security">Practical Security</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
