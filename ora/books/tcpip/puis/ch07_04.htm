<html><head>
<title>[Chapter 7] 7.4 Software for Backups</TITLE>
<meta name="DC.title" content="Practical UNIX &amp; Internet Security"><meta name="DC.creator" content="Simson Garfinkel &amp; Gene Spafford"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-02-04T00:05:27Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-148-8" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch07_01.htm" title="7. Backups"><link rel="prev" href="ch07_03.htm#PUIS-CHP-7-SECT-3.2" title="7.3 Backing Up System Files"><link rel="next" href="ch08_01.htm" title="8. Defending  Your Accounts"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Practical UNIX &amp; Internet Security" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Practical UNIX &amp; Internet Security"><area shape="RECT" coords="467,0,514,18" href="../search/psrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch07_03.htm#PUIS-CHP-7-SECT-3.2" title="7.3 Backing Up System Files"><img src="../gifs/txtpreva.gif" alt="Previous: 7.3 Backing Up System Files" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 7<br>Backups</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="CHAPTER" href="ch08_01.htm" title="8. Defending  Your Accounts"><img src="../gifs/txtnexta.gif" alt="Next: 8. Defending  Your Accounts" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="PUIS-CHP-7-SECT-4">7.4 Software for Backups</A
></H2
><p class="para">There <a class="indexterm" name="AUTOID-9710"></A
><a class="indexterm" name="AUTOID-9713"></A
>
are a number of software packages that allow you
to perform backups. Some are vendor specific, and others are quite
commonly available. Each may have particular benefits in a particular
environment. We'll outline a few of the more common ones
here, including a few that you might not otherwise consider. You
should consult your local documentation to see if there are special
programs available with your system.</P
><div class="sidebar"><h4 class="sidebar"><a class="title" name="AUTOID-9716">Beware Backing up Files with
Holes</A
></H4
><p class="para">Standard <span class="acronym">UNIX</SPAN
> <a class="indexterm" name="AUTOID-9720"></A
><a class="indexterm" name="AUTOID-9723"></A
><a class="indexterm" name="AUTOID-9726"></A
>
files
are direct-access files; in other words, you can specify an offset
from the beginning of the file, and then read and write from that
location. If you ever had experience with older mainframe systems
that only allowed files to be accessed sequentially, you know how
important random access is for many things, including building random-access
databases.</P
><p class="para">An interesting case occurs when a program references beyond
the &quot;end&quot; of the file and then writes. What goes
into the space between the old end-of-file and the data just now
written? Zero-filled bytes would seem to be appropriate, as there
is really nothing there.</P
><p class="para">Now, consider that the span could be millions of bytes long,
and there is really nothing there. If <span class="acronym">UNIX</SPAN
> were
to allocate disk blocks for all that space, it could possibly exhaust
the free space available. Instead, values are set internal to the
inode and file data pointers so that only blocks needed to hold
written data are allocated. The remaining span represents a <i class="filename">hole</I
>
that <span class="acronym">UNIX</SPAN
> remembers. Attempts to read any of
those blocks simply return zero values. Attempts to write any location
in the hole results in a real disk block being allocated and written,
so everything continues to appear normal. (One way to identify these
files is to compare the size reported by <kbd class="command">ls -l</KBD
> with the size reported
by <kbd class="command">ls -s</KBD
>.)</P
><p class="para">Small files with large holes can be a serious concern to backup
software, depending on how your software handles them. Simple copy
programs will try to read the file sequentially, and the result
is a stream with lots of zero bytes. When copied into a new file,
blocks are actually allocated for the whole span and lots of space
may be wasted. More intelligent programs, like dump, bypass the
normal file system and read the actual inode and set of data pointers.
Such programs only save and restore the actual blocks allocated,
thus saving both tape and file storage.</P
><p class="para">Keep these comments in mind if you try to copy or archive
a file that appears to be larger in size than the disk it resides
in. Copying a file with holes to another device can cause you to
suddenly run out of disk space.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PUIS-CHP-7-SECT-4.1">7.4.1 Simple Local Copies</A
></H3
><p class="para">The simplest form of backup is to make simple copies of your
files and directories. You might make those copies to local disk,
to removable disk, to tape, or to some other media. Some file copy
programs will properly duplicate modification and access times,
and copy owner and protection information, if you are super-user
or the files belong to you. They seldom recreate links, however.
Examples include:</P
><dl class="variablelist"><dt class="term">cp</DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-9745"></A
>The standard command
for copying individual files. Some versions support a <i class="filename">-r</I
> option
to copy an entire directory tree.</P
></DD
><dt class="term">dd</DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-9752"></A
>This command can
be used to copy a whole disk partition at one time by specifying
the names of partition device files as arguments. This process should
be done with great care if the source partition is mounted: in such
a case, the device should be for the <em class="emphasis">block</EM
>
version of the disk rather than the <em class="emphasis">character</EM
>
version. <em class="emphasis">Never</EM
> copy onto a mounted partition&nbsp;- unless
you want to destroy the partition and cause an abrupt system halt!</P
></DD
></DL
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PUIS-CHP-7-SECT-4.2">7.4.2 Simple Archives</A
></H3
><p class="para">There <a class="indexterm" name="AUTOID-9760"></A
>
are
several programs that are available to make simple archives packed
into disk files or onto tape. These are usually capable of storing
all directory information about a file, and restoring much of it
if the correct options are used. Running these programs may result
in a change of either (or both) the atime and the ctime of items
archived, however.[8]</P
><blockquote class="footnote"><p class="para">[8] See <a class="xref" href="ch05_01.htm" title="The UNIX Filesystem">Chapter 5, <cite class="chapter">The UNIX Filesystem</CITE
></A
>, for information about these file characteristics.</P
></BLOCKQUOTE
><dl class="variablelist"><dt class="term">ar</DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-9771"></A
>Simple file archiver.
Largely obsolete for backups (although still used for creating <span class="acronym">UNIX</SPAN
>
libraries).</P
></DD
><dt class="term">tar</DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-9778"></A
>Simple tape archiver.
Can create archives to files, tapes, or elsewhere. This choice seems
to be the most widely used simple archive program.</P
></DD
><dt class="term">cpio</DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-9784"></A
>Another simple
archive program. This program can create portable archives in plain
<span class="acronym">ASCII</SPAN
> of even binary files, if invoked with the
correct options. (<kbd class="command">cpio</KBD
> does record empty directories.)</P
></DD
><dt class="term">pax</DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-9792"></A
>The portable archiver/exchange
tool, which is defined in the <span class="acronym">POSIX</SPAN
> standard.
This program combines <kbd class="command">tar</KBD
> and <kbd class="command">cpio</KBD
> functionality. This program uses
tar as its default file format.</P
></DD
></DL
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PUIS-CHP-7-SECT-4.3">7.4.3 Specialized Backup Programs</A
></H3
><p class="para">There <a class="indexterm" name="AUTOID-9800"></A
>
are
several dedicated backup programs.</P
><dl class="variablelist"><dt class="term"><a class="indexterm" name="AUTOID-9806"></A
>dump/restore	</DT
><dd class="listitem"><p class="para">This program is the &quot;classic&quot;
one for archiving a whole partition at once, and for the associated
file restorations. Many versions of this program exist, but all
back up from the raw disk device, thus bypassing calls that would
change any of the times present in inodes for files and directories.
This program can also make the backups quite fast.</P
></DD
><dt class="term"><a class="indexterm" name="AUTOID-9812"></A
><a class="indexterm" name="AUTOID-9814"></A
>backup	</DT
><dd class="listitem"><p class="para">Some <span class="acronym">SVR4</SPAN
> systems have a suite
of programs named, collectively, backup. These are also designed
specifically to do backups of files and whole filesystems.</P
></DD
></DL
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PUIS-CHP-7-SECT-4.4">7.4.4 Encrypting Your Backups</A
></H3
><p class="para">You <a class="indexterm" name="AUTOID-9823"></A
><a class="indexterm" name="AUTOID-9826"></A
>
can
improvise your own backup encryption if you have an encryption program
that can be used as a filter and you use a backup program that can
write to a file, such as the <kbd class="command">dump</KBD
>, <kbd class="command">cpio</KBD
>, or <kbd class="command">tar</KBD
> commands. For example,
to make an encrypted tape archive using the tar command and the
des encryption program, you might use the following command:</P
><blockquote class="screen"><pre class="screen"># tar cf - dirs and files | des -ef | dd bs=10240 of=/dev/rm8</PRE
></BLOCKQUOTE
><p class="para">Although software encryption has potential drawbacks (for
example, the software encryption program can be compromised so it
records all passwords), this method is certainly preferable to storing
sensitive information on unencrypted backup.</P
><p class="para">Here is an example: suppose you have a <kbd class="command">des</KBD
> encryption program
called <a class="indexterm" name="AUTOID-9836"></A
>
<kbd class="command">des</KBD
> which prompts the user
for a key and then encrypts its standard input to standard output.[9] You
could use this program with the <i class="filename"><a class="indexterm" name="AUTOID-9844"></A
><a class="indexterm" name="AUTOID-9846"></A
>dump</I
> (called <i class="filename">ufsdump</I
>
under Solaris) program to back up the file system <i class="filename">/u</I
> to
the device <i class="filename">/dev/rmt8</I
> with the command:</P
><blockquote class="footnote"><p class="para">[9] Some versions of the <i class="filename">des</I
> command require
that you specify the &quot;<i class="filename">-f</I
> -&quot;
option to make the program run as a filter.</P
></BLOCKQUOTE
><blockquote class="screen"><pre class="screen"><b class="emphasis.bold"># dump f - /u | des -e | dd bs=10240 of=/dev/rmt8</B
>
Enter key: </PRE
></BLOCKQUOTE
><p class="para">If you wanted to back up the filesystem with <a class="indexterm" name="AUTOID-9855"></A
>
<kbd class="command">tar</KBD
>, you would instead use the command:</P
><blockquote class="screen"><pre class="screen"><b class="emphasis.bold"># tar cf - /u | des -e | dd bs=10240 of=/dev/rmt8 </B
>
Enter key:</PRE
></BLOCKQUOTE
><p class="para">To read these files back, you would use the following command
sequences:</P
><blockquote class="screen"><pre class="screen"><b class="emphasis.bold"># dd bs=10240 if=/dev/rmt8 | des -d | restore fi - </B
>
Enter key:</PRE
></BLOCKQUOTE
><p class="para">and:</P
><blockquote class="screen"><pre class="screen"><b class="emphasis.bold"># dd bs=10240 if=/dev/rmt8 | des -d | tar xpBfv - </B
>
Enter key:</PRE
></BLOCKQUOTE
><p class="para">In both of these examples, the backup programs are instructed
to send the backup of file systems to standard output. The output
is then encrypted and written to the tape drive.</P
><blockquote class="note"><p class="para"><strong>NOTE:</STRONG
> If you encrypt the backup of a filesystem and you forget
the encryption key, the information stored on the backup will be
unusable.</P
></BLOCKQUOTE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PUIS-CHP-7-SECT-4.5">7.4.5 Backups Across the Net</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-9872"></A
><a class="indexterm" name="AUTOID-9875"></A
>A
few programs can be used to do backups across a network link. Thus,
you can do backups on one machine, and write the results to another.
An obvious example would be using a program that can write to stdout,
and then piping the output to a remote shell. Some programs are
better integrated with networks, however.</P
><dl class="variablelist"><dt class="term"><a class="indexterm" name="AUTOID-9881"></A
>rdump/rrestore			</DT
><dd class="listitem"><p class="para">This is a network version of the <kbd class="command">dump</KBD
> and <kbd class="command">restore</KBD
>
commands. It uses a dedicated process on a machine that has a tape
drive, and sends the data to that process. Thus, it allows a tape
drive to be shared by a whole network of machines.</P
></DD
><dt class="term"><a class="indexterm" name="AUTOID-9889"></A
>rcp	</DT
><dd class="listitem"><p class="para">This command enables you to copy a file or a whole
directory tree to a remote machine.</P
></DD
><dt class="term"><a class="indexterm" name="AUTOID-9895"></A
>ftp	</DT
><dd class="listitem"><p class="para">Although the venerable <kbd class="command">ftp</KBD
> command can be used to
copy files, it is slow and cumbersome to use for many files, and
it does not work well with directories. In addition, the standard
<kbd class="command">ftp</KBD
> does not understand <span class="acronym">UNIX</SPAN
> device files, sockets,[10]
symbolic links, or other items that one might wish to backup.</P
><blockquote class="footnote"><p class="para">[10] Why back up sockets? Because some programs depend upon them.</P
></BLOCKQUOTE
></DD
><dt class="term"><a class="indexterm" name="AUTOID-9907"></A
>rdist	 </DT
><dd class="listitem"><p class="para">This program is often used to keep multiple machines
in synchronization by copying files from a master machine to a set
of slaves. However, the program primarily works by copying only
files that have changed from a master set, and can therefore update
a backup set of files from a working version. Thus, instead of distributing
new files, the program archives them. <kbd class="command">rdist</KBD
> can also be run in a
mode to simply print the names of files that differ between an old
set and a destination machine.</P
></DD
></DL
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PUIS-CHP-7-SECT-4.6">7.4.6 Commercial Offerings</A
></H3
><p class="para">There <a class="indexterm" name="AUTOID-9915"></A
>
are
several commercial backup and restore utilities. Several of them
feature special options that make indexing files or staging little-used
files to slower storage (such as write-once optical media) easier.
Unfortunately, lack of portability across multiple platforms, and
compatibility with sites that may not have the software installed,
might be drawbacks for many users. Be sure to fully evaluate the
conditions under which you'll need to use the program and
decide on a backup strategy before purchasing the software.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="PUIS-CHP-7-SECT-4.7">7.4.7 inode Modification Times</A
></H3
><p class="para">Most <a class="indexterm" name="AUTOID-9922"></A
><a class="indexterm" name="AUTOID-9925"></A
><a class="indexterm" name="AUTOID-9928"></A
>
backup programs check the access
and modification times on files and directories to determine which
entries need to be stored to the archive. Thus, you can force an
entry to be included (or not included) by altering these times.
The <kbd class="command">touch</KBD
> command enables you to do so quickly and efficiently.</P
><p class="para">However, many programs that do backups will cause the access
time on files and directories to be updated when they are read for
the backup. As this behavior might break other software that depends
on the access times, these programs sometimes use the <kbd class="command">utime</KBD
> system
call to reset the access time back to the value it had prior to
the backup.</P
><p class="para">Unfortunately, using the <i class="filename">ctime </I
>()
system call will cause the inode change time, the <a class="indexterm" name="AUTOID-9935"></A
><a class="indexterm" name="AUTOID-9937"></A
>
ctime, to be altered. There is no filesystem
call to set the ctime back to what it was, so the ctime remains
altered. This is a bane to system security investigations, because
it wipes out an important piece of information about files that
may have been altered by an intruder.</P
><p class="para">For this reason, we suggest that you determine the behavior
in this regard by any candidate backup program and choose one that
does not alter file times. When considering a commercial backup
system (or when designing your own), it is wise to avoid a system
that changes the ctime or atime stored in the inode.</P
><p class="para">If you cannot use a backup system that directly accesses the
raw disk partitions, you have two other choices:<a class="indexterm" name="AUTOID-9943"></A
><a class="indexterm" name="AUTOID-9946"></A
><a class="indexterm" name="AUTOID-9949"></A
><a class="indexterm" name="AUTOID-9951"></A
></P
><ol class="orderedlist"><li class="listitem"><p class="para">You can unmount your disks and remount
them read-only before backing them up. This procedure will allow
you to use programs such as <kbd class="command">cpio</KBD
> or <kbd class="command">tar</KBD
> without changing the atime.</P
></LI
><li class="listitem"><p class="para">If your system supports <span class="acronym">NFS</SPAN
> loopback
mounts (such as Solaris or SunOS), you can create a read-only <span class="acronym">NFS</SPAN
>
loopback mount for each disk. Then you can back up the <span class="acronym">NFS</SPAN
>-mounted
disk, rather than the real device.</P
></LI
></OL
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch07_03.htm#PUIS-CHP-7-SECT-3.2" title="7.3 Backing Up System Files"><img src="../gifs/txtpreva.gif" alt="Previous: 7.3 Backing Up System Files" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Practical UNIX &amp; Internet Security"><img src="../gifs/txthome.gif" alt="Practical UNIX &amp; Internet Security" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="CHAPTER" href="ch08_01.htm" title="8. Defending  Your Accounts"><img src="../gifs/txtnexta.gif" alt="Next: 8. Defending  Your Accounts" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">7.3 Backing Up System Files</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">8. Defending  Your Accounts</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.htm" title="The Networking CD Bookshelf">Library Home</A
> | <a href="../dnsbind/index.htm" title="DNS &amp; BIND">DNS &amp; BIND</A
> | <a href="../tcpip/index.htm" title="TCP/IP Network Administration">TCP/IP</A
> | <a href="../sendmail/index.htm" title="sendmail">sendmail</A
> | <a href="../smdref/index.htm" title="sendmail Desktop Reference">sendmail Reference</A
> | <a href="../firewall/index.htm" title="Building Internet Firewalls">Firewalls</A
> | <a href="index.htm" title="Practical UNIX &amp; Internet Security">Practical Security</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
