<html><head>
<title>[Chapter 23] 23.8 Picking a Random Seed</TITLE>
<meta name="DC.title" content="Practical UNIX &amp; Internet Security"><meta name="DC.creator" content="Simson Garfinkel &amp; Gene Spafford"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-02-04T00:18:00Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-148-8" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch23_01.htm" title="23. Writing Secure SUID and Network Programs"><link rel="prev" href="ch23_07.htm#PUIS-CHP-23-SECT-7.1" title="23.7 UNIX Pseudo-Random Functions"><link rel="next" href="ch23_09.htm" title="23.9 A Good Random Seed Generator"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="Practical UNIX &amp; Internet Security" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="Practical UNIX &amp; Internet Security"><area shape="RECT" coords="467,0,514,18" href="../search/psrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch23_07.htm#PUIS-CHP-23-SECT-7.1" title="23.7 UNIX Pseudo-Random Functions"><img src="../gifs/txtpreva.gif" alt="Previous: 23.7 UNIX Pseudo-Random Functions" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 23<br>Writing Secure SUID and Network Programs</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch23_09.htm" title="23.9 A Good Random Seed Generator"><img src="../gifs/txtnexta.gif" alt="Next: 23.9 A Good Random Seed Generator" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="PUIS-CHP-23-SECT-7.5">23.8 Picking a Random Seed</A
></H2
><p class="para"><a class="indexterm" name="IDX-643409"></A
>Using a good random number generator is easy. Picking a random seed,
on the other hand, can be quite difficult. Conceptually, picking a
random number should be easy: pick something that is always
different. But in practice, picking a random number-especially one
that will be used as the basis of a cryptographic key-is quite
difficult. The practice is difficult because many things that change
all the time actually change in predictable ways.</P
><p class="para">A stunning example of
a poorly chosen seed for a random number generator appeared on the
front page of the New York Times
[14]
in September 1995. The problem was in <a class="indexterm" name="IDX-643410"></A
>
Netscape Navigator, a popular program for 
browsing the World Wide Web. Instead of using truly random information for seeding the 
random number generator, Netscape's programmers used a combination of the current time 
of day, the PID of the running Netscape program, and the Parent Process ID (PPID). 
Researchers at the University of California at Berkeley discovered that they could, through a 
process of trial and error, discover the numbers that any copy of Netscape was using and 
crack the encrypted messages with relative ease.</P
><blockquote class="footnote"><p class="para">[14] John Markoff, &quot;Security Flaw Is Discovered in Software Used in
Shopping,&quot; <em class="emphasis">The New York Times</EM
>,September 19, 1995 p.1.</P
></BLOCKQUOTE
><p class="para">Another example of a badly chosen seed 
generation routine was used in Kerberos version 4. This routine was based on the time of 
day XORed with other information. The XOR effectively masked out the other information 
and resulted in a seed of only 20 bits of predictable value. This reduced the key space from 
more than 72 quadrillion possible keys to slightly more than one million, thus allowing keys 
to be guessed in a matter of seconds. When this weakness was discovered at Purdue's 
COAST Laboratory, conversations with personnel at MIT revealed that they had known for 
years that this problem existed, but the patch had somehow never been
released.</P
><p class="para">In the book Network Security, <em class="emphasis">Private Communication in a Public
World,</EM
> Kaufman <em class="emphasis">et al</EM
> identify three typical mistakes when picking
random-number seeds:</P
><ol class="orderedlist"><li class="listitem"><p class="para">Seeding a random number generator from a limited space.</P
><p class="para">If you seed your random number generator with an 8-bit number,
your generator only has one of 256 possible initial seeds.  You will
only have 256 possible sequences of random numbers coming from the
function (even if your generator has 128 bytes of internal
state).</P
></LI
><li class="listitem"><p class="para">Using a hash value of only the current <a class="indexterm" name="IDX-643411"></A
>
time as a random
seed.</P
><p class="para">This practice was the problem 
with the Netscape security bug. The problem was that even though the UNIX operating 
system API appears to return the current time to the nearest microsecond, most operating 
systems have a resolution considerably coarser-usually within one 1/60th of a second or 
less. As Kaufman et al point out, if a clock has only 1/60th of a
second <a class="indexterm" name="IDX-643412"></A
><a class="indexterm" name="AUTOID-33034"></A
>
granularity, and the 
intruder knows to the nearest hour at what time the current time was sampled, then there 
are only 60x60x60 = 216,000 possible values for the supposedly random seed.</P
></LI
><li class="listitem"><p class="para">Divulging the seed value itself.</P
><p class="para">In one case reported by Kaufman et al, and originally discovered
by Jeff Schiller of MIT, a program used the time of day to choose a
per-message encryption key. The problem in this case was that the
application included the time that the message was generated in its
unencrypted header of the message.</P
></LI
></OL
><p class="para">How do you pick a good random number? Here are some
ideas:</P
><ol class="orderedlist"><li class="listitem"><p class="para">Use a genuine source of randomness, such as a radioactive source, static on the FM dial, 
thermal noise, or something similar.</P
><p class="para">Measuring the timing of hard disk drives can be 
another source of randomness, provided that you can access the hardware at a sufficiently 
low level.</P
></LI
><li class="listitem"><p class="para">Ask the user to type a set of text, and sample the time between<a class="indexterm" name="IDX-643413"></A
>
keystrokes.</P
><p class="para">If you get the same amount of time between two keystrokes, throw
out the second value; the user is prob- ably holding down a key and
the key is repeating. (This technique is used by PGP as a source of
randomness for its random number generator.)</P
></LI
><li class="listitem"><p class="para">Monitor the user.</P
><p class="para">Each time the user presses the keyboard, take the time between the 
current keypress and the last keypress, add it to the current random number seed, and hash 
the result with a cryptographic hash function. You can also use mouse movements to add 
still more randomness.</P
></LI
><li class="listitem"><p class="para">Monitor the computer.</P
><p class="para">Use readily available, constantly changing information, such as the 
number of virtual memory pages that have been paged in, the status of the network, and so 
forth.</P
></LI
></OL
><p class="para">In December 1994, Donald Eastlake, Steve Crocker, and Jeffrey
Schiller prepared <a class="indexterm" name="IDX-643414"></A
>
RFC 
1750, which made many observations about picking seeds for random number generators. 
Among them:</P
><ol class="orderedlist"><li class="listitem"><p class="para">Avoid relying on the <a class="indexterm" name="IDX-643415"></A
><a class="indexterm" name="AUTOID-33065"></A
>
system clock.</P
><p class="para">Many system clocks are surprisingly non-random. Many 
clocks which claim to provide accuracy actually don't, or they don't provide good accuracy 
all the time.</P
></LI
><li class="listitem"><p class="para">Don't use <a class="indexterm" name="IDX-643416"></A
>
Ethernet addresses or hardware serial numbers.</P
><p class="para">Such numbers are usually &quot;heavily structured&quot; and have &quot;heavily
structured subfields.&quot; As a result, one could easily try all of the
possible combinations, or guess the value based on the date of
manufacture.</P
></LI
><li class="listitem"><p class="para">Beware of using information such as the time of the arrival of
network packets.</P
><p class="para">Such external sources of randomness could be manipulated by an
adversary.</P
></LI
><li class="listitem"><p class="para">Don't use random selection from a large database (such as a CD-ROM) as a source of 
randomness.</P
><p class="para">The reason, according to RFC 1750, is that your adversary may have access to 
the same database. The database may also contain unnoticed structure.</P
></LI
><li class="listitem"><p class="para">Consider using analog input devices already present on your
system.</P
><p class="para">For example, RFC 1750 
suggests using the <i class="filename">/dev/audio</I
> device present on some UNIX workstations as a source of 
random numbers. The stream is further compressed to remove systematic skew. For 
example:</P
></LI
></OL
><p class="para"><blockquote class="screen"><pre class="screen">$ <b class="emphasis.bold">cat /dev/audio | compress - &gt;random-bit-stream</B
></PRE
></BLOCKQUOTE
></P
><p class="para">RFC 1750 advises that the microphone not be connected to the
audio input jack, so that the <a class="indexterm" name="IDX-643417"></A
><a class="indexterm" name="AUTOID-33092"></A
>
<i class="filename">/dev/audio</I
> device will pick up random
electrical noise. This rule may not be true on all hardware
platforms. You should check your hardware with the microphone turned
on and with no microphone connected to see which way gives a &quot;better&quot;
source of random numbers.</P
><a class="indexterm" name="AUTOID-33095"></A
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch23_07.htm#PUIS-CHP-23-SECT-7.1" title="23.7 UNIX Pseudo-Random Functions"><img src="../gifs/txtpreva.gif" alt="Previous: 23.7 UNIX Pseudo-Random Functions" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="Practical UNIX &amp; Internet Security"><img src="../gifs/txthome.gif" alt="Practical UNIX &amp; Internet Security" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch23_09.htm" title="23.9 A Good Random Seed Generator"><img src="../gifs/txtnexta.gif" alt="Next: 23.9 A Good Random Seed Generator" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">23.7 UNIX Pseudo-Random Functions</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">23.9 A Good Random Seed Generator</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.htm" title="The Networking CD Bookshelf">Library Home</A
> | <a href="../dnsbind/index.htm" title="DNS &amp; BIND">DNS &amp; BIND</A
> | <a href="../tcpip/index.htm" title="TCP/IP Network Administration">TCP/IP</A
> | <a href="../sendmail/index.htm" title="sendmail">sendmail</A
> | <a href="../smdref/index.htm" title="sendmail Desktop Reference">sendmail Reference</A
> | <a href="../firewall/index.htm" title="Building Internet Firewalls">Firewalls</A
> | <a href="index.htm" title="Practical UNIX &amp; Internet Security">Practical Security</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
