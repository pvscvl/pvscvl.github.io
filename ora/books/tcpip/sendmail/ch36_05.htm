<html><head>
<title>[Chapter 36] 36.5 sendmail's exit() Status</TITLE>
<meta name="DC.title" content="sendmail"><meta name="DC.creator" content="Bryan Costales &amp; Eric Allman"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-01-06T21:59:22Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-222-0" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch36_01.htm" title="36. The Command Line"><link rel="prev" href="ch36_04.htm#SML2-CH-36-SECT-4-2-2" title="36.4 Processing the Command Line"><link rel="next" href="ch36_06.htm" title="36.6 Pitfalls"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="sendmail" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="sendmail"><area shape="RECT" coords="467,0,514,18" href="../search/ssrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch36_04.htm#SML2-CH-36-SECT-4-2-2" title="36.4 Processing the Command Line"><img src="../gifs/txtpreva.gif" alt="Previous: 36.4 Processing the Command Line" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 36<br>The Command Line</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch36_06.htm" title="36.6 Pitfalls"><img src="../gifs/txtnexta.gif" alt="Next: 36.6 Pitfalls" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="SML2-CH-36-SECT-5">36.5 sendmail's exit() Status</A
></H2
><p class="para"><a class="indexterm" name="AUTOID-51401"></A
><a class="indexterm" name="SML2-CH-36-IX-EXIT-VALUES-SENDMAIL"></A
><a class="indexterm" name="SML2-CH-36-IX-SENDMAIL-EXIT-VALUES"></A
>Like any other program under UNIX, <em class="emphasis">sendmail</EM
> can return
meaningful values to the environment and thus to you.
All of the possible exit values are documented in <em class="emphasis">&lt;sysexits.h&gt;</EM
>
along with the values assigned to each name.
Here, we provide a bit more explanation about the most commonly used
names.</P
><p class="para">The relationship between each exit value and its corresponding DSN
<code class="literal">detail</CODE
> is shown in <a class="xref" href="ch30_05.htm#SML2-CH-30-SECT-5-2-1" title="DSN Versus exit(2) Values with $@ of $#error">Table 30.6</A
> in <a class="xref" href="ch30_05.htm#SML2-CH-30-SECT-5-2-1" title="The error Delivery Agent">Section 30.5.2, "The error Delivery Agent"</A
>.
That table also summarizes the values described here.</P
><div class="sect2"><h3 class="sect2"><a class="title" name="SML2-CH-36-SECT-5-1">36.5.1 EX_CANTCREAT   Can't Write a User's File</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-51417"></A
><a class="indexterm" name="AUTOID-51419"></A
>An exit value of EX_CANTCREAT (the value 73) means
that an output file could not be written to. 
This error generally refers to a user-specified file rather than a system- or configuration-file-specified file.
Some problems that can lead to this error (without an error message)
is an attempt to write to a file that has any execute bit set
in its permissions, a file that has more than one link, and (if the
<code class="literal">SafeFileEnvironment</CODE
> option; see <a class="xref" href="ch34_08.htm" title="">Section 34.8.58, SafeFileEnvironment</A
>,
is set) a file that is not a regular file.&#13;</P
><p class="para">If the <code class="literal">SafeFileEnvironment</CODE
> option is specified and
<em class="emphasis">sendmail</EM
> is unable to <em class="emphasis">chroot</EM
>(2) into the specified directory,
the following message is logged:</P
><p class="para"><blockquote class="screen"><pre class="screen">mailfile: Cannot chroot(<i class="lineannotation">directory</I
>)</PRE
></BLOCKQUOTE
></P
><p class="para">When delivery is to a file, <em class="emphasis">sendmail</EM
> will log the following error
if the file cannot be opened or <em class="emphasis">stat</EM
>(3)'d:</P
><p class="para"><blockquote class="screen"><pre class="screen">cannot open: <i class="lineannotation">reason here</I
>
cannot fstat: <i class="lineannotation">reason here</I
></PRE
></BLOCKQUOTE
></P
><p class="para">and the <em class="emphasis">fork</EM
>(2)'d child will exit with EX_CANTCREAT.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="SML2-CH-36-SECT-5-2">36.5.2 EX_CONFIG     A Configuration Error</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-51443"></A
>The EX_CONFIG exit value (the value 78) means that
a fatal configuration problem was found, but this does not necessarily
mean that the problem was found while reading the configuration
file. Failure of a delivery agent to function correctly can lead
to this kind of failure:</P
><ul class="itemizedlist"><li class="listitem"><p class="para">During delivery, when a rule set 0 selection of a delivery agent fails to specify
a host with the <code class="literal">$@</CODE
> part (see <a class="xref" href="ch29_06.htm#SML2-CH-29-SECT-6-1" title="Rule Set 0">Section 29.6, "Rule Set 0"</A
>), the following
error is logged and the <em class="emphasis">fork</EM
>(2)'d child exits with EX_CONFIG:</P
><p class="para"><blockquote class="screen"><pre class="screen">null host name for mailer</PRE
></BLOCKQUOTE
></P
><p class="para"></P
></LI
><li class="listitem"><p class="para">During delivery, when <code class="literal">$u</CODE
> appears in the argument list for an SMTP
delivery agent (see <a class="xref" href="ch30_04.htm" title="$u in A=">Section 30.4.1.3, "$u in A="</A
>), <em class="emphasis">sendmail</EM
> logs
the following error and the <em class="emphasis">fork</EM
>(2)'d child exits with EX_CONFIG:</P
><p class="para"><blockquote class="screen"><pre class="screen">non-clever IPC</PRE
></BLOCKQUOTE
></P
><p class="para"></P
></LI
><li class="listitem"><p class="para">During delivery, when an attempt is made to use an SMTP delivery agent
with a version of <em class="emphasis">sendmail</EM
> that was compiled without SMTP
support (see <a class="xref" href="ch18_08.htm" title="">Section 18.8.41, SMTP</A
>), <em class="emphasis">sendmail</EM
> logs  
the following error and the <em class="emphasis">fork</EM
>(2)'d child exits with EX_CONFIG:</P
><p class="para"><blockquote class="screen"><pre class="screen">deliver: need SMTP compiled to use clever mailer</PRE
></BLOCKQUOTE
></P
></LI
></UL
><p class="para">Some apparent DNS errors are really configuration problems.
In the following error, <code class="replaceable"><i>hostB</I
></CODE
> is an MX record that points back to your
host. The problem is that your host doesn't know that it should be
accepting mail for <code class="replaceable"><i>hostB</I
></CODE
>. The solution is to add <code class="replaceable"><i>hostB</I
></CODE
>
to your local <code class="literal">$=w</CODE
> class (see <a class="xref" href="ch32_05.htm" title="">Section 32.5.8</A
>).</P
><p class="para"><blockquote class="screen"><pre class="screen">MX list for <code class="replaceable"><i>hostB</I
></CODE
> points back to <code class="replaceable"><i>ourhost</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">When <em class="emphasis">sendmail</EM
> processes MX records, it skips any records of absurd length
and logs the following message:</P
><p class="para"><blockquote class="screen"><pre class="screen">Host name <code class="replaceable"><i>ourhost</I
></CODE
> too long</PRE
></BLOCKQUOTE
></P
><p class="para">If an MX record points to a CNAME record, the result can be
serious. The first CNAME may point to a second, the second to
a third, and so on. If this list is longer than the number defined
by MAXCNAMEDEPTH in <em class="emphasis">domain.c</EM
>, the result is the following error:</P
><p class="para"><blockquote class="screen"><pre class="screen">DNS failure: CNAME loop for <i class="lineannotation">bad host name here</I
></PRE
></BLOCKQUOTE
></P
><p class="para">One solution is to set the <code class="literal">DontExpandCnames</CODE
> option  (see
<a class="xref" href="ch34_08.htm" title="">Section 34.8.18, DontExpandCnames</A
>) to false, thus causing only the first
CNAME to be used as if it were an A record.</P
><p class="para">Errors in rule set numbers are sometimes only found during actual rewriting:</P
><p class="para"><blockquote class="screen"><pre class="screen">illegal ruleset number <i class="lineannotation">bad number here</I
>
rewrite: excessive recursion (max <code class="replaceable"><i>max</I
></CODE
>), ruleset <i class="lineannotation">bad number here</I
>
rewrite: ruleset <code class="replaceable"><i>num</I
></CODE
>: replacement $<i class="lineannotation">digit</I
> out of bounds
Unknown ruleset <i class="lineannotation">bad name here</I
></PRE
></BLOCKQUOTE
></P
><p class="para">The solutions to these problems should be obvious. 
See <a class="xref" href="ch29_01.htm" title="Rule Sets">Chapter 29, <cite class="chapter">Rule Sets</CITE
></A
>, for guidance.</P
><p class="para">Note that this EX_CONFIG and EX_SOFTWARE below cause the local 
<em class="emphasis">postmaster</EM
> to get a copy of the message on the presumption that local
errors can only be fixed locally.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="SML2-CH-36-SECT-5-3">36.5.3 EX_IOERR   A System I/O Error Occurred</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-51510"></A
><a class="indexterm" name="AUTOID-51512"></A
><a class="indexterm" name="AUTOID-51515"></A
>An exit value of EX_IOERR (the value 74) means
that a serious operating system error occurred. This class of error
relates mostly to disk I/O.</P
><p class="para">If the body of a mail message could not be read, the following error
message is logged:</P
><p class="para"><blockquote class="screen"><pre class="screen">putbody: df<i class="lineannotation">qid</I
>: read error</PRE
></BLOCKQUOTE
></P
><p class="para">&#13;The file may have vanished because
of a disk crash and may have been restored to <em class="emphasis">lost+found</EM
>. The <em class="emphasis">qid</EM
>
is the queue identifier that will help you to find the <code class="literal">qf</CODE
> file. Inside
that <code class="literal">qf</CODE
> file are an <code class="literal">I</CODE
> line that give the inode and major and minor device numbers
of the disk that held the <code class="literal">df</CODE
> file (see <a class="xref" href="ch23_09.htm" title="">Section 23.9.7, I line</A
>).</P
><p class="para">An error that occurs while writing to the <em class="emphasis">pipe</EM
>(2) connection to a
delivery agent causes the following error to be logged and
for the <em class="emphasis">fork</EM
>(2)'d child to exit with EX_CONFIG:</P
><p class="para"><blockquote class="screen"><pre class="screen">putbody: write error</PRE
></BLOCKQUOTE
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="SML2-CH-36-SECT-5-4">36.5.4 EX_OK     No Problems, All Was Fine</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-51537"></A
>The EX_OK exit code (value 0) indicates that <em class="emphasis">sendmail</EM
> did its job
and there were no errors.</P
><p class="para">Note that this should be the exit value of all the programs that
<em class="emphasis">sendmail</EM
> runs when they succeed without errors. To illustrate,
this C language code returns a random value:</P
><p class="para"><blockquote class="screen"><pre class="screen">main()
{
        <i class="lineannotation"><img src="../chars/larr.gif" alt="&lt;-"> need a ``</I
>return 0<i class="lineannotation">'' here</I
>
}</PRE
></BLOCKQUOTE
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="SML2-CH-36-SECT-5-5">36.5.5 EX_OSERR     A System Resource Error</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-51549"></A
><a class="indexterm" name="AUTOID-51551"></A
><a class="indexterm" name="AUTOID-51554"></A
>The EX_OSERR exit code (value 71) results from various operating system
errors several of which are described below.
In general, this exit value is accompanied by an error message
describing the problem.</P
><p class="para">When <em class="emphasis">sendmail</EM
> is unable to get a <em class="emphasis">pipe</EM
>(2) connection to
send the mail message to a delivery agent, it logs one of the following
errors and the <em class="emphasis">fork</EM
>(2)'d child exits with EX_OSERR:</P
><p class="para"><blockquote class="screen"><pre class="screen"><i class="lineannotation">recipient</I
>... openmailer(<i class="lineannotation">delivery agent</I
>): pipe (to mailer)
<i class="lineannotation">recipient</I
>... openmailer(<i class="lineannotation">delivery agent</I
>): pipe (from mailer)</PRE
></BLOCKQUOTE
></P
><p class="para">If <em class="emphasis">sendmail</EM
> is unable to <code class="replaceable"><i>dup</I
></CODE
>(2) a file descriptor so that it can
write to its pipe, it logs one of first three errors below.
If <em class="emphasis">sendmail</EM
> fails to write to its transcript
file (as set by the <code class="literal">-X</CODE
> switch; see <a class="xref" href="ch26_04.htm" title="Log Transactions with -X">Section 26.4</A
>),
it logs the last error below.
In all four cases the current open file descriptors are logged as described in
<a class="xref" href="ch26_03.htm" title="SIGUSR1  Dump States">Section 26.3.3, "SIGUSR1  Dump States"</A
>.</P
><p class="para"><blockquote class="screen"><pre class="screen"><i class="lineannotation">recipient</I
>... openmailer(<i class="lineannotation">delivery agent</I
>): cannot dup pipe <i class="lineannotation">file descriptor</I
> for stdout
<i class="lineannotation">recipient</I
>... openmailer(<i class="lineannotation">delivery agent</I
>): cannot dup stdout for stderr
<i class="lineannotation">recipient</I
>... openmailer(<i class="lineannotation">delivery agent</I
>): cannot dup pipe <i class="lineannotation">file descriptor</I
> for stdin
<i class="lineannotation">recipient</I
>... openmailer(<i class="lineannotation">delivery agent</I
>): cannot dup xscript <i class="lineannotation">file descriptor</I
> for stdout</PRE
></BLOCKQUOTE
></P
><p class="para">If a delivery agent cannot be executed, <em class="emphasis">sendmail</EM
> logs the following error message,
and the <em class="emphasis">fork</EM
>(2)'d child exits with EX_OSERR:</P
><p class="para"><blockquote class="screen"><pre class="screen">Cannot exec <i class="lineannotation">delivery agent: reason</I
></PRE
></BLOCKQUOTE
></P
><p class="para">To save (cache) information about hosts to which connections have been
made, <em class="emphasis">sendmail</EM
> saves a copy of the file descriptors for that
connection to its internal <em class="emphasis">mci</EM
> structures (see <a class="xref" href="ch37_05.htm" title="">Section 37.5.44, -d11.1</A
>).
If it cannot duplicate a file descriptor it logs one of the following messages
and the <em class="emphasis">fork</EM
>(2)'d child exits with EX_OSERR.</P
><p class="para"><blockquote class="screen"><pre class="screen">deliver: cannot create mailer output channel, fd=<i class="lineannotation">file descriptor</I
>
deliver: cannot create mailer input channel, fd=<i class="lineannotation">file descriptor</I
></PRE
></BLOCKQUOTE
></P
><p class="para">When looking up the MX record for a host, the <em class="emphasis">resolv</EM
> library can return
an absurd value. When that happens, the following message is logged and that
MX record is ignored:</P
><p class="para"><blockquote class="screen"><pre class="screen">getmxrr: res_search (<i class="lineannotation">host</I
>) failed with impossible h_errno (<i class="lineannotation">bad value</I
>)</PRE
></BLOCKQUOTE
></P
><p class="para">To queue a message, <em class="emphasis">sendmail</EM
> must save a <em class="emphasis">qf</EM
> file to its
queue directory. If it cannot create that file, if the directory exists,
and if the <em class="emphasis">uid</EM
> of <em class="emphasis">sendmail</EM
> is 0, then 
the following error message will be logged and the <em class="emphasis">fork</EM
>(2)'d child
will exit with EX_OSERR:</P
><p class="para"><blockquote class="screen"><pre class="screen">Cannot create &quot;<i class="lineannotation">qf file</I
>&quot; in &quot;<i class="lineannotation">directory</I
>&quot; (euid=<i class="lineannotation">uid</I
>): <i class="lineannotation">reason</I
></PRE
></BLOCKQUOTE
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="SML2-CH-36-SECT-5-6">36.5.6 EX_OSFILE   A Critical System File Failure</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-51623"></A
><a class="indexterm" name="AUTOID-51625"></A
>The EX_OSFILE exit code (value 72) results when certain system files
could not be opened and when certain system programs could not be
executed.</P
><p class="para">When <em class="emphasis">sendmail</EM
> gets a SIGHUP signal, it attempts
to re-execute itself (see <a class="xref" href="ch26_03.htm" title="SIGHUP  Restart">Section 26.3.2, "SIGHUP  Restart"</A
>). If it fails, the following
error is logged and <em class="emphasis">sendmail</EM
> exits:</P
><p class="para"><blockquote class="screen"><pre class="screen">could not exec <i class="lineannotation">/path/sendmail</I
>: <i class="lineannotation">reason</I
></PRE
></BLOCKQUOTE
></P
><p class="para">The <em class="emphasis">sendmail</EM
> program can run a program to look up a <code class="replaceable"><i>key</I
></CODE
>
in a database. If <em class="emphasis">sendmail</EM
> fails to run the program, it prints
the following error:</P
><p class="para"><blockquote class="screen"><pre class="screen">prog_map_lookup(<i class="lineannotation">program</I
>) failed (<i class="lineannotation">reason</I
>) - closing</PRE
></BLOCKQUOTE
></P
><p class="para">We probably don't have to mention this, 
but the <em class="emphasis">sendmail</EM
> program has to read its configuration file.
If it fails to open, stat, or read that file or if that file is
not a plain file, it prints one of the following errors:</P
><p class="para"><blockquote class="screen"><pre class="screen">cannot open
cannot fstat
not a plain file
I/O read error</PRE
></BLOCKQUOTE
></P
><p class="para">and exits with an EX_OSFILE value.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="SML2-CH-36-SECT-5-7">36.5.7 EX_SOFTWARE  An Internal Software Error</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-51652"></A
><a class="indexterm" name="AUTOID-51654"></A
>The EX_SOFTWARE exit code (value 70) indicates that
a software error occurred.</P
><p class="para">When <em class="emphasis">sendmail</EM
> has successfully connected to a remote host,
it checks to see whether it knows to whom it connected.
If for some strange reason it doesn't know,
it logs this error and drops 

the connection,
and the <em class="emphasis">fork</EM
>(2)'d child exits with EX_OSERR:</P
><p class="para"><blockquote class="screen"><pre class="screen">deliver: no host name</PRE
></BLOCKQUOTE
></P
><p class="para">When figuring out whether or not to speak SMTP, <em class="emphasis">sendmail</EM
>
looks to see whether the <code class="literal">$u</CODE
> macro
is present in the <code class="literal">A=</CODE
> equate for the selected delivery agent
(see <a class="xref" href="ch30_04.htm" title="$u in A=">Section 30.4.1.3</A
>).
If <code class="literal">$u</CODE
> is absent, <em class="emphasis">sendmail</EM
> will speak SMTP.
If <em class="emphasis">sendmail</EM
> was compiled
without SMTP support (see <a class="xref" href="ch18_08.htm" title="">Section 18.8.41</A
>), the following error
is logged and the <em class="emphasis">fork</EM
>(2)'d child
exits with an EX_SOFTWARE exit code:</P
><p class="para"><blockquote class="screen"><pre class="screen">SMTP style mailer not implemented</PRE
></BLOCKQUOTE
></P
><p class="para">When  <em class="emphasis">fork</EM
>(2)s and <em class="emphasis">exec</EM
>(2)s a delivery
agent to perform delivery, it calls <em class="emphasis">wait</EM
>(2) to wait for
the delivery agent to exit. If the call to <em class="emphasis">wait</EM
>(2) fails,
<em class="emphasis">sendmail</EM
> logs the following error and the <em class="emphasis">fork</EM
>(2)'d child
exits with an EX_SOFTWARE exit code:</P
><p class="para"><blockquote class="screen"><pre class="screen">endmailer <i class="lineannotation">delivery agent name</I
>: wait</PRE
></BLOCKQUOTE
></P
><p class="para">When <em class="emphasis">sendmail</EM
> first starts to run (provided that it is not in 
rule-testing mode), it performs a <em class="emphasis">chdir</EM
>(2) into its
queue directory. If that <em class="emphasis">chdir</EM
>(2) fails, <em class="emphasis">sendmail</EM
> logs
the following error and exits with an EX_SOFTWARE exit code:</P
><p class="para"><blockquote class="screen"><pre class="screen">cannot chdir(<i class="lineannotation">directory</I
>)</PRE
></BLOCKQUOTE
></P
><p class="para">The <em class="emphasis">sendmail</EM
> program can run a program to look up a <code class="replaceable"><i>key</I
></CODE
>
in a database. After running that program, <em class="emphasis">sendmail</EM
> calls
<em class="emphasis">wait</EM
>(2) to wait for the program to exit. If the call to
<em class="emphasis">wait</EM
>(2) fails, <em class="emphasis">sendmail</EM
> prints the following error and
the <em class="emphasis">fork</EM
>(2)'d child exits with an EX_SOFTWARE exit code:</P
><p class="para"><blockquote class="screen"><pre class="screen">prog_map_lookup(<i class="lineannotation">program</I
>): wait error <i class="lineannotation">reason</I
></PRE
></BLOCKQUOTE
></P
><p class="para">When bouncing mail,
<em class="emphasis">sendmail</EM
> tries to set the sender to <code class="literal">Postmaster</CODE
> if no
sender can be determined.
Before it can use that address (<code class="literal">Postmaster</CODE
>), it has to parse it with
rules to select a delivery agent. If that parsing fails, <em class="emphasis">sendmail</EM
>
logs the following error and the <em class="emphasis">fork</EM
>(2)'d 
child exits with an EX_SOFTWARE exit code:</P
><p class="para"><blockquote class="screen"><pre class="screen">Cannot parse Postmaster!</PRE
></BLOCKQUOTE
></P
><p class="para">When the sending of an error message results in an error, an attempt
is made to send notification of that error to the address
defined by the <code class="literal">DoubleBounceAddress</CODE
> option (see
<a class="xref" href="ch34_08.htm" title="">Section 34.8.21, DoubleBounceAddress</A
>). If parsing that address
fails, <em class="emphasis">sendmail</EM
>
logs the following error and the <em class="emphasis">fork</EM
>(2)'d 
child exits with an EX_SOFTWARE exit code:</P
><p class="para"><blockquote class="screen"><pre class="screen">cannot parse <i class="lineannotation">double bounce address</I
></PRE
></BLOCKQUOTE
></P
><p class="para">See the description of <code class="literal">$n</CODE
> (see <a class="xref" href="ch31_10.htm" title="">Section 31.10.26, $n</A
>)
for another error that results in the <em class="emphasis">fork</EM
>(2)'d
child exiting with an EX_SOFTWARE exit code.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="SML2-CH-36-SECT-5-8">36.5.8 EX_TEMPFAIL     A Recoverable Error</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-51726"></A
><a class="indexterm" name="AUTOID-51728"></A
><a class="indexterm" name="AUTOID-51730"></A
>The EX_TEMPFAIL exit code (value 75) is returned by <em class="emphasis">sendmail</EM
>
to indicate that a temporary error has occurred. Temporary errors mean
that the mail message will be put in (or remain in) the queue for the present,
and another delivery attempt will be made later.</P
><p class="para">One example of this type of error occurs in looking up aliases via a network service,
such as NIS. If all the servers are too busy to answer before
a timeout, then <em class="emphasis">sendmail</EM
> should temporarily queue the message
and look up the aliases later:</P
><p class="para"><blockquote class="screen"><pre class="screen">alias database unavailable</PRE
></BLOCKQUOTE
></P
><p class="para">Another example occurs when there is a failure to open a file descriptor
as a file pointer with <em class="emphasis">fdopen</EM
>(3). This can happen caching
an SMTP connection:</P
><p class="para"><blockquote class="screen"><pre class="screen">cannot open SMTP client channel, fd=<i class="lineannotation">file descriptor</I
></PRE
></BLOCKQUOTE
></P
><p class="para">In looking up hostnames with DNS, the name server
or the network might be so overloaded that
the lookup will time out:</P
><p class="para"><blockquote class="screen"><pre class="screen"><i class="lineannotation">host</I
>: Name server timeout</PRE
></BLOCKQUOTE
></P
><p class="para">DNS lookup failures can also be caused by dial-on-demand networks
when the connect is not fast enough. If the delivery mode of <em class="emphasis">sendmail</EM
>
is set by the <code class="literal">DeliveryMode</CODE
> (<code class="literal">d</CODE
>) option (see <a class="xref" href="ch34_08.htm" title="">Section 34.8.16, DeliveryMode (d)</A
>)
to <code class="literal">defer</CODE
>, that failed connection is deemed temporary.</P
><p class="para">Normally, delivery agents exit because they have finished delivering
the email. If one exits because of a received signal, <em class="emphasis">sendmail</EM
>
logs the following message and the <em class="emphasis">fork</EM
>(2)'d
child exits with an EX_TEMPFAIL exit code:</P
><p class="para"><blockquote class="screen"><pre class="screen">mailer <i class="lineannotation">delivery agent name</I
> died with signal <i class="lineannotation">signal in octal</I
></PRE
></BLOCKQUOTE
></P
><p class="para">Also, if the <code class="literal">-X</CODE
> command-line switch (see <a class="xref" href="ch26_04.htm" title="Log Transactions with -X">Section 26.4</A
>) was used
to specify a transcript file, the arguments to the delivery agent will
be recorded in that file.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="SML2-CH-36-SECT-5-9">36.5.9 EX_UNAVAILABLE   A Resource</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-51766"></A
><a class="indexterm" name="AUTOID-51768"></A
><a class="indexterm" name="AUTOID-51770"></A
>The EX_UNAVAILABLE error code (value 69) indicates that 
some system resource is unavailable. Several examples follow.</P
><p class="para">If the body size of an incoming message is larger
than the size limit imposed by the <code class="literal">M=</CODE
> equate (see <a class="xref" href="ch30_04.htm" title="">Section 30.4.7, M=</A
>)
the following error is reported:</P
><p class="para"><blockquote class="screen"><pre class="screen">Message is too large; <i class="lineannotation">M=</I
> bytes max</PRE
></BLOCKQUOTE
></P
><p class="para">&#13;All delivery agent programs must be designed to return an exit value
that is defined in <em class="emphasis">&lt;sysexits.h&gt;</EM
>. If a misdesigned delivery
agent exits with some other value, <em class="emphasis">sendmail</EM
> will issue this
error and consider the delivery to have failed:</P
><p class="para"><blockquote class="screen"><pre class="screen">unknown mailer error <i class="lineannotation">decimal representation of the error value</I
></PRE
></BLOCKQUOTE
></P
><p class="para">When delivering to a file, <em class="emphasis">sendmail</EM
> forks, and the child performs
the actual delivery. If that child dies because of a signal, the parent
logs this error:</P
><p class="para"><blockquote class="screen"><pre class="screen">child died on signal <i class="lineannotation">decimal representation of the signal value</I
></PRE
></BLOCKQUOTE
></P
><p class="para">To queue a message, <em class="emphasis">sendmail</EM
> must save a <em class="emphasis">qf</EM
> file to its  
queue directory. If it cannot open that file and if the error is other
than that the file already exists,
the following error message will be logged and the <em class="emphasis">fork</EM
>(2)'d child
will exit with EX_UNAVAILABLE:</P
><p class="para"><blockquote class="screen"><pre class="screen">queuename: cannot create <em class="emphasis">file</EM
> in <em class="emphasis">directory</EM
> (euid=<em class="emphasis">userid</EM
>)</PRE
></BLOCKQUOTE
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="SML2-CH-36-SECT-5-10">36.5.10 EX_USAGE   A Command Was Used             Incorrectly</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-51801"></A
><a class="indexterm" name="AUTOID-51803"></A
>The EX_USAGE error code (value 64) means that a command or
configuration line was used incorrectly.</P
><p class="para">For instance, the <em class="emphasis">sendmail</EM
> daemon can be
executed only by <em class="emphasis">root</EM
>. If anyone else tries to run it with
<code class="literal">-bd</CODE
> or <code class="literal">-bD</CODE
>, the following error is printed
and <em class="emphasis">sendmail</EM
> exits with an EX_USAGE error:</P
><p class="para"><blockquote class="screen"><pre class="screen">Permission denied</PRE
></BLOCKQUOTE
></P
><p class="para">Clumsy fingers can also cause problems. If a command-line switch
is used that is unknown to <em class="emphasis">sendmail</EM
>, the following
error will be printed and <em class="emphasis">sendmail</EM
> will exit with an EX_USAGE
code:</P
><p class="para"><blockquote class="screen"><pre class="screen">sendmail: illegal option - <i class="lineannotation">bad option here</I
></PRE
></BLOCKQUOTE
></P
><p class="para">In parsing an address, that address can be rejected if it contains
control characters:</P
><p class="para"><blockquote class="screen"><pre class="screen">Address contained invalid control characters</PRE
></BLOCKQUOTE
></P
><p class="para">If the <code class="literal">EightBitMode</CODE
> (<code class="literal">8</CODE
>) option (see <a class="xref" href="ch34_08.htm" title="">Section 34.8.22, EightBitMode (8)</A
>)
is specified with a bad character, the following error is printed and
<em class="emphasis">sendmail</EM
> exits with an EX_USAGE code:</P
><p class="para"><blockquote class="screen"><pre class="screen">Unknown 8-bit mode <i class="lineannotation">bad character</I
></PRE
></BLOCKQUOTE
></P
><p class="para">&#13;If the <code class="literal">DeliveryMode</CODE
> (<code class="literal">d</CODE
>) option (see <a class="xref" href="ch34_08.htm" title="">Section 34.8.16</A
>)
is given a bad mode specification with a bad character, <em class="emphasis">sendmail</EM
> will 
print the following message and exit with an EX_USAGE code:</P
><p class="para"><blockquote class="screen"><pre class="screen">Unknown delivery mode <i class="lineannotation">bad mode here</I
></PRE
></BLOCKQUOTE
></P
><p class="para"><a class="indexterm" name="AUTOID-51840"></A
><a class="indexterm" name="AUTOID-51841"></A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch36_04.htm#SML2-CH-36-SECT-4-2-2" title="36.4 Processing the Command Line"><img src="../gifs/txtpreva.gif" alt="Previous: 36.4 Processing the Command Line" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="sendmail"><img src="../gifs/txthome.gif" alt="sendmail" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch36_06.htm" title="36.6 Pitfalls"><img src="../gifs/txtnexta.gif" alt="Next: 36.6 Pitfalls" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">36.4 Processing the Command Line</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">36.6 Pitfalls</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.htm" title="The Networking CD Bookshelf">Library Home</A
> | <a href="../dnsbind/index.htm" title="DNS &amp; BIND">DNS &amp; BIND</A
> | <a href="../tcpip/index.htm" title="TCP/IP Network Administration">TCP/IP</A
> | <a href="index.htm" title="sendmail">sendmail</A
> | <a href="../smdref/index.htm" title="sendmail Desktop Reference">sendmail Reference</A
> | <a href="../firewall/index.htm" title="Building Internet Firewalls">Firewalls</A
> | <a href="../puis/index.htm" title="Practical UNIX &amp; Internet Security">Practical Security</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
