<html><head>
<title>[Chapter 32] 32.2 Access Class in Rules</TITLE>
<meta name="DC.title" content="sendmail"><meta name="DC.creator" content="Bryan Costales &amp; Eric Allman"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-01-06T20:20:32Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-222-0" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch32_01.htm" title="32. Class Macros"><link rel="prev" href="ch32_01.htm" title="32.1 Class Configuration Commands"><link rel="next" href="ch32_03.htm" title="32.3 Class with m4"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="sendmail" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="sendmail"><area shape="RECT" coords="467,0,514,18" href="../search/ssrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch32_01.htm" title="32.1 Class Configuration Commands"><img src="../gifs/txtpreva.gif" alt="Previous: 32.1 Class Configuration Commands" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 32<br>Class Macros</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch32_03.htm" title="32.3 Class with m4"><img src="../gifs/txtnexta.gif" alt="Next: 32.3 Class with m4" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="SML2-CH-32-SECT-2">32.2 Access Class in Rules</A
></H2
><p class="para">Class arrays are useful only in the LHS of rules.
The <em class="emphasis">sendmail</EM
> program offers two ways to use them:
<code class="literal">$=X</CODE
> 
The <code class="literal">$=</CODE
> prefix causes <em class="emphasis">sendmail</EM
> to seek a match
between the workspace and one of the words in a class list.
[5]
<code class="literal">$~X</CODE
> 
The <code class="literal">$~</CODE
> prefix causes <em class="emphasis">sendmail</EM
> to accept only
an entry in the workspace that does not match any of the words
in a class list.&#13;</P
><blockquote class="footnote"><p class="para">[5] Under V8, words in a class can be multitokened.</P
></BLOCKQUOTE
><div class="sect2"><h3 class="sect2"><a class="title" name="SML2-CH-32-SECT-2-1">32.2.1 Matching Any in a Class: $=</A
></H3
><p class="para"><a class="indexterm" name="SML2-CH-32-IX-PREFIXES-DOLLAR-PREFIXES-EQUAL"></A
><a class="indexterm" name="AUTOID-36218"></A
>The list of words that form a class array are searched by prefixing
the class name with the characters <code class="literal">$=</CODE
>.</P
><p class="para"><blockquote class="screen"><pre class="screen">R$=X    $@&lt;$1&gt;</PRE
></BLOCKQUOTE
></P
><p class="para">In this rule, the expression <code class="literal">$=X</CODE
>
causes <em class="emphasis">sendmail</EM
> to search a class for
the word that is in the current workspace.
If <em class="emphasis">sendmail</EM
> finds that the word has been defined, and if it
finds that the word is associated with the class <code class="literal">X</CODE
>, 
then a match is made.</P
><p class="para">The matching word
is then made available for use in the RHS rewriting.
Because the value of <code class="literal">$=X</CODE
> is not known ahead of time, the
matched word can be referenced in the RHS with the <code class="literal">$</CODE
><code class="replaceable"><i>digit</I
></CODE
>
positional operator.</P
><p class="para">Consider the following example. Two classes have been declared
elsewhere in the configuration file. The first, <code class="literal">w</CODE
>,  contains all the
possible names for the local host:</P
><p class="para"><blockquote class="screen"><pre class="screen">Cw localhost mailhost server1 server2</PRE
></BLOCKQUOTE
></P
><p class="para">The second, <code class="literal">D</CODE
>, contains the domain names of the two
different networks on which this host sits:</P
><p class="para"><blockquote class="screen"><pre class="screen">CD domain1 domain2</PRE
></BLOCKQUOTE
></P
><p class="para">If the object of a rule is to match any variation on the local
hostname at either of the domains and to rewrite the result
as the official hostname at the appropriate domain, the following
rule can be used:</P
><p class="para"><blockquote class="screen"><pre class="screen">R $=w . $=D    $@ $w . $2     make any variations &quot;official&quot;</PRE
></BLOCKQUOTE
></P
><p class="para">If the workspace contains the tokenized address <em class="emphasis">server1.domain2</EM
>,
<em class="emphasis">sendmail</EM
> first checks to see whether the word <em class="emphasis">server1</EM
>
has been defined as part of the class <code class="literal">w</CODE
>. If it has,
the dot in the rule and workspace match each other, and then <em class="emphasis">sendmail</EM
>
looks up <em class="emphasis">domain2</EM
>.</P
><p class="para">If both the host part and the domain part are found to be members of
their respective classes,
the RHS of the rule is called to rewrite the workspace.
The <code class="literal">$2</CODE
> in the workspace corresponds to the <code class="literal">$=D</CODE
> in the LHS.
The <code class="literal">$=D</CODE
> matches the <em class="emphasis">domain2</EM
> from the workspace.
So that text is used to rewrite the new workspace.</P
><p class="para">Note that prior to V8 <em class="emphasis">sendmail</EM
>,
only words could be in classes. When <em class="emphasis">sendmail</EM
> looked up
the workspace to check for a match to a class, it looked up only
a single token. 
That is, if the workspace contained <em class="emphasis">server1.domain2.edu</EM
>,
the LHS expression <code class="literal">$=D</CODE
> would cause <em class="emphasis">sendmail</EM
> to

look up only the <em class="emphasis">domain2</EM
> part. The <em class="emphasis">.edu</EM
> part would
not be looked up, and consequently the rule would fail.</P
><p class="para">Note that the V8 and IDA versions of <em class="emphasis">sendmail</EM
> allow multitoken class matching.<a class="indexterm" name="AUTOID-36266"></A
>&#13;</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="SML2-CH-32-SECT-2-2">32.2.2 Matching Any Not in a Class: $~</A
></H3
><p class="para"><a class="indexterm" name="SML2-CH-32-IX-PREFIXES-DOLLAR-PREFIXES-TILDE"></A
>The inverse of the <code class="literal">$=</CODE
> prefix is the <code class="literal">$~</CODE
> prefix.
It is used to match any word in
the workspace that is not in a class.
It is seldom used in production configuration
files; but when the need for its properties arises, it
can be very useful.</P
><p class="para">To illustrate, consider a network with three PC machines on it.
The PC machines cannot receive mail, whereas all the other machines on the network can. If the list of PC hostnames is defined in
the class <code class="literal">{PChosts}</CODE
>:</P
><p class="para"><blockquote class="screen"><pre class="screen">C{PChosts} pc1 pc2 pc3</PRE
></BLOCKQUOTE
></P
><p class="para">Then a rule can be designed that will match any but a PC hostname:</P
><p class="para"><blockquote class="screen"><pre class="screen">R$*&lt;@$~{PChosts}&gt;     $:$1&lt;@$2&gt;       filter out the PC hosts</PRE
></BLOCKQUOTE
></P
><p class="para">Here the LHS looks for an address of the form</P
><p class="para"><blockquote class="screen"><pre class="screen">&quot;user&quot; &quot;&lt;&quot; &quot;@&quot; &quot;<i class="lineannotation">not-a-PC</I
>&quot; &quot;&gt;&quot;</PRE
></BLOCKQUOTE
></P
><p class="para">This matches only if the <code class="literal">@</CODE
> token is <em class="emphasis">not</EM
> followed
by one of the PC hosts listed in class <code class="literal">{PChosts}</CODE
>.
If the part of the workspace that is tested against the list provided
by <code class="literal">$~</CODE
> is found in that list, then the match fails.</P
><p class="para">Note that the <code class="literal">$</CODE
><code class="replaceable"><i>digit</I
></CODE
> positional operator in the RHS (the <code class="literal">$2</CODE
>
above) references the part of the workspace that doesn't match. If the
workspace contains <em class="emphasis">ben&lt;@philly&gt;</EM
>, the <code class="literal">$2</CODE
>
references the <em class="emphasis">philly</EM
>.</P
><p class="para">Also note that multitoken expressions in the workspace will not match, as you
might expect. That is, for multitoken expressions in the workspace,
<code class="literal">$~</CODE
> is <em class="emphasis">not</EM
> the opposite of <code class="literal">$=</CODE
>. To illustrate,
consider this miniconfiguration file:</P
><p class="para"><blockquote class="screen"><pre class="screen">CX hostA.com
R$~X    $@ $1 is not in X
R$=X    $@ yes $1 is in X
R$*     $@ neither</PRE
></BLOCKQUOTE
></P
><p class="para">Now feed a multitokened address through these rules in rule testing
mode:</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>/usr/lib/sendmail -Cx.cf -bt</B
></CODE
>
ADDRESS TEST MODE (ruleset 3 NOT automatically invoked)
Enter &lt;ruleset&gt; &lt;address&gt;
&gt; <code class="userinput"><b>0 hostC.com</B
></CODE
>
rewrite: ruleset   0   input: hostC . com
rewrite: ruleset   0 returns: neither</PRE
></BLOCKQUOTE
></P
><p class="para">&#13;Whenever <code class="literal">$~</CODE
> is given a multitoken expression, it will <em class="emphasis">always</EM
>
find the expression in the class and so will <em class="emphasis">always</EM
> fail.<a class="indexterm" name="AUTOID-36313"></A
>&#13;</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="SML2-CH-32-SECT-2-3">32.2.3 Backup and Retry</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-36317"></A
>Multitoken matching operators,
such as <code class="literal">$+</CODE
>, always try to match the least that they can
(see <a class="xref" href="ch28_05.htm" title="Backup and Retry">Section 28.5.2, "Backup and Retry"</A
>).
Such a simple-minded approach could lead to problems in matching (or not matching) classes in the LHS.
However, the ability of <em class="emphasis">sendmail</EM
> to backup and retry alleviates
this problem.
For example,
consider the following three tokens in the workspace:</P
><p class="para"><blockquote class="screen"><pre class="screen">&quot;A&quot; &quot;.&quot; &quot;B&quot;</PRE
></BLOCKQUOTE
></P
><p class="para">and consider the following LHS rule:</P
><p class="para"><blockquote class="screen"><pre class="screen">R$+ $=X $*</PRE
></BLOCKQUOTE
></P
><p class="para">Because the <code class="literal">$+</CODE
> tries to match the minimum, it first
matches only the <code class="literal">A</CODE
> in the workspace. The <code class="literal">$=X</CODE
> then
tries to match the <code class="literal">.</CODE
> to the class <code class="literal">X</CODE
>. If this
match fails, <em class="emphasis">sendmail</EM
> backs up and tries again.</P
><p class="para">The next time through, the <code class="literal">$+</CODE
> matches the
<code class="literal">A.</CODE
>, and the <code class="literal">$=X</CODE
> tries to match the
<code class="literal">B</CODE
> in the workspace. If <code class="literal">B</CODE
> is not in the class
<code class="literal">X</CODE
>, the entire LHS fails.</P
><p class="para">The ability of the <em class="emphasis">sendmail</EM
> program to back up and retry
LHS matches eliminates much of the ambiguity from rule design.
The multitoken matching operators try to match the minimum
but match more if necessary for the whole LHS to match.&#13;</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="SML2-CH-32-SECT-2-4">32.2.4 Class Name Hashing Algorithm</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-36346"></A
><a class="indexterm" name="AUTOID-36349"></A
>When comparing a token in the workspace to a list of words in
a class array, <em class="emphasis">sendmail</EM
> tries to be as efficient
as possible. Instead of comparing the token to each word in
the list, one by one, it simply looks up the token in its
internal <em class="emphasis">string pool</EM
>. If the token is in the pool
and if the pool listing is marked as belonging to the
class being sought, then a match is found.</P
><p class="para">The comparison of tokens to entries in the string pool is case-insensitive.
Each token is converted to lowercase before the
comparison, and all strings in the string pool are stored in
lowercase.</P
><p class="para">Because strings are stored in the pool as text with a type,
the same string value may be used for different types with no conflict.
For example, the symbolic name of a delivery agent and a word
in a class may be identical, yet they will still be separate entries in
the string pool.</P
><p class="para">The <em class="emphasis">sendmail</EM
> program uses a simple hashing algorithm
to ensure that the token is compared to the fewest possible
strings in the string pool. In normal circumstances that algorithm
performs its job well. At sites with unusually large classes
(perhaps a few thousand hosts in a class of host aliases),
it may be necessary to tune the hashing algorithm. The code
is in the file <em class="emphasis">stab.c</EM
> with the <em class="emphasis">sendmail</EM
> source.
The size of the symbol table hash
is set by the constant STABSIZE.</P
><p class="para">As an alternative to large class arrays,
<em class="emphasis">sendmail</EM
> offers external database macros (see <a class="xref" href="ch33_01.htm" title="Enable at Compile Time">Section 33.1, "Enable at Compile Time"</A
>).
No information is currently available contrasting the efficiency of
the various approaches.&#13;</P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch32_01.htm" title="32.1 Class Configuration Commands"><img src="../gifs/txtpreva.gif" alt="Previous: 32.1 Class Configuration Commands" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="sendmail"><img src="../gifs/txthome.gif" alt="sendmail" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch32_03.htm" title="32.3 Class with m4"><img src="../gifs/txtnexta.gif" alt="Next: 32.3 Class with m4" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">32.1 Class Configuration Commands</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">32.3 Class with m4</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.htm" title="The Networking CD Bookshelf">Library Home</A
> | <a href="../dnsbind/index.htm" title="DNS &amp; BIND">DNS &amp; BIND</A
> | <a href="../tcpip/index.htm" title="TCP/IP Network Administration">TCP/IP</A
> | <a href="index.htm" title="sendmail">sendmail</A
> | <a href="../smdref/index.htm" title="sendmail Desktop Reference">sendmail Reference</A
> | <a href="../firewall/index.htm" title="Building Internet Firewalls">Firewalls</A
> | <a href="../puis/index.htm" title="Practical UNIX &amp; Internet Security">Practical Security</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
