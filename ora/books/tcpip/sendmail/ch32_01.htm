<html><head>
<title>[Chapter 32] Class Macros</TITLE>
<meta name="DC.title" content="sendmail"><meta name="DC.creator" content="Bryan Costales &amp; Eric Allman"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-01-06T20:20:24Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-222-0" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="part04.htm" title="IV. Reference"><link rel="prev" href="ch31_10.htm" title="31.10 Alphabetized Reference"><link rel="next" href="ch32_02.htm#SML2-CH-32-SECT-2-1" title="32.2 Access Class in Rules"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="sendmail" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="sendmail"><area shape="RECT" coords="467,0,514,18" href="../search/ssrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch31_10.htm" title="31.10 Alphabetized Reference"><img src="../gifs/txtpreva.gif" alt="Previous: 31.10 Alphabetized Reference" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 32</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch32_02.htm#SML2-CH-32-SECT-2-1" title="32.2 Access Class in Rules"><img src="../gifs/txtnexta.gif" alt="Next: 32.2 Access Class in Rules" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="CHAPTER"><h1 class="chapter"><a class="title" name="SML2-CH-32">32. Class Macros</A
></H1
><div class="htmltoc"><p><b>Contents:</B
><br><a class="sect1" href="#SML2-CH-32-SECT-1" title="32.1 Class Configuration Commands">Class Configuration Commands</A
><br><a class="sect1" href="ch32_02.htm#SML2-CH-32-SECT-2-1" title="32.2 Access Class in Rules">Access Class in Rules</A
><br><a class="sect1" href="ch32_03.htm" title="32.3 Class with m4">Class with m4</A
><br><a class="sect1" href="ch32_04.htm" title="32.4 Pitfalls">Pitfalls</A
><br><a class="sect1" href="ch32_05.htm" title="32.5 Alphabetized Reference">Alphabetized Reference</A
></P
><p></P
></DIV
><p class="para"></P
><p class="para">A class is like an array of string values. 
In the LHS of rules it is sometimes advantageous to compare individual
tokens to multiple strings when determining a match.
The configuration class command provides this ability.
The class command is similar
to the macro definition command, except that instead of 
assigning a single value to a macro, it assigns many
values to a class. Classes differs
from macros in that they can be used only in the LHS of rules,
whereas macros can be used in either the RHS or the LHS.<a class="indexterm" name="SML2-CH-32-IX-MACROS-CLASS-MACROS"></A
><a class="indexterm" name="SML2-CH-32-IX-CLASS-MACROS"></A
></P
><p class="para">Two different configuration commands can be used to assign values to
a class.
The <code class="literal">C</CODE
> configuration command is used to
assign values from within the configuration file.
The <code class="literal">F</CODE
> configuration command is used in two ways:
to assign values by reading them from a disk file or
to assign values by running a program and reading the output.
These commands may be
intermixed to create a single class or used separately to
create multiple classes.</P
><p class="para">You may wish to review the tutorial in
<a class="xref" href="ch12_01.htm" title="Class">Chapter 12, <cite class="chapter">Class</CITE
></A
>, to see a few typical applications of class.&#13;</P
><div class="sect1"><h2 class="sect1"><a class="title" name="SML2-CH-32-SECT-1">32.1 Class Configuration Commands</A
></H2
><p class="para"><a class="indexterm" name="SML2-CH-32-IX-CLASSES-DECLARING"></A
><a class="indexterm" name="SML2-CH-32-IX-DECLARING-CLASSES"></A
><a class="indexterm" name="AUTOID-35989"></A
><a class="indexterm" name="AUTOID-35991"></A
>The three forms for the class configuration command are the following:</P
><p class="para"><blockquote class="screen"><pre class="screen">C<code class="replaceable"><i>X list           </I
></CODE
><i class="lineannotation"><img src="../chars/larr.gif" alt="&lt;-"> values from configuration file</I
>
F<code class="replaceable"><i>X file           </I
></CODE
><i class="lineannotation"><img src="../chars/larr.gif" alt="&lt;-"> values from a disk file</I
>
F<code class="replaceable"><i>X </I
></CODE
>|<code class="replaceable"><i>program       </I
></CODE
><i class="lineannotation"><img src="../chars/larr.gif" alt="&lt;-"> values via another program</I
></PRE
></BLOCKQUOTE
></P
><p class="para">The class configuration command starts with either the letter
<code class="literal">C</CODE
> or <code class="literal">F</CODE
>, which must begin a line. The <code class="literal">C</CODE
> says
values will be assigned as a part of the configuration command.
The <code class="literal">F</CODE
> says values will be assigned from an external
file or program.</P
><p class="para">The <code class="literal">C</CODE
> or <code class="literal">F</CODE
> is immediately followed
(with no intervening whitespace) by the name of the class
(the <code class="literal">X</CODE
> above). A class name is any single ASCII character or,
beginning with V8.7 <em class="emphasis">sendmail</EM
> a multicharacter name enclosed
in curly braces:</P
><p class="para"><blockquote class="screen"><pre class="screen">C<code class="replaceable"><i>X list               </I
></CODE
><i class="lineannotation"><img src="../chars/larr.gif" alt="&lt;-"> all versions</I
>
C<code class="replaceable"><i>{LongName} list      </I
></CODE
><i class="lineannotation"><img src="../chars/larr.gif" alt="&lt;-"> beginning with V8.7</I
></PRE
></BLOCKQUOTE
></P
><p class="para">See <a class="xref" href="ch31_04.htm" title="Multicharacter Names">Section 31.4.2, "Multicharacter Names"</A
> for a full discussion of how
to use multicharacter names.</P
><p class="para">Note that classes are separate from macros, so they may both use the
same letter or name with no conflict.</P
><p class="para">The <em class="emphasis">sendmail</EM
> program reserves the lowercase letters
for its own use as internally defined class names
(although currently only a few are actually used).
All uppercase letters  and all names that begin with uppercase
letters are available for use.&#13;</P
><div class="sect2"><h3 class="sect2"><a class="title" name="SML2-CH-32-SECT-1-1">32.1.1 The C Class Command</A
></H3
><p class="para"><a class="indexterm" name="SML2-CH-32-IX-C-CONFIGURATION-COMMAND"></A
>The <code class="literal">C</CODE
> form of the class command causes values to
be assigned from within the configuration file.
In general, the class command looks like this:</P
><p class="para"><blockquote class="screen"><pre class="screen">C<code class="replaceable"><i>X list              </I
></CODE
><i class="lineannotation"><img src="../chars/larr.gif" alt="&lt;-"> values from configuration file</I
>
C<code class="replaceable"><i>{XX} list           </I
></CODE
><i class="lineannotation"><img src="../chars/larr.gif" alt="&lt;-"> values from configuration file</I
></PRE
></BLOCKQUOTE
></P
><p class="para">Here, a <code class="replaceable"><i>list</I
></CODE
> is a list 
of string elements (delimited by whitespace) that follows
on the same line as the <code class="literal">C</CODE
> command. Each word in
<code class="replaceable"><i>list</I
></CODE
> is appended to the array of values in the class
<code class="replaceable"><i>X</I
></CODE
> in the first case and to the class <code class="literal">{XX}</CODE
> in
the second.
[1]</P
><blockquote class="footnote"><p class="para">[1] Note that when a class name is a single character, it may be
referenced with or without enclosing curly braces, with no
change in meaning. That is, <code class="literal">CX</CODE
> and <code class="literal">C{X}</CODE
> are
equivalent.</P
></BLOCKQUOTE
><p class="para">Multiple declarations of the same named class may coexist
in the configuration file.
Each declaration after the first appends its string elements to the 
preceding list. That is,</P
><p class="para"><blockquote class="screen"><pre class="screen">CX string1 string2
CX string3 string4</PRE
></BLOCKQUOTE
></P
><p class="para">produces the same class as does</P
><p class="para"><blockquote class="screen"><pre class="screen">CX string1 string2 string3 string4</PRE
></BLOCKQUOTE
></P
><p class="para">Both create a class with four strings as elements.</P
><p class="para">When an array of values is built, whitespace is used to
separate one value from another. Whitespace is defined by
the C language <em class="emphasis">isspace</EM
>(3) routine and usually includes
the space, tab, newline, carriage-return, and form-feed characters.
Each line of text assigned to a class is broken up by <em class="emphasis">sendmail</EM
>
into whitespace delimited words. 
When a line
is indented with a space or a tab, that line is joined by <em class="emphasis">sendmail</EM
>
to the preceding line. Thus the following three declarations
also append four words to the class <code class="literal">X</CODE
>:</P
><p class="para"><blockquote class="screen"><pre class="screen">CX string1
CX string2
CX string3
      string4
   <i class="lineannotation"><img src="../chars/uarr.gif" alt="-^"></I
>
   <i class="lineannotation">tab</I
></PRE
></BLOCKQUOTE
></P
><p class="para">Words that are added to a class cannot be removed after <em class="emphasis">sendmail</EM
>
has read them. Instead, they must be edited out of whatever file
or program produced them, and the <em class="emphasis">sendmail</EM
> daemon must
be killed and restarted.</P
><p class="para">The list of words in a class declaration can include macros. For example
the following assigns the same values to class <code class="literal">X</CODE
> as did
the above example:</P
><p class="para"><blockquote class="screen"><pre class="screen">D{LIST} string1 string2 string3 string4
CX ${LIST}</PRE
></BLOCKQUOTE
></P
><p class="para">Macros used in class declarations are expanded when the configuration file
is read. Deferred macros (those with the <code class="literal">$&amp;</CODE
> prefix) may not be used
in class declarations. But conditionals may:</P
><p class="para"><blockquote class="screen"><pre class="screen">CX ourhost$?{Domain}.${Domain}$.</PRE
></BLOCKQUOTE
></P
><p class="para"><a class="indexterm" name="AUTOID-36073"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="SML2-CH-32-SECT-1-2">32.1.2 The F Class Command</A
></H3
><p class="para"><a class="indexterm" name="SML2-CH-32-IX-F-CONFIGURATION-COMMAND"></A
>The <code class="literal">F</CODE
> form of the class configuration command allows values
to be appended to a class from outside the configuration file.
In general, the file command looks like either of the following:</P
><p class="para"><blockquote class="screen"><pre class="screen">F<code class="replaceable"><i>X file           <img src="../chars/larr.gif" alt="&lt;-"></I
></CODE
> values from a disk file
F<code class="replaceable"><i>X </I
></CODE
>|<code class="replaceable"><i>program       <img src="../chars/larr.gif" alt="&lt;-"></I
></CODE
> values via another program (V8.7 and above, or IDA)</PRE
></BLOCKQUOTE
></P
><p class="para">The <code class="literal">F</CODE
> is immediately followed by the name of the class. This can be either a 
single-character name, as shown, or a multicharacter name.
The name is followed by optional whitespace and then the name of
a file or program.
If the file or program begins with the pipe
character (<code class="literal">|</CODE
>), it is taken to be the name of
a program to run.
[2]
Otherwise, it is taken to be the name of a file
to read.</P
><blockquote class="footnote"><p class="para">[2] This was removed from V8.1 <em class="emphasis">sendmail</EM
> because it presented
a security risk. It was restored to V8.7 because <em class="emphasis">sendmail</EM
> now
checks permissions more carefully and <em class="emphasis">exec</EM
>(2)'s the program itself
instead of using the old, buggy <em class="emphasis">popen</EM
>(3) approach of yore.</P
></BLOCKQUOTE
><p class="para">If SCANF was defined when <em class="emphasis">sendmail</EM
> was compiled
(see <a class="xref" href="ch18_08.htm" title="">Section 18.8.39, SCANF</A
>),
each line that is read from a file or program
is parsed by the C language <em class="emphasis">scanf</EM
>(3) library routine.
The formatting pattern given to <em class="emphasis">scanf</EM
>(3) is <code class="literal">%s</CODE
>,
which tells <em class="emphasis">scanf</EM
>(3) to read only the first whitespace-delimited word from each line of text.
The file is opened for reading
or the program is executed when the configuration file is processed.
If either cannot be opened (for reading or execution), <em class="emphasis">sendmail</EM
>
<em class="emphasis">syslog</EM
>(3)'s the following error and ignores that configuration command:</P
><p class="para"><blockquote class="screen"><pre class="screen">cannot open <em class="emphasis">what</EM
>: <code class="replaceable"><i>why       </I
></CODE
><i class="lineannotation"><img src="../chars/larr.gif" alt="&lt;-"> file</I
>
cannot exec <em class="emphasis">what</EM
>: <code class="replaceable"><i>why       </I
></CODE
><i class="lineannotation"><img src="../chars/larr.gif" alt="&lt;-"> program</I
></PRE
></BLOCKQUOTE
></P
><p class="para">Here, the <em class="emphasis">what</EM
> is the exact text that was given in the configuration
file, and <code class="replaceable"><i>why</I
></CODE
> is the text of a system error.</P
><p class="para">For the file form only,
if the file may optionally not exist, you can prefix its name
with a <code class="literal">-o</CODE
> switch:</P
><p class="para"><blockquote class="screen"><pre class="screen">F<code class="replaceable"><i>X -o file           </I
></CODE
><i class="lineannotation"><img src="../chars/larr.gif" alt="&lt;-"> okay for file to not exist</I
></PRE
></BLOCKQUOTE
></P
><p class="para">This tells <em class="emphasis">sendmail</EM
> to remain silent if the file does not exit.
The <code class="literal">-o</CODE
> switch is useful when a configuration file is
shared by several machines, only some of which need the external class
macro file.</P
><p class="para">The <code class="literal">C</CODE
> and <code class="literal">F</CODE
> forms of the configuration command may be
intermixed for any given class name. For example, consider a file
named <em class="emphasis">/etc/local/names</EM
> with the following contents:</P
><p class="para"><blockquote class="screen"><pre class="screen">string3
string4</PRE
></BLOCKQUOTE
></P
><p class="para">The following two configuration commands add the same
four strings to the class <code class="literal">X</CODE
> as did the <code class="literal">C</CODE
> command alone
in the previous section:</P
><p class="para"><blockquote class="screen"><pre class="screen">CX string1 string2
FX /etc/local/names</PRE
></BLOCKQUOTE
></P
><p class="para">This creates a class with four strings as array elements. Whitespace
delimits one string from the others in the <code class="literal">C</CODE
> line declaration,
and they are stored in the order in which they are listed.
The file <em class="emphasis">/etc/local/names</EM
> is then opened and read,
and each of the two words in that file is appended to the two words
that are already in the class.&#13;</P
><div class="sect3"><h4 class="sect3"><a class="title" name="SML2-CH-32-SECT-1-2-1">32.1.2.1 scanf(3) variations</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-36140"></A
>The file form of the class configuration command
allows different formatting patterns to be used with <em class="emphasis">scanf</EM
>(3).
[3]
But the program form does not
allow any variation, 
and so its <em class="emphasis">scanf</EM
>(3) pattern is always <code class="literal">%s</CODE
>,
which tells <em class="emphasis">scanf</EM
>(3) to read only the first whitespace-delimited
word from each line of text:</P
><blockquote class="footnote"><p class="para">[3] The version of <em class="emphasis">sendmail</EM
> that you are using must have been compiled
with SCANF defined (see <a class="xref" href="ch18_08.htm" title="">Section 18.8.39</A
>)
for <em class="emphasis">scanf</EM
>(3) to be usable from within the configuration file.</P
></BLOCKQUOTE
><p class="para"><blockquote class="screen"><pre class="screen">F<code class="replaceable"><i>X file pat       </I
></CODE
><i class="lineannotation"><img src="../chars/larr.gif" alt="&lt;-"> with scanf(3) pattern</I
>
F<code class="replaceable"><i>X </I
></CODE
>|<code class="replaceable"><i>program       </I
></CODE
><i class="lineannotation"><img src="../chars/larr.gif" alt="&lt;-"> always ``%s''</I
></PRE
></BLOCKQUOTE
></P
><p class="para">If the optional <code class="literal">pat</CODE
> argument to the file form is missing, the pattern
given to <em class="emphasis">scanf</EM
>(3) is <code class="literal">%s</CODE
>.
The <code class="literal">pat</CODE
> argument is separated from the <code class="literal">file</CODE
>
argument by one or more spaces or tabs. It should not be quoted, and it consists
of everything from its first character to the end of the line.
Internally, <em class="emphasis">scanf</EM
>(3) is called with:</P
><p class="para"><blockquote class="screen"><pre class="screen">sscanf(result, pat, input)</PRE
></BLOCKQUOTE
></P
><p class="para">Here, <code class="literal">result</CODE
> is the string array element to be added
to the class definition. The <code class="literal">pat</CODE
> is the <em class="emphasis">scanf</EM
>(3) pattern,
and <code class="literal">input</CODE
> is the line of text read from the file.
[4]</P
><blockquote class="footnote"><p class="para">[4] Avoid using a bare <code class="literal">%s</CODE
> as the pattern. Doing so risks overflowing
internal <em class="emphasis">sendmail</EM
> buffers. Instead specify a limited string
length with something like <code class="literal">%.40s</CODE
>.</P
></BLOCKQUOTE
><p class="para">After each line of text is read from the file and filtered with
the <em class="emphasis">scanf</EM
>(3) pattern, it is further subdivided by <em class="emphasis">sendmail</EM
>
into individual words. That subdividing uses whitespace (as
defined by the C language <em class="emphasis">isspace</EM
>(3) routine) to separate
words. Each separate word is then appended as an individual element
to the class array.</P
><p class="para">Consider the contents of 
the following file named <em class="emphasis">/etc/local/myhosts</EM
>:</P
><p class="para"><blockquote class="screen"><pre class="screen">server1 server2 # my two nets
uuhost          # my uucp alias
#mailhost       # mail server alias (retired 06,23,91)</PRE
></BLOCKQUOTE
></P
><p class="para">This file contains three hostname aliases to be added
to a class, say <code class="literal">H</CODE
>. The following configuration command
does just that:</P
><p class="para"><blockquote class="screen"><pre class="screen">FH /etc/local/myhosts %[^\#]</PRE
></BLOCKQUOTE
></P
><p class="para">The pattern <code class="literal">%[^#]</CODE
> causes <em class="emphasis">scanf</EM
>(3) to read all characters
in each line up to, but not including, the first <code class="literal">#</CODE
> character.
The first line includes two white-space delimited words
that are appended to the class <code class="literal">H</CODE
>. The second line
contains one word, and the third contains none. The <code class="literal">\</CODE
>
character prevents <em class="emphasis">sendmail</EM
> from treating the <code class="literal">#</CODE
> as a
comment character.<a class="indexterm" name="AUTOID-36197"></A
><a class="indexterm" name="AUTOID-36198"></A
><a class="indexterm" name="AUTOID-36199"></A
>&#13;</P
></DIV
></DIV
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch31_10.htm" title="31.10 Alphabetized Reference"><img src="../gifs/txtpreva.gif" alt="Previous: 31.10 Alphabetized Reference" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="sendmail"><img src="../gifs/txthome.gif" alt="sendmail" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch32_02.htm#SML2-CH-32-SECT-2-1" title="32.2 Access Class in Rules"><img src="../gifs/txtnexta.gif" alt="Next: 32.2 Access Class in Rules" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">31.10 Alphabetized Reference</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">32.2 Access Class in Rules</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.htm" title="The Networking CD Bookshelf">Library Home</A
> | <a href="../dnsbind/index.htm" title="DNS &amp; BIND">DNS &amp; BIND</A
> | <a href="../tcpip/index.htm" title="TCP/IP Network Administration">TCP/IP</A
> | <a href="index.htm" title="sendmail">sendmail</A
> | <a href="../smdref/index.htm" title="sendmail Desktop Reference">sendmail Reference</A
> | <a href="../firewall/index.htm" title="Building Internet Firewalls">Firewalls</A
> | <a href="../puis/index.htm" title="Practical UNIX &amp; Internet Security">Practical Security</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
