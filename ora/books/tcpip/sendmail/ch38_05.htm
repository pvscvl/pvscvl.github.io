<html><head>
<title>[Chapter 38] 38.5 Complex Actions</TITLE>
<meta name="DC.title" content="sendmail"><meta name="DC.creator" content="Bryan Costales &amp; Eric Allman"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-01-06T22:48:27Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-222-0" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch38_01.htm" title="38. Rule-Set Testing with -bt"><link rel="prev" href="ch38_04.htm#SML2-CH-38-SECT-4-2" title="38.4 Show an Item"><link rel="next" href="ch38_06.htm#SML2-CH-38-SECT-6-4" title="38.6 Process-Specified Addresses"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="sendmail" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="sendmail"><area shape="RECT" coords="467,0,514,18" href="../search/ssrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch38_04.htm#SML2-CH-38-SECT-4-2" title="38.4 Show an Item"><img src="../gifs/txtpreva.gif" alt="Previous: 38.4 Show an Item" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 38<br>Rule-Set Testing with -bt</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch38_06.htm#SML2-CH-38-SECT-6-4" title="38.6 Process-Specified Addresses"><img src="../gifs/txtnexta.gif" alt="Next: 38.6 Process-Specified Addresses" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="SML2-CH-38-SECT-5">38.5 Complex Actions</A
></H2
><p class="para">Beginning with V8.7 <em class="emphasis">sendmail</EM
>, rule-testing mode offers six simple commands that
accomplish complex tasks. They are listed in
<a class="xref" href="#SML2-CH-38-TAB-0" title="Available -bt  / Commands">Table 38.1</A
>.</P
><table class="table"><caption class="table"><a class="title" name="SML2-CH-38-TAB-0">Table 38.1: Available -bt  / Commands</A
></CAPTION
><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1">Command</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Version</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1"></TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Description</TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">/canon</CODE
></TD
><td class="entry" rowspan="1" colspan="1">V8.7 and above</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-38-SECT-5-1" title="Canonify a Host with /canon">Section 38.5.1</A
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Canonify a host</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">/mx</CODE
></TD
><td class="entry" rowspan="1" colspan="1">V8.7 and above</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-38-SECT-5-2" title="Look Up MX Records with /mx">Section 38.5.2</A
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Look up MX records</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">/map</CODE
></TD
><td class="entry" rowspan="1" colspan="1">V8.7 and above</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-38-SECT-5-3" title="Look up a Database Item with /map">Section 38.5.3</A
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Look up a database item</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">/tryflags</CODE
></TD
><td class="entry" rowspan="1" colspan="1">V8.7 and above</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-38-SECT-5-4" title="Select Whom to /parse or /try with /tryflags">Section 38.5.4</A
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Select whom to /parse or /try</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">/parse</CODE
></TD
><td class="entry" rowspan="1" colspan="1">V8.7 and above</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-38-SECT-5-5" title="Parse an Address with /parse">Section 38.5.5</A
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Parse an address</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">/try</CODE
></TD
><td class="entry" rowspan="1" colspan="1">V8.7 and above</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-38-SECT-5-6" title="Try a Delivery Agent with /try">Section 38.5.6</A
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Try a delivery agent</P
></TD
></TR
></TBODY
></TABLE
><p class="para">A lone <code class="literal">/</CODE
> character will cause the following usage message to print:</P
><p class="para"><blockquote class="screen"><pre class="screen">Usage: /[canon|map|mx|parse|try|tryflags]</PRE
></BLOCKQUOTE
></P
><p class="para">Anything other than the commands shown in 
<a class="xref" href="#SML2-CH-38-TAB-0" title="Available -bt  / Commands">Table 38.1</A
>
(such as <code class="literal">/foo</CODE
>) will produce
an error:</P
><p class="para"><blockquote class="screen"><pre class="screen">Unknown &quot;/&quot; command /foo</PRE
></BLOCKQUOTE
></P
><p class="para"></P
><div class="sect2"><h3 class="sect2"><a class="title" name="SML2-CH-38-SECT-5-1">38.5.1 Canonify a Host with /canon</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-62040"></A
><a class="indexterm" name="AUTOID-62042"></A
>The <code class="literal">/canon</CODE
> rule-testing command causes <em class="emphasis">sendmail</EM
> to
look up the canonical (official, fully qualified) name of a host
and print the result. The form for this command looks like this:</P
><p class="para"><blockquote class="screen"><pre class="screen">/canon <code class="replaceable"><i>host</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">If <code class="replaceable"><i>host</I
></CODE
> is missing, the following usage message is printed:</P
><p class="para"><blockquote class="screen"><pre class="screen">Usage: /canon address</PRE
></BLOCKQUOTE
></P
><p class="para">When you correctly supply the hostname as the argument, <em class="emphasis">sendmail</EM
>
looks up the canonical name and returns the result:</P
><p class="para"><blockquote class="screen"><pre class="screen">&gt; <code class="userinput"><b>/canon icsic</B
></CODE
>
getcanonname(icsic) returns icsic.icsi.berkeley.edu
&gt;</PRE
></BLOCKQUOTE
></P
><p class="para">Here, the hostname <code class="literal">icsic</CODE
> was looked up. Because its
canonical name was found, that name is printed following
the <code class="literal">returns</CODE
>. If the hostname had not been found,
<em class="emphasis">sendmail</EM
> would have printed that same name after the
<code class="literal">returns</CODE
>:</P
><p class="para"><blockquote class="screen"><pre class="screen">&gt; <code class="userinput"><b>/canon foo</B
></CODE
>
getcanonname(foo) returns foo</PRE
></BLOCKQUOTE
></P
><p class="para">If you wish to watch the actual process of a host being canonified,
you can turn on the <code class="literal">-d38.20</CODE
> debugging switch (see <a class="xref" href="ch37_05.htm" title="">Section 37.5.135, -d38.20</A
>)
with the rule-testing <code class="literal">-d</CODE
> command (see <a class="xref" href="ch38_07.htm" title="Add Debugging for Detail">Section 38.7, "Add Debugging for Detail"</A
>):</P
><p class="para"><blockquote class="screen"><pre class="screen">&gt; -d38.20
&gt;</PRE
></BLOCKQUOTE
></P
><p class="para">With that setting, the previous lookup of <code class="literal">icsic</CODE
> produces a trace
of all the steps that <em class="emphasis">sendmail</EM
> takes:</P
><p class="para"><blockquote class="screen"><pre class="screen">&gt; <code class="userinput"><b>/canon icsic</B
></CODE
>
getcanonname(icsic), trying dns
getcanonname(icsic), trying files
text_getcanonname(icsic)
getcanonname(icsic.icsi.berkeley.edu), found
getcanonname(icsic) returns icsic.icsi.berkeley.edu</PRE
></BLOCKQUOTE
></P
><p class="para">Here, <em class="emphasis">sendmail</EM
> first looked up <code class="literal">icsic</CODE
> using DNS. That
lookup failed, so <em class="emphasis">sendmail</EM
> fell back to looking it up in the <em class="emphasis">/etc/hosts</EM
>
file, where it was found. The order in which these techniques are tried is defined
by your service-switch (see <a class="xref" href="ch34_08.htm" title="">Section 34.8.61, ServiceSwitchFile</A
>). If a service-switch mechanism is lacking, the order is internally defined by <em class="emphasis">sendmail</EM
>
and varies depending operating system used.</P
><p class="para">Internally, the <code class="literal">/canon</CODE
> rule-testing command can be watched
in greater detail with the <code class="literal">-d38.20</CODE
> debugging switch
(see <a class="xref" href="ch37_05.htm" title="">Section 37.5.135</A
>) and with the <code class="literal">-d8.2</CODE
> debugging
switch (see <a class="xref" href="ch37_05.htm" title="">Section 37.5.31, -d8.2</A
>).&#13;</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="SML2-CH-38-SECT-5-2">38.5.2 Look Up MX Records with /mx</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-62095"></A
><a class="indexterm" name="AUTOID-62097"></A
>The <code class="literal">/mx</CODE
> rule-testing command causes <em class="emphasis">sendmail</EM
> to
look up a specified hostname and return a list of MX
records for that host.
The form for this command looks like this:</P
><p class="para"><blockquote class="screen"><pre class="screen">/mx <code class="replaceable"><i>host</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">Here, <code class="replaceable"><i>host</I
></CODE
> is the short or fully qualified name of a host.
If <code class="replaceable"><i>host</I
></CODE
> is missing, <em class="emphasis">sendmail</EM
> prints the following usage message:</P
><p class="para"><blockquote class="screen"><pre class="screen">Usage: /mx address</PRE
></BLOCKQUOTE
></P
><p class="para">When <code class="replaceable"><i>host</I
></CODE
> exists and has MX records associated with
it, <em class="emphasis">sendmail</EM
> will look up and print those records. The MX
records are listed in the order in which they will be tried (lowest to highest
preference values). For example,</P
><p class="para"><blockquote class="screen"><pre class="screen">&gt; <code class="userinput"><b>/mx ourhost</B
></CODE
>
getmxrr(ourhost) returns 2 value(s):
        mx.our.domain
        offsite.mx.domain
&gt;</PRE
></BLOCKQUOTE
></P
><p class="para">If no MX records are found, <em class="emphasis">sendmail</EM
> &quot;<code class="literal">returns 0</CODE
>.&quot;
When multiple records have the same preference values, <em class="emphasis">sendmail</EM
>
randomizes the list. During a single run of <em class="emphasis">sendmail</EM
> the randomization
will be the same each time. You can see this by looking up  <em class="emphasis">aol.com</EM
>:</P
><p class="para"><blockquote class="screen"><pre class="screen">&gt; <code class="userinput"><b>/mx aol.com</B
></CODE
>
getmxrr(aol.com) returns 8 value(s):
       d.mx.AOL.COM.
       h.mx.AOL.COM.
       g.mx.AOL.COM.
       c.mx.AOL.COM.
       b.mx.AOL.COM.
       f.mx.AOL.COM.
       e.mx.AOL.COM.
       a.mx.AOL.COM.
&gt; <code class="userinput"><b>/mx aol.com</B
></CODE
>
getmxrr(aol.com) returns 8 value(s):
       d.mx.AOL.COM.
       h.mx.AOL.COM.
       g.mx.AOL.COM.
       c.mx.AOL.COM.
       b.mx.AOL.COM.
       f.mx.AOL.COM.
       e.mx.AOL.COM.
       a.mx.AOL.COM.</PRE
></BLOCKQUOTE
></P
><p class="para">Now exit rule-testing mode and perform two separate runs of <em class="emphasis">sendmail</EM
>:</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>echo /mx aol.com | /usr/lib/sendmail -bt</B
></CODE
>
&gt; /mx aol.com
getmxrr(aol.com) returns 8 value(s):
        d.mx.AOL.COM.
        g.mx.AOL.COM.
        h.mx.AOL.COM.
        c.mx.AOL.COM.
        b.mx.AOL.COM.
        f.mx.AOL.COM.
        a.mx.AOL.COM.
        e.mx.AOL.COM.
% <code class="userinput"><b>echo /mx aol.com | /usr/lib/sendmail -bt</B
></CODE
>
&gt; /mx aol.com
getmxrr(aol.com) returns 8 value(s):
        b.mx.AOL.COM.
        d.mx.AOL.COM.
        g.mx.AOL.COM.
        e.mx.AOL.COM.
        a.mx.AOL.COM.
        c.mx.AOL.COM.
        h.mx.AOL.COM.
        f.mx.AOL.COM.</PRE
></BLOCKQUOTE
></P
><p class="para">If you have defined the <code class="literal">FallbackMXhost</CODE
> (<code class="literal">V</CODE
>)
(see <a class="xref" href="ch34_08.htm" title="">Section 34.8.25, FallbackMXhost (V)</A
>), the host that is specified in that
option will always appear last in the list of mx hosts. As a
side benefit, it will also be listed for hosts that do not
exist:</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>/usr/lib/sendmail -OFallBackMXhost=mx.our.domain -bt</B
></CODE
>
ADDRESS TEST MODE (ruleset 3 NOT automatically invoked)
Enter &lt;ruleset&gt; &lt;address&gt;
&gt; <code class="userinput"><b>/mx foo.bar</B
></CODE
>
getmxrr(foo.bar) returns 1 value(s):
        mx.our.domain
&gt;</PRE
></BLOCKQUOTE
></P
><p class="para">&#13;This <code class="literal">/mx</CODE
> command is available for your use only if
<em class="emphasis">sendmail</EM
> was compiled with NAMED_BIND defined
(see <a class="xref" href="ch18_08.htm" title="">Section 18.8.23, NAMED-BIND</A
>). If NAMED_BIND was
not defined, <em class="emphasis">sendmail</EM
> will print the following error instead
of listing MX records:</P
><p class="para"><blockquote class="screen"><pre class="screen">No MX code compiled in</PRE
></BLOCKQUOTE
></P
><p class="para">Internally, the <code class="literal">/mx</CODE
> rule-testing command can be watched
in a little more detail with the <code class="literal">-d8.2</CODE
> debugging 
switch (see <a class="xref" href="ch37_05.htm" title="">Section 37.5.31</A
>). It can be watched in huge
detail with the <code class="literal">-d8.20</CODE
> debugging switch (see <a class="xref" href="ch37_05.htm" title="">Section 37.5.36, -d8.20</A
>).&#13;</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="SML2-CH-38-SECT-5-3">38.5.3 Look up a Database Item with /map</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-62156"></A
><a class="indexterm" name="AUTOID-62158"></A
>The <code class="literal">/map</CODE
> rule-testing command causes <em class="emphasis">sendmail</EM
> to
look up a key in a database and print the value found (if there is one).
The <code class="literal">/map</CODE
> command is used like this:</P
><p class="para"><blockquote class="screen"><pre class="screen">/map name key</PRE
></BLOCKQUOTE
></P
><p class="para">Here, <code class="replaceable"><i>name</I
></CODE
> is the name of a database. It is either a name
you assigned using a <code class="literal">K</CODE
> configuration command (see 
<a class="xref" href="ch33_03.htm#SML2-CH-33-SECT-3-4-2" title="The K Configuration Command">Section 33.3, "The K Configuration Command"</A
>) or one that is internally defined by
<em class="emphasis">sendmail</EM
>, such as <em class="emphasis">aliases.files</EM
> (see <a class="xref" href="ch33_08.htm" title="">Section 33.8.17, switch</A
>).
The <code class="replaceable"><i>key</I
></CODE
> is the item you wish to look up in the database.
If both <code class="replaceable"><i>name</I
></CODE
> and <code class="replaceable"><i>key</I
></CODE
> are missing, <em class="emphasis">sendmail</EM
>
prints this usage message:</P
><p class="para"><blockquote class="screen"><pre class="screen">Usage: /map mapname key</PRE
></BLOCKQUOTE
></P
><p class="para">If just the <code class="replaceable"><i>key</I
></CODE
> is missing, <em class="emphasis">sendmail</EM
> prints this
error:</P
><p class="para"><blockquote class="screen"><pre class="screen">No key specified</PRE
></BLOCKQUOTE
></P
><p class="para">If the <code class="replaceable"><i>name</I
></CODE
> is that of a database that does not exist, 
<em class="emphasis">sendmail</EM
> prints this error:</P
><p class="para"><blockquote class="screen"><pre class="screen">Map named &quot;<i class="lineannotation">bad name here</I
>&quot; not found</PRE
></BLOCKQUOTE
></P
><p class="para">Otherwise, the database exists, so <em class="emphasis">sendmail</EM
> looks up the
<code class="replaceable"><i>key</I
></CODE
> in it. If the key is not found in the database, <em class="emphasis">sendmail</EM
>
prints this:</P
><p class="para"><blockquote class="screen"><pre class="screen">map_lookup: <i class="lineannotation">name</I
> (<i class="lineannotation">key</I
>) no match (<i class="lineannotation">error number here</I
>)</PRE
></BLOCKQUOTE
></P
><p class="para">The error number corresponds to error numbers listed in <em class="emphasis">&lt;sysexits.h&gt;</EM
>.</P
><p class="para">The <code class="literal">/map</CODE
> rule testing command is very useful for testing
databases of your own design. If a rule that uses the database
fails to work as predicted, use <code class="literal">/map</CODE
> to test that database
by hand.  To illustrate, first get a list of
databases that are available on your local machine:</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>/usr/lib/sendmail -d38.4 -bt | grep map_init</B
></CODE
>
map_init(sequence:aliases.files, NULL, 0)
map_init(implicit:Alias0, /etc/aliases, 0)
map_init(host:host, NULL, 0)
map_init(switch:aliases, aliases, 0)
map_init(dequote:dequote, NULL, 0)</PRE
></BLOCKQUOTE
></P
><p class="para">Here, the name of each database follows the colon in each line.
Your list, of course, will probably be different.</P
><p class="para">The <code class="literal">aliases</CODE
> database, for example, is used to convert a local address into
one or more new addresses. Using the rule-testing <code class="literal">/map</CODE
> command,
you can see how <em class="emphasis">sendmail</EM
> looks up an alias:</P
><p class="para"><blockquote class="screen"><pre class="screen">&gt; <code class="userinput"><b>/map aliases root</B
></CODE
>
map_lookup: aliases (root) returns <code class="replaceable"><i>you, hans@other.site</I
></CODE
> (0)</PRE
></BLOCKQUOTE
></P
><p class="para">The <code class="literal">host</CODE
> database behaves the same as the <code class="literal">/canon</CODE
>
command shown above. It looks up a hostname by using <em class="emphasis">sendmail</EM
>'s
internal <code class="literal">host</CODE
> map (see <a class="xref" href="ch33_04.htm#SML2-CH-33-SECT-4-2" title="$[ and $]: A Special Case">Section 33.4.3, "$[ and $]: A Special Case"</A
>), which returns the
canonical name of the looked-up host:</P
><p class="para"><blockquote class="screen"><pre class="screen">&gt; <code class="userinput"><b>/map host localhost</B
></CODE
>
map_lookup: host (localhost) returns localhost.our.domain. (0)
&gt; <code class="userinput"><b>/map host bogus.no.domain</B
></CODE
>
map_lookup: host (bogus.no.domain) no match (68)</PRE
></BLOCKQUOTE
></P
><p class="para">The <code class="literal">dequote</CODE
> map (see <a class="xref" href="ch33_08.htm" title="">Section 33.8.4, dequote</A
>)
is not really a database at all, but
a hook into a routine that removes quotation marks from addresses:</P
><p class="para"><blockquote class="screen"><pre class="screen">&gt; <code class="userinput"><b>/map dequote &quot;a&quot;@&quot;@b&quot;</B
></CODE
>
map_lookup: dequote (&quot;a&quot;@&quot;@b&quot;) returns a@@b (0)
&gt; <code class="userinput"><b>/map dequote &quot;a</B
></CODE
>
map_lookup: dequote (&quot;a) no match (0)</PRE
></BLOCKQUOTE
></P
><p class="para">Note (in the second example) that it removes only balance quotation marks.</P
><p class="para">All lookups, no matter what the type, can be watched with the
<code class="literal">-d38.20</CODE
> debugging switch (see <a class="xref" href="ch37_05.htm" title="">Section 37.5.135</A
>).&#13;</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="SML2-CH-38-SECT-5-4">38.5.4 Select Whom to /parse or /try with /tryflags</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-62240"></A
>Two additional commands are <code class="literal">/parse</CODE
> and <code class="literal">/try</CODE
>.
We will cover them next, but first we need to mention the
<code class="literal">/tryflags</CODE
> rule-testing command, because it is used to select
the sender or recipient and headers or envelope for those
other commands. The <code class="literal">/tryflags</CODE
> command is used like this:</P
><p class="para"><blockquote class="screen"><pre class="screen">/tryflags h             <i class="lineannotation"><img src="../chars/larr.gif" alt="&lt;-"> set headers</I
>
/tryflags e             <i class="lineannotation"><img src="../chars/larr.gif" alt="&lt;-"> set envelope</I
>
/tryflags s             <i class="lineannotation"><img src="../chars/larr.gif" alt="&lt;-"> set sender</I
>
/tryflags r             <i class="lineannotation"><img src="../chars/larr.gif" alt="&lt;-"> set recipient</I
>
/tryflags er            <i class="lineannotation"><img src="../chars/larr.gif" alt="&lt;-"> set envelope recipient</I
></PRE
></BLOCKQUOTE
></P
><p class="para">The arguments are single letters that may appear in upper- or lowercase
and in any order. Any letter other than those shown
is silently ignored.</P
><p class="para">&#13;The default setting when <em class="emphasis">sendmail</EM
> first starts to run in
rule-testing mode is <code class="literal">er</CODE
> for envelope recipient.
[2]
Omitting the argument causes <em class="emphasis">sendmail</EM
> to print the following usage
statement:</P
><blockquote class="footnote"><p class="para">[2] Internally,
the <code class="literal">/tryflags</CODE
> simply sets or clears the RF_HEADERADDR
or RF_SENDERADDR flags. The meaning of these flags is
documented in <a class="xref" href="ch37_05.htm" title="sendmail's Internal RF_ flags">Table 37.10</A
> (see <a class="xref" href="ch37_05.htm" title="">Section 37.5.81, -d24.4</A
>).</P
></BLOCKQUOTE
><p class="para"><blockquote class="screen"><pre class="screen">Usage: /tryflags [Hh|Ee][Ss|Rr]</PRE
></BLOCKQUOTE
></P
><p class="para"></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="SML2-CH-38-SECT-5-5">38.5.5 Parse an Address with /parse</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-62269"></A
><a class="indexterm" name="AUTOID-62271"></A
><a class="indexterm" name="AUTOID-62274"></A
>The <code class="literal">/parse</CODE
> rule testing command instructs <em class="emphasis">sendmail</EM
> to
pass an address through a predetermined sequence of rules to select
a delivery agent and to put the <code class="literal">$u</CODE
> macro (see <a class="xref" href="ch31_10.htm" title="">Section 31.10.36, $u</A
>)
into its final form. The <code class="literal">/parse</CODE
> command is used like this:</P
><p class="para"><blockquote class="screen"><pre class="screen">/parse address</PRE
></BLOCKQUOTE
></P
><p class="para">If the address is missing, <em class="emphasis">sendmail</EM
> prints the following usage message:</P
><p class="para"><blockquote class="screen"><pre class="screen">Usage: /parse address</PRE
></BLOCKQUOTE
></P
><p class="para">The following example shows a local address being fed into <code class="literal">/parse</CODE
>.
Note that the numbers on the left are for later reference and are
not part of <em class="emphasis">sendmail</EM
>'s output.</P
><p class="para"><blockquote class="screen"><pre class="screen"> <code class="userinput"><b>/parse you@localhost (Your Name)</B
></CODE
>
Cracked address = $g (Your Name)
Parsing envelope recipient address
rewrite: ruleset   3   input: you @ localhost
rewrite: ruleset  96   input: you &lt; @ localhost &gt;
rewrite: ruleset  96 returns: you &lt; @ here . our . domain . &gt;
rewrite: ruleset   3 returns: you &lt; @ here . our . domain . &gt;
rewrite: ruleset   0   input: you &lt; @ here . our . domain . &gt;
rewrite: ruleset   0 returns: $# local $: you
rewrite: ruleset   2   input: you
rewrite: ruleset   2 returns: you
rewrite: ruleset  20   input: you
rewrite: ruleset  20 returns: you
rewrite: ruleset   4   input: you
rewrite: ruleset   4 returns: you
mailer local, user you</PRE
></BLOCKQUOTE
></P
><p class="para">The address <em class="emphasis">you@localhost</EM
> is first 
fed into <em class="emphasis">crackaddr</EM
> (line <em class="emphasis">2</EM
>) to separate
it from any surrounding RFC822 comments (see <a class="xref" href="ch37_05.htm" title="">Section 37.5.117, -d33.1</A
>),
such as &quot;<code class="literal">(Your Name)</CODE
>.&quot;
If mail were actually to be sent, the address would be stored in the
<code class="literal">$g</CODE
> macro before being passed to rules. This is illustrated
by line <em class="emphasis">2</EM
>, which uses <code class="literal">$g</CODE
> as a place holder to
show where the address was found.</P
><p class="para">The next line (line <em class="emphasis">3</EM
>) shows that the address will be
treated as that of an envelope recipient. 
The <code class="literal">/tryflags</CODE
> command (see <a class="xref" href="#SML2-CH-38-SECT-5-4" title="Select Whom to /parse or /try with /tryflags">Section 38.5.4</A
>)
sets whether it is treated as
a header or envelope or as a sender or recipient address.</P
><p class="para">The address is passed to rule set 3 (see <a class="xref" href="ch29_04.htm#SML2-CH-29-SECT-4-5" title="Rule Set 3">Section 29.4, "Rule Set 3"</A
>) because
all addresses are rewritten by rule set 3 first. The job of rule set
3 is to focus on (surround in angle brackets) the host part of the address,
which it does (line <em class="emphasis">5</EM
>).
Rule set 3, in this example, then passes the address to rule set 96 to
see whether <em class="emphasis">localhost</EM
> is a synonym for the local machine's name.
It is, so rule set 96 makes that translation (line <em class="emphasis">6</EM
>).</P
><p class="para">The output of rule set 3 is passed to rule set 0 whose job is to
select a delivery agent (line <em class="emphasis">8</EM
>). Because <em class="emphasis">here.our.domain</EM
>
is the local machine, rule set 0 selects the <code class="literal">local</CODE
> delivery agent
(line <em class="emphasis">9</EM
>).</P
><p class="para">Line <em class="emphasis">9</EM
> shows that the 
<code class="literal">$:</CODE
> part of the delivery agent &quot;triple&quot; 
(see <a class="xref" href="ch29_06.htm#SML2-CH-29-SECT-6-1" title="Rule Set 0">Section 29.6, "Rule Set 0"</A
>) will eventually
be tucked into <code class="literal">$u</CODE
> 
(see <a class="xref" href="ch31_10.htm" title="">Section 31.10.36</A
>) for use by the delivery agent's <code class="literal">A=</CODE
> equate
(see <a class="xref" href="ch30_04.htm" title="">Section 30.4.1, A=</A
>). But before that happens, that address needs to be
passed though its own set of specific rules. It is given to rule set
2 because all recipient addresses are given to rule set 2 (line
<em class="emphasis">10</EM
>). It is then given to rule set 20 because the <code class="literal">R=</CODE
>
equate (see <a class="xref" href="ch30_04.htm" title="">Section 30.4.10, R=</A
>)
for the <code class="literal">local</CODE
> delivery agent specifies rule set 20
for the envelope recipient (line <em class="emphasis">12</EM
>).
Finally, it is given to rule set 4 
(see <a class="xref" href="ch29_05.htm#SML2-CH-29-SECT-5-1" title="Rule Set 4">Section 29.5, "Rule Set 4"</A
>) because all addresses are lastly rewritten
by rule set 4 (line <em class="emphasis">14</EM
>).</P
><p class="para">The last line of output shows that the <code class="literal">local</CODE
> delivery agent
was selected and that the value that would be put into <code class="literal">$u</CODE
>
(were mail really being sent) would be <code class="literal">you</CODE
>.</P
><p class="para">When you <code class="literal">/parse</CODE
> an address that is not local, rule set
0 will also select a host (<code class="literal">$@</CODE
>) part for delivery.</P
><p class="para"><blockquote class="screen"><pre class="screen">rewrite: ruleset   0 returns: $# smtp <code class="userinput"><b>$@ uofa . edu .</B
></CODE
> $: friend &lt; @ uofa . edu . &gt;</PRE
></BLOCKQUOTE
></P
><p class="para">In this instance the last line of <code class="literal">/parse</CODE
> output will also include
the host information that will be placed into <code class="literal">$h</CODE
>:</P
><p class="para"><blockquote class="screen"><pre class="screen">mailer smtp, <code class="userinput"><b>host there.domain.,</B
></CODE
> user friend@there.domain</PRE
></BLOCKQUOTE
></P
><p class="para">When you <code class="literal">/parse</CODE
> an address that is illegal (from the point of
view of rules), <em class="emphasis">sendmail</EM
> selects the <code class="literal">#error</CODE
> delivery
agent:</P
><p class="para"><blockquote class="screen"><pre class="screen">&gt; <code class="userinput"><b>/parse @host</B
></CODE
>
Cracked address = $g
Parsing envelope recipient address
rewrite: ruleset   3   input: @ host
rewrite: ruleset  96   input: &lt; @ host &gt;
rewrite: ruleset  96 returns: &lt; @ host &gt;
rewrite: ruleset   3 returns: &lt; @ host &gt;
rewrite: ruleset   0   input: &lt; @ host &gt;
rewrite: ruleset   0 returns: $# error $@ 5 . 1 . 1 $: &quot;user address required&quot;
@host... user address required
mailer *error*, user</PRE
></BLOCKQUOTE
></P
><p class="para">The error here was that the address lacked a user part. The meanings of
all the parts of the <code class="literal">#error</CODE
> delivery agent are described
in <a class="xref" href="ch30_05.htm#SML2-CH-30-SECT-5-2-1" title="The error Delivery Agent">Section 30.5.2, "The error Delivery Agent"</A
>.
The second from the last line in this example shows the message that
would be printed or returned if such an address appeared in actual mail.
The delivery agent <code class="literal">*error*</CODE
> is internal to <em class="emphasis">sendmail</EM
>
and cannot be directly used.</P
><p class="para">Internally, the <code class="literal">/parse</CODE
> command first calls <em class="emphasis">crackaddr</EM
>(),
prints the result, then passes the original address to <em class="emphasis">parseaddr</EM
>(). 
The entry into and exit
from <em class="emphasis">crackaddr</EM
>() can be watched with the <code class="literal">-d33.1</CODE
> debugging
switch (see <a class="xref" href="ch37_05.htm" title="">Section 37.5.117</A
>). The selection of a delivery agent
with <em class="emphasis">parseaddr</EM
>() can be watched with the <code class="literal">-d20.1</CODE
> debugging
switch (see <a class="xref" href="ch37_05.htm" title="">Section 37.5.66, -d20.1</A
>). The rewriting of the user into
a suitable <code class="literal">$u</CODE
> is handled by <em class="emphasis">buildaddr</EM
>() which can 
be watched with the <code class="literal">-d24.5</CODE
> debugging switch (see
<a class="xref" href="ch37_05.htm" title="">Section 37.5.82, -d24.5</A
>).&#13;</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="SML2-CH-38-SECT-5-6">38.5.6 Try a Delivery Agent with /try</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-62376"></A
><a class="indexterm" name="AUTOID-62378"></A
><a class="indexterm" name="AUTOID-62381"></A
>In the SMTP RCPT command, <em class="emphasis">sendmail</EM
> is required
to express the recipient's address relative to the local
host. For domain addresses, this simply means that the address
should be RFC822-compliant (such as <em class="emphasis">you@here.our.domain</EM
>). For UUCP addresses,
this may mean reversing the path (such as <em class="emphasis">you@there</EM
> reverses to <em class="emphasis">there!you</EM
>).
The <code class="literal">/try</CODE
> rule testing command causes an address to be rewritten so that it
appears to be correct relative to the local host. </P
><p class="para">The <code class="literal">/try</CODE
> command is used like this:</P
><p class="para"><blockquote class="screen"><pre class="screen">/try <code class="replaceable"><i>agent address</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">Here, <code class="replaceable"><i>agent</I
></CODE
> is the delivery agent, and <code class="replaceable"><i>address</I
></CODE
> is
the address to rewrite.
The following usage message is produced if both <code class="replaceable"><i>agent</I
></CODE
> and 
<code class="replaceable"><i>address</I
></CODE
> are missing or if just the <code class="replaceable"><i>address</I
></CODE
> is
missing:</P
><p class="para"><blockquote class="screen"><pre class="screen">Usage: /try mailer address</PRE
></BLOCKQUOTE
></P
><p class="para">The delivery agent (<code class="literal">mailer</CODE
>) is used to select only the
<code class="literal">R=</CODE
> or <code class="literal">S=</CODE
> rule set for the address.
The <code class="literal">/tryflags</CODE
> command (see <a class="xref" href="#SML2-CH-38-SECT-5-4" title="Select Whom to /parse or /try with /tryflags">Section 38.5.4</A
>)
determines which is selected (by selecting recipient or sender).</P
><p class="para">In the following example the numbers to the left are for reference only
and are not part of <em class="emphasis">sendmail</EM
>'s output:</P
><p class="para"><blockquote class="screen"><pre class="screen">&gt; <code class="userinput"><b>/try smtp you</B
></CODE
>
Trying envelope recipient address you for mailer smtp
rewrite: ruleset   3   input: you
rewrite: ruleset  96   input: you
rewrite: ruleset  96 returns: you
rewrite: ruleset   3 returns: you
rewrite: ruleset   2   input: you
rewrite: ruleset   2 returns: you
rewrite: ruleset  21   input: you
rewrite: ruleset  21 returns: you &lt; @ *LOCAL* &gt;

rewrite: ruleset   4   input: you &lt; @ *LOCAL* &gt;
rewrite: ruleset   4 returns: you @ here . our . domain
Rcode = 0, addr = you@here.our.domain</PRE
></BLOCKQUOTE
></P
><p class="para">Here, the envelope-recipient address <em class="emphasis">you</EM
> is rewritten
on the basis of the <code class="literal">smtp</CODE
> delivery agent.  Rule set 3 is called first
(line <em class="emphasis">31</EM
>) because all addresses are rewritten by it first.
Rule set 2 (line <em class="emphasis">32</EM
>) is called because all recipient
addresses get rewritten by it. Rule set 21 is called because that
rule set was indicated by the <code class="literal">smtp</CODE
> delivery agent's <code class="literal">R=</CODE
>
equate. That rule set detects that the envelope recipient address (<em class="emphasis">you</EM
>) is local (line <em class="emphasis">33</EM
>).
Rule set 4 (always the last to rewrite) sees the special tag
<code class="literal">*LOCAL*</CODE
> and converts that tag
to the canonical name of your local machine (line <em class="emphasis">34</EM
>).</P
><p class="para"><blockquote class="screen"><pre class="screen">&gt; <code class="userinput"><b>/try uucp localhost!there!you</B
></CODE
>
Trying envelope recipient address localhost!there!you for mailer uucp
rewrite: ruleset   3   input: localhost ! there ! you
rewrite: ruleset  96   input: there ! you &lt; @ localhost . UUCP &gt;
rewrite: ruleset  96 returns: there ! you &lt; @ here . our . domain . &gt;
rewrite: ruleset   3 returns: there ! you &lt; @ here . our . domain . &gt;
rewrite: ruleset   2   input: there ! you &lt; @ here . our . domain . &gt;
rewrite: ruleset   2 returns: there ! you &lt; @ here . our . domain . &gt;
rewrite: ruleset  22   input: there ! you &lt; @ here . our . domain . &gt;
rewrite: ruleset  22 returns: there ! you
rewrite: ruleset   4   input: there ! you
rewrite: ruleset   4 returns: there ! you
Rcode = 0, addr = there!you</PRE
></BLOCKQUOTE
></P
><p class="para">Here we try a UUCP address to examine what might be different.
This time, rule set 96 recognized
the <code class="literal">!</CODE
> character as meaning this is a UUCP form of address.
That rule set recognizes that <em class="emphasis">localhost</EM
> is one of the names for the local
machine and converts the address to Internet form with your host's canonical
name (line <em class="emphasis">51</EM
>). Another difference is that rule set 22 is called
because that is the <code class="literal">R=</CODE
> rule set for the <code class="literal">uucp</CODE
> delivery agent.
That special rule set throws away the local host information, thus forming
a correct UUCP-style relative address (line <em class="emphasis">52</EM
>).</P
><p class="para">Internally, the <code class="literal">/try</CODE
> rule-testing command
calls the <em class="emphasis">remotename</EM
>() routine, which can be watched with
the <code class="literal">-d12.1</CODE
> debugging switch (see <a class="xref" href="ch37_05.htm" title="">Section 37.5.47, -d12.1</A
>).&#13;</P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch38_04.htm#SML2-CH-38-SECT-4-2" title="38.4 Show an Item"><img src="../gifs/txtpreva.gif" alt="Previous: 38.4 Show an Item" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="sendmail"><img src="../gifs/txthome.gif" alt="sendmail" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch38_06.htm#SML2-CH-38-SECT-6-4" title="38.6 Process-Specified Addresses"><img src="../gifs/txtnexta.gif" alt="Next: 38.6 Process-Specified Addresses" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">38.4 Show an Item</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">38.6 Process-Specified Addresses</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.htm" title="The Networking CD Bookshelf">Library Home</A
> | <a href="../dnsbind/index.htm" title="DNS &amp; BIND">DNS &amp; BIND</A
> | <a href="../tcpip/index.htm" title="TCP/IP Network Administration">TCP/IP</A
> | <a href="index.htm" title="sendmail">sendmail</A
> | <a href="../smdref/index.htm" title="sendmail Desktop Reference">sendmail Reference</A
> | <a href="../firewall/index.htm" title="Building Internet Firewalls">Firewalls</A
> | <a href="../puis/index.htm" title="Practical UNIX &amp; Internet Security">Practical Security</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
