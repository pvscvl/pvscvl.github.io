<html><head>
<title>[Chapter 23] 23.6 Cause the Queue to Be Processed</TITLE>
<meta name="DC.title" content="sendmail"><meta name="DC.creator" content="Bryan Costales &amp; Eric Allman"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-01-06T19:34:05Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-222-0" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch23_01.htm" title="23. The Queue"><link rel="prev" href="ch23_05.htm" title="23.5 How the Queue Is Processed"><link rel="next" href="ch23_07.htm#SML2-CH-23-SECT-7-1" title="23.7 Process Alternate Queues"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="sendmail" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="sendmail"><area shape="RECT" coords="467,0,514,18" href="../search/ssrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch23_05.htm" title="23.5 How the Queue Is Processed"><img src="../gifs/txtpreva.gif" alt="Previous: 23.5 How the Queue Is Processed" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 23<br>The Queue</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch23_07.htm#SML2-CH-23-SECT-7-1" title="23.7 Process Alternate Queues"><img src="../gifs/txtnexta.gif" alt="Next: 23.7 Process Alternate Queues" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="SML2-CH-23-SECT-6">23.6 Cause the Queue to Be Processed</A
></H2
><p class="para">The <em class="emphasis">sendmail</EM
> program offers two different methods for processing
the queue. 
It can be told to process the queue periodically
or to process it once and then exit.&#13;</P
><div class="sect2"><h3 class="sect2"><a class="title" name="SML2-CH-23-SECT-6-1">23.6.1 Periodically with -q</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-20695"></A
><a class="indexterm" name="AUTOID-20697"></A
>The <code class="literal">-q</CODE
> command-line
switch is used both to cause the queue to be processed and to 
specify the interval between queue runs.</P
><p class="para">A typical invocation of the <em class="emphasis">sendmail</EM
> daemon looks like this:</P
><p class="para"><blockquote class="screen"><pre class="screen">/usr/lib/sendmail -bd -q1h</PRE
></BLOCKQUOTE
></P
><p class="para">Here, the <em class="emphasis">sendmail</EM
> program is placed into listening mode with
the <code class="literal">-bd</CODE
> command-line switch. The <code class="literal">-q1h</CODE
> command-line
switch tells it to process the queue once each hour.
Note that either switch puts <em class="emphasis">sendmail</EM
> into the background
as a daemon. The <code class="literal">-bd</CODE
> switch just allows <em class="emphasis">sendmail</EM
> to
listen for incoming SMTP connections. Consider the following:</P
><p class="para"><blockquote class="screen"><pre class="screen">/usr/lib/sendmail -bd
/usr/lib/sendmail -q1h</PRE
></BLOCKQUOTE
></P
><p class="para">This runs two daemons simultaneously. The first listens for incoming
SMTP connections. The second processes the queue once per hour.</P
><p class="para">At small sites, where mail messages are rarely queued, the time interval
chosen may be small, to ensure that all mail is delivered promptly.
An interval of <code class="literal">15m</CODE
> (15 minutes) may be appropriate.</P
><p class="para">At many sites an interval of one hour is probably best.
It is short enough to ensure that delays in delivery remain tolerable,
yet long enough to ensure that queue processing does not overlap.</P
><p class="para">At large sites with huge amounts of mail and at sites that send
a great deal of international mail, the interval has
to be carefully tuned by observing how long it takes <em class="emphasis">sendmail</EM
>
to process the 

queue and what causes that process
to take a long time. Points to consider are the following:</P
><ul class="itemizedlist"><li class="listitem"><p class="para">Network delays or delays at the receiving host may cause
delivery to that host to time out.
Timeouts are set with the <code class="literal">Timeout</CODE
> (<code class="literal">r</CODE
>) option
(see <a class="xref" href="ch34_08.htm" title="">Section 34.8.70</A
>).
[5]
Each such timeout is logged at LOG_NOTICE with a message
like this:</P
><blockquote class="footnote"><p class="para">[5] Note that prior to V8 <em class="emphasis">sendmail</EM
> the <code class="literal">r</CODE
> option set one
timeout for all SMTP timeouts.</P
></BLOCKQUOTE
><p class="para"><blockquote class="screen"><pre class="screen">timeout waiting for input from <code class="replaceable"><i>host</I
></CODE
> during <code class="replaceable"><i>what</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">Here, <em class="emphasis">host</EM
> is the name of the other host, and <code class="replaceable"><i>what</I
></CODE
>
specifies which timeout triggered the message (such as
&quot;client HELO for <code class="literal">to_helo</CODE
>). In general,
timeouts should be large
to ensure that mail to busy sites and to large
mailing lists does not time out improperly. In observing the queue
processing, you may find that
all messages but one process swiftly. That one, you may find, takes
over an hour because of a long SMTP timeout. A possible solution
to this problem
is to make all timeouts short so that most queue runs are processed
quickly.
Then, for example, the following command
could be run a few times each night to specifically
flush those long jobs:</P
><p class="para"><blockquote class="screen"><pre class="screen">/usr/lib/sendmail -or2h -q</PRE
></BLOCKQUOTE
></P
><p class="para"></P
></LI
><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-20743"></A
>The queue can take a long time to process because too many messages
are being queued unnecessarily. Several options affect the placement
of mail messages into the queue. The <code class="literal">QueueLA</CODE
> (<code class="literal">x</CODE
>) 
option (see <a class="xref" href="ch34_08.htm" title="">Section 34.8.50</A
>) tells <em class="emphasis">sendmail</EM
>
to queue, rather than deliver, a message if the machine load is too
high. Fewer messages will be queued if
the value of that option is increased. The <code class="literal">SuperSafe</CODE
> (<code class="literal">s</CODE
>) option<a class="indexterm" name="AUTOID-20751"></A
>
(see <a class="xref" href="ch34_08.htm" title="">Section 34.8.67, SuperSafe (s)</A
>) tells <em class="emphasis">sendmail</EM
> to queue all messages for safety.
If your machine &quot;never&quot; crashes, this may not be necessary.
[6]<a class="indexterm" name="AUTOID-20758"></A
><a class="indexterm" name="AUTOID-20760"></A
><a class="indexterm" name="AUTOID-20762"></A
><a class="indexterm" name="AUTOID-20765"></A
>
The <code class="literal">HoldExpensive</CODE
> (<code class="literal">c</CODE
>) option
(see <a class="xref" href="ch34_08.htm" title="">Section 34.8.29, HoldExpensive (c)</A
>) tells <em class="emphasis">sendmail</EM
> to queue
messages to &quot;expensive&quot; delivery agents (those with the <code class="literal">F=e</CODE
>
flag set; see <a class="xref" href="ch30_08.htm" title="">Section 30.8.18, F=e</A
>) rather than delivering them.
If the queue is routinely filled with messages to expensive sites,
you should reconsider your reasons for marking those sites
as expensive.</P
><blockquote class="footnote"><p class="para">[6] Eric says, &quot;<em class="emphasis">Set this option</EM
>. In fact, it may go away (or be ignored, i.e.,
always be on) in some future release.&quot;</P
></BLOCKQUOTE
></LI
><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-20775"></A
><a class="indexterm" name="AUTOID-20777"></A
>The queue can fill with messages because <em class="emphasis">sendmail</EM
> was
run with the <code class="literal">-odq</CODE
> or <code class="literal">-odd</CODE
> command-line switch (see
the <code class="literal">DeliveryMode</CODE
> (<code class="literal">d</CODE
>) option, <a class="xref" href="ch34_08.htm" title="">Section 34.8.16</A
>). At sites that
receive a great deal of UUCP mail for forwarding, the <em class="emphasis">rmail</EM
>(8)
program is often set up to run <em class="emphasis">sendmail</EM
> in &quot;queue only&quot; mode
with the <code class="literal">-odq</CODE
> command-line switch. If UUCP mail is clogging
your normal mail services, you should consider queueing it to
a separate queue directory. You can then process that other directory
with a separate queue run of <em class="emphasis">sendmail</EM
>. (Use of separate
queue directories is discussed in <a class="xref" href="ch23_07.htm#SML2-CH-23-SECT-7-1" title="Process Alternate Queues">Section 23.7, "Process Alternate Queues"</A
>.)</P
></LI
><li class="listitem"><p class="para">A slow machine can clog the queue. When a single machine is
set up to handle the bulk of a site's mail, that machine should
be as swift as possible. In general, a dedicated mail
server should have a fast CPU with lots of memory. It should
never allow users to log in to it, and it should run its own
name server daemon.</P
></LI
></UL
><p class="para"></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="SML2-CH-23-SECT-6-2">23.6.2 From the Command Line</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-20796"></A
>The <code class="literal">-q</CODE
> command-line switch, invoked without
a time interval argument, is used
to run <em class="emphasis">sendmail</EM
> in queue-processing mode. In this mode,
<em class="emphasis">sendmail</EM
> processes the queue once and then exits.
This mode can be run interactively from the command-line or
in the background via <em class="emphasis">cron</EM
>(8).</P
><p class="para">Other command-line switches can be combined with <code class="literal">-q</CODE
> to
refine the way the queue is processed.
The <code class="literal">-v</CODE
> (verbose) switch causes <em class="emphasis">sendmail</EM
>
to print information about each message it is processing. The
<code class="literal">-d</CODE
> (debugging) switch may be used to produce additional
information about the queue. We'll discuss the <code class="literal">-v</CODE
>
switch as it applies to the queue later in this chapter. Those <code class="literal">-d</CODE
>
debugging switches appropriate to the queue can be found in 
<a class="xref" href="ch37_05.htm" title="Debugging Switches by Category">Table 37.2</A
> of <a class="xref" href="ch37_05.htm" title="Reference in Numerical Order">Section 37.5, "Reference in Numerical Order"</A
>.</P
><p class="para">V8 <em class="emphasis">sendmail</EM
> allows variations on <code class="literal">-q</CODE
>:
<code class="literal">-qI</CODE
> allows you to specify a specific message identifier for processing;
<code class="literal">-qR</CODE
> allows you to specify specific recipient addresses for processing; 
<code class="literal">-qS</CODE
> allows you to specify specific sender
addresses for processing.
[7]&#13;</P
><blockquote class="footnote"><p class="para">[7] IDA and Pre-V8 SunOS <em class="emphasis">sendmail</EM
> offer three different command-line
switches for processing the queue. The <code class="literal">-M</CODE
> switch allows
you to specify a specific message for processing. The <code class="literal">-R</CODE
>
switch allows you to specify specific recipient addresses for processing.
The <code class="literal">-S</CODE
> switch allows you to specify specific sender
addresses for processing.</P
></BLOCKQUOTE
><div class="sect3"><h4 class="sect3"><a class="title" name="SML2-CH-23-SECT-6-2-1">23.6.2.1 Process the queue once: -q</A
></H4
><p class="para">The <code class="literal">-q</CODE
> command-line switch, without an interval argument,
tells <em class="emphasis">sendmail</EM
> to process the queue once, then exit.
As such, this switch is a handy administrative tool.
When the queue fills unexpectedly between queue runs of the
daemon, for example, the <code class="literal">-q</CODE
> command-line switch can be used to
force an immediate queue run:</P
><p class="para"><blockquote class="screen"><pre class="screen"># <code class="userinput"><b>/usr/lib/sendmail -q</B
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">On machines that do not run the <em class="emphasis">sendmail</EM
> daemon, the <code class="literal">-q</CODE
>
command-line switch can be used in conjunction with <em class="emphasis">cron</EM
>(8)
to periodically process the queue.
The following <em class="emphasis">crontab</EM
>(5) file entry, for example,
causes <em class="emphasis">sendmail</EM
> to be run
once per hour, at 
five minutes past 
the hour, to silently process the queue and exit:</P
><p class="para"><blockquote class="screen"><pre class="screen">5 * * * * /usr/lib/sendmail -q &gt;/dev/null 2&gt;&amp;1</PRE
></BLOCKQUOTE
></P
><p class="para">When used in conjunction with other switches (shown below), the
<code class="literal">-q</CODE
> switch allows many queue problems to be conveniently handled.&#13;</P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="SML2-CH-23-SECT-6-2-2">23.6.2.2 Combine -v with -q</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-20845"></A
><a class="indexterm" name="AUTOID-20847"></A
>The <code class="literal">-q</CODE
> switch without an argument
prevents <em class="emphasis">sendmail</EM
> from running
in the background and detaching from its controlling terminal.
But it also runs silently. 
To see what is going on, use the <code class="literal">-v</CODE
> command-line switch
in combination with the <code class="literal">-q</CODE
>:</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>/usr/lib/sendmail -v -q</B
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">The <code class="literal">-v</CODE
> command-line switch
causes <em class="emphasis">sendmail</EM
> to print a step-by-step description of what
it is doing.
To illustrate, consider the following output produced by using
both the <code class="literal">-v</CODE
> and <code class="literal">-q</CODE
> command-line switches:</P
><p class="para"><blockquote class="screen"><pre class="screen">Running MAA20989 (sequence 1 of 2)
&lt;adams@dc.gov&gt;... Connecting to dc.gov via ddn...
Trying 123.45.67.8... Connection timed out during user open with DC.GOV
&lt;adams@dc.gov&gt;... Deferred: Host DC.GOV is down

Running MAA27002 (sequence 2 of 2)
&lt;help@irs.dc.gov&gt;... Connecting to irs.dc.gov via ddn...
Trying 123.45.67.88...  connected.
220 irs.dc.gov Sendmail 5.57/3.0 ready at Mon, 27 Jan 92 09:16:38 -0400</PRE
></BLOCKQUOTE
></P
><p class="para">Here, two queued messages are being processed. The first
fails because of a connection timeout and is requeued for a later
queue run. The second succeeds (we omit the full
SMTP dialogue). After its delivery is complete, it is removed
from the queue.&#13;</P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="SML2-CH-23-SECT-6-2-3">23.6.2.3 Process by identifier/recipient/sender: -q[ISR]</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-20867"></A
>With V8 <em class="emphasis">sendmail</EM
> you can process a subset of all queued messages.
You can select which to process based on queue identifier, recipient
address, or sender address:</P
><p class="para"><blockquote class="screen"><pre class="screen">-qI<code class="replaceable"><i>queueid</I
></CODE
>
-qR<code class="replaceable"><i>recipient</I
></CODE
>
-qS<code class="replaceable"><i>sender</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">The <code class="literal">-qI</CODE
> variation is followed by a queue identifier such as
<em class="emphasis">KAA34556</EM
>. The <code class="literal">-qR</CODE
> is
followed by the address of a recipient. The <code class="literal">-qS</CODE
> is followed
by the address of a sender.
In all three variations there must be no space between the uppercase
letter and the identifier or address.</P
><p class="para">These variations are used to limit the selection of queued files
that are processed. For example:</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>/usr/lib/sendmail -qSroot -qRbiff@here</B
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">Here, the queue is processed once. Only messages from <em class="emphasis">root</EM
>
are processed. Of those, only messages that have <em class="emphasis">biff@here</EM
>
as one of the recipients are processed.</P
><p class="para">In all three variations a partial specification of <code class="replaceable"><i>queueid</I
></CODE
>,
<code class="replaceable"><i>recipient</I
></CODE
>, or <code class="replaceable"><i>sender</I
></CODE
> is viewed by V8 <em class="emphasis">sendmail</EM
>
as a substring. For example, </P
><p class="para"><blockquote class="screen"><pre class="screen">-qSroot</PRE
></BLOCKQUOTE
></P
><p class="para">matches mail from all of the following:</P
><p class="para"><blockquote class="screen"><pre class="screen">root
ben@groots.edu
ben@GROOTS.EDU</PRE
></BLOCKQUOTE
></P
><p class="para">The last line further illustrates that the substring match is a
case-insensitive one. The substring match is literal. Wildcard 
characters (such as <code class="literal">*</CODE
>) and regular expressions (such as <code class="literal">.*@.*edu</CODE
>)
won't work and may confuse the shell from which you run <em class="emphasis">sendmail</EM
>.</P
><p class="para">Multiple specifications may be combined on the command line (as shown
above), but they all AND together: </P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>/usr/lib/sendmail -qI123 -qSroot -qR@host.edu</B
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">Here, the queue is processed only for messages with the number
123 anywhere in the message identifier
that are also from <em class="emphasis">root</EM
> and that are also addressed
to anyone at <em class="emphasis">host.edu</EM
>. </P
><p class="para">You can use the <em class="emphasis">mailq</EM
> command to preview the effect
of these switches. For example, the following command will list (but not send)
the messages that would be processed by the above command line:</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>mailq -qI123 -qSroot -qR@host.edu</B
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para"></P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="SML2-CH-23-SECT-6-2-4">23.6.2.4 Process the queue via ESMTP ETRN</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-20918"></A
><a class="indexterm" name="AUTOID-20920"></A
>The ESMTP ETRN command, based on RFC1985,
causes V8.8 and above <em class="emphasis">sendmail</EM
> to asynchronously process its
queue in a manner similar to the <code class="literal">-qR</CODE
> command line switch
(see <a class="xref" href="#SML2-CH-23-SECT-6-2-3" title="Process by identifier/recipient/sender: -q[ISR]">Section 23.6.2.3, "Process by identifier/recipient/sender: -q[ISR]"</A
>).
This new command allows dial-on-demand sites to make an SMTP
connection and to force the other side to process and send any
mail that is queued for them. 
The form of this ESMTP command looks like this:</P
><p class="para"><blockquote class="screen"><pre class="screen">ETRN <code class="replaceable"><i>hostname</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">If the host is missing, this error message will be returned:</P
><p class="para"><blockquote class="screen"><pre class="screen">550 Parameter required</PRE
></BLOCKQUOTE
></P
><p class="para">Otherwise, the queue will be processed just as if the following
command line argument were given:</P
><p class="para"><blockquote class="screen"><pre class="screen">-qR@<code class="replaceable"><i>hostname</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">&#13;In both cases a <code class="literal">qf</CODE
> file will be processed
if it has a host named <code class="replaceable"><i>hostname</I
></CODE
> anywhere in the host part
(following the <code class="literal">@</CODE
>) of one of its <code class="literal">R</CODE
> lines. The only
difference here is that the former (the ETRN) operates
asynchronously. That is, <em class="emphasis">sendmail</EM
> forks a copy of itself, and
the forked child processes the queue.</P
><p class="para">One way to use <code class="literal">ETRN</CODE
> is with a simple Bourne shell script:</P
><p class="para"><blockquote class="screen"><pre class="screen">#!/bin/sh
OURSITE=here.uofa.edu
MAILSERVER=mailhub.uofa.edu
TELNET=/usr/ucb/telnet
PORT=25

echo &quot;etrn $OURSITE&quot; | $TELNET $MAILSERVER $PORT
exit 0</PRE
></BLOCKQUOTE
></P
><p class="para">If run on a dial-on-demand host, this script will force a dial-up network connection
to be made. The mail server's <em class="emphasis">sendmail</EM
> is then forced, with ETRN,
to process the queue and transport back any mail destined for the local host over the
just-created network connection.
&#13;</P
></DIV
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch23_05.htm" title="23.5 How the Queue Is Processed"><img src="../gifs/txtpreva.gif" alt="Previous: 23.5 How the Queue Is Processed" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="sendmail"><img src="../gifs/txthome.gif" alt="sendmail" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch23_07.htm#SML2-CH-23-SECT-7-1" title="23.7 Process Alternate Queues"><img src="../gifs/txtnexta.gif" alt="Next: 23.7 Process Alternate Queues" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">23.5 How the Queue Is Processed</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">23.7 Process Alternate Queues</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.htm" title="The Networking CD Bookshelf">Library Home</A
> | <a href="../dnsbind/index.htm" title="DNS &amp; BIND">DNS &amp; BIND</A
> | <a href="../tcpip/index.htm" title="TCP/IP Network Administration">TCP/IP</A
> | <a href="index.htm" title="sendmail">sendmail</A
> | <a href="../smdref/index.htm" title="sendmail Desktop Reference">sendmail Reference</A
> | <a href="../firewall/index.htm" title="Building Internet Firewalls">Firewalls</A
> | <a href="../puis/index.htm" title="Practical UNIX &amp; Internet Security">Practical Security</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
