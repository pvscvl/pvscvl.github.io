<html><head>
<title>[Chapter 24] 24.3 Write a Delivery Agent Script</TITLE>
<meta name="DC.title" content="sendmail"><meta name="DC.creator" content="Bryan Costales &amp; Eric Allman"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-01-06T19:38:38Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-222-0" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch24_01.htm" title="24. Aliases"><link rel="prev" href="ch24_02.htm#SML2-CH-24-SECT-2-2" title="24.2 Forms of Alias Delivery"><link rel="next" href="ch24_04.htm#SML2-CH-24-SECT-4-2" title="24.4 Special Aliases"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="sendmail" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="sendmail"><area shape="RECT" coords="467,0,514,18" href="../search/ssrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch24_02.htm#SML2-CH-24-SECT-2-2" title="24.2 Forms of Alias Delivery"><img src="../gifs/txtpreva.gif" alt="Previous: 24.2 Forms of Alias Delivery" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 24<br>Aliases</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch24_04.htm#SML2-CH-24-SECT-4-2" title="24.4 Special Aliases"><img src="../gifs/txtnexta.gif" alt="Next: 24.4 Special Aliases" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="SML2-CH-24-SECT-3">24.3 Write a Delivery Agent Script</A
></H2
><p class="para"><a class="indexterm" name="SML2-CH-24-IX-DELIVERY-AGENTS-MTAS-SCRIPTS-VIA"></A
>The program that is driven by the <code class="literal">prog</CODE
> delivery agent may be a compiled
executable binary, a shell script, or even a <em class="emphasis">perl</EM
>(1) script.
The limitation on the kind of program that may be run is made by
the <em class="emphasis">sh</EM
>(1) shell (if <code class="literal">sh -c</CODE
> is used in the <code class="literal">A=</CODE
>)
or by <em class="emphasis">execve</EM
>(2) (if it is launched directly from the <code class="literal">P=</CODE
>).
You need to read the manuals on your system to determine your
limitations. For example, not all versions of <em class="emphasis">sh</EM
>(1) allow
constructs like the following in scripts:</P
><p class="para"><blockquote class="screen"><pre class="screen">#!/usr/local/bin/perl</PRE
></BLOCKQUOTE
></P
><p class="para">When this appears as the first line of a script,
the <code class="literal">#!</CODE
> tells <em class="emphasis">sh</EM
>(1) or <em class="emphasis">execve</EM
>(2) to
run the program whose pathname follows, to execute the commands
in the script.
[6]</P
><blockquote class="footnote"><p class="para">[6] Not all versions of UNIX support this feature, and on some of those
that do support it, only a few shells are supported.</P
></BLOCKQUOTE
><p class="para">In writing a program for mail delivery using the <code class="literal">prog</CODE
>
delivery agent, some unexpected problems can arise.
We will illustrate, using fragments from a Bourne shell script.<a class="indexterm" name="AUTOID-22750"></A
><a class="indexterm" name="AUTOID-22751"></A
>&#13;</P
><div class="sect2"><h3 class="sect2"><a class="title" name="SML2-CH-24-SECT-3-1">24.3.1 Duplicates discarded</A
></H3
><p class="para">When <em class="emphasis">sendmail</EM
> gathers its list of recipients, it views a program
to run as just another recipient. Before performing any delivery, it
sorts the list of recipients and discards any duplicates. Ordinarily,
this is just the behavior that is desired, but discarding duplicate programs
from the <em class="emphasis">aliases</EM
>(5) file
[7]
can cause some users to lose mail. To illustrate, consider
a program that
notifies the system administrator that mail has arrived for a retired
user:</P
><blockquote class="footnote"><p class="para">[7] Under V8 <em class="emphasis">sendmail</EM
> this is no longer a problem for duplicate
programs listed in <em class="emphasis">~/.forward</EM
> files (see <a class="xref" href="ch25_07.htm#SML2-CH-25-SECT-7-3" title="Piping Through Programs">Section 25.7.4</A
>) but
still is a problem for <em class="emphasis">aliases</EM
>. The solution that <em class="emphasis">sendmail</EM
> uses is to internally append
the <em class="emphasis">uid</EM
> of the <em class="emphasis">~/.forward</EM
> file's owner to the program name, thus making
the program name more unique.</P
></BLOCKQUOTE
><p class="para"><blockquote class="screen"><pre class="screen">#!/bin/sh
/usr/ucb/mail -s gone postmaster</PRE
></BLOCKQUOTE
></P
><p class="para">This script reads everything (the mail message) from its standard
input and feeds what it reads to the <em class="emphasis">/usr/ucb/mail</EM
> program.
The command-line arguments to <em class="emphasis">mail</EM
> are
a subject line of <code class="literal">gone</CODE
> and a 
recipient of <code class="literal">postmaster</CODE
>. Now consider two aliases that use
this program:</P
><p class="para"><blockquote class="screen"><pre class="screen">george: &quot;|/usr/local/bin/gone&quot;
ben:    &quot;|/usr/local/bin/gone&quot;</PRE
></BLOCKQUOTE
></P
><p class="para">When mail is sent to both <code class="literal">george</CODE
> and <code class="literal">ben</CODE
>, <em class="emphasis">sendmail</EM
>
aliases each to the program <code class="literal">|/usr/local/bin/gone</CODE
>. But since
both the two addresses are identical, <em class="emphasis">sendmail</EM
> discards one.</P
><p class="para">To avoid this problem (which is most common in user <em class="emphasis">~/.forward</EM
>
files), design all delivery programs to require at least one
unique argument. For example, the above program should be
rewritten to require the user's name as an argument:</P
><p class="para"><blockquote class="screen"><pre class="screen">#!/bin/sh
if [ ${#} -ne 2 ]; then
        echo $0 needs a user name.
        exit
fi
/usr/ucb/mail -s &quot;$1 gone&quot; postmaster</PRE
></BLOCKQUOTE
></P
><p class="para">By requiring a username as an argument, the once-faulty aliases
are made unique:</P
><p class="para"><blockquote class="screen"><pre class="screen">george: &quot;|/usr/local/bin/gone george&quot;
ben:    &quot;|/usr/local/bin/gone ben&quot;</PRE
></BLOCKQUOTE
></P
><p class="para">Although the program paths are still the same, the addresses (name and
arguments together) are different, and neither is discarded.&#13;</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="SML2-CH-24-SECT-3-2">24.3.2 Correct exit(2) values</A
></H3
><p class="para">The <em class="emphasis">sendmail</EM
> program expects its <code class="literal">A=</CODE
> programs to exit
with reasonable <em class="emphasis">exit</EM
>(2) values. The values that it expects are
listed in <em class="emphasis">&lt;sysexits.h&gt;</EM
>. Exiting with unexpected values
causes <em class="emphasis">sendmail</EM
> to bounce mail and give an unclear message:</P
><p class="para"><blockquote class="screen"><pre class="screen">554 Unknown status <em class="emphasis">val</EM
></PRE
></BLOCKQUOTE
></P
><p class="para">Here, <code class="replaceable"><i>val</I
></CODE
> is the unexpected error value. To illustrate, consider
the following rewrite of the previous script:</P
><p class="para"><blockquote class="screen"><pre class="screen">#!/bin/sh
EX_OK=0                   # From &lt;sysexits.h&gt;
EX_USAGE=64               # From &lt;sysexits.h&gt;
if [ ${#} -ne 2 ]; then
        echo $0 needs a user name.
        exit $EX_USAGE
fi
/usr/ucb/mail -s &quot;$1 gone&quot; postmaster
exit $EX_OK</PRE
></BLOCKQUOTE
></P
><p class="para">Here, if the argument count is wrong, we exit with the value EX_USAGE,
thus producing a clearer (two-line) error message:</P
><p class="para"><blockquote class="screen"><pre class="screen">/usr/local/bin/gone needs a user name.
/usr/local/bin/gone... Bad usage.</PRE
></BLOCKQUOTE
></P
><p class="para">If all goes well, we then exit with EX_OK so that <em class="emphasis">sendmail</EM
>
knows that the mail was successfully delivered.&#13;</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="SML2-CH-24-SECT-3-3">24.3.3 Is It Really EX_OK?</A
></H3
><p class="para">When <em class="emphasis">sendmail</EM
> sees that the <code class="literal">A=</CODE
> program exited with
EX_OK, it assumes that the mail message was successfully delivered.
It is vital for programs that deliver mail to exit with
EX_OK only if delivery was 100% successful. Failure to take precautions
to detect every possible error can result in lost mail and
angry users.
To illustrate, consider the following common C language statement:</P
><p class="para"><blockquote class="screen"><pre class="screen">(void)fclose(fp);</PRE
></BLOCKQUOTE
></P
><p class="para">If the file that is being written to is remotely mounted, the written
data may be cached locally. All the preceding write statements
will have succeeded, but if the remote host crashes after
the last write (but before the close), some of the data can
be lost. The <em class="emphasis">fclose</EM
>(3) fails, but the <code class="literal">(void)</CODE
>
prevents detection of that failure.</P
><p class="para">Even in writing small shell scripts, it is important to include
error checking. The following rewrite of our <em class="emphasis">gone</EM
>
program includes error checking but does not handle signals.
We leave that as an exercise for the reader:</P
><p class="para"><blockquote class="screen"><pre class="screen">#!/bin/sh
EX_OK=0                   # From &lt;sysexits.h&gt;
EX_USAGE=64               # From &lt;sysexits.h&gt;
EX_SOFTWARE=70            # From &lt;sysexits.h&gt;
if [ ${#} -ne 2 ]; then
        echo $0 needs a user name.
        exit $EX_USAGE
fi
if /usr/ucb/mail -s &quot;$1 gone&quot; postmaster &gt;/dev/null 2&gt;&amp;1
then
        exit $EX_OK
fi
exit $EX_SOFTWARE</PRE
></BLOCKQUOTE
></P
><p class="para"><a class="indexterm" name="AUTOID-22824"></A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch24_02.htm#SML2-CH-24-SECT-2-2" title="24.2 Forms of Alias Delivery"><img src="../gifs/txtpreva.gif" alt="Previous: 24.2 Forms of Alias Delivery" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="sendmail"><img src="../gifs/txthome.gif" alt="sendmail" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch24_04.htm#SML2-CH-24-SECT-4-2" title="24.4 Special Aliases"><img src="../gifs/txtnexta.gif" alt="Next: 24.4 Special Aliases" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">24.2 Forms of Alias Delivery</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">24.4 Special Aliases</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.htm" title="The Networking CD Bookshelf">Library Home</A
> | <a href="../dnsbind/index.htm" title="DNS &amp; BIND">DNS &amp; BIND</A
> | <a href="../tcpip/index.htm" title="TCP/IP Network Administration">TCP/IP</A
> | <a href="index.htm" title="sendmail">sendmail</A
> | <a href="../smdref/index.htm" title="sendmail Desktop Reference">sendmail Reference</A
> | <a href="../firewall/index.htm" title="Building Internet Firewalls">Firewalls</A
> | <a href="../puis/index.htm" title="Practical UNIX &amp; Internet Security">Practical Security</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
