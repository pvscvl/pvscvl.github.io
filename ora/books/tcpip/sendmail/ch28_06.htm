<html><head>
<title>[Chapter 28] 28.6 The RHS</TITLE>
<meta name="DC.title" content="sendmail"><meta name="DC.creator" content="Bryan Costales &amp; Eric Allman"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-01-06T19:50:19Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-222-0" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch28_01.htm" title="28. Rules"><link rel="prev" href="ch28_05.htm" title="28.5 The LHS"><link rel="next" href="ch28_07.htm" title="28.7 Pitfalls"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="sendmail" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="sendmail"><area shape="RECT" coords="467,0,514,18" href="../search/ssrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch28_05.htm" title="28.5 The LHS"><img src="../gifs/txtpreva.gif" alt="Previous: 28.5 The LHS" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 28<br>Rules</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch28_07.htm" title="28.7 Pitfalls"><img src="../gifs/txtnexta.gif" alt="Next: 28.7 Pitfalls" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="SML2-CH-28-SECT-6">28.6 The RHS</A
></H2
><p class="para"><a class="indexterm" name="SML2-CH-28-IX-RHS-RULE"></A
>The purpose of the <span class="acronym">RHS</SPAN
> in a rule is to rewrite the workspace. To
make this rewriting more versatile, <em class="emphasis">sendmail</EM
> offers several
special <span class="acronym">RHS</SPAN
> operators. The complete list is shown in
<a class="xref" href="#SML2-CH-28-TAB-1" title="RHS Operators">Table 28.2</A
>.<a class="indexterm" name="AUTOID-26640"></A
></P
><table class="table"><caption class="table"><a class="title" name="SML2-CH-28-TAB-1">Table 28.2: RHS Operators</A
></CAPTION
><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1"><span class="acronym">RHS</SPAN
></TH
><th class="entry" align="LEFT" rowspan="1" colspan="1"></TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Description or Use</TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">$</CODE
><code class="replaceable"><i>digit</I
></CODE
></TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-28-SECT-6-1" title="Copy by Position: $digit">Section 28.6.1, "Copy by Position: $digit"</A
></TD
><td class="entry" rowspan="1" colspan="1">Copy by position</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">$:</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-28-SECT-6-2" title="Rewrite Once Prefix: $:">Section 28.6.2, "Rewrite Once Prefix: $:"</A
></TD
><td class="entry" rowspan="1" colspan="1">Rewrite once (prefix)</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">$@</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-28-SECT-6-3" title="Rewrite-and-Return Prefix: $@">Section 28.6.3, "Rewrite-and-Return Prefix: $@"</A
></TD
><td class="entry" rowspan="1" colspan="1">Rewrite and return (prefix)</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">$&gt;</CODE
><code class="replaceable"><i>set</I
></CODE
></TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-28-SECT-6-4" title="Rewrite Through Another Rule Set: $&gt;set">Section 28.6.4, "Rewrite Through Another Rule Set: $&gt;set"</A
></TD
><td class="entry" rowspan="1" colspan="1">Rewrite through another rule set</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">$#</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-28-SECT-6-5" title="Specify a Delivery Agent: $#">Section 28.6.5, "Specify a Delivery Agent: $#"</A
></TD
><td class="entry" rowspan="1" colspan="1">Specify a delivery agent</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">$[ $]</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-28-SECT-6-6" title="Canonicalize Hostname: $[ and $]">Section 28.6.6, "Canonicalize Hostname: $[ and $]"</A
></TD
><td class="entry" rowspan="1" colspan="1">Canonicalize hostname</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">$( $)</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="ch33_04.htm#SML2-CH-33-SECT-4-2" title="Use Maps with $( and $) in Rules">Section 33.4, "Use Maps with $( and $) in Rules"</A
></TD
><td class="entry" rowspan="1" colspan="1">Database lookup</TD
></TR
></TBODY
></TABLE
><p class="para"></P
><div class="sect2"><h3 class="sect2"><a class="title" name="SML2-CH-28-SECT-6-1">28.6.1 Copy by Position: $digit</A
></H3
><p class="para"><a class="indexterm" name="SML2-CH-28-IX-WILDCARD-OPERATORS-POSITIONAL-OPERATORS"></A
><a class="indexterm" name="SML2-CH-28-IX-POSITIONAL-OPERATORS"></A
>The <code class="literal">$</CODE
><code class="replaceable"><i>digit</I
></CODE
> operator in the <span class="acronym">RHS</SPAN
> is used to copy tokens
from the <span class="acronym">LHS</SPAN
> into the workspace. The <code class="replaceable"><i>digit</I
></CODE
> refers to
positions of <span class="acronym">LHS</SPAN
> wildcard operators in the <span class="acronym">LHS</SPAN
>:</P
><p class="para"><blockquote class="screen"><pre class="screen">R$+@$*    $2!$1
 <img src="../chars/uarr.gif" alt="-^">  <img src="../chars/uarr.gif" alt="-^">
 <i class="lineannotation">$1</I
> <i class="lineannotation">$2</I
></PRE
></BLOCKQUOTE
></P
><p class="para">Here, the <code class="literal">$1</CODE
> in the <span class="acronym">RHS</SPAN
> indicates tokens matched by the first
wildcard operator in the <span class="acronym">LHS</SPAN
> (in this case the <code class="literal">$+</CODE
>),
and the <code class="literal">$2</CODE
> in the <span class="acronym">RHS</SPAN
> indicates tokens matched by
the second wildcard operator in the <span class="acronym">LHS</SPAN
> (the <code class="literal">$*</CODE
>).
In this example, if the workspace contains <code class="literal">A@B.C</CODE
>, it
will be rewritten by the <span class="acronym">RHS</SPAN
> as follows:</P
><p class="para"><blockquote class="screen"><pre class="screen">$* <i class="lineannotation">matches</I
>    B.C<i class="lineannotation">    so</I
> $2 <i class="lineannotation">copies it to workspace</I
>
              !    <i class="lineannotation">explicitly placed into workspace</I
>
$+ <i class="lineannotation">matches</I
>    A    <i class="lineannotation">so</I
> $1 <i class="lineannotation">copies it to workspace</I
></PRE
></BLOCKQUOTE
></P
><p class="para">The <code class="literal">$</CODE
><code class="replaceable"><i>digit</I
></CODE
> copies all the tokens matched by its corresponding
wildcard operator.
For the <code class="literal">$+</CODE
> wildcard operator, only a single token (<code class="literal">A</CODE
>)
is matched and copied with <code class="literal">$1</CODE
>.
The <code class="literal">!</CODE
> is copied as is.
For the <code class="literal">$*</CODE
> wildcard operator,
three tokens are matched (<code class="literal">B.C</CODE
>), so <code class="literal">$2</CODE
> copies all three.
Thus the above rule rewrites <code class="literal">A@B.C</CODE
> into <code class="literal">B.C!A</CODE
>.</P
><p class="para">Not all <span class="acronym">LHS</SPAN
> operators <em class="emphasis">need</EM
> to be referenced with a <code class="literal">$</CODE
><code class="replaceable"><i>digit</I
></CODE
>
in the <span class="acronym">RHS</SPAN
>.
Consider the following: </P
><p class="para"><blockquote class="screen"><pre class="screen">R$*&lt;$*&gt;$*   &lt;$2&gt;</PRE
></BLOCKQUOTE
></P
><p class="para">Here, only the middle <span class="acronym">LHS</SPAN
> operator (the second one) is required to
rewrite the workspace. So only the <code class="literal">$2</CODE
> is needed in the
<span class="acronym">RHS</SPAN
> (<code class="literal">$1</CODE
> and <code class="literal">$3</CODE
> are not needed and are not present
in the <span class="acronym">RHS</SPAN
>).</P
><p class="para">Although macros appear to be operators in the <span class="acronym">LHS</SPAN
>, they are
not. Recall that macros are expanded when the configuration
file is read (see <a class="xref" href="ch28_01.htm" title="Macros in Rules">Section 28.1.1, "Macros in Rules"</A
>). As a consequence, although they appear as
<code class="literal">$</CODE
><code class="replaceable"><i>letter</I
></CODE
> in the configuration file, they are converted
to tokens when that configuration file is read. For example,</P
><p class="para"><blockquote class="screen"><pre class="screen">DAxxx
R$A @ $*   $1</PRE
></BLOCKQUOTE
></P
><p class="para">Here, the macro <code class="literal">A</CODE
> is defined to have the value <code class="literal">xxx</CODE
>.
To the unwary, the <code class="literal">$1</CODE
> <em class="emphasis">appears</EM
> to indicate the <code class="literal">$A</CODE
>.
But when the configuration file is read, the above rule is expanded
into</P
><p class="para"><blockquote class="screen"><pre class="screen">Rxxx @ $*   $1</PRE
></BLOCKQUOTE
></P
><p class="para">Clearly, the <code class="literal">$1</CODE
> refers to the <code class="literal">$*</CODE
> (because <code class="literal">$</CODE
><code class="replaceable"><i>digit</I
></CODE
>
references only operators and <code class="literal">$A</CODE
> is a macro, not an operator).
The <em class="emphasis">sendmail</EM
>
program is unable to detect errors of this sort. If the <code class="literal">$1</CODE
>
were instead <code class="literal">$2</CODE
> 

(in a mistaken attempt to reference the
<code class="literal">$*</CODE
>), <em class="emphasis">sendmail</EM
> prints the following error and skips
that rule:</P
><p class="para"><blockquote class="screen"><pre class="screen">ruleset replacement <code class="replaceable"><i>num out of bounds</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">V8 <em class="emphasis">sendmail</EM
> catches these errors when the configuration
file is read.
Earlier versions caught this error only when mail was actually
sent.</P
><p class="para">The <code class="replaceable"><i>digit</I
></CODE
> of the <code class="literal">$</CODE
><code class="replaceable"><i>digit</I
></CODE
> must be in the range
one through nine. A <code class="literal">$0</CODE
> is meaningless and causes
<em class="emphasis">sendmail</EM
> to print the above error message and to skip that rule.
Extra digits are considered tokens,
rather than extensions of the <code class="literal">$</CODE
><code class="replaceable"><i>digit</I
></CODE
>. That is,
<code class="literal">$11</CODE
> is the <span class="acronym">RHS</SPAN
> operator <code class="literal">$1</CODE
> and the token <code class="literal">1</CODE
>,
not a reference to the eleventh <span class="acronym">LHS</SPAN
> operator.<a class="indexterm" name="AUTOID-26807"></A
><a class="indexterm" name="AUTOID-26808"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="SML2-CH-28-SECT-6-2">28.6.2 Rewrite Once Prefix: $:</A
></H3
><p class="para"><a class="indexterm" name="SML2-CH-28-IX-PREFIXES-DOLLAR-PREFIXES-COLON"></A
><a class="indexterm" name="SML2-CH-28-IX-LOOPS-IN-RULE-SETS-RULE-SETS"></A
>Ordinarily, the <span class="acronym">RHS</SPAN
> rewrites the workspace as long as
the workspace continues to match the <span class="acronym">LHS</SPAN
>. This looping behavior can be
useful. Consider the need to strip extra trailing dots off
an address in the workspace:</P
><p class="para"><blockquote class="screen"><pre class="screen">R$*..   $1.</PRE
></BLOCKQUOTE
></P
><p class="para">Here, the <code class="literal">$*</CODE
> matches any address that has two or more
trailing dots. The <code class="literal">$1.</CODE
> in the <span class="acronym">RHS</SPAN
> then strips one
of those two trailing dots when rewriting the workspace. For
example,</P
><p class="para"><blockquote class="screen"><pre class="screen">xxx . . . . .     <i class="lineannotation">becomes <img src="../chars/rarr.gif" alt="-&gt;"></I
> xxx . . . .
xxx . . . .       <i class="lineannotation">becomes <img src="../chars/rarr.gif" alt="-&gt;"></I
> xxx . . .  
xxx . .           <i class="lineannotation">becomes <img src="../chars/rarr.gif" alt="-&gt;"></I
> xxx . .    
xxx . .           <i class="lineannotation">becomes <img src="../chars/rarr.gif" alt="-&gt;"></I
> xxx .      
xxx .             <i class="lineannotation"><img src="../chars/larr.gif" alt="&lt;-"> match fails</I
></PRE
></BLOCKQUOTE
></P
><p class="para">Although this looping behavior of rules can be handy, for most
rules it can be dangerous. Consider the following example:</P
><p class="para"><blockquote class="screen"><pre class="screen">R$*	&lt;$1&gt;</PRE
></BLOCKQUOTE
></P
><p class="para">The intention of this rule is to cause whatever is in the workspace
to become surrounded with angle brackets. 
But after the workspace is rewritten, the <span class="acronym">LHS</SPAN
>
again checks for a match; and since the <code class="literal">$*</CODE
> matches anything,
the match succeeds, the <span class="acronym">RHS</SPAN
> rewrites the workspace again,
and again the <span class="acronym">LHS</SPAN
> checks for a match:</P
><p class="para"><blockquote class="screen"><pre class="screen">xxx               <i class="lineannotation">becomes <img src="../chars/rarr.gif" alt="-&gt;"></I
> &lt; xxx &gt;
&lt; xxx &gt;           <i class="lineannotation">becomes <img src="../chars/rarr.gif" alt="-&gt;"></I
> &lt; &lt; xxx &gt; &gt;
&lt; &lt; xxx &gt; &gt;       <i class="lineannotation">becomes <img src="../chars/rarr.gif" alt="-&gt;"></I
> &lt; &lt; &lt; xxx &gt; &gt; &gt;
     <i class="lineannotation"><img src="../chars/darr.gif" alt="-v"></I
>
     <i class="lineannotation">and so on, until ...</I
>
     <i class="lineannotation"><img src="../chars/darr.gif" alt="-v"></I
>
<i class="lineannotation">sendmail prints: </I
>rewrite: expansion too long</PRE
></BLOCKQUOTE
></P
><p class="para">&#13;In this case, <em class="emphasis">sendmail</EM
> catches the problem, because the workspace
has become too large. It prints the above error message 
and skips that and all further rules in the rule set.
If you are running <em class="emphasis">sendmail</EM
> in test mode, this fatal error would also be printed:</P
><p class="para"><blockquote class="screen"><pre class="screen">== Ruleset 0 (0) status 65</PRE
></BLOCKQUOTE
></P
><p class="para">Unfortunately, not all such endless looping produces a visible error
message. Consider the following example:</P
><p class="para"><blockquote class="screen"><pre class="screen">R$*    $1</PRE
></BLOCKQUOTE
></P
><p class="para">Here is an <span class="acronym">LHS</SPAN
> that matches anything and an <span class="acronym">RHS</SPAN
> that rewrites the
workspace in such a way that the workspace never changes. For older versions
this causes <em class="emphasis">sendmail</EM
> to appear to
hang (as it processes the same rule over and over and over).
Newer versions of <em class="emphasis">sendmail</EM
> will catch such endless looping
and print (<em class="emphasis">syslog</EM
>) the following error:<a class="indexterm" name="AUTOID-26864"></A
></P
><p class="para"><blockquote class="screen"><pre class="screen">Infinite loop in ruleset <code class="replaceable"><i>ruleset_name, rule rule_number</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">In this instance the original workspace is returned.</P
><p class="para">It is not always desirable (or even possible) to write &quot;loop-proof&quot;
rules. To prevent looping, <em class="emphasis">sendmail</EM
> offers the <code class="literal">$:</CODE
>
<span class="acronym">RHS</SPAN
> prefix. By starting the <span class="acronym">RHS</SPAN
> of a rule with the <code class="literal">$:</CODE
>
operator, you are telling <em class="emphasis">sendmail</EM
> to rewrite the workspace
exactly once.</P
><p class="para"><blockquote class="screen"><pre class="screen">R$*   $: &lt;$1&gt;</PRE
></BLOCKQUOTE
></P
><p class="para">Again the rule causes the contents of the workspace
to be surrounded by a pair of
angle brackets. But here the <code class="literal">$:</CODE
> prefix prevents the <span class="acronym">LHS</SPAN
> from checking
for another match after the rewrite.</P
><p class="para">Note that the <code class="literal">$:</CODE
> prefix must begin the <span class="acronym">RHS</SPAN
> to
have any effect. If it instead appears inside the <span class="acronym">RHS</SPAN
>, its
special meaning is lost:</P
><p class="para"><blockquote class="screen"><pre class="screen">foo  <i class="lineannotation">rewritten by</I
>  $:$1   <i class="lineannotation">becomes <img src="../chars/rarr.gif" alt="-&gt;"></I
>   foo
foo  <i class="lineannotation">rewritten by</I
>  $1$:   <i class="lineannotation">becomes <img src="../chars/rarr.gif" alt="-&gt;"></I
>   foo $:</PRE
></BLOCKQUOTE
></P
><p class="para"><a class="indexterm" name="AUTOID-26893"></A
><a class="indexterm" name="AUTOID-26894"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="SML2-CH-28-SECT-6-3">28.6.3 Rewrite-and-Return Prefix: $@</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-26898"></A
>The flow of rules is such that each and every rule
in a series of rules (a rule set) is given a chance to match the workspace:</P
><p class="para"><blockquote class="screen"><pre class="screen">Rxxx   yyy
Ryyy   zzz</PRE
></BLOCKQUOTE
></P
><p class="para">The first rule matches <code class="literal">xxx</CODE
> in the workspace and
rewrites the workspace to contain <code class="literal">yyy</CODE
>. The first
rule then tries to match the workspace again but, of
course, fails.
The second rule then tries to match the workspace. 
Since the workspace
contains <code class="literal">yyy</CODE
>, a match is found, and the <span class="acronym">RHS</SPAN
> rewrites the workspace
to be <code class="literal">zzz</CODE
>.</P
><p class="para">There will often be times when one rule in a series performs
the appropriate rewrite and no subsequent rules need to be
called. In the above example, suppose <code class="literal">xxx</CODE
> should
only become <code class="literal">yyy</CODE
> and that the second rule
should not be called. To solve problems like this,
<em class="emphasis">sendmail</EM
> offers the <code class="literal">$@</CODE
> prefix for use in the <span class="acronym">RHS</SPAN
>.</P
><p class="para">The <code class="literal">$@</CODE
> prefix tells <em class="emphasis">sendmail</EM
> that the current rule
is the last one that should be used in the current rule set.
If the <span class="acronym">LHS</SPAN
> of the current
rule matches, any rules that follow (in the current rule set) are ignored:</P
><p class="para"><blockquote class="screen"><pre class="screen">Rxxx   $@yyy
Ryyy   zzz</PRE
></BLOCKQUOTE
></P
><p class="para">If the workspace contains anything other than <code class="literal">xxx</CODE
>, the
first rule does not match, and the second rule is called.
But if the workspace contains <code class="literal">xxx</CODE
>, the first rule
matches and rewrites the workspace. The <code class="literal">$@</CODE
> prefix
for the <span class="acronym">RHS</SPAN
> of that rule prevents the second rule (and any
subsequent rules) from being called.</P
><p class="para">Note that the <code class="literal">$@</CODE
> also prevents looping. The <code class="literal">$@</CODE
>
tells <em class="emphasis">sendmail</EM
> to skip further rules <em class="emphasis">and</EM
> to
rewrite only once. The difference between <code class="literal">$@</CODE
> and <code class="literal">$:</CODE
> is
that both rewrite only once, but <code class="literal">$@</CODE
> <em class="emphasis">doesn't</EM
>
proceed to the next rule, whereas <code class="literal">$:</CODE
> <em class="emphasis">does</EM
>.</P
><p class="para">The <code class="literal">$@</CODE
> operator must be used as a prefix because it has special
meaning only when it 
begins the <span class="acronym">RHS</SPAN
> of a rule. If it appears anywhere
else inside the <span class="acronym">RHS</SPAN
> it loses its special meaning:</P
><p class="para"><blockquote class="screen"><pre class="screen">foo  <i class="lineannotation">rewritten by</I
>  $@$1   <i class="lineannotation">becomes <img src="../chars/rarr.gif" alt="-&gt;"></I
>   foo
foo  <i class="lineannotation">rewritten by</I
>  $1$@   <i class="lineannotation">becomes <img src="../chars/rarr.gif" alt="-&gt;"></I
>   foo $@</PRE
></BLOCKQUOTE
></P
><p class="para"></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="SML2-CH-28-SECT-6-4">28.6.4 Rewrite Through Another Rule Set: $&gt;set</A
></H3
><p class="para"><a class="indexterm" name="SML2-CH-28-IX-OPERATORS-DOLLAR-OPERATORS-ANGLE"></A
><a class="indexterm" name="SML2-CH-28-IX-RULES-REWRITING-USING-OTHER-RULE-SETS"></A
><a class="indexterm" name="SML2-CH-28-IX-SUBROUTINES-RULES-AS"></A
>Rules are organized in sets that can be thought of as
subroutines.
Occasionally, a rule or series of rules
can be common to two or more rule sets. To make the configuration
file more compact and somewhat clearer, such common series of
rules can be made into separate subroutines.</P
><p class="para">The <span class="acronym">RHS</SPAN
> <code class="literal">$&gt;</CODE
><code class="replaceable"><i>set</I
></CODE
> operator tells <em class="emphasis">sendmail</EM
> to perform
additional rewriting using a secondary set of rules.
The <code class="replaceable"><i>set</I
></CODE
> is the rule-set name or number of that secondary
set. If <code class="replaceable"><i>set</I
></CODE
> is the name or number of a nonexistent rule set,
the effect is the same as if the subroutine rules were
never called (the workspace is unchanged).</P
><p class="para">If the <code class="replaceable"><i>set</I
></CODE
> is numeric and is greater than the maximum number of allowable
rule sets, <em class="emphasis">sendmail</EM
> 
prints the following error and skips that rule:</P
><p class="para"><blockquote class="screen"><pre class="screen">bad ruleset <code class="replaceable"><i>bad_number (maximum max)</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">&#13;If the <code class="replaceable"><i>set</I
></CODE
> is a name and the rule-set name is unknown, <em class="emphasis">sendmail</EM
>
prints the following error and skips that rule:</P
><p class="para"><blockquote class="screen"><pre class="screen">Unknown ruleset <code class="replaceable"><i>bad_name</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">Neither of these errors is caught when the configuration file is read.
They are caught only when mail is sent, because a rule set name may
be a macro:</P
><p class="para"><blockquote class="screen"><pre class="screen">$&gt; $&amp;{SET}</PRE
></BLOCKQUOTE
></P
><p class="para"><a class="indexterm" name="AUTOID-26982"></A
>The <code class="literal">$&amp;</CODE
> prefix prevents the macro named <code class="literal">{SET}</CODE
> from being expanded
when the configuration file is read. Therefore the name or number of the rule
set cannot be known until mail is sent.</P
><p class="para">The process of calling another set of rules proceeds in five stages:
First 
As usual, if the <span class="acronym">LHS</SPAN
> matches the workspace, the <span class="acronym">RHS</SPAN
> gets to rewrite
the workspace.
Second 
The <span class="acronym">RHS</SPAN
> ignores the <code class="literal">$&gt;</CODE
><code class="replaceable"><i>set</I
></CODE
> part and rewrites the rest as usual.
Third 
The rewritten workspace is then given to the set of rules specified
by <code class="replaceable"><i>set</I
></CODE
>. They either rewrite the workspace or do not.
Fourth 
The original <span class="acronym">RHS</SPAN
> (the one with the <code class="literal">$&gt;</CODE
><code class="replaceable"><i>set</I
></CODE
>) leaves
the possibly rewritten workspace as is, as though it had performed
the subroutine's rewriting itself.
Fifth 
The <span class="acronym">LHS</SPAN
> gets a crack at the new workspace as usual unless it is prevented
by a <code class="literal">$:</CODE
> or <code class="literal">$@</CODE
> prefix in the <span class="acronym">RHS</SPAN
>.</P
><p class="para">For example, consider the following two sets of rules:</P
><p class="para"><blockquote class="screen"><pre class="screen"># first set
S21
R$*..   $:$&gt;22 $1.     strip extra trailing dots
 <i class="lineannotation">...etc.</I
>

# second set
S22
R$*..    $1.           strip trailing dots</PRE
></BLOCKQUOTE
></P
><p class="para">Here, the first set of rules contains, among other things,
a single rule that
removes extra dots from the end of an address.
But because other rule sets may also need extra dots stripped, a subroutine
(the second set of rules) is created to perform that task.</P
><p class="para">Note that the first rule strips one trailing dot
from the workspace and then calls
rule set 22 (the <code class="literal">$&gt;22</CODE
>), which then strips
any additional dots.
The workspace as rewritten by rule set 22 becomes
the workspace yielded by the <span class="acronym">RHS</SPAN
> in the first rule.
The <code class="literal">$:</CODE
> prevents the <span class="acronym">LHS</SPAN
> of the first rule from
looking for a match a second time.</P
><p class="para">Prior to V8.8 <em class="emphasis">sendmail</EM
>
the subroutine call must begin the <span class="acronym">RHS</SPAN
> (immediately follow any
<code class="literal">$@</CODE
> or <code class="literal">$:</CODE
> prefix, if any) and
only a single subroutine may be called. That is, the following
causes rule set 22 to be called but does not call 23:</P
><p class="para"><blockquote class="screen"><pre class="screen">$&gt;22 xxx $&gt;23 yyy</PRE
></BLOCKQUOTE
></P
><p class="para">Instead of calling rule set 23, the <code class="literal">$&gt;</CODE
> operator and
the <code class="literal">23</CODE
> are copied as is into the workspace, and
that workspace is passed to rule set 22:</P
><p class="para"><blockquote class="screen"><pre class="screen">xxx $&gt; 23 yyy      <em class="emphasis"><img src="../chars/larr.gif" alt="&lt;-"> passed to rule set 22</EM
></PRE
></BLOCKQUOTE
></P
><p class="para">Beginning with V8.8
[5]
<em class="emphasis">sendmail</EM
>, subroutine calls may appear anywhere
inside the <span class="acronym">RHS</SPAN
>, and there may be multiple subroutine calls.
Consider the same <span class="acronym">RHS</SPAN
> as above:</P
><blockquote class="footnote"><p class="para">[5] Using code derived from <span class="acronym">IDA</SPAN
> sendmail.</P
></BLOCKQUOTE
><p class="para"><blockquote class="screen"><pre class="screen">$&gt;22 xxx $&gt;23 yyy</PRE
></BLOCKQUOTE
></P
><p class="para">Beginning with V8.8 <em class="emphasis">sendmail</EM
>, rule set 23 is called first and is
given the workspace <code class="literal">yyy</CODE
> to rewrite. The workspace,
as rewritten by rule set 23, is added to the end of the <code class="literal">xxx</CODE
>,
and the combined result is passed to rule set 22.</P
><p class="para">Under V8.8 <em class="emphasis">sendmail</EM
>, subroutine rule-set calls are performed
from right to left. The result (rewritten workspace)
of each call is appended to the <span class="acronym">RHS</SPAN
> text to the left.</P
><p class="para">You should beware of one problem with all versions of <em class="emphasis">sendmail</EM
>.
When ordinary text immediately follows the number of the rule
set, that text is likely to be ignored. This can be witnessed
by using the <code class="literal">-d21.3</CODE
> debugging switch.</P
><p class="para">Consider the following <span class="acronym">RHS</SPAN
>:</P
><p class="para"><blockquote class="screen"><pre class="screen">$&gt;3uucp.$1</PRE
></BLOCKQUOTE
></P
><p class="para">Because <em class="emphasis">sendmail</EM
> parses the <code class="literal">3</CODE
> and the <code class="literal">uucp</CODE
>
as a single token, the subroutine call succeeds, but the
<code class="literal">uucp</CODE
> is lost. The <code class="literal">-d21.3</CODE
> switch illustrates this
problem:</P
><p class="para"><blockquote class="screen"><pre class="screen">-----callsubr 3uucp (3)       <i class="lineannotation"><img src="../chars/larr.gif" alt="&lt;-">  sees this</I
>
-----callsubr 3 (3)           <i class="lineannotation"><img src="../chars/larr.gif" alt="&lt;-"> but should have seen this</I
></PRE
></BLOCKQUOTE
></P
><p class="para">The <code class="literal">3uucp</CODE
> is interpreted as the number 3,
so it is accepted as a valid number despite the fact
that <code class="literal">uucp</CODE
> was attached. 
Since the <code class="literal">uucp</CODE
> is a part of the number, it
is not available for comparison 

to the workspace and so is lost.
The correct way to write the above <span class="acronym">RHS</SPAN
> is</P
><p class="para"><blockquote class="screen"><pre class="screen">$&gt;3 uucp.$1</PRE
></BLOCKQUOTE
></P
><p class="para">Note that the space between the <code class="literal">3</CODE
> and the <code class="literal">uucp</CODE
> causes
them to be viewed as two separate tokens.</P
><p class="para">This problem can also arise with macros. Consider the following:</P
><p class="para"><blockquote class="screen"><pre class="screen">$&gt;3$M</PRE
></BLOCKQUOTE
></P
><p class="para">Here, the <code class="literal">$M</CODE
> is expanded when the configuration file is
parsed. If the expanded value
lacks a leading space, that value (or the first token in it) is lost.</P
><p class="para">Note that operators that follow a rule-set number are
correctly recognized:</P
><p class="para"><blockquote class="screen"><pre class="screen">$&gt;3$[$1$]</PRE
></BLOCKQUOTE
></P
><p class="para">Here, the <code class="literal">3</CODE
> is immediately followed by the <code class="literal">$[</CODE
> operator.
Because operators are token separators, the call to rule set 3
will be correctly interpreted as</P
><p class="para"><blockquote class="screen"><pre class="screen">-----callsubr 3 (3)           <i class="lineannotation"><img src="../chars/larr.gif" alt="&lt;-"> good</I
></PRE
></BLOCKQUOTE
></P
><p class="para">But as a general rule, and just to be safe, the number of a subroutine
call should always be followed by a space.
[6]<a class="indexterm" name="AUTOID-27086"></A
><a class="indexterm" name="AUTOID-27087"></A
><a class="indexterm" name="AUTOID-27088"></A
></P
><blockquote class="footnote"><p class="para">[6] As a stylistic point, it is easier to read rules that have spaces
between all patterns that are expected to match separate tokens. For
example, use <code class="literal">$+ @ $* $=m</CODE
> instead of <code class="literal">$+@$*$=m</CODE
>. This
style handles subroutine calls automatically.</P
></BLOCKQUOTE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="SML2-CH-28-SECT-6-5">28.6.5 Specify a Delivery Agent: $#</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-27092"></A
><a class="indexterm" name="AUTOID-27095"></A
>The <code class="literal">$#</CODE
> operator in the <span class="acronym">RHS</SPAN
> is copied as is into the workspace
and functions as a flag advising <em class="emphasis">sendmail</EM
> that
a delivery agent has been selected. The <code class="literal">$#</CODE
> must be the first
token copied into the rewritten workspace for it to have this special
meaning: 
If it occupies any other position in the workspace, it loses its
special meaning.</P
><p class="para"><blockquote class="screen"><pre class="screen">$# local           <i class="lineannotation"><img src="../chars/larr.gif" alt="&lt;-"> selects delivery agent</I
>
xxx $# local       <i class="lineannotation"><img src="../chars/larr.gif" alt="&lt;-"> no special meaning</I
></PRE
></BLOCKQUOTE
></P
><p class="para">When it occurs first in the rewritten workspace, the <code class="literal">$#</CODE
>
operator tells <em class="emphasis">sendmail</EM
>
that the second token in the workspace is the name of a delivery
agent.
The <code class="literal">$#</CODE
> operator is useful only in rule
sets 0 and 5.</P
><p class="para">Note that the <code class="literal">$#</CODE
> operator may be prefixed with a <code class="literal">$@</CODE
> or
a <code class="literal">$:</CODE
> without losing its special meaning, because those prefix
operators are not copied to the workspace:</P
><p class="para"><blockquote class="screen"><pre class="screen">$@ $# local     <i class="lineannotation">rewritten as <img src="../chars/rarr.gif" alt="-&gt;"></I
> $# local</PRE
></BLOCKQUOTE
></P
><p class="para">&#13;However, those prefix operators are not necessary, because
the <code class="literal">$#</CODE
> acts just like a <code class="literal">$@</CODE
> prefix. It
prevents the <span class="acronym">LHS</SPAN
> from attempting to match again after the <span class="acronym">RHS</SPAN
>
rewrite, and it causes any following rules to be skipped.
When used in nonprefix roles in rule sets 0 and 5, 
<code class="literal">$@</CODE
> and <code class="literal">$:</CODE
> 
also act like flags, conveying host and user information
to <em class="emphasis">sendmail</EM
> (see <a class="xref" href="ch29_06.htm#SML2-CH-29-SECT-6-1" title="Rule Set 0">Section 29.6, "Rule Set 0"</A
>).</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="SML2-CH-28-SECT-6-6">28.6.6 Canonicalize Hostname: $[ and $]</A
></H3
><p class="para"><a class="indexterm" name="SML2-CH-28-IX-OPERATORS-DOLLAR-OPERATORS-AND-BRACKET"></A
><a class="indexterm" name="SML2-CH-28-IX-CANONICALIZATION-AND-OPERATORS-AND-DOLLARBRACKET"></A
>Tokens that appear between 
a <code class="literal">$[</CODE
> and <code class="literal">$]</CODE
> pair of operators in the <span class="acronym">RHS</SPAN
> are
considered to be the name of a host.
That hostname is looked up by using <span class="acronym">DNS</SPAN
>
[7]
and replaced with the full canonical form of that name. 
If found, it is then copied to the workspace, and the 
<code class="literal">$[</CODE
> and <code class="literal">$]</CODE
> are discarded.</P
><blockquote class="footnote"><p class="para">[7] Or other means, depending on the setting of service switch file, if you
have one, or the state of the <code class="literal">ServiceSwitchFile</CODE
> option
(see <a class="xref" href="ch34_08.htm" title="">Section 34.8.61, ServiceSwitchFile</A
>).</P
></BLOCKQUOTE
><p class="para">For example, consider a rule that looks for a
hostname in angle brackets and (if found) rewrites it
in canonical form:</P
><p class="para"><blockquote class="screen"><pre class="screen">R&lt;$*&gt;     $@ &lt;$[ $1 $]&gt;     canonicalize host name</PRE
></BLOCKQUOTE
></P
><p class="para">Such canonicalization is useful at sites where users frequently send mail
to machines using the short version of a machine's name.
The <code class="literal">$[</CODE
> tells <em class="emphasis">sendmail</EM
> to view all the tokens
that follow (up to the <code class="literal">$]</CODE
>) as a single hostname.</P
><p class="para">If the name cannot be canonicalized (perhaps because there
is no such host), the name is copied as is
into the workspace. For configuration files lower than
2, no indication is given that it could not be canonicalized
(more about this soon).</P
><p class="para">Note that if the <code class="literal">$[</CODE
> is omitted and the <code class="literal">$]</CODE
> is included,
the <code class="literal">$]</CODE
> loses its special meaning and is copied as is
into the workspace.</P
><p class="para">The hostname between the <code class="literal">$[</CODE
> and <code class="literal">$]</CODE
> can also
be an <span class="acronym">IP</SPAN
> address. By surrounding the hostname with
square brackets (<code class="literal">[</CODE
> and <code class="literal">]</CODE
>), you are telling <em class="emphasis">sendmail</EM
>
that it is really an <span class="acronym">IP</SPAN
> address:</P
><p class="para"><blockquote class="screen"><pre class="screen">wash.dc.gov            <i class="lineannotation"><img src="../chars/larr.gif" alt="&lt;-"> a host name</I
>
[123.45.67.8]          <i class="lineannotation"><img src="../chars/larr.gif" alt="&lt;-"> an IP address</I
></PRE
></BLOCKQUOTE
></P
><p class="para">When the <span class="acronym">IP</SPAN
> address between the square brackets corresponds to
a known host, the address and the square brackets are replaced
with that host's canonical name.</P
><p class="para">&#13;If the version of the configuration
file is <code class="literal">2</CODE
> or greater (as set with the <code class="literal">V</CODE
> configuration command;
see <a class="xref" href="ch27_05.htm#SML2-CH-27-SECT-5-1" title="The V Configuration Command">Section 27.5, "The V Configuration Command"</A
>),
a successful canonicalization has a dot appended to the
result:</P
><p class="para"><blockquote class="screen"><pre class="screen">myhost       <i class="lineannotation">becomes <img src="../chars/rarr.gif" alt="-&gt;"></I
>  myhost . domain .   <i class="lineannotation"><img src="../chars/larr.gif" alt="&lt;-"> success</I
>
nohost       <i class="lineannotation">becomes <img src="../chars/rarr.gif" alt="-&gt;"></I
>  nohost              <i class="lineannotation"><img src="../chars/larr.gif" alt="&lt;-"> failure</I
></PRE
></BLOCKQUOTE
></P
><p class="para">Note that a trailing dot is not legal
[8]
in an address specification, so subsequent rules (such as rule set 4)
<em class="emphasis">must</EM
> remove these added trailing dots.</P
><blockquote class="footnote"><p class="para">[8] Under DNS the trailing dot signifies the root (topmost) domain. Therefore
under DNS a trailing dot is legal. For mail, however, RFC1123 specifically
states that no address is to be propagated that contains a trailing dot.</P
></BLOCKQUOTE
><p class="para">Also, the <code class="literal">K</CODE
> configuration command
(see <a class="xref" href="ch33_03.htm#SML2-CH-33-SECT-3-4-2" title="The K Configuration Command">Section 33.3, "The K Configuration Command"</A
>)
can be used
to redefine (or eliminate) the dot as the added character. For example,</P
><p class="para"><blockquote class="screen"><pre class="screen">Khost host -a.found</PRE
></BLOCKQUOTE
></P
><p class="para">This causes <em class="emphasis">sendmail</EM
> to 
add the text <code class="literal">.found</CODE
> to a successfully
canonicalized hostname instead of the dot.</P
><p class="para">One difference between V8 <em class="emphasis">sendmail</EM
> and other versions
is in the way it looks up names from between the <code class="literal">$[</CODE
> and <code class="literal">$]</CODE
>
operators. The rules for V8 <em class="emphasis">sendmail</EM
> are as follows:
First 
If the name contains at least one dot (<code class="literal">.</CODE
>) anywhere within it, it is
looked up as is; for example, <em class="emphasis">host.CS</EM
>.
Second 
If that fails, it appends the default domain to the name (as defined
in <em class="emphasis">/etc/resolv.conf</EM
>) and tries to look up the result;
for example, <em class="emphasis">host.CS.our.Sub.Domain</EM
>.
Third 
If that fails, the leftmost part of the subdomain (if any) is discarded
and the result is appended to the original host; 
for example, <em class="emphasis">host.our.Sub.Domain</EM
>.
Fourth 
If the original name did not have a dot in it, it is looked up as is;
for example, <em class="emphasis">host</EM
>.</P
><p class="para">This approach allows names such as <em class="emphasis">host.CS</EM
> to first match
a site in the Czech Republic, such as <em class="emphasis">vscht.CS</EM
>
(if that was intended), rather than to wrongly
match a host in your local Computer Science (<code class="literal">CS</CODE
>) department.
This is particularly important if you have wildcard <span class="acronym">MX</SPAN
> records
for your site.</P
><div class="sect3"><h4 class="sect3"><a class="title" name="SML2-CH-28-SECT-6-6-1">28.6.6.1 An example of canonicalization</A
></H4
><p class="para">The following two-line configuration file can be used to
observe how <em class="emphasis">sendmail</EM
> canonicalizes hostnames:</P
><p class="para"><blockquote class="screen"><pre class="screen">V2
R$*        $@ $[ $1 $]</PRE
></BLOCKQUOTE
></P
><p class="para">If this file were called <em class="emphasis">x.cf</EM
>, <em class="emphasis">sendmail</EM
>
could be run in rule-testing mode with a command like the following:</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>/usr/lib/sendmail -oQ. -Cx.cf -bt</B
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">Thereafter, hostname canonicalization can be observed by specifying
rule set 0 and a hostname. One such run of tests is as follows:</P
><p class="para"><blockquote class="screen"><pre class="screen">ADDRESS TEST MODE (ruleset 3 NOT automatically invoked)
Enter &lt;ruleset&gt; &lt;address&gt;
&gt; <code class="userinput"><b>0 wash</B
></CODE
>
rewrite: ruleset  0   input: wash
rewrite: ruleset  0 returns: wash . dc . gov .
&gt; <code class="userinput"><b>0 nohost</B
></CODE
>
rewrite: ruleset  0   input: nohost
rewrite: ruleset  0 returns: nohost
&gt;</PRE
></BLOCKQUOTE
></P
><p class="para">Note that the known host named <code class="literal">wash</CODE
> is rewritten in
canonicalized form (with a dot appended because of the <code class="literal">V2</CODE
>).
The unknown host named <code class="literal">nohost</CODE
> is unchanged and has no dot appended.</P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="SML2-CH-28-SECT-6-6-2">28.6.6.2 Default in canonicalization: $:</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-27233"></A
><a class="indexterm" name="AUTOID-27236"></A
><a class="indexterm" name="AUTOID-27240"></A
>IDA and V8 <em class="emphasis">sendmail</EM
> both offer an alternative to
leaving the hostname unchanged when canonicalization fails
with <code class="literal">$[</CODE
> and <code class="literal">$]</CODE
>. A default can be used instead
of the failed hostname by prefixing that default with a <code class="literal">$:</CODE
>:</P
><p class="para"><blockquote class="screen"><pre class="screen">$[ <code class="replaceable"><i>host $: default $]</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">The <code class="literal">$:</CODE
><code class="replaceable"><i>default</I
></CODE
> must follow the <code class="replaceable"><i>host</I
></CODE
> and
precede the <code class="literal">$]</CODE
>. To illustrate its use, consider the
following rule:</P
><p class="para"><blockquote class="screen"><pre class="screen">R$*    $:$[ $1 $: $1.notfound $]</PRE
></BLOCKQUOTE
></P
><p class="para">If the hostname <code class="literal">$1</CODE
> can be canonicalized, the workspace
becomes that canonicalized name. If it cannot, the workspace
becomes the original hostname with a <code class="literal">.notfound</CODE
> appended
to it.
If the <code class="replaceable"><i>default</I
></CODE
> part of the <code class="literal">$:</CODE
><code class="replaceable"><i>default</I
></CODE
> is omitted,
a failed canonicalization is rewritten as zero tokens.<a class="indexterm" name="AUTOID-27264"></A
><a class="indexterm" name="AUTOID-27265"></A
></P
></DIV
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="SML2-CH-28-SECT-6-7">28.6.7 Other Operators</A
></H3
><p class="para">Many other operators (depending on your version
of <em class="emphasis">sendmail</EM
>) may also be used in
rules. Because of their individual complexity, all of the
following are detailed in other chapters. We outline them
here, however, for completeness.&#13;</P
><dl class="variablelist"><dt class="term"><em class="emphasis">Class macros</EM
></DT
><dd class="listitem"><p class="para">Class macros are described in
<a class="xref" href="ch32_02.htm#SML2-CH-32-SECT-2-1" title="Matching Any in a Class: $=">Section 32.2.1, "Matching Any in a Class: $="</A
> and <a class="xref" href="ch32_02.htm#SML2-CH-32-SECT-2-1" title="Matching Any Not in a Class: $~">Section 32.2.2, "Matching Any Not in a Class: $~"</A
> of
<a class="xref" href="ch32_01.htm" title="Class Macros">Chapter 32, <cite class="chapter">Class Macros</CITE
></A
>.
Class macros may appear only in the <span class="acronym">LHS</SPAN
>. They begin with the prefix <code class="literal">$=</CODE
>
to match a token in the workspace to one of many items in
a class. The alternative prefix <code class="literal">$~</CODE
> causes a token
in the workspace to match if it does <em class="emphasis">not</EM
> appear in the list
of items that are the class.&#13;</P
></DD
><dt class="term"><em class="emphasis">Conditionals</EM
></DT
><dd class="listitem"><p class="para">The conditional macro operator <code class="literal">$?</CODE
> is rarely used in
rules (see <a class="xref" href="ch31_06.htm" title="Macro Conditionals: $?, $|, and $.">Section 31.6, "Macro Conditionals: $?, $|, and $."</A
>). 
When it is used in rules,
the result is often not what was intended.
Its <em class="emphasis">else</EM
> part, the <code class="literal">$|</CODE
> conditional operator is used by
the <code class="literal">check_compat</CODE
> rule set (see <a class="xref" href="ch29_10.htm#SML2-CH-29-SECT-10-1" title="The check_compat Rule Set">Section 29.10.4, "The check_compat Rule Set"</A
>)
to separate the sender from the recipient address.&#13;</P
></DD
><dt class="term"><em class="emphasis">Database Operators</EM
></DT
><dd class="listitem"><p class="para">The database operators, <code class="literal">$(</CODE
> and <code class="literal">$)</CODE
>, are used to look up tokens 
in various types of database files and network database services.
They also provide access to internal services, such as dequoting and looking
up <span class="acronym">MX</SPAN
> records (see 
<a class="xref" href="ch33_01.htm" title="Database Macros">Chapter 33, <cite class="chapter">Database Macros</CITE
></A
>).<a class="indexterm" name="AUTOID-27303"></A
><a class="indexterm" name="AUTOID-27304"></A
></P
></DD
></DL
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch28_05.htm" title="28.5 The LHS"><img src="../gifs/txtpreva.gif" alt="Previous: 28.5 The LHS" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="sendmail"><img src="../gifs/txthome.gif" alt="sendmail" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch28_07.htm" title="28.7 Pitfalls"><img src="../gifs/txtnexta.gif" alt="Next: 28.7 Pitfalls" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">28.5 The LHS</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">28.7 Pitfalls</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.htm" title="The Networking CD Bookshelf">Library Home</A
> | <a href="../dnsbind/index.htm" title="DNS &amp; BIND">DNS &amp; BIND</A
> | <a href="../tcpip/index.htm" title="TCP/IP Network Administration">TCP/IP</A
> | <a href="index.htm" title="sendmail">sendmail</A
> | <a href="../smdref/index.htm" title="sendmail Desktop Reference">sendmail Reference</A
> | <a href="../firewall/index.htm" title="Building Internet Firewalls">Firewalls</A
> | <a href="../puis/index.htm" title="Practical UNIX &amp; Internet Security">Practical Security</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
