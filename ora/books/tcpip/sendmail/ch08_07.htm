<html><head>
<title>[Chapter 8] 8.7 Wildcard Operators</TITLE>
<meta name="DC.title" content="sendmail"><meta name="DC.creator" content="Bryan Costales &amp; Eric Allman"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-01-06T18:35:44Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-222-0" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch08_01.htm" title="8. Addresses and Rules"><link rel="prev" href="ch08_06.htm" title="8.6 The Flow of Addresses Through Rules"><link rel="next" href="ch08_08.htm" title="8.8 Things to Try"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="sendmail" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="sendmail"><area shape="RECT" coords="467,0,514,18" href="../search/ssrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch08_06.htm" title="8.6 The Flow of Addresses Through Rules"><img src="../gifs/txtpreva.gif" alt="Previous: 8.6 The Flow of Addresses Through Rules" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 8<br>Addresses and Rules</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch08_08.htm" title="8.8 Things to Try"><img src="../gifs/txtnexta.gif" alt="Next: 8.8 Things to Try" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="SML2-CH-8-SECT-7">8.7 Wildcard Operators</A
></H2
><p class="para"><a class="indexterm" name="SML2-CH-8-IX-WILDCARD-OPERATORS"></A
><a class="indexterm" name="SML2-CH-8-IX-RULES-WILDCARDS-OPERATORS-IN"></A
><a class="indexterm" name="AUTOID-4975"></A
>Rules would be pretty useless if they always had to match
the workspace exactly. Fortunately, that is not the case. In addition to
literal text, you can also use wildcard operators
that allow the LHS of rules to match
arbitrary text in the workspace. To illustrate, consider this rule:</P
><p class="para"><blockquote class="screen"><pre class="screen">R$+     <i class="lineannotation">rhs is here</I
>
 <i class="lineannotation"><img src="../chars/uarr.gif" alt="-^"></I
>
 <i class="lineannotation">lhs</I
></PRE
></BLOCKQUOTE
></P
><p class="para">This LHS begins with the first character following the <code class="literal">R</CODE
>.
The LHS in this example is</P
><p class="para"><blockquote class="screen"><pre class="screen">$+</PRE
></BLOCKQUOTE
></P
><p class="para"><a class="indexterm" name="AUTOID-4989"></A
><a class="indexterm" name="AUTOID-4992"></A
><a class="indexterm" name="SML2-CH-8-IX-OPERATORS-DOLLAR-OPERATORS-PLUS"></A
>
This is a wildcard operator.
The truth of this if statement is determined by a process called <em class="emphasis">pattern
matching</EM
>. The LHS <code class="literal">$+</CODE
> (a single token) is a pattern that
means
&quot;match one or more tokens.&quot;
The address that is being evaluated
is tokenized and  placed into the workspace, and
then the workspace is compared to that pattern:</P
><p class="para"><blockquote class="screen"><pre class="screen">gw@wash.dc.gov
  <i class="lineannotation"><img src="../chars/darr.gif" alt="-v"></I
>
  <i class="lineannotation">tokenized into</I
>
  <i class="lineannotation"><img src="../chars/darr.gif" alt="-v"></I
>
gw @ wash . dc . gov   <img src="../chars/larr.gif" alt="&lt;-"> <i class="lineannotation">in the workspace</I
></PRE
></BLOCKQUOTE
></P
><p class="para">When matching the workspace to an LHS pattern, <em class="emphasis">sendmail</EM
> scans the
workspace from left to right. Each token in the workspace is compared
to the wildcard operator (the <code class="literal">$+</CODE
>) in the LHS pattern. If the tokens all match
the pattern, the if part of the if-then pair is true.</P
><p class="para">The <code class="literal">$+</CODE
> wildcard operator simply matches any <em class="emphasis">one or more</EM
> tokens:</P
><p class="para"><blockquote class="screen"><pre class="screen"><i class="lineannotation">workspace                 pattern</I
>
gw               $+       <img src="../chars/larr.gif" alt="&lt;-"> <i class="lineannotation">match one token (``one'')</I
>
@                         <img src="../chars/larr.gif" alt="&lt;-"> <i class="lineannotation">and optionally more (``or more'')</I
>
wash                      <img src="../chars/darr.gif" alt="-v">
.
dc
.
gov</PRE
></BLOCKQUOTE
></P
><p class="para">As you can see, if there are any tokens in the address at all
(the workspace is not empty), the LHS rule <code class="literal">$+</CODE
>
evaluates to true.&#13;</P
><div class="sect2"><h3 class="sect2"><a class="title" name="SML2-CH-8-SECT-7-1">8.7.1 Other Text in the LHS</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-5022"></A
>A rule of <code class="literal">$+</CODE
> (match one or more tokens) is not sufficient to
handle all possible addresses (especially bad addresses):</P
><p class="para"><blockquote class="screen"><pre class="screen">gw@wash.dc.gov        <img src="../chars/larr.gif" alt="&lt;-"> $+ <i class="lineannotation">should match and does</I
>
@wash.dc.gov          <img src="../chars/larr.gif" alt="&lt;-"> $+ <i class="lineannotation">matches an incomplete address</I
></PRE
></BLOCKQUOTE
></P
><p class="para">To make matching in the LHS more effective, <em class="emphasis">sendmail</EM
> allows
other text to appear in the pattern.
To make sure that the address in the workspace
contains a user part, the <code class="literal">@</CODE
> character, and a host part,
the following LHS pattern can be used:</P
><p class="para"><blockquote class="screen"><pre class="screen">$+@$+</PRE
></BLOCKQUOTE
></P
><p class="para">Just like the address in the workspace, this pattern is tokenized
before it is compared for a match. Wildcard operators (like <code class="literal">$+</CODE
>)
count as one token, and <code class="literal">@</CODE
> is a token because
it is a separator character:</P
><p class="para"><blockquote class="screen"><pre class="screen">.:<code class="userinput"><b>@</B
></CODE
>[]          <i class="lineannotation"><img src="../chars/larr.gif" alt="&lt;-"> you can change these</I
>
()&lt;&gt;,;\&quot;\r\n   <i class="lineannotation"><img src="../chars/larr.gif" alt="&lt;-"> you cannot change these</I
></PRE
></BLOCKQUOTE
></P
><p class="para">The pattern of <code class="literal">$+@$+</CODE
> is separated into three tokens:</P
><p class="para"><blockquote class="screen"><pre class="screen">$+ @ $+</PRE
></BLOCKQUOTE
></P
><p class="para">Text in the pattern must match text in the workspace <em class="emphasis">exactly</EM
>
(token for token) if there is to be a match. A good address in the
workspace (one containing a user part and a host part)
will match our new LHS (<code class="literal">$+@$+</CODE
>):</P
><p class="para"><blockquote class="screen"><pre class="screen"><i class="lineannotation">workspace                 pattern</I
>
gw              $+       <img src="../chars/larr.gif" alt="&lt;-"> <i class="lineannotation">match one or more</I
>
@               @        <img src="../chars/larr.gif" alt="&lt;-"> <i class="lineannotation">match exactly</I
>
wash            $+       <img src="../chars/larr.gif" alt="&lt;-"> <i class="lineannotation">match one</I
>
.                        <img src="../chars/darr.gif" alt="-v"> <i class="lineannotation">  or more</I
>
dc
.
gov</PRE
></BLOCKQUOTE
></P
><p class="para">Here, the flow of matching begins with the first <code class="literal">$+</CODE
>,
which matches one token (of the one or more) in the workspace. 
The <code class="literal">@</CODE
> matches the
identical token in the workspace. At this point, the <code class="literal">$+@</CODE
>
part of the pattern has been satisfied. All that remains is
for the final <code class="literal">$+</CODE
> to match its one or more of
all the remaining tokens in the workspace, which it does.</P
><p class="para">A bad address in the workspace, on the other hand, will not match the pattern.
Consider an address, for example, that lacks a user part:</P
><p class="para"><blockquote class="screen"><pre class="screen">@wash.dc.gov		<i class="lineannotation"><img src="../chars/larr.gif" alt="&lt;-"> in the workspace</I
>

<i class="lineannotation">workspace                 pattern</I
>
@               $+	<i class="lineannotation"><img src="../chars/larr.gif" alt="&lt;-"> match one</I
>
wash			<i class="lineannotation"><img src="../chars/larr.gif" alt="&lt;-">   or more</I
>
.                         
dc
.
gov
                @		<i class="lineannotation"><img src="../chars/larr.gif" alt="&lt;-"> match exactly (fails!)</I
>
                $+</PRE
></BLOCKQUOTE
></P
><p class="para">Here, the first <code class="literal">$+</CODE
> incorrectly matches
the <code class="literal">@</CODE
> in the workspace. Since there is no other
<code class="literal">@</CODE
> in the workspace to be matched by the <code class="literal">@</CODE
>
in the pattern, the first <code class="literal">$+</CODE
> matches the entire workspace.
Because there is nothing left in the workspace, the attempt
to match the <code class="literal">@</CODE
> fails.
When any part of a pattern fails to match the workspace, the entire
LHS fails (the if part of the if-then is false).&#13;</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="SML2-CH-8-SECT-7-2">8.7.2 Minimal Matching</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-5079"></A
>One small bit of confusion may yet remain.  When a wildcard operator such as
<code class="literal">$+</CODE
> is used to match the workspace, <em class="emphasis">sendmail</EM
> always
does a <em class="emphasis">minimal match</EM
>. That is, it matches only what it needs
to 

for the next part of the rule to work.
Consider the following:</P
><p class="para"><blockquote class="screen"><pre class="screen">R$+@$+</PRE
></BLOCKQUOTE
></P
><p class="para">In this LHS the first <code class="literal">$+</CODE
> matches everything
in the workspace up to the first <code class="literal">@</CODE
> character.
For example, consider the following workspace:</P
><p class="para"><blockquote class="screen"><pre class="screen">a@b@c</PRE
></BLOCKQUOTE
></P
><p class="para">In the above, <code class="literal">$+@</CODE
> causes the <code class="literal">$+</CODE
> to match only the 
characters up to the first <code class="literal">@</CODE
> character, the <code class="literal">a</CODE
>.
This is the minimum that needs to be matched, and so it is the maximum
that will be matched.&#13;</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="SML2-CH-8-SECT-7-3">8.7.3 More Play with LHS Matching</A
></H3
><p class="para">Take a moment to replace the previous demo rules with
the following three new demo rules in the <em class="emphasis">client.cf</EM
> file:</P
><p class="para"><blockquote class="screen"><pre class="screen">S0
R@         one
R@$+       two
R$+@$+     three</PRE
></BLOCKQUOTE
></P
><p class="para">Again, these three rules are
for demonstration purposes only (you'll
see how to declare a real one soon enough). We've given each
temporary RHS a number to see whether it is selected.
Now run <em class="emphasis">sendmail</EM
> in rule-testing mode:</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>./sendmail -Cclient.cf -bt</B
></CODE
>
ADDRESS TEST MODE (ruleset 3 NOT automatically invoked)
Enter &lt;ruleset&gt; &lt;address&gt;</PRE
></BLOCKQUOTE
></P
><p class="para">Now print the rules to remind yourself what they are:</P
><p class="para"><blockquote class="screen"><pre class="screen">&gt; <code class="userinput"><b>=S 0</B
></CODE
>
R@              one 
R@ $+           two 
R$+ @ $+                three</PRE
></BLOCKQUOTE
></P
><p class="para">We'll test those rules with an assortment of test addresses.
The first address to try is a lone <code class="literal">@</CODE
>:</P
><p class="para"><blockquote class="screen"><pre class="screen">&gt; <code class="userinput"><b>0 @</B
></CODE
>
rewrite: ruleset  0   input: @
rewrite: ruleset  0 returns: one</PRE
></BLOCKQUOTE
></P
><p class="para">The <code class="literal">@</CODE
> causes the first temporary
RHS to be selected because the rule is</P
><p class="para"><blockquote class="screen"><pre class="screen">R@      one</PRE
></BLOCKQUOTE
></P
><p class="para">The LHS here (the pattern to match) contains the lone <code class="literal">@</CODE
>.
That pattern matches the tokenized workspace <code class="literal">@</CODE
> exactly,
so the RHS for that rule rewrites the workspace to contain <code class="literal">one</CODE
>.
Since <code class="literal">one</CODE
> does not contain an @ character, neither the second nor third
rules match, so the entire rule set returns <code class="literal">one</CODE
>.</P
><p class="para">Next enter an address that just contains a host and domain part
but not a user part:</P
><p class="para"><blockquote class="screen"><pre class="screen">&gt; <code class="userinput"><b>0 @your.domain</B
></CODE
>
rewrite: ruleset  0   input: @ your . domain
rewrite: ruleset  0 returns: two</PRE
></BLOCKQUOTE
></P
><p class="para">The first thing to notice is what was <em class="emphasis">not</EM
> printed! The workspace
does not match the pattern of the first rule. But instead of returning an error,
the workspace is carried down <em class="emphasis">as is</EM
> to the next rule&nbsp;- where
it does match:</P
><p class="para"><blockquote class="screen"><pre class="screen"> @your.domain <i class="lineannotation">does not match, so ...</I
>
 <i class="lineannotation"><img src="../chars/darr.gif" alt="-v"></I
>
R@      one
 <i class="lineannotation"><img src="../chars/darr.gif" alt="-v"></I
>
 <i class="lineannotation">try the next rule</I
>
 <i class="lineannotation"><img src="../chars/darr.gif" alt="-v"></I
>
R@$+    two</PRE
></BLOCKQUOTE
></P
><p class="para">Now enter an address that fails to match the first two rules
but successfully matches the third:</P
><p class="para"><blockquote class="screen"><pre class="screen">&gt; <code class="userinput"><b>0 you@your.domain</B
></CODE
>
rewrite: ruleset  0   input: you @ your . domain
rewrite: ruleset  0 returns: three</PRE
></BLOCKQUOTE
></P
><p class="para">The flow for this address is</P
><p class="para"><blockquote class="screen"><pre class="screen"> your@your.domain <i class="lineannotation">does not match, so ...</I
>
 <i class="lineannotation"><img src="../chars/darr.gif" alt="-v"></I
>
R@      one
 <i class="lineannotation"><img src="../chars/darr.gif" alt="-v"></I
>
 <i class="lineannotation">try the next rule, which also does not match, so ...</I
>
 <i class="lineannotation"><img src="../chars/darr.gif" alt="-v"></I
>
R@$+    two
 <i class="lineannotation"><img src="../chars/darr.gif" alt="-v"></I
>
 <i class="lineannotation">try the next rule, which does match.</I
>
 <i class="lineannotation"><img src="../chars/darr.gif" alt="-v"></I
>
R$+@$+  three</PRE
></BLOCKQUOTE
></P
><p class="para">Try other addresses such as your login name or UUCP
addresses such as <em class="emphasis">you@host.uucp</EM
> and <em class="emphasis">host!you</EM
>.
Can you predict what will happen with weird addresses like
<em class="emphasis">@@</EM
> or <em class="emphasis">a@b@c</EM
>?</P
><p class="para">When you are done experimenting, exit rule-testing mode
and delete the four temporary lines that you added
for this demonstration.<a class="indexterm" name="AUTOID-5161"></A
><a class="indexterm" name="AUTOID-5162"></A
><a class="indexterm" name="AUTOID-5163"></A
><a class="indexterm" name="AUTOID-5164"></A
>&#13;</P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch08_06.htm" title="8.6 The Flow of Addresses Through Rules"><img src="../gifs/txtpreva.gif" alt="Previous: 8.6 The Flow of Addresses Through Rules" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="sendmail"><img src="../gifs/txthome.gif" alt="sendmail" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch08_08.htm" title="8.8 Things to Try"><img src="../gifs/txtnexta.gif" alt="Next: 8.8 Things to Try" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">8.6 The Flow of Addresses Through Rules</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">8.8 Things to Try</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.htm" title="The Networking CD Bookshelf">Library Home</A
> | <a href="../dnsbind/index.htm" title="DNS &amp; BIND">DNS &amp; BIND</A
> | <a href="../tcpip/index.htm" title="TCP/IP Network Administration">TCP/IP</A
> | <a href="index.htm" title="sendmail">sendmail</A
> | <a href="../smdref/index.htm" title="sendmail Desktop Reference">sendmail Reference</A
> | <a href="../firewall/index.htm" title="Building Internet Firewalls">Firewalls</A
> | <a href="../puis/index.htm" title="Practical UNIX &amp; Internet Security">Practical Security</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
