<html><head>
<title>[Chapter 31] 31.5 Macro Expansion: $ and $&amp;</TITLE>
<meta name="DC.title" content="sendmail"><meta name="DC.creator" content="Bryan Costales &amp; Eric Allman"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-01-06T20:10:55Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-222-0" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch31_01.htm" title="31. Defined Macros"><link rel="prev" href="ch31_04.htm" title="31.4 Macro Names"><link rel="next" href="ch31_06.htm" title="31.6 Macro Conditionals: $?, $|, and $."></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="sendmail" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="sendmail"><area shape="RECT" coords="467,0,514,18" href="../search/ssrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch31_04.htm" title="31.4 Macro Names"><img src="../gifs/txtpreva.gif" alt="Previous: 31.4 Macro Names" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 31<br>Defined Macros</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch31_06.htm" title="31.6 Macro Conditionals: $?, $|, and $."><img src="../gifs/txtnexta.gif" alt="Next: 31.6 Macro Conditionals: $?, $|, and $." border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="SML2-CH-31-SECT-5">31.5 Macro Expansion: $ and $&amp;</A
></H2
><p class="para"><a class="indexterm" name="SML2-CH-31-IX-DOLLAR-SIGN-DOLLAR-IN-MACRO-NAMES-IN-MACRO-NAMES"></A
><a class="indexterm" name="SML2-CH-31-IX-EXPANDING-MACROS"></A
>The value of a macro can be used by putting
a <code class="literal">$</CODE
> character in front of the macro's name. For example,
consider the following definition:</P
><p class="para"><blockquote class="screen"><pre class="screen">D<code class="replaceable"><i>Xtext</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">Here, the macro named <code class="replaceable"><i>X</I
></CODE
> is given <code class="replaceable"><i>text</I
></CODE
> as its value.</P
><p class="para">If you later prefix a macro name with a <code class="literal">$</CODE
> character, 
you may use that value.
This is called <em class="emphasis">expanding</EM
> a macro:</P
><p class="para"><blockquote class="screen"><pre class="screen">$X</PRE
></BLOCKQUOTE
></P
><p class="para">Here, the expression <code class="literal">$X</CODE
> tells <em class="emphasis">sendmail</EM
> to use
the value stored in <code class="literal">X</CODE
> (the <code class="replaceable"><i>text</I
></CODE
>) rather than
its name (<code class="replaceable"><i>X</I
></CODE
>).</P
><p class="para">For multicharacter names, the process is the same,
but the name is surrounded with curly braces:</P
><p class="para"><blockquote class="screen"><pre class="screen">D<code class="replaceable"><i>{Xxx}text        </I
></CODE
><i class="lineannotation"><img src="../chars/larr.gif" alt="&lt;-"> declare {Xxx}</I
>
${Xxx}            <i class="lineannotation"><img src="../chars/larr.gif" alt="&lt;-"> use {Xxx}</I
></PRE
></BLOCKQUOTE
></P
><p class="para"></P
><div class="sect2"><h3 class="sect2"><a class="title" name="SML2-CH-31-SECT-5-1">31.5.1 Macro Expansion Is Recursive</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-33362"></A
>When <code class="replaceable"><i>text</I
></CODE
> contains other macros, those other macros
are also expanded. This process is recursive and
continues until all macros have been expanded. For example,
consider the following:</P
><p class="para"><blockquote class="screen"><pre class="screen">DAxxx
DByyy
DC$A.$B
DD$C.zzz</PRE
></BLOCKQUOTE
></P
><p class="para">Here, the <code class="replaceable"><i>text</I
></CODE
> for the macro <code class="literal">D</CODE
> is <code class="literal">$C.zzz</CODE
>.
When the expression <code class="literal">$D</CODE
> appears in a line in the configuration
file, it is recursively expanded like this:</P
><p class="para"><blockquote class="screen"><pre class="screen">$D            <i class="lineannotation"><img src="../chars/rarr.gif" alt="-&gt;"> becomes <img src="../chars/rarr.gif" alt="-&gt;"></I
>  $C.zzz
$C.zzz        <i class="lineannotation"><img src="../chars/rarr.gif" alt="-&gt;"> becomes <img src="../chars/rarr.gif" alt="-&gt;"></I
>  $A.$B.zzz
$A.$B.zzz     <i class="lineannotation"><img src="../chars/rarr.gif" alt="-&gt;"> becomes <img src="../chars/rarr.gif" alt="-&gt;"></I
>  xxx.$B.zzz
xxx.$B.zzz    <i class="lineannotation"><img src="../chars/rarr.gif" alt="-&gt;"> becomes <img src="../chars/rarr.gif" alt="-&gt;"></I
>  xxx.yyy.zzz</PRE
></BLOCKQUOTE
></P
><p class="para">Notice that when <em class="emphasis">sendmail</EM
> recursively expands a macro, it does so
one macro at a time, always expanding the leftmost macro.</P
><p class="para">In rules, when <em class="emphasis">sendmail</EM
> expands a macro,
it also tokenizes it. For example,
placing the above <code class="literal">$D</CODE
> in the following rule's LHS:</P
><p class="para"><blockquote class="screen"><pre class="screen">R$+@$D      $1</PRE
></BLOCKQUOTE
></P
><p class="para">causes the LHS to contain seven tokens, rather than three:</P
><p class="para"><blockquote class="screen"><pre class="screen">R$+@xxx.yyy.zzz       $1</PRE
></BLOCKQUOTE
></P
><p class="para"></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="SML2-CH-31-SECT-5-2">31.5.2 When Is a Macro Expanded?</A
></H3
><p class="para">A macro can either be expanded immediately or at runtime, depending
on where the expansion takes place in the configuration file.</P
><p class="para">Macros are expanded in rule sets as the configuration
file is read and parsed by <em class="emphasis">sendmail</EM
>,
and (beginning with V8.7) so are macros in
rule-set names (see <a class="xref" href="ch29_01.htm" title="Macros in Rule-Set Names">Section 29.1.4, "Macros in Rule-Set Names"</A
>)
and in maps declared with the <code class="literal">K</CODE
> configuration command (see <a class="xref" href="ch33_03.htm#SML2-CH-33-SECT-3-4-2" title="The K Configuration Command">Section 33.3, "The K Configuration Command"</A
>).
In other configuration
lines, expansion is deferred until <em class="emphasis">sendmail</EM
> actually
needs to use that value. In yet others, macros are neither recognized nor expanded.</P
><p class="para">To illustrate, macros used in header commands are not be
expanded until the headers of a mail message are processed:</P
><p class="para"><blockquote class="screen"><pre class="screen">H?x?Full-Name: $x</PRE
></BLOCKQUOTE
></P
><p class="para">Here, <code class="literal">$x</CODE
> (see <a class="xref" href="ch31_10.htm" title="">Section 31.10.42, $x</A
>) may change as <em class="emphasis">sendmail</EM
> is running.
It contains as its value the full name of the sender. Clearly, this
macro should not be expanded until that full name is known.</P
><p class="para">On the other hand, macros in rules are always expanded <em class="emphasis">when the configuration
file is read</EM
>. Therefore macros like <code class="literal">$x</CODE
> should never be used
in rules, because the configuration file is read long before
mail is processed:</P
><p class="para"><blockquote class="screen"><pre class="screen">R$x	($x)</PRE
></BLOCKQUOTE
></P
><p class="para">Rules like this won't work because <code class="literal">$x</CODE
> lacks a value when
the configuration file is read. This rule will be expanded to become
meaningless:</P
><p class="para"><blockquote class="screen"><pre class="screen">R      ()</PRE
></BLOCKQUOTE
></P
><p class="para">Note that the <code class="literal">$</CODE
><code class="replaceable"><i>digit</I
></CODE
> positional operator (see <a class="xref" href="ch28_06.htm#SML2-CH-28-SECT-6-4" title="Copy by Position: $digit">Section 28.6.1, "Copy by Position: $digit"</A
>)
in the RHS may not be used to
reference defined macros in the LHS. Consider this example, in which <code class="literal">{HOST}</CODE
>
has the value <code class="literal">myhost</CODE
>:</P
><p class="para"><blockquote class="screen"><pre class="screen">R${HOST}     &lt;$1&gt;</PRE
></BLOCKQUOTE
></P
><p class="para">The <code class="literal">${HOST}</CODE
> is expanded when the configuration file is read and
is transformed into:</P
><p class="para"><blockquote class="screen"><pre class="screen">Rmyhost   &lt;$1&gt;   <i class="lineannotation"><img src="../chars/larr.gif" alt="&lt;-"> error</I
></PRE
></BLOCKQUOTE
></P
><p class="para">Here, the <code class="literal">$1</CODE
> has no wildcard operator in the LHS to reference
and so will produce this error:</P
><p class="para"><blockquote class="screen"><pre class="screen">replacement $1 out of bounds</PRE
></BLOCKQUOTE
></P
><p class="para"></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="SML2-CH-31-SECT-5-3">31.5.3 Use Value as Is with $&amp;</A
></H3
><p class="para"><a class="indexterm" name="SML2-CH-31-IX-PREFIXES-DOLLAR-PREFIXES"></A
>For those situations in which a macro should not be recursively expanded,
but rather should be used in rules as is, V8 <em class="emphasis">sendmail</EM
> offers the <code class="literal">$&amp;</CODE
>
prefix.
For example, consider the following RHS of a rule:</P
><p class="para"><blockquote class="screen"><pre class="screen">R...     $w.$&amp;m</PRE
></BLOCKQUOTE
></P
><p class="para">When <em class="emphasis">sendmail</EM
> encounters this RHS in the configuration
file, it recursively expands <code class="literal">$w</CODE
> into
its final text value (where that text value is your hostname, such as <em class="emphasis">lady</EM
>). But because the <code class="literal">m</CODE
> macro
is prefixed with <code class="literal">$&amp;</CODE
>, it is not expanded.</P
><p class="para">This could be useful, because it appears to offer a way to delay
expansion of macros in rules until after the configuration file
is read. Unfortunately such is not always the case, because the expanded
text returned by the <code class="literal">$&amp;</CODE
> prefix is always a single token.
That is, because the above is tokenized before each token is evaluated,
it appears in the workspace as</P
><p class="para"><blockquote class="screen"><pre class="screen">lady . $m</PRE
></BLOCKQUOTE
></P
><p class="para">&#13;Here, the <code class="literal">$m</CODE
> will expand to its current value, say, <em class="emphasis">our.domain</EM
>,
but that expansion will remain a single token:</P
><p class="para"><blockquote class="screen"><pre class="screen">lady . our.domain</PRE
></BLOCKQUOTE
></P
><p class="para">When tokens are compared during rule-set processing, they are compared
token by token. Consequently, the single token above will not match
the individual tokens of a real address, as shown on the left:</P
><p class="para"><blockquote class="screen"><pre class="screen">our      <i class="lineannotation">does not match</I
> our.domain
.        <i class="lineannotation">does not match</I
> our.domain
domain   <i class="lineannotation">does not match</I
> our.domain</PRE
></BLOCKQUOTE
></P
><p class="para">The <code class="literal">$&amp;</CODE
> prefix is intended to provide a way to access
macros that are given values after the configuration file is read.
Therefore the failure of <code class="literal">$&amp;</CODE
> to <em class="emphasis">recursively</EM
> expand is the result of
an implementation designed to meet the limited goal of accessing 
those runtime macros. (See <a class="xref" href="ch33_08.htm" title="">Section 33.8.4, dequote</A
> for ways to
use the <code class="literal">dequote</CODE
> database class to circumvent this restriction.)</P
><p class="para">To illustrate one application of <code class="literal">$&amp;</CODE
>, consider the client/hub
setup described in the tutorial. In that setup, all mail sent from
a client machine is forwarded to the hub for eventual delivery.
If the client were to run a <em class="emphasis">sendmail</EM
> daemon to receive
mail for local delivery, a mail loop could (in the absence of an MX record)
develop where a message would bounce back
and forth between the client and the hub, eventually failing.</P
><p class="para">To break such a loop, a rule must be devised that recognizes
that a received message is from the hub:</P
><p class="para"><blockquote class="screen"><pre class="screen">R$+              $: $&amp;r @ $&amp;s &lt;$1&gt;       Get protocol and host
Rsmtp @ $H &lt;$+&gt;  $#local $: $1           Local delivery breaks a loop
R$* &lt;$+&gt;         $#smtp  $@ $H $: $2     Punt to hub</PRE
></BLOCKQUOTE
></P
><p class="para">These rules appear in rule set 0. By the time they are reached,
other rules have forwarded any nonlocal mail to the hub. What is left
in the workspace is a lone username. The first rule above matches
the workspace and rewrites it to be the sending protocol (<code class="literal">$&amp;r</CODE
>;
see <a class="xref" href="ch31_10.htm" title="">Section 31.10.31, $r</A
>),
an <code class="literal">@</CODE
>, the sending host (<code class="literal">$&amp;s</CODE
>,
see <a class="xref" href="ch31_10.htm" title="">Section 31.10.33, $s</A
>), and the username in
angle brackets:</P
><p class="para"><blockquote class="screen"><pre class="screen">user    <i class="lineannotation"><img src="../chars/rarr.gif" alt="-&gt;"> becomes <img src="../chars/rarr.gif" alt="-&gt;"></I
>    smtp@hub&lt;user&gt;</PRE
></BLOCKQUOTE
></P
><p class="para">The second rule checks to make sure the message was received with
the SMTP protocol from the hub. If it was, then the <code class="literal">local</CODE
>
delivery agent is used to deliver the message on the local machine.
If it was received from any other host or by any other protocol,
the second rule fails and the third forwards the lone user address
to the hub.<a class="indexterm" name="AUTOID-33486"></A
><a class="indexterm" name="AUTOID-33487"></A
><a class="indexterm" name="AUTOID-33488"></A
>&#13;</P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch31_04.htm" title="31.4 Macro Names"><img src="../gifs/txtpreva.gif" alt="Previous: 31.4 Macro Names" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="sendmail"><img src="../gifs/txthome.gif" alt="sendmail" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch31_06.htm" title="31.6 Macro Conditionals: $?, $|, and $."><img src="../gifs/txtnexta.gif" alt="Next: 31.6 Macro Conditionals: $?, $|, and $." border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">31.4 Macro Names</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">31.6 Macro Conditionals: $?, $|, and $.</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.htm" title="The Networking CD Bookshelf">Library Home</A
> | <a href="../dnsbind/index.htm" title="DNS &amp; BIND">DNS &amp; BIND</A
> | <a href="../tcpip/index.htm" title="TCP/IP Network Administration">TCP/IP</A
> | <a href="index.htm" title="sendmail">sendmail</A
> | <a href="../smdref/index.htm" title="sendmail Desktop Reference">sendmail Reference</A
> | <a href="../firewall/index.htm" title="Building Internet Firewalls">Firewalls</A
> | <a href="../puis/index.htm" title="Practical UNIX &amp; Internet Security">Practical Security</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
