<html><head>
<title>[Chapter 17] The Hub's Complex Rules</TITLE>
<meta name="DC.title" content="sendmail"><meta name="DC.creator" content="Bryan Costales &amp; Eric Allman"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-01-06T18:39:51Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-222-0" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="part01.htm" title="I. A Tutorial"><link rel="prev" href="ch16_06.htm" title="16.6 Things to Try"><link rel="next" href="ch17_02.htm#SML2-CH-17-SECT-2-1" title="17.2 Rule Set 96"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="sendmail" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="sendmail"><area shape="RECT" coords="467,0,514,18" href="../search/ssrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch16_06.htm" title="16.6 Things to Try"><img src="../gifs/txtpreva.gif" alt="Previous: 16.6 Things to Try" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 17</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch17_02.htm#SML2-CH-17-SECT-2-1" title="17.2 Rule Set 96"><img src="../gifs/txtnexta.gif" alt="Next: 17.2 Rule Set 96" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="CHAPTER"><h1 class="chapter"><a class="title" name="SML2-CH-17">17. The Hub's Complex Rules</A
></H1
><div class="htmltoc"><p><b>Contents:</B
><br><a class="sect1" href="#SML2-CH-17-SECT-1" title="17.1 Rule Set 3">Rule Set 3</A
><br><a class="sect1" href="ch17_02.htm#SML2-CH-17-SECT-2-1" title="17.2 Rule Set 96">Rule Set 96</A
><br><a class="sect1" href="ch17_03.htm" title="17.3 Rule Set 0">Rule Set 0</A
><br><a class="sect1" href="ch17_04.htm" title="17.4 Rule Set 4">Rule Set 4</A
><br><a class="sect1" href="ch17_05.htm" title="17.5 Things to Try">Things to Try</A
></P
><p></P
></DIV
><p class="para"></P
><p class="para">In this chapter we look at some
of the rules that are needed to make a hub function.
Until now we have focused on the client form of the configuration
file. Since the role of the client is narrow (to forward all mail
to the hub), its configuration file is simple.
But a hub can be a very busy machine, receiving and sending
mail for many client machines, and because its role is broad,
its configuration file is complex.<a class="indexterm" name="SML2-CH-17-IX-RULES-MAIL-HUB"></A
><a class="indexterm" name="SML2-CH-17-IX-HUBS-RULES-FOR"></A
></P
><p class="para">Fundamentally, all configuration files, simple and complex, 
tend to look pretty much the same.
Both begin by selecting delivery agents using rule set 3 and 0.
Both then process recipient or sender addresses with rule sets 3, 1 or 2,
R= or S=, then 4, but the hub's rules are more complex:</P
><ul class="itemizedlist"><li class="listitem"><p class="para">The hub needs to recognize more than simple Internet-style 
addresses. It may need to handle UUCP-style addresses or
reverse-style addresses such as those used in parts of the United Kingdom.
It needs rules to convert all such addresses into a form that it
can understand.</P
></LI
><li class="listitem"><p class="para">The hub needs not only to forward mail (like the client), but also to deliver it to 
the mail spool directory, to pipe through programs, and to form mailing lists.</P
></LI
><li class="listitem"><p class="para">The hub needs to handle all error conditions gracefully and to emit
helpful and clear error messages.</P
></LI
><li class="listitem"><p class="para">The hub needs to know how to connect to many different kinds of
machines worldwide.</P
></LI
></UL
><p class="para">In this chapter we explore high points of the V8 configuration files. Along
the way, we also mix in rules contributed by others to help illustrate
difficult concepts.&#13;</P
><div class="sect1"><h2 class="sect1"><a class="title" name="SML2-CH-17-SECT-1">17.1 Rule Set 3</A
></H2
><p class="para"><a class="indexterm" name="SML2-CH-17-IX-RULE-SETS-RULE-SET-3"></A
><a class="indexterm" name="AUTOID-9027"></A
><a class="indexterm" name="AUTOID-9030"></A
>Recall that all addresses are first processed by rule set 3. Its job
is to find an address among other clutter and to normalize all
addresses into a form that other rules can recognize.&#13;</P
><div class="sect2"><h3 class="sect2"><a class="title" name="SML2-CH-17-SECT-1-1">17.1.1 Find the Address</A
></H3
><p class="para">Recall that addresses can legally assume two forms:</P
><p class="para"><blockquote class="screen"><pre class="screen"><em class="emphasis">address </EM
>(<em class="emphasis">comment</EM
>)
<em class="emphasis">comment </EM
>&lt;<em class="emphasis">address</EM
>&gt;</PRE
></BLOCKQUOTE
></P
><p class="para">In the first form, <em class="emphasis">sendmail</EM
> strips (and saves) the 
parenthesized comment, then gives the naked address to rule set 3.
In the second form, <em class="emphasis">sendmail</EM
> passes the entire address,
angle brackets and all, to rule set 3.</P
><p class="para">The rules to strip the angle brackets look like this:
[1]</P
><blockquote class="footnote"><p class="para">[1] These ingenious rules were designed by LeRoy Eide, with surrounding
commentary inspired by John Halleck.</P
></BLOCKQUOTE
><p class="para"><blockquote class="screen"><pre class="screen">S3
R$*         $: &lt;$1&gt;      Guarantee at least one &lt;&gt; pair
R$+ &lt;$*&gt;       &lt;$2&gt;      Remove everything before the last &lt;
R&lt;$*&gt; $+    $: &lt;$1&gt;      Remove everything after the first &gt;
R&lt;&gt;         $@ &lt;@&gt;       Null address to @
R&lt;$*&gt;       $:  $1       Strip remaining &lt;&gt;</PRE
></BLOCKQUOTE
></P
><p class="para">In the following,
we discuss each of these rules individually.&#13;</P
><div class="sect3"><h4 class="sect3"><a class="title" name="SML2-CH-17-SECT-1-1-1">17.1.1.1 At least one &lt;&gt; pair</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-9054"></A
><a class="indexterm" name="AUTOID-9056"></A
>To find the address in addresses of the form</P
><p class="para"><blockquote class="screen"><pre class="screen"><em class="emphasis">comment </EM
>&lt;<em class="emphasis">address</EM
>&gt;</PRE
></BLOCKQUOTE
></P
><p class="para">we must use rules to search for the <code class="literal">&lt;</CODE
> and <code class="literal">&gt;</CODE
>
characters. Designing rules that do this is easier if we can
be sure that every address has at least one surrounding
angle bracket pair:</P
><p class="para"><blockquote class="screen"><pre class="screen">R$*        $: &lt;$1&gt;      Guarantee at least one &lt;&gt; pair</PRE
></BLOCKQUOTE
></P
><p class="para">This rule places angle brackets around all addresses, even those
that already have them. Note that the <code class="literal">$:</CODE
> that prefixes the
RHS causes it to be executed only once.</P
><p class="para">A side benefit of this rule is that it also surrounds an empty (null) address
with angle brackets. This allows old versions of <em class="emphasis">sendmail</EM
> to
detect null addresses without needing to use the new (beginning with V8.7
<em class="emphasis">sendmail</EM
>) <code class="literal">$@</CODE
> LHS operator. We'll cover this in more detail soon.&#13;</P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="SML2-CH-17-SECT-1-1-2">17.1.1.2 Strip to left of &lt;</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-9076"></A
><a class="indexterm" name="AUTOID-9079"></A
><a class="indexterm" name="AUTOID-9082"></A
>A common problem is that of finding the address when it is deeply
nested in many pairs of angle brackets. Consider an address like
this:</P
><p class="para"><blockquote class="screen"><pre class="screen">&lt;&lt;&lt;&lt;address&gt;&gt;&gt;&gt;</PRE
></BLOCKQUOTE
></P
><p class="para">Such addresses are not common but do appear every now and then
as a result of overzealous users or MUAs. Another problem
address looks like this:</P
><p class="para"><blockquote class="screen"><pre class="screen">comment &lt;phone&gt; &lt;address&gt;</PRE
></BLOCKQUOTE
></P
><p class="para">Here, just noting the outermost pair of angle brackets is not sufficient
because the rightmost pair contains the address.</P
><p class="para">The process of finding the rightmost innermost pair of angle brackets
requires two rules:</P
><p class="para"><blockquote class="screen"><pre class="screen">R$+ &lt;$*&gt;       &lt;$2&gt;      Remove everything before the last &lt;
R&lt;$*&gt; $+    $: &lt;$1&gt;      Remove everything after the first &gt;</PRE
></BLOCKQUOTE
></P
><p class="para">The first recursively discards everything (including angle brackets)
to the left of the rightmost balanced <code class="literal">&lt;</CODE
> character.
The second truncates to the correct address by discarding
everything following the innermost remaining angle bracket pair.</P
><p class="para">The behavior of these two rules may not be obvious. To better understand
them, first create a small configuration file (called <em class="emphasis">x.cf</EM
>)
that includes the following two lines:
[2]</P
><blockquote class="footnote"><p class="para">[2] Note that when a configuration file lacks an <code class="literal">S</CODE
> command (to
declare a rule set), all rules become part of rule set 0.</P
></BLOCKQUOTE
><p class="para"><blockquote class="screen"><pre class="screen">R$+ &lt;$*&gt;       &lt;$2&gt;
R&lt;$*&gt; $+    $: &lt;$1&gt;</PRE
></BLOCKQUOTE
></P
><p class="para">Then run <em class="emphasis">sendmail</EM
> in rule-testing mode with a command
like this:</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>/usr/lib/sendmail -Cx.cf -bt</B
></CODE
>
ADDRESS TEST MODE (ruleset 3 NOT automatically invoked)
Enter &lt;ruleset&gt; &lt;address&gt;</PRE
></BLOCKQUOTE
></P
><p class="para">Enter a series of addresses, one at a time, to see how
each is handled. Be as extreme as you want when nesting angle
brackets:</P
><p class="para"><blockquote class="screen"><pre class="screen">&gt; <code class="userinput"><b>0 &lt;&lt;&lt;&lt;&lt;a&gt;&gt;&gt;&gt;&gt;</B
></CODE
>
rewrite: ruleset  0   input: &lt; &lt; &lt; &lt; &lt; a &gt; &gt; &gt; &gt; &gt;
rewrite: ruleset  0 returns: &lt; a &gt;
&gt; <code class="userinput"><b>0 &lt;a&gt; &lt;b&gt;</B
></CODE
>
rewrite: ruleset  0   input: &lt; a &gt; &lt; b &gt;
rewrite: ruleset  0 returns: &lt; b &gt;
&gt; <code class="userinput"><b>0 &lt;&lt;a&gt; &lt;b&gt;&gt;</B
></CODE
>

rewrite: ruleset  0   input: &lt; &lt; a &gt; &lt; b &gt; &gt;
rewrite: ruleset  0 returns: &lt; b &gt;
&gt;</PRE
></BLOCKQUOTE
></P
><p class="para">If you want to see, step by step, how each rule works,
run <em class="emphasis">sendmail</EM
> again, this time
with the <code class="literal">-d21.12</CODE
> debugging switch (see <a class="xref" href="ch37_05.htm" title="">Section 37.5.72, -d21.12</A
>).
With that switch, the first example above will print like this:</P
><p class="para"><blockquote class="screen"><pre class="screen">&gt; <code class="userinput"><b>0 &lt;&lt;&lt;&lt;&lt;a&gt;&gt;&gt;&gt;&gt;</B
></CODE
>
rewrite: ruleset  0   input: &lt; &lt; &lt; &lt; &lt; a &gt; &gt; &gt; &gt; &gt;
---trying rule: $+ &lt; $* &gt;
---rule matches: &lt; $2 &gt;
rewritten as: &lt; &lt; &lt; &lt; a &gt; &gt; &gt; &gt; &gt;
---trying rule: $+ &lt; $* &gt;
---rule matches: &lt; $2 &gt;
rewritten as: &lt; &lt; &lt; a &gt; &gt; &gt; &gt; &gt;
---trying rule: $+ &lt; $* &gt;
---rule matches: &lt; $2 &gt;
rewritten as: &lt; &lt; a &gt; &gt; &gt; &gt; &gt;
---trying rule: $+ &lt; $* &gt;
---rule matches: &lt; $2 &gt;
rewritten as: &lt; a &gt; &gt; &gt; &gt; &gt;
---trying rule: $+ &lt; $* &gt;
--- rule fails
---trying rule: &lt; $* &gt; $+
---rule matches: $: &lt; $1 &gt;
rewritten as: &lt; a &gt;
rewrite: ruleset  0 returns: &lt; a &gt;</PRE
></BLOCKQUOTE
></P
><p class="para"></P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="SML2-CH-17-SECT-1-1-3">17.1.1.3 Handle null address</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-9125"></A
><a class="indexterm" name="AUTOID-9128"></A
><a class="indexterm" name="AUTOID-9131"></A
><a class="indexterm" name="AUTOID-9134"></A
>The fourth rule in rule set 3 is designed to convert a null &nbsp;- pty)
address into the magic symbol <code class="literal">@</CODE
>:</P
><p class="para"><blockquote class="screen"><pre class="screen">R&lt;&gt;        $@ &lt;@&gt;       Null address to @</PRE
></BLOCKQUOTE
></P
><p class="para"><a class="indexterm" name="AUTOID-9140"></A
>The <code class="literal">@</CODE
> symbol is surrounded by angle brackets (&quot;focused&quot;).
It needs to be focused because later rules expect all addresses
to have the host part in this form. Still later, the angle brackets will be removed,
and the <code class="literal">@</CODE
> will be discarded by rule set 4.</P
><p class="para"><a class="indexterm" name="AUTOID-9145"></A
><a class="indexterm" name="AUTOID-9148"></A
>The <code class="literal">$@</CODE
> prefix to the RHS causes all further rules in rule
set 3 to be skipped. The focused address <code class="literal">&lt;@&gt;</CODE
> is returned.
If <code class="literal">&lt;@&gt;</CODE
> were to be handled by the next rule, its angle
brackets would be stripped, and this is not what we desire.&#13;</P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="SML2-CH-17-SECT-1-1-4">17.1.1.4 Remove remaining angle brackets</A
></H4
><p class="para">The last of our five preliminary rules simply removes the angle
brackets from whatever remains:</P
><p class="para"><blockquote class="screen"><pre class="screen">R&lt;$*&gt;      $:  $1       Strip remaining &lt;&gt;</PRE
></BLOCKQUOTE
></P
><p class="para"></P
></DIV
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="SML2-CH-17-SECT-1-2">17.1.2 Normalize the Address</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-9163"></A
>The rules that we have just looked at isolate
the address from other possible information and
leave it in its initial form, not surrounded by angle brackets.
The rest of the rules in rule set 3 are designed to highlight the
host part of any address. They assume that all addresses
are composed of a user and a host part.&#13;</P
><div class="sect3"><h4 class="sect3"><a class="title" name="SML2-CH-17-SECT-1-2-1">17.1.2.1 A rule to handle List:;</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-9168"></A
><a class="indexterm" name="AUTOID-9171"></A
><a class="indexterm" name="AUTOID-9173"></A
>RFC822 allows addresses of the form </P
><p class="para"><blockquote class="screen"><pre class="screen"><code class="replaceable"><i>name : address(s)</I
></CODE
> ;</PRE
></BLOCKQUOTE
></P
><p class="para">Here, <code class="replaceable"><i>name</I
></CODE
> is the name of a mailing list that
can contain multiple words and spaces, for example,</P
><p class="para"><blockquote class="screen"><pre class="screen">Undisclosed Recipients :;</PRE
></BLOCKQUOTE
></P
><p class="para"><a class="indexterm" name="AUTOID-9183"></A
>The colon and semicolon are mandatory and may contain 
one or more addresses between them, which may themselves be lists.
[3]
Rule set 3 needs to check for the presence of an empty list (one with
no addresses between the colon and semicolon). The following rule does just that and
turns the empty list into the magic token <code class="literal">&lt;@&gt;</CODE
>:</P
><blockquote class="footnote"><p class="para">[3] Which tends to complicate the algorithm.</P
></BLOCKQUOTE
><p class="para"><blockquote class="screen"><pre class="screen">R$* :;      $@ $1 :; &lt;@&gt;       Handle empty List:;</PRE
></BLOCKQUOTE
></P
><p class="para"></P
></DIV
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="SML2-CH-17-SECT-1-3">17.1.3 Internet Addresses</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-9194"></A
><a class="indexterm" name="AUTOID-9196"></A
>After lists have been disposed of, domain-type
addresses need to be handled. Domain type addresses are of
the form <em class="emphasis">user@host</EM
>:</P
><p class="para"><blockquote class="screen"><pre class="screen">R$+ @ $+                $: $1 &lt;@$2&gt;                 Focus on host
R$+ &lt; $+ @ $+ &gt;            $1 $2 &lt;@$3&gt;              move gaze right
R$* &lt; @ $* : $* &gt; $*       $1 &lt;@ $2$3&gt; $4           strip colons
R$+ &lt; @ $+ &gt;            $@ $&gt;96 $1&lt;@$2&gt;             localize and canonicalize</PRE
></BLOCKQUOTE
></P
><p class="para">The first rule detects addresses of the form <em class="emphasis">something</EM
>@<em class="emphasis">something</EM
>
and rewrites them in such a way that the second <em class="emphasis">something</EM
> becomes
the focused host part. </P
><p class="para">The second rule handles addresses with
multiple <code class="literal">@</CODE
> symbols (such as <em class="emphasis">a@b@c</EM
>). It recursively
moves the focus to the rightmost host.</P
><p class="para">The third rule recursively removes any
colons from the resulting host part as a &quot;sanity check.&quot;
This is necessary because
strange forms of route addresses may have bypassed earlier rules
(see the <code class="literal">DontPruneRoutes</CODE
> option in <a class="xref" href="ch34_08.htm" title="">Section 34.8.20, DontPruneRoutes (R)</A
>,
how route addresses are handled in rules in 
<a class="xref" href="ch29_04.htm#SML2-CH-29-SECT-4-5" title="Handling Routing Addresses">Section 29.4.3, "Handling Routing Addresses"</A
>,
and the <code class="literal">F=d</CODE
> delivery agent flag in <a class="xref" href="ch30_08.htm" title="">Section 30.8.16, F=d</A
>), or
a colon may be left over from the <code class="literal">mailertable</CODE
> feature
(see <a class="xref" href="ch19_06.htm" title="">Section 19.6.14, FEATURE(mailertable)</A
>).</P
><p class="para">The fourth rule passes any addresses that have been successfully focused
to rule set 96 (which will be discussed in <a class="xref" href="ch17_02.htm#SML2-CH-17-SECT-2-1" title="Rule Set 96">Section 17.2, "Rule Set 96"</A
>)
so that the local host can be detected and
the host part canonicalized. The result from rule set 96
is returned.&#13;</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="SML2-CH-17-SECT-1-4">17.1.4 UUCP Addresses</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-9221"></A
><a class="indexterm" name="AUTOID-9224"></A
><a class="indexterm" name="AUTOID-9226"></A
>UUCP addresses contain one or more exclamation points (such as <em class="emphasis">lady!sonya!george</EM
>).
They fall into
two categories: those that are delivered locally by <em class="emphasis">uux</EM
>(8) and
those that are forwarded to another host.
The rules to handle them look like this:</P
><p class="para"><blockquote class="screen"><pre class="screen">R$- ! $+          $@ $&gt;96 $2 &lt;@ $1.UUCP&gt;      host!user uucp
R$+ . $- ! $+     $@ $&gt;96 $3 &lt;@ $1.$2&gt;        Domain style uucp
R$+ ! $+          $@ $&gt;96 $2 &lt;@ $1.UUCP&gt;      Bang path uucp</PRE
></BLOCKQUOTE
></P
><p class="para">The first rule looks for a single token hostname followed by
an exclamation point. A single token host always becomes the next
host in line for delivery. The .UUCP suffix added in the RHS allows
rule set 0 to recognize this address as one requiring <em class="emphasis">uux</EM
>(8) delivery.</P
><p class="para">The second rule looks for a dot in the hostname part of the address.
A dot indicates the new-style, domain-based hostname, such as
<em class="emphasis">host.domain!user</EM
>.
Such names are assumed to have MX records pointing to service providers and are rewritten into the normal <em class="emphasis">user@host.domain</EM
> form.</P
><p class="para">The third rule catches any remaining addresses with exclamation
points in them. The host to the left of the leftmost 
exclamation point is taken
as the next hop in the UUCP path for delivery. A .UUCP suffix is added to that host, just
as in the first rule.</P
><p class="para">All three rules exit (the leading <code class="literal">$@</CODE
> in the RHS) after 
the address is normalized by rule set 96 (which leaves .UUCP
suffixed addresses unchanged). They are then handed as is to rule
set 0, which selects a delivery agent (usually <em class="emphasis">uux</EM
>(8)).&#13;</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="SML2-CH-17-SECT-1-5">17.1.5 The % Hack</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-9245"></A
><a class="indexterm" name="AUTOID-9247"></A
><a class="indexterm" name="AUTOID-9250"></A
><a class="indexterm" name="AUTOID-9253"></A
>A common technique in mail debugging is to send mail to one host
and have that host deliver it to another. Often, this is done by sending the
mail something like:</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>mail </B
></CODE
><em class="emphasis">user%second@first</EM
></PRE
></BLOCKQUOTE
></P
><p class="para">Here, the intention is send mail to <em class="emphasis">first</EM
>
and from there to <em class="emphasis">usr@second</EM
>. This type of addressing is nonstandard.
Essentially, it is route addressing with <code class="literal">%</CODE
> characters
substituted for <code class="literal">@</CODE
> characters. Enabling this behavior requires
three rules:</P
><p class="para"><blockquote class="screen"><pre class="screen">R$*%$*             $1 @ $2                  Convert all % to @
R$*@$*@$*          $1 % $2 @ $3             Undo all but last @
R$*@$*          $@ $&gt;96 $1 &lt;@$2&gt;            Focus on rightmost</PRE
></BLOCKQUOTE
></P
><p class="para">Here, the first rule changes all the percent characters into
<code class="literal">@</CODE
> characters. The intention is to focus on the rightmost
host, whether it is prefixed with an <code class="literal">%</CODE
> or an <code class="literal">@</CODE
>.
The second rule changes all but the rightmost <code class="literal">@</CODE
> back into
percent characters even if they were originally <code class="literal">@</CODE
> characters.
The last rule takes the result and focuses on the rightmost
host, just as was done in the domain form of addressing above.<a class="indexterm" name="AUTOID-9272"></A
>&#13;</P
></DIV
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch16_06.htm" title="16.6 Things to Try"><img src="../gifs/txtpreva.gif" alt="Previous: 16.6 Things to Try" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="sendmail"><img src="../gifs/txthome.gif" alt="sendmail" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch17_02.htm#SML2-CH-17-SECT-2-1" title="17.2 Rule Set 96"><img src="../gifs/txtnexta.gif" alt="Next: 17.2 Rule Set 96" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">16.6 Things to Try</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">17.2 Rule Set 96</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.htm" title="The Networking CD Bookshelf">Library Home</A
> | <a href="../dnsbind/index.htm" title="DNS &amp; BIND">DNS &amp; BIND</A
> | <a href="../tcpip/index.htm" title="TCP/IP Network Administration">TCP/IP</A
> | <a href="index.htm" title="sendmail">sendmail</A
> | <a href="../smdref/index.htm" title="sendmail Desktop Reference">sendmail Reference</A
> | <a href="../firewall/index.htm" title="Building Internet Firewalls">Firewalls</A
> | <a href="../puis/index.htm" title="Practical UNIX &amp; Internet Security">Practical Security</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
