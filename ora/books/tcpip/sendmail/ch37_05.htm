<html><head>
<title>[Chapter 37] 37.5 Reference in Numerical Order</TITLE>
<meta name="DC.title" content="sendmail"><meta name="DC.creator" content="Bryan Costales &amp; Eric Allman"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-01-06T22:03:13Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-222-0" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch37_01.htm" title="37. Debugging with -d"><link rel="prev" href="ch37_04.htm" title="37.4 Pitfalls"><link rel="next" href="ch38_01.htm" title="38. Rule-Set Testing with -bt"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="sendmail" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="sendmail"><area shape="RECT" coords="467,0,514,18" href="../search/ssrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch37_04.htm" title="37.4 Pitfalls"><img src="../gifs/txtpreva.gif" alt="Previous: 37.4 Pitfalls" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 37<br>Debugging with -d</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="CHAPTER" href="ch38_01.htm" title="38. Rule-Set Testing with -bt"><img src="../gifs/txtnexta.gif" alt="Next: 38. Rule-Set Testing with -bt" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="SML2-CH-37-SECT-5">37.5 Reference in Numerical Order</A
></H2
><p class="para"><a class="indexterm" name="SML2-CH-37-IX-D-SWITCH-COMPLETE-LIST-OF-SWITCHES"></A
>The <em class="emphasis">sendmail</EM
> debugging switches vary from
vendor to vendor and from version to version. This section is
specific to V8.8.0 <em class="emphasis">sendmail</EM
>.
These switches
are perhaps best used with a copy of the <em class="emphasis">sendmail</EM
> source by
your side. Be further advised that many of the internal details
shown here will change as <em class="emphasis">sendmail</EM
> continues to evolve and
improve.</P
><p class="para">In this section we provide a detailed description of each combination
of debugging category and level. In
<a class="xref" href="#SML2-CH-37-TAB-1" title="Debugging Switches by Category">Table 37.2</A
>
each debugging category and level that we consider useful for
the system administrator who is trying to solve a mail problem
is marked with &quot;useful.&quot;
The others provide such complex and sophisticated output that
they may be of use only to those with access to the source.
Those marked in the section column with a &quot;n/a&quot; are debugging
switches that were introduced in the <em class="emphasis">sendmail</EM
> source too late
for documentation in this edition. All are presented in ascending
numerical order, first by category, then by level within each category. </P
><p class="para">Note that for all categories a <code class="literal">-d</CODE
><em class="emphasis">category</EM
> and a
<code class="literal">-d</CODE
><em class="emphasis">category</EM
><code class="literal">.1</CODE
> are always equivalent.</P
><table class="table"><caption class="table"><a class="title" name="SML2-CH-37-TAB-1">Table 37.2: Debugging Switches by Category</A
></CAPTION
><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1">Category</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1"></TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">It is</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Description</TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d0.1</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-1" title="">Section 37.5.1, -d0.1</A
></TD
><td class="entry" rowspan="1" colspan="1">useful</TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Print version information</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d0.4</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-2" title="">Section 37.5.2, -d0.4</A
></TD
><td class="entry" rowspan="1" colspan="1">useful</TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Our name and aliases</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d0.10</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-3" title="">Section 37.5.3, -d0.10</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Operating System defines</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d0.15</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-4" title="">Section 37.5.4, -d0.15</A
></TD
><td class="entry" rowspan="1" colspan="1">useful</TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Dump delivery agents</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d0.20</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-5" title="">Section 37.5.5, -d0.20</A
></TD
><td class="entry" rowspan="1" colspan="1">useful</TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Print network address of each interface</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d0.22</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-6" title="">Section 37.5.6, -d0.22</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Show uname() failure</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d0.40</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-7" title="">Section 37.5.7, -d0.40</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Show scanning of interfaces</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d0.44</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-8" title="">Section 37.5.8, -d0.44</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Print addresses of strings</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d0.90</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-9" title="">Section 37.5.9, -d0.90</A
></TD
><td class="entry" rowspan="1" colspan="1">obsolete</TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Print first 10 rule sets</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d1.1</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-10" title="">Section 37.5.10, -d1.1</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Show sender information</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d1.5</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-11" title="">Section 37.5.11, -d1.5</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Dump the sender address</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d2.1</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-12" title="">Section 37.5.12, -d2.1</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">End with finis()</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d2.9</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-13" title="">Section 37.5.13, -d2.9</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Show file descriptors with <em class="emphasis">dumpfd</EM
>()</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d3.1</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-14" title="">Section 37.5.14, -d3.1</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Print the load average</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d3.5</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-15" title="">Section 37.5.15, -d3.5</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Print load average</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d3.15</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-16" title="">Section 37.5.16, -d3.15</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Print three load averages</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d3.20</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-17" title="">Section 37.5.17, -d3.20</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Show offset for load average</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d3.30</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-18" title="">Section 37.5.18, -d3.30</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Show result of decision to queue</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d4.80</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-19" title="">Section 37.5.19, -d4.80</A
></TD
><td class="entry" rowspan="1" colspan="1">useful</TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Trace enoughspace()</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d5.4</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-20" title="">Section 37.5.20, -d5.4</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Tick for queued events</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d5.5</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-21" title="">Section 37.5.21, -d5.5</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Events set and cleared</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d5.6</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-22" title="">Section 37.5.22, -d5.6</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Show events triggered</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d6.1</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-23" title="">Section 37.5.23, -d6.1</A
></TD
><td class="entry" rowspan="1" colspan="1">useful</TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Show failed mail</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d6.5</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-24" title="">Section 37.5.24, -d6.5</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">The current error state</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d6.20</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-25" title="">Section 37.5.25, -d6.20</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Show sender of return to sender</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d7.1</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-26" title="">Section 37.5.26, -d7.1</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">The Queue filename</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d7.2</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-27" title="">Section 37.5.27, -d7.2</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Show assigned queue filename</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d7.9</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-28" title="">Section 37.5.28, -d7.9</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Dump file descriptor for the qf file</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d7.20</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-29" title="">Section 37.5.29, -d7.20</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Show queue names being tried</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d8.1</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-30" title="">Section 37.5.30, -d8.1</A
></TD
><td class="entry" rowspan="1" colspan="1">useful</TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Failure of MX search (low level)</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d8.2</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-31" title="">Section 37.5.31, -d8.2</A
></TD
><td class="entry" rowspan="1" colspan="1">useful</TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Call to getcanonname(3)</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d8.3</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-32" title="">Section 37.5.32, -d8.3</A
></TD
><td class="entry" rowspan="1" colspan="1">useful</TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Trace dropped local hostnames</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d8.5</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-33" title="">Section 37.5.33, -d8.5</A
></TD
><td class="entry" rowspan="1" colspan="1">useful</TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Hostname being tried in getcanonname(3)</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d8.7</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-34" title="">Section 37.5.34, -d8.7 </A
></TD
><td class="entry" rowspan="1" colspan="1">useful</TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Yes/no response to -d8.5</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d8.8</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-35" title="">Section 37.5.35, -d8.8</A
></TD
><td class="entry" rowspan="1" colspan="1">useful</TD
><td class="entry" rowspan="1" colspan="1"><p class="para">MX lookup gets wrong type</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d8.20</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-36" title="">Section 37.5.36, -d8.20</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Inconsistency in returned information</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d9.1</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-37" title="">Section 37.5.37, -d9.1</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Canonify hostname and RFC1413 queries</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d9.3</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-38" title="">Section 37.5.38, -d9.3</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Show raw RFC1413 reply</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d9.10</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-39" title="">Section 37.5.39, -d9.10</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Show RFC1413 query being sent</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d10.1</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-40" title="">Section 37.5.40, -d10.1</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Show recipient delivery</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d10.2</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-41" title="">Section 37.5.41, -d10.2</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Dump controlling user's address</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d10.5</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-42" title="">Section 37.5.42, -d10.5</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Show don't send to MeToo address</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d10.100</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-43" title="">Section 37.5.43, -d10.100</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Predelivery file descriptor dump</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d11.1</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-44" title="">Section 37.5.44, -d11.1</A
></TD
><td class="entry" rowspan="1" colspan="1">useful</TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Trace delivery</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d11.2</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-45" title="">Section 37.5.45, -d11.2</A
></TD
><td class="entry" rowspan="1" colspan="1">useful</TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Show the uid/gid running as during delivery</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d11.20</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-46" title="">Section 37.5.46, -d11.20</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Show tried D=  directories</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d12.1</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-47" title="">Section 37.5.47, -d12.1</A
></TD
><td class="entry" rowspan="1" colspan="1">useful</TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Show mapping of relative host</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d13.1</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-48" title="">Section 37.5.48, -d13.1</A
></TD
><td class="entry" rowspan="1" colspan="1">useful</TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Show delivery</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d13.5</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-49" title="">Section 37.5.49, -d13.5</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Show addresses that we should not send to</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d13.6</TD
><td class="entry" rowspan="1" colspan="1">n/a</TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Trace envelope stripping, dropping, and moving</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d13.10</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-50" title="">Section 37.5.50, -d13.10</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Trace sendenvelope()</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d13.20</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-51" title="">Section 37.5.51, -d13.20</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Show final mode</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d13.21</TD
><td class="entry" rowspan="1" colspan="1">n/a</TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Show final send queue</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d13.25</TD
><td class="entry" rowspan="1" colspan="1">n/a</TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Watch owner deliveries</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d13.29</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-52" title="">Section 37.5.52, -d13.29</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Show autoqueueing</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d13.30</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-53" title="">Section 37.5.53, -d13.30</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Show envelopes being split</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d14.2</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-54" title="">Section 37.5.54, -d14.2</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Show header field commas</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d15.1</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-55" title="">Section 37.5.55, -d15.1</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Show network get request activity</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d15.2</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-55" title="">Section 37.5.55</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Incoming connections</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d15.101</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-57" title="">Section 37.5.57, -d15.101</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Kernel TCP debugging</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d16.1</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-58" title="">Section 37.5.58, -d16.1</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Outgoing Connections</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d16.101</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-59" title="">Section 37.5.59, -d16.101</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Kernel TCP debugging</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d17.1</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-60" title="">Section 37.5.60, -d17.1</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">List MX hosts</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d17.9</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-61" title="">Section 37.5.61, -d17.9</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Show randomizing MX records</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d18.1</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-62" title="">Section 37.5.62, -d18.1</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Show SMTP replies</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d18.2</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-63" title="">Section 37.5.63, -d18.2</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Show entry to MAIL From:</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d18.100</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-64" title="">Section 37.5.64, -d18.100</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Pause on SMTP read error</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d19.1</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-65" title="">Section 37.5.65, -d19.1</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Show ESMTP MAIL and RCPT parameters</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d20.1</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-66" title="">Section 37.5.66, -d20.1</A
></TD
><td class="entry" rowspan="1" colspan="1">useful</TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Show resolving delivery agent: parseaddr()</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d21.1</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-67" title="">Section 37.5.67, -d21.1</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Trace rewriting rules</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d21.2</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-68" title="">Section 37.5.68, -d21.2</A
></TD
><td class="entry" rowspan="1" colspan="1">useful</TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Trace $&amp; macros</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d21.3</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-69" title="">Section 37.5.69, -d21.3</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Show subroutine calls</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d21.4</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-70" title="">Section 37.5.70, -d21.4</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Result after rewriting by a rule</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d21.10</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-71" title="">Section 37.5.71, -d21.10</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Announce failure</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d21.12</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-72" title="">Section 37.5.72, -d21.12</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Announce success and show LHS</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d21.15</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-73" title="">Section 37.5.73, -d21.15</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Show $digit replacement</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d21.35</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-74" title="">Section 37.5.74, -d21.35</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Show token by token LHS matching</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d21.36</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-75" title="">Section 37.5.75, -d21.36</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Trace class matching in the LHS</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d22.1</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-76" title="">Section 37.5.76, -d22.1</A
></TD
><td class="entry" rowspan="1" colspan="1">useful</TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Trace tokenizing an address: prescan()</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d22.11</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-77" title="">Section 37.5.77, -d22.11</A
></TD
><td class="entry" rowspan="1" colspan="1">useful</TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Show address before prescan</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d22.12</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-78" title="">Section 37.5.78, -d22.12</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Show address after prescan</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d22.36</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-79" title="">Section 37.5.79, -d22.36</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Show each token</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d22.101</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-80" title="">Section 37.5.80, -d22.101</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Trace low-level state machine</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d24.4</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-81" title="">Section 37.5.81, -d24.4</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Trace address allocation</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d24.5</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-82" title="">Section 37.5.82, -d24.5</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Trace assembly of tokens</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d24.6</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-83" title="">Section 37.5.83, -d24.6</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Show result of buildaddr()</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d25.1</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-84" title="">Section 37.5.84, -d25.1</A
></TD
><td class="entry" rowspan="1" colspan="1">useful</TD
><td class="entry" rowspan="1" colspan="1">Trace &quot;sendtolist&quot;</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d26.1</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-85" title="">Section 37.5.85, -d26.1</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">Trace recipient queueing</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d26.8</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-86" title="">Section 37.5.86, -d26.8</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">Trace self-destructing addresses</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d26.10</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-87" title="">Section 37.5.87, -d26.10</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">Show full send queue in testselfdestruct</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d27.1</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-88" title="">Section 37.5.88, -d27.1</A
></TD
><td class="entry" rowspan="1" colspan="1">useful</TD
><td class="entry" rowspan="1" colspan="1">Trace aliasing</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d27.2</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-89" title="">Section 37.5.89, -d27.2</A
></TD
><td class="entry" rowspan="1" colspan="1">useful</TD
><td class="entry" rowspan="1" colspan="1">Include file, self-reference, error on home</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d27.3</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-90" title="">Section 37.5.90, -d27.3</A
></TD
><td class="entry" rowspan="1" colspan="1">useful</TD
><td class="entry" rowspan="1" colspan="1">Forwarding path and alias wait</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d27.4</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-91" title="">Section 37.5.91, -d27.4</A
></TD
><td class="entry" rowspan="1" colspan="1">useful</TD
><td class="entry" rowspan="1" colspan="1">Print not safe</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d27.5</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-92" title="">Section 37.5.92, -d27.5</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">Trace aliasing with printaddr()</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d27.8</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-93" title="">Section 37.5.93, -d27.8</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">Show setting up an alias map</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d27.9</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-94" title="">Section 37.5.94, -d27.9</A
></TD
><td class="entry" rowspan="1" colspan="1">useful</TD
><td class="entry" rowspan="1" colspan="1">Show uid/gid changes with :include: reads</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d27.14</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-95" title="">Section 37.5.95, -d27.14</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">Show controlling user that caused change in identity</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d27.20</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-96" title="">Section 37.5.96, -d27.20</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">Show how alias will be looked up in a map</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d28.1</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-97" title="">Section 37.5.97, -d28.1</A
></TD
><td class="entry" rowspan="1" colspan="1">useful</TD
><td class="entry" rowspan="1" colspan="1">Trace user database transactions</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d28.2</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-98" title="">Section 37.5.98, -d28.2</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">Show no match</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d28.4</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-99" title="">Section 37.5.99, -d28.4</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">Show result of lookup</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d28.8</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-100" title="">Section 37.5.100, -d28.8</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">Try hes_getmailhost()</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d28.16</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-101" title="">Section 37.5.101, -d28.16</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">MX records for forward host</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d28.20</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-102" title="">Section 37.5.102, -d28.20</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">Show udb lookup</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d28.80</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-103" title="">Section 37.5.103, -d28.80</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">Preview lookups</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d29.1</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-104" title="">Section 37.5.104, -d29.1</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">Special rewrite of local recipient</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d29.4</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-105" title="">Section 37.5.105, -d29.4</A
></TD
><td class="entry" rowspan="1" colspan="1">useful</TD
><td class="entry" rowspan="1" colspan="1">Trace fuzzy matching</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d29.5</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-106" title="">Section 37.5.106, -d29.5</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">Preview rule set 5</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d29.7</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-107" title="">Section 37.5.107, -d29.7</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">Show overaliasing fuzzy fallback</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d30.1</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-108" title="">Section 37.5.108, -d30</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">Trace processing of header</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d30.2</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-109" title="">Section 37.5.109, -d30.2</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">Eat from</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d30.3</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-110" title="">Section 37.5.110, -d30.3</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">Show a to-less header being added</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d30.35</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-111" title="">Section 37.5.111, -d30.35</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">Trace collect states</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d30.94</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-112" title="">Section 37.5.112, -d30.94</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">Trace collect states</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d31.2</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-113" title="">Section 37.5.113, -d31.2</A
></TD
><td class="entry" rowspan="1" colspan="1">useful</TD
><td class="entry" rowspan="1" colspan="1">Trace processing of headers</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d31.6</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-14" title="">Section 37.5.14</A
>1_6</TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">Is header known?</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d32.1</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-115" title="">Section 37.5.115, -d32.1</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">Show collected headers</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d32.2</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-116" title="">Section 37.5.116, -d32.2</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">Show ARPA mode with setsender</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d33.1</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-117" title="">Section 37.5.117, -d33.1</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">Watch crackaddr()</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d34.1</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-118" title="">Section 37.5.118, -d34.1</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">Watch header assembly for output</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d34.11</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-119" title="">Section 37.5.119, -d34.11</A
></TD
><td class="entry" rowspan="1" colspan="1">useful</TD
><td class="entry" rowspan="1" colspan="1">Trace header generation and skipping</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d35.9</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-120" title="">Section 37.5.120, -d35.9</A
></TD
><td class="entry" rowspan="1" colspan="1">useful</TD
><td class="entry" rowspan="1" colspan="1">Macro values defined</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d35.14</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-121" title="">Section 37.5.121, -d35.14</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">Macro identification</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d35.24</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-122" title="">Section 37.5.122, -d35.24</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">Macro expansion</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d36.5</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-123" title="">Section 37.5.123, -d36.5</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">Trace processing by stab()</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d36.9</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-124" title="">Section 37.5.124, -d36.9</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">Show hash bucket</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d36.90</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-125" title="">Section 37.5.125, -d36.90</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">Trace function applied to all symbols</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d37.1</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-126" title="">Section 37.5.126, -d37.1</A
></TD
><td class="entry" rowspan="1" colspan="1">useful</TD
><td class="entry" rowspan="1" colspan="1">Trace setting of options</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d37.8</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-127" title="">Section 37.5.127, -d37.8</A
></TD
><td class="entry" rowspan="1" colspan="1">useful</TD
><td class="entry" rowspan="1" colspan="1">Trace adding of words to a class</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d38.2</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-128" title="">Section 37.5.128, -d38.2</A
></TD
><td class="entry" rowspan="1" colspan="1">useful</TD
><td class="entry" rowspan="1" colspan="1">Show map opens and failures</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d38.3</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-129" title="">Section 37.5.129, -d38.3</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">Show passes</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d38.4</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-130" title="">Section 37.5.130, -d38.4</A
></TD
><td class="entry" rowspan="1" colspan="1">useful</TD
><td class="entry" rowspan="1" colspan="1">Show result of map open</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d38.9</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-131" title="">Section 37.5.131, -d38.9</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">Trace map closings and appends</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d38.10</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-132" title="">Section 37.5.132, -d38.10</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">Trace NIS search for end of aliases</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d38.12</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-133" title="">Section 37.5.133, -d38.12</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">Trace map stores</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d38.19</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-134" title="">Section 37.5.134, -d38.19</A
></TD
><td class="entry" rowspan="1" colspan="1">useful</TD
><td class="entry" rowspan="1" colspan="1">Trace switch map finds</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d38.20</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-135" title="">Section 37.5.135, -d38.20</A
></TD
><td class="entry" rowspan="1" colspan="1">useful</TD
><td class="entry" rowspan="1" colspan="1">Trace map lookups</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d38.44</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-136" title="">Section 37.5.136, -d38.44</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">Show nis_getcanonname() record</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d39.1</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-137" title="">Section 37.5.137, -d39.1</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">Display %digit database mapping</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d40.1</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-138" title="">Section 37.5.138, -d40.1</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">Trace processing of the queue</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d40.3</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-139" title="">Section 37.5.139, -d40.3</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">Show envelope flags</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d40.4</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-140" title="">Section 37.5.140, -d40.4</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">Show qf file lines as they are read</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d40.8</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-141" title="">Section 37.5.141, -d40.8</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">Show reasons for failure</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d40.9</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-142" title="">Section 37.5.142, -d40.9</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">Show qf and lock file descriptors</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d40.32</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-143" title="">Section 37.5.143, -d40.32</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">Dump the send queue</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d41.1</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-144" title="">Section 37.5.144, -d41.1</A
></TD
><td class="entry" rowspan="1" colspan="1">useful</TD
><td class="entry" rowspan="1" colspan="1">Trace queue ordering</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d41.2</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-145" title="">Section 37.5.145, -d41.2</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">Cannot open qf</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d41.49</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-146" title="">Section 37.5.146, -d41.49</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">Show excluded (skipped) queue files</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d41.50</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-147" title="">Section 37.5.147, -d41.50</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">Show every file in the queue</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d42.2</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-148" title="">Section 37.5.148, -d42.2</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">Show connection checking</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d42.5</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-149" title="">Section 37.5.149, -d42.5</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">Trace caching and uncaching connections</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d43.1</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-150" title="">Section 37.5.150, -d43.1</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">Trace MIME conversions</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d43.3</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-151" title="">Section 37.5.151, -d43.3</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">See the final MIME boundary name</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d43.5</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-152" title="">Section 37.5.152, -d43.5</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">Watch search for boundaries</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d43.8</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-153" title="">Section 37.5.153, -d43.8</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">Show the calculations</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d43.35</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-154" title="">Section 37.5.154, -d43.35</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">Show boundary lines as emitted</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d43.36</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-155" title="">Section 37.5.155, -d43.36</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">Show content transfer encoding</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d43.40</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-156" title="">Section 37.5.156, -d43.40</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">Show parse of Content-Type: header</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d43.99</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-157" title="">Section 37.5.157, -d43.99</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">Print the leading/following comments</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d43.100</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-158" title="">Section 37.5.158, -d43.100</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">Mark collect() and putheader()</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d44.4</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-159" title="">Section 37.5.159, -d44.4</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">Trace safefile()</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d44.5</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-160" title="">Section 37.5.160, -d44.5</A
></TD
><td class="entry" rowspan="1" colspan="1">useful</TD
><td class="entry" rowspan="1" colspan="1">Trace writable()</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d45.1</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-161" title="">Section 37.5.161, -d45.1</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">Show envelope sender</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d45.3</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-162" title="">Section 37.5.162, -d45.3</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">Show saved domain</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d45.5</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-163" title="">Section 37.5.163, -d45.5</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">Show don't send to sender</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d46.9</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-164" title="">Section 37.5.164, -d46.9</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">Show xf file's descriptors</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d48.2</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-165" title="">Section 37.5.165, -d48.2</A
></TD
><td class="entry" rowspan="1" colspan="1">useful</TD
><td class="entry" rowspan="1" colspan="1">Trace calls to the check_ rule sets</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d49.1</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-166" title="">Section 37.5.166, -d49.1</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">Trace checkcompat()</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d50.1</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-167" title="">Section 37.5.167, -d50.1</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">Show envelope being dropped</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d50.2</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-168" title="">Section 37.5.168, -d50.2</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">Show Booleans</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d50.10</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-169" title="">Section 37.5.169, -d50.10</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">Also show the send queue</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d51.4</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-170" title="">Section 37.5.170, -d51.4</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">Show queue entries being unlocked</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d51.104</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-171" title="">Section 37.5.171, -d51.104</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">Prevent unlink of xf file</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d52.1</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-172" title="">Section 37.5.172, -d52.1</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">Show isconnect from controlling TTY</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d52.100</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-173" title="">Section 37.5.173, -d52.100</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">Prevent disconnect from controlling tty</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d53.99</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-174" title="">Section 37.5.174, -d53.99</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">Trace xclose()</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d54.1</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-175" title="">Section 37.5.175, -d54.1</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">Show error return and output message</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d54.8</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-176" title="">Section 37.5.176, -d54.8</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">Show message and flags</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d55.60</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-177" title="">Section 37.5.177, -d55.60</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">Show file locking</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d56.1</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-178" title="">Section 37.5.178, -d56.1</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">Persistent host status tracing</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d56.2</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-179" title="">Section 37.5.179, -d56.2</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">More persistent host status tracing</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d56.12</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-180" title="">Section 37.5.180, -d56.12</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">Perform a sanity check</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d56.80</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-181" title="">Section 37.5.181, -d56.80</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">Trace creating the path to the status file</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d56.93</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-182" title="">Section 37.5.182, -d56.93</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">Dump MCI record for the host</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d57.2</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-183" title="">Section 37.5.183, -d57.2</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">Monitor vsnprintf() overflows</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d59.1</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-184" title="">Section 37.5.184, -d59</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">XLA from contrib</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d60.1</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-185" title="">Section 37.5.185, -d60.1</A
></TD
><td class="entry" rowspan="1" colspan="1">useful</TD
><td class="entry" rowspan="1" colspan="1">Trace map lookups inside rewrite()</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d61.10</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-186" title="">Section 37.5.186, -d61.10</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">Trace gethostbyname()</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d62.1</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-187" title="">Section 37.5.187, -d62.1</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">Log file descriptors before and after all deliveries</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d62.8</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-188" title="">Section 37.5.188, -d62.8</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">Log file descriptors before each delivery</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d62.10</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-189" title="">Section 37.5.189, -d62.10</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">Log file descriptors after each delivery</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d80.1</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-190" title="">Section 37.5.190, -d80.1</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">Content-Length: header (Sun enhancement)</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d81.1</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-191" title="">Section 37.5.191, -d81.1</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">&gt; option for remote mode (Sun enhancement)</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d91.100</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-192" title="">Section 37.5.192, -d91.100</A
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">Log caching and uncaching connections</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d99.100</TD
><td class="entry" rowspan="1" colspan="1"><a class="xref" href="#SML2-CH-37-SECT-5-193" title="">Section 37.5.193, -d99.100</A
></TD
><td class="entry" rowspan="1" colspan="1">useful</TD
><td class="entry" rowspan="1" colspan="1">Prevent backgrounding the daemon</TD
></TR
></TBODY
></TABLE
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-1">37.5.1 -d0.1</A
></H3
><p class="refpurpose">Print version information</P
>(useful)</DIV
><blockquote><div class="refsect1"><p class="para"><a class="indexterm" name="AUTOID-54878"></A
>The <code class="literal">-d0.1</CODE
> (a.k.a. <code class="literal">-d0</CODE
>) debugging switch previously prevented <em class="emphasis">sendmail</EM
>
from forking and detaching itself, but that function has been
moved to the <code class="literal">-d99.100</CODE
> debugging switch.
The <code class="literal">-d0.1</CODE
> debugging switch now just tells <em class="emphasis">sendmail</EM
> to
print information about its version:</P
><p class="para"><blockquote class="screen"><pre class="screen">Version 8.8.4
Compiled with:   LOG MATCHGECOS NAMED_BIND NDBM NEWDB NETINET NETUNIX
                 NIS
SYSTEM IDENTITY (after readcf):
            (short domain name) $w = here
        (canonical domain name) $j = here.US.EDU
               (subdomain name) $m = US.EDU
                    (node name) $k = here</PRE
></BLOCKQUOTE
></P
><p class="para">The <code class="literal">Version</CODE
> is the current version of <em class="emphasis">sendmail</EM
>. Note that for
Sun the number may look like <code class="literal">SMI-8.7.5</CODE
>.</P
><p class="para">The <code class="literal">Compiled with:</CODE
> lists the compile-time definitions that
where specified when <em class="emphasis">sendmail</EM
> is compiled. All the available
definitions are listed in 
<a class="xref" href="ch18_08.htm" title="#define Macros for Compiling sendmail">Table 18.3</A
> in <a class="xref" href="ch18_08.htm" title="Alphabetized Reference">Section 18.8, "Alphabetized Reference"</A
>.</P
><p class="para">The <code class="literal">SYSTEM IDENTITY</CODE
> shows the value assigned to four important
macros. The meaning of each macro is contained in
<a class="xref" href="ch31_10.htm" title="Reserved Macros">Table 31.7</A
> in <a class="xref" href="ch31_10.htm" title="Alphabetized Reference">Section 31.10, "Alphabetized Reference"</A
>.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-2">37.5.2 -d0.4</A
></H3
><p class="refpurpose">Our name and aliases</P
>(useful)</DIV
><blockquote><div class="refsect1"><p class="para"><a class="indexterm" name="AUTOID-54910"></A
>The <code class="literal">-d0.4</CODE
> 
debugging switch tells <em class="emphasis">sendmail</EM
>
to print several additional lines of information:</P
><p class="para"><blockquote class="screen"><pre class="screen">Version 8.8.4
Compiled with:   LOG MATCHGECOS NAMED_BIND NDBM NEWDB NETINET NETUNIX
                 NIS
<code class="userinput"><b>canonical name: here.US.EDU                           </B
></CODE
><i class="lineannotation"><img src="../chars/larr.gif" alt="&lt;-"> additional</I
>
<code class="userinput"><b> UUCP nodename: here                                  </B
></CODE
><i class="lineannotation"><img src="../chars/larr.gif" alt="&lt;-"> additional</I
>
<code class="userinput"><b>        a.k.a.: [123.45.67.89]                        </B
></CODE
><i class="lineannotation"><img src="../chars/larr.gif" alt="&lt;-"> additional</I
>
============ SYSTEM IDENTITY (after readcf) ============
            (short domain name) $w = here
        (canonical domain name) $j = here.US.EDU
               (subdomain name) $m = US.EDU
                    (node name) $k = here
========================================================</PRE
></BLOCKQUOTE
></P
><p class="para">To find the canonical name of the local host, <em class="emphasis">sendmail</EM
> calls
<em class="emphasis">gethostname</EM
>(). If that call fails, the name <em class="emphasis">localhost</EM
>
is used. The hostname is then looked up with the internal routine
<em class="emphasis">sm_gethostbyname</EM
>(), which gathers additional information (such as
other names and addresses for the machine) and fixes several
bugs in some operating system's versions of the <em class="emphasis">gethostby...</EM
> routines.
Next the canonical
name for the local host is looked up. For operating systems that
normally support switched services, the name is looked up as specified.
For systems that specify switched services in the configuration file's
<code class="literal">ServiceSwitchFile</CODE
> option
(see <a class="xref" href="ch34_08.htm" title="">Section 34.8.61, ServiceSwitchFile</A
>), switched services are not used because
the configuration file has not been read yet.
(This canonicalization process can be traced with the <code class="literal">-61.10</CODE
>
debugging switch.)
If the canonical is found and that name contains a dot, 
<em class="emphasis">sendmail</EM
> saves the
part of the name to the right of the leftmost dot as the domain
name in the <code class="literal">$m</CODE
> macro (see <a class="xref" href="ch31_10.htm" title="">Section 31.10.24, $m</A
>).
It also appends the part of the name to
the left of the leftmost dot to the class <code class="literal">w</CODE
> 
(see <a class="xref" href="ch32_05.htm" title="">Section 32.5.8, $=w</A
>).
If the canonical name doesn't contain a dot, the <code class="literal">$m</CODE
> macro is
undefined, and the whole name is appended to the class <code class="literal">w</CODE
>.</P
><p class="para">In addition,
<em class="emphasis">sendmail</EM
> also sets the <code class="literal">$k</CODE
> macro 
(see <a class="xref" href="ch31_10.htm" title="">Section 31.10.21, $k</A
>) to be
the correct UUCP name for the machine.
It uses <em class="emphasis">uname</EM
>(3), if available, to find that
name (see <a class="xref" href="ch18_08.htm" title="">Section 18.8.51, TRUST-POPEN</A
>); 
otherwise, it uses the same strategy as for class <code class="literal">w</CODE
>
above.</P
><p class="para">Then <em class="emphasis">sendmail</EM
> lists any other names or addresses (this latter in
square brackets) that it found.
If it finds any, it prints the name prefixed by <code class="literal">a.k.a.:</CODE
>
and appends each to the class <code class="literal">w</CODE
>.
The aliases listed are only those found using <em class="emphasis">gethostbyname</EM
>(3). To
see each entry as it is added to the class <code class="literal">w</CODE
>, use the <code class="literal">-d37.8</CODE
>
debugging switch.</P
><p class="para">Finally, <em class="emphasis">sendmail</EM
> scans the network hardware to find any other
names associated with interfaces.
If the <em class="emphasis">ioctl</EM
>(2) call to get that information fails, the <code class="literal">-d0.4</CODE
>
debugging switch causes <em class="emphasis">sendmail</EM
> to print that failure:</P
><p class="para"><blockquote class="screen"><pre class="screen">SIOGIFCONF failed: <i class="lineannotation"><img src="../chars/larr.gif" alt="&lt;-"> reason here</I
></PRE
></BLOCKQUOTE
></P
><p class="para">If any are found, each is printed
with an <code class="literal">a.k.a.:</CODE
> prefix and added to the
class macro <code class="literal">w</CODE
>.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-3">37.5.3 -d0.10</A
></H3
><p class="refpurpose">Operating System Defines</P
></DIV
><blockquote><div class="refsect1"><p class="para">The <code class="literal">-d0.10</CODE
> debugging switch causes <em class="emphasis">sendmail</EM
> to print
all the operating system specific definitions that were used
to compile your specific version of <em class="emphasis">sendmail</EM
>. This output
prints after the &quot;Compiled with:&quot; information described above:</P
><p class="para"><blockquote class="screen"><pre class="screen">OS Defines: HASFLOCK HASGETUSERSHELL HASINITGROUPS HASLSTAT
                HASSETREUID HASSETSID HASSETVBUF HASUNAME IDENTPROTO
                IP_SRCROUTE
Kernel symbols: /vmunix
   Config file: /etc/sendmail.cf
  Proc Id file: /etc/sendmail.pid</PRE
></BLOCKQUOTE
></P
><p class="para">The <code class="literal">OS Defines</CODE
> are described in 
<a class="xref" href="ch18_08.htm" title="#define Macros for Compiling sendmail">Table 18.3</A
> in <a class="xref" href="ch18_08.htm" title="Alphabetized Reference">Section 18.8</A
>.
Most are automatically determined during compilation; others
are specified in <em class="emphasis">Makefile</EM
>.</P
><p class="para">The <code class="literal">Kernel symbols</CODE
> is the name of file that is accessed to
determine the load average. It is automatically defined correctly
when <em class="emphasis">conf.c</EM
> is compiled.
The location of the configuration file and the process identifier file
are defined in the <em class="emphasis">Makefile</EM
> and <em class="emphasis">conf.h</EM
> 
in the <em class="emphasis">sendmail</EM
> source (see <a class="xref" href="ch18_08.htm" title="">Section 18.8.34, PATH...</A
>).</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-4">37.5.4 -d0.15</A
></H3
><p class="refpurpose">Dump delivery agents</P
>(useful)</DIV
><blockquote><div class="refsect1"><p class="para"><a class="indexterm" name="AUTOID-54997"></A
>The -d0.15 debugging switch causes <em class="emphasis">sendmail</EM
> to display
how it interpreted its delivery agent definitions.
The clarity and completeness of the delivery
agent information vary with the version of <em class="emphasis">sendmail</EM
>.
See the <code class="literal">=M</CODE
> rule-testing command (<a class="xref" href="ch38_04.htm#SML2-CH-38-SECT-4-2" title="Show Delivery Agents with =M">Section 38.4.2, "Show Delivery Agents with =M"</A
>)
for an example of this output.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-5">37.5.5 -d0.20</A
></H3
><p class="refpurpose">Print network address of each interface</P
>(useful)</DIV
><blockquote><div class="refsect1"><p class="para">When <em class="emphasis">sendmail</EM
> scans the network hardware to find other names
for the local host, it uses only those names that are new. Each new name
was printed by the <code class="literal">-d0.4</CODE
> debugging switch above. To see every name
that <em class="emphasis">sendmail</EM
> finds, new and old alike, use the <code class="literal">-d0.20</CODE
>
debugging switch:</P
><p class="para"><blockquote class="screen"><pre class="screen"><code class="userinput"><b>128.32.201.55                                       </B
></CODE
><i class="lineannotation"><img src="../chars/larr.gif" alt="&lt;-"> already found</I
>
<code class="userinput"><b>127.0.0.1                                           </B
></CODE
><i class="lineannotation"><img src="../chars/larr.gif" alt="&lt;-"> found new</I
>
        a.k.a.: [127.0.0.1]</PRE
></BLOCKQUOTE
></P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-6">37.5.6 -d0.22</A
></H3
><p class="refpurpose">Show uname() failure</P
></DIV
><blockquote><div class="refsect1"><p class="para">Ordinarily, if the UUCP name for the local host cannot be found (if
<em class="emphasis">uname</EM
>(3) fails), <em class="emphasis">sendmail</EM
> silently uses the leftmost
component of the canonical name as the UUCP name.
To see whether <em class="emphasis">uname</EM
>(3)
failed&nbsp;- and, if so why&nbsp;- you can use the <code class="literal">-d0.22</CODE
> debugging switch:</P
><p class="para"><blockquote class="screen"><pre class="screen">uname failed (<i class="lineannotation">reason for failure here</I
>)</PRE
></BLOCKQUOTE
></P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-7">37.5.7 -d0.40</A
></H3
><p class="refpurpose">Announce scanning of interfaces</P
></DIV
><blockquote><div class="refsect1"><p class="para">The <code class="literal">-d0.40</CODE
> debugging switch causes <em class="emphasis">sendmail</EM
> to announce that
it is about to scan for network interfaces:</P
><p class="para"><blockquote class="screen"><pre class="screen"><code class="userinput"><b>scanning for interface specific names, ifc_len=64</B
></CODE
>
        a.k.a.: [127.0.0.1]</PRE
></BLOCKQUOTE
></P
><p class="para">The <code class="literal">ifc_len</CODE
> is the size in
bytes of the configuration list returned by the kernel.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-8">37.5.8 -d0.44</A
></H3
><p class="refpurpose">Print addresses of strings</P
></DIV
><blockquote><div class="refsect1"><p class="para">The <code class="literal">-d0.44</CODE
> debugging switch causes <em class="emphasis">sendmail</EM
> to prefix
certain lists of strings that it prints with the
address in memory of each string and an equal sign. With this debugging level,
part of the output produced by the <code class="literal">-d21.12</CODE
> debugging switch would
look like this:</P
><p class="para"><blockquote class="screen"><pre class="screen">--- rule fails
---trying rule:
        0009ec68=@
        0009ec78=$*
--- rule fails</PRE
></BLOCKQUOTE
></P
><p class="para">This debugging level can be useful to the programmer who
wishes to modify the <em class="emphasis">sendmail</EM
> source. It might, for example,
be helpful in designing more efficient string storage.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-9">37.5.9 -d0.90</A
></H3
><p class="refpurpose">Print first 10 rule sets</P
>(obsolete)</DIV
><blockquote><div class="refsect1"><p class="para">The <code class="literal">-d0.90</CODE
> debugging switch causes
<em class="emphasis">sendmail</EM
> to display its internal interpretations of
the first 10 rewriting rules it took from the configuration file.
The rule sets are printed in numeric order, rather than in the order in which
they appeared in the configuration file. The rewriting rules are
printed under each rule set
(but these <em class="emphasis">are</EM
> in the order 
in which they appeared in the configuration file).
Rule sets that are declared but lack rewriting rules
are not printed. Note that defined macros in the RHS
are expanded (the value used) when the configuration file is parsed.
Also note that expressions like <code class="literal">$+</CODE
> may be printed as control
characters (e.g., <code class="literal">^A</CODE
>) under older versions of <em class="emphasis">sendmail</EM
>.</P
><p class="para">The preferred way to view individual rule sets is with
the <code class="literal">-bt</CODE
> rule-testing mode's <code class="literal">=S</CODE
> command
(see <a class="xref" href="ch38_04.htm#SML2-CH-38-SECT-4-2" title="Show Rules in a Rule Set with =S">Section 38.4.1, "Show Rules in a Rule Set with =S"</A
>).</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-10">37.5.10 -d1.1</A
></H3
><p class="refpurpose">Show sender information</P
></DIV
><blockquote><div class="refsect1"><p class="para">Although there are many kinds of information that one might like
to trace about the sender of an email message, <em class="emphasis">sendmail</EM
>  provides the means to trace only one of them.
The <code class="literal">-d1.1</CODE
> (a.k.a. <code class="literal">-d1</CODE
>) debugging switch causes <em class="emphasis">sendmail</EM
> to print
its interpretation of whom the message is from (the name of the sender
as it was used in the envelope):</P
><p class="para"><blockquote class="screen"><pre class="screen">From person = &quot;<code class="replaceable"><i>sender</I
></CODE
>&quot;</PRE
></BLOCKQUOTE
></P
><p class="para">Here, <code class="replaceable"><i>sender</I
></CODE
> is the user portion of the mail address of the sender.
This output is most useful when combined with the
<code class="literal">-f</CODE
> command-line switch (which sets the name of the sender
from the command line; see <a class="xref" href="ch36_07.htm" title="">Section 36.7.21, -f and -r</A
>).</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-11">37.5.11 -d1.5</A
></H3
><p class="refpurpose">Dump the sender address</P
></DIV
><blockquote><div class="refsect1"><p class="para">The <code class="literal">-d1.5</CODE
> debugging switch causes
additional information about the sender to be printed. That output
looks like this:</P
><p class="para"><blockquote class="screen"><pre class="screen">main: QDONTSEND <i class="lineannotation">output of printaddr</I
>()<i class="lineannotation"> here (see <a class="xref" href="ch37_03.htm" title="The Output Produced by printaddr()">Section 37.3.1, "The Output Produced by printaddr()"</A
>)</I
></PRE
></BLOCKQUOTE
></P
><p class="para">The QDONTSEND means that the sender is not a recipient and so
should not get a copy of the message. That is followed
by the output of the <em class="emphasis">printaddr</EM
>() routine.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-12">37.5.12 -d2.1</A
></H3
><p class="refpurpose">End with finis()</P
></DIV
><blockquote><div class="refsect1"><p class="para">Ordinarily, <em class="emphasis">sendmail</EM
> exits silently when it is done (unless
an error causes an error message to be printed).
The <code class="literal">-d2.1</CODE
> (a.k.a. <code class="literal">-d2</CODE
>) debugging switch causes
<em class="emphasis">sendmail</EM
> to print three useful values when it
exits. The message it prints looks like this:</P
><p class="para"><blockquote class="screen"><pre class="screen">====finis: stat <code class="replaceable"><i>num</I
></CODE
> e_id=<code class="replaceable"><i>qid</I
></CODE
> e_flags=<code class="replaceable"><i>flags</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">The <code class="replaceable"><i>num</I
></CODE
> is the final value of the
<em class="emphasis">sendmail</EM
> program's global <code class="literal">ExitStat</CODE
> variable.
It is usually updated to contain the latest error value
as defined in <em class="emphasis">&lt;sysexits.h&gt;</EM
>.
See <a class="xref" href="ch36_05.htm#SML2-CH-36-SECT-5-3" title="sendmail's exit() Status">Section 36.5, "sendmail's exit() Status"</A
> for a detailed description of
the possible exit values.</P
><p class="para">The <code class="replaceable"><i>qid</I
></CODE
> is either the queue identifier (such as SAA24069)
or the NOQUEUE if the message was never assigned an identifier
(such as if it was never queued).</P
><p class="para">The <code class="replaceable"><i>flags</I
></CODE
> is a hexadecimal representation
of the possible envelope flags followed by a text representation
of those flags in angle brackets with the leading <code class="literal">EF_</CODE
> removed, for example,</P
><p class="para"><blockquote class="screen"><pre class="screen">201003&lt;OLDSTYLE,INQUEUE,GLOBALERRS,HAS_DF&gt;</PRE
></BLOCKQUOTE
></P
><p class="para">These are the envelope flags that were in effect with the
current envelope when <em class="emphasis">sendmail</EM
> exited. The possible values
are shown in
<a class="xref" href="#SML2-CH-37-TAB-2" title="Hexadecimal Envelope Flags">Table 37.3</A
>.</P
><table class="table"><caption class="table"><a class="title" name="SML2-CH-37-TAB-2">Table 37.3: Hexadecimal Envelope Flags</A
></CAPTION
><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1">Text</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Hex</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Description</TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">EF_OLDSTYLE</TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">0000001</CODE
></TD
><td class="entry" rowspan="1" colspan="1">Use spaces (not commas) in headers</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">EF_INQUEUE</TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">0000002</CODE
></TD
><td class="entry" rowspan="1" colspan="1">This message is fully queued</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">EF_NO_BODY_RETN</TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">0000004</CODE
></TD
><td class="entry" rowspan="1" colspan="1">Omit message body on error</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">EF_CLRQUEUE</TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">0000008</CODE
></TD
><td class="entry" rowspan="1" colspan="1">Disk copy is no longer needed</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">EF_SENDRECEIPT</TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">0000010</CODE
></TD
><td class="entry" rowspan="1" colspan="1">Send a return receipt</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">EF_FATALERRS</TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">0000020</CODE
></TD
><td class="entry" rowspan="1" colspan="1">Fatal errors occurred</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">EF_KEEPQUEUE</TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">0000040</CODE
></TD
><td class="entry" rowspan="1" colspan="1">Keep queue files always</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">EF_RESPONSE</TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">0000080</CODE
></TD
><td class="entry" rowspan="1" colspan="1">This is an error or return receipt</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">EF_RESENT</TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">0000100</CODE
></TD
><td class="entry" rowspan="1" colspan="1">This message is being forwarded</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">EF_VRFYONLY</TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">0000200</CODE
></TD
><td class="entry" rowspan="1" colspan="1">Verify only (don't expand aliases)</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">EF_WARNING</TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">0000400</CODE
></TD
><td class="entry" rowspan="1" colspan="1">Warning message has been sent</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">EF_QUEUERUN</TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">0000800</CODE
></TD
><td class="entry" rowspan="1" colspan="1">This envelope is from queue</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">EF_GLOBALERRS</TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">0001000</CODE
></TD
><td class="entry" rowspan="1" colspan="1">Treat errors as global</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">EF_PM_NOTIFY</TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">0002000</CODE
></TD
><td class="entry" rowspan="1" colspan="1">Send return mail to postmaster</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">EF_METOO</TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">0004000</CODE
></TD
><td class="entry" rowspan="1" colspan="1">Send to me too</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">EF_LOGSENDER</TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">0008000</CODE
></TD
><td class="entry" rowspan="1" colspan="1">Need to log the sender</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">EF_NORECEIPT</TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">0010000</CODE
></TD
><td class="entry" rowspan="1" colspan="1">Suppress all return-receipts</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">EF_HAS8BIT</TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">0020000</CODE
></TD
><td class="entry" rowspan="1" colspan="1">At least one 8-bit character in body</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">EF_NL_NOT_EOL</TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">0040000</CODE
></TD
><td class="entry" rowspan="1" colspan="1">Don't accept raw newline as end-of-line</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">EF_CRLF_NOT_EOL</TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">0080000</CODE
></TD
><td class="entry" rowspan="1" colspan="1">Don't accept carriage-return/line-feed as end-of-line</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">EF_RET_PARAM</TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">0100000</CODE
></TD
><td class="entry" rowspan="1" colspan="1">SMTP RCPT command had RET argument</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">EF_HAS_DF</TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">0200000</CODE
></TD
><td class="entry" rowspan="1" colspan="1">Set when df file is instantiated</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">EF_IS_MIME</TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">0400000</CODE
></TD
><td class="entry" rowspan="1" colspan="1">Really is a MIME message</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">EF_DONT_MIME</TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">0800000</CODE
></TD
><td class="entry" rowspan="1" colspan="1">This message is not MIME-able</TD
></TR
></TBODY
></TABLE
><p class="para">For example, if the message were fully queued and required a
DSN return receipt, the <em class="emphasis">flags</EM
> would print as</P
><p class="para"><blockquote class="screen"><pre class="screen">e_flags=12&lt;INQUEUE,SENDRECEIPT&gt;</PRE
></BLOCKQUOTE
></P
><p class="para">Note that this line of output is also produced by the <code class="literal">-d13.1</CODE
>,
<code class="literal">-d40.3</CODE
>, and <code class="literal">-d50.1</CODE
> debugging switches but under different
circumstances.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-13">37.5.13 -d2.9</A
></H3
><p class="refpurpose">Show file descriptors with <em class="emphasis">dumpfd</EM
>()</P
></DIV
><blockquote><div class="refsect1"><p class="para">The <code class="literal">-d2.9</CODE
> debugging switch tells <em class="emphasis">sendmail</EM
> to display the
properties of each open file descriptor. That output is produced
by the <em class="emphasis">dumpfd</EM
>() routine, and each line of output
is for a single file descriptor:</P
><p class="para"><blockquote class="screen"><pre class="screen"><code class="replaceable"><i>num</I
></CODE
>: fl=<code class="replaceable"><i>flags</I
></CODE
> mode=<code class="replaceable"><i>mode type stats</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">Here, the <code class="replaceable"><i>num</I
></CODE
> is the number of the open file descriptor. Note that
descriptors 0, 1, and 2 are usually tied to the standard input, output,
and error output.</P
><p class="para">The <code class="replaceable"><i>flags</I
></CODE
> is a hexadecimal representation of the state flags
associated with a file descriptor. F_GETFL is used with
<em class="emphasis">ioctl</EM
>(2) to fetch each, and all are described in <em class="emphasis">&lt;sys/fcntlcom.h&gt;</EM
>.</P
><p class="para">The <code class="replaceable"><i>mode</I
></CODE
> is printed in octal and is the <em class="emphasis">st_mode</EM
> associated
with an <em class="emphasis">fstat</EM
>(2) of the file descriptor. The <code class="replaceable"><i>type</I
></CODE
> examines
the file type portion of the <em class="emphasis">st_mode</EM
> and prints 
SOCK for a socket,
CHR: for a character special device,
BLK: for a block special device,
FIFO: for a first-in-first-out file, 
DIR: for a directory, 
LNK: for a symbolic link,
and nothing otherwise (e.g., nothing if it is a file).</P
><p class="para">The <code class="replaceable"><i>stats</I
></CODE
> are printed for all but the socket. They 
look like this:</P
><p class="para"><blockquote class="screen"><pre class="screen">dev=<code class="replaceable"><i>major</I
></CODE
>/<code class="replaceable"><i>minor</I
></CODE
> ino=<code class="replaceable"><i>inum</I
></CODE
> nlink=<code class="replaceable"><i>nlink</I
></CODE
> u/gid=<code class="replaceable"><i>uid</I
></CODE
>/<code class="replaceable"><i>gid</I
></CODE
> size=<code class="replaceable"><i>bytes</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">Here the <code class="literal">dev=</CODE
> shows the major and minor device numbers for the device
that the file descriptor is associated with. The <code class="replaceable"><i>inum</I
></CODE
> is the inode
number on the disk (if there is one) and <code class="replaceable"><i>nlink</I
></CODE
> is the number of hard
links to the file on disk. The <code class="replaceable"><i>uid/gid</I
></CODE
> shows the user and group
ownership associated with the file descriptor. The <code class="replaceable"><i>size</I
></CODE
> is the
number of bytes in a file, and 0 for almost everything else.</P
><p class="para">For a socket, the <code class="replaceable"><i>stats</I
></CODE
> part of each line looks like
this:</P
><p class="para"><blockquote class="screen"><pre class="screen">[<code class="replaceable"><i>addr</I
></CODE
>]/<code class="replaceable"><i>port</I
></CODE
>-&gt; <code class="replaceable"><i>host</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">Here, <code class="replaceable"><i>addr</I
></CODE
> is the IP address of the local end of the socket.
If the connection is of type AF_INET, the port number of the connection
is also shown as <code class="replaceable"><i>/port</I
></CODE
>. The <code class="replaceable"><i>host</I
></CODE
> is the hostname, as returned
by <em class="emphasis">getpeername</EM
>(3), of the connecting host. If any of these cannot
be found, the error string associated with <em class="emphasis">errno</EM
> is printed
parenthetically in its place.</P
><p class="para">The <code class="literal">-d7.9</CODE
>, <code class="literal">-d40.9</CODE
>, and <code class="literal">-d46.9</CODE
> debugging
switches also print a line like this for specific file descriptors.
Also if <em class="emphasis">sendmail</EM
> is run with the <code class="literal">-d10.100</CODE
> switch, or if 
<em class="emphasis">sendmail</EM
> fails to open a <em class="emphasis">tf</EM
> queue file (see <a class="xref" href="ch23_02.htm#SML2-CH-23-SECT-2-5" title="The Temporary qf Rewrite Image: tf">Section 23.2.6, "The Temporary qf Rewrite Image: tf"</A
>),
or if <em class="emphasis">sendmail</EM
> exited because of too many open files, it will
<em class="emphasis">syslog</EM
> all its open file descriptors within this format.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-14">37.5.14 -d3.1</A
></H3
><p class="refpurpose">Print load average</P
></DIV
><blockquote><div class="refsect1"><p class="para">The <em class="emphasis">sendmail</EM
> program queues mail, rather than delivering it, if
the load average (number of processes in the run queue) exceeds
the value set by the <code class="literal">QueueLA</CODE
> (<code class="literal">x</CODE
>) option
(see <a class="xref" href="ch34_08.htm" title="">Section 34.8.50, QueueLA (x)</A
>). Exceeding that value
also prevents messages that are  already in the queue from being delivered
(prevents a queue run). If the load average becomes higher
than the value of the <code class="literal">RefuseLA</CODE
> (<code class="literal">X</CODE
>) option 
(see <a class="xref" href="ch34_08.htm" title="">Section 34.8.54, RefuseLA (X)</A
>),
<em class="emphasis">sendmail</EM
> rejects incoming SMTP connections until the load average drops.</P
><p class="para">The <code class="literal">-d3.1</CODE
> debugging switch (a.k.a. <code class="literal">-d3</CODE
>) causes <em class="emphasis">sendmail</EM
> to
print the load average found by its internal <em class="emphasis">getla</EM
>() routine each
time that routine is called:</P
><p class="para"><blockquote class="screen"><pre class="screen">getla: <code class="replaceable"><i>la</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">Here, <code class="replaceable"><i>la</I
></CODE
> is the current load average printed as an integer.
If sendmail was compiled with LA_TYPE==LA_ZERO
(see <a class="xref" href="ch18_08.htm" title="">Section 18.8.14, LA-TYPE</A
>), the following will be printed to
show that your <em class="emphasis">sendmail</EM
> binary completely lacks load
averaging support:</P
><p class="para"><blockquote class="screen"><pre class="screen">getla: ZERO</PRE
></BLOCKQUOTE
></P
><p class="para">The <code class="literal">-d3.1</CODE
> debugging switch also causes <em class="emphasis">sendmail</EM
> to print
any errors it encounters while obtaining the load average.</P
><p class="para"><blockquote class="screen"><pre class="screen">getla: open(/dev/kmem): <code class="replaceable"><i>error</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">Here, <code class="literal">/dev/kmem</CODE
> is the device that is used to access kernel memory.
The <code class="replaceable"><i>error</I
></CODE
> is the system error that caused the failure, such as
&quot;Permission denied&quot; if <em class="emphasis">sendmail</EM
> is not properly <em class="emphasis">sgid</EM
>
to the group <em class="emphasis">kmem</EM
>.</P
><p class="para"><blockquote class="screen"><pre class="screen">getla: nlist(<code class="replaceable"><i>unix</I
></CODE
>): <code class="replaceable"><i>error</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">The <em class="emphasis">nlist</EM
>(3) function extracts a list of symbols from
an executable binary (among them the symbol for the load average).
The binary that it extracts is the kernel whose pathname
is <code class="replaceable"><i>unix</I
></CODE
> (such as <em class="emphasis">/vmunix</EM
> for SunOS 4.x). Here, the
<code class="replaceable"><i>error</I
></CODE
> is the reason <em class="emphasis">nlist</EM
>(3) failed. One possibility
is that you booted from a nonstandard kernel name (such as <em class="emphasis">/vmunix.new</EM
>)
and the expected file didn't exist:</P
><p class="para"><blockquote class="screen"><pre class="screen">getla: nlist(<code class="replaceable"><i>unix</I
></CODE
>, <code class="replaceable"><i>la</I
></CODE
>) ==&gt; 0</PRE
></BLOCKQUOTE
></P
><p class="para">If the expected kernel exists (<code class="replaceable"><i>unix</I
></CODE
>) but the machine was booted
from a different kernel, the symbol representing the load average
may not be found. In that instance, <code class="replaceable"><i>la</I
></CODE
> is the name of the kernel
variable that <em class="emphasis">sendmail</EM
> was trying to find.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-15">37.5.15 -d3.5</A
></H3
><p class="refpurpose">Print load average</P
></DIV
><blockquote><div class="refsect1"><p class="para">The load average that <em class="emphasis">sendmail</EM
> uses is averaged over
the last minute. Internally, the kernel keeps track of three load
averages. In addition to the last minute, it also tracks the
last 5 and 15 minutes.
The <code class="literal">-d3.5</CODE
> debugging switch causes V8 <em class="emphasis">sendmail</EM
> to
print the load average over the last minute:</P
><p class="para"><blockquote class="screen"><pre class="screen">getla: averun = <code class="replaceable"><i>1min</I
></CODE
></PRE
></BLOCKQUOTE
></P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-16">37.5.16 -d3.15</A
></H3
><p class="refpurpose">Print three load averages</P
></DIV
><blockquote><div class="refsect1"><p class="para">The <code class="literal">-d3.15</CODE
> debugging switch causes V8 <em class="emphasis">sendmail</EM
> to
print all three load averages:</P
><p class="para"><blockquote class="screen"><pre class="screen">getla: averun = <code class="replaceable"><i>1min</I
></CODE
>, <code class="replaceable"><i>5min</I
></CODE
>, <code class="replaceable"><i>15min</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">Here, the three load averages are printed either in integer or
in floating point, depending on the setting of LA_TYPE 
(see <a class="xref" href="ch18_08.htm" title="">Section 18.8.14</A
>).</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-17">37.5.17 -d3.20</A
></H3
><p class="refpurpose">Show offset for load average</P
></DIV
><blockquote><div class="refsect1"><p class="para">The <em class="emphasis">nlist</EM
>(3) routine (described above)
provides the offset into the kernel file where the value
of the load average is found. The <code class="literal">-d3.20</CODE
> debugging
switch causes that offset to be displayed:</P
><p class="para"><blockquote class="screen"><pre class="screen">getla: symbol address = <code class="replaceable"><i>offset</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">Here, the <code class="replaceable"><i>offset</I
></CODE
> is printed in hexadecimal. The load average
is read by seeking in the kernel file and reading it. If the seek
or read fails, the <code class="literal">-d3.1</CODE
> debugging switch causes <em class="emphasis">sendmail</EM
>
to print:</P
><p class="para"><blockquote class="screen"><pre class="screen">getla: seek or read: <code class="replaceable"><i>error</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">This can indicate a wrong or corrupted kernel image.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-18">37.5.18 -d3.30</A
></H3
><p class="refpurpose">Show result of decision to queue</P
></DIV
><blockquote><div class="refsect1"><p class="para">The internal routine <em class="emphasis">shouldqueue</EM
>() is called just before
a mail message is delivered to recipients. That routine
determines whether mail will be delivered or queued on the basis of the
current load average and message <code class="replaceable"><i>priority</I
></CODE
>. Upon entry it prints:</P
><p class="para"><blockquote class="screen"><pre class="screen">shouldqueue: CurrentLA=<code class="replaceable"><i>load</I
></CODE
>, pri=<code class="replaceable"><i>priority</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">If the <code class="literal">CurrentLA</CODE
> is less than the limit set by the <code class="literal">QueueLA</CODE
>
(<code class="literal">x</CODE
>) option (see <a class="xref" href="ch34_08.htm" title="">Section 34.8.50</A
>), <em class="emphasis">sendmail</EM
> prints:</P
><p class="para"><blockquote class="screen"><pre class="screen">FALSE (CurrentLA &lt; QueueLA)</PRE
></BLOCKQUOTE
></P
><p class="para">Then the calculation described in <a class="xref" href="ch34_08.htm" title="">Section 34.8.49, QueueFactor (q)</A
> for the
<code class="literal">QueueFactor</CODE
> (<code class="literal">q</CODE
>) option is performed using the <code class="replaceable"><i>pri</I
></CODE
>
priority.
The result is printed as one of the following, where TRUE
represents a zero result and FALSE represents a nonzero result:</P
><p class="para"><blockquote class="screen"><pre class="screen">TRUE (by calculation)
FALSE (by calculation)</PRE
></BLOCKQUOTE
></P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-19">37.5.19 -d4.80</A
></H3
><p class="refpurpose">Trace enoughspace()</P
>(useful)</DIV
><blockquote><div class="refsect1"><p class="para">The <code class="literal">MinFreeBlocks</CODE
> (<code class="literal">b</CODE
>) option 
(see <a class="xref" href="ch34_08.htm" title="">Section 34.8.40, MinFreeBlocks (b)</A
>)
defines the minimum
number of disk blocks that must be reserved on the queue disk.
If an incoming SMTP message will fill the disk beyond this 
minimum, the message is rejected.&#13;</P
><p class="para">The <code class="literal">-d4.80</CODE
> debugging switch
[1]
traces the <em class="emphasis">enoughspace</EM
>()
routine in <em class="emphasis">conf.c</EM
>. That routine examines the disk space
and allows or disallows incoming mail.</P
><blockquote class="footnote"><p class="para">[1] No <code class="literal">-d4.1</CODE
> (a.k.a. <code class="literal">-d4</CODE
>) information is available.</P
></BLOCKQUOTE
><p class="para"><blockquote class="screen"><pre class="screen">enoughspace: no threshold</PRE
></BLOCKQUOTE
></P
><p class="para">This debugging output says that no limit was defined with the
<code class="literal">MinFreeBlocks</CODE
> (<code class="literal">b</CODE
>) option.</P
><p class="para"><blockquote class="screen"><pre class="screen">enoughspace: bavail=<code class="replaceable"><i>haveblocks</I
></CODE
> need=<code class="replaceable"><i>needblocks</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">This debugging output shows that the number of blocks free (available)
on the disk is <code class="replaceable"><i>haveblocks</I
></CODE
> and that the number of blocks
required by incoming mail is <code class="replaceable"><i>needblocks</I
></CODE
>.
Note that <code class="replaceable"><i>haveblocks</I
></CODE
> will always be -1 if <em class="emphasis">sendmail</EM
>
was compiled with SFS_TYPE set to SFS_NONE
(see <a class="xref" href="ch18_08.htm" title="">Section 18.8.40, SFS-TYPE</A
>).</P
><p class="para"><blockquote class="screen"><pre class="screen">enoughspace failure: min=<code class="replaceable"><i>boption</I
></CODE
> need=<code class="replaceable"><i>needblocks</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">If the required number of blocks (<code class="replaceable"><i>needblocks</I
></CODE
>) exceeds the
minimum reserved as defined by the <code class="literal">MinFreeBlocks</CODE
>
(<code class="literal">b</CODE
>) option (<code class="replaceable"><i>boption</I
></CODE
>), use of the disk is disallowed.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-20">37.5.20 -d5.4</A
></H3
><p class="refpurpose">Tick for queued events</P
></DIV
><blockquote><div class="refsect1"><p class="para">Throughout its many possible levels of forks and children, 
<em class="emphasis">sendmail</EM
> must keep track of timeouts&nbsp;- the maximum
amount of time it should wait for an event to occur.
For example, a child must not wait forever
for an SMTP greeting message, 
because the program at the other end may never
provide that message (because it died or is just too busy).</P
><p class="para">To keep track of which child should be notified at which time,
<em class="emphasis">sendmail</EM
> maintains an internal queue of events.
The <em class="emphasis">sendmail</EM
> program uses the SIGALARM signal
and the <em class="emphasis">alarm</EM
>(2) system call to set
the interval it waits to next check its
queue of events for timeouts. 
That interval (called a <em class="emphasis">tick</EM
>) is the
period of the timeout itself, or if the timeout is scheduled for
the present or past, the interval is three seconds.
The <code class="literal">-d5.4</CODE
> debugging switch
[2]
causes <em class="emphasis">sendmail</EM
> to 
print the current time whenever the
queue of events is examined:</P
><blockquote class="footnote"><p class="para">[2] There is no <code class="literal">-d5.1</CODE
> (a.k.a. <code class="literal">-d5</CODE
>) information.</P
></BLOCKQUOTE
><p class="para"><blockquote class="screen"><pre class="screen">tick: now=<em class="emphasis">time</EM
></PRE
></BLOCKQUOTE
></P
><p class="para">Here, <em class="emphasis">time</EM
> is the current time in seconds as returned
by <em class="emphasis">time</EM
>(2).</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-21">37.5.21 -d5.5</A
></H3
><p class="refpurpose">Events set and cleared</P
></DIV
><blockquote><div class="refsect1"><p class="para">Events are set by the process (child or parent) that needs
a timeout. The <code class="literal">-d5.5</CODE
> debugging switch causes
<em class="emphasis">sendmail</EM
> to print the information that is used to
set up for that timeout:</P
><p class="para"><blockquote class="screen"><pre class="screen">setevent: intvl=<code class="replaceable"><i>secs</I
></CODE
>, for=<code class="replaceable"><i>timeo</I
></CODE
>, func=<code class="replaceable"><i>addr</I
></CODE
>, arg=<code class="replaceable"><i>pass</I
></CODE
>, ev=<code class="replaceable"><i>evnt</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">The information is the timeout interval in seconds (<code class="replaceable"><i>secs</I
></CODE
>), the time
(now plus the interval) in seconds that the timeout
will occur (<code class="replaceable"><i>timeo</I
></CODE
>), the address in memory of the subroutine that will
be called if a timeout occurs (<code class="replaceable"><i>addr</I
></CODE
>), the argument to be
passed to that subroutine (<code class="replaceable"><i>pass</I
></CODE
>), and the address in
memory of the
C language structure that contains this information (<code class="replaceable"><i>evnt</I
></CODE
>).
The <code class="replaceable"><i>addr</I
></CODE
> of the function to be called can be converted to a function
name by running <em class="emphasis">nm</EM
>(1) on an unstripped binary of <em class="emphasis">sendmail</EM
>. For example, if
the following output was produced by <em class="emphasis">/usr/lib/sendmail</EM
>:</P
><p class="para"><blockquote class="screen"><pre class="screen">setevent: intvl=3600, for=802463800, func=3ebc4, arg=0, ev=94b68</PRE
></BLOCKQUOTE
></P
><p class="para">you could find the function name associated with the address <code class="literal">3ebc4</CODE
> by 
running</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b> nm /usr/lib/sendmail | grep 3ebc4</B
></CODE
>
0003ebc4 t _readtimeout</PRE
></BLOCKQUOTE
></P
><p class="para">Here, the result is the name <code class="literal">readtimeout</CODE
>, which corresponds to
the function <em class="emphasis">readtimeout</EM
>() in <em class="emphasis">util.c</EM
>.</P
><p class="para">When an event is cleared because a timeout was no longer needed, 
<em class="emphasis">sendmail</EM
> prints:</P
><p class="para"><blockquote class="screen"><pre class="screen">clrevent: ev=<code class="replaceable"><i>evnt</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">Here, <code class="replaceable"><i>evnt</I
></CODE
> is the address in memory of the C language structure
that stored the event information. This is the same as the
last item printed by <code class="literal">setevent</CODE
> above.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-22">37.5.22 -d5.6</A
></H3
><p class="refpurpose">Show events triggered</P
></DIV
><blockquote><div class="refsect1"><p class="para">The <code class="literal">-d5.6</CODE
> debugging switch tells <em class="emphasis">sendmail</EM
>
to print the following information when a timeout occurs: </P
><p class="para"><blockquote class="screen"><pre class="screen">tick: ev=<code class="replaceable"><i>evnt</I
></CODE
>, func=<code class="replaceable"><i>addr</I
></CODE
>, arg=<code class="replaceable"><i>pass</I
></CODE
>, pid=<code class="replaceable"><i>pid</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">This shows that the event stored in the C language structure,
whose address in memory is <code class="replaceable"><i>evnt</I
></CODE
>, has timed out. The subroutine whose
address in memory is <code class="replaceable"><i>addr</I
></CODE
> will be called with an argument of <code class="replaceable"><i>pass</I
></CODE
>.
The process identification number of the parent process that
asked for the timeout is shown as <code class="replaceable"><i>pid</I
></CODE
>.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-23">37.5.23 -d6.1</A
></H3
><p class="refpurpose">Show failed mail</P
>(useful)</DIV
><blockquote><div class="refsect1"><p class="para">Mail can fail for a wide variety of reasons.
The way that <em class="emphasis">sendmail</EM
> handles errors is determined
by the setting of the <code class="literal">ErrorMode</CODE
> (<code class="literal">e</CODE
>) option
(see <a class="xref" href="ch34_08.htm" title="">Section 34.8.24, ErrorMode (e)</A
>) in the configuration file.
The <code class="literal">-d6.1</CODE
> (a.k.a. <code class="literal">-d6</CODE
>) debugging switch causes <em class="emphasis">sendmail</EM
>
to print the error-handling mode that is in effect at the time
it first begins to handle failed mail:</P
><p class="para"><blockquote class="screen"><pre class="screen">savemail, errorMode = <code class="replaceable"><i>char</I
></CODE
>, id = <code class="replaceable"><i>qid</I
></CODE
>, ExitStat = <code class="replaceable"><i>err</I
></CODE
>
e_from= <i class="lineannotation"><img src="../chars/larr.gif" alt="&lt;-"> output of printaddr() here (see <a class="xref" href="ch37_03.htm" title="The Output Produced by printaddr()">Section 37.3.1</A
>)</I
></PRE
></BLOCKQUOTE
></P
><p class="para">Here, <code class="replaceable"><i>char</I
></CODE
> is either: 
<code class="literal">p</CODE
> for print errors; 
<code class="literal">m</CODE
> for mail back errors; 
<code class="literal">w</CODE
> for write back errors; 
<code class="literal">e</CODE
> for special BERKnet processing; 
or <code class="literal">q</CODE
> for &quot;don't print anything&quot;
(all of which are described under the <code class="literal">ErrorMode</CODE
> 
option in <a class="xref" href="ch34_08.htm" title="">Section 34.8.24</A
>).
The <code class="replaceable"><i>qid</I
></CODE
> is the queue identifier (such as KAA15019).
The <code class="replaceable"><i>err</I
></CODE
> is the error that caused the message to fail (as defined
in <em class="emphasis">&lt;sysexits.h&gt;</EM
>).
And <code class="literal">e_from=</CODE
> uses <em class="emphasis">printaddr</EM
>() to print details about
the sender's address.</P
><p class="para">If the error-processing mode is <code class="literal">m</CODE
> (for mail back) and
the <code class="literal">-d6.1</CODE
> debugging switch is in effect, <em class="emphasis">sendmail</EM
>
prints details about how the message is being returned to
the sender:</P
><p class="para"><blockquote class="screen"><pre class="screen">***Return To Sender: msg=<code class="replaceable"><i>reason</I
></CODE
>, depth=<code class="replaceable"><i>num</I
></CODE
>, e=<code class="replaceable"><i>addr</I
></CODE
>, returnq=
<i class="lineannotation"><img src="../chars/larr.gif" alt="&lt;-"> output of printaddr</I
>()<i class="lineannotation"> here (see <a class="xref" href="ch37_03.htm" title="The Output Produced by printaddr()">Section 37.3.1</A
>)</I
></PRE
></BLOCKQUOTE
></P
><p class="para">Here, <code class="replaceable"><i>reason</I
></CODE
> is a quoted string of text that explains why
the mail failed. This may be an SMTP reply string. The <code class="replaceable"><i>num</I
></CODE
>
is zero for normal delivery and one for error delivery.
The <code class="replaceable"><i>addr</I
></CODE
> is the location in memory of the
information about the current envelope.
Finally, <em class="emphasis">sendmail</EM
> calls <em class="emphasis">printaddr</EM
>()
to print the details of the queue of recipients (<code class="literal">returnq=</CODE
>)
for the current message.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-24">37.5.24 -d6.5</A
></H3
><p class="refpurpose">The current error state</P
></DIV
><blockquote><div class="refsect1"><p class="para">The <code class="literal">-d6.5</CODE
> debugging switch tells <em class="emphasis">sendmail</EM
>
to print the error state it was in when it finished processing the error that
caused the message to fail:</P
><p class="para"><blockquote class="screen"><pre class="screen">state <code class="replaceable"><i>num</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">If <code class="replaceable"><i>num</I
></CODE
> is 7 (successful delivery), nothing is printed.
Otherwise, the above message is printed, and the value of <code class="replaceable"><i>num</I
></CODE
>
represents one of the states shown in 
<a class="xref" href="#SML2-CH-37-TAB-3" title="Error Handling States">Table 37.4</A
>.</P
><table class="table"><caption class="table"><a class="title" name="SML2-CH-37-TAB-3">Table 37.4: Error Handling States</A
></CAPTION
><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1">State</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Description</TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">0</TD
><td class="entry" rowspan="1" colspan="1">Report to sender's terminal</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">1</TD
><td class="entry" rowspan="1" colspan="1">Mail back to sender</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">2</TD
><td class="entry" rowspan="1" colspan="1">Messages have already been returned</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">3</TD
><td class="entry" rowspan="1" colspan="1">Save in <em class="emphasis">~/dead.letter</EM
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">4</TD
><td class="entry" rowspan="1" colspan="1">Return to postmaster</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">5</TD
><td class="entry" rowspan="1" colspan="1">Save in <em class="emphasis">/usr/tmp/dead.letter</EM
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">6</TD
><td class="entry" rowspan="1" colspan="1">Leave the locked queue/transcript files</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">7</TD
><td class="entry" rowspan="1" colspan="1">The message has been successfully delivered</TD
></TR
></TBODY
></TABLE
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-25">37.5.25 -d6.20</A
></H3
><p class="refpurpose">Show sender of return to sender</P
></DIV
><blockquote><div class="refsect1"><p class="para">The <code class="literal">-d6.20</CODE
> debugging switch tells <em class="emphasis">sendmail</EM
> to print
additional information to that printed by <code class="literal">-d6.1</CODE
>. Specifically,
it prints, via <em class="emphasis">printaddr</EM
>(), the address information about the
sender of returned mail:</P
><p class="para"><blockquote class="screen"><pre class="screen">***Return To Sender: msg=<code class="replaceable"><i>reason</I
></CODE
>, depth=<code class="replaceable"><i>num</I
></CODE
>, e=<code class="replaceable"><i>addr</I
></CODE
>, returnq=
<i class="lineannotation">output of printaddr</I
>()<i class="lineannotation"> here (see <a class="xref" href="ch37_03.htm" title="The Output Produced by printaddr()">Section 37.3.1</A
>)</I
>
Sendq= <i class="lineannotation">output of printaddr</I
>()<i class="lineannotation"> here</I
></PRE
></BLOCKQUOTE
></P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-26">37.5.26 -d7.1</A
></H3
><p class="refpurpose">The Queue filename</P
></DIV
><blockquote><div class="refsect1"><p class="para">The <em class="emphasis">sendmail</EM
> program stores mail messages in its queue for a variety
of reasons. For example, the <code class="literal">SuperSafe</CODE
> (<code class="literal">s</CODE
>) option 
(see <a class="xref" href="ch34_08.htm" title="">Section 34.8.67, SuperSafe (s)</A
>) causes it to queue all
messages just to be safe. Also, messages that cannot be delivered
because of a temporary lack of resources

(or for any correctable reason) are queued for later delivery.</P
><p class="para">Mail messages are stored in the queue in two parts. A data part contains
the body of the message. An information part stores headers
and other information about the message.
The filenames of the two parts are identical but for the
first two letters. A <code class="literal">df</CODE
> begins the name of the data part, and
a <code class="literal">qf</CODE
> begins the name of the information part.
A third type of queue file begins with the letters <code class="literal">xf</CODE
>
and is a &quot;transcript&quot; file that holds error messages
produced during delivery.</P
><p class="para">To ensure that these filenames do not conflict with the names of
files that may already be in the queue, <em class="emphasis">sendmail</EM
> uses the
following pattern to create new names:</P
><p class="para"><blockquote class="screen"><pre class="screen">qf<code class="replaceable"><i>H</I
></CODE
>AA<code class="replaceable"><i>pid</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">&#13;Here, <code class="replaceable"><i>pid</I
></CODE
> is the process identification number of the incarnation
of <em class="emphasis">sendmail</EM
> that is trying to create the file. Because <em class="emphasis">sendmail</EM
>
often <em class="emphasis">fork</EM
>(2)'s to process the queue, the <code class="replaceable"><i>pid</I
></CODE
> is
likely unique and therefore creates a unique name.</P
><p class="para">The <code class="replaceable"><i>H</I
></CODE
>
represents the current hour of the day (using a 24-hour clock) and prefixes
the <code class="literal">AA</CODE
>.
It is constructed by adding the current hour
to the letter <code class="literal">A</CODE
> (thus 00:23 would produce <code class="literal">A+0=A</CODE
>, while
15:45 would produce <code class="literal">A+15=P</CODE
>).
Although it is not recommended, the hour character can be useful in viewing
the queue (with the <code class="literal">-bp</CODE
> command-line switch) to observe the particular hours,
if any, that messages tend to queue.
The hour prefix does not increment.</P
><p class="para">If <em class="emphasis">sendmail</EM
> cannot create a file
(because a file with that name already exists), it increments the
rightmost <code class="literal">A</CODE
> of the <code class="literal">AA</CODE
> part of the name
to a <code class="literal">B</CODE
> and tries again. It continues
this process, incrementing the right from <code class="literal">A</CODE
> to <code class="literal">Z</CODE
> and
the left from <code class="literal">A</CODE
> to <code class="literal">~</CODE
> until it succeeds. If a
unique name cannot be found,
<em class="emphasis">sendmail</EM
> has failed in its attempt to queue the message.
The last filename tried is:</P
><p class="para"><blockquote class="screen"><pre class="screen">qf<code class="replaceable"><i>H</I
></CODE
>~Zpid</PRE
></BLOCKQUOTE
></P
><p class="para">This name is unlikely to ever appear, because the clocking provides
for over 1600 possible unique names. With some versions of <em class="emphasis">sendmail</EM
>,
however, it may appear if the queue directory is not writable. For example,
the <code class="literal">-C</CODE
> command-line switch, when used by a normal user, 
might cause <em class="emphasis">sendmail</EM
> to give up its <em class="emphasis">root</EM
>
privilege, thus causing this message to be printed.</P
><p class="para">The <code class="literal">-d7.1</CODE
> (a.k.a. <code class="literal">-d7</CODE
>) debugging switch causes <em class="emphasis">sendmail</EM
>
to print the portion of the queue name that is common to all the
files that constitute a single queued message. </P
><p class="para"><blockquote class="screen"><pre class="screen">queuename: assigned id <code class="replaceable"><i>H</I
></CODE
>AA<code class="replaceable"><i>pid</I
></CODE
>, env=<code class="replaceable"><i>addr</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">Here, <em class="emphasis">sendmail</EM
> prints the identifier portion of the 
filename
(the <code class="replaceable"><i>H</I
></CODE
><code class="literal">AA</CODE
>, or whatever letters succeeded, and the <code class="replaceable"><i>pid</I
></CODE
>)
that is common to the <code class="literal">df</CODE
>, <code class="literal">qf</CODE
>, and
<code class="literal">xf</CODE
> files.
The <code class="replaceable"><i>addr</I
></CODE
> is the address in memory of the
C language structure that describes the envelope for the
mail message that is queued.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-27">37.5.27 -d7.2</A
></H3
><p class="refpurpose">Show assigned queue file name</P
></DIV
><blockquote><div class="refsect1"><p class="para">The <code class="literal">-d7.2</CODE
> debugging switch tells <em class="emphasis">sendmail</EM
>
to print the full filename of the file that it just created in the queue
directory:</P
><p class="para"><blockquote class="screen"><pre class="screen">queuename: <code class="replaceable"><i>letter</I
></CODE
>f<code class="replaceable"><i>H</I
></CODE
>AA<code class="replaceable"><i>pid</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">The first <code class="replaceable"><i>letter</I
></CODE
> of the name is either <code class="replaceable"><i>d</I
></CODE
>, 
<code class="replaceable"><i>q</I
></CODE
>, or <code class="replaceable"><i>x</I
></CODE
>. The <code class="replaceable"><i>pid</I
></CODE
> is the process identification
number of the <em class="emphasis">sendmail</EM
> process that created the file.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-28">37.5.28 -d7.9</A
></H3
><p class="refpurpose">Dump file descriptor for the qf file</P
></DIV
><blockquote><div class="refsect1"><p class="para">Once <em class="emphasis">sendmail</EM
> successfully opens its <code class="literal">qf</CODE
> file,
it has established the unique identifier. 
The <code class="literal">-d7.9</CODE
> debugging switch causes <em class="emphasis">sendmail</EM
> to dump
the file-descriptor for that open file:&#13;</P
><p class="para"><blockquote class="screen"><pre class="screen">lockfd= <i class="lineannotation">output of dumpfd</I
>()<i class="lineannotation"> here (see <a class="xref" href="#SML2-CH-37-SECT-5-13" title="">Section 37.5.13</A
>)</I
></PRE
></BLOCKQUOTE
></P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-29">37.5.29 -d7.20</A
></H3
><p class="refpurpose">Show queue names being tried</P
></DIV
><blockquote><div class="refsect1"><p class="para">The <code class="literal">-d7.20</CODE
> debugging switch causes <em class="emphasis">sendmail</EM
>
to print each filename that it is attempting to try as it clocks
the <code class="literal">AA</CODE
> in the name from <code class="literal">AA</CODE
> to <code class="literal">~Z</CODE
>:&#13;</P
><p class="para"><blockquote class="screen"><pre class="screen">queuename: trying qfHAA16391
queuename: trying qfHAB16391
queuename: trying qfHAC16391
queuename: trying qfHAD16391
... <i class="lineannotation"><img src="../chars/larr.gif" alt="&lt;-"> and so on</I
></PRE
></BLOCKQUOTE
></P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-30">37.5.30 -d8.1</A
></H3
><p class="refpurpose">DNS name resolution</P
>(useful)</DIV
><blockquote><div class="refsect1"><p class="para">Name resolution is the process of determining a machine's IP
address based on its fully qualified domain name. This is
done by using the Domain Name System (DNS).
The process that <em class="emphasis">sendmail</EM
> uses to resolve a name is described in 
<a class="xref" href="ch21_02.htm#SML2-CH-21-SECT-2-4" title="How sendmail Uses DNS">Section 21.2, "How sendmail Uses DNS"</A
>.</P
><p class="para">When <em class="emphasis">sendmail</EM
> finds that a hostname is really an MX
(mail exchanger) record, it attempts to look up the A record
for the host that handles mail receipt. 
That request
may fail for a variety of reasons. If the <code class="literal">-d8.1</CODE
> (a.k.a. <code class="literal">-d8</CODE
>) debugging
switch is specified, <em class="emphasis">sendmail</EM
> produces the following message:&#13;</P
><p class="para"><blockquote class="screen"><pre class="screen">getmxrr: res_search(<code class="replaceable"><i>host</I
></CODE
>) failed (errno=<code class="replaceable"><i>err</I
></CODE
>, h_errno=<code class="replaceable"><i>herr</I
></CODE
>)</PRE
></BLOCKQUOTE
></P
><p class="para">&#13;Here, <code class="replaceable"><i>host</I
></CODE
> is the hostname that was being looked up, <code class="replaceable"><i>err</I
></CODE
>
is the system error number (if any) from <em class="emphasis">&lt;errno.h&gt;</EM
>, and 
<code class="replaceable"><i>herr</I
></CODE
> is the resolver specific error from <em class="emphasis">&lt;netdb.h&gt;</EM
> as shown in
<a class="xref" href="#SML2-CH-37-TAB-4" title="Resolver Errors from netdb.h">Table 37.5</A
>.&#13;</P
><table class="table"><caption class="table"><a class="title" name="SML2-CH-37-TAB-4">Table 37.5: Resolver Errors from netdb.h</A
></CAPTION
><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1">Value</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Mnemonic</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Description</TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">1</TD
><td class="entry" rowspan="1" colspan="1">HOST_NOT_FOUND</TD
><td class="entry" rowspan="1" colspan="1">Host not found (authoritative answer returned)</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">2</TD
><td class="entry" rowspan="1" colspan="1">TRY_AGAIN</TD
><td class="entry" rowspan="1" colspan="1">Nonauthoritative server not found or server failure</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">3</TD
><td class="entry" rowspan="1" colspan="1">NO_RECOVERY</TD
><td class="entry" rowspan="1" colspan="1">Nonrecoverable errors and refusals</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">4</TD
><td class="entry" rowspan="1" colspan="1">NO_DATA</TD
><td class="entry" rowspan="1" colspan="1">Valid name but no record of requested type</TD
></TR
></TBODY
></TABLE
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-31">37.5.31 -d8.2</A
></H3
><p class="refpurpose">Call to getcanonname(3)</P
>(useful)</DIV
><blockquote><div class="refsect1"><p class="para">The routine <em class="emphasis">dns_getcanonname</EM
>() in <em class="emphasis">domain.c</EM
> of the <em class="emphasis">sendmail</EM
>
source converts a hostname to a fully qualified domain name. This routine
is called only if DNS is used to look up hostnames, as determined
by the <code class="literal">ResolverOptions</CODE
> (<code class="literal">I</CODE
>) option 
(see <a class="xref" href="ch34_08.htm" title="">Section 34.8.55, ResolverOptions (I)</A
>) and the
<code class="literal">ServiceSwitchFile</CODE
> option 
(see <a class="xref" href="ch34_08.htm" title="">Section 34.8.61</A
>). 
If it is, <em class="emphasis">dns_getcanonname</EM
>() can be called from two places:
during startup to get the values for <code class="literal">$w</CODE
>, <code class="literal">$j</CODE
>, and <code class="literal">$m</CODE
>
(see <a class="xref" href="#SML2-CH-37-SECT-5-2" title="">Section 37.5.2</A
>) or when a host is looked up via the
<code class="literal">$[</CODE
> and <code class="literal">$]</CODE
> canonify-operators 
(see <a class="xref" href="ch28_06.htm#SML2-CH-28-SECT-6-4" title="Canonicalize Hostname: $[ and $]">Section 28.6.6, "Canonicalize Hostname: $[ and $]"</A
>).</P
><p class="para">The <code class="literal">-d8.2</CODE
> debugging
switch shows the hostname before it is fully qualified with this call:</P
><p class="para"><blockquote class="screen"><pre class="screen">dns_getcanonname(<code class="replaceable"><i>host</I
></CODE
>, <code class="replaceable"><i>flag</I
></CODE
>)</PRE
></BLOCKQUOTE
></P
><p class="para">If the <code class="replaceable"><i>flag</I
></CODE
> is nonzero, 
calls to the <em class="emphasis">getmxrr</EM
>() routine (which looks up MX records)
are also traced.
On entry to that routine, <em class="emphasis">sendmail</EM
> will print:</P
><p class="para"><blockquote class="screen"><pre class="screen">getmxrr(<code class="replaceable"><i>host</I
></CODE
>, droplocalhost=<code class="replaceable"><i>bool</I
></CODE
>)</PRE
></BLOCKQUOTE
></P
><p class="para">The <code class="replaceable"><i>host</I
></CODE
> is the hostname that MX records are being looked
up for. The <code class="replaceable"><i>bool</I
></CODE
>, if nonzero, means that all MX records
that are less preferred than the local host (as determined by <code class="literal">$=w</CODE
>)
will be discarded. If zero, they will be retained.</P
><p class="para">The <code class="literal">-d8.2</CODE
> debugging switch also causes <em class="emphasis">sendmail</EM
> to 
show the result of processing the <code class="literal">ResolverOptions</CODE
> (<code class="literal">I</CODE
>) option's
settings (see <a class="xref" href="ch34_08.htm" title="">Section 34.8.55</A
>)
while reading the configuration file:</P
><p class="para"><blockquote class="screen"><pre class="screen">_res.options = <code class="replaceable"><i>hex</I
></CODE
>, HasWildcardMX = <i class="lineannotation">1 or 0</I
></PRE
></BLOCKQUOTE
></P
><p class="para">The <code class="replaceable"><i>hex</I
></CODE
> is a hexadecimal representation of the <code class="literal">state</CODE
>
structure's <code class="literal">options</CODE
> variable as described in <em class="emphasis">&lt;resolv.h&gt;</EM
>.
The value of HasWildcardMX is determined by its prefix (<code class="literal">+</CODE
>
or <code class="literal">-</CODE
>) when listed with the <code class="literal">ResolverOptions</CODE
> (<code class="literal">I</CODE
>) option.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-32">37.5.32 -d8.3</A
></H3
><p class="refpurpose">Trace dropped local hostnames</P
>(useful)</DIV
><blockquote><div class="refsect1"><p class="para">If a hostname is dropped because <code class="replaceable"><i>bool</I
></CODE
> (above) is nonzero,
the <code class="literal">-d8.3</CODE
> switch causes <em class="emphasis">sendmail</EM
> to print the following:</P
><p class="para"><blockquote class="screen"><pre class="screen">found localhost (<code class="replaceable"><i>host</I
></CODE
>) in MX list, pref=<code class="replaceable"><i>pref</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">The <code class="replaceable"><i>host</I
></CODE
> is the hostname that is being dropped. The <code class="replaceable"><i>pref</I
></CODE
>
is the preference associated with the MX record.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-33">37.5.33 -d8.5</A
></H3
><p class="refpurpose">Hostname being tried in getcanonname(3)</P
>(useful)</DIV
><blockquote><div class="refsect1"><p class="para">The <code class="literal">-d8.5</CODE
> debugging switch causes the <em class="emphasis">getcanonname</EM
>(3) routine
to print the hostname it is trying to fully qualify. It shows the
name with the local domain appended without the local domain appended,
and at each step in between. Each try is printed as:</P
><p class="para"><blockquote class="screen"><pre class="screen">getcanonname: trying <code class="replaceable"><i>host.domain</I
></CODE
> (<code class="replaceable"><i>type</I
></CODE
>)</PRE
></BLOCKQUOTE
></P
><p class="para">Here, the <code class="replaceable"><i>type</I
></CODE
>  is the type of lookup and is either ANY,
A, or MX.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-34">37.5.34 -d8.7 </A
></H3
><p class="refpurpose">Yes/no response to -d8.5</P
>(useful)</DIV
><blockquote><div class="refsect1"><p class="para">The <code class="literal">-d8.7</CODE
> debugging switch causes 
<em class="emphasis">sendmail</EM
> to print a yes or no response to each of
the &quot;trying&quot; lines printed by <code class="literal">-8.5</CODE
>.
Yes means that the <code class="replaceable"><i>host</I
></CODE
> could successfully be fully canonicalized.
A yes answer prints just this:</P
><p class="para"><blockquote class="screen"><pre class="screen">YES</PRE
></BLOCKQUOTE
></P
><p class="para">If the <code class="replaceable"><i>host</I
></CODE
> could not be canonicalized, a more complex answer
is printed:</P
><p class="para"><blockquote class="screen"><pre class="screen">NO: errno=<code class="replaceable"><i>err</I
></CODE
>, h_errno=<code class="replaceable"><i>herr</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">The <code class="replaceable"><i>err</I
></CODE
>
is the system error number (if any) from <em class="emphasis">&lt;errno.h&gt;</EM
>, and
<code class="replaceable"><i>herr</I
></CODE
> is the resolver specific error from <em class="emphasis">&lt;netdb.h&gt;</EM
> as shown in
<a class="xref" href="#SML2-CH-37-TAB-4" title="Resolver Errors from netdb.h">Table 37.5</A
>.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-35">37.5.35 -d8.8</A
></H3
><p class="refpurpose">Resolver debugging</P
>(useful)</DIV
><blockquote><div class="refsect1"><p class="para">The <code class="literal">-d8.8</CODE
> debugging switch causes the resolver library to
be put into debugging mode (if that was mode was included when
that library was compiled). The <code class="literal">ResolverOptions</CODE
> (<code class="literal">I</CODE
>) option
(see <a class="xref" href="ch34_08.htm" title="">Section 34.8.55</A
>)
+DEBUG also turns on this debugging mode.
But be aware that turning on +DEBUG
will cause a large number of screens full of output to be produced
by the resolver library for every DNS lookup.</P
><p class="para">If the name server returns an answer to an MX lookup, and if
the answer is not an MX record or an error, <em class="emphasis">sendmail</EM
> will 
skip that host.
The <code class="literal">-d8.8</CODE
> debugging switch (or the resolver library
being in debug mode) then causes <em class="emphasis">sendmail</EM
>
to print the following:</P
><p class="para"><blockquote class="screen"><pre class="screen">unexpected answer type <code class="replaceable"><i>wrongtype</I
></CODE
>, size <code class="replaceable"><i>bytes</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">The <code class="replaceable"><i>wrongtype</I
></CODE
> is an integer that can be found in
<em class="emphasis">&lt;arpa/nameser.h&gt;</EM
>.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-36">37.5.36 -d8.20</A
></H3
><p class="refpurpose">Inconsistency in returned information</P
></DIV
><blockquote><div class="refsect1"><p class="para">Internally, the resolver library (<em class="emphasis">libresolv.a</EM
>) stores host domain
names in compressed form (for transmission efficiency). We won't
cover the nature of that compression. For our purposes it is
sufficient to know that the <em class="emphasis">sendmail</EM
> program
calls <em class="emphasis">dn_skipname</EM
>(3) from the resolver library to skip past the
compressed part of a host domain name. That call should never fail,
but if it does, the <code class="literal">-d8.20</CODE
> debugging switch causes <em class="emphasis">sendmail</EM
>
to print:&#13;</P
><p class="para"><blockquote class="screen"><pre class="screen">qdcount failure (<code class="replaceable"><i>questions</I
></CODE
>)</PRE
></BLOCKQUOTE
></P
><p class="para">&#13;The <code class="replaceable"><i>questions</I
></CODE
> is a count of the number of queries made.&#13;</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-37">37.5.37 -d9.1</A
></H3
><p class="refpurpose">Canonify hostname and RFC1413 queries</P
></DIV
><blockquote><div class="refsect1"><p class="para">The <code class="literal">-d9.1</CODE
> (a.k.a. <code class="literal">-d9</CODE
>) debugging switch
can be used to watch <em class="emphasis">sendmail</EM
> convert hostnames and addresses
into canonical form.
This is done by watching the <em class="emphasis">host_map_lookup</EM
>() function
with <code class="literal">-d9.1</CODE
>.
First the hostname is looked up in the symbol table. If it
exists there and if it is marked as a valid canonical entry,
<em class="emphasis">sendmail</EM
> prints&#13;</P
><p class="para"><blockquote class="screen"><pre class="screen">host_map_lookup(<code class="replaceable"><i>host</I
></CODE
>) =&gt; CACHE <code class="replaceable"><i>canon</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">&#13;Here, the name <code class="replaceable"><i>host</I
></CODE
> was found in the symbol table. The value
returned was a valid canonical name. If <code class="replaceable"><i>host</I
></CODE
> had not
been found, the <code class="replaceable"><i>canon</I
></CODE
> would have printed as NULL.</P
><p class="para">If <em class="emphasis">sendmail</EM
> is running in defer-delivery mode
(see the <code class="literal">DeliveryMode</CODE
> (<code class="literal">d</CODE
>)
option in <a class="xref" href="ch34_08.htm" title="">Section 34.8.16, DeliveryMode (d)</A
>), it will
skip looking up the hostname further. This is done because dial-on-demand
connections should not be brought up merely to perform unnecessary
DNS lookups. When <em class="emphasis">sendmail</EM
> skips further lookups, it prints:&#13;</P
><p class="para"><blockquote class="screen"><pre class="screen">host_map_lookup(<code class="replaceable"><i>host</I
></CODE
>) =&gt; DEFERRED</PRE
></BLOCKQUOTE
></P
><p class="para">&#13;If the name is not in the symbol table, it is looked up with the
<em class="emphasis">getcanonname</EM
>() function.  First <em class="emphasis">sendmail</EM
> prints:&#13;</P
><p class="para"><blockquote class="screen"><pre class="screen">host_map_lookup(<code class="replaceable"><i>host</I
></CODE
>) =&gt;</PRE
></BLOCKQUOTE
></P
><p class="para">&#13;with no trailing newline. Then, if the canonical name is returned
by <em class="emphasis">getcanonname</EM
>(), that returned name is printed. Otherwise,
FAIL is printed. If <em class="emphasis">sendmail</EM
> is compiled with NAMED_BIND defined
for DNS support 
(see <a class="xref" href="ch18_08.htm" title="">Section 18.8.23, NAMED-BIND</A
>), the FAIL is followed by the 
resolver specific error (<code class="replaceable"><i>herr</I
></CODE
>)
from <em class="emphasis">&lt;netdb.h&gt;</EM
>:&#13;</P
><p class="para"><blockquote class="screen"><pre class="screen">host_map_lookup(<code class="replaceable"><i>host</I
></CODE
>) =&gt; <code class="replaceable"><i>herr</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">&#13;The <code class="literal">-d9</CODE
> debugging switch is also used to display
<em class="emphasis">identd</EM
>(8) queries. When a network connection is made from
a remote host to the local host, the local <em class="emphasis">sendmail</EM
> uses
the RFC1413 identification protocol to query the remote host
for the name of the user who instantiated the connection.
The result of that query is printed as:</P
><p class="para"><blockquote class="screen"><pre class="screen">getauthinfo: <code class="replaceable"><i>result</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">Here, <code class="replaceable"><i>result</I
></CODE
> is two pieces of information: an
address composed of the username, an <code class="literal">@</CODE
>, and the
real name of the remote host and the IP address of that host:</P
><p class="para"><blockquote class="screen"><pre class="screen">getauthinfo: george@fbi.dc.gov [123.45.67.8]</PRE
></BLOCKQUOTE
></P
><p class="para">If the query fails, nothing is printed.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-38">37.5.38 -d9.3</A
></H3
><p class="refpurpose">Show raw RFC1413 reply</P
></DIV
><blockquote><div class="refsect1"><p class="para">The above information is not provided by the remote host
in that clear form. Instead, <em class="emphasis">sendmail</EM
> needs to parse
the needed information from a raw reply. The <code class="literal">-d9.3</CODE
>
debugging switch causes the raw reply to be printed:</P
><p class="para"><blockquote class="screen"><pre class="screen">getauthinfo:  got <code class="replaceable"><i>raw_reply</I
></CODE
></PRE
></BLOCKQUOTE
></P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-39">37.5.39 -d9.10</A
></H3
><p class="refpurpose">Show RFC1413 query being sent</P
></DIV
><blockquote><div class="refsect1"><p class="para">The <code class="literal">-d9.10</CODE
> debugging switch causes <em class="emphasis">sendmail</EM
>
to display its outgoing RFC1413 query:</P
><p class="para"><blockquote class="screen"><pre class="screen">getauthinfo: sent <code class="replaceable"><i>query</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">Here, the outgoing <code class="replaceable"><i>query</I
></CODE
> is composed of two numbers: 
the TCP port on the remote machine where its
RFC1413 server is running, followed by a dot and
the local port number for the original connection.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-40">37.5.40 -d10.1</A
></H3
><p class="refpurpose">Show recipient delivery</P
></DIV
><blockquote><div class="refsect1"><p class="para">When <em class="emphasis">sendmail</EM
> is about to deliver a mail message, it
has already resolved three pieces of information: which
delivery agent to use, the name of the host that receives
the message, and the name of one or more recipients for that
message.
The <code class="literal">-d10.1</CODE
> (a.k.a. <code class="literal">-d10)</CODE
> debugging switch tells
<em class="emphasis">sendmail</EM
> to display information about the recipient to
whom it is about to deliver:</P
><p class="para"><blockquote class="screen"><pre class="screen">-deliver, id=<code class="replaceable"><i>mid</I
></CODE
>, mailer=<code class="replaceable"><i>num</I
></CODE
>, host=`<code class="replaceable"><i>hname</I
></CODE
>', first user=`<code class="replaceable"><i>uname</I
></CODE
>'</PRE
></BLOCKQUOTE
></P
><p class="para">Here, <code class="replaceable"><i>mid</I
></CODE
> is the queue message identifier (such as PAA08463).
The <code class="replaceable"><i>num</I
></CODE
> is the number of the delivery agent selected.
Delivery agent numbers can be displayed by using the <code class="literal">-d0.15</CODE
> debugging switch.
The <code class="replaceable"><i>hname</I
></CODE
> is the name of the
host that receives delivery. The <code class="replaceable"><i>uname</I
></CODE
> is the name of the
first of possibly many users who receive the mail message.
The <code class="replaceable"><i>uname</I
></CODE
> can be either a single name such as <em class="emphasis">joe</EM
>
or a full forwarding address such as <em class="emphasis">joe@jokes.are.us</EM
>.</P
><p class="para">When <em class="emphasis">sendmail</EM
> attempts delivery, it may be delivering
to multiple recipients. It stores its list of recipients internally
as a linked list of C language structures, each of which holds information
that is specific to each recipient address.
The <code class="literal">-d10.1</CODE
> debugging switch also causes <em class="emphasis">sendmail</EM
> to
print that information using the <em class="emphasis">printaddr</EM
>() routine:</P
><p class="para"><blockquote class="screen"><pre class="screen">send to <i class="lineannotation">output of printaddr</I
>()<i class="lineannotation"> here (see <a class="xref" href="ch37_03.htm" title="The Output Produced by printaddr()">Section 37.3.1</A
>)</I
></PRE
></BLOCKQUOTE
></P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-41">37.5.41 -d10.2</A
></H3
><p class="refpurpose">Dump controlling user's address</P
></DIV
><blockquote><div class="refsect1"><p class="para">Every recipient address may have a controlling
user associated with it (see <a class="xref" href="ch23_09.htm" title="">Section 23.9.2, C line</A
>). The <code class="literal">-d10.2</CODE
> causes <em class="emphasis">sendmail</EM
> to
dump the address of the controlling user using the <em class="emphasis">printaddr</EM
>() 
routine:</P
><p class="para"><blockquote class="screen"><pre class="screen">ctladdr= <i class="lineannotation">output of printaddr</I
>()<i class="lineannotation"> here (see <a class="xref" href="ch37_03.htm" title="The Output Produced by printaddr()">Section 37.3.1</A
>)</I
></PRE
></BLOCKQUOTE
></P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-42">37.5.42 -d10.5</A
></H3
><p class="refpurpose">Showq don't send to MeToo address</P
></DIV
><blockquote><div class="refsect1"><p class="para">If the 
<code class="literal">MeToo</CODE
> (<code class="literal">m</CODE
>) option (see <a class="xref" href="ch34_08.htm" title="">Section 34.8.39, MeToo (m)</A
>) 
is set to false, the <code class="literal">-d10.5</CODE
> debugging
switch tells <em class="emphasis">sendmail</EM
> to dump the address that won't receive
(the QDONTSEND) the mail message.</P
><p class="para"><blockquote class="screen"><pre class="screen">deliver: QDONTSEND <i class="lineannotation">output of printaddr</I
>()<i class="lineannotation"> here (see <a class="xref" href="ch37_03.htm" title="The Output Produced by printaddr()">Section 37.3.1</A
>)</I
></PRE
></BLOCKQUOTE
></P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-43">37.5.43 -d10.100</A
></H3
><p class="refpurpose">Predelivery file descriptor dump</P
></DIV
><blockquote><div class="refsect1"><p class="para">The <code class="literal">-d10.100</CODE
> debugging switch tells <em class="emphasis">sendmail</EM
> to dump
all its file descriptors just before it is about to attempt
delivery.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-44">37.5.44 -d11.1</A
></H3
><p class="refpurpose">Trace delivery</P
>(useful)</DIV
><blockquote><div class="refsect1"><p class="para">The <code class="literal">-d11.1</CODE
> (a.k.a. <code class="literal">-d11</CODE
>) debugging
switch is used to trace message delivery. For
each delivery agent the following is printed:</P
><p class="para"><blockquote class="screen"><pre class="screen">openmailer: <code class="replaceable"><i>argv</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">&#13;Here, <code class="replaceable"><i>argv</I
></CODE
> is the <code class="literal">A=</CODE
> array for the delivery agent, with
macros expanded and printed.</P
><p class="para">The status of remote hosts is cached internally.
Before connecting to a remote host, <em class="emphasis">sendmail</EM
> checks its
cache to see whether that host is down. If it is, it skips
connecting to that host. If the <code class="literal">-d11.1</CODE
> debugging switch is also
specified, the status of the down host is printed as:</P
><p class="para"><blockquote class="screen"><pre class="screen">openmailer: <i class="lineannotation">output of mci_dump</I
>()<i class="lineannotation"> here</I
></PRE
></BLOCKQUOTE
></P
><p class="para">The output of <em class="emphasis">mci_dump()</EM
> looks like this:</P
><p class="para"><blockquote class="screen"><pre class="screen">MCI@<code class="replaceable"><i>memaddr</I
></CODE
>: flags=<code class="replaceable"><i>mci_flags</I
></CODE
>&lt;<i class="lineannotation">flag,flag,...</I
>&gt;, 
errno=<code class="replaceable"><i>mci_errno</I
></CODE
>, herrno=<code class="replaceable"><i>mci_herrno</I
></CODE
>, exitstat=<code class="replaceable"><i>mci_exitstat</I
></CODE
>, state=<code class="replaceable"><i>mci_state</I
></CODE
>,
pid=<code class="replaceable"><i>mci_pid</I
></CODE
>, maxsize=<code class="replaceable"><i>mci_maxsize</I
></CODE
>, phase=<code class="replaceable"><i>mci_phase</I
></CODE
>, mailer=<code class="replaceable"><i>mci_mailer</I
></CODE
>,
host=<code class="replaceable"><i>mci_host</I
></CODE
>, lastuse=<code class="replaceable"><i>mci_lastuse</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">The meaning of each <code class="replaceable"><i>mci_</I
></CODE
> item in the above output is described in
<a class="xref" href="#SML2-CH-37-TAB-5" title="The Meaning of the MCI Structure Items">Table 37.6</A
>.</P
><table class="table"><caption class="table"><a class="title" name="SML2-CH-37-TAB-5">Table 37.6: The Meaning of the MCI Structure Items</A
></CAPTION
><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1">Name</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">What prints</TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="replaceable"><i>mci_memaddr</I
></CODE
></TD
><td class="entry" rowspan="1" colspan="1">The address in memory of this C language structure</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="replaceable"><i>mci_flags</I
></CODE
></TD
><td class="entry" rowspan="1" colspan="1">The flag bits in hexadecimal (see <a class="xref" href="#SML2-CH-37-TAB-6" title="The Meaning of mci_flags Hexadecimal Values">Table 37.7</A
>)</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="replaceable"><i>mci_errno</I
></CODE
></TD
><td class="entry" rowspan="1" colspan="1">The error number of the last connection</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="replaceable"><i>mci_herrno</I
></CODE
></TD
><td class="entry" rowspan="1" colspan="1">The DNS h_errno of the last lookup</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="replaceable"><i>mci_exitstat</I
></CODE
></TD
><td class="entry" rowspan="1" colspan="1">The <em class="emphasis">&lt;sysexits.h&gt;</EM
> exit status of last connection</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="replaceable"><i>mci_state</I
></CODE
></TD
><td class="entry" rowspan="1" colspan="1">The current SMTP state (see <a class="xref" href="#SML2-CH-37-TAB-15" title="mci_get() Connection States">Table 37.16</A
>)</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="replaceable"><i>mci_maxsize</I
></CODE
></TD
><td class="entry" rowspan="1" colspan="1">The maximum size message the host will accept</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="replaceable"><i>mci_pid</I
></CODE
></TD
><td class="entry" rowspan="1" colspan="1">The PID of the child process</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="replaceable"><i>mci_phase</I
></CODE
></TD
><td class="entry" rowspan="1" colspan="1">SMTP phase (string) such as &quot;client greeting&quot; (or NULL)</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="replaceable"><i>mci_mailer</I
></CODE
></TD
><td class="entry" rowspan="1" colspan="1">The (text) name of the delivery agent (or NULL)</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="replaceable"><i>mci_host</I
></CODE
></TD
><td class="entry" rowspan="1" colspan="1">The host's name (or NULL)</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="replaceable"><i>mci_lastuse</I
></CODE
></TD
><td class="entry" rowspan="1" colspan="1">Last usage time in <em class="emphasis">ctime</EM
>(3) format</TD
></TR
></TBODY
></TABLE
><p class="para"><a class="xref" href="#SML2-CH-37-TAB-6" title="The Meaning of mci_flags Hexadecimal Values">Table 37.7</A
>
shows what the individual flag bits in <code class="literal">mci_flags</CODE
> mean,
and the human-readable <em class="emphasis">flags</EM
> text that corresponds to each bit.
Those text items are shown with the leading source <code class="literal">MCIF_</CODE
> prefix
removed.</P
><table class="table"><caption class="table"><a class="title" name="SML2-CH-37-TAB-6">Table 37.7: The Meaning of mci_flags Hexadecimal Values</A
></CAPTION
><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1">Value</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Name</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Meaning</TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">0001</TD
><td class="entry" rowspan="1" colspan="1">VALID</TD
><td class="entry" rowspan="1" colspan="1">This entry is valid</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">0002</TD
><td class="entry" rowspan="1" colspan="1">TEMP</TD
><td class="entry" rowspan="1" colspan="1">Don't cache this connection</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">0004</TD
><td class="entry" rowspan="1" colspan="1">CACHED</TD
><td class="entry" rowspan="1" colspan="1">This connection currently in open cache</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">0008</TD
><td class="entry" rowspan="1" colspan="1">ESMTP</TD
><td class="entry" rowspan="1" colspan="1">This host speaks ESMTP</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">0010</TD
><td class="entry" rowspan="1" colspan="1">EXPN</TD
><td class="entry" rowspan="1" colspan="1">EXPN command supported</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">0020</TD
><td class="entry" rowspan="1" colspan="1">SIZE</TD
><td class="entry" rowspan="1" colspan="1">SIZE option supported</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">0040</TD
><td class="entry" rowspan="1" colspan="1">8BITMIME</TD
><td class="entry" rowspan="1" colspan="1">BODY=8BITMIME supported</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">0080</TD
><td class="entry" rowspan="1" colspan="1">7BIT</TD
><td class="entry" rowspan="1" colspan="1">Strip this message to 7 bits</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">0100</TD
><td class="entry" rowspan="1" colspan="1">MULTSTAT</TD
><td class="entry" rowspan="1" colspan="1">MAIL11V3: handles MULT status</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">0200</TD
><td class="entry" rowspan="1" colspan="1">INHEADER</TD
><td class="entry" rowspan="1" colspan="1">Currently outputting header</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">0400</TD
><td class="entry" rowspan="1" colspan="1">CVT8TO7</TD
><td class="entry" rowspan="1" colspan="1">Convert from 8 to 7 bits</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">0800</TD
><td class="entry" rowspan="1" colspan="1">DSN</TD
><td class="entry" rowspan="1" colspan="1">DSN extension supported</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">1000</TD
><td class="entry" rowspan="1" colspan="1">8BITOK</TD
><td class="entry" rowspan="1" colspan="1">OK to send 8-bit characters</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">2000</TD
><td class="entry" rowspan="1" colspan="1">CVT7TO8</TD
><td class="entry" rowspan="1" colspan="1">Convert from 7 to 8 bits</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">4000</TD
><td class="entry" rowspan="1" colspan="1">INMIME</TD
><td class="entry" rowspan="1" colspan="1">Currently reading MIME header</TD
></TR
></TBODY
></TABLE
><p class="para">After checking to see whether the host is down, <em class="emphasis">sendmail</EM
> attempts to connect to it
for network SMTP mail. If that connect fails, the <code class="literal">-d11.1</CODE
> debugging
switch causes the following to be printed:</P
><p class="para"><blockquote class="screen"><pre class="screen">openmailer: makeconnection =&gt; stat=<code class="replaceable"><i>exitstatus</I
></CODE
>, errno=<code class="replaceable"><i>errno</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">Here, <code class="replaceable"><i>exitstatus</I
></CODE
> is a numerical representation of the reason for
the failure as documented in <em class="emphasis">&lt;sysexits.h&gt;</EM
>, and <code class="replaceable"><i>errno</I
></CODE
>
is the system-level reason for the error, as documented in <em class="emphasis">&lt;errno.h&gt;</EM
>.</P
><p class="para">Other errors, such as failure to establish a <em class="emphasis">pipe</EM
>(2),
or failure to <em class="emphasis">fork</EM
>(2), causes the following to be printed:</P
><p class="para"><blockquote class="screen"><pre class="screen">openmailer: NULL</PRE
></BLOCKQUOTE
></P
><p class="para">This message (although it contains no information) signals that
a more descriptive error message was logged with <em class="emphasis">syslog</EM
>(3) (see
<a class="xref" href="ch26_01.htm" title="Logging with syslog">Section 26.1, "Logging with syslog"</A
>).</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-45">37.5.45 -d11.2</A
></H3
><p class="refpurpose">Show the uid/gid running as during delivery</P
>(useful)</DIV
><blockquote><div class="refsect1"><p class="para">To perform delivery, <em class="emphasis">sendmail</EM
> often has to set its <em class="emphasis">uid</EM
>
to something other than <em class="emphasis">root</EM
>'s.
The logic behind that process is described in 
<a class="xref" href="ch24_02.htm#SML2-CH-24-SECT-2-2" title="Delivery to Files">Section 24.2.2</A
>.
The <code class="literal">-d11.2</CODE
> debugging switch tells <em class="emphasis">sendmail</EM
> to
print the real and effective <em class="emphasis">uid</EM
>'s that it is running under
during delivery.</P
><p class="para"><blockquote class="screen"><pre class="screen">openmailer: running as r/euid=<code class="replaceable"><i>ruid</I
></CODE
>/<code class="replaceable"><i>euid</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">Also, the <code class="literal">-d11.2</CODE
> debugging switch causes <em class="emphasis">sendmail</EM
> to
print any error response that may be produced by a delivery agent:</P
><p class="para"><blockquote class="screen"><pre class="screen">giveresponse: stat=<code class="replaceable"><i>status</I
></CODE
>, e-&gt;e_message=<code class="replaceable"><i>what</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">&#13;Here, <code class="replaceable"><i>status</I
></CODE
> is the error that caused delivery to fail (or
succeed if it is 0) as defined in <em class="emphasis">&lt;sysexits.h&gt;</EM
>. 
The <code class="replaceable"><i>what</I
></CODE
> is either the error message produced by the
delivery agent or &quot;&lt;NULL&gt;&quot; if the delivery agent was silent.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-46">37.5.46 -d11.20</A
></H3
><p class="refpurpose">Show tried D= directories</P
></DIV
><blockquote><div class="refsect1"><p class="para">Execution of a delivery agent can take place in any of a sequence
of directories as defined by the <code class="literal">D=</CODE
> delivery agent equate
(see <a class="xref" href="ch30_04.htm" title="">Section 30.4.3, D=</A
>).
The <code class="literal">-d11.20</CODE
> debugging switch causes each directory
to be printed as it is tried:</P
><p class="para"><blockquote class="screen"><pre class="screen">openmailer: trydir <code class="replaceable"><i>dir</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">Here, <code class="replaceable"><i>dir</I
></CODE
> is the name of the directory that <em class="emphasis">sendmail</EM
>
is about to <em class="emphasis">chdir</EM
>(2) into.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-47">37.5.47 -d12.1</A
></H3
><p class="refpurpose">Show mapping of relative host</P
>(useful)</DIV
><blockquote><div class="refsect1"><p class="para">In the SMTP RCPT command, <em class="emphasis">sendmail</EM
> is required
to express the recipient's address relative to the local
host. For domain addresses, this simply means that the address
should be RFC822-compliant.</P
><p class="para">The <code class="literal">-d12.1</CODE
> (a.k.a. <code class="literal">-d12</CODE
>) debugging switch causes
<em class="emphasis">sendmail</EM
> to print the address as it appeared
before it was made relative:</P
><p class="para"><blockquote class="screen"><pre class="screen">remotename(<code class="replaceable"><i>addr</I
></CODE
>)</PRE
></BLOCKQUOTE
></P
><p class="para">If the <code class="replaceable"><i>addr</I
></CODE
> is for the sender or recipient and is being
processed from a queue file, then nothing more is printed, and
the <code class="replaceable"><i>addr</I
></CODE
> is processed by rule set 3. If the delivery
agent for the recipient has the <code class="literal">F=C</CODE
> flag set (see <a class="xref" href="ch30_08.htm" title="">Section 30.8.15, F=C</A
>)
and the recipient
<em class="emphasis">address</EM
> lacks a domain part, then the domain of the sender is 
appended, and the result is processed by rule set 3 again.
Sender/recipient-specific rule sets are then applied (1 and <code class="literal">S=</CODE
>
for the sender, or 2 and <code class="literal">R=</CODE
> for the recipient). Next,
rule set 4 is applied, and any macros in the result are expanded.
Finally, the fully qualified and relative address is printed as:</P
><p class="para"><blockquote class="screen"><pre class="screen">remotename =&gt; `<code class="replaceable"><i>addr</I
></CODE
>'</PRE
></BLOCKQUOTE
></P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-48">37.5.48 -d13.1</A
></H3
><p class="refpurpose">Show delivery</P
>(useful)</DIV
><blockquote><div class="refsect1"><p class="para">The <code class="literal">-d13</CODE
> (a.k.a. <code class="literal">-d13</CODE
>) debugging switch causes
<em class="emphasis">sendmail</EM
> to display information about the recipients
of each mail message as it is being delivered.
The <code class="literal">-d13.1</CODE
> debugging switch tells <em class="emphasis">sendmail</EM
>
to print the 
mode of delivery and then the recipient information:</P
><p class="para"><blockquote class="screen"><pre class="screen">SENDALL: mode <code class="replaceable"><i>dmode</I
></CODE
>, id=<code class="replaceable"><i>mid</I
></CODE
>, e_from <i class="lineannotation">output of printaddr</I
>()<i class="lineannotation"> here (see <a class="xref" href="ch37_03.htm" title="The Output Produced by printaddr()">Section 37.3.1</A
>)</I
>
        e_flags = <i class="lineannotation">envelope flags here</I
>
        sendqueue:
<i class="lineannotation">output of printaddr</I
>()<i class="lineannotation"> here (see <a class="xref" href="ch37_03.htm" title="The Output Produced by printaddr()">Section 37.3.1</A
>)</I
></PRE
></BLOCKQUOTE
></P
><p class="para">Here, <em class="emphasis">dmode</EM
> is one of those shown in
<a class="xref" href="#SML2-CH-37-TAB-7" title="Delivery Modes Used by sendall()">Table 37.8</A
>.
The <code class="replaceable"><i>mid</I
></CODE
> is the queue message identifier (such as PAA08463).
The address of the sender, <code class="literal">e_from</CODE
>, is dumped by
using the <em class="emphasis">printaddr</EM
>() routine.
Then the envelope flags, <code class="literal">e_flags</CODE
>, are dumped
as described in <a class="xref" href="#SML2-CH-37-TAB-2" title="Hexadecimal Envelope Flags">Table 37.3</A
>.
Next, information about all the recipients (<code class="literal">sendqueue:</CODE
>) is printed by using the <em class="emphasis">printaddr</EM
>() routine.</P
><table class="table"><caption class="table"><a class="title" name="SML2-CH-37-TAB-7">Table 37.8: Delivery Modes Used by <em class="emphasis">sendall</EM
>()</A
></CAPTION
><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1">Mode</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Description</TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">i</CODE
></TD
><td class="entry" rowspan="1" colspan="1">Interactive delivery</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">j</CODE
></TD
><td class="entry" rowspan="1" colspan="1">Deliver w/o queueing (obsolete as of V8)</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">b</CODE
></TD
><td class="entry" rowspan="1" colspan="1">Deliver in background</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">q</CODE
></TD
><td class="entry" rowspan="1" colspan="1">Queue, don't deliver</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">d</CODE
></TD
><td class="entry" rowspan="1" colspan="1">Defer, queue w/o DNS lookups</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">v</CODE
></TD
><td class="entry" rowspan="1" colspan="1">Verify only (used internally)</TD
></TR
></TBODY
></TABLE
><p class="para">Finally, the <code class="literal">-d13.1</CODE
> debugging switch causes <em class="emphasis">sendmail</EM
>
to print a message every time it splits an envelope in two:</P
><p class="para"><blockquote class="screen"><pre class="screen">sendall: split <code class="replaceable"><i>orig</I
></CODE
> into <code class="replaceable"><i>new</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">Here, <code class="replaceable"><i>orig</I
></CODE
> is the original queue message identifier
for the original envelope (such as PAA08463) and <code class="replaceable"><i>new</I
></CODE
> is the identifier for the new envelope, the near
identical clone of the first. Envelopes need to split if they
have different owners.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-49">37.5.49 -d13.5</A
></H3
><p class="refpurpose">Show addresses that we should not send to</P
></DIV
><blockquote><div class="refsect1"><p class="para">The <code class="literal">-d13.5</CODE
> debugging switch is used to display
addresses to which mail should not be delivered.
One such address is that of the sender of the cloned envelope after a split:</P
><p class="para"><blockquote class="screen"><pre class="screen">sendall(split): QDONTSEND <i class="lineannotation">output of printaddr</I
>()<i class="lineannotation"> here (see <a class="xref" href="ch37_03.htm" title="The Output Produced by printaddr()">Section 37.3.1</A
>)</I
></PRE
></BLOCKQUOTE
></P
><p class="para">Another is the sender address
(unless the <code class="literal">MeToo</CODE
> (<code class="literal">m</CODE
>) option, see <a class="xref" href="ch34_08.htm" title="">Section 34.8.39</A
>, is set):</P
><p class="para"><blockquote class="screen"><pre class="screen">sendall: QDONTSEND <i class="lineannotation"><img src="../chars/larr.gif" alt="&lt;-">output of printaddr</I
>()<i class="lineannotation"> here (see <a class="xref" href="ch37_03.htm" title="The Output Produced by printaddr()">Section 37.3.1</A
>)</I
></PRE
></BLOCKQUOTE
></P
><p class="para">Finally, senders who are the <code class="literal">owner-</CODE
> of mailing lists
(see <a class="xref" href="ch25_03.htm" title="Defining a Mailing List Owner">Section 25.3, "Defining a Mailing List Owner"</A
>)
should not have mail sent to them.</P
><p class="para"><blockquote class="screen"><pre class="screen">sendall(owner): QDONTSEND <i class="lineannotation"><img src="../chars/larr.gif" alt="&lt;-">output of printaddr</I
>()<i class="lineannotation"> here (see <a class="xref" href="ch37_03.htm" title="The Output Produced by printaddr()">Section 37.3.1</A
>)</I
></PRE
></BLOCKQUOTE
></P
><p class="para">&#13;This latter sender address is derived by a call to <em class="emphasis">setsender</EM
>(),
which can be separately viewed with the <code class="literal">-d45</CODE
> debugging switch.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-50">37.5.50 -d13.10</A
></H3
><p class="refpurpose">Trace sendenvelope()</P
></DIV
><blockquote><div class="refsect1"><p class="para">The <code class="literal">-d13.10</CODE
> debugging switch causes <em class="emphasis">sendmail</EM
> to print
the following upon entering its internal <em class="emphasis">sendenvelope</EM
>()
routine:</P
><p class="para"><blockquote class="screen"><pre class="screen">sendenvelope(<code class="replaceable"><i>ident</I
></CODE
>) e_flags=<code class="replaceable"><i>hex</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">The <em class="emphasis">ident</EM
> is either the queue identifier (such as SAA24069)
or the [NOQUEUE] if the message was never assigned an identifier
(such as if it was never queued).
The <code class="literal">e_flags</CODE
> are dumped in hexadecimal
as described in <a class="xref" href="#SML2-CH-37-TAB-2" title="Hexadecimal Envelope Flags">Table 37.3</A
>.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-51">37.5.51 -d13.20</A
></H3
><p class="refpurpose">Show final mode</P
></DIV
><blockquote><div class="refsect1"><p class="para">The <em class="emphasis">sendmail</EM
> program's delivery mode (as initially
set with the <code class="literal">DeliveryMode</CODE
> (<code class="literal">d</CODE
>) option; see
<a class="xref" href="ch34_08.htm" title="">Section 34.8.16</A
>) can change during delivery
for a complex series of reasons. The <code class="literal">-d13.20</CODE
> debugging
switch causes the final delivery mode to be displayed:</P
><p class="para"><blockquote class="screen"><pre class="screen">sendall: final mode = <code class="replaceable"><i>char</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">Here, <code class="replaceable"><i>char</I
></CODE
> is the one of the characters that can be
specified for the <code class="literal">DeliveryMode</CODE
> (<code class="literal">d</CODE
>) option.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-52">37.5.52 -d13.29</A
></H3
><p class="refpurpose">Show auto-queueing</P
></DIV
><blockquote><div class="refsect1"><p class="para">If, after all recipient addresses are checked, none are left
to be delivered to (everyone of them was either dropped or queued),
and if the <code class="literal">DeliveryMode</CODE
> (<code class="literal">d</CODE
>) option 
(see <a class="xref" href="ch34_08.htm" title="">Section 34.8.16</A
>) is neither <code class="literal">q</CODE
>,
<code class="literal">d</CODE
>, nor <code class="literal">v</CODE
>, the <code class="literal">-d13.29</CODE
>
debugging switch will cause <em class="emphasis">sendmail</EM
> to print:</P
><p class="para"><blockquote class="screen"><pre class="screen">No deliveries: auto-queuing</PRE
></BLOCKQUOTE
></P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-53">37.5.53 -d13.30</A
></H3
><p class="refpurpose">Show envelopes being split</P
></DIV
><blockquote><div class="refsect1"><p class="para">The process of creating another envelope for another
sender is called &quot;splitting the envelope.&quot;
The <code class="literal">-d13.30</CODE
> debugging switch causes <em class="emphasis">sendmail</EM
> to show
its initial scanning of the send queue to count the number of envelopes
(including split envelopes) that will be needed.</P
><p class="para"><blockquote class="screen"><pre class="screen">Checking <i class="lineannotation">output of printaddr</I
>() here (see <a class="xref" href="ch37_03.htm" title="The Output Produced by printaddr()">Section 37.3.1</A
>)</PRE
></BLOCKQUOTE
></P
><p class="para">Then, depending on the result, each owner will
have one of the following printed:</P
><p class="para"><blockquote class="screen"><pre class="screen">... QDONTSEND
    ... QBADADDR|QQUEUEUP
    ... expensive
    ... deliverable</PRE
></BLOCKQUOTE
></P
><p class="para">The <code class="literal">Q</CODE
> flags are described under the output of <em class="emphasis">printaddr</EM
>()
in <a class="xref" href="ch37_03.htm" title="The Output Produced by printaddr()">Section 37.3.1</A
>.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-54">37.5.54 -d14.2</A
></H3
><p class="refpurpose">Show header field commas</P
></DIV
><blockquote><div class="refsect1"><p class="para">Some programs require that addresses in a list of recipients be separated from
each other by space characters. This is called an &quot;old-style&quot; address.
RFC822 requires that addressees be separated
from each other with comma characters.</P
><p class="para">The <code class="literal">-d14.2</CODE
>
[3]
debugging switch tells <em class="emphasis">sendmail</EM
>
to show each header line that may need spaces converted to
commas.</P
><blockquote class="footnote"><p class="para">[3] There is no <code class="literal">-d14.1</CODE
> information.</P
></BLOCKQUOTE
><p class="para"><blockquote class="screen"><pre class="screen">commaize(<code class="replaceable"><i>header</I
></CODE
>: <code class="replaceable"><i>list</I
></CODE
>)</PRE
></BLOCKQUOTE
></P
><p class="para">Here, <code class="replaceable"><i>header</I
></CODE
> is the caption part of a header line, such as
<code class="literal">From:</CODE
>. The <code class="replaceable"><i>list</I
></CODE
> is a sequence of one or more
addresses.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-55">37.5.55 -d15.1</A
></H3
><p class="refpurpose">Show network get request activity</P
></DIV
><blockquote><div class="refsect1"><p class="para">When <em class="emphasis">sendmail</EM
> runs in daemon mode, it opens a socket on a
port, then listens on that socket for incoming SMTP connections.
The <code class="literal">-d15.1</CODE
> (a.k.a. <code class="literal">-d15</CODE
>) debugging switch prints information about
both of those steps. 
Note that <code class="literal">-d15.1</CODE
> should usually be combined
with <code class="literal">-d99.100</CODE
>, or some output may be lost.</P
><p class="para">Before the socket is opened, <em class="emphasis">sendmail</EM
> prints the following:</P
><p class="para"><blockquote class="screen"><pre class="screen">getrequests: port 0x<code class="replaceable"><i>portno</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">This shows that the port numbered <code class="replaceable"><i>portno</I
></CODE
> 
(printed in hexadecimal notation)
is used to open the socket.
If that open fails, <em class="emphasis">sendmail</EM
> <em class="emphasis">syslog</EM
>(3)'s one of
the following messages at LOG_CRIT and exits:</P
><p class="para"><blockquote class="screen"><pre class="screen">getrequests: problem creating SMTP socket</PRE
></BLOCKQUOTE
></P
><p class="para">If the open succeeds, <em class="emphasis">sendmail</EM
> attempts to bind to that socket.
If it cannot bind, it <em class="emphasis">syslogs</EM
> the following message at LOG_CRIT
and exits:</P
><p class="para"><blockquote class="screen"><pre class="screen">getrequests: can't bind socket</PRE
></BLOCKQUOTE
></P
><p class="para">After it binds, <em class="emphasis">sendmail</EM
> goes into a loop in which it listens
for and handles incoming SMTP requests. If the listen fails, <em class="emphasis">sendmail</EM
>
<em class="emphasis">syslog</EM
>(3)'s the following message at LOG_CRIT and exits:</P
><p class="para"><blockquote class="screen"><pre class="screen">getrequests: cannot listen</PRE
></BLOCKQUOTE
></P
><p class="para">If <em class="emphasis">sendmail</EM
> starts to listen successfully, this <code class="literal">-d15.1</CODE
>
debugging switch causes it to print the number of
the socket on which it is listening:</P
><p class="para"><blockquote class="screen"><pre class="screen">getrequests: <code class="replaceable"><i>sockno</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">This shows that <em class="emphasis">sendmail</EM
> is then listening on the socket whose
file descriptor is <code class="replaceable"><i>sockno</I
></CODE
>.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-56">37.5.56 -d15.2</A
></H3
><p class="refpurpose">Incoming connections</P
></DIV
><blockquote><div class="refsect1"><p class="para">In daemon mode, <em class="emphasis">sendmail</EM
> waits for an incoming SMTP
connection. When that connection is made, <em class="emphasis">sendmail</EM
>
forks, and the child processes the connection from that
point on. The <code class="literal">-d15.2</CODE
> debugging switch causes <em class="emphasis">sendmail</EM
>
to print a message that confirms that it is performing this fork.
Note that <code class="literal">-d15.2</CODE
> should usually be combined
with <code class="literal">-d99.100</CODE
>, or some output may be lost:</P
><p class="para"><blockquote class="screen"><pre class="screen">getrequests: forking (fd = <code class="replaceable"><i>sock</I
></CODE
>)</PRE
></BLOCKQUOTE
></P
><p class="para">Here, <code class="replaceable"><i>sock</I
></CODE
> is the value of the socket being used for the connection.
The <code class="literal">-d15.2</CODE
> debugging switch also causes a message to be
printed when the child process exits:</P
><p class="para"><blockquote class="screen"><pre class="screen">getreq: returning (normal server)
getreq: returning (null server)</PRE
></BLOCKQUOTE
></P
><p class="para">Here, failure of the connection to be validated (see <a class="xref" href="ch22_04.htm#SML2-CH-22-SECT-4-2" title="Accept/Reject Connections via libwrap.a">Section 22.4.1, "Accept/Reject Connections via libwrap.a"</A
>
and <a class="xref" href="ch29_10.htm#SML2-CH-29-SECT-10-1" title="The check_relay Rule Set">Section 29.10.3, "The check_relay Rule Set"</A
>), causes <code class="literal">null server</CODE
> to be printed.
A successful connection causes <code class="literal">normal server</CODE
> to be printed.</P
><p class="para">Finally, the <code class="literal">-d15.2</CODE
> debugging switch causes the following to
be printed every time <em class="emphasis">opendaemonsocket</EM
>() routine is called:</P
><p class="para"><blockquote class="screen"><pre class="screen">opendaemonsocket()</PRE
></BLOCKQUOTE
></P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-57">37.5.57 -d15.101</A
></H3
><p class="refpurpose">Kernel TCP debugging</P
></DIV
><blockquote><div class="refsect1"><p class="para">On kernels that support this feature, the <code class="literal">-d15.101</CODE
> debugging switch
turns on kernel debugging for the
socket that is opened to handle an incoming SMTP connection. Debugging is
turned off when the socket is closed at the end of receipt of the message.
The debugging information gathered can be viewed with the <em class="emphasis">trpt</EM
>(8)
program.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-58">37.5.58 -d16.1</A
></H3
><p class="refpurpose">Outgoing connections</P
></DIV
><blockquote><div class="refsect1"><p class="para">When mail messages are sent to a site that can be
reached via a TCP/IP connection, the <code class="literal">-d16.1</CODE
> (a.k.a. <code class="literal">-d16</CODE
>) debugging switch
causes <em class="emphasis">sendmail</EM
> 
to print one of the following messages when
it is about to make the connection:</P
><p class="para"><blockquote class="screen"><pre class="screen">makeconnection: (<code class="replaceable"><i>host </I
></CODE
>[NULLADDR])            <i class="lineannotation"><img src="../chars/larr.gif" alt="&lt;-"> null address</I
>
makeconnection: (<code class="replaceable"><i>host </I
></CODE
>[0])                   <i class="lineannotation"><img src="../chars/larr.gif" alt="&lt;-"> no address family</I
>
makeconnection: (<code class="replaceable"><i>host </I
></CODE
>[[UNIX: <code class="replaceable"><i>path</I
></CODE
>]])        <i class="lineannotation"><img src="../chars/larr.gif" alt="&lt;-"> AF_UNIX family</I
>
makeconnection: (<code class="replaceable"><i>host </I
></CODE
>[<code class="replaceable"><i>ip address</I
></CODE
>])          <i class="lineannotation"><img src="../chars/larr.gif" alt="&lt;-"> AF_INET family</I
>
makeconnection: (<code class="replaceable"><i>host </I
></CODE
>[[LINK: <code class="replaceable"><i>name</I
></CODE
>]])        <i class="lineannotation"><img src="../chars/larr.gif" alt="&lt;-"> AF_LINK family</I
>
makeconnection: (<code class="replaceable"><i>host </I
></CODE
>[Family <code class="replaceable"><i>num</I
></CODE
>:0x<code class="replaceable"><i>bytes</I
></CODE
>])  <i class="lineannotation"><img src="../chars/larr.gif" alt="&lt;-"> unknown family</I
></PRE
></BLOCKQUOTE
></P
><p class="para">Here, <code class="replaceable"><i>host</I
></CODE
> is the name of the host to which the connection
is made. The form of the address information differs depending on
the address family.
If the connection can be successfully made,
the <code class="literal">-d16.1</CODE
> debugging switch then causes
<em class="emphasis">sendmail</EM
> to print:</P
><p class="para"><blockquote class="screen"><pre class="screen">makeconnection: fd=<code class="replaceable"><i>sock</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">Here, <em class="emphasis">sock</EM
> is the socket descriptor that was issued for use with
the socket connection.</P
><p class="para">If the <code class="literal">DialDelay</CODE
> option 
(see <a class="xref" href="ch34_08.htm" title="">Section 34.8.17, DialDelay</A
>) is nonzero and the connection fails,
<em class="emphasis">sendmail</EM
> will sleep DialDelay seconds and try again. If the
<code class="literal">-d16.1</CODE
> debugging switch is also specified, <em class="emphasis">sendmail</EM
> will print:</P
><p class="para"><blockquote class="screen"><pre class="screen">Connect failed (<code class="replaceable"><i>error message</I
></CODE
>); trying again...</PRE
></BLOCKQUOTE
></P
><p class="para">Here, <code class="replaceable"><i>error message</I
></CODE
> describes the reason for the initial failure.</P
><p class="para">If there is more than one address for a host, <em class="emphasis">sendmail</EM
> will try
each in turn until one connects successfully. The <code class="literal">-d16.1</CODE
> debugging switch 
causes the following to be printed for each failure:</P
><p class="para"><blockquote class="screen"><pre class="screen">Connect failed (<code class="replaceable"><i>error message</I
></CODE
>); trying new address....</PRE
></BLOCKQUOTE
></P
><p class="para">Note that the <code class="literal">-d16</CODE
> debugging switch should usually be combined with 
the <code class="literal">-d99.100</CODE
> debugging switch, or some output may be lost.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-59">37.5.59 -d16.101</A
></H3
><p class="refpurpose">Kernel TCP debugging</P
></DIV
><blockquote><div class="refsect1"><p class="para">See <code class="literal">-d15.101</CODE
>. The only difference here is that
debugging is turned on for the outgoing socket.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-60">37.5.60 -d17.1</A
></H3
><p class="refpurpose">List MX hosts</P
></DIV
><blockquote><div class="refsect1"><p class="para">When <em class="emphasis">sendmail</EM
> readies to deliver mail to a remote host, it
looks up that host using DNS to find Mail Exchanger (MX) records.
The <code class="literal">-d17.1</CODE
> (a.k.a. <code class="literal">-d17</CODE
>) debugging switch causes V8 <em class="emphasis">sendmail</EM
> to
print the following:</P
><p class="para"><blockquote class="screen"><pre class="screen">hostsignature(<code class="replaceable"><i>host</I
></CODE
>) = <code class="replaceable"><i>records</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">Here, <code class="replaceable"><i>host</I
></CODE
> is the host that was looked up with DNS.
The <code class="replaceable"><i>records</I
></CODE
> is a colon-delimited list of MX records
for that host. That list might contain only the original hostname if
no MX records were found.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-61">37.5.61 -d17.9</A
></H3
><p class="refpurpose">Show randomizing MX records</P
></DIV
><blockquote><div class="refsect1"><p class="para">MX records have preferences. Delivery is to the record with
the lowest preference first, then to each higher preference,
in turn, until a delivery succeeds. When two or more preferences are
equal, V8 <em class="emphasis">sendmail</EM
> randomizes them so that they are
tried in a different order. The order is the same each time,
so this is really a pseudo-randomization (actually a hash function).</P
><p class="para">The <code class="literal">-d17.9</CODE
> debugging switch causes <em class="emphasis">sendmail</EM
> to
print the following each time it randomizes:</P
><p class="para"><blockquote class="screen"><pre class="screen">mxrand(<code class="replaceable"><i>host</I
></CODE
>) = <code class="replaceable"><i>hash</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">This shows that the MX records for <code class="replaceable"><i>host</I
></CODE
> have been
given a hash value of <code class="replaceable"><i>hash</I
></CODE
>.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-62">37.5.62 -d18.1</A
></H3
><p class="refpurpose">Show SMTP replies</P
></DIV
><blockquote><div class="refsect1"><p class="para">The process of transmitting (or receiving) a mail message
using the SMTP protocol requires <em class="emphasis">sendmail</EM
> to send replies
as its side of the dialogue. The <code class="literal">-d18.1</CODE
> (a.k.a. <code class="literal">-d18</CODE
>) debugging switch causes
<em class="emphasis">sendmail</EM
> to print each reply that it sends. It prefixes what it prints
with three right angle brackets:</P
><p class="para"><blockquote class="screen"><pre class="screen">&gt;&gt;&gt; RCPT To: gw@wash.dc.gov</PRE
></BLOCKQUOTE
></P
><p class="para">Note that this is the same output as produced with
the <code class="literal">-v</CODE
> command-line switch (see <a class="xref" href="ch36_07.htm" title="">Section 36.7.41, -v</A
>).</P
><p class="para">The <code class="literal">-d18.1</CODE
> debugging switch also causes the following message to be
printed to the standard output if 
the file descriptor for the connection is NULL:</P
><p class="para"><blockquote class="screen"><pre class="screen">smtpmessage: NULL mci_out</PRE
></BLOCKQUOTE
></P
><p class="para">&#13;Prior to opening the connection, the <code class="literal">-d18.1</CODE
>
debugging switch causes <em class="emphasis">sendmail</EM
> to print:</P
><p class="para"><blockquote class="screen"><pre class="screen">smtpinit <i class="lineannotation">output of mci_dump</I
>()<i class="lineannotation"> here</I
></PRE
></BLOCKQUOTE
></P
><p class="para">Finally, the <code class="literal">-d18.1</CODE
> debugging switch causes <em class="emphasis">sendmail</EM
> to
print:</P
><p class="para"><blockquote class="screen"><pre class="screen">reply</PRE
></BLOCKQUOTE
></P
><p class="para">Each time it enters its <em class="emphasis">reply</EM
>() routine.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-63">37.5.63 -d18.2</A
></H3
><p class="refpurpose">Show entry to MAIL From:</P
></DIV
><blockquote><div class="refsect1"><p class="para">The <code class="literal">-d18.2</CODE
> debugging switch causes <em class="emphasis">sendmail</EM
> to
show processing of the SMTP MAIL From: command that the local
machine will send. </P
><p class="para"><blockquote class="screen"><pre class="screen">smtpmailfrom: CurHost=<code class="replaceable"><i>host</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">Here, <code class="replaceable"><i>host</I
></CODE
> is the name of the current host that
<em class="emphasis">sendmail</EM
> is dealing with.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-64">37.5.64 -d18.100</A
></H3
><p class="refpurpose">Pause on SMTP read error</P
></DIV
><blockquote><div class="refsect1"><p class="para">The <code class="literal">-d18.100</CODE
> debugging switch causes <em class="emphasis">sendmail</EM
> to <em class="emphasis">pause</EM
>(2)
after a read error when processing the SMTP dialog. The administrator
can then use <em class="emphasis">ps</EM
>(8) and <em class="emphasis">gcore</EM
>(8) to produce a core dump,
which can then be examined with a debugger to determine the reason for the read error.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-65">37.5.65 -d19.1</A
></H3
><p class="refpurpose">Show ESMTP MAIL and RCPT parameters</P
></DIV
><blockquote><div class="refsect1"><p class="para">Under Extended SMTP (ESMTP)
the MAIL and RCPT command can be followed
by other optional parameters. The <code class="literal">-d19.1</CODE
> (a.k.a. <code class="literal">-d19</CODE
>)
debugging switch displays those parameters.
We discuss the MAIL command first, then the RCPT command.&#13;</P
><div class="refsect2"><h4 class="refsect2"><a class="title" name="SML2-CH-37-SECT-5-65-1">37.5.65.1 Show MAIL parameters</A
></H4
><p class="para">The <em class="emphasis">sendmail</EM
> program
recognizes four parameters that can follow the address in the
SMTP MAIL command:
[4]
SIZE, which specifies the size in bytes of the incoming message;
BODY, which specifies the nature of the message body (<code class="literal">8bitmime</CODE
> or <code class="literal">7bit</CODE
>);
ENVID, which is used to propagate a sender-specific unique identifier
for the envelope;
and RET, which specifies whether or not to return the message body
on an error return.</P
><blockquote class="footnote"><p class="para">[4] SIZE is defined in RFC1653,
BODY is defined in RFC1652,
and ENVID and RET are defined in RFC1891.</P
></BLOCKQUOTE
><p class="para">The <code class="literal">-d19.1</CODE
> debugging switch causes <em class="emphasis">sendmail</EM
> to print
the parameters it received:</P
><p class="para"><blockquote class="screen"><pre class="screen">MAIL: got arg <code class="replaceable"><i>param</I
></CODE
>=&quot;<code class="replaceable"><i>value</I
></CODE
>&quot;</PRE
></BLOCKQUOTE
></P
><p class="para">The <code class="replaceable"><i>param</I
></CODE
> is one of the parameters shown above.
The nature of the <code class="replaceable"><i>value</I
></CODE
> depends on the <code class="replaceable"><i>param</I
></CODE
></P
><p class="para">The <code class="replaceable"><i>value</I
></CODE
> for SIZE is a positive integer. If SIZE
lacks a <em class="emphasis">value</EM
>, this error is issued:</P
><p class="para"><blockquote class="screen"><pre class="screen">501 SIZE requires a value</PRE
></BLOCKQUOTE
></P
><p class="para">When multiple, illegal SIZE values are specified, the last is the one
whose value is used.</P
><p class="para">The <code class="replaceable"><i>value</I
></CODE
> for BODY is a case-insensitive string. It can
either be <code class="literal">8bitmime</CODE
> or <code class="literal">7bit</CODE
>. If BODY lacks a <em class="emphasis">value</EM
>, the following 
error is issued:</P
><p class="para"><blockquote class="screen"><pre class="screen">501 BODY requires a value</PRE
></BLOCKQUOTE
></P
><p class="para">If BODY has neither of the approved strings as its value, the following error
is issued:</P
><p class="para"><blockquote class="screen"><pre class="screen">501 Unknown BODY type <i class="lineannotation">bad string here</I
></PRE
></BLOCKQUOTE
></P
><p class="para">When multiple, illegal BODY values are specified, the last is the one
whose value is used.</P
><p class="para">The <code class="replaceable"><i>value</I
></CODE
> for ENVID is a special envelope identifier.
It is composed of ASCII characters in the range <code class="literal">!</CODE
>
through <code class="literal">~</CODE
>, excepting <code class="literal">+</CODE
> and <code class="literal">=</CODE
>. Characters outside
that range and those two excepted characters are replaced with a
<code class="literal">+</CODE
> followed by a hexadecimal representation of the character's
value (there must be exactly two hexadecimal digits).
If ENVID lacks a value, the following error is issued:</P
><p class="para"><blockquote class="screen"><pre class="screen">501 ENVID requires a value</PRE
></BLOCKQUOTE
></P
><p class="para">If the text of the value is not as described above, the following error
is issued:</P
><p class="para"><blockquote class="screen"><pre class="screen">501 Syntax error in ENVID parameter value</PRE
></BLOCKQUOTE
></P
><p class="para">If more than one ENVID specified is for a given envelope,
the second results in this error:</P
><p class="para"><blockquote class="screen"><pre class="screen">501 Duplicate ENVID parameter</PRE
></BLOCKQUOTE
></P
><p class="para">The <code class="replaceable"><i>value</I
></CODE
> for RET is one of two possible case-insensitive
strings: <code class="literal">hdrs</CODE
> tells <em class="emphasis">sendmail</EM
> to return only the headers
of a bounced mail message; <code class="literal">full</CODE
> tells <em class="emphasis">sendmail</EM
> to return
the headers and body of a bounced mail message. If no string is present,
the following error is issued:</P
><p class="para"><blockquote class="screen"><pre class="screen">501 RET requires a value</PRE
></BLOCKQUOTE
></P
><p class="para">&#13;If a string is present but is something other than
<code class="literal">hdrs</CODE
> or <code class="literal">full</CODE
>, the following is printed:</P
><p class="para"><blockquote class="screen"><pre class="screen">501 Bad argument <i class="lineannotation">bad string here</I
></PRE
></BLOCKQUOTE
></P
><p class="para">If more than one RET is specified for a given envelope, the following
error is printed:</P
><p class="para"><blockquote class="screen"><pre class="screen">501 Duplicate RET parameter</PRE
></BLOCKQUOTE
></P
><p class="para">If the parameter is not SIZE, BODY, ENVID, or
RET, the following error is issued:</P
><p class="para"><blockquote class="screen"><pre class="screen">501 <code class="replaceable"><i>param</I
></CODE
> parameter unrecognized</PRE
></BLOCKQUOTE
></P
><p class="para"></P
></DIV
><div class="refsect2"><h4 class="refsect2"><a class="title" name="SML2-CH-37-SECT-5-65-2">37.5.65.2 Show RCPT parameters</A
></H4
><p class="para">The <em class="emphasis">sendmail</EM
> program
recognizes two parameters that can follow the address in the
SMTP RCPT command: 
NOTIFY, which specifies when to notify the sender;
and ORCPT, which specifies the original recipient's address.</P
><p class="para">The <code class="literal">-d19.1</CODE
> debugging switch causes <em class="emphasis">sendmail</EM
> to print
the parameters it received:</P
><p class="para"><blockquote class="screen"><pre class="screen">RCPT: got arg <code class="replaceable"><i>param</I
></CODE
>=&quot;<code class="replaceable"><i>value</I
></CODE
>&quot;</PRE
></BLOCKQUOTE
></P
><p class="para">The <code class="replaceable"><i>param</I
></CODE
> is one of the parameters shown above.
The nature of the <code class="replaceable"><i>value</I
></CODE
> depends on the <code class="replaceable"><i>param</I
></CODE
></P
><p class="para">The <code class="replaceable"><i>value</I
></CODE
> for NOTIFY is either NEVER or a comma-separated list composed of
SUCCESS, which means to notify the sender upon final delivery
that the message was successfully delivered;
FAILURE, which means to notify the sender if the message cannot
be delivered;
and DELAY, which means to notify the sender if the message is
delayed.
If there is no <code class="replaceable"><i>value</I
></CODE
>, the following error is issued:</P
><p class="para"><blockquote class="screen"><pre class="screen">501 NOTIFY requires a value</PRE
></BLOCKQUOTE
></P
><p class="para">If a <code class="replaceable"><i>value</I
></CODE
> is present but it is not one of the words shown above,
the following error is issued:</P
><p class="para"><blockquote class="screen"><pre class="screen">501 Bad argument \&quot;<i class="lineannotation">bad value here</I
>\&quot;  to NOTIFY</PRE
></BLOCKQUOTE
></P
><p class="para">Multiple, illegal NOTIFY parameters in an envelope cause the subsequent
values to be logically OR'd together.</P
><p class="para">The <code class="replaceable"><i>value</I
></CODE
> for ORCPT is an address followed by
a semicolon, then an address that is encoded in the same way
as the envelope identifier described for ENVID above.
If that <code class="replaceable"><i>value</I
></CODE
> is missing, the following error message is
issued:</P
><p class="para"><blockquote class="screen"><pre class="screen">501 ORCPT requires a value</PRE
></BLOCKQUOTE
></P
><p class="para">&#13;If the <code class="replaceable"><i>value</I
></CODE
> is syntactically wrong (i.e., if the <code class="replaceable"><i>value</I
></CODE
>
does not have a valid address following the semicolon),
this error message is issued:</P
><p class="para"><blockquote class="screen"><pre class="screen">501 Syntax error in ORCPT parameter value</PRE
></BLOCKQUOTE
></P
><p class="para">If multiple ORCPT values are specified, the second one results
in this error:</P
><p class="para"><blockquote class="screen"><pre class="screen">501 Duplicate ORCPT parameter</PRE
></BLOCKQUOTE
></P
></DIV
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-66">37.5.66 -d20.1</A
></H3
><p class="refpurpose">Show resolving delivery agent: parseaddr()</P
>(useful)</DIV
><blockquote><div class="refsect1"><p class="para">The <code class="literal">-d20.1</CODE
> (a.k.a. <code class="literal">-d20</CODE
>)
debugging switch causes <em class="emphasis">sendmail</EM
> to print
each recipient address before it is rewritten by rule sets 3 and 0:</P
><p class="para"><blockquote class="screen"><pre class="screen">-parseaddr(<code class="replaceable"><i>addr</I
></CODE
>)</PRE
></BLOCKQUOTE
></P
><p class="para">Here, <code class="replaceable"><i>addr</I
></CODE
> is the recipient address before it is rewritten
and before any aliasing has been performed on it.</P
><p class="para">The <code class="literal">-d20.1</CODE
> debugging switch also causes <em class="emphasis">sendmail</EM
> to print information
about problems that may exist in recipient addresses. If an address contains
any control character that is not an <em class="emphasis">isspace</EM
>(3) character,
<em class="emphasis">sendmail</EM
> prints the following message and skips that address:</P
><p class="para"><blockquote class="screen"><pre class="screen">parseaddr-&gt;<i class="lineannotation">bad address</I
></PRE
></BLOCKQUOTE
></P
><p class="para">If an address is empty (that is, if it is composed entirely of an
RFC822-style comment), <em class="emphasis">sendmail</EM
> prints the following and
skips that address:</P
><p class="para"><blockquote class="screen"><pre class="screen">parseaddr-&gt;NULL</PRE
></BLOCKQUOTE
></P
><p class="para">After the recipient address has been rewritten by rule sets 3 and
0, and if a delivery agent was successfully selected,
<em class="emphasis">sendmail</EM
> prints the result using the <em class="emphasis">printaddr</EM
>()
routine.</P
><p class="para">Note that <code class="literal">-d21</CODE
> can be used to
watch the rule sets parse the address, and <code class="literal">-d24</CODE
> can be used
to watch the resulting tokens being pasted back together.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-67">37.5.67 -d21.1</A
></H3
><p class="refpurpose">Trace rewriting rules</P
>(useful)</DIV
><blockquote><div class="refsect1"><p class="para">The <code class="literal">-d21.1</CODE
> (a.k.a. <code class="literal">-d21</CODE
>) debugging switch causes <em class="emphasis">sendmail</EM
> to print
each step that it takes in rewriting addresses with rules.
The <code class="literal">-d21.1</CODE
> debugging switch causes output to
be produced that is identical to the output produced by the <code class="literal">-bt</CODE
>
command-line switch (see <a class="xref" href="ch38_01.htm" title="Overview">Section 38.1, "Overview"</A
>):</P
><p class="para"><blockquote class="screen"><pre class="screen">rewrite: rule set <code class="replaceable"><i>num</I
></CODE
>   input: <code class="replaceable"><i>addr</I
></CODE
>
rewrite: rule set <code class="replaceable"><i>num</I
></CODE
> returns: <code class="replaceable"><i>addr</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">Here, <code class="replaceable"><i>num</I
></CODE
> is the rule-set number, and <code class="replaceable"><i>addr</I
></CODE
> is, first,
the address (workspace) before rewriting and, second, the address after
rewriting.</P
><p class="para">Because rules are recursive by nature, they can sometimes
cause infinite loops (see <a class="xref" href="ch28_06.htm#SML2-CH-28-SECT-6-4" title="Rewrite Once Prefix: $:">Section 28.6.2, "Rewrite Once Prefix: $:"</A
>). When a rule loops more than 100
times, the following error is issued:</P
><p class="para"><blockquote class="screen"><pre class="screen">Infinite loop in rule set <code class="replaceable"><i>num</I
></CODE
>, rule <code class="replaceable"><i>rnum</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">If the <code class="literal">-d21.1</CODE
> debugging switch was also invoked
the above error is followed by:</P
><p class="para"><blockquote class="screen"><pre class="screen">workspace: <i class="lineannotation">state of rewritten address so far, here</I
></PRE
></BLOCKQUOTE
></P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-68">37.5.68 -d21.2</A
></H3
><p class="refpurpose">Trace $&amp; macros</P
>(useful)</DIV
><blockquote><div class="refsect1"><p class="para">The <code class="literal">-d21.2</CODE
> debugging switch tells <em class="emphasis">sendmail</EM
> to show the
current value of any deferred-expansion macro (one that was declared
with the <code class="literal">$&amp;</CODE
> prefix). Each such macro that is encountered
in processing a rule prints as:</P
><p class="para"><blockquote class="screen"><pre class="screen">rewrite: LHS $&amp;<code class="replaceable"><i>char</I
></CODE
> =&gt; &quot;<code class="replaceable"><i>value</I
></CODE
>&quot;
rewrite: RHS $&amp;<code class="replaceable"><i>char</I
></CODE
> =&gt; &quot;<code class="replaceable"><i>value</I
></CODE
>&quot;</PRE
></BLOCKQUOTE
></P
><p class="para">The <code class="replaceable"><i>char</I
></CODE
> is the single-character name of the macro, and
the <code class="replaceable"><i>value</I
></CODE
> is its current value. If that particular
macro lacks a value, it will print as (NULL). The <code class="literal">LHS</CODE
> refers
to the left-hand side of the rule, and the <code class="literal">RHS</CODE
> corresponds
to the right-hand side. Deferred-expansion macros are described
in <a class="xref" href="ch31_05.htm" title="Use Value as Is with $&amp;">Section 31.5.3, "Use Value as Is with $&amp;"</A
>.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-69">37.5.69 -d21.3</A
></H3
><p class="refpurpose">Show subroutine calls</P
></DIV
><blockquote><div class="refsect1"><p class="para">The <code class="literal">-d21.3</CODE
> debugging switch causes <em class="emphasis">sendmail</EM
> to print
the rule-set number of each rule set called as a subroutine.
Rule sets are called as subroutines by using the <code class="literal">$&gt;</CODE
> rewrite-operator
in the RHS of rules (see <a class="xref" href="ch28_06.htm#SML2-CH-28-SECT-6-4" title="Rewrite Through Another Rule Set: $&gt;set">Section 28.6.4, "Rewrite Through Another Rule Set: $&gt;set"</A
>).
The output produced looks
like this:</P
><p class="para"><blockquote class="screen"><pre class="screen">---callsubr <code class="replaceable"><i>rset</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">Here, <code class="replaceable"><i>rset</I
></CODE
> is the text that was interpreted as the number
of the rule set, rather than the numeric value. If the number in
the configuration file was a symbolic name, then that symbolic
name is printed. (See <a class="xref" href="ch28_06.htm#SML2-CH-28-SECT-6-4" title="Rewrite Through Another Rule Set: $&gt;set">Section 28.6.4</A
>
for more details about the <code class="literal">$&gt;</CODE
> rewrite-operator.)</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-70">37.5.70 -d21.4</A
></H3
><p class="refpurpose">Result after rewriting by a rule</P
></DIV
><blockquote><div class="refsect1"><p class="para">If the LHS of a rule matches the workspace, the workspace
is rewritten by the RHS of that rule. The <code class="literal">-d21.4</CODE
> debugging
switch causes <em class="emphasis">sendmail</EM
> to print the result of a successful
rewrite:</P
><p class="para"><blockquote class="screen"><pre class="screen">rewritten as: <code class="replaceable"><i>addr</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">Note that the rewritten address (<code class="replaceable"><i>addr</I
></CODE
>) may be the result of
rewriting by a subroutine call.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-71">37.5.71 -d21.10</A
></H3
><p class="refpurpose">Announce failure</P
></DIV
><blockquote><div class="refsect1"><p class="para">If the LHS of a rule fails to match the workspace, the <code class="literal">-d21.10</CODE
>
debugging switch causes <em class="emphasis">sendmail</EM
> to print:</P
><p class="para"><blockquote class="screen"><pre class="screen">--- rule fails</PRE
></BLOCKQUOTE
></P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-72">37.5.72 -d21.12</A
></H3
><p class="refpurpose">Announce success and show LHS</P
></DIV
><blockquote><div class="refsect1"><p class="para"><a class="indexterm" name="AUTOID-57283"></A
>If the LHS of a rule matches the workspace, the <code class="literal">-d21.12</CODE
>
debugging switch causes <em class="emphasis">sendmail</EM
> to print:</P
><p class="para"><blockquote class="screen"><pre class="screen">--- rule matches</PRE
></BLOCKQUOTE
></P
><p class="para">The <code class="literal">-d21.12</CODE
> debugging switch also causes the LHS of each
rule to be printed before it is tried:</P
><p class="para"><blockquote class="screen"><pre class="screen">---trying rule: <code class="replaceable"><i>lhs</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">Remember that rules are pre-expanded when the configuration file is
read. As a consequence, defined macros appear as their values
in the <code class="replaceable"><i>lhs</I
></CODE
>, rather than in their <code class="literal">$</CODE
><code class="replaceable"><i>letter</I
></CODE
> form.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-73">37.5.73 -d21.15</A
></H3
><p class="refpurpose">Show $digit replacement</P
></DIV
><blockquote><div class="refsect1"><p class="para">The <code class="literal">-d21.15</CODE
> debugging switch causes <em class="emphasis">sendmail</EM
> to print
each replacement that is the result of a <code class="literal">$</CODE
><code class="replaceable"><i>digit</I
></CODE
>
rewrite-operator in the RHS:</P
><p class="para"><blockquote class="screen"><pre class="screen">$<code class="replaceable"><i>digit</I
></CODE
>: <code class="replaceable"><i>hex</I
></CODE
>=<code class="replaceable"><i>token</I
></CODE
> ...</PRE
></BLOCKQUOTE
></P
><p class="para">Here, <code class="literal">$</CODE
><code class="replaceable"><i>digit</I
></CODE
> is followed by one or 
more <code class="replaceable"><i>hex</I
></CODE
><code class="literal">=</CODE
><code class="replaceable"><i>token</I
></CODE
> pairs.
The <code class="replaceable"><i>hex</I
></CODE
> is the address in memory of the <code class="replaceable"><i>token</I
></CODE
>,
and the <code class="replaceable"><i>token</I
></CODE
> is the token from the LHS that is being
copied into the workspace. This output can run to many screens. </P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-74">37.5.74 -d21.35</A
></H3
><p class="refpurpose">Show token by token LHS matching</P
></DIV
><blockquote><div class="refsect1"><p class="para">In addition to the rewriting information shown by the debugging switches mentioned
above, the <code class="literal">-d21.35</CODE
> debugging switch also shows each
and every attempt by the LHS to match the workspace. Each comparison
is printed like this:</P
><p class="para"><blockquote class="screen"><pre class="screen">ap=<code class="replaceable"><i>workspace</I
></CODE
> rp=<code class="replaceable"><i>operator</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">Here, <code class="literal">ap</CODE
> (for <em class="emphasis">address part</EM
>) indicates 
the token in the workspace that the rule is currently trying to match.
The <code class="literal">rp</CODE
> (for <em class="emphasis">rule part</EM
>) is the operator or token at this
point in the LHS that is trying to match the workspace.
Note that the <code class="replaceable"><i>workspace</I
></CODE
> is a single token
from the workspace, and the <code class="replaceable"><i>operator</I
></CODE
> is a single operator
or token from the LHS of the current rule. A complete comparison
of the LHS 
to the workspace can produce several lines of output
for each rule.
This output can be useful for understanding how the pattern-matching 
algorithm works.</P
><p class="para">The <code class="literal">-d21.35</CODE
> debugging switch also shows the index advancing
to the next operator and what the corresponding state of the workspace
is at that time.</P
><p class="para"><blockquote class="screen"><pre class="screen">ADVANCE rp=<code class="replaceable"><i>operator</I
></CODE
> ap=<code class="replaceable"><i>workspace</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">This is useful for watching the left-hand side trying to find
a match.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-75">37.5.75 -d21.36</A
></H3
><p class="refpurpose">Trace class matching in the LHS</P
></DIV
><blockquote><div class="refsect1"><p class="para">The <code class="literal">-d21.36</CODE
> debugging switch causes <em class="emphasis">sendmail</EM
> to
print the following each time it finds a match for either the <code class="literal">$=</CODE
>
or <code class="literal">$~</CODE
> class-operator:</P
><p class="para"><blockquote class="screen"><pre class="screen">CLMATCH</PRE
></BLOCKQUOTE
></P
><p class="para">The <code class="literal">-d21.36</CODE
> switch also shows how
<em class="emphasis">sendmail</EM
> extends the token in the workspace and tries again,
should a match for any operator fail. That is, for all operators (not
just <code class="literal">$=</CODE
> or <code class="literal">$~</CODE
>), if the workspace contained
<em class="emphasis">usa.edu</EM
>, <em class="emphasis">sendmail</EM
> would first look up <em class="emphasis">usa</EM
>, then
<em class="emphasis">usa.</EM
>, and finally <em class="emphasis">usa.edu</EM
>. Each such attempt prints
as:</P
><p class="para"><blockquote class="screen"><pre class="screen">EXTEND rp=<code class="replaceable"><i>operator</I
></CODE
> ap=<code class="replaceable"><i>workspace</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">If there is still no match, <em class="emphasis">sendmail</EM
> has to back up
and try a different tack. In the case of <em class="emphasis">usa.edu</EM
>
it would back up to the dot. For example, if it were trying <code class="literal">$=X</CODE
>,
the output would look like this:</P
><p class="para"><blockquote class="screen"><pre class="screen">BACKUP  rp=$=X, ap=.</PRE
></BLOCKQUOTE
></P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-76">37.5.76 -d22.1</A
></H3
><p class="refpurpose">Trace tokenizing an address: prescan()</P
>(useful)</DIV
><blockquote><div class="refsect1"><p class="para">Processing of rules requires that all addresses be divided into
tokens.
The <code class="literal">-d22.1</CODE
> (a.k.a. <code class="literal">-d22</CODE
>) debugging switch causes
<em class="emphasis">sendmail</EM
> to print the various steps it takes in tokenizing
an address.</P
><p class="para">In addition to tokenizing, the <em class="emphasis">prescan</EM
>() routine also normalizes
addresses. That is, it removes RFC822-style comments and recognizes
quoted strings.
Be aware that rules are also viewed as addresses and processed by
<em class="emphasis">prescan</EM
>() when the configuration file is being read.</P
><p class="para">The <code class="literal">-d22.1</CODE
> debugging switch tells <em class="emphasis">sendmail</EM
> to complain if
the first token in the address it is parsing turns out to be nothing</P
><p class="para"><blockquote class="screen"><pre class="screen">prescan: null leading token</PRE
></BLOCKQUOTE
></P
><p class="para">This can happen if an address (or rule) contains only RFC822-style comments in parenthesis.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-77">37.5.77 -d22.11</A
></H3
><p class="refpurpose">Show address before prescan</P
>(useful)</DIV
><blockquote><div class="refsect1"><p class="para">The <code class="literal">-d22.11</CODE
> debugging switch causes the address to be printed
as it appears before any tokenizing or normalization:</P
><p class="para"><blockquote class="screen"><pre class="screen">prescan: <code class="replaceable"><i>addr</I
></CODE
></PRE
></BLOCKQUOTE
></P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-78">37.5.78 -d22.12</A
></H3
><p class="refpurpose">Show address after prescan</P
>(useful)</DIV
><blockquote><div class="refsect1"><p class="para">The <code class="literal">-d22.12</CODE
> debugging switch causes the address to be printed
as it appears after all tokenizing and normalization:</P
><p class="para"><blockquote class="screen"><pre class="screen">prescan==&gt; <code class="replaceable"><i>addr</I
></CODE
></PRE
></BLOCKQUOTE
></P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-79">37.5.79 -d22.36</A
></H3
><p class="refpurpose">Show each token</P
></DIV
><blockquote><div class="refsect1"><p class="para">The <code class="literal">-d22.36</CODE
> debugging switch causes each token to be printed
when found:</P
><p class="para"><blockquote class="screen"><pre class="screen">tok=<code class="replaceable"><i>token</I
></CODE
></PRE
></BLOCKQUOTE
></P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-80">37.5.80 -d22.101</A
></H3
><p class="refpurpose">Trace low-level state machine</P
></DIV
><blockquote><div class="refsect1"><p class="para">For the purpose of tokenizing, an address is viewed as a stream
of characters.
The process of tokenizing and normalizing is driven by a <em class="emphasis">state</EM
>
machine that handles the stream one character at a time.
For example, if the current character is <code class="literal">@</CODE
>,
<em class="emphasis">sendmail</EM
> sees that it has found both the start and end of
a token and so resets its state to begin looking for a new token.
But if the current character is <code class="literal">a</CODE
> and <em class="emphasis">sendmail</EM
> is
currently gathering a token, it knows that it should continue
to gather.
The use of a state machine enables <em class="emphasis">sendmail</EM
> to easily
keep track of things such as the nesting level of angle brackets and
whether or not a quoted string is present.</P
><p class="para">The <code class="literal">-d22.101</CODE
> debugging switch causes <em class="emphasis">sendmail</EM
> to
output two lines of information. The first shows entry into
a state (or continuation of a state):</P
><p class="para"><blockquote class="screen"><pre class="screen">c=<code class="replaceable"><i>char</I
></CODE
>, s=<code class="replaceable"><i>state</I
></CODE
>;</PRE
></BLOCKQUOTE
></P
><p class="para">Here, <em class="emphasis">char</EM
> is the current character in the stream of characters
that makes up the original address. The <code class="replaceable"><i>state</I
></CODE
> is a two-digit
octal representation of the current state. The first digit modifies
the second and is a 2 (which
means that this is a meta-character so don't pass it through), a 4 (which means
to break the token at this character), or a 6 (which means both 2 and 4).
The second digit indicates the state.  The list of states and their
meanings are shown in
<a class="xref" href="#SML2-CH-37-TAB-8" title="States Used by parseaddr() to Tokenize Addresses">Table 37.9</A
>.
The semicolon separates this output from the rest of the line that
is printed below.</P
><table class="table"><caption class="table"><a class="title" name="SML2-CH-37-TAB-8">Table 37.9: States Used by parseaddr() to Tokenize Addresses</A
></CAPTION
><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1">Decimal</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Octal</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Name</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Description</TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">0</TD
><td class="entry" rowspan="1" colspan="1">00</TD
><td class="entry" rowspan="1" colspan="1">OPR</TD
><td class="entry" rowspan="1" colspan="1">A wildcard operator (such as <code class="literal">$*</CODE
>)</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">1</TD
><td class="entry" rowspan="1" colspan="1">01</TD
><td class="entry" rowspan="1" colspan="1">ATM</TD
><td class="entry" rowspan="1" colspan="1">An atom (text token)</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">2</TD
><td class="entry" rowspan="1" colspan="1">02</TD
><td class="entry" rowspan="1" colspan="1">QST</TD
><td class="entry" rowspan="1" colspan="1">Inside a quoted string</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">3</TD
><td class="entry" rowspan="1" colspan="1">03</TD
><td class="entry" rowspan="1" colspan="1">SPC</TD
><td class="entry" rowspan="1" colspan="1">Chewing up spaces</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">4</TD
><td class="entry" rowspan="1" colspan="1">04</TD
><td class="entry" rowspan="1" colspan="1">ONE</TD
><td class="entry" rowspan="1" colspan="1">Pick up one character</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">5</TD
><td class="entry" rowspan="1" colspan="1">04</TD
><td class="entry" rowspan="1" colspan="1">ILL</TD
><td class="entry" rowspan="1" colspan="1">Illegal character</TD
></TR
></TBODY
></TABLE
><p class="para">The rest of the output produced by the <code class="literal">-d22.101</CODE
>
debugging switch shows the state changing to a new state:</P
><p class="para"><blockquote class="screen"><pre class="screen">ns=<code class="replaceable"><i>nstate</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">Here, <code class="replaceable"><i>nstate</I
></CODE
> is the new state number, printed in octal with
a leading zero.</P
><p class="para">Note that the level <code class="literal">101</CODE
> in <code class="literal">-d22.101</CODE
> means that this
debugging output is for true experts only.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-81">37.5.81 -d24.4</A
></H3
><p class="refpurpose">Trace address allocation</P
></DIV
><blockquote><div class="refsect1"><p class="para">The <code class="literal">-d24.4</CODE
> debugging switch
[5]
tells <em class="emphasis">sendmail</EM
> to print a message upon its 
entry into the <em class="emphasis">allocaddr</EM
>() routine:</P
><blockquote class="footnote"><p class="para">[5] There is no <code class="literal">-d24.1</CODE
> information.</P
></BLOCKQUOTE
><p class="para"><blockquote class="screen"><pre class="screen">allocaddr(flags=<code class="replaceable"><i>flags</I
></CODE
>, paddr=<code class="replaceable"><i>paddr</I
></CODE
>)</PRE
></BLOCKQUOTE
></P
><p class="para">Here, the address in <code class="replaceable"><i>paddr</I
></CODE
> will be copied into another address
(not shown). The <code class="replaceable"><i>flags</I
></CODE
> is a hexadecimal representation of
the <code class="literal">RF_</CODE
> flags used by <em class="emphasis">sendmail</EM
> to communicate with
some of its internal routines. The meanings of the bits in these
flags are shown in
<a class="xref" href="#SML2-CH-37-TAB-9" title="sendmail's Internal RF_ flags">Table 37.10</A
>.</P
><table class="table"><caption class="table"><a class="title" name="SML2-CH-37-TAB-9">Table 37.10: sendmail's Internal RF_ flags</A
></CAPTION
><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1">Hex</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Name</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Description</TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">000</TD
><td class="entry" rowspan="1" colspan="1">RF_COPYNONE</TD
><td class="entry" rowspan="1" colspan="1">Don't copy anything</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">001</TD
><td class="entry" rowspan="1" colspan="1">RF_SENDERADDR</TD
><td class="entry" rowspan="1" colspan="1">Set = sender address, otherwise recipient</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">002</TD
><td class="entry" rowspan="1" colspan="1">RF_HEADERADDR</TD
><td class="entry" rowspan="1" colspan="1">Set = header address, otherwise envelope</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">004</TD
><td class="entry" rowspan="1" colspan="1">RF_CANONICAL</TD
><td class="entry" rowspan="1" colspan="1">Strip RFC822 comments</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">008</TD
><td class="entry" rowspan="1" colspan="1">RF_ADDDOMAIN</TD
><td class="entry" rowspan="1" colspan="1">Okay to append a domain</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">010</TD
><td class="entry" rowspan="1" colspan="1">RF_COPYPARSE</TD
><td class="entry" rowspan="1" colspan="1">Copy parsed user and host</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">020</TD
><td class="entry" rowspan="1" colspan="1">RF_COPYPADDR</TD
><td class="entry" rowspan="1" colspan="1">Copy the print address</TD
></TR
></TBODY
></TABLE
><p class="para">If RF_COPYPARSE is set in <code class="replaceable"><i>flags</I
></CODE
>, the temporary strings
for the host and user in the passed address (not shown) are allocated
permanent storage in memory.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-82">37.5.82 -d24.5</A
></H3
><p class="refpurpose">Trace assembly of tokens</P
></DIV
><blockquote><div class="refsect1"><p class="para">The <code class="literal">-d24.5</CODE
> debugging switch tells <em class="emphasis">sendmail</EM
> to print
a message upon its entry into the <em class="emphasis">buildaddr</EM
>() routine.</P
><p class="para"><blockquote class="screen"><pre class="screen">buildaddr, flags=<code class="replaceable"><i>flags</I
></CODE
>, tv=<code class="replaceable"><i>tokens</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">The <em class="emphasis">buildaddr</EM
>() routine takes an array of separate tokens
and pastes them back together again. The <code class="replaceable"><i>flags</I
></CODE
> are ORed 
together hexadecimal values as documented in
<a class="xref" href="#SML2-CH-37-TAB-9" title="sendmail's Internal RF_ flags">Table 37.10</A
>.
The RF_SENDERADDR and RF_HEADERADDR flags tell
<em class="emphasis">buildaddr</EM
>() which rewriting rules to use in processing
the address.</P
><p class="para">The array of <code class="replaceable"><i>tokens</I
></CODE
> being assembled is
printed on a single line, each separated from the other
by a space.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-83">37.5.83 -d24.6</A
></H3
><p class="refpurpose">Show result of buildaddr()</P
></DIV
><blockquote><div class="refsect1"><p class="para">The <code class="literal">-d24.6</CODE
> debugging switch tells <em class="emphasis">sendmail</EM
> to
print the result of <em class="emphasis">buildaddr</EM
>()'s attempt to reconstruct an address.</P
><p class="para"><blockquote class="screen"><pre class="screen">buildaddr =&gt; <i class="lineannotation">output of printaddr</I
>()<i class="lineannotation"> here (see <a class="xref" href="ch37_03.htm" title="The Output Produced by printaddr()">Section 37.3.1</A
>)</I
></PRE
></BLOCKQUOTE
></P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-84">37.5.84 -d25.1</A
></H3
><p class="refpurpose">Trace &quot;sendtolist&quot;</P
>(useful)</DIV
><blockquote><div class="refsect1"><p class="para">Each recipient address for a mail message is added one-by-one to an
internal list of recipients. The <code class="literal">-d25.1</CODE
> (a.k.a. <code class="literal">-d25</CODE
>) debugging switch
causes <em class="emphasis">sendmail</EM
> to print each address as it is added to
this list:</P
><p class="para"><blockquote class="screen"><pre class="screen">sendto: <code class="replaceable"><i>list</I
></CODE
>
   ctladdr= <i class="lineannotation">output of printaddr</I
>()<i class="lineannotation"> here (see <a class="xref" href="ch37_03.htm" title="The Output Produced by printaddr()">Section 37.3.1</A
>)</I
></PRE
></BLOCKQUOTE
></P
><p class="para">After each is added, those that have selected a
delivery agent with the <code class="literal">F=A</CODE
> (see <a class="xref" href="ch30_08.htm" title="">Section 30.8.12, F=A</A
>)
and <code class="literal">F=w</CODE
> (see <a class="xref" href="ch30_08.htm" title="">Section 30.8.43, F=w</A
>) flags set
are further processed by aliasing and by reading
the user's <em class="emphasis">~/.forward</EM
> file. Each new address that results
from this processing is added to the list, and any duplicates
are discarded. </P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-85">37.5.85 -d26.1</A
></H3
><p class="refpurpose">Trace recipient queueing</P
>(useful)</DIV
><blockquote><div class="refsect1"><p class="para">The <code class="literal">-d26.1</CODE
> (a.k.a. <code class="literal">-d26</CODE
>) debugging switch causes <em class="emphasis">sendmail</EM
>
to print the addresses of recipients as they are added to the <em class="emphasis">send queue</EM
>&nbsp;- an internal list of addresses that <em class="emphasis">sendmail</EM
>
uses to sort and remove duplicates from the recipient addresses for
a mail message. </P
><p class="para">On entry to the <em class="emphasis">recipient</EM
>() routine, the <code class="literal">-d26.1</CODE
>
debugging switch causes <em class="emphasis">sendmail</EM
> to
print the raw address (as it appears before adding it to the send queue):</P
><p class="para"><blockquote class="screen"><pre class="screen">recipient (<code class="replaceable"><i>level</I
></CODE
>): <i class="lineannotation">output of printaddr</I
>()<i class="lineannotation"> here (see <a class="xref" href="ch37_03.htm" title="The Output Produced by printaddr()">Section 37.3.1</A
>)</I
></PRE
></BLOCKQUOTE
></P
><p class="para">An address can be the result of alias expansion. Because the process
of aliasing (including <code class="literal">:include:</CODE
> and <em class="emphasis">.forward</EM
> files)
can be recursive, it is possible to get too many alias expansions. 
The <code class="replaceable"><i>level</I
></CODE
> shows the number of alias expansions so far. If that
number exceeds MaxAliasRecursion (as hard coded in <em class="emphasis">conf.c</EM
> as 10),
<em class="emphasis">sendmail</EM
> issues this warning:</P
><p class="para"><blockquote class="screen"><pre class="screen">aliasing/forwarding loop broken (<code class="replaceable"><i>level</I
></CODE
> aliases deep; <code class="replaceable"><i>MAXRCRSN</I
></CODE
> max)</PRE
></BLOCKQUOTE
></P
><p class="para">&#13;Next <em class="emphasis">sendmail</EM
> compares
the new address to others that are already in the send queue. If it finds
a duplicate, it prints the following message and skips the
new address:</P
><p class="para"><blockquote class="screen"><pre class="screen"><code class="replaceable"><i>addr</I
></CODE
> in sendq: <i class="lineannotation">output of printaddr</I
>()<i class="lineannotation"> here (see <a class="xref" href="ch37_03.htm" title="The Output Produced by printaddr()">Section 37.3.1</A
>)</I
></PRE
></BLOCKQUOTE
></P
><p class="para">Here, <code class="replaceable"><i>addr</I
></CODE
> is the duplicate address. 
Information about that address is produced with the <em class="emphasis">printaddr</EM
>()
routine.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-86">37.5.86 -d26.8</A
></H3
><p class="refpurpose">Trace self destructing addresses</P
></DIV
><blockquote><div class="refsect1"><p class="para">Certain addresses can &quot;self destruct&quot; because they can cause an endless loop.
Consider the address <code class="literal">A</CODE
>. If <code class="literal">A</CODE
> is aliased to <code class="literal">B</CODE
> and
<code class="literal">B</CODE
> is aliased to <code class="literal">A</CODE
>, <code class="literal">A</CODE
> is a self-destructive address.
The <code class="literal">-d26.8</CODE
> debugging switch causes <em class="emphasis">sendmail</EM
> to print
the address that is being tested for self-destruction:</P
><p class="para"><blockquote class="screen"><pre class="screen">testselfdestruct: <i class="lineannotation">output of printaddr</I
>()<i class="lineannotation"> here (see <a class="xref" href="ch37_03.htm" title="The Output Produced by printaddr()">Section 37.3.1</A
>)</I
></PRE
></BLOCKQUOTE
></P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-87">37.5.87 -d26.10</A
></H3
><p class="refpurpose">Show full send queue in testselfdestruct</P
></DIV
><blockquote><div class="refsect1"><p class="para">The <code class="literal">-d26.10</CODE
> debugging switch causes the entire send queue to
be printed after the <code class="literal">testselfdestruct</CODE
> above:</P
><p class="para"><blockquote class="screen"><pre class="screen">SENDQ:
<i class="lineannotation">output of printaddr</I
>()<i class="lineannotation"> here (see <a class="xref" href="ch37_03.htm" title="The Output Produced by printaddr()">Section 37.3.1</A
>)</I
>
--</PRE
></BLOCKQUOTE
></P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-88">37.5.88 -d27.1</A
></H3
><p class="refpurpose">Trace aliasing</P
>(useful)</DIV
><blockquote><div class="refsect1"><p class="para">The <code class="literal">-d27.1</CODE
> (a.k.a. <code class="literal">-d27</CODE
>) debugging switch causes <em class="emphasis">sendmail</EM
> to print
each step it takes when processing local addresses through aliasing.
First, <em class="emphasis">sendmail</EM
> prints the addresses being aliased:</P
><p class="para"><blockquote class="screen"><pre class="screen">alias(<code class="replaceable"><i>addr</I
></CODE
>)</PRE
></BLOCKQUOTE
></P
><p class="para">Here, <code class="replaceable"><i>addr</I
></CODE
> is the address (usually a local username)
that is about to be aliased. Note that it
may already be the result of previous aliasing.
If the <code class="replaceable"><i>addr</I
></CODE
> can be aliased, its transformation is printed as:</P
><p class="para"><blockquote class="screen"><pre class="screen"><code class="replaceable"><i>addr</I
></CODE
> (<code class="replaceable"><i>host</I
></CODE
>, <code class="replaceable"><i>user</I
></CODE
>) aliased to <code class="replaceable"><i>newaddr</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">Here, <code class="replaceable"><i>addr</I
></CODE
> is the address before aliasing,
and the <code class="replaceable"><i>newaddr</I
></CODE
> is the new address that resulted 
from successful aliasing.
The <code class="replaceable"><i>host</I
></CODE
> and <code class="replaceable"><i>user</I
></CODE
> are the hostname and username from
the recipient part of the envelope.
If the <code class="replaceable"><i>addr</I
></CODE
> cannot be aliased, nothing is printed. </P
><p class="para">During initialization,
if the <em class="emphasis">aliases</EM
> database cannot be opened, the <code class="literal">-d27.1</CODE
> debugging switch causes
<em class="emphasis">sendmail</EM
> to print:</P
><p class="para"><blockquote class="screen"><pre class="screen">Can't open <code class="replaceable"><i>aliasfile</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">Here, <code class="replaceable"><i>aliasfile</I
></CODE
> is the full pathname of the <em class="emphasis">aliases</EM
>(5)
file, as declared by the <code class="literal">AliasFile</CODE
> (<code class="literal">A</CODE
>) option 
(see <a class="xref" href="ch34_08.htm" title="">Section 34.8.1, AliasFile (A)</A
>) or implied with
the service-switch file and the <code class="literal">ServiceSwitchFile</CODE
> option
(see <a class="xref" href="ch34_08.htm" title="">Section 34.8.61</A
>).</P
><p class="para">If the failure was due to a faulty map declaration, 
<em class="emphasis">sendmail</EM
> logs the following error:</P
><p class="para"><blockquote class="screen"><pre class="screen">setalias: unknown alias class <code class="replaceable"><i>mapclass</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">If the map is not one that is allowed to provide alias services,
<em class="emphasis">sendmail</EM
> logs this error:</P
><p class="para"><blockquote class="screen"><pre class="screen">setalias: map class <code class="replaceable"><i>mapclass</I
></CODE
> can't handle aliases</PRE
></BLOCKQUOTE
></P
><p class="para">If <em class="emphasis">sendmail</EM
> is trying to create a database file and it can't (usually
when it is run with the <code class="literal">-bi</CODE
> command-line switch or run
as <em class="emphasis">newaliases</EM
>), the <code class="literal">-d27.1</CODE
>
debugging switch causes the following error to be printed:</P
><p class="para"><blockquote class="screen"><pre class="screen">Can't create database for <code class="replaceable"><i>filename</I
></CODE
>: <i class="lineannotation">reason here</I
></PRE
></BLOCKQUOTE
></P
><p class="para">A self-destructive alias can cause a dangerous loop to occur.
For example, the following two
aliases can lead to a loop on the host <em class="emphasis">mailhost</EM
>:</P
><p class="para"><blockquote class="screen"><pre class="screen">jake:           Jake_Bair
Jake_Bair:      jake@mailhost</PRE
></BLOCKQUOTE
></P
><p class="para">The <code class="literal">-d27.1</CODE
> debugging switch causes the following message to be printed when
<em class="emphasis">sendmail</EM
> tests an address to see whether it loops:</P
><p class="para"><blockquote class="screen"><pre class="screen">self_reference(<code class="replaceable"><i>addr</I
></CODE
>)
        ... no self ref                    <i class="lineannotation"><img src="../chars/larr.gif" alt="&lt;-">if it didn't loop</I
>
        ... cannot break loop for &quot;<code class="replaceable"><i>addr</I
></CODE
>&quot;   <i class="lineannotation"><img src="../chars/larr.gif" alt="&lt;-">if it's unbreakable</I
></PRE
></BLOCKQUOTE
></P
><p class="para">An alias loop is unbreakable if no local username can be found in the list
of aliases.</P
><p class="para">The <code class="literal">-d27.1</CODE
> debugging
switch also causes <em class="emphasis">sendmail</EM
> to print the following message
when it is attempting to read the user's <em class="emphasis">~/.forward</EM
> file:</P
><p class="para"><blockquote class="screen"><pre class="screen">forward(<em class="emphasis">user</EM
>)</PRE
></BLOCKQUOTE
></P
><p class="para">If the <em class="emphasis">user</EM
> has no home directory listed in the <em class="emphasis">passwd</EM
>(5)
file, <em class="emphasis">sendmail</EM
> issues
the following message with a <em class="emphasis">syslog</EM
>(3) level of LOG_CRIT:</P
><p class="para"><blockquote class="screen"><pre class="screen">forward: no home</PRE
></BLOCKQUOTE
></P
><p class="para">&#13;The <code class="literal">-d27.1</CODE
> debugging
switch also causes <em class="emphasis">sendmail</EM
> to print a warning if
it cannot open or lock an alias file for automatic rebuilding
(see <a class="xref" href="ch34_08.htm" title="">Section 34.8.4, AutoRebuildAliases (D)</A
>, the <code class="literal">AutoRebuildAliases</CODE
> 
(<code class="literal">D</CODE
>) option):</P
><p class="para"><blockquote class="screen"><pre class="screen">Can't open <code class="replaceable"><i>file</I
></CODE
>: <i class="lineannotation"> reason here</I
>
newaliases: cannot open <code class="replaceable"><i>file</I
></CODE
>: <i class="lineannotation"> reason here</I
></PRE
></BLOCKQUOTE
></P
><p class="para">Here, the error might be caused by the file simply not existing (as would
be the case if it was NSF-mounted on a down host) or an I/O error
(as would be the case for a bad disk).</P
><p class="para"><blockquote class="screen"><pre class="screen">warning: cannot lock <code class="replaceable"><i>file</I
></CODE
>: <i class="lineannotation"> reason here</I
></PRE
></BLOCKQUOTE
></P
><p class="para">Failure to lock can be caused by system errors or by the
file being read-only. Note that maintaining an aliases file
under revision control can cause a read-only copy to exist, resulting
in the following error:</P
><p class="para"><blockquote class="screen"><pre class="screen">Can't create database for <code class="replaceable"><i>file</I
></CODE
>: <i class="lineannotation"> reason here</I
>
Cannot create database for alias file <code class="replaceable"><i>file</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">This error indicates that the output file (the <em class="emphasis">dbm</EM
>(3) or
<em class="emphasis">db</EM
>(3) file) could not be created or written.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-89">37.5.89 -d27.2</A
></H3
><p class="refpurpose">Include file, self reference, error on home</P
>(useful)</DIV
><blockquote><div class="refsect1"><p class="para">The <code class="literal">-d27.2</CODE
> debugging switch causes each <code class="literal">:include:</CODE
>
and <em class="emphasis">.forward</EM
> filename to be printed before each
is opened for reading:</P
><p class="para"><blockquote class="screen"><pre class="screen">include(<code class="replaceable"><i>file</I
></CODE
>)</PRE
></BLOCKQUOTE
></P
><p class="para">The <code class="literal">-d27.2</CODE
> debugging switch also causes additional information to be
printed for the alias loop check described above:</P
><p class="para"><blockquote class="screen"><pre class="screen">self_reference(<code class="replaceable"><i>addr</I
></CODE
>)
        ... getpwnam(<code class="replaceable"><i>user</I
></CODE
>)...found     <i class="lineannotation"><img src="../chars/larr.gif" alt="&lt;-">if in passwd file</I
>
        ... getpwnam(<code class="replaceable"><i>user</I
></CODE
>)...failed    <i class="lineannotation"><img src="../chars/larr.gif" alt="&lt;-"> otherwise</I
></PRE
></BLOCKQUOTE
></P
><p class="para">The <code class="literal">-d27.2</CODE
> debugging switch also causes <em class="emphasis">sendmail</EM
> to print a message
every time it sleeps while waiting for the <em class="emphasis">aliases</EM
> database to be rebuilt:</P
><p class="para"><blockquote class="screen"><pre class="screen">aliaswait: sleeping for <code class="replaceable"><i>sec</I
></CODE
> seconds</PRE
></BLOCKQUOTE
></P
><p class="para">Also, when processing the <em class="emphasis">~/.forward</EM
> file, <em class="emphasis">sendmail</EM
> may experience
a temporary inability to read it (such as when an NFS server is down). In that
case the <code class="literal">-d27.2</CODE
> debugging switch causes the following message to
be printed:</P
><p class="para"><blockquote class="screen"><pre class="screen">forward: transient error on <code class="replaceable"><i>home</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">Here the message will be queued and tried again later.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-90">37.5.90 -d27.3</A
></H3
><p class="refpurpose">Forwarding path and alias wait</P
>(useful)</DIV
><blockquote><div class="refsect1"><p class="para">The <code class="literal">-d27.3</CODE
> debugging
switch causes each path for a possible <em class="emphasis">.forward</EM
> file to be
printed before it is tried:</P
><p class="para"><blockquote class="screen"><pre class="screen">forward: trying <em class="emphasis">file</EM
></PRE
></BLOCKQUOTE
></P
><p class="para">Here, <em class="emphasis">file</EM
> is each file in the path of files declared by
the <code class="literal">ForwardPath</CODE
> (<code class="literal">J</CODE
>) option (see <a class="xref" href="ch34_08.htm" title="">Section 34.8.27, ForwardPath (J)</A
>).</P
><p class="para">The <code class="literal">-d27.3</CODE
> debugging switch also causes <em class="emphasis">sendmail</EM
> to trace its
wait for another alias rebuild to complete 
(see <a class="xref" href="ch24_05.htm#SML2-CH-24-SECT-5-1" title="Rebuild the Alias Database">Section 24.5.1, "Rebuild the Alias Database"</A
>). First <em class="emphasis">sendmail</EM
>
prints the class (such as <code class="replaceable"><i>hash</I
></CODE
>) and filename for which it will wait:</P
><p class="para"><blockquote class="screen"><pre class="screen">aliaswait(<code class="replaceable"><i>class</I
></CODE
>:<code class="replaceable"><i>file</I
></CODE
>)</PRE
></BLOCKQUOTE
></P
><p class="para">If the database is not rebuildable (as would be the case with a network
map class like <em class="emphasis">nis</EM
>, <em class="emphasis">nis+</EM
>, or <em class="emphasis">hesiod</EM
>), the <code class="literal">-d27.3</CODE
> debugging switch
causes the following to be printed:</P
><p class="para"><blockquote class="screen"><pre class="screen">aliaswait: not rebuildable</PRE
></BLOCKQUOTE
></P
><p class="para">If the <code class="replaceable"><i>file</I
></CODE
> specified doesn't exist,  the <code class="literal">-d27.3</CODE
> debugging switch
prints</P
><p class="para"><blockquote class="screen"><pre class="screen">aliaswait: no source file</PRE
></BLOCKQUOTE
></P
><p class="para">The <code class="literal">-d27.3</CODE
> debugging switch also causes <em class="emphasis">sendmail</EM
> to print
an error message if there was a read error while processing a <code class="literal">:include:</CODE
>
or <em class="emphasis">.forward</EM
> file:</P
><p class="para"><blockquote class="screen"><pre class="screen">include: read error: <i class="lineannotation">reason here</I
></PRE
></BLOCKQUOTE
></P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-91">37.5.91 -d27.4</A
></H3
><p class="refpurpose">Print not safe</P
>(useful)</DIV
><blockquote><div class="refsect1"><p class="para">A <em class="emphasis">~/.forward</EM
> file must be owned by the user or by <em class="emphasis">root</EM
>.
If it is not, it is considered unsafe, and <em class="emphasis">sendmail</EM
>
ignores it. The <code class="literal">-d27.4</CODE
> debugging switch causes <em class="emphasis">sendmail</EM
>
to print a message describing any such file it finds unsafe:</P
><p class="para"><blockquote class="screen"><pre class="screen">include: not safe (uid=<code class="replaceable"><i>uid</I
></CODE
>)</PRE
></BLOCKQUOTE
></P
><p class="para">Note that a file is considered unsafe if, among other things,
it lacks all read permissions.</P
><p class="para">The <code class="literal">-d27.4</CODE
> debugging switch also causes <em class="emphasis">sendmail</EM
> to print
information about a <code class="literal">:include:</CODE
> file beyond that printed
with <code class="literal">-d27.2</CODE
> above:</P
><p class="para"><blockquote class="screen"><pre class="screen">include(<code class="replaceable"><i>file</I
></CODE
>)             <i class="lineannotation"><img src="../chars/larr.gif" alt="&lt;-"> printed with -d27.2</I
>
   ruid=<code class="replaceable"><i>ruid</I
></CODE
> euid=<code class="replaceable"><i>euid</I
></CODE
>    <i class="lineannotation"><img src="../chars/larr.gif" alt="&lt;-"> printed with -d27.4</I
></PRE
></BLOCKQUOTE
></P
><p class="para">&#13;This shows the real userID (<code class="replaceable"><i>ruid</I
></CODE
>) and effective userID
(<code class="replaceable"><i>euid</I
></CODE
>) of the current running <em class="emphasis">sendmail</EM
>.</P
><p class="para">The <code class="literal">-d27.4</CODE
> debugging switch also causes <em class="emphasis">sendmail</EM
> to print
an error if a <code class="literal">:include:</CODE
> or <em class="emphasis">~/.forward</EM
> file cannot be opened for reading:</P
><p class="para"><blockquote class="screen"><pre class="screen">include: open: <i class="lineannotation">reason here</I
></PRE
></BLOCKQUOTE
></P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-92">37.5.92 -d27.5</A
></H3
><p class="refpurpose">Trace aliasing with printaddr()</P
></DIV
><blockquote><div class="refsect1"><p class="para">The <code class="literal">-d27.5</CODE
> debugging switch tells <em class="emphasis">sendmail</EM
> to print
several addresses with <em class="emphasis">printaddr</EM
>() (see <a class="xref" href="ch37_03.htm" title="The Output Produced by printaddr()">Section 37.3.1</A
>)
as each one is handled.</P
><p class="para">When an address is aliased to another, the original needs to be
marked as one that shouldn't be delivered. The <code class="literal">QDONTSEND</CODE
>
below means just that:</P
><p class="para"><blockquote class="screen"><pre class="screen">alias: QDONTSEND <i class="lineannotation">output of printaddr</I
>()<i class="lineannotation"> here (see <a class="xref" href="ch37_03.htm" title="The Output Produced by printaddr()">Section 37.3.1</A
>)</I
></PRE
></BLOCKQUOTE
></P
><p class="para">If there was a self-reference, the retained address is printed like this:</P
><p class="para"><blockquote class="screen"><pre class="screen">sendtolist: QSELFREF <i class="lineannotation">output of printaddr</I
>()<i class="lineannotation"> here (see <a class="xref" href="ch37_03.htm" title="The Output Produced by printaddr()">Section 37.3.1</A
>)</I
></PRE
></BLOCKQUOTE
></P
><p class="para">If the original (before the test for a self-reference) is not the
same as the retained address, the original must be marked for nondelivery:</P
><p class="para"><blockquote class="screen"><pre class="screen">sendtolist: QDONTSEND <i class="lineannotation">output of printaddr</I
>()<i class="lineannotation"> here (see <a class="xref" href="ch37_03.htm" title="The Output Produced by printaddr()">Section 37.3.1</A
>)</I
></PRE
></BLOCKQUOTE
></P
><p class="para">If an address resulted from a <code class="literal">:include:</CODE
> or <em class="emphasis">~/.forward</EM
> file, it will have
a controlling user associated with it. That controlling user's address
needs to be marked for nondelivery:</P
><p class="para"><blockquote class="screen"><pre class="screen">include: QDONTSEND <i class="lineannotation">output of printaddr</I
>()<i class="lineannotation"> here (see <a class="xref" href="ch37_03.htm" title="The Output Produced by printaddr()">Section 37.3.1</A
>)</I
></PRE
></BLOCKQUOTE
></P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-93">37.5.93 -d27.8</A
></H3
><p class="refpurpose">Show setting up an alias map</P
></DIV
><blockquote><div class="refsect1"><p class="para">The <code class="literal">-d27.8</CODE
> debugging switch tells <em class="emphasis">sendmail</EM
> to print
the string passed to its internal <em class="emphasis">setalias</EM
>() routine.</P
><p class="para"><blockquote class="screen"><pre class="screen">setalias(<code class="replaceable"><i>what</I
></CODE
>)</PRE
></BLOCKQUOTE
></P
><p class="para">Here, <code class="replaceable"><i>what</I
></CODE
> is one of the items listed with the 
<code class="literal">AliasFile</CODE
> (<code class="literal">A</CODE
>) option (see <a class="xref" href="ch34_08.htm" title="">Section 34.8.1</A
>),
such as <em class="emphasis">/etc/aliases</EM
>,
or implied with
the service-switch file and the <code class="literal">ServiceSwitchFile</CODE
> option
(see <a class="xref" href="ch34_08.htm" title="">Section 34.8.61</A
>).</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-94">37.5.94 -d27.9</A
></H3
><p class="refpurpose">Show uid/gid changes with :include: reads</P
>(useful)</DIV
><blockquote><div class="refsect1"><p class="para">The <code class="literal">-d27.9</CODE
> debugging switch causes <em class="emphasis">sendmail</EM
> to trace
the setting and resetting of its <em class="emphasis">uid</EM
> and <em class="emphasis">gid</EM
> identities
when processing <code class="literal">:include:</CODE
> and <em class="emphasis">~/.forward</EM
> files. First an additional line
is printed below the output of the <code class="literal">-d27.2</CODE
> and <code class="literal">-d27.4</CODE
>
debugging switches:</P
><p class="para"><blockquote class="screen"><pre class="screen">include(<code class="replaceable"><i>file</I
></CODE
>)             <i class="lineannotation"><img src="../chars/larr.gif" alt="&lt;-"> printed with -d27.2</I
>
   ruid=<code class="replaceable"><i>ruid</I
></CODE
> euid=<code class="replaceable"><i>euid</I
></CODE
>    <i class="lineannotation"><img src="../chars/larr.gif" alt="&lt;-"> printed with -d27.4</I
>
include: old uid = <code class="replaceable"><i>ruid</I
></CODE
>/<code class="replaceable"><i>euid</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">The second and third lines above both contain the same information. After the
new line is printed,
<em class="emphasis">sendmail</EM
> may or may not change its identity depending on the
nature of a <code class="literal">:include:</CODE
> or <em class="emphasis">~/.forward</EM
> file and that file's controlling user.
Whether it changed or not, <em class="emphasis">sendmail</EM
> prints:</P
><p class="para"><blockquote class="screen"><pre class="screen">include: new uid = <code class="replaceable"><i>ruid</I
></CODE
>/<code class="replaceable"><i>euid</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">After <em class="emphasis">sendmail</EM
> has finished processing a <code class="literal">:include:</CODE
> or <em class="emphasis">~/.forward</EM
> file,
it resets its <em class="emphasis">uid</EM
> and <em class="emphasis">gid</EM
> back to their original values
and displays the result:</P
><p class="para"><blockquote class="screen"><pre class="screen">include: reset uid = <code class="replaceable"><i>ruid</I
></CODE
>/<code class="replaceable"><i>euid</I
></CODE
></PRE
></BLOCKQUOTE
></P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-95">37.5.95 -d27.14</A
></H3
><p class="refpurpose">Show controlling user that caused change in identity</P
></DIV
><blockquote><div class="refsect1"><p class="para">The <code class="literal">-d27.14</CODE
> debugging switch causes <em class="emphasis">sendmail</EM
> to print
the controlling user's address that led to the changing of the
<em class="emphasis">uid</EM
> and <em class="emphasis">gid</EM
> or the currently running process:</P
><p class="para"><blockquote class="screen"><pre class="screen">include(<code class="replaceable"><i>file</I
></CODE
>)                 <i class="lineannotation"><img src="../chars/larr.gif" alt="&lt;-"> printed with -d27.2</I
>
   ruid=<code class="replaceable"><i>ruid</I
></CODE
> euid=<code class="replaceable"><i>euid</I
></CODE
>        <i class="lineannotation"><img src="../chars/larr.gif" alt="&lt;-"> printed with -d27.4</I
>
ctladdr <code class="replaceable"><i>addr                  </I
></CODE
><i class="lineannotation"><img src="../chars/larr.gif" alt="&lt;-"> output of printaddr</I
>()<i class="lineannotation"> produced with this -d27.14</I
>
include: old uid = <code class="replaceable"><i>ruid</I
></CODE
>/<code class="replaceable"><i>euid</I
></CODE
>  <i class="lineannotation"><img src="../chars/larr.gif" alt="&lt;-"> printed with -d27.9</I
></PRE
></BLOCKQUOTE
></P
><p class="para">The output of the <em class="emphasis">printaddr</EM
>() routine is described
in <a class="xref" href="ch37_03.htm" title="The Output Produced by printaddr()">Section 37.3.1</A
>.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-96">37.5.96 -d27.20</A
></H3
><p class="refpurpose">Show how alias will be looked up in a map</P
></DIV
><blockquote><div class="refsect1"><p class="para">The <code class="literal">-d27.20</CODE
> debugging switch causes <em class="emphasis">sendmail</EM
> to show
how it is about to look up an alias in one of its database maps:</P
><p class="para"><blockquote class="screen"><pre class="screen">setalias(<code class="replaceable"><i>what</I
></CODE
>)       <i class="lineannotation"><img src="../chars/larr.gif" alt="&lt;-"> printed with -d27.8</I
>
   map <code class="replaceable"><i>class</I
></CODE
>:<code class="replaceable"><i>map</I
></CODE
> <code class="replaceable"><i>what</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">Here, <code class="replaceable"><i>class</I
></CODE
> is the type of map being looked up, such
as <em class="emphasis">hash</EM
> or <em class="emphasis">implicit</EM
> (see <a class="xref" href="ch33_03.htm#SML2-CH-33-SECT-3-4-2" title="The K Configuration Command">Section 33.3, "The K Configuration Command"</A
>).
The <code class="replaceable"><i>map</I
></CODE
> is the map name, such as <em class="emphasis">Alias0</EM
>.
The <code class="replaceable"><i>what</I
></CODE
> is one of the items listed with the
<code class="literal">AliasFile</CODE
> (<code class="literal">A</CODE
>) option (see <a class="xref" href="ch34_08.htm" title="">Section 34.8.1</A
>),
such as <em class="emphasis">/etc/aliases</EM
>, or implied with 
the service-switch file and the <code class="literal">ServiceSwitchFile</CODE
> option
(see <a class="xref" href="ch34_08.htm" title="">Section 34.8.61</A
>).</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-97">37.5.97 -d28.1</A
></H3
><p class="refpurpose">Trace user database transactions</P
>(useful)</DIV
><blockquote><div class="refsect1"><p class="para">The <em class="emphasis">sendmail</EM
> program can be compiled to use the user database (see
<a class="xref" href="ch33_05.htm" title="The User Database">Section 33.5, "The User Database"</A
>) by defining USERDB in the <em class="emphasis">Makefile</EM
>
(see <a class="xref" href="ch18_08.htm" title="">Section 18.8.54, USERDB</A
>).
If an address is selected
by rule set 0 for delivery by a delivery agent with the <code class="literal">F=l</CODE
> flag
set, and if it remains unaliased even if the <code class="literal">F=A</CODE
> flag is set,
it is looked up in the user database.
The <code class="literal">-d28.1</CODE
> (a.k.a. <code class="literal">-d28</CODE
>) debugging switch is used to watch the interaction
between <em class="emphasis">sendmail</EM
> and the user database:</P
><p class="para"><blockquote class="screen"><pre class="screen">udbexpand(<em class="emphasis">addr</EM
>)</PRE
></BLOCKQUOTE
></P
><p class="para">Here, <em class="emphasis">addr</EM
> is the address being looked up.</P
><p class="para">The sender is looked up in a similar fashion. The intent in this case is
to correct information such as the return address:</P
><p class="para"><blockquote class="screen"><pre class="screen">udbmatch(<code class="replaceable"><i>login</I
></CODE
>, <code class="replaceable"><i>what</I
></CODE
>)</PRE
></BLOCKQUOTE
></P
><p class="para">Here, <code class="replaceable"><i>login</I
></CODE
> is the login name of the sender and <code class="replaceable"><i>what</I
></CODE
>
is the <code class="literal">mailname</CODE
> for sender lookups. 
If the lookup is via <em class="emphasis">hesiod</EM
>, <em class="emphasis">sendmail</EM
> will print the same
information like this:</P
><p class="para"><blockquote class="screen"><pre class="screen">hes_udb_get(<code class="replaceable"><i>login</I
></CODE
>, <code class="replaceable"><i>what</I
></CODE
>)</PRE
></BLOCKQUOTE
></P
><p class="para">If the sender
is found in the database, <em class="emphasis">sendmail</EM
> prints:</P
><p class="para"><blockquote class="screen"><pre class="screen">udbmatch ==&gt; <em class="emphasis">login</EM
>@<em class="emphasis">defaulthost</EM
></PRE
></BLOCKQUOTE
></P
><p class="para">Here, <code class="replaceable"><i>login</I
></CODE
> may be a new login name. The <code class="replaceable"><i>defaulthost</I
></CODE
> is
either the sitewide host for all reply mail as defined in the user database
or the default destination host for a particular user.</P
><p class="para">In the event that a <em class="emphasis">db</EM
>(3) style user database fails to open,
the <code class="literal">-d28.1</CODE
> debugging switch displays the following error message:</P
><p class="para"><blockquote class="screen"><pre class="screen">dbopen(<code class="replaceable"><i>database</I
></CODE
>): <i class="lineannotation"> reason for failure here</I
></PRE
></BLOCKQUOTE
></P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-98">37.5.98 -d28.2</A
></H3
><p class="refpurpose">Show no match</P
></DIV
><blockquote><div class="refsect1"><p class="para">The <code class="literal">-d28.2</CODE
> debugging switch causes <em class="emphasis">sendmail</EM
> to
print any failures in lookups:</P
><p class="para"><blockquote class="screen"><pre class="screen">udbmatch: no match on <code class="replaceable"><i>login</I
></CODE
> (<code class="replaceable"><i>length</I
></CODE
>) via <code class="replaceable"><i>method</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">&#13;This shows that the name <code class="replaceable"><i>login</I
></CODE
> was looked up with a particular length, using
the database <code class="replaceable"><i>method</I
></CODE
>, where <code class="replaceable"><i>method</I
></CODE
> is either <code class="literal">db</CODE
> or
<code class="literal">hesiod</CODE
>. </P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-99">37.5.99 -d28.4</A
></H3
><p class="refpurpose">Show result of lookup</P
></DIV
><blockquote><div class="refsect1"><p class="para">The <code class="literal">-d28.4</CODE
> debugging switch causes <em class="emphasis">sendmail</EM
> to print
the result of its attempt to open (initialize) each database. There are three
possible results:</P
><ol class="orderedlist"><li class="listitem"><p class="para">If a file on the local machine contains the information sought,
<em class="emphasis">sendmail</EM
> prints</P
><p class="para"><blockquote class="screen"><pre class="screen">FETCH: file <code class="replaceable"><i>fname</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">Here, <code class="replaceable"><i>fname</I
></CODE
> is the name of the local file.</P
></LI
><li class="listitem"><p class="para">If a mail message should be sent to another host for delivery,
<em class="emphasis">sendmail</EM
> prints:</P
><p class="para"><blockquote class="screen"><pre class="screen">FORWARD: host <code class="replaceable"><i>hostname</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">Here, <code class="replaceable"><i>hostname</I
></CODE
> is the full canonical name of the host that
takes delivery.</P
></LI
><li class="listitem"><p class="para">An unknown result causes the address to remain
unchanged and the following message to be printed:</P
><p class="para"><blockquote class="screen"><pre class="screen">UNKNOWN</PRE
></BLOCKQUOTE
></P
></LI
></OL
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-100">37.5.100 -d28.8</A
></H3
><p class="refpurpose">Try hes-getmailhost()</P
></DIV
><blockquote><div class="refsect1"><p class="para">If <em class="emphasis">sendmail</EM
> is compiled with HES_GETMAILHOST defined
(see <a class="xref" href="ch18_08.htm" title="">Section 18.8.11, HES-GETMAILHOST</A
>),
the following is printed when the <code class="literal">-d28.8</CODE
> debugging
switch is used:</P
><p class="para"><blockquote class="screen"><pre class="screen">udbmatch: no match on <code class="replaceable"><i>login</I
></CODE
> (<code class="replaceable"><i>length</I
></CODE
>)  <i class="lineannotation"><img src="../chars/larr.gif" alt="&lt;-"> from -d28.2</I
>
  ... trying hes_getmailhost (<code class="replaceable"><i>login</I
></CODE
>)
udbexpand: hesiod-getmail <code class="replaceable"><i>login</I
></CODE
> stat <code class="replaceable"><i>err</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">Here, <em class="emphasis">hes_getmailhost</EM
>() is called to retrieve the name of the
post office that handles this <code class="replaceable"><i>login</I
></CODE
>. If that call fails,
the last line is printed, showing that the <em class="emphasis">hesiod</EM
> error
<code class="replaceable"><i>err</I
></CODE
> occurred.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-101">37.5.101 -d28.16</A
></H3
><p class="refpurpose">MX records for forward host</P
></DIV
><blockquote><div class="refsect1"><p class="para">If a lookup is for a forwarding host (FORWARD above) and the
forwarding host has MX records, the <code class="literal">-d28.16</CODE
> debugging switch 
causes those records to be printed:</P
><p class="para"><blockquote class="screen"><pre class="screen">getmxrr(<code class="replaceable"><i>host</I
></CODE
>): <code class="replaceable"><i>number</I
></CODE
>
   <i class="lineannotation"> first MX record here</I
>
   <i class="lineannotation"> second MX record here</I
>
   <i class="lineannotation"> etc.</I
></PRE
></BLOCKQUOTE
></P
><p class="para">Here, <code class="replaceable"><i>host</I
></CODE
> is the name of the host to which the lookup
is forwarded. The <code class="replaceable"><i>number</I
></CODE
> is the number of MX records
found. That line is then followed by <code class="replaceable"><i>number</I
></CODE
> MX records for
that host.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-102">37.5.102 -d28.20</A
></H3
><p class="refpurpose">Show udb lookup</P
></DIV
><blockquote><div class="refsect1"><p class="para">The internal <em class="emphasis">udb_map_lookup</EM
>() routine is called each time
anything is looked up in the udb database. Upon entry into
that routine, the <code class="literal">-d28.20</CODE
> debugging switch causes <em class="emphasis">sendmail</EM
> to
print</P
><p class="para"><blockquote class="screen"><pre class="screen">udb_map_lookup(<code class="replaceable"><i>name</I
></CODE
>, <code class="replaceable"><i>what</I
></CODE
>)</PRE
></BLOCKQUOTE
></P
><p class="para">Here, the <code class="replaceable"><i>what</I
></CODE
> is key about to be looked up in the map named <code class="replaceable"><i>name</I
></CODE
>.
This routine in turn calls <em class="emphasis">udbmatch</EM
>().
Note that the <code class="literal">-d38.20</CODE
> debugging switch also produces this output.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-103">37.5.103 -d28.80</A
></H3
><p class="refpurpose">Preview lookups</P
></DIV
><blockquote><div class="refsect1"><p class="para">The <code class="literal">-d28.80</CODE
> debugging switch causes <em class="emphasis">sendmail</EM
> to show
what it is about to lookup.</P
><p class="para"><blockquote class="screen"><pre class="screen">udbexpand: trying <code class="replaceable"><i>login</I
></CODE
> (<code class="replaceable"><i>length</I
></CODE
>) via <code class="replaceable"><i>method</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">This shows that the name <code class="replaceable"><i>login</I
></CODE
> was looked up with a particular <code class="replaceable"><i>length</I
></CODE
>, using
the database <code class="replaceable"><i>method</I
></CODE
>, where <code class="replaceable"><i>method</I
></CODE
> is either <code class="literal">db</CODE
> or
<code class="literal">hesiod</CODE
>. </P
><p class="para">The <code class="literal">-d28.80</CODE
> debugging switch also causes the result of a lookup to be displayed:</P
><p class="para"><blockquote class="screen"><pre class="screen">udbexpand: match <code class="replaceable"><i>login</I
></CODE
>: <code class="replaceable"><i>result</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">Here, <code class="replaceable"><i>login</I
></CODE
> was found, and the lookup returned <code class="replaceable"><i>result</I
></CODE
>.</P
><p class="para">The <code class="literal">-d28.80</CODE
> debugging switch also causes the result of <em class="emphasis">hes_udb_get</EM
>()
to be displayed:</P
><p class="para"><blockquote class="screen"><pre class="screen">hes_udb_get(<code class="replaceable"><i>login</I
></CODE
>, <code class="replaceable"><i>what</I
></CODE
>)            <i class="lineannotation"><img src="../chars/larr.gif" alt="&lt;-"> printed with -d28.1</I
>
hes_udb_get =&gt; <code class="replaceable"><i>result               </I
></CODE
><i class="lineannotation"><img src="../chars/larr.gif" alt="&lt;-"> printed with -d28.80</I
></PRE
></BLOCKQUOTE
></P
><p class="para">Here, the hesiod library routine <em class="emphasis">hes_resolve</EM
>(3) is called with the two
arguments <code class="replaceable"><i>login</I
></CODE
> and <code class="replaceable"><i>what</I
></CODE
>. The <code class="replaceable"><i>result</I
></CODE
> (a string) is printed
on the second line.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-104">37.5.104 -d29.1</A
></H3
><p class="refpurpose">Special rewrite of local recipient</P
></DIV
><blockquote><div class="refsect1"><p class="para">With a level 2 or greater configuration file (see the <code class="literal">V</CODE
>
configuration command in <a class="xref" href="ch27_05.htm#SML2-CH-27-SECT-5-1" title="The V Configuration Command">Section 27.5, "The V Configuration Command"</A
>), V8 <em class="emphasis">sendmail</EM
> passes
the user part (<code class="literal">$u</CODE
>) of local recipient addresses through rule set 5
as a hook to select a new delivery agent. Rule set 5 is called
if the address is unchanged after all aliasing (including the
<em class="emphasis">~/.forward</EM
> file).
The <code class="literal">-d29.1</CODE
> (a.k.a. <code class="literal">-d29</CODE
>) debugging switch causes the address to be printed
as it appears before the rule set 5 rewrite:</P
><p class="para"><blockquote class="screen"><pre class="screen">maplocaluser: <i class="lineannotation">output of printaddr</I
>()<i class="lineannotation"> here (see <a class="xref" href="ch37_03.htm" title="The Output Produced by printaddr()">Section 37.3.1</A
>)</I
></PRE
></BLOCKQUOTE
></P
><p class="para">Information about the address is printed
with the <em class="emphasis">printaddr</EM
>() routine.
The output of <em class="emphasis">maplocaluser</EM
>() becomes the input to <em class="emphasis">recipient</EM
>(),
so the result of rewriting can be seen by using the <code class="literal">-d26.1</CODE
>
debugging switch in combination with this one.</P
><p class="para">Note that the particulars about whether or not an address will
be processed by rule set 5 are described in <code class="literal">-d29.5</CODE
> below.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-105">37.5.105 -d29.4</A
></H3
><p class="refpurpose">Trace fuzzy matching</P
>(useful)</DIV
><blockquote><div class="refsect1"><p class="para">Fuzzy matching is the attempt to match a local recipient name to
one of the names in the <em class="emphasis">gecos</EM
> field of the <em class="emphasis">passwd</EM
>(5)
file (or NIS map).
The <code class="literal">-d29.4</CODE
> debugging switch causes the process of fuzzy
matching to be traced:</P
><p class="para"><blockquote class="screen"><pre class="screen">finduser(<code class="replaceable"><i>name</I
></CODE
>)</PRE
></BLOCKQUOTE
></P
><p class="para">Here, <code class="replaceable"><i>name</I
></CODE
> is an address in the form of a local user address,
without the host part. The <code class="replaceable"><i>name</I
></CODE
> is first looked up in the
<em class="emphasis">passwd</EM
>(5) file on the assumption that it is a login name.
If it is found, <em class="emphasis">sendmail</EM
> prints</P
><p class="para"><blockquote class="screen"><pre class="screen">found (non-fuzzy)</PRE
></BLOCKQUOTE
></P
><p class="para">If <em class="emphasis">sendmail</EM
> was compiled with <em class="emphasis">hesiod</EM
> support, all numeric login names
will not work properly, resulting in the following:</P
><p class="para"><blockquote class="screen"><pre class="screen">failed (numeric input)</PRE
></BLOCKQUOTE
></P
><p class="para">If the name is looked up and not found, 
the entire <em class="emphasis">passwd</EM
>(5) is searched, to see
whether <code class="replaceable"><i>name</I
></CODE
> appears in any of the <em class="emphasis">gecos</EM
> fields. This
search is done only if MATCHGECOS (see <a class="xref" href="ch18_08.htm" title="">Section 18.8.18, MATCHGECOS</A
>)
was defined when <em class="emphasis">sendmail</EM
>
was compiled and if the <code class="literal">MatchGECOS</CODE
> (<code class="literal">G</CODE
>) option
(see <a class="xref" href="ch34_08.htm" title="">Section 34.8.34, MatchGECOS (G)</A
>)
is true.
If MATCHGECOS was undefined, the search ends and the not-found
<code class="replaceable"><i>name</I
></CODE
> causes the mail to bounce. If the <code class="literal">MatchGecos</CODE
>
(<code class="literal">G</CODE
>) option
is false, <em class="emphasis">sendmail</EM
> bounces the message and prints the following:</P
><p class="para"><blockquote class="screen"><pre class="screen">not found (fuzzy disabled)</PRE
></BLOCKQUOTE
></P
><p class="para">If the <code class="literal">MatchGecos</CODE
> (<code class="literal">G</CODE
>) option is true, 
the <em class="emphasis">gecos</EM
> fields are searched.
But before the search starts, any underscore characters (and the character
defined by the BlankSub (<code class="literal">B</CODE
>) option; see <a class="xref" href="ch34_08.htm" title="">Section 34.8.5, BlankSub (B)</A
>)
that appear in <em class="emphasis">name</EM
> are converted
to spaces. Then, in turn, each <em class="emphasis">gecos</EM
> field has
the full name extracted (everything following the first comma, semicolon,
or percent is truncated off, including that character),
and any <code class="literal">&amp;</CODE
> characters found are converted to the login name.
The two are then compared in a case-insensitive fashion. If they
are identical, <em class="emphasis">sendmail</EM
> prints:</P
><p class="para"><blockquote class="screen"><pre class="screen">fuzzy matches <em class="emphasis">gecos</EM
></PRE
></BLOCKQUOTE
></P
><p class="para">If all <em class="emphasis">gecos</EM
> fields are compared and no match is found, <em class="emphasis">sendmail</EM
>
bounces the message and prints the following:</P
><p class="para"><blockquote class="screen"><pre class="screen">no fuzzy match found</PRE
></BLOCKQUOTE
></P
><p class="para">There is no debugging flag to watch each comparison.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-106">37.5.106 -d29.5</A
></H3
><p class="refpurpose">Preview rule set 5</P
></DIV
><blockquote><div class="refsect1"><p class="para">The <code class="literal">-d29.5</CODE
> debugging switch causes <em class="emphasis">sendmail</EM
> to print
an address just before it is tested to see whether rule set 5 should be
called:</P
><p class="para"><blockquote class="screen"><pre class="screen">recipient: testing local?  cl=<code class="replaceable"><i>level</I
></CODE
>, rr5=<code class="replaceable"><i>addr</I
></CODE
>,
                                               <i class="lineannotation"><img src="../chars/uarr.gif" alt="-^"></I
>
                                         <i class="lineannotation">output of printaddr</I
>()<i class="lineannotation"> here (see <a class="xref" href="ch37_03.htm" title="The Output Produced by printaddr()">Section 37.3.1</A
>)</I
></PRE
></BLOCKQUOTE
></P
><p class="para">For the address to be rewritten, the configuration file version as displayed by
<code class="replaceable"><i>level</I
></CODE
> must be 2 or more, the address in memory for rule set
5 (shown with <code class="replaceable"><i>rr5</I
></CODE
>) must be nonzero, the <code class="replaceable"><i>flags</I
></CODE
>
in <code class="replaceable"><i>addr</I
></CODE
> must not contain QNOTREMOTE,
QDONTSEND, QQUEUEUP, or QVERIFIED,
and the delivery agent for the address must have the <code class="literal">F=5</CODE
>
flag set.</P
><p class="para">The <code class="literal">-d29.5</CODE
> debugging switch also causes <em class="emphasis">sendmail</EM
> to display
the following if the address is rewritten by rule set 5:</P
><p class="para"><blockquote class="screen"><pre class="screen">maplocaluser: QDONTSEND <i class="lineannotation">output of printaddr</I
>()<i class="lineannotation"> here (see <a class="xref" href="ch37_03.htm" title="The Output Produced by printaddr()">Section 37.3.1</A
>)</I
></PRE
></BLOCKQUOTE
></P
><p class="para">Here the <em class="emphasis">printaddr</EM
>() routine
prints the old address that is being canceled.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-107">37.5.107 -d29.7</A
></H3
><p class="refpurpose">Show over-aliasing fuzzy fallback</P
></DIV
><blockquote><div class="refsect1"><p class="para">If a fuzzy match causes
more than three transformations to occur during aliasing, <em class="emphasis">sendmail</EM
> emits the
following error:</P
><p class="para"><blockquote class="screen"><pre class="screen">aliasing/forwarding loop for <code class="replaceable"><i>login</I
></CODE
> broken</PRE
></BLOCKQUOTE
></P
><p class="para">Here, <code class="replaceable"><i>login</I
></CODE
> is the login name of the recipient that started
the suspected runaway aliasing.
The <code class="literal">-d29.5</CODE
> debugging switch also causes <em class="emphasis">sendmail</EM
> to print
that it is trying to fall back to the original login name
for delivery:</P
><p class="para"><blockquote class="screen"><pre class="screen">at trylocaluser <code class="replaceable"><i>login</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">&#13;Note that this message is printed before the message printed by the <code class="literal">-d26</CODE
> 
switch (which shows the testing for a self-destructive addresses).</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-108">37.5.108 -d30</A
></H3
><p class="refpurpose">Trace processing of header</P
></DIV
><blockquote><div class="refsect1"><p class="para">When <em class="emphasis">sendmail</EM
> reads a mail message, it first collects (reads) the header
portions of that message (everything up to the first blank line) and
places the result into a temporary file in the queue directory.
While it is processing the header, if the <code class="literal">SaveFromLine</CODE
> (<code class="literal">f</CODE
>)
option (see <a class="xref" href="ch34_08.htm" title="">Section 34.8.59, SaveFromLine (f)</A
>),
is false, the UNIX-style &quot;<code class="literal">From&nbsp;</CODE
>&quot; header is removed, and
the important information in it is saved for later use.</P
><p class="para">The <code class="literal">-d30.1</CODE
> (a.k.a. <code class="literal">-d30</CODE
>) debugging switch causes <em class="emphasis">sendmail</EM
> to
print the following succinct message when it finds the end of
the header portion of a mail message:</P
><p class="para"><blockquote class="screen"><pre class="screen">EOH</PRE
></BLOCKQUOTE
></P
><p class="para">If end-of-headers was caused by a read error or a broken connection,
<em class="emphasis">sendmail</EM
> prints:</P
><p class="para"><blockquote class="screen"><pre class="screen">collect: premature EOM: <i class="lineannotation"> reason for failure here</I
></PRE
></BLOCKQUOTE
></P
><p class="para">If end-of-headers was caused by a <code class="literal">Message:</CODE
> or <code class="literal">Text:</CODE
>
header, then the rest of the header portion of the message is
ignored.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-109">37.5.109 -d30.2</A
></H3
><p class="refpurpose">Eatfrom</P
></DIV
><blockquote><div class="refsect1"><p class="para">The <code class="literal">-d30.2</CODE
> debugging switch first causes <em class="emphasis">sendmail</EM
> to
print its entry into <em class="emphasis">collect</EM
>():</P
><p class="para"><blockquote class="screen"><pre class="screen">collect</PRE
></BLOCKQUOTE
></P
><p class="para">Then, when <em class="emphasis">sendmail</EM
> strips (eats) the UNIX-style, 
five-character &quot;<code class="literal">From&nbsp;</CODE
>&quot; header
from a mail message, it tries to extract (and save) the date from the header.
The <code class="literal">-d30.2</CODE
> debugging switch causes <em class="emphasis">sendmail</EM
> to print
the <code class="replaceable"><i>field</I
></CODE
> portion of the header as it appears before
the date is extracted:</P
><p class="para"><blockquote class="screen"><pre class="screen">eatfrom(<code class="replaceable"><i>field</I
></CODE
>)</PRE
></BLOCKQUOTE
></P
><p class="para">The <em class="emphasis">eatfrom</EM
>() routine will vanish if NOTUNIX
(see <a class="xref" href="ch18_08.htm" title="">Section 18.8.32, NOTUNIX</A
>)
is defined when compiling <em class="emphasis">sendmail</EM
>.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-110">37.5.110 -d30.3</A
></H3
><p class="refpurpose">Show a to-less header being added</P
></DIV
><blockquote><div class="refsect1"><p class="para">If the header of a mail message lacks recipient information (lacks
all of the <code class="literal">To:</CODE
>, <code class="literal">Cc:</CODE
>,
<code class="literal">Bcc</CODE
>:, and <code class="literal">Apparently-To:</CODE
> header lines),
then <em class="emphasis">sendmail</EM
> adds a header as defined 

by the <code class="literal">NoRecipientAction</CODE
>
option (see <a class="xref" href="ch34_08.htm" title="">Section 34.8.43, NoRecipientAction</A
>).
The <code class="literal">-d30.3</CODE
> debugging switch causes <em class="emphasis">sendmail</EM
> to
print which <code class="replaceable"><i>header</I
></CODE
> it is adding:</P
><p class="para"><blockquote class="screen"><pre class="screen">Adding <code class="replaceable"><i>header</I
></CODE
>: <code class="replaceable"><i>recipient</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">Here, <code class="replaceable"><i>header</I
></CODE
> is the text of the header being saved, and
<code class="replaceable"><i>recipient</I
></CODE
> is the address of the recipient as taken from
the envelope of the message.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-111">37.5.111 -d30.35</A
></H3
><p class="refpurpose">Trace collect states</P
></DIV
><blockquote><div class="refsect1"><p class="para">The process of collecting the message header and body over an SMTP
connection is driven by a state engine inside <em class="emphasis">sendmail</EM
>. The
<code class="literal">-d30.35</CODE
> debugging switch causes <em class="emphasis">sendmail</EM
> to display
each state just before it is processed:</P
><p class="para"><blockquote class="screen"><pre class="screen">top, istate=<code class="replaceable"><i>is</I
></CODE
>, mstate=<code class="replaceable"><i>ms</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">Here, <code class="replaceable"><i>is</I
></CODE
> is the current input state as described in
<a class="xref" href="#SML2-CH-37-TAB-10" title="collect() Input States">Table 37.11</A
>
and <code class="replaceable"><i>ms</I
></CODE
> is the current message state as described in
<a class="xref" href="#SML2-CH-37-TAB-11" title="collect() Message States">Table 37.12</A
>.</P
><table class="table"><caption class="table"><a class="title" name="SML2-CH-37-TAB-10">Table 37.11: collect() Input States</A
></CAPTION
><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1">istate</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Name</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Description</TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">0</TD
><td class="entry" rowspan="1" colspan="1">IS_NORM</TD
><td class="entry" rowspan="1" colspan="1">Currently in  middle of a line</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">1</TD
><td class="entry" rowspan="1" colspan="1">IS_BOL</TD
><td class="entry" rowspan="1" colspan="1">Currently at beginning of a line</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">2</TD
><td class="entry" rowspan="1" colspan="1">IS_DOT</TD
><td class="entry" rowspan="1" colspan="1">Just read a dot at beginning of line</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">3</TD
><td class="entry" rowspan="1" colspan="1">IS_DOTCR</TD
><td class="entry" rowspan="1" colspan="1">Just read &quot;.\r&quot; at beginning of line</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">4</TD
><td class="entry" rowspan="1" colspan="1">IS_CR</TD
><td class="entry" rowspan="1" colspan="1">Just read a carriage return</TD
></TR
></TBODY
></TABLE
><table class="table"><caption class="table"><a class="title" name="SML2-CH-37-TAB-11">Table 37.12: collect() Message States</A
></CAPTION
><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1">mstate</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Name</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Description</TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">0</TD
><td class="entry" rowspan="1" colspan="1">MS_UFROM</TD
><td class="entry" rowspan="1" colspan="1">Currently reading UNIX from line</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">1</TD
><td class="entry" rowspan="1" colspan="1">MS_HEADER</TD
><td class="entry" rowspan="1" colspan="1">Currently reading message header</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">2</TD
><td class="entry" rowspan="1" colspan="1">MS_BODY</TD
><td class="entry" rowspan="1" colspan="1">Currently reading message body</TD
></TR
></TBODY
></TABLE
><p class="para">The <code class="literal">-d30.35</CODE
> debugging switch also causes the same information
to be printed every time <em class="emphasis">sendmail</EM
> goes to a new state:</P
><p class="para"><blockquote class="screen"><pre class="screen">nextstate, istate=<code class="replaceable"><i>is</I
></CODE
>, mstate=<code class="replaceable"><i>ms</I
></CODE
>, line = &quot;<code class="replaceable"><i>header</I
></CODE
>&quot;</PRE
></BLOCKQUOTE
></P
><p class="para">Here, the extra information is the current text of the header being
processed.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-112">37.5.112 -d30.94</A
></H3
><p class="refpurpose">Trace collect states</P
></DIV
><blockquote><div class="refsect1"><p class="para">The <code class="literal">-d30.94</CODE
> debugging switch causes <em class="emphasis">sendmail</EM
> to print
the input state (see
<a class="xref" href="#SML2-CH-37-TAB-10" title="collect() Input States">Table 37.11</A
>)
for each character being processed:</P
><p class="para"><blockquote class="screen"><pre class="screen">istate=<code class="replaceable"><i>is</I
></CODE
>, c=<code class="replaceable"><i>char </I
></CODE
>(<code class="replaceable"><i>hex</I
></CODE
>)</PRE
></BLOCKQUOTE
></P
><p class="para">Each character is printed both as the character it is (<code class="replaceable"><i>char</I
></CODE
>) and
how it is represented in hexadecimal (<code class="replaceable"><i>hex</I
></CODE
>).</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-113">37.5.113 -d31.2</A
></H3
><p class="refpurpose">Trace processing of headers</P
>(useful)</DIV
><blockquote><div class="refsect1"><p class="para">Header lines (see <a class="xref" href="ch35_01.htm" title="The H Configuration Command">Section 35.1, "The H Configuration Command"</A
>)
from the configuration file and from mail messages
are processed by the <em class="emphasis">chompheader</EM
>() routine before they
are included in any mail message.
That routine parses each header line to save critical information,
to check for validity, and to replace default values with new
values.</P
><p class="para">The <code class="literal">-d31.2</CODE
> debugging switch
[6]
shows that <em class="emphasis">sendmail</EM
> is
about to check whether it should replace a <code class="literal">From:</CODE
> or
<code class="literal">Resent-From:</CODE
> header with
the one defined by the <code class="literal">H</CODE
> configuration command.
If the configuration file is not being read and if <em class="emphasis">sendmail</EM
> is
not processing the queue, the following test is made:</P
><blockquote class="footnote"><p class="para">[6] There is no <code class="literal">-d31.1</CODE
> information.</P
></BLOCKQUOTE
><p class="para"><blockquote class="screen"><pre class="screen">comparing header from (<code class="replaceable"><i>header</I
></CODE
>) against default (<code class="replaceable"><i>addr</I
></CODE
> or <code class="replaceable"><i>name)</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">The value of the <code class="literal">From:</CODE
> or <code class="literal">Resent-From:</CODE
>
<code class="replaceable"><i>header</I
></CODE
> is compared to the sender's address (<code class="replaceable"><i>addr</I
></CODE
>)
and to the sender's <code class="replaceable"><i>name</I
></CODE
>. If it is that same as either one,
the address is replaced.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-114">37.5.114 -d31.6</A
></H3
><p class="refpurpose">Entering chompheader()</P
></DIV
><blockquote><div class="refsect1"><p class="para">The <code class="literal">-d31.6</CODE
> debugging switch shows each header as it
appears when it enters the <em class="emphasis">chompheader</EM
>() routine:</P
><p class="para"><blockquote class="screen"><pre class="screen">chompheader: <em class="emphasis">line</EM
></PRE
></BLOCKQUOTE
></P
><p class="para">Here, <em class="emphasis">line</EM
> is the exact text of the original header before
processing. 
Unfortunately, there is no debugging
switch that allows the result of this processing to be viewed.</P
><p class="para">To determine how it should handle a header, <em class="emphasis">sendmail</EM
> compares
each header to its list of headers in <em class="emphasis">sendmail.h</EM
>.
The <code class="literal">-d31.6</CODE
> debugging switch also shows the result after the
comparisons have been done:</P
><p class="para"><blockquote class="screen"><pre class="screen">no header match

header match, hi_flags= <i class="lineannotation">flags in hexadecimal here</I
></PRE
></BLOCKQUOTE
></P
><p class="para">The flags and their hexadecimal equivalence are shown
in <a class="xref" href="ch35_05.htm#SML2-CH-35-SECT-5-6" title="Header Flags in conf.c">Table 35.2</A
> in <a class="xref" href="ch35_05.htm#SML2-CH-35-SECT-5-6" title="Header Behavior in conf.c">Section 35.5, "Header Behavior in conf.c"</A
>.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-115">37.5.115 -d32.1</A
></H3
><p class="refpurpose">Show collected headers</P
></DIV
><blockquote><div class="refsect1"><p class="para">The <code class="literal">-d32.1</CODE
> (a.k.a. <code class="literal">-d31</CODE
>) debugging switch causes <em class="emphasis">sendmail</EM
> to print
the header lines that it collected from a received mail message:</P
><p class="para"><blockquote class="screen"><pre class="screen">--- collected header ---
<i class="lineannotation">     header lines here</I
>
--------------</PRE
></BLOCKQUOTE
></P
><p class="para">Each header line is printed with the header name on the left, a colon, 
and the value for that header on the right.
If there is no value, <em class="emphasis">sendmail</EM
> prints &lt;NULL&gt;.</P
><p class="para">If the H_DEFAULT flag is set for any header (see <a class="xref" href="ch35_05.htm#SML2-CH-35-SECT-5-6" title="H_DEFAULT">Section 35.5.3, "H_DEFAULT"</A
>),
the value for the header is printed inside parentheses with macros
unexpanded, just before it is printed in expanded form. For example,</P
><p class="para"><blockquote class="screen"><pre class="screen">Full-Name: ($x) Your Full Name</PRE
></BLOCKQUOTE
></P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-116">37.5.116 -d32.2</A
></H3
><p class="refpurpose">Show ARPA mode with setsender</P
></DIV
><blockquote><div class="refsect1"><p class="para">The <code class="literal">-d32.2</CODE
> debugging switch works only if the mode
set with the <code class="literal">-b</CODE
> command-line switch is in ARPA (<code class="literal">-ba</CODE
>) mode
(see <a class="xref" href="ch36_07.htm" title="">Section 36.7.3, -ba</A
>).
It shows the sender address being extracted from the header
with <em class="emphasis">setsender</EM
>():</P
><p class="para"><blockquote class="screen"><pre class="screen">eatheader: setsender(*<code class="replaceable"><i>value</I
></CODE
> == <code class="replaceable"><i>realvalue</I
></CODE
>)</PRE
></BLOCKQUOTE
></P
><p class="para">The <em class="emphasis">setsender</EM
>() routine can be further traced with the
<code class="literal">-d45.1</CODE
> debugging switch.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-117">37.5.117 -d33.1</A
></H3
><p class="refpurpose">Watch crackaddr()</P
></DIV
><blockquote><div class="refsect1"><p class="para">The <em class="emphasis">crackaddr</EM
>() routine's job is to find an email address
amidst other nonaddress text, then to save that nonaddress part:</P
><p class="para"><blockquote class="screen"><pre class="screen">gw@wash.dc.gov (George Washington)  <code class="replaceable"><i><img src="../chars/rarr.gif" alt="-&gt;"></I
></CODE
> <code class="replaceable"><i>crackaddr</I
></CODE
>() <code class="replaceable"><i><img src="../chars/rarr.gif" alt="-&gt;"></I
></CODE
> $g (George Washington)</PRE
></BLOCKQUOTE
></P
><p class="para">The <code class="literal">-d33.1</CODE
> (a.k.a. <code class="literal">33</CODE
>) debugging switch causes <em class="emphasis">sendmail</EM
> to 
print the potential address prior to cracking and, after that,
the address that it found:</P
><p class="para"><blockquote class="screen"><pre class="screen">crackaddr(<code class="replaceable"><i>potential</I
></CODE
>)
crackaddr=&gt;`<code class="replaceable"><i>addr</I
></CODE
>'</PRE
></BLOCKQUOTE
></P
><p class="para">The legal ways that addresses can be placed within
other text is described in <a class="xref" href="ch35_03.htm#SML2-CH-35-SECT-3-2" title="Header Field Contents">Section 35.3, "Header Field Contents"</A
>.
See also the <code class="literal">/parse</CODE
> rule-testing command (<a class="xref" href="ch38_05.htm#SML2-CH-38-SECT-5-3" title="Parse an Address with /parse">Section 38.5.5, "Parse an Address with /parse"</A
>)
to put <code class="replaceable"><i>crackaddr</I
></CODE
>() in context.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-118">37.5.118 -d34.1</A
></H3
><p class="refpurpose">Watch header assembly for output</P
></DIV
><blockquote><div class="refsect1"><p class="para">The <em class="emphasis">sendmail</EM
> program uses <em class="emphasis">putheader</EM
>() 
to create headers that didn't exist before.
The <code class="literal">-d34.1</CODE
> (a.k.a. <code class="literal">-d34</CODE
>) debugging switch causes <em class="emphasis">sendmail</EM
> to
print the following on entry to that routine:</P
><p class="para"><blockquote class="screen"><pre class="screen">-- putheader, mailer = <code class="replaceable"><i>agent</I
></CODE
> --</PRE
></BLOCKQUOTE
></P
><p class="para">Here, <code class="replaceable"><i>agent</I
></CODE
> is the symbolic name of the
delivery agent that will deliver the bounced message.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-119">37.5.119 -d34.11</A
></H3
><p class="refpurpose">Trace header generation and skipping</P
>(useful)</DIV
><blockquote><div class="refsect1"><p class="para">Each header line created is displayed with
two leading spaces. For example,</P
><p class="para"><blockquote class="screen"><pre class="screen">-- putheader, mailer = *file* --
  Return-Path: you</PRE
></BLOCKQUOTE
></P
><p class="para">Then certain headers are excluded from the bounced mail message
header. Those with the H_CTE flag set
(see <a class="xref" href="ch35_05.htm#SML2-CH-35-SECT-5-6" title="H_CTE">Section 35.5.12, "H_CTE"</A
>)
and either the MCIF_CVT8TO7 or MCIF_INMIME <em class="emphasis">mci</EM
> flags set
(see <a class="xref" href="#SML2-CH-37-TAB-16" title="mci_get() Status Flags">Table 37.17</A
>)
will have the text:</P
><p class="para"><blockquote class="screen"><pre class="screen">(skipped (content-transfer-encoding))</PRE
></BLOCKQUOTE
></P
><p class="para">appended and that header skipped (excluded).</P
><p class="para">Any header that has both H_CHECK and H_ACHECK flags
set and doesn't have identical delivery agent flags set for itself and its cached connection information will also be skipped:</P
><p class="para"><blockquote class="screen"><pre class="screen">(skipped)</PRE
></BLOCKQUOTE
></P
><p class="para">All resent headers (those marked with H_RESENT) are also skipped:</P
><p class="para"><blockquote class="screen"><pre class="screen">(skipped (resent))</PRE
></BLOCKQUOTE
></P
><p class="para">&#13;Return-receipt headers are also skipped:</P
><p class="para"><blockquote class="screen"><pre class="screen">(skipped (receipt))</PRE
></BLOCKQUOTE
></P
><p class="para">If a <code class="literal">Bcc:</CODE
> header (see <a class="xref" href="ch35_10.htm" title="">Section 35.10.4, Bcc:</A
>) is being skipped, this
is printed:</P
><p class="para"><blockquote class="screen"><pre class="screen">(skipped - bcc)</PRE
></BLOCKQUOTE
></P
><p class="para">Finally, valueless headers are also skipped with this message:</P
><p class="para"><blockquote class="screen"><pre class="screen">(skipped - null value)</PRE
></BLOCKQUOTE
></P
><p class="para">Any headers that survive this skipping process are included in the
eventually delivered bounced message. Note that MIME headers
are not generated or displayed here (see -d43).</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-120">37.5.120 -d35.9</A
></H3
><p class="refpurpose">Macro values defined</P
>(useful)</DIV
><blockquote><div class="refsect1"><p class="para"><a class="indexterm" name="AUTOID-58848"></A
>The <code class="literal">-d35.9</CODE
> debugging switch
[7]
causes <em class="emphasis">sendmail</EM
>
to print each macro as it is defined. The output looks like this:</P
><blockquote class="footnote"><p class="para">[7] There is no <code class="literal">-d35.1</CODE
> information.</P
></BLOCKQUOTE
><p class="para"><blockquote class="screen"><pre class="screen">define(<code class="replaceable"><i>name</I
></CODE
> as &quot;<em class="emphasis">value</EM
>&quot;)</PRE
></BLOCKQUOTE
></P
><p class="para">Here, the <code class="replaceable"><i>name</I
></CODE
> is the macro's name, and the
<em class="emphasis">value</EM
> is the value (text) assigned to the macro.
If the macro already has a value assigned to it, <em class="emphasis">sendmail</EM
>
prints:</P
><p class="para"><blockquote class="screen"><pre class="screen">redefine(<code class="replaceable"><i>name</I
></CODE
> as &quot;<em class="emphasis">value</EM
>&quot;)</PRE
></BLOCKQUOTE
></P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-121">37.5.121 -d35.14</A
></H3
><p class="refpurpose">Macro Identification</P
></DIV
><blockquote><div class="refsect1"><p class="para">With the introduction of multicharacter macro names, it is now
necessary for <em class="emphasis">sendmail</EM
> to convert each macro name from text
form into <em class="emphasis">sendmail</EM
>'s internal form. Single-character macro
names are represented by themselves. Multicharacter names are
represented by values from 0240 (octal) upward.
The <code class="literal">-d35.14</CODE
> debugging switch causes <em class="emphasis">sendmail</EM
> to
print each macro name as it is being looked up:</P
><p class="para"><blockquote class="screen"><pre class="screen">macid(<code class="replaceable"><i>name</I
></CODE
>) =&gt; <code class="replaceable"><i>value</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">The <code class="replaceable"><i>name</I
></CODE
> is the text immediately following a <code class="literal">$</CODE
> character,
including any trailing junk in the line. For example, the following
miniconfigurations file:</P
><p class="para"><blockquote class="screen"><pre class="screen">V7
D{FOO}foo
R$H     ${FOO}  note no $H defined</PRE
></BLOCKQUOTE
></P
><p class="para">produces this output (with only the <code class="literal">macid</CODE
> lines shown):</P
><p class="para"><blockquote class="screen"><pre class="screen">macid({FOO}foo) =&gt; 0xa0
macid(H\t${FOO}\tnote no $H defined) =&gt; H
macid({FOO}\tnote no $H defined) =&gt; 0xa0
macid(H defined) =&gt; H</PRE
></BLOCKQUOTE
></P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-122">37.5.122 -d35.24</A
></H3
><p class="refpurpose">Macro expansion</P
></DIV
><blockquote><div class="refsect1"><p class="para">Macros that are included in text must be translated
into values (expanded) so that the values may be used. The <code class="literal">-d35.24</CODE
>
debugging switch tells <em class="emphasis">sendmail</EM
> to display such
text both before and after the macros in it have been expanded.
The &quot;before&quot; looks like this:</P
><p class="para"><blockquote class="screen"><pre class="screen">expand(&quot;<em class="emphasis">text</EM
>&quot;)</PRE
></BLOCKQUOTE
></P
><p class="para">For example,</P
><p class="para"><blockquote class="screen"><pre class="screen">expand(&quot;$w.$D&quot;)</PRE
></BLOCKQUOTE
></P
><p class="para">The <em class="emphasis">text</EM
> (here <code class="literal">$w.$D</CODE
>)
may be any ASCII string. In it, special characters like
the newline character are printed in C language, backslash-escaped
notation (such as <code class="literal">\n</CODE
>). Macros are printed with either
the <code class="literal">$</CODE
> prefix (such as <code class="literal">$w</CODE
> above with V8 <em class="emphasis">sendmail</EM
>)
or some other prefix (IDA uses <code class="literal">^Aw.^AD</CODE
>,
SunOS uses <code class="literal">/w./D</CODE
>; others use the archaic
<code class="literal">\001w.\001D</CODE
> notation).</P
><p class="para">Expansion is performed only on defined macros (using the
<code class="literal">$</CODE
> prefix), on macro conditionals (in which one
of two values is used, depending on whether a macro has a value
or not, such as <code class="literal">$?x$x$|nobody$.</CODE
>), and
and on the <code class="literal">$&amp;</CODE
> prefix (deferred expansion).</P
><p class="para">After the first (leftmost) macro or conditional is expanded in
<em class="emphasis">text</EM
>, <em class="emphasis">sendmail</EM
> prints the transformed text as
follows:</P
><p class="para"><blockquote class="screen"><pre class="screen">expanded ==&gt; &quot;<em class="emphasis">text</EM
>&quot;</PRE
></BLOCKQUOTE
></P
><p class="para">For example,</P
><p class="para"><blockquote class="screen"><pre class="screen">expanded ==&gt; &quot;wash.$D&quot;</PRE
></BLOCKQUOTE
></P
><p class="para">If any unexpanded macros or conditionals remain in
<em class="emphasis">text</EM
>, this <code class="literal">expanded</CODE
> process is
<em class="emphasis">recursively</EM
> repeated until everything that can be expanded
has been expanded.
This process of recursion allows macros to have 
other macros as their values.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-123">37.5.123 -d36.5</A
></H3
><p class="refpurpose">Trace processing by stab()</P
></DIV
><blockquote><div class="refsect1"><p class="para">The symbol table is a block of memory that contains information
about all the symbolic names used by <em class="emphasis">sendmail</EM
>. Symbolic
names are delivery agent names (such as <code class="literal">local</CODE
>),
aliases, database classes, hostnames, and macros.
Symbols are placed into the symbol table with the <em class="emphasis">stab</EM
>() routine.
That routine is also used to see whether a symbol has already been
inserted and, if so, to obtain its value.
The <code class="literal">-d36.5</CODE
> debugging switch
[8]
causes <em class="emphasis">sendmail</EM
> to print
the following upon its entry into the <em class="emphasis">stab</EM
>() routine:</P
><blockquote class="footnote"><p class="para">[8] There is no <code class="literal">-d36.1</CODE
> information.</P
></BLOCKQUOTE
><p class="para"><blockquote class="screen"><pre class="screen">STAB: <code class="replaceable"><i>name</I
></CODE
> <code class="replaceable"><i>type</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">Here, <code class="replaceable"><i>name</I
></CODE
> is the symbolic name to be inserted or looked up.
The <code class="replaceable"><i>type</I
></CODE
> is one of the values listed in 
<a class="xref" href="#SML2-CH-37-TAB-12" title="Types of Symbols Recognized by stab()">Table 37.13</A
>.</P
><table class="table"><caption class="table"><a class="title" name="SML2-CH-37-TAB-12">Table 37.13: Types of Symbols Recognized by stab()</A
></CAPTION
><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1">Type</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Mnemonic</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Description</TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">0</TD
><td class="entry" rowspan="1" colspan="1">ST_UNDEF</TD
><td class="entry" rowspan="1" colspan="1">Undefined type</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">1</TD
><td class="entry" rowspan="1" colspan="1">ST_CLASS</TD
><td class="entry" rowspan="1" colspan="1">Class (from <code class="literal">C</CODE
> and <code class="literal">F</CODE
> configuration commands)</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">2</TD
><td class="entry" rowspan="1" colspan="1">ST_ADDRESS</TD
><td class="entry" rowspan="1" colspan="1">An address in parsed format</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">3</TD
><td class="entry" rowspan="1" colspan="1">ST_MAILER</TD
><td class="entry" rowspan="1" colspan="1">A delivery agent (from <code class="literal">M</CODE
> configuration command)</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">4</TD
><td class="entry" rowspan="1" colspan="1">ST_ALIAS</TD
><td class="entry" rowspan="1" colspan="1">An alias, if no external database</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">5</TD
><td class="entry" rowspan="1" colspan="1">ST_MAPCLASS</TD
><td class="entry" rowspan="1" colspan="1">A database class (<code class="literal">K</CODE
> command)</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">6</TD
><td class="entry" rowspan="1" colspan="1">ST_MAP</TD
><td class="entry" rowspan="1" colspan="1">Function that handles a class</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">7</TD
><td class="entry" rowspan="1" colspan="1">ST_HOSTSIG</TD
><td class="entry" rowspan="1" colspan="1">Host MX signature</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">8</TD
><td class="entry" rowspan="1" colspan="1">ST_NAMECANON</TD
><td class="entry" rowspan="1" colspan="1">Cached canonical name</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">9</TD
><td class="entry" rowspan="1" colspan="1">ST_MACRO</TD
><td class="entry" rowspan="1" colspan="1">Macro name to id value mapping</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">10</TD
><td class="entry" rowspan="1" colspan="1">ST_RULESET</TD
><td class="entry" rowspan="1" colspan="1">Ruleset name to number mapping</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">11</TD
><td class="entry" rowspan="1" colspan="1">ST_SERVICE</TD
><td class="entry" rowspan="1" colspan="1">Service switch file entry</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">16</TD
><td class="entry" rowspan="1" colspan="1">ST_MCI</TD
><td class="entry" rowspan="1" colspan="1">SMTP connection status\*[=a]</TD
></TR
></TBODY
></TABLE
><p class="para">This is the base (offset) of types 16 through 16+<em class="emphasis">n</EM
>, where
<em class="emphasis">n</EM
> is 16 plus MAXMAILERS as defined in <em class="emphasis">conf.h</EM
>.
If <em class="emphasis">stab</EM
>() is being used to insert a symbol, the above output
is concluded with:</P
><p class="para"><blockquote class="screen"><pre class="screen">entered</PRE
></BLOCKQUOTE
></P
><p class="para">If <em class="emphasis">stab</EM
>() is being used to look up a symbol, one of the
two following messages is printed:</P
><p class="para"><blockquote class="screen"><pre class="screen">not found
type <code class="replaceable"><i>type</I
></CODE
> val <code class="replaceable"><i>hex hex hex hex</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">If it is found, four hexadecimal values are printed, which
show the first four 4-byte words of the value.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-124">37.5.124 -d36.9</A
></H3
><p class="refpurpose">Show hash bucket</P
></DIV
><blockquote><div class="refsect1"><p class="para">A hashing algorithm is used to make the symbol table more efficient.
The <code class="literal">-d36.9</CODE
> debugging switch is used to see the hash
value selected for any given symbol:</P
><p class="para"><blockquote class="screen"><pre class="screen">(hfunc=<code class="replaceable"><i>hash</I
></CODE
>)</PRE
></BLOCKQUOTE
></P
><p class="para">The number of possible hash-table buckets is limited by STABSIZE, as defined
in <em class="emphasis">stab.c</EM
>.
[9]</P
><blockquote class="footnote"><p class="para">[9] You can experiment with different hashing algorithms by modifying
the code in <em class="emphasis">stab.c</EM
>. But note that it has already been heavily tuned
in V8.7, roughly doubling its speed over that of earlier versions.</P
></BLOCKQUOTE
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-125">37.5.125 -d36.90</A
></H3
><p class="refpurpose">Trace function applied to all symbols</P
></DIV
><blockquote><div class="refsect1"><p class="para">The <code class="literal">-d36.90</CODE
> debugging switch causes the name and type of
each symbol to be printed as a common function is applied to each with
<em class="emphasis">sendmail</EM
>'s internal <em class="emphasis">stabapply</EM
>() function.</P
><p class="para"><blockquote class="screen"><pre class="screen">stabapply: trying <code class="replaceable"><i>type</I
></CODE
>/<code class="replaceable"><i>name</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">The <em class="emphasis">stabapply</EM
>() routine is used to initialize maps and
to print the members of a class.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-126">37.5.126 -d37.1</A
></H3
><p class="refpurpose">Trace setting of options</P
>(useful)</DIV
><blockquote><div class="refsect1"><p class="para"><a class="indexterm" name="AUTOID-59082"></A
>Options can be set on the command line or in the configuration file.
The <code class="literal">-d37.1</CODE
> (a.k.a. <code class="literal">-d37</CODE
>) debugging switch allows you to watch each option
being defined. As each is processed, 
this message is first
printed, without a trailing newline:</P
><p class="para"><blockquote class="screen"><pre class="screen">setoption: <code class="replaceable"><i>name</I
></CODE
> (<code class="replaceable"><i>char</I
></CODE
>).<code class="replaceable"><i>sub</I
></CODE
>=<code class="replaceable"><i>val</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">Here, <code class="replaceable"><i>name</I
></CODE
> is the option's multicharacter name,
<code class="replaceable"><i>char</I
></CODE
> is its single-character equivalent (or a hexadecimal
value if it is non-ASCII), and <code class="replaceable"><i>sub</I
></CODE
> is the
subvalue for that option if there was one.
Finally, <em class="emphasis">val</EM
> is the value being given to that option.
If the option has already been set from the command line and
is thus prohibited from being set in the configuration file,
<em class="emphasis">sendmail</EM
> prints:</P
><p class="para"><blockquote class="screen"><pre class="screen">(ignored)</PRE
></BLOCKQUOTE
></P
><p class="para">A newline is then printed, and the job is done. If
defining the option is permitted, <em class="emphasis">sendmail</EM
> next checks to see whether
it is <em class="emphasis">safe</EM
>. If it is not, <em class="emphasis">sendmail</EM
> prints:</P
><p class="para"><blockquote class="screen"><pre class="screen">(unsafe)</PRE
></BLOCKQUOTE
></P
><p class="para">If it is unsafe, <em class="emphasis">sendmail</EM
> checks to see whether it should
relinquish its <em class="emphasis">root</EM
> privilege. If so, it prints:</P
><p class="para"><blockquote class="screen"><pre class="screen">(Resetting uid)</PRE
></BLOCKQUOTE
></P
><p class="para">A newline is then printed, and the option has been defined. Options
in general and safe versus unsafe are covered in
<a class="xref" href="ch34_01.htm" title="Options">Chapter 34, <cite class="chapter">Options</CITE
></A
>.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-127">37.5.127 -d37.8</A
></H3
><p class="refpurpose">Trace adding of words to a class</P
>(useful)</DIV
><blockquote><div class="refsect1"><p class="para">The adding of words to a class (<code class="literal">C</CODE
>
or <code class="literal">F</CODE
> configuration commands) can be traced with the
<code class="literal">-d37.8</CODE
> debugging switch. Each word is printed like this:</P
><p class="para"><blockquote class="screen"><pre class="screen">setclass(<code class="replaceable"><i>name</I
></CODE
>, <code class="replaceable"><i>text</I
></CODE
>)</PRE
></BLOCKQUOTE
></P
><p class="para">The <code class="replaceable"><i>text</I
></CODE
> is added to the class whose symbolic name is
<code class="replaceable"><i>name</I
></CODE
>. Class names can be single-character or multicharacter
(see <a class="xref" href="ch32_01.htm" title="Class Configuration Commands">Section 32.1, "Class Configuration Commands"</A
>).</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-128">37.5.128 -d38.2</A
></H3
><p class="refpurpose">Show map opens and failures</P
>(useful)</DIV
><blockquote><div class="refsect1"><p class="para">Most maps are declared directly with the <code class="literal">K</CODE
> configuration
command (see <a class="xref" href="ch33_03.htm#SML2-CH-33-SECT-3-4-2" title="The K Configuration Command">Section 33.3</A
>). Others are declared internally by <em class="emphasis">sendmail</EM
>,
such as the <em class="emphasis">host</EM
> and <em class="emphasis">alias</EM
> maps.
The <code class="literal">-d38.2</CODE
> debugging switch
[10]
first shows maps being initialized:</P
><blockquote class="footnote"><p class="para">[10] There is no <code class="literal">-d38.1</CODE
> information.</P
></BLOCKQUOTE
><p class="para"><blockquote class="screen"><pre class="screen">map_init(<code class="replaceable"><i>class</I
></CODE
>:<code class="replaceable"><i>name</I
></CODE
>, <code class="replaceable"><i>file</I
></CODE
>, <code class="replaceable"><i>pass</I
></CODE
>)</PRE
></BLOCKQUOTE
></P
><p class="para">Here, <code class="replaceable"><i>class</I
></CODE
> is one of the internal classes allowed by <em class="emphasis">sendmail</EM
>,
such as <em class="emphasis">host</EM
>, and <em class="emphasis">dequote</EM
> 
(see <a class="xref" href="ch33_03.htm#SML2-CH-33-SECT-3-4-2" title="The K Configuration Command">Section 33.3</A
>, the <code class="literal">K</CODE
> configuration command).
The <code class="replaceable"><i>name</I
></CODE
> is either the name you gave to the map with the <code class="literal">K</CODE
>
configuration command or one assigned internally by <em class="emphasis">sendmail</EM
> (like
<em class="emphasis">aliases.files</EM
>).
The <code class="replaceable"><i>file</I
></CODE
> is either NULL or the name of the database file (such
as <em class="emphasis">/etc/aliases</EM
>).
And <code class="replaceable"><i>pass</I
></CODE
> is a flag that tells <em class="emphasis">sendmail</EM
> whether or
not it should open the database, rebuild the database, or do neither.</P
><p class="para">Next the <code class="literal">-d38.2</CODE
> debugging switch causes <em class="emphasis">sendmail</EM
>
to show each map as it is about to be
opened. The output that is produced will look like one of the
following lines:</P
><p class="para"><blockquote class="screen"><pre class="screen">bt_map_open(<code class="replaceable"><i>name</I
></CODE
>, <code class="replaceable"><i>file</I
></CODE
>, <code class="replaceable"><i>mode</I
></CODE
>)
hash_map_open(<code class="replaceable"><i>name</I
></CODE
>, <code class="replaceable"><i>file</I
></CODE
>, <code class="replaceable"><i>mode</I
></CODE
>)
hes_map_open(<code class="replaceable"><i>name</I
></CODE
>, <code class="replaceable"><i>file</I
></CODE
>, <code class="replaceable"><i>mode</I
></CODE
>)
impl_map_open(<code class="replaceable"><i>name</I
></CODE
>, <code class="replaceable"><i>file</I
></CODE
>, <code class="replaceable"><i>mode</I
></CODE
>)
ldap_map_open(<code class="replaceable"><i>name</I
></CODE
>, <code class="replaceable"><i>mode</I
></CODE
>)
ndbm_map_open(<code class="replaceable"><i>name</I
></CODE
>, <code class="replaceable"><i>file</I
></CODE
>, <code class="replaceable"><i>mode</I
></CODE
>)
ni_map_open(<code class="replaceable"><i>name</I
></CODE
>, <code class="replaceable"><i>file</I
></CODE
>, <code class="replaceable"><i>mode</I
></CODE
>)
nis_map_open(<code class="replaceable"><i>name</I
></CODE
>, <code class="replaceable"><i>file</I
></CODE
>, <code class="replaceable"><i>mode</I
></CODE
>)
nisplus_map_open(<code class="replaceable"><i>name</I
></CODE
>, <code class="replaceable"><i>file</I
></CODE
>, <code class="replaceable"><i>mode</I
></CODE
>)
stab_map_open(<code class="replaceable"><i>name</I
></CODE
>, <code class="replaceable"><i>file</I
></CODE
>, <code class="replaceable"><i>mode</I
></CODE
>)
switch_map_open(<code class="replaceable"><i>name</I
></CODE
>, <code class="replaceable"><i>file</I
></CODE
>, <code class="replaceable"><i>mode</I
></CODE
>)
text_map_open(<code class="replaceable"><i>name</I
></CODE
>, <code class="replaceable"><i>file</I
></CODE
>, <code class="replaceable"><i>mode</I
></CODE
>)
user_map_open(<code class="replaceable"><i>name</I
></CODE
>, <code class="replaceable"><i>mode</I
></CODE
>)</PRE
></BLOCKQUOTE
></P
><p class="para">In all of the previous lines, the <code class="replaceable"><i>mode</I
></CODE
> is a decimal representation
of the file permissions that are used during the open. The name prefixing
each line corresponds to the class of map. For example, <code class="literal">impl</CODE
>
corresponds to the <em class="emphasis">implicit</EM
> class.</P
><p class="para">The <code class="literal">-d38.2</CODE
> debugging switch also causes <em class="emphasis">sendmail</EM
> to
display the <em class="emphasis">nis</EM
> domain that was used if one was specified for the <em class="emphasis">nisplus</EM
>
class:</P
><p class="para"><blockquote class="screen"><pre class="screen">nisplus_map_open(<code class="replaceable"><i>file</I
></CODE
>): using domain <code class="replaceable"><i>ypdomain</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">The <code class="literal">-d38.2</CODE
> debugging switch also allows other silent errors
to be printed about some open failures.
Under <em class="emphasis">nis+</EM
>, lookups are performed by named columns (as in the case of
the password database, the columns are named <code class="literal">passwd</CODE
>, <code class="literal">shell</CODE
>,
and so on):</P
><p class="para"><blockquote class="screen"><pre class="screen">nisplus_map_open(<code class="replaceable"><i>name</I
></CODE
>): can not find key column <code class="replaceable"><i>colname</I
></CODE
>
nisplus_map_open(<code class="replaceable"><i>name</I
></CODE
>): can not find column <code class="replaceable"><i>colname</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">Text files that are used as maps must be declared with a filename that
is an absolute path (begins with a <code class="literal">/</CODE
> character thus forming
a fully qualified pathname), that exists, and that is a regular file.
If there is a problem, one of the following
is logged (even if <code class="literal">-d38.2</CODE
> is not specified):</P
><p class="para"><blockquote class="screen"><pre class="screen">text_map_open: file name required
text_map_open(<code class="replaceable"><i>file</I
></CODE
>): file name must be fully qualified
text_map_open(<code class="replaceable"><i>name</I
></CODE
>): can not stat <code class="replaceable"><i>file</I
></CODE
>
text_map_open(<code class="replaceable"><i>name</I
></CODE
>): <code class="replaceable"><i>file</I
></CODE
> is not a file</PRE
></BLOCKQUOTE
></P
><p class="para">Text files should be syntactically correct. The delimiting character,
<code class="replaceable"><i>char</I
></CODE
>, will print either as a single character or as the phrase
<code class="literal">(whitespace)</CODE
>. Note that the third line below will be
reported only when the <code class="literal">-d38.2</CODE
> debugging switch is used:</P
><p class="para"><blockquote class="screen"><pre class="screen">text_map_open(<code class="replaceable"><i>file</I
></CODE
>): -k should specify a number, not <code class="replaceable"><i>badtext</I
></CODE
>
text_map_open(<code class="replaceable"><i>file</I
></CODE
>): -v should specify a number, not <code class="replaceable"><i>badtext</I
></CODE
>
text_map_open(<code class="replaceable"><i>file</I
></CODE
>): delimiter = <code class="replaceable"><i>char</I
></CODE
></PRE
></BLOCKQUOTE
></P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-129">37.5.129 -d38.3</A
></H3
><p class="refpurpose">Show passes</P
></DIV
><blockquote><div class="refsect1"><p class="para">The <em class="emphasis">sendmail</EM
> program initializes maps in passes so that it
can open a map for reading or rebuild. That is, pass 0 opens it for
reading only, and passes 1 and 2 open it for updating.
This gives <em class="emphasis">sendmail</EM
> the opportunity to detect optional maps. 
The <code class="literal">-d38.3</CODE
> debugging switch causes <em class="emphasis">sendmail</EM
>
to print <code class="literal">wrong pass</CODE
>
every time it skips rebuilding because the pass is inappropriate:</P
><p class="para"><blockquote class="screen"><pre class="screen">map_init(<code class="replaceable"><i>class</I
></CODE
>:<code class="replaceable"><i>name</I
></CODE
>, <code class="replaceable"><i>file</I
></CODE
>, <code class="replaceable"><i>pass</I
></CODE
>)  <i class="lineannotation"><img src="../chars/larr.gif" alt="&lt;-"> from -d38.2</I
>
wrong pass</PRE
></BLOCKQUOTE
></P
><p class="para">The <code class="literal">-d38.3</CODE
> debugging switch also causes <em class="emphasis">sendmail</EM
> to print
a failure message if an <code class="literal">implicit</CODE
> class map does not exist:</P
><p class="para"><blockquote class="screen"><pre class="screen">impl_map_open(<code class="replaceable"><i>name</I
></CODE
>, <code class="replaceable"><i>file</I
></CODE
>, <code class="replaceable"><i>mode</I
></CODE
>)   <i class="lineannotation"><img src="../chars/larr.gif" alt="&lt;-"> from -d38.2</I
>
no map file</PRE
></BLOCKQUOTE
></P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-130">37.5.130 -d38.4</A
></H3
><p class="refpurpose">Show result of map open</P
>(useful)</DIV
><blockquote><div class="refsect1"><p class="para">When rebuilding the aliases files, each database is opened before it is
rebuilt or not. The <code class="literal">-d38.4</CODE
> debugging switch shows the success or
failure of each open:</P
><p class="para"><blockquote class="screen"><pre class="screen">map_init(<code class="replaceable"><i>class</I
></CODE
>:<code class="replaceable"><i>name</I
></CODE
>, <code class="replaceable"><i>file</I
></CODE
>, <code class="replaceable"><i>pass</I
></CODE
>)  <i class="lineannotation"><img src="../chars/larr.gif" alt="&lt;-"> from -d38.2</I
>
     <code class="replaceable"><i>class</I
></CODE
>:<code class="replaceable"><i>name</I
></CODE
> <code class="replaceable"><i>file</I
></CODE
> valid <em class="emphasis">or</EM
> invalid</PRE
></BLOCKQUOTE
></P
><p class="para">The status is <code class="literal">valid</CODE
> if the open succeeded; otherwise, it is <code class="literal">invalid</CODE
>.</P
><p class="para">The <code class="literal">-d38.4</CODE
> debugging switch also shows each map being looked up
in a <code class="literal">switch</CODE
> class map (see <a class="xref" href="ch33_08.htm" title="">Section 33.8.17, switch</A
>).</P
><p class="para"><blockquote class="screen"><pre class="screen">switch_map_open(<code class="replaceable"><i>name</I
></CODE
>, <code class="replaceable"><i>file</I
></CODE
>, <code class="replaceable"><i>mode</I
></CODE
>)  <i class="lineannotation"><img src="../chars/larr.gif" alt="&lt;-"> from -d38.2</I
>
        map_stack[<code class="replaceable"><i>index</I
></CODE
>] = <code class="replaceable"><i>class</I
></CODE
>:<code class="replaceable"><i>name</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">If the <code class="replaceable"><i>name</I
></CODE
> is not one that was declared in a <code class="literal">K</CODE
> configuration
command, the following error is printed:</P
><p class="para"><blockquote class="screen"><pre class="screen">Switch map <code class="replaceable"><i>class</I
></CODE
>: unknown member map <code class="replaceable"><i>name</I
></CODE
></PRE
></BLOCKQUOTE
></P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-131">37.5.131 -d38.9</A
></H3
><p class="refpurpose">Trace map closings and appends</P
></DIV
><blockquote><div class="refsect1"><p class="para">The <code class="literal">-d38.9</CODE
> debugging switch traces map closures for those kind
of maps that can be closed:</P
><p class="para"><blockquote class="screen"><pre class="screen">ndbm_map_close(<code class="replaceable"><i>name</I
></CODE
>, <code class="replaceable"><i>file</I
></CODE
>, <code class="replaceable"><i>flags</I
></CODE
>)
db_map_close(<code class="replaceable"><i>name</I
></CODE
>, <code class="replaceable"><i>file</I
></CODE
>, <code class="replaceable"><i>flags</I
></CODE
>)
impl_map_close(<code class="replaceable"><i>name</I
></CODE
>, <code class="replaceable"><i>file</I
></CODE
>, <code class="replaceable"><i>flags</I
></CODE
>)
prog_map_lookup(<code class="replaceable"><i>name</I
></CODE
>) failed (<code class="replaceable"><i>errno</I
></CODE
>) - closing
seq_map_close(<code class="replaceable"><i>name</I
></CODE
>)</PRE
></BLOCKQUOTE
></P
><p class="para">Here, the <code class="replaceable"><i>name</I
></CODE
> is either the name you gave to the map with the <code class="literal">K</CODE
>
configuration command or one assigned internally by <em class="emphasis">sendmail</EM
> (like
<em class="emphasis">aliases.files</EM
>).
The <code class="replaceable"><i>file</I
></CODE
> is the filename on disk 

that contains the database.
The <code class="replaceable"><i>flags</I
></CODE
> describe the specific features of a map. They are printed
in hexadecimal, and the meanings of the values printed are listed in
<a class="xref" href="#SML2-CH-37-TAB-13" title="Flags Describing Properties of Database Maps">Table 37.14</A
>.</P
><table class="table"><caption class="table"><a class="title" name="SML2-CH-37-TAB-13">Table 37.14: Flags Describing Properties of Database Maps</A
></CAPTION
><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1">Hex</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Text</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Description</TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">00001</CODE
></TD
><td class="entry" rowspan="1" colspan="1">MF_VALID</TD
><td class="entry" rowspan="1" colspan="1">This entry is valid.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">00002</CODE
></TD
><td class="entry" rowspan="1" colspan="1">MF_INCLNULL</TD
><td class="entry" rowspan="1" colspan="1">Include null byte in key.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">00004</CODE
></TD
><td class="entry" rowspan="1" colspan="1">MF_OPTIONAL</TD
><td class="entry" rowspan="1" colspan="1">Don't complain if map not found.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">00008</CODE
></TD
><td class="entry" rowspan="1" colspan="1">MF_NOFOLDCASE</TD
><td class="entry" rowspan="1" colspan="1">Don't fold case in keys.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">00010</CODE
></TD
><td class="entry" rowspan="1" colspan="1">MF_MATCHONLY</TD
><td class="entry" rowspan="1" colspan="1">Don't use the map value.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">00020</CODE
></TD
><td class="entry" rowspan="1" colspan="1">MF_OPEN</TD
><td class="entry" rowspan="1" colspan="1">This entry is open.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">00040</CODE
></TD
><td class="entry" rowspan="1" colspan="1">MF_WRITABLE</TD
><td class="entry" rowspan="1" colspan="1">Open for writing.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">00080</CODE
></TD
><td class="entry" rowspan="1" colspan="1">MF_ALIAS</TD
><td class="entry" rowspan="1" colspan="1">This is an alias file.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">00100</CODE
></TD
><td class="entry" rowspan="1" colspan="1">MF_TRY0NULL</TD
><td class="entry" rowspan="1" colspan="1">Try with no null byte.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">00200</CODE
></TD
><td class="entry" rowspan="1" colspan="1">MF_TRY1NULL</TD
><td class="entry" rowspan="1" colspan="1">Try with the null byte.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">00400</CODE
></TD
><td class="entry" rowspan="1" colspan="1">MF_LOCKED</TD
><td class="entry" rowspan="1" colspan="1">This map is currently locked.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">00800</CODE
></TD
><td class="entry" rowspan="1" colspan="1">MF_ALIASWAIT</TD
><td class="entry" rowspan="1" colspan="1">Alias map in aliaswait state.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">01000</CODE
></TD
><td class="entry" rowspan="1" colspan="1">MF_IMPL_HASH</TD
><td class="entry" rowspan="1" colspan="1">Implicit: underlying hash database.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">02000</CODE
></TD
><td class="entry" rowspan="1" colspan="1">MF_IMPL_NDBM</TD
><td class="entry" rowspan="1" colspan="1">Implicit: underlying ndbm database.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">04000</CODE
></TD
><td class="entry" rowspan="1" colspan="1">MF_UNSAFEDB</TD
><td class="entry" rowspan="1" colspan="1">This map is world writable.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">08000</CODE
></TD
><td class="entry" rowspan="1" colspan="1">MF_APPEND</TD
><td class="entry" rowspan="1" colspan="1">Append new entry on rebuild.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">10000</CODE
></TD
><td class="entry" rowspan="1" colspan="1">MF_KEEPQUOTES</TD
><td class="entry" rowspan="1" colspan="1">Don't dequote key before lookup.</TD
></TR
></TBODY
></TABLE
><p class="para">In addition to tracing map closures, the <code class="literal">-d38.9</CODE
> debugging switch
traces map appends allowed by the MF_APPEND flag 
(see <a class="xref" href="ch33_03.htm#SML2-CH-33-SECT-3-4-2" title="-A  append values for duplicate keys (V8.7 and above)">Section 33.3.4.1, "-A  append values for duplicate keys (V8.7 and above)"</A
>) as specified
when the database is declared by the <code class="literal">K</CODE
> configuration command:</P
><p class="para"><blockquote class="screen"><pre class="screen">ndbm_map_store append=<code class="replaceable"><i>new</I
></CODE
>
db_map_store append=<code class="replaceable"><i>new</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">Here <code class="replaceable"><i>new</I
></CODE
> is 
new value appended to the old. Since this property is used for alias files, the
new and old values have a comma inserted between them.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-132">37.5.132 -d38.10</A
></H3
><p class="refpurpose">Trace NIS search for @:@</P
></DIV
><blockquote><div class="refsect1"><p class="para">The NIS  alias map needs to contain a <code class="literal">@:@</CODE
> entry to indicate
that it is fully updated and ready for reading. But
because HP-UX omits the <code class="literal">@:@</CODE
>, it is useful only as
a check to see whether the NIS map exists. The <code class="literal">-d38.10</CODE
> debugging switch
causes the result of this check to be printed as:</P
><p class="para"><blockquote class="screen"><pre class="screen">nis_map_open: yp_match(@, <code class="replaceable"><i>domain</I
></CODE
>, <code class="replaceable"><i>nismap</I
></CODE
>)</PRE
></BLOCKQUOTE
></P
><p class="para">&#13;Here, <code class="replaceable"><i>domain</I
></CODE
> is the NIS domain, and <code class="replaceable"><i>nismap</I
></CODE
>
is usually <em class="emphasis">mail.aliases</EM
> (but it can be redefined in your
configuration file; see <a class="xref" href="ch34_08.htm" title="">Section 34.8.1</A
>).
If the map is not marked as optional
(see <a class="xref" href="ch33_03.htm#SML2-CH-33-SECT-3-4-2" title="-o  the database file is optional (V8.1 and above)">Section 33.3.4.8, "-o  the database file is optional (V8.1 and above)"</A
>), the following error will be printed:</P
><p class="para"><blockquote class="screen"><pre class="screen">Cannot bind to map <code class="replaceable"><i>nismap</I
></CODE
> in domain <code class="replaceable"><i>domain</I
></CODE
>: <i class="lineannotation"> reason here</I
></PRE
></BLOCKQUOTE
></P
><p class="para">The <code class="literal">-d38.10</CODE
> debugging switch also traces the NIS+ open's check for a valid
table.</P
><p class="para"><blockquote class="screen"><pre class="screen">nisplus_map_open: <code class="replaceable"><i>nisplusmap.domain</I
></CODE
> is not a table</PRE
></BLOCKQUOTE
></P
><p class="para">Essentially, this says that the NIS+ map <code class="replaceable"><i>nisplusmap</I
></CODE
> (in the 
domain shown) does not exist. The error is printed
even if the <code class="literal">-o</CODE
> (optional) database switch (see <a class="xref" href="ch33_03.htm#SML2-CH-33-SECT-3-4-2" title="-o  the database file is optional (V8.1 and above)">Section 33.3.4.8</A
>) is missing.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-133">37.5.133 -d38.12</A
></H3
><p class="refpurpose">Trace map stores</P
></DIV
><blockquote><div class="refsect1"><p class="para">The <code class="literal">-d38.12</CODE
> debugging switch shows values being stored in maps
that support updates.</P
><p class="para"><blockquote class="screen"><pre class="screen">db_map_store(<code class="replaceable"><i>name</I
></CODE
>, <code class="replaceable"><i>key</I
></CODE
>, <code class="replaceable"><i>value</I
></CODE
>)
ndbm_map_store(<code class="replaceable"><i>name</I
></CODE
>, <code class="replaceable"><i>key</I
></CODE
>, <code class="replaceable"><i>value</I
></CODE
>)
seq_map_store(<code class="replaceable"><i>name</I
></CODE
>, <code class="replaceable"><i>key</I
></CODE
>, <code class="replaceable"><i>value</I
></CODE
>)</PRE
></BLOCKQUOTE
></P
><p class="para">Here, the <code class="replaceable"><i>name</I
></CODE
> is either the name you gave to the map with the <code class="literal">K</CODE
>
configuration command or the <code class="replaceable"><i>name</I
></CODE
> assigned internally by <em class="emphasis">sendmail</EM
> (like
<em class="emphasis">aliases.files</EM
>).
The <code class="replaceable"><i>key</I
></CODE
> is the key for which the new value is being stored,
and the <code class="replaceable"><i>value</I
></CODE
> is the value for that key.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-134">37.5.134 -d38.19</A
></H3
><p class="refpurpose">Trace switch map finds</P
>(useful)</DIV
><blockquote><div class="refsect1"><p class="para">A switched map is one that, either as the result of a service-switch file or
because of <em class="emphasis">sendmail</EM
>'s internal logic, causes lookups to follow
a select path. For example, Sun's Solaris 2 <em class="emphasis">nsswitch.conf</EM
> might
specify that aliases be looked up in the order <em class="emphasis">files</EM
>, then <em class="emphasis">nis</EM
>:</P
><p class="para"><blockquote class="screen"><pre class="screen">switch_map_open(<code class="replaceable"><i>name</I
></CODE
>, <code class="replaceable"><i>file</I
></CODE
>, <code class="replaceable"><i>mode</I
></CODE
>)  <i class="lineannotation"><img src="../chars/larr.gif" alt="&lt;-"> from -d38.2</I
>
switch_map_find =&gt; <code class="replaceable"><i>nmaps</I
></CODE
>
                <code class="replaceable"><i>maptype</I
></CODE
>
                ...</PRE
></BLOCKQUOTE
></P
><p class="para">First the number of maps found is printed with <code class="replaceable"><i>nmaps</I
></CODE
>, then each
type of map found in the list is printed. Each is a class name, such as
<em class="emphasis">files</EM
>, or <em class="emphasis">nis</EM
>.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-135">37.5.135 -d38.20</A
></H3
><p class="refpurpose">Trace map lookups</P
>(useful)</DIV
><blockquote><div class="refsect1"><p class="para">The -d38.20 debugging switch traces many different map lookups.
The <em class="emphasis">getcanonname</EM
>() routine looks up a hostname and tries
to canonify it:</P
><p class="para"><blockquote class="screen"><pre class="screen">getcanonname(<code class="replaceable"><i>host</I
></CODE
>), trying <code class="replaceable"><i>maptype</I
></CODE
>
getcanonname(<code class="replaceable"><i>host</I
></CODE
>), found
getcanonname(<code class="replaceable"><i>host</I
></CODE
>), failed, stat=<code class="replaceable"><i>error</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">Here, <code class="replaceable"><i>host</I
></CODE
> is the hostname that is being looked up, and <code class="replaceable"><i>maptype</I
></CODE
>
is one of <em class="emphasis">files</EM
>, <em class="emphasis">nis</EM
>, <em class="emphasis">nisplus</EM
>, <em class="emphasis">dns</EM
>, or <em class="emphasis">netinfo</EM
>.
If the canonical name is not found, the <code class="replaceable"><i>error</I
></CODE
> shows one of the
errors listed in <em class="emphasis">&lt;sysexits.h&gt;</EM
>.
The process of canonifying the name is handled by calling special
subroutines based on the <code class="replaceable"><i>maptype</I
></CODE
>:</P
><p class="para"><blockquote class="screen"><pre class="screen">text_getcanonname(<code class="replaceable"><i>host</I
></CODE
>)				<i class="lineannotation"><img src="../chars/larr.gif" alt="&lt;-"> maptype is files</I
>
nis_getcanonname(<code class="replaceable"><i>host</I
></CODE
>)				<i class="lineannotation"><img src="../chars/larr.gif" alt="&lt;-"> maptype is nis</I
>
nisplus_getcanoname(<code class="replaceable"><i>host</I
></CODE
>), qbuf=<code class="replaceable"><i>query</I
></CODE
>		<i class="lineannotation"><img src="../chars/larr.gif" alt="&lt;-"> maptype is nisplus</I
>
dns_getcanonname(<code class="replaceable"><i>host</I
></CODE
>, <code class="replaceable"><i>flag</I
></CODE
>)			<i class="lineannotation"><img src="../chars/larr.gif" alt="&lt;-"> maptype is dns, printed with -d8.2</I
>
ni_getcanonname(<code class="replaceable"><i>host</I
></CODE
>)				<i class="lineannotation"><img src="../chars/larr.gif" alt="&lt;-"> maptype is netinfo</I
></PRE
></BLOCKQUOTE
></P
><p class="para">The <em class="emphasis">nisplus_getcanoname</EM
>() routine is far more verbose than the other. In
addition to the information printed above, the <code class="literal">-d38.20</CODE
> switch also prints</P
><p class="para"><blockquote class="screen"><pre class="screen">nisplus_getcanoname(<code class="replaceable"><i>host</I
></CODE
>), got <code class="replaceable"><i>count</I
></CODE
> entries, all but first ignored
nisplus_getcanoname(<code class="replaceable"><i>host</I
></CODE
>), found in directory &quot;<code class="replaceable"><i>nisdir</I
></CODE
>&quot;
nisplus_getcanonname(<code class="replaceable"><i>host</I
></CODE
>), found <code class="replaceable"><i>result</I
></CODE
>
nisplus_getcanonname(<code class="replaceable"><i>host</I
></CODE
>), failed, status=<code class="replaceable"><i>nsistatus</I
></CODE
>, nsw_stat=<code class="replaceable"><i>errno</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">The -d38.20 debugging switch also traces general lookups in various
kinds of databases. Again note that <em class="emphasis">nisplus</EM
> is more verbose
than the others:</P
><p class="para"><blockquote class="screen"><pre class="screen">ndbm_map_lookup(<code class="replaceable"><i>name</I
></CODE
>, <code class="replaceable"><i>key</I
></CODE
>)
db_map_lookup(<code class="replaceable"><i>name</I
></CODE
>, <code class="replaceable"><i>key</I
></CODE
>)
nis_map_lookup(<code class="replaceable"><i>name</I
></CODE
>, <code class="replaceable"><i>key</I
></CODE
>)
nisplus_map_lookup(<code class="replaceable"><i>name</I
></CODE
>, <code class="replaceable"><i>key</I
></CODE
>)
qbuf=<code class="replaceable"><i>query</I
></CODE
>
nisplus_map_lookup(<code class="replaceable"><i>key</I
></CODE
>), got <code class="replaceable"><i>count</I
></CODE
> entries, additional entries ignored
nisplus_map_lookup(<code class="replaceable"><i>key</I
></CODE
>), found <code class="replaceable"><i>value</I
></CODE
>
nisplus_map_lookup(<code class="replaceable"><i>key</I
></CODE
>), failed
hes_map_lookup(<code class="replaceable"><i>name</I
></CODE
>, <code class="replaceable"><i>key</I
></CODE
>)
ni_map_lookup(<code class="replaceable"><i>name</I
></CODE
>, <code class="replaceable"><i>key</I
></CODE
>)
stab_lookup(<code class="replaceable"><i>name</I
></CODE
>, <code class="replaceable"><i>key</I
></CODE
>)
impl_map_lookup(<code class="replaceable"><i>name</I
></CODE
>, <code class="replaceable"><i>key</I
></CODE
>)
user_map_lookup(<code class="replaceable"><i>name</I
></CODE
>, <code class="replaceable"><i>key</I
></CODE
>)
prog_map_lookup(<code class="replaceable"><i>name</I
></CODE
>, <code class="replaceable"><i>key</I
></CODE
>)
prog_map_lookup(<code class="replaceable"><i>name</I
></CODE
>): empty answer
seq_map_lookup(<code class="replaceable"><i>name</I
></CODE
>, <code class="replaceable"><i>key</I
></CODE
>)</PRE
></BLOCKQUOTE
></P
><p class="para">Here, the <code class="replaceable"><i>name</I
></CODE
> is either the name you gave to the map with the <code class="literal">K</CODE
>
configuration command or one assigned internally by <em class="emphasis">sendmail</EM
> (such as
<em class="emphasis">aliases.files</EM
>). The <code class="replaceable"><i>key</I
></CODE
> is the item being 

looked up. The
<code class="replaceable"><i>file</I
></CODE
> is the pathname of the file that contains the database.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-136">37.5.136 -d38.44</A
></H3
><p class="refpurpose">Show nis-getcanonname() record</P
></DIV
><blockquote><div class="refsect1"><p class="para">The <code class="literal">-d38.20</CODE
> debugging switch described above prints the <em class="emphasis">nis</EM
> lookup of the canonical
hostname. This <code class="literal">-d38.44</CODE
> debugging switch prints the result of that lookup:</P
><p class="para"><blockquote class="screen"><pre class="screen">nis_getcanonname(<code class="replaceable"><i>host</I
></CODE
>)          <i class="lineannotation"><img src="../chars/larr.gif" alt="&lt;-"> from -d38.20</I
>
got record `<code class="replaceable"><i>result</I
></CODE
>\'</PRE
></BLOCKQUOTE
></P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-137">37.5.137 -d39.1</A
></H3
><p class="refpurpose">Display %digit database mapping</P
></DIV
><blockquote><div class="refsect1"><p class="para">When the RHS of a rule matches an entry in a database map with <code class="literal">$(</CODE
>
and <code class="literal">$)</CODE
>, that entry replaces the key. If the entry contains
<code class="literal">%</CODE
><code class="replaceable"><i>digit</I
></CODE
> literals, they are replaced by corresponding <code class="literal">$@</CODE
> 
values in the RHS (see <a class="xref" href="ch33_04.htm#SML2-CH-33-SECT-4-2" title="Specify Numbered Substitution with $@">Section 33.4.2, "Specify Numbered Substitution with $@"</A
>).</P
><p class="para">The <code class="literal">-d39.1</CODE
> (a.k.a. <code class="literal">-d39</CODE
>) debugging switch causes <em class="emphasis">sendmail</EM
> to print
the entry and any replacement values:</P
><p class="para"><blockquote class="screen"><pre class="screen">map_rewrite(<code class="replaceable"><i>entry</I
></CODE
>), av =
       <code class="replaceable"><i>value1</I
></CODE
>
       <code class="replaceable"><i>value2</I
></CODE
>
       <code class="replaceable"><i>...</I
></CODE
><i class="lineannotation">etc</I
></PRE
></BLOCKQUOTE
></P
><p class="para">After the RHS is rewritten (after all the <code class="literal">$@</CODE
> values have
replaced all the <code class="literal">%</CODE
><code class="replaceable"><i>digit</I
></CODE
> literals), 
<em class="emphasis">sendmail</EM
> prints the result:</P
><p class="para"><blockquote class="screen"><pre class="screen">map_rewrite =&gt; <i class="lineannotation">rewritten RHS here</I
></PRE
></BLOCKQUOTE
></P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-138">37.5.138 -d40.1</A
></H3
><p class="refpurpose">Trace processing of the queue</P
></DIV
><blockquote><div class="refsect1"><p class="para">The <code class="literal">-d40.1</CODE
> (a.k.a. <code class="literal">-d40</CODE
>) debugging switch traces the placing
of a mail message into the queue and the processing of
queued files.</P
><p class="para">When a mail message is placed into the queue, its <code class="literal">qf</CODE
>
file is written as a <code class="literal">tf</CODE
> temporary file; then that temporary
file is closed and renamed to be the <code class="literal">qf</CODE
> file. The <code class="literal">-d40.1</CODE
>
debugging switch causes <em class="emphasis">sendmail</EM
> to announce
that it is beginning that process by printing the queued message's
identifier:</P
><p class="para"><blockquote class="screen"><pre class="screen">&gt;&gt;&gt;&gt;&gt; queueing <code class="replaceable"><i>qid</I
></CODE
>(new id) &gt;&gt;&gt;&gt;&gt; 
queueing <i class="lineannotation"> for each recipient, output of printaddr</I
>()<i class="lineannotation"> here (see <a class="xref" href="ch37_03.htm" title="The Output Produced by printaddr()">Section 37.3.1</A
>)</I
>
&lt;&lt;&lt;&lt;&lt; done queueing <code class="replaceable"><i>qid</I
></CODE
> &lt;&lt;&lt;&lt;&lt;</PRE
></BLOCKQUOTE
></P
><p class="para">First, the queue identifier is printed (<code class="replaceable"><i>qid</I
></CODE
>). If this
identifier is brand-new, the phrase &quot;<code class="literal">(new id)</CODE
>&quot; is printed.
Next, <em class="emphasis">sendmail</EM
> prints complete information about each recipient
for the message using the <em class="emphasis">printaddr</EM
>() routine.
Finally, <code class="literal">done queueing</CODE
> is printed, and the queuing
of the <code class="replaceable"><i>qid</I
></CODE
> item is finished.</P
><p class="para">When <em class="emphasis">sendmail</EM
> processes files in the queue, it first prereads
all the <code class="literal">qf</CODE
> files and sorts the jobs by priority.
After the list has been sorted, the <code class="literal">-d40.1</CODE
> debugging
switch causes <em class="emphasis">sendmail</EM
> to print that list, one
message per line, in the following format:</P
><p class="para"><blockquote class="screen"><pre class="screen"><code class="replaceable"><i>qfname</I
></CODE
>: pri=<code class="replaceable"><i>priority</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">Here, <code class="replaceable"><i>qfname</I
></CODE
> is the basename of the <code class="literal">qf</CODE
> file, and
<code class="replaceable"><i>priority</I
></CODE
> is the current priority of each message
(see <a class="xref" href="ch34_08.htm" title="">Section 34.8.53, RecipientFactor (y)</A
>).
After the sorted list of messages has been processed, and if there
are any messages in that list, <em class="emphasis">sendmail</EM
> attempts to
deliver each of the messages in the order in which
it appears in the list.
The <code class="literal">-d40.1</CODE
> debugging switch causes <em class="emphasis">sendmail</EM
>
to print the following line of information 
for each message processed:</P
><p class="para"><blockquote class="screen"><pre class="screen">dowork: (<code class="replaceable"><i>qfname</I
></CODE
>)</PRE
></BLOCKQUOTE
></P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-139">37.5.139 -d40.3</A
></H3
><p class="refpurpose">Show envelope flags</P
></DIV
><blockquote><div class="refsect1"><p class="para">The <code class="literal">-d40.3</CODE
> debugging switch causes the envelope flags for
each message to be printed as it is queued:</P
><p class="para"><blockquote class="screen"><pre class="screen">&gt;&gt;&gt;&gt;&gt; queueing <code class="replaceable"><i>qid</I
></CODE
>(new id) &gt;&gt;&gt;&gt;&gt; <i class="lineannotation"><img src="../chars/larr.gif" alt="&lt;-"> from -d40.1</I
>
  e_flags= <i class="lineannotation"> output of printenvflags</I
>()<i class="lineannotation"> here</I
></PRE
></BLOCKQUOTE
></P
><p class="para">The envelope flags are
described in <a class="xref" href="#SML2-CH-37-TAB-2" title="Hexadecimal Envelope Flags">Table 37.3</A
> in <a class="xref" href="#SML2-CH-37-SECT-5-12" title="">Section 37.5.12</A
>. </P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-140">37.5.140 -d40.4</A
></H3
><p class="refpurpose">Show qf file lines as they are read</P
></DIV
><blockquote><div class="refsect1"><p class="para">The <code class="literal">qf</CODE
> file is composed of individual lines of information 
(see <a class="xref" href="ch23_09.htm" title="">Section 23.9.11, P line</A
>).
The <code class="literal">-d40.4</CODE
> debugging switch causes <em class="emphasis">sendmail</EM
>
to print each of those lines as it is read:</P
><p class="para"><blockquote class="screen"><pre class="screen">+++++ <code class="replaceable"><i>X</I
></CODE
>text</PRE
></BLOCKQUOTE
></P
><p class="para">Each line begins with five plus characters. The <code class="literal">qf</CODE
> file's
<em class="emphasis">key</EM
> letter (here, <code class="replaceable"><i>X</I
></CODE
>) follows, then the rest of the <code class="replaceable"><i>text</I
></CODE
>
that made up that line. In the <code class="literal">qf</CODE
> file, indented lines
(lines that begin with a space or tab character) that immediately
follow the key line are appended to that key line.
Those joined lines are printed after they are joined.
Note that the lines of the <code class="literal">qf</CODE
> file are printed before they are processed
by <em class="emphasis">sendmail</EM
>. An error in a line is printed after
the line is printed.</P
><p class="para">If the queue file could not be read,
the <code class="literal">-d40.4</CODE
> debugging switch instead causes <em class="emphasis">sendmail</EM
>
to print this error:</P
><p class="para"><blockquote class="screen"><pre class="screen">readqf(<code class="replaceable"><i>qid</I
></CODE
>) failed</PRE
></BLOCKQUOTE
></P
><p class="para">Here, <code class="replaceable"><i>qid</I
></CODE
> is the queue identifier for the message.
Note that reading can legitimately fail if the queue file is locked.
Use <code class="literal">-d40.8</CODE
> (described below) to see the exact reason for
failure.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-141">37.5.141 -d40.8</A
></H3
><p class="refpurpose">Show reasons for failure</P
></DIV
><blockquote><div class="refsect1"><p class="para">The <code class="literal">-d40.8</CODE
> debugging switch causes <em class="emphasis">sendmail</EM
> to print
the reason it could not process a message's <code class="literal">qf</CODE
> file.
One possibility is:</P
><p class="para"><blockquote class="screen"><pre class="screen">readqf(<code class="replaceable"><i>qfname</I
></CODE
>): fopen failure (<i class="lineannotation">error text here</I
>)</PRE
></BLOCKQUOTE
></P
><p class="para">If the failure was caused by anything other than the file's nonexistence,
the following is also logged:</P
><p class="para"><blockquote class="screen"><pre class="screen">readqf: no control file <code class="replaceable"><i>qfname</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">If the <code class="literal">qf</CODE
> file could not be read
because it is locked by another incantation of <em class="emphasis">sendmail</EM
> (a valid reason),
the <code class="literal">-d40.8</CODE
> debugging switch prints:</P
><p class="para"><blockquote class="screen"><pre class="screen"><code class="replaceable"><i>qid</I
></CODE
>: locked</PRE
></BLOCKQUOTE
></P
><p class="para">Here, <code class="replaceable"><i>qid</I
></CODE
> is the identifier portion of the <code class="literal">qf</CODE
> file.
If the log level is set to greater than 19
(see the <code class="literal">LogLevel</CODE
> (<code class="literal">L</CODE
>) option, <a class="xref" href="ch34_08.htm" title="">Section 34.8.33, LogLevel (L)</A
>),
the above message will also be logged.</P
><p class="para">For security the <em class="emphasis">sendmail</EM
> program <em class="emphasis">fstat</EM
>(2)'s the <code class="literal">qf</CODE
>
file after it is open to make sure it cannot be fooled by a
race condition.  If that <em class="emphasis">fstat</EM
>(2) fails, the following is
printed if the <code class="literal">-d40.8</CODE
> debugging switch was specified:</P
><p class="para"><blockquote class="screen"><pre class="screen">readqf(<code class="replaceable"><i>qid</I
></CODE
>): fstat failure (<i class="lineannotation">error text here</I
>)</PRE
></BLOCKQUOTE
></P
><p class="para">If the <code class="literal">qf</CODE
> file is owned by someone other than the effective
<em class="emphasis">uid</EM
> of <em class="emphasis">sendmail</EM
>, the <code class="literal">qf</CODE
> file will be renamed into
a <code class="literal">Qf</CODE
> file (see <a class="xref" href="ch23_03.htm#SML2-CH-23-SECT-3-5" title="A Bogus qf File (V8 only): Qf">Section 23.3, "A Bogus qf File (V8 only): Qf"</A
>).
If this <code class="literal">-d40.8</CODE
> debugging switch was specified, 
the following message will also be printed:</P
><p class="para"><blockquote class="screen"><pre class="screen">readqf(<code class="replaceable"><i>qid</I
></CODE
>): bogus file</PRE
></BLOCKQUOTE
></P
><p class="para">The <code class="literal">MinQueueAge</CODE
> option (see <a class="xref" href="ch34_08.htm" title="">Section 34.8.41, MinQueueAge</A
>) determines the interval
between queue runs for any given file. If a <code class="literal">qf</CODE
> file was not
last run at least <code class="literal">MinQueueAge</CODE
> minutes ago, it is skipped
and the <code class="literal">-d40.8</CODE
> debugging switch causes the following message 
to be printed:</P
><p class="para"><blockquote class="screen"><pre class="screen"><code class="replaceable"><i>qid</I
></CODE
>: too young (<code class="replaceable"><i>howlong</I
></CODE
>)</PRE
></BLOCKQUOTE
></P
><p class="para">If the log level is set to greater than 19
(see the <code class="literal">LogLevel</CODE
> (<code class="literal">L</CODE
>) option, <a class="xref" href="ch34_08.htm" title="">Section 34.8.33</A
>),
the above message will also be logged.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-142">37.5.142 -d40.9</A
></H3
><p class="refpurpose">Show qf and lock file descriptors</P
></DIV
><blockquote><div class="refsect1"><p class="para">After <em class="emphasis">sendmail</EM
> has opened the <code class="literal">qf</CODE
> file (with <code class="literal">-d40.1</CODE
>)
and printed the envelope flags (with <code class="literal">-d40.3</CODE
>), this <code class="literal">-d40.9</CODE
>
debugging switch will cause the file descriptors for the <code class="literal">qf</CODE
> file
and its corresponding lock file to be dumped:</P
><p class="para"><blockquote class="screen"><pre class="screen">&gt;&gt;&gt;&gt;&gt; queueing <code class="replaceable"><i>qid</I
></CODE
>(new id) &gt;&gt;&gt;&gt;&gt; <i class="lineannotation"><img src="../chars/larr.gif" alt="&lt;-"> from -d40.1</I
>
 e_flags=                       <i class="lineannotation"><img src="../chars/larr.gif" alt="&lt;-"> from -d40.3</I
>
 tfp= <i class="lineannotation"> output of dumpfd</I
>()<i class="lineannotation"> here</I
>
 lockfp= <i class="lineannotation"> output of dumpfd</I
>()<i class="lineannotation"> here</I
></PRE
></BLOCKQUOTE
></P
><p class="para">The <code class="literal">e_flags</CODE
> are
described in <a class="xref" href="#SML2-CH-37-TAB-2" title="Hexadecimal Envelope Flags">Table 37.3</A
> of <a class="xref" href="#SML2-CH-37-SECT-5-12" title="">Section 37.5.12</A
>.
Here, <code class="literal">tfp=</CODE
> shows the file descriptors for the <code class="literal">qf</CODE
> file,
and <code class="literal">lockfp=</CODE
> shows the descriptors for the lock. See
<code class="literal">-d2.9</CODE
> (<a class="xref" href="#SML2-CH-37-SECT-5-13" title="">Section 37.5.13</A
>) for a description of
output of dumpfd().</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-143">37.5.143 -d40.32</A
></H3
><p class="refpurpose">Dump the send queue</P
></DIV
><blockquote><div class="refsect1"><p class="para">The <code class="literal">-d40.32</CODE
> debugging switch causes <em class="emphasis"> sendmail</EM
> to
dump the list of message recipients:</P
><p class="para"><blockquote class="screen"><pre class="screen">&gt;&gt;&gt;&gt;&gt; queueing <code class="replaceable"><i>qid</I
></CODE
>(new id) &gt;&gt;&gt;&gt;&gt; <i class="lineannotation"><img src="../chars/larr.gif" alt="&lt;-"> from -d40.1</I
>
  e_flags=                       <i class="lineannotation"><img src="../chars/larr.gif" alt="&lt;-"> from -d40.3</I
>
  sendq= <i class="lineannotation"><img src="../chars/larr.gif" alt="&lt;-"> output of printaddr</I
>()) <em class="emphasis">here (see <a class="xref" href="ch37_03.htm" title="The Output Produced by printaddr()">Section 37.3.1</A
>)</EM
>
  tfp=                           <i class="lineannotation"><img src="../chars/larr.gif" alt="&lt;-"> from -d40.9</I
>
  lockfp=                        <i class="lineannotation"><img src="../chars/larr.gif" alt="&lt;-"> from -d40.9</I
></PRE
></BLOCKQUOTE
></P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-144">37.5.144 -d41.1</A
></H3
><p class="refpurpose">Trace queue ordering</P
>(useful)</DIV
><blockquote><div class="refsect1"><p class="para">The <code class="literal">-d41</CODE
> (a.k.a. <code class="literal">-d41</CODE
>)
debugging switch causes <em class="emphasis">sendmail</EM
> to print its ordering
of the queue. First it prints</P
><p class="para"><blockquote class="screen"><pre class="screen">orderq:
        QueueLimitId = <code class="replaceable"><i>qid</I
></CODE
>            <i class="lineannotation"><img src="../chars/larr.gif" alt="&lt;-"> if </I
>-qI<i class="lineannotation"> used</I
>
        QueueLimitSender = <code class="replaceable"><i>sid</I
></CODE
>        <i class="lineannotation"><img src="../chars/larr.gif" alt="&lt;-"> if </I
>-qS<i class="lineannotation"> used</I
>
        QueueLimitRecipient = <code class="replaceable"><i>rid</I
></CODE
>     <i class="lineannotation"><img src="../chars/larr.gif" alt="&lt;-"> if </I
>-qR<i class="lineannotation"> used</I
></PRE
></BLOCKQUOTE
></P
><p class="para">See <a class="xref" href="ch23_06.htm#SML2-CH-23-SECT-6-1" title="Process by identifier/recipient/sender: -q[ISR]">Section 23.6.2.3, "Process by identifier/recipient/sender: -q[ISR]"</A
> for an explanation of how the <code class="literal">-qI</CODE
>, <code class="literal">-qS</CODE
>, and <code class="literal">-qR</CODE
>
command-line switches can limit the scope of a queue run. If none of them were
specified, only <code class="literal">orderq:</CODE
> is printed.
The <code class="literal">-d41.1</CODE
> debugging switch is extremely handy for previewing the
effect of the <code class="literal">-qI</CODE
>, <code class="literal">-qS</CODE
>, and <code class="literal">-qR</CODE
> command-line switches. When
combined with <code class="literal">-bp</CODE
> (<em class="emphasis">mailq</EM
>), these switches limit 

the queue listing
and thus preview the effect of a limited queue run:</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>mailq</B
></CODE
>
                Mail Queue (1 request)
-Q-ID- -Size- ---Q-Time--- ------Sender/Recipient------
MAA11111     4560 Tue Dec 31 12:37 you
                                   you@here.us.edu
% <code class="userinput"><b>mailq -d41.1 -qI22222</B
></CODE
>
orderq:
        QueueLimitId = 22222
Mail queue is empty</PRE
></BLOCKQUOTE
></P
><p class="para">The <code class="literal">-d41.1</CODE
> debugging switch also traces the growth of the queue working
list. Every time the limit of that list is reached, the internal
routine <em class="emphasis">grow_wlist</EM
>() is called to extend the list size
by QUEUESEGSIZE (where QUEUESEGSIZE is 
described in <a class="xref" href="ch18_08.htm" title="">Section 18.8.38, QUEUESEGSIZE</A
>).</P
><p class="para"><blockquote class="screen"><pre class="screen">grow_wlist: WorkListSize=<code class="replaceable"><i>current</I
></CODE
>
grow_wlist: WorkListSize now <code class="replaceable"><i>newsize</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">If the log level is set to greater than 1
(see the <code class="literal">LogLevel</CODE
> (<code class="literal">L</CODE
>) option, <a class="xref" href="ch34_08.htm" title="">Section 34.8.33</A
>),
the following is also logged each time the list size grows:</P
><p class="para"><blockquote class="screen"><pre class="screen">grew WorkList for <code class="replaceable"><i>qdirectory</I
></CODE
> to <code class="replaceable"><i>newsize</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">If the size could not be increased (because the program reached
the limit of available memory) and if the <code class="literal">LogLevel</CODE
> (<code class="literal">L</CODE
>) option
is greater than 0, <em class="emphasis">sendmail</EM
> will log this error at LOG_ALERT:</P
><p class="para"><blockquote class="screen"><pre class="screen">FAILED to grow WorkList for <code class="replaceable"><i>qdirectory</I
></CODE
> to <code class="replaceable"><i>newsize</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">This message will repeat until there are no more queue entries
to process after the limit is received. However, all the files that are
already in the work list will be processed, so presumably the next
run will catch the failed messages.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-145">37.5.145 -d41.2</A
></H3
><p class="refpurpose">Cannot open qf</P
></DIV
><blockquote><div class="refsect1"><p class="para">Ordinarily, <em class="emphasis">sendmail</EM
> is silent about failures to open a <code class="literal">qf</CODE
>
file, but the <code class="literal">-d41.2</CODE
> debugging
switch causes it to print the reason the open failed:</P
><p class="para"><blockquote class="screen"><pre class="screen">orderq: cannot open <code class="replaceable"><i>qfname</I
></CODE
> (<i class="lineannotation">reason for failure here</I
>)</PRE
></BLOCKQUOTE
></P
><p class="para">Here, <code class="replaceable"><i>qfname</I
></CODE
> is the name of the <code class="literal">qf</CODE
> file that could
not be opened.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-146">37.5.146 -d41.49</A
></H3
><p class="refpurpose">Show excluded (skipped) queue files</P
></DIV
><blockquote><div class="refsect1"><p class="para">The <code class="literal">41.49</CODE
> debugging switch
causes <em class="emphasis">sendmail</EM
> to display the queue files that were not
included in the work list:</P
><p class="para"><blockquote class="screen"><pre class="screen">skipping <code class="replaceable"><i>qfname</I
></CODE
> (<code class="replaceable"><i>bit</I
></CODE
>)</PRE
></BLOCKQUOTE
></P
><p class="para">Here, the <code class="replaceable"><i>bit</I
></CODE
> is a hexadecimal representation of the
requirement that was not met. These bits are listed in
<a class="xref" href="#SML2-CH-37-TAB-14" title="Bits Describing a Queue Run's Requirements">Table 37.15</A
>.</P
><table class="table"><caption class="table"><a class="title" name="SML2-CH-37-TAB-14">Table 37.15: Bits Describing a Queue Run's Requirements</A
></CAPTION
><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1">Hex</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Mnemonic</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Description</TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">1</CODE
></TD
><td class="entry" rowspan="1" colspan="1">NEED_P</TD
><td class="entry" rowspan="1" colspan="1">Priority must be high enough (required qf file line)</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">2</CODE
></TD
><td class="entry" rowspan="1" colspan="1">NEED_T</TD
><td class="entry" rowspan="1" colspan="1">Must have been in queue long enough (required qf file line)</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">4</CODE
></TD
><td class="entry" rowspan="1" colspan="1">NEED_R</TD
><td class="entry" rowspan="1" colspan="1">Match a recipient</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">10</CODE
></TD
><td class="entry" rowspan="1" colspan="1">NEED_S</TD
><td class="entry" rowspan="1" colspan="1">Match a sender</TD
></TR
></TBODY
></TABLE
><p class="para">Note that nothing will be printed if the message was skipped
because its identifier did not match the <code class="literal">-qI</CODE
> specification.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-147">37.5.147 -d41.50</A
></H3
><p class="refpurpose">Show every file in the queue</P
></DIV
><blockquote><div class="refsect1"><p class="para">The <em class="emphasis">sendmail</EM
> program scans the queue directory looking for
all the <code class="literal">qf</CODE
> files to set up its working list. If a file
doesn't start with the letters &quot;qf,&quot; it is ordinarily silently
skipped. The <code class="literal">-d41.50</CODE
> debugging switch causes <em class="emphasis">sendmail</EM
>
to display every single file it finds in its queue directory:</P
><p class="para"><blockquote class="screen"><pre class="screen">orderq: checking <code class="replaceable"><i>file</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">The <code class="literal">file</CODE
> can be a directory, such as <code class="literal">..</CODE
>, or a regular
file, such as a <code class="literal">df</CODE
> or <code class="literal">qf</CODE
> file.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-148">37.5.148 -d42.2</A
></H3
><p class="refpurpose">Show connection checking</P
></DIV
><blockquote><div class="refsect1"><p class="para">V8 <em class="emphasis">sendmail</EM
> can be configured with the 
<code class="literal">ConnectionCacheSize</CODE
> (<code class="literal">k</CODE
>) option 
(see <a class="xref" href="ch34_08.htm" title="">Section 34.8.10, ConnectionCacheSize (k)</A
>)
to maintain open SMTP connections to a few other hosts. 
Before making a new SMTP connection, 
<em class="emphasis">sendmail</EM
> checks to see if it already has one established.
The <code class="literal">-d42.2</CODE
>
[11]
debugging switch causes <em class="emphasis">sendmail</EM
> to print the result of that check.</P
><blockquote class="footnote"><p class="para">[11] Note that there is no <code class="literal">-d42.1</CODE
> information.</P
></BLOCKQUOTE
><p class="para"><blockquote class="screen"><pre class="screen">mci_get(<code class="replaceable"><i>host</I
></CODE
> <code class="replaceable"><i>mailer</I
></CODE
>): mci_state=<code class="replaceable"><i>state</I
></CODE
>, _flags=<code class="replaceable"><i>flag</I
></CODE
>, _exitstat= <code class="replaceable"><i>stat</I
></CODE
>, _errno=<code class="replaceable"><i>err</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">Here, the <code class="replaceable"><i>host</I
></CODE
> is the name of the host to which the connection is to
be made, and the <code class="replaceable"><i>mailer</I
></CODE
> is the symbolic name of the delivery agent.
The <code class="replaceable"><i>state</I
></CODE
> is the status of the current SMTP connection (if there
is one) as shown in
<a class="xref" href="#SML2-CH-37-TAB-15" title="mci_get() Connection States">Table 37.16</A
>.</P
><table class="table"><caption class="table"><a class="title" name="SML2-CH-37-TAB-15">Table 37.16: mci_get() Connection States</A
></CAPTION
><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1">State</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Mnemonic</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Description</TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">0</TD
><td class="entry" rowspan="1" colspan="1">MCIS_CLOSED</TD
><td class="entry" rowspan="1" colspan="1">No traffic on this connection</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">1</TD
><td class="entry" rowspan="1" colspan="1">MCIS_OPENING</TD
><td class="entry" rowspan="1" colspan="1">Sending initial protocol</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">2</TD
><td class="entry" rowspan="1" colspan="1">MCIS_OPEN</TD
><td class="entry" rowspan="1" colspan="1">Connection is open</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">3</TD
><td class="entry" rowspan="1" colspan="1">MCIS_ACTIVE</TD
><td class="entry" rowspan="1" colspan="1">Message being sent</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">4</TD
><td class="entry" rowspan="1" colspan="1">MCIS_QUITING</TD
><td class="entry" rowspan="1" colspan="1">Running SMTP quit protocol</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">5</TD
><td class="entry" rowspan="1" colspan="1">MCIS_SSD</TD
><td class="entry" rowspan="1" colspan="1">SMTP service shutting down</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">6</TD
><td class="entry" rowspan="1" colspan="1">MCIS_ERROR</TD
><td class="entry" rowspan="1" colspan="1">I/O error on connection</TD
></TR
></TBODY
></TABLE
><p class="para">The <code class="replaceable"><i>flag</I
></CODE
> describes the overall status of the connection. It can
have one or more values from those shown in
<a class="xref" href="#SML2-CH-37-TAB-16" title="mci_get() Status Flags">Table 37.17</A
>
where those values are OR'd together.</P
><table class="table"><caption class="table"><a class="title" name="SML2-CH-37-TAB-16">Table 37.17: mci_get() Status Flags</A
></CAPTION
><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1">Flag</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Mnemonic</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Description</TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">0x0001</TD
><td class="entry" rowspan="1" colspan="1">MCIF_VALID</TD
><td class="entry" rowspan="1" colspan="1">If set, this entry is valid</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">0x0002</TD
><td class="entry" rowspan="1" colspan="1">MCIF_TEMP</TD
><td class="entry" rowspan="1" colspan="1">If set, don't cache this connection</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">0x0004</TD
><td class="entry" rowspan="1" colspan="1">MCIF_CACHED</TD
><td class="entry" rowspan="1" colspan="1">If set, connection is currently in open cache</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">0x0008</TD
><td class="entry" rowspan="1" colspan="1">MCIF_ESMTP</TD
><td class="entry" rowspan="1" colspan="1">This host speaks ESMTP</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">0x0010</TD
><td class="entry" rowspan="1" colspan="1">MCIF_EXPN</TD
><td class="entry" rowspan="1" colspan="1">EXPN command supported</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">0x0020</TD
><td class="entry" rowspan="1" colspan="1">MCIF_SIZE</TD
><td class="entry" rowspan="1" colspan="1">SIZE option supported</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">0x0040</TD
><td class="entry" rowspan="1" colspan="1">MCIF_8BITMIME</TD
><td class="entry" rowspan="1" colspan="1">BODY=8BITMIME supported</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">0x0080</TD
><td class="entry" rowspan="1" colspan="1">MCIF_7BIT</TD
><td class="entry" rowspan="1" colspan="1">Strip this message to 7 bits</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">0x0100</TD
><td class="entry" rowspan="1" colspan="1">MCIF_MULTSTAT</TD
><td class="entry" rowspan="1" colspan="1">MAIL11V3, handles MULT status</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">0x0200</TD
><td class="entry" rowspan="1" colspan="1">MCIF_INHEADER</TD
><td class="entry" rowspan="1" colspan="1">Currently outputting header</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">0x0400</TD
><td class="entry" rowspan="1" colspan="1">MCIF_CVT8TO7</TD
><td class="entry" rowspan="1" colspan="1">Convert from 8 to 7 bits</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">0x0800</TD
><td class="entry" rowspan="1" colspan="1">MCIF_DSN</TD
><td class="entry" rowspan="1" colspan="1">DSN extension supported</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">0x1000</TD
><td class="entry" rowspan="1" colspan="1">MCIF_8BITOK</TD
><td class="entry" rowspan="1" colspan="1">Okay to send 8 bit characters</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">0x2000</TD
><td class="entry" rowspan="1" colspan="1">MCIF_CVT7TO8</TD
><td class="entry" rowspan="1" colspan="1">Convert from 7 to 8 bits</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">0x4000</TD
><td class="entry" rowspan="1" colspan="1">MCIF_INMIME</TD
><td class="entry" rowspan="1" colspan="1">Currently reading MIME header</TD
></TR
></TBODY
></TABLE
><p class="para">The <code class="replaceable"><i>stat</I
></CODE
> is the exit status of the last delivered mail message
to this connection. It is one of the values defined in <em class="emphasis">&lt;sysexits.h&gt;</EM
>.
The <code class="replaceable"><i>err</I
></CODE
> is the value of the last system error (if any), as
defined in <em class="emphasis">&lt;errno.h&gt;</EM
>.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-149">37.5.149 -d42.5</A
></H3
><p class="refpurpose">Trace caching and uncaching connections</P
></DIV
><blockquote><div class="refsect1"><p class="para">The <code class="literal">-d42.5</CODE
> debugging switch shows connections being cached and
freed:</P
><p class="para"><blockquote class="screen"><pre class="screen">mci_cache: caching <code class="replaceable"><i>addr</I
></CODE
> (<code class="replaceable"><i>host</I
></CODE
>) in slot <code class="replaceable"><i>slot</I
></CODE
>
mci_uncache: uncaching <code class="replaceable"><i>addr</I
></CODE
> (<code class="replaceable"><i>host</I
></CODE
>) from slot <code class="replaceable"><i>slot</I
></CODE
> (<code class="replaceable"><i>doquit</I
></CODE
>)</PRE
></BLOCKQUOTE
></P
><p class="para">Here, <code class="replaceable"><i>addr</I
></CODE
> is the address in memory of the C language structure
(<em class="emphasis">struct mailer_con_info</EM
> defined in <em class="emphasis">sendmail.h</EM
>) that defines
the current (or about to be made) connection. The <code class="replaceable"><i>host</I
></CODE
>
is the name of the host to which the connection is to be made.
The <code class="replaceable"><i>slot</I
></CODE
> is an index into the array of structures that 
contain the connection information. For uncaching, the <code class="replaceable"><i>doquit</I
></CODE
>
is a Boolean that tells <em class="emphasis">sendmail</EM
> to close the connection if
it is nonzero.</P
><p class="para">The <code class="literal">-d91.100</CODE
> debugging switch produces information identical to the
above but logs its output at LOG_DEBUG instead of printing it:</P
><p class="para"><blockquote class="screen"><pre class="screen"><code class="replaceable"><i>qid</I
></CODE
>: mci_cache: caching <code class="replaceable"><i>addr</I
></CODE
> (<code class="replaceable"><i>host</I
></CODE
>) in slot <code class="replaceable"><i>slot</I
></CODE
>
<code class="replaceable"><i>qid</I
></CODE
>: mci_uncache: uncaching <code class="replaceable"><i>addr</I
></CODE
> (<code class="replaceable"><i>host</I
></CODE
>) from slot <code class="replaceable"><i>slot</I
></CODE
> (<code class="replaceable"><i>doquit</I
></CODE
>)</PRE
></BLOCKQUOTE
></P
><p class="para">Note that each line is prefixed by the queue identifier
for the message (<code class="replaceable"><i>qid</I
></CODE
>). The <code class="literal">-d91.100</CODE
> debugging switch is especially
handy for monitoring caching when running <em class="emphasis">sendmail</EM
> as a daemon.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-150">37.5.150 -d43.1</A
></H3
><p class="refpurpose">Trace MIME conversions</P
></DIV
><blockquote><div class="refsect1"><p class="para">V8.7 <em class="emphasis">sendmail</EM
> can convert 8-bit MIME to 7 bits.
The <code class="literal">-d43.1</CODE
> (a.k.a. <code class="literal">-d43</CODE
>) debugging switch traces this process.</P
><p class="para"><blockquote class="screen"><pre class="screen">mime8to7: flags = <code class="replaceable"><i>mflags</I
></CODE
>, boundaries = <i class="lineannotation"> boundaries printed here</I
></PRE
></BLOCKQUOTE
></P
><p class="para">Here, the internal <em class="emphasis">mime8to7</EM
>() routine has been called to do the
conversion. The <code class="replaceable"><i>mflags</I
></CODE
> are printed in hexadecimal, and are
described in
<a class="xref" href="#SML2-CH-37-TAB-17" title="Conversion Flags for mime8to7()">Table 37.18</A
>.</P
><table class="table"><caption class="table"><a class="title" name="SML2-CH-37-TAB-17">Table 37.18: Conversion Flags for mime8to7()</A
></CAPTION
><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1">Hex</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Mnemonic</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Description</TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">0x00</TD
><td class="entry" rowspan="1" colspan="1">M87F_OUTER</TD
><td class="entry" rowspan="1" colspan="1">This is the outer context</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">0x01</TD
><td class="entry" rowspan="1" colspan="1">M87F_NO8BIT</TD
><td class="entry" rowspan="1" colspan="1">Can't have 8-bit in this section</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">0x02</TD
><td class="entry" rowspan="1" colspan="1">M87F_DIGEST</TD
><td class="entry" rowspan="1" colspan="1">Currently processing a multipart digest</TD
></TR
></TBODY
></TABLE
><p class="para">&#13;The <code class="replaceable"><i>boundaries</I
></CODE
> is either <code class="literal">&lt;none&gt;</CODE
> or a list of the boundaries
found in the message.
In multipart messages the <code class="literal">-d43.1</CODE
> debugging switch causes each boundary
to be printed as it is found:</P
><p class="para"><blockquote class="screen"><pre class="screen">mime8to7: multi part boundary <i class="lineannotation">boundary printed here</I
></PRE
></BLOCKQUOTE
></P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-151">37.5.151 -d43.3</A
></H3
><p class="refpurpose">See the final MIME boundary name</P
></DIV
><blockquote><div class="refsect1"><p class="para">The <code class="literal">-d43.3</CODE
> debugging switch is used to see the
final MIME boundary name that is selected:</P
><p class="para"><blockquote class="screen"><pre class="screen">mime8to7=&gt;<code class="replaceable"><i>boundary</I
></CODE
> (multipart)
mime8to7=&gt;<code class="replaceable"><i>boundary</I
></CODE
> (basic)</PRE
></BLOCKQUOTE
></P
><p class="para">Each line is prefixed with three tabs.</P
><p class="para">The <code class="literal">-d43.3</CODE
> debugging switch is also used to trace
7- to 8-bit conversion. If a delivery agent has the <code class="literal">F=9</CODE
>
flag set (see <a class="xref" href="ch30_08.htm" title="">Section 30.8.6, F=9</A
>) and if the message has
a <code class="literal">Content-Transfer-Encoding:</CODE
> header that specifies Base64
or Quoted-Printable, <em class="emphasis">sendmail</EM
> will attempt to convert
it from its encoded 7-bit form back into 8-bit form:</P
><p class="para"><blockquote class="screen"><pre class="screen">mime7to8 =&gt; <i class="lineannotation">base64 or quoted-printable</I
>  to 8bit done</PRE
></BLOCKQUOTE
></P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-152">37.5.152 -d43.5</A
></H3
><p class="refpurpose">Watch search for boundaries</P
></DIV
><blockquote><div class="refsect1"><p class="para">The <code class="literal">-d43.5</CODE
> debugging switch allows you to watch the search
for boundaries. First each line read is printed:</P
><p class="para"><blockquote class="screen"><pre class="screen">mimeboundary: line=&quot;<i class="lineannotation">line is printed here</I
>&quot;...
                                                         <i class="lineannotation"><img src="../chars/uarr.gif" alt="-^"></I
>
                                                      <i class="lineannotation">boundary, if found, printed here</I
></PRE
></BLOCKQUOTE
></P
><p class="para">Then, if the line contained a valid MIME boundary, the
found boundary is printed at the end of the preceding.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-153">37.5.153 -d43.8</A
></H3
><p class="refpurpose">Show the calculations</P
></DIV
><blockquote><div class="refsect1"><p class="para">The <em class="emphasis">sendmail</EM
> program determines how to convert the MIME message
by examining the first eighth of the file. If the first
eighth of the total number of characters in the file have the high bit set, conversion
will be with Base64; otherwise, it will be with Quoted-Printable
(see <a class="xref" href="ch34_08.htm" title="">Section 34.8.22, EightBitMode (8)</A
>).
If the message is marked as binary, it is always converted
with Base64.

The <code class="literal">-d43.8</CODE
> debugging switch causes <em class="emphasis">sendmail</EM
> to print
the result of this calculation:</P
><p class="para"><blockquote class="screen"><pre class="screen">mime8to7: <code class="replaceable"><i>hcount</I
></CODE
> high bit(s) in <code class="replaceable"><i>bcount</I
></CODE
> byte(s), cte=<code class="replaceable"><i>type</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">Here, <code class="literal">cte=</CODE
> is either <code class="literal">[none]</CODE
> or the content-transfer-encoding
type, such as <code class="literal">binary</CODE
>.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-154">37.5.154 -d43.35</A
></H3
><p class="refpurpose">Show boundary lines as emitted</P
></DIV
><blockquote><div class="refsect1"><p class="para">The <code class="literal">-43.35</CODE
> debugging switch causes each new boundary line
to be printed as it is inserted into the message:</P
><p class="para"><blockquote class="screen"><pre class="screen">...-<i class="lineannotation">mid-boundary here</I
>
...-<i class="lineannotation">end boundary here</I
>-</PRE
></BLOCKQUOTE
></P
><p class="para">The midboundary marks begin with a <code class="literal">-</CODE
>. The ending-boundary
mark begins and ends with a <code class="literal">-</CODE
>.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-155">37.5.155 -d43.36</A
></H3
><p class="refpurpose">Show content transfer encoding</P
></DIV
><blockquote><div class="refsect1"><p class="para">The <code class="literal">-43.36</CODE
> debugging switch causes the encoding header
to be printed as it is added to the message:</P
><p class="para"><blockquote class="screen"><pre class="screen">...Content-Transfer-Encoding: <i class="lineannotation"> type of encoding here</I
></PRE
></BLOCKQUOTE
></P
><p class="para">The type of encoding will either be the original as printed
with <code class="literal">cte=</CODE
> in <code class="literal">-d43.8</CODE
> above or Base64
or Quoted-Printable.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-156">37.5.156 -d43.40</A
></H3
><p class="refpurpose">Show parse of Content-Type: header</P
></DIV
><blockquote><div class="refsect1"><p class="para">The <code class="literal">-43.40</CODE
> debugging switch causes
the contents of the parsed <code class="literal">Content-Type:</CODE
> header to
be displayed.</P
><p class="para"><blockquote class="screen"><pre class="screen">pvp[<code class="replaceable"><i>n</I
></CODE
>] = &quot;<code class="replaceable"><i>item</I
></CODE
>&quot;</PRE
></BLOCKQUOTE
></P
><p class="para">For zero through <code class="replaceable"><i>n</I
></CODE
> items that were parsed, each is printed
on its own line. </P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-157">37.5.157 -d43.99</A
></H3
><p class="refpurpose">Print the leading/following comments</P
></DIV
><blockquote><div class="refsect1"><p class="para">The <code class="literal">-d43.99</CODE
> debugging switch tells <em class="emphasis">sendmail</EM
> to print each line
of MIME commentary that precedes the leading boundary:</P
><p class="para"><blockquote class="screen"><pre class="screen">...<i class="lineannotation"> leading commentary here</I
>
...-<i class="lineannotation">midboundary here</I
></PRE
></BLOCKQUOTE
></P
><p class="para">and the commentary that follows the last boundary:</P
><p class="para"><blockquote class="screen"><pre class="screen">...-<i class="lineannotation">end boundary here</I
>-
...<i class="lineannotation"> trailing commentary here</I
></PRE
></BLOCKQUOTE
></P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-158">37.5.158 -d43.100</A
></H3
><p class="refpurpose">Mark collect() and putheader()</P
></DIV
><blockquote><div class="refsect1"><p class="para">The <code class="literal">-d43.100</CODE
> debugging switch causes <em class="emphasis">sendmail</EM
>
to print a mark just after it has called <em class="emphasis">collect</EM
>()
and after it has called <em class="emphasis">putheader</EM
>():</P
><p class="para"><blockquote class="screen"><pre class="screen">+++after collect
+++after putheader</PRE
></BLOCKQUOTE
></P
><p class="para">The <em class="emphasis">collect</EM
>() routine is traced with the <code class="literal">-d30</CODE
>
debugging switch, and <em class="emphasis">putheader</EM
>() is traced with the <code class="literal">-d34</CODE
> debugging switch.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-159">37.5.159 -d44.4</A
></H3
><p class="refpurpose">Trace safefile()</P
></DIV
><blockquote><div class="refsect1"><p class="para">The V8 <em class="emphasis">sendmail</EM
> program tries to be extra careful about
file permissions, and the key to checking them is the
internal <em class="emphasis">safefile</EM
>() function.
The <code class="literal">-d44.4</CODE
> debugging switch
[12]
prints the parameters passed to the <em class="emphasis">safefile</EM
>() function:</P
><blockquote class="footnote"><p class="para">[12] There is no <code class="literal">-d44.1</CODE
> debugging information.</P
></BLOCKQUOTE
><p class="para"><blockquote class="screen"><pre class="screen">safefile(<code class="replaceable"><i>fname</I
></CODE
>, uid=<code class="replaceable"><i>uid</I
></CODE
>, gid=<code class="replaceable"><i>gid</I
></CODE
>, flags=<code class="replaceable"><i>sff_flags</I
></CODE
>, mode=<code class="replaceable"><i>wantmode</I
></CODE
>)</PRE
></BLOCKQUOTE
></P
><p class="para">Here, the file named <code class="replaceable"><i>fname</I
></CODE
> is being checked
to determine whether the user identified by the <code class="replaceable"><i>uid</I
></CODE
>, with the group <code class="replaceable"><i>gid</I
></CODE
>,
is allowed to find or use the file. The range of checking is determined
by the hexadecimal <code class="replaceable"><i>sff_flags</I
></CODE
>, described in
<a class="xref" href="#SML2-CH-37-TAB-18" title="safefile() Access Flags">Table 37.19</A
>.
Where a file's permissions are required, the mode printed in <code class="replaceable"><i>wantmode</I
></CODE
>
will be used.</P
><table class="table"><caption class="table"><a class="title" name="SML2-CH-37-TAB-18">Table 37.19: safefile() Access Flags</A
></CAPTION
><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1">Flag</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Mnemonic</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Description</TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">0x000</TD
><td class="entry" rowspan="1" colspan="1">SFF_ANYFILE</TD
><td class="entry" rowspan="1" colspan="1">No special restrictions</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">0x001</TD
><td class="entry" rowspan="1" colspan="1">SFF_MUSTOWN</TD
><td class="entry" rowspan="1" colspan="1">Uid must own this file</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">0x002</TD
><td class="entry" rowspan="1" colspan="1">SFF_NOSLINK</TD
><td class="entry" rowspan="1" colspan="1">File must not be a symbolic link</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">0x004</TD
><td class="entry" rowspan="1" colspan="1">SFF_ROOTOK</TD
><td class="entry" rowspan="1" colspan="1">Okay for root to own this file</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">0x008</TD
><td class="entry" rowspan="1" colspan="1">SFF_RUNASREALUID</TD
><td class="entry" rowspan="1" colspan="1">If no controlling user, run as real <em class="emphasis">uid</EM
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">0x010</TD
><td class="entry" rowspan="1" colspan="1">SFF_NOPATHCHECK</TD
><td class="entry" rowspan="1" colspan="1">Don't bother checking leading path</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">0x020</TD
><td class="entry" rowspan="1" colspan="1">SFF_SETUIDOK</TD
><td class="entry" rowspan="1" colspan="1">Setuid files are okay</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">0x040</TD
><td class="entry" rowspan="1" colspan="1">SFF_CREAT</TD
><td class="entry" rowspan="1" colspan="1">Okay to create the file if necessary</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">0x080</TD
><td class="entry" rowspan="1" colspan="1">SFF_REGONLY</TD
><td class="entry" rowspan="1" colspan="1">Allow regular files only</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">0x100</TD
><td class="entry" rowspan="1" colspan="1">SFF_OPENASROOT</TD
><td class="entry" rowspan="1" colspan="1">Open as root instead of as <em class="emphasis">uid</EM
></TD
></TR
></TBODY
></TABLE
><p class="para">If the SFF_NOPATHCHECK flag is clear (0), <em class="emphasis">sendmail</EM
> examines
each component of the path leading the file. If any component of the
path is rejected, the <code class="literal">-d44.4</CODE
> debugging switch causes <em class="emphasis">sendmail</EM
> to print:</P
><p class="para"><blockquote class="screen"><pre class="screen">[dir <code class="replaceable"><i>fname</I
></CODE
>] <i class="lineannotation"> reason for the rejection here</I
></PRE
></BLOCKQUOTE
></P
><p class="para">A path component can fail because <em class="emphasis">stat</EM
>(2) failed. If the <code class="replaceable"><i>uid</I
></CODE
> is
0 for <em class="emphasis">root</EM
>, a warning is logged if a component is found to be group-
or world-writable:</P
><p class="para"><blockquote class="screen"><pre class="screen">WARNING: writable directory <code class="replaceable"><i>fname</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">For each component in the path, <em class="emphasis">safefile</EM
>() checks to verify that
this user has permission to search the directory. If the SFF_ROOTOK flag
is not set (is clear), <em class="emphasis">root</EM
> (<em class="emphasis">uid</EM
> 0) access is special cased
in that all directory components must be world-searchable.</P
><p class="para">Otherwise, the path component is accepted if it is owned by the <code class="replaceable"><i>uid</I
></CODE
> and
has the user search bit set or if its group is the same as <code class="replaceable"><i>gid</I
></CODE
> and
has the group search bit set.
If NO_GROUP_SET is undefined when <em class="emphasis">sendmail</EM
> is compiled
(see <a class="xref" href="ch18_08.htm" title="">Section 18.8.31, NO-GROUP-SET</A
>) and the <code class="literal">DontInitGroups</CODE
>
option (see <a class="xref" href="ch34_08.htm" title="">Section 34.8.19, DontInitGroups</A
>) is not set,
each group to which <code class="replaceable"><i>uid</I
></CODE
> belongs is also checked.
Otherwise, the directory must be world-searchable.</P
><p class="para">If the <code class="replaceable"><i>fname</I
></CODE
> could not be checked with <em class="emphasis">stat</EM
>(2), the <code class="literal">-d44.4</CODE
>
debugging switch causes the reason to be printed:</P
><p class="para"><blockquote class="screen"><pre class="screen"><i class="lineannotation"> reason for failure here</I
></PRE
></BLOCKQUOTE
></P
><p class="para">If the file does not exist, it may need to be created.
If so, <em class="emphasis">sendmail</EM
> checks to be sure that the <code class="replaceable"><i>uid</I
></CODE
> has write permission.
The result is printed with the <code class="literal">-d44.4</CODE
> debugging switch like this:</P
><p class="para"><blockquote class="screen"><pre class="screen">[final dir <code class="replaceable"><i>fname</I
></CODE
> uid <code class="replaceable"><i>uid</I
></CODE
> mode <code class="replaceable"><i>wantmode</I
></CODE
>] <i class="lineannotation"> error here</I
></PRE
></BLOCKQUOTE
></P
><p class="para">If the file exists and if symbolic links are supported, the file is rejected if
it is a symbolic link and if the SFF_NOSLINK flag is set. If the <code class="literal">-d44.4</CODE
>
debugging switch is specified, this error is printed:</P
><p class="para"><blockquote class="screen"><pre class="screen">[slink mode <code class="replaceable"><i>mode</I
></CODE
>]    EPERM</PRE
></BLOCKQUOTE
></P
><p class="para">&#13;If the SFF_REGONLY flag is set the file must be a regular file. If it is not,
it is rejected, and <code class="literal">-d44.4</CODE
> causes the following to be printed:</P
><p class="para"><blockquote class="screen"><pre class="screen">[non-reg mode <code class="replaceable"><i>mode</I
></CODE
>]    EPERM</PRE
></BLOCKQUOTE
></P
><p class="para">If <code class="replaceable"><i>wantmode</I
></CODE
> has the write bits set, and the existing file has
any execute bits set, the file is rejected and <code class="literal">-d44.4</CODE
> causes
the following to be printed:</P
><p class="para"><blockquote class="screen"><pre class="screen">[exec bits <code class="replaceable"><i>mode</I
></CODE
>]    EPERM</PRE
></BLOCKQUOTE
></P
><p class="para">If the file has more than one link, the file is rejected and <code class="literal">-d44.4</CODE
> causes the following to be printed:</P
><p class="para"><blockquote class="screen"><pre class="screen">[link count <code class="replaceable"><i>nlinks</I
></CODE
>]    EPERM</PRE
></BLOCKQUOTE
></P
><p class="para">If the SFF_SETUIDOK flag is specified, if the file exists,
if it has the <em class="emphasis">suid</EM
> bit set in the mode but no execute bits set
in the mode, and if it is <em class="emphasis">not</EM
> owned by <em class="emphasis">root</EM
>,
<em class="emphasis">sendmail</EM
>
performs subsequent checks under the <em class="emphasis">suid</EM
> and <em class="emphasis">sgid</EM
> identities
of the existing file.
A similar process occurs with the <em class="emphasis">sgid</EM
> bit. <em class="emphasis">Sendmail</EM
> then prints:</P
><p class="para"><blockquote class="screen"><pre class="screen">[uid <code class="replaceable"><i>new_uid</I
></CODE
>, stat <code class="replaceable"><i>filemode</I
></CODE
>, mode <code class="replaceable"><i>wantmode</I
></CODE
>]</PRE
></BLOCKQUOTE
></P
><p class="para">If access is finally allowed, <em class="emphasis">sendmail</EM
> concludes the above with:</P
><p class="para"><blockquote class="screen"><pre class="screen">OK</PRE
></BLOCKQUOTE
></P
><p class="para">Otherwise, it concludes with:</P
><p class="para"><blockquote class="screen"><pre class="screen">EACCES</PRE
></BLOCKQUOTE
></P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-160">37.5.160 -d44.5</A
></H3
><p class="refpurpose">Trace writable()</P
>(useful)</DIV
><blockquote><div class="refsect1"><p class="para">The <code class="literal">-d44.5</CODE
> debugging switch displays the values passed to 
<em class="emphasis">sendmail</EM
>'s internal <em class="emphasis">writable</EM
>() routine. This routine
nearly duplicates the function of the <em class="emphasis">access</EM
>(3) call
[13]
but does
it much more safely and allows checks to be made under the
identity of the controlling user:</P
><blockquote class="footnote"><p class="para">[13] It is more restrictive for <em class="emphasis">root</EM
>-owned files and can allow
the <em class="emphasis">suid</EM
> semantics needed for delivery to files.</P
></BLOCKQUOTE
><p class="para"><blockquote class="screen"><pre class="screen">writable(<code class="replaceable"><i>fname</I
></CODE
>, <code class="replaceable"><i>sff_flags</I
></CODE
>)</PRE
></BLOCKQUOTE
></P
><p class="para">Here, the <em class="emphasis">fname</EM
> is the full pathname of the file being checked.
The <code class="replaceable"><i>sff_flags</I
></CODE
> are documented in
<a class="xref" href="#SML2-CH-37-TAB-18" title="safefile() Access Flags">Table 37.19</A
>
above.  Success or failure is described under <code class="literal">-d44.4</CODE
>.&#13;</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-161">37.5.161 -d45.1</A
></H3
><p class="refpurpose">Show envelope sender</P
></DIV
><blockquote><div class="refsect1"><p class="para">The <code class="literal">-d45.1</CODE
> (a.k.a. <code class="literal">-d45</CODE
>) debugging switch causes <em class="emphasis">sendmail</EM
> to
print the current form of the envelope sender address before it has
fully rewritten that address into its final form:</P
><p class="para"><blockquote class="screen"><pre class="screen">setsender(<code class="replaceable"><i>addr</I
></CODE
>)</PRE
></BLOCKQUOTE
></P
><p class="para">If the <code class="replaceable"><i>addr</I
></CODE
> is empty (as would be the case if the sender
were being gathered from the header), <em class="emphasis">sendmail</EM
> prints NULL.
The final envelope sender address is placed into the
<code class="literal">$f</CODE
> macro. (See <a class="xref" href="ch31_10.htm" title="">Section 31.10.14, $f</A
>
for a description of that macro and
the process used by <em class="emphasis">sendmail</EM
> to set the sender's address.)</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-162">37.5.162 -d45.3</A
></H3
><p class="refpurpose">Show saved domain</P
></DIV
><blockquote><div class="refsect1"><p class="para">If the <code class="literal">F=C</CODE
> flag (see <a class="xref" href="ch30_08.htm" title="">Section 30.8.15</A
>)
is set for the delivery agent
selected for the sender, <em class="emphasis">sendmail</EM
> will save the domain part
of the address for later use. The <code class="literal">-d45.3</CODE
> causes the
saved domain part to be printed:</P
><p class="para"><blockquote class="screen"><pre class="screen">Saving from domain: <code class="replaceable"><i>domain</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">The domain is saved in the <em class="emphasis">e_fromdomain</EM
> part of the C language 
structure that contains the envelope information for the sender.
Later, if the <code class="literal">F=C</CODE
> flag is set, this domain will be appended
to any recipient addresses that lack a domain part.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-163">37.5.163 -d45.5</A
></H3
><p class="refpurpose">Show don't send to sender</P
></DIV
><blockquote><div class="refsect1"><p class="para">Unless a message is bounced, it will not be sent to the sender.
The <code class="literal">-d45.5</CODE
> debugging switch causes <em class="emphasis">sendmail</EM
> to
display sender information when this decision is made:</P
><p class="para"><blockquote class="screen"><pre class="screen">setsender: QDONTSEND <i class="lineannotation"> output of printaddr</I
>()<i class="lineannotation"> here (see <a class="xref" href="ch37_03.htm" title="The Output Produced by printaddr()">Section 37.3.1</A
>)</I
></PRE
></BLOCKQUOTE
></P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-164">37.5.164 -d46.9</A
></H3
><p class="refpurpose">Show xf file's descriptors</P
></DIV
><blockquote><div class="refsect1"><p class="para">The <code class="literal">xf</CODE
> queue file (see <a class="xref" href="ch23_02.htm#SML2-CH-23-SECT-2-5" title="The Transcript File: xf">Section 23.2.7, "The Transcript File: xf"</A
>)
contains a record of
the errors and other information produced by a delivery
agent. That information is used for bounced mail.
The <code class="literal">-d46.9</CODE
> debugging switch
[14]
causes <em class="emphasis">sendmail</EM
> to dump the file descriptors for the opened <code class="literal">xf</CODE
> file:</P
><blockquote class="footnote"><p class="para">[14] There is no <code class="literal">-d46.1</CODE
> information.</P
></BLOCKQUOTE
><p class="para"><blockquote class="screen"><pre class="screen">openxscript(xf<code class="replaceable"><i>qid</I
></CODE
>):
<i class="lineannotation"> output of dumpfd</I
>()<i class="lineannotation"> here (see <a class="xref" href="#SML2-CH-37-SECT-5-13" title="">Section 37.5.13</A
>)</I
></PRE
></BLOCKQUOTE
></P
><p class="para">If <em class="emphasis">sendmail</EM
> cannot open an <code class="literal">xf</CODE
> file, it logs
this warning:</P
><p class="para"><blockquote class="screen"><pre class="screen">Can't create transcript file xf<code class="replaceable"><i>qid</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">It then tries to open <em class="emphasis">/dev/null</EM
> so that it can continue
with the delivery. If that fails, it logs the following panic message
and immediately exits:</P
><p class="para"><blockquote class="screen"><pre class="screen">Can't open /dev/null</PRE
></BLOCKQUOTE
></P
><p class="para">Once the file is open (or not), <em class="emphasis">sendmail</EM
> turns
it into an I/O stream with a call to <em class="emphasis">fdopen</EM
>(3). If that
call fails, <em class="emphasis">sendmail</EM
> logs this message and immediately
exits:</P
><p class="para"><blockquote class="screen"><pre class="screen">Can't create transcript stream xf<code class="replaceable"><i>qid</I
></CODE
></PRE
></BLOCKQUOTE
></P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-165">37.5.165 -d48.2</A
></H3
><p class="refpurpose">Trace calls to the check- rule sets</P
></DIV
><blockquote><div class="refsect1"><p class="para">Beginning with V8.8, <em class="emphasis">sendmail</EM
> calls rule sets whose names
begin with <code class="literal">check_</CODE
> (see <a class="xref" href="ch29_10.htm#SML2-CH-29-SECT-10-1" title="The check_... Rule Sets">Section 29.10, "The check_... Rule Sets"</A
>) to
filter incoming and outgoing mail. The <code class="literal">-d48.2</CODE
> debugging
switch
[15]
can be used to display the workspace being passed to each such
rule set:</P
><blockquote class="footnote"><p class="para">[15] There is no <code class="literal">-d48.1</CODE
> information.</P
></BLOCKQUOTE
><p class="para"><blockquote class="screen"><pre class="screen">rscheck(<code class="replaceable"><i>name</I
></CODE
>, <code class="replaceable"><i>left</I
></CODE
>, <code class="replaceable"><i>right</I
></CODE
>)</PRE
></BLOCKQUOTE
></P
><p class="para">The <code class="replaceable"><i>name</I
></CODE
> is the name of the named rule set being called.
If <code class="replaceable"><i>right</I
></CODE
> is missing, it prints as NULL, and the
workspace passed to the rule set is:</P
><p class="para"><blockquote class="screen"><pre class="screen"><code class="replaceable"><i>left</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">If <code class="replaceable"><i>right</I
></CODE
> is present, the workspace is:</P
><p class="para"><blockquote class="screen"><pre class="screen"><code class="replaceable"><i>left </I
></CODE
>$| <code class="replaceable"><i>right</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">Here, the <code class="literal">$|</CODE
> in the workspace is the <code class="literal">$|</CODE
> operator.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-166">37.5.166 -d49.1</A
></H3
><p class="refpurpose">Trace checkcompat()</P
></DIV
><blockquote><div class="refsect1"><p class="para">The <em class="emphasis">checkcompat</EM
>() routine inside <em class="emphasis">conf.c</EM
>
can be tuned to solve many problems 
(see <a class="xref" href="ch20_01.htm" title="How checkcompat() Works">Section 20.1, "How checkcompat() Works"</A
>).
The default <code class="literal">-d49.1</CODE
> (a.k.a. <code class="literal">49</CODE
>)
debugging switch inside it prints the arguments that were passed to it:</P
><p class="para"><blockquote class="screen"><pre class="screen">checkcompat(to=<code class="replaceable"><i>recipient</I
></CODE
>, from=<em class="emphasis">sender</EM
>)</PRE
></BLOCKQUOTE
></P
><p class="para">When designing your own <em class="emphasis">checkcompat</EM
>(), you should
only use the <code class="literal">-d49</CODE
> category to trace it.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-167">37.5.167 -d50.1</A
></H3
><p class="refpurpose">Show envelope being dropped</P
></DIV
><blockquote><div class="refsect1"><p class="para">Deallocating an envelope frees that envelope's C language
structure for future reuse. Deallocation also causes all the
queued files for that mail message to be removed (except
as possibly prevented by the <code class="literal">-d51</CODE
> debugging switch described in the
next section).  An envelope is deallocated after
its mail message has been delivered
to all recipients (including any failed deliveries).</P
><p class="para">The <code class="literal">-d50.1</CODE
> (a.k.a. <code class="literal">-d50</CODE
>) debugging switch causes <em class="emphasis">sendmail</EM
> to print
information about each envelope that is being deallocated:</P
><p class="para"><blockquote class="screen"><pre class="screen">dropenvelope <em class="emphasis">loc</EM
> id=<em class="emphasis">ident</EM
> flags= <i class="lineannotation"> output of printenvflags() here</I
></PRE
></BLOCKQUOTE
></P
><p class="para">This output shows the address in memory for the envelope's
C language structure (<code class="replaceable"><i>loc</I
></CODE
>), the queue identifier (<code class="replaceable"><i>ident</I
></CODE
>,
as used to name queued files), 
and the envelope flags as printed by <em class="emphasis">printenvflags</EM
>()
(see <a class="xref" href="#SML2-CH-37-TAB-2" title="Hexadecimal Envelope Flags">Table 37.3</A
> in <a class="xref" href="#SML2-CH-37-SECT-5-12" title="">Section 37.5.12</A
>).</P
><p class="para">Note that if the version of <em class="emphasis">sendmail</EM
> is pre-8.7,
a <code class="literal">Return-Receipt:</CODE
> header was in the message,
and delivery was to at least one local recipient,
the process of deallocation also causes
acknowledgment of delivery to be returned to the sender and triggers
error returns.</P
><p class="para">The <code class="literal">-d50.1</CODE
> debugging switch also shows the <code class="literal">qf</CODE
> and <code class="literal">df</CODE
> files
just before they are removed:</P
><p class="para"><blockquote class="screen"><pre class="screen">===== Dropping [dq]f<code class="replaceable"><i>qid</I
></CODE
>... queueit=<code class="replaceable"><i>bool</I
></CODE
>, e_flags= <i class="lineannotation"> output of printenvflags() here</I
></PRE
></BLOCKQUOTE
></P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-168">37.5.168 -d50.2</A
></H3
><p class="refpurpose">Show Booleans</P
></DIV
><blockquote><div class="refsect1"><p class="para">The <code class="literal">-d50.2</CODE
> debugging switch shows the setting of three variables that
determine how the envelope will be treated:</P
><p class="para"><blockquote class="screen"><pre class="screen">failure_return=<code class="replaceable"><i>val</I
></CODE
> delay_return=<code class="replaceable"><i>val</I
></CODE
> success_return=<code class="replaceable"><i>val</I
></CODE
> queueit=<code class="replaceable"><i>val</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">A 1 indicates that the variable is true, a 0 indicates that it is false.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-169">37.5.169 -d50.10</A
></H3
><p class="refpurpose">Also show the send queue</P
></DIV
><blockquote><div class="refsect1"><p class="para">The <code class="literal">-d50.10</CODE
> debugging switch causes the current send queue to also be printed:</P
><p class="para"><blockquote class="screen"><pre class="screen">sendq=<i class="lineannotation"> output of printaddr</I
>()<em class="emphasis"> here (see <a class="xref" href="ch37_03.htm" title="The Output Produced by printaddr()">Section 37.3.1</A
></EM
>)</PRE
></BLOCKQUOTE
></P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-170">37.5.170 -d51.4</A
></H3
><p class="refpurpose">Show queue entries being unlocked</P
></DIV
><blockquote><div class="refsect1"><p class="para">The <code class="literal">-d51.4</CODE
>
[16]
debugging switch causes V8 <em class="emphasis">sendmail</EM
> to print
the following each time an envelope is unlocked in the queue:</P
><blockquote class="footnote"><p class="para">[16] There is no <code class="literal">-d51.1</CODE
> information.</P
></BLOCKQUOTE
><p class="para"><blockquote class="screen"><pre class="screen">unlockqueue(<code class="replaceable"><i>qid</I
></CODE
>)</PRE
></BLOCKQUOTE
></P
><p class="para">Here, <code class="replaceable"><i>qid</I
></CODE
> is the queue identifier.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-171">37.5.171 -d51.104</A
></H3
><p class="refpurpose">Prevent unlink of xf file</P
></DIV
><blockquote><div class="refsect1"><p class="para">The <code class="literal">xf</CODE
> file (one of the files that form a queued mail message)
holds error messages generated by a delivery agent. The last line
of text in this file is
made the value of the <code class="literal">M</CODE
> line in the <code class="literal">qf</CODE
> file 
(see <a class="xref" href="ch23_09.htm" title="">Section 23.9.9, M line</A
>).
Ordinarily, the <code class="literal">xf</CODE
>
file is removed after that error line is saved.</P
><p class="para">The <code class="literal">-d51.104</CODE
>
debugging switch prevents <em class="emphasis">sendmail</EM
> from removing the <code class="literal">xf</CODE
>
file.
If mail continually fails, this debugging switch can
be used to save all error messages instead of just the one that is
usually saved in the <code class="literal">qf</CODE
> file.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-172">37.5.172 -d52.1</A
></H3
><p class="refpurpose">Show disconnect from controlling TTY</P
></DIV
><blockquote><div class="refsect1"><p class="para">When <em class="emphasis">sendmail</EM
> runs as a daemon, it must disconnect itself
from the terminal device that is used to run it. This prevents keyboard
signals from killing it and prevents it from hanging
(on a dial-in line waiting for carrier detect, for example).</P
><p class="para">The <code class="literal">-d52.1</CODE
> (a.k.a. <code class="literal">-d52</CODE
>) debugging switch shows <em class="emphasis">sendmail</EM
>
disconnecting from the controlling terminal device:</P
><p class="para"><blockquote class="screen"><pre class="screen">disconnect: In <code class="replaceable"><i>fd</I
></CODE
> Out <code class="replaceable"><i>fd</I
></CODE
>, e=<code class="replaceable"><i>addr</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">For both its input and output connections, the <code class="replaceable"><i>fd</I
></CODE
> is a decimal
representation of the file descriptor number.
The <code class="replaceable"><i>addr</I
></CODE
> is a hexadecimal representation of the address
that contains the envelope information.
If the <code class="literal">L</CODE
>
logging level option is greater than 71, <em class="emphasis">sendmail</EM
>
<em class="emphasis">syslog</EM
>(3)'s the following message 
to show that it has disconnected:</P
><p class="para"><blockquote class="screen"><pre class="screen">in background, pid=<code class="replaceable"><i>pid</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">Here, <code class="replaceable"><i>pid</I
></CODE
> is the process identification number of the child
process (the daemon).</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-173">37.5.173 -d52.100</A
></H3
><p class="refpurpose">Prevent disconnect from controlling tty</P
>(useful)</DIV
><blockquote><div class="refsect1"><p class="para">The <code class="literal">-d52.100</CODE
> debugging switch
[17]
prevents <em class="emphasis">sendmail</EM
> from
disconnecting from its controlling terminal device. To show
that it is skipping the disconnect, it prints:</P
><blockquote class="footnote"><p class="para">[17] This was formerly the <code class="literal">-d52.5</CODE
> debugging switch.</P
></BLOCKQUOTE
><p class="para"><blockquote class="screen"><pre class="screen">don't</PRE
></BLOCKQUOTE
></P
><p class="para">This debugging switch is useful for debugging the daemon.
Note that this <code class="literal">-d52.100</CODE
> prevents the detach but allows the
daemon to <em class="emphasis">fork</EM
>(2). This differs from the behavior 
of the <code class="literal">-d99.100</CODE
> debugging switch.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-174">37.5.174 -d53.99</A
></H3
><p class="refpurpose">Trace xclose()</P
></DIV
><blockquote><div class="refsect1"><p class="para">Ordinarily, files are closed silently.
The <code class="literal">-d53.99</CODE
>
[18]
debugging switch
can be used to observe file closings. Just before the file is
closed, <em class="emphasis">sendmail</EM
> prints:</P
><blockquote class="footnote"><p class="para">[18] There is no <code class="literal">-d53.1</CODE
> information.</P
></BLOCKQUOTE
><p class="para"><blockquote class="screen"><pre class="screen">xfclose(<code class="replaceable"><i>fp</I
></CODE
>) <code class="replaceable"><i>what</I
></CODE
> <code class="replaceable"><i>file</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">Here, <code class="replaceable"><i>fp</I
></CODE
> is the file pointer for the open file, printed
in hexadecimal. The <code class="replaceable"><i>what</I
></CODE
> is an indication of the internal function
that requires the close (such as <code class="literal">savemail</CODE
> or <code class="literal">mci_uncache</CODE
>).
The <code class="replaceable"><i>file</I
></CODE
> is the name of the file to be closed.</P
><p class="para">If the close fails, the following is also printed:</P
><p class="para"><blockquote class="screen"><pre class="screen">xfclose FAILURE: <code class="replaceable"><i>why</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">Here, <code class="replaceable"><i>why</I
></CODE
> is the text corresponding to the error value
returned by <em class="emphasis">fclose</EM
>(3) (see <em class="emphasis">sys_errlist</EM
>(3)).</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-175">37.5.175 -d54.1</A
></H3
><p class="refpurpose">Show error return and output message</P
></DIV
><blockquote><div class="refsect1"><p class="para">The exit values that are returned by <em class="emphasis">sendmail</EM
> are documented in
<a class="xref" href="ch36_05.htm#SML2-CH-36-SECT-5-3" title="sendmail's exit() Status">Section 36.5</A
>.
The <code class="literal">-d54.1</CODE
> debugging switch shows the exit value being
set by the internal <em class="emphasis">syserr</EM
>() routine:</P
><p class="para"><blockquote class="screen"><pre class="screen">syserr: ExitStat = <code class="replaceable"><i>num</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">Here, <code class="replaceable"><i>num</I
></CODE
> corresponds to the values defined in <em class="emphasis">&lt;sysexits.h&gt;</EM
>.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-176">37.5.176 -d54.8</A
></H3
><p class="refpurpose">Show message and flags</P
></DIV
><blockquote><div class="refsect1"><p class="para">The <code class="literal">-d54.8</CODE
> debugging switch causes the text of the error
message to be printed along with the flags that control its
actual output:</P
><p class="para"><blockquote class="screen"><pre class="screen">-- <code class="replaceable"><i>message</I
></CODE
> (hold) (held)</PRE
></BLOCKQUOTE
></P
><p class="para">If <code class="literal">(hold)</CODE
> appears, it means that the <code class="replaceable"><i>message</I
></CODE
>
will be held (stored) and not output.
If <code class="literal">(held)</CODE
> appears, it means that the <code class="replaceable"><i>message</I
></CODE
>
was previously held and should not be added to the <code class="literal">xf</CODE
> file.
If neither is printed, the <code class="replaceable"><i>message</I
></CODE
> will be logged and
appended to the <code class="literal">xf</CODE
> file.
If the message on output fails, <em class="emphasis">sendmail</EM
> will attempt to log this
panic message:</P
><p class="para"><blockquote class="screen"><pre class="screen"><code class="replaceable"><i>qid</I
></CODE
>: SYSERR: putoutmsg (<code class="replaceable"><i>host</I
></CODE
>): error on output channel sending &quot;<code class="replaceable"><i>message</I
></CODE
>&quot;: <code class="replaceable"><i>err</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">If the message was never queued, the <code class="replaceable"><i>qid</I
></CODE
> will print as NOQUEUE.
If you are not currently connected to a <code class="replaceable"><i>host</I
></CODE
>, 
it will print as NO-HOST.
The <code class="replaceable"><i>err</I
></CODE
> is the error that caused the message to fail (as defined
in either <em class="emphasis">&lt;sys/errno.h&gt;</EM
> or <em class="emphasis">sysexits.h</EM
>).</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-177">37.5.177 -d55.60</A
></H3
><p class="refpurpose">Show file locking</P
></DIV
><blockquote><div class="refsect1"><p class="para">The <em class="emphasis">sendmail</EM
> program tries to lock every file before reading or writing it.
If <em class="emphasis">sendmail</EM
> was compiled
with HASFLOCK defined (see <a class="xref" href="ch18_08.htm" title="">Section 18.8.9, HAS...</A
>),
it uses <em class="emphasis">flock</EM
>(3) to
lock and unlock files. If HASFLOCK is not defined, <em class="emphasis">sendmail</EM
> 
tries to lock and unlock with <em class="emphasis">fcntl</EM
>(2).</P
><p class="para">The <code class="literal">-d55.60</CODE
>
[19]
debugging switch tells <em class="emphasis">sendmail</EM
> to print
how it is about to try to lock a file:</P
><blockquote class="footnote"><p class="para">[19] There is no <code class="literal">-d55.1</CODE
> information.</P
></BLOCKQUOTE
><p class="para"><blockquote class="screen"><pre class="screen">lockfile(<code class="replaceable"><i>filename</I
></CODE
>, action=<code class="replaceable"><i>set</I
></CODE
>, type=<code class="replaceable"><i>l_type</I
></CODE
>)
lockfile(<code class="replaceable"><i>filename</I
></CODE
>, type=<code class="replaceable"><i>what</I
></CODE
>)</PRE
></BLOCKQUOTE
></P
><p class="para">The first form is printed if HASFLOCK is not defined. In it,
<em class="emphasis">sendmail</EM
> is about to use <em class="emphasis">fcntl</EM
>(2) to lock the file.
The <em class="emphasis">action</EM
> is a decimal representation of the F_SET
flag that is <em class="emphasis">fcntl</EM
>(2)'s second argument. The <code class="replaceable"><i>l_type</I
></CODE
>
is the <em class="emphasis">l_type</EM
> structure member of <em class="emphasis">fcntl</EM
>(2)'s
third argument (see the online manual for <em class="emphasis">fcntl</EM
>(2)).</P
><p class="para">The second form is printed if HASFLOCK is defined so that
<em class="emphasis">flock</EM
>(2) will be used.
In it, <code class="replaceable"><i>what</I
></CODE
> is the type of locking to be performed, printed
in octal, as described in
<a class="xref" href="#SML2-CH-37-TAB-19" title="Flags That Control File Locking">Table 37.20</A
>.</P
><table class="table"><caption class="table"><a class="title" name="SML2-CH-37-TAB-19">Table 37.20: Flags That Control File Locking</A
></CAPTION
><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1">Flag</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Mnemonic</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Description</TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">001</TD
><td class="entry" rowspan="1" colspan="1">LOCK_SH</TD
><td class="entry" rowspan="1" colspan="1">Make it a shared lock</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">002</TD
><td class="entry" rowspan="1" colspan="1">LOCK_EX</TD
><td class="entry" rowspan="1" colspan="1">Make it an exclusive lock</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">004</TD
><td class="entry" rowspan="1" colspan="1">LOCK_NB</TD
><td class="entry" rowspan="1" colspan="1">Make it a nonblocking lock</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">010</TD
><td class="entry" rowspan="1" colspan="1">LOCK_UN</TD
><td class="entry" rowspan="1" colspan="1">Unlock the file</TD
></TR
></TBODY
></TABLE
><p class="para">For both forms of locking, if the file is successfully locked, the above
debugging output is concluded with:</P
><p class="para"><blockquote class="screen"><pre class="screen">SUCCESS</PRE
></BLOCKQUOTE
></P
><p class="para">Otherwise, it is concluded with:</P
><p class="para"><blockquote class="screen"><pre class="screen">(<i class="lineannotation">error message here</I
>) FAILURE</PRE
></BLOCKQUOTE
></P
><p class="para">In this later instance, regardless of the setting of this
debugging flag, <em class="emphasis">sendmail</EM
> will also log the following
error message:</P
><p class="para"><blockquote class="screen"><pre class="screen">cannot <code class="replaceable"><i>lock</I
></CODE
>(<code class="replaceable"><i>filename</I
></CODE
>, fd=<code class="replaceable"><i>num</I
></CODE
>, type=<code class="replaceable"><i>what</I
></CODE
>, omode=<code class="replaceable"><i>octal</I
></CODE
>, euid=<code class="replaceable"><i>euid</I
></CODE
>)</PRE
></BLOCKQUOTE
></P
><p class="para">Here, <code class="replaceable"><i>lock</I
></CODE
> is either <code class="literal">lockf</CODE
> or <code class="literal">flock</CODE
>. The
<code class="replaceable"><i>filename</I
></CODE
> and <code class="replaceable"><i>fd</I
></CODE
> are the file name and file descriptor
for the file. The <code class="replaceable"><i>what</I
></CODE
> is the same as described in
<a class="xref" href="#SML2-CH-37-TAB-19" title="Flags That Control File Locking">Table 37.20</A
>.
If F_GETFL
was defined at the system level when <em class="emphasis">sendmail</EM
> was compiled, then
<code class="replaceable"><i>omode</I
></CODE
> is an octal representation of the value returned by
an <em class="emphasis">fcntl</EM
>(2) F_GETFL call; otherwise, it is a -1 in octal.
The <code class="replaceable"><i>euid</I
></CODE
> is the effective <em class="emphasis">uid</EM
> under which <em class="emphasis">sendmail</EM
>
was running at the time.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-178">37.5.178 -d56.1</A
></H3
><p class="refpurpose">Persistent host status tracing</P
></DIV
><blockquote><div class="refsect1"><p class="para">The <code class="literal">-d56.1</CODE
> (a.k.a. <code class="literal">-d56</CODE
>) debugging switch tells <em class="emphasis">sendmail</EM
>
to print a record of each step it is going through when saving and updating
its persistent host status. The <code class="literal">HostStatusDirectory</CODE
> option 
(see <a class="xref" href="ch34_08.htm" title="">Section 34.8.31, HostStatusDirectory</A
>) specifies where and whether persistent host
status will be saved. Just before a status file is updated, and if
the <code class="literal">SingleThreadDelivery</CODE
> option (see <a class="xref" href="ch34_08.htm" title="">Section 34.8.64, SingleThreadDelivery</A
>)
is true, it needs to be locked:</P
><p class="para"><blockquote class="screen"><pre class="screen">mci_lock_host: attempting to lock <code class="replaceable"><i>host</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">Here, <code class="replaceable"><i>host</I
></CODE
> is the name of the host whose status is being saved
or updated. If the hostname is empty (as in the case of an address that contains
only an RFC822 comment), one of the following errors is printed for
an attempt to lock or unlock the host information:</P
><p class="para"><blockquote class="screen"><pre class="screen">mci_lock_host: NULL mci
mci_unlock_host: NULL mci</PRE
></BLOCKQUOTE
></P
><p class="para">After the status file is locked, <em class="emphasis">sendmail</EM
> will transfer the information
from that file into its internal <em class="emphasis">mci</EM
> structure:</P
><p class="para"><blockquote class="screen"><pre class="screen">mci_load_persistent: Attempting to load persistent information for <code class="replaceable"><i>host</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">Again, if the hostname is empty, this error will print:</P
><p class="para"><blockquote class="screen"><pre class="screen">mci_load_persistent: NULL</PRE
></BLOCKQUOTE
></P
><p class="para">If <em class="emphasis">sendmail</EM
> was unable to translate the hostname into a UNIX path,
the <code class="literal">-d56.1</CODE
> debugging switch causes it to print:</P
><p class="para"><blockquote class="screen"><pre class="screen">mci_load_persistent: Couldn't generate host path</PRE
></BLOCKQUOTE
></P
><p class="para">If <em class="emphasis">sendmail</EM
> was unable open the host status file, it prints:</P
><p class="para"><blockquote class="screen"><pre class="screen">mci_load_persistent: open(<code class="replaceable"><i>filename</I
></CODE
>): <code class="replaceable"><i>host</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">Similarly, when <em class="emphasis">sendmail</EM
> needs to store or update the host
information, it first prints that it is doing so:</P
><p class="para"><blockquote class="screen"><pre class="screen">mci_store_persistent: Storing information for <code class="replaceable"><i>host</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">If <em class="emphasis">sendmail</EM
> could not open the host status file, it
prints:</P
><p class="para"><blockquote class="screen"><pre class="screen">mci_store_persistent: no statfile</PRE
></BLOCKQUOTE
></P
><p class="para">The internals of the status file are described in
Appendix <a class="xref" href="appb_01.htm" title="Host Status File Internals">Appendix B, <cite class="appendix">Host Status File Internals</CITE
></A
>.</P
><p class="para">Ordinarily, <em class="emphasis">sendmail</EM
> is silent about its inability to
open status files when printing its host information with
the <em class="emphasis">hoststat</EM
>(1) command (see <a class="xref" href="ch36_01.htm" title="hoststat (V8.8 and Above)">Section 36.1.1, "hoststat (V8.8 and Above)"</A
>).
But if the
<code class="literal">-d56.1</CODE
> debugging switch is used, <em class="emphasis">sendmail</EM
> will complain:</P
><p class="para"><blockquote class="screen"><pre class="screen">mci_print_persistent: cannot open <code class="replaceable"><i>filename</I
></CODE
>: <code class="replaceable"><i>host</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">When its host information is being purged with the <em class="emphasis">purgestat</EM
>(1)
command (see <a class="xref" href="ch36_01.htm" title="purgestat (V8.8 and Above)">Section 36.1.4, "purgestat (V8.8 and Above)"</A
>), the 
<code class="literal">-d56.1</CODE
> debugging switch tells <em class="emphasis">sendmail</EM
> to show what
it is trying to achieve:</P
><p class="para"><blockquote class="screen"><pre class="screen">mci_purge_persistent: purging <code class="replaceable"><i>path</I
></CODE
>
mci_purge_persistent: dpurge <code class="replaceable"><i>directory</I
></CODE
></PRE
></BLOCKQUOTE
></P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-179">37.5.179 -d56.2</A
></H3
><p class="refpurpose">More persistent host status tracing</P
></DIV
><blockquote><div class="refsect1"><p class="para">The <code class="literal">-d56.2</CODE
> debugging switch causes <em class="emphasis">sendmail</EM
> to show
additional information about what it is trying to do.
Just before attempting to lock a status file, it prints:</P
><p class="para"><blockquote class="screen"><pre class="screen">mci_lock_host: attempting to lock <code class="replaceable"><i>host</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">&#13;If a path could not be generated from the hostname, <em class="emphasis">sendmail</EM
>
prints this error:</P
><p class="para"><blockquote class="screen"><pre class="screen">mci_lock_host: Failed to generate host path for <code class="replaceable"><i>host</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">If <em class="emphasis">sendmail</EM
> could not lock the status file, it prints:</P
><p class="para"><blockquote class="screen"><pre class="screen">mci_lock_host: couldn't get lock on <code class="replaceable"><i>filename</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">When <em class="emphasis">sendmail</EM
> is about to update a status file, just
before unlocking that file, it announces that fact:</P
><p class="para"><blockquote class="screen"><pre class="screen">mci_unlock_host: store prior to unlock</PRE
></BLOCKQUOTE
></P
><p class="para">The process of updating or reading a status file begins by <em class="emphasis">sendmail</EM
>
traversing the directory hierarchy under which that file is stored.
If <em class="emphasis">sendmail</EM
> is unable to <em class="emphasis">stat</EM
>(2) any component of that
path, it prints the following error:</P
><p class="para"><blockquote class="screen"><pre class="screen">mci_traverse: Failed to stat <code class="replaceable"><i>component</I
></CODE
>: <i class="lineannotation">reason for failure</I
></PRE
></BLOCKQUOTE
></P
><p class="para">If <em class="emphasis">sendmail</EM
> cannot descend into the next directory, it prints:</P
><p class="para"><blockquote class="screen"><pre class="screen">mci_traverse: opendir <code class="replaceable"><i>component</I
></CODE
>: <i class="lineannotation">reason for failure</I
></PRE
></BLOCKQUOTE
></P
><p class="para">When purging its host information with the <em class="emphasis">purgestat</EM
>(1)
command (see <a class="xref" href="ch36_01.htm" title="purgestat (V8.8 and Above)">Section 36.1.4</A
>), if <em class="emphasis">sendmail</EM
> cannot
remove the status file, it prints:</P
><p class="para"><blockquote class="screen"><pre class="screen">mci_purge_persistent: failed to unlink <code class="replaceable"><i>filename</I
></CODE
>: <i class="lineannotation">reason for failure</I
></PRE
></BLOCKQUOTE
></P
><p class="para">And if it cannot remove any of the directory components, it prints:</P
><p class="para"><blockquote class="screen"><pre class="screen">mci_purge_persistent: rmdir <code class="replaceable"><i>directory</I
></CODE
>: <i class="lineannotation">reason for failure</I
></PRE
></BLOCKQUOTE
></P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-180">37.5.180 -d56.12</A
></H3
><p class="refpurpose">Perform a sanity check</P
></DIV
><blockquote><div class="refsect1"><p class="para">As a &quot;sanity check,&quot; the <code class="literal">-d56.12</CODE
> debugging switch
causes <em class="emphasis">sendmail</EM
> to print the following if the lock was successfully
acquired on the status file:</P
><p class="para"><blockquote class="screen"><pre class="screen">mci_lock_host: Sanity check - lock is good</PRE
></BLOCKQUOTE
></P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-181">37.5.181 -d56.80</A
></H3
><p class="refpurpose">Trace creating the path to the status file</P
></DIV
><blockquote><div class="refsect1"><p class="para">If the status file does not exist, <em class="emphasis">sendmail</EM
> recursively makes
the directories leading to it. The <code class="literal">-d56.80</CODE
> debugging switch
is used to trace this process:</P
><p class="para"><blockquote class="screen"><pre class="screen">mci_generate_persistent_path(<code class="replaceable"><i>host</I
></CODE
>): FAILURE <code class="replaceable"><i>errno</I
></CODE
>
mci_generate_persistent_path(<code class="replaceable"><i>host</I
></CODE
>): SUCCESS <code class="replaceable"><i>path</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">If this process of making directories fails, <code class="replaceable"><i>errno</I
></CODE
> is printed,
as listed in <em class="emphasis">&lt;errno.h&gt;</EM
>. If it succeeds, the <code class="replaceable"><i>path</I
></CODE
> created
is displayed.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-182">37.5.182 -d56.93</A
></H3
><p class="refpurpose">Dump MCI record for the host</P
></DIV
><blockquote><div class="refsect1"><p class="para">The <code class="literal">-d56.93</CODE
> debugging switch causes <em class="emphasis">sendmail</EM
> to dump the
connection cache information associated with a host's status file:</P
><p class="para"><blockquote class="screen"><pre class="screen">mci_read_persistent: fp=<code class="replaceable"><i>hex</I
></CODE
>, mci= <i class="lineannotation">output of mci_dump() here (see <a class="xref" href="#SML2-CH-37-SECT-5-44" title="">Section 37.5.44</A
>)</I
></PRE
></BLOCKQUOTE
></P
><p class="para">Here, <code class="replaceable"><i>hex</I
></CODE
> is the file pointer of the open status file printed in
hexadecimal. That is followed by a dump of the MCI record for the
host.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-183">37.5.183 -d57.2</A
></H3
><p class="refpurpose">Monitor vsnprintf() overflows</P
></DIV
><blockquote><div class="refsect1"><p class="para">If HASSNPRINTF is not defined, <em class="emphasis">sendmail</EM
> emulates
the <em class="emphasis">snprintf</EM
>(3) function. If the internal buffer
of that emulation overflows, the <code class="literal">-d57.2</CODE
>
debugging switch causes this warning to be printed:</P
><p class="para"><blockquote class="screen"><pre class="screen">vsnprintf overflow: <i class="lineannotation">first 200 characters of buffer</I
></PRE
></BLOCKQUOTE
></P
><p class="para">Note that you may have to also use the <code class="literal">-v</CODE
> command-line switch
to make this output visible.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-184">37.5.184 -d59</A
></H3
><p class="refpurpose">XLA from contrib</P
>(obsolete)</DIV
><blockquote><div class="refsect1"><p class="para">See the XLA package in the <em class="emphasis">contrib/xla</EM
> directory as distributed
with the V8 <em class="emphasis">sendmail</EM
> source. Note that XLA is no longer distributed
with <em class="emphasis">sendmail</EM
> as of V8.8.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-185">37.5.185 -d60.1</A
></H3
><p class="refpurpose">Trace map lookups inside rewrite()</P
>(useful)</DIV
><blockquote><div class="refsect1"><p class="para">Rules defined by the <code class="literal">R</CODE
> configuration command are rewritten
by <em class="emphasis">sendmail</EM
>'s internal <em class="emphasis">rewrite</EM
>() subroutine.
The <code class="literal">$[</CODE
> and <code class="literal">$(</CODE
> lookup operators
(see <a class="xref" href="ch33_04.htm#SML2-CH-33-SECT-4-2" title="$[ and $]: A Special Case">Section 33.4.3, "$[ and $]: A Special Case"</A
> and <a class="xref" href="ch33_04.htm#SML2-CH-33-SECT-4-2" title="Use Maps with $( and $) in Rules">Section 33.4, "Use Maps with $( and $) in Rules"</A
>)
cause <em class="emphasis">sendmail</EM
> to look up keys in databases (maps).</P
><p class="para">If <em class="emphasis">sendmail</EM
> is running in deferred mode 
(see <a class="xref" href="ch34_08.htm" title="">Section 34.8.16</A
>), it
skips map lookups because they may cause DNS accesses. The <code class="literal">-d60.1</CODE
>
(a.k.a. <code class="literal">-d60</CODE
>) debugging switch causes <em class="emphasis">sendmail</EM
> to print that it is
skipping the lookup:</P
><p class="para"><blockquote class="screen"><pre class="screen">map_lookup(<code class="replaceable"><i>name</I
></CODE
>, <code class="replaceable"><i>key</I
></CODE
>) =&gt; DEFERRED</PRE
></BLOCKQUOTE
></P
><p class="para">Here, <code class="replaceable"><i>name</I
></CODE
> is the map type, such as <code class="literal">dequote</CODE
> or
<code class="literal">host</CODE
>. The <code class="replaceable"><i>key</I
></CODE
> is the information being looked up.</P
><p class="para">&#13;If running in something other than deferred mode, <em class="emphasis">sendmail</EM
> performs the lookup.
If the lookup fails (if <code class="replaceable"><i>key</I
></CODE
> is not found), <em class="emphasis">sendmail</EM
>
prints:</P
><p class="para"><blockquote class="screen"><pre class="screen">map_lookup(<code class="replaceable"><i>name</I
></CODE
>, <code class="replaceable"><i>key</I
></CODE
>) =&gt; NOT FOUND (<code class="replaceable"><i>stat</I
></CODE
>)</PRE
></BLOCKQUOTE
></P
><p class="para">Here, <code class="replaceable"><i>stat</I
></CODE
> is the number of the error that caused the failure.
If it is 0, then the lookup failed merely because the <code class="replaceable"><i>key</I
></CODE
>
was not found. Otherwise, it corresponds to the error numbers in
<em class="emphasis">&lt;sysexits.h&gt;</EM
>. Then if <code class="replaceable"><i>stat</I
></CODE
> is the special value 75 (for
EX_TEMPFAIL), <em class="emphasis">sendmail</EM
> also prints:</P
><p class="para"><blockquote class="screen"><pre class="screen">map_lookup(<code class="replaceable"><i>name</I
></CODE
>, <code class="replaceable"><i>key</I
></CODE
>) tempfail: errno=<code class="replaceable"><i>err</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">Here, <code class="replaceable"><i>err</I
></CODE
> is the error number that corresponds to the errors
listed in <em class="emphasis">&lt;errno.h&gt;</EM
>.</P
><p class="para">If the <code class="replaceable"><i>key</I
></CODE
> is successfully found, <em class="emphasis">sendmail</EM
> prints:</P
><p class="para"><blockquote class="screen"><pre class="screen">map_lookup(<code class="replaceable"><i>name</I
></CODE
>, <code class="replaceable"><i>key</I
></CODE
>) =&gt; <i class="lineannotation">replacement value here</I
> (<code class="replaceable"><i>stat</I
></CODE
>)</PRE
></BLOCKQUOTE
></P
><p class="para">Note that the replacement value will be whatever value was defined by
the <code class="literal">-a</CODE
> database switch when the <code class="literal">K</CODE
> command defined
the map (see <a class="xref" href="ch33_03.htm#SML2-CH-33-SECT-3-4-2" title="-a  append tag on successful match (V8.1 and above)">Section 33.3.4.2, "-a  append tag on successful match (V8.1 and above)"</A
>).</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-186">37.5.186 -d61.10</A
></H3
><p class="refpurpose">Trace gethostbyname()</P
></DIV
><blockquote><div class="refsect1"><p class="para">The <em class="emphasis">gethostbyname</EM
>(3) library routine is called by <em class="emphasis">sendmail</EM
> every time
<em class="emphasis">sendmail</EM
> needs to find the canonical name of a host. The <code class="literal">-d61.10</CODE
>
[20]
debugging switch shows the result of that lookup:</P
><blockquote class="footnote"><p class="para">[20] There is no <code class="literal">-d61.1</CODE
> information.</P
></BLOCKQUOTE
><p class="para"><blockquote class="screen"><pre class="screen">_switch_gethostbyname_r(<code class="replaceable"><i>host</I
></CODE
>)... <i class="lineannotation">canonical name here</I
>
__switch_gethostbyname(<code class="replaceable"><i>host</I
></CODE
>)... <i class="lineannotation">canonical name here</I
>
gethostbyname(<code class="replaceable"><i>host</I
></CODE
>)... <i class="lineannotation">canonical name here</I
></PRE
></BLOCKQUOTE
></P
><p class="para">In all three lines of output, the <code class="replaceable"><i>host</I
></CODE
> was looked up to find its canonical
name. If one was found, its canonical name is printed; otherwise, <code class="literal">failure</CODE
> is
printed.
The first two lines show variations on <em class="emphasis">gethostbyname</EM
>(3) that was required
by some early SysVR4-based machines.
These represent <em class="emphasis">sendmail</EM
>'s attempt to canonify the <code class="replaceable"><i>host</I
></CODE
>
no matter what.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-187">37.5.187 -d62.1</A
></H3
><p class="refpurpose">Log file descriptors before and after all deliveries</P
></DIV
><blockquote><div class="refsect1"><p class="para">The <code class="literal">-d62.1</CODE
> (a.k.a. <code class="literal">-d62</CODE
>) debugging switch causes <em class="emphasis">sendmail</EM
>
to log the state of all of its file descriptors. It does this once just
before it starts to process the list of its recipients and again just
after it has completed delivery of all its recipients. Note that this
debugging switch is unusual in that it causes its output
to be logged with <em class="emphasis">syslog</EM
>(3), rather than written to <em class="emphasis">stdout</EM
>.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-188">37.5.188 -d62.8</A
></H3
><p class="refpurpose">Log file descriptors before each delivery</P
></DIV
><blockquote><div class="refsect1"><p class="para">The <code class="literal">-d62.8</CODE
> debugging switch causes <em class="emphasis">sendmail</EM
>
to log the state of all its file descriptors just before undertaking
delivery of each message.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-189">37.5.189 -d62.10</A
></H3
><p class="refpurpose">Log file descriptors after each delivery</P
></DIV
><blockquote><div class="refsect1"><p class="para">The <code class="literal">-d62.10</CODE
> debugging switch causes <em class="emphasis">sendmail</EM
>
to log the state of all its file descriptors just after completing
delivery of each message.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-190">37.5.190 -d80.1</A
></H3
><p class="refpurpose">Content-Length: header (Sun enhancement)</P
></DIV
><blockquote><div class="refsect1"><p class="para">The <code class="literal">-d80.1</CODE
> (a.k.a. <code class="literal">-d80</CODE
>) debugging switch is used to watch how
Sun's version of <em class="emphasis">sendmail</EM
> handles the <code class="literal">Content-Length:</CODE
>
header.
As soon as the size of the body of a message is known, Sun's <em class="emphasis">sendmail</EM
>
stores it in the envelope information. When the time comes to emit
the <code class="literal">Content-Length:</CODE
> header, that information is fetched.
If the size is unknown, the <code class="literal">-d80.1</CODE
> debugging switch
causes <em class="emphasis">sendmail</EM
> to print:</P
><p class="para"><blockquote class="screen"><pre class="screen">content_length(): Error:  Message bodysize undefined !</PRE
></BLOCKQUOTE
></P
><p class="para">If the size is known, it is reduced by the number and size of
the end-of-line characters (as defined by the delivery agent's
<code class="literal">E =</CODE
> equate). If the delivery agent's <code class="literal">F=E</CODE
> flag is
set (see <a class="xref" href="ch30_08.htm" title="">Section 30.8.19, F=E</A
>),
the size is further reduced by the number of five character
&quot;<code class="literal">From </CODE
>&quot; strings that begin lines in the message body.
The <code class="literal">-d80</CODE
> debugging switch then causes the final result
to be printed:</P
><p class="para"><blockquote class="screen"><pre class="screen">Content length = <i class="lineannotation"> final length here</I
></PRE
></BLOCKQUOTE
></P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-191">37.5.191 -d81.1</A
></H3
><p class="refpurpose">&gt; option for remote mode (Sun enhancement)</P
></DIV
><blockquote><div class="refsect1"><p class="para">In V8.1 <em class="emphasis">sendmail</EM
> the letter <code class="literal">R</CODE
> was co-opted by the
Berkeley distribution as an option name. This forced Sun to change the
name of its former <code class="literal">R</CODE
> option into the new <code class="literal">&gt;</CODE
> option. The
<code class="literal">-d81.1</CODE
> (a.k.a. <code class="literal">-d80</CODE
>) debugging switch causes Sun's <em class="emphasis">sendmail</EM
> to display
the status of this remote mode:</P
><p class="para"><blockquote class="screen"><pre class="screen">verify_mail_server(): remote mode is <i class="lineannotation"> either </I
>on <i class="lineannotation">or </I
>off
mail server = <i class="lineannotation"> host name here</I
></PRE
></BLOCKQUOTE
></P
><p class="para">If the <code class="literal">&gt;</CODE
> option is declared, <code class="literal">on</CODE
> is printed, and the
name of the remote mail host is displayed, if known. See <a class="xref" href="appd_05.htm" title="The &gt; Option">Section 38.18, "The &gt; Option"</A
>
for a further description of this option.</P
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-192">37.5.192 -d91.100</A
></H3
><p class="refpurpose">Log caching and uncaching connections</P
></DIV
><blockquote><div class="refsect1"><p class="para">The <code class="literal">-d91.100</CODE
> debugging switch
[21]
causes the same information to be logged
with <em class="emphasis">syslog</EM
>(3)
as is printed by the <code class="literal">-d42.5</CODE
> debugging switch.</P
><blockquote class="footnote"><p class="para">[21] There is no <code class="literal">-d91.1</CODE
> information available.</P
></BLOCKQUOTE
></DIV
></BLOCKQUOTE
></DIV
><div class="refentry"><div class="refnamediv"><h3 class="refname"><a class="refname" name="SML2-CH-37-SECT-5-193">37.5.193 -d99.100</A
></H3
><p class="refpurpose">Prevent backgrounding the daemon</P
>(useful)</DIV
><blockquote><div class="refsect1"><p class="para">The <code class="literal">-d99.100</CODE
> debugging switch
[22]
prevents the <em class="emphasis">sendmail</EM
> daemon
from forking and putting itself into the background. This leaves
the running daemon connected to your terminal so that you can see
other debugging output. For example,</P
><blockquote class="footnote"><p class="para">[22] There is no <code class="literal">-d99.1</CODE
> information available.</P
></BLOCKQUOTE
><p class="para"><blockquote class="screen"><pre class="screen"># <code class="userinput"><b>/usr/lib/sendmail -bd -d99.100 -d9.30</B
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">This allows you to watch the daemon perform RFC1413 identification
queries when SMTP connections are made. See also <code class="literal">-d52.100</CODE
>, which prevents <em class="emphasis">sendmail</EM
> from
disconnecting from its controlling terminal device, or the <code class="literal">-bD</CODE
> command-line switch (<a class="xref" href="ch36_07.htm" title="">Section 36.7.4, -bD</A
>), which does both.<a class="indexterm" name="AUTOID-61529"></A
></P
></DIV
></BLOCKQUOTE
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch37_04.htm" title="37.4 Pitfalls"><img src="../gifs/txtpreva.gif" alt="Previous: 37.4 Pitfalls" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="sendmail"><img src="../gifs/txthome.gif" alt="sendmail" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="CHAPTER" href="ch38_01.htm" title="38. Rule-Set Testing with -bt"><img src="../gifs/txtnexta.gif" alt="Next: 38. Rule-Set Testing with -bt" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">37.4 Pitfalls</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">38. Rule-Set Testing with -bt</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.htm" title="The Networking CD Bookshelf">Library Home</A
> | <a href="../dnsbind/index.htm" title="DNS &amp; BIND">DNS &amp; BIND</A
> | <a href="../tcpip/index.htm" title="TCP/IP Network Administration">TCP/IP</A
> | <a href="index.htm" title="sendmail">sendmail</A
> | <a href="../smdref/index.htm" title="sendmail Desktop Reference">sendmail Reference</A
> | <a href="../firewall/index.htm" title="Building Internet Firewalls">Firewalls</A
> | <a href="../puis/index.htm" title="Practical UNIX &amp; Internet Security">Practical Security</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
