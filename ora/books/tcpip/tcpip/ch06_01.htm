<html><head>
<title>[Chapter 6] Configuring the Interface </TITLE>
<meta name="DC.title" content="TCP/IP Network Administration"><meta name="DC.creator" content="Craig Hunt"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-02-04T01:33:48Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-322-7" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="index.htm" title="TCP/IP Network Administration"><link rel="prev" href="ch05_05.htm" title="5.5 Summary "><link rel="next" href="ch06_02.htm#TCP2-CH-6-SECT-2.1" title="6.2 TCP/IP Over a Serial Line "></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="TCP/IP Network Administration" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="TCP/IP Network Administration"><area shape="RECT" coords="467,0,514,18" href="../search/tsrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch05_05.htm" title="5.5 Summary "><img src="../gifs/txtpreva.gif" alt="Previous: 5.5 Summary " border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 6</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch06_02.htm#TCP2-CH-6-SECT-2.1" title="6.2 TCP/IP Over a Serial Line "><img src="../gifs/txtnexta.gif" alt="Next: 6.2 TCP/IP Over a Serial Line " border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="CHAPTER"><h1 class="chapter"><a class="title" name="TCP2-CH-6">6. Configuring the Interface </A
></H1
><div class="htmltoc"><p><b>Contents:</B
><br><a class="SECT1" href="#TCP2-CH-6-SECT-1" title="6.1 The ifconfig Command ">The ifconfig Command </A
><br><a class="SECT1" href="ch06_02.htm#TCP2-CH-6-SECT-2.1" title="6.2 TCP/IP Over a Serial Line ">TCP/IP Over a Serial Line </A
><br><a class="SECT1" href="ch06_03.htm#TCP2-CH-6-SECT-3.3" title="6.3 Installing PPP ">Installing PPP </A
><br><a class="SECT1" href="ch06_04.htm#TCP2-CH-6-SECT-4.4" title="6.4 Installing SLIP ">Installing SLIP </A
><br><a class="SECT1" href="ch06_05.htm" title="6.5 Summary ">Summary </A
></P
><p></P
></DIV
><p class="para">When networking protocols work only with a single kind of physical
network, there is no need to identify the network interface to the
software. The software knows what the interface <em class="emphasis">must</EM
> be; no
configuration issues are left for the administrator. However, one
important strength of TCP/IP is its flexible use of different physical
networks. This flexibility adds complexity to the system administrator's
task, because you must tell TCP/IP which interfaces
to use, and you must define the characteristics of each interface.</P
><p class="para">Because TCP/IP is independent of the underlying physical network,<a class="indexterm" name="AUTOID-5736"></A
>
IP addresses are implemented in the network software&nbsp;- not in the network
hardware. Unlike Ethernet addresses, which are determined by the Ethernet
hardware, the system administrator assigns an IP address to each network
interface.</P
><p class="para">In this chapter, we use the <b class="emphasis.bold">ifconfig</B
> (interface configure) command
to identify the network interface to TCP/IP and to assign the IP address,
subnet mask, and broadcast address to the interface. We also configure
a network interface to run Point-to-Point Protocol (PPP), which is the
standard Network Access Layer protocol used to run TCP/IP over modem
connections. Let's begin with a discussion of <b class="emphasis.bold">ifconfig</B
>.</P
><div class="sect1"><h2 class="sect1"><a class="title" name="TCP2-CH-6-SECT-1">6.1 The ifconfig Command </A
></H2
><p class="para"><a class="indexterm" name="TCP2-CH-6-IX-IFCONFIG"></A
>The <b class="emphasis.bold">ifconfig</B
> command sets, or checks, configuration values for
network interfaces. Regardless of the vendor or version of UNIX,<a class="indexterm" name="AUTOID-5749"></A
>
the <b class="emphasis.bold">ifconfig</B
> command will set the IP address, the subnet mask,
and the broadcast address for each interface. Its most basic function
is assigning the IP address.</P
><p class="para">Here is the <b class="emphasis.bold">ifconfig</B
> command that
configures the Ethernet interface on <em class="emphasis">peanut</EM
>:<a class="indexterm" name="AUTOID-5756"></A
></P
><p class="para"><blockquote class="screen"><pre class="screen"># <code class="userinput"><b>ifconfig le0 172.16.12.2 netmask 255.255.255.0  \
broadcast 172.16.12.255</B
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">Many other arguments can be used with the <b class="emphasis.bold">ifconfig</B
> command; we
discuss several of these later. But a few important arguments provide
the basic information required by TCP/IP for every network interface.<a class="indexterm" name="AUTOID-5764"></A
>
These are:</P
><dl class="variablelist"><dt class="term"><em class="emphasis">interface</EM
></DT
><dd class="listitem"><p class="para">The name of the network interface that you want to configure for TCP/IP.
In the example above, this is the Ethernet interface le0.</P
></DD
><dt class="term"><em class="emphasis">address</EM
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-5779"></A
>The IP address assigned to this interface. Enter the address as
either an IP address (in dotted decimal form) or as a hostname.
If you use a hostname, place the hostname and its address in the<a class="indexterm" name="AUTOID-5781"></A
><a class="indexterm" name="AUTOID-5784"></A
>
<em class="emphasis">/etc/hosts</EM
> file. Your system must be able to find the hostname
in <em class="emphasis">/etc/hosts</EM
> because <b class="emphasis.bold">ifconfig</B
> usually executes before DNS
is running. The example uses the numeric IP address 172.16.12.2 as the
<b class="emphasis.bold">address</B
> value.</P
></DD
><dt class="term"><b class="emphasis.bold">netmask </B
><em class="emphasis">mask</EM
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-5796"></A
>The subnet mask for this interface. Ignore this argument only if you're
using the default mask derived from the traditional address class
structure. If you are subnetting, use your subnet mask. The subnet
mask chosen for our imaginary network is 255.255.255.0, so that is the
value assigned to <em class="emphasis">peanut</EM
>'s le0 interface. See Chapters 2 and 4
for information on address masks and subnets.</P
></DD
><dt class="term"><b class="emphasis.bold">broadcast </B
><em class="emphasis">address</EM
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-5806"></A
>The broadcast address for the network. Most, but not all, systems default
to the standard broadcast address, which is an IP address with all host
bits set to 1. In the <b class="emphasis.bold">ifconfig</B
> example we explicitly set the
broadcast address to 172.16.12.255 to avoid any confusion. Every system 
on the subnet must agree on the broadcast address.</P
></DD
></DL
><p class="para">The network administrator provides the values for the address, subnet
mask, and broadcast address. The values in our example are taken directly
from the planning sheet we developed in <a class="xref" href="ch04_01.htm" title="Getting Started ">Chapter 4, <cite class="chapter">Getting Started </CITE
></A
>. But the name of
the interface, the first argument on every <b class="emphasis.bold">ifconfig</B
> command line,
must often be determined from the system's documentation.</P
><div class="sect2"><h3 class="sect2"><a class="title" name="TCP2-CH-6-SECT-1.1">6.1.1 Determining the Interface Name </A
></H3
><p class="para"><a class="indexterm" name="TCP2-CH-6-IX-INTERFACES-DETERMINING-NAME-OF"></A
>In <a class="xref" href="ch05_01.htm" title="Basic Configuration ">Chapter 5, <cite class="chapter">Basic Configuration </CITE
></A
>, we saw that Ethernet network interfaces<a class="indexterm" name="AUTOID-5820"></A
>
come in many
varieties, and that different Ethernet cards usually have different
interface names. You can usually determine which interface is used 
on a system from the messages displayed on the console during a boot.
On many systems these messages can be examined with the <b class="emphasis.bold">dmesg</B
>
command.<a class="indexterm" name="AUTOID-5824"></A
>
But even with this information, determining the name of the
Ethernet interface is not always easy. The following example shows the
output of the <b class="emphasis.bold">dmesg</B
> command on two different systems:</P
><p class="para"><blockquote class="screen"><pre class="screen">almond% <code class="userinput"><b>dmesg | grep le0</B
></CODE
>
le0 at ledma0: SBus slot f 0xc00000 sparc ipl 6
le0 is /iommu@f,e0000000/sbus@f,e0001000/ledma@f,400010/le@f,c00000

acorn&gt; <code class="userinput"><b>dmesg | grep eth0</B
></CODE
>
eth0: smc8432 (DEC 21041 Tulip) at 0xfc80, 00:00:c0:dd:d4:da, IRQ 10
eth0: enabling 10TP port.</PRE
></BLOCKQUOTE
></P
><p class="para">The first <b class="emphasis.bold">dmesg</B
> command in the example shows the messages displayed
when an le0 Ethernet interface is detected during the boot of a Solaris
2.5.1 system. Nothing about these messages makes it clear that le0 is
an Ethernet interface. The second <b class="emphasis.bold">dmesg</B
> example, which comes from 
a PC running Linux, provides more clues. eth0 is a
more intuitive Ethernet interface name; and the Linux system
displays the Ethernet address (00:00:c0:dd:d4:da) and the make and model
(SMC8432) of the network adapter card. If you know what these things
mean, it makes guessing the Ethernet interface name simpler.</P
><p class="para">It is not always easy to determine all available interfaces on your system by
looking at the output of <b class="emphasis.bold">dmesg</B
>, nor by looking at device statements
in the kernel configuration file. These only show you the physical
hardware interfaces. In the TCP/IP protocol architecture, the Network<a class="indexterm" name="AUTOID-5836"></A
>
Access Layer encompasses all functions that fall below the Internet
Layer. This can include all three lower layers of the OSI Reference Model:<a class="indexterm" name="AUTOID-5838"></A
><a class="indexterm" name="AUTOID-5840"></A
>
the Physical Layer, the Data Link Layer,<a class="indexterm" name="AUTOID-5842"></A
><a class="indexterm" name="AUTOID-5844"></A
>
and the Network Layer. IP needs
to know the specific interface in the Network Access Layer where packets
should be passed for delivery to a particular network. This interface
is not limited to a physical hardware driver. It could be a software
interface into the network layer of another protocol suite. So what
other methods can help you determine the network interfaces available
on a system? Use the <b class="emphasis.bold">netstat</B
> and the <b class="emphasis.bold">ifconfig</B
> commands.
For example, to see all network interfaces that are already configured,
enter:</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>netstat -in</B
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">The <b class="emphasis.bold">-i</B
> option tells <b class="emphasis.bold">netstat</B
> to display the status of all
configured network interfaces, and the <b class="emphasis.bold">-n</B
> tells <b class="emphasis.bold">netstat</B
>
to display its output in numeric form. The <b class="emphasis.bold">netstat -in</B
> command<a class="indexterm" name="AUTOID-5857"></A
>
displays the following fields:</P
><dl class="variablelist"><dt class="term"><em class="emphasis">Name</EM
></DT
><dd class="listitem"><p class="para">The Interface Name field shows the actual name assigned to the interface.
This is the name you give to <b class="emphasis.bold">ifconfig</B
> to identify the
interface. An asterisk (<code class="literal">*</CODE
>)<a class="indexterm" name="AUTOID-5868"></A
><a class="indexterm" name="AUTOID-5871"></A
><a class="indexterm" name="AUTOID-5874"></A
>
in this field indicates that the
interface is not enabled; i.e., the interface is not &quot;up.&quot;</P
></DD
><dt class="term"><em class="emphasis">Mtu</EM
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-5882"></A
>The Maximum Transmission Unit shows the longest frame (packet) that can be
transmitted by this interface without fragmentation. The MTU is displayed
in bytes. MTU is discussed in the section &quot;The datagram&quot; in <a class="xref" href="ch01_01.htm" title="Overview of TCP/IP">Chapter 1, <cite class="chapter">Overview of TCP/IP</CITE
></A
>.</P
></DD
><dt class="term"><em class="emphasis">Net/Dest</EM
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-5890"></A
><a class="indexterm" name="AUTOID-5892"></A
>The Network/Destination field shows the network or the destination host
to which the interface provides access. In our Ethernet examples, this
field contains a network address. The network address is derived from
the IP address of the interface and the subnet mask.

This field contains a host address if the interface is configured for
a point-to-point (host-specific) link. The destination address is the
address of the remote host at the other end of the point-to-point link.
[1]<a class="indexterm" name="AUTOID-5897"></A
>
A point-to-point link is a direct connection between two computers.
You can create a point-to-point link with the <b class="emphasis.bold">ifconfig</B
> command.
How this is done is covered later in this chapter.</P
><blockquote class="footnote"><p class="para">[1] See the description of the H flag in the section &quot;Routing Table&quot;
in <a class="xref" href="ch02_01.htm" title="Delivering the Data">Chapter 2, <cite class="chapter">Delivering the Data</CITE
></A
>.</P
></BLOCKQUOTE
></DD
><dt class="term"><em class="emphasis">Address</EM
></DT
><dd class="listitem"><p class="para">The IP Address field shows the Internet address assigned to this
interface.</P
></DD
><dt class="term"><em class="emphasis">Ipkts</EM
></DT
><dd class="listitem"><p class="para">The Input Packets field shows how many packets this interface has
received.</P
></DD
><dt class="term"><em class="emphasis">Ierrs</EM
></DT
><dd class="listitem"><p class="para">The Input Errors field shows how many damaged packets the<a class="indexterm" name="AUTOID-5916"></A
>
interface has received.</P
></DD
><dt class="term"><em class="emphasis">Opkts</EM
></DT
><dd class="listitem"><p class="para">The Output Packets field shows how many packets were sent out by this
interface.</P
></DD
><dt class="term"><em class="emphasis">Oerrs</EM
></DT
><dd class="listitem"><p class="para">The Output Errors field shows how many of the packets 
caused an error condition.</P
></DD
><dt class="term"><em class="emphasis">Collis</EM
></DT
><dd class="listitem"><p class="para">The Collisions field shows how many Ethernet collisions were detected
by this interface. Ethernet collisions<a class="indexterm" name="AUTOID-5934"></A
>
are a normal condition caused by
Ethernet traffic contention. This field is not applicable to
non-Ethernet interfaces.</P
></DD
><dt class="term"><em class="emphasis">Queue</EM
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-5941"></A
>The Packets Queued field shows how many packets are in the queue,
awaiting transmission via this interface. Normally this is zero.</P
></DD
></DL
><p class="para">The output of a <b class="emphasis.bold">netstat</B
> command shows:</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>netstat -in</B
></CODE
>
Name  Mtu   Net/Dest   Address     Ipkts Ierrs Opkts Oerrs Collis Queue
le0   1500  172.16.0.0 172.16.12.2 1547   1    1127  0     135    0
lo0   1536  127.0.0.0  127.0.0.1    133   0     133  0     0      0</PRE
></BLOCKQUOTE
></P
><p class="para">This display shows that this workstation has only two network
interfaces. In this case it is easy to identify each network
interface. The lo0 interface is the loopback interface,<a class="indexterm" name="AUTOID-5950"></A
>
which every
TCP/IP system has. It is the same loopback device discussed in <a class="xref" href="ch05_01.htm" title="Basic Configuration ">Chapter 5</A
>.
le0 is a Lance Ethernet interface,<a class="indexterm" name="AUTOID-5954"></A
>
also discussed in <a class="xref" href="ch05_01.htm" title="Basic Configuration ">Chapter 5</A
>.</P
><p class="para">On most systems, the loopback interface is part of the default
configuration, so you won't need to configure it. If you do need
to configure lo0 on your system, use the following command:</P
><p class="para"><blockquote class="screen"><pre class="screen"># <code class="userinput"><b>ifconfig lo0 127.0.0.1</B
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">The configuration of the Ethernet interface requires more attention. The
surprising thing about the sample <b class="emphasis.bold">netstat</B
> display is that we haven't
yet entered an <b class="emphasis.bold">ifconfig</B
> command for le0, and it already has an
IP address! Many systems use an installation script<a class="indexterm" name="AUTOID-5964"></A
>
to install UNIX.
This script requests the host address, which it then uses to configure
the interface.
[2]
Later we'll look at whether the user successfully set up this
interface with the installation script.</P
><blockquote class="footnote"><p class="para">[2] The <b class="emphasis.bold">netconfig</B
> command, discussed in <a class="xref" href="ch04_01.htm" title="Getting Started ">Chapter 4</A
>, is an example
of a network configuration script that runs when the operating system
is installed.</P
></BLOCKQUOTE
><p class="para">The <b class="emphasis.bold">ifconfig</B
> command can also be used to find out what network
interfaces are available on a system. The <b class="emphasis.bold">netstat</B
> command shows only
interfaces that are configured. On some systems the <b class="emphasis.bold">ifconfig</B
>
command can be used to show all interfaces, even those that have not
yet been configured. On Solaris 2.5.1 systems, <b class="emphasis.bold">ifconfig -a</B
> does this;
on a Linux 2.0.0 system, entering <b class="emphasis.bold">ifconfig</B
>
without any arguments will list all of the network interfaces.</P
><p class="para">While most hosts have only one real network interface, some hosts and
all gateways have multiple interfaces.<a class="indexterm" name="AUTOID-5979"></A
>
Sometimes all interfaces are the
same type; i.e., a gateway between two Ethernets may have two Ethernet
interfaces. <b class="emphasis.bold">netstat</B
> on a gateway like this might display lo0, le0,
and le1. Deciphering a <b class="emphasis.bold">netstat</B
> display with multiple interfaces
of the same type is still very simple. But deciphering a system with
many different types of network interfaces is more difficult. You must
rely on documentation that comes with optional software to choose
the correct interface. When installing new network software, always read
documentation carefully.</P
><p class="para">This long discussion about determining the network interface may seem to
overshadow the important <b class="emphasis.bold">ifconfig</B
> functions of assigning the IP
address, subnet mask, and broadcast address. So let's return to these
important topics.<a class="indexterm" name="AUTOID-5986"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="TCP2-CH-6-SECT-1.2">6.1.2 Checking the Interface with ifconfig </A
></H3
><p class="para"><a class="indexterm" name="TCP2-CH-6-IX-INTERFACES-CHECKING-WITH-IFCONFIG"></A
>As noted above, the UNIX installation script configures the network
interface. However, this configuration may not be exactly what you want.
Check the configuration of an interface with <b class="emphasis.bold">ifconfig</B
>. To display
the current values assigned to the interface, enter <b class="emphasis.bold">ifconfig</B
>
with an interface name and no other arguments. For example, to check
interface le0:</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>ifconfig le0</B
></CODE
>
le0: flags=863&lt;UP,BROADCAST,NOTRAILERS,RUNNING,MULTICAST&gt; mtu 1500
        inet 172.16.12.2 netmask ffff0000 broadcast 172.16.255.255</PRE
></BLOCKQUOTE
></P
><p class="para">When used to check the status of an interface on a Solaris 2.5.1 system,
the <b class="emphasis.bold">ifconfig</B
> command displays two lines of output.
The first line shows the interface name, the flags<a class="indexterm" name="AUTOID-6000"></A
>
that define the
interface's characteristics, and the Maximum Transmission Unit (MTU)<a class="indexterm" name="AUTOID-6003"></A
>
of this interface. In our example the interface name is le0, and the
MTU is 1500 bytes. The flags are displayed as both a numeric value and
a set of keywords. The interface's flags have the numeric value 863,
which corresponds to:</P
><dl class="variablelist"><dt class="term">UP&nbsp;&nbsp;</DT
><dd class="listitem"><p class="para">The interface is enabled for use.</P
></DD
><dt class="term">BROADCAST</DT
><dd class="listitem"><p class="para">The interface supports broadcasts, which means it is
connected to a network that supports broadcasts, such as an Ethernet.</P
></DD
><dt class="term">NOTRAILERS</DT
><dd class="listitem"><p class="para">This interface does not support trailer encapsulation.<a class="indexterm" name="AUTOID-6018"></A
>
This is an Ethernet-specific characteristic which we discuss in more detail
later.</P
></DD
><dt class="term">RUNNING</DT
><dd class="listitem"><p class="para">This interface is operational.</P
></DD
><dt class="term">MULTICAST</DT
><dd class="listitem"><p class="para">This interface supports multicasting.<a class="indexterm" name="AUTOID-6028"></A
></P
></DD
></DL
><p class="para">The second line of <b class="emphasis.bold">ifconfig</B
> output displays information that
directly relates to TCP/IP. The keyword <code class="literal">inet</CODE
> is followed by the
Internet address assigned to this interface. Next comes the keyword
<code class="literal">netmask</CODE
>, followed by the address mask<a class="indexterm" name="AUTOID-6034"></A
>
written in hexadecimal. Finally,
the keyword <code class="literal">broadcast</CODE
> and the broadcast address are displayed.<a class="indexterm" name="AUTOID-6038"></A
></P
><p class="para"><a class="indexterm" name="AUTOID-6042"></A
>On a Linux system the <b class="emphasis.bold">ifconfig</B
> command displays up to six lines
of information for each interface instead of the two lines displayed by
the Solaris system.<a class="indexterm" name="AUTOID-6046"></A
>
The additional information includes the Ethernet
address, the PC IRQ and I/O Base Address, and packet statistics.
The basic information is the same on both systems.</P
><p class="para"><blockquote class="screen"><pre class="screen">&gt; <code class="userinput"><b>ifconfig eth0</B
></CODE
>
eth0  Link encap:10Mbps Ethernet  HWaddr 00:00:C0:9A:D0:DB
      inet addr:172.16.55.106  Bcast:172.16.55.255  Mask:255.255.255.0
      UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
      RX packets:844886 errors:0 dropped:0 overruns:0
      TX packets:7668 errors:0 dropped:0 overruns:0
      Interrupt:11 Base address:0x7c80</PRE
></BLOCKQUOTE
></P
><p class="para">Refer to the Solaris <b class="emphasis.bold">ifconfig le0</B
> example at the beginning of
this section. Check the information displayed in that example against the
configuration plan developed in <a class="xref" href="ch04_01.htm" title="Getting Started ">Chapter 4</A
>. You'll see that the interface
needs to be reconfigured. The configuration done by the user during
the UNIX installation did not provide all of the values we planned. The
address (172.16.12.2) is correct, but the address mask (ffff0000 or
255.255.0.0) and the broadcast address (172.16.0.0) are incorrect.
Let's look at how these values are assigned, and how to correct them.<a class="indexterm" name="AUTOID-6055"></A
>&#13;</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="TCP2-CH-6-SECT-1.3">6.1.3 Assigning a Subnet Mask </A
></H3
><p class="para"><a class="indexterm" name="TCP2-CH-6-IX-SUBNETS-MASK-SM-ASSIGNING"></A
>In order to function properly, every interface on a specific physical
network segment must have the same subnet mask. For le0 on <em class="emphasis">almond</EM
>
and <em class="emphasis">peanut</EM
>, the netmask value is 255.255.255.0, because both systems
are attached to the same subnet. However, although <em class="emphasis">almond</EM
>'s local network
interface and its external network interface are parts of the same computer, they use different netmasks because they are on different networks.</P
><p class="para">To assign a subnet mask, write the subnet mask value after the keyword
&quot;netmask&quot; on the <b class="emphasis.bold">ifconfig</B
> command line. The subnet mask is
usually written in the &quot;dotted decimal&quot; form used for IP
addresses.
[3]
For example, the following command assigns the correct subnet mask to
the le0 interface on <em class="emphasis">peanut</EM
>:&#13;</P
><blockquote class="footnote"><p class="para">[3] Hexadecimal notation can also be used for the subnet mask. To enter a
netmask in hexadecimal form, write the value as a single hex number starting
with a leading 0x. For example, the hexadecimal form of 255.255.255.0
is 0xffffff00. Choose the form that is easier for you to understand.</P
></BLOCKQUOTE
><p class="para"><blockquote class="screen"><pre class="screen"># <code class="userinput"><b>ifconfig le0 172.16.12.2 netmask 255.255.255.0  \
broadcast 172.16.12.255</B
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">Putting the netmask value directly on the <b class="emphasis.bold">ifconfig</B
> command line
is the most common, the simplest, and the best way to manually
assign the subnet
mask to an interface. But it is also possible to tell <b class="emphasis.bold">ifconfig</B
>
to take the netmask value from a file instead of from the command line.
Conceptually, this is similar to using a hostname in place of an IP
address. The administrator can place the subnet mask value in either
the <em class="emphasis">hosts</EM
> file or the <em class="emphasis">networks</EM
> file and then reference it
by name. For example, the <em class="emphasis">nuts-net</EM
> administrator might add the
following entry to <em class="emphasis">/etc/networks</EM
>:<a class="indexterm" name="AUTOID-6081"></A
><a class="indexterm" name="AUTOID-6084"></A
></P
><p class="para"><blockquote class="screen"><pre class="screen">nuts-mask       255.255.255.0</PRE
></BLOCKQUOTE
></P
><p class="para">&#13;Once this entry has been added, you can use the name <em class="emphasis">nuts-mask</EM
> on
the <b class="emphasis.bold">ifconfig</B
> command line, instead of the actual mask. For example:</P
><p class="para"><blockquote class="screen"><pre class="screen"># <code class="userinput"><b>ifconfig le0 172.16.5.2 netmask nuts-mask</B
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">The name <em class="emphasis">nuts-mask</EM
> resolves to 255.255.255.0, which is the
correct netmask value for our sample systems.</P
><p class="para">On Solaris systems, you can also use <em class="emphasis">/etc/inet/netmasks</EM
> to set the
subnet mask.
[4]
The <em class="emphasis">/etc/inet/netmasks</EM
> file is a table of one-line entries,
each containing a network address separated from a subnet mask by
whitespace.
[5]
If a Solaris system on <em class="emphasis">nuts-net</EM
> (172.16.0.0) has a
<em class="emphasis">/etc/inet/netmasks</EM
> file that contains the entry:</P
><blockquote class="footnote"><p class="para">[4] <em class="emphasis">/etc/netmasks</EM
> is symbolically linked to <em class="emphasis">/etc/inet/netmasks</EM
>.</P
><p class="para">[5] Use the official network address, not a subnet address.</P
></BLOCKQUOTE
><p class="para"><blockquote class="screen"><pre class="screen">172.16.0.0      255.255.255.0</PRE
></BLOCKQUOTE
></P
><p class="para">then the following <b class="emphasis.bold">ifconfig</B
> command can be used to set the subnet
mask:</P
><p class="para"><blockquote class="screen"><pre class="screen"># <code class="userinput"><b>ifconfig le0 172.16.5.1 netmask +</B
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">The plus sign after the keyword <code class="literal">netmask</CODE
> causes <b class="emphasis.bold">ifconfig</B
> to take
the mask value from <em class="emphasis">/etc/inet/netmasks</EM
>. <b class="emphasis.bold">ifconfig</B
> searches
the file for a network address that matches the network address of the
interface being configured. It then extracts the subnet mask associated
with that address and applies it to the interface.</P
><p class="para">Some systems take advantage of the fact that the IP address, subnet mask,
and broadcast address can be set indirectly<a class="indexterm" name="AUTOID-6120"></A
>
to reduce the extent that
startup files need to be customized. Reducing customization lessens the
chance that a system might hang while booting because a startup file was
improperly edited, and it makes it possible to pre-configure these files
for all of the systems on the network. The <em class="emphasis">hosts</EM
>, <em class="emphasis">networks</EM
>,
and <em class="emphasis">netmasks</EM
> files, which provide input to the <b class="emphasis.bold">ifconfig</B
> command,
all produce NIS maps<a class="indexterm" name="AUTOID-6127"></A
>
that can be centrally managed at sites using NIS.</P
><p class="para">A disadvantage of setting the <b class="emphasis.bold">ifconfig</B
> values indirectly is that
it can make troubleshooting more cumbersome. If all values are set in
the boot file, you only need to check the values there. When network
configuration information is supplied indirectly, you may need to check
the boot file, the <em class="emphasis">hosts</EM
> file, the <em class="emphasis">networks</EM
> file, and the
<em class="emphasis">netmasks</EM
> file to find the problem. An error in any of these files
could cause an incorrect configuration. To make debugging easier, many
system administrators prefer to set the configuration values directly
on the <b class="emphasis.bold">ifconfig</B
> command line.</P
><p class="para">Another disadvantage of setting the subnet mask value indirectly is
that some of the files used for this are not primarily intended for
this use. The <em class="emphasis">hosts</EM
> file<a class="indexterm" name="AUTOID-6138"></A
>
is a particularly bad choice for storing
subnet values. The <em class="emphasis">hosts</EM
> file is heavily used by other programs.
Placing a subnet value in the <em class="emphasis">hosts</EM
> file might confuse one of
these programs. Setting the subnet value directly on the command line
or from a file, such as the <em class="emphasis">netmasks</EM
> file, that is dedicated to
this purpose is probably the best approach.<a class="indexterm" name="AUTOID-6144"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="TCP2-CH-6-SECT-1.4">6.1.4 Setting the Broadcast Address </A
></H3
><p class="para"><a class="indexterm" name="AUTOID-6148"></A
>RFC 919, <em class="emphasis">Broadcasting Internet Datagrams</EM
>, clearly defines the
format of a broadcast address as an address with all host bits set to 1.
Since the broadcast address is so precisely defined, <b class="emphasis.bold">ifconfig</B
> should
be able to compute it automatically, and you should always be able to use
the default. Unfortunately, this is not the case. TCP/IP was included in
BSD 4.2 before RFC 919 was an adopted standard. BSD 4.2 used a broadcast
address with all host bits set to 0, and didn't allow the broadcast
address to be modified during configuration. Because of this history,
some releases of UNIX default to a &quot;0-style&quot; broadcast address for
compatibility with older systems, while other releases default to the
standard &quot;1-style&quot; broadcast address.</P
><p class="para">Avoid this confusion by defining a broadcast address for the entire
network and ensuring that every device on the network explicitly sets it
during configuration. Set the broadcast address in the <b class="emphasis.bold">ifconfig</B
>
command using the keyword <code class="literal">broadcast</CODE
> followed by the correct
broadcast address. For example, the <b class="emphasis.bold">ifconfig</B
> command to set the
broadcast address for <em class="emphasis">almond</EM
>'s le0 interface is:</P
><p class="para"><blockquote class="screen"><pre class="screen"># <code class="userinput"><b>ifconfig le0 172.16.12.1 netmask 255.255.255.0  \
broadcast 172.16.12.255</B
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">Note that the broadcast address is relative to the local subnet.
<em class="emphasis">almond</EM
> views this interface as connected to network 172.16.12.0;
therefore, its broadcast address is 172.16.12.255. Depending on the
implementation, a UNIX system could interpret the address 172.16.255.255
as host address 255 on subnet 255 of network 172.16.0.0, or as the
broadcast address for <em class="emphasis">nuts-net</EM
> as a whole. In neither case would
it consider 172.16.255.255 the broadcast address for subnet 172.16.12.0.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="TCP2-CH-6-SECT-1.5">6.1.5 The Other Command Options </A
></H3
><p class="para">We've used <b class="emphasis.bold">ifconfig</B
> to set the interface address, the subnet mask,
and the broadcast address. These are certainly the most important
functions of <b class="emphasis.bold">ifconfig</B
>, but it has other functions as well.
It can enable or disable trailer encapsulation, the address resolution
protocol, and the interface itself. <b class="emphasis.bold">ifconfig</B
> also can set the
routing metric used by the Routing Information Protocol and the Maximum
Transmission Unit (MTU) used by the interface. We'll look at each of
these functions.</P
><div class="sect3"><h4 class="sect3"><a class="title" name="TCP2-CH-6-SECT-1.5.1">6.1.5.1 Enabling and disabling the interface </A
></H4
><p class="para">The <b class="emphasis.bold">ifconfig</B
> command has two arguments, <b class="emphasis.bold">up</B
> and <b class="emphasis.bold">down</B
>,
for enabling and disabling the network interface.<a class="indexterm" name="AUTOID-6177"></A
>
The <b class="emphasis.bold">up</B
> argument
enables the network interface and marks it ready for use.
The <b class="emphasis.bold">down</B
> argument disables the interface so that it cannot be
used for network traffic.</P
><p class="para">Use the <b class="emphasis.bold">down</B
> argument when interactively reconfiguring an interface.
Some configuration parameters&nbsp;- for example, the IP address&nbsp;- cannot be
changed unless the interface is down. First, the interface is brought
down. Then, the reconfiguration is done, and the interface is brought back
up. For example, the following steps change the address for an interface:</P
><p class="para"><blockquote class="screen"><pre class="screen"># <code class="userinput"><b>ifconfig le0 down</B
></CODE
>
# <code class="userinput"><b>ifconfig le0 172.16.1.2 up</B
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">After these commands execute, the interface operates with the new
configuration values. The <b class="emphasis.bold">up</B
> argument in the second <b class="emphasis.bold">ifconfig</B
>
command is not actually required because it is the default. However,
an explicit <b class="emphasis.bold">up</B
> is commonly used after the interface has been
disabled, or when an <b class="emphasis.bold">ifconfig</B
> command is used in a script file to<a class="indexterm" name="AUTOID-6194"></A
>
avoid problems if the default is changed in a future release.</P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="TCP2-CH-6-SECT-1.5.2">6.1.5.2 ARP and trailers </A
></H4
><p class="para">Two options on the <b class="emphasis.bold">ifconfig</B
> command line, <b class="emphasis.bold">arp</B
> and
<b class="emphasis.bold">trailers</B
>, are used only for Ethernet interfaces.<a class="indexterm" name="AUTOID-6202"></A
>
The <b class="emphasis.bold">trailers</B
> option enables or disables negotiations
for trailer encapsulation of IP
packets. In <a class="xref" href="ch01_01.htm" title="Overview of TCP/IP">Chapter 1</A
>, we discussed how IP packets are sent over different
physical networks by being encapsulated in the frames that those networks
transmit. Trailer encapsulation<a class="indexterm" name="AUTOID-6207"></A
>
is an optional technique that reduces the
number of memory-to-memory copies<a class="indexterm" name="AUTOID-6209"></A
>
the receiving system needs to perform.</P
><p class="para">To enable trailer encapsulation, put the keyword <code class="literal">trailers</CODE
> on the
<b class="emphasis.bold">ifconfig</B
> command line. When trailer encapsulation is enabled,
the system requests (via the ARP protocol) that other systems also use
trailer encapsulation when sending it data.</P
><p class="para">The option <b class="emphasis.bold">-trailers</B
> disables trailer encapsulation. Trailer
encapsulation is disabled for two basic reasons. First, the I/O
architecture of some systems does not derive any benefit from trailer
encapsulation. If a system doesn't do memory-to-memory copies when
receiving data from the network, it doesn't benefit from trailer
encapsulation. Second, there are some systems that have difficulties
with the negotiations for trailer encapsulation. For these reasons,
many systems ignore the <b class="emphasis.bold">trailers</B
> argument and never use trailer
encapsulation, and others allow trailer encapsulation but default
to <b class="emphasis.bold">-trailers</B
>. Both of our sample systems, Solaris and Linux,
ignore the <b class="emphasis.bold">trailers</B
> argument. However, some systems enable trailer
encapsulation by default. Check your system documentation for the default
on your system.</P
><p class="para"><a class="xref" href="ch02_01.htm" title="Delivering the Data">Chapter 2</A
> discusses the Address Resolution Protocol (ARP),<a class="indexterm" name="AUTOID-6221"></A
>
an important protocol that maps IP addresses to physical Ethernet addresses.
Enable ARP with the <b class="emphasis.bold">ifconfig</B
> keyword <code class="literal">arp</CODE
> and disable it with
the keyword <code class="literal">-arp</CODE
>. It is possible (though very unlikely) that a host
attached to your network cannot handle ARP. This would only happen on a
network using specialized equipment or developmental hardware. In these
very rare circumstances, it may be necessary to disable ARP in order to
interoperate with the non-standard systems. By default, <b class="emphasis.bold">ifconfig</B
> enables ARP. Leave ARP enabled on all your systems.&#13;</P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="TCP2-CH-6-SECT-1.5.3">6.1.5.3 Metric </A
></H4
><p class="para">On some systems, the <b class="emphasis.bold">ifconfig</B
> command creates an entry in the routing
table for every interface that is assigned an IP address. Each interface
is the route to a network. Even if a host isn't a gateway, its interface
is still its &quot;route&quot; to the local network. <b class="emphasis.bold">ifconfig</B
> determines the
route's destination network by applying the interface's subnet mask to the
interface's IP address. For example, the le0 interface on <em class="emphasis">almond</EM
> has
an address of 172.16.12.1 and a mask of 255.255.255.0. Applying this mask
to the address provides the destination network, which is 172.16.12.0. The
<b class="emphasis.bold">netstat -in</B
> display shows the destination address:&#13;</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>netstat -in</B
></CODE
>
Name Mtu  Net/Dest    Address     Ipkts  Ierrs Opkts Oerrs Collis Queue
le0  1500 172.16.12.0 172.16.12.1 1125826 16   569786  0    8914   0
lo0  1536 127.0.0.0   127.0.0.1   94280   0    94280   0    0      0</PRE
></BLOCKQUOTE
></P
><p class="para">The Routing Information Protocol (RIP)<a class="indexterm" name="AUTOID-6239"></A
>
is a routing protocol commonly used
by UNIX. RIP does two things: it distributes routing information to other
hosts, and it uses incoming routing information to build routing tables
dynamically. The routes created by <b class="emphasis.bold">ifconfig</B
> are one source of the
routing information distributed by RIP, and the <b class="emphasis.bold">ifconfig metric</B
>
argument can be used to control how RIP uses this routing information.</P
><p class="para">RIP makes routing decisions based on the cost of a route. The route's cost
is determined by a routing metric<a class="indexterm" name="AUTOID-6244"></A
>
associated with the route. A routing
metric is just a number. The lower the number, the lower the cost of
the route. The higher the number, the higher the cost. When building
a routing table, RIP favors low-cost routes over high-cost routes.
Directly connected networks are given a very low cost. Therefore,
the default metric is 0 for a route through an interface to a directly
attached network. However, you can use the <b class="emphasis.bold">metric</B
> argument to<a class="indexterm" name="AUTOID-6247"></A
>
supply a different routing metric for an interface.</P
><p class="para">To increase the cost of an interface to three, so that RIP prefers
routes with values of 0, 1, or 2, use <b class="emphasis.bold">metric 3</B
> on the
<b class="emphasis.bold">ifconfig</B
> command line:&#13;</P
><p class="para"><blockquote class="screen"><pre class="screen"># <code class="userinput"><b>ifconfig std0 26.104.0.19 metric 3</B
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">&#13;Use the metric option only if there is another route to the same
destination and you want to use it as the primary route. We did not use
this command on <em class="emphasis">almond</EM
>, because it has only one interface connected
to the outside world. But if it had a second connection, say, through a
higher-speed link, then the command shown above could be used to direct
traffic through the higher-performance interface.</P
><p class="para">A related <b class="emphasis.bold">ifconfig</B
> parameter is available on Solaris systems.<a class="indexterm" name="AUTOID-6259"></A
>
RIP builds the routing table by choosing the most economical routes,
and it distributes the routing table information to other hosts.
The <b class="emphasis.bold">metric</B
> parameter controls which routes RIP selects as the lowest
cost. The <b class="emphasis.bold">private</B
> argument,<a class="indexterm" name="AUTOID-6264"></A
>
available on Solaris systems, controls
the routes that RIP distributes. If <b class="emphasis.bold">private</B
> is specified on the
<b class="emphasis.bold">ifconfig</B
> command line, the route created by that <b class="emphasis.bold">ifconfig</B
>
command is not distributed by RIP. The default is <b class="emphasis.bold">-private</B
>,
which permits the route to be distributed. The <b class="emphasis.bold">private</B
> parameter
is not universally supported.</P
><p class="para">Additionally, not all systems make use of the <b class="emphasis.bold">metric</B
> argument.<a class="indexterm" name="AUTOID-6273"></A
>
A Linux system doesn't create a routing table entry when it processes
the <b class="emphasis.bold">ifconfig</B
> command. When configuring a Linux system, you add
an explicit <b class="emphasis.bold">route</B
> command<a class="indexterm" name="AUTOID-6278"></A
>
for each interface. (The <b class="emphasis.bold">route</B
>
command is covered in the next chapter.) Linux systems ignore the
<b class="emphasis.bold">metric</B
> argument.</P
><p class="para">Set the routing metric in a routing configuration file instead of on the
<b class="emphasis.bold">ifconfig</B
> command line. This is the preferred method of providing
routing information for newer routing software. We discuss the format
of routing configuration files in the next chapter.</P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="TCP2-CH-6-SECT-1.5.4">6.1.5.4 Maximum transmission unit </A
></H4
><p class="para"><a class="indexterm" name="AUTOID-6288"></A
>A network has a maximum transmission unit, which is the largest packet
that can be transported over that physical network. On Ethernet,
the maximum size is 1500 bytes, which is defined as part of the
Ethernet standard. There is rarely any need to change the MTU on the
<b class="emphasis.bold">ifconfig</B
> command line. By default, <b class="emphasis.bold">ifconfig</B
> chooses the
optimum MTU, which is usually the largest legal MTU for a given type
of network hardware. A large MTU is the default because it normally
provides the best performance. However, a smaller
MTU is helpful to achieve the following goals:</P
><ul class="itemizedlist"><li class="listitem"><p class="para">To avoid fragmentation.<a class="indexterm" name="AUTOID-6295"></A
>
If the traffic travels from a network with
a large MTU&nbsp;- such as an FDDI network<a class="indexterm" name="AUTOID-6298"></A
>
with an MTU of 4500 bytes&nbsp;- through a
network with a smaller MTU like an Ethernet, the smaller MTU size may
be best in order to avoid packet fragmentation. It is possible that
specifying an MTU of 1500 on the interface connected to the FDDI may
actually improve performance by avoiding fragmentation in the routers.
This would only be done if fragmentation actually appeared to be the
cause of a performance problem.</P
></LI
><li class="listitem"><p class="para">To reduce buffer overruns<a class="indexterm" name="AUTOID-6302"></A
>
or similar problems. On serial line connections
it is possible to have equipment of such low performance that it cannot
keep up with standard 1006-byte packets. In this case, it is possible to
avoid buffer overruns or SILO overflows<a class="indexterm" name="AUTOID-6304"></A
>
by using a smaller MTU. However,
such solutions are temporary fixes. The real fix is to purchase the
correct hardware for the application.</P
></LI
></UL
><p class="para">To change the MTU, use the <b class="emphasis.bold">mtu</B
> command-line argument:</P
><p class="para"><blockquote class="screen"><pre class="screen"># ifconfig fddi0 172.16.16.1 netmask 255.255.255.0 mtu 1500</PRE
></BLOCKQUOTE
></P
><p class="para">This forces the FDDI interface on 172.16.16.1 to use an MTU of
1500 bytes.</P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="TCP2-CH-6-SECT-1.5.5">6.1.5.5 Point-to-point </A
></H4
><p class="para"><a class="indexterm" name="TCP2-CH-6-IX-POINT-TO-POINT-INTERFACES"></A
>There are probably several more <b class="emphasis.bold">ifconfig</B
> command-line arguments
available on your system. Linux has parameters to define the PC interrupt
of the Ethernet hardware<a class="indexterm" name="AUTOID-6317"></A
>
(<b class="emphasis.bold">irq</B
>) and the Ethernet hardware address
(<b class="emphasis.bold">hw</B
>), and to enable multicasting<a class="indexterm" name="AUTOID-6321"></A
>
(<b class="emphasis.bold">multicast</B
>) and promiscuous<a class="indexterm" name="AUTOID-6324"></A
><a class="indexterm" name="AUTOID-6326"></A
>
mode (<b class="emphasis.bold">allmulti</B
>). Solaris has arguments to set up or tear down the
streams for an interface (<b class="emphasis.bold">plumb</B
>/<b class="emphasis.bold">unplumb</B
>),<a class="indexterm" name="AUTOID-6331"></A
>
and to use Reverse<a class="indexterm" name="AUTOID-6333"></A
>
ARP (RARP) to obtain the IP address for an interface (<b class="emphasis.bold">auto-revarp</B
>).<a class="indexterm" name="AUTOID-6337"></A
>
But most of these parameters are not standardized between versions
of UNIX.</P
><p class="para">One last feature that is available on most versions of UNIX is the ability
to define point-to-point connections with the <b class="emphasis.bold">ifconfig</B
> command.
Point-to-point connections are network links that directly connect
together only two computers. Of course the computers at either end of
the link could be gateways to the world, but only two computers
are directly connected to the link. Examples of a point-to-point
connection are two computers linked together by a leased telephone line,
or two computers in an office linked together by a null modem cable.</P
><p class="para">To define a point-to-point link on a Solaris system:</P
><p class="para"><blockquote class="screen"><pre class="screen"># ifconfig zs0 172.16.62.1 172.16.62.2</PRE
></BLOCKQUOTE
></P
><p class="para">This <b class="emphasis.bold">ifconfig</B
> command has two addresses immediately following the
interface name. The first is the address of the local host. The second
address, called the destination address, is the address of the remote
host at the other end of the point-to-point link. The second address
shows up as the Net/Dest value<a class="indexterm" name="AUTOID-6346"></A
><a class="indexterm" name="AUTOID-6348"></A
>
in an <b class="emphasis.bold">netstat -ni</B
> display.</P
><p class="para">On a Linux system, this same configuration looks slightly different:</P
><p class="para"><blockquote class="screen"><pre class="screen">&gt; ifconfig sl0 172.16.62.1 point-to-point 172.16.62.2</PRE
></BLOCKQUOTE
></P
><p class="para">The syntax is different but the effect is the same. This enables the
interface to run in point-to-point mode and identifies the hosts at both
ends of the link.</P
><p class="para">Does this set up the Point-to-Point Protocol (PPP)<a class="indexterm" name="AUTOID-6356"></A
>
used for TCP/IP serial
line communication? No, it does not. These <b class="emphasis.bold">ifconfig</B
> parameters
sometimes confuse people about how to set up PPP. There is much more to
configuring PPP and SLIP, which we cover in the remainder of this chapter.</P
><p class="para">Before moving on to PPP and SLIP we should note that the configuration
entered on an <b class="emphasis.bold">ifconfig</B
> command line will not survive a system boot.
For a permanent configuration, put <b class="emphasis.bold">ifconfig</B
> in a startup file.<a class="indexterm" name="AUTOID-6363"></A
></P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="TCP2-CH-6-SECT-1.5.6">6.1.5.6 Putting ifconfig in the startup files </A
></H4
><p class="para"><a class="indexterm" name="AUTOID-6367"></A
>The <b class="emphasis.bold">ifconfig</B
> command is normally executed at boot time by a
startup file. On BSD UNIX systems, the <b class="emphasis.bold">ifconfig</B
> commands are
usually located in <em class="emphasis">/etc/rc.boot</EM
> or <em class="emphasis">/etc/rc.local</EM
>.
System V UNIX presents a much more complex set of startup
files, but the <b class="emphasis.bold">ifconfig</B
> statements are usually located in 
a file in the <em class="emphasis">/etc/init.d</EM
> directory.
[6]
On Linux systems, the startup files containing the <b class="emphasis.bold">ifconfig</B
> commands
are usually in the <em class="emphasis">/etc/rc.d</EM
> or the <em class="emphasis">/etc/rc.d/init.d</EM
>
directory. Use <b class="emphasis.bold">grep</B
><a class="indexterm" name="AUTOID-6383"></A
>
to locate the specific file that contains
the <b class="emphasis.bold">ifconfig</B
> command:</P
><blockquote class="footnote"><p class="para">[6] A good description of the maze of System V initialization files is
provided in <em class="emphasis">Essential System Administration, Second Edition</EM
>,
by &AElig;leen Frisch (O'Reilly &amp; Associates).</P
></BLOCKQUOTE
><p class="para"><blockquote class="screen"><pre class="screen">&gt; cd /etc/rc.d
&gt; grep ifconfig *
rc.inet1:/sbin/ifconfig lo 127.0.0.1
rc.inet1:/sbin/ifconfig eth0 172.16.12.1 broadcast 172.16.12.255
   netmask 255.255.255.0</PRE
></BLOCKQUOTE
></P
><p class="para">Because network access is important for some of the processes run by
the startup files, the <b class="emphasis.bold">ifconfig</B
> statements execute near the
beginning of the startup procedure. The simplest way to configure a
network interface to suit your requirements is to edit the startup
files and insert the correct <b class="emphasis.bold">ifconfig</B
> statements.</P
><p class="para">On our Linux system, we edit <em class="emphasis">/etc/rc.d/rc.inet1</EM
> and check the
two lines necessary to configure the loopback interface<a class="indexterm" name="AUTOID-6393"></A
>
and the Ethernet interface.<a class="indexterm" name="AUTOID-6396"></A
>
We use the <em class="emphasis">rc.inet1</EM
> file because it runs early in network
startup procedure and it is the file in which the installation script
placed the <b class="emphasis.bold">ifconfig</B
> commands. The two lines placed in the file are:</P
><p class="para"><blockquote class="screen"><pre class="screen">ifconfig lo0 127.0.0.1
ifconfig eth0 172.16.12.1 broadcast 172.16.12.255 netmask 255.255.255.0</PRE
></BLOCKQUOTE
></P
><p class="para">Check the startup files to ensure that the interfaces on the host are
properly configured at every boot.<a class="indexterm" name="AUTOID-6404"></A
></P
></DIV
></DIV
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch05_05.htm" title="5.5 Summary "><img src="../gifs/txtpreva.gif" alt="Previous: 5.5 Summary " border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="TCP/IP Network Administration"><img src="../gifs/txthome.gif" alt="TCP/IP Network Administration" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch06_02.htm#TCP2-CH-6-SECT-2.1" title="6.2 TCP/IP Over a Serial Line "><img src="../gifs/txtnexta.gif" alt="Next: 6.2 TCP/IP Over a Serial Line " border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">5.5 Summary </TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">6.2 TCP/IP Over a Serial Line </TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.htm" title="The Networking CD Bookshelf">Library Home</A
> | <a href="../dnsbind/index.htm" title="DNS &amp; BIND">DNS &amp; BIND</A
> | <a href="index.htm" title="TCP/IP Network Administration">TCP/IP</A
> | <a href="../sendmail/index.htm" title="sendmail">sendmail</A
> | <a href="../smdref/index.htm" title="sendmail Desktop Reference">sendmail Reference</A
> | <a href="../firewall/index.htm" title="Building Internet Firewalls">Firewalls</A
> | <a href="../puis/index.htm" title="Practical UNIX &amp; Internet Security">Practical Security</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
