<html><head>
<title>[Chapter 3] 3.3 Domain Name Service</TITLE>
<meta name="DC.title" content="TCP/IP Network Administration"><meta name="DC.creator" content="Craig Hunt"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-02-04T01:31:34Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-322-7" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch03_01.htm" title="3. Network Services"><link rel="prev" href="ch03_02.htm" title="3.2 The Host Table"><link rel="next" href="ch03_04.htm#TCP2-CH-3-SECT-4.3" title="3.4 Mail Services"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="TCP/IP Network Administration" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="TCP/IP Network Administration"><area shape="RECT" coords="467,0,514,18" href="../search/tsrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch03_02.htm" title="3.2 The Host Table"><img src="../gifs/txtpreva.gif" alt="Previous: 3.2 The Host Table" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 3<br>Network Services</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch03_04.htm#TCP2-CH-3-SECT-4.3" title="3.4 Mail Services"><img src="../gifs/txtnexta.gif" alt="Next: 3.4 Mail Services" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="TCP2-CH-3-SECT-3">3.3 Domain Name Service</A
></H2
><p class="para"><a class="indexterm" name="TCP2-CH-3-IX-DOMAIN-NAME-SERVICE-DNS"></A
>The Domain Name System (DNS) overcomes both major weaknesses of the<a class="indexterm" name="AUTOID-2486"></A
>
host table:</P
><ul class="itemizedlist"><li class="listitem"><p class="para">DNS scales well.<a class="indexterm" name="AUTOID-2492"></A
>
It doesn't rely on a single large table; it is a distributed database
system that doesn't bog down as the database grows.  DNS currently
provides information on approximately 16,000,000 hosts, while less
than 10,000 are listed in the host table.</P
></LI
><li class="listitem"><p class="para">DNS guarantees that new host information will be disseminated to the
rest of the network as it is needed.</P
></LI
></UL
><p class="para">Information is automatically disseminated, and only
to those who are interested. Here's how it works.
If a DNS server receives a request for information about a
host for which it has no information, it passes on the request to an
<em class="emphasis">authoritative server</EM
>.<a class="indexterm" name="AUTOID-2498"></A
>
An authoritative server is any server responsible for maintaining
accurate information about the domain being queried. When the
authoritative server answers, the local server saves (<em class="emphasis">caches</EM
>)<a class="indexterm" name="AUTOID-2501"></A
>
the answer for future use. The next time the local server receives a
request for this information, it answers the request itself. The
ability to control host information from an authoritative source and
to automatically disseminate accurate information makes DNS superior
to the host table, even for networks not connected to the Internet.</P
><p class="para">In addition to superseding the host table, DNS also replaces an
earlier form of name service. Unfortunately, both the old and new
services are commonly called <em class="emphasis">name service</EM
>. Both are listed in the
<em class="emphasis">/etc/services</EM
> file. In that file, the old software is assigned UDP
port 42 and is called <em class="emphasis">nameserver</EM
> or <em class="emphasis">name</EM
>. DNS name service is
assigned port 53 and is called <em class="emphasis">domain</EM
>. Naturally, there is some
confusion between the two name servers. This text discusses DNS only;
when we refer to &quot;name service,&quot; we always mean DNS.</P
><div class="sect2"><h3 class="sect2"><a class="title" name="TCP2-CH-3-SECT-3.1">3.3.1 The Domain Hierarchy</A
></H3
><p class="para"><a class="indexterm" name="TCP2-CH-3-IX-DOMAIN-HIERARCHY"></A
>DNS is a distributed hierarchical system for resolving hostnames into<a class="indexterm" name="AUTOID-2515"></A
>
IP addresses. Under DNS, there is no central database with all of the
Internet host information. The information is distributed among
thousands of name servers organized into a hierarchy similar to the
hierarchy of the UNIX filesystem.  DNS has a <em class="emphasis">root domain</EM
> at the<a class="indexterm" name="AUTOID-2518"></A
>
top of the domain hierarchy that is served by a group of name servers
called the <em class="emphasis">root servers</EM
>.<a class="indexterm" name="AUTOID-2522"></A
></P
><p class="para">Just as directories in the UNIX filesystem are found by
following a path from the root directory, through subordinate
directories, to the target directory, information about a domain is
found by tracing pointers from the root domain, through subordinate
domains, to the target domain.</P
><p class="para">Directly under the root domain are the <em class="emphasis">top-level domains</EM
>. There<a class="indexterm" name="AUTOID-2528"></A
>
are two basic types of top-level domains&nbsp;- geographic and organizational.<a class="indexterm" name="AUTOID-2530"></A
>
Geographic domains have been set aside for each country in the world,
and are identified by a two-letter code. For example, the United
Kingdom is domain UK, Japan is JP, and the United States is US. When
US is used as the top-level domain, the second-level domain is usually
a state's two-letter postal abbreviation (e.g., WY for Wyoming). US
geographic domains are usually used by state governments and K-12
schools and are not widely used for other hosts within the United
States.</P
><p class="para">Within the United States, the most popular top-level domains are<a class="indexterm" name="AUTOID-2533"></A
>
organizational&nbsp;- that is, membership in a domain is based on the type
of organization (commercial, military, etc.) to which the system
belongs.
[3]
The
top-level domains used in the United States are:</P
><blockquote class="footnote"><p class="para">[3] There is no relationship between
the organizational and geographic domains in the U.S.
Each system belongs to either an organizational
domain <em class="emphasis">or</EM
> a geographical domain, not both. </P
></BLOCKQUOTE
><dl class="variablelist"><dt class="term"><em class="emphasis">com</EM
></DT
><dd class="listitem"><p class="para">Commercial organizations<a class="indexterm" name="AUTOID-2545"></A
></P
></DD
><dt class="term"><em class="emphasis">edu</EM
></DT
><dd class="listitem"><p class="para">Educational institutions<a class="indexterm" name="AUTOID-2552"></A
></P
></DD
><dt class="term"><em class="emphasis">gov</EM
></DT
><dd class="listitem"><p class="para">Government agencies<a class="indexterm" name="AUTOID-2559"></A
></P
></DD
><dt class="term"><em class="emphasis">mil</EM
></DT
><dd class="listitem"><p class="para">Military organizations<a class="indexterm" name="AUTOID-2566"></A
></P
></DD
><dt class="term"><em class="emphasis">net</EM
></DT
><dd class="listitem"><p class="para">Network support organizations, such as network operation centers<a class="indexterm" name="AUTOID-2573"></A
></P
></DD
><dt class="term"><em class="emphasis">int</EM
>&nbsp;&nbsp;</DT
><dd class="listitem"><p class="para">International governmental or quasi-governmental organizations<a class="indexterm" name="AUTOID-2580"></A
></P
></DD
><dt class="term"><em class="emphasis">org</EM
></DT
><dd class="listitem"><p class="para">Organizations that don't fit in any of the above, such as non-profit
organizations<a class="indexterm" name="AUTOID-2587"></A
></P
></DD
></DL
><p class="para">Several proposals have been made to increase the number of top-level
domains. The proposed domains are called <em class="emphasis">generic top level
domains</EM
> or gTLDs. The proposals call for the creation of additional
top-level domains and for the creation of new registrars to manage the
domains.  All of the current domains are handled by a single
registrar&nbsp;- the InterNIC. One motivation for these efforts is the
huge size of the <em class="emphasis">.com</EM
> domain. It is so large some people feel it
will be difficult to maintain an efficient <em class="emphasis">.com</EM
> database.  But
the largest motivation for creating new gTLDs is money.  Now that it
charges fifty dollars a year for domain registration, some people see
the InterNIC as a profitable monopoly. They have asked for the
opportunity to create their own domain registration &quot;businesses.&quot; A
quick way to respond to that request is to create more official
top-level domains and more registrars.  The best known gTLDs proposal
is the one from the <em class="emphasis">International Ad Hoc Committee</EM
> (IAHC).  The
IAHC proposes the following new generic top-level domains:</P
><dl class="variablelist"><dt class="term"><em class="emphasis">firm</EM
></DT
><dd class="listitem"><p class="para">businesses or firms</P
></DD
><dt class="term"><em class="emphasis">store</EM
></DT
><dd class="listitem"><p class="para">businesses selling goods</P
></DD
><dt class="term"><em class="emphasis">web</EM
></DT
><dd class="listitem"><p class="para">organizations emphasizing the World Wide Web</P
></DD
><dt class="term"><em class="emphasis">arts</EM
></DT
><dd class="listitem"><p class="para">cultural and entertainment organizations</P
></DD
><dt class="term"><em class="emphasis">rec</EM
></DT
><dd class="listitem"><p class="para">recreational and entertainment organizations</P
></DD
><dt class="term"><em class="emphasis">info</EM
></DT
><dd class="listitem"><p class="para">sites providing information services</P
></DD
><dt class="term"><em class="emphasis">nom</EM
></DT
><dd class="listitem"><p class="para">individuals or organizations that want to define a personal nomenclature</P
></DD
></DL
><p class="para">Will the IAHC proposal be adopted? Will it be modified? Will another
proposal win out? I don't know. There are several other proposals,
and as you would expect when money is involved, plenty of controversy.
At this writing the only official organizational domain names are: <em class="emphasis">com</EM
>,
<em class="emphasis">edu</EM
>, <em class="emphasis">gov</EM
>, <em class="emphasis">mil</EM
>, <em class="emphasis">net</EM
>, <em class="emphasis">int</EM
>, and <em class="emphasis">org</EM
>.</P
><p class="para"><a class="xref" href="#TCP2-CH-3-FIG-0" title="Domain hierarchy">Figure 3.1</A
>
illustrates the domain hierarchy by using the organizational top-level
domains. At the top is the root. Directly below the root domain are
the top-level domains. The root servers only have complete information
about the top-level domains. No servers, not even the root servers,
have complete information about all domains, but the root servers have
pointers to the servers for the second-level domains.
[4]
So while the root servers may not know the answer to a query, they
know who to ask.<a class="indexterm" name="AUTOID-2647"></A
></P
><blockquote class="footnote"><p class="para">[4] <a class="xref" href="#TCP2-CH-3-FIG-1" title="Non-recursive query">Figure 3.2</A
> shows two second-level domains: <em class="emphasis">nih</EM
> under <em class="emphasis">gov</EM
>
and <em class="emphasis">nuts</EM
> under <em class="emphasis">com</EM
>.</P
></BLOCKQUOTE
><h4 class="figure"><a class="title" name="TCP2-CH-3-FIG-0">Figure 3.1: Domain hierarchy</A
></H4
><img class="graphic" src="figs/tcp2_0301.gif" alt="Figure 3.1"></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="TCP2-CH-3-SECT-3.2">3.3.2 Creating Domains and Subdomains</A
></H3
><p class="para"><a class="indexterm" name="TCP2-CH-3-IX-DOMAIN-CREATING"></A
>The Network Information Center<a class="indexterm" name="AUTOID-2657"></A
>
has the authority to allocate domains.  To obtain a domain, you apply
to the NIC for authority to create a domain under one of the top-level
domains.  Once the authority to create a domain is granted, you can
create additional domains, called <em class="emphasis">subdomains</EM
>, under your<a class="indexterm" name="AUTOID-2660"></A
>
domain. Let's look at how this works at our imaginary nut packing
company.</P
><p class="para">Our company is a commercial profit-making (we hope) enterprise. It
clearly falls into the <em class="emphasis">com</EM
> domain. We apply to the NIC for
authority to create a domain named <em class="emphasis">nuts</EM
> within the <em class="emphasis">com</EM
>
domain. The request for the new domain contains the hostnames and
addresses of at least two servers that will provide name service for
the new domain. (<a class="xref" href="ch04_01.htm" title="Getting Started ">Chapter 4, <cite class="chapter">Getting Started </CITE
></A
> discusses the domain name application.) 
When the NIC approves the request, it adds pointers in the <em class="emphasis">com</EM
>
domain to the new domain's name servers. Now when queries are
received by the root servers for the <em class="emphasis">nuts.com</EM
> domain, the queries
are referred to the new name servers.</P
><p class="para">The NIC's approval grants us complete authority over our new domain.
Any registered domain has authority to divide its domain into
subdomains. Our imaginary company can create separate domains for the
sales organization (<em class="emphasis">sales.nuts.com</EM
>) and for the packing plant
(<em class="emphasis">plant.nuts.com</EM
>) without consulting the NIC.
The decision to add subdomains is completely up to the local
domain administrator.</P
><p class="para">Name assignment is, in some ways, similar to address assignment. The
NIC assigns a network address to an organization, and the organization
assigns subnet addresses and host addresses within the range of that
network address. Similarly, the NIC assigns a domain to an
organization, and the organization assigns subdomains and hostnames
within that domain. The NIC is the central authority that delegates
authority and distributes control over names and addresses to
individual organizations. Once that authority has been delegated, the
individual organization is responsible for managing the names and
addresses it has been assigned.</P
><p class="para">The parallel between subnet<a class="indexterm" name="AUTOID-2674"></A
>
and subdomain assignment can cause confusion. Subnets and subdomains
are not linked. A subdomain may contain information about hosts from
several different networks.  Creating a new subnet does not require
creating a new subdomain, and creating a new subdomain does not
require creating a new subnet.</P
><p class="para">A new subdomain becomes accessible when pointers to the servers for the
new domain are placed in the domain above it (see 
<a class="xref" href="#TCP2-CH-3-FIG-0" title="Domain hierarchy">Figure 3.1</A
>
Remote servers cannot locate the <em class="emphasis">nuts.com</EM
> domain until a pointer to its
server is placed in the <em class="emphasis">com</EM
> domain. Likewise, the subdomains
<em class="emphasis">sales</EM
> and <em class="emphasis">plant</EM
> cannot be accessed until pointers to them
are placed in <em class="emphasis">nuts.com</EM
>. The DNS database record that points to
the name servers for a domain is the NS (<em class="emphasis">name server</EM
>) record.
This record contains the name of the domain and the name of the host
that is a server for that domain. <a class="xref" href="ch08_01.htm" title="Configuring DNS Name Service ">Chapter 8, <cite class="chapter">Configuring DNS Name Service </CITE
></A
>,
discusses the actual DNS database. For now, let's just think of these
records as pointers.<a class="indexterm" name="AUTOID-2685"></A
></P
><h4 class="figure"><a class="title" name="TCP2-CH-3-FIG-1">Figure 3.2: Non-recursive query</A
></H4
><img class="graphic" src="figs/tcp2_0302.gif" alt="Figure 3.2"><p class="para"><a class="xref" href="#TCP2-CH-3-FIG-1" title="Non-recursive query">Figure 3.2</A
>
illustrates how the NS records are used as pointers. A local
server has a request to resolve <em class="emphasis">salt.plant.nuts.com</EM
> into an IP
address. The server has no information on <em class="emphasis">nuts.com</EM
> in its cache,
so it queries a root server (<em class="emphasis">terp.umd.edu</EM
> in our example) for
the address. The root server replies with an NS record that points to
<em class="emphasis">almond.nuts.com</EM
> as the source of information on <em class="emphasis">nuts.com</EM
>.
The local server queries <em class="emphasis">almond</EM
>, which points it to
<em class="emphasis">pack.plant.nuts.com</EM
> as the server for <em class="emphasis">plant.nuts.com</EM
>. The
local server then queries <em class="emphasis">pack.plant.nuts.com</EM
>, and finally
receives the desired IP address. The local server caches the A (address)
record and each of the NS records. The next time it has a query for
<em class="emphasis">salt.plant.nuts.com</EM
>, it will answer the query itself. And the next
time the server has a query for other information in the <em class="emphasis">nuts.com</EM
>
domain, it will go directly to <em class="emphasis">almond</EM
> without involving a root
server.</P
><p class="para"><a class="xref" href="#TCP2-CH-3-FIG-1" title="Non-recursive query">Figure 3.2</A
>
is an example of a non-recursive query. In a <em class="emphasis">non-recursive</EM
><a class="indexterm" name="AUTOID-2707"></A
>
query, the remote server tells the local server who to ask next. The
local server must follow the pointers itself. In a <em class="emphasis">recursive</EM
><a class="indexterm" name="AUTOID-2710"></A
>
search, the remote server follows the pointers and returns the final
answer to the local server. The root servers generally perform only
non-recursive searches.<a class="indexterm" name="AUTOID-2712"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="TCP2-CH-3-SECT-3.3">3.3.3 Domain Names</A
></H3
><p class="para"><a class="indexterm" name="TCP2-CH-3-IX-DOMAIN-NAME-DN"></A
>Domain names reflect the domain hierarchy. Domain names are written
from most specific (a hostname) to least specific (a top-level
domain), with each part of the domain name separated by a dot.
[5]
A fully qualified domain name (FQDN) starts with a specific host
and ends with a top-level domain. <em class="emphasis">peanut.nuts.com</EM
> is the FQDN 
of workstation <em class="emphasis">peanut</EM
>, in the <em class="emphasis">nuts</EM
> domain, of the <em class="emphasis">com</EM
>
domain.</P
><blockquote class="footnote"><p class="para">[5] The root domain is identified by a single dot; i.e., the root name
is a null name written simply as &quot;<code class="literal">.</CODE
>&quot;.</P
></BLOCKQUOTE
><p class="para">Domain names are not always written as fully qualified domain names.
Domain names can be written relative to a <em class="emphasis">default domain</EM
> in the<a class="indexterm" name="AUTOID-2728"></A
>
same way that UNIX pathnames are written relative to the current
(default) working directory. DNS adds the default domain to the user
input when constructing the query for the name server. For example, if
the default domain is <em class="emphasis">nuts.com</EM
>, a user can omit the
<em class="emphasis">nuts.com</EM
> extension for any hostnames in that domain.
<em class="emphasis">almond.nuts.com</EM
> could be addressed simply as <em class="emphasis">almond</EM
>. DNS
adds the default domain <em class="emphasis">nuts.com</EM
>.</P
><p class="para">This feature is implemented in different ways on different systems, but
there are two predominant techniques. On some systems the extension is
added to every hostname request unless it <em class="emphasis">ends</EM
> with a dot, i.e.,
is qualified out to the root. For example, assume that there is a host
named <em class="emphasis">salt</EM
> in the subdomain <em class="emphasis">plant</EM
> of the <em class="emphasis">nuts.com</EM
>
domain. <em class="emphasis">salt.plant</EM
> does not end with a dot, so <em class="emphasis">nuts.com</EM
> is
added to it giving the domain name <em class="emphasis">salt.plant.nuts.com</EM
>. On most
systems, the extension is added only if there is no dot
embedded in the requested hostname. On this type of system,
<em class="emphasis">salt.plant</EM
> would not be extended and would therefore not be
resolved by the name server because <em class="emphasis">plant</EM
> is not a valid top-level
domain. But <em class="emphasis">almond</EM
>, which contains no embedded dot, would
be extended with <em class="emphasis">nuts.com</EM
>, giving the valid domain name
<em class="emphasis">almond.nuts.com</EM
>.</P
><p class="para">How the default domain is used<a class="indexterm" name="AUTOID-2750"></A
>
and how queries are constructed varies
depending on software implementation. It can even vary by release
level. For this reason, you should exercise caution when embedding a
hostname in a program. Only a fully qualified domain name or an IP<a class="indexterm" name="AUTOID-2754"></A
>
address is immune from changes in the name server software.<a class="indexterm" name="AUTOID-2758"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="TCP2-CH-3-SECT-3.4">3.3.4 BIND, resolver, and named</A
></H3
><p class="para"><a class="indexterm" name="TCP2-CH-3-IX-BERKELEY-INTERNET-NAME-DOMAIN-BIND"></A
>The implementation of DNS used on most UNIX systems is the <em class="emphasis">Berkeley
Internet Name Domain</EM
> (BIND) software. Descriptions in this text are
based on the BIND name server implementation.</P
><p class="para">DNS name service software is conceptually divided into two
components&nbsp;- a resolver and a name server. The <em class="emphasis">resolver</EM
> is the
software that forms the query; it asks the questions. The <em class="emphasis">name<a class="indexterm" name="AUTOID-2768"></A
>
server</EM
> is the process that responds to the query; it answers the
questions.</P
><p class="para">The resolver does not exist as a distinct process running on the
computer. Rather, the resolver is a library of software routines
(called the &quot;resolver code&quot;)<a class="indexterm" name="AUTOID-2772"></A
>
that is linked into any program that needs
to look up addresses. This library knows how to ask the name server
for host information.</P
><p class="para">Under BIND, all computers use resolver code, but not all computers run
the name server process.
A computer that does not run a
local name server process and relies on other systems for all name
service answers is called a <em class="emphasis">resolver-only</EM
> system. Resolver-only<a class="indexterm" name="AUTOID-2777"></A
>
configurations are common on single user systems. Larger UNIX<a class="indexterm" name="AUTOID-2779"></A
>
systems run a local name server process.</P
><p class="para">The BIND name server runs as a distinct process called <em class="emphasis">named</EM
><a class="indexterm" name="AUTOID-2784"></A
>
(pronounced &quot;name&quot; &quot;d&quot;). Name servers are classified differently
depending on how they are configured. The three main categories of
name servers are:</P
><dl class="variablelist"><dt class="term"><em class="emphasis">Primary</EM
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-2793"></A
>The <em class="emphasis">primary server</EM
> is the server from which all data about a
domain is derived. The primary server loads the domain's information
directly from a disk file created by the domain administrator. Primary
servers are <em class="emphasis">authoritative</EM
>,<a class="indexterm" name="AUTOID-2797"></A
>
meaning they have complete information about their domain and their
responses are always accurate. There should be only one primary server
for a domain.&#13;</P
></DD
><dt class="term"><em class="emphasis">Secondary</EM
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-2804"></A
><em class="emphasis">Secondary servers</EM
> transfer the entire domain database from the
primary server. A particular domain's database file is called a
<em class="emphasis">zone file</EM
>; copying this file to a secondary server is called a<a class="indexterm" name="AUTOID-2808"></A
>
<em class="emphasis">zone file transfer</EM
>. A secondary server assures that it has
current information about a domain by periodically transferring the
domain's zone file. Secondary servers are also authoritative for their
domain.</P
></DD
><dt class="term"><em class="emphasis">Caching-only</EM
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-2817"></A
><em class="emphasis">Caching-only servers</EM
> get the answers to all name service queries
from other name servers. Once a caching server has received an answer
to a query, it caches the information and will use it in the future to
answer queries itself. Most name servers cache answers and use them in
this way. What makes the caching-only server unique is that this is
the only technique it uses to build its domain database. Caching
servers are <em class="emphasis">non-authoritative</EM
>,<a class="indexterm" name="AUTOID-2821"></A
>
meaning that their information is second-hand and incomplete, though
usually accurate.</P
></DD
></DL
><p class="para"><a class="indexterm" name="AUTOID-2824"></A
>The relationship between the different types of servers is an
advantage that DNS has over the host table for most networks, even
very small networks. Under DNS, there should be only one primary name
server for each domain. DNS data is entered into the primary server's
database by the domain administrator.<a class="indexterm" name="AUTOID-2827"></A
>
Therefore, the administrator has central control of the hostname
information. An automatically distributed, centrally controlled
database is an advantage for a network of any size. When you add a new
system to the network, you don't need to modify the <em class="emphasis">/etc/hosts</EM
><a class="indexterm" name="AUTOID-2831"></A
><a class="indexterm" name="AUTOID-2835"></A
>
files on every node in the network; you modify only the DNS database
on the primary server. The information is automatically disseminated
to the other servers by full zone transfers<a class="indexterm" name="AUTOID-2838"></A
>
or by caching single answers.<a class="indexterm" name="AUTOID-2840"></A
><a class="indexterm" name="AUTOID-2843"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="TCP2-CH-3-SECT-3.5">3.3.5 Network Information Service</A
></H3
><p class="para"><a class="indexterm" name="TCP2-CH-3-IX-NETWORK-INFORMATION-SERVICE-NIS"></A
>The <em class="emphasis">Network Information Service</EM
> (NIS)
[6]
is an administrative database system developed by Sun<a class="indexterm" name="AUTOID-2854"></A
>
Microsystems. It provides central control and automatic dissemination
of important administrative files. NIS can be used in conjunction with
DNS, or as an alternative to it.</P
><blockquote class="footnote"><p class="para">[6] NIS was formerly called the &quot;Yellow Pages,&quot; or <em class="emphasis">yp</EM
>. Although the name
has changed, the abbreviation <em class="emphasis">yp</EM
> is still used.</P
></BLOCKQUOTE
><p class="para">NIS and DNS have similarities and differences. Like DNS, the
Network Information Service overcomes the problem of accurately
distributing the host table, but unlike DNS, it provides service only
for local area networks. NIS is not intended as a service for the
Internet as a whole. Another difference is that NIS provides access to
a wider range of information than DNS&nbsp;- much more than
name-to-address conversions. It converts several standard UNIX files
into databases that can be queried over the network. These databases
are called <em class="emphasis">NIS maps</EM
>.<a class="indexterm" name="AUTOID-2858"></A
></P
><p class="para">NIS converts files such as <em class="emphasis">/etc/hosts</EM
> and<a class="indexterm" name="AUTOID-2863"></A
><a class="indexterm" name="AUTOID-2867"></A
><a class="indexterm" name="AUTOID-2870"></A
><a class="indexterm" name="AUTOID-2873"></A
>
<em class="emphasis">/etc/networks</EM
> into maps.  The maps can be stored on a central
server where they can be centrally maintained while still being fully
accessible to the NIS clients.  Because the maps can be both centrally
maintained and automatically disseminated to users, NIS overcomes a
major weakness of the host table. But NIS is not an alternative to DNS
for Internet hosts, because the host table, and therefore NIS,
contains only a fraction of the information available to DNS. For this
reason DNS and NIS are usually used together.</P
><p class="para">This section has introduced the concept of hostnames and provided
an overview of the various techniques used to translate hostnames into
IP addresses. This is by no means the complete story. Assigning host
names and managing name service are important tasks for the network
administrator. These topics are revisited several times in this
book and discussed in extensive detail in <a class="xref" href="ch08_01.htm" title="Configuring DNS Name Service ">Chapter 8</A
>.</P
><p class="para">Name service is not the only service that you will install on your
network. Another service that you are sure to use is electronic mail.<a class="indexterm" name="AUTOID-2881"></A
><a class="indexterm" name="AUTOID-2882"></A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch03_02.htm" title="3.2 The Host Table"><img src="../gifs/txtpreva.gif" alt="Previous: 3.2 The Host Table" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="TCP/IP Network Administration"><img src="../gifs/txthome.gif" alt="TCP/IP Network Administration" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch03_04.htm#TCP2-CH-3-SECT-4.3" title="3.4 Mail Services"><img src="../gifs/txtnexta.gif" alt="Next: 3.4 Mail Services" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">3.2 The Host Table</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">3.4 Mail Services</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.htm" title="The Networking CD Bookshelf">Library Home</A
> | <a href="../dnsbind/index.htm" title="DNS &amp; BIND">DNS &amp; BIND</A
> | <a href="index.htm" title="TCP/IP Network Administration">TCP/IP</A
> | <a href="../sendmail/index.htm" title="sendmail">sendmail</A
> | <a href="../smdref/index.htm" title="sendmail Desktop Reference">sendmail Reference</A
> | <a href="../firewall/index.htm" title="Building Internet Firewalls">Firewalls</A
> | <a href="../puis/index.htm" title="Practical UNIX &amp; Internet Security">Practical Security</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
