<html><head>
<title>[Chapter 10] 10.6 Rewriting the Mail Address </TITLE>
<meta name="DC.title" content="TCP/IP Network Administration"><meta name="DC.creator" content="Craig Hunt"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-02-04T01:39:29Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-322-7" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch10_01.htm" title="10. sendmail "><link rel="prev" href="ch10_05.htm" title="10.5 sendmail Configuration "><link rel="next" href="ch10_07.htm#TCP2-CH-10-SECT-7.1" title="10.7 Modifying a sendmail.cf File "></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="TCP/IP Network Administration" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="TCP/IP Network Administration"><area shape="RECT" coords="467,0,514,18" href="../search/tsrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch10_05.htm" title="10.5 sendmail Configuration "><img src="../gifs/txtpreva.gif" alt="Previous: 10.5 sendmail Configuration " border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 10<br>sendmail </FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch10_07.htm#TCP2-CH-10-SECT-7.1" title="10.7 Modifying a sendmail.cf File "><img src="../gifs/txtnexta.gif" alt="Next: 10.7 Modifying a sendmail.cf File " border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="TCP2-CH-10-SECT-6">10.6 Rewriting the Mail Address </A
></H2
><p class="para"><a class="indexterm" name="TCP2-CH-10-IX-SENDMAIL-CF-FILE-REWRITE-RULES-R-S-AND-K-COMMANDS"></A
>Rewrite rules are the heart of the <em class="emphasis">sendmail.cf</EM
> file. Rulesets
are groups of individual rewrite rules used to parse email
addresses from user mail programs and rewrite them into the form
required by the mail delivery programs. Each rewrite rule is defined
by an <b class="emphasis.bold">R</B
> command. The syntax of the <b class="emphasis.bold">R</B
> command is:</P
><p class="para"><blockquote class="screen"><pre class="screen"><b class="emphasis.bold">R</B
><code class="replaceable"><i>pattern    transformation    comment</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">The fields in an <b class="emphasis.bold">R</B
> command are separated by tab characters.<a class="indexterm" name="AUTOID-14147"></A
>
The comment field is ignored by the system, but good comments are
vital if you want to have any hope of understanding what's going on.
The pattern and transformation fields are the heart of this
command.</P
><div class="sect2"><h3 class="sect2"><a class="title" name="TCP2-CH-10-SECT-6.1">10.6.1 Pattern Matching </A
></H3
><p class="para"><a class="indexterm" name="TCP2-CH-10-IX-PATTERN-MATCHING"></A
><a class="indexterm" name="TCP2-CH-10-IX-SENDMAIL-CF-FILE-REWRITE-RULES-R-S-AND-K-COMMANDS-PATTERN-MATCHING"></A
>Rewrite rules match the input address against the pattern, and if
a match is found, rewrite the address in a new format using the rules
defined in the transformation. A rewrite rule may process the same
address several times because, after being rewritten, the address is
again compared against the pattern. If it still matches, it is
rewritten again. The cycle of pattern matching and rewriting continues
until the address no longer matches the pattern.</P
><p class="para">The pattern is defined using macros, classes, literals, and special<a class="indexterm" name="AUTOID-14159"></A
>
metasymbols. The macros, classes, and literals provide the values
against which the input is compared, and the metasymbols define the
rules used in matching the pattern. 
<a class="xref" href="#TCP2-CH-10-TAB-3" title="Pattern Matching Symbols">Table 10.4</A
>
shows the metasymbols
used for pattern matching.</P
><table class="table"><caption class="table"><a class="title" name="TCP2-CH-10-TAB-3">Table 10.4: Pattern Matching Symbols</A
></CAPTION
><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1">Symbol</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Meaning</TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">$@</B
></TD
><td class="entry" rowspan="1" colspan="1">Match exactly zero tokens.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">$*</B
></TD
><td class="entry" rowspan="1" colspan="1">Match zero or more tokens.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">$+</B
></TD
><td class="entry" rowspan="1" colspan="1">Match one or more tokens.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">$-</B
></TD
><td class="entry" rowspan="1" colspan="1">Match exactly one token.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">$=</B
><em class="emphasis">x</EM
></TD
><td class="entry" rowspan="1" colspan="1">Match any token in class <em class="emphasis">x</EM
>.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">$~</B
><em class="emphasis">x</EM
></TD
><td class="entry" rowspan="1" colspan="1">Match any token not in class <em class="emphasis">x</EM
>.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">$</B
><em class="emphasis">x</EM
></TD
><td class="entry" rowspan="1" colspan="1">Match all tokens in macro <em class="emphasis">x</EM
>.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">$%</B
><em class="emphasis">x</EM
></TD
><td class="entry" rowspan="1" colspan="1">Match any token in the NIS map named in macro <em class="emphasis">x</EM
>.
[17]</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">$!</B
><em class="emphasis">x</EM
></TD
><td class="entry" rowspan="1" colspan="1">Match any token not in the NIS map named in macro <em class="emphasis">x</EM
>.[17]</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">$%y</B
></TD
><td class="entry" rowspan="1" colspan="1">Match any token in the NIS hosts.byname map.[17]</TD
></TR
></TBODY
></TABLE
><blockquote class="footnote"><p class="para">[17] This symbol is specific to Sun operating systems.</P
></BLOCKQUOTE
><p class="para">All of the metasymbols request a match for some number of tokens.<a class="indexterm" name="AUTOID-14225"></A
>
A token
is a string of characters in an email address delimited by an operator.
The operators are the characters defined in the <b class="emphasis.bold">OperatorChars</B
> option.
[18]
Operators are also counted as tokens when an address is parsed.
For example:</P
><blockquote class="footnote"><p class="para">[18] On older systems, they are defined in the <em class="emphasis">o</EM
> macro. See <a class="xref" href="appe_01.htm" title="A sendmail Reference">Appendix E</A
>.</P
></BLOCKQUOTE
><p class="para"><blockquote class="screen"><pre class="screen">becky@peanut.nuts.com</PRE
></BLOCKQUOTE
></P
><p class="para">This email address contains seven tokens: becky, @, peanut, .,
nuts, ., and com. This address would match the pattern:</P
><p class="para"><blockquote class="screen"><pre class="screen">$-@$+</PRE
></BLOCKQUOTE
></P
><p class="para">The address matches the pattern because:</P
><ul class="itemizedlist"><li class="listitem"><p class="para">It has exactly one token before the @ that matches the requirement of
the <b class="emphasis.bold">$-</B
> symbol.</P
></LI
><li class="listitem"><p class="para">It has an @ that matches the pattern's literal @.</P
></LI
><li class="listitem"><p class="para">It has one or more tokens after the @ that match the requirement of
the <b class="emphasis.bold">$+</B
> symbol.</P
></LI
></UL
><p class="para">Many addresses, <a class="email" href="mailto:hostmaster@rs.internic.net" title="hostmaster@rs.internic.net">hostmaster@rs.internic.net</A
>, <a class="email" href="mailto:craigh@ora.com" title="craigh@ora.com">craigh@ora.com</A
>,
etc., match this pattern, but other addresses do not. For example,
<em class="emphasis">rebecca.hunt@nuts.com</EM
> does not match because it has three tokens:
rebecca, ., and hunt, before the @.  Therefore, it fails to meet the
requirement of exactly one token specified by the <b class="emphasis.bold">$-</B
> symbol. Using the

metasymbols, macros, and literals, patterns can be constructed to match
any type of email address.</P
><p class="para">When an address matches a pattern, the strings from the address that
match the metasymbols are assigned to <em class="emphasis">indefinite tokens</EM
>.<a class="indexterm" name="AUTOID-14254"></A
>
The matching strings are called indefinite tokens because they may contain
more than one token value. The indefinite tokens are identified
numerically according to the relative position in the pattern of the
metasymbol that the string matched. In other words, the indefinite
token produced by the match of the first metasymbol is called $1; the
match of the second symbol is called $2; the third is $3; and so on.
When the address <em class="emphasis">becky@peanut.nuts.com</EM
> matched the pattern
<b class="emphasis.bold">$-@$+</B
>, two indefinite tokens were created. The first is
identified as $1 and contains the single token, <em class="emphasis">becky</EM
>, that
matched the <b class="emphasis.bold">$-</B
> symbol.  The second indefinite token is $2 and
contains the five tokens&nbsp;- peanut, ., nuts, ., and com&nbsp;- that
matched the <b class="emphasis.bold">$+</B
> symbol. The indefinite tokens created by the
pattern matching can then be referenced by name ($1, $2, etc.) when
rewriting the address.</P
><p class="para">A few of the symbols in 
<a class="xref" href="#TCP2-CH-10-TAB-3" title="Pattern Matching Symbols">Table 10.4</A
>
are used only in special cases.  The $@ symbol is normally used by
itself to test for an empty, or null, address. The symbols that test
against NIS maps,<a class="indexterm" name="AUTOID-14263"></A
>
can only be used on Sun systems<a class="indexterm" name="AUTOID-14266"></A
>
that run the
sendmail program that Sun provides with the operating
system. We'll see in the next section that systems running sendmail V8
can use NIS maps, but only for transformation&nbsp;- not for pattern
matching.<a class="indexterm" name="AUTOID-14268"></A
><a class="indexterm" name="AUTOID-14269"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="TCP2-CH-10-SECT-6.2">10.6.2 Transforming the Address </A
></H3
><p class="para"><a class="indexterm" name="TCP2-CH-10-IX-SENDMAIL-CF-FILE-REWRITE-RULES-R-S-AND-K-COMMANDS-TRANSFORMING-THE-ADDRESS"></A
>The transformation field, from the righthand side of the rewrite rule,
defines the format used for rewriting the address. It is defined with
the same things used to define the pattern: literals, macros,
and special metasymbols.<a class="indexterm" name="AUTOID-14277"></A
>
Literals in the transformation are written
into the new address exactly as shown.<a class="indexterm" name="AUTOID-14279"></A
>
Macros are expanded and then
written. The metasymbols perform special functions. The<a class="indexterm" name="TCP2-CH-10-IX-METASYMBOLS-FOR-TRANSFORMING-THE-ADDRESS"></A
>
transformation metasymbols and their functions are shown in 
<a class="xref" href="#TCP2-CH-10-TAB-4" title="Transformation Metasymbols">Table 10.5</A
></P
><table class="table"><caption class="table"><a class="title" name="TCP2-CH-10-TAB-4">Table 10.5: Transformation Metasymbols</A
></CAPTION
><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1">Symbol</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Meaning</TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">$</B
><code class="replaceable"><i>n</I
></CODE
></TD
><td class="entry" rowspan="1" colspan="1">Substitute indefinite token <code class="replaceable"><i>n</I
></CODE
>.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">$[</B
><code class="replaceable"><i>name</I
></CODE
><b class="emphasis.bold">$</B
><b class="emphasis.bold">]</B
></TD
><td class="entry" rowspan="1" colspan="1">Substitute the canonical form of <code class="replaceable"><i>name</I
></CODE
>.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">$(</B
><code class="replaceable"><i>map key </I
></CODE
><b class="emphasis.bold">$@</B
><code class="replaceable"><i>argument </I
></CODE
><b class="emphasis.bold">$:</B
><code class="replaceable"><i>default</I
></CODE
><b class="emphasis.bold">$)</B
></TD
><td class="entry" rowspan="1" colspan="1">Substitute a value from database <code class="replaceable"><i>map</I
></CODE
> indexed by <code class="replaceable"><i>key</I
></CODE
>.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">$&gt;</B
><code class="replaceable"><i>n</I
></CODE
></TD
><td class="entry" rowspan="1" colspan="1">Call ruleset <code class="replaceable"><i>n</I
></CODE
>.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">$@</B
></TD
><td class="entry" rowspan="1" colspan="1">Terminate ruleset.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">$:</B
></TD
><td class="entry" rowspan="1" colspan="1">Terminate rewrite rule.</TD
></TR
></TBODY
></TABLE
><p class="para">&#13;The <b class="emphasis.bold">$</B
><code class="replaceable"><i>n</I
></CODE
> symbol, where <code class="replaceable"><i>n</I
></CODE
> is a number, is used for the
indefinite token substitution<a class="indexterm" name="AUTOID-14337"></A
>
discussed above. The indefinite token is
expanded and written to the &quot;new&quot; address. Indefinite token substitution
is essential for flexible address rewriting. Without it, values could
not be easily moved from the input address to the rewritten address.
The following example demonstrates this.<a class="indexterm" name="AUTOID-14340"></A
></P
><p class="para">Addresses are always processed<a class="indexterm" name="AUTOID-14342"></A
>
by several rewrite rules. No one rule
tries to do everything. Assume the input address <em class="emphasis">mccafferty@peanut</EM
>
has been through some preliminary processing and now is:</P
><p class="para"><blockquote class="screen"><pre class="screen">kathy.mccafferty&lt;@peanut&gt;</PRE
></BLOCKQUOTE
></P
><p class="para">Assume the current rewrite rule is:</P
><p class="para"><blockquote class="screen"><pre class="screen">R$+&lt;@$-&gt;    $1&lt;@$2.$D&gt;   user@host -&gt; user@host.domain</PRE
></BLOCKQUOTE
></P
><p class="para">The address matches the pattern because it contains one or more tokens
before the literal &lt;@, exactly one token after the &lt;@, and then the
literal &gt;.  The pattern match produces two indefinite tokens that are
used in the transformation to rewrite the address.</P
><p class="para">The transformation contains the indefinite token $1, a literal &lt;@,
indefinite token $2, a literal dot (.), the macro D, and the literal &gt;.
After the pattern matching, $1 contains <em class="emphasis">kathy.mccafferty</EM
> and $2
contains <em class="emphasis">peanut</EM
>. Assume that the macro D was defined elsewhere
in the <em class="emphasis">sendmail.cf</EM
> file as <em class="emphasis">nuts.com</EM
>. In this case the input
address is rewritten as:</P
><p class="para"><blockquote class="screen"><pre class="screen">kathy.mccafferty&lt;@peanut.nuts.com&gt;</PRE
></BLOCKQUOTE
></P
><p class="para"><a class="xref" href="#TCP2-CH-10-FIG-2" title="Rewriting an address">Figure 10.3</A
>
illustrates this specific address rewrite. It shows the
tokens derived from the input address, and how those tokens are matched
against the pattern. It also shows the indefinite tokens
produced by the pattern matching, and how the indefinite tokens, and
other values from the transformation, are used to produce the rewritten
address. After rewriting, the address is again compared to the pattern. This time
it fails to match the pattern because it no longer contains exactly
one token between the literal &lt;@ and the literal &gt;.  So, no further
processing is done by this rewrite rule and the address is passed to
the next rule in line. Rules in a ruleset are processed sequentially,<a class="indexterm" name="AUTOID-14362"></A
>
though a few metasymbols can be used to modify this flow.</P
><h4 class="figure"><a class="title" name="TCP2-CH-10-FIG-2">Figure 10.3: Rewriting an address</A
></H4
><img class="graphic" src="figs/tcp2_1003.gif" alt="Figure 10.3"><p class="para">The <b class="emphasis.bold">$&gt;</B
><em class="emphasis">n</EM
> symbol calls ruleset <em class="emphasis">n</EM
> and passes the address
defined by the remainder of the transformation to ruleset <em class="emphasis">n</EM
> for
processing. For example:</P
><p class="para"><blockquote class="screen"><pre class="screen">$&gt;9 $1 % $2</PRE
></BLOCKQUOTE
></P
><p class="para">This transformation calls ruleset 9 ($&gt;9), and passes the contents of
$1, a literal %, and the contents of $2 to ruleset 9 for processing.
When ruleset 9 finishes processing, it returns a rewritten address to
the calling rule. The returned email address is then compared again
to the pattern in the calling rule. If it still matches, ruleset 9 is
called again.  </P
><p class="para">The recursion built into rewrite rules<a class="indexterm" name="AUTOID-14377"></A
>
creates the possibility for
infinite loops. sendmail does its best to detect possible loops,<a class="indexterm" name="AUTOID-14380"></A
>
but you should take responsibility for writing rules that don't loop.
The <b class="emphasis.bold">$@</B
> and the <b class="emphasis.bold">$:</B
> symbols are used to control processing and
to prevent loops. If the transformation begins with the <b class="emphasis.bold">$@</B
> symbol,
the entire ruleset is terminated and the remainder of the transformation
is the value returned by the ruleset. If the transformation begins
with the <b class="emphasis.bold">$:</B
> symbol, the individual rule is executed only once.
Use <b class="emphasis.bold">$:</B
> to prevent recursion and to prevent loops when calling
other rulesets. Use <b class="emphasis.bold">$@</B
> to exit a ruleset at a specific rule.</P
><p class="para">The <b class="emphasis.bold">$[</B
><em class="emphasis">name</EM
><b class="emphasis.bold">$]</B
> symbol converts a host's nickname or its IP
address to its canonical name by passing the value <em class="emphasis">name</EM
> to the
name server for resolution. For example, using the <em class="emphasis">nuts.com</EM
> name
servers, <b class="emphasis.bold">$[goober$]</B
> returns <em class="emphasis">peanut.nuts.com</EM
> and
<b class="emphasis.bold">$[[172.16.12.1]$]</B
> returns <em class="emphasis">almond.nuts.com</EM
>.</P
><p class="para">In the same way that a hostname or address is used to look up a canonical
name in the name server database, the <b class="emphasis.bold">$(</B
><em class="emphasis">map key</EM
><b class="emphasis.bold">$)</B
> syntax
uses the <em class="emphasis">key</EM
> to retrieve information from the database identified
by <em class="emphasis">map</EM
>. This is a more generalized database retrieval syntax than
is the one that returns canonical hostnames, and it is more complex
to use. Before we get into the details of setting up and using databases
from within sendmail, let's finish describing the rest of the syntax of
rewrite rules.<a class="indexterm" name="AUTOID-14404"></A
></P
><p class="para">There is a special rewrite rule syntax that is used in ruleset 0.
Ruleset 0 defines the triple (<em class="emphasis">mailer, host, user</EM
>) that specifies
the mail delivery program, the recipient host, and the recipient user.&#13;</P
><p class="para">The special transformation syntax used to do this is:</P
><p class="para"><blockquote class="screen"><pre class="screen"><b class="emphasis.bold">$#</B
><code class="replaceable"><i>mailer</I
></CODE
><b class="emphasis.bold">$@</B
><code class="replaceable"><i>host</I
></CODE
><b class="emphasis.bold">$:</B
><code class="replaceable"><i>user</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">An example of this syntax taken from the <em class="emphasis">linux.smtp.cf</EM
> sample
file is:</P
><p class="para"><blockquote class="screen"><pre class="screen">R$*&lt;@$*&gt;$*    $#smtp$@$2$:$1&lt;@$2&gt;$3     user@host.domain</PRE
></BLOCKQUOTE
></P
><p class="para">Assume the email address <em class="emphasis">david&lt;@filbert.nuts.com&gt;</EM
> is processed
by this rule. The address matches the pattern <code class="literal">$*&lt;@$+&gt;$*</CODE
> because:</P
><ul class="itemizedlist"><li class="listitem"><p class="para">The address has zero or more tokens (the token <em class="emphasis">david</EM
>) that
match the first <b class="emphasis.bold">$*</B
> symbol.</P
></LI
><li class="listitem"><p class="para">The address has a literal &lt;@.</P
></LI
><li class="listitem"><p class="para">The address has zero or more tokens (the five tokens
<em class="emphasis">filbert.nuts.com</EM
>) that match the requirement of the second <b class="emphasis.bold">$*</B
> symbol.</P
></LI
><li class="listitem"><p class="para">The address has a literal &gt;.</P
></LI
><li class="listitem"><p class="para">The address has zero or more, in this case zero, tokens that match the
requirement of the last <b class="emphasis.bold">$*</B
> symbol.</P
></LI
></UL
><p class="para">This pattern match produces two indefinite tokens. Indefinite token $1
contains <em class="emphasis">david</EM
> and $2 contains <em class="emphasis">filbert.nuts.com</EM
>. No other matches
occurred, so $3 is null. These indefinite tokens are used to rewrite the
address into the following triple:</P
><p class="para"><blockquote class="screen"><pre class="screen">$#smtp$@filbert.nuts.com$:david&lt;@filbert.nuts.com&gt;</PRE
></BLOCKQUOTE
></P
><p class="para">The components of this triple are:</P
><dl class="variablelist"><dt class="term">$#smtp</DT
><dd class="listitem"><p class="para"><em class="emphasis">smtp</EM
> is the internal name of the mailer that delivers the
message.</P
></DD
><dt class="term">$@filbert.nuts.com</DT
><dd class="listitem"><p class="para"><em class="emphasis">filbert.nuts.com</EM
> is the recipient host.</P
></DD
><dt class="term">$:david&lt;@filbert.nuts.com&gt;</DT
><dd class="listitem"><p class="para"><em class="emphasis">david&lt;@filbert.nuts.com&gt;</EM
> is the recipient user.</P
></DD
></DL
><p class="para">There is one special variant of this syntax, also used only in ruleset
0, that passes error messages<a class="indexterm" name="AUTOID-14464"></A
>
to the user:</P
><p class="para"><blockquote class="screen"><pre class="screen"><code class="userinput"><b>$#error$</B
></CODE
>@<code class="replaceable"><i>comment</I
></CODE
>$:<code class="replaceable"><i>message</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">The <code class="replaceable"><i>comment</I
></CODE
> field is ignored by sendmail. <code class="replaceable"><i>message</I
></CODE
> is
the text of an error message returned to the user, for example:</P
><p class="para"><blockquote class="screen"><pre class="screen">R&lt;@$+&gt;     $#error$@5.1.1$:&quot;user address required&quot;</PRE
></BLOCKQUOTE
></P
><p class="para">This rule returns the message &quot;user address required&quot; if the
address matches the pattern.</P
><div class="sect3"><h4 class="sect3"><a class="title" name="TCP2-CH-10-SECT-6.2.1">10.6.2.1 Transforming with a database </A
></H4
><p class="para"><a class="indexterm" name="TCP2-CH-10-IX-REWRITE-RULES-USING-EXTERNAL-DATABASES-IN"></A
>External databases can be used to transform addresses in rewrite rules.
The database is included in the transformation part of a rule by using
the following syntax:</P
><p class="para"><blockquote class="screen"><pre class="screen"><code class="userinput"><b>$(</B
></CODE
><code class="replaceable"><i>map key</I
></CODE
> [<code class="userinput"><b>$@</B
></CODE
><code class="replaceable"><i>argument</I
></CODE
>...] [<code class="userinput"><b>$:</B
></CODE
><code class="replaceable"><i>default</I
></CODE
>] <code class="userinput"><b>$)</B
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para"><code class="replaceable"><i>map</I
></CODE
> is the name assigned to the database<a class="indexterm" name="AUTOID-14496"></A
>
within the
<em class="emphasis">sendmail.cf</EM
> file. The name assigned to <code class="replaceable"><i>map</I
></CODE
> is not limited
by the rules that govern macro names. Like mailer names, map names
are only used inside of the <em class="emphasis">sendmail.cf</EM
> file and can be any
name you choose. Select a simple descriptive name, such as &quot;users&quot;
or &quot;mailboxes.&quot;  The map name is assigned with a <b class="emphasis.bold">K</B
> command.
(More on the <b class="emphasis.bold">K</B
> command in a moment.)</P
><p class="para"><code class="replaceable"><i>key</I
></CODE
> is the value used to index into the database. The value
returned from the database for this key is used to rewrite the input
address. If no value is returned, the input address is not changed
unless a <code class="replaceable"><i>default</I
></CODE
> value is provided.</P
><p class="para">An <code class="replaceable"><i>argument</I
></CODE
> is an additional value passed to the database procedure<a class="indexterm" name="AUTOID-14509"></A
>
along with the key. Multiple arguments can be used, but each argument
must start with <b class="emphasis.bold">$@</B
>. The argument can be used by the database
procedure to modify the value it returns to sendmail. It is
referenced inside the database as <b class="emphasis.bold">%</B
><em class="emphasis">n</EM
>, where <em class="emphasis">n</EM
> is a digit
that indicates the order in which the argument appears in the rewrite
rule&nbsp;- %1, %2, and so on&nbsp;- when multiple arguments are used. (Argument %0 is
the <code class="replaceable"><i>key</I
></CODE
>.)</P
><p class="para">An example will make the use of arguments clear. Assume the following
input address:</P
><p class="para"><blockquote class="screen"><pre class="screen">tom.martin&lt;@sugar&gt;</PRE
></BLOCKQUOTE
></P
><p class="para">Further, assume the following database with the internal sendmail
name of &quot;relays&quot;:</P
><p class="para"><blockquote class="screen"><pre class="screen">oil     %1&lt;@relay.fats.com&gt;
sugar   %1&lt;@relay.calories.com&gt;
salt    %1&lt;@server.sodium.org&gt;</PRE
></BLOCKQUOTE
></P
><p class="para">Finally, assume the following rewrite rule:</P
><p class="para"><blockquote class="screen"><pre class="screen">R$+&lt;@$-&gt;     $(relays $2 $@ $1 $:$1&lt;@$2&gt; $)</PRE
></BLOCKQUOTE
></P
><p class="para">The input address <em class="emphasis">tom.martin&lt;@sugar&gt;</EM
> matches the pattern because
it has one or more tokens (tom.martin) before the literal &lt;@ and exactly
one token (sugar) after it. The pattern matching creates two indefinite
tokens and passes them to the transformation. The transformation
calls the database (relays) and passes it token $2 (sugar) as the
key and token $1 (tom.martin) as the argument. If the key is not
found in the database the default ($1&lt;@$2&gt;) is used. In this case,
the key is found in the database. The database program uses the key to
retrieve &quot;%1@relay.calories.com&quot;, expands the %1 argument, and returns
&quot;tom.martin@relay.calories.com&quot; to sendmail, which uses the returned
value to replace the input address.</P
><p class="para">Before a database can be used within sendmail, it must be defined.<a class="indexterm" name="AUTOID-14529"></A
>
This is done with the <b class="emphasis.bold">K</B
> command. The syntax of the <b class="emphasis.bold">K</B
>
command is:</P
><p class="para"><blockquote class="screen"><pre class="screen"><code class="userinput"><b>K</B
></CODE
><code class="replaceable"><i>name type</I
></CODE
> [<code class="replaceable"><i>arguments</I
></CODE
>]</PRE
></BLOCKQUOTE
></P
><p class="para"><code class="replaceable"><i>name</I
></CODE
> is the name used to reference this database within
sendmail. In the example above, the <code class="replaceable"><i>name</I
></CODE
> is &quot;relays&quot;.</P
><p class="para"><code class="replaceable"><i>type</I
></CODE
> is the class of database. The <code class="replaceable"><i>type</I
></CODE
> specified in
the <b class="emphasis.bold">K</B
> command must match the database support complied into your
sendmail. Most sendmail programs do not support all database
types, but a few basic types are widely supported. Common types are dbm,
hash, btree, and nis. There are many more, all of which are described
in <a class="xref" href="appe_01.htm" title="A sendmail Reference">Appendix E</A
>.</P
><p class="para"><code class="replaceable"><i>arguments</I
></CODE
> are optional. Generally, the only argument is the path
of the database file. Occasionally the arguments include flags that are
interpreted by the database program. The full list of K command flags
that can be passed in the argument field are listed in <a class="xref" href="appe_01.htm" title="A sendmail Reference">Appendix E</A
>.</P
><p class="para">To define the &quot;relays&quot; database file used in the example above, we might
enter the following command in the <em class="emphasis">sendmail.cf</EM
> file:</P
><p class="para"><blockquote class="screen"><pre class="screen">Krelays dbm /usr/local/relays</PRE
></BLOCKQUOTE
></P
><p class="para">The name <em class="emphasis">relays</EM
> is simply a name you chose because it is
descriptive. The database type <em class="emphasis">dbm</EM
> is a type supported by your
version of sendmail and was used by you when you built the database
file. Finally, the argument <em class="emphasis">/usr/local/relays</EM
> is the location of
the database file you created.<a class="indexterm" name="AUTOID-14558"></A
><a class="indexterm" name="AUTOID-14559"></A
></P
><p class="para">Don't worry if you're confused about how to build and use database files
within sendmail. We will revisit this topic later in the chapter
and the examples will make the practical use of database files clear.</P
></DIV
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="TCP2-CH-10-SECT-6.3">10.6.3 The Set Ruleset Command </A
></H3
><p class="para"><a class="indexterm" name="TCP2-CH-10-IX-RULESETS"></A
><a class="indexterm" name="TCP2-CH-10-IX-SET-RULESET-S-COMMAND"></A
>Rulesets are groups of associated rewrite rules that can be referenced
by a number. The <b class="emphasis.bold">S</B
> command marks the beginning of a ruleset and
identifies it with a number. In the <b class="emphasis.bold">S</B
><em class="emphasis">n</EM
> command syntax, <em class="emphasis">n</EM
>
is the number that identifies the ruleset. Numbers in the range of 0 to
99 are used.</P
><p class="para">Rulesets can be thought of as subroutines, or functions, designed to
process email addresses.<a class="indexterm" name="AUTOID-14573"></A
>
They are called from mailer definitions, from
individual rewrite rules, or directly by sendmail. Six rulesets
have special functions and are called directly by sendmail.
These are:</P
><ul class="itemizedlist"><li class="listitem"><p class="para">Ruleset 3 is the first
ruleset applied to addresses. It converts an address<a class="indexterm" name="AUTOID-14580"></A
>
to the canonical form: <em class="emphasis">local-part</EM
>@<em class="emphasis">host.domain</EM
>.</P
><p class="para">In specific circumstances the <em class="emphasis">@host.domain</EM
> part is added by
sendmail after ruleset 3 terminates. This happens only if the
mail has been received from a mailer with the C flag set.
[19]
In our sample configuration file, none of the mailers use this flag.
If the C flag is set, the sender's <em class="emphasis">@host.domain</EM
> is added to
all addresses that have only a <em class="emphasis">local-part</EM
>. This processing is
done after ruleset 3 and before rulesets 1 and 2. (This function is
represented in 
<a class="xref" href="#TCP2-CH-10-FIG-3" title="Sequence of rulesets">Figure 10.4</A
>
by the box marked &quot;D.&quot;)</P
><blockquote class="footnote"><p class="para">[19] See <a class="xref" href="appe_01.htm" title="A sendmail Reference">Appendix E</A
> for the full set of mailer flags.</P
></BLOCKQUOTE
></LI
><li class="listitem"><p class="para">Ruleset 0 is applied to the addresses used to deliver the mail.
Ruleset 0 is applied after ruleset 3, and only to the recipient
addresses actually used for mail delivery. It resolves the address to
the triple (<em class="emphasis">mailer, host, user</EM
>) composed of the name of the
mailer that will deliver the mail, the recipient hostname, and the
recipient username.</P
></LI
><li class="listitem"><p class="para">Ruleset 1 is applied to all sender addresses<a class="indexterm" name="AUTOID-14598"></A
>
in the message.</P
></LI
><li class="listitem"><p class="para">Ruleset 2 is applied to all recipient addresses<a class="indexterm" name="AUTOID-14603"></A
>
in the message.</P
></LI
><li class="listitem"><p class="para">Ruleset 4 is applied to all addresses in the message and is used to
translate internal address formats into external address formats.</P
></LI
><li class="listitem"><p class="para">Ruleset 5 is applied to local addresses after sendmail processes
the address against the aliases file.<a class="indexterm" name="AUTOID-14610"></A
>
Ruleset 5 is only applied to
local addresses that do not have an alias.</P
></LI
></UL
><p class="para"><a class="xref" href="#TCP2-CH-10-FIG-3" title="Sequence of rulesets">Figure 10.4</A
>
shows the flow of the message and addresses through these
rulesets. The D box does not symbolize a ruleset. It is the internal
sendmail process described above. The S and R symbols do stand
for rulesets. They have numeric names just like all normal rulesets,
but the numbers are not fixed as is the case with rulesets 0, 1, 2,
3, 4, and 5. The S and R ruleset numbers are defined in the S and
R fields of the mailer definition. Each mailer may specify its own S
and R rulesets for mailer-specific cleanup of the sender and recipient
addresses just before the message is delivered.</P
><h4 class="figure"><a class="title" name="TCP2-CH-10-FIG-3">Figure 10.4: Sequence of rulesets</A
></H4
><img class="graphic" src="figs/tcp2_1004.gif" alt="Figure 10.4"><p class="para">There are, of course, many more rulesets in most <em class="emphasis">sendmail.cf</EM
> files.
The other rulesets provide additional address processing and are called
by existing rulesets using the <b class="emphasis.bold">$&gt;</B
><em class="emphasis">n</EM
> construct.
[20]
The rulesets provided in any sample <em class="emphasis">sendmail.cf</EM
> file will be
adequate for delivering SMTP mail. It's unlikely you'll have to add to
these rulesets, unless you want to add new features to your mailer.<a class="indexterm" name="AUTOID-14626"></A
><a class="indexterm" name="AUTOID-14627"></A
><a class="indexterm" name="AUTOID-14628"></A
></P
><blockquote class="footnote"><p class="para">[20] See Table 10-5.</P
></BLOCKQUOTE
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch10_05.htm" title="10.5 sendmail Configuration "><img src="../gifs/txtpreva.gif" alt="Previous: 10.5 sendmail Configuration " border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="TCP/IP Network Administration"><img src="../gifs/txthome.gif" alt="TCP/IP Network Administration" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch10_07.htm#TCP2-CH-10-SECT-7.1" title="10.7 Modifying a sendmail.cf File "><img src="../gifs/txtnexta.gif" alt="Next: 10.7 Modifying a sendmail.cf File " border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">10.5 sendmail Configuration </TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">10.7 Modifying a sendmail.cf File </TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.htm" title="The Networking CD Bookshelf">Library Home</A
> | <a href="../dnsbind/index.htm" title="DNS &amp; BIND">DNS &amp; BIND</A
> | <a href="index.htm" title="TCP/IP Network Administration">TCP/IP</A
> | <a href="../sendmail/index.htm" title="sendmail">sendmail</A
> | <a href="../smdref/index.htm" title="sendmail Desktop Reference">sendmail Reference</A
> | <a href="../firewall/index.htm" title="Building Internet Firewalls">Firewalls</A
> | <a href="../puis/index.htm" title="Practical UNIX &amp; Internet Security">Practical Security</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
