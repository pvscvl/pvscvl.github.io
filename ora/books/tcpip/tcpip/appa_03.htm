<html><head>
<title>[Appendix A] A.3 chat</TITLE>
<meta name="DC.title" content="TCP/IP Network Administration"><meta name="DC.creator" content="Craig Hunt"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-02-04T01:42:42Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-322-7" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="appa_01.htm" title="A. PPP Tools"><link rel="prev" href="appa_02.htm" title="A.2 The PPP Daemon"><link rel="next" href="appb_01.htm" title="B. A gated Reference"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="TCP/IP Network Administration" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="TCP/IP Network Administration"><area shape="RECT" coords="467,0,514,18" href="../search/tsrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="appa_02.htm" title="A.2 The PPP Daemon"><img src="../gifs/txtpreva.gif" alt="Previous: A.2 The PPP Daemon" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Appendix A<br>PPP Tools</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="APPENDIX" href="appb_01.htm" title="B. A gated Reference"><img src="../gifs/txtnexta.gif" alt="Next: B. A gated Reference" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="TCP2-AP-1-SECT-3">A.3 chat</A
></H2
><p class="para"><a class="indexterm" name="TCP2-AP-1-IX-CHAT-SCRIPTING-LANGUAGE"></A
><b class="emphasis.bold">chat</B
> is a general-purpose scripting language that is used to
control the modem, dial the remote server, and perform the remote system
login. <b class="emphasis.bold">chat</B
> is less powerful than <b class="emphasis.bold">dip</B
> but is widely used.
The &quot;expect/send&quot; structure of a <b class="emphasis.bold">chat</B
> script is the fundamental
structure used in most scripting languages.</P
><p class="para">A <b class="emphasis.bold">chat</B
> script is composed of expect/send pairs. These pairs
consist of the string expected from the remote system, separated by
whitespace from the response that is sent to the remote host when the
expected string is received. If no string is expected from the remote<a class="indexterm" name="AUTOID-20467"></A
><a class="indexterm" name="AUTOID-20469"></A
><a class="indexterm" name="AUTOID-20471"></A
><a class="indexterm" name="AUTOID-20473"></A
>
system, two quotes (<code class="literal">&quot;&quot;</CODE
>) or two apostrophes (<code class="literal">&quot;</CODE
>) are
used to &quot;expect nothing.&quot;  A simple <b class="emphasis.bold">chat</B
> script is:</P
><p class="para"><blockquote class="screen"><pre class="screen">&quot;&quot; \r name&gt; jane word&gt; TOga!toGA</PRE
></BLOCKQUOTE
></P
><p class="para">The script expects nothing (<code class="literal">&quot;&quot;</CODE
>) until it sends the remote
system a carriage return (<code class="literal">\r</CODE
>). Then the script expects the
remote system to send the string <code class="literal">name&gt;</CODE
>, which is part of the
system's <code class="literal">Username&gt;</CODE
> prompt. In response to this prompt, the
script sends the username <code class="literal">jane</CODE
>.  Finally the script waits for
part of the <code class="literal">Password&gt;</CODE
> prompt and responds with
<code class="literal">TOga!toGA</CODE
>. A script this simple can be defined directly on the
<b class="emphasis.bold">chat</B
> command line:</P
><p class="para"><blockquote class="screen"><pre class="screen">% chat -v -t30 &quot;&quot; \r name&gt; jane word&gt; TOga!toGA</PRE
></BLOCKQUOTE
></P
><p class="para"><a class="indexterm" name="AUTOID-20492"></A
>This command runs <b class="emphasis.bold">chat</B
> in verbose mode, sets the length of time
the script waits for an expected string to 30 seconds, and then executes
the simple login script described above.</P
><p class="para">The syntax of the <b class="emphasis.bold">chat</B
> command is:</P
><dl class="variablelist"><dt class="term"></DT
><dd class="listitem"><p class="para"><b class="emphasis.bold">chat</B
> [<code class="replaceable"><i>options</I
></CODE
>] [<code class="replaceable"><i>script</I
></CODE
>]</P
></DD
></DL
><p class="para">The <b class="emphasis.bold">chat</B
> command options are:</P
><dl class="variablelist"><dt class="term"><b class="emphasis.bold">-v</B
></DT
><dd class="listitem"><p class="para">Runs the <b class="emphasis.bold">chat</B
> script in verbose mode. Verbose mode logs<a class="indexterm" name="AUTOID-20514"></A
>
informational messages via <b class="emphasis.bold">syslogd</B
>.</P
></DD
><dt class="term"><b class="emphasis.bold">-V</B
></DT
><dd class="listitem"><p class="para">Runs the <b class="emphasis.bold">chat</B
> script in stderr verbose mode. The stderr verbose
mode displays informational messages on the stderr device. See Chapter
6 for an example of this being used with <b class="emphasis.bold">pppd</B
>.</P
></DD
><dt class="term"><b class="emphasis.bold">-t</B
> <code class="replaceable"><i>timeout</I
></CODE
></DT
><dd class="listitem"><p class="para">Sets the maximum time to wait for an expected string. If the expected
string is not received in <code class="replaceable"><i>timeout</I
></CODE
> seconds, the reply string is
not sent and the script terminates&amp;amp;amp;amp;mdash;unless an alternate send is
defined. If defined, the alternate send (more about this later) is
sent and the remote system is given one more <code class="replaceable"><i>timeout</I
></CODE
> period to
respond. If this fails, the script is terminated with a nonzero error
code. By default, the timeout period is 45 seconds.</P
></DD
><dt class="term"><b class="emphasis.bold">-f</B
> <code class="replaceable"><i>scriptfile</I
></CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-20538"></A
>Reads the <b class="emphasis.bold">chat</B
> script from the <code class="replaceable"><i>scriptfile</I
></CODE
> instead of from
the command line. Multiple lines of expect/send pairs are permitted in
the file.</P
></DD
><dt class="term"><b class="emphasis.bold">-r</B
> <code class="replaceable"><i>reportfile</I
></CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-20548"></A
>Writes the output generated by REPORT strings to the <code class="replaceable"><i>reportfile</I
></CODE
>.
By default, REPORT strings are written to stderr. The REPORT keyword is
covered below.</P
></DD
></DL
><p class="para">In order to make the scripts more useful and robust, <b class="emphasis.bold">chat</B
>
provides special keywords, escape sequences, and alternate send/expect
pairs that can be used in the script. First let's look at the five
<b class="emphasis.bold">chat</B
> keywords.</P
><p class="para">Two keywords transmit special signals to the remote system. The
keyword <code class="literal">EOT</CODE
> sends the End of Transmission character. On UNIX
systems this is usually the End of File character, which is a
CTRL-D. The <code class="literal">BREAK</CODE
> keyword sends a line break to the remote
system. The three remaining keywords define processing characteristics
for the script itself.</P
><p class="para"><a class="indexterm" name="AUTOID-20558"></A
>The <code class="literal">TIMEOUT</CODE
> keyword defines the amount of time to wait for an expected
string. Because it is defined inside the script, the timeout value can
be changed for each expected string. For example, assume you want to
allow the remote server 30 seconds to display the initial <code class="literal">Username&gt;</CODE
>
prompt but only 5 seconds to display <code class="literal">Password&gt;</CODE
> once the username has
been sent. Enter this script command:</P
><p class="para"><blockquote class="screen"><pre class="screen">TIMEOUT 30 name&gt; karen TIMEOUT 5 word&gt; beach%PARTY</PRE
></BLOCKQUOTE
></P
><p class="para"><a class="indexterm" name="AUTOID-20566"></A
><a class="indexterm" name="AUTOID-20568"></A
>The <code class="literal">ABORT</CODE
> keyword and the <code class="literal">REPORT</CODE
> keyword are
similar. They both define strings that, when received, cause a special
action to take place. The <code class="literal">ABORT</CODE
> keyword defines strings that
cause the script to abort if they are received when the system is
expecting the string CONNECT from the modem. The <code class="literal">REPORT</CODE
>
keyword defines substrings that determine what messages received on
the serial port should be written to stderr or the report file. A
sample <b class="emphasis.bold">chat</B
> script file illustrates both of these keywords:</P
><p class="para"><blockquote class="screen"><pre class="screen">REPORT CONNECT
ABORT BUSY
ABORT 'NO CARRIER'
ABORT 'RING - NO ANSWER'
&quot;&quot; ATDT5551234
CONNECT \r
name&gt; karen
word&gt; beach%PARTY</PRE
></BLOCKQUOTE
></P
><p class="para">The first line says that any message received by the script that
contains the word CONNECT will be logged. If the <b class="emphasis.bold">-r</B
>
command-line option was used when <b class="emphasis.bold">chat</B
> was started, the message
is logged in the file defined by that option. Otherwise the message is
displayed on stderr. The point of this command is to display the
modem's connect message to the user. For example: the complete message
might be CONNECT 28,800 LAPM/V, which tells the user the link speed
and the transmission protocol used by the modems. The CONNECT message
means success. The next three lines of the script begin with the
keyword <code class="literal">ABORT</CODE
> and define the modem messages that mean failure. If the
modem responds with BUSY, NO CARRIER, or RING - NO ANSWER, the
script aborts.</P
><p class="para">The last four lines are the basic expect/send pairs we have seen
repeatedly in this section. We expect nothing (<code class="literal">&quot;&quot;</CODE
>) and send the
dial command to the modem (<code class="literal">ATDT</CODE
>). We expect CONNECT from the
modem and send a carriage return (<code class="literal">\r</CODE
>) to the remote server.
We expect <code class="literal">Username&gt;</CODE
> from the remote server and send <code class="literal">karen</CODE
>.
Finally, we expect <code class="literal">Password&gt;</CODE
> from the server and send
<code class="literal">beach%PARTY</CODE
>.</P
><p class="para"><b class="emphasis.bold">chat</B
> extends the standard expect/send pair with an alternate send
and an alternate expect to improve robustness. You may define an
alternate send string and an alternate expect value to be used when the
script times out waiting for the primary expected value. The alternate
send and the alternate expect are indicated in the script by preceding
them with dashes. For example:</P
><p class="para"><blockquote class="screen"><pre class="screen">gin:-BREAK-gin: becca</PRE
></BLOCKQUOTE
></P
><p class="para">In this sample we wait for the string <code class="literal">gin:</CODE
> and send the string
<code class="literal">becca</CODE
>. The first string and the last string compose the
standard expect/send pair. The alternate send/expect is only used if
the timer expires and the expected <code class="literal">gin:</CODE
> string has not been
received. When this occurs, the script sends a line break, restarts
the timer, and waits for <code class="literal">gin:</CODE
> again, because that is what our
alternate send/expect pair (<code class="literal">-BREAK-gin:</CODE
>) tells the script to
do. Note that unlike the standard expect/send pair, in the send/expect
pair a value is transmitted before a string is expected, i.e., the send
comes before the expect. Another example more in keeping with our
other script examples is:</P
><p class="para"><blockquote class="screen"><pre class="screen">name&gt;&amp;amp;amp;amp;mdash;name&gt; karen</PRE
></BLOCKQUOTE
></P
><p class="para">Here the script expects the <code class="literal">name&gt;</CODE
> string. If it is not
received, the script sends an empty line, which is simply a carriage
return, and again waits for the <code class="literal">name&gt;</CODE
> string. This action is
dictated by the alternate send/expect pair, <code class="literal">&amp;amp;amp;amp;mdash;name&gt;</CODE
>. The
pair begins with a dash that signals the start of the send string, but
the next character is the second dash that marks the beginning of the
alternate expect string. There is no send string. It is this &quot;empty
string&quot; that causes the script to send a single return character. This
example is more common than the BREAK example shown above, though a little 
harder to explain.</P
><p class="para"><a class="indexterm" name="TCP2-AP-1-IX-CHAT-SCRIPTING-LANGUAGE-ESCAPE-SEQUENCES-LISTED"></A
>The carriage return character is not the only special character that can be sent from
a <b class="emphasis.bold">chat</B
> script. <b class="emphasis.bold">chat</B
> provides several escape sequences for
sending and receiving special characters. 
<a class="xref" href="#TCP2-AP-1-TAB-1" title="chat Escape Sequences">Table 13.2</A
>
lists these.</P
><table class="table"><caption class="table"><a class="title" name="TCP2-AP-1-TAB-1">Table A.2: chat Escape Sequences</A
></CAPTION
><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1">Escape Sequence</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Meaning</TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">\b</B
></TD
><td class="entry" rowspan="1" colspan="1">The backspace character.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">\</B
></TD
><td class="entry" rowspan="1" colspan="1">Send without the terminating return character.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">\d</B
></TD
><td class="entry" rowspan="1" colspan="1">Delay sending for one second.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">\K</B
></TD
><td class="entry" rowspan="1" colspan="1">Send a BREAK.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">\n</B
></TD
><td class="entry" rowspan="1" colspan="1">Send a newline character.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">\N</B
></TD
><td class="entry" rowspan="1" colspan="1">Send a null character.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">\</B
></TD
><td class="entry" rowspan="1" colspan="1">Delay sending 1/10th of a second.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">\q</B
></TD
><td class="entry" rowspan="1" colspan="1">Send the string but don't log it.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">\r</B
></TD
><td class="entry" rowspan="1" colspan="1">The carriage return.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">\s</B
></TD
><td class="entry" rowspan="1" colspan="1">The space character.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">\t</B
></TD
><td class="entry" rowspan="1" colspan="1">The tab character.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">\\</B
></TD
><td class="entry" rowspan="1" colspan="1">The backslash character.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">\</B
><em class="emphasis">ddd</EM
></TD
><td class="entry" rowspan="1" colspan="1">The ASCII character with the octal value ddd.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">^</B
><em class="emphasis">C</EM
></TD
><td class="entry" rowspan="1" colspan="1">A control character.</TD
></TR
></TBODY
></TABLE
><p class="para"><a class="indexterm" name="AUTOID-20679"></A
><a class="indexterm" name="AUTOID-20681"></A
>All of the escape sequences start with a backslash (\)
except for the sequence
used to enter a control character.  Control characters are entered as a
caret (^) followed by an uppercase letter.  For example control X is entered
as ^X. The escape
sequences that are described in 
<a class="xref" href="#TCP2-AP-1-TAB-1" title="chat Escape Sequences">Table 13.2</A
>
with the words &quot;send&quot; or
&quot;sending&quot; can only be used in a send string; all others can be used in
either a send or expect string. Several escape sequences are used in
the following example:<a class="indexterm" name="AUTOID-20684"></A
></P
><p class="para"><blockquote class="screen"><pre class="screen">&quot;&quot; \d\d^G\p^G\p\p^GWake\sUp!\nSleepy\sHead!</PRE
></BLOCKQUOTE
></P
><p class="para">Expect nothing (<code class="literal">&quot;&quot;</CODE
>). Wait two seconds (<code class="literal">\d\d</CODE
>). Send
three ASCII BELL characters, which is CTRL-G on the keyboard, at
intervals of 1/10 of a second (<code class="literal">^G\p^G\p\p^G</CODE
>). Send the
string <code class="literal">Wake Up!</CODE
>. Go to a new line (<code class="literal">\n</CODE
>) and send the
string <code class="literal">Sleepy Head!</CODE
>.<a class="indexterm" name="AUTOID-20694"></A
><a class="indexterm" name="AUTOID-20695"></A
></P
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="appa_02.htm" title="A.2 The PPP Daemon"><img src="../gifs/txtpreva.gif" alt="Previous: A.2 The PPP Daemon" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="TCP/IP Network Administration"><img src="../gifs/txthome.gif" alt="TCP/IP Network Administration" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="APPENDIX" href="appb_01.htm" title="B. A gated Reference"><img src="../gifs/txtnexta.gif" alt="Next: B. A gated Reference" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">A.2 The PPP Daemon</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">B. A gated Reference</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.htm" title="The Networking CD Bookshelf">Library Home</A
> | <a href="../dnsbind/index.htm" title="DNS &amp; BIND">DNS &amp; BIND</A
> | <a href="index.htm" title="TCP/IP Network Administration">TCP/IP</A
> | <a href="../sendmail/index.htm" title="sendmail">sendmail</A
> | <a href="../smdref/index.htm" title="sendmail Desktop Reference">sendmail Reference</A
> | <a href="../firewall/index.htm" title="Building Internet Firewalls">Firewalls</A
> | <a href="../puis/index.htm" title="Practical UNIX &amp; Internet Security">Practical Security</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
