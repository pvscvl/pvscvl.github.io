<html><head>
<title>[Chapter 12] 12.2 User Authentication </TITLE>
<meta name="DC.title" content="TCP/IP Network Administration"><meta name="DC.creator" content="Craig Hunt"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-02-04T01:41:38Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-322-7" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch12_01.htm" title="12. Network Security "><link rel="prev" href="ch12_01.htm" title="12.1 Security Planning "><link rel="next" href="ch12_03.htm#TCP2-CH-12-SECT-3.1" title="12.3 Application Security "></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="TCP/IP Network Administration" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="TCP/IP Network Administration"><area shape="RECT" coords="467,0,514,18" href="../search/tsrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch12_01.htm" title="12.1 Security Planning "><img src="../gifs/txtpreva.gif" alt="Previous: 12.1 Security Planning " border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 12<br>Network Security </FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch12_03.htm#TCP2-CH-12-SECT-3.1" title="12.3 Application Security "><img src="../gifs/txtnexta.gif" alt="Next: 12.3 Application Security " border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="TCP2-CH-12-SECT-2">12.2 User Authentication </A
></H2
><p class="para"><a class="indexterm" name="TCP2-CH-12-IX-USERS-AUTHENTICATION-OF"></A
><a class="indexterm" name="TCP2-CH-12-IX-USERS-AUTHENTICATION-OF2"></A
>Good passwords are one of the simplest parts of good network security.
Passwords are used to log in to systems that use password authentication.
Popular mythology says that network security breaches are
caused by sophisticated security crackers who discover software security
holes to break into computer systems. In reality, many intruders enter
systems simply by guessing or stealing passwords,<a class="indexterm" name="AUTOID-17074"></A
>
or by exploiting well-known security problems in outdated software.<a class="indexterm" name="AUTOID-17077"></A
>
Later in this chapter we look at guidelines for keeping software up-to-date, and at ways to
prevent a thief from stealing your password. First, let's see what we
can do to prevent it from being guessed.</P
><p class="para">These are a few things that make it easy to guess passwords:</P
><ul class="itemizedlist"><li class="listitem"><p class="para">Accounts that use the account name as the password. Accounts with this
type of trivial password are called <em class="emphasis">joe accounts</EM
>.<a class="indexterm" name="AUTOID-17085"></A
></P
></LI
><li class="listitem"><p class="para">Guest or demonstration accounts that require no password, or use a
well-publicized password.</P
></LI
><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-17091"></A
>System accounts with default passwords.</P
></LI
><li class="listitem"><p class="para">User who tell their passwords to others.</P
></LI
></UL
><p class="para">Guessing these kinds of passwords requires no skill, just lots of spare
time! Changing your password frequently<a class="indexterm" name="AUTOID-17097"></A
>
is a deterrent to password
guessing. However, if you choose good passwords, don't change them so
often that it is hard to remember them. Many security experts
recommend that passwords should be changed about every 3 to 6 months.</P
><p class="para">A more sophisticated form of password guessing is <em class="emphasis">dictionary
guessing</EM
>.<a class="indexterm" name="AUTOID-17102"></A
>
Dictionary guessing uses a program that encrypts each
word in a dictionary (e.g., <em class="emphasis">/usr/dict/words</EM
>) and compares each
encrypted word to the encrypted password in the <em class="emphasis">/etc/passwd</EM
>
file. Dictionary guessing is not limited to words from a dictionary.
Things known about you (your name, initials, telephone number, etc.)
are also run through the guessing program when trying to guess the
password for your account.
Because of dictionary guessing, you must protect the <em class="emphasis">/etc/passwd</EM
>
file.<a class="indexterm" name="AUTOID-17107"></A
><a class="indexterm" name="AUTOID-17110"></A
></P
><p class="para">Some systems provide a <em class="emphasis">shadow password file</EM
> to hide the encrypted
passwords from potential intruders. If your system has a shadow password
facility, use it. Hiding encrypted passwords greatly reduces the risk
of password guessing.</P
><div class="sect2"><h3 class="sect2"><a class="title" name="TCP2-CH-12-SECT-2.1">12.2.1 The Shadow Password File </A
></H3
><p class="para"><a class="indexterm" name="TCP2-CH-12-IX-SHADOW-PASSWORD-FILE"></A
>Shadow password files have restricted permissions that prevent them
from being read by intruders. The encrypted password is stored only in
the shadow password file, <em class="emphasis">/etc/shadow</EM
>,<a class="indexterm" name="AUTOID-17122"></A
><a class="indexterm" name="AUTOID-17124"></A
>
and not in the <em class="emphasis">/etc/passwd</EM
> file. The <em class="emphasis">passwd</EM
> file is maintained<a class="indexterm" name="AUTOID-17129"></A
>
as a world-readable file because it contains information that various
programs use. The <em class="emphasis">shadow</EM
> file can only be read by root and it
does not duplicate the information in the <em class="emphasis">passwd</EM
> file. It only
contains passwords and the information needed to manage them. The
format of a <em class="emphasis">shadow</EM
> file entry on a Solaris system is:</P
><blockquote class="blockquote"><p class="para"><em class="emphasis">username</EM
><b class="emphasis.bold">:</B
><em class="emphasis">password</EM
><b class="emphasis.bold">:</B
><em class="emphasis">lastchg</EM
><b class="emphasis.bold">:</B
><em class="emphasis">min</EM
><b class="emphasis.bold">:</B
><em class="emphasis">max</EM
><b class="emphasis.bold">:</B
><em class="emphasis">warn</EM
><b class="emphasis.bold">:</B
><em class="emphasis">inactive</EM
><b class="emphasis.bold">:</B
><em class="emphasis">expire</EM
><b class="emphasis.bold">:</B
><em class="emphasis">flag</EM
></P
></BLOCKQUOTE
><p class="para"><em class="emphasis">username</EM
> is the login username. <em class="emphasis">password</EM
> is the
encrypted password or one of the keyword values <code class="literal">NP</CODE
> and
<code class="literal">*LK*</CODE
>. <em class="emphasis">lastchg</EM
> is the date that the password was last
changed, written as the number of days from January 1, 1970 to the
date of the change. <em class="emphasis">min</EM
> is the minimum number of days that must
elapse before the password can be changed. <em class="emphasis">max</EM
> is the maximum
number of days the user can keep the password before it must be changed.
<em class="emphasis">warn</EM
> is the number of days before the password expires that the
user is warned. <em class="emphasis">inactive</EM
> is the number of days the account can
be inactive before it is locked. <em class="emphasis">expire</EM
> is the date on which the
account will be closed. <em class="emphasis">flag</EM
> is unused.</P
><p class="para">The encrypted password appears only in this file. Every password field
in the <em class="emphasis">/etc/passwd</EM
> file contains an <b class="emphasis.bold">x</B
>, which tells the
system to look in the <em class="emphasis">shadow</EM
> file for the real password. Every
password field in the <em class="emphasis">/etc/shadow</EM
> file contains either an
encrypted password, <code class="literal">NP</CODE
>, or <code class="literal">*LK*</CODE
>. If it contains the keyword
<code class="literal">NP</CODE
>,<a class="indexterm" name="AUTOID-17173"></A
>
it means that there is no password because this is not a
login account. System accounts, such as <em class="emphasis">daemon</EM
> or <em class="emphasis">uucp</EM
>,
are not login accounts, so they have <code class="literal">NP</CODE
> in the password
field.<a class="indexterm" name="AUTOID-17178"></A
>
<code class="literal">*LK*</CODE
> in the password field means that this account has been
locked and is therefore disabled from any further use.</P
><p class="para">While the most important purpose of the <em class="emphasis">shadow</EM
> file is to protect the password, the additional fields in the shadow entry provide other useful security services.<a class="indexterm" name="AUTOID-17183"></A
>
One of these is <em class="emphasis">password aging</EM
>.
A password aging mechanism defines a lifetime for each password. When
a password reaches the end of its lifetime, the password aging
mechanism notifies the user to change the password. If it is not
changed within some specified period, the password is removed from the
system and the user is blocked from using his account.</P
><p class="para">The lastchg, max, and warn fields all play a role in
password aging. They allow the system to know when the password was
changed and how long it should be kept, as well as when the user should
be warned about his impending doom. Another nice feature of the shadow file is the min field. This is a more subtle aspect
of password aging. It prevents the user from changing her favorite
password to a dummy password and then immediately back to her
favorite. When the password is changed it must be used for the number
of days defined by min before it can be changed again. This
reduces one of the common tricks used to avoid really changing
passwords.<a class="indexterm" name="AUTOID-17188"></A
></P
><p class="para">The inactive and expire fields help eliminate unused<a class="indexterm" name="AUTOID-17193"></A
>
accounts. Here &quot;inactivity&quot; is determined by the number of days the
account continues with an expired password. Once the password expires,
the user is given some number of days to log in and set a new password.
If the user does not log in before the specified number of days has
elapsed, the account is locked and the user cannot log in.</P
><p class="para">The expire field<a class="indexterm" name="AUTOID-17197"></A
>
lets you a create user account that has a specified
&quot;life.&quot;  When the date stored in the expire field is reached,
the user account is disabled even if it is still active. The expiration
date is stored as the number of days since January 1, 1970.</P
><p class="para">On a Solaris system the <em class="emphasis">/etc/shadow</EM
> file is not edited directly.
It is modified by using the &quot;users&quot; sub-window of the <b class="emphasis.bold">admintool</B
><a class="indexterm" name="AUTOID-17202"></A
>
or special options on the <b class="emphasis.bold">passwd</B
> command line.<a class="indexterm" name="AUTOID-17205"></A
>
This window is
shown in 
<a class="xref" href="#TCP2-CH-12-FIG-0" title="Admintool password maintenance">Figure 12.1</A
>
The username, password, min, max, warn, inactive, and expire fields 
are clearly shown.</P
><h4 class="figure"><a class="title" name="TCP2-CH-12-FIG-0">Figure 12.1: Admintool password maintenance</A
></H4
><img class="graphic" src="figs/tcp2_1201.gif" alt="Figure 12.1"><p class="para">The <b class="emphasis.bold">passwd</B
> command on Solaris systems has <b class="emphasis.bold">-n </B
><em class="emphasis">min</EM
>,
<b class="emphasis.bold">-w </B
><em class="emphasis">warn</EM
>, and <b class="emphasis.bold">-x </B
><em class="emphasis">max</EM
> options to set the min, max,
and warn fields in the <em class="emphasis">/etc/shadow</EM
> file. Only the root user can
invoke these options.
Here root sets the maximum life of Tyler's password to 180 days:</P
><p class="para"><blockquote class="screen"><pre class="screen"># passwd -x 180 tyler</PRE
></BLOCKQUOTE
></P
><p class="para">The Solaris system permits the system administrator to set default
values for all of these options so that they do not have to be set
every time a user is added through the <b class="emphasis.bold">admintool</B
> or the
<b class="emphasis.bold">passwd</B
> command line. The default values are set in the
<em class="emphasis">/etc/default/passwd</EM
> file.<a class="indexterm" name="AUTOID-17226"></A
><a class="indexterm" name="AUTOID-17228"></A
></P
><p class="para"><blockquote class="screen"><pre class="screen">% <b class="emphasis.bold">cat /etc/default/passwd</B
>
#ident  &quot;@(#)passwd.dfl 1.3     92/07/14 SMI&quot;
MAXWEEKS=
MINWEEKS=
PASSLENGTH=6</PRE
></BLOCKQUOTE
></P
><p class="para">&#13;The default values that can be set in the <em class="emphasis">/etc/default/passwd</EM
>
file are:</P
><dl class="variablelist"><dt class="term">MAXWEEKS</DT
><dd class="listitem"><p class="para">The maximum life of a password defined in weeks&nbsp;- not days. The 180-day
period used in the example above would be defined with this parameter
as MAXWEEKS=26.</P
></DD
><dt class="term">MINWEEKS</DT
><dd class="listitem"><p class="para">The minimum number of weeks a password must be used before it can be
changed.</P
></DD
><dt class="term">PASSLENGTH</DT
><dd class="listitem"><p class="para">The minimum number of characters that a password must contain. This is
set to 6 in the sample file. Only the first eight characters are
significant on a Solaris system. Setting the value above 8 does not
change that fact.</P
></DD
><dt class="term">WARNWEEKS</DT
><dd class="listitem"><p class="para">The number of weeks before a password expires that the user is warned.</P
></DD
></DL
><p class="para">This section uses Solaris as an example because the shadow password system
is provided as part of the Solaris operating system. If it doesn't come
with your system, you may be able to download shadow password software
from the Internet. It is available for Linux systems. The <em class="emphasis">shadow</EM
>
file described above is exactly the same format used on Linux systems
and it functions in the same way.</P
><p class="para">No intruder can take the encrypted password and decrypt it back to its
original form, but encrypted passwords can be compared against
encrypted dictionaries. If bad passwords are used, they can be easily
guessed. Take care to protect the <em class="emphasis">/etc/passwd</EM
> file and choose
good passwords.<a class="indexterm" name="AUTOID-17257"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="TCP2-CH-12-SECT-2.2">12.2.2 Choosing a Password </A
></H3
><p class="para"><a class="indexterm" name="TCP2-CH-12-IX-PASSWORD-CHOOSING"></A
>A good password is an essential part of security. We usually think of
the password used for login; however, one-time passwords and encryption
keys are needed. For all of these purposes you want to choose a good password.
Choosing a good password boils down to this, don't choose a password that
can be guessed using the techniques described above. Some guidelines<a class="indexterm" name="AUTOID-17264"></A
>
for choosing a good password are:</P
><ul class="itemizedlist"><li class="listitem"><p class="para">Don't use your login name.</P
></LI
><li class="listitem"><p class="para">Don't use the name of anyone or anything.</P
></LI
><li class="listitem"><p class="para">Don't use any English, or foreign language, word or abbreviation.</P
></LI
><li class="listitem"><p class="para">Don't use any personal information associated with the owner of the
account. For example, don't use initials, phone number, social
security number, job title, organizational unit, etc.</P
></LI
><li class="listitem"><p class="para">Don't use keyboard sequences, e.g., qwerty.</P
></LI
><li class="listitem"><p class="para">Don't use any of the above spelled backwards, or in caps, or
otherwise disguised.</P
></LI
><li class="listitem"><p class="para">Don't use an all-numeric password.</P
></LI
><li class="listitem"><p class="para">Don't use a sample password, no matter how good, that you've gotten
from a book that discusses computer security.</P
></LI
><li class="listitem"><p class="para"><em class="emphasis">Do</EM
> use a mixture of numbers, special characters, and mixed-case
letters.</P
></LI
><li class="listitem"><p class="para"><em class="emphasis">Do</EM
> use at least six characters.</P
></LI
><li class="listitem"><p class="para"><em class="emphasis">Do</EM
> use a seemingly random selection of letters and numbers.</P
></LI
></UL
><p class="para">Common suggestions for constructing seemingly random<a class="indexterm" name="AUTOID-17295"></A
>
passwords are:</P
><ol class="orderedlist"><li class="listitem"><p class="para">Use the first letter of each word from a line in a book, song, or poem.
For example: &quot;People don't know you and trust is a joke.&quot;
[1]
would produce Pd'ky&amp;tiaj.</P
><blockquote class="footnote"><p class="para">[1] Toad the Wet Sprocket, &quot;Walk on the Ocean.&quot;</P
></BLOCKQUOTE
></LI
><li class="listitem"><p class="para">Use the output from a random password generator. Select a random
string that can be pronounced and is easy to remember. For example,
the random string &quot;adazac&quot; can be pronounced a-da-zac, and you can 
remember it by thinking of it as &quot;A-to-Z.&quot; Add uppercase
letters to create your own emphasis, e.g., aDAzac.
[2]</P
><blockquote class="footnote"><p class="para">[2] A VMS-system password generator created this
password.</P
></BLOCKQUOTE
></LI
><li class="listitem"><p class="para">Use two short words connected by punctuation, e.g., wRen%Rug.</P
></LI
><li class="listitem"><p class="para">Use numbers and letters to create an imaginary vanity license plate
password, e.g., 2hot4U?.</P
></LI
></OL
><p class="para">A common theme of these suggestions is that the password should be easy
to remember. Avoid passwords that must be written down to be
remembered. If unreliable people gain access to your office and find
the password you have written down, the security of your system will be
compromised.</P
><p class="para">However, don't assume that you will not be able to remember a random
password. It may be difficult the first few times you use the
password, but any password that is used often enough is easy to<a class="indexterm" name="AUTOID-17313"></A
>
remember. If you have an account on a system that you rarely use, you
may have trouble remembering a random password. But in that case, the
best solution is to get rid of the account. Unused and under-utilized
accounts are prime targets for intruders. They like to attack unused
accounts because there is no user to notice changes to the files or
strange <em class="emphasis">Last login:</EM
> messages. Remove all unused accounts from<a class="indexterm" name="AUTOID-17316"></A
>
your systems.</P
><p class="para"><a class="indexterm" name="AUTOID-17320"></A
>How do you ensure that the guidance for creating new passwords is
followed? The most important step is to make sure that every user
knows these suggestions and the importance of following them. Cover
this topic in your network security plan, and periodically reinforce it
through newsletter articles and online system bulletins.</P
><p class="para">It is also possible to use programs that force users to
follow specific password selection guidelines. The Web page
<a class="systemitem.sitename" href="../../../../../../../csrc.nist.gov/tools/tools.htm">http://csrc.nist.gov/tools/tools.htm</A
> lists several programs that do
exactly that.<a class="indexterm" name="AUTOID-17325"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="TCP2-CH-12-SECT-2.3">12.2.3 One-Time Passwords </A
></H3
><p class="para"><a class="indexterm" name="TCP2-CH-12-IX-PASSWORD-ONE-TIME"></A
>Sometimes good passwords are not enough. Passwords are transmitted across
the network as clear text. Intruders use protocol-analyzer software<a class="indexterm" name="AUTOID-17332"></A
>
to spy on network traffic and steal passwords. If a thief steals your
password, it does not matter how good the password was.</P
><p class="para">The thief can be on any network that handles your TCP/IP packets.
If you log in through your local network you have to worry only about
local snoops. But if you log in over the Internet you must worry about
unseen listeners from any number of unknown networks.</P
><p class="para">The <b class="emphasis.bold">rlogin</B
> command<a class="indexterm" name="AUTOID-17338"></A
>
is not vulnerable to this type of attack.
<b class="emphasis.bold">rlogin</B
> does not send the password over the network, because user
authentication is done only on the local host. The remote host accepts
the user because it trusts the local host. However, trust should
be extended only to UNIX hosts on your local network that you really do trust.
Never extend trust to remote systems.<a class="indexterm" name="AUTOID-17342"></A
>
It is too easy for an intruder to
pretend that he is logged into a trusted system by stealing the trusted
system's IP address, or by corrupting DNS so that it gives his system's
address in response to the trusted system's name. <b class="emphasis.bold">rlogin</B
> does
not help when you must log in from a remote site or an untrusted system.
Use one-time passwords for remote logins. Because a one-time password
can be used only once, a thief who steals the password cannot use it.</P
><p class="para">Naturally, one-time passwords systems are a hassle. You must carry a list
of one-time passwords, or something that can generate them,
with you any time you want to log in. If you forget the password list,
you cannot log in. However, this may not be as big a problem as it seems.
You usually log in from your office where your primary
login host is probably on your desktop or your local area network.
When you log in to your desktop system from its keyboard, the password
does not traverse the network, so you can use a reusable password.
And <b class="emphasis.bold">rlogin</B
> can be used between UNIX hosts on a local area network.
One-time passwords are only needed for the occasions when you log in from a
remote location or an untrusted host.

For this reason, some one-time
password systems are designed to allow reusable passwords when they
are appropriate.</P
><p class="para">There are several one-time password systems. <a class="indexterm" name="AUTOID-17350"></A
>
Some use specialized
hardware such as &quot;smart cards.&quot;  OPIE is a free software system that
requires no special hardware.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="TCP2-CH-12-SECT-2.4">12.2.4 OPIE </A
></H3
><p class="para"><a class="indexterm" name="TCP2-CH-12-IX-ONE-TIME-PASSWORDS-IN-EVERYTHING-OPIE"></A
><em class="emphasis">One-time Passwords In Everything</EM
> (OPIE) is free software from the
U.S. Naval Research Laboratory (NRL)<a class="indexterm" name="AUTOID-17360"></A
>
that modifies a UNIX system to use
one-time passwords. OPIE is directly derived from SKey, which is a
one-time password system created by Bell Communications Research
(Bellcore).</P
><p class="para">Download OPIE from
<a class="systemitem.url" href="../../../WebStripper/protected.html#link=ftp://ftp.nrl.navy.mil/pub/security/opie/opie&#8211;2.3.tar.gz">ftp://ftp.nrl.navy.mil/pub/security/opie/opie-2.3.tar.gz</A
>. It is
a binary file. <b class="emphasis.bold">gunzip</B
> the file and extract it using <b class="emphasis.bold">tar</B
>.
The directory this produces contains the source files, Makefiles, and
scripts necessary to compile and install OPIE.</P
><p class="para">OPIE comes with <b class="emphasis.bold">configure</B
>, an auto-configuration script that
detects your system's configuration and modifies the Makefile accordingly.
It does a good job, but you still should manually edit the Makefile to
make sure it is correct. For example: my Linux system uses the Washington
University FTP daemon <b class="emphasis.bold">wu.ftpd</B
>. OPIE replaces <b class="emphasis.bold">login</B
>, <b class="emphasis.bold">su</B
>,
and <b class="emphasis.bold">ftpd</B
> with its own version of these programs. On my Linux system,
<b class="emphasis.bold">configure</B
> did not find <b class="emphasis.bold">ftpd</B
> and I did not notice the problem
when I checked the Makefile. <b class="emphasis.bold">make</B
> ran without errors but <b class="emphasis.bold">make
install</B
> failed during the install of the OPIE FTP daemon. The Makefile
was easily corrected and the rerun of <b class="emphasis.bold">make install</B
> was successful.</P
><p class="para">The effects of OPIE are evident as soon as the install completes. Run
<b class="emphasis.bold">su</B
> and you're prompted with <code class="literal">root's response:</CODE
> instead of
<code class="literal">Password:</CODE
>.  <b class="emphasis.bold">login</B
> prompts with <code class="literal">Response or Password:</CODE
> instead
of just <code class="literal">Password:</CODE
>. The <code class="literal">response</CODE
> requested by these programs is
the OPIE equivalent of a password. Programs that prompt with <code class="literal">Response or Password</CODE
> accept either the OPIE response or the traditional
password from the <em class="emphasis">/etc/passwd</EM
> file. This feature permits users
to migrate gracefully from traditional passwords to OPIE. It also
allows local console logins with re-usable passwords while permitting
remote logins with one-time passwords. The best of both worlds&nbsp;- convenient local logins without creating separate local and remote
login accounts!</P
><p class="para">To use OPIE you must first select a secret password that is used
to generate the one-time password list, and then you must run the
program that generates the list. To select a secret password, run<a class="indexterm" name="AUTOID-17388"></A
>
<b class="emphasis.bold">opiepassword</B
> as shown below:</P
><p class="para"><blockquote class="screen"><pre class="screen">$ <b class="emphasis.bold">opiepasswd -c</B
>
Updating kristin:
Reminder  -  Only use this method from the console; NEVER from remote.
 If you are using telnet, xterm, or a dial-in, type ^C now or exit with
 no password. Then run opiepasswd without the -c parameter.
Using MD5 to compute responses.
Enter old secret pass phrase: <b class="emphasis.bold">3J5Wd6PaWP</B
>
Enter new secret pass phrase: <b class="emphasis.bold">9WA11WSfW95/NT</B
>
Again new secret pass phrase: <b class="emphasis.bold">9WA11WSfW95/NT</B
></PRE
></BLOCKQUOTE
></P
><p class="para">The example above shows the user <em class="emphasis">kristin</EM
> updating her secret
password. She runs <b class="emphasis.bold">opiepasswd</B
> from the computer's console, as
indicated by the <b class="emphasis.bold">-c</B
> command option. Running <b class="emphasis.bold">opiepasswd</B
>
from the console is the most secure. If it is not run from the console,
you must have a copy of the <b class="emphasis.bold">opiekey</B
> software<a class="indexterm" name="AUTOID-17403"></A
>
with you to generate
the correct responses needed to enter your old and new secret passwords
because clear-text passwords are only accepted from the console.
Kristin is prompted to enter her old password and to select a new one.
OPIE passwords must be at least 10 characters long. Since the new
password is long enough, <b class="emphasis.bold">opiepasswd</B
> accepts it and displays the
following two lines:</P
><p class="para"><blockquote class="screen"><pre class="screen">ID kristin OPIE key is 499 be93564
CITE JAN GORY BELA GET ABED</PRE
></BLOCKQUOTE
></P
><p class="para">These lines tell Kristin the information she needs to generate
OPIE login responses and the first response she will need to log in to
the system. The one-time password needed for Kristin's next login
response is the second line of this display: a group of six short,
uppercase character strings. The first line of the display contains
the initial sequence number (499) and the seed (be93564) she needs,
along with her secret password, to generate OPIE login responses.
The software used to generate those responses is <b class="emphasis.bold">opiekey</B
>.</P
><p class="para"><b class="emphasis.bold">opiekey</B
> takes the login sequence number, the user's seed, and the
user's secret password as input and outputs the correct one-time password.
If you have <b class="emphasis.bold">opiekey</B
> software on the system from which you are
initiating the login, you can produce one-time passwords one at a time.
If, however, you will not have access to <b class="emphasis.bold">opiekey</B
> when you are
away from your login host, you can use the <b class="emphasis.bold">-n</B
> option to request
several passwords. Write the passwords down,<a class="indexterm" name="AUTOID-17415"></A
>
put them in your wallet,
and you're ready to go!
[3]
In the following example we request five (<b class="emphasis.bold">-n 5</B
>) responses from
<b class="emphasis.bold">opiekey</B
>:</P
><blockquote class="footnote"><p class="para">[3] Security experts will cringe when they read this suggestion. Writing
down passwords is a &quot;no-no.&quot;  Frankly, I think the people who steal
wallets are more interested in my money and credit cards than in the
password to my system. But you should consider this suggestion in
light of the level of protection that your system needs.</P
></BLOCKQUOTE
><p class="para"><blockquote class="screen"><pre class="screen">$ <b class="emphasis.bold">opiekey -n 5 495 wi01309</B
>
Using MD5 algorithm to compute response.
Reminder: Don't use  opiekey  from  telnet  or dial-in sessions.
Enter secret pass phrase: <b class="emphasis.bold">UUaX26CPaU</B
>
491: HOST VET FOWL SEEK IOWA YAP
492: JOB ARTS WERE FEAT TILE IBIS
493: TRUE BRED JOEL USER HALT EBEN
494: HOOD WED MOLT PAN FED RUBY
495: SUB YAW BILE GLEE OWE NOR</PRE
></BLOCKQUOTE
></P
><p class="para">First <b class="emphasis.bold">opiekey</B
> tells us that it is using the MD5 algorithm to produce
the responses, which is the default for OPIE. For compatibility with
older Skey or OPIE implementations, force <b class="emphasis.bold">opiekey</B
> to use the
MD4 algorithm by using the <b class="emphasis.bold">-4</B
> command-line option. <b class="emphasis.bold">opiekey</B
>
prompts for your secret password. This is the password you defined with
the <b class="emphasis.bold">opiepasswd</B
> command. It then prints out the number of responses
requested and lists them in sequence number order. The login sequence
numbers in the example are 495 to 491. When the sequence number gets
down to 10, rerun <b class="emphasis.bold">opiepasswd</B
> and select a new secret password.
Selecting a new secret password resets the sequence number to 499.
The OPIE login prompt displays a sequence number and you must provide
the response that goes with that sequence number. For example:</P
><p class="para"><blockquote class="screen"><pre class="screen">login: <b class="emphasis.bold">tyler</B
>
otp-md5 492 wi01309
Response or Password: <b class="emphasis.bold">JOB ARTS WERE FEAT TILE IBIS</B
></PRE
></BLOCKQUOTE
></P
><p class="para">At the <code class="literal">login:</CODE
> prompt Tyler enters her username. The system then displays
a single line that tells her that one-time passwords are being generated
with the MD5 algorithm (otp-md5), that this is login sequence number 492,
and that the seed used for her one-time passwords is wi01309. She looks
up the response for login number 492 and enters the six short strings.
She then marks that response off her list because it cannot be used again
to log into the system. A response from the list must be used any time
she is not sitting at the console of her system. Reusable passwords can be used only at the console.<a class="indexterm" name="AUTOID-17439"></A
><a class="indexterm" name="AUTOID-17440"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="TCP2-CH-12-SECT-2.5">12.2.5 Secure the r Commands </A
></H3
><p class="para"><a class="indexterm" name="TCP2-CH-12-IX-SECURITY-MECHANISMS-INCLUDED-WITHIN-APPLICATIONS"></A
>Some applications use their own security mechanisms. Make sure that
the security for these applications is configured properly. In
particular, check the UNIX <b class="emphasis.bold">r</B
> commands,<a class="indexterm" name="AUTOID-17448"></A
>
which are a set of UNIX
networking applications comparable to <b class="emphasis.bold">ftp</B
> and <b class="emphasis.bold">telnet</B
>. Care
must be taken to ensure that the <b class="emphasis.bold">r</B
> commands don't compromise
system security. Improperly configured <b class="emphasis.bold">r</B
> commands can open
access to your computer facilities to virtually everyone in the world.</P
><p class="para">In place of password authentication, the <b class="emphasis.bold">r</B
> commands use a
security system based on trusted hosts and users.<a class="indexterm" name="AUTOID-17457"></A
>
Trusted users on
trusted hosts are allowed to access the local system without providing
a password. Trusted hosts are also called &quot;equivalent hosts&quot;<a class="indexterm" name="AUTOID-17459"></A
>
because the system assumes that users given access to a trusted host should be
given equivalent access to the local host. The system assumes that
user accounts with the same name on both hosts are &quot;owned&quot; by the same
user. For example, a user logged in as <em class="emphasis">becky</EM
> on a trusted system
is granted the same access as a user logged in as <em class="emphasis">becky</EM
> on the
local system.</P
><p class="para">This authentication system requires databases that define the trusted
hosts and the trusted users. The databases used to configure the
<b class="emphasis.bold">r</B
> commands are <em class="emphasis">/etc/hosts.equiv</EM
><a class="indexterm" name="AUTOID-17466"></A
><a class="indexterm" name="AUTOID-17469"></A
><a class="indexterm" name="AUTOID-17471"></A
>
and <em class="emphasis">.rhosts</EM
>.</P
><p class="para">The <em class="emphasis">/etc/hosts.equiv</EM
> file defines the hosts and users that are
granted &quot;trusted&quot; <b class="emphasis.bold">r</B
> command access to your system. This file can
also define hosts and users that are explicitly denied trusted access.
Not having trusted access doesn't mean that the user is denied
access; it just means that he is required to supply a password.</P
><p class="para">The basic format of entries in the <em class="emphasis">/etc/hosts.equiv</EM
> file is:</P
><p class="para"><blockquote class="screen"><pre class="screen">[<b class="emphasis.bold">+</B
> | <b class="emphasis.bold">-</B
>][<code class="replaceable"><i>hostname</I
></CODE
>] [<b class="emphasis.bold">+</B
> | <b class="emphasis.bold">-</B
>][<code class="replaceable"><i>username</I
></CODE
>]</PRE
></BLOCKQUOTE
></P
><p class="para">The <code class="replaceable"><i>hostname</I
></CODE
> is the name of a &quot;trusted&quot; host, which may optionally
be preceded by a plus (+) sign.<a class="indexterm" name="AUTOID-17489"></A
>
The plus sign has no real significance, except when used alone. A + 
sign without a hostname following it is a wildcard character that means
&quot;any host.&quot;</P
><p class="para">If a host is granted equivalence, users logged into that host are
allowed access to like-named user accounts on your system without
providing a password. (This is one good reason for administrators to
observe uniform rules in handing out login names.) The optional
<code class="replaceable"><i>username</I
></CODE
> is the name of a user on the trusted host who is granted
access to all user accounts. If <code class="replaceable"><i>username</I
></CODE
> is specified, that user
is not limited to like-named accounts, but is given access to all user
accounts without being required to provide a password.
[4]</P
><blockquote class="footnote"><p class="para">[4] The <em class="emphasis">root</EM
> account is not included.</P
></BLOCKQUOTE
><p class="para">The <code class="replaceable"><i>hostname</I
></CODE
> may also be preceded by a minus sign (-).<a class="indexterm" name="AUTOID-17499"></A
><a class="indexterm" name="AUTOID-17501"></A
><a class="indexterm" name="AUTOID-17503"></A
>
This
explicitly says that the host is <em class="emphasis">not</EM
> an equivalent system. Users
from that host must always supply a password when they use an <b class="emphasis.bold">r</B
>
command to interact with your system. A <em class="emphasis">username</EM
> can also be
preceded with a minus sign. This says that, whatever else may be true
about that host, the user is &quot;not trusted&quot; and must always supply a
password.</P
><p class="para">The following examples show how entries in the <em class="emphasis">hosts.equiv</EM
> file
are interpreted:</P
><dl class="variablelist"><dt class="term"><em class="emphasis">peanut</EM
></DT
><dd class="listitem"><p class="para">Allows password-free access from any user on <em class="emphasis">peanut</EM
> to a
like-named user account on your local system.</P
></DD
><dt class="term"><em class="emphasis">-peanut</EM
></DT
><dd class="listitem"><p class="para">Denies password-free access from any user on <em class="emphasis">peanut</EM
> to accounts
on your system.</P
></DD
><dt class="term"><em class="emphasis">peanut&nbsp;-david</EM
></DT
><dd class="listitem"><p class="para">Denies password-free access to the user <em class="emphasis">david</EM
>, if he attempts to
access your system from <em class="emphasis">peanut</EM
>.</P
></DD
><dt class="term"><em class="emphasis">peanut +becky</EM
></DT
><dd class="listitem"><p class="para">Allows the user <em class="emphasis">becky</EM
> to access any account (except <em class="emphasis">root</EM
>)
on your system, without supplying a password, if she logs in from
<em class="emphasis">peanut</EM
>.</P
></DD
><dt class="term"><em class="emphasis">+ becky</EM
></DT
><dd class="listitem"><p class="para">Allows the user <em class="emphasis">becky</EM
> to access any account (except <em class="emphasis">root</EM
>)
on your system without supplying a password, no matter what host she
logs in from.</P
></DD
></DL
><p class="para">This last entry is an example of something that should never be used in
your configuration. Don't use a standalone plus sign (+) in place of
a hostname. It allows access from any host anywhere, and can open up a
big security hole. For example, if the entry shown above was in your
<em class="emphasis">hosts.equiv</EM
> file, an intruder could create an account named
<em class="emphasis">becky</EM
> on his system and gain access to every account on your
system. Check the <em class="emphasis">/etc/hosts.equiv</EM
> and <em class="emphasis">~/.rhosts</EM
> files,
and <em class="emphasis">/etc/hosts.lpd</EM
>, to make sure that none of them contain a
plus-sign (+) entry. Remember to check the <em class="emphasis">.rhosts</EM
> file in
every user's home directory.</P
><p class="para">A simple typographical error could give you a standalone plus sign.
For example, consider the entry:</P
><p class="para"><blockquote class="screen"><pre class="screen"><code class="userinput"><b>+ peanut becky</B
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">The system administrator probably meant &quot;give <em class="emphasis">becky</EM
> password-free
access to all accounts when she logs in from <em class="emphasis">peanut</EM
>.&quot; However,
with an extraneous space after the + sign, it means &quot;allow users named
<em class="emphasis">peanut</EM
> and <em class="emphasis">becky</EM
> password-free access from any host in the
world.&quot; Don't use a plus sign in front of a hostname, and always
use care when working with the <em class="emphasis">/etc/hosts.equiv</EM
> file to avoid
security problems.</P
><p class="para">When configuring the <em class="emphasis">/etc/hosts.equiv</EM
> file, grant trusted
access only to the systems and users you actually trust. Don't grant
trusted access to every system attached to your local network. It is
best only to trust hosts from your local network when you know the
person responsible for that host, and when you know that the host is
not available for public use. Don't grant trusted access by
default&nbsp;- have some reason for conferring trusted status. Never grant
trust to remotely located systems. It is too easy for an intruder to
corrupt routing or DNS in order to fool your system when you grant
trust to a remote system. Also, never begin your <em class="emphasis">hosts.equiv</EM
>
file with a minus sign (-) as the first character. (This confuses
some systems, causing them to improperly grant access.) Always err on
the side of caution when creating a <em class="emphasis">hosts.equiv</EM
> file. Adding
trusted hosts as they are requested is much easier than recovering from
a malicious intruder.</P
><p class="para"><a class="indexterm" name="TCP2-CH-12-IX-RHOSTS-FILE"></A
>The <em class="emphasis">.rhosts</EM
> file grants or denies password-free <b class="emphasis.bold">r</B
> command
access to a specific user's account. It is placed in the user's home
directory and contains entries that define the trusted hosts and
users. Entries in the <em class="emphasis">.rhosts</EM
> file use the same format
as entries in the <em class="emphasis">hosts.equiv</EM
> file, and function in almost
the same way. The difference is the scope of access granted by entries
in these two files. In the <em class="emphasis">.rhosts</EM
> file, the entries grant or
deny access to a single user account; the entries in <em class="emphasis">hosts.equiv</EM
>
control access to an entire system.</P
><p class="para">This functional difference can be shown in a simple example. Assume
the following entry:</P
><p class="para"><blockquote class="screen"><pre class="screen">pecan anthony</PRE
></BLOCKQUOTE
></P
><p class="para">In <em class="emphasis">almond</EM
>'s <em class="emphasis">hosts.equiv</EM
> file, this entry means that the
user <em class="emphasis">anthony</EM
> on <em class="emphasis">pecan</EM
> can access any account on
<em class="emphasis">almond</EM
> without entering a password. In an <em class="emphasis">.rhosts</EM
> file
in the home directory of user <em class="emphasis">resnick</EM
>, the exact same entry
allows <em class="emphasis">anthony</EM
> to <b class="emphasis.bold">rlogin</B
> from <em class="emphasis">pecan</EM
> as <em class="emphasis">resnick</EM
>
without entering a password, but it does not grant password-free access
to any other accounts on <em class="emphasis">almond</EM
>.</P
><p class="para">Individuals use the <em class="emphasis">.rhosts</EM
> file to establish equivalence among
the different accounts they own. The entry shown above would probably
only be made if <em class="emphasis">anthony</EM
> and <em class="emphasis">resnick</EM
> are the same
person. For example, I have accounts on several different systems.
Sometimes my username is <em class="emphasis">hunt</EM
>, and sometimes it is <em class="emphasis">craig</EM
>.
It would be nice if I had the same account name everywhere, but that is
not always possible; the names <em class="emphasis">craig</EM
> and <em class="emphasis">hunt</EM
> are
used by two other people on my local network. I want to be able to
<b class="emphasis.bold">rlogin</B
> to my workstation from any host that I have an account on,
but I don't want mistaken logins from the other <em class="emphasis">craig</EM
> and the
other <em class="emphasis">hunt</EM
>. The <em class="emphasis">.rhosts</EM
> file gives me a way to control
this problem.</P
><p class="para">For example, assume my username on <em class="emphasis">almond</EM
> is <em class="emphasis">craig</EM
>, but my
username on <em class="emphasis">filbert</EM
> is <em class="emphasis">hunt</EM
>. Another user on
<em class="emphasis">filbert</EM
> is <em class="emphasis">craig</EM
>. To allow myself password-free access to
my <em class="emphasis">almond</EM
> account from <em class="emphasis">filbert</EM
>, and to make sure that the
other user doesn't have password-free access, I put the following
<em class="emphasis">.rhosts</EM
> file in my home directory:</P
><p class="para"><blockquote class="screen"><pre class="screen">filbert hunt
filbert -craig</PRE
></BLOCKQUOTE
></P
><p class="para">Normally the <em class="emphasis">hosts.equiv</EM
> file is searched first, followed by the
user's <em class="emphasis">.rhosts</EM
> file, if it exists. The first explicit match
determines whether or not password-free access is allowed. Therefore,
the <em class="emphasis">.rhosts</EM
> file cannot override the <em class="emphasis">hosts.equiv</EM
> file.
The exception to this is root user access. When a root user attempts
to access a system via the <b class="emphasis.bold">r</B
> commands, the <em class="emphasis">hosts.equiv</EM
> file
is not checked, only <em class="emphasis">.rhosts</EM
> in the root user's home directory is
consulted. This allows root access to be more tightly controlled. If
the <em class="emphasis">hosts.equiv</EM
> file was used for root access, entries that grant
trusted access to hosts would give root users on those hosts root
privileges. You can add trusted hosts to <em class="emphasis">hosts.equiv</EM
> without
granting remote root users root access to your system.</P
><p class="para">If security is particularly important at your site, you should remember
that the user can provide access with the <em class="emphasis">.rhosts</EM
> file even
when the <em class="emphasis">hosts.equiv</EM
> file doesn't exist. The only way to prevent
users from doing this is to periodically check for and remove the
<em class="emphasis">.rhosts</EM
> files. As long as you have the <b class="emphasis.bold">r</B
> commands on
your system, it is possible for a user to accidentally compromise the
security of your system.<a class="indexterm" name="AUTOID-17630"></A
><a class="indexterm" name="AUTOID-17631"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="TCP2-CH-12-SECT-2.6">12.2.6 Secure Shell </A
></H3
><p class="para"><a class="indexterm" name="TCP2-CH-12-IX-SECURE-SHELL-SSH"></A
><a class="indexterm" name="TCP2-CH-12-IX-SECURE-SHELL-SSH2"></A
>The <b class="emphasis.bold">r</B
> commands, also called the remote shell, pose a security
threat. You cannot use these commands to provide secure remote access, even if you use all the techniques given in the previous section. At best,
only trusted local systems can be given access via the <b class="emphasis.bold">r</B
>
commands. The reason for this is that the <b class="emphasis.bold">r</B
> commands grant trust
based on a belief that the IP address uniquely identifies the correct
computer. Normally it does. But an intruder can corrupt DNS to
provide the wrong IP address or corrupt routing to deliver to the wrong
network and thus undermine the authentication scheme used by the
<b class="emphasis.bold">r</B
> commands.</P
><p class="para">An alternative to the remote shell is the secure shell (SSH). SSH
replaces the standard <b class="emphasis.bold">r</B
> commands with secure commands that
include encryption and authentication. SSH uses a strong
authentication scheme to ensure that the trusted host really is the
host it claims to be. SSH provides a number of public key encryption
schemes to ensure that every packet in the stream of packets is from
the source it claims to be from. SSH is secure and easy to use.</P
><p class="para">The secure shell is available via the Internet at
<a class="systemitem.sitename" href="../../../../../../../www.cs.hut.fi/ssh">http://www.cs.hut.fi/ssh</A
>. The Web site also provides information about
the secure shell. Download and compile SSH. Use the <b class="emphasis.bold">configure</B
>
command that comes with the SSH source code to detect the configuration
of your system and build the correct Makefile. Then <b class="emphasis.bold">make</B
> and
install the components of SSH. The key components are:</P
><dl class="variablelist"><dt class="term"><b class="emphasis.bold">sshd</B
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-17655"></A
><a class="indexterm" name="AUTOID-17658"></A
>The Secure Shell daemon handles incoming SSH connections. <b class="emphasis.bold">sshd</B
>
should be started at boot time from one of the boot scripts. Don't
start <b class="emphasis.bold">sshd</B
> from <em class="emphasis">inetd.conf</EM
>.  <b class="emphasis.bold">sshd</B
> generates an
encryption key every time it starts. This can cause it to be slow to
start, which makes it unsuitable for <em class="emphasis">inetd.conf</EM
>. A system
serving SSH connections must run <b class="emphasis.bold">sshd</B
>.</P
></DD
><dt class="term"><b class="emphasis.bold">ssh</B
></DT
><dd class="listitem"><p class="para">The Secure Shell user command.<a class="indexterm" name="AUTOID-17672"></A
>
<b class="emphasis.bold">ssh</B
> command replaces <b class="emphasis.bold">rsh</B
>
and <b class="emphasis.bold">rlogin</B
>. It is used to securely pass a command to a remote
system or to securely log in to a remote system. This command creates
the outgoing connections that are handled by the remote Secure Shell
daemon. A client system that wants to use a SSH connection must have
the <b class="emphasis.bold">ssh</B
> command.</P
></DD
><dt class="term"><b class="emphasis.bold">scp</B
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-17684"></A
><a class="indexterm" name="AUTOID-17686"></A
>Secure copy (<b class="emphasis.bold">scp</B
>) is the Secure Shell version of <b class="emphasis.bold">rcp</B
>.</P
></DD
><dt class="term"><b class="emphasis.bold">ssh-keygen</B
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-17695"></A
>Generates the public and private encryption keys
used to secure the transmission for the Secure Shell.</P
></DD
></DL
><p class="para">When an <b class="emphasis.bold">ssh</B
> client connects to a <b class="emphasis.bold">sshd</B
> server, they exchange
public keys. The systems compare the keys they receive to the known
keys that they have stored in the <em class="emphasis">/etc/ssh_known_hosts</EM
> file and<a class="indexterm" name="AUTOID-17701"></A
>
in the <em class="emphasis">.ssh/known_hosts</EM
><a class="indexterm" name="AUTOID-17705"></A
>
file in the user's host directory.
[5]
If the key is not found or has changed, the user is asked to verify that
the new key should be accepted:</P
><blockquote class="footnote"><p class="para">[5] The system administrator can initialize the <em class="emphasis">ssh_known_hosts</EM
> file by
running <b class="emphasis.bold">make-ssh-known-hosts</B
>, which gets the key from every host
within a selected domain.</P
></BLOCKQUOTE
><p class="para"><blockquote class="screen"><pre class="screen">&gt; <code class="userinput"><b>ssh pecan</B
></CODE
>
Host key not found from the list of known hosts.
Are you sure you want to continue connecting (yes/no)? yes
Host 'pecan' added to the list of known hosts.
craig's password: <code class="userinput"><b>Watts.Watt.</B
></CODE
>
Last login: Thu Sep 25 15:01:32 1997 from peanut
Linux 2.0.0.
/usr/X11/bin/xauth:  creating new authority file /home/craig/.Xauthority</PRE
></BLOCKQUOTE
></P
><p class="para">If the key is found in one of the files or is accepted by the user, the
client uses it to encrypt a randomly generated session key. The session
key is then sent to the server and both systems use the key to encrypt
the remainder of the SSH session.</P
><p class="para">The client is authenticated if it is listed in the <em class="emphasis">hosts.equiv</EM
>
file, the <em class="emphasis">shost.equiv</EM
> file, the user's <em class="emphasis">.rhosts</EM
> file, or the
<em class="emphasis">.shosts</EM
> file. This type of authentication is similar to the type used
by the <b class="emphasis.bold">r</B
> commands and the format of the <em class="emphasis">shost.equiv</EM
>
and the <em class="emphasis">.shosts</EM
> files is the same as their <b class="emphasis.bold">r</B
> command equivalents.
Notice that in the sample above the user is prompted for a password.
If the client is not listed in one of the files, password authentication
is used. There is no need to worry about password thieves, because SSH
encrypts the password before it is sent across the link.</P
><p class="para">Users can employ a public key challenge/response protocol for authentication. First generate your public and private encryption keys:</P
><p class="para"><blockquote class="screen"><pre class="screen">&gt; <code class="userinput"><b>ssh-keygen</B
></CODE
>
Initializing random number generator...
Generating p:  ......................................++ (distance 616)
Generating q:  ....................++ (distance 244)
Computing the keys...
Testing the keys...
Key generation complete.
Enter file in which to save the key (/home/craig/.ssh/identity): 
Enter passphrase: <code class="userinput"><b>Pdky&amp;tiaj.</B
></CODE
>
Enter the same passphrase again: <code class="userinput"><b>Pdky&amp;tiaj.</B
></CODE
>
Your identification has been saved in /home/craig/.ssh/identity.
Your public key is:
1024 35 158564823484025855320901702005057103023948197170850159592181522
craig@pecan
Your public key has been saved in /home/craig/.ssh/identity.pub</PRE
></BLOCKQUOTE
></P
><p class="para">The <b class="emphasis.bold">ssh-keygen</B
> command creates your keys. Enter a password,
called a &quot;passphrase&quot; here, that is at least 10 characters long. Use the
rules described above to pick a good passphrase that is easy to remember.
If you forget the passphrase, no one will be able to recover it for you.</P
><p class="para">Once you have created your keys on the client system, copy the public
key to your account on the server. The public key is stored in your
home directory on the client in <em class="emphasis">.ssh/identity.pub</EM
>.<a class="indexterm" name="AUTOID-17735"></A
>
Copy it
to <em class="emphasis">.ssh/authorized_keys</EM
> in your home directory on the server.
Now when you log in using <b class="emphasis.bold">ssh</B
>, you are prompted for the passphrase:</P
><p class="para"><blockquote class="screen"><pre class="screen">&gt; <code class="userinput"><b>ssh pecan</B
></CODE
>
Enter passphrase for RSA key 'craig@pecan': <code class="userinput"><b>Pdky&amp;tiaj.</B
></CODE
>
Last login: Thu Sep 25 17:11:51 1997
Linux 2.0.0.</PRE
></BLOCKQUOTE
></P
><p class="para">To improve system security, the <b class="emphasis.bold">r</B
> commands should be disabled<a class="indexterm" name="AUTOID-17745"></A
>
after SSH is installed. Comment <b class="emphasis.bold">rshd</B
>, <b class="emphasis.bold">rlogind</B
>, <b class="emphasis.bold">rexcd</B
>,
and <b class="emphasis.bold">rexd</B
> out of the <em class="emphasis">inetd.conf</EM
> file to disable inbound
connections to the <b class="emphasis.bold">r</B
> commands. To ensure that SSH is used for
outbound connections, replace <b class="emphasis.bold">rlogin</B
> and <b class="emphasis.bold">rsh</B
> with <b class="emphasis.bold">ssh</B
>.
To do this, store copies of the original <b class="emphasis.bold">rlogin</B
> and <b class="emphasis.bold">rsh</B
> in<a class="indexterm" name="AUTOID-17760"></A
>
a safe place, re-run <b class="emphasis.bold">configure</B
> with the special options shown below,
and run <b class="emphasis.bold">make install</B
>:</P
><p class="para"><blockquote class="screen"><pre class="screen"># <code class="userinput"><b>whereis rlogin</B
></CODE
>
/usr/bin/rlogin
# <code class="userinput"><b>whereis rsh</B
></CODE
>
/usr/bin/rsh
# <code class="userinput"><b>cp /usr/bin/rlogin /usr/lib/rlogin</B
></CODE
>
# <code class="userinput"><b>cp /usr/bin/rsh /usr/lib/rsh</B
></CODE
>
# <code class="userinput"><b>./configure --with-rsh=/usr/bin --program-transform-name='s/s/r/'</B
></CODE
>
# <code class="userinput"><b>make install</B
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">The example assumes that the path to the original <b class="emphasis.bold">rlogin</B
> and
<b class="emphasis.bold">rsh</B
> commands is <em class="emphasis">/usr/bin</EM
>. Use whatever is correct for
your system.</P
><p class="para">After replacing the <b class="emphasis.bold">rlogin</B
> and <b class="emphasis.bold">rsh</B
>, you can still log in to
systems that don't support SSH. You will, however, be warned that it
is not a secure connection:</P
><p class="para"><blockquote class="screen"><pre class="screen">&gt; <code class="userinput"><b>rlogin cow</B
></CODE
>
Secure connection to cow refused; reverting to insecure method.
Using rsh.  WARNING: Connection will not be encrypted.
Last login: Wed Sep 24 22:15:28 from peanut
Sun Microsystems Inc.   SunOS 5.5.1     Generic May 1996
You have new mail.</PRE
></BLOCKQUOTE
></P
><p class="para">SSH is an excellent way to have secure communications between systems
across the Internet. However, it does require that both systems have SSH
installed. When you control both ends of the link, this is not a problem.
But there are times when you must log in from a system that is not under
your control. For those occasions, one-time passwords, as provided by
OPIE, are still essential.<a class="indexterm" name="AUTOID-17783"></A
><a class="indexterm" name="AUTOID-17784"></A
><a class="indexterm" name="AUTOID-17785"></A
><a class="indexterm" name="AUTOID-17786"></A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch12_01.htm" title="12.1 Security Planning "><img src="../gifs/txtpreva.gif" alt="Previous: 12.1 Security Planning " border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="TCP/IP Network Administration"><img src="../gifs/txthome.gif" alt="TCP/IP Network Administration" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch12_03.htm#TCP2-CH-12-SECT-3.1" title="12.3 Application Security "><img src="../gifs/txtnexta.gif" alt="Next: 12.3 Application Security " border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">12.1 Security Planning </TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">12.3 Application Security </TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.htm" title="The Networking CD Bookshelf">Library Home</A
> | <a href="../dnsbind/index.htm" title="DNS &amp; BIND">DNS &amp; BIND</A
> | <a href="index.htm" title="TCP/IP Network Administration">TCP/IP</A
> | <a href="../sendmail/index.htm" title="sendmail">sendmail</A
> | <a href="../smdref/index.htm" title="sendmail Desktop Reference">sendmail Reference</A
> | <a href="../firewall/index.htm" title="Building Internet Firewalls">Firewalls</A
> | <a href="../puis/index.htm" title="Practical UNIX &amp; Internet Security">Practical Security</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
