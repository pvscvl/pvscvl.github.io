<html><head>
<title>[Chapter 6] 6.4 Installing SLIP </TITLE>
<meta name="DC.title" content="TCP/IP Network Administration"><meta name="DC.creator" content="Craig Hunt"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-02-04T01:35:02Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-322-7" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch06_01.htm" title="6. Configuring the Interface "><link rel="prev" href="ch06_03.htm#TCP2-CH-6-SECT-3.3" title="6.3 Installing PPP "><link rel="next" href="ch06_05.htm" title="6.5 Summary "></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="TCP/IP Network Administration" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="TCP/IP Network Administration"><area shape="RECT" coords="467,0,514,18" href="../search/tsrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch06_03.htm#TCP2-CH-6-SECT-3.3" title="6.3 Installing PPP "><img src="../gifs/txtpreva.gif" alt="Previous: 6.3 Installing PPP " border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 6<br>Configuring the Interface </FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch06_05.htm" title="6.5 Summary "><img src="../gifs/txtnexta.gif" alt="Next: 6.5 Summary " border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="TCP2-CH-6-SECT-4">6.4 Installing SLIP </A
></H2
><p class="para"><a class="indexterm" name="TCP2-CH-6-IX-SERIAL-LINE-IP-SLIP-INSTALLING"></A
>Installing Serial Line IP (SLIP) is very similar to installing PPP. As
with PPP, support for SLIP is usually installed in the kernel&nbsp;- but that
is only part of the configuration. The SLIP network interface also
must be configured.</P
><p class="para">PPP and SLIP configuration is complicated by the fact that these serial
line protocols support both dedicated and dial-up connections. For our
Linux sample system, this means that two different commands are used to
configure a SLIP interface depending on whether it is a dedicated or a
dial-up connection. In this section we discuss both, beginning with
the configuration command for dedicated connections.<a class="indexterm" name="AUTOID-7106"></A
></P
><div class="sect2"><h3 class="sect2"><a class="title" name="TCP2-CH-6-SECT-4.1">6.4.1 slattach </A
></H3
><p class="para"><a class="indexterm" name="TCP2-CH-6-IX-SLATTACH-COMMAND"></A
>The <b class="emphasis.bold">slattach</B
> command &quot;attaches&quot; the SLIP protocol to a specific
serial interface. For example:</P
><p class="para"><blockquote class="screen"><pre class="screen"># <code class="userinput"><b>slattach /dev/tty03 &amp;</B
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">This command tells the SLIP protocol to use <em class="emphasis">/dev/tty03</EM
> as its serial
interface. The <b class="emphasis.bold">slattach</B
> command can optionally set some
configuration parameters for the serial interface. The syntax of
<b class="emphasis.bold">slattach</B
> on a Slackware 96 Linux system is:</P
><p class="para"><blockquote class="screen"><pre class="screen"><code class="userinput"><b>slattach</B
></CODE
> [<code class="userinput"><b>-h</B
></CODE
> | <code class="userinput"><b>-c</B
></CODE
> | <code class="userinput"><b>-6</B
></CODE
>] <code class="replaceable"><i>ttyname</I
></CODE
> [<code class="replaceable"><i>baudrate</I
></CODE
>]</PRE
></BLOCKQUOTE
></P
><p class="para">The three options, <b class="emphasis.bold">-h</B
>, <b class="emphasis.bold">-c</B
>, and <b class="emphasis.bold">-6</B
>, select the
type of SLIP protocol used. <b class="emphasis.bold">-h</B
> selects uncompressed SLIP with
full headers. CSLIP with Van Jacobsen header compression<a class="indexterm" name="AUTOID-7134"></A
>
is selected
with <b class="emphasis.bold">-c</B
>. Use <b class="emphasis.bold">-6</B
> to select six-bit SLIP. If none of these
options is selected, the <b class="emphasis.bold">slattach</B
> command defaults to CSLIP.</P
><p class="para">The <code class="replaceable"><i>baudrate</I
></CODE
> argument sets the interface's transmission speed.
Set the speed by entering a number that corresponds to the bit rate
that is used to transmit and receive data on this line, e.g., 56000.
Both ends of the line must set exactly the same bit rate. This may be
determined by the characteristics of the leased line, or by the
hardware interfaces for a direct cable connection. Regardless, the
transmission speed is a physical characteristic limited by the
equipment on the line. A default transmission speed of 9600 bits per
second is used if no <code class="replaceable"><i>baudrate</I
></CODE
> value is entered on the command
line.</P
><p class="para">The <code class="replaceable"><i>ttyname</I
></CODE
> is the name of the serial interface attached to the
leased line or direct cable connection. The serial interfaces are
identified by the system during the boot. <b class="emphasis.bold">dmesg</B
> and <b class="emphasis.bold">grep</B
>
displays the interface names on a Slackware 96 Linux system:</P
><p class="para"><blockquote class="screen"><pre class="screen">&gt; <b class="emphasis.bold">dmesg | grep tty</B
>
tty00 at 0x03f8 (irq = 4) is a 16550A
tty01 at 0x02f8 (irq = 3) is a 16550A
tty03 at 0x02e8 (irq = 3) is a 16550A</PRE
></BLOCKQUOTE
></P
><p class="para">This list of serial interface names is from a PC running Linux. Assume we
connect the direct connection cable to tty01, which is equivalent to
the MS-DOS interface COM2. In that case, use tty01 as the <code class="replaceable"><i>ttyname</I
></CODE
>
value on the <b class="emphasis.bold">slattach</B
> command. Notice that the <b class="emphasis.bold">slattach</B
>
command identifies the physical serial device (<em class="emphasis">/dev/tty01</EM
>)
instead of the IP network interface (<em class="emphasis">sl0</EM
>). That is because the
SLIP IP interface does not exist until after <b class="emphasis.bold">slattach</B
> executes.
The first <b class="emphasis.bold">slattach</B
> command creates the sl0 interface, the second
creates the sl1 interface, and so on. <b class="emphasis.bold">slattach</B
> attaches a physical
interface to the logical IP network.</P
><p class="para">Like <b class="emphasis.bold">ifconfig</B
>, the <b class="emphasis.bold">slattach</B
> command is stored in a startup
file. It configures the serial interface when the system boots,
and the interface remains dedicated to SLIP use unless some action is
taken to detach it, i.e., the <b class="emphasis.bold">slattach</B
> process is killed. On a
Slackware 96 Linux system the following commands might be added to the
<em class="emphasis">/etc/rc.d/rc.inet1</EM
> file to configure a dedicated SLIP connection:</P
><p class="para"><blockquote class="screen"><pre class="screen">slattach -c /dev/tty01 19200 &amp;
ifconfig sl0 macadamia pointopoint cashew
route add default cashew 1</PRE
></BLOCKQUOTE
></P
><p class="para">The <b class="emphasis.bold">pppd</B
> dedicated line configuration requires only one command.
The <b class="emphasis.bold">slattach</B
> command needs an <b class="emphasis.bold">ifconfig</B
> command<a class="indexterm" name="AUTOID-7169"></A
>
and a<a class="indexterm" name="AUTOID-7171"></A
>
<b class="emphasis.bold">route</B
> command to complete the configuration. The <b class="emphasis.bold">route</B
>
command is explained in <a class="xref" href="ch07_01.htm" title="Configuring Routing ">Chapter 7, <cite class="chapter">Configuring Routing </CITE
></A
>.</P
><p class="para">The <b class="emphasis.bold">slattach</B
> command declares that the physical serial device
<em class="emphasis">/dev/tty01</EM
> is the SLIP network interface. In essence this creates the
interface sl0. The <b class="emphasis.bold">ifconfig</B
> command configures the newly created
SLIP interface. It sets the address of the interface to the IP address
of host <em class="emphasis">macadamia</EM
>. Further, it says that the destination address of
this interface is the IP address of the host <em class="emphasis">cashew</EM
> at the far end
of the dedicated SLIP link. The IP addresses for both <em class="emphasis">macadamia</EM
> and
<em class="emphasis">cashew</EM
> should be in the local hosts file before this <b class="emphasis.bold">ifconfig</B
>
command is executed.</P
><p class="para">The examples in this section all use the syntax of the <b class="emphasis.bold">slattach</B
>
command that comes with Slackware 96 Linux. SLIP commands are not
standardized. The command that comes with your system will probably
have a different syntax; carefully read your system's documentation so
you'll know the exact syntax used on your system. For example, other
versions of Linux use this syntax:</P
><p class="para"><blockquote class="screen"><pre class="screen"><code class="userinput"><b>slattach</B
></CODE
> [<code class="userinput"><b>-p </B
></CODE
><code class="replaceable"><i>protocol</I
></CODE
>] [<code class="userinput"><b>-s </B
></CODE
><code class="replaceable"><i>speed</I
></CODE
>] <code class="replaceable"><i>device</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">Here the various SLIP protocols are selected with the <b class="emphasis.bold">-p</B
>
option. The acceptable <em class="emphasis">protocol</EM
> values are: <b class="emphasis.bold">slip</B
>,
<b class="emphasis.bold">cslip</B
>, <b class="emphasis.bold">slip6</B
>, <b class="emphasis.bold">cslip6</B
>, and <b class="emphasis.bold">adaptive</B
>. If<a class="indexterm" name="AUTOID-7204"></A
>
<b class="emphasis.bold">adaptive</B
> is selected, the system tries to determine which protocol
is acceptable to the remote system. The <b class="emphasis.bold">-s</B
> option sets the line
speed, e.g., <b class="emphasis.bold">-s 56000</B
>. The <b class="emphasis.bold">device</B
> is one of the <em class="emphasis">call
units</EM
> configured on the system. Examples of valid call unit device
names are cua0, cua1, cua2, cua3, etc. The device names from cua0 to
cua3 correspond to the MS-DOS devices COM1 to COM4. A call unit is
normally associated with dial communications.</P
><p class="para"><b class="emphasis.bold">slattach</B
> expects the physical connection to the remote system
to exist when <b class="emphasis.bold">slattach</B
> is invoked. The physical connection can
be a direct connection, a leased line, or a dial line. But if a dial-up
connection is used, some process, such as <b class="emphasis.bold">cu</B
> or <b class="emphasis.bold">tip</B
>, must
establish the physical connection before <b class="emphasis.bold">slattach</B
> is invoked.
As we have seen, <b class="emphasis.bold">dip</B
> is a command that is specifically designed to
support dial-up IP connections.<a class="indexterm" name="AUTOID-7218"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="TCP2-CH-6-SECT-4.2">6.4.2 Dial-Up IP </A
></H3
><p class="para"><a class="indexterm" name="TCP2-CH-6-IX-DIAL-UP-IP-DIP"></A
><a class="indexterm" name="TCP2-CH-6-IX-DIAL-UP-IP-DIP2"></A
>Earlier in this chapter we used <b class="emphasis.bold">dip</B
> to create a dial-up PPP
connection. <b class="emphasis.bold">dip</B
> can also be used for SLIP. It is actually
quite simple. A slight modification of the <b class="emphasis.bold">dip</B
> script<a class="indexterm" name="AUTOID-7229"></A
><a class="indexterm" name="AUTOID-7233"></A
>
used earlier creates a SLIP link. The following script connects a PC named
<em class="emphasis">macadamia</EM
> to a SLIP server named <em class="emphasis">cashew</EM
>:</P
><p class="para"><blockquote class="screen"><pre class="screen"># Set the local and remote addresses
get $locip 172.16.15.1
get $rmtip 172.16.15.3
# Select the port and set the line speed
port cua1
speed 38400
# Reset the modem and flush the terminal
reset
flush
# Dial the SLIP server and wait for the CONNECT response
dial *70,301-555-1234
wait CONNECT
# Wait 2 seconds for the remote server to get ready
sleep 2
# Send a carriage-return to wake up the server
send \r
# Wait for the Login&gt; prompt and send the username
wait ogin&gt;
send kristin\r
# Wait for the Password&gt; prompt and send the password
wait word&gt;
password
# Wait for the SLIP server's command line prompt
wait &gt;
# Send the command required by the SLIP server
send set cslip enabled\r
# Select the SLIP interface as the default route
default
# Set the interface to CSLIP mode
mode CSLIP
# Exit the script
exit</PRE
></BLOCKQUOTE
></P
><p class="para">Modifications to a few lines from the PPP script were required to
create a SLIP dial-up script. Obvious changes replace the remote
server's PPP command with a SLIP command and change the <b class="emphasis.bold">mode</B
>
command in the script to invoke SLIP instead of PPP. We also added
some new lines to perform tasks for SLIP that PPP can do on its own.</P
><p class="para">The script begins by setting the local IP address and the remote IP
address. <code class="literal">$locip</CODE
> and <code class="literal">$rmtip</CODE
> are script variables
used to identify the
hosts at both ends of the link, which is analogous to the
<b class="emphasis.bold">pointopoint</B
> parameter on the <b class="emphasis.bold">ifconfig</B
> command that we saw
in the previous section. The two <b class="emphasis.bold">get</B
> statements<a class="indexterm" name="AUTOID-7249"></A
>
set the local interface to the address 172.16.15.1 and
the destination address to
172.16.15.3. SLIP does not have a standard way within the protocol to
exchange addresses. We had to add specific local and remote IP
addresses to the script.</P
><p class="para">The <b class="emphasis.bold">default</B
> statement near the end of the script says that the
SLIP connection is the local system's default route. Since SLIP is
most often used to connect small isolated systems into the network,
this is usually true. This statement performs the same function as the
<b class="emphasis.bold">route</B
> command in the <b class="emphasis.bold">slattach</B
> example or the
<b class="emphasis.bold">defaultroute</B
> option in the <em class="emphasis">/etc/ppp/options</EM
> file.<a class="indexterm" name="AUTOID-7257"></A
><a class="indexterm" name="AUTOID-7258"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="TCP2-CH-6-SECT-4.3">6.4.3 SLIP Server Configuration </A
></H3
><p class="para"><a class="indexterm" name="TCP2-CH-6-IX-SERIAL-LINE-IP-SLIP-SERVER-CONFIGURATION"></A
>So far, we have used <b class="emphasis.bold">dip</B
> to establish a dial-in SLIP link to a
remote server. <b class="emphasis.bold">dip</B
> can also provide the server side of a SLIP
connection. The <b class="emphasis.bold">-i</B
> option sets <b class="emphasis.bold">dip</B
> to input mode, which
configures the system to act as a dial-in server. An alternative, and
more popular, way to invoke <b class="emphasis.bold">dip</B
> with the <b class="emphasis.bold">-i</B
> option is to use
the <b class="emphasis.bold">diplogin</B
> command.<a class="indexterm" name="AUTOID-7272"></A
>
<b class="emphasis.bold">diplogin</B
> is symbolically linked to the
<b class="emphasis.bold">dip</B
> command and is exactly the same as specifying <b class="emphasis.bold">dip</B
> with
the <b class="emphasis.bold">-i</B
> option. We'll use <b class="emphasis.bold">diplogin</B
> throughout this section.</P
><p class="para"><b class="emphasis.bold">diplogin</B
> is used as the login shell for dial-in SLIP users.
The system administrator puts <b class="emphasis.bold">diplogin</B
> in the <em class="emphasis">/etc/passwd</EM
><a class="indexterm" name="AUTOID-7283"></A
><a class="indexterm" name="AUTOID-7286"></A
>
entry for each remote SLIP user as the user's login shell. For example:</P
><p class="para"><blockquote class="screen"><pre class="screen">craig:wJxX.iPuPzg:101:100:Craig Hunt:/tmp:/sbin/diplogin</PRE
></BLOCKQUOTE
></P
><p class="para">&#13;<b class="emphasis.bold">login</B
> verifies the username and password, assigns the user
<em class="emphasis">/tmp</EM
> as a home directory and starts his login shell. In this
case the shell is <b class="emphasis.bold">diplogin</B
>.</P
><p class="para"><a class="indexterm" name="TCP2-CH-6-IX-ETC-DIPHOSTS-FILE"></A
><a class="indexterm" name="AUTOID-7298"></A
>The <b class="emphasis.bold">diplogin</B
> program then tries to find an entry for the user
in the <em class="emphasis">/etc/diphosts</EM
> file. It searches for the username that was
entered during the login process unless that username is overridden by
another directly on the <b class="emphasis.bold">diplogin</B
> command line. For example:
when the <b class="emphasis.bold">/etc/passwd</B
> entry shown above starts <b class="emphasis.bold">diplogin</B
>,
the username <em class="emphasis">craig</EM
> is used to search the <em class="emphasis">/etc/diphosts</EM
> file. 
Conversely, in the <em class="emphasis">/etc/passwd</EM
> entry shown below, the 
username <em class="emphasis">essex</EM
> that appears after the <b class="emphasis.bold">diplogin</B
> command 
is used for the search.</P
><p class="para"><blockquote class="screen"><pre class="screen">hunt:AbxdkiThinR:102:100:Rebecca Hunt:/tmp:/sbin/diplogin essex</PRE
></BLOCKQUOTE
></P
><p class="para">The format of entries in the <em class="emphasis">/etc/diphost</EM
> file is:</P
><p class="para"><em class="emphasis">user</EM
><b class="emphasis.bold">:</B
><em class="emphasis">password</EM
><b class="emphasis.bold">:</B
><em class="emphasis">remote-host</EM
><b class="emphasis.bold">:</B
><em class="emphasis">local-host</EM
><b class="emphasis.bold">:</B
><em class="emphasis">netmask</EM
><b class="emphasis.bold">:</B
><em class="emphasis">comment</EM
><b class="emphasis.bold">:</B
><em class="emphasis">protocol</EM
><b class="emphasis.bold">,</B
><em class="emphasis">mtu</EM
></P
><dl class="variablelist"><dt class="term"><em class="emphasis">user</EM
></DT
><dd class="listitem"><p class="para">A username. This is the key field against which a username from the
<em class="emphasis">/etc/passwd</EM
> file or from an argument on the <b class="emphasis.bold">diplogin</B
> command
line is matched.</P
></DD
><dt class="term"><em class="emphasis">password</EM
></DT
><dd class="listitem"><p class="para">An unencrypted password, the keyword <code class="literal">s/key</CODE
>, or null (an
empty field). If an unencrypted password is entered in this field,
<b class="emphasis.bold">diplogin</B
> prompts the user for the password.
This is in addition to the standard password from the <em class="emphasis">/etc/passwd</EM
>
file that the user has already been required to enter. Because this
second password is stored in an unencrypted format, it is not considered
very secure. Sites that are big on security don't consider any reusable
passwords secure enough to be meaningful, and sites that don't worry too
much about security don't consider a second password necessary.
For these reasons, the unencrypted password is rarely used. If this
field contains the keyword <code class="literal">s/key</CODE
>, <b class="emphasis.bold">diplogin</B
> invokes S/Key
authentication. This requires that S/Key support is compiled into
<b class="emphasis.bold">diplogin</B
>, and that S/Key is installed in your system. Because S/Key
is a one-time password system, it's considered very secure. However, it
is a headache for users and system administrators. See <a class="xref" href="ch12_01.htm" title="Network Security ">Chapter 12, <cite class="chapter">Network Security </CITE
></A
>
for a full discussion of one-time passwords. If the password field
is null, the authentication is left to <b class="emphasis.bold">login</B
> and the user is not
asked for a second password.</P
></DD
><dt class="term"><em class="emphasis">remote-host</EM
></DT
><dd class="listitem"><p class="para">The hostname or IP address of the remote host; i.e., the computer from
which the user is logging in.</P
></DD
><dt class="term"><em class="emphasis">local-host</EM
></DT
><dd class="listitem"><p class="para">The hostname or IP address of the local host; i.e., the computer on
which this SLIP server is running.</P
></DD
><dt class="term"><em class="emphasis">netmask</EM
></DT
><dd class="listitem"><p class="para">The network mask for the serial interface written in dotted decimal
notation, such as 255.255.0.0. If no value is provided the netmask
defaults to 255.255.255.0, regardless of the class of addresses used on
the network.</P
></DD
><dt class="term"><em class="emphasis">comment</EM
></DT
><dd class="listitem"><p class="para">A free-form comment field, similar to the <code class="literal">gcos</CODE
> field in the
<em class="emphasis">/etc/passwd</EM
> file.</P
></DD
><dt class="term"><em class="emphasis">protocol</EM
><b class="emphasis.bold">,</B
><em class="emphasis">mtu</EM
></DT
><dd class="listitem"><p class="para">The IP protocol and the maximum transmission unit used for this
connection. Possible protocol values are SLIP, CSLIP, and PPP.
The MTU is any valid transmission unit specified in bytes.
The largest MTU used on SLIP lines is generally 1006 bytes. However,
SLIP performance is often improved by smaller packet sizes.
Common choices are 512 and 256.</P
></DD
></DL
><p class="para">Assuming the two <em class="emphasis">/etc/passwd</EM
> entries shown above, we might have
an <em class="emphasis">/etc/diphosts</EM
> file with the following entries:</P
><p class="para"><blockquote class="screen"><pre class="screen">craig::cashew:macadamia:255.255.255.240:Craig Hunt:CSLIP,512
essex::essex:macadamia::Remote client essex.nuts.com:PPP,1006</PRE
></BLOCKQUOTE
></P
><p class="para">When the <b class="emphasis.bold">login</B
> authenticates the user <em class="emphasis">craig</EM
>, it starts
<b class="emphasis.bold">diplogin</B
> as the login shell. <b class="emphasis.bold">diplogin</B
> finds the entry
for <em class="emphasis">craig</EM
>, does not prompt for a second password, sets the local
address to <em class="emphasis">macadamia</EM
> and the remote address to <em class="emphasis">cashew</EM
>, and
starts a CSLIP server using an MTU of 512. However, if the user
<em class="emphasis">hunt</EM
> logs into the system, <b class="emphasis.bold">login</B
> starts <b class="emphasis.bold">diplogin</B
> with
the username <em class="emphasis">essex</EM
>. The <em class="emphasis">/etc/diphosts</EM
> entry for <em class="emphasis">essex</EM
>
starts a PPP server with a local address of <em class="emphasis">macadamia</EM
>, a remote
address of <em class="emphasis">essex</EM
> and an MTU of 1006. The <em class="emphasis">essex</EM
> entry
allows the netmask to default to 255.255.255.0. The servers started by
<b class="emphasis.bold">diplogin</B
> run until the modem hangs up the connection.<a class="indexterm" name="AUTOID-7403"></A
></P
><p class="para">Clearly <b class="emphasis.bold">dip</B
> is more than just a <b class="emphasis.bold">chat</B
> script. It provides client
and server support for a variety of protocols. See <a class="xref" href="appa_01.htm" title="PPP Tools">Appendix A</A
> for more
information about <b class="emphasis.bold">dip</B
>.<a class="indexterm" name="AUTOID-7409"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="TCP2-CH-6-SECT-4.4">6.4.4 Troubleshooting Serial Connections </A
></H3
><p class="para"><a class="indexterm" name="TCP2-CH-6-IX-SERIAL-PROTOCOLS-DEBUGGING"></A
><a class="indexterm" name="TCP2-CH-6-IX-TROUBLESHOOTING-SERIAL-CONNECTIONS"></A
>There are several layers of complexity that make PPP and SLIP connections
difficult to debug. To set up PPP and SLIP, we must set up the serial
port, configure the modem, configure PPP or SLIP, and configure TCP/IP.
A mistake in any one of these layers can cause a problem in another layer.
All of these layers can obscure the true cause of a problem. The best
way to approach troubleshooting on a serial line is by debugging
each layer, one layer at a time. It is usually best to troubleshoot each
layer before you move on to configure the next layer.</P
><p class="para">The physical serial ports<a class="indexterm" name="AUTOID-7421"></A
>
should be configured by the system during
the system boot. Check the <em class="emphasis">/dev</EM
> directory<a class="indexterm" name="AUTOID-7425"></A
>
to make sure they are
configured. On a Linux system the in-bound serial ports are <em class="emphasis">/dev/ttyS0</EM
>
through <em class="emphasis">/dev/ttyS3</EM
> and the out-bound serial ports are <em class="emphasis">/dev/cua0</EM
> 
through <em class="emphasis">/dev/cua3</EM
>. There are many more tty*<a class="indexterm" name="AUTOID-7431"></A
>
and cua* <a class="indexterm" name="AUTOID-7433"></A
>
device names. However, the other devices are only associated 
with real physical devices if you have a
multi-port serial card installed in your Linux system. Most UNIX systems
use the names tty* and cua*, even if those names are just symbolic links
to the real devices. Solaris 2.5.1 is a good example:</P
><p class="para"><blockquote class="screen"><pre class="screen">% ls -l /dev/tty?
lrwxrwxrwx 1 root root 6 Sep 23  1996 /dev/ttya -&gt; term/a
lrwxrwxrwx 1 root root 6 Sep 23  1996 /dev/ttyb -&gt; term/b
% ls -l /dev/cua/*
lrwxrwxrwx 1 root root 35 Sep 23 1996 /dev/cua/a -&gt;
     /devices/obio/zs@0,100000:a,cu
lrwxrwxrwx 1 root root 35 Sep 23 1996 /dev/cua/b -&gt;
     /devices/obio/zs@0,100000:b,cu</PRE
></BLOCKQUOTE
></P
><p class="para">If the serial devices do not show up in the <em class="emphasis">/dev</EM
> directory,
they can be manually added<a class="indexterm" name="AUTOID-7439"></A
>
with a <b class="emphasis.bold">mknod</B
> command.<a class="indexterm" name="AUTOID-7443"></A
>
For example, the following commands create the serial
devices for the first serial port on a Linux system:</P
><p class="para"><blockquote class="screen"><pre class="screen"># mknod -m 666 /dev/cua0 c 5 64
# mknod -m 666 /dev/ttyS0 c 4 64</PRE
></BLOCKQUOTE
></P
><p class="para">However, if you need to add the serial devices manually, there may be
a problem with the kernel configuration. The serial devices should be
installed in your system by default during the boot.</P
><p class="para"><a class="indexterm" name="TCP2-CH-6-IX-MODEMS-CHECKING-CONFIGURATION-OF"></A
>The modem used for the connection is attached to one of the
serial ports. Before attempting to build a dial-up script, make sure
the modem works and that you can communicate with it through the port.
Use a simple serial communications package,<a class="indexterm" name="AUTOID-7452"></A
>
such as <b class="emphasis.bold">minicom</B
>,
<b class="emphasis.bold">kermit</B
>, or <b class="emphasis.bold">seyon</B
>. First, make sure the program is configured to
use your modem. It must be set to the correct port, speed,
parity, number of databits, etc. Check your
modem's documentation to determine these settings.<a class="indexterm" name="AUTOID-7458"></A
></P
><p class="para"><a class="indexterm" name="TCP2-CH-6-IX-MINICOM"></A
>We'll use <b class="emphasis.bold">minicom</B
> on a Linux system
for our examples. To configure <b class="emphasis.bold">minicom</B
>,
<b class="emphasis.bold">su</B
> to <em class="emphasis">root</EM
> and run it with the <b class="emphasis.bold">-s</B
> option, which displays
a configuration menu. Walk through the menu and make sure everything
is properly set. One thing you might notice is that the port is
set to <em class="emphasis">/dev/modem</EM
>. That device name is sometimes symbolically
linked to the port to which the modem is connected. If you're not
sure that the link exists on your system, enter the correct port name
in the <b class="emphasis.bold">minicom</B
> configuration, e.g., <em class="emphasis">/dev/cua1</EM
>. After checking the
configuration, exit the menu and use the <b class="emphasis.bold">minicom</B
> terminal emulator
to make sure you can communicate with the modem:</P
><p class="para"><blockquote class="screen"><pre class="screen">Minicom 1.71 Copyright (c) Miquel van Smoorenburg
Press CTRL-A Z for help on special keys

AT S7=45 S0=0 L1 V1 X4 &amp;c1 E1 Q0
OK
<b class="emphasis.bold">atz</B
>                                                 
OK                                                   
<b class="emphasis.bold">atdt555-1234</B
>                                         
CONNECT 26400/LAPM-V
<b class="emphasis.bold">^M</B
>                                 
Enter login&gt; <b class="emphasis.bold">kristin</B
>
Enter user password&gt; <b class="emphasis.bold">Wats?Watt?</B
>

   Welcome to the PPP MODEM POOL

PORT-9&gt; <b class="emphasis.bold">set port ppp enabled 
+++</B
>
OK
<b class="emphasis.bold">ath</B
>
OK
<b class="emphasis.bold">atz</B
>
OK
<b class="emphasis.bold">^A</B
>
CTRL-A Z for help | 38400 8N1 | NOR | Minicom 1.71 1995 | VT102 |
     Offline
<b class="emphasis.bold">X</B
></PRE
></BLOCKQUOTE
></P
><p class="para">In the sample, <b class="emphasis.bold">minicom</B
> displays two header lines and then sends a
Hayes command (<code class="literal">AT</CODE
>) to the modem. We didn't set this command; it was
part of the default <b class="emphasis.bold">minicom</B
> configuration. (If it causes
problems, edit it out of the configuration using the menus discussed
previously.) We then reset the modem (<b class="emphasis.bold">atz</B
>) and dial the remote
server (<b class="emphasis.bold">atdt</B
>). When the modems connect, we log in to the server
and configure it. (The login process is different for every remote
server; this is just an example.) Everything appears to be running
fine, so we end the connection by getting the modem's attention
(<b class="emphasis.bold">+++</B
>), hanging up the line (<b class="emphasis.bold">ath</B
>), and resetting the
modem. Exit <b class="emphasis.bold">minicom</B
> by pressing CTRL-A followed by X.<a class="indexterm" name="AUTOID-7494"></A
>
On our
sample system the port and modem are working. If you cannot send
simple commands to your modem, check that:</P
><ul class="itemizedlist"><li class="listitem"><p class="para">The modem is properly connected to the port</P
></LI
><li class="listitem"><p class="para">You have the correct cables</P
></LI
><li class="listitem"><p class="para">The modem is powered up</P
></LI
><li class="listitem"><p class="para">The modem is properly configured for dial-out and for echoing
commands</P
></LI
></UL
><p class="para">When the modem responds to simple commands, use it to dial the remote
server as we did in the example above. If the modem fails to dial the
number or displays the message NO DIALTONE, check that the telephone
line is connected to the correct port of the modem and to the wall
jack. You may need to use an analog phone to test the telephone wall
jack and you may need to replace the line between the modem and the
wall to make sure that the cable is good.<a class="indexterm" name="AUTOID-7505"></A
>
If the modem dials but fails
to successfully connect to the remote modem, check that the local modem
configuration matches the configuration required by the remote system.
You must know the requirements of that remote system to successfully
debug a connection.<a class="indexterm" name="TCP2-CH-6-IX-SCRIPT-FILES-DEBUGGING-TIPS"></A
>
See the following list of script debugging tips for
some hints on what to check. If you can successfully connect to the
remote system, note everything you entered to do so, and note everything
that the modem and the remote server display. Then set the remote server to PPP
or SLIP mode and note how you accomplished this. You
will need to duplicate all of these steps in your <b class="emphasis.bold">dip</B
> script.</P
><p class="para">Start with a bare-bones script, like the sample <em class="emphasis">start-ppp.dip</EM
>
script, so that you can debug the basic connection before adding the
complexity of error processing to the script. Run the script through
<b class="emphasis.bold">dip</B
> using the verbose option (<b class="emphasis.bold">-v</B
>) option.<a class="indexterm" name="AUTOID-7516"></A
>
This displays each line of the script as it is processed.
Look for the following problems:</P
><ul class="itemizedlist"><li class="listitem"><p class="para">The modem does not respond to the script. Check that you are using the
correct device on the <b class="emphasis.bold">port</B
> command. Make sure that if the script
contains <b class="emphasis.bold">databits</B
>, <b class="emphasis.bold">parity</B
>, <b class="emphasis.bold">speed</B
>, or <b class="emphasis.bold">stopbits</B
>
commands that they are set to values compatible with your modem.
Double-check that the modem is Hayes-compatible,<a class="indexterm" name="AUTOID-7526"></A
>
particularly if you
attempt to do modem configuration using <b class="emphasis.bold">dip</B
> keywords instead of
using <b class="emphasis.bold">send</B
>.</P
></LI
><li class="listitem"><p class="para">The modem fails to connect to the remote host. Make sure the modem
is configured exactly as it was during the manual login. The modem's
databits, parity, etc. need to match the configuration of the remote
system. It is possible that you will need a special configuration,
for example, 7-bit/even-parity, to perform the login before you can
switch to the 8-bit/no-parity configuration required by PPP and SLIP.
Don't forget to check that the phone number entered in the <b class="emphasis.bold">dial</B
>
command is correct, particularly if the modem displays VOICE, RING -
NO ANSWER, or BUSY when you expect to see CONNECT.</P
></LI
><li class="listitem"><p class="para">The script hangs. It is probably waiting for a response. Make sure
that the string in each <b class="emphasis.bold">wait</B
> command is correct. Remember that the
string only needs to be a subset of the response. It is better to use the
string &quot;<code class="literal">&gt;</CODE
>&quot; than it is to use &quot;<code class="literal">Port9&gt;</CODE
>&quot; if you are not sure
whether the remote
system always displays the same port number. Use a substring from the end
of the expected response so that the script does not send to the server
before the server is ready for input. Also try putting a delay into<a class="indexterm" name="AUTOID-7539"></A
>
the script just before the script sends the first command to the server,
e.g., <b class="emphasis.bold">sleep 2</B
> to delay 2 seconds. A delay is sometimes needed to
allow the server to initialize the port after the modems connect.</P
></LI
><li class="listitem"><p class="para">The remote server displays an error message. The script probably
sent an incorrect value. Check the string in each <b class="emphasis.bold">send</B
> command.
Make sure they terminate with the correct carriage-return or line-feed
combination expected by the remote server.</P
></LI
></UL
><p class="para">If you have trouble with the script, try running <b class="emphasis.bold">dip</B
> in test mode
(<b class="emphasis.bold">-t</B
>), which allows you to enter each command manually one at
a time. Do this repeatedly until you are positive that you know all
the commands needed to log in to the remote server. Then go back to
debugging the script. You'll probably have fresh insight into the login
process that will help you find the flaw in the script.<a class="indexterm" name="AUTOID-7548"></A
><a class="indexterm" name="AUTOID-7549"></A
></P
><p class="para">Once the script is running and the connection is successfully made,
things should run smoothly. You should be able to<a class="indexterm" name="AUTOID-7551"></A
>
<b class="emphasis.bold">ping</B
> the remote
server without difficulty. If you have problems they may be in the IP
interface configuration or in the default route. The script should have
created the serial interface. The <b class="emphasis.bold">netstat -ni</B
><a class="indexterm" name="AUTOID-7555"></A
>
command shows
which interfaces have been configured:</P
><p class="para"><blockquote class="screen"><pre class="screen"># <code class="userinput"><b>netstat -ni</B
></CODE
>
Name Mtu  Net/Dest     Address     Ipkts Ierrs Opkts Oerrs Collis Queue
le0  1500 172.16.15.0  172.16.15.1      1     0    4     0      0     0
lo0  1536 127.0.0.0    127.0.0.1     1712     0 1712     0      0     0
ppp0 1006 172.16.15.26 172.16.15.3      0     0    0     0      0     0</PRE
></BLOCKQUOTE
></P
><p class="para">The interface, ppp0 in the example, has been installed. The <b class="emphasis.bold">default</B
>
command in the script creates a default route. Use <b class="emphasis.bold">netstat</B
> to see
the contents of the routing table:<a class="indexterm" name="AUTOID-7564"></A
></P
><p class="para"><blockquote class="screen"><pre class="screen"># <code class="userinput"><b>netstat -nr</B
></CODE
>
Routing tables
Destination      Gateway          Flags  Refcnt  Use Interface
127.0.0.1        127.0.0.1           UH      1    28      lo0
default          172.16.25.3          U      0     0      ppp0
172.16.15.0      172.16.15.1          U      21 1687      le0</PRE
></BLOCKQUOTE
></P
><p class="para">The contents of routing tables are explained in detail in the next
chapter. For now, just notice that interface used for the default
route is ppp0, and that the default route is a route to the remote PPP
server (172.16.25.3 in the example).</P
><p class="para">If the script creates the connection, the interface is installed, and the
routing table contains the default route, everything should work fine.
If you still have problems they may be related to other parts of the
TCP/IP installation. Refer to <a class="xref" href="ch11_01.htm" title="Troubleshooting TCP/IP ">Chapter 11, <cite class="chapter">Troubleshooting TCP/IP </CITE
></A
>, for more troubleshooting
information.<a class="indexterm" name="AUTOID-7574"></A
><a class="indexterm" name="AUTOID-7575"></A
><a class="indexterm" name="AUTOID-7576"></A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch06_03.htm#TCP2-CH-6-SECT-3.3" title="6.3 Installing PPP "><img src="../gifs/txtpreva.gif" alt="Previous: 6.3 Installing PPP " border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="TCP/IP Network Administration"><img src="../gifs/txthome.gif" alt="TCP/IP Network Administration" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch06_05.htm" title="6.5 Summary "><img src="../gifs/txtnexta.gif" alt="Next: 6.5 Summary " border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">6.3 Installing PPP </TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">6.5 Summary </TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.htm" title="The Networking CD Bookshelf">Library Home</A
> | <a href="../dnsbind/index.htm" title="DNS &amp; BIND">DNS &amp; BIND</A
> | <a href="index.htm" title="TCP/IP Network Administration">TCP/IP</A
> | <a href="../sendmail/index.htm" title="sendmail">sendmail</A
> | <a href="../smdref/index.htm" title="sendmail Desktop Reference">sendmail Reference</A
> | <a href="../firewall/index.htm" title="Building Internet Firewalls">Firewalls</A
> | <a href="../puis/index.htm" title="Practical UNIX &amp; Internet Security">Practical Security</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
