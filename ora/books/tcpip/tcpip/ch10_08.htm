<html><head>
<title>[Chapter 10] 10.8 Testing sendmail.cf </TITLE>
<meta name="DC.title" content="TCP/IP Network Administration"><meta name="DC.creator" content="Craig Hunt"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-02-04T01:39:58Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-322-7" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch10_01.htm" title="10. sendmail "><link rel="prev" href="ch10_07.htm#TCP2-CH-10-SECT-7.1" title="10.7 Modifying a sendmail.cf File "><link rel="next" href="ch10_09.htm" title="10.9 Summary "></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="TCP/IP Network Administration" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="TCP/IP Network Administration"><area shape="RECT" coords="467,0,514,18" href="../search/tsrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch10_07.htm#TCP2-CH-10-SECT-7.1" title="10.7 Modifying a sendmail.cf File "><img src="../gifs/txtpreva.gif" alt="Previous: 10.7 Modifying a sendmail.cf File " border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 10<br>sendmail </FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch10_09.htm" title="10.9 Summary "><img src="../gifs/txtnexta.gif" alt="Next: 10.9 Summary " border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="TCP2-CH-10-SECT-8">10.8 Testing sendmail.cf </A
></H2
><p class="para"><a class="indexterm" name="TCP2-CH-10-IX-SENDMAIL-CF-FILE-TESTING"></A
>sendmail provides powerful tools for configuration testing and
debugging. These test tools are invoked on the sendmail command
line using some of the many sendmail command-line arguments.
<a class="xref" href="appe_01.htm" title="A sendmail Reference">Appendix E</A
> lists all of the command-line arguments;
<a class="xref" href="#TCP2-CH-10-TAB-5" title="sendmail Arguments for Testing and Debugging">Table 10.6</A
>
summarizes those that relate to testing and debugging.<a class="indexterm" name="AUTOID-14781"></A
>&#13;</P
><table class="table"><caption class="table"><a class="title" name="TCP2-CH-10-TAB-5">Table 10.6: sendmail Arguments for Testing and Debugging</A
></CAPTION
><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1">Argument</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Function</TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">-t</B
></TD
><td class="entry" rowspan="1" colspan="1">Send to everyone listed in To:, Cc:, and Bcc:.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">-bt</B
></TD
><td class="entry" rowspan="1" colspan="1">Run in test mode.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">-bv</B
></TD
><td class="entry" rowspan="1" colspan="1">Verify addresses; don't collect or deliver mail.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">-bp</B
></TD
><td class="entry" rowspan="1" colspan="1">Print the mail queue.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">-C</B
><code class="replaceable"><i>file</I
></CODE
></TD
><td class="entry" rowspan="1" colspan="1">Use <code class="replaceable"><i>file</I
></CODE
> as the configuration file.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">-d</B
><code class="replaceable"><i>level</I
></CODE
></TD
><td class="entry" rowspan="1" colspan="1">Set debugging level.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">-O</B
><code class="replaceable"><i>option</I
></CODE
><b class="emphasis.bold">=</B
><code class="replaceable"><i>value</I
></CODE
></TD
><td class="entry" rowspan="1" colspan="1">Set <code class="replaceable"><i>option</I
></CODE
> to the specified <code class="replaceable"><i>value</I
></CODE
>.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">-e</B
></TD
><td class="entry" rowspan="1" colspan="1">Defines how errors are returned.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">-v</B
></TD
><td class="entry" rowspan="1" colspan="1">Run in verbose mode.</TD
></TR
></TBODY
></TABLE
><p class="para">Some command-line arguments are used to verify address<a class="indexterm" name="AUTOID-14837"></A
>
processing and to gain confidence in the new configuration.
Once you think your configuration will work, choose friends at
various sites and send them mail. Use the <b class="emphasis.bold">-C</B
> argument to read the
test configuration file and the <b class="emphasis.bold">-v</B
> argument to display the
details of the mail delivery. <b class="emphasis.bold">-v</B
> displays the complete SMTP
exchange between the two hosts.</P
><p class="para">By observing if your mailer properly connects to the remote mailer and
formats the addresses correctly, you'll get a good idea of how the
configuration is working. The following example is a test from
<em class="emphasis">peanut</EM
> using the <em class="emphasis">test.cf</EM
> configuration file we just
created:</P
><p class="para"><blockquote class="screen"><pre class="screen">peanut# <code class="userinput"><b>/usr/lib/sendmail -Ctest.cf -t -v</B
></CODE
>
To: craigh@ora.com
From: craig
Subject: Sendmail Test
Ignore this test.      
^D
craigh@ora.com... Connecting to ora.com. via smtp...
220-ruby.ora.com Sendmail 8.6.13/8.6.11 ready at Sat, 16 Nov 1996
220 ESMTP spoken here
&gt;&gt;&gt; EHLO peanut.nuts.com
250-ruby.ora.com Hello craig@peanut.nuts.com [172.16.12.2], pleased
     to meet you
250-EXPN
250-SIZE
250 HELP
&gt;&gt;&gt; MAIL From:&lt;craig@peanut.nuts.com&gt; SIZE=64
250 &lt;craig@peanut.nuts.com&gt;... Sender ok
&gt;&gt;&gt; RCPT To:&lt;craigh@ora.com&gt;
250 &lt;craigh@ora.com&gt;... Recipient ok
&gt;&gt;&gt; DATA
354 Enter mail, end with &quot;.&quot; on a line by itself
&gt;&gt;&gt; .
250 SAA27399 Message accepted for delivery
craigh@ora.com... Sent (SAA27399 Message accepted for delivery)
Closing connection to ora.com.
&gt;&gt;&gt; QUIT
221 ruby.ora.com closing connection</PRE
></BLOCKQUOTE
></P
><p class="para">We entered everything before the CTRL-D (^D). Everything after the
^D was displayed by sendmail. 
<a class="xref" href="#TCP2-CH-10-FIG-4" title="Verbose mail output">Figure 10.5</A
>
highlights some of
the important information in this display, and notes the sendmail
macros that relate to the highlighted material.</P
><h4 class="figure"><a class="title" name="TCP2-CH-10-FIG-4">Figure 10.5: Verbose mail output</A
></H4
><img class="graphic" src="figs/tcp2_1005.gif" alt="Figure 10.5"><p class="para">This test successfully transfers mail to a remote Internet site.
The sendmail output shows that <em class="emphasis">peanut</EM
> sent the
mail to <em class="emphasis">ora.com</EM
> via the <em class="emphasis">smtp</EM
> mail delivery program.
The sendmail greeting shows that the remote host handling this
SMTP connection is <em class="emphasis">ruby.ora.com</EM
>. Therefore, <em class="emphasis">ruby</EM
> must be
the mail server for the <em class="emphasis">ora.com</EM
> domain; i.e., the MX record for
<em class="emphasis">ora.com</EM
> points to <em class="emphasis">ruby.ora.com</EM
>.</P
><p class="para">The ESMTP<a class="indexterm" name="AUTOID-14865"></A
><a class="indexterm" name="AUTOID-14867"></A
><a class="indexterm" name="AUTOID-14870"></A
><a class="indexterm" name="AUTOID-14872"></A
>
and EHLO messages indicate that both <em class="emphasis">peanut</EM
> and <em class="emphasis">ruby</EM
>
use Extended Simple Mail Transfer Protocol (ESMTP).</P
><p class="para">Everything worked just fine! We could quit right now and use this
configuration. But like most computer people, we cannot stop ourselves
from tinkering in order to make things &quot;better.&quot;</P
><p class="para">The From: address, <em class="emphasis">craig@peanut.nuts.com</EM
>, is clearly a valid
address but it is not quite what we want. What we want is to have people
address us as <em class="emphasis">firstname.lastname@domain</EM
>&nbsp;- not as
<em class="emphasis">user@host.domain</EM
>, which is exactly the configuration we created
earlier in this chapter with a few lines of <b class="emphasis.bold">m4</B
> code. We will
create the same configuration here to provide an example of how to use
the various troubleshooting tools that come with sendmail. However, if
you really want to make major sendmail configuration changes, you
should use <b class="emphasis.bold">m4</B
> to build your configuration.</P
><p class="para">Most changes to <em class="emphasis">sendmail.cf</EM
> are small and are made near the
beginning of the file in the Local Information section. Looking
closely at that section provides the clues we need to solve part of
our configuration problem.</P
><p class="para">Without knowing what &quot;masquerading&quot; means,
the comments for class E, class M, and macro M lead us to guess that
the value set for macro M will be used to rewrite the hostname.
[22]
In particular, the comment &quot;names that should be exposed as from this
host, even if we masquerade&quot; led me to believe that masquerading hides
the hostname. Based on this guess, we set a value for macro M as
follows:</P
><blockquote class="footnote"><p class="para">[22] In the <b class="emphasis.bold">m4</B
> source file we configured masquerading with the
<b class="emphasis.bold">MASQUERADE_AS(nuts.com) command</B
>.</P
></BLOCKQUOTE
><p class="para"><blockquote class="screen"><pre class="screen"># who I masquerade as (null for no masquerading) (see also $=M)
DMnuts.com</PRE
></BLOCKQUOTE
></P
><p class="para">Are we sure that setting a value for the M macro will hide the
hostname? No, but changing the value in <em class="emphasis">test.cf</EM
> and running
another test will do no harm. Running the test program with the test
configuration has no affect on the running sendmail daemon that
was started by the <b class="emphasis.bold">sendmail -bd -q1h</B
> command in the boot script.
Only an instantiation of sendmail with the <b class="emphasis.bold">-Ctest.cf</B
> argument<a class="indexterm" name="AUTOID-14896"></A
>
will use the <em class="emphasis">test.cf</EM
> test configuration.</P
><div class="sect2"><h3 class="sect2"><a class="title" name="TCP2-CH-10-SECT-8.1">10.8.1 Testing Rewrite Rules </A
></H3
><p class="para"><a class="indexterm" name="TCP2-CH-10-IX-SENDMAIL-CF-FILE-TESTING-REWRITE-RULES"></A
>In the initial test, the From: address went into sendmail as
<em class="emphasis">craig</EM
>, and it came out as <em class="emphasis">craig@peanut.nuts.com</EM
>. Obviously it
has been rewritten. This time we test whether the change we made
to the macro M in the configuration files modifies the rewrite process
by directly testing the rewrite rulesets. First, we need to find out
what rules were used to rewrite this address. To get more information,
we run sendmail with the <b class="emphasis.bold">-bt</B
> option.</P
><p class="para">When sendmail is invoked with the <b class="emphasis.bold">-bt</B
> option, it prompts
for input using the greater than symbol (&gt;). At the prompt, enter one
of the test commands<a class="indexterm" name="AUTOID-14911"></A
>
shown in 
<a class="xref" href="#TCP2-CH-10-TAB-6" title="sendmail Testing Commands">Table 10.7</A
></P
><table class="table"><caption class="table"><a class="title" name="TCP2-CH-10-TAB-6">Table 10.7: sendmail Testing Commands</A
></CAPTION
><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1">Command</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Function</TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="replaceable"><i>ruleset</I
></CODE
>[,<code class="replaceable"><i>ruleset</I
></CODE
>]... <code class="replaceable"><i>address</I
></CODE
></TD
><td class="entry" rowspan="1" colspan="1">Process <code class="replaceable"><i>address</I
></CODE
> through <code class="replaceable"><i>ruleset</I
></CODE
>(s).</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">.D</B
><code class="replaceable"><i>mvalue</I
></CODE
></TD
><td class="entry" rowspan="1" colspan="1">Assign <code class="replaceable"><i>value</I
></CODE
> to macro <code class="replaceable"><i>m</I
></CODE
>.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">.C</B
><code class="replaceable"><i>cvalue</I
></CODE
></TD
><td class="entry" rowspan="1" colspan="1">Add <code class="replaceable"><i>value</I
></CODE
> to class <code class="replaceable"><i>c</I
></CODE
>.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">=S</B
><code class="replaceable"><i>ruleset</I
></CODE
></TD
><td class="entry" rowspan="1" colspan="1">Display the rules in <code class="replaceable"><i>ruleset</I
></CODE
>.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">=M</B
></TD
><td class="entry" rowspan="1" colspan="1">Display the mailer definitions.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">-d</B
><code class="replaceable"><i>value</I
></CODE
></TD
><td class="entry" rowspan="1" colspan="1">Set the debug flag to <code class="replaceable"><i>value</I
></CODE
>.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">$</B
><code class="replaceable"><i>m</I
></CODE
></TD
><td class="entry" rowspan="1" colspan="1">Display the value of macro <code class="replaceable"><i>m</I
></CODE
>.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">$=</B
><code class="replaceable"><i>c</I
></CODE
></TD
><td class="entry" rowspan="1" colspan="1">Display the contents of class <code class="replaceable"><i>c</I
></CODE
>.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">/mx </B
><code class="replaceable"><i>host</I
></CODE
></TD
><td class="entry" rowspan="1" colspan="1">Display the MX records for <code class="replaceable"><i>host</I
></CODE
>.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">/parse </B
><code class="replaceable"><i>address</I
></CODE
></TD
><td class="entry" rowspan="1" colspan="1">Return the mailer/host/user triple for <code class="replaceable"><i>address</I
></CODE
>.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">/try </B
><code class="replaceable"><i>mailer address</I
></CODE
></TD
><td class="entry" rowspan="1" colspan="1">Process <code class="replaceable"><i>address</I
></CODE
> for <code class="replaceable"><i>mailer</I
></CODE
>.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">/tryflags </B
><code class="replaceable"><i>flags</I
></CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Set the address processed by /parse or /try to <b class="emphasis.bold">H</B
> (Header), <b class="emphasis.bold">E</B
> (Envelope), <b class="emphasis.bold">S</B
> (Sender), or <b class="emphasis.bold">R</B
> (Recipient).</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">/canon </B
><code class="replaceable"><i>hostname</I
></CODE
></TD
><td class="entry" rowspan="1" colspan="1">Canonify <code class="replaceable"><i>hostname</I
></CODE
>.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">/map </B
><code class="replaceable"><i>mapname key</I
></CODE
></TD
><td class="entry" rowspan="1" colspan="1">Display the value for <code class="replaceable"><i>key</I
></CODE
> found in <code class="replaceable"><i>mapname</I
></CODE
>.</TD
></TR
></TBODY
></TABLE
><p class="para">The most basic test is a
ruleset number followed by an email address. The address is the test data,
and the ruleset number is the ruleset to be tested. The address is easy
to select; it is the one that was improperly rewritten. But how do you
know which ruleset to specify?</P
><p class="para">Use 
<a class="xref" href="ch10_06.htm#TCP2-CH-10-SECT-6.2.1" title="Sequence of rulesets">Figure 10.4</A
>
to determine which rulesets to enter. Ruleset 3
is applied to all addresses. It is followed by different rulesets
depending on whether the address is a delivery address, a sender address,
or a recipient address. Furthermore, the rulesets used for sender and
recipient addresses vary depending on the mailer that is used to deliver
the mail. All addresses are then processed by ruleset 4.</P
><p class="para">There are two variables in determining the rulesets used to process an
address: the type of address and the mailer through which it is processed.
The three address types are delivery address, recipient address, and sender
address. You know the address type because you select the address being
tested. In our test mail we were concerned about the sender address.<a class="indexterm" name="AUTOID-15020"></A
>
Which mailer is used is determined by the delivery address.
To find out which mailer delivered the test mail, run sendmail
with the <b class="emphasis.bold">-bv</B
> argument and the delivery address:</P
><p class="para"><blockquote class="screen"><pre class="screen"># <code class="userinput"><b>sendmail -bv craigh@ora.com</B
></CODE
>
craigh@ora.com... deliverable: mailer smtp, host ora.com.,
     user craigh@ora.com</PRE
></BLOCKQUOTE
></P
><p class="para">Knowing the mailer, we can use sendmail with the <b class="emphasis.bold">-bt</B
>
option to process the sender <code class="literal">From:</CODE
> address. There are two types of
sender addresses: the sender address in the &quot;envelope&quot; and the sender
address in the message header. The message header address is the one
on the <code class="literal">From:</CODE
> line sent with the message during the SMTP DATA transfer.
You probably see it in the mail headers when you view the message with
your mail reader. The &quot;envelope&quot; address is the address used during
the SMTP protocol interactions. sendmail allows us to view the
processing of both of these addresses:</P
><p class="para"><blockquote class="screen"><pre class="screen"># <code class="userinput"><b>/usr/lib/sendmail -bt -Ctest.cf</B
></CODE
>
ADDRESS TEST MODE (ruleset 3 NOT automatically invoked)
Enter &lt;ruleset&gt; &lt;address&gt;
&gt; <code class="userinput"><b>/tryflags HS</B
></CODE
>
&gt; <code class="userinput"><b>/try smtp craig</B
></CODE
>
Trying header sender address craig for mailer smtp
rewrite: ruleset  3   input: craig
rewrite: ruleset 96   input: craig
rewrite: ruleset 96 returns: craig
rewrite: ruleset  3 returns: craig
rewrite: ruleset  1   input: craig
rewrite: ruleset  1 returns: craig
rewrite: ruleset 31   input: craig
rewrite: ruleset 51   input: craig
rewrite: ruleset 51 returns: craig
rewrite: ruleset 61   input: craig
rewrite: ruleset 61 returns: craig &lt; @ *LOCAL* &gt;
rewrite: ruleset 93   input: craig &lt; @ *LOCAL* &gt;
rewrite: ruleset 93 returns: craig &lt; @ nuts . com . &gt;
rewrite: ruleset 31 returns: craig &lt; @ nuts . com . &gt;
rewrite: ruleset  4   input: craig &lt; @ nuts . com . &gt;
rewrite: ruleset  4 returns: craig @ nuts . com
Rcode = 0, addr = craig@nuts.com
&gt; <code class="userinput"><b>/tryflags ES</B
></CODE
>
&gt; <code class="userinput"><b>/try smtp craig</B
></CODE
>
Trying envelope sender address craig for mailer smtp
rewrite: ruleset  3   input: craig
rewrite: ruleset 96   input: craig
rewrite: ruleset 96 returns: craig
rewrite: ruleset  3 returns: craig
rewrite: ruleset  1   input: craig
rewrite: ruleset  1 returns: craig
rewrite: ruleset 11   input: craig
rewrite: ruleset 51   input: craig
rewrite: ruleset 51 returns: craig
rewrite: ruleset 61   input: craig
rewrite: ruleset 61 returns: craig &lt; @ *LOCAL* &gt;
rewrite: ruleset 94   input: craig &lt; @ *LOCAL* &gt;
rewrite: ruleset 94 returns: craig &lt; @ peanut . nuts . com . &gt;
rewrite: ruleset 11 returns: craig &lt; @ peanut . nuts . com . &gt;
rewrite: ruleset  4   input: craig &lt; @ peanut . nuts . com . &gt;
rewrite: ruleset  4 returns: craig @ peanut . nuts . com
Rcode = 0, addr = craig@peanut.nuts.com
&gt; <code class="userinput"><b>^D</B
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">The <b class="emphasis.bold">/tryflags</B
> command<a class="indexterm" name="AUTOID-15041"></A
>
defines the type of address to be
processed by a <b class="emphasis.bold">/try</B
> or a <b class="emphasis.bold">/parse</B
> command. Four flags are
available for the <b class="emphasis.bold">/tryflags</B
> command: <b class="emphasis.bold">S</B
> for sender, <b class="emphasis.bold">R</B
>
for recipient, <b class="emphasis.bold">H</B
> for header, and <b class="emphasis.bold">E</B
> for envelope. By
combining two of these flags, the first <b class="emphasis.bold">/tryflags</B
> command says
we will process a header sender (HS) address. The <b class="emphasis.bold">/try</B
> command<a class="indexterm" name="AUTOID-15052"></A
>
tells sendmail to process the address through a specific mailer. In
the example, we process the email address <em class="emphasis">craig</EM
> through the
mailer <em class="emphasis">smtp</EM
>. First, we process it as the header sender address,
and then as the envelope sender address.  From this test, we can tell
that the value that we entered in the <b class="emphasis.bold">M</B
> macro is used to rewrite
the sender address in the message header but it is not used to rewrite
the sender address in the envelope.</P
><p class="para">Unfortunately, older versions of sendmail, such as the version that comes
with Solaris 2.5.1, don't support <b class="emphasis.bold">/try</B
> and <b class="emphasis.bold">/tryflags</B
>. Testing
these older systems requires a little more effort. Knowing the mailer is
still the key to determining the rulesets called to process the sender
<code class="literal">From:</CODE
> address. A <b class="emphasis.bold">grep</B
> of the <em class="emphasis">test.cf</EM
> file displays the
rulesets that the <em class="emphasis">smtp</EM
> mailer uses for sender addresses.</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>grep ^Msmtp /etc/sendmail.cf</B
></CODE
>
Msmtp,     P=[IPC], F=mDFMuX, S=11/31, R=21, E=\r\n, L=990,
Msmtp8,    P=[IPC], F=mDFMuX8, S=11/31, R=21, E=\r\n, L=990,</PRE
></BLOCKQUOTE
></P
><p class="para">Again, refer to 
<a class="xref" href="ch10_06.htm#TCP2-CH-10-SECT-6.2.1" title="Sequence of rulesets">Figure 10.4</A
>
It shows that the sender address goes through ruleset 3, ruleset 1,
the ruleset specified by <b class="emphasis.bold">S</B
>, and ruleset 4.  The mailer definition for
<em class="emphasis">smtp</EM
> in our sample configuration defines two rulesets for <b class="emphasis.bold">S</B
>&nbsp;- 11
and 31.
[23]
The first ruleset is used for rewriting the sender address in the
&quot;envelope&quot; and the second is used to rewrite the sender address in the
message header.</P
><blockquote class="footnote"><p class="para">[23] Many versions of sendmail define only one ruleset each for S and R.</P
></BLOCKQUOTE
><p class="para">Based on the information in 
<a class="xref" href="ch10_06.htm#TCP2-CH-10-SECT-6.2.1" title="Sequence of rulesets">Figure 10.4</A
>
and in the S field of the
<em class="emphasis">smtp</EM
> mailer, we know that the rulesets that process the message
header sender address are 3, 1, 31 and 4. So we run sendmail
with the <b class="emphasis.bold">-bt</B
> option and enter <b class="emphasis.bold">3,1,31,4 craig</B
> at the
command prompt. This command processes the sender address through
each of these rulesets in succession. We also know that the envelope
sender address is processed by rulesets 3, 1, 11, and 4. To test that,
we enter <b class="emphasis.bold">3,1,11,4 craig</B
>.</P
><p class="para">The results of these tests are exactly the same as those shown in the
example above. The value of the M macro rewrites the hostname in the
message sender address just as we wanted. The hostname in the envelope
sender address is not rewritten. Usually this is acceptable. However,
we want to create exactly the same configuration as in the <b class="emphasis.bold">m4</B
>
example. The <b class="emphasis.bold">FEATURE(masquerade_envelope)</B
> command used in
the <b class="emphasis.bold">m4</B
> example causes the envelope sender address to be
rewritten.  Therefore, we want this configuration to also rewrite it.</P
><p class="para">The only difference between how the message and envelope addresses are
processed is that one goes through ruleset 31 and the other goes
through ruleset 11. The tests show that both rulesets call ruleset 51
and then ruleset 61. They diverge at that point because ruleset 31
calls ruleset 93 and ruleset 11 calls ruleset 94. The tests also show
that ruleset 93 provides the address rewrite that we want for the
message sender address, while the envelope sender address is not
processed in the manner we desire by ruleset 94. The <em class="emphasis">test.cf</EM
>
code for rulesets 94, 11, and 31 is shown below:</P
><p class="para"><blockquote class="screen"><pre class="screen">###################################################################
###  Ruleset 94 -- convert envelope names to masquerade form    ###
###################################################################
S94
#R$+                    $@ $&gt;93 $1
R$* &lt; @ *LOCAL* &gt; $*    $: $1 &lt; @ $j . &gt; $2

#
#  envelope sender rewriting
#
S11
R$+             $: $&gt;51 $1      sender/recipient common
R$* :; &lt;@&gt;      $@              list:; special case
R$*             $: $&gt;61 $1      qualify unqual'ed names
R$+             $: $&gt;94 $1      do masquerading

#
#  header sender and masquerading header recipient rewriting
#
S31
R$+             $: $&gt;51 $1      sender/recipient common
R:; &lt;@&gt;         $@              list:; special case
R$* &lt;@&gt; $*      $@ $1 &lt;@&gt; $2    pass null host through
R&lt; @ $* &gt; $*    $@ &lt; @ $1 &gt; $2  pass route-addr through
R$*             $: $&gt;61 $1      qualify unqual'ed names
R$+             $: $&gt;93 $1      do masquerading</PRE
></BLOCKQUOTE
></P
><p class="para">Clearly, ruleset 94 does not do what we want and ruleset 93 does. A quick
inspection of ruleset 94 shows that it does not contain a single reference
to macro M. Yet the comment on the line in ruleset 11 that calls it
indicates that ruleset 94 should &quot;do masquerading.&quot; The first line of
ruleset 94 calls ruleset 93, but it is commented out. Our solution is to
uncomment the first line of ruleset 94 so that it now calls ruleset 93,
which is the ruleset that really does the masquerade processing.</P
><p class="para">Debugging a <em class="emphasis">sendmail.cf</EM
> file is more of an art than a science.
Deciding to edit the first line of ruleset 94 to call ruleset 93 is
little more than a hunch. The only way to verify the hunch<a class="indexterm" name="AUTOID-15091"></A
>
is through
testing. We run <b class="emphasis.bold">sendmail -bt -Ctest.cf</B
> again to test the addresses
<em class="emphasis">craig</EM
>, <em class="emphasis">craig@peanut</EM
>, and <em class="emphasis">craig@localhost</EM
> through rulesets
3, 1, 11, and 4. All tests run successfully, rewriting the various input
addresses into <em class="emphasis">craig@nuts.com</EM
>. We then retest by sending mail
via <b class="emphasis.bold">sendmail -v -t -Ctest.cf</B
>. Only when all of these tests run
successfully do we really believe in our hunch and move on to the next
task, which is to rewrite the user part of the email address into the
user's first and last names.<a class="indexterm" name="AUTOID-15099"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="TCP2-CH-10-SECT-8.2">10.8.2 Using Key Files in sendmail </A
></H3
><p class="para"><a class="indexterm" name="TCP2-CH-10-IX-SENDMAIL-USING-KEY-FILES-IN"></A
>The last feature we added to the <b class="emphasis.bold">m4</B
> source file was
<b class="emphasis.bold">FEATURE(genericstable)</B
>, which adds a database process to the
configuration that we use to convert the user portion of the email
address from the user's login name to the user's first and last names.
To do the same thing here, create a text file of login names and first
and last names and build a database with<a class="indexterm" name="AUTOID-15108"></A
>
<b class="emphasis.bold">makemap</B
>.
[24]</P
><blockquote class="footnote"><p class="para">[24] See the <b class="emphasis.bold">m4</B
> section for more information about <b class="emphasis.bold">makemap</B
>.</P
></BLOCKQUOTE
><p class="para"><blockquote class="screen"><pre class="screen"># cat realnames
dan Dan.Scribner
tyler Tyler.McCafferty
pat Pat.Stover
willy Bill.Wright
craig Craig.Hunt
# makemap dbm realnames &lt; realnames</PRE
></BLOCKQUOTE
></P
><p class="para">Once the database is created, define it for sendmail. Use the
<b class="emphasis.bold">K</B
> command to do this. To use the database that we have just built,
insert the following lines into the Local Information section of the
<em class="emphasis">sendmail.cf</EM
> file:</P
><p class="para"><blockquote class="screen"><pre class="screen"># define a database to map login names to firstname.lastname
Krealnames dbm /etc/realnames</PRE
></BLOCKQUOTE
></P
><p class="para">The <b class="emphasis.bold">K</B
> command defines <em class="emphasis">realnames</EM
> as the internal
sendmail name of this database. Further, it identifies that this
is a database of type <em class="emphasis">dbm</EM
> and that the path to the database is
<em class="emphasis">/etc/realnames</EM
>. sendmail adds the correct filename extensions
to the pathname depending on the type of the database, so you don't
need to worry about it.</P
><p class="para">Finally, we add a new rule that uses the database to rewrite addresses.
We add it to ruleset 11 and ruleset 31 immediately after the lines in
those rulesets that call ruleset 93. This way, our new rule gets the
address as soon as ruleset 93 finishes processing it.</P
><p class="para"><blockquote class="screen"><pre class="screen"># when masquerading convert login name to firstname.lastname
R$-&lt;@$M.&gt;$*    $:$(realnames $1 $)&lt;@$2.&gt;$3    user=&gt;first.last</PRE
></BLOCKQUOTE
></P
><p class="para">This rule is designed to process the output of ruleset 93, which rewrites
the hostname portion of the address. Addresses that meet the criteria
to have the hostname part rewritten are also the addresses for which we
want to rewrite the user part. Look at the output of ruleset 93 from
the earlier test. That address, <em class="emphasis">craig&lt;@nuts.com.&gt;</EM
>, matches the
pattern <code class="literal">$-&lt;@$M.&gt;$*</CODE
>.  The address has exactly one token (<em class="emphasis">craig</EM
>)
before the literal &lt;@, followed by the value of M (<em class="emphasis">nuts.com</EM
>),
the literal .&gt; and zero tokens.</P
><p class="para">The transformation part of this rule takes the first token ($1) from the
input address and uses it as the key to the <em class="emphasis">realnames</EM
> database,
as indicated by the <code class="literal">$:$(realnames $1 $)</CODE
> syntax. For the sample address
<em class="emphasis">craig&lt;@nuts.com&gt;</EM
>, $1 is <em class="emphasis">craig</EM
>. When used as an index into
the database <em class="emphasis">realnames</EM
> shown at the beginning of this section,
it returns <em class="emphasis">Craig.Hunt</EM
>. This returned value is prepended to the
literal &lt;@, the value of indefinite token $2,  the literal .&gt;, and the
value of $3, as indicated by the <code class="literal">&lt;@$2.&gt;$3</CODE
> part of the transformation.
The effect of this new rule is to convert the username to the user's
real first and last names.</P
><p class="para">After adding the new rule to rulesets 11 and 31, a test yields the
following results:</P
><p class="para"><blockquote class="screen"><pre class="screen"># <code class="userinput"><b>sendmail -bt -Ctest.cf</B
></CODE
>
ADDRESS TEST MODE (ruleset 3 NOT automatically invoked)
Enter &lt;ruleset&gt; &lt;address&gt;
&gt; <code class="userinput"><b>3,1,11,4 craig</B
></CODE
>
rewrite: ruleset  3   input: craig
rewrite: ruleset 96   input: craig
rewrite: ruleset 96 returns: craig
rewrite: ruleset  3 returns: craig
rewrite: ruleset  1   input: craig
rewrite: ruleset  1 returns: craig
rewrite: ruleset 11   input: craig
rewrite: ruleset 51   input: craig
rewrite: ruleset 51 returns: craig
rewrite: ruleset 61   input: craig
rewrite: ruleset 61 returns: craig &lt; @ *LOCAL* &gt;
rewrite: ruleset 93   input: craig &lt; @ *LOCAL* &gt;
rewrite: ruleset 93 returns: craig &lt; @ nuts . com . &gt;
rewrite: ruleset 11 returns: Craig . Hunt &lt; @ nuts . com . &gt;
rewrite: ruleset  4   input: Craig . Hunt &lt; @ nuts . com . &gt;
rewrite: ruleset  4 returns: Craig . Hunt @ nuts . com
&gt; <code class="userinput"><b>3,1,31,4 craig</B
></CODE
>
rewrite: ruleset  3   input: craig
rewrite: ruleset 96   input: craig
rewrite: ruleset 96 returns: craig
rewrite: ruleset  3 returns: craig
rewrite: ruleset  1   input: craig
rewrite: ruleset  1 returns: craig
rewrite: ruleset 31   input: craig
rewrite: ruleset 51   input: craig
rewrite: ruleset 51 returns: craig
rewrite: ruleset 61   input: craig
rewrite: ruleset 61 returns: craig &lt; @ *LOCAL* &gt;
rewrite: ruleset 93   input: craig &lt; @ *LOCAL* &gt;
rewrite: ruleset 93 returns: craig &lt; @ nuts . com . &gt;
rewrite: ruleset 31 returns: Craig . Hunt &lt; @ nuts . com . &gt;
rewrite: ruleset  4   input: Craig . Hunt &lt; @ nuts . com . &gt;
rewrite: ruleset  4 returns: Craig . Hunt @ nuts . com
&gt; <code class="userinput"><b>^D</B
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">If the tests do not give the results you want, make sure that you have
correctly entered the new rewrite rules and that you have correctly
built the database. If sendmail complains that it can't lock the
database file, you need to download a more recent release of sendmail V8.<a class="indexterm" name="AUTOID-15151"></A
>
The following error message could also be displayed:</P
><p class="para"><blockquote class="screen"><pre class="screen">test.cf: line 116: readcf: map realnames: class dbm not available</PRE
></BLOCKQUOTE
></P
><p class="para">This indicates that your system does not support dbm databases.
Change the database type on the <b class="emphasis.bold">K</B
> command line to hash and
rerun <b class="emphasis.bold">sendmail -bt</B
>. If it complains again, try it with btree.
When you find a type of database that your sendmail likes, rerun
<b class="emphasis.bold">makemap</B
> using that database type. If your sendmail doesn't
support any database type, see <a class="xref" href="appe_01.htm" title="A sendmail Reference">Appendix E</A
> for information on re-compiling
sendmail with database support.<a class="indexterm" name="AUTOID-15161"></A
></P
><p class="para">Note that all of the changes made directly to the <em class="emphasis">sendmail.cf</EM
>
file in the second half of this chapter (masquerading the sender
address, masquerading the envelope address and converting usernames)
were handled by just three lines in the <b class="emphasis.bold">m4</B
> source file. These
examples were used to demonstrate how to use the sendmail test tools.
If you really need to make a new, custom configuration, use <b class="emphasis.bold">m4</B
>.
It is easiest to maintain and enhance the sendmail
configuration through the <b class="emphasis.bold">m4</B
> source file.<a class="indexterm" name="AUTOID-15167"></A
><a class="indexterm" name="AUTOID-15168"></A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch10_07.htm#TCP2-CH-10-SECT-7.1" title="10.7 Modifying a sendmail.cf File "><img src="../gifs/txtpreva.gif" alt="Previous: 10.7 Modifying a sendmail.cf File " border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="TCP/IP Network Administration"><img src="../gifs/txthome.gif" alt="TCP/IP Network Administration" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch10_09.htm" title="10.9 Summary "><img src="../gifs/txtnexta.gif" alt="Next: 10.9 Summary " border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">10.7 Modifying a sendmail.cf File </TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">10.9 Summary </TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.htm" title="The Networking CD Bookshelf">Library Home</A
> | <a href="../dnsbind/index.htm" title="DNS &amp; BIND">DNS &amp; BIND</A
> | <a href="index.htm" title="TCP/IP Network Administration">TCP/IP</A
> | <a href="../sendmail/index.htm" title="sendmail">sendmail</A
> | <a href="../smdref/index.htm" title="sendmail Desktop Reference">sendmail Reference</A
> | <a href="../firewall/index.htm" title="Building Internet Firewalls">Firewalls</A
> | <a href="../puis/index.htm" title="Practical UNIX &amp; Internet Security">Practical Security</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
