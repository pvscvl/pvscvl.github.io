<html><head>
<title>[Chapter 1] 1.6 Transport Layer</TITLE>
<meta name="DC.title" content="TCP/IP Network Administration"><meta name="DC.creator" content="Craig Hunt"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1999-02-04T01:31:02Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-322-7" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch01_01.htm" title="1. Overview of TCP/IP"><link rel="prev" href="ch01_05.htm#TCP2-CH-1-SECT-5.2" title="1.5 Internet Layer"><link rel="next" href="ch01_07.htm" title="1.7 Application Layer"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" alt="TCP/IP Network Administration" usemap="#srchmap" border="0"></H1
><map name=index.html"srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" alt="TCP/IP Network Administration"><area shape="RECT" coords="467,0,514,18" href="../search/tsrch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch01_05.htm#TCP2-CH-1-SECT-5.2" title="1.5 Internet Layer"><img src="../gifs/txtpreva.gif" alt="Previous: 1.5 Internet Layer" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 1<br>Overview of TCP/IP</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch01_07.htm" title="1.7 Application Layer"><img src="../gifs/txtnexta.gif" alt="Next: 1.7 Application Layer" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="TCP2-CH-1-SECT-6">1.6 Transport Layer</A
></H2
><p class="para"><a class="indexterm" name="TCP2-CH-1-IX-TRANSPORT-LAYER"></A
><a class="indexterm" name="TCP2-CH-1-IX-USER-DATAGRAM-PROTOCOL-UDP"></A
>The protocol layer just above the Internet Layer is the <em class="emphasis">Host-to-Host
Transport Layer</EM
>. This name is usually shortened to <em class="emphasis">Transport
Layer</EM
>. The two most important protocols in the Transport Layer are
<em class="emphasis">Transmission Control Protocol</EM
> (TCP)<a class="indexterm" name="AUTOID-810"></A
>
and <em class="emphasis">User Datagram Protocol</EM
> (UDP).
TCP provides reliable data delivery service with end-to-end error detection<a class="indexterm" name="AUTOID-813"></A
>
and correction. UDP provides low-overhead,
connectionless datagram delivery service.<a class="indexterm" name="AUTOID-817"></A
>
Both protocols
deliver data between the Application Layer and the
Internet Layer. Applications programmers can choose whichever service
is more appropriate for their specific applications.</P
><div class="sect2"><h3 class="sect2"><a class="title" name="TCP2-CH-1-SECT-6.1">1.6.1 User Datagram Protocol</A
></H3
><p class="para">The User Datagram Protocol gives application programs direct access to
a datagram delivery service, like the delivery service that IP
provides. This allows applications to exchange messages over the
network with a minimum of protocol overhead.</P
><p class="para">UDP is an unreliable, connectionless datagram protocol. As noted
previously, &quot;unreliable&quot; merely means that there are no techniques in the
protocol for verifying that the data reached the other end of the
network correctly. Within your computer, UDP will deliver data
correctly. UDP uses 16-bit <em class="emphasis">Source Port</EM
><a class="indexterm" name="AUTOID-825"></A
>
and <em class="emphasis">Destination Port</EM
> numbers<a class="indexterm" name="AUTOID-828"></A
>
in word 1 of the message header, to deliver data to
the correct applications process. 
<a class="xref" href="#TCP2-CH-1-FIG-7" title="UDP message format">Figure 1.8</A
>
shows the UDP
message format.</P
><h4 class="figure"><a class="title" name="TCP2-CH-1-FIG-7">Figure 1.8: UDP message format</A
></H4
><img class="graphic" src="figs/tcp2_0108.gif" alt="Figure 1.8"><p class="para">Why do applications programmers choose UDP as a data transport service?
There are a number of good reasons. If the amount of data being
transmitted is small, the overhead of creating connections and ensuring
reliable delivery may be greater
than the work of re-transmitting the entire data set. In this case,
UDP is the most efficient choice for a Transport Layer protocol.
Applications that fit a <em class="emphasis">query-response</EM
> model<a class="indexterm" name="AUTOID-836"></A
>
are also excellent
candidates for using UDP. The response can be used as a positive
acknowledgment to the query. If a response isn't received within a
certain time period, the application just sends another query. Still
other applications provide their own techniques for reliable data delivery,
and don't require that service from the transport layer protocol.
Imposing another layer of acknowledgment on any of these types of
applications is inefficient.<a class="indexterm" name="AUTOID-838"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="TCP2-CH-1-SECT-6.2">1.6.2 Transmission Control Protocol</A
></H3
><p class="para"><a class="indexterm" name="TCP2-CH-1-IX-TRANSPORT-CONTROL-PROTOCOL-TCP"></A
>Applications that require the transport protocol to provide reliable
data delivery use TCP because it
verifies that data is delivered across the network accurately and in
the proper sequence. TCP is a <em class="emphasis">reliable</EM
>,
<em class="emphasis">connection-oriented</EM
>, <em class="emphasis">byte-stream</EM
> protocol. Let's look at
each of the terms&nbsp;- reliable, connection-oriented, and byte-stream&nbsp;- in
more detail.</P
><p class="para">TCP provides reliability<a class="indexterm" name="AUTOID-848"></A
>
with a mechanism called <em class="emphasis">Positive
Acknowledgment with Re-transmission</EM
> (PAR).<a class="indexterm" name="AUTOID-851"></A
>
Simply stated, a system
using PAR sends the data again, unless it hears from the remote system
that the data arrived okay. The unit of data exchanged between
cooperating TCP modules is called a <em class="emphasis">segment</EM
><a class="indexterm" name="AUTOID-855"></A
>
(see 
<a class="xref" href="#TCP2-CH-1-FIG-8" title="TCP segment format">Figure 1.9</A
>
Each segment contains a checksum<a class="indexterm" name="AUTOID-859"></A
>
that the recipient uses to
verify that the data is undamaged. If the data segment is received
undamaged, the receiver sends a <em class="emphasis">positive acknowledgment</EM
><a class="indexterm" name="AUTOID-862"></A
>
back to the sender. If the data segment is damaged, the receiver
discards it. After an appropriate time-out period,<a class="indexterm" name="AUTOID-864"></A
>
the sending TCP module re-transmits any segment for which no
positive acknowledgment has been received.</P
><h4 class="figure"><a class="title" name="TCP2-CH-1-FIG-8">Figure 1.9: TCP segment format</A
></H4
><img class="graphic" src="figs/tcp2_0109.gif" alt="Figure 1.9"><p class="para">TCP is connection-oriented. It establishes a logical end-to-end
connection between the two communicating hosts. Control information,
called a <em class="emphasis">handshake</EM
>,<a class="indexterm" name="AUTOID-871"></A
>
is exchanged between the two endpoints to
establish a dialogue before data is transmitted. TCP indicates the
control function of a segment by setting
the appropriate bit in the Flags field in word 4 of the <em class="emphasis">segment header</EM
>.<a class="indexterm" name="AUTOID-874"></A
></P
><p class="para"><a class="indexterm" name="AUTOID-878"></A
>The type of handshake used by TCP is called a <em class="emphasis">three-way
handshake</EM
> because three segments are exchanged. 
<a class="xref" href="#TCP2-CH-1-FIG-9" title="Three-way handshake">Figure 1.10</A
>
shows the simplest form of the three-way handshake. Host <em class="emphasis">A</EM
> begins the
connection by sending host <em class="emphasis">B</EM
> a segment with the &quot;Synchronize
sequence numbers&quot; (SYN) bit set.<a class="indexterm" name="AUTOID-884"></A
><a class="indexterm" name="AUTOID-886"></A
>
This segment tells host <em class="emphasis">B</EM
>
that <em class="emphasis">A</EM
> wishes to set up a connection, and it tells <em class="emphasis">B</EM
> what
sequence number host <em class="emphasis">A</EM
> will use as a starting number for
its segments. (Sequence numbers are used to keep data in the proper
order.) Host <em class="emphasis">B</EM
> responds to <em class="emphasis">A</EM
> with a segment that has<a class="indexterm" name="AUTOID-894"></A
>
the &quot;Acknowledgment&quot; (ACK) and SYN bits set. <em class="emphasis">B</EM
>'s segment
acknowledges the receipt of <em class="emphasis">A</EM
>'s segment, and informs <em class="emphasis">A</EM
> which
Sequence Number host <em class="emphasis">B</EM
> will start with. Finally, host
<em class="emphasis">A</EM
> sends a segment that acknowledges receipt of <em class="emphasis">B</EM
>'s segment,
and transfers the first actual data.</P
><h4 class="figure"><a class="title" name="TCP2-CH-1-FIG-9">Figure 1.10: Three-way handshake</A
></H4
><img class="graphic" src="figs/tcp2_0110.gif" alt="Figure 1.10"><p class="para">After this exchange, host <em class="emphasis">A</EM
>'s TCP has positive evidence that the
remote TCP is alive and ready to receive data. As soon as the
connection is established, data can be transferred. When the
cooperating modules have concluded the data transfers, they will
exchange a three-way handshake with segments containing the &quot;No more
data from sender&quot; bit (called the <em class="emphasis">FIN</EM
> bit)<a class="indexterm" name="AUTOID-908"></A
><a class="indexterm" name="AUTOID-910"></A
>
to close the
connection. It is the end-to-end exchange of data that provides the
logical connection between the two systems.</P
><p class="para">TCP views the data it sends as a continuous stream of bytes, not
as independent packets. Therefore, TCP takes care to maintain the
sequence in which bytes are sent and received.
The Sequence Number<a class="indexterm" name="AUTOID-913"></A
>
and Acknowledgment Number fields<a class="indexterm" name="AUTOID-915"></A
>
in the
TCP segment header keep track of the bytes.</P
><p class="para">The TCP standard does not require that each system start numbering
bytes with any specific number; each system chooses the
number it will use as a starting point. To keep track of the data
stream correctly, each end of the connection must know the other end's
initial number. The two ends of the connection synchronize<a class="indexterm" name="AUTOID-918"></A
>
byte-numbering systems by exchanging SYN segments during the handshake. The
Sequence Number field in the SYN segment contains the <em class="emphasis">Initial
Sequence Number</EM
> (ISN),<a class="indexterm" name="AUTOID-921"></A
><a class="indexterm" name="AUTOID-923"></A
>
which is the starting point for the
byte-numbering system. For security reasons the ISN should be a
random number, though it is often 0.</P
><p class="para">Each byte of data is numbered sequentially from the ISN, so the first
real byte of data sent has a sequence number of ISN+1. The
Sequence Number in the header of a data segment identifies the
sequential position in the data stream of the first data byte in the
segment. For example, if the first byte in the data stream was sequence
number 1 (ISN=0) and 4000 bytes of data have already been transferred,
then the first byte of data in the current segment is byte 4001, and
the Sequence Number would be 4001.</P
><p class="para">The Acknowledgment Segment (ACK) performs two functions:<a class="indexterm" name="AUTOID-927"></A
>
<em class="emphasis">positive acknowledgment</EM
> and <em class="emphasis">flow control</EM
>.<a class="indexterm" name="AUTOID-931"></A
>
The acknowledgment tells the
sender how much data has been received, and how much more the receiver
can accept. The Acknowledgment Number is the sequence number of the next
byte the receiver expects to receive. The standard does not require
an individual acknowledgment for every packet. The acknowledgment
number is a positive acknowledgment of all bytes up to that number.
For example, if the first byte sent was numbered 1 and 2000 bytes have
been successfully received, the Acknowledgment Number would be 2001.</P
><p class="para">The Window field contains the <em class="emphasis">window</EM
>,<a class="indexterm" name="AUTOID-935"></A
>
or the number of bytes
the remote end is able to accept. If the receiver is capable of
accepting 6000 more bytes, the window would be 6000.
The window indicates to the sender that it can continue
sending segments as long as the total number of bytes that it sends
is smaller than the window of bytes that
the receiver can accept. The receiver controls
the flow of bytes from the sender by changing the size of the window.
A zero window tells the sender to cease transmission until it
receives a non-zero window value.</P
><p class="para"><a class="xref" href="#TCP2-CH-1-FIG-10" title="TCP data stream">Figure 1.11</A
>
shows a TCP data stream that starts with an Initial
Sequence Number of 0. The receiving system has received and acknowledged
2000 bytes, so the current Acknowledgment Number is 2001. The receiver
also has enough buffer space for another 6000 bytes, so it has
advertised a window of 6000. The sender is currently sending a segment
of 1000 bytes starting with Sequence Number 4001. The sender has
received no acknowledgment for the bytes from 2001 on, but continues
sending data as long as it is within the window. If the sender fills
the window and receives no acknowledgment of the data previously sent,
it will, after an appropriate time-out, send the data again starting
from the first unacknowledged byte.</P
><p class="para">In 
<a class="xref" href="#TCP2-CH-1-FIG-10" title="TCP data stream">Figure 1.11</A
>
re-transmission would
start from byte 2001 if no further acknowledgments are received. This
procedure ensures that data is reliably received at the far end of the
network.</P
><p class="para">TCP is also responsible for delivering data received from IP to the
correct application. The application that the data is bound for is
identified by a 16-bit number called the <em class="emphasis">port number</EM
>.<a class="indexterm" name="AUTOID-943"></A
>
The <em class="emphasis">Source Port</EM
><a class="indexterm" name="AUTOID-947"></A
>
and <em class="emphasis">Destination Port</EM
><a class="indexterm" name="AUTOID-950"></A
>
are contained in the first word of the segment header.
Correctly passing data to and from
the Application Layer is an important part of what the Transport Layer
services do.<a class="indexterm" name="AUTOID-952"></A
><a class="indexterm" name="AUTOID-953"></A
></P
><h4 class="figure"><a class="title" name="TCP2-CH-1-FIG-10">Figure 1.11: TCP data stream</A
></H4
><img class="graphic" src="figs/tcp2_0111.gif" alt="Figure 1.11"></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch01_05.htm#TCP2-CH-1-SECT-5.2" title="1.5 Internet Layer"><img src="../gifs/txtpreva.gif" alt="Previous: 1.5 Internet Layer" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" title="TCP/IP Network Administration"><img src="../gifs/txthome.gif" alt="TCP/IP Network Administration" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch01_07.htm" title="1.7 Application Layer"><img src="../gifs/txtnexta.gif" alt="Next: 1.7 Application Layer" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">1.5 Internet Layer</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">1.7 Application Layer</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><p class="nav"><font size="-1">[ <a href="../index.htm" title="The Networking CD Bookshelf">Library Home</A
> | <a href="../dnsbind/index.htm" title="DNS &amp; BIND">DNS &amp; BIND</A
> | <a href="index.htm" title="TCP/IP Network Administration">TCP/IP</A
> | <a href="../sendmail/index.htm" title="sendmail">sendmail</A
> | <a href="../smdref/index.htm" title="sendmail Desktop Reference">sendmail Reference</A
> | <a href="../firewall/index.htm" title="Building Internet Firewalls">Firewalls</A
> | <a href="../puis/index.htm" title="Practical UNIX &amp; Internet Security">Practical Security</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
