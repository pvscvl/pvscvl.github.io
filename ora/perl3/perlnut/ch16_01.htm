<html><head><title>Email Connectivity (Perl in a Nutshell, 2nd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Stephen Spainhour" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596002416L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Perl in a Nutshell, 2nd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Java and XSLT" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch15_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch16_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>


<h1 class="chapter">Chapter 16. Email Connectivity</h1>
<div class="htmltoc"><h4 class="tochead">Contents:</h4>
  <p> <a href="#perlnut2-CHP-16-SECT-1">The Net Modules</a><br />
<a href="ch16_02.htm">The Mail Modules</a><br /></p></div>

<p>Electronic mail is arguably the most essential Internet application.
In fact, for many people, it's their introduction to
the Internet. Thus, the Perl modules that deal with email are among
the most useful modules. There are two major groups of modules that
provide email capabilities. The first group <a name="INDEX-1991" /></a><a name="INDEX-1992" /></a><a name="INDEX-1993" /></a><a name="INDEX-1994" /></a><a name="INDEX-1995" /></a>is
Graham Barr's <em class="emphasis">libnet</em>
collection, which contains packages for developing client-side
applications over the Internet in Perl. <a href="ch16_01.htm">Table 16-1</a>
lists some of the protocols implemented by the
<em class="emphasis">libnet</em> modules.
</p>


<a name="perlnut2-CHP-16-TABLE-1" /></a><h4 class="objtitle">Table 16-1. Protocols implemented by the libnet modules </h4><table border="1" cellpadding="3">




<tr>
<th>
<p>Protocol</p>

</th>
<th>
<p>Module</p>

</th>
<th>
<p>Description</p>

</th>
</tr>


<tr>
<td>
<p>POP3</p>
</td>
<td>
<p>Net::POP3</p>
</td>
<td>
<p>Post Office Protocol, for reading email</p>
</td>
</tr>
<tr>
<td>
<p>SMTP</p>
</td>
<td>
<p>Net::SMTP</p>
</td>
<td>
<p>Simple Mail Transfer Protocol, for sending email</p>
</td>
</tr>
<tr>
<td>
<p>FTP</p>
</td>
<td>
<p>Net::FTP</p>
</td>
<td>
<p>File Transfer Protocol, for transferring files between hosts</p>
</td>
</tr>
<tr>
<td>
<p>NNTP</p>
</td>
<td>
<p>Net::NNTP</p>
</td>
<td>
<p>Network News Transfer Protocol, for reading Usenet news</p>
</td>
</tr>

</table><p>

<p>In this chapter, we discuss Net::SMTP and Net::POP3. <a href="ch17_01.htm">Chapter 17, "Usenet News"</a> talks about Net::NNTP, <a href="ch18_01.htm">Chapter 18, "FTP"</a> discusses
Net::FTP, and <a href="ch19_01.htm">Chapter 19, "Lightweight Directory Access with Net::LDAP"</a> covers Net::LDAP. Other
<em class="emphasis">libnet</em> modules, such as Net::SNPP and Net::Time,
are not <a name="INDEX-1996" /></a>described in this book, but you can
get information about them from CPAN or with the
<em class="emphasis">perldoc</em> command if <em class="emphasis">libnet</em>
is installed on your system.
</p>

<p>The second group of mail-related modules are the Mail modules, which
can be found on CPAN as
<a name="INDEX-1997" /></a><a name="INDEX-1998" /></a><a name="INDEX-1999" /></a><a name="INDEX-2000" /></a><a name="INDEX-2001" /></a>the MailTools collection. Other interesting
mail-related modules include Mail::Folder and its subclasses,
Mail::RBL, Mail::Audit, and Unix::AliasFile. This chapter describes
the following subset of the Mail modules:
</p>

<dl>
<dt><i>Mail::Send</i></dt>
<dd>
Built on top of Mail::Mailer, providing better control of mail headers<p></p>
</dd>


<dt><i>Mail::Mailer</i></dt>
<dd>
Interacts with external mail programs to send mail<p></p>
</dd>


<dt><i>Mail::Folder</i></dt>
<dd>
Provides a base class and subclasses to work with mail folders<p></p>
</dd>


<dt><i>Mail::Internet</i></dt>
<dd>
Provides functions to manipulate a mail message<p></p>
</dd>


<dt><i>Mail::Address</i></dt>
<dd>
Extracts and manipulates RFC 822-compliant mail addresses<p></p>
</dd>


<dt><i>Mail::RBL</i></dt>
<dd>
Provides domain lookups to the Real-time Blackhole List (RBL)<p></p>
</dd>


<dt><i>Mail::Audit</i></dt>
<dd>
Provides an easy interface for creating mail filters<p></p>
</dd>


<dt><i>Unix::AliasFile</i></dt>
<dd>
Perl interface to <em class="emphasis">/etc/aliases</em> format files<p></p>
</dd>

</dl>

<p>The rest of this chapter describes the Net modules and the Mail
modules.
</p>
<div class="sect1"><a name="perlnut2-CHP-16-SECT-1" /></a>
<h2 class="sect1">16.1. The Net Modules</h2>

<p>Net::SMTP and Net::POP3 are the modules for sending and receiving
email via the SMTP and POP3 protocols. When you use these modules,
you are working at the socket level; they directly implement the
Internet protocols for sending and receiving mail as defined in the
relevant RFCs: RFC 821 for SMTP and RFC 1081 for POP3.
</p>

<a name="perlnut2-CHP-16-SECT-1.1" /></a><div class="sect2">
<h3 class="sect2">16.1.1. Send Email with Net::SMTP</h3>

<p><a name="INDEX-2002" /></a><a name="INDEX-2003" /></a><a name="INDEX-2004" /></a><a name="INDEX-2005" /></a><a name="INDEX-2006" /></a>The Simple Mail Transfer Protocol, or
SMTP, is responsible for clients negotiating RCPT
("to") and FROM
("from") requests with an SMTP
server, sending data to the SMTP server, and then sending an
end-of-data indicator. Net::SMTP is a subclass of Net::Cmd and
IO::Socket::INET that implements an interface to the SMTP and ESMTP
protocols. These protocols send mail by talking to an SMTP server
through a socket, as described in RFC 821.
</p>

<p>When would you want to use Net::SMTP instead of sending mail with an
external program? Since socket communications don't
involve spawning an external program, your programs
won't suffer from the overhead associated with
running an extra process. Talking to SMTP is convenient for sending a
volume of mail messages. Naturally, your server must have an SMTP
server running, or a remote mailhost must allow you to talk to it;
otherwise, you won't be able to use this module.
That's when you can turn to Mail::Mailer or
Mail::Send and let them provide an interface to an external mail
program for you. This is the case, for example, with home computers,
which don't generally run their own SMTP server.
</p>

</div>
<a name="perlnut2-CHP-16-SECT-1.2" /></a><div class="sect2">
<h3 class="sect2">16.1.2. The SMTP Protocol and the SMTP Session</h3>

<p>The SMTP protocol defines the set of commands a client sends to an
SMTP server, which is generally bound to port 25 of a mailhost.
Requests and responses are negotiated between client and server.
</p>

<p>When a client negotiates an SMTP session with a server, the server
tells the client that it's listening. Once
you're connected, you introduce yourself to the
server by issuing a HELO <a name="INDEX-2007" /></a>command. The HELO command accepts one
parameter&#x2014;your hostname&#x2014;and defaults to your remote
hostname if you don't specify one. If the command is
successful, the server sends a 250 response, as follows:
</p>

<blockquote><pre class="code">HELO
250 mail.somename.com Hello some-remote-host.com [127.0.0.1], pleased to meet 
you</pre></blockquote>

<p><a name="INDEX-2008" /></a>After
you've been greeted by the server, send the MAIL
command to tell the server who the message is from. The MAIL command
takes the string <tt class="literal">From:</tt>
<tt class="literal">user@hostname</tt> as an argument, and the server
responds with a 250 message to indicate success:
</p>

<blockquote><pre class="code">MAIL From: &lt;realuser@realhost.com&gt;
250 realuser@realhost.com ... Sender ok</pre></blockquote>

<p><a name="INDEX-2009" /></a>Then
send the RCPT command to tell the server who the recipient is:
</p>

<blockquote><pre class="code">RCPT To: &lt;nospam@rid-spam-now.com&gt;
250 nospam@rid-spam-now.com ... Recipient ok</pre></blockquote>

<p><a name="INDEX-2010" /></a>Now
you're ready to send the body of your message to the
server. The DATA command tells the server that all data until a . on
a line by itself should be treated as the body of the mail message:
</p>

<blockquote><pre class="code">DATA
354 Enter mail, end with "." on a line by itself
Subject: Hi, just thought you'd be interested ...

Hi, this is the text of my mail message that I'm going to 
send with Net::SMTP to show you how it works.
.
250 VAA09505 Message accepted for delivery</pre></blockquote>

<p>Once again, you get a 250 response, indicating that the message has
been accepted for delivery. At that point, you can exit the SMTP
<a name="INDEX-2011" /></a>session
with the QUIT command, which returns 221 on success:
</p>

<blockquote><pre class="code">QUIT
221 mail.somename.com closing connection
Connection closed by foreign host.</pre></blockquote>

<a name="perlnut2-CHP-16-SECT-1.2.1" /></a><div class="sect3">
<h3 class="sect3">16.1.2.1. Net::SMTP methods</h3>

<p>The following methods are defined by Net:SMTP.</p>

<a name="INDEX-2012" /></a><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>new</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" true align="left" color="black" /><pre>
$<em class="replaceable">smtp</em> = Net::SMTP-&gt;new(<em class="replaceable">host</em>[, <em class="replaceable">options</em>])
</pre><p><a name="INDEX-2012" /></a>Constructor. Takes the hostname of the
remote mail server, <em class="replaceable"><tt>host</tt></em>, and possibly
some options, and creates a new SMTP object. Any options are passed
to <tt class="literal">new</tt> as a hash, in which the option is the key.
The possible options are:
</p><dl>
<dt><b><tt class="literal">Debug</tt></b></dt>
<dd>
Enables debug mode if set to <tt class="literal">1</tt>. Provides
information about your connection, requests, and responses.
<p></p>
</dd>


<dt><b><tt class="literal">Hello</tt></b></dt>
<dd>
Sends a HELO command to the SMTP server. Takes a string that
represents your domain; if not specified, <tt class="literal">Hello</tt>
guesses your domain.
<p></p>
</dd>


<dt><b><tt class="literal">Timeout</tt></b></dt>
<dd>
Time (in seconds) after which the client stops trying to establish a
connection with the SMTP server. Defaults to 120 seconds. If the
connection cannot be established, the constructor returns
<tt class="literal">undef</tt>.
<p></p>
</dd>

</dl></div>

<a name="INDEX-2013" /></a><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>banner</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" true align="left" color="black" /><pre>
$<em class="replaceable">smtp</em>-&gt;data([<em class="replaceable">banner</em>])
</pre><p><a name="INDEX-2013" /></a>Returns the banner message with
which the server replied when the initial connection was made. For
example:
</p><blockquote><pre class="code">my $banner = $smtp-&gt;banner( );
print "$banner\n";</pre></blockquote></div>

<a name="INDEX-2014" /></a><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>data</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" true align="left" color="black" /><pre>
$<em class="replaceable">smtp</em>-&gt;data([<em class="replaceable">bodydata</em>])
</pre><p><a name="INDEX-2014" /></a>Starts sending the body of the
current message to the server. If specified,
<em class="replaceable"><tt>bodydata</tt></em> can be a list or a reference to a
list; the contents of the list and the termination string
<tt class="literal">.\r\n</tt> are sent to the server. Returns true if
accepted.
</p><p>If <em class="replaceable"><tt>bodydata</tt></em> is not specified, then a true
result means that the server is ready to receive data, which must be
sent with the <tt class="literal">datasend</tt> and
<tt class="literal">dataend</tt> methods (inherited from Net::Cmd).
</p></div>

<a name="INDEX-2015" /></a><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>dataend</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" true align="left" color="black" /><pre>
$<em class="replaceable">smtp</em>-&gt;dataend(  )
</pre><p><a name="INDEX-2015" /></a>Net::Cmd method issued after
<tt class="literal">datasend</tt> to end the sending of data. Sends
<tt class="literal">.\r\n</tt> to the server telling it that
there's no more data coming and that it should send
the message.
</p><p>Here's an example that uses
<tt class="literal">datasend</tt> and <tt class="literal">dataend</tt>:
</p><blockquote><pre class="code">@list_data = (1..10);
$smtp-&gt;data( );
$smtp-&gt;datasend(@list_data);
$smtp-&gt;dataend( );</pre></blockquote></div>

<a name="INDEX-2016" /></a><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>datasend</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" true align="left" color="black" /><pre>
$<em class="replaceable">smtp</em>-&gt;datasend("<em class="replaceable">data</em>")
</pre><p><a name="INDEX-2016" /></a>Net::Cmd method that sends the
body of the message to the remote server if the body
wasn't specified with the <tt class="literal">data</tt>
method.
</p></div>

<a name="INDEX-2017" /></a><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>domain</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" true align="left" color="black" /><pre>
$<em class="replaceable">smtp</em>-&gt;domain(  )
</pre><p><a name="INDEX-2017" /></a>Returns the domain of the remote
SMTP server, or <tt class="literal">undef</tt>.
</p></div>

<a name="INDEX-2018" /></a><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>expand</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" true align="left" color="black" /><pre>
$<em class="replaceable">smtp</em>-&gt;expand(<em class="replaceable">address</em>)
</pre><p><a name="INDEX-2018" /></a>Requests the server to expand
<em class="replaceable"><tt>address</tt></em>. Returns an array containing the
text from the server.
</p></div>

<a name="INDEX-2019" /></a><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>hello</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" true align="left" color="black" /><pre>
$<em class="replaceable">smtp</em>-&gt;hello(<em class="replaceable">domain</em>)
</pre><p><a name="INDEX-2019" /></a>Identifies your domain to the mail
server. Executes automatically when you create a Net::SMTP object, so
you shouldn't have to do it manually.
</p></div>

<a name="INDEX-2020" /></a><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>help</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" true align="left" color="black" /><pre>
$<em class="replaceable">help_text</em> = $<em class="replaceable">smtp</em>-&gt;help([<em class="replaceable">subject</em>])
</pre><p><a name="INDEX-2020" /></a>Returns help text from the server,
or <tt class="literal">undef</tt> on failure. If
<em class="replaceable"><tt>subject</tt></em> is specified, returns help for
that topic.
</p></div>

<a name="INDEX-2021" /></a><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>mail</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" true align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
$<em class="replaceable">smtp</em>-&gt;mail(<em class="replaceable">address</em>[, <em class="replaceable">options</em>])
$<em class="replaceable">smtp</em>-&gt;send(<em class="replaceable">address</em>)
send_or_mail(<em class="replaceable"><tt>address</tt></em>)
send_and_mail(<em class="replaceable"><tt>address</tt></em>)
</pre></td><td align="right" /></tr></table><p><p><a name="INDEX-2021" /></a>Takes the
sender's address and sends the appropriate command
(MAIL, SEND, SOML, or SAML) to the server to initiate the
message-sending process.
</p><p><tt class="literal">mail</tt> can take some ESMTP options, passed as
key/value pairs. See the Net::SMTP documentation for the details.
</p></div>

<a name="INDEX-2022" /></a><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>quit</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" true align="left" color="black" /><pre>
$<em class="replaceable">smtp</em>-&gt;quit
</pre><p><a name="INDEX-2022" /></a>This method sends the QUIT command to
the remote SMTP server and closes the socket connection.
</p></div>

<a name="INDEX-2023" /></a><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>recipient</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" true align="left" color="black" /><pre>
$<em class="replaceable">smtp</em>-&gt;recipient(<em class="replaceable">addr</em>[, <em class="replaceable">addr</em>[, ...]])
</pre><p><a name="INDEX-2023" /></a>Tells the server to send the
current message to all specified recipients. As defined in the RFC,
each address is sent as a separate command to the server. If the
sending of any address fails, the process aborts and returns false;
you can then call <tt class="literal">reset</tt> to reset the server.
</p></div>

<a name="INDEX-2024" /></a><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>reset</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" true align="left" color="black" /><pre>
$<em class="replaceable">smtp</em>-&gt;reset(  )
</pre><p><a name="INDEX-2024" /></a>Resets the server's
status. Useful for canceling a message after it has been initiated
but before any data has been sent.
</p></div>

<a name="INDEX-2025" /></a><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>to</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" true align="left" color="black" /><pre>
$<em class="replaceable">smtp</em>-&gt;to(<em class="replaceable">address</em>[, <em class="replaceable">address</em>[, ...]])
</pre><p><a name="INDEX-2025" /></a>Interchangeable with
<tt class="literal">recipient</tt>.
</p></div>

<a name="INDEX-2026" /></a><a name="INDEX-2027" /></a><a name="INDEX-2028" /></a><a name="INDEX-2029" /></a><a name="INDEX-2030" /></a><a name="INDEX-2031" /></a><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>verify</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" true align="left" color="black" /><pre>
$<em class="replaceable">smtp</em>-&gt;verify(<em class="replaceable">address</em>)
</pre><p><a name="INDEX-2026" /></a>Verifies that the specified mail
address is valid. However, many servers ignore
<tt class="literal">verify</tt>, so it frequently doesn't
work.<a name="INDEX-2027" /></a><a name="INDEX-2028" /></a><a name="INDEX-2029" /></a><a name="INDEX-2030" /></a><a name="INDEX-2031" /></a> 
</p></div>
</div>
</div>
<a name="perlnut2-CHP-16-SECT-1.3" /></a><div class="sect2">
<h3 class="sect2">16.1.3. Retrieving Email with Net::POP3</h3>

<p><a name="INDEX-2032" /></a><a name="INDEX-2033" /></a><a name="INDEX-2034" /></a><a name="INDEX-2035" /></a><a name="INDEX-2036" /></a>You can use SMTP to send mail, but not
to retrieve it. For retrieving messages, use the Post Office Protocol
Version 3 (POP3), described in RFC 1081. One way to do this is to use
the Net::POP3 module. POP3 provides commands for interacting with the
POP server, typically bound to port 110. Net::POP3 automates the
transfer of email from a remote server to the local machine.
</p>

<p>The POP server retrieves messages from a specified spooling directory
on the remote system. The messages are stored in a file named for the
username<a name="INDEX-2037" /></a><a name="INDEX-2038" /></a><a name="INDEX-2039" /></a>; anonymous logins are not permitted.
Authentication is based on username and password and is done by
sending the USER and PASS commands to the POP server. For example,
identification of user <tt class="literal">foo</tt> with password
<tt class="literal">bar</tt> looks like this:
</p>

<blockquote><pre class="code">USER foo
PASS bar</pre></blockquote>

<p><a name="INDEX-2040" /></a><a name="INDEX-2041" /></a><a name="INDEX-2042" /></a>Net::POP3 has <tt class="literal">user</tt>
and <tt class="literal">pass</tt> methods but may also authenticate users
with <tt class="literal">login</tt>, which takes both username and password
arguments. If authentication fails, the user cannot retrieve, delete,
or alter any messages from the mail server. <tt class="literal">login</tt>
returns the number of messages on the POP server for the user, or
<tt class="literal">undef</tt> if authentication fails.
</p>

<p>Authenticated users can retrieve information about their mailboxes
and can get specific messages by message number.
</p>

<p>A POP session to retrieve a mail message is negotiated with the
server through the following steps:
</p>

<ol><li>
<p>Connect to the POP server (the default port is 110).</p>
</li><li>
<p>Send USER command.</p>
</li><li>
<p>Send PASS command.</p>
</li><li>
<p>If authenticated, receive number of messages.</p>
</li><li>
<p>Send RETR &lt;<em class="emphasis">message number</em>&gt; command to
retrieve a specific message.
</p>
</li><li>
<p>Send QUIT command to end session.</p>
</li></ol>
<p>The following methods are defined by Net:POP3.</p>



<a name="INDEX-2043" /></a><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>new</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" true align="left" color="black" /><pre>
$<em class="replaceable">pop</em> = Net::POP3-&gt;new([<em class="replaceable">host</em>,] [<em class="replaceable">options</em>])
</pre><p><a name="INDEX-2043" /></a>Constructor. Creates a new Net::POP3
object. <em class="replaceable"><tt>host</tt></em> is the name of the remote
host to which a POP3 connection will be made. If
<em class="replaceable"><tt>host</tt></em> is not specified, then the POP3_Host
specified in Net::Config is used.
</p><p><em class="replaceable"><tt>options</tt></em> are passed as key/value pairs, in
which the option is the key. The possible options are:
</p><dl>
<dt><b><tt class="literal">ResvPort</tt></b></dt>
<dd>
Optional. If given, then the socket for the Net::POP3 object will be
bound to the given local port using <tt class="literal">bind</tt> when the
socket is created.
<p></p>
</dd>


<dt><b><tt class="literal">Debug</tt></b></dt>
<dd>
Enables debugging information<p></p>
</dd>


<dt><b><tt class="literal">Timeout</tt></b></dt>
<dd>
Maximum time, in seconds, to wait for a response from the POP3
server. Default is 120 seconds.
<p></p>
</dd>

</dl></div>

<a name="INDEX-2044" /></a><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>apop</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" true align="left" color="black" /><pre>
$<em class="replaceable">pop</em>-&gt;apop(<em class="replaceable">user</em>, <em class="replaceable">pass</em>)
</pre><p><a name="INDEX-2044" /></a>Authenticates
<em class="replaceable"><tt>user</tt></em> with password
<em class="replaceable"><tt>pass</tt></em> with the server. The password is not
sent in clear text. Requires the MD5 package; otherwise, returns
<tt class="literal">undef</tt>.
</p></div>

<a name="INDEX-2045" /></a><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>delete</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" true align="left" color="black" /><pre>
$<em class="replaceable">pop</em>-&gt;delete(<em class="replaceable">msgnum</em>)
</pre><p><a name="INDEX-2045" /></a>Marks message
<em class="replaceable"><tt>msgnum</tt></em> for deletion from the remote
mailbox. All messages marked for deletion are removed when the
connection to the server is closed.
</p></div>

<a name="INDEX-2046" /></a><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>get</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" true align="left" color="black" /><pre>
$<em class="replaceable">pop</em>-&gt;get(<em class="replaceable">msgnum</em>)
</pre><p><a name="INDEX-2046" /></a>Gets message
<em class="replaceable"><tt>msgnum</tt></em> from remote mailbox. Returns a
reference to an array containing lines of text read from the server.
</p></div>

<a name="INDEX-2047" /></a><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>last</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" true align="left" color="black" /><pre>
$<em class="replaceable">pop</em>-&gt;last(  )
</pre><p><a name="INDEX-2047" /></a>Returns the highest message number.
</p></div>

<a name="INDEX-2048" /></a><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>list</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" true align="left" color="black" /><pre>
$<em class="replaceable">pop</em>-&gt;list([<em class="replaceable">msgnum</em>])
</pre><p><a name="INDEX-2048" /></a>If called with an argument, returns the
size of message <em class="replaceable"><tt>msgnum</tt></em>. If called without
an argument, returns a hash reference, in which the keys are the
message numbers of all undeleted messages, and each corresponding
value is the size of the message.
</p></div>

<a name="INDEX-2049" /></a><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>login</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" true align="left" color="black" /><pre>
$<em class="replaceable">pop</em>-&gt;login([<em class="replaceable">user</em>[, <em class="replaceable">pass</em>]])
</pre><p><a name="INDEX-2049" /></a>Sends both USER and PASS commands. If
the password, <em class="replaceable"><tt>pass</tt></em>, is not given, then
Net::Netrc is used to look up the password based on the host and the
username, <em class="replaceable"><tt>user</tt></em>. If
<em class="replaceable"><tt>user</tt></em> is not specified, the current
username is used. Returns the count of messages in the mailbox, or
<tt class="literal">undef</tt> if the server can't
authenticate the user.
</p></div>

<a name="INDEX-2050" /></a><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>pass</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" true align="left" color="black" /><pre>
$<em class="replaceable">pop</em>-&gt;pass(<em class="replaceable">pass</em>)
</pre><p><a name="INDEX-2050" /></a>Sends the PASS command with the
password. Returns the number of messages in the mailbox.
</p></div>

<a name="INDEX-2051" /></a><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>popstat</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" true align="left" color="black" /><pre>
$<em class="replaceable">pop</em>-&gt;popstat(  )
</pre><p><a name="INDEX-2051" /></a>Returns a list with two elements:
the number of undeleted elements and the size of the mailbox.
</p></div>

<a name="INDEX-2052" /></a><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>quit</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" true align="left" color="black" /><pre>
$<em class="replaceable">pop</em>-&gt;quit(  )
</pre><p><a name="INDEX-2052" /></a>Quits, closing the connection to the
remote POP3 server and deleting all messages marked for deletion.
</p><p>Note that if a Net::POP3 object goes out of scope before
<tt class="literal">quit</tt> has been called, <tt class="literal">reset</tt> is
called before the connection is closed, and any messages marked for
deletion are not deleted.
</p></div>

<a name="INDEX-2053" /></a><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>reset</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" true align="left" color="black" /><pre>
$pop-&gt;reset(  )
</pre><p><a name="INDEX-2053" /></a>Resets status of the remote POP3
server. Clears the delete status on all messages that were marked for
deletion.
</p></div>

<a name="INDEX-2054" /></a><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>top</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" true align="left" color="black" /><pre>
$<em class="replaceable">pop</em>-&gt;top(<em class="replaceable">msgnum</em>[, <em class="replaceable">numlines</em>])
</pre><p><a name="INDEX-2054" /></a>Gets the header and the first
<em class="replaceable"><tt>numlines</tt></em> lines of body for message
<em class="replaceable"><tt>msgnum</tt></em>. Returns a reference to an array
containing lines of text read from the server.
</p></div>

<a name="INDEX-2055" /></a><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>uidl</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" true align="left" color="black" /><pre>
$<em class="replaceable">pop</em>-&gt;uidl([<em class="replaceable">msgnum</em>])
</pre><p><a name="INDEX-2055" /></a>Returns a unique identifier for
<em class="replaceable"><tt>msgnum</tt></em> if specified. If
<em class="replaceable"><tt>msgnum</tt></em> is not specified, returns a
reference to a hash in which the keys are the message numbers, and
the values are the unique identifiers.
</p></div>

<a name="INDEX-2056" /></a><a name="INDEX-2057" /></a><a name="INDEX-2058" /></a><a name="INDEX-2059" /></a><a name="INDEX-2060" /></a><a name="INDEX-2061" /></a><a name="INDEX-2062" /></a><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>user</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" true align="left" color="black" /><pre>
$<em class="replaceable">pop</em>-&gt;user(<em class="replaceable">user</em>)
</pre><p><a name="INDEX-2056" /></a>Sends the USER command, identifying the
user.<a name="INDEX-2057" /></a><a name="INDEX-2058" /></a><a name="INDEX-2059" /></a><a name="INDEX-2060" /></a><a name="INDEX-2061" /></a><a name="INDEX-2062" /></a>
</p></div></div>
</div>

<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch15_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch16_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">15.2. The IO::Socket Module</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">16.2. The Mail Modules</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="../cookbook/index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm">
      </map>

</body></html>