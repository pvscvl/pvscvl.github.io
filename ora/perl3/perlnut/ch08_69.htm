<html><head><title>ExtUtils::Constant (Perl in a Nutshell, 2nd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Stephen Spainhour" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596002416L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Perl in a Nutshell, 2nd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Java and XSLT" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch08_68.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch08_70.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">8.69. ExtUtils::Constant</h2>

<p><a name="INDEX-1402" />Generates XS code to import C header
constants, allowing Perl modules to AUTOLOAD constants defined in C
library header files. Generally, you should not touch
ExtUtils::Constant functions, since they are already implemented by
<i class="command">h2xs</i>.
</p>

<p>For example:</p>

<blockquote><pre class="code">use ExtUtils::Constant qw (WriteConstants);
WriteConstants(
    NAME =&gt; `Nate',
    NAMES =&gt; [qw(Nate Nathan Nathaniel)], # not Nat
);
# Generates wrapper code to make the values of the constants
# Nate Nathan Nathaniel available to perl</pre></blockquote>

<p>Currently, this module understands the following types, although
<i class="command">h2xs</i> may only know a subset. The sizes of the
numeric types are chosen by the <i class="command">Configure</i> script
at compile time.
</p>

<dl>
<dt><b><tt class="literal">IV</tt>  </b></dt>
<dd>
Signed integer. At least 32 bits.</p>
</dd>


<dt><b><tt class="literal">UV</tt> </b></dt>
<dd>
Unsigned integer. The same size as <tt class="literal">IV</tt>.</p>
</dd>


<dt><b><tt class="literal">NV</tt>  </b></dt>
<dd>
Floating-point type. Probably <tt class="literal">double</tt>. Possibly
<tt class="literal">long double</tt>.
</p>
</dd>


<dt><b><tt class="literal">PV NUL[L]</tt> </b></dt>
<dd>
Terminated string. Length will be determined with
<tt class="literal">strlen</tt>.
</p>
</dd>


<dt><b><tt class="literal">PVN</tt> </b></dt>
<dd>
A fixed-length thing, given as a pointer, length pair. If you know
the length of a string at compile time, you can use this instead of
<tt class="literal">PV</tt>.
</p>
</dd>


<dt><b><tt class="literal">SV</tt>  </b></dt>
<dd>
A mortal SV.</p>
</dd>


<dt><b><tt class="literal">YES</tt> </b></dt>
<dd>
Truth (<tt class="literal">PL_sv_yes</tt>). The value is not needed (and is
ignored).
</p>
</dd>


<dt><b><tt class="literal">NO</tt>  </b></dt>
<dd>
Defined falsehood (<tt class="literal">PL_sv_no</tt>). The value is not
needed (and is ignored).
</p>
</dd>


<dt><b><tt class="literal">UNDEF</tt> </b></dt>
<dd>
The value of the macro is not needed.</p>
</dd>

</dl>

<p>ExtUtils::Constant implements the following functions.</p>



<a name="INDEX-1403" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>assign</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
assign <em class="replaceable">indent</em>, <em class="replaceable">type</em>, <em class="replaceable">pre</em>, <em class="replaceable">post</em>, <em class="replaceable">value</em> ...
</pre><p><tt class="literal">R</tt>eturns a suitable assignment clause. If
<em class="replaceable"><tt>type</tt></em> is aggregate (e.g.,
<tt class="literal">PVN</tt> expects both pointer and length), then there
should be multiple <em class="replaceable"><tt>value</tt></em>s for the
components. <em class="replaceable"><tt>pre</tt></em> and
<em class="replaceable"><tt>post</tt></em>, if defined, give snippets of C code
to proceed and follow the assignment. <em class="replaceable"><tt>pre</tt></em>is at the start of a block, so variables may be defined in it.
</p></div>

<a name="INDEX-1404" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>autoload</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
autoload <em class="replaceable">package</em>, <em class="replaceable">version</em>, <em class="replaceable">autoloader</em>
</pre><p>Generates the <tt class="literal">AUTOLOAD</tt> subroutine for the module
<em class="replaceable"><tt>package</tt></em>.
<em class="replaceable"><tt>version</tt></em> is the Perl version with which the
code should be backwards-compatible. It defaults to the version of
Perl running the subroutine. If <em class="replaceable"><tt>autoloader</tt></em>is true, the <tt class="literal">AUTOLOAD</tt> subroutine falls back on
<tt class="literal">AutoLoader::AUTOLOAD</tt> for all names that the
<tt class="literal">constant()</tt> routine doesn't
recognize.
</p></div>

<a name="INDEX-1405" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>C_constant</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
C_constant <em class="replaceable">package</em>, <em class="replaceable">subname</em>, <em class="replaceable">default_type</em>, <em class="replaceable">types</em>, <em class="replaceable">indent</em>,  <em class="replaceable">breakout, item ...</em>
</pre><p>Returns a list of C subroutine definitions that return the value and
type of constants when passed the name by the XS wrapper.
<em class="replaceable"><tt>item...</tt></em> gives a list of constant names.
These can be strings, which are taken as a C macro name, or
references to a hash with the following keys:
</p><dl>
<dt><b><tt class="literal">name</tt>    </b></dt>
<dd>
The name of the constant, as seen by the Perl code.</p>
</dd>


<dt><b><tt class="literal">type</tt>    </b></dt>
<dd>
The type of the constant (<tt class="literal">IV</tt>,
<tt class="literal">NV</tt>, etc.).
</p>
</dd>


<dt><b><tt class="literal">value</tt>   </b></dt>
<dd>
A C expression for the value of the constant, or a list of C
expressions if the type is aggregate. Defaults to
<tt class="literal">name</tt> if not given.
</p>
</dd>


<dt><b><tt class="literal">macro</tt>   </b></dt>
<dd>
The C preprocessor macro to use in the <tt class="literal">#ifdef</tt>.
Defaults to <tt class="literal">name</tt> and is primarily used if
<tt class="literal">value</tt> is an <tt class="literal">enum</tt>. If a
reference or an array is passed, then the first element is used in
place of the <tt class="literal">#ifdef</tt> line, and the second element
is used in place of the <tt class="literal">#endif</tt>. This allows
preprocessor constructions such as:
</p>
<blockquote><pre class="code">#if defined (foo)
#if !defined (bar)
...
#endif
#endif</pre></blockquote>

<p>which are used to determine if a constant will be defined.</p>
<p>A <tt class="literal">macro</tt> of <tt class="literal">1</tt> signals that the
constant is always defined, so the <tt class="literal">#if/#endif</tt> test
is omitted.
</p>
</dd>


<dt><b><tt class="literal">default</tt> </b></dt>
<dd>
Default value to use (instead of <tt class="literal">croak</tt> ing with
"your vendor has not defined . . . ) if the macro
isn't defined. Specifies a reference to an array
with type followed by value(s).
</p>
</dd>


<dt><b><tt class="literal">pre</tt>     </b></dt>
<dd>
C code to use before the assignment of the value of the constant.
This allows you to use temporary variables to extract a value from
part of a <tt class="literal">struct</tt> and return this as
<tt class="literal">value</tt>. This C code is placed at the start of a
block, so you can declare variables in it.
</p>
</dd>


<dt><b><tt class="literal">post</tt>    </b></dt>
<dd>
C code to place between the assignment of <tt class="literal">value</tt>
(temporary) and the return from the function. This allows you to
clear up anything in <tt class="literal">pre</tt>. Rarely needed.
</p>
</dd>


<dt><b><tt class="literal">def_pre</tt> </b></dt>
<dt><b><tt class="literal">def_post</tt>	</b></dt>
<dd>
Equivalents of <tt class="literal">pre</tt> and <tt class="literal">post</tt> for
the default value.
</p>
</dd>


<dt><b><tt class="literal">utf8</tt>    </b></dt>
<dd>
Generated internally. Is <tt class="literal">0</tt> or undefined if name is
7-bit ASCII, <tt class="literal">no</tt> if the name is 8-bit (and so
should match only if <tt class="literal">SvUTF8()</tt> is false), and
<tt class="literal">yes</tt> if the name is
<tt class="literal">utf8</tt>-encoded.
</p>
</dd>

</dl></div>

<a name="INDEX-1406" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>constant_types</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
constant_types
</pre><p>Returns a single scalar with <tt class="literal">#define</tt> definitions
for the constants used internally between the generated C and XS
functions.
</p></div>

<a name="INDEX-1407" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>C_stringify</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
C_stringify <em class="replaceable">name</em>
</pre><p>Returns a 7-bit ASCII correctly <tt class="literal">\</tt>-escaped version
of the string passed. Suitable for C <tt class="literal">""</tt> or
<tt class="literal">''</tt>. It will die if passed Unicode characters.
</p></div>

<a name="INDEX-1408" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>dump_names</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
dump_names <em class="replaceable">default_type</em>, <em class="replaceable">types</em>, <em class="replaceable">indent</em>, <em class="replaceable">options</em>, <em class="replaceable">item </em>...
</pre><p>An internal function to generate the embedded Perl code to regenerate
the constant subroutines. <em class="replaceable"><tt>default_type</tt></em>,
<em class="replaceable"><tt>types</tt></em>, and
<em class="replaceable"><tt>item</tt></em>s are the same as for
<tt class="literal">C_constant</tt>. <em class="replaceable"><tt>indent</tt></em> is
the number of spaces to indent. <em class="replaceable"><tt>options</tt></em> is
a hashref of options; currently, only
<tt class="literal">declare_types</tt> is recognized. If the value is true,
a <em class="replaceable"><tt>types</tt></em> is always declared in the
generated Perl code; if defined and false, one is never declared; and
if undefined, <em class="replaceable"><tt>types</tt></em> is declared only if
the values in <em class="replaceable"><tt>types</tt></em> as passed in cannot be
inferred from <em class="replaceable"><tt>default_types</tt></em> and the
<em class="replaceable"><tt>item</tt></em>s.
</p></div>

<a name="INDEX-1409" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>memEQ_clause </b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
memEQ_clause <em class="replaceable">name</em>, <em class="replaceable">checked_at</em>, <em class="replaceable">indent</em>
</pre><p>Returns a suitable C <tt class="literal">if</tt> statement to check whether
<em class="replaceable"><tt>name</tt></em> is equal to the C variable
<em class="replaceable"><tt>name</tt></em>. If
<em class="replaceable"><tt>checked_at</tt></em> is defined, then it is used to
avoid <tt class="literal">memEQ</tt> for short names.
</p></div>

<a name="INDEX-1410" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>params</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
params <em class="replaceable">what</em>
</pre><p>An internal function. <em class="replaceable">what</em> should be a
hashref of types the constant function will return.
<tt class="literal">params</tt> returns a hashref keyed <tt class="literal">IV NV PV
SV</tt> to show which combination of pointers will be needed in
the C argument list.
</p></div>

<a name="INDEX-1411" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>perl_stringify</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
perl_stringify <em class="replaceable">name</em>
</pre><p>Returns a 7-bit ASCII correctly <tt class="literal">\</tt>-escaped version
of the string passed. Suitable for a Perl <tt class="literal">""</tt>
string.
</p></div>

<a name="INDEX-1412" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>return_clause</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
return_clause <em class="replaceable">item</em>, <em class="replaceable">indent</em>
</pre><p>Returns a suitable <tt class="literal">#ifdef</tt> clause.
<em class="replaceable"><tt>item</tt></em> is a hashref passed to
<tt class="literal">C_constant</tt> and <tt class="literal">match_clause</tt>.
<em class="replaceable"><tt>indent</tt></em> is the number of spaces to indent;
defaulting is <tt class="literal">6</tt>.
</p></div>

<a name="INDEX-1413" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>switch_clause</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
switch_clause <em class="replaceable">indent</em>, <em class="replaceable">namelen</em>, <em class="replaceable">itemhash</em>, <em class="replaceable">item </em>...
</pre><p>An internal function to generate a suitable <tt class="literal">switch</tt>
clause, called by <tt class="literal">C_constant</tt>.
<em class="replaceable"><tt>item</tt></em>s are in the hashref format as given
in the description of <tt class="literal">C_constant</tt> and must all have
names of the same length, given by
<em class="replaceable"><tt>namelen</tt></em>.
<em class="replaceable"><tt>itemhash</tt></em> is a reference to a hash, keyed
by name, with values as the hashrefs in the
<em class="replaceable"><tt>item</tt></em> list.
</p></div>

<a name="INDEX-1414" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>XS_constant</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
XS_constant <em class="replaceable">package</em>, <em class="replaceable">types</em>, <em class="replaceable">subname</em>, <em class="replaceable">c_subname</em>
</pre><p>Generates the XS code to implement the Perl subroutine
<em class="replaceable"><tt>package</tt></em><tt class="literal">::constant</tt> used
by <em class="replaceable"><tt>package</tt></em><tt class="literal">::AUTOLOAD</tt> to
load constants. This XS code is a wrapper around a C subroutine
usually generated by <tt class="literal">C_constant</tt> and usually named
<tt class="literal">constant</tt>
</p><p><em class="replaceable"><tt>types</tt></em> should be given either as a
comma-separated list of types that the C subroutine
<tt class="literal">constant</tt> will generate or as a reference to a
hash. It should be the same list of types that
<tt class="literal">C_constant</tt> was given. Otherwise,
<tt class="literal">XS_constant</tt> and <tt class="literal">C_constant</tt> may
have different ideas about the number of parameters passed to the C
function <tt class="literal">constant</tt>.
</p><p>You can call the Perl visible subroutine something other than
"constant" if you give the
parameter <em class="replaceable"><tt>subname</tt></em>. The C subroutine it
calls defaults to the name of the Perl visible subroutine, unless you
give the parameter <em class="replaceable"><tt>c_subname</tt></em>.
</p></div>

<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch08_68.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch08_70.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">8.68. ExtUtils::Command::MM</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">8.70. ExtUtils::Embed</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="../cookbook/index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm">
</map>

</body></html>