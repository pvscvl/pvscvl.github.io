<html><head><title>The URI Module (Perl in a Nutshell, 2nd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Stephen Spainhour" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596002416L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Perl in a Nutshell, 2nd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Java and XSLT" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch20_04.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="part9.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">20.5. The URI Module</h2>
<a name="INDEX-2626" /><a name="INDEX-2627" />
<p><a name="INDEX-2628" /><a name="INDEX-2629" />The
URI module contains functions and modules to specify and convert
URIs. (URLs are a type of URI.) In addition to the URL module itself,
there are also: URI::URL, URI::Escape, and URI::Heuristic. Of primary
importance to many LWP applications is the URI::URL class, which
creates the objects used by LWP::UserAgent to determine protocols,
server locations, and resource names.
</p>

<p><a name="INDEX-2630" /><a name="INDEX-2631" /><a name="INDEX-2632" /><a name="INDEX-2633" />The
URI::Escape module replaces unsafe characters in URL strings with
their appropriate escape sequences. URI::Heuristic provides
convenience methods for creating proper URLs out of short strings and
incomplete addresses.
</p>

<a name="perlnut2-CHP-20-SECT-5.1" /><div class="sect2">
<h3 class="sect2">20.5.1. URI</h3>

<p>The URI module is a successor to URI::URL and was written by Gisle
Aas. While not clearly stated in the LWP documentation, you should
use the URI module whenever possible, since URI.pm has essentially
deprecated URI::URL.
</p>

<p>The URI module implements the URI class. Objects created from the URI
class represent Uniform Resource Identifiers (URIs). With the URI
module, you can identify the key parts of a URI: scheme,
scheme-specific parts, and fragment identifiers, which may be
referred to respectfully as authority, path, and query components.
For example, as shown in the URI module documentation:
</p>

<blockquote><pre class="code">&lt;scheme&gt;:&lt;scheme-specific-part&gt;#&lt;fragment&gt;
&lt;scheme&gt;://&lt;authority&gt;&lt;path&gt;?&lt;query&gt;#&lt;fragment&gt;
&lt;path&gt;?&lt;query&gt;#&lt;fragment&gt;</pre></blockquote>

<p>You can break down <em class="emphasis">http://www.oreilly.com/somefile.html</em> as:
</p>

<blockquote><pre class="code">scheme: http
authority: www.oreilly.com
path: /somefile.html</pre></blockquote>

<p>In the case of relative URIs, you can use the URI module to deal with
only the query component of a URI. With the URI module, you can parse
the above URI as follows:
</p>

<blockquote><pre class="code">#!/usr/local/bin/perl -w

use URI;

my $url = 'http://www.oreilly.com/somefile.html';
my $u1 = URI-&gt;new($url);

print "scheme: ", $u1-&gt;scheme, "\n";
print "authority: ", $u1-&gt;authority, "\n";
print "path: ", $u1-&gt;path, "\n";</pre></blockquote>

<a name="perlnut2-CHP-20-SECT-5.1.1" /><div class="sect3">
<h3 class="sect3">20.5.1.1. URI methods</h3>

<p>The following methods give you access to components of a URI. These
methods will return a string, unless the URI component is invalid, in
which case <tt class="literal">undef</tt> is returned. Bear in mind that an
empty string ("") is not equivalent
to an undefined value.
</p>

<div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>new</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
new($<em class="replaceable">uri</em>, [$<em class="replaceable">scheme</em>])
</pre><p>Constructor. <tt class="literal">$</tt><em class="replaceable">uri</em> is
given as an argument with the optional
<tt class="literal">$</tt><em class="replaceable"><tt>scheme</tt></em>.
<tt class="literal">new</tt> removes additional whitespace, double quotes,
and arrows from the URL.
<tt class="literal">$</tt><em class="replaceable"><tt>scheme</tt></em> is used only
when <tt class="literal">$</tt><em class="replaceable"><tt>str</tt></em> is a relative
URI; it is a simple string that denotes the scheme or an absolute URI
object. <tt class="literal">$</tt><em class="replaceable"><tt>str</tt></em> will be
treated like a generic URI if
<tt class="literal">$</tt><em class="replaceable"><tt>scheme</tt></em> isn't defined.
</p></div>

<div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>new</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
URI::file-&gt;new($<em class="replaceable">file</em>, [$<em class="replaceable">os</em>])
</pre><p>Constructs a new file URI from a filename.</p></div>

<div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>new_abs</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
URI::file-&gt;new_abs($<em class="replaceable">file</em>, [$<em class="replaceable">os</em>])
</pre><p>Constructs a new absolute file URI from a filename.</p></div>

<div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>abs</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
abs($<em class="replaceable">base_uri</em>)
</pre><p>Returns an absolute URI reference. If
<tt class="literal">$</tt><em class="replaceable"><tt>uri</tt></em> is already
absolute, then a reference to
<tt class="literal">$</tt><em class="replaceable"><tt>uri</tt></em> is returned.
<tt class="literal">abs</tt> returns a new absolute URI that contains
<tt class="literal">$</tt><em class="replaceable"><tt>uri</tt></em> and
<tt class="literal">$</tt><em class="replaceable"><tt>base_uri</tt></em> if
<tt class="literal">$</tt><em class="replaceable"><tt>uri</tt></em> is relative.
</p></div>

<div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>as_string</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
as_string
</pre><p>Returns a URI object as a plain string.</p></div>

<div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>authority</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
authority([$<em class="replaceable">auth</em>])
</pre><p>Sets and gets the authority component of the
<tt class="literal">$</tt><em class="replaceable"><tt>uri</tt></em>. This component
will be escaped.
</p></div>

<div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>canonical</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
canonical
</pre><p>Returns a normalized version of the URI. This includes lowercasing
the scheme and hostname components, as well as removing an explicit
port specification (if it mtaches the default port).
<tt class="literal">canonical</tt> will return the original
<tt class="literal">$</tt><em class="replaceable"><tt>uri</tt></em> if
<tt class="literal">$</tt><em class="replaceable"><tt>uri</tt></em> was already in the
correct form.
</p></div>

<div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>clone</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
clone
</pre><p>Returns a copy of the URI.</p></div>

<div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>cwd</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
URI::file-&gt;cwd
</pre><p>Returns the current working directory as a file URI.</p></div>

<div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>default_port</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
default_port()
</pre><p>Returns the default port of the URI scheme that
<tt class="literal">$</tt><em class="replaceable"><tt>uri </tt></em>belongs to. You
cannot change the default port for a scheme.
</p></div>

<div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>eq</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
eq()
</pre><p>Compares two URIs.</p></div>

<div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>fragment</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
fragment([$<em class="replaceable">new_frag</em>])
</pre><p>Returns the fragment identifier of a URI reference as an escaped
string.
</p></div>

<div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>host</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
host([$<em class="replaceable">new_host</em>])
</pre><p>Sets and gets the unescaped hostname. To specify a different port:</p><blockquote><pre class="code">$<em class="replaceable">new_host</em> = "hostname:port_number"</pre></blockquote></div>

<div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>host_port</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
host_port([$<em class="replaceable">new_host_port</em>])
</pre><p>Sets and gets the host and port as a single unit. Hostname and port
are colon-separated.
</p></div>

<div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>new_abs</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
new_abs($<em class="replaceable">str</em>, $<em class="replaceable">base_uri</em>)
</pre><p>Creates a new absolute URI object.
<tt class="literal">$</tt><em class="replaceable"><tt>str</tt></em> represents the
absolute URI, and
<tt class="literal">$</tt><em class="replaceable"><tt>base_uri</tt></em> represents
the relative URI.
</p></div>

<div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>opaque</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
opaque([$<em class="replaceable">new_opaque_value</em>])
</pre><p>Sets and gets the scheme-specific part of
<tt class="literal">$</tt><em class="replaceable"><tt>uri</tt></em>.
</p></div>

<div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>path</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
path([$<em class="replaceable">path</em>])
</pre><p>Sets and gets the escaped path component of
<tt class="literal">$</tt><em class="replaceable"><tt>uri</tt></em>. Returns empty
string ("") if there is no path.
</p></div>

<div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>path</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
path([$<em class="replaceable">new_path</em>])
</pre><p>Gets and sets the same value as <tt class="literal">opaque</tt>, unless the
URI supports the generic syntax for heirarchical namespaces.
<tt class="literal">path</tt> returns the part of the URI between the
hostname and the fragment.
</p></div>

<div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>path_query</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
path_query([$<em class="replaceable">path_here</em>])
</pre><p>Sets and gets the escapted path and query components.</p></div>

<div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>path_segments</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
path_segments([$<em class="replaceable">seg</em>])
</pre><p>Sets and gets the path. In a scalar content,
<tt class="literal">path_segments</tt> is equivalent to
<tt class="literal">path</tt>. In a list contents,
<tt class="literal">path_segments</tt> returns the unescaped path segments
that make up the path.
</p></div>

<div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>port</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
port([$<em class="replaceable">new_port</em>])
</pre><p>Sets and gets the port, which is an integer. If
<tt class="literal">$</tt><em class="replaceable"><tt>new_port</tt></em> is not
defined, then the default port of the URI scheme will be returned.
</p></div>

<div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>query</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
query([$<em class="replaceable">q</em>])
</pre><p>Sets and gets the escaped query component of
<tt class="literal">$</tt> <em class="emphasis">uri</em> .
</p></div>

<div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>query_form</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
query_form([$<em class="replaceable">key</em> =&gt; $<em class="replaceable">val</em>])
</pre><p>Sets and gets query components that use the urlencoded format.</p></div>

<div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>query_keywords</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
query_keywords([$<em class="replaceable">keywords</em>])
</pre><p>Sets and gets query components that use keywords separated by a
<tt class="literal">+</tt>.
</p></div>

<div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>rel</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
rel($<em class="replaceable">base_uri</em>)
</pre><p>Returns a relative URI reference, if one exists. Otherwise,
<tt class="literal">$</tt><em class="replaceable"><tt>uri</tt></em> is returned.
</p></div>

<div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>scheme</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
scheme([$<em class="replaceable">some_scheme</em>])
</pre><p>Sets and gets the scheme part of the URI. Such values include:
<tt class="literal">data</tt>, <tt class="literal">file</tt>,
<tt class="literal">ftp</tt>, <tt class="literal">gopher</tt>,
<tt class="literal">http</tt>, <tt class="literal">https</tt>,
<tt class="literal">ldap</tt>, <tt class="literal">mailto</tt>,
<tt class="literal">news</tt>, <tt class="literal">nntp</tt>,
<tt class="literal">pop</tt>, <tt class="literal">rlogin</tt>,
<tt class="literal">rsync</tt>, <tt class="literal">snews</tt>,
<tt class="literal">telnet</tt>, and <tt class="literal">ssh</tt>. In the case of
relative URIs, <tt class="literal">scheme</tt> will return
<tt class="literal">undef</tt>; otherwise, <tt class="literal">scheme</tt> will
return the scheme in lowercase. With
<tt class="literal">$</tt><em class="replaceable"><tt>some_scheme</tt></em>,
<tt class="literal">scheme</tt> will set the scheme of the current URI.
<tt class="literal">scheme</tt> will die if the scheme isn't supported, or
if it contains non-US-ASCII characters.
</p></div>

<div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>userinfo</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
userinfo([$<em class="replaceable">new_userinfo</em>])
</pre><p>Sets and gets the escaped
"userinfo" part of the authority
component (of the URI). Often, the userinfo will appear as a username
and password separated by a colon. Bear in mind that sending a
password in the clear is a bad idea.
</p></div>
</div>
</div>
<a name="perlnut2-CHP-20-SECT-5.2" /><div class="sect2">
<h3 class="sect2">20.5.2. URI::Escape</h3>

<p>This module escapes or unescapes
"unsafe" characters within a URL
string. Unsafe characters in URLs are described by RFC 1738. Before
you form URI::URL objects and use that class's
methods, you should make sure your strings are properly escaped. This
module does not create its own objects; it exports the following
functions:
</p>

<div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>uri_escape</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
uri_escape <em class="replaceable">uri</em>, [<em class="replaceable">regexp</em>]
</pre><p>Given a URI as the first parameter, returns the equivalent URI with
certain characters replaced with <tt class="literal">%</tt> followed by two
hexadecimal digits. The first parameter can be a text string, such as
<tt class="literal">"http:www.oreilly.com"</tt>, or an object of type
URI::URL. When invoked without a second parameter,
<tt class="literal">uri_escape</tt> escapes characters specified by RFC
1738. Otherwise, you can pass in a regular expression (in the context
of <tt class="literal">[ ]</tt>) of characters to escape as the second
parameter. For example:
</p><blockquote><pre class="code">$escaped_uri = uri_escape($uri, 'aeiou')</pre></blockquote><p>This code escapes all lowercase vowels in <tt class="literal">$uri</tt> and
returns the escaped version.
</p></div>

<a name="INDEX-2634" /><a name="INDEX-2635" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>uri_unescape</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
uri_unescape <em class="replaceable">uri</em>
</pre><p>Substitutes any instance of <tt class="literal">%</tt> followed by two
hexadecimal digits back into its original form and returns the entire
URI in unescaped form.<a name="INDEX-2634" /><a name="INDEX-2635" /> 
</p></div>

</div>
<a name="perlnut2-CHP-20-SECT-5.3" /><div class="sect2">
<h3 class="sect2">20.5.3. URI::URL</h3>

<p><a name="INDEX-2636" /><a name="INDEX-2637" /><a name="INDEX-2638" />This module creates URL objects that
store all the elements of a URL. These objects are used by the
<tt class="literal">request</tt> method of LWP::UserAgent for server
addresses, port numbers, filenames, protocol, and many other elements
that can be loaded into a URL.
</p>

<p><a name="INDEX-2639" />The <tt class="literal">new</tt> constructor
is used to make a URI::URL object:
</p>

<blockquote><pre class="code">$url = URI::URL-&gt;new($url_string [, $base_url])</pre></blockquote>

<p>This method creates a new URI::URL object with the URL given as the
first parameter. An optional base URL can be specified as the second
parameter and is useful for generating an absolute URL from a
relative URL.
</p>

<p>The following methods are for the URI::URL class.</p>


<a name="INDEX-2640" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>abs</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">url</em>-&gt;abs([<em class="replaceable">base</em>, [<em class="replaceable">scheme</em>]])
</pre><p><a name="INDEX-2640" />Returns the absolute URL, given a base.
If invoked with no parameters, any previous definition of the base is
used. The second parameter is a Boolean that modifies
<tt class="literal">abs</tt>'s behavior. When the second
parameter is nonzero, <tt class="literal">abs</tt> will accept a relative
URL with a scheme but no host, such as
<tt class="literal">http:index.html</tt>.
</p></div>

<a name="INDEX-2641" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>as_string</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">url</em>-&gt;as_string(  )
</pre><p><a name="INDEX-2641" />Returns the URL as a scalar string. All
defined components of the URL are included in the string.
</p></div>

<a name="INDEX-2642" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>base</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">url</em>-&gt;base([<em class="replaceable">base</em>])
</pre><p><a name="INDEX-2642" />Gets or sets the base URL associated
with the URL in this URI::URL object. The base URL is useful for
converting a relative URL into an absolute URL.
</p></div>

<a name="INDEX-2643" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>crack</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">url</em>-&gt;crack(  )
</pre><p><a name="INDEX-2643" />Returns an array with the following
data: (<tt class="literal">scheme</tt>, <tt class="literal">user</tt>,
<tt class="literal">password</tt>, <tt class="literal">host</tt>,
<tt class="literal">port</tt>, <tt class="literal">epath</tt>,
<tt class="literal">eparams</tt>, <tt class="literal">equery</tt>,
<tt class="literal">frag</tt>).
</p></div>

<a name="INDEX-2644" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>default_port</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">url</em>-&gt;default_port([<em class="replaceable">port</em>])
</pre><p><a name="INDEX-2644" />When invoked with no parameters,
this method returns the default port for the URL defined in the
object. The default port is based on the scheme used. Even if the
port for the URL is explicitly changed by the user with the
<tt class="literal">port</tt> method, the default port is always the same.
</p></div>

<a name="INDEX-2645" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>eparams</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">url</em>-&gt;eparams([<em class="replaceable">param</em>])
</pre><p><a name="INDEX-2645" />When invoked with no arguments,
this method returns the escaped parameter of the URL defined in the
object. When invoked with an argument, the object's
escaped parameter is assigned to that value.
</p></div>

<a name="INDEX-2646" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>epath</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">url</em>-&gt;epath(  )
</pre><p><a name="INDEX-2646" />When invoked with no parameters,
this method returns the escaped path of the URL defined in the
object. When invoked with a parameter, the object's
escaped path is assigned to that value.
</p></div>

<a name="INDEX-2647" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>eq</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">url</em>-&gt;eq(<em class="replaceable">other_url</em>)
</pre><p><a name="INDEX-2647" />Returns true when the
object's URL is equal to the URL specified.
</p></div>

<a name="INDEX-2648" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>equery</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">url</em>-&gt;equery([<em class="replaceable">string</em>])
</pre><p><a name="INDEX-2648" />When invoked with no arguments,
this method returns the escaped query string of the URL defined in
the object. When invoked with an argument, the
object's escaped query string is assigned to that
value.
</p></div>

<a name="INDEX-2649" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>frag</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">url</em>-&gt;frag([<em class="replaceable">frag</em>])
</pre><p><a name="INDEX-2649" />When invoked with no arguments,
this method returns the fragment of the URL defined in the object.
When invoked with an argument, the object's fragment
is assigned to that value.
</p></div>

<a name="INDEX-2650" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>full_path</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">url</em>-&gt;full_path(  )
</pre><p><a name="INDEX-2650" />Returns a string consisting of the
escaped path, escaped parameters, and escaped query string.
</p></div>

<a name="INDEX-2651" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>host</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">url</em>-&gt;host([<em class="replaceable">hostname</em>])
</pre><p><a name="INDEX-2651" />When invoked with no parameters, this
method returns the hostname in the URL defined in the object. When
invoked with a parameter, the object's hostname is
assigned to that value.
</p></div>

<a name="INDEX-2652" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>netloc</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">url</em>-&gt;netloc([<em class="replaceable">netloc</em>])
</pre><p><a name="INDEX-2652" />When invoked with no parameters,
this method returns the network location for the URL defined in the
object. The network location is a string composed of
"user:password@host:port", in which
the user, password, and port may be omitted when not defined. When
<tt class="literal">netloc</tt> is invoked with a parameter, the
object's network location is defined to that value.
Changes to the network location are reflected in the
<tt class="literal">user</tt>, <tt class="literal">password</tt>,
<tt class="literal">host</tt>, and <tt class="literal">port</tt> methods.
</p></div>

<a name="INDEX-2653" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>params</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">url</em>-&gt;params([<em class="replaceable">param</em>])
</pre><p><a name="INDEX-2653" />Same as <tt class="literal">eparams</tt>,
except that the parameter that is set/returned is not escaped.
</p></div>

<a name="INDEX-2654" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>password</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">url</em>-&gt;password([<em class="replaceable">passwd</em>])
</pre><p><a name="INDEX-2654" />When invoked with no parameters, this
method returns the password in the URL defined in the object. When
invoked with a parameter, the object's password is
assigned to that value.
</p></div>

<a name="INDEX-2655" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>path</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">url</em>-&gt;path([<em class="replaceable">pathname</em>])
</pre><p><a name="INDEX-2655" />Same as <tt class="literal">epath</tt>,
except that the path that is set/returned is not escaped.
</p></div>

<a name="INDEX-2656" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>port</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">url</em>-&gt;port([<em class="replaceable">port</em>])
</pre><p><a name="INDEX-2656" />When invoked with no parameters, this
method returns the port for the URL defined in the object. If a port
wasn't explicitly defined in the URL, a default port
is assumed. When invoked with a parameter, the
object's port is assigned to that value.
</p></div>

<a name="INDEX-2657" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>query</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">url</em>-&gt;query([<em class="replaceable">param</em>])
</pre><p><a name="INDEX-2657" />Same as <tt class="literal">equery</tt>,
except that the parameter that is set/returned is not escaped.
</p></div>

<a name="INDEX-2658" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>rel</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">url</em>-&gt;rel(<em class="replaceable">base</em>)
</pre><p><a name="INDEX-2658" />Given a base as a first parameter
or a previous definition of the base, returns the current
object's URL relative to the base URL.
</p></div>

<a name="INDEX-2659" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>scheme</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">url</em>-&gt;scheme([<em class="replaceable">scheme</em>])
</pre><p><a name="INDEX-2659" />When invoked with no parameters,
this method returns the scheme in the URL defined in the object. When
invoked with a parameter, the object's scheme is
assigned to that value.
</p></div>

<a name="INDEX-2660" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>strict</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
URI::URL::strict(<em class="replaceable">bool</em>)
</pre><p><a name="INDEX-2660" />When set, the URI::URL module calls
<tt class="literal">croak</tt> upon encountering an error. When disabled,
the URI::URL module may behave more gracefully. The function returns
the previous value of <tt class="literal">strict</tt>. This function is not
exported explicitly by the module.
</p></div>

<a name="INDEX-2661" /><a name="INDEX-2662" /><a name="INDEX-2663" /><a name="INDEX-2664" /><a name="INDEX-2665" /><a name="INDEX-2666" /><a name="INDEX-2667" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>user</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">url</em>-&gt;user([<em class="replaceable">username</em>])
</pre><p><a name="INDEX-2661" />When invoked with no parameters, this
method returns the user for the URL defined in the object. When
invoked with a parameter, the object's user is
assigned to that value.<a name="INDEX-2662" /><a name="INDEX-2663" /><a name="INDEX-2664" /><a name="INDEX-2665" /><a name="INDEX-2666" /><a name="INDEX-2667" /> 
</p></div>
</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch20_04.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="part9.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">20.4. The HTML Modules</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">IX. Perl/Tk</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="../cookbook/index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm">
</map>

</body></html>